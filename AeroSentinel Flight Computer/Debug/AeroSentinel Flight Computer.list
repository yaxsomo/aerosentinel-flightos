
AeroSentinel Flight Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001410  08014268  08014268  00024268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015678  08015678  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08015678  08015678  00025678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015680  08015680  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015680  08015680  00025680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015684  08015684  00025684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08015688  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          00002f50  20000200  20000200  00030200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003150  20003150  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .comment      000000b3  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 14 .debug_info   000249f8  00000000  00000000  000302e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000045ae  00000000  00000000  00054cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000020f0  00000000  00000000  00059290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000195d  00000000  00000000  0005b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026a45  00000000  00000000  0005ccdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002665c  00000000  00000000  00083722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd062  00000000  00000000  000a9d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a508  00000000  00000000  00186de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  001912e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000c7d  00000000  00000000  00191360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000030  00000000  00000000  00191fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014250 	.word	0x08014250

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08014250 	.word	0x08014250

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <UART_Transmit_Messages_BlackBox>:

extern UART_HandleTypeDef huart1;


void UART_Transmit_Messages_BlackBox(const char* str)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff f939 	bl	8000270 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <UART_Transmit_Messages_BlackBox+0x28>)
 800100a:	f009 f812 	bl	800a032 <HAL_UART_Transmit>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20002cac 	.word	0x20002cac

0800101c <file_exists>:



bool file_exists(const char* filename) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b0ca      	sub	sp, #296	; 0x128
 8001020:	af00      	add	r7, sp, #0
 8001022:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001026:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800102a:	6018      	str	r0, [r3, #0]
    FILINFO fno;
    FRESULT result = f_stat(filename, &fno);
 800102c:	f107 020c 	add.w	r2, r7, #12
 8001030:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001034:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001038:	4611      	mov	r1, r2
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	f00c fb84 	bl	800d748 <f_stat>
 8001040:	4603      	mov	r3, r0
 8001042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    return result == FR_OK && !(fno.fattrib & AM_DIR);
 8001046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10a      	bne.n	8001064 <file_exists+0x48>
 800104e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001052:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001056:	7a1b      	ldrb	r3, [r3, #8]
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <file_exists+0x48>
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <file_exists+0x4a>
 8001064:	2300      	movs	r3, #0
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
}
 800106c:	4618      	mov	r0, r3
 800106e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <buf_clear>:
	while(*buf++ != '\0') i++;
	return i;

}

void buf_clear(void){
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++ ){
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	e007      	b.n	8001094 <buf_clear+0x1c>
		data_buffer[i] = '\0';
 8001084:	4a09      	ldr	r2, [pc, #36]	; (80010ac <buf_clear+0x34>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++ ){
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800109a:	dbf3      	blt.n	8001084 <buf_clear+0xc>
	}
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20002288 	.word	0x20002288

080010b0 <mount_sd_card>:


void mount_sd_card(){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "",0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	490a      	ldr	r1, [pc, #40]	; (80010e0 <mount_sd_card+0x30>)
 80010b8:	480a      	ldr	r0, [pc, #40]	; (80010e4 <mount_sd_card+0x34>)
 80010ba:	f00b fef7 	bl	800ceac <f_mount>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <mount_sd_card+0x38>)
 80010c4:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <mount_sd_card+0x38>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <mount_sd_card+0x26>
	{
		UART_Transmit_Messages_BlackBox("Error mounting the SD Card \r\n");
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <mount_sd_card+0x3c>)
 80010d0:	f7ff ff8e 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
	} else {
		UART_Transmit_Messages_BlackBox("SD Card mounted successfully! \r\n");
	}
}
 80010d4:	e002      	b.n	80010dc <mount_sd_card+0x2c>
		UART_Transmit_Messages_BlackBox("SD Card mounted successfully! \r\n");
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <mount_sd_card+0x40>)
 80010d8:	f7ff ff8a 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	08014268 	.word	0x08014268
 80010e4:	2000021c 	.word	0x2000021c
 80010e8:	20002284 	.word	0x20002284
 80010ec:	0801426c 	.word	0x0801426c
 80010f0:	0801428c 	.word	0x0801428c

080010f4 <check_free_space>:

void check_free_space() {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
    f_getfree("", &fre_clust, &pfs);
 80010fa:	4a37      	ldr	r2, [pc, #220]	; (80011d8 <check_free_space+0xe4>)
 80010fc:	4937      	ldr	r1, [pc, #220]	; (80011dc <check_free_space+0xe8>)
 80010fe:	4838      	ldr	r0, [pc, #224]	; (80011e0 <check_free_space+0xec>)
 8001100:	f00c fb5b 	bl	800d7ba <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <check_free_space+0xe4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	3b02      	subs	r3, #2
 800110c:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <check_free_space+0xe4>)
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	8952      	ldrh	r2, [r2, #10]
 8001112:	fb02 f303 	mul.w	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f9f4 	bl	8000504 <__aeabi_ui2d>
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <check_free_space+0xf0>)
 8001122:	f7ff fa69 	bl	80005f8 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fd3b 	bl	8000ba8 <__aeabi_d2uiz>
 8001132:	4603      	mov	r3, r0
 8001134:	4a2c      	ldr	r2, [pc, #176]	; (80011e8 <check_free_space+0xf4>)
 8001136:	6013      	str	r3, [r2, #0]
    float total_GB = (float)total / (1024.0 * 1024.0);
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <check_free_space+0xf4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001144:	eddf 6a29 	vldr	s13, [pc, #164]	; 80011ec <check_free_space+0xf8>
 8001148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114c:	edc7 7a01 	vstr	s15, [r7, #4]
    sprintf(data_buffer, "SD CARD Total Size: \t%.2f GB\r\n", total_GB);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f9f9 	bl	8000548 <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4925      	ldr	r1, [pc, #148]	; (80011f0 <check_free_space+0xfc>)
 800115c:	4825      	ldr	r0, [pc, #148]	; (80011f4 <check_free_space+0x100>)
 800115e:	f00d fd97 	bl	800ec90 <siprintf>
    UART_Transmit_Messages_BlackBox(data_buffer);
 8001162:	4824      	ldr	r0, [pc, #144]	; (80011f4 <check_free_space+0x100>)
 8001164:	f7ff ff44 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
    buf_clear();
 8001168:	f7ff ff86 	bl	8001078 <buf_clear>

    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <check_free_space+0xe4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	895b      	ldrh	r3, [r3, #10]
 8001172:	461a      	mov	r2, r3
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <check_free_space+0xe8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9c1 	bl	8000504 <__aeabi_ui2d>
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <check_free_space+0xf0>)
 8001188:	f7ff fa36 	bl	80005f8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fd08 	bl	8000ba8 <__aeabi_d2uiz>
 8001198:	4603      	mov	r3, r0
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <check_free_space+0x104>)
 800119c:	6013      	str	r3, [r2, #0]
    float free_space_GB = (float)free_space / (1024.0 * 1024.0);
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <check_free_space+0x104>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011aa:	eddf 6a10 	vldr	s13, [pc, #64]	; 80011ec <check_free_space+0xf8>
 80011ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b2:	edc7 7a00 	vstr	s15, [r7]
    sprintf(data_buffer, "SD CARD Free Space: \t%.2f GB\r\n", free_space_GB);
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f7ff f9c6 	bl	8000548 <__aeabi_f2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	490e      	ldr	r1, [pc, #56]	; (80011fc <check_free_space+0x108>)
 80011c2:	480c      	ldr	r0, [pc, #48]	; (80011f4 <check_free_space+0x100>)
 80011c4:	f00d fd64 	bl	800ec90 <siprintf>
    UART_Transmit_Messages_BlackBox(data_buffer);
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <check_free_space+0x100>)
 80011ca:	f7ff ff11 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20002688 	.word	0x20002688
 80011dc:	2000268c 	.word	0x2000268c
 80011e0:	08014268 	.word	0x08014268
 80011e4:	3fe00000 	.word	0x3fe00000
 80011e8:	20002690 	.word	0x20002690
 80011ec:	49800000 	.word	0x49800000
 80011f0:	080142b0 	.word	0x080142b0
 80011f4:	20002288 	.word	0x20002288
 80011f8:	20002694 	.word	0x20002694
 80011fc:	080142d0 	.word	0x080142d0

08001200 <create_file>:





void create_file(const char* filename) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    // Open file to write OR create it if it does not exist
    fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001208:	220b      	movs	r2, #11
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <create_file+0x40>)
 800120e:	f00b fe93 	bl	800cf38 <f_open>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <create_file+0x44>)
 8001218:	701a      	strb	r2, [r3, #0]

    if (fresult == FR_OK) {
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <create_file+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <create_file+0x30>
        UART_Transmit_Messages_BlackBox("File created successfully! \r\n");
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <create_file+0x48>)
 8001224:	f7ff fee4 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
        f_close(&fil);
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <create_file+0x40>)
 800122a:	f00c fa63 	bl	800d6f4 <f_close>
    } else {
        UART_Transmit_Messages_BlackBox("Error creating the file. \r\n");
    }
}
 800122e:	e002      	b.n	8001236 <create_file+0x36>
        UART_Transmit_Messages_BlackBox("Error creating the file. \r\n");
 8001230:	4806      	ldr	r0, [pc, #24]	; (800124c <create_file+0x4c>)
 8001232:	f7ff fedd 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20001254 	.word	0x20001254
 8001244:	20002284 	.word	0x20002284
 8001248:	080142f0 	.word	0x080142f0
 800124c:	08014310 	.word	0x08014310

08001250 <append_data_to_file>:

void append_data_to_file(const char* filename, const char* data) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    if (file_exists(filename)) {
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fede 	bl	800101c <file_exists>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <append_data_to_file+0x2a>
        // Open file to append data at the end
        fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 8001266:	2233      	movs	r2, #51	; 0x33
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	482d      	ldr	r0, [pc, #180]	; (8001320 <append_data_to_file+0xd0>)
 800126c:	f00b fe64 	bl	800cf38 <f_open>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <append_data_to_file+0xd4>)
 8001276:	701a      	strb	r2, [r3, #0]
 8001278:	e00b      	b.n	8001292 <append_data_to_file+0x42>
    } else {
    	create_file(filename);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffc0 	bl	8001200 <create_file>
        // Open file to write OR create it if it does not exist
        fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001280:	220b      	movs	r2, #11
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4826      	ldr	r0, [pc, #152]	; (8001320 <append_data_to_file+0xd0>)
 8001286:	f00b fe57 	bl	800cf38 <f_open>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <append_data_to_file+0xd4>)
 8001290:	701a      	strb	r2, [r3, #0]
    }

    if (fresult == FR_OK) {
 8001292:	4b24      	ldr	r3, [pc, #144]	; (8001324 <append_data_to_file+0xd4>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d13b      	bne.n	8001312 <append_data_to_file+0xc2>
        // Write data to the file
        UINT bytes_written;
        fresult = f_write(&fil, data, strlen(data), &bytes_written);
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f7fe ffe8 	bl	8000270 <strlen>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	6839      	ldr	r1, [r7, #0]
 80012a8:	481d      	ldr	r0, [pc, #116]	; (8001320 <append_data_to_file+0xd0>)
 80012aa:	f00c f811 	bl	800d2d0 <f_write>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <append_data_to_file+0xd4>)
 80012b4:	701a      	strb	r2, [r3, #0]

        if (fresult == FR_OK && bytes_written == strlen(data)) {
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <append_data_to_file+0xd4>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10a      	bne.n	80012d4 <append_data_to_file+0x84>
 80012be:	6838      	ldr	r0, [r7, #0]
 80012c0:	f7fe ffd6 	bl	8000270 <strlen>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d103      	bne.n	80012d4 <append_data_to_file+0x84>
            //UART_Transmit_Messages_BlackBox("Data written to the file successfully! \r\n");
            // Synchronize file information with the disk
            f_sync(&fil);
 80012cc:	4814      	ldr	r0, [pc, #80]	; (8001320 <append_data_to_file+0xd0>)
 80012ce:	f00c f993 	bl	800d5f8 <f_sync>
 80012d2:	e01a      	b.n	800130a <append_data_to_file+0xba>
        } else {
            if (fresult != FR_OK) {
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <append_data_to_file+0xd4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00a      	beq.n	80012f2 <append_data_to_file+0xa2>
                sprintf(data_buffer, "Error writing data to the file. Error code: %d \r\n", fresult);
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <append_data_to_file+0xd4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4911      	ldr	r1, [pc, #68]	; (8001328 <append_data_to_file+0xd8>)
 80012e4:	4811      	ldr	r0, [pc, #68]	; (800132c <append_data_to_file+0xdc>)
 80012e6:	f00d fcd3 	bl	800ec90 <siprintf>
                UART_Transmit_Messages_BlackBox(data_buffer);
 80012ea:	4810      	ldr	r0, [pc, #64]	; (800132c <append_data_to_file+0xdc>)
 80012ec:	f7ff fe80 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
 80012f0:	e00b      	b.n	800130a <append_data_to_file+0xba>
            } else {
                sprintf(data_buffer, "Error: Incorrect number of bytes written. Expected: %d, Actual: %d \r\n",
 80012f2:	6838      	ldr	r0, [r7, #0]
 80012f4:	f7fe ffbc 	bl	8000270 <strlen>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <append_data_to_file+0xe0>)
 80012fe:	480b      	ldr	r0, [pc, #44]	; (800132c <append_data_to_file+0xdc>)
 8001300:	f00d fcc6 	bl	800ec90 <siprintf>
                        strlen(data), bytes_written);
                UART_Transmit_Messages_BlackBox(data_buffer);
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <append_data_to_file+0xdc>)
 8001306:	f7ff fe73 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
            }
        }

        // Close file
        f_close(&fil);
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <append_data_to_file+0xd0>)
 800130c:	f00c f9f2 	bl	800d6f4 <f_close>
    } else {
        UART_Transmit_Messages_BlackBox("Error opening the file for writing. \r\n");
    }
}
 8001310:	e002      	b.n	8001318 <append_data_to_file+0xc8>
        UART_Transmit_Messages_BlackBox("Error opening the file for writing. \r\n");
 8001312:	4808      	ldr	r0, [pc, #32]	; (8001334 <append_data_to_file+0xe4>)
 8001314:	f7ff fe6c 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20001254 	.word	0x20001254
 8001324:	20002284 	.word	0x20002284
 8001328:	0801432c 	.word	0x0801432c
 800132c:	20002288 	.word	0x20002288
 8001330:	08014360 	.word	0x08014360
 8001334:	080143a8 	.word	0x080143a8

08001338 <QMC_init>:



//###############################################################################################################
uint32_t QMC_init(I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af04      	add	r7, sp, #16
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
	uint8_t array[2];
	magneto_sensor.i2c=i2c;
 8001344:	4a33      	ldr	r2, [pc, #204]	; (8001414 <QMC_init+0xdc>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
	magneto_sensor.Control_Register=0x11;
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <QMC_init+0xdc>)
 800134c:	2211      	movs	r2, #17
 800134e:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 8001350:	2301      	movs	r3, #1
 8001352:	733b      	strb	r3, [r7, #12]
	array[1]=magneto_sensor.Control_Register;
 8001354:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <QMC_init+0xdc>)
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	737b      	strb	r3, [r7, #13]

	if(Output_Data_Rate==200)magneto_sensor.Control_Register|=0b00001100;
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	2bc8      	cmp	r3, #200	; 0xc8
 800135e:	d107      	bne.n	8001370 <QMC_init+0x38>
 8001360:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <QMC_init+0xdc>)
 8001362:	791b      	ldrb	r3, [r3, #4]
 8001364:	f043 030c 	orr.w	r3, r3, #12
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <QMC_init+0xdc>)
 800136c:	711a      	strb	r2, [r3, #4]
 800136e:	e024      	b.n	80013ba <QMC_init+0x82>
	else if(Output_Data_Rate==100)magneto_sensor.Control_Register|=0b00001000;
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d107      	bne.n	8001386 <QMC_init+0x4e>
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <QMC_init+0xdc>)
 8001378:	791b      	ldrb	r3, [r3, #4]
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <QMC_init+0xdc>)
 8001382:	711a      	strb	r2, [r3, #4]
 8001384:	e019      	b.n	80013ba <QMC_init+0x82>
	else if(Output_Data_Rate==50)magneto_sensor.Control_Register|=0b00000100;
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	2b32      	cmp	r3, #50	; 0x32
 800138a:	d107      	bne.n	800139c <QMC_init+0x64>
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <QMC_init+0xdc>)
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <QMC_init+0xdc>)
 8001398:	711a      	strb	r2, [r3, #4]
 800139a:	e00e      	b.n	80013ba <QMC_init+0x82>
	else if(Output_Data_Rate==10)magneto_sensor.Control_Register|=0b00000000;
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b0a      	cmp	r3, #10
 80013a0:	d104      	bne.n	80013ac <QMC_init+0x74>
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <QMC_init+0xdc>)
 80013a4:	791a      	ldrb	r2, [r3, #4]
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <QMC_init+0xdc>)
 80013a8:	711a      	strb	r2, [r3, #4]
 80013aa:	e006      	b.n	80013ba <QMC_init+0x82>
	else magneto_sensor.Control_Register|=0b00001100;
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <QMC_init+0xdc>)
 80013ae:	791b      	ldrb	r3, [r3, #4]
 80013b0:	f043 030c 	orr.w	r3, r3, #12
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <QMC_init+0xdc>)
 80013b8:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <QMC_init+0xdc>)
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	2364      	movs	r3, #100	; 0x64
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	220b      	movs	r2, #11
 80013d0:	211a      	movs	r1, #26
 80013d2:	f005 fffd 	bl	80073d0 <HAL_I2C_Mem_Write>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <QMC_init+0xa8>
 80013dc:	2301      	movs	r3, #1
 80013de:	e014      	b.n	800140a <QMC_init+0xd2>
	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <QMC_init+0xdc>)
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	2364      	movs	r3, #100	; 0x64
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2301      	movs	r3, #1
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	3301      	adds	r3, #1
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2301      	movs	r3, #1
 80013f6:	2209      	movs	r2, #9
 80013f8:	211a      	movs	r1, #26
 80013fa:	f005 ffe9 	bl	80073d0 <HAL_I2C_Mem_Write>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <QMC_init+0xd0>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <QMC_init+0xd2>

	return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20002698 	.word	0x20002698

08001418 <QMC_read>:

uint8_t QMC_read()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af04      	add	r7, sp, #16
	  magneto_sensor.datas[0]=0;
 800141e:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <QMC_read+0x138>)
 8001420:	2200      	movs	r2, #0
 8001422:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x06, 1, magneto_sensor.datas, 1, 100);
 8001424:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <QMC_read+0x138>)
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	2364      	movs	r3, #100	; 0x64
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	2301      	movs	r3, #1
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <QMC_read+0x13c>)
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	2206      	movs	r2, #6
 8001438:	211a      	movs	r1, #26
 800143a:	f006 f8c3 	bl	80075c4 <HAL_I2C_Mem_Read>

	  if((magneto_sensor.datas[0]&0x01)==1)
 800143e:	4b44      	ldr	r3, [pc, #272]	; (8001550 <QMC_read+0x138>)
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d075      	beq.n	8001536 <QMC_read+0x11e>
	  {
		  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x00, 1, magneto_sensor.datas, 6, 100);
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <QMC_read+0x138>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	2364      	movs	r3, #100	; 0x64
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	2306      	movs	r3, #6
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <QMC_read+0x13c>)
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2301      	movs	r3, #1
 800145c:	2200      	movs	r2, #0
 800145e:	211a      	movs	r1, #26
 8001460:	f006 f8b0 	bl	80075c4 <HAL_I2C_Mem_Read>
		  magneto_sensor.Xaxis= (magneto_sensor.datas[1]<<8) | magneto_sensor.datas[0];
 8001464:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <QMC_read+0x138>)
 8001466:	799b      	ldrb	r3, [r3, #6]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21a      	sxth	r2, r3
 800146c:	4b38      	ldr	r3, [pc, #224]	; (8001550 <QMC_read+0x138>)
 800146e:	795b      	ldrb	r3, [r3, #5]
 8001470:	b21b      	sxth	r3, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	b21a      	sxth	r2, r3
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <QMC_read+0x138>)
 8001478:	819a      	strh	r2, [r3, #12]
		  magneto_sensor.Yaxis= (magneto_sensor.datas[3]<<8) | magneto_sensor.datas[2];
 800147a:	4b35      	ldr	r3, [pc, #212]	; (8001550 <QMC_read+0x138>)
 800147c:	7a1b      	ldrb	r3, [r3, #8]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <QMC_read+0x138>)
 8001484:	79db      	ldrb	r3, [r3, #7]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21a      	sxth	r2, r3
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <QMC_read+0x138>)
 800148e:	81da      	strh	r2, [r3, #14]
		  magneto_sensor.Zaxis= (magneto_sensor.datas[5]<<8) | magneto_sensor.datas[4];
 8001490:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <QMC_read+0x138>)
 8001492:	7a9b      	ldrb	r3, [r3, #10]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <QMC_read+0x138>)
 800149a:	7a5b      	ldrb	r3, [r3, #9]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <QMC_read+0x138>)
 80014a4:	821a      	strh	r2, [r3, #16]

		  magneto_sensor.compas=atan2f(magneto_sensor.Yaxis,magneto_sensor.Xaxis)*180.00/M_PI;
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <QMC_read+0x138>)
 80014a8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b4:	4b26      	ldr	r3, [pc, #152]	; (8001550 <QMC_read+0x138>)
 80014b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014ba:	ee07 3a10 	vmov	s14, r3
 80014be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014c2:	eef0 0a47 	vmov.f32	s1, s14
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	f011 f939 	bl	8012740 <atan2f>
 80014ce:	ee10 3a10 	vmov	r3, s0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f838 	bl	8000548 <__aeabi_f2d>
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <QMC_read+0x140>)
 80014de:	f7ff f88b 	bl	80005f8 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	a317      	add	r3, pc, #92	; (adr r3, 8001548 <QMC_read+0x130>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f9ac 	bl	800084c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb74 	bl	8000be8 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <QMC_read+0x138>)
 8001504:	6193      	str	r3, [r2, #24]

		  if(magneto_sensor.compas>0)
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <QMC_read+0x138>)
 8001508:	edd3 7a06 	vldr	s15, [r3, #24]
 800150c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	dd04      	ble.n	8001520 <QMC_read+0x108>
		  {
			  magneto_sensor.heading= magneto_sensor.compas;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <QMC_read+0x138>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <QMC_read+0x138>)
 800151c:	6153      	str	r3, [r2, #20]
 800151e:	e00c      	b.n	800153a <QMC_read+0x122>
		  }
		  else
		  {
			  magneto_sensor.heading=360+magneto_sensor.compas;
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <QMC_read+0x138>)
 8001522:	edd3 7a06 	vldr	s15, [r3, #24]
 8001526:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800155c <QMC_read+0x144>
 800152a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <QMC_read+0x138>)
 8001530:	edc3 7a05 	vstr	s15, [r3, #20]
 8001534:	e001      	b.n	800153a <QMC_read+0x122>
		  }
	  }
	  else
	  {
		  return 1;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <QMC_read+0x124>
	  }
return 0;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	f3af 8000 	nop.w
 8001548:	54442d18 	.word	0x54442d18
 800154c:	400921fb 	.word	0x400921fb
 8001550:	20002698 	.word	0x20002698
 8001554:	2000269d 	.word	0x2000269d
 8001558:	40668000 	.word	0x40668000
 800155c:	43b40000 	.word	0x43b40000

08001560 <Transmit_Compass_Data>:
}




CompassData Transmit_Compass_Data(){
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]


		if(QMC_read() == 0)
 8001568:	f7ff ff56 	bl	8001418 <QMC_read>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d149      	bne.n	8001606 <Transmit_Compass_Data+0xa6>
		{
			float heading = magneto_sensor.heading;
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <Transmit_Compass_Data+0xc8>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	60fb      	str	r3, [r7, #12]
			//sprintf(mag_buffer, "X=%d, Y=%d, Z=%d \r\n", magneto_sensor.Xaxis, magneto_sensor.Yaxis, magneto_sensor.Zaxis);
			//sprintf(mag_heading_buffer, "HEADING : %.1f\r\n",magneto_sensor.heading);
			//UART_Transmit_Messages_Magnetometer(mag_buffer);
			//UART_Transmit_Messages_Magnetometer(mag_heading_buffer);

	        const int numDirections = sizeof(directions) / sizeof(directions[0]);
 8001578:	2309      	movs	r3, #9
 800157a:	60bb      	str	r3, [r7, #8]
	        const char* direction = "Unknown";
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <Transmit_Compass_Data+0xcc>)
 800157e:	617b      	str	r3, [r7, #20]

	        for (int i = 0; i < numDirections; ++i) {
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	e02e      	b.n	80015e4 <Transmit_Compass_Data+0x84>
	            if (heading >= directions[i].min && heading <= directions[i].max) {
 8001586:	492a      	ldr	r1, [pc, #168]	; (8001630 <Transmit_Compass_Data+0xd0>)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ed97 7a03 	vldr	s14, [r7, #12]
 800159c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	db1b      	blt.n	80015de <Transmit_Compass_Data+0x7e>
 80015a6:	4922      	ldr	r1, [pc, #136]	; (8001630 <Transmit_Compass_Data+0xd0>)
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	3304      	adds	r3, #4
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80015be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c6:	d80a      	bhi.n	80015de <Transmit_Compass_Data+0x7e>
	                direction = directions[i].direction;
 80015c8:	4919      	ldr	r1, [pc, #100]	; (8001630 <Transmit_Compass_Data+0xd0>)
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	3308      	adds	r3, #8
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	617b      	str	r3, [r7, #20]
	                break;
 80015dc:	e006      	b.n	80015ec <Transmit_Compass_Data+0x8c>
	        for (int i = 0; i < numDirections; ++i) {
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	3301      	adds	r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbcc      	blt.n	8001586 <Transmit_Compass_Data+0x26>
	            }
	        }

	        compass_data.heading = heading;
 80015ec:	4a11      	ldr	r2, [pc, #68]	; (8001634 <Transmit_Compass_Data+0xd4>)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6013      	str	r3, [r2, #0]
	        compass_data.direction = direction;
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <Transmit_Compass_Data+0xd4>)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	6053      	str	r3, [r2, #4]

	        return compass_data;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <Transmit_Compass_Data+0xd4>)
 80015fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001600:	e883 0003 	stmia.w	r3, {r0, r1}
 8001604:	e00c      	b.n	8001620 <Transmit_Compass_Data+0xc0>

		}
		else
		{
	        compass_data.heading = 0;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <Transmit_Compass_Data+0xd4>)
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
	        compass_data.direction = "ERR";
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <Transmit_Compass_Data+0xd4>)
 8001610:	4a09      	ldr	r2, [pc, #36]	; (8001638 <Transmit_Compass_Data+0xd8>)
 8001612:	605a      	str	r2, [r3, #4]

	        return compass_data;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a07      	ldr	r2, [pc, #28]	; (8001634 <Transmit_Compass_Data+0xd4>)
 8001618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800161c:	e883 0003 	stmia.w	r3, {r0, r1}
		}

}
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20002698 	.word	0x20002698
 800162c:	08014458 	.word	0x08014458
 8001630:	08014b0c 	.word	0x08014b0c
 8001634:	200026b4 	.word	0x200026b4
 8001638:	08014460 	.word	0x08014460

0800163c <UART_Transmit_String>:

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart1;

void UART_Transmit_String(const char* str)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7fe fe13 	bl	8000270 <strlen>
 800164a:	4603      	mov	r3, r0
 800164c:	b29a      	uxth	r2, r3
 800164e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4803      	ldr	r0, [pc, #12]	; (8001664 <UART_Transmit_String+0x28>)
 8001656:	f008 fcec 	bl	800a032 <HAL_UART_Transmit>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20002cac 	.word	0x20002cac

08001668 <printIntroTitle>:


void printIntroTitle()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
    UART_Transmit_String("\r\n");
 800166c:	480e      	ldr	r0, [pc, #56]	; (80016a8 <printIntroTitle+0x40>)
 800166e:	f7ff ffe5 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 8001672:	480e      	ldr	r0, [pc, #56]	; (80016ac <printIntroTitle+0x44>)
 8001674:	f7ff ffe2 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("*               AEROSENTINEL Flight Computer           *\r\n");
 8001678:	480d      	ldr	r0, [pc, #52]	; (80016b0 <printIntroTitle+0x48>)
 800167a:	f7ff ffdf 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("*    A versatile flight control system for your rocket  *\r\n");
 800167e:	480d      	ldr	r0, [pc, #52]	; (80016b4 <printIntroTitle+0x4c>)
 8001680:	f7ff ffdc 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 8001684:	4809      	ldr	r0, [pc, #36]	; (80016ac <printIntroTitle+0x44>)
 8001686:	f7ff ffd9 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("               Welcome to AEROSENTINEL CLI              \r\n");
 800168a:	480b      	ldr	r0, [pc, #44]	; (80016b8 <printIntroTitle+0x50>)
 800168c:	f7ff ffd6 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <printIntroTitle+0x44>)
 8001692:	f7ff ffd3 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("\r\n");
 8001696:	4804      	ldr	r0, [pc, #16]	; (80016a8 <printIntroTitle+0x40>)
 8001698:	f7ff ffd0 	bl	800163c <UART_Transmit_String>
    mount_sd_card();
 800169c:	f7ff fd08 	bl	80010b0 <mount_sd_card>
    check_free_space();
 80016a0:	f7ff fd28 	bl	80010f4 <check_free_space>

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	08014464 	.word	0x08014464
 80016ac:	08014468 	.word	0x08014468
 80016b0:	080144a4 	.word	0x080144a4
 80016b4:	080144e0 	.word	0x080144e0
 80016b8:	0801451c 	.word	0x0801451c

080016bc <printOptions>:

void printOptions(){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
    UART_Transmit_String("\r\nChoose an option:\r\n");
 80016c0:	480f      	ldr	r0, [pc, #60]	; (8001700 <printOptions+0x44>)
 80016c2:	f7ff ffbb 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("0 - Initialize Flight Computer\r\n");
 80016c6:	480f      	ldr	r0, [pc, #60]	; (8001704 <printOptions+0x48>)
 80016c8:	f7ff ffb8 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("1 - Calibrate IMU\r\n");
 80016cc:	480e      	ldr	r0, [pc, #56]	; (8001708 <printOptions+0x4c>)
 80016ce:	f7ff ffb5 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("2 - Read IMU Data\r\n");
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <printOptions+0x50>)
 80016d4:	f7ff ffb2 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("3 - Read Barometer Data\r\n");
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <printOptions+0x54>)
 80016da:	f7ff ffaf 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("4 - Read Magnetometer Data\r\n");
 80016de:	480d      	ldr	r0, [pc, #52]	; (8001714 <printOptions+0x58>)
 80016e0:	f7ff ffac 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("5 - Read Temperature Sensor Data\r\n");
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <printOptions+0x5c>)
 80016e6:	f7ff ffa9 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("6 - Read All Sensors\r\n");
 80016ea:	480c      	ldr	r0, [pc, #48]	; (800171c <printOptions+0x60>)
 80016ec:	f7ff ffa6 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("7 - Execute Kalman Filtering and Print [KO for now]\r\n");
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <printOptions+0x64>)
 80016f2:	f7ff ffa3 	bl	800163c <UART_Transmit_String>
    UART_Transmit_String("\r\n");
 80016f6:	480b      	ldr	r0, [pc, #44]	; (8001724 <printOptions+0x68>)
 80016f8:	f7ff ffa0 	bl	800163c <UART_Transmit_String>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	08014558 	.word	0x08014558
 8001704:	08014570 	.word	0x08014570
 8001708:	08014594 	.word	0x08014594
 800170c:	080145a8 	.word	0x080145a8
 8001710:	080145bc 	.word	0x080145bc
 8001714:	080145d8 	.word	0x080145d8
 8001718:	080145f8 	.word	0x080145f8
 800171c:	0801461c 	.word	0x0801461c
 8001720:	08014634 	.word	0x08014634
 8001724:	08014464 	.word	0x08014464

08001728 <initialization_procedure>:


int32_t initialization_procedure(){
 8001728:	b580      	push	{r7, lr}
 800172a:	b0d0      	sub	sp, #320	; 0x140
 800172c:	af00      	add	r7, sp, #0


	  int32_t fc_initialization_state;


	  UART_Transmit_String("Starting initialization process.. \r\n");
 800172e:	482a      	ldr	r0, [pc, #168]	; (80017d8 <initialization_procedure+0xb0>)
 8001730:	f7ff ff84 	bl	800163c <UART_Transmit_String>
	  int32_t imu_init_state = IMU_Initialization();
 8001734:	f000 fabe 	bl	8001cb4 <IMU_Initialization>
 8001738:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	  char imu_buffer[100];

	  HAL_Delay(100);
 800173c:	2064      	movs	r0, #100	; 0x64
 800173e:	f004 fc6d 	bl	800601c <HAL_Delay>

	  sprintf(imu_buffer, "IMU Initialization. Code : %ld  \r\n", imu_init_state);
 8001742:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001746:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800174a:	4924      	ldr	r1, [pc, #144]	; (80017dc <initialization_procedure+0xb4>)
 800174c:	4618      	mov	r0, r3
 800174e:	f00d fa9f 	bl	800ec90 <siprintf>
	  UART_Transmit_String(imu_buffer);
 8001752:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff70 	bl	800163c <UART_Transmit_String>

	  HAL_Delay(100);
 800175c:	2064      	movs	r0, #100	; 0x64
 800175e:	f004 fc5d 	bl	800601c <HAL_Delay>

	  int32_t pressure_init_state = Pressure_Init();
 8001762:	f001 fe03 	bl	800336c <Pressure_Init>
 8001766:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	  char pressure_buffer[100];
	  sprintf(pressure_buffer, "Pressure Initialization. Code : %ld  \r\n", pressure_init_state);
 800176a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800176e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001772:	491b      	ldr	r1, [pc, #108]	; (80017e0 <initialization_procedure+0xb8>)
 8001774:	4618      	mov	r0, r3
 8001776:	f00d fa8b 	bl	800ec90 <siprintf>
	  UART_Transmit_String(pressure_buffer);
 800177a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff5c 	bl	800163c <UART_Transmit_String>

	  HAL_Delay(100);
 8001784:	2064      	movs	r0, #100	; 0x64
 8001786:	f004 fc49 	bl	800601c <HAL_Delay>

	  int32_t magnetometer_init_state = QMC_init(&hi2c1, 200);
 800178a:	21c8      	movs	r1, #200	; 0xc8
 800178c:	4815      	ldr	r0, [pc, #84]	; (80017e4 <initialization_procedure+0xbc>)
 800178e:	f7ff fdd3 	bl	8001338 <QMC_init>
 8001792:	4603      	mov	r3, r0
 8001794:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  char magneto_buffer[100];
	  sprintf(magneto_buffer, "Magnetometer Initialization. Code : %ld  \r\n", magnetometer_init_state);
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800179e:	4912      	ldr	r1, [pc, #72]	; (80017e8 <initialization_procedure+0xc0>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f00d fa75 	bl	800ec90 <siprintf>
	  UART_Transmit_String(magneto_buffer);
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff47 	bl	800163c <UART_Transmit_String>

	  HAL_Delay(100);
 80017ae:	2064      	movs	r0, #100	; 0x64
 80017b0:	f004 fc34 	bl	800601c <HAL_Delay>




	  fc_initialization_state = imu_init_state + pressure_init_state + magnetometer_init_state;
 80017b4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80017b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80017bc:	4413      	add	r3, r2
 80017be:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80017c2:	4413      	add	r3, r2
 80017c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	  return fc_initialization_state;
 80017c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	0801466c 	.word	0x0801466c
 80017dc:	08014694 	.word	0x08014694
 80017e0:	080146b8 	.word	0x080146b8
 80017e4:	20002a8c 	.word	0x20002a8c
 80017e8:	080146e0 	.word	0x080146e0

080017ec <sensors_readings>:


void sensors_readings() {
 80017ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f0:	b0d6      	sub	sp, #344	; 0x158
 80017f2:	af0e      	add	r7, sp, #56	; 0x38
    // Call each sensor function and receive the data structures
    IMUData imu_data = Transmit_IMU_Data();
 80017f4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fce5 	bl	80021c8 <Transmit_IMU_Data>
    TemperatureData temperature_data = Transmit_Temperature();
 80017fe:	f002 f979 	bl	8003af4 <Transmit_Temperature>
 8001802:	eef0 7a40 	vmov.f32	s15, s0
 8001806:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
    PressureTempData pressure_temp_data = Transmit_Pressure_Temp_Data();
 800180a:	f002 f921 	bl	8003a50 <Transmit_Pressure_Temp_Data>
 800180e:	eeb0 7a40 	vmov.f32	s14, s0
 8001812:	eef0 7a60 	vmov.f32	s15, s1
 8001816:	ed87 7a3d 	vstr	s14, [r7, #244]	; 0xf4
 800181a:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
    CompassData compass_data = Transmit_Compass_Data();
 800181e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fe9c 	bl	8001560 <Transmit_Compass_Data>
    // Concatenate IMU data to buffer
    sprintf(buffer, "IMU Data: \r\n"
    		"Acceleration (X=%.2f g, Y=%.2f g, Z=%.2f g), \r\n"
    		"Angular Rate (X=%.2f°/s, Y=%.2f°/s, Z=%.2f°/s),\r\n"
    		"Roll=%.2f°, Pitch=%.2f° \r\n",
            imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001828:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
    sprintf(buffer, "IMU Data: \r\n"
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe8b 	bl	8000548 <__aeabi_f2d>
 8001832:	e9c7 0106 	strd	r0, r1, [r7, #24]
            imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    sprintf(buffer, "IMU Data: \r\n"
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe84 	bl	8000548 <__aeabi_f2d>
 8001840:	4682      	mov	sl, r0
 8001842:	468b      	mov	fp, r1
            imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001844:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    sprintf(buffer, "IMU Data: \r\n"
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe7d 	bl	8000548 <__aeabi_f2d>
 800184e:	e9c7 0104 	strd	r0, r1, [r7, #16]
            imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z,
 8001852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    sprintf(buffer, "IMU Data: \r\n"
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe76 	bl	8000548 <__aeabi_f2d>
 800185c:	e9c7 0102 	strd	r0, r1, [r7, #8]
            imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z,
 8001860:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    sprintf(buffer, "IMU Data: \r\n"
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe6f 	bl	8000548 <__aeabi_f2d>
 800186a:	e9c7 0100 	strd	r0, r1, [r7]
            imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z,
 800186e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
    sprintf(buffer, "IMU Data: \r\n"
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe68 	bl	8000548 <__aeabi_f2d>
 8001878:	4680      	mov	r8, r0
 800187a:	4689      	mov	r9, r1
            imu_data.roll, imu_data.pitch);
 800187c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    sprintf(buffer, "IMU Data: \r\n"
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe61 	bl	8000548 <__aeabi_f2d>
 8001886:	4604      	mov	r4, r0
 8001888:	460d      	mov	r5, r1
            imu_data.roll, imu_data.pitch);
 800188a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
    sprintf(buffer, "IMU Data: \r\n"
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe5a 	bl	8000548 <__aeabi_f2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800189c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80018a0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80018a4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80018a8:	ed97 7b00 	vldr	d7, [r7]
 80018ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80018b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80018b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80018b8:	ed97 7b04 	vldr	d7, [r7, #16]
 80018bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80018c0:	e9cd ab00 	strd	sl, fp, [sp]
 80018c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018c8:	4937      	ldr	r1, [pc, #220]	; (80019a8 <sensors_readings+0x1bc>)
 80018ca:	f00d f9e1 	bl	800ec90 <siprintf>
    UART_Transmit_String(buffer);
 80018ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff feb2 	bl	800163c <UART_Transmit_String>
    append_data_to_file("sensor_data.txt", buffer);
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	4619      	mov	r1, r3
 80018de:	4833      	ldr	r0, [pc, #204]	; (80019ac <sensors_readings+0x1c0>)
 80018e0:	f7ff fcb6 	bl	8001250 <append_data_to_file>

    // Concatenate temperature data to buffer
    sprintf(buffer, "Temperature: %.2f°C \r\n", temperature_data.temperature_celsius/100);
 80018e4:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 80018e8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80019b0 <sensors_readings+0x1c4>
 80018ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018f0:	ee16 0a90 	vmov	r0, s13
 80018f4:	f7fe fe28 	bl	8000548 <__aeabi_f2d>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001900:	492c      	ldr	r1, [pc, #176]	; (80019b4 <sensors_readings+0x1c8>)
 8001902:	f00d f9c5 	bl	800ec90 <siprintf>
    UART_Transmit_String(buffer);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fe96 	bl	800163c <UART_Transmit_String>
    append_data_to_file("sensor_data.txt", buffer);
 8001910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001914:	4619      	mov	r1, r3
 8001916:	4825      	ldr	r0, [pc, #148]	; (80019ac <sensors_readings+0x1c0>)
 8001918:	f7ff fc9a 	bl	8001250 <append_data_to_file>

    // Concatenate pressure and temperature data to buffer
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
            pressure_temp_data.pressure_hpa, pressure_temp_data.temperature_celsius);
 800191c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe11 	bl	8000548 <__aeabi_f2d>
 8001926:	4604      	mov	r4, r0
 8001928:	460d      	mov	r5, r1
            pressure_temp_data.pressure_hpa, pressure_temp_data.temperature_celsius);
 800192a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe0a 	bl	8000548 <__aeabi_f2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800193c:	e9cd 2300 	strd	r2, r3, [sp]
 8001940:	4622      	mov	r2, r4
 8001942:	462b      	mov	r3, r5
 8001944:	491c      	ldr	r1, [pc, #112]	; (80019b8 <sensors_readings+0x1cc>)
 8001946:	f00d f9a3 	bl	800ec90 <siprintf>
    UART_Transmit_String(buffer);
 800194a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fe74 	bl	800163c <UART_Transmit_String>
    append_data_to_file("sensor_data.txt", buffer);
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	4619      	mov	r1, r3
 800195a:	4814      	ldr	r0, [pc, #80]	; (80019ac <sensors_readings+0x1c0>)
 800195c:	f7ff fc78 	bl	8001250 <append_data_to_file>

    // Concatenate compass data to buffer
    sprintf(buffer, "HEADING (YAW): %.1f\r\n", compass_data.heading);
 8001960:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fdef 	bl	8000548 <__aeabi_f2d>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001972:	4912      	ldr	r1, [pc, #72]	; (80019bc <sensors_readings+0x1d0>)
 8001974:	f00d f98c 	bl	800ec90 <siprintf>
    UART_Transmit_String(buffer);
 8001978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fe5d 	bl	800163c <UART_Transmit_String>
    append_data_to_file("sensor_data.txt", buffer);
 8001982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001986:	4619      	mov	r1, r3
 8001988:	4808      	ldr	r0, [pc, #32]	; (80019ac <sensors_readings+0x1c0>)
 800198a:	f7ff fc61 	bl	8001250 <append_data_to_file>

    UART_Transmit_String("------------------------------------------------------ \r\n");
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <sensors_readings+0x1d4>)
 8001990:	f7ff fe54 	bl	800163c <UART_Transmit_String>
    // Append the separator to the file
    append_data_to_file("sensor_data.txt", "------------------------------------------------------ \r\n");
 8001994:	490a      	ldr	r1, [pc, #40]	; (80019c0 <sensors_readings+0x1d4>)
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <sensors_readings+0x1c0>)
 8001998:	f7ff fc5a 	bl	8001250 <append_data_to_file>
}
 800199c:	bf00      	nop
 800199e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80019a2:	46bd      	mov	sp, r7
 80019a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019a8:	0801470c 	.word	0x0801470c
 80019ac:	08014798 	.word	0x08014798
 80019b0:	42c80000 	.word	0x42c80000
 80019b4:	080147a8 	.word	0x080147a8
 80019b8:	080147c0 	.word	0x080147c0
 80019bc:	080147f0 	.word	0x080147f0
 80019c0:	08014808 	.word	0x08014808

080019c4 <handleUserCommand>:



void handleUserCommand(char command)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b094      	sub	sp, #80	; 0x50
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int transmission_delay = 50;
 80019d0:	2332      	movs	r3, #50	; 0x32
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t numIterations = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (command)
 80019d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019dc:	3b30      	subs	r3, #48	; 0x30
 80019de:	2b07      	cmp	r3, #7
 80019e0:	f200 80c0 	bhi.w	8001b64 <handleUserCommand+0x1a0>
 80019e4:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <handleUserCommand+0x28>)
 80019e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ea:	bf00      	nop
 80019ec:	08001a0d 	.word	0x08001a0d
 80019f0:	08001a2b 	.word	0x08001a2b
 80019f4:	08001a31 	.word	0x08001a31
 80019f8:	08001a69 	.word	0x08001a69
 80019fc:	08001a9d 	.word	0x08001a9d
 8001a00:	08001ad5 	.word	0x08001ad5
 8001a04:	08001b09 	.word	0x08001b09
 8001a08:	08001b37 	.word	0x08001b37
    {
    case '0':
    	  uint32_t initialization_state = initialization_procedure();
 8001a0c:	f7ff fe8c 	bl	8001728 <initialization_procedure>
 8001a10:	4603      	mov	r3, r0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    	  if(initialization_state != 0){
 8001a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <handleUserCommand+0x5e>
    		  UART_Transmit_String("Error initializing the Flight Controller.");
 8001a1a:	4857      	ldr	r0, [pc, #348]	; (8001b78 <handleUserCommand+0x1b4>)
 8001a1c:	f7ff fe0e 	bl	800163c <UART_Transmit_String>
    	  } else{
    		  UART_Transmit_String("Flight Controller Initialized successfully!\n\n");
    	  }
        break;
 8001a20:	e0a4      	b.n	8001b6c <handleUserCommand+0x1a8>
    		  UART_Transmit_String("Flight Controller Initialized successfully!\n\n");
 8001a22:	4856      	ldr	r0, [pc, #344]	; (8001b7c <handleUserCommand+0x1b8>)
 8001a24:	f7ff fe0a 	bl	800163c <UART_Transmit_String>
        break;
 8001a28:	e0a0      	b.n	8001b6c <handleUserCommand+0x1a8>
    case '1':
			Calibrate_IMU();
 8001a2a:	f000 fb55 	bl	80020d8 <Calibrate_IMU>
        break;
 8001a2e:	e09d      	b.n	8001b6c <handleUserCommand+0x1a8>
    case '2':
    	numIterations = getNumberOfIterations();
 8001a30:	f000 f8b4 	bl	8001b9c <getNumberOfIterations>
 8001a34:	6338      	str	r0, [r7, #48]	; 0x30
    	UART_Transmit_String("\r\n----------------- \r\n");
 8001a36:	4852      	ldr	r0, [pc, #328]	; (8001b80 <handleUserCommand+0x1bc>)
 8001a38:	f7ff fe00 	bl	800163c <UART_Transmit_String>
    	UART_Transmit_String("IMU: \r\n");
 8001a3c:	4851      	ldr	r0, [pc, #324]	; (8001b84 <handleUserCommand+0x1c0>)
 8001a3e:	f7ff fdfd 	bl	800163c <UART_Transmit_String>
		for (uint32_t i = 0; i < numIterations; i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a46:	e00a      	b.n	8001a5e <handleUserCommand+0x9a>
		        {
			Transmit_IMU_Data();
 8001a48:	463b      	mov	r3, r7
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fbbc 	bl	80021c8 <Transmit_IMU_Data>
			HAL_Delay(transmission_delay);
 8001a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 fae2 	bl	800601c <HAL_Delay>
		for (uint32_t i = 0; i < numIterations; i++)
 8001a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d3f0      	bcc.n	8001a48 <handleUserCommand+0x84>
		        }
        break;
 8001a66:	e081      	b.n	8001b6c <handleUserCommand+0x1a8>
    case '3':
    	numIterations = getNumberOfIterations();
 8001a68:	f000 f898 	bl	8001b9c <getNumberOfIterations>
 8001a6c:	6338      	str	r0, [r7, #48]	; 0x30
    	  UART_Transmit_String("\r\n----------------- \r\n");
 8001a6e:	4844      	ldr	r0, [pc, #272]	; (8001b80 <handleUserCommand+0x1bc>)
 8001a70:	f7ff fde4 	bl	800163c <UART_Transmit_String>
    	  UART_Transmit_String("PRESSURE SENSOR: \r\n");
 8001a74:	4844      	ldr	r0, [pc, #272]	; (8001b88 <handleUserCommand+0x1c4>)
 8001a76:	f7ff fde1 	bl	800163c <UART_Transmit_String>
		for (uint32_t i = 0; i < numIterations; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a7e:	e008      	b.n	8001a92 <handleUserCommand+0xce>
		        {
			 Transmit_Pressure_Temp_Data();
 8001a80:	f001 ffe6 	bl	8003a50 <Transmit_Pressure_Temp_Data>
			 HAL_Delay(transmission_delay);
 8001a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 fac8 	bl	800601c <HAL_Delay>
		for (uint32_t i = 0; i < numIterations; i++)
 8001a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a8e:	3301      	adds	r3, #1
 8001a90:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3f2      	bcc.n	8001a80 <handleUserCommand+0xbc>
		        }
        break;
 8001a9a:	e067      	b.n	8001b6c <handleUserCommand+0x1a8>
    case '4':
    	numIterations = getNumberOfIterations();
 8001a9c:	f000 f87e 	bl	8001b9c <getNumberOfIterations>
 8001aa0:	6338      	str	r0, [r7, #48]	; 0x30
    	UART_Transmit_String("\r\n----------------- \r\n");
 8001aa2:	4837      	ldr	r0, [pc, #220]	; (8001b80 <handleUserCommand+0x1bc>)
 8001aa4:	f7ff fdca 	bl	800163c <UART_Transmit_String>
    	UART_Transmit_String("MAGNETOMETER SENSOR: \r\n");
 8001aa8:	4838      	ldr	r0, [pc, #224]	; (8001b8c <handleUserCommand+0x1c8>)
 8001aaa:	f7ff fdc7 	bl	800163c <UART_Transmit_String>
		for (uint32_t i = 0; i < numIterations; i++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ab2:	e00a      	b.n	8001aca <handleUserCommand+0x106>
		        {
			 Transmit_Compass_Data();
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fd52 	bl	8001560 <Transmit_Compass_Data>
			 HAL_Delay(transmission_delay);
 8001abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 faac 	bl	800601c <HAL_Delay>
		for (uint32_t i = 0; i < numIterations; i++)
 8001ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8001aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d3f0      	bcc.n	8001ab4 <handleUserCommand+0xf0>
		        }
        break;
 8001ad2:	e04b      	b.n	8001b6c <handleUserCommand+0x1a8>
    case '5':
    	numIterations = getNumberOfIterations();
 8001ad4:	f000 f862 	bl	8001b9c <getNumberOfIterations>
 8001ad8:	6338      	str	r0, [r7, #48]	; 0x30
    	UART_Transmit_String("\r\n----------------- \r\n");
 8001ada:	4829      	ldr	r0, [pc, #164]	; (8001b80 <handleUserCommand+0x1bc>)
 8001adc:	f7ff fdae 	bl	800163c <UART_Transmit_String>
    	UART_Transmit_String("TEMPERATURE SENSOR: \r\n");
 8001ae0:	482b      	ldr	r0, [pc, #172]	; (8001b90 <handleUserCommand+0x1cc>)
 8001ae2:	f7ff fdab 	bl	800163c <UART_Transmit_String>
		for (uint32_t i = 0; i < numIterations; i++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	643b      	str	r3, [r7, #64]	; 0x40
 8001aea:	e008      	b.n	8001afe <handleUserCommand+0x13a>
		        {
			  Transmit_Temperature();
 8001aec:	f002 f802 	bl	8003af4 <Transmit_Temperature>
			  HAL_Delay(transmission_delay);
 8001af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af2:	4618      	mov	r0, r3
 8001af4:	f004 fa92 	bl	800601c <HAL_Delay>
		for (uint32_t i = 0; i < numIterations; i++)
 8001af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001afa:	3301      	adds	r3, #1
 8001afc:	643b      	str	r3, [r7, #64]	; 0x40
 8001afe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3f2      	bcc.n	8001aec <handleUserCommand+0x128>
		        }
        break;
 8001b06:	e031      	b.n	8001b6c <handleUserCommand+0x1a8>
    case '6':
    	UART_Transmit_String("\r\n");
 8001b08:	4822      	ldr	r0, [pc, #136]	; (8001b94 <handleUserCommand+0x1d0>)
 8001b0a:	f7ff fd97 	bl	800163c <UART_Transmit_String>
    	numIterations = getNumberOfIterations();
 8001b0e:	f000 f845 	bl	8001b9c <getNumberOfIterations>
 8001b12:	6338      	str	r0, [r7, #48]	; 0x30
		for (uint32_t i = 0; i < numIterations; i++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b18:	e008      	b.n	8001b2c <handleUserCommand+0x168>
		        {
			sensors_readings();
 8001b1a:	f7ff fe67 	bl	80017ec <sensors_readings>
			HAL_Delay(transmission_delay);
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 fa7b 	bl	800601c <HAL_Delay>
		for (uint32_t i = 0; i < numIterations; i++)
 8001b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b28:	3301      	adds	r3, #1
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d3f2      	bcc.n	8001b1a <handleUserCommand+0x156>
		        }
        break;
 8001b34:	e01a      	b.n	8001b6c <handleUserCommand+0x1a8>
    case '7':
    	UART_Transmit_String("\r\n");
 8001b36:	4817      	ldr	r0, [pc, #92]	; (8001b94 <handleUserCommand+0x1d0>)
 8001b38:	f7ff fd80 	bl	800163c <UART_Transmit_String>
    	numIterations = getNumberOfIterations();
 8001b3c:	f000 f82e 	bl	8001b9c <getNumberOfIterations>
 8001b40:	6338      	str	r0, [r7, #48]	; 0x30
		for (uint32_t i = 0; i < numIterations; i++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b46:	e008      	b.n	8001b5a <handleUserCommand+0x196>
		        {
			execute_kalman();
 8001b48:	f001 fb3e 	bl	80031c8 <execute_kalman>
			HAL_Delay(transmission_delay);
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f004 fa64 	bl	800601c <HAL_Delay>
		for (uint32_t i = 0; i < numIterations; i++)
 8001b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b56:	3301      	adds	r3, #1
 8001b58:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d3f2      	bcc.n	8001b48 <handleUserCommand+0x184>
		        }
        break;
 8001b62:	e003      	b.n	8001b6c <handleUserCommand+0x1a8>
    default:
        UART_Transmit_String("Invalid command! Try again.\r\n");
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <handleUserCommand+0x1d4>)
 8001b66:	f7ff fd69 	bl	800163c <UART_Transmit_String>
        break;
 8001b6a:	bf00      	nop
    }

    printOptions();
 8001b6c:	f7ff fda6 	bl	80016bc <printOptions>
}
 8001b70:	bf00      	nop
 8001b72:	3750      	adds	r7, #80	; 0x50
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	08014844 	.word	0x08014844
 8001b7c:	08014870 	.word	0x08014870
 8001b80:	080148a0 	.word	0x080148a0
 8001b84:	080148b8 	.word	0x080148b8
 8001b88:	080148c0 	.word	0x080148c0
 8001b8c:	080148d4 	.word	0x080148d4
 8001b90:	080148ec 	.word	0x080148ec
 8001b94:	08014464 	.word	0x08014464
 8001b98:	08014904 	.word	0x08014904

08001b9c <getNumberOfIterations>:



// Function to get the number of iterations from the user
uint32_t getNumberOfIterations()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
    char inputBuffer[10];
    char inputChar;
    int bufferIndex = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]

    // Ask for the number of iterations
    UART_Transmit_String("\r\nEnter the number of iterations[Finish the integer with '$']: ");
 8001ba6:	4812      	ldr	r0, [pc, #72]	; (8001bf0 <getNumberOfIterations+0x54>)
 8001ba8:	f7ff fd48 	bl	800163c <UART_Transmit_String>

    // Read user input character by character until we encounter '\n'
    do
    {
        HAL_UART_Receive(&huart1, (uint8_t *)&inputChar, sizeof(inputChar), HAL_MAX_DELAY);
 8001bac:	1cf9      	adds	r1, r7, #3
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	480f      	ldr	r0, [pc, #60]	; (8001bf4 <getNumberOfIterations+0x58>)
 8001bb6:	f008 face 	bl	800a156 <HAL_UART_Receive>
        inputBuffer[bufferIndex++] = inputChar;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	617a      	str	r2, [r7, #20]
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	443b      	add	r3, r7
 8001bc6:	f803 2c14 	strb.w	r2, [r3, #-20]
    } while (inputChar != '$');
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	2b24      	cmp	r3, #36	; 0x24
 8001bce:	d1ed      	bne.n	8001bac <getNumberOfIterations+0x10>

    // Null-terminate the input buffer
    inputBuffer[bufferIndex] = '\0';
 8001bd0:	1d3a      	adds	r2, r7, #4
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]

    // Convert the input string to an integer using atoi
    int userInput = atoi(inputBuffer);
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f00c f9a9 	bl	800df34 <atoi>
 8001be2:	6138      	str	r0, [r7, #16]

    return userInput;
 8001be4:	693b      	ldr	r3, [r7, #16]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	08014924 	.word	0x08014924
 8001bf4:	20002cac 	.word	0x20002cac

08001bf8 <UART_Transmit_Messages_IMU>:
extern UART_HandleTypeDef huart1;
IMUData imu_data;


void UART_Transmit_Messages_IMU(const char* str)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7fe fb35 	bl	8000270 <strlen>
 8001c06:	4603      	mov	r3, r0
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4803      	ldr	r0, [pc, #12]	; (8001c20 <UART_Transmit_Messages_IMU+0x28>)
 8001c12:	f008 fa0e 	bl	800a032 <HAL_UART_Transmit>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20002cac 	.word	0x20002cac

08001c24 <platform_read>:

// Define the read function
int32_t platform_read(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	460b      	mov	r3, r1
 8001c32:	72fb      	strb	r3, [r7, #11]
 8001c34:	4613      	mov	r3, r2
 8001c36:	813b      	strh	r3, [r7, #8]

  // Perform the I2C read operation using HAL_I2C_Mem_Read
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8001c38:	7afb      	ldrb	r3, [r7, #11]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	2364      	movs	r3, #100	; 0x64
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	893b      	ldrh	r3, [r7, #8]
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2301      	movs	r3, #1
 8001c4a:	21d6      	movs	r1, #214	; 0xd6
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f005 fcb9 	bl	80075c4 <HAL_I2C_Mem_Read>
 8001c52:	4603      	mov	r3, r0
 8001c54:	75fb      	strb	r3, [r7, #23]

  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <platform_read+0x3c>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e001      	b.n	8001c64 <platform_read+0x40>
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <platform_write>:

// Define the write function
int32_t platform_write(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af04      	add	r7, sp, #16
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	607a      	str	r2, [r7, #4]
 8001c76:	461a      	mov	r2, r3
 8001c78:	460b      	mov	r3, r1
 8001c7a:	72fb      	strb	r3, [r7, #11]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	813b      	strh	r3, [r7, #8]

  // Perform the I2C write operation using HAL_I2C_Mem_Write
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	2364      	movs	r3, #100	; 0x64
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	893b      	ldrh	r3, [r7, #8]
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	21d6      	movs	r1, #214	; 0xd6
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f005 fb9b 	bl	80073d0 <HAL_I2C_Mem_Write>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	75fb      	strb	r3, [r7, #23]

  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <platform_write+0x3c>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e001      	b.n	8001cac <platform_write+0x40>
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <IMU_Initialization>:



int32_t IMU_Initialization(){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0

	/* Initialize MEMS driver interface */
	device.write_reg = platform_write;
 8001cba:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <IMU_Initialization+0xd4>)
 8001cbc:	4a33      	ldr	r2, [pc, #204]	; (8001d8c <IMU_Initialization+0xd8>)
 8001cbe:	601a      	str	r2, [r3, #0]
	device.read_reg = platform_read;
 8001cc0:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <IMU_Initialization+0xd4>)
 8001cc2:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <IMU_Initialization+0xdc>)
 8001cc4:	605a      	str	r2, [r3, #4]
	device.handle = &hi2c1;
 8001cc6:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <IMU_Initialization+0xd4>)
 8001cc8:	4a32      	ldr	r2, [pc, #200]	; (8001d94 <IMU_Initialization+0xe0>)
 8001cca:	60da      	str	r2, [r3, #12]

	/* Check device ID */
	whoamI = 0;
 8001ccc:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <IMU_Initialization+0xe4>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
	lsm6ds3tr_c_device_id_get(&device, &whoamI);
 8001cd2:	4931      	ldr	r1, [pc, #196]	; (8001d98 <IMU_Initialization+0xe4>)
 8001cd4:	482c      	ldr	r0, [pc, #176]	; (8001d88 <IMU_Initialization+0xd4>)
 8001cd6:	f002 fe6b 	bl	80049b0 <lsm6ds3tr_c_device_id_get>

	if ( whoamI != LSM6DS3TR_C_ID ) {
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <IMU_Initialization+0xe4>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b6a      	cmp	r3, #106	; 0x6a
 8001ce0:	d002      	beq.n	8001ce8 <IMU_Initialization+0x34>
		return -1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ce6:	e04b      	b.n	8001d80 <IMU_Initialization+0xcc>
	}



	/* Restore default configuration */
	lsm6ds3tr_c_reset_set(&device, PROPERTY_ENABLE);
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4827      	ldr	r0, [pc, #156]	; (8001d88 <IMU_Initialization+0xd4>)
 8001cec:	f002 fe71 	bl	80049d2 <lsm6ds3tr_c_reset_set>

	do {
    lsm6ds3tr_c_reset_get(&device, &rst);
 8001cf0:	492a      	ldr	r1, [pc, #168]	; (8001d9c <IMU_Initialization+0xe8>)
 8001cf2:	4825      	ldr	r0, [pc, #148]	; (8001d88 <IMU_Initialization+0xd4>)
 8001cf4:	f002 fe93 	bl	8004a1e <lsm6ds3tr_c_reset_get>
	} while (rst);
 8001cf8:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <IMU_Initialization+0xe8>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f7      	bne.n	8001cf0 <IMU_Initialization+0x3c>

	int32_t int_set,xl_pm,xl_fs,xl_dr,xl_lp1,gy_pm,gy_fs,gy_dr,bdu,state;

	//Enabling I2C Communication
	int_set = lsm6ds3tr_c_i2c_interface_set(&device,LSM6DS3TR_C_I2C_ENABLE);
 8001d00:	2100      	movs	r1, #0
 8001d02:	4821      	ldr	r0, [pc, #132]	; (8001d88 <IMU_Initialization+0xd4>)
 8001d04:	f002 fee8 	bl	8004ad8 <lsm6ds3tr_c_i2c_interface_set>
 8001d08:	6278      	str	r0, [r7, #36]	; 0x24


	//POWER-MODES

	//Accelerometer
	xl_pm = lsm6ds3tr_c_xl_power_mode_set(&device,LSM6DS3TR_C_XL_HIGH_PERFORMANCE);
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	481e      	ldr	r0, [pc, #120]	; (8001d88 <IMU_Initialization+0xd4>)
 8001d0e:	f002 fd6d 	bl	80047ec <lsm6ds3tr_c_xl_power_mode_set>
 8001d12:	6238      	str	r0, [r7, #32]
	//Gyroscope
	gy_pm = lsm6ds3tr_c_gy_power_mode_set(&device,LSM6DS3TR_C_GY_HIGH_PERFORMANCE);
 8001d14:	2100      	movs	r1, #0
 8001d16:	481c      	ldr	r0, [pc, #112]	; (8001d88 <IMU_Initialization+0xd4>)
 8001d18:	f002 fd8e 	bl	8004838 <lsm6ds3tr_c_gy_power_mode_set>
 8001d1c:	61f8      	str	r0, [r7, #28]

	//ACCELEROMETER

	//Setting Full-scale
	xl_fs = lsm6ds3tr_c_xl_full_scale_set(&device,LSM6DS3TR_C_2g);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4819      	ldr	r0, [pc, #100]	; (8001d88 <IMU_Initialization+0xd4>)
 8001d22:	f002 fca5 	bl	8004670 <lsm6ds3tr_c_xl_full_scale_set>
 8001d26:	61b8      	str	r0, [r7, #24]
	//Setting data rate
	xl_dr = lsm6ds3tr_c_xl_data_rate_set(&device,LSM6DS3TR_C_XL_ODR_833Hz);
 8001d28:	2107      	movs	r1, #7
 8001d2a:	4817      	ldr	r0, [pc, #92]	; (8001d88 <IMU_Initialization+0xd4>)
 8001d2c:	f002 fcc6 	bl	80046bc <lsm6ds3tr_c_xl_data_rate_set>
 8001d30:	6178      	str	r0, [r7, #20]
	//Low-pass filter selection
	xl_lp1 = lsm6ds3tr_c_xl_lp1_bandwidth_set(&device,LSM6DS3TR_C_XL_LP1_ODR_DIV_2);
 8001d32:	2100      	movs	r1, #0
 8001d34:	4814      	ldr	r0, [pc, #80]	; (8001d88 <IMU_Initialization+0xd4>)
 8001d36:	f002 fe8b 	bl	8004a50 <lsm6ds3tr_c_xl_lp1_bandwidth_set>
 8001d3a:	6138      	str	r0, [r7, #16]

	//GYROSCOPE


	//Setting Full-scale
	gy_fs = lsm6ds3tr_c_gy_full_scale_set(&device,LSM6DS3TR_C_125dps);
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4812      	ldr	r0, [pc, #72]	; (8001d88 <IMU_Initialization+0xd4>)
 8001d40:	f002 fce2 	bl	8004708 <lsm6ds3tr_c_gy_full_scale_set>
 8001d44:	60f8      	str	r0, [r7, #12]
	//Setting data scale
	gy_dr = lsm6ds3tr_c_gy_data_rate_set(&device,LSM6DS3TR_C_GY_ODR_833Hz);
 8001d46:	2107      	movs	r1, #7
 8001d48:	480f      	ldr	r0, [pc, #60]	; (8001d88 <IMU_Initialization+0xd4>)
 8001d4a:	f002 fd03 	bl	8004754 <lsm6ds3tr_c_gy_data_rate_set>
 8001d4e:	60b8      	str	r0, [r7, #8]



	//BDU Setting
	bdu = lsm6ds3tr_c_block_data_update_set(&device,1); // O -> Disable | 1 -> ENABLE
 8001d50:	2101      	movs	r1, #1
 8001d52:	480d      	ldr	r0, [pc, #52]	; (8001d88 <IMU_Initialization+0xd4>)
 8001d54:	f002 fd24 	bl	80047a0 <lsm6ds3tr_c_block_data_update_set>
 8001d58:	6078      	str	r0, [r7, #4]

	state = int_set + xl_pm + xl_fs + xl_dr + xl_lp1 + gy_pm + gy_fs + gy_dr + bdu;
 8001d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	441a      	add	r2, r3
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	441a      	add	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	441a      	add	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	441a      	add	r2, r3
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	441a      	add	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	441a      	add	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4413      	add	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	603b      	str	r3, [r7, #0]

	//UART_Transmit_Messages_IMU("Configuration successful. \r\n");

	return state;
 8001d7e:	683b      	ldr	r3, [r7, #0]


}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200026f4 	.word	0x200026f4
 8001d8c:	08001c6d 	.word	0x08001c6d
 8001d90:	08001c25 	.word	0x08001c25
 8001d94:	20002a8c 	.word	0x20002a8c
 8001d98:	200026f0 	.word	0x200026f0
 8001d9c:	200026f1 	.word	0x200026f1

08001da0 <IMU_Data_Read>:


int32_t IMU_Data_Read(){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0

	int32_t reading_state, gyro_reading, acc_reading;

	// Divide by 1000 to transofm millig (mg) in g and millidegrees per second (mdps) in degrees per second (dps)
	//GYROSCOPE
	gyro_reading = lsm6ds3tr_c_angular_rate_raw_get(&device,data_raw_angular_rate);
 8001da6:	4954      	ldr	r1, [pc, #336]	; (8001ef8 <IMU_Data_Read+0x158>)
 8001da8:	4854      	ldr	r0, [pc, #336]	; (8001efc <IMU_Data_Read+0x15c>)
 8001daa:	f002 fd6b 	bl	8004884 <lsm6ds3tr_c_angular_rate_raw_get>
 8001dae:	60f8      	str	r0, [r7, #12]
	angular_rate_mdps[0] = lsm6ds3tr_c_from_fs125dps_to_mdps(data_raw_angular_rate[0]) /1000.0;
 8001db0:	4b51      	ldr	r3, [pc, #324]	; (8001ef8 <IMU_Data_Read+0x158>)
 8001db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f002 fc42 	bl	8004640 <lsm6ds3tr_c_from_fs125dps_to_mdps>
 8001dbc:	ee10 3a10 	vmov	r3, s0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbc1 	bl	8000548 <__aeabi_f2d>
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <IMU_Data_Read+0x160>)
 8001dcc:	f7fe fd3e 	bl	800084c <__aeabi_ddiv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe ff06 	bl	8000be8 <__aeabi_d2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4a49      	ldr	r2, [pc, #292]	; (8001f04 <IMU_Data_Read+0x164>)
 8001de0:	6013      	str	r3, [r2, #0]
	angular_rate_mdps[1] = lsm6ds3tr_c_from_fs125dps_to_mdps(data_raw_angular_rate[1]) /1000.0;
 8001de2:	4b45      	ldr	r3, [pc, #276]	; (8001ef8 <IMU_Data_Read+0x158>)
 8001de4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f002 fc29 	bl	8004640 <lsm6ds3tr_c_from_fs125dps_to_mdps>
 8001dee:	ee10 3a10 	vmov	r3, s0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fba8 	bl	8000548 <__aeabi_f2d>
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <IMU_Data_Read+0x160>)
 8001dfe:	f7fe fd25 	bl	800084c <__aeabi_ddiv>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe feed 	bl	8000be8 <__aeabi_d2f>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4a3c      	ldr	r2, [pc, #240]	; (8001f04 <IMU_Data_Read+0x164>)
 8001e12:	6053      	str	r3, [r2, #4]
	angular_rate_mdps[2] = lsm6ds3tr_c_from_fs125dps_to_mdps(data_raw_angular_rate[2]) /1000.0;
 8001e14:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <IMU_Data_Read+0x158>)
 8001e16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f002 fc10 	bl	8004640 <lsm6ds3tr_c_from_fs125dps_to_mdps>
 8001e20:	ee10 3a10 	vmov	r3, s0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb8f 	bl	8000548 <__aeabi_f2d>
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <IMU_Data_Read+0x160>)
 8001e30:	f7fe fd0c 	bl	800084c <__aeabi_ddiv>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fed4 	bl	8000be8 <__aeabi_d2f>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4a30      	ldr	r2, [pc, #192]	; (8001f04 <IMU_Data_Read+0x164>)
 8001e44:	6093      	str	r3, [r2, #8]

	//ACCELEROMETER
	acc_reading = lsm6ds3tr_c_acceleration_raw_get(&device,data_raw_acceleration);
 8001e46:	4930      	ldr	r1, [pc, #192]	; (8001f08 <IMU_Data_Read+0x168>)
 8001e48:	482c      	ldr	r0, [pc, #176]	; (8001efc <IMU_Data_Read+0x15c>)
 8001e4a:	f002 fd66 	bl	800491a <lsm6ds3tr_c_acceleration_raw_get>
 8001e4e:	60b8      	str	r0, [r7, #8]
	acceleration_mg[0] = lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[0]) /1000.0;
 8001e50:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <IMU_Data_Read+0x168>)
 8001e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 fbda 	bl	8004610 <lsm6ds3tr_c_from_fs2g_to_mg>
 8001e5c:	ee10 3a10 	vmov	r3, s0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb71 	bl	8000548 <__aeabi_f2d>
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <IMU_Data_Read+0x160>)
 8001e6c:	f7fe fcee 	bl	800084c <__aeabi_ddiv>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe feb6 	bl	8000be8 <__aeabi_d2f>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <IMU_Data_Read+0x16c>)
 8001e80:	6013      	str	r3, [r2, #0]
	acceleration_mg[1] = lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[1]) /1000.0;
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <IMU_Data_Read+0x168>)
 8001e84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f002 fbc1 	bl	8004610 <lsm6ds3tr_c_from_fs2g_to_mg>
 8001e8e:	ee10 3a10 	vmov	r3, s0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fb58 	bl	8000548 <__aeabi_f2d>
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <IMU_Data_Read+0x160>)
 8001e9e:	f7fe fcd5 	bl	800084c <__aeabi_ddiv>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe fe9d 	bl	8000be8 <__aeabi_d2f>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <IMU_Data_Read+0x16c>)
 8001eb2:	6053      	str	r3, [r2, #4]
	acceleration_mg[2] = lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[2]) /1000.0;
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <IMU_Data_Read+0x168>)
 8001eb6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 fba8 	bl	8004610 <lsm6ds3tr_c_from_fs2g_to_mg>
 8001ec0:	ee10 3a10 	vmov	r3, s0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb3f 	bl	8000548 <__aeabi_f2d>
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <IMU_Data_Read+0x160>)
 8001ed0:	f7fe fcbc 	bl	800084c <__aeabi_ddiv>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fe84 	bl	8000be8 <__aeabi_d2f>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <IMU_Data_Read+0x16c>)
 8001ee4:	6093      	str	r3, [r2, #8]

	reading_state = gyro_reading + acc_reading; // If 0 -> Success | Otherwise error code
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4413      	add	r3, r2
 8001eec:	607b      	str	r3, [r7, #4]

	return reading_state;
 8001eee:	687b      	ldr	r3, [r7, #4]

}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200026c4 	.word	0x200026c4
 8001efc:	200026f4 	.word	0x200026f4
 8001f00:	408f4000 	.word	0x408f4000
 8001f04:	200026d8 	.word	0x200026d8
 8001f08:	200026bc 	.word	0x200026bc
 8001f0c:	200026cc 	.word	0x200026cc

08001f10 <IMU_Data_Read_Calibrated>:

int32_t IMU_Data_Read_Calibrated() {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0

	int32_t reading_state, gyro_reading, acc_reading;

	// Divide by 1000 to transofm millig (mg) in g and millidegrees per second (mdps) in degrees per second (dps)
	//GYROSCOPE
	gyro_reading = lsm6ds3tr_c_angular_rate_raw_get(&device,data_raw_angular_rate);
 8001f16:	4969      	ldr	r1, [pc, #420]	; (80020bc <IMU_Data_Read_Calibrated+0x1ac>)
 8001f18:	4869      	ldr	r0, [pc, #420]	; (80020c0 <IMU_Data_Read_Calibrated+0x1b0>)
 8001f1a:	f002 fcb3 	bl	8004884 <lsm6ds3tr_c_angular_rate_raw_get>
 8001f1e:	60f8      	str	r0, [r7, #12]
	angular_rate_mdps[0] = lsm6ds3tr_c_from_fs125dps_to_mdps(data_raw_angular_rate[0]) /1000.0;
 8001f20:	4b66      	ldr	r3, [pc, #408]	; (80020bc <IMU_Data_Read_Calibrated+0x1ac>)
 8001f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 fb8a 	bl	8004640 <lsm6ds3tr_c_from_fs125dps_to_mdps>
 8001f2c:	ee10 3a10 	vmov	r3, s0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fb09 	bl	8000548 <__aeabi_f2d>
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b62      	ldr	r3, [pc, #392]	; (80020c4 <IMU_Data_Read_Calibrated+0x1b4>)
 8001f3c:	f7fe fc86 	bl	800084c <__aeabi_ddiv>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7fe fe4e 	bl	8000be8 <__aeabi_d2f>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4a5e      	ldr	r2, [pc, #376]	; (80020c8 <IMU_Data_Read_Calibrated+0x1b8>)
 8001f50:	6013      	str	r3, [r2, #0]
	angular_rate_mdps[1] = lsm6ds3tr_c_from_fs125dps_to_mdps(data_raw_angular_rate[1]) /1000.0;
 8001f52:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <IMU_Data_Read_Calibrated+0x1ac>)
 8001f54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 fb71 	bl	8004640 <lsm6ds3tr_c_from_fs125dps_to_mdps>
 8001f5e:	ee10 3a10 	vmov	r3, s0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe faf0 	bl	8000548 <__aeabi_f2d>
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	4b55      	ldr	r3, [pc, #340]	; (80020c4 <IMU_Data_Read_Calibrated+0x1b4>)
 8001f6e:	f7fe fc6d 	bl	800084c <__aeabi_ddiv>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fe35 	bl	8000be8 <__aeabi_d2f>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4a51      	ldr	r2, [pc, #324]	; (80020c8 <IMU_Data_Read_Calibrated+0x1b8>)
 8001f82:	6053      	str	r3, [r2, #4]
	angular_rate_mdps[2] = lsm6ds3tr_c_from_fs125dps_to_mdps(data_raw_angular_rate[2]) /1000.0;
 8001f84:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <IMU_Data_Read_Calibrated+0x1ac>)
 8001f86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 fb58 	bl	8004640 <lsm6ds3tr_c_from_fs125dps_to_mdps>
 8001f90:	ee10 3a10 	vmov	r3, s0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fad7 	bl	8000548 <__aeabi_f2d>
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <IMU_Data_Read_Calibrated+0x1b4>)
 8001fa0:	f7fe fc54 	bl	800084c <__aeabi_ddiv>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4619      	mov	r1, r3
 8001fac:	f7fe fe1c 	bl	8000be8 <__aeabi_d2f>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4a45      	ldr	r2, [pc, #276]	; (80020c8 <IMU_Data_Read_Calibrated+0x1b8>)
 8001fb4:	6093      	str	r3, [r2, #8]

	//ACCELEROMETER
	acc_reading = lsm6ds3tr_c_acceleration_raw_get(&device,data_raw_acceleration);
 8001fb6:	4945      	ldr	r1, [pc, #276]	; (80020cc <IMU_Data_Read_Calibrated+0x1bc>)
 8001fb8:	4841      	ldr	r0, [pc, #260]	; (80020c0 <IMU_Data_Read_Calibrated+0x1b0>)
 8001fba:	f002 fcae 	bl	800491a <lsm6ds3tr_c_acceleration_raw_get>
 8001fbe:	60b8      	str	r0, [r7, #8]
	acceleration_mg[0] = lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[0]) /1000.0;
 8001fc0:	4b42      	ldr	r3, [pc, #264]	; (80020cc <IMU_Data_Read_Calibrated+0x1bc>)
 8001fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f002 fb22 	bl	8004610 <lsm6ds3tr_c_from_fs2g_to_mg>
 8001fcc:	ee10 3a10 	vmov	r3, s0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fab9 	bl	8000548 <__aeabi_f2d>
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <IMU_Data_Read_Calibrated+0x1b4>)
 8001fdc:	f7fe fc36 	bl	800084c <__aeabi_ddiv>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fdfe 	bl	8000be8 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a38      	ldr	r2, [pc, #224]	; (80020d0 <IMU_Data_Read_Calibrated+0x1c0>)
 8001ff0:	6013      	str	r3, [r2, #0]
	acceleration_mg[1] = lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[1]) /1000.0;
 8001ff2:	4b36      	ldr	r3, [pc, #216]	; (80020cc <IMU_Data_Read_Calibrated+0x1bc>)
 8001ff4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 fb09 	bl	8004610 <lsm6ds3tr_c_from_fs2g_to_mg>
 8001ffe:	ee10 3a10 	vmov	r3, s0
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe faa0 	bl	8000548 <__aeabi_f2d>
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <IMU_Data_Read_Calibrated+0x1b4>)
 800200e:	f7fe fc1d 	bl	800084c <__aeabi_ddiv>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f7fe fde5 	bl	8000be8 <__aeabi_d2f>
 800201e:	4603      	mov	r3, r0
 8002020:	4a2b      	ldr	r2, [pc, #172]	; (80020d0 <IMU_Data_Read_Calibrated+0x1c0>)
 8002022:	6053      	str	r3, [r2, #4]
	acceleration_mg[2] = lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[2]) /1000.0;
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <IMU_Data_Read_Calibrated+0x1bc>)
 8002026:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800202a:	4618      	mov	r0, r3
 800202c:	f002 faf0 	bl	8004610 <lsm6ds3tr_c_from_fs2g_to_mg>
 8002030:	ee10 3a10 	vmov	r3, s0
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa87 	bl	8000548 <__aeabi_f2d>
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <IMU_Data_Read_Calibrated+0x1b4>)
 8002040:	f7fe fc04 	bl	800084c <__aeabi_ddiv>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f7fe fdcc 	bl	8000be8 <__aeabi_d2f>
 8002050:	4603      	mov	r3, r0
 8002052:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <IMU_Data_Read_Calibrated+0x1c0>)
 8002054:	6093      	str	r3, [r2, #8]


    // Apply calibration offsets to the raw data
    angular_rate_mdps[0] -= gyro_offset[0];
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <IMU_Data_Read_Calibrated+0x1b8>)
 8002058:	ed93 7a00 	vldr	s14, [r3]
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <IMU_Data_Read_Calibrated+0x1c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <IMU_Data_Read_Calibrated+0x1b8>)
 800206e:	edc3 7a00 	vstr	s15, [r3]
    angular_rate_mdps[1] -= gyro_offset[1];
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <IMU_Data_Read_Calibrated+0x1b8>)
 8002074:	ed93 7a01 	vldr	s14, [r3, #4]
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <IMU_Data_Read_Calibrated+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <IMU_Data_Read_Calibrated+0x1b8>)
 800208a:	edc3 7a01 	vstr	s15, [r3, #4]
    angular_rate_mdps[2] -= gyro_offset[2];
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <IMU_Data_Read_Calibrated+0x1b8>)
 8002090:	ed93 7a02 	vldr	s14, [r3, #8]
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <IMU_Data_Read_Calibrated+0x1c4>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <IMU_Data_Read_Calibrated+0x1b8>)
 80020a6:	edc3 7a02 	vstr	s15, [r3, #8]


	reading_state = gyro_reading + acc_reading; // If 0 -> Success | Otherwise error code
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4413      	add	r3, r2
 80020b0:	607b      	str	r3, [r7, #4]

	return reading_state;
 80020b2:	687b      	ldr	r3, [r7, #4]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	200026c4 	.word	0x200026c4
 80020c0:	200026f4 	.word	0x200026f4
 80020c4:	408f4000 	.word	0x408f4000
 80020c8:	200026d8 	.word	0x200026d8
 80020cc:	200026bc 	.word	0x200026bc
 80020d0:	200026cc 	.word	0x200026cc
 80020d4:	200026e4 	.word	0x200026e4

080020d8 <Calibrate_IMU>:

void Calibrate_IMU() {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0

	UART_Transmit_Messages_IMU("IMU Calibration process started...");
 80020de:	4835      	ldr	r0, [pc, #212]	; (80021b4 <Calibrate_IMU+0xdc>)
 80020e0:	f7ff fd8a 	bl	8001bf8 <UART_Transmit_Messages_IMU>


    // Collect samples for gyroscope calibration
    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 80020e4:	2300      	movs	r3, #0
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	e03a      	b.n	8002160 <Calibrate_IMU+0x88>
        IMU_Data_Read(); // Read raw data from IMU
 80020ea:	f7ff fe59 	bl	8001da0 <IMU_Data_Read>
        gyro_offset[0] += angular_rate_mdps[0];
 80020ee:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <Calibrate_IMU+0xe0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020fa:	4b30      	ldr	r3, [pc, #192]	; (80021bc <Calibrate_IMU+0xe4>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002108:	ee17 2a90 	vmov	r2, s15
 800210c:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <Calibrate_IMU+0xe0>)
 800210e:	601a      	str	r2, [r3, #0]
        gyro_offset[1] += angular_rate_mdps[1];
 8002110:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <Calibrate_IMU+0xe0>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <Calibrate_IMU+0xe4>)
 800211e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800212a:	ee17 2a90 	vmov	r2, s15
 800212e:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <Calibrate_IMU+0xe0>)
 8002130:	605a      	str	r2, [r3, #4]
        gyro_offset[2] += angular_rate_mdps[2];
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <Calibrate_IMU+0xe0>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <Calibrate_IMU+0xe4>)
 8002140:	edd3 7a02 	vldr	s15, [r3, #8]
 8002144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800214c:	ee17 2a90 	vmov	r2, s15
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <Calibrate_IMU+0xe0>)
 8002152:	609a      	str	r2, [r3, #8]
        HAL_Delay(2); // Delay between samples
 8002154:	2002      	movs	r0, #2
 8002156:	f003 ff61 	bl	800601c <HAL_Delay>
    for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3301      	adds	r3, #1
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002166:	4293      	cmp	r3, r2
 8002168:	ddbf      	ble.n	80020ea <Calibrate_IMU+0x12>
    }

    // Calculate average offset for gyroscope
    gyro_offset[0] /= CALIBRATION_SAMPLES;
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <Calibrate_IMU+0xe0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <Calibrate_IMU+0xe8>)
 8002170:	fb82 1203 	smull	r1, r2, r2, r3
 8002174:	1192      	asrs	r2, r2, #6
 8002176:	17db      	asrs	r3, r3, #31
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <Calibrate_IMU+0xe0>)
 800217c:	6013      	str	r3, [r2, #0]
    gyro_offset[1] /= CALIBRATION_SAMPLES;
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <Calibrate_IMU+0xe0>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <Calibrate_IMU+0xe8>)
 8002184:	fb82 1203 	smull	r1, r2, r2, r3
 8002188:	1192      	asrs	r2, r2, #6
 800218a:	17db      	asrs	r3, r3, #31
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <Calibrate_IMU+0xe0>)
 8002190:	6053      	str	r3, [r2, #4]
    gyro_offset[2] /= CALIBRATION_SAMPLES;
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <Calibrate_IMU+0xe0>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <Calibrate_IMU+0xe8>)
 8002198:	fb82 1203 	smull	r1, r2, r2, r3
 800219c:	1192      	asrs	r2, r2, #6
 800219e:	17db      	asrs	r3, r3, #31
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	4a05      	ldr	r2, [pc, #20]	; (80021b8 <Calibrate_IMU+0xe0>)
 80021a4:	6093      	str	r3, [r2, #8]

    // Store the calibration offsets for later use
    // (you may store them in global variables or pass them to IMU_Data_Read_Calibrated function)
    // gyro_offset[0], gyro_offset[1], gyro_offset[2] -> Gyroscope calibration offsets
    // acc_offset[0], acc_offset[1], acc_offset[2] -> Accelerometer calibration offsets
    UART_Transmit_Messages_IMU("Finished! \r\n");
 80021a6:	4807      	ldr	r0, [pc, #28]	; (80021c4 <Calibrate_IMU+0xec>)
 80021a8:	f7ff fd26 	bl	8001bf8 <UART_Transmit_Messages_IMU>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	080149b8 	.word	0x080149b8
 80021b8:	200026e4 	.word	0x200026e4
 80021bc:	200026d8 	.word	0x200026d8
 80021c0:	057619f1 	.word	0x057619f1
 80021c4:	080149dc 	.word	0x080149dc

080021c8 <Transmit_IMU_Data>:



IMUData Transmit_IMU_Data()
{
 80021c8:	b5b0      	push	{r4, r5, r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

	  int32_t imu_read_state = IMU_Data_Read_Calibrated();
 80021d0:	f7ff fe9e 	bl	8001f10 <IMU_Data_Read_Calibrated>
 80021d4:	6178      	str	r0, [r7, #20]
	  if (imu_read_state == 0){
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f040 808f 	bne.w	80022fc <Transmit_IMU_Data+0x134>

		    imu_data.acceleration_x = acceleration_mg[0];
 80021de:	4b60      	ldr	r3, [pc, #384]	; (8002360 <Transmit_IMU_Data+0x198>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a60      	ldr	r2, [pc, #384]	; (8002364 <Transmit_IMU_Data+0x19c>)
 80021e4:	6013      	str	r3, [r2, #0]
		    imu_data.acceleration_y = acceleration_mg[1];
 80021e6:	4b5e      	ldr	r3, [pc, #376]	; (8002360 <Transmit_IMU_Data+0x198>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4a5e      	ldr	r2, [pc, #376]	; (8002364 <Transmit_IMU_Data+0x19c>)
 80021ec:	6053      	str	r3, [r2, #4]
		    imu_data.acceleration_z = acceleration_mg[2];
 80021ee:	4b5c      	ldr	r3, [pc, #368]	; (8002360 <Transmit_IMU_Data+0x198>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4a5c      	ldr	r2, [pc, #368]	; (8002364 <Transmit_IMU_Data+0x19c>)
 80021f4:	6093      	str	r3, [r2, #8]
		    imu_data.angular_rate_x = angular_rate_mdps[0];
 80021f6:	4b5c      	ldr	r3, [pc, #368]	; (8002368 <Transmit_IMU_Data+0x1a0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a5a      	ldr	r2, [pc, #360]	; (8002364 <Transmit_IMU_Data+0x19c>)
 80021fc:	60d3      	str	r3, [r2, #12]
		    imu_data.angular_rate_y = angular_rate_mdps[1];
 80021fe:	4b5a      	ldr	r3, [pc, #360]	; (8002368 <Transmit_IMU_Data+0x1a0>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4a58      	ldr	r2, [pc, #352]	; (8002364 <Transmit_IMU_Data+0x19c>)
 8002204:	6113      	str	r3, [r2, #16]
		    imu_data.angular_rate_z = angular_rate_mdps[2];
 8002206:	4b58      	ldr	r3, [pc, #352]	; (8002368 <Transmit_IMU_Data+0x1a0>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4a56      	ldr	r2, [pc, #344]	; (8002364 <Transmit_IMU_Data+0x19c>)
 800220c:	6153      	str	r3, [r2, #20]

			// Calculate roll and pitch angles
			float roll = atan2(acceleration_mg[1], acceleration_mg[2]) * (180.0 / M_PI);
 800220e:	4b54      	ldr	r3, [pc, #336]	; (8002360 <Transmit_IMU_Data+0x198>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f998 	bl	8000548 <__aeabi_f2d>
 8002218:	4604      	mov	r4, r0
 800221a:	460d      	mov	r5, r1
 800221c:	4b50      	ldr	r3, [pc, #320]	; (8002360 <Transmit_IMU_Data+0x198>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f991 	bl	8000548 <__aeabi_f2d>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	ec43 2b11 	vmov	d1, r2, r3
 800222e:	ec45 4b10 	vmov	d0, r4, r5
 8002232:	f010 fa87 	bl	8012744 <atan2>
 8002236:	ec51 0b10 	vmov	r0, r1, d0
 800223a:	a347      	add	r3, pc, #284	; (adr r3, 8002358 <Transmit_IMU_Data+0x190>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f7fe f9da 	bl	80005f8 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f7fe fccc 	bl	8000be8 <__aeabi_d2f>
 8002250:	4603      	mov	r3, r0
 8002252:	613b      	str	r3, [r7, #16]
			float pitch = atan2(-acceleration_mg[0], sqrt(acceleration_mg[1] * acceleration_mg[1] + acceleration_mg[2] * acceleration_mg[2])) * (180.0 / M_PI);
 8002254:	4b42      	ldr	r3, [pc, #264]	; (8002360 <Transmit_IMU_Data+0x198>)
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	eef1 7a67 	vneg.f32	s15, s15
 800225e:	ee17 3a90 	vmov	r3, s15
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f970 	bl	8000548 <__aeabi_f2d>
 8002268:	4604      	mov	r4, r0
 800226a:	460d      	mov	r5, r1
 800226c:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <Transmit_IMU_Data+0x198>)
 800226e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <Transmit_IMU_Data+0x198>)
 8002274:	edd3 7a01 	vldr	s15, [r3, #4]
 8002278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800227c:	4b38      	ldr	r3, [pc, #224]	; (8002360 <Transmit_IMU_Data+0x198>)
 800227e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002282:	4b37      	ldr	r3, [pc, #220]	; (8002360 <Transmit_IMU_Data+0x198>)
 8002284:	edd3 7a02 	vldr	s15, [r3, #8]
 8002288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800228c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002290:	ee17 0a90 	vmov	r0, s15
 8002294:	f7fe f958 	bl	8000548 <__aeabi_f2d>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	ec43 2b10 	vmov	d0, r2, r3
 80022a0:	f010 fb18 	bl	80128d4 <sqrt>
 80022a4:	eeb0 7a40 	vmov.f32	s14, s0
 80022a8:	eef0 7a60 	vmov.f32	s15, s1
 80022ac:	eeb0 1a47 	vmov.f32	s2, s14
 80022b0:	eef0 1a67 	vmov.f32	s3, s15
 80022b4:	ec45 4b10 	vmov	d0, r4, r5
 80022b8:	f010 fa44 	bl	8012744 <atan2>
 80022bc:	ec51 0b10 	vmov	r0, r1, d0
 80022c0:	a325      	add	r3, pc, #148	; (adr r3, 8002358 <Transmit_IMU_Data+0x190>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fe f997 	bl	80005f8 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	f7fe fc89 	bl	8000be8 <__aeabi_d2f>
 80022d6:	4603      	mov	r3, r0
 80022d8:	60fb      	str	r3, [r7, #12]

		    imu_data.roll = roll;
 80022da:	4a22      	ldr	r2, [pc, #136]	; (8002364 <Transmit_IMU_Data+0x19c>)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	6193      	str	r3, [r2, #24]
		    imu_data.pitch = pitch;
 80022e0:	4a20      	ldr	r2, [pc, #128]	; (8002364 <Transmit_IMU_Data+0x19c>)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	61d3      	str	r3, [r2, #28]

		    return imu_data;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <Transmit_IMU_Data+0x19c>)
 80022ea:	461c      	mov	r4, r3
 80022ec:	4615      	mov	r5, r2
 80022ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80022fa:	e029      	b.n	8002350 <Transmit_IMU_Data+0x188>
	  }	else	{

		  //Error State
		  imu_data.acceleration_x = 0.0;
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <Transmit_IMU_Data+0x19c>)
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
		  imu_data.acceleration_y = 0.0;
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <Transmit_IMU_Data+0x19c>)
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
		  imu_data.acceleration_z = 0.0;
 800230c:	4b15      	ldr	r3, [pc, #84]	; (8002364 <Transmit_IMU_Data+0x19c>)
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
		  imu_data.angular_rate_x = 0.0;
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <Transmit_IMU_Data+0x19c>)
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	60da      	str	r2, [r3, #12]
		  imu_data.angular_rate_y = 0.0;
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <Transmit_IMU_Data+0x19c>)
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
		  imu_data.angular_rate_z = 0.0;
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <Transmit_IMU_Data+0x19c>)
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	615a      	str	r2, [r3, #20]
		  imu_data.pitch = 0.0;
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <Transmit_IMU_Data+0x19c>)
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	61da      	str	r2, [r3, #28]
		  imu_data.roll = 0.0;
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <Transmit_IMU_Data+0x19c>)
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	619a      	str	r2, [r3, #24]

	        return imu_data;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a09      	ldr	r2, [pc, #36]	; (8002364 <Transmit_IMU_Data+0x19c>)
 8002340:	461c      	mov	r4, r3
 8002342:	4615      	mov	r5, r2
 8002344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002348:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800234c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}

}
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bdb0      	pop	{r4, r5, r7, pc}
 8002358:	1a63c1f8 	.word	0x1a63c1f8
 800235c:	404ca5dc 	.word	0x404ca5dc
 8002360:	200026cc 	.word	0x200026cc
 8002364:	20002704 	.word	0x20002704
 8002368:	200026d8 	.word	0x200026d8

0800236c <kalman_init>:
KalmanFilter kf;
MeasurementVector measurements;
//float R[6][6] = { /* Measurement noise covariance matrix */ };

// Kalman Filter initialization
void kalman_init(KalmanFilter* kf) {
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
    // Assuming stationary initial state
    kf->x_hat.x = 0.0;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
    kf->x_hat.y = 0.0;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	605a      	str	r2, [r3, #4]
    kf->x_hat.z = 0.0;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
    kf->x_hat.vx = 0.0;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	60da      	str	r2, [r3, #12]
    kf->x_hat.vy = 0.0;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
    kf->x_hat.vz = 0.0;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	615a      	str	r2, [r3, #20]
    kf->x_hat.roll = 0.0;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
    kf->x_hat.pitch = 0.0;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	61da      	str	r2, [r3, #28]
    kf->x_hat.yaw = 0.0;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]

    // Initialize the covariance matrix to large values (for uncertainty)
    for (int i = 0; i < 9; i++) {
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e018      	b.n	80023f4 <kalman_init+0x88>
        for (int j = 0; j < 9; j++) {
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	e00f      	b.n	80023e8 <kalman_init+0x7c>
            kf->P[i][j] = 1000.0;
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	4413      	add	r3, r2
 80023d6:	3308      	adds	r3, #8
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3304      	adds	r3, #4
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <kalman_init+0x9c>)
 80023e0:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 9; j++) {
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3301      	adds	r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	ddec      	ble.n	80023c8 <kalman_init+0x5c>
    for (int i = 0; i < 9; i++) {
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3301      	adds	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	dde3      	ble.n	80023c2 <kalman_init+0x56>
        }
    }
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	447a0000 	.word	0x447a0000

0800240c <kalman_predict>:

// Kalman Filter prediction step
void kalman_predict(KalmanFilter* kf) {
 800240c:	b580      	push	{r7, lr}
 800240e:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8002412:	af00      	add	r7, sp, #0
 8002414:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002418:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800241c:	6018      	str	r0, [r3, #0]
    // Assuming constant velocity model (predicting the next state)
    kf->x_hat.x += dt * kf->x_hat.vx;
 800241e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002422:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	ed93 7a00 	vldr	s14, [r3]
 800242c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002430:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	edd3 6a03 	vldr	s13, [r3, #12]
 800243a:	4bd6      	ldr	r3, [pc, #856]	; (8002794 <kalman_predict+0x388>)
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002448:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800244c:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	edc3 7a00 	vstr	s15, [r3]
    kf->x_hat.y += dt * kf->x_hat.vy;
 8002456:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800245a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	ed93 7a01 	vldr	s14, [r3, #4]
 8002464:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002468:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002472:	4bc8      	ldr	r3, [pc, #800]	; (8002794 <kalman_predict+0x388>)
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800247c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002480:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002484:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	edc3 7a01 	vstr	s15, [r3, #4]
    kf->x_hat.z += dt * kf->x_hat.vz;
 800248e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002492:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	ed93 7a02 	vldr	s14, [r3, #8]
 800249c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024a0:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	edd3 6a05 	vldr	s13, [r3, #20]
 80024aa:	4bba      	ldr	r3, [pc, #744]	; (8002794 <kalman_predict+0x388>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024bc:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	edc3 7a02 	vstr	s15, [r3, #8]

    // Construct the state transition matrix A
    // The state transition matrix A describes how the state evolves from one time step to the next.
    float A[81] = {
 80024c6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024ca:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80024ce:	4618      	mov	r0, r3
 80024d0:	f44f 73a2 	mov.w	r3, #324	; 0x144
 80024d4:	461a      	mov	r2, r3
 80024d6:	2100      	movs	r1, #0
 80024d8:	f00d fb5e 	bl	800fb98 <memset>
 80024dc:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80024e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	4baa      	ldr	r3, [pc, #680]	; (8002794 <kalman_predict+0x388>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024f2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80024fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002500:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
 8002506:	4ba3      	ldr	r3, [pc, #652]	; (8002794 <kalman_predict+0x388>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800250e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002512:	635a      	str	r2, [r3, #52]	; 0x34
 8002514:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002518:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800251c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002520:	651a      	str	r2, [r3, #80]	; 0x50
 8002522:	4b9c      	ldr	r3, [pc, #624]	; (8002794 <kalman_predict+0x388>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800252a:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800252e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002530:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002534:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002538:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800253c:	679a      	str	r2, [r3, #120]	; 0x78
 800253e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002542:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002546:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800254a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800254e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002552:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002556:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800255a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800255e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002562:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002566:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800256a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800256e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002572:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002576:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800257a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800257e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002582:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002586:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800258a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    // Temporary array for the matrix multiplication: A * P
    float AP[81];

    // Perform matrix multiplication: AP = A * P
    for (int i = 0; i < 9; i++) {
 800258e:	2300      	movs	r3, #0
 8002590:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8002594:	e076      	b.n	8002684 <kalman_predict+0x278>
        for (int j = 0; j < 9; j++) {
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800259c:	e069      	b.n	8002672 <kalman_predict+0x266>
            AP[i * 9 + j] = 0;
 800259e:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	441a      	add	r2, r3
 80025a8:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80025ac:	4413      	add	r3, r2
 80025ae:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80025b2:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 9; k++) {
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80025c6:	e04b      	b.n	8002660 <kalman_predict+0x254>
                AP[i * 9 + j] += A[i * 9 + k] * kf->P[k][j];
 80025c8:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	441a      	add	r2, r3
 80025d2:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80025d6:	4413      	add	r3, r2
 80025d8:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80025dc:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 80025ec:	4613      	mov	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	441a      	add	r2, r3
 80025f2:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80025f6:	4413      	add	r3, r2
 80025f8:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80025fc:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	edd3 6a00 	vldr	s13, [r3]
 8002608:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800260c:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8002620:	4413      	add	r3, r2
 8002622:	3308      	adds	r3, #8
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	3304      	adds	r3, #4
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002632:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	441a      	add	r2, r3
 800263c:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8002640:	4413      	add	r3, r2
 8002642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002646:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800264a:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 9; k++) {
 8002656:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800265a:	3301      	adds	r3, #1
 800265c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8002660:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002664:	2b08      	cmp	r3, #8
 8002666:	ddaf      	ble.n	80025c8 <kalman_predict+0x1bc>
        for (int j = 0; j < 9; j++) {
 8002668:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 800266c:	3301      	adds	r3, #1
 800266e:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8002672:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 8002676:	2b08      	cmp	r3, #8
 8002678:	dd91      	ble.n	800259e <kalman_predict+0x192>
    for (int i = 0; i < 9; i++) {
 800267a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800267e:	3301      	adds	r3, #1
 8002680:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8002684:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8002688:	2b08      	cmp	r3, #8
 800268a:	dd84      	ble.n	8002596 <kalman_predict+0x18a>

    // Temporary array for the matrix multiplication: AP * A^T
    float APA_T[81];

    // Perform matrix multiplication: APA_T = AP * A^T
    for (int i = 0; i < 9; i++) {
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8002692:	e073      	b.n	800277c <kalman_predict+0x370>
        for (int j = 0; j < 9; j++) {
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800269a:	e066      	b.n	800276a <kalman_predict+0x35e>
            APA_T[i * 9 + j] = 0;
 800269c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	441a      	add	r2, r3
 80026a6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80026aa:	4413      	add	r3, r2
 80026ac:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80026b0:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 9; k++) {
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80026c4:	e048      	b.n	8002758 <kalman_predict+0x34c>
                APA_T[i * 9 + j] += AP[i * 9 + k] * A[j * 9 + k];
 80026c6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	441a      	add	r2, r3
 80026d0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80026d4:	4413      	add	r3, r2
 80026d6:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80026da:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	ed93 7a00 	vldr	s14, [r3]
 80026e6:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	441a      	add	r2, r3
 80026f0:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 80026f4:	4413      	add	r3, r2
 80026f6:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80026fa:	f5a2 722a 	sub.w	r2, r2, #680	; 0x2a8
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	edd3 6a00 	vldr	s13, [r3]
 8002706:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	441a      	add	r2, r3
 8002710:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002714:	4413      	add	r3, r2
 8002716:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800271a:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	441a      	add	r2, r3
 8002734:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002738:	4413      	add	r3, r2
 800273a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273e:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8002742:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 9; k++) {
 800274e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8002752:	3301      	adds	r3, #1
 8002754:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8002758:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 800275c:	2b08      	cmp	r3, #8
 800275e:	ddb2      	ble.n	80026c6 <kalman_predict+0x2ba>
        for (int j = 0; j < 9; j++) {
 8002760:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002764:	3301      	adds	r3, #1
 8002766:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800276a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800276e:	2b08      	cmp	r3, #8
 8002770:	dd94      	ble.n	800269c <kalman_predict+0x290>
    for (int i = 0; i < 9; i++) {
 8002772:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002776:	3301      	adds	r3, #1
 8002778:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 800277c:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8002780:	2b08      	cmp	r3, #8
 8002782:	dd87      	ble.n	8002694 <kalman_predict+0x288>
            }
        }
    }

    // Update the covariance matrix P = APA_T + Q
    for (int i = 0; i < 9; i++) {
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800278a:	e045      	b.n	8002818 <kalman_predict+0x40c>
        for (int j = 0; j < 9; j++) {
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8002792:	e038      	b.n	8002806 <kalman_predict+0x3fa>
 8002794:	20000000 	.word	0x20000000
            kf->P[i][j] = APA_T[i * 9 + j] + Q[i][j];
 8002798:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	441a      	add	r2, r3
 80027a2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80027a6:	4413      	add	r3, r2
 80027a8:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80027ac:	f5a2 727b 	sub.w	r2, r2, #1004	; 0x3ec
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	ed93 7a00 	vldr	s14, [r3]
 80027b8:	491c      	ldr	r1, [pc, #112]	; (800282c <kalman_predict+0x420>)
 80027ba:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80027da:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80027ee:	4413      	add	r3, r2
 80027f0:	3308      	adds	r3, #8
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	3304      	adds	r3, #4
 80027f8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 9; j++) {
 80027fc:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002800:	3301      	adds	r3, #1
 8002802:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8002806:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800280a:	2b08      	cmp	r3, #8
 800280c:	ddc4      	ble.n	8002798 <kalman_predict+0x38c>
    for (int i = 0; i < 9; i++) {
 800280e:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002812:	3301      	adds	r3, #1
 8002814:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8002818:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800281c:	2b08      	cmp	r3, #8
 800281e:	ddb5      	ble.n	800278c <kalman_predict+0x380>
        }
    }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20002724 	.word	0x20002724

08002830 <kalman_update>:


// Kalman Filter update step
void kalman_update(KalmanFilter* kf, const MeasurementVector* z) {
 8002830:	b580      	push	{r7, lr}
 8002832:	f6ad 0d68 	subw	sp, sp, #2152	; 0x868
 8002836:	af00      	add	r7, sp, #0
 8002838:	f607 0368 	addw	r3, r7, #2152	; 0x868
 800283c:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8002840:	6018      	str	r0, [r3, #0]
 8002842:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002846:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 800284a:	6019      	str	r1, [r3, #0]
    // Convert the state vector (x_hat) to an array for easy manipulation
    float x_hat[9] = {
        kf->x_hat.x, kf->x_hat.y, kf->x_hat.z,
 800284c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002850:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
    float x_hat[9] = {
 8002858:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800285c:	6013      	str	r3, [r2, #0]
        kf->x_hat.x, kf->x_hat.y, kf->x_hat.z,
 800285e:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002862:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
    float x_hat[9] = {
 800286a:	f607 0214 	addw	r2, r7, #2068	; 0x814
 800286e:	6013      	str	r3, [r2, #0]
        kf->x_hat.x, kf->x_hat.y, kf->x_hat.z,
 8002870:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002874:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
    float x_hat[9] = {
 800287c:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8002880:	6013      	str	r3, [r2, #0]
        kf->x_hat.vx, kf->x_hat.vy, kf->x_hat.vz,
 8002882:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002886:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
    float x_hat[9] = {
 800288e:	f607 021c 	addw	r2, r7, #2076	; 0x81c
 8002892:	6013      	str	r3, [r2, #0]
        kf->x_hat.vx, kf->x_hat.vy, kf->x_hat.vz,
 8002894:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002898:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691b      	ldr	r3, [r3, #16]
    float x_hat[9] = {
 80028a0:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80028a4:	6013      	str	r3, [r2, #0]
        kf->x_hat.vx, kf->x_hat.vy, kf->x_hat.vz,
 80028a6:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80028aa:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
    float x_hat[9] = {
 80028b2:	f607 0224 	addw	r2, r7, #2084	; 0x824
 80028b6:	6013      	str	r3, [r2, #0]
        kf->x_hat.roll, kf->x_hat.pitch, kf->x_hat.yaw
 80028b8:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80028bc:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
    float x_hat[9] = {
 80028c4:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80028c8:	6013      	str	r3, [r2, #0]
        kf->x_hat.roll, kf->x_hat.pitch, kf->x_hat.yaw
 80028ca:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80028ce:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
    float x_hat[9] = {
 80028d6:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80028da:	6013      	str	r3, [r2, #0]
        kf->x_hat.roll, kf->x_hat.pitch, kf->x_hat.yaw
 80028dc:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80028e0:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
    float x_hat[9] = {
 80028e8:	f507 6203 	add.w	r2, r7, #2096	; 0x830
 80028ec:	6013      	str	r3, [r2, #0]
    };

    // Measurement Matrix H (Assuming direct measurements of position, velocity, and heading)
    float H[81] = { // 9x9 identity matrix
 80028ee:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80028f2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028f6:	4618      	mov	r0, r3
 80028f8:	f44f 73a2 	mov.w	r3, #324	; 0x144
 80028fc:	461a      	mov	r2, r3
 80028fe:	2100      	movs	r1, #0
 8002900:	f00d f94a 	bl	800fb98 <memset>
 8002904:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002908:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800290c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002916:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800291a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
 8002920:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002924:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002928:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800292c:	651a      	str	r2, [r3, #80]	; 0x50
 800292e:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002932:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002936:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800293a:	679a      	str	r2, [r3, #120]	; 0x78
 800293c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002940:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002944:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002948:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800294c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002950:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002954:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002958:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800295c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002960:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002964:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002968:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800296c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002970:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002974:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002978:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 800297c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002980:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002984:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002988:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1
    };

    // Measurement Noise Covariance Matrix R (Assuming diagonal matrix)
    float R[81] = { // 9x9 identity matrix with ones on the diagonal
 800298c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002990:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8002994:	4618      	mov	r0, r3
 8002996:	f44f 73a2 	mov.w	r3, #324	; 0x144
 800299a:	461a      	mov	r2, r3
 800299c:	2100      	movs	r1, #0
 800299e:	f00d f8fb 	bl	800fb98 <memset>
 80029a2:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80029a6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80029aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80029b4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80029b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029bc:	629a      	str	r2, [r3, #40]	; 0x28
 80029be:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80029c2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80029c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029ca:	651a      	str	r2, [r3, #80]	; 0x50
 80029cc:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80029d0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80029d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029d8:	679a      	str	r2, [r3, #120]	; 0x78
 80029da:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80029de:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80029e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80029ea:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80029ee:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80029f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029f6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80029fa:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80029fe:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8002a02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a06:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002a0a:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002a0e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8002a12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a16:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8002a1a:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002a1e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8002a22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a26:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    float r[9];
    // Initialize the measurement vector H * x_hat
    float Hx_hat[9];

    // Perform matrix multiplication: Hx_hat = H * x_hat
    for (int i = 0; i < 9; i++) {
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 8002a30:	e04d      	b.n	8002ace <kalman_update+0x29e>
        Hx_hat[i] = 0;
 8002a32:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002a36:	f5a3 724a 	sub.w	r2, r3, #808	; 0x328
 8002a3a:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 9; j++) {
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f8c7 3860 	str.w	r3, [r7, #2144]	; 0x860
 8002a4e:	e035      	b.n	8002abc <kalman_update+0x28c>
            Hx_hat[i] += H[i * 9 + j] * x_hat[j];
 8002a50:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002a54:	f5a3 724a 	sub.w	r2, r3, #808	; 0x328
 8002a58:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	ed93 7a00 	vldr	s14, [r3]
 8002a64:	f8d7 2864 	ldr.w	r2, [r7, #2148]	; 0x864
 8002a68:	4613      	mov	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	441a      	add	r2, r3
 8002a6e:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 8002a72:	4413      	add	r3, r2
 8002a74:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002a78:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	edd3 6a00 	vldr	s13, [r3]
 8002a84:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8002a8e:	443b      	add	r3, r7
 8002a90:	3b58      	subs	r3, #88	; 0x58
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9e:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002aa2:	f5a3 724a 	sub.w	r2, r3, #808	; 0x328
 8002aa6:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 9; j++) {
 8002ab2:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f8c7 3860 	str.w	r3, [r7, #2144]	; 0x860
 8002abc:	f8d7 3860 	ldr.w	r3, [r7, #2144]	; 0x860
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	ddc5      	ble.n	8002a50 <kalman_update+0x220>
    for (int i = 0; i < 9; i++) {
 8002ac4:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 8002ace:	f8d7 3864 	ldr.w	r3, [r7, #2148]	; 0x864
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	ddad      	ble.n	8002a32 <kalman_update+0x202>
        }
    }

    // Calculate the measurement residual r = z - H * x_hat
    r[0] = z->accel_x - Hx_hat[0];
 8002ad6:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002ada:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002ae8:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af4:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002af8:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8002afc:	edc3 7a00 	vstr	s15, [r3]
    r[1] = z->accel_y - Hx_hat[1];
 8002b00:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002b04:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b0e:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002b12:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8002b16:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b1e:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002b22:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8002b26:	edc3 7a01 	vstr	s15, [r3, #4]
    r[2] = z->accel_z - Hx_hat[2];
 8002b2a:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002b2e:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b38:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002b3c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8002b40:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b48:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002b4c:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8002b50:	edc3 7a02 	vstr	s15, [r3, #8]
    r[3] = z->barometer - Hx_hat[3];
 8002b54:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002b58:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b62:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002b66:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8002b6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b72:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002b76:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8002b7a:	edc3 7a03 	vstr	s15, [r3, #12]
    r[4] = z->mag_x - Hx_hat[4];
 8002b7e:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002b82:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b8c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002b90:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8002b94:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002ba0:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8002ba4:	edc3 7a04 	vstr	s15, [r3, #16]
    r[5] = z->mag_y - Hx_hat[5];
 8002ba8:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002bac:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bb6:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002bba:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8002bbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc6:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002bca:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8002bce:	edc3 7a05 	vstr	s15, [r3, #20]
    r[6] = z->mag_z - Hx_hat[6];
 8002bd2:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002bd6:	f6a3 0368 	subw	r3, r3, #2152	; 0x868
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	ed93 7a06 	vldr	s14, [r3, #24]
 8002be0:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002be4:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8002be8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf0:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002bf4:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8002bf8:	edc3 7a06 	vstr	s15, [r3, #24]
    float K[81];
    float S[81];
    float S_inv[81];

    // Perform matrix multiplication: S = H * P * H^T + R
    for (int i = 0; i < 9; i++) {
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 8002c02:	e0af      	b.n	8002d64 <kalman_update+0x534>
        for (int j = 0; j < 9; j++) {
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
 8002c0a:	e0a1      	b.n	8002d50 <kalman_update+0x520>
            S[i * 9 + j] = 0;
 8002c0c:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	441a      	add	r2, r3
 8002c16:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002c20:	f5a2 62b6 	sub.w	r2, r2, #1456	; 0x5b0
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 9; k++) {
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8002c34:	e04b      	b.n	8002cce <kalman_update+0x49e>
                S[i * 9 + j] += H[i * 9 + k] * kf->P[k][j];
 8002c36:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	441a      	add	r2, r3
 8002c40:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8002c44:	4413      	add	r3, r2
 8002c46:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002c4a:	f5a2 62b6 	sub.w	r2, r2, #1456	; 0x5b0
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	ed93 7a00 	vldr	s14, [r3]
 8002c56:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	441a      	add	r2, r3
 8002c60:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8002c64:	4413      	add	r3, r2
 8002c66:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002c6a:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	edd3 6a00 	vldr	s13, [r3]
 8002c76:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002c7a:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8002c7e:	6819      	ldr	r1, [r3, #0]
 8002c80:	f8d7 2854 	ldr.w	r2, [r7, #2132]	; 0x854
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	f8d7 2858 	ldr.w	r2, [r7, #2136]	; 0x858
 8002c8e:	4413      	add	r3, r2
 8002c90:	3308      	adds	r3, #8
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3304      	adds	r3, #4
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca0:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	441a      	add	r2, r3
 8002caa:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8002cae:	4413      	add	r3, r2
 8002cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb4:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002cb8:	f5a2 62b6 	sub.w	r2, r2, #1456	; 0x5b0
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 9; k++) {
 8002cc4:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8002cce:	f8d7 3854 	ldr.w	r3, [r7, #2132]	; 0x854
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	ddaf      	ble.n	8002c36 <kalman_update+0x406>
            }
            if (i == j) {
 8002cd6:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 8002cda:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d131      	bne.n	8002d46 <kalman_update+0x516>
                S[i * 9 + j] += R[i * 9 + j];
 8002ce2:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	441a      	add	r2, r3
 8002cec:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002cf6:	f5a2 62b6 	sub.w	r2, r2, #1456	; 0x5b0
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	ed93 7a00 	vldr	s14, [r3]
 8002d02:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	441a      	add	r2, r3
 8002d0c:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8002d10:	4413      	add	r3, r2
 8002d12:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002d16:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	f8d7 285c 	ldr.w	r2, [r7, #2140]	; 0x85c
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	441a      	add	r2, r3
 8002d2c:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8002d30:	4413      	add	r3, r2
 8002d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d36:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002d3a:	f5a2 62b6 	sub.w	r2, r2, #1456	; 0x5b0
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 9; j++) {
 8002d46:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
 8002d50:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	f77f af59 	ble.w	8002c0c <kalman_update+0x3dc>
    for (int i = 0; i < 9; i++) {
 8002d5a:	f8d7 385c 	ldr.w	r3, [r7, #2140]	; 0x85c
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 8002d64:	f8d7 385c 	ldr.w	r3, [r7, #2140]	; 0x85c
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	f77f af4b 	ble.w	8002c04 <kalman_update+0x3d4>
        }
    }

    // Calculate matrix inversion: S_inv = inv(S)
    arm_matrix_instance_f32 mat_S, mat_S_inv;
    arm_mat_init_f32(&mat_S, 9, 9, S);
 8002d6e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8002d72:	f507 70b6 	add.w	r0, r7, #364	; 0x16c
 8002d76:	2209      	movs	r2, #9
 8002d78:	2109      	movs	r1, #9
 8002d7a:	f00b f8d7 	bl	800df2c <arm_mat_init_f32>
    arm_mat_init_f32(&mat_S_inv, 9, 9, S_inv);
 8002d7e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8002d82:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8002d86:	2209      	movs	r2, #9
 8002d88:	2109      	movs	r1, #9
 8002d8a:	f00b f8cf 	bl	800df2c <arm_mat_init_f32>
    arm_status status = arm_mat_inverse_f32(&mat_S, &mat_S_inv);
 8002d8e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002d92:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f00a ff89 	bl	800dcb0 <arm_mat_inverse_f32>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f887 3837 	strb.w	r3, [r7, #2103]	; 0x837

    if (status == ARM_MATH_SUCCESS) {
 8002da4:	f997 3837 	ldrsb.w	r3, [r7, #2103]	; 0x837
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f040 8198 	bne.w	80030de <kalman_update+0x8ae>
        // Calculate Kalman Gain: K = P * H^T * S_inv
        arm_matrix_instance_f32 mat_P, mat_H, mat_K;
        arm_mat_init_f32(&mat_P, 9, 9, (float32_t *)kf->P);
 8002dae:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002db2:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3324      	adds	r3, #36	; 0x24
 8002dba:	f107 0018 	add.w	r0, r7, #24
 8002dbe:	2209      	movs	r2, #9
 8002dc0:	2109      	movs	r1, #9
 8002dc2:	f00b f8b3 	bl	800df2c <arm_mat_init_f32>
        arm_mat_init_f32(&mat_H, 9, 9, H);
 8002dc6:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 8002dca:	f107 0010 	add.w	r0, r7, #16
 8002dce:	2209      	movs	r2, #9
 8002dd0:	2109      	movs	r1, #9
 8002dd2:	f00b f8ab 	bl	800df2c <arm_mat_init_f32>
        arm_mat_init_f32(&mat_K, 9, 9, K);
 8002dd6:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8002dda:	f107 0008 	add.w	r0, r7, #8
 8002dde:	2209      	movs	r2, #9
 8002de0:	2109      	movs	r1, #9
 8002de2:	f00b f8a3 	bl	800df2c <arm_mat_init_f32>
        arm_mat_mult_f32(&mat_P, &mat_H, &mat_K); // K = P * H^T
 8002de6:	f107 0208 	add.w	r2, r7, #8
 8002dea:	f107 0110 	add.w	r1, r7, #16
 8002dee:	f107 0318 	add.w	r3, r7, #24
 8002df2:	4618      	mov	r0, r3
 8002df4:	f00a feb8 	bl	800db68 <arm_mat_mult_f32>
        arm_mat_mult_f32(&mat_K, &mat_S_inv, &mat_K); // K = K * S_inv
 8002df8:	f107 0208 	add.w	r2, r7, #8
 8002dfc:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 8002e00:	f107 0308 	add.w	r3, r7, #8
 8002e04:	4618      	mov	r0, r3
 8002e06:	f00a feaf 	bl	800db68 <arm_mat_mult_f32>
        // For example, you can provide default values for K or skip the update step.
        return;
    }

    // Update the state estimate x_hat = x_hat + K * r
    for (int i = 0; i < 9; i++) {
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 8002e10:	e041      	b.n	8002e96 <kalman_update+0x666>
        for (int j = 0; j < 9; j++) {
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 8002e18:	e034      	b.n	8002e84 <kalman_update+0x654>
            x_hat[i] += K[i * 9 + j] * r[j];
 8002e1a:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8002e24:	443b      	add	r3, r7
 8002e26:	3b58      	subs	r3, #88	; 0x58
 8002e28:	ed93 7a00 	vldr	s14, [r3]
 8002e2c:	f8d7 2850 	ldr.w	r2, [r7, #2128]	; 0x850
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	441a      	add	r2, r3
 8002e36:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002e40:	f2a2 426c 	subw	r2, r2, #1132	; 0x46c
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	edd3 6a00 	vldr	s13, [r3]
 8002e4c:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002e50:	f5a3 7241 	sub.w	r2, r3, #772	; 0x304
 8002e54:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e68:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	f603 0368 	addw	r3, r3, #2152	; 0x868
 8002e72:	443b      	add	r3, r7
 8002e74:	3b58      	subs	r3, #88	; 0x58
 8002e76:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 9; j++) {
 8002e7a:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 8002e84:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	ddc6      	ble.n	8002e1a <kalman_update+0x5ea>
    for (int i = 0; i < 9; i++) {
 8002e8c:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002e90:	3301      	adds	r3, #1
 8002e92:	f8c7 3850 	str.w	r3, [r7, #2128]	; 0x850
 8002e96:	f8d7 3850 	ldr.w	r3, [r7, #2128]	; 0x850
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	ddb9      	ble.n	8002e12 <kalman_update+0x5e2>

    // Update the covariance matrix P = (I - K * H) * P
    float KH[81]; // K * H

    // Perform matrix multiplication: KH = K * H
    for (int i = 0; i < 9; i++) {
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8002ea4:	e073      	b.n	8002f8e <kalman_update+0x75e>
        for (int j = 0; j < 9; j++) {
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 8002eac:	e066      	b.n	8002f7c <kalman_update+0x74c>
            KH[i * 9 + j] = 0;
 8002eae:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	441a      	add	r2, r3
 8002eb8:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002ec2:	f6a2 0248 	subw	r2, r2, #2120	; 0x848
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 9; k++) {
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
 8002ed6:	e048      	b.n	8002f6a <kalman_update+0x73a>
                KH[i * 9 + j] += K[i * 9 + k] * H[j * 9 + k];
 8002ed8:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	441a      	add	r2, r3
 8002ee2:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002eec:	f6a2 0248 	subw	r2, r2, #2120	; 0x848
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	ed93 7a00 	vldr	s14, [r3]
 8002ef8:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	441a      	add	r2, r3
 8002f02:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002f06:	4413      	add	r3, r2
 8002f08:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002f0c:	f2a2 426c 	subw	r2, r2, #1132	; 0x46c
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	edd3 6a00 	vldr	s13, [r3]
 8002f18:	f8d7 2844 	ldr.w	r2, [r7, #2116]	; 0x844
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	441a      	add	r2, r3
 8002f22:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002f26:	4413      	add	r3, r2
 8002f28:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002f2c:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f3c:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	441a      	add	r2, r3
 8002f46:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002f4a:	4413      	add	r3, r2
 8002f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f50:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002f54:	f6a2 0248 	subw	r2, r2, #2120	; 0x848
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 9; k++) {
 8002f60:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002f64:	3301      	adds	r3, #1
 8002f66:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
 8002f6a:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	ddb2      	ble.n	8002ed8 <kalman_update+0x6a8>
        for (int j = 0; j < 9; j++) {
 8002f72:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002f76:	3301      	adds	r3, #1
 8002f78:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 8002f7c:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	dd94      	ble.n	8002eae <kalman_update+0x67e>
    for (int i = 0; i < 9; i++) {
 8002f84:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8002f8e:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	dd87      	ble.n	8002ea6 <kalman_update+0x676>
            }
        }
    }

    // Update P: P = (I - KH) * P
    for (int i = 0; i < 9; i++) {
 8002f96:	2300      	movs	r3, #0
 8002f98:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 8002f9c:	e049      	b.n	8003032 <kalman_update+0x802>
        for (int j = 0; j < 9; j++) {
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 8002fa4:	e03c      	b.n	8003020 <kalman_update+0x7f0>
            kf->P[i][j] = kf->P[i][j] - KH[i * 9 + j];
 8002fa6:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002faa:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	f8d7 283c 	ldr.w	r2, [r7, #2108]	; 0x83c
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	ed93 7a00 	vldr	s14, [r3]
 8002fcc:	f8d7 283c 	ldr.w	r2, [r7, #2108]	; 0x83c
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	441a      	add	r2, r3
 8002fd6:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8002fda:	4413      	add	r3, r2
 8002fdc:	f607 0268 	addw	r2, r7, #2152	; 0x868
 8002fe0:	f6a2 0248 	subw	r2, r2, #2120	; 0x848
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	edd3 7a00 	vldr	s15, [r3]
 8002fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff0:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8002ff4:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	f8d7 283c 	ldr.w	r2, [r7, #2108]	; 0x83c
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4413      	add	r3, r2
 8003004:	f8d7 2838 	ldr.w	r2, [r7, #2104]	; 0x838
 8003008:	4413      	add	r3, r2
 800300a:	3308      	adds	r3, #8
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3304      	adds	r3, #4
 8003012:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 9; j++) {
 8003016:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 800301a:	3301      	adds	r3, #1
 800301c:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
 8003020:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8003024:	2b08      	cmp	r3, #8
 8003026:	ddbe      	ble.n	8002fa6 <kalman_update+0x776>
    for (int i = 0; i < 9; i++) {
 8003028:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 800302c:	3301      	adds	r3, #1
 800302e:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 8003032:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8003036:	2b08      	cmp	r3, #8
 8003038:	ddb1      	ble.n	8002f9e <kalman_update+0x76e>
        }
    }

    // Finally, update the state vector with the new estimates
    kf->x_hat.x = x_hat[0];
 800303a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8003044:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	601a      	str	r2, [r3, #0]
    kf->x_hat.y = x_hat[1];
 800304c:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8003056:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	605a      	str	r2, [r3, #4]
    kf->x_hat.z = x_hat[2];
 800305e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	f607 0368 	addw	r3, r7, #2152	; 0x868
 8003068:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	609a      	str	r2, [r3, #8]
    kf->x_hat.vx = x_hat[3];
 8003070:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	f607 0368 	addw	r3, r7, #2152	; 0x868
 800307a:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60da      	str	r2, [r3, #12]
    kf->x_hat.vy = x_hat[4];
 8003082:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	f607 0368 	addw	r3, r7, #2152	; 0x868
 800308c:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	611a      	str	r2, [r3, #16]
    kf->x_hat.vz = x_hat[5];
 8003094:	f607 0324 	addw	r3, r7, #2084	; 0x824
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f607 0368 	addw	r3, r7, #2152	; 0x868
 800309e:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	615a      	str	r2, [r3, #20]
    kf->x_hat.roll = x_hat[6];
 80030a6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80030b0:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	619a      	str	r2, [r3, #24]
    kf->x_hat.pitch = x_hat[7];
 80030b8:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80030c2:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	61da      	str	r2, [r3, #28]
    kf->x_hat.yaw = x_hat[8];
 80030ca:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	f607 0368 	addw	r3, r7, #2152	; 0x868
 80030d4:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	621a      	str	r2, [r3, #32]
 80030dc:	e000      	b.n	80030e0 <kalman_update+0x8b0>
        return;
 80030de:	bf00      	nop
}
 80030e0:	f607 0768 	addw	r7, r7, #2152	; 0x868
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <sensor_fusion>:




// Function to perform sensor fusion
void sensor_fusion() {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08e      	sub	sp, #56	; 0x38
 80030ec:	af00      	add	r7, sp, #0
        // Get sensor measurements (IMU, Barometer, Magnetometer)


        // Call each sensor function and receive the data structures
        IMUData imu_data = Transmit_IMU_Data();
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff f868 	bl	80021c8 <Transmit_IMU_Data>
        PressureTempData barometer_data = Transmit_Pressure_Temp_Data();
 80030f8:	f000 fcaa 	bl	8003a50 <Transmit_Pressure_Temp_Data>
 80030fc:	eeb0 7a40 	vmov.f32	s14, s0
 8003100:	eef0 7a60 	vmov.f32	s15, s1
 8003104:	ed87 7a03 	vstr	s14, [r7, #12]
 8003108:	edc7 7a04 	vstr	s15, [r7, #16]
        CompassData compass_data = Transmit_Compass_Data();
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fa26 	bl	8001560 <Transmit_Compass_Data>

        // Call sensor functions and populate the MeasurementVector structure
        measurements.accel_x = imu_data.acceleration_x;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <sensor_fusion+0xd8>)
 8003118:	6013      	str	r3, [r2, #0]
        measurements.accel_y = imu_data.acceleration_y;
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4a28      	ldr	r2, [pc, #160]	; (80031c0 <sensor_fusion+0xd8>)
 800311e:	6053      	str	r3, [r2, #4]
        measurements.accel_z = imu_data.acceleration_z;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	4a27      	ldr	r2, [pc, #156]	; (80031c0 <sensor_fusion+0xd8>)
 8003124:	6093      	str	r3, [r2, #8]

        measurements.barometer = barometer_data.pressure_hpa;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <sensor_fusion+0xd8>)
 800312a:	60d3      	str	r3, [r2, #12]

        // Convert heading to three-axis magnetometer data (assuming roll and pitch are 0)
        float heading_rad = compass_data.heading * 0.0174533; // Convert heading from degrees to radians
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd fa0a 	bl	8000548 <__aeabi_f2d>
 8003134:	a320      	add	r3, pc, #128	; (adr r3, 80031b8 <sensor_fusion+0xd0>)
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f7fd fa5d 	bl	80005f8 <__aeabi_dmul>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	f7fd fd4f 	bl	8000be8 <__aeabi_d2f>
 800314a:	4603      	mov	r3, r0
 800314c:	637b      	str	r3, [r7, #52]	; 0x34
        measurements.mag_x = cos(heading_rad);
 800314e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003150:	f7fd f9fa 	bl	8000548 <__aeabi_f2d>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	ec43 2b10 	vmov	d0, r2, r3
 800315c:	f00f fd88 	bl	8012c70 <cos>
 8003160:	ec53 2b10 	vmov	r2, r3, d0
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	f7fd fd3e 	bl	8000be8 <__aeabi_d2f>
 800316c:	4603      	mov	r3, r0
 800316e:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <sensor_fusion+0xd8>)
 8003170:	6113      	str	r3, [r2, #16]
        measurements.mag_y = sin(heading_rad);
 8003172:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003174:	f7fd f9e8 	bl	8000548 <__aeabi_f2d>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	ec43 2b10 	vmov	d0, r2, r3
 8003180:	f00f fdd6 	bl	8012d30 <sin>
 8003184:	ec53 2b10 	vmov	r2, r3, d0
 8003188:	4610      	mov	r0, r2
 800318a:	4619      	mov	r1, r3
 800318c:	f7fd fd2c 	bl	8000be8 <__aeabi_d2f>
 8003190:	4603      	mov	r3, r0
 8003192:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <sensor_fusion+0xd8>)
 8003194:	6153      	str	r3, [r2, #20]
        measurements.mag_z = 0.0; // Assuming the magnetometer is only sensitive to the horizontal plane
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <sensor_fusion+0xd8>)
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	619a      	str	r2, [r3, #24]


        // Perform Kalman Filter prediction step
        kalman_predict(&kf);
 800319e:	4809      	ldr	r0, [pc, #36]	; (80031c4 <sensor_fusion+0xdc>)
 80031a0:	f7ff f934 	bl	800240c <kalman_predict>

        // Perform Kalman Filter update step with the sensor measurements
        kalman_update(&kf, &measurements);
 80031a4:	4906      	ldr	r1, [pc, #24]	; (80031c0 <sensor_fusion+0xd8>)
 80031a6:	4807      	ldr	r0, [pc, #28]	; (80031c4 <sensor_fusion+0xdc>)
 80031a8:	f7ff fb42 	bl	8002830 <kalman_update>

        // Print or use the estimated state vector (kf.x_hat)
        // You can access position, velocity, and orientation estimates from kf.x_hat
}
 80031ac:	bf00      	nop
 80031ae:	3738      	adds	r7, #56	; 0x38
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	f3af 8000 	nop.w
 80031b8:	22d4405f 	.word	0x22d4405f
 80031bc:	3f91df47 	.word	0x3f91df47
 80031c0:	200029d0 	.word	0x200029d0
 80031c4:	20002868 	.word	0x20002868

080031c8 <execute_kalman>:
 * Execution of Kalman Filter and data print on UART1
 * Usage on code :  (
 * 					execute_kalman();
 * 					)
 */
void execute_kalman(){
 80031c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031cc:	b0b8      	sub	sp, #224	; 0xe0
 80031ce:	af06      	add	r7, sp, #24
	kalman_init(&kf);
 80031d0:	483a      	ldr	r0, [pc, #232]	; (80032bc <execute_kalman+0xf4>)
 80031d2:	f7ff f8cb 	bl	800236c <kalman_init>
	sensor_fusion();
 80031d6:	f7ff ff87 	bl	80030e8 <sensor_fusion>
	 // Print the estimated state vector (kf.x_hat)
	char output_str[200]; // You can adjust the buffer size as needed
	snprintf(output_str, sizeof(output_str), "Position: (%f, %f, %f)\r\n", kf.x_hat.x, kf.x_hat.y, kf.x_hat.z);
 80031da:	4b38      	ldr	r3, [pc, #224]	; (80032bc <execute_kalman+0xf4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f9b2 	bl	8000548 <__aeabi_f2d>
 80031e4:	4604      	mov	r4, r0
 80031e6:	460d      	mov	r5, r1
 80031e8:	4b34      	ldr	r3, [pc, #208]	; (80032bc <execute_kalman+0xf4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fd f9ab 	bl	8000548 <__aeabi_f2d>
 80031f2:	4680      	mov	r8, r0
 80031f4:	4689      	mov	r9, r1
 80031f6:	4b31      	ldr	r3, [pc, #196]	; (80032bc <execute_kalman+0xf4>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd f9a4 	bl	8000548 <__aeabi_f2d>
 8003200:	4602      	mov	r2, r0
 8003202:	460b      	mov	r3, r1
 8003204:	4638      	mov	r0, r7
 8003206:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800320a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800320e:	e9cd 4500 	strd	r4, r5, [sp]
 8003212:	4a2b      	ldr	r2, [pc, #172]	; (80032c0 <execute_kalman+0xf8>)
 8003214:	21c8      	movs	r1, #200	; 0xc8
 8003216:	f00b fd07 	bl	800ec28 <sniprintf>
	UART_Transmit_String(output_str);
 800321a:	463b      	mov	r3, r7
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe fa0d 	bl	800163c <UART_Transmit_String>

	snprintf(output_str, sizeof(output_str), "Velocity: (%f, %f, %f)\r\n", kf.x_hat.vx, kf.x_hat.vy, kf.x_hat.vz);
 8003222:	4b26      	ldr	r3, [pc, #152]	; (80032bc <execute_kalman+0xf4>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd f98e 	bl	8000548 <__aeabi_f2d>
 800322c:	4604      	mov	r4, r0
 800322e:	460d      	mov	r5, r1
 8003230:	4b22      	ldr	r3, [pc, #136]	; (80032bc <execute_kalman+0xf4>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f987 	bl	8000548 <__aeabi_f2d>
 800323a:	4680      	mov	r8, r0
 800323c:	4689      	mov	r9, r1
 800323e:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <execute_kalman+0xf4>)
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd f980 	bl	8000548 <__aeabi_f2d>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4638      	mov	r0, r7
 800324e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003252:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003256:	e9cd 4500 	strd	r4, r5, [sp]
 800325a:	4a1a      	ldr	r2, [pc, #104]	; (80032c4 <execute_kalman+0xfc>)
 800325c:	21c8      	movs	r1, #200	; 0xc8
 800325e:	f00b fce3 	bl	800ec28 <sniprintf>
	UART_Transmit_String(output_str);
 8003262:	463b      	mov	r3, r7
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe f9e9 	bl	800163c <UART_Transmit_String>

	snprintf(output_str, sizeof(output_str), "Orientation (Roll, Pitch, Yaw): (%f, %f, %f)\r\n", kf.x_hat.roll, kf.x_hat.pitch, kf.x_hat.yaw);
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <execute_kalman+0xf4>)
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd f96a 	bl	8000548 <__aeabi_f2d>
 8003274:	4604      	mov	r4, r0
 8003276:	460d      	mov	r5, r1
 8003278:	4b10      	ldr	r3, [pc, #64]	; (80032bc <execute_kalman+0xf4>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd f963 	bl	8000548 <__aeabi_f2d>
 8003282:	4680      	mov	r8, r0
 8003284:	4689      	mov	r9, r1
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <execute_kalman+0xf4>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd f95c 	bl	8000548 <__aeabi_f2d>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4638      	mov	r0, r7
 8003296:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800329a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800329e:	e9cd 4500 	strd	r4, r5, [sp]
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <execute_kalman+0x100>)
 80032a4:	21c8      	movs	r1, #200	; 0xc8
 80032a6:	f00b fcbf 	bl	800ec28 <sniprintf>
	UART_Transmit_String(output_str);
 80032aa:	463b      	mov	r3, r7
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe f9c5 	bl	800163c <UART_Transmit_String>



}
 80032b2:	bf00      	nop
 80032b4:	37c8      	adds	r7, #200	; 0xc8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032bc:	20002868 	.word	0x20002868
 80032c0:	080149ec 	.word	0x080149ec
 80032c4:	08014a08 	.word	0x08014a08
 80032c8:	08014a24 	.word	0x08014a24

080032cc <dps310_i2c_read>:
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}



int8_t dps310_i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af04      	add	r7, sp, #16
 80032d2:	603a      	str	r2, [r7, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
 80032da:	460b      	mov	r3, r1
 80032dc:	71bb      	strb	r3, [r7, #6]
 80032de:	4613      	mov	r3, r2
 80032e0:	80bb      	strh	r3, [r7, #4]


	  // Perform the I2C read operation using HAL_I2C_Mem_Read
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	b299      	uxth	r1, r3
 80032e6:	79bb      	ldrb	r3, [r7, #6]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	2364      	movs	r3, #100	; 0x64
 80032ec:	9302      	str	r3, [sp, #8]
 80032ee:	88bb      	ldrh	r3, [r7, #4]
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	2301      	movs	r3, #1
 80032f8:	4807      	ldr	r0, [pc, #28]	; (8003318 <dps310_i2c_read+0x4c>)
 80032fa:	f004 f963 	bl	80075c4 <HAL_I2C_Mem_Read>
 80032fe:	4603      	mov	r3, r0
 8003300:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <dps310_i2c_read+0x40>
 8003308:	2300      	movs	r3, #0
 800330a:	e001      	b.n	8003310 <dps310_i2c_read+0x44>
 800330c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff


}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20002a8c 	.word	0x20002a8c

0800331c <dps310_i2c_write>:

int8_t dps310_i2c_write(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af04      	add	r7, sp, #16
 8003322:	603a      	str	r2, [r7, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
 800332a:	460b      	mov	r3, r1
 800332c:	71bb      	strb	r3, [r7, #6]
 800332e:	4613      	mov	r3, r2
 8003330:	80bb      	strh	r3, [r7, #4]

	  // Perform the I2C write operation using HAL_I2C_Mem_Write
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	b299      	uxth	r1, r3
 8003336:	79bb      	ldrb	r3, [r7, #6]
 8003338:	b29a      	uxth	r2, r3
 800333a:	2364      	movs	r3, #100	; 0x64
 800333c:	9302      	str	r3, [sp, #8]
 800333e:	88bb      	ldrh	r3, [r7, #4]
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2301      	movs	r3, #1
 8003348:	4807      	ldr	r0, [pc, #28]	; (8003368 <dps310_i2c_write+0x4c>)
 800334a:	f004 f841 	bl	80073d0 <HAL_I2C_Mem_Write>
 800334e:	4603      	mov	r3, r0
 8003350:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <dps310_i2c_write+0x40>
 8003358:	2300      	movs	r3, #0
 800335a:	e001      	b.n	8003360 <dps310_i2c_write+0x44>
 800335c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20002a8c 	.word	0x20002a8c

0800336c <Pressure_Init>:



int32_t Pressure_Init(){
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0

    int16_t ret;

    ret = product_id_check();
 8003372:	f000 fb21 	bl	80039b8 <product_id_check>
 8003376:	4603      	mov	r3, r0
 8003378:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 800337a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <Pressure_Init+0x1c>
 8003382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003386:	e011      	b.n	80033ac <Pressure_Init+0x40>

    dps310_configure_temperature(
 8003388:	2000      	movs	r0, #0
 800338a:	f000 f8b1 	bl	80034f0 <dps310_configure_temperature>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_TMP_CFG_TMP_PRC_SINGLE);

    dps310_configure_pressure(
 800338e:	2001      	movs	r0, #1
 8003390:	f000 f8da 	bl	8003548 <dps310_configure_pressure>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_PRS_CFG_PM_PRC_2_TIMES);

    ret = read_coefs();
 8003394:	f000 f80e 	bl	80033b4 <read_coefs>
 8003398:	4603      	mov	r3, r0
 800339a:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 800339c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <Pressure_Init+0x3e>
 80033a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033a8:	e000      	b.n	80033ac <Pressure_Init+0x40>

    return 0;
 80033aa:	2300      	movs	r3, #0

}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <read_coefs>:

int16_t dps310_reset() {
    return write_byte_to_reg(DPS310_RESET_REG, DPS310_RESET_SOFT_RST_VALUE);
}

int16_t read_coefs() {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[18];

    ret = wait_for_reg_value(
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	2180      	movs	r1, #128	; 0x80
 80033be:	2008      	movs	r0, #8
 80033c0:	f000 fa3e 	bl	8003840 <wait_for_reg_value>
 80033c4:	4603      	mov	r3, r0
 80033c6:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE);

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_COEF_REG, buff, 18);
 80033c8:	1d3a      	adds	r2, r7, #4
 80033ca:	2312      	movs	r3, #18
 80033cc:	2110      	movs	r1, #16
 80033ce:	20ee      	movs	r0, #238	; 0xee
 80033d0:	f7ff ff7c 	bl	80032cc <dps310_i2c_read>
 80033d4:	4603      	mov	r3, r0
 80033d6:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 80033d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <read_coefs+0x32>
 80033e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80033e4:	e07d      	b.n	80034e2 <read_coefs+0x12e>

    g_coefs.c0 = get_two_complement_of(
            ((uint16_t) buff[0] << 4u) | (((uint16_t) buff[1] >> 4u) & 0x0Fu),
 80033e6:	793b      	ldrb	r3, [r7, #4]
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	461a      	mov	r2, r3
 80033ec:	797b      	ldrb	r3, [r7, #5]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	4313      	orrs	r3, r2
    g_coefs.c0 = get_two_complement_of(
 80033f8:	210c      	movs	r1, #12
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fab8 	bl	8003970 <get_two_complement_of>
 8003400:	4603      	mov	r3, r0
 8003402:	b21a      	sxth	r2, r3
 8003404:	4b39      	ldr	r3, [pc, #228]	; (80034ec <read_coefs+0x138>)
 8003406:	801a      	strh	r2, [r3, #0]
            12);

    g_coefs.c1 = get_two_complement_of(
            ((((uint16_t) buff[1] & 0x0Fu) << 8u) | (uint16_t) buff[2]),
 8003408:	797b      	ldrb	r3, [r7, #5]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003410:	79ba      	ldrb	r2, [r7, #6]
 8003412:	4313      	orrs	r3, r2
    g_coefs.c1 = get_two_complement_of(
 8003414:	210c      	movs	r1, #12
 8003416:	4618      	mov	r0, r3
 8003418:	f000 faaa 	bl	8003970 <get_two_complement_of>
 800341c:	4603      	mov	r3, r0
 800341e:	b21a      	sxth	r2, r3
 8003420:	4b32      	ldr	r3, [pc, #200]	; (80034ec <read_coefs+0x138>)
 8003422:	805a      	strh	r2, [r3, #2]
            12);

    g_coefs.c00 = get_two_complement_of(
            ((uint32_t) buff[3] << 12u) | ((uint32_t) buff[4] << 4u) | (((uint32_t) buff[5] >> 4u) & 0x0Fu),
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	031a      	lsls	r2, r3, #12
 8003428:	7a3b      	ldrb	r3, [r7, #8]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	431a      	orrs	r2, r3
 800342e:	7a7b      	ldrb	r3, [r7, #9]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f003 030f 	and.w	r3, r3, #15
    g_coefs.c00 = get_two_complement_of(
 8003438:	4313      	orrs	r3, r2
 800343a:	2114      	movs	r1, #20
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fa97 	bl	8003970 <get_two_complement_of>
 8003442:	4603      	mov	r3, r0
 8003444:	4a29      	ldr	r2, [pc, #164]	; (80034ec <read_coefs+0x138>)
 8003446:	6053      	str	r3, [r2, #4]
            20);

    g_coefs.c10 = get_two_complement_of(
            (((uint32_t) buff[5] & 0x0Fu) << 16u) | ((uint32_t) buff[6] << 8u) | (uint32_t) buff[7],
 8003448:	7a7b      	ldrb	r3, [r7, #9]
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003450:	7abb      	ldrb	r3, [r7, #10]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	4313      	orrs	r3, r2
 8003456:	7afa      	ldrb	r2, [r7, #11]
    g_coefs.c10 = get_two_complement_of(
 8003458:	4313      	orrs	r3, r2
 800345a:	2114      	movs	r1, #20
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fa87 	bl	8003970 <get_two_complement_of>
 8003462:	4603      	mov	r3, r0
 8003464:	4a21      	ldr	r2, [pc, #132]	; (80034ec <read_coefs+0x138>)
 8003466:	6093      	str	r3, [r2, #8]
            20);

    g_coefs.c01 = get_two_complement_of(
            ((uint16_t) buff[8] << 8u) | (uint16_t) buff[9],
 8003468:	7b3b      	ldrb	r3, [r7, #12]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	7b7a      	ldrb	r2, [r7, #13]
 800346e:	4313      	orrs	r3, r2
    g_coefs.c01 = get_two_complement_of(
 8003470:	2110      	movs	r1, #16
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fa7c 	bl	8003970 <get_two_complement_of>
 8003478:	4603      	mov	r3, r0
 800347a:	b21a      	sxth	r2, r3
 800347c:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <read_coefs+0x138>)
 800347e:	819a      	strh	r2, [r3, #12]
            16);

    g_coefs.c11 = get_two_complement_of(
            ((uint16_t) buff[10] << 8u) | (uint16_t) buff[11],
 8003480:	7bbb      	ldrb	r3, [r7, #14]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	7bfa      	ldrb	r2, [r7, #15]
 8003486:	4313      	orrs	r3, r2
    g_coefs.c11 = get_two_complement_of(
 8003488:	2110      	movs	r1, #16
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fa70 	bl	8003970 <get_two_complement_of>
 8003490:	4603      	mov	r3, r0
 8003492:	b21a      	sxth	r2, r3
 8003494:	4b15      	ldr	r3, [pc, #84]	; (80034ec <read_coefs+0x138>)
 8003496:	81da      	strh	r2, [r3, #14]
            16);

    g_coefs.c20 = get_two_complement_of(
            ((uint16_t) buff[12] << 8u) | (uint16_t) buff[13],
 8003498:	7c3b      	ldrb	r3, [r7, #16]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	7c7a      	ldrb	r2, [r7, #17]
 800349e:	4313      	orrs	r3, r2
    g_coefs.c20 = get_two_complement_of(
 80034a0:	2110      	movs	r1, #16
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fa64 	bl	8003970 <get_two_complement_of>
 80034a8:	4603      	mov	r3, r0
 80034aa:	b21a      	sxth	r2, r3
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <read_coefs+0x138>)
 80034ae:	821a      	strh	r2, [r3, #16]
            16);

    g_coefs.c21 = get_two_complement_of(
            ((uint16_t) buff[14] << 8u) | (uint16_t) buff[15],
 80034b0:	7cbb      	ldrb	r3, [r7, #18]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	7cfa      	ldrb	r2, [r7, #19]
 80034b6:	4313      	orrs	r3, r2
    g_coefs.c21 = get_two_complement_of(
 80034b8:	2110      	movs	r1, #16
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fa58 	bl	8003970 <get_two_complement_of>
 80034c0:	4603      	mov	r3, r0
 80034c2:	b21a      	sxth	r2, r3
 80034c4:	4b09      	ldr	r3, [pc, #36]	; (80034ec <read_coefs+0x138>)
 80034c6:	825a      	strh	r2, [r3, #18]
            16);

    g_coefs.c30 = get_two_complement_of(
            ((uint16_t) buff[16] << 8u) | (uint16_t) buff[17],
 80034c8:	7d3b      	ldrb	r3, [r7, #20]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	7d7a      	ldrb	r2, [r7, #21]
 80034ce:	4313      	orrs	r3, r2
    g_coefs.c30 = get_two_complement_of(
 80034d0:	2110      	movs	r1, #16
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fa4c 	bl	8003970 <get_two_complement_of>
 80034d8:	4603      	mov	r3, r0
 80034da:	b21a      	sxth	r2, r3
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <read_coefs+0x138>)
 80034de:	829a      	strh	r2, [r3, #20]
            16);

    return DPS310_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200029ec 	.word	0x200029ec

080034f0 <dps310_configure_temperature>:

int16_t dps310_configure_temperature(uint8_t data) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
    int16_t ret;
    uint8_t temperature_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	737b      	strb	r3, [r7, #13]

    ret = get_temperature_sensor(&temperature_sensor);
 80034fe:	f107 030d 	add.w	r3, r7, #13
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fa7e 	bl	8003a04 <get_temperature_sensor>
 8003508:	4603      	mov	r3, r0
 800350a:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 800350c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <dps310_configure_temperature+0x2a>
 8003514:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003518:	e00f      	b.n	800353a <dps310_configure_temperature+0x4a>

    g_temperature_rate = DPS310_TMP_CFG_TMP_RATE_MASK & data;
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <dps310_configure_temperature+0x54>)
 8003524:	701a      	strb	r2, [r3, #0]
    data |= temperature_sensor;
 8003526:	7b7a      	ldrb	r2, [r7, #13]
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	4313      	orrs	r3, r2
 800352c:	71fb      	strb	r3, [r7, #7]

    return write_byte_to_reg(DPS310_TMP_CFG_REG, data);
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	4619      	mov	r1, r3
 8003532:	2007      	movs	r0, #7
 8003534:	f000 f820 	bl	8003578 <write_byte_to_reg>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20002a05 	.word	0x20002a05

08003548 <dps310_configure_pressure>:

int16_t dps310_configure_pressure(uint8_t data) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	71fb      	strb	r3, [r7, #7]
    g_pressure_rate = DPS310_PRS_CFG_PM_RATE_MASK & data;
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <dps310_configure_pressure+0x2c>)
 800355c:	701a      	strb	r2, [r3, #0]
    return write_byte_to_reg(DPS310_PRS_CFG_REG, data);
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	4619      	mov	r1, r3
 8003562:	2006      	movs	r0, #6
 8003564:	f000 f808 	bl	8003578 <write_byte_to_reg>
 8003568:	4603      	mov	r3, r0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20002a04 	.word	0x20002a04

08003578 <write_byte_to_reg>:

int16_t write_byte_to_reg(uint8_t reg_addr, uint8_t data) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	460a      	mov	r2, r1
 8003582:	71fb      	strb	r3, [r7, #7]
 8003584:	4613      	mov	r3, r2
 8003586:	71bb      	strb	r3, [r7, #6]
    int16_t ret;
    uint8_t buff[1];

    buff[0] = data;
 8003588:	79bb      	ldrb	r3, [r7, #6]
 800358a:	733b      	strb	r3, [r7, #12]
    ret = dps310_i2c_write(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 800358c:	f107 020c 	add.w	r2, r7, #12
 8003590:	79f9      	ldrb	r1, [r7, #7]
 8003592:	2301      	movs	r3, #1
 8003594:	20ee      	movs	r0, #238	; 0xee
 8003596:	f7ff fec1 	bl	800331c <dps310_i2c_write>
 800359a:	4603      	mov	r3, r0
 800359c:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 800359e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <write_byte_to_reg+0x34>
 80035a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035aa:	e000      	b.n	80035ae <write_byte_to_reg+0x36>

    return DPS310_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <read_temperature>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t read_temperature(float *p_temperature) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_TMP);
 80035c0:	2102      	movs	r1, #2
 80035c2:	2008      	movs	r0, #8
 80035c4:	f7ff ffd8 	bl	8003578 <write_byte_to_reg>
 80035c8:	4603      	mov	r3, r0
 80035ca:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 80035cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <read_temperature+0x22>
 80035d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80035d8:	e066      	b.n	80036a8 <read_temperature+0xf0>

    ret = wait_for_reg_value(
 80035da:	2267      	movs	r2, #103	; 0x67
 80035dc:	2160      	movs	r1, #96	; 0x60
 80035de:	2008      	movs	r0, #8
 80035e0:	f000 f92e 	bl	8003840 <wait_for_reg_value>
 80035e4:	4603      	mov	r3, r0
 80035e6:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 80035e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <read_temperature+0x3e>
 80035f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80035f4:	e058      	b.n	80036a8 <read_temperature+0xf0>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_B2_REG, buff, 3);
 80035f6:	f107 020c 	add.w	r2, r7, #12
 80035fa:	2303      	movs	r3, #3
 80035fc:	2103      	movs	r1, #3
 80035fe:	20ee      	movs	r0, #238	; 0xee
 8003600:	f7ff fe64 	bl	80032cc <dps310_i2c_read>
 8003604:	4603      	mov	r3, r0
 8003606:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8003608:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <read_temperature+0x5e>
 8003610:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003614:	e048      	b.n	80036a8 <read_temperature+0xf0>

    int32_t temp_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 8003616:	7b3b      	ldrb	r3, [r7, #12]
 8003618:	041a      	lsls	r2, r3, #16
 800361a:	7b7b      	ldrb	r3, [r7, #13]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	4313      	orrs	r3, r2
 8003620:	7bba      	ldrb	r2, [r7, #14]
    int32_t temp_raw = get_two_complement_of(
 8003622:	4313      	orrs	r3, r2
 8003624:	2118      	movs	r1, #24
 8003626:	4618      	mov	r0, r3
 8003628:	f000 f9a2 	bl	8003970 <get_two_complement_of>
 800362c:	6138      	str	r0, [r7, #16]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_temperature_rate, &factor);
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <read_temperature+0xf8>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	f107 0208 	add.w	r2, r7, #8
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f000 f940 	bl	80038be <get_scale_factor_for>
 800363e:	4603      	mov	r3, r0
 8003640:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8003642:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <read_temperature+0x98>
 800364a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800364e:	e02b      	b.n	80036a8 <read_temperature+0xf0>

    g_last_temp_raw_sc = (float) temp_raw / factor;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <read_temperature+0xfc>)
 800366a:	edc3 7a00 	vstr	s15, [r3]
    *p_temperature = (float) g_coefs.c0 * 0.5f + (float) g_coefs.c1 * g_last_temp_raw_sc;
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <read_temperature+0x100>)
 8003670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003680:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <read_temperature+0x100>)
 8003686:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <read_temperature+0xfc>)
 8003694:	edd3 7a00 	vldr	s15, [r3]
 8003698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800369c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20002a05 	.word	0x20002a05
 80036b4:	20002a08 	.word	0x20002a08
 80036b8:	200029ec 	.word	0x200029ec

080036bc <read_pressure>:

int16_t read_pressure(float *p_pressure) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_PRS);
 80036c4:	2101      	movs	r1, #1
 80036c6:	2008      	movs	r0, #8
 80036c8:	f7ff ff56 	bl	8003578 <write_byte_to_reg>
 80036cc:	4603      	mov	r3, r0
 80036ce:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 80036d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <read_pressure+0x22>
 80036d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80036dc:	e0a4      	b.n	8003828 <read_pressure+0x16c>

    ret = wait_for_reg_value(
 80036de:	2257      	movs	r2, #87	; 0x57
 80036e0:	2150      	movs	r1, #80	; 0x50
 80036e2:	2008      	movs	r0, #8
 80036e4:	f000 f8ac 	bl	8003840 <wait_for_reg_value>
 80036e8:	4603      	mov	r3, r0
 80036ea:	83fb      	strh	r3, [r7, #30]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 80036ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <read_pressure+0x3e>
 80036f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80036f8:	e096      	b.n	8003828 <read_pressure+0x16c>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PSR_B2_REG, buff, 3);
 80036fa:	f107 0210 	add.w	r2, r7, #16
 80036fe:	2303      	movs	r3, #3
 8003700:	2100      	movs	r1, #0
 8003702:	20ee      	movs	r0, #238	; 0xee
 8003704:	f7ff fde2 	bl	80032cc <dps310_i2c_read>
 8003708:	4603      	mov	r3, r0
 800370a:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 800370c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <read_pressure+0x5e>
 8003714:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003718:	e086      	b.n	8003828 <read_pressure+0x16c>

    int32_t pressure_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 800371a:	7c3b      	ldrb	r3, [r7, #16]
 800371c:	041a      	lsls	r2, r3, #16
 800371e:	7c7b      	ldrb	r3, [r7, #17]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	4313      	orrs	r3, r2
 8003724:	7cba      	ldrb	r2, [r7, #18]
    int32_t pressure_raw = get_two_complement_of(
 8003726:	4313      	orrs	r3, r2
 8003728:	2118      	movs	r1, #24
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f920 	bl	8003970 <get_two_complement_of>
 8003730:	61b8      	str	r0, [r7, #24]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_pressure_rate, &factor);
 8003732:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <read_pressure+0x174>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	f107 020c 	add.w	r2, r7, #12
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f8be 	bl	80038be <get_scale_factor_for>
 8003742:	4603      	mov	r3, r0
 8003744:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8003746:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <read_pressure+0x98>
 800374e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003752:	e069      	b.n	8003828 <read_pressure+0x16c>

    float pressure_raw_sc = (float) pressure_raw / factor;
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	ee07 3a90 	vmov	s15, r3
 8003764:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800376c:	edc7 7a05 	vstr	s15, [r7, #20]

    // *0.01f -> Convert compensated pressure measurement from Pa to hPa
    *p_pressure = (g_coefs.c00 +
 8003770:	4b30      	ldr	r3, [pc, #192]	; (8003834 <read_pressure+0x178>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 800377c:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <read_pressure+0x178>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	ee07 3a90 	vmov	s15, r3
 8003784:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003788:	4b2a      	ldr	r3, [pc, #168]	; (8003834 <read_pressure+0x178>)
 800378a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003796:	4b27      	ldr	r3, [pc, #156]	; (8003834 <read_pressure+0x178>)
 8003798:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800379c:	ee07 3a90 	vmov	s15, r3
 80037a0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80037a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80037a8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80037ac:	ee36 6a27 	vadd.f32	s12, s12, s15
 80037b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80037b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80037b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80037bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80037c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    *p_pressure = (g_coefs.c00 +
 80037c4:	ee37 7a27 	vadd.f32	s14, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <read_pressure+0x178>)
 80037ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037d6:	4b17      	ldr	r3, [pc, #92]	; (8003834 <read_pressure+0x178>)
 80037d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80037e4:	4b13      	ldr	r3, [pc, #76]	; (8003834 <read_pressure+0x178>)
 80037e6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80037f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037f6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80037fa:	ee36 6a27 	vadd.f32	s12, s12, s15
 80037fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003802:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003806:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <read_pressure+0x17c>)
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 8003814:	ee77 7a27 	vadd.f32	s15, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 8003818:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800383c <read_pressure+0x180>
 800381c:	ee67 7a87 	vmul.f32	s15, s15, s14
    *p_pressure = (g_coefs.c00 +
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20002a04 	.word	0x20002a04
 8003834:	200029ec 	.word	0x200029ec
 8003838:	20002a08 	.word	0x20002a08
 800383c:	3c23d70a 	.word	0x3c23d70a

08003840 <wait_for_reg_value>:

int16_t wait_for_reg_value(uint8_t reg_addr, uint8_t reg_value, uint8_t mask) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
 800384a:	460b      	mov	r3, r1
 800384c:	71bb      	strb	r3, [r7, #6]
 800384e:	4613      	mov	r3, r2
 8003850:	717b      	strb	r3, [r7, #5]
    int16_t ret;
    uint8_t buff[1];
    uint16_t attempts = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	81fb      	strh	r3, [r7, #14]

    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8003856:	e024      	b.n	80038a2 <wait_for_reg_value+0x62>
        attempts++;
 8003858:	89fb      	ldrh	r3, [r7, #14]
 800385a:	3301      	adds	r3, #1
 800385c:	81fb      	strh	r3, [r7, #14]

        ret = dps310_i2c_read(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 800385e:	f107 0208 	add.w	r2, r7, #8
 8003862:	79f9      	ldrb	r1, [r7, #7]
 8003864:	2301      	movs	r3, #1
 8003866:	20ee      	movs	r0, #238	; 0xee
 8003868:	f7ff fd30 	bl	80032cc <dps310_i2c_read>
 800386c:	4603      	mov	r3, r0
 800386e:	81bb      	strh	r3, [r7, #12]
        if (ret != DPS310_OK) return ret;
 8003870:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <wait_for_reg_value+0x3e>
 8003878:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800387c:	e01b      	b.n	80038b6 <wait_for_reg_value+0x76>

        bool b_is_expected_value = ((buff[0] & mask) == reg_value);
 800387e:	7a3a      	ldrb	r2, [r7, #8]
 8003880:	797b      	ldrb	r3, [r7, #5]
 8003882:	4013      	ands	r3, r2
 8003884:	b2db      	uxtb	r3, r3
 8003886:	79ba      	ldrb	r2, [r7, #6]
 8003888:	429a      	cmp	r2, r3
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	72fb      	strb	r3, [r7, #11]
        if (b_is_expected_value) return DPS310_OK;
 8003892:	7afb      	ldrb	r3, [r7, #11]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <wait_for_reg_value+0x5c>
 8003898:	2300      	movs	r3, #0
 800389a:	e00c      	b.n	80038b6 <wait_for_reg_value+0x76>

        HAL_Delay(10);
 800389c:	200a      	movs	r0, #10
 800389e:	f002 fbbd 	bl	800601c <HAL_Delay>
    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 80038a2:	89fb      	ldrh	r3, [r7, #14]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d9d7      	bls.n	8003858 <wait_for_reg_value+0x18>
    }

    if (attempts == DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 80038a8:	89fb      	ldrh	r3, [r7, #14]
 80038aa:	2b03      	cmp	r3, #3
 80038ac:	d102      	bne.n	80038b4 <wait_for_reg_value+0x74>
        return DPS310_WAIT_TIMEOUT_ERROR;
 80038ae:	f06f 0303 	mvn.w	r3, #3
 80038b2:	e000      	b.n	80038b6 <wait_for_reg_value+0x76>
    }

    return DPS310_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <get_scale_factor_for>:

int16_t get_scale_factor_for(uint8_t rate, uint32_t *p_factor) {
 80038be:	b480      	push	{r7}
 80038c0:	b085      	sub	sp, #20
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	6039      	str	r1, [r7, #0]
 80038c8:	71fb      	strb	r3, [r7, #7]
    uint32_t ret = DPS310_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]

    switch (rate) {
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	2b70      	cmp	r3, #112	; 0x70
 80038d2:	d03d      	beq.n	8003950 <get_scale_factor_for+0x92>
 80038d4:	2b70      	cmp	r3, #112	; 0x70
 80038d6:	dc40      	bgt.n	800395a <get_scale_factor_for+0x9c>
 80038d8:	2b60      	cmp	r3, #96	; 0x60
 80038da:	d034      	beq.n	8003946 <get_scale_factor_for+0x88>
 80038dc:	2b60      	cmp	r3, #96	; 0x60
 80038de:	dc3c      	bgt.n	800395a <get_scale_factor_for+0x9c>
 80038e0:	2b50      	cmp	r3, #80	; 0x50
 80038e2:	d02b      	beq.n	800393c <get_scale_factor_for+0x7e>
 80038e4:	2b50      	cmp	r3, #80	; 0x50
 80038e6:	dc38      	bgt.n	800395a <get_scale_factor_for+0x9c>
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d022      	beq.n	8003932 <get_scale_factor_for+0x74>
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	dc34      	bgt.n	800395a <get_scale_factor_for+0x9c>
 80038f0:	2b30      	cmp	r3, #48	; 0x30
 80038f2:	d019      	beq.n	8003928 <get_scale_factor_for+0x6a>
 80038f4:	2b30      	cmp	r3, #48	; 0x30
 80038f6:	dc30      	bgt.n	800395a <get_scale_factor_for+0x9c>
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d010      	beq.n	800391e <get_scale_factor_for+0x60>
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	dc2c      	bgt.n	800395a <get_scale_factor_for+0x9c>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <get_scale_factor_for+0x4c>
 8003904:	2b10      	cmp	r3, #16
 8003906:	d005      	beq.n	8003914 <get_scale_factor_for+0x56>
 8003908:	e027      	b.n	800395a <get_scale_factor_for+0x9c>
        case DPS310_CFG_RATE_1_MEAS:
            *p_factor = 524288;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003910:	601a      	str	r2, [r3, #0]
            break;
 8003912:	e025      	b.n	8003960 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_2_MEAS:
            *p_factor = 1572864;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800391a:	601a      	str	r2, [r3, #0]
            break;
 800391c:	e020      	b.n	8003960 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_4_MEAS:
            *p_factor = 3670016;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8003924:	601a      	str	r2, [r3, #0]
            break;
 8003926:	e01b      	b.n	8003960 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_8_MEAS:
            *p_factor = 7864320;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800392e:	601a      	str	r2, [r3, #0]
            break;
 8003930:	e016      	b.n	8003960 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_16_MEAS:
            *p_factor = 253952;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 8003938:	601a      	str	r2, [r3, #0]
            break;
 800393a:	e011      	b.n	8003960 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_32_MEAS:
            *p_factor = 516096;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 8003942:	601a      	str	r2, [r3, #0]
            break;
 8003944:	e00c      	b.n	8003960 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_64_MEAS:
            *p_factor = 1040384;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 800394c:	601a      	str	r2, [r3, #0]
            break;
 800394e:	e007      	b.n	8003960 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_128_MEAS:
            *p_factor = 2088960;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8003956:	601a      	str	r2, [r3, #0]
            break;
 8003958:	e002      	b.n	8003960 <get_scale_factor_for+0xa2>
        default:
            ret = DPS310_UNKNOWN_RATE_ERROR;
 800395a:	f06f 0304 	mvn.w	r3, #4
 800395e:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	b21b      	sxth	r3, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <get_two_complement_of>:

int32_t get_two_complement_of(uint32_t value, uint8_t length) {
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	70fb      	strb	r3, [r7, #3]
    int32_t ret = value;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60fb      	str	r3, [r7, #12]
    bool b_is_negative = value & (1u << (length - 1u));
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	3b01      	subs	r3, #1
 8003984:	2201      	movs	r2, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	72fb      	strb	r3, [r7, #11]

    if (b_is_negative) {
 8003996:	7afb      	ldrb	r3, [r7, #11]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d006      	beq.n	80039aa <get_two_complement_of+0x3a>
        ret -= ((uint32_t) 1 << length);
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f303 	lsl.w	r3, r1, r3
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 80039aa:	68fb      	ldr	r3, [r7, #12]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <product_id_check>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t product_id_check() {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PRODUCT_ID_REG, buff, 1);
 80039be:	1d3a      	adds	r2, r7, #4
 80039c0:	2301      	movs	r3, #1
 80039c2:	210d      	movs	r1, #13
 80039c4:	20ee      	movs	r0, #238	; 0xee
 80039c6:	f7ff fc81 	bl	80032cc <dps310_i2c_read>
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 80039ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <product_id_check+0x24>
 80039d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039da:	e00f      	b.n	80039fc <product_id_check+0x44>

    bool b_is_product_id_valid = buff[0] == DPS310_PRODUCT_ID_VALUE;
 80039dc:	793b      	ldrb	r3, [r7, #4]
 80039de:	2b10      	cmp	r3, #16
 80039e0:	bf0c      	ite	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	2300      	movne	r3, #0
 80039e6:	717b      	strb	r3, [r7, #5]
    if (!b_is_product_id_valid) return DPS310_PRODUCT_ID_ERROR;
 80039e8:	797b      	ldrb	r3, [r7, #5]
 80039ea:	f083 0301 	eor.w	r3, r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <product_id_check+0x42>
 80039f4:	f06f 0301 	mvn.w	r3, #1
 80039f8:	e000      	b.n	80039fc <product_id_check+0x44>

    return DPS310_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <get_temperature_sensor>:

int16_t get_temperature_sensor(uint8_t *p_sensor) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
    uint16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_COEF_SRCE, buff, 1);
 8003a0c:	f107 020c 	add.w	r2, r7, #12
 8003a10:	2301      	movs	r3, #1
 8003a12:	2128      	movs	r1, #40	; 0x28
 8003a14:	20ee      	movs	r0, #238	; 0xee
 8003a16:	f7ff fc59 	bl	80032cc <dps310_i2c_read>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 8003a1e:	89fb      	ldrh	r3, [r7, #14]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <get_temperature_sensor+0x26>
 8003a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a28:	e00e      	b.n	8003a48 <get_temperature_sensor+0x44>

    uint8_t value = buff[0] & DPS310_TMP_COEF_SRCE_MASK;
 8003a2a:	7b3b      	ldrb	r3, [r7, #12]
 8003a2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a30:	737b      	strb	r3, [r7, #13]

    if (value) {
 8003a32:	7b7b      	ldrb	r3, [r7, #13]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <get_temperature_sensor+0x3c>
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2280      	movs	r2, #128	; 0x80
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	e002      	b.n	8003a46 <get_temperature_sensor+0x42>
    } else {
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_INTERNAL;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	701a      	strb	r2, [r3, #0]
    }

    return DPS310_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <Transmit_Pressure_Temp_Data>:


PressureTempData Transmit_Pressure_Temp_Data(){
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0


	  pressure_read_state = read_pressure(&pressure_value);
 8003a56:	4822      	ldr	r0, [pc, #136]	; (8003ae0 <Transmit_Pressure_Temp_Data+0x90>)
 8003a58:	f7ff fe30 	bl	80036bc <read_pressure>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <Transmit_Pressure_Temp_Data+0x94>)
 8003a62:	801a      	strh	r2, [r3, #0]
	  temperature_p_state = read_temperature(&temperature_p_value);
 8003a64:	4820      	ldr	r0, [pc, #128]	; (8003ae8 <Transmit_Pressure_Temp_Data+0x98>)
 8003a66:	f7ff fda7 	bl	80035b8 <read_temperature>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b1f      	ldr	r3, [pc, #124]	; (8003aec <Transmit_Pressure_Temp_Data+0x9c>)
 8003a70:	801a      	strh	r2, [r3, #0]

	  if(pressure_read_state == 0 && temperature_p_state == 0){
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <Transmit_Pressure_Temp_Data+0x94>)
 8003a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d114      	bne.n	8003aa6 <Transmit_Pressure_Temp_Data+0x56>
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <Transmit_Pressure_Temp_Data+0x9c>)
 8003a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10f      	bne.n	8003aa6 <Transmit_Pressure_Temp_Data+0x56>
		    pressure_temp_data.pressure_hpa = pressure_value;
 8003a86:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <Transmit_Pressure_Temp_Data+0x90>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a19      	ldr	r2, [pc, #100]	; (8003af0 <Transmit_Pressure_Temp_Data+0xa0>)
 8003a8c:	6013      	str	r3, [r2, #0]
		    pressure_temp_data.temperature_celsius = temperature_p_value;
 8003a8e:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <Transmit_Pressure_Temp_Data+0x98>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <Transmit_Pressure_Temp_Data+0xa0>)
 8003a94:	6053      	str	r3, [r2, #4]

		    return pressure_temp_data;
 8003a96:	4a16      	ldr	r2, [pc, #88]	; (8003af0 <Transmit_Pressure_Temp_Data+0xa0>)
 8003a98:	f107 0308 	add.w	r3, r7, #8
 8003a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003aa0:	e883 0003 	stmia.w	r3, {r0, r1}
 8003aa4:	e00e      	b.n	8003ac4 <Transmit_Pressure_Temp_Data+0x74>
	  } else {
		    pressure_temp_data.pressure_hpa = 0;
 8003aa6:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <Transmit_Pressure_Temp_Data+0xa0>)
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
		    pressure_temp_data.temperature_celsius = 0;
 8003aae:	4b10      	ldr	r3, [pc, #64]	; (8003af0 <Transmit_Pressure_Temp_Data+0xa0>)
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	605a      	str	r2, [r3, #4]

		    return pressure_temp_data;
 8003ab6:	4a0e      	ldr	r2, [pc, #56]	; (8003af0 <Transmit_Pressure_Temp_Data+0xa0>)
 8003ab8:	f107 0308 	add.w	r3, r7, #8
 8003abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ac0:	e883 0003 	stmia.w	r3, {r0, r1}
	  }


}
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	ee07 2a10 	vmov	s14, r2
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ad4:	eef0 0a67 	vmov.f32	s1, s15
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20002a0c 	.word	0x20002a0c
 8003ae4:	20002a14 	.word	0x20002a14
 8003ae8:	20002a10 	.word	0x20002a10
 8003aec:	20002a16 	.word	0x20002a16
 8003af0:	20002a18 	.word	0x20002a18

08003af4 <Transmit_Temperature>:
{
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}


TemperatureData Transmit_Temperature(){
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af02      	add	r7, sp, #8


	buffer[0] = TEMP_READ_ADDRESS;
 8003afa:	4b3d      	ldr	r3, [pc, #244]	; (8003bf0 <Transmit_Temperature+0xfc>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
	//UART_Transmit_String("Reading temperature..\r\n");
	ret = HAL_I2C_Master_Transmit(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,1,HAL_MAX_DELAY);
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2301      	movs	r3, #1
 8003b08:	4a39      	ldr	r2, [pc, #228]	; (8003bf0 <Transmit_Temperature+0xfc>)
 8003b0a:	2190      	movs	r1, #144	; 0x90
 8003b0c:	4839      	ldr	r0, [pc, #228]	; (8003bf4 <Transmit_Temperature+0x100>)
 8003b0e:	f003 f93b 	bl	8006d88 <HAL_I2C_Master_Transmit>
 8003b12:	4603      	mov	r3, r0
 8003b14:	461a      	mov	r2, r3
 8003b16:	4b38      	ldr	r3, [pc, #224]	; (8003bf8 <Transmit_Temperature+0x104>)
 8003b18:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK){
 8003b1a:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <Transmit_Temperature+0x104>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d006      	beq.n	8003b30 <Transmit_Temperature+0x3c>
		UART_Transmit_String("Error communicating with Temperature sensor");
 8003b22:	4836      	ldr	r0, [pc, #216]	; (8003bfc <Transmit_Temperature+0x108>)
 8003b24:	f7fd fd8a 	bl	800163c <UART_Transmit_String>
		UART_Transmit_String("\r\n");
 8003b28:	4835      	ldr	r0, [pc, #212]	; (8003c00 <Transmit_Temperature+0x10c>)
 8003b2a:	f7fd fd87 	bl	800163c <UART_Transmit_String>
 8003b2e:	e05b      	b.n	8003be8 <Transmit_Temperature+0xf4>
	} else{
		ret = HAL_I2C_Master_Receive(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,2,HAL_MAX_DELAY);
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	2302      	movs	r3, #2
 8003b38:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <Transmit_Temperature+0xfc>)
 8003b3a:	2190      	movs	r1, #144	; 0x90
 8003b3c:	482d      	ldr	r0, [pc, #180]	; (8003bf4 <Transmit_Temperature+0x100>)
 8003b3e:	f003 fa21 	bl	8006f84 <HAL_I2C_Master_Receive>
 8003b42:	4603      	mov	r3, r0
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <Transmit_Temperature+0x104>)
 8003b48:	701a      	strb	r2, [r3, #0]
		if (ret != HAL_OK){
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <Transmit_Temperature+0x104>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <Transmit_Temperature+0x6c>
			UART_Transmit_String("Error receiving data from Temperature sensor");
 8003b52:	482c      	ldr	r0, [pc, #176]	; (8003c04 <Transmit_Temperature+0x110>)
 8003b54:	f7fd fd72 	bl	800163c <UART_Transmit_String>
			UART_Transmit_String("\r\n");
 8003b58:	4829      	ldr	r0, [pc, #164]	; (8003c00 <Transmit_Temperature+0x10c>)
 8003b5a:	f7fd fd6f 	bl	800163c <UART_Transmit_String>
 8003b5e:	e043      	b.n	8003be8 <Transmit_Temperature+0xf4>
		} else {
			//Combine the bytes
			val = ((int16_t)buffer[0] << 4) | (buffer[1] >> 4);
 8003b60:	4b23      	ldr	r3, [pc, #140]	; (8003bf0 <Transmit_Temperature+0xfc>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	b21a      	sxth	r2, r3
 8003b68:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <Transmit_Temperature+0xfc>)
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	b21b      	sxth	r3, r3
 8003b72:	4313      	orrs	r3, r2
 8003b74:	b21a      	sxth	r2, r3
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <Transmit_Temperature+0x114>)
 8003b78:	801a      	strh	r2, [r3, #0]

			//Convert to 2's complement (temperature can be negative)
			if(val > 0x7FF){
 8003b7a:	4b23      	ldr	r3, [pc, #140]	; (8003c08 <Transmit_Temperature+0x114>)
 8003b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b84:	db09      	blt.n	8003b9a <Transmit_Temperature+0xa6>
				val |= 0xF000;
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <Transmit_Temperature+0x114>)
 8003b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b8c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8003b90:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8003b94:	b21a      	sxth	r2, r3
 8003b96:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <Transmit_Temperature+0x114>)
 8003b98:	801a      	strh	r2, [r3, #0]
			}

			//Convert to float temperature value (Celsius)
			temp_c = val * 0.0625; // 0.0625 can be retreived into the datasheet
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <Transmit_Temperature+0x114>)
 8003b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fc fcbf 	bl	8000524 <__aeabi_i2d>
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <Transmit_Temperature+0x118>)
 8003bac:	f7fc fd24 	bl	80005f8 <__aeabi_dmul>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f7fd f816 	bl	8000be8 <__aeabi_d2f>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4a14      	ldr	r2, [pc, #80]	; (8003c10 <Transmit_Temperature+0x11c>)
 8003bc0:	6013      	str	r3, [r2, #0]

			//Convert to temperature to decimal format
			temp_c *= 100;
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <Transmit_Temperature+0x11c>)
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003c14 <Transmit_Temperature+0x120>
 8003bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <Transmit_Temperature+0x11c>)
 8003bd2:	edc3 7a00 	vstr	s15, [r3]

			temperature_data.temperature_celsius = temp_c;
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <Transmit_Temperature+0x11c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a0f      	ldr	r2, [pc, #60]	; (8003c18 <Transmit_Temperature+0x124>)
 8003bdc:	6013      	str	r3, [r2, #0]

			return temperature_data;
 8003bde:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <Transmit_Temperature+0x124>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	e7ff      	b.n	8003be8 <Transmit_Temperature+0xf4>

		}
	}

}
 8003be8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20002a24 	.word	0x20002a24
 8003bf4:	20002a8c 	.word	0x20002a8c
 8003bf8:	20002a20 	.word	0x20002a20
 8003bfc:	08014a54 	.word	0x08014a54
 8003c00:	08014a80 	.word	0x08014a80
 8003c04:	08014a84 	.word	0x08014a84
 8003c08:	20002a30 	.word	0x20002a30
 8003c0c:	3fb00000 	.word	0x3fb00000
 8003c10:	20002a34 	.word	0x20002a34
 8003c14:	42c80000 	.word	0x42c80000
 8003c18:	20002a38 	.word	0x20002a38

08003c1c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003c20:	2200      	movs	r2, #0
 8003c22:	2110      	movs	r1, #16
 8003c24:	4803      	ldr	r0, [pc, #12]	; (8003c34 <SELECT+0x18>)
 8003c26:	f002 ff2d 	bl	8006a84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f002 f9f6 	bl	800601c <HAL_Delay>
}
 8003c30:	bf00      	nop
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40020000 	.word	0x40020000

08003c38 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	2110      	movs	r1, #16
 8003c40:	4803      	ldr	r0, [pc, #12]	; (8003c50 <DESELECT+0x18>)
 8003c42:	f002 ff1f 	bl	8006a84 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003c46:	2001      	movs	r0, #1
 8003c48:	f002 f9e8 	bl	800601c <HAL_Delay>
}
 8003c4c:	bf00      	nop
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40020000 	.word	0x40020000

08003c54 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003c5e:	bf00      	nop
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <SPI_TxByte+0x30>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d1f8      	bne.n	8003c60 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003c6e:	1df9      	adds	r1, r7, #7
 8003c70:	2364      	movs	r3, #100	; 0x64
 8003c72:	2201      	movs	r2, #1
 8003c74:	4803      	ldr	r0, [pc, #12]	; (8003c84 <SPI_TxByte+0x30>)
 8003c76:	f005 f858 	bl	8008d2a <HAL_SPI_Transmit>
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20002b34 	.word	0x20002b34

08003c88 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003c94:	bf00      	nop
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <SPI_TxBuffer+0x30>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d1f8      	bne.n	8003c96 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8003ca4:	887a      	ldrh	r2, [r7, #2]
 8003ca6:	2364      	movs	r3, #100	; 0x64
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4803      	ldr	r0, [pc, #12]	; (8003cb8 <SPI_TxBuffer+0x30>)
 8003cac:	f005 f83d 	bl	8008d2a <HAL_SPI_Transmit>
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20002b34 	.word	0x20002b34

08003cbc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003cc2:	23ff      	movs	r3, #255	; 0xff
 8003cc4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003cc6:	bf00      	nop
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <SPI_RxByte+0x34>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d1f8      	bne.n	8003cc8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003cd6:	1dba      	adds	r2, r7, #6
 8003cd8:	1df9      	adds	r1, r7, #7
 8003cda:	2364      	movs	r3, #100	; 0x64
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2301      	movs	r3, #1
 8003ce0:	4803      	ldr	r0, [pc, #12]	; (8003cf0 <SPI_RxByte+0x34>)
 8003ce2:	f005 f95e 	bl	8008fa2 <HAL_SPI_TransmitReceive>

	return data;
 8003ce6:	79bb      	ldrb	r3, [r7, #6]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20002b34 	.word	0x20002b34

08003cf4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003cfc:	f7ff ffde 	bl	8003cbc <SPI_RxByte>
 8003d00:	4603      	mov	r3, r0
 8003d02:	461a      	mov	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	701a      	strb	r2, [r3, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <SD_ReadyWait+0x30>)
 8003d18:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d1c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003d1e:	f7ff ffcd 	bl	8003cbc <SPI_RxByte>
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	2bff      	cmp	r3, #255	; 0xff
 8003d2a:	d003      	beq.n	8003d34 <SD_ReadyWait+0x24>
 8003d2c:	4b04      	ldr	r3, [pc, #16]	; (8003d40 <SD_ReadyWait+0x30>)
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f4      	bne.n	8003d1e <SD_ReadyWait+0xe>

	return res;
 8003d34:	79fb      	ldrb	r3, [r7, #7]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20002a3e 	.word	0x20002a3e

08003d44 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8003d4a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8003d4e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8003d50:	f7ff ff72 	bl	8003c38 <DESELECT>
	for(int i = 0; i < 10; i++)
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	e005      	b.n	8003d66 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8003d5a:	20ff      	movs	r0, #255	; 0xff
 8003d5c:	f7ff ff7a 	bl	8003c54 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	3301      	adds	r3, #1
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b09      	cmp	r3, #9
 8003d6a:	ddf6      	ble.n	8003d5a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8003d6c:	f7ff ff56 	bl	8003c1c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8003d70:	2340      	movs	r3, #64	; 0x40
 8003d72:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8003d84:	2395      	movs	r3, #149	; 0x95
 8003d86:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8003d88:	463b      	mov	r3, r7
 8003d8a:	2106      	movs	r1, #6
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff ff7b 	bl	8003c88 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003d92:	e002      	b.n	8003d9a <SD_PowerOn+0x56>
	{
		cnt--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8003d9a:	f7ff ff8f 	bl	8003cbc <SPI_RxByte>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d002      	beq.n	8003daa <SD_PowerOn+0x66>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f4      	bne.n	8003d94 <SD_PowerOn+0x50>
	}

	DESELECT();
 8003daa:	f7ff ff45 	bl	8003c38 <DESELECT>
	SPI_TxByte(0XFF);
 8003dae:	20ff      	movs	r0, #255	; 0xff
 8003db0:	f7ff ff50 	bl	8003c54 <SPI_TxByte>

	PowerFlag = 1;
 8003db4:	4b03      	ldr	r3, [pc, #12]	; (8003dc4 <SD_PowerOn+0x80>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	701a      	strb	r2, [r3, #0]
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20002a41 	.word	0x20002a41

08003dc8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003dcc:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <SD_PowerOff+0x14>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	20002a41 	.word	0x20002a41

08003de0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003de4:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <SD_CheckPower+0x14>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20002a41 	.word	0x20002a41

08003df8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8003e02:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <SD_RxDataBlock+0x58>)
 8003e04:	22c8      	movs	r2, #200	; 0xc8
 8003e06:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003e08:	f7ff ff58 	bl	8003cbc <SPI_RxByte>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2bff      	cmp	r3, #255	; 0xff
 8003e14:	d103      	bne.n	8003e1e <SD_RxDataBlock+0x26>
 8003e16:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <SD_RxDataBlock+0x58>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f4      	bne.n	8003e08 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2bfe      	cmp	r3, #254	; 0xfe
 8003e22:	d001      	beq.n	8003e28 <SD_RxDataBlock+0x30>
 8003e24:	2300      	movs	r3, #0
 8003e26:	e00f      	b.n	8003e48 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	607a      	str	r2, [r7, #4]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff ff60 	bl	8003cf4 <SPI_RxBytePtr>
	} while(len--);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	1e5a      	subs	r2, r3, #1
 8003e38:	603a      	str	r2, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f4      	bne.n	8003e28 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8003e3e:	f7ff ff3d 	bl	8003cbc <SPI_RxByte>
	SPI_RxByte();
 8003e42:	f7ff ff3b 	bl	8003cbc <SPI_RxByte>

	return TRUE;
 8003e46:	2301      	movs	r3, #1
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20002a3c 	.word	0x20002a3c

08003e54 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003e64:	f7ff ff54 	bl	8003d10 <SD_ReadyWait>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2bff      	cmp	r3, #255	; 0xff
 8003e6c:	d001      	beq.n	8003e72 <SD_TxDataBlock+0x1e>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e02f      	b.n	8003ed2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff feed 	bl	8003c54 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	2bfd      	cmp	r3, #253	; 0xfd
 8003e7e:	d020      	beq.n	8003ec2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003e80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff feff 	bl	8003c88 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003e8a:	f7ff ff17 	bl	8003cbc <SPI_RxByte>
		SPI_RxByte();
 8003e8e:	f7ff ff15 	bl	8003cbc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003e92:	e00b      	b.n	8003eac <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003e94:	f7ff ff12 	bl	8003cbc <SPI_RxByte>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	d006      	beq.n	8003eb4 <SD_TxDataBlock+0x60>
			i++;
 8003ea6:	7bbb      	ldrb	r3, [r7, #14]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8003eac:	7bbb      	ldrb	r3, [r7, #14]
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d9f0      	bls.n	8003e94 <SD_TxDataBlock+0x40>
 8003eb2:	e000      	b.n	8003eb6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003eb4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003eb6:	bf00      	nop
 8003eb8:	f7ff ff00 	bl	8003cbc <SPI_RxByte>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0fa      	beq.n	8003eb8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	d101      	bne.n	8003ed0 <SD_TxDataBlock+0x7c>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <SD_TxDataBlock+0x7e>

	return FALSE;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	6039      	str	r1, [r7, #0]
 8003ee4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003ee6:	f7ff ff13 	bl	8003d10 <SD_ReadyWait>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2bff      	cmp	r3, #255	; 0xff
 8003eee:	d001      	beq.n	8003ef4 <SD_SendCmd+0x1a>
 8003ef0:	23ff      	movs	r3, #255	; 0xff
 8003ef2:	e042      	b.n	8003f7a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff feac 	bl	8003c54 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	0e1b      	lsrs	r3, r3, #24
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fea6 	bl	8003c54 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	0c1b      	lsrs	r3, r3, #16
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff fea0 	bl	8003c54 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff fe9a 	bl	8003c54 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fe95 	bl	8003c54 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d102      	bne.n	8003f36 <SD_SendCmd+0x5c>
 8003f30:	2395      	movs	r3, #149	; 0x95
 8003f32:	73fb      	strb	r3, [r7, #15]
 8003f34:	e007      	b.n	8003f46 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	2b48      	cmp	r3, #72	; 0x48
 8003f3a:	d102      	bne.n	8003f42 <SD_SendCmd+0x68>
 8003f3c:	2387      	movs	r3, #135	; 0x87
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	e001      	b.n	8003f46 <SD_SendCmd+0x6c>
	else crc = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fe83 	bl	8003c54 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	2b4c      	cmp	r3, #76	; 0x4c
 8003f52:	d101      	bne.n	8003f58 <SD_SendCmd+0x7e>
 8003f54:	f7ff feb2 	bl	8003cbc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8003f58:	230a      	movs	r3, #10
 8003f5a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8003f5c:	f7ff feae 	bl	8003cbc <SPI_RxByte>
 8003f60:	4603      	mov	r3, r0
 8003f62:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8003f64:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	da05      	bge.n	8003f78 <SD_SendCmd+0x9e>
 8003f6c:	7bbb      	ldrb	r3, [r7, #14]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	73bb      	strb	r3, [r7, #14]
 8003f72:	7bbb      	ldrb	r3, [r7, #14]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f1      	bne.n	8003f5c <SD_SendCmd+0x82>

	return res;
 8003f78:	7b7b      	ldrb	r3, [r7, #13]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003f84:	b590      	push	{r4, r7, lr}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <SD_disk_initialize+0x14>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0d1      	b.n	800413c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003f98:	4b6a      	ldr	r3, [pc, #424]	; (8004144 <SD_disk_initialize+0x1c0>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <SD_disk_initialize+0x2a>
 8003fa6:	4b67      	ldr	r3, [pc, #412]	; (8004144 <SD_disk_initialize+0x1c0>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	e0c6      	b.n	800413c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8003fae:	f7ff fec9 	bl	8003d44 <SD_PowerOn>

	/* slave select */
	SELECT();
 8003fb2:	f7ff fe33 	bl	8003c1c <SELECT>

	/* check disk type */
	type = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8003fba:	2100      	movs	r1, #0
 8003fbc:	2040      	movs	r0, #64	; 0x40
 8003fbe:	f7ff ff8c 	bl	8003eda <SD_SendCmd>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	f040 80a1 	bne.w	800410c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8003fca:	4b5f      	ldr	r3, [pc, #380]	; (8004148 <SD_disk_initialize+0x1c4>)
 8003fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fd0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003fd2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003fd6:	2048      	movs	r0, #72	; 0x48
 8003fd8:	f7ff ff7f 	bl	8003eda <SD_SendCmd>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d155      	bne.n	800408e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	73fb      	strb	r3, [r7, #15]
 8003fe6:	e00c      	b.n	8004002 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8003fe8:	7bfc      	ldrb	r4, [r7, #15]
 8003fea:	f7ff fe67 	bl	8003cbc <SPI_RxByte>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f104 0310 	add.w	r3, r4, #16
 8003ff6:	443b      	add	r3, r7
 8003ff8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	3301      	adds	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	2b03      	cmp	r3, #3
 8004006:	d9ef      	bls.n	8003fe8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004008:	7abb      	ldrb	r3, [r7, #10]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d17e      	bne.n	800410c <SD_disk_initialize+0x188>
 800400e:	7afb      	ldrb	r3, [r7, #11]
 8004010:	2baa      	cmp	r3, #170	; 0xaa
 8004012:	d17b      	bne.n	800410c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004014:	2100      	movs	r1, #0
 8004016:	2077      	movs	r0, #119	; 0x77
 8004018:	f7ff ff5f 	bl	8003eda <SD_SendCmd>
 800401c:	4603      	mov	r3, r0
 800401e:	2b01      	cmp	r3, #1
 8004020:	d807      	bhi.n	8004032 <SD_disk_initialize+0xae>
 8004022:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004026:	2069      	movs	r0, #105	; 0x69
 8004028:	f7ff ff57 	bl	8003eda <SD_SendCmd>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d004      	beq.n	800403c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8004032:	4b45      	ldr	r3, [pc, #276]	; (8004148 <SD_disk_initialize+0x1c4>)
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1ec      	bne.n	8004014 <SD_disk_initialize+0x90>
 800403a:	e000      	b.n	800403e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800403c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800403e:	4b42      	ldr	r3, [pc, #264]	; (8004148 <SD_disk_initialize+0x1c4>)
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d062      	beq.n	800410c <SD_disk_initialize+0x188>
 8004046:	2100      	movs	r1, #0
 8004048:	207a      	movs	r0, #122	; 0x7a
 800404a:	f7ff ff46 	bl	8003eda <SD_SendCmd>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d15b      	bne.n	800410c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8004054:	2300      	movs	r3, #0
 8004056:	73fb      	strb	r3, [r7, #15]
 8004058:	e00c      	b.n	8004074 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800405a:	7bfc      	ldrb	r4, [r7, #15]
 800405c:	f7ff fe2e 	bl	8003cbc <SPI_RxByte>
 8004060:	4603      	mov	r3, r0
 8004062:	461a      	mov	r2, r3
 8004064:	f104 0310 	add.w	r3, r4, #16
 8004068:	443b      	add	r3, r7
 800406a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	3301      	adds	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b03      	cmp	r3, #3
 8004078:	d9ef      	bls.n	800405a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800407a:	7a3b      	ldrb	r3, [r7, #8]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <SD_disk_initialize+0x104>
 8004084:	230c      	movs	r3, #12
 8004086:	e000      	b.n	800408a <SD_disk_initialize+0x106>
 8004088:	2304      	movs	r3, #4
 800408a:	73bb      	strb	r3, [r7, #14]
 800408c:	e03e      	b.n	800410c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800408e:	2100      	movs	r1, #0
 8004090:	2077      	movs	r0, #119	; 0x77
 8004092:	f7ff ff22 	bl	8003eda <SD_SendCmd>
 8004096:	4603      	mov	r3, r0
 8004098:	2b01      	cmp	r3, #1
 800409a:	d808      	bhi.n	80040ae <SD_disk_initialize+0x12a>
 800409c:	2100      	movs	r1, #0
 800409e:	2069      	movs	r0, #105	; 0x69
 80040a0:	f7ff ff1b 	bl	8003eda <SD_SendCmd>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d801      	bhi.n	80040ae <SD_disk_initialize+0x12a>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e000      	b.n	80040b0 <SD_disk_initialize+0x12c>
 80040ae:	2301      	movs	r3, #1
 80040b0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80040b2:	7bbb      	ldrb	r3, [r7, #14]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d10e      	bne.n	80040d6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80040b8:	2100      	movs	r1, #0
 80040ba:	2077      	movs	r0, #119	; 0x77
 80040bc:	f7ff ff0d 	bl	8003eda <SD_SendCmd>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d80e      	bhi.n	80040e4 <SD_disk_initialize+0x160>
 80040c6:	2100      	movs	r1, #0
 80040c8:	2069      	movs	r0, #105	; 0x69
 80040ca:	f7ff ff06 	bl	8003eda <SD_SendCmd>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <SD_disk_initialize+0x160>
 80040d4:	e00c      	b.n	80040f0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80040d6:	2100      	movs	r1, #0
 80040d8:	2041      	movs	r0, #65	; 0x41
 80040da:	f7ff fefe 	bl	8003eda <SD_SendCmd>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d004      	beq.n	80040ee <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80040e4:	4b18      	ldr	r3, [pc, #96]	; (8004148 <SD_disk_initialize+0x1c4>)
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e2      	bne.n	80040b2 <SD_disk_initialize+0x12e>
 80040ec:	e000      	b.n	80040f0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80040ee:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80040f0:	4b15      	ldr	r3, [pc, #84]	; (8004148 <SD_disk_initialize+0x1c4>)
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <SD_disk_initialize+0x184>
 80040f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040fc:	2050      	movs	r0, #80	; 0x50
 80040fe:	f7ff feec 	bl	8003eda <SD_SendCmd>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <SD_disk_initialize+0x188>
 8004108:	2300      	movs	r3, #0
 800410a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800410c:	4a0f      	ldr	r2, [pc, #60]	; (800414c <SD_disk_initialize+0x1c8>)
 800410e:	7bbb      	ldrb	r3, [r7, #14]
 8004110:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8004112:	f7ff fd91 	bl	8003c38 <DESELECT>
	SPI_RxByte();
 8004116:	f7ff fdd1 	bl	8003cbc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800411a:	7bbb      	ldrb	r3, [r7, #14]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <SD_disk_initialize+0x1c0>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	b2da      	uxtb	r2, r3
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <SD_disk_initialize+0x1c0>)
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e001      	b.n	8004136 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8004132:	f7ff fe49 	bl	8003dc8 <SD_PowerOff>
	}

	return Stat;
 8004136:	4b03      	ldr	r3, [pc, #12]	; (8004144 <SD_disk_initialize+0x1c0>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	b2db      	uxtb	r3, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	bd90      	pop	{r4, r7, pc}
 8004144:	20000004 	.word	0x20000004
 8004148:	20002a3c 	.word	0x20002a3c
 800414c:	20002a40 	.word	0x20002a40

08004150 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <SD_disk_status+0x14>
 8004160:	2301      	movs	r3, #1
 8004162:	e002      	b.n	800416a <SD_disk_status+0x1a>
	return Stat;
 8004164:	4b04      	ldr	r3, [pc, #16]	; (8004178 <SD_disk_status+0x28>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	b2db      	uxtb	r3, r3
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000004 	.word	0x20000004

0800417c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <SD_disk_read+0x1c>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <SD_disk_read+0x20>
 8004198:	2304      	movs	r3, #4
 800419a:	e051      	b.n	8004240 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800419c:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <SD_disk_read+0xcc>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <SD_disk_read+0x32>
 80041aa:	2303      	movs	r3, #3
 80041ac:	e048      	b.n	8004240 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80041ae:	4b27      	ldr	r3, [pc, #156]	; (800424c <SD_disk_read+0xd0>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <SD_disk_read+0x44>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	025b      	lsls	r3, r3, #9
 80041be:	607b      	str	r3, [r7, #4]

	SELECT();
 80041c0:	f7ff fd2c 	bl	8003c1c <SELECT>

	if (count == 1)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d111      	bne.n	80041ee <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	2051      	movs	r0, #81	; 0x51
 80041ce:	f7ff fe84 	bl	8003eda <SD_SendCmd>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d129      	bne.n	800422c <SD_disk_read+0xb0>
 80041d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041dc:	68b8      	ldr	r0, [r7, #8]
 80041de:	f7ff fe0b 	bl	8003df8 <SD_RxDataBlock>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d021      	beq.n	800422c <SD_disk_read+0xb0>
 80041e8:	2300      	movs	r3, #0
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	e01e      	b.n	800422c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	2052      	movs	r0, #82	; 0x52
 80041f2:	f7ff fe72 	bl	8003eda <SD_SendCmd>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d117      	bne.n	800422c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80041fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004200:	68b8      	ldr	r0, [r7, #8]
 8004202:	f7ff fdf9 	bl	8003df8 <SD_RxDataBlock>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <SD_disk_read+0xa6>
				buff += 512;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004212:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	3b01      	subs	r3, #1
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1ed      	bne.n	80041fc <SD_disk_read+0x80>
 8004220:	e000      	b.n	8004224 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8004222:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004224:	2100      	movs	r1, #0
 8004226:	204c      	movs	r0, #76	; 0x4c
 8004228:	f7ff fe57 	bl	8003eda <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800422c:	f7ff fd04 	bl	8003c38 <DESELECT>
	SPI_RxByte();
 8004230:	f7ff fd44 	bl	8003cbc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000004 	.word	0x20000004
 800424c:	20002a40 	.word	0x20002a40

08004250 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4603      	mov	r3, r0
 800425e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <SD_disk_write+0x1c>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <SD_disk_write+0x20>
 800426c:	2304      	movs	r3, #4
 800426e:	e06b      	b.n	8004348 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004270:	4b37      	ldr	r3, [pc, #220]	; (8004350 <SD_disk_write+0x100>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <SD_disk_write+0x32>
 800427e:	2303      	movs	r3, #3
 8004280:	e062      	b.n	8004348 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004282:	4b33      	ldr	r3, [pc, #204]	; (8004350 <SD_disk_write+0x100>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <SD_disk_write+0x44>
 8004290:	2302      	movs	r3, #2
 8004292:	e059      	b.n	8004348 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004294:	4b2f      	ldr	r3, [pc, #188]	; (8004354 <SD_disk_write+0x104>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <SD_disk_write+0x56>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	025b      	lsls	r3, r3, #9
 80042a4:	607b      	str	r3, [r7, #4]

	SELECT();
 80042a6:	f7ff fcb9 	bl	8003c1c <SELECT>

	if (count == 1)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d110      	bne.n	80042d2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	2058      	movs	r0, #88	; 0x58
 80042b4:	f7ff fe11 	bl	8003eda <SD_SendCmd>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d13a      	bne.n	8004334 <SD_disk_write+0xe4>
 80042be:	21fe      	movs	r1, #254	; 0xfe
 80042c0:	68b8      	ldr	r0, [r7, #8]
 80042c2:	f7ff fdc7 	bl	8003e54 <SD_TxDataBlock>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d033      	beq.n	8004334 <SD_disk_write+0xe4>
			count = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	e030      	b.n	8004334 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80042d2:	4b20      	ldr	r3, [pc, #128]	; (8004354 <SD_disk_write+0x104>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80042de:	2100      	movs	r1, #0
 80042e0:	2077      	movs	r0, #119	; 0x77
 80042e2:	f7ff fdfa 	bl	8003eda <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80042e6:	6839      	ldr	r1, [r7, #0]
 80042e8:	2057      	movs	r0, #87	; 0x57
 80042ea:	f7ff fdf6 	bl	8003eda <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	2059      	movs	r0, #89	; 0x59
 80042f2:	f7ff fdf2 	bl	8003eda <SD_SendCmd>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11b      	bne.n	8004334 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80042fc:	21fc      	movs	r1, #252	; 0xfc
 80042fe:	68b8      	ldr	r0, [r7, #8]
 8004300:	f7ff fda8 	bl	8003e54 <SD_TxDataBlock>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <SD_disk_write+0xd0>
				buff += 512;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004310:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	3b01      	subs	r3, #1
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1ee      	bne.n	80042fc <SD_disk_write+0xac>
 800431e:	e000      	b.n	8004322 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004320:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8004322:	21fd      	movs	r1, #253	; 0xfd
 8004324:	2000      	movs	r0, #0
 8004326:	f7ff fd95 	bl	8003e54 <SD_TxDataBlock>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <SD_disk_write+0xe4>
			{
				count = 1;
 8004330:	2301      	movs	r3, #1
 8004332:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004334:	f7ff fc80 	bl	8003c38 <DESELECT>
	SPI_RxByte();
 8004338:	f7ff fcc0 	bl	8003cbc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	bf14      	ite	ne
 8004342:	2301      	movne	r3, #1
 8004344:	2300      	moveq	r3, #0
 8004346:	b2db      	uxtb	r3, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000004 	.word	0x20000004
 8004354:	20002a40 	.word	0x20002a40

08004358 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b08b      	sub	sp, #44	; 0x2c
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	603a      	str	r2, [r7, #0]
 8004362:	71fb      	strb	r3, [r7, #7]
 8004364:	460b      	mov	r3, r1
 8004366:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <SD_disk_ioctl+0x1e>
 8004372:	2304      	movs	r3, #4
 8004374:	e115      	b.n	80045a2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800437c:	79bb      	ldrb	r3, [r7, #6]
 800437e:	2b05      	cmp	r3, #5
 8004380:	d124      	bne.n	80043cc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d012      	beq.n	80043b0 <SD_disk_ioctl+0x58>
 800438a:	2b02      	cmp	r3, #2
 800438c:	dc1a      	bgt.n	80043c4 <SD_disk_ioctl+0x6c>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <SD_disk_ioctl+0x40>
 8004392:	2b01      	cmp	r3, #1
 8004394:	d006      	beq.n	80043a4 <SD_disk_ioctl+0x4c>
 8004396:	e015      	b.n	80043c4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004398:	f7ff fd16 	bl	8003dc8 <SD_PowerOff>
			res = RES_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80043a2:	e0fc      	b.n	800459e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80043a4:	f7ff fcce 	bl	8003d44 <SD_PowerOn>
			res = RES_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80043ae:	e0f6      	b.n	800459e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	1c5c      	adds	r4, r3, #1
 80043b4:	f7ff fd14 	bl	8003de0 <SD_CheckPower>
 80043b8:	4603      	mov	r3, r0
 80043ba:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80043bc:	2300      	movs	r3, #0
 80043be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80043c2:	e0ec      	b.n	800459e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80043c4:	2304      	movs	r3, #4
 80043c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043ca:	e0e8      	b.n	800459e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80043cc:	4b77      	ldr	r3, [pc, #476]	; (80045ac <SD_disk_ioctl+0x254>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <SD_disk_ioctl+0x86>
 80043da:	2303      	movs	r3, #3
 80043dc:	e0e1      	b.n	80045a2 <SD_disk_ioctl+0x24a>

		SELECT();
 80043de:	f7ff fc1d 	bl	8003c1c <SELECT>

		switch (ctrl)
 80043e2:	79bb      	ldrb	r3, [r7, #6]
 80043e4:	2b0d      	cmp	r3, #13
 80043e6:	f200 80cb 	bhi.w	8004580 <SD_disk_ioctl+0x228>
 80043ea:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <SD_disk_ioctl+0x98>)
 80043ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f0:	080044eb 	.word	0x080044eb
 80043f4:	08004429 	.word	0x08004429
 80043f8:	080044db 	.word	0x080044db
 80043fc:	08004581 	.word	0x08004581
 8004400:	08004581 	.word	0x08004581
 8004404:	08004581 	.word	0x08004581
 8004408:	08004581 	.word	0x08004581
 800440c:	08004581 	.word	0x08004581
 8004410:	08004581 	.word	0x08004581
 8004414:	08004581 	.word	0x08004581
 8004418:	08004581 	.word	0x08004581
 800441c:	080044fd 	.word	0x080044fd
 8004420:	08004521 	.word	0x08004521
 8004424:	08004545 	.word	0x08004545
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004428:	2100      	movs	r1, #0
 800442a:	2049      	movs	r0, #73	; 0x49
 800442c:	f7ff fd55 	bl	8003eda <SD_SendCmd>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 80a8 	bne.w	8004588 <SD_disk_ioctl+0x230>
 8004438:	f107 030c 	add.w	r3, r7, #12
 800443c:	2110      	movs	r1, #16
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fcda 	bl	8003df8 <SD_RxDataBlock>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 809e 	beq.w	8004588 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800444c:	7b3b      	ldrb	r3, [r7, #12]
 800444e:	099b      	lsrs	r3, r3, #6
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	d10e      	bne.n	8004474 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004456:	7d7b      	ldrb	r3, [r7, #21]
 8004458:	b29a      	uxth	r2, r3
 800445a:	7d3b      	ldrb	r3, [r7, #20]
 800445c:	b29b      	uxth	r3, r3
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	b29b      	uxth	r3, r3
 8004462:	4413      	add	r3, r2
 8004464:	b29b      	uxth	r3, r3
 8004466:	3301      	adds	r3, #1
 8004468:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800446a:	8bfb      	ldrh	r3, [r7, #30]
 800446c:	029a      	lsls	r2, r3, #10
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	e02e      	b.n	80044d2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004474:	7c7b      	ldrb	r3, [r7, #17]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	b2da      	uxtb	r2, r3
 800447c:	7dbb      	ldrb	r3, [r7, #22]
 800447e:	09db      	lsrs	r3, r3, #7
 8004480:	b2db      	uxtb	r3, r3
 8004482:	4413      	add	r3, r2
 8004484:	b2da      	uxtb	r2, r3
 8004486:	7d7b      	ldrb	r3, [r7, #21]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	b2db      	uxtb	r3, r3
 800448c:	f003 0306 	and.w	r3, r3, #6
 8004490:	b2db      	uxtb	r3, r3
 8004492:	4413      	add	r3, r2
 8004494:	b2db      	uxtb	r3, r3
 8004496:	3302      	adds	r3, #2
 8004498:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800449c:	7d3b      	ldrb	r3, [r7, #20]
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	7cfb      	ldrb	r3, [r7, #19]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	7cbb      	ldrb	r3, [r7, #18]
 80044b2:	029b      	lsls	r3, r3, #10
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	4413      	add	r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3301      	adds	r3, #1
 80044c2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80044c4:	8bfa      	ldrh	r2, [r7, #30]
 80044c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80044ca:	3b09      	subs	r3, #9
 80044cc:	409a      	lsls	r2, r3
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80044d8:	e056      	b.n	8004588 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80044e8:	e055      	b.n	8004596 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80044ea:	f7ff fc11 	bl	8003d10 <SD_ReadyWait>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2bff      	cmp	r3, #255	; 0xff
 80044f2:	d14b      	bne.n	800458c <SD_disk_ioctl+0x234>
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80044fa:	e047      	b.n	800458c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80044fc:	2100      	movs	r1, #0
 80044fe:	2049      	movs	r0, #73	; 0x49
 8004500:	f7ff fceb 	bl	8003eda <SD_SendCmd>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d142      	bne.n	8004590 <SD_disk_ioctl+0x238>
 800450a:	2110      	movs	r1, #16
 800450c:	6a38      	ldr	r0, [r7, #32]
 800450e:	f7ff fc73 	bl	8003df8 <SD_RxDataBlock>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d03b      	beq.n	8004590 <SD_disk_ioctl+0x238>
 8004518:	2300      	movs	r3, #0
 800451a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800451e:	e037      	b.n	8004590 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004520:	2100      	movs	r1, #0
 8004522:	204a      	movs	r0, #74	; 0x4a
 8004524:	f7ff fcd9 	bl	8003eda <SD_SendCmd>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d132      	bne.n	8004594 <SD_disk_ioctl+0x23c>
 800452e:	2110      	movs	r1, #16
 8004530:	6a38      	ldr	r0, [r7, #32]
 8004532:	f7ff fc61 	bl	8003df8 <SD_RxDataBlock>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d02b      	beq.n	8004594 <SD_disk_ioctl+0x23c>
 800453c:	2300      	movs	r3, #0
 800453e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004542:	e027      	b.n	8004594 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004544:	2100      	movs	r1, #0
 8004546:	207a      	movs	r0, #122	; 0x7a
 8004548:	f7ff fcc7 	bl	8003eda <SD_SendCmd>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d116      	bne.n	8004580 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8004552:	2300      	movs	r3, #0
 8004554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004558:	e00b      	b.n	8004572 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800455a:	6a3c      	ldr	r4, [r7, #32]
 800455c:	1c63      	adds	r3, r4, #1
 800455e:	623b      	str	r3, [r7, #32]
 8004560:	f7ff fbac 	bl	8003cbc <SPI_RxByte>
 8004564:	4603      	mov	r3, r0
 8004566:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004568:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800456c:	3301      	adds	r3, #1
 800456e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004572:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004576:	2b03      	cmp	r3, #3
 8004578:	d9ef      	bls.n	800455a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8004580:	2304      	movs	r3, #4
 8004582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004586:	e006      	b.n	8004596 <SD_disk_ioctl+0x23e>
			break;
 8004588:	bf00      	nop
 800458a:	e004      	b.n	8004596 <SD_disk_ioctl+0x23e>
			break;
 800458c:	bf00      	nop
 800458e:	e002      	b.n	8004596 <SD_disk_ioctl+0x23e>
			break;
 8004590:	bf00      	nop
 8004592:	e000      	b.n	8004596 <SD_disk_ioctl+0x23e>
			break;
 8004594:	bf00      	nop
		}

		DESELECT();
 8004596:	f7ff fb4f 	bl	8003c38 <DESELECT>
		SPI_RxByte();
 800459a:	f7ff fb8f 	bl	8003cbc <SPI_RxByte>
	}

	return res;
 800459e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	372c      	adds	r7, #44	; 0x2c
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd90      	pop	{r4, r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000004 	.word	0x20000004

080045b0 <lsm6ds3tr_c_read_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	461a      	mov	r2, r3
 80045bc:	460b      	mov	r3, r1
 80045be:	72fb      	strb	r3, [r7, #11]
 80045c0:	4613      	mov	r3, r2
 80045c2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	685c      	ldr	r4, [r3, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68d8      	ldr	r0, [r3, #12]
 80045cc:	893b      	ldrh	r3, [r7, #8]
 80045ce:	7af9      	ldrb	r1, [r7, #11]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	47a0      	blx	r4
 80045d4:	6178      	str	r0, [r7, #20]

  return ret;
 80045d6:	697b      	ldr	r3, [r7, #20]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd90      	pop	{r4, r7, pc}

080045e0 <lsm6ds3tr_c_write_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 80045e0:	b590      	push	{r4, r7, lr}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	607a      	str	r2, [r7, #4]
 80045ea:	461a      	mov	r2, r3
 80045ec:	460b      	mov	r3, r1
 80045ee:	72fb      	strb	r3, [r7, #11]
 80045f0:	4613      	mov	r3, r2
 80045f2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681c      	ldr	r4, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68d8      	ldr	r0, [r3, #12]
 80045fc:	893b      	ldrh	r3, [r7, #8]
 80045fe:	7af9      	ldrb	r1, [r7, #11]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	47a0      	blx	r4
 8004604:	6178      	str	r0, [r7, #20]

  return ret;
 8004606:	697b      	ldr	r3, [r7, #20]
}
 8004608:	4618      	mov	r0, r3
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd90      	pop	{r4, r7, pc}

08004610 <lsm6ds3tr_c_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6ds3tr_c_from_fs2g_to_mg(int16_t lsb)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 800461a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004626:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800463c <lsm6ds3tr_c_from_fs2g_to_mg+0x2c>
 800462a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800462e:	eeb0 0a67 	vmov.f32	s0, s15
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	3d79db23 	.word	0x3d79db23

08004640 <lsm6ds3tr_c_from_fs125dps_to_mdps>:
{
  return ((float_t)lsb * 0.488f);
}

float_t lsm6ds3tr_c_from_fs125dps_to_mdps(int16_t lsb)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 4.375f);
 800464a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004656:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800466c <lsm6ds3tr_c_from_fs125dps_to_mdps+0x2c>
 800465a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800465e:	eeb0 0a67 	vmov.f32	s0, s15
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	408c0000 	.word	0x408c0000

08004670 <lsm6ds3tr_c_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_xl_t val)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 800467c:	f107 0208 	add.w	r2, r7, #8
 8004680:	2301      	movs	r3, #1
 8004682:	2110      	movs	r1, #16
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff ff93 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 800468a:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10f      	bne.n	80046b2 <lsm6ds3tr_c_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	b2da      	uxtb	r2, r3
 800469a:	7a3b      	ldrb	r3, [r7, #8]
 800469c:	f362 0383 	bfi	r3, r2, #2, #2
 80046a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 80046a2:	f107 0208 	add.w	r2, r7, #8
 80046a6:	2301      	movs	r3, #1
 80046a8:	2110      	movs	r1, #16
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff ff98 	bl	80045e0 <lsm6ds3tr_c_write_reg>
 80046b0:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80046b2:	68fb      	ldr	r3, [r7, #12]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <lsm6ds3tr_c_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_xl_t val)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 80046c8:	f107 0208 	add.w	r2, r7, #8
 80046cc:	2301      	movs	r3, #1
 80046ce:	2110      	movs	r1, #16
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ff6d 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 80046d6:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10f      	bne.n	80046fe <lsm6ds3tr_c_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	7a3b      	ldrb	r3, [r7, #8]
 80046e8:	f362 1307 	bfi	r3, r2, #4, #4
 80046ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 80046ee:	f107 0208 	add.w	r2, r7, #8
 80046f2:	2301      	movs	r3, #1
 80046f4:	2110      	movs	r1, #16
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff ff72 	bl	80045e0 <lsm6ds3tr_c_write_reg>
 80046fc:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80046fe:	68fb      	ldr	r3, [r7, #12]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <lsm6ds3tr_c_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_g_t val)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8004714:	f107 0208 	add.w	r2, r7, #8
 8004718:	2301      	movs	r3, #1
 800471a:	2111      	movs	r1, #17
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff ff47 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 8004722:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10f      	bne.n	800474a <lsm6ds3tr_c_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	b2da      	uxtb	r2, r3
 8004732:	7a3b      	ldrb	r3, [r7, #8]
 8004734:	f362 0343 	bfi	r3, r2, #1, #3
 8004738:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 800473a:	f107 0208 	add.w	r2, r7, #8
 800473e:	2301      	movs	r3, #1
 8004740:	2111      	movs	r1, #17
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff ff4c 	bl	80045e0 <lsm6ds3tr_c_write_reg>
 8004748:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 800474a:	68fb      	ldr	r3, [r7, #12]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <lsm6ds3tr_c_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_g_t val)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8004760:	f107 0208 	add.w	r2, r7, #8
 8004764:	2301      	movs	r3, #1
 8004766:	2111      	movs	r1, #17
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ff21 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 800476e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10f      	bne.n	8004796 <lsm6ds3tr_c_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	b2da      	uxtb	r2, r3
 800477e:	7a3b      	ldrb	r3, [r7, #8]
 8004780:	f362 1307 	bfi	r3, r2, #4, #4
 8004784:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8004786:	f107 0208 	add.w	r2, r7, #8
 800478a:	2301      	movs	r3, #1
 800478c:	2111      	movs	r1, #17
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff ff26 	bl	80045e0 <lsm6ds3tr_c_write_reg>
 8004794:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8004796:	68fb      	ldr	r3, [r7, #12]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <lsm6ds3tr_c_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_block_data_update_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 80047ac:	f107 0208 	add.w	r2, r7, #8
 80047b0:	2301      	movs	r3, #1
 80047b2:	2112      	movs	r1, #18
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fefb 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 80047ba:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10f      	bne.n	80047e2 <lsm6ds3tr_c_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	7a3b      	ldrb	r3, [r7, #8]
 80047cc:	f362 1386 	bfi	r3, r2, #6, #1
 80047d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 80047d2:	f107 0208 	add.w	r2, r7, #8
 80047d6:	2301      	movs	r3, #1
 80047d8:	2112      	movs	r1, #18
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff ff00 	bl	80045e0 <lsm6ds3tr_c_write_reg>
 80047e0:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80047e2:	68fb      	ldr	r3, [r7, #12]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <lsm6ds3tr_c_xl_power_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_power_mode_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_xl_hm_mode_t val)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 80047f8:	f107 0208 	add.w	r2, r7, #8
 80047fc:	2301      	movs	r3, #1
 80047fe:	2115      	movs	r1, #21
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff fed5 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 8004806:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl6_c, 1);

  if (ret == 0)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10f      	bne.n	800482e <lsm6ds3tr_c_xl_power_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = (uint8_t) val;
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	b2da      	uxtb	r2, r3
 8004816:	7a3b      	ldrb	r3, [r7, #8]
 8004818:	f362 1304 	bfi	r3, r2, #4, #1
 800481c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 800481e:	f107 0208 	add.w	r2, r7, #8
 8004822:	2301      	movs	r3, #1
 8004824:	2115      	movs	r1, #21
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff feda 	bl	80045e0 <lsm6ds3tr_c_write_reg>
 800482c:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl6_c, 1);
  }

  return ret;
 800482e:	68fb      	ldr	r3, [r7, #12]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <lsm6ds3tr_c_gy_power_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_power_mode_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_g_hm_mode_t val)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 8004844:	f107 0208 	add.w	r2, r7, #8
 8004848:	2301      	movs	r3, #1
 800484a:	2116      	movs	r1, #22
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff feaf 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 8004852:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl7_g, 1);

  if (ret == 0)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10f      	bne.n	800487a <lsm6ds3tr_c_gy_power_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = (uint8_t) val;
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	b2da      	uxtb	r2, r3
 8004862:	7a3b      	ldrb	r3, [r7, #8]
 8004864:	f362 13c7 	bfi	r3, r2, #7, #1
 8004868:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 800486a:	f107 0208 	add.w	r2, r7, #8
 800486e:	2301      	movs	r3, #1
 8004870:	2116      	movs	r1, #22
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff feb4 	bl	80045e0 <lsm6ds3tr_c_write_reg>
 8004878:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl7_g, 1);
  }

  return ret;
 800487a:	68fb      	ldr	r3, [r7, #12]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <lsm6ds3tr_c_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_G, buff, 6);
 800488e:	f107 020c 	add.w	r2, r7, #12
 8004892:	2306      	movs	r3, #6
 8004894:	2122      	movs	r1, #34	; 0x22
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fe8a 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 800489c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800489e:	7b7b      	ldrb	r3, [r7, #13]
 80048a0:	b21a      	sxth	r2, r3
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	7b3b      	ldrb	r3, [r7, #12]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	4413      	add	r3, r2
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	b21a      	sxth	r2, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80048c0:	7bfa      	ldrb	r2, [r7, #15]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	3302      	adds	r3, #2
 80048c6:	b212      	sxth	r2, r2
 80048c8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	3302      	adds	r3, #2
 80048ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	7bbb      	ldrb	r3, [r7, #14]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	4413      	add	r3, r2
 80048de:	b29a      	uxth	r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	3302      	adds	r3, #2
 80048e4:	b212      	sxth	r2, r2
 80048e6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80048e8:	7c7a      	ldrb	r2, [r7, #17]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	3304      	adds	r3, #4
 80048ee:	b212      	sxth	r2, r2
 80048f0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	3304      	adds	r3, #4
 80048f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	b29a      	uxth	r2, r3
 8004900:	7c3b      	ldrb	r3, [r7, #16]
 8004902:	b29b      	uxth	r3, r3
 8004904:	4413      	add	r3, r2
 8004906:	b29a      	uxth	r2, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	3304      	adds	r3, #4
 800490c:	b212      	sxth	r2, r2
 800490e:	801a      	strh	r2, [r3, #0]

  return ret;
 8004910:	697b      	ldr	r3, [r7, #20]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <lsm6ds3tr_c_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_acceleration_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_XL, buff, 6);
 8004924:	f107 020c 	add.w	r2, r7, #12
 8004928:	2306      	movs	r3, #6
 800492a:	2128      	movs	r1, #40	; 0x28
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff fe3f 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 8004932:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004934:	7b7b      	ldrb	r3, [r7, #13]
 8004936:	b21a      	sxth	r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004942:	b29b      	uxth	r3, r3
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	b29a      	uxth	r2, r3
 8004948:	7b3b      	ldrb	r3, [r7, #12]
 800494a:	b29b      	uxth	r3, r3
 800494c:	4413      	add	r3, r2
 800494e:	b29b      	uxth	r3, r3
 8004950:	b21a      	sxth	r2, r3
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004956:	7bfa      	ldrb	r2, [r7, #15]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	3302      	adds	r3, #2
 800495c:	b212      	sxth	r2, r2
 800495e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	3302      	adds	r3, #2
 8004964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004968:	b29b      	uxth	r3, r3
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	b29a      	uxth	r2, r3
 800496e:	7bbb      	ldrb	r3, [r7, #14]
 8004970:	b29b      	uxth	r3, r3
 8004972:	4413      	add	r3, r2
 8004974:	b29a      	uxth	r2, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	3302      	adds	r3, #2
 800497a:	b212      	sxth	r2, r2
 800497c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800497e:	7c7a      	ldrb	r2, [r7, #17]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	3304      	adds	r3, #4
 8004984:	b212      	sxth	r2, r2
 8004986:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	3304      	adds	r3, #4
 800498c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004990:	b29b      	uxth	r3, r3
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	b29a      	uxth	r2, r3
 8004996:	7c3b      	ldrb	r3, [r7, #16]
 8004998:	b29b      	uxth	r3, r3
 800499a:	4413      	add	r3, r2
 800499c:	b29a      	uxth	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	3304      	adds	r3, #4
 80049a2:	b212      	sxth	r2, r2
 80049a4:	801a      	strh	r2, [r3, #0]

  return ret;
 80049a6:	697b      	ldr	r3, [r7, #20]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <lsm6ds3tr_c_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_WHO_AM_I, buff, 1);
 80049ba:	2301      	movs	r3, #1
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	210f      	movs	r1, #15
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff fdf5 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 80049c6:	60f8      	str	r0, [r7, #12]

  return ret;
 80049c8:	68fb      	ldr	r3, [r7, #12]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <lsm6ds3tr_c_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 80049de:	f107 0208 	add.w	r2, r7, #8
 80049e2:	2301      	movs	r3, #1
 80049e4:	2112      	movs	r1, #18
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff fde2 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 80049ec:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10f      	bne.n	8004a14 <lsm6ds3tr_c_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	7a3b      	ldrb	r3, [r7, #8]
 80049fe:	f362 0300 	bfi	r3, r2, #0, #1
 8004a02:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8004a04:	f107 0208 	add.w	r2, r7, #8
 8004a08:	2301      	movs	r3, #1
 8004a0a:	2112      	movs	r1, #18
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff fde7 	bl	80045e0 <lsm6ds3tr_c_write_reg>
 8004a12:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004a14:	68fb      	ldr	r3, [r7, #12]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <lsm6ds3tr_c_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8004a28:	f107 0208 	add.w	r2, r7, #8
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	2112      	movs	r1, #18
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff fdbd 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 8004a36:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 8004a38:	7a3b      	ldrb	r3, [r7, #8]
 8004a3a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	701a      	strb	r2, [r3, #0]

  return ret;
 8004a46:	68fb      	ldr	r3, [r7, #12]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <lsm6ds3tr_c_xl_lp1_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_lp1_bandwidth_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_lpf1_bw_sel_t val)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  lsm6ds3tr_c_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8004a5c:	f107 0210 	add.w	r2, r7, #16
 8004a60:	2301      	movs	r3, #1
 8004a62:	2110      	movs	r1, #16
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fda3 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 8004a6a:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d12d      	bne.n	8004ace <lsm6ds3tr_c_xl_lp1_bandwidth_set+0x7e>
  {
    ctrl1_xl.lpf1_bw_sel = (uint8_t) val;
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	7c3b      	ldrb	r3, [r7, #16]
 8004a7c:	f362 0341 	bfi	r3, r2, #1, #1
 8004a80:	743b      	strb	r3, [r7, #16]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8004a82:	f107 0210 	add.w	r2, r7, #16
 8004a86:	2301      	movs	r3, #1
 8004a88:	2110      	movs	r1, #16
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fda8 	bl	80045e0 <lsm6ds3tr_c_write_reg>
 8004a90:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl1_xl, 1);

    if (ret == 0)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d11a      	bne.n	8004ace <lsm6ds3tr_c_xl_lp1_bandwidth_set+0x7e>
    {
      ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 8004a98:	f107 020c 	add.w	r2, r7, #12
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	2117      	movs	r1, #23
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff fd85 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 8004aa6:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl8_xl, 1);

      if (ret == 0)
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10f      	bne.n	8004ace <lsm6ds3tr_c_xl_lp1_bandwidth_set+0x7e>
      {
        ctrl8_xl.lpf2_xl_en = 0;
 8004aae:	7b3b      	ldrb	r3, [r7, #12]
 8004ab0:	f36f 13c7 	bfc	r3, #7, #1
 8004ab4:	733b      	strb	r3, [r7, #12]
        ctrl8_xl.hp_slope_xl_en = 0;
 8004ab6:	7b3b      	ldrb	r3, [r7, #12]
 8004ab8:	f36f 0382 	bfc	r3, #2, #1
 8004abc:	733b      	strb	r3, [r7, #12]
        ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 8004abe:	f107 020c 	add.w	r2, r7, #12
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	2117      	movs	r1, #23
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff fd8a 	bl	80045e0 <lsm6ds3tr_c_write_reg>
 8004acc:	6178      	str	r0, [r7, #20]
                                    (uint8_t *)&ctrl8_xl, 1);
      }
    }
  }

  return ret;
 8004ace:	697b      	ldr	r3, [r7, #20]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <lsm6ds3tr_c_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_i2c_interface_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_i2c_disable_t val)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8004ae4:	f107 0208 	add.w	r2, r7, #8
 8004ae8:	2301      	movs	r3, #1
 8004aea:	2113      	movs	r1, #19
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff fd5f 	bl	80045b0 <lsm6ds3tr_c_read_reg>
 8004af2:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl4_c, 1);

  if (ret == 0)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10f      	bne.n	8004b1a <lsm6ds3tr_c_i2c_interface_set+0x42>
  {
    ctrl4_c.i2c_disable = (uint8_t)val;
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	7a3b      	ldrb	r3, [r7, #8]
 8004b04:	f362 0382 	bfi	r3, r2, #2, #1
 8004b08:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8004b0a:	f107 0208 	add.w	r2, r7, #8
 8004b0e:	2301      	movs	r3, #1
 8004b10:	2113      	movs	r1, #19
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff fd64 	bl	80045e0 <lsm6ds3tr_c_write_reg>
 8004b18:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl4_c, 1);
  }

  return ret;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b2a:	f001 fa05 	bl	8005f38 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b2e:	f000 f84d 	bl	8004bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b32:	f000 fc33 	bl	800539c <MX_GPIO_Init>
  MX_ADC3_Init();
 8004b36:	f000 f8b5 	bl	8004ca4 <MX_ADC3_Init>
  MX_I2C1_Init();
 8004b3a:	f000 f905 	bl	8004d48 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004b3e:	f000 f931 	bl	8004da4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8004b42:	f000 f95d 	bl	8004e00 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004b46:	f000 fb79 	bl	800523c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004b4a:	f000 fba1 	bl	8005290 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004b4e:	f000 fbc9 	bl	80052e4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8004b52:	f000 fbf1 	bl	8005338 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8004b56:	f000 fc19 	bl	800538c <MX_USB_OTG_FS_USB_Init>
  MX_TIM2_Init();
 8004b5a:	f000 f987 	bl	8004e6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004b5e:	f000 fa05 	bl	8004f6c <MX_TIM3_Init>
  MX_TIM4_Init();
 8004b62:	f000 fa9b 	bl	800509c <MX_TIM4_Init>
  MX_TIM5_Init();
 8004b66:	f000 faf3 	bl	8005150 <MX_TIM5_Init>
  MX_FATFS_Init();
 8004b6a:	f005 fe79 	bl	800a860 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin, GPIO_PIN_SET); // LED_ON Pin enabled
 8004b6e:	2201      	movs	r2, #1
 8004b70:	2101      	movs	r1, #1
 8004b72:	4812      	ldr	r0, [pc, #72]	; (8004bbc <main+0x98>)
 8004b74:	f001 ff86 	bl	8006a84 <HAL_GPIO_WritePin>



  //INITIALIZATION SECTOR
  printIntroTitle();
 8004b78:	f7fc fd76 	bl	8001668 <printIntroTitle>
  printOptions();
 8004b7c:	f7fc fd9e 	bl	80016bc <printOptions>

    /* USER CODE BEGIN 3 */

	  //MENU SECTOR
	  char userInput;
	  UART_Transmit_String("\r\nChoice: ");
 8004b80:	480f      	ldr	r0, [pc, #60]	; (8004bc0 <main+0x9c>)
 8004b82:	f7fc fd5b 	bl	800163c <UART_Transmit_String>
	         HAL_UART_Receive(&huart1, (uint8_t *)&userInput, sizeof(userInput), HAL_MAX_DELAY);
 8004b86:	1df9      	adds	r1, r7, #7
 8004b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	480d      	ldr	r0, [pc, #52]	; (8004bc4 <main+0xa0>)
 8004b90:	f005 fae1 	bl	800a156 <HAL_UART_Receive>

	         switch (userInput)
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	2b0a      	cmp	r3, #10
 8004b98:	d002      	beq.n	8004ba0 <main+0x7c>
 8004b9a:	2b0d      	cmp	r3, #13
 8004b9c:	d104      	bne.n	8004ba8 <main+0x84>
	         {
	         case '\r': // Ignore carriage return characters
	             break;
 8004b9e:	e008      	b.n	8004bb2 <main+0x8e>
	         case '\n': // Process command on new line (Enter pressed)
	             UART_Transmit_String("\r\n"); // Move to a new line after the command
 8004ba0:	4809      	ldr	r0, [pc, #36]	; (8004bc8 <main+0xa4>)
 8004ba2:	f7fc fd4b 	bl	800163c <UART_Transmit_String>
	             break;
 8004ba6:	e004      	b.n	8004bb2 <main+0x8e>
	         default:
	             handleUserCommand(userInput);
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fc ff0a 	bl	80019c4 <handleUserCommand>
	             break;
 8004bb0:	bf00      	nop
	         }

	         HAL_Delay(100);
 8004bb2:	2064      	movs	r0, #100	; 0x64
 8004bb4:	f001 fa32 	bl	800601c <HAL_Delay>
  {
 8004bb8:	e7e2      	b.n	8004b80 <main+0x5c>
 8004bba:	bf00      	nop
 8004bbc:	40020400 	.word	0x40020400
 8004bc0:	08014ab4 	.word	0x08014ab4
 8004bc4:	20002cac 	.word	0x20002cac
 8004bc8:	08014ac0 	.word	0x08014ac0

08004bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b094      	sub	sp, #80	; 0x50
 8004bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bd2:	f107 0320 	add.w	r3, r7, #32
 8004bd6:	2230      	movs	r2, #48	; 0x30
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f00a ffdc 	bl	800fb98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004be0:	f107 030c 	add.w	r3, r7, #12
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	60da      	str	r2, [r3, #12]
 8004bee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <SystemClock_Config+0xd0>)
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <SystemClock_Config+0xd0>)
 8004bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8004c00:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <SystemClock_Config+0xd0>)
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	607b      	str	r3, [r7, #4]
 8004c10:	4b23      	ldr	r3, [pc, #140]	; (8004ca0 <SystemClock_Config+0xd4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a22      	ldr	r2, [pc, #136]	; (8004ca0 <SystemClock_Config+0xd4>)
 8004c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <SystemClock_Config+0xd4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c24:	607b      	str	r3, [r7, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c32:	2301      	movs	r3, #1
 8004c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c36:	2310      	movs	r3, #16
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8004c44:	230f      	movs	r3, #15
 8004c46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8004c48:	2390      	movs	r3, #144	; 0x90
 8004c4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8004c50:	2305      	movs	r3, #5
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c54:	f107 0320 	add.w	r3, r7, #32
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f003 fb85 	bl	8008368 <HAL_RCC_OscConfig>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8004c64:	f000 fc6c 	bl	8005540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c68:	230f      	movs	r3, #15
 8004c6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004c7c:	f107 030c 	add.w	r3, r7, #12
 8004c80:	2100      	movs	r1, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 fde8 	bl	8008858 <HAL_RCC_ClockConfig>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004c8e:	f000 fc57 	bl	8005540 <Error_Handler>
  }
}
 8004c92:	bf00      	nop
 8004c94:	3750      	adds	r7, #80	; 0x50
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40007000 	.word	0x40007000

08004ca4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004caa:	463b      	mov	r3, r7
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	605a      	str	r2, [r3, #4]
 8004cb2:	609a      	str	r2, [r3, #8]
 8004cb4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8004cb6:	4b21      	ldr	r3, [pc, #132]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004cb8:	4a21      	ldr	r2, [pc, #132]	; (8004d40 <MX_ADC3_Init+0x9c>)
 8004cba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004cbc:	4b1f      	ldr	r3, [pc, #124]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004cc2:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8004cc8:	4b1c      	ldr	r3, [pc, #112]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004cce:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8004cd4:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004cdc:	4b17      	ldr	r3, [pc, #92]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ce2:	4b16      	ldr	r3, [pc, #88]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004ce4:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <MX_ADC3_Init+0xa0>)
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ce8:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8004cf4:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004d02:	480e      	ldr	r0, [pc, #56]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004d04:	f001 f9ae 	bl	8006064 <HAL_ADC_Init>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8004d0e:	f000 fc17 	bl	8005540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004d12:	230c      	movs	r3, #12
 8004d14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004d16:	2301      	movs	r3, #1
 8004d18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004d1e:	463b      	mov	r3, r7
 8004d20:	4619      	mov	r1, r3
 8004d22:	4806      	ldr	r0, [pc, #24]	; (8004d3c <MX_ADC3_Init+0x98>)
 8004d24:	f001 f9e2 	bl	80060ec <HAL_ADC_ConfigChannel>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8004d2e:	f000 fc07 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20002a44 	.word	0x20002a44
 8004d40:	40012200 	.word	0x40012200
 8004d44:	0f000001 	.word	0x0f000001

08004d48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004d4c:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <MX_I2C1_Init+0x50>)
 8004d4e:	4a13      	ldr	r2, [pc, #76]	; (8004d9c <MX_I2C1_Init+0x54>)
 8004d50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <MX_I2C1_Init+0x50>)
 8004d54:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <MX_I2C1_Init+0x58>)
 8004d56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004d58:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <MX_I2C1_Init+0x50>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004d5e:	4b0e      	ldr	r3, [pc, #56]	; (8004d98 <MX_I2C1_Init+0x50>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d64:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <MX_I2C1_Init+0x50>)
 8004d66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <MX_I2C1_Init+0x50>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004d72:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <MX_I2C1_Init+0x50>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d78:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <MX_I2C1_Init+0x50>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <MX_I2C1_Init+0x50>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004d84:	4804      	ldr	r0, [pc, #16]	; (8004d98 <MX_I2C1_Init+0x50>)
 8004d86:	f001 febb 	bl	8006b00 <HAL_I2C_Init>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004d90:	f000 fbd6 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004d94:	bf00      	nop
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20002a8c 	.word	0x20002a8c
 8004d9c:	40005400 	.word	0x40005400
 8004da0:	000186a0 	.word	0x000186a0

08004da4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004da8:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <MX_I2C2_Init+0x50>)
 8004daa:	4a13      	ldr	r2, [pc, #76]	; (8004df8 <MX_I2C2_Init+0x54>)
 8004dac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004dae:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <MX_I2C2_Init+0x50>)
 8004db0:	4a12      	ldr	r2, [pc, #72]	; (8004dfc <MX_I2C2_Init+0x58>)
 8004db2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004db4:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <MX_I2C2_Init+0x50>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004dba:	4b0e      	ldr	r3, [pc, #56]	; (8004df4 <MX_I2C2_Init+0x50>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <MX_I2C2_Init+0x50>)
 8004dc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004dc6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <MX_I2C2_Init+0x50>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <MX_I2C2_Init+0x50>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004dd4:	4b07      	ldr	r3, [pc, #28]	; (8004df4 <MX_I2C2_Init+0x50>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <MX_I2C2_Init+0x50>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004de0:	4804      	ldr	r0, [pc, #16]	; (8004df4 <MX_I2C2_Init+0x50>)
 8004de2:	f001 fe8d 	bl	8006b00 <HAL_I2C_Init>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004dec:	f000 fba8 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004df0:	bf00      	nop
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20002ae0 	.word	0x20002ae0
 8004df8:	40005800 	.word	0x40005800
 8004dfc:	000186a0 	.word	0x000186a0

08004e00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004e04:	4b17      	ldr	r3, [pc, #92]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e06:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <MX_SPI1_Init+0x68>)
 8004e08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e0a:	4b16      	ldr	r3, [pc, #88]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e12:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e18:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e2a:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004e32:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e34:	2230      	movs	r2, #48	; 0x30
 8004e36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e38:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e3e:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e4c:	220a      	movs	r2, #10
 8004e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004e50:	4804      	ldr	r0, [pc, #16]	; (8004e64 <MX_SPI1_Init+0x64>)
 8004e52:	f003 fee1 	bl	8008c18 <HAL_SPI_Init>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004e5c:	f000 fb70 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004e60:	bf00      	nop
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20002b34 	.word	0x20002b34
 8004e68:	40013000 	.word	0x40013000

08004e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08e      	sub	sp, #56	; 0x38
 8004e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	605a      	str	r2, [r3, #4]
 8004e7c:	609a      	str	r2, [r3, #8]
 8004e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e80:	f107 0320 	add.w	r3, r7, #32
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	611a      	str	r2, [r3, #16]
 8004e98:	615a      	str	r2, [r3, #20]
 8004e9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e9c:	4b32      	ldr	r3, [pc, #200]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004e9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ea2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004ea4:	4b30      	ldr	r3, [pc, #192]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eaa:	4b2f      	ldr	r3, [pc, #188]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004eb0:	4b2d      	ldr	r3, [pc, #180]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ebe:	4b2a      	ldr	r3, [pc, #168]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004ec4:	4828      	ldr	r0, [pc, #160]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004ec6:	f004 fad9 	bl	800947c <HAL_TIM_Base_Init>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004ed0:	f000 fb36 	bl	8005540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4821      	ldr	r0, [pc, #132]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004ee2:	f004 fc2b 	bl	800973c <HAL_TIM_ConfigClockSource>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004eec:	f000 fb28 	bl	8005540 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004ef0:	481d      	ldr	r0, [pc, #116]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004ef2:	f004 fb12 	bl	800951a <HAL_TIM_PWM_Init>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004efc:	f000 fb20 	bl	8005540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f00:	2300      	movs	r3, #0
 8004f02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f04:	2300      	movs	r3, #0
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f08:	f107 0320 	add.w	r3, r7, #32
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4816      	ldr	r0, [pc, #88]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004f10:	f004 ffc6 	bl	8009ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004f1a:	f000 fb11 	bl	8005540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f1e:	2360      	movs	r3, #96	; 0x60
 8004f20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f2e:	1d3b      	adds	r3, r7, #4
 8004f30:	2200      	movs	r2, #0
 8004f32:	4619      	mov	r1, r3
 8004f34:	480c      	ldr	r0, [pc, #48]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004f36:	f004 fb3f 	bl	80095b8 <HAL_TIM_PWM_ConfigChannel>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004f40:	f000 fafe 	bl	8005540 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	2204      	movs	r2, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4807      	ldr	r0, [pc, #28]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004f4c:	f004 fb34 	bl	80095b8 <HAL_TIM_PWM_ConfigChannel>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8004f56:	f000 faf3 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004f5a:	4803      	ldr	r0, [pc, #12]	; (8004f68 <MX_TIM2_Init+0xfc>)
 8004f5c:	f000 fc96 	bl	800588c <HAL_TIM_MspPostInit>

}
 8004f60:	bf00      	nop
 8004f62:	3738      	adds	r7, #56	; 0x38
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20002b8c 	.word	0x20002b8c

08004f6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08e      	sub	sp, #56	; 0x38
 8004f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	605a      	str	r2, [r3, #4]
 8004f7c:	609a      	str	r2, [r3, #8]
 8004f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f80:	f107 0320 	add.w	r3, r7, #32
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f8a:	1d3b      	adds	r3, r7, #4
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	611a      	str	r2, [r3, #16]
 8004f98:	615a      	str	r2, [r3, #20]
 8004f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004f9c:	4b3d      	ldr	r3, [pc, #244]	; (8005094 <MX_TIM3_Init+0x128>)
 8004f9e:	4a3e      	ldr	r2, [pc, #248]	; (8005098 <MX_TIM3_Init+0x12c>)
 8004fa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004fa2:	4b3c      	ldr	r3, [pc, #240]	; (8005094 <MX_TIM3_Init+0x128>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fa8:	4b3a      	ldr	r3, [pc, #232]	; (8005094 <MX_TIM3_Init+0x128>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004fae:	4b39      	ldr	r3, [pc, #228]	; (8005094 <MX_TIM3_Init+0x128>)
 8004fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fb6:	4b37      	ldr	r3, [pc, #220]	; (8005094 <MX_TIM3_Init+0x128>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fbc:	4b35      	ldr	r3, [pc, #212]	; (8005094 <MX_TIM3_Init+0x128>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004fc2:	4834      	ldr	r0, [pc, #208]	; (8005094 <MX_TIM3_Init+0x128>)
 8004fc4:	f004 fa5a 	bl	800947c <HAL_TIM_Base_Init>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004fce:	f000 fab7 	bl	8005540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fdc:	4619      	mov	r1, r3
 8004fde:	482d      	ldr	r0, [pc, #180]	; (8005094 <MX_TIM3_Init+0x128>)
 8004fe0:	f004 fbac 	bl	800973c <HAL_TIM_ConfigClockSource>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004fea:	f000 faa9 	bl	8005540 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004fee:	4829      	ldr	r0, [pc, #164]	; (8005094 <MX_TIM3_Init+0x128>)
 8004ff0:	f004 fa93 	bl	800951a <HAL_TIM_PWM_Init>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004ffa:	f000 faa1 	bl	8005540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ffe:	2300      	movs	r3, #0
 8005000:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005002:	2300      	movs	r3, #0
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005006:	f107 0320 	add.w	r3, r7, #32
 800500a:	4619      	mov	r1, r3
 800500c:	4821      	ldr	r0, [pc, #132]	; (8005094 <MX_TIM3_Init+0x128>)
 800500e:	f004 ff47 	bl	8009ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005018:	f000 fa92 	bl	8005540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800501c:	2360      	movs	r3, #96	; 0x60
 800501e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800502c:	1d3b      	adds	r3, r7, #4
 800502e:	2200      	movs	r2, #0
 8005030:	4619      	mov	r1, r3
 8005032:	4818      	ldr	r0, [pc, #96]	; (8005094 <MX_TIM3_Init+0x128>)
 8005034:	f004 fac0 	bl	80095b8 <HAL_TIM_PWM_ConfigChannel>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800503e:	f000 fa7f 	bl	8005540 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005042:	1d3b      	adds	r3, r7, #4
 8005044:	2204      	movs	r2, #4
 8005046:	4619      	mov	r1, r3
 8005048:	4812      	ldr	r0, [pc, #72]	; (8005094 <MX_TIM3_Init+0x128>)
 800504a:	f004 fab5 	bl	80095b8 <HAL_TIM_PWM_ConfigChannel>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005054:	f000 fa74 	bl	8005540 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005058:	1d3b      	adds	r3, r7, #4
 800505a:	2208      	movs	r2, #8
 800505c:	4619      	mov	r1, r3
 800505e:	480d      	ldr	r0, [pc, #52]	; (8005094 <MX_TIM3_Init+0x128>)
 8005060:	f004 faaa 	bl	80095b8 <HAL_TIM_PWM_ConfigChannel>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800506a:	f000 fa69 	bl	8005540 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800506e:	1d3b      	adds	r3, r7, #4
 8005070:	220c      	movs	r2, #12
 8005072:	4619      	mov	r1, r3
 8005074:	4807      	ldr	r0, [pc, #28]	; (8005094 <MX_TIM3_Init+0x128>)
 8005076:	f004 fa9f 	bl	80095b8 <HAL_TIM_PWM_ConfigChannel>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8005080:	f000 fa5e 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005084:	4803      	ldr	r0, [pc, #12]	; (8005094 <MX_TIM3_Init+0x128>)
 8005086:	f000 fc01 	bl	800588c <HAL_TIM_MspPostInit>

}
 800508a:	bf00      	nop
 800508c:	3738      	adds	r7, #56	; 0x38
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20002bd4 	.word	0x20002bd4
 8005098:	40000400 	.word	0x40000400

0800509c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	; 0x28
 80050a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050a2:	f107 0320 	add.w	r3, r7, #32
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050ac:	1d3b      	adds	r3, r7, #4
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	605a      	str	r2, [r3, #4]
 80050b4:	609a      	str	r2, [r3, #8]
 80050b6:	60da      	str	r2, [r3, #12]
 80050b8:	611a      	str	r2, [r3, #16]
 80050ba:	615a      	str	r2, [r3, #20]
 80050bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80050be:	4b22      	ldr	r3, [pc, #136]	; (8005148 <MX_TIM4_Init+0xac>)
 80050c0:	4a22      	ldr	r2, [pc, #136]	; (800514c <MX_TIM4_Init+0xb0>)
 80050c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80050c4:	4b20      	ldr	r3, [pc, #128]	; (8005148 <MX_TIM4_Init+0xac>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050ca:	4b1f      	ldr	r3, [pc, #124]	; (8005148 <MX_TIM4_Init+0xac>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <MX_TIM4_Init+0xac>)
 80050d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050d8:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <MX_TIM4_Init+0xac>)
 80050da:	2200      	movs	r2, #0
 80050dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050de:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <MX_TIM4_Init+0xac>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80050e4:	4818      	ldr	r0, [pc, #96]	; (8005148 <MX_TIM4_Init+0xac>)
 80050e6:	f004 fa18 	bl	800951a <HAL_TIM_PWM_Init>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80050f0:	f000 fa26 	bl	8005540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050f4:	2300      	movs	r3, #0
 80050f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050f8:	2300      	movs	r3, #0
 80050fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80050fc:	f107 0320 	add.w	r3, r7, #32
 8005100:	4619      	mov	r1, r3
 8005102:	4811      	ldr	r0, [pc, #68]	; (8005148 <MX_TIM4_Init+0xac>)
 8005104:	f004 fecc 	bl	8009ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800510e:	f000 fa17 	bl	8005540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005112:	2360      	movs	r3, #96	; 0x60
 8005114:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005116:	2300      	movs	r3, #0
 8005118:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005122:	1d3b      	adds	r3, r7, #4
 8005124:	2200      	movs	r2, #0
 8005126:	4619      	mov	r1, r3
 8005128:	4807      	ldr	r0, [pc, #28]	; (8005148 <MX_TIM4_Init+0xac>)
 800512a:	f004 fa45 	bl	80095b8 <HAL_TIM_PWM_ConfigChannel>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005134:	f000 fa04 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005138:	4803      	ldr	r0, [pc, #12]	; (8005148 <MX_TIM4_Init+0xac>)
 800513a:	f000 fba7 	bl	800588c <HAL_TIM_MspPostInit>

}
 800513e:	bf00      	nop
 8005140:	3728      	adds	r7, #40	; 0x28
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20002c1c 	.word	0x20002c1c
 800514c:	40000800 	.word	0x40000800

08005150 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08e      	sub	sp, #56	; 0x38
 8005154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	605a      	str	r2, [r3, #4]
 8005160:	609a      	str	r2, [r3, #8]
 8005162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005164:	f107 0320 	add.w	r3, r7, #32
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800516e:	1d3b      	adds	r3, r7, #4
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	611a      	str	r2, [r3, #16]
 800517c:	615a      	str	r2, [r3, #20]
 800517e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005180:	4b2c      	ldr	r3, [pc, #176]	; (8005234 <MX_TIM5_Init+0xe4>)
 8005182:	4a2d      	ldr	r2, [pc, #180]	; (8005238 <MX_TIM5_Init+0xe8>)
 8005184:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8005186:	4b2b      	ldr	r3, [pc, #172]	; (8005234 <MX_TIM5_Init+0xe4>)
 8005188:	2200      	movs	r2, #0
 800518a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800518c:	4b29      	ldr	r3, [pc, #164]	; (8005234 <MX_TIM5_Init+0xe4>)
 800518e:	2200      	movs	r2, #0
 8005190:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8005192:	4b28      	ldr	r3, [pc, #160]	; (8005234 <MX_TIM5_Init+0xe4>)
 8005194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005198:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800519a:	4b26      	ldr	r3, [pc, #152]	; (8005234 <MX_TIM5_Init+0xe4>)
 800519c:	2200      	movs	r2, #0
 800519e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051a0:	4b24      	ldr	r3, [pc, #144]	; (8005234 <MX_TIM5_Init+0xe4>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80051a6:	4823      	ldr	r0, [pc, #140]	; (8005234 <MX_TIM5_Init+0xe4>)
 80051a8:	f004 f968 	bl	800947c <HAL_TIM_Base_Init>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80051b2:	f000 f9c5 	bl	8005540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80051bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051c0:	4619      	mov	r1, r3
 80051c2:	481c      	ldr	r0, [pc, #112]	; (8005234 <MX_TIM5_Init+0xe4>)
 80051c4:	f004 faba 	bl	800973c <HAL_TIM_ConfigClockSource>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80051ce:	f000 f9b7 	bl	8005540 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80051d2:	4818      	ldr	r0, [pc, #96]	; (8005234 <MX_TIM5_Init+0xe4>)
 80051d4:	f004 f9a1 	bl	800951a <HAL_TIM_PWM_Init>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80051de:	f000 f9af 	bl	8005540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051e2:	2300      	movs	r3, #0
 80051e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051e6:	2300      	movs	r3, #0
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80051ea:	f107 0320 	add.w	r3, r7, #32
 80051ee:	4619      	mov	r1, r3
 80051f0:	4810      	ldr	r0, [pc, #64]	; (8005234 <MX_TIM5_Init+0xe4>)
 80051f2:	f004 fe55 	bl	8009ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80051fc:	f000 f9a0 	bl	8005540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005200:	2360      	movs	r3, #96	; 0x60
 8005202:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005210:	1d3b      	adds	r3, r7, #4
 8005212:	2200      	movs	r2, #0
 8005214:	4619      	mov	r1, r3
 8005216:	4807      	ldr	r0, [pc, #28]	; (8005234 <MX_TIM5_Init+0xe4>)
 8005218:	f004 f9ce 	bl	80095b8 <HAL_TIM_PWM_ConfigChannel>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8005222:	f000 f98d 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005226:	4803      	ldr	r0, [pc, #12]	; (8005234 <MX_TIM5_Init+0xe4>)
 8005228:	f000 fb30 	bl	800588c <HAL_TIM_MspPostInit>

}
 800522c:	bf00      	nop
 800522e:	3738      	adds	r7, #56	; 0x38
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20002c64 	.word	0x20002c64
 8005238:	40000c00 	.word	0x40000c00

0800523c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005240:	4b11      	ldr	r3, [pc, #68]	; (8005288 <MX_USART1_UART_Init+0x4c>)
 8005242:	4a12      	ldr	r2, [pc, #72]	; (800528c <MX_USART1_UART_Init+0x50>)
 8005244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005246:	4b10      	ldr	r3, [pc, #64]	; (8005288 <MX_USART1_UART_Init+0x4c>)
 8005248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800524c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800524e:	4b0e      	ldr	r3, [pc, #56]	; (8005288 <MX_USART1_UART_Init+0x4c>)
 8005250:	2200      	movs	r2, #0
 8005252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <MX_USART1_UART_Init+0x4c>)
 8005256:	2200      	movs	r2, #0
 8005258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <MX_USART1_UART_Init+0x4c>)
 800525c:	2200      	movs	r2, #0
 800525e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005260:	4b09      	ldr	r3, [pc, #36]	; (8005288 <MX_USART1_UART_Init+0x4c>)
 8005262:	220c      	movs	r2, #12
 8005264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005266:	4b08      	ldr	r3, [pc, #32]	; (8005288 <MX_USART1_UART_Init+0x4c>)
 8005268:	2200      	movs	r2, #0
 800526a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <MX_USART1_UART_Init+0x4c>)
 800526e:	2200      	movs	r2, #0
 8005270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005272:	4805      	ldr	r0, [pc, #20]	; (8005288 <MX_USART1_UART_Init+0x4c>)
 8005274:	f004 fe90 	bl	8009f98 <HAL_UART_Init>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800527e:	f000 f95f 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20002cac 	.word	0x20002cac
 800528c:	40011000 	.word	0x40011000

08005290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005294:	4b11      	ldr	r3, [pc, #68]	; (80052dc <MX_USART2_UART_Init+0x4c>)
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <MX_USART2_UART_Init+0x50>)
 8005298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <MX_USART2_UART_Init+0x4c>)
 800529c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052a2:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <MX_USART2_UART_Init+0x4c>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80052a8:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <MX_USART2_UART_Init+0x4c>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80052ae:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <MX_USART2_UART_Init+0x4c>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <MX_USART2_UART_Init+0x4c>)
 80052b6:	220c      	movs	r2, #12
 80052b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ba:	4b08      	ldr	r3, [pc, #32]	; (80052dc <MX_USART2_UART_Init+0x4c>)
 80052bc:	2200      	movs	r2, #0
 80052be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <MX_USART2_UART_Init+0x4c>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80052c6:	4805      	ldr	r0, [pc, #20]	; (80052dc <MX_USART2_UART_Init+0x4c>)
 80052c8:	f004 fe66 	bl	8009f98 <HAL_UART_Init>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80052d2:	f000 f935 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20002cf0 	.word	0x20002cf0
 80052e0:	40004400 	.word	0x40004400

080052e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80052e8:	4b11      	ldr	r3, [pc, #68]	; (8005330 <MX_USART3_UART_Init+0x4c>)
 80052ea:	4a12      	ldr	r2, [pc, #72]	; (8005334 <MX_USART3_UART_Init+0x50>)
 80052ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <MX_USART3_UART_Init+0x4c>)
 80052f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80052f6:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <MX_USART3_UART_Init+0x4c>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80052fc:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <MX_USART3_UART_Init+0x4c>)
 80052fe:	2200      	movs	r2, #0
 8005300:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <MX_USART3_UART_Init+0x4c>)
 8005304:	2200      	movs	r2, #0
 8005306:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005308:	4b09      	ldr	r3, [pc, #36]	; (8005330 <MX_USART3_UART_Init+0x4c>)
 800530a:	220c      	movs	r2, #12
 800530c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <MX_USART3_UART_Init+0x4c>)
 8005310:	2200      	movs	r2, #0
 8005312:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <MX_USART3_UART_Init+0x4c>)
 8005316:	2200      	movs	r2, #0
 8005318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800531a:	4805      	ldr	r0, [pc, #20]	; (8005330 <MX_USART3_UART_Init+0x4c>)
 800531c:	f004 fe3c 	bl	8009f98 <HAL_UART_Init>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005326:	f000 f90b 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800532a:	bf00      	nop
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20002d34 	.word	0x20002d34
 8005334:	40004800 	.word	0x40004800

08005338 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800533c:	4b11      	ldr	r3, [pc, #68]	; (8005384 <MX_USART6_UART_Init+0x4c>)
 800533e:	4a12      	ldr	r2, [pc, #72]	; (8005388 <MX_USART6_UART_Init+0x50>)
 8005340:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005342:	4b10      	ldr	r3, [pc, #64]	; (8005384 <MX_USART6_UART_Init+0x4c>)
 8005344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005348:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800534a:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <MX_USART6_UART_Init+0x4c>)
 800534c:	2200      	movs	r2, #0
 800534e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005350:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <MX_USART6_UART_Init+0x4c>)
 8005352:	2200      	movs	r2, #0
 8005354:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <MX_USART6_UART_Init+0x4c>)
 8005358:	2200      	movs	r2, #0
 800535a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <MX_USART6_UART_Init+0x4c>)
 800535e:	220c      	movs	r2, #12
 8005360:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005362:	4b08      	ldr	r3, [pc, #32]	; (8005384 <MX_USART6_UART_Init+0x4c>)
 8005364:	2200      	movs	r2, #0
 8005366:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <MX_USART6_UART_Init+0x4c>)
 800536a:	2200      	movs	r2, #0
 800536c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800536e:	4805      	ldr	r0, [pc, #20]	; (8005384 <MX_USART6_UART_Init+0x4c>)
 8005370:	f004 fe12 	bl	8009f98 <HAL_UART_Init>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800537a:	f000 f8e1 	bl	8005540 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800537e:	bf00      	nop
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20002d78 	.word	0x20002d78
 8005388:	40011400 	.word	0x40011400

0800538c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005390:	bf00      	nop
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08a      	sub	sp, #40	; 0x28
 80053a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a2:	f107 0314 	add.w	r3, r7, #20
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	605a      	str	r2, [r3, #4]
 80053ac:	609a      	str	r2, [r3, #8]
 80053ae:	60da      	str	r2, [r3, #12]
 80053b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80053b2:	2300      	movs	r3, #0
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	4b5e      	ldr	r3, [pc, #376]	; (8005530 <MX_GPIO_Init+0x194>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	4a5d      	ldr	r2, [pc, #372]	; (8005530 <MX_GPIO_Init+0x194>)
 80053bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c0:	6313      	str	r3, [r2, #48]	; 0x30
 80053c2:	4b5b      	ldr	r3, [pc, #364]	; (8005530 <MX_GPIO_Init+0x194>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	4b57      	ldr	r3, [pc, #348]	; (8005530 <MX_GPIO_Init+0x194>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	4a56      	ldr	r2, [pc, #344]	; (8005530 <MX_GPIO_Init+0x194>)
 80053d8:	f043 0304 	orr.w	r3, r3, #4
 80053dc:	6313      	str	r3, [r2, #48]	; 0x30
 80053de:	4b54      	ldr	r3, [pc, #336]	; (8005530 <MX_GPIO_Init+0x194>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	4b50      	ldr	r3, [pc, #320]	; (8005530 <MX_GPIO_Init+0x194>)
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	4a4f      	ldr	r2, [pc, #316]	; (8005530 <MX_GPIO_Init+0x194>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	6313      	str	r3, [r2, #48]	; 0x30
 80053fa:	4b4d      	ldr	r3, [pc, #308]	; (8005530 <MX_GPIO_Init+0x194>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
 800540a:	4b49      	ldr	r3, [pc, #292]	; (8005530 <MX_GPIO_Init+0x194>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	4a48      	ldr	r2, [pc, #288]	; (8005530 <MX_GPIO_Init+0x194>)
 8005410:	f043 0302 	orr.w	r3, r3, #2
 8005414:	6313      	str	r3, [r2, #48]	; 0x30
 8005416:	4b46      	ldr	r3, [pc, #280]	; (8005530 <MX_GPIO_Init+0x194>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	607b      	str	r3, [r7, #4]
 8005420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8005422:	2201      	movs	r2, #1
 8005424:	2110      	movs	r1, #16
 8005426:	4843      	ldr	r0, [pc, #268]	; (8005534 <MX_GPIO_Init+0x198>)
 8005428:	f001 fb2c 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800542c:	2200      	movs	r2, #0
 800542e:	2120      	movs	r1, #32
 8005430:	4841      	ldr	r0, [pc, #260]	; (8005538 <MX_GPIO_Init+0x19c>)
 8005432:	f001 fb27 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8005436:	2200      	movs	r2, #0
 8005438:	2107      	movs	r1, #7
 800543a:	4840      	ldr	r0, [pc, #256]	; (800553c <MX_GPIO_Init+0x1a0>)
 800543c:	f001 fb22 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8005440:	2313      	movs	r3, #19
 8005442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005444:	2303      	movs	r3, #3
 8005446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800544c:	f107 0314 	add.w	r3, r7, #20
 8005450:	4619      	mov	r1, r3
 8005452:	4839      	ldr	r0, [pc, #228]	; (8005538 <MX_GPIO_Init+0x19c>)
 8005454:	f001 f97a 	bl	800674c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005458:	2310      	movs	r3, #16
 800545a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800545c:	2301      	movs	r3, #1
 800545e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005464:	2301      	movs	r3, #1
 8005466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005468:	f107 0314 	add.w	r3, r7, #20
 800546c:	4619      	mov	r1, r3
 800546e:	4831      	ldr	r0, [pc, #196]	; (8005534 <MX_GPIO_Init+0x198>)
 8005470:	f001 f96c 	bl	800674c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8005474:	2320      	movs	r3, #32
 8005476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005478:	2301      	movs	r3, #1
 800547a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005480:	2300      	movs	r3, #0
 8005482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	4619      	mov	r1, r3
 800548a:	482b      	ldr	r0, [pc, #172]	; (8005538 <MX_GPIO_Init+0x19c>)
 800548c:	f001 f95e 	bl	800674c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ON_Pin PB1 PB2 */
  GPIO_InitStruct.Pin = LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2;
 8005490:	2307      	movs	r3, #7
 8005492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005494:	2301      	movs	r3, #1
 8005496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005498:	2300      	movs	r3, #0
 800549a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800549c:	2300      	movs	r3, #0
 800549e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054a0:	f107 0314 	add.w	r3, r7, #20
 80054a4:	4619      	mov	r1, r3
 80054a6:	4825      	ldr	r0, [pc, #148]	; (800553c <MX_GPIO_Init+0x1a0>)
 80054a8:	f001 f950 	bl	800674c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80054ac:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80054b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80054b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054bc:	f107 0314 	add.w	r3, r7, #20
 80054c0:	4619      	mov	r1, r3
 80054c2:	481e      	ldr	r0, [pc, #120]	; (800553c <MX_GPIO_Init+0x1a0>)
 80054c4:	f001 f942 	bl	800674c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80054d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054d8:	f107 0314 	add.w	r3, r7, #20
 80054dc:	4619      	mov	r1, r3
 80054de:	4815      	ldr	r0, [pc, #84]	; (8005534 <MX_GPIO_Init+0x198>)
 80054e0:	f001 f934 	bl	800674c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80054e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80054e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ea:	2302      	movs	r3, #2
 80054ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f2:	2303      	movs	r3, #3
 80054f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80054f6:	230a      	movs	r3, #10
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054fa:	f107 0314 	add.w	r3, r7, #20
 80054fe:	4619      	mov	r1, r3
 8005500:	480c      	ldr	r0, [pc, #48]	; (8005534 <MX_GPIO_Init+0x198>)
 8005502:	f001 f923 	bl	800674c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005506:	2200      	movs	r2, #0
 8005508:	2100      	movs	r1, #0
 800550a:	2017      	movs	r0, #23
 800550c:	f001 f8e7 	bl	80066de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005510:	2017      	movs	r0, #23
 8005512:	f001 f900 	bl	8006716 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005516:	2200      	movs	r2, #0
 8005518:	2100      	movs	r1, #0
 800551a:	2028      	movs	r0, #40	; 0x28
 800551c:	f001 f8df 	bl	80066de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005520:	2028      	movs	r0, #40	; 0x28
 8005522:	f001 f8f8 	bl	8006716 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005526:	bf00      	nop
 8005528:	3728      	adds	r7, #40	; 0x28
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40023800 	.word	0x40023800
 8005534:	40020000 	.word	0x40020000
 8005538:	40020800 	.word	0x40020800
 800553c:	40020400 	.word	0x40020400

08005540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005544:	b672      	cpsid	i
}
 8005546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005548:	e7fe      	b.n	8005548 <Error_Handler+0x8>
	...

0800554c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005552:	2300      	movs	r3, #0
 8005554:	607b      	str	r3, [r7, #4]
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <HAL_MspInit+0x4c>)
 8005558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555a:	4a0f      	ldr	r2, [pc, #60]	; (8005598 <HAL_MspInit+0x4c>)
 800555c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005560:	6453      	str	r3, [r2, #68]	; 0x44
 8005562:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <HAL_MspInit+0x4c>)
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800556a:	607b      	str	r3, [r7, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800556e:	2300      	movs	r3, #0
 8005570:	603b      	str	r3, [r7, #0]
 8005572:	4b09      	ldr	r3, [pc, #36]	; (8005598 <HAL_MspInit+0x4c>)
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	4a08      	ldr	r2, [pc, #32]	; (8005598 <HAL_MspInit+0x4c>)
 8005578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557c:	6413      	str	r3, [r2, #64]	; 0x40
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <HAL_MspInit+0x4c>)
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40023800 	.word	0x40023800

0800559c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	; 0x28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a4:	f107 0314 	add.w	r3, r7, #20
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	609a      	str	r2, [r3, #8]
 80055b0:	60da      	str	r2, [r3, #12]
 80055b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a17      	ldr	r2, [pc, #92]	; (8005618 <HAL_ADC_MspInit+0x7c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d127      	bne.n	800560e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80055be:	2300      	movs	r3, #0
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	4b16      	ldr	r3, [pc, #88]	; (800561c <HAL_ADC_MspInit+0x80>)
 80055c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c6:	4a15      	ldr	r2, [pc, #84]	; (800561c <HAL_ADC_MspInit+0x80>)
 80055c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055cc:	6453      	str	r3, [r2, #68]	; 0x44
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <HAL_ADC_MspInit+0x80>)
 80055d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	4b0f      	ldr	r3, [pc, #60]	; (800561c <HAL_ADC_MspInit+0x80>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	4a0e      	ldr	r2, [pc, #56]	; (800561c <HAL_ADC_MspInit+0x80>)
 80055e4:	f043 0304 	orr.w	r3, r3, #4
 80055e8:	6313      	str	r3, [r2, #48]	; 0x30
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <HAL_ADC_MspInit+0x80>)
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80055f6:	230c      	movs	r3, #12
 80055f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055fa:	2303      	movs	r3, #3
 80055fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005602:	f107 0314 	add.w	r3, r7, #20
 8005606:	4619      	mov	r1, r3
 8005608:	4805      	ldr	r0, [pc, #20]	; (8005620 <HAL_ADC_MspInit+0x84>)
 800560a:	f001 f89f 	bl	800674c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800560e:	bf00      	nop
 8005610:	3728      	adds	r7, #40	; 0x28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40012200 	.word	0x40012200
 800561c:	40023800 	.word	0x40023800
 8005620:	40020800 	.word	0x40020800

08005624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08c      	sub	sp, #48	; 0x30
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800562c:	f107 031c 	add.w	r3, r7, #28
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	60da      	str	r2, [r3, #12]
 800563a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a33      	ldr	r2, [pc, #204]	; (8005710 <HAL_I2C_MspInit+0xec>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d12d      	bne.n	80056a2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005646:	2300      	movs	r3, #0
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	4b32      	ldr	r3, [pc, #200]	; (8005714 <HAL_I2C_MspInit+0xf0>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	4a31      	ldr	r2, [pc, #196]	; (8005714 <HAL_I2C_MspInit+0xf0>)
 8005650:	f043 0302 	orr.w	r3, r3, #2
 8005654:	6313      	str	r3, [r2, #48]	; 0x30
 8005656:	4b2f      	ldr	r3, [pc, #188]	; (8005714 <HAL_I2C_MspInit+0xf0>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	61bb      	str	r3, [r7, #24]
 8005660:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005662:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005668:	2312      	movs	r3, #18
 800566a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566c:	2300      	movs	r3, #0
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005670:	2303      	movs	r3, #3
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005674:	2304      	movs	r3, #4
 8005676:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005678:	f107 031c 	add.w	r3, r7, #28
 800567c:	4619      	mov	r1, r3
 800567e:	4826      	ldr	r0, [pc, #152]	; (8005718 <HAL_I2C_MspInit+0xf4>)
 8005680:	f001 f864 	bl	800674c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	4b22      	ldr	r3, [pc, #136]	; (8005714 <HAL_I2C_MspInit+0xf0>)
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	4a21      	ldr	r2, [pc, #132]	; (8005714 <HAL_I2C_MspInit+0xf0>)
 800568e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005692:	6413      	str	r3, [r2, #64]	; 0x40
 8005694:	4b1f      	ldr	r3, [pc, #124]	; (8005714 <HAL_I2C_MspInit+0xf0>)
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80056a0:	e031      	b.n	8005706 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1d      	ldr	r2, [pc, #116]	; (800571c <HAL_I2C_MspInit+0xf8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d12c      	bne.n	8005706 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ac:	2300      	movs	r3, #0
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	4b18      	ldr	r3, [pc, #96]	; (8005714 <HAL_I2C_MspInit+0xf0>)
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	4a17      	ldr	r2, [pc, #92]	; (8005714 <HAL_I2C_MspInit+0xf0>)
 80056b6:	f043 0302 	orr.w	r3, r3, #2
 80056ba:	6313      	str	r3, [r2, #48]	; 0x30
 80056bc:	4b15      	ldr	r3, [pc, #84]	; (8005714 <HAL_I2C_MspInit+0xf0>)
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056ce:	2312      	movs	r3, #18
 80056d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d6:	2303      	movs	r3, #3
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80056da:	2304      	movs	r3, #4
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056de:	f107 031c 	add.w	r3, r7, #28
 80056e2:	4619      	mov	r1, r3
 80056e4:	480c      	ldr	r0, [pc, #48]	; (8005718 <HAL_I2C_MspInit+0xf4>)
 80056e6:	f001 f831 	bl	800674c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <HAL_I2C_MspInit+0xf0>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	4a08      	ldr	r2, [pc, #32]	; (8005714 <HAL_I2C_MspInit+0xf0>)
 80056f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056f8:	6413      	str	r3, [r2, #64]	; 0x40
 80056fa:	4b06      	ldr	r3, [pc, #24]	; (8005714 <HAL_I2C_MspInit+0xf0>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
}
 8005706:	bf00      	nop
 8005708:	3730      	adds	r7, #48	; 0x30
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40005400 	.word	0x40005400
 8005714:	40023800 	.word	0x40023800
 8005718:	40020400 	.word	0x40020400
 800571c:	40005800 	.word	0x40005800

08005720 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	; 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005728:	f107 0314 	add.w	r3, r7, #20
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	605a      	str	r2, [r3, #4]
 8005732:	609a      	str	r2, [r3, #8]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a19      	ldr	r2, [pc, #100]	; (80057a4 <HAL_SPI_MspInit+0x84>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d12b      	bne.n	800579a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <HAL_SPI_MspInit+0x88>)
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <HAL_SPI_MspInit+0x88>)
 800574c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005750:	6453      	str	r3, [r2, #68]	; 0x44
 8005752:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <HAL_SPI_MspInit+0x88>)
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <HAL_SPI_MspInit+0x88>)
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	4a10      	ldr	r2, [pc, #64]	; (80057a8 <HAL_SPI_MspInit+0x88>)
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	6313      	str	r3, [r2, #48]	; 0x30
 800576e:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <HAL_SPI_MspInit+0x88>)
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800577a:	23e0      	movs	r3, #224	; 0xe0
 800577c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577e:	2302      	movs	r3, #2
 8005780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005782:	2300      	movs	r3, #0
 8005784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005786:	2303      	movs	r3, #3
 8005788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800578a:	2305      	movs	r3, #5
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800578e:	f107 0314 	add.w	r3, r7, #20
 8005792:	4619      	mov	r1, r3
 8005794:	4805      	ldr	r0, [pc, #20]	; (80057ac <HAL_SPI_MspInit+0x8c>)
 8005796:	f000 ffd9 	bl	800674c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800579a:	bf00      	nop
 800579c:	3728      	adds	r7, #40	; 0x28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40013000 	.word	0x40013000
 80057a8:	40023800 	.word	0x40023800
 80057ac:	40020000 	.word	0x40020000

080057b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c0:	d10e      	bne.n	80057e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	4b1d      	ldr	r3, [pc, #116]	; (800583c <HAL_TIM_Base_MspInit+0x8c>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	4a1c      	ldr	r2, [pc, #112]	; (800583c <HAL_TIM_Base_MspInit+0x8c>)
 80057cc:	f043 0301 	orr.w	r3, r3, #1
 80057d0:	6413      	str	r3, [r2, #64]	; 0x40
 80057d2:	4b1a      	ldr	r3, [pc, #104]	; (800583c <HAL_TIM_Base_MspInit+0x8c>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80057de:	e026      	b.n	800582e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a16      	ldr	r2, [pc, #88]	; (8005840 <HAL_TIM_Base_MspInit+0x90>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d10e      	bne.n	8005808 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057ea:	2300      	movs	r3, #0
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	4b13      	ldr	r3, [pc, #76]	; (800583c <HAL_TIM_Base_MspInit+0x8c>)
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	4a12      	ldr	r2, [pc, #72]	; (800583c <HAL_TIM_Base_MspInit+0x8c>)
 80057f4:	f043 0302 	orr.w	r3, r3, #2
 80057f8:	6413      	str	r3, [r2, #64]	; 0x40
 80057fa:	4b10      	ldr	r3, [pc, #64]	; (800583c <HAL_TIM_Base_MspInit+0x8c>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	693b      	ldr	r3, [r7, #16]
}
 8005806:	e012      	b.n	800582e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a0d      	ldr	r2, [pc, #52]	; (8005844 <HAL_TIM_Base_MspInit+0x94>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d10d      	bne.n	800582e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <HAL_TIM_Base_MspInit+0x8c>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	4a08      	ldr	r2, [pc, #32]	; (800583c <HAL_TIM_Base_MspInit+0x8c>)
 800581c:	f043 0308 	orr.w	r3, r3, #8
 8005820:	6413      	str	r3, [r2, #64]	; 0x40
 8005822:	4b06      	ldr	r3, [pc, #24]	; (800583c <HAL_TIM_Base_MspInit+0x8c>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f003 0308 	and.w	r3, r3, #8
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40023800 	.word	0x40023800
 8005840:	40000400 	.word	0x40000400
 8005844:	40000c00 	.word	0x40000c00

08005848 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a0b      	ldr	r2, [pc, #44]	; (8005884 <HAL_TIM_PWM_MspInit+0x3c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d10d      	bne.n	8005876 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <HAL_TIM_PWM_MspInit+0x40>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	4a09      	ldr	r2, [pc, #36]	; (8005888 <HAL_TIM_PWM_MspInit+0x40>)
 8005864:	f043 0304 	orr.w	r3, r3, #4
 8005868:	6413      	str	r3, [r2, #64]	; 0x40
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <HAL_TIM_PWM_MspInit+0x40>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40000800 	.word	0x40000800
 8005888:	40023800 	.word	0x40023800

0800588c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08c      	sub	sp, #48	; 0x30
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005894:	f107 031c 	add.w	r3, r7, #28
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	605a      	str	r2, [r3, #4]
 800589e:	609a      	str	r2, [r3, #8]
 80058a0:	60da      	str	r2, [r3, #12]
 80058a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ac:	d11f      	bne.n	80058ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	4b56      	ldr	r3, [pc, #344]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	4a55      	ldr	r2, [pc, #340]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	6313      	str	r3, [r2, #48]	; 0x30
 80058be:	4b53      	ldr	r3, [pc, #332]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	61bb      	str	r3, [r7, #24]
 80058c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80058ca:	f248 0302 	movw	r3, #32770	; 0x8002
 80058ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d0:	2302      	movs	r3, #2
 80058d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058d8:	2300      	movs	r3, #0
 80058da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80058dc:	2301      	movs	r3, #1
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058e0:	f107 031c 	add.w	r3, r7, #28
 80058e4:	4619      	mov	r1, r3
 80058e6:	484a      	ldr	r0, [pc, #296]	; (8005a10 <HAL_TIM_MspPostInit+0x184>)
 80058e8:	f000 ff30 	bl	800674c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80058ec:	e089      	b.n	8005a02 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM3)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a48      	ldr	r2, [pc, #288]	; (8005a14 <HAL_TIM_MspPostInit+0x188>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d13d      	bne.n	8005974 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	4b43      	ldr	r3, [pc, #268]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	4a42      	ldr	r2, [pc, #264]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 8005902:	f043 0304 	orr.w	r3, r3, #4
 8005906:	6313      	str	r3, [r2, #48]	; 0x30
 8005908:	4b40      	ldr	r3, [pc, #256]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	4b3c      	ldr	r3, [pc, #240]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 800591a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591c:	4a3b      	ldr	r2, [pc, #236]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 800591e:	f043 0302 	orr.w	r3, r3, #2
 8005922:	6313      	str	r3, [r2, #48]	; 0x30
 8005924:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005930:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005936:	2302      	movs	r3, #2
 8005938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593a:	2300      	movs	r3, #0
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800593e:	2300      	movs	r3, #0
 8005940:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005942:	2302      	movs	r3, #2
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005946:	f107 031c 	add.w	r3, r7, #28
 800594a:	4619      	mov	r1, r3
 800594c:	4832      	ldr	r0, [pc, #200]	; (8005a18 <HAL_TIM_MspPostInit+0x18c>)
 800594e:	f000 fefd 	bl	800674c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005952:	2330      	movs	r3, #48	; 0x30
 8005954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005956:	2302      	movs	r3, #2
 8005958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595a:	2300      	movs	r3, #0
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800595e:	2300      	movs	r3, #0
 8005960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005962:	2302      	movs	r3, #2
 8005964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005966:	f107 031c 	add.w	r3, r7, #28
 800596a:	4619      	mov	r1, r3
 800596c:	482b      	ldr	r0, [pc, #172]	; (8005a1c <HAL_TIM_MspPostInit+0x190>)
 800596e:	f000 feed 	bl	800674c <HAL_GPIO_Init>
}
 8005972:	e046      	b.n	8005a02 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a29      	ldr	r2, [pc, #164]	; (8005a20 <HAL_TIM_MspPostInit+0x194>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d11e      	bne.n	80059bc <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	4b22      	ldr	r3, [pc, #136]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 8005984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005986:	4a21      	ldr	r2, [pc, #132]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 8005988:	f043 0302 	orr.w	r3, r3, #2
 800598c:	6313      	str	r3, [r2, #48]	; 0x30
 800598e:	4b1f      	ldr	r3, [pc, #124]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800599a:	2340      	movs	r3, #64	; 0x40
 800599c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800599e:	2302      	movs	r3, #2
 80059a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059a6:	2300      	movs	r3, #0
 80059a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80059aa:	2302      	movs	r3, #2
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ae:	f107 031c 	add.w	r3, r7, #28
 80059b2:	4619      	mov	r1, r3
 80059b4:	4819      	ldr	r0, [pc, #100]	; (8005a1c <HAL_TIM_MspPostInit+0x190>)
 80059b6:	f000 fec9 	bl	800674c <HAL_GPIO_Init>
}
 80059ba:	e022      	b.n	8005a02 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM5)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a18      	ldr	r2, [pc, #96]	; (8005a24 <HAL_TIM_MspPostInit+0x198>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d11d      	bne.n	8005a02 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c6:	2300      	movs	r3, #0
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	4a0f      	ldr	r2, [pc, #60]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 80059d0:	f043 0301 	orr.w	r3, r3, #1
 80059d4:	6313      	str	r3, [r2, #48]	; 0x30
 80059d6:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <HAL_TIM_MspPostInit+0x180>)
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	60bb      	str	r3, [r7, #8]
 80059e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80059e2:	2301      	movs	r3, #1
 80059e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e6:	2302      	movs	r3, #2
 80059e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ee:	2300      	movs	r3, #0
 80059f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80059f2:	2302      	movs	r3, #2
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059f6:	f107 031c 	add.w	r3, r7, #28
 80059fa:	4619      	mov	r1, r3
 80059fc:	4804      	ldr	r0, [pc, #16]	; (8005a10 <HAL_TIM_MspPostInit+0x184>)
 80059fe:	f000 fea5 	bl	800674c <HAL_GPIO_Init>
}
 8005a02:	bf00      	nop
 8005a04:	3730      	adds	r7, #48	; 0x30
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	40020000 	.word	0x40020000
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40020800 	.word	0x40020800
 8005a1c:	40020400 	.word	0x40020400
 8005a20:	40000800 	.word	0x40000800
 8005a24:	40000c00 	.word	0x40000c00

08005a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b090      	sub	sp, #64	; 0x40
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a74      	ldr	r2, [pc, #464]	; (8005c18 <HAL_UART_MspInit+0x1f0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d14b      	bne.n	8005ae2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a4e:	4b73      	ldr	r3, [pc, #460]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	4a72      	ldr	r2, [pc, #456]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005a54:	f043 0310 	orr.w	r3, r3, #16
 8005a58:	6453      	str	r3, [r2, #68]	; 0x44
 8005a5a:	4b70      	ldr	r3, [pc, #448]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6a:	4b6c      	ldr	r3, [pc, #432]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	4a6b      	ldr	r2, [pc, #428]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	6313      	str	r3, [r2, #48]	; 0x30
 8005a76:	4b69      	ldr	r3, [pc, #420]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a82:	2300      	movs	r3, #0
 8005a84:	623b      	str	r3, [r7, #32]
 8005a86:	4b65      	ldr	r3, [pc, #404]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	4a64      	ldr	r2, [pc, #400]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005a8c:	f043 0302 	orr.w	r3, r3, #2
 8005a90:	6313      	str	r3, [r2, #48]	; 0x30
 8005a92:	4b62      	ldr	r3, [pc, #392]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	623b      	str	r3, [r7, #32]
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aac:	2303      	movs	r3, #3
 8005aae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ab0:	2307      	movs	r3, #7
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4859      	ldr	r0, [pc, #356]	; (8005c20 <HAL_UART_MspInit+0x1f8>)
 8005abc:	f000 fe46 	bl	800674c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005ac0:	2380      	movs	r3, #128	; 0x80
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005acc:	2303      	movs	r3, #3
 8005ace:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ad0:	2307      	movs	r3, #7
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4852      	ldr	r0, [pc, #328]	; (8005c24 <HAL_UART_MspInit+0x1fc>)
 8005adc:	f000 fe36 	bl	800674c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005ae0:	e095      	b.n	8005c0e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a50      	ldr	r2, [pc, #320]	; (8005c28 <HAL_UART_MspInit+0x200>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d12c      	bne.n	8005b46 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005aec:	2300      	movs	r3, #0
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	4b4a      	ldr	r3, [pc, #296]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af4:	4a49      	ldr	r2, [pc, #292]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005afa:	6413      	str	r3, [r2, #64]	; 0x40
 8005afc:	4b47      	ldr	r3, [pc, #284]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	4b43      	ldr	r3, [pc, #268]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	4a42      	ldr	r2, [pc, #264]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	6313      	str	r3, [r2, #48]	; 0x30
 8005b18:	4b40      	ldr	r3, [pc, #256]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005b24:	230c      	movs	r3, #12
 8005b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b28:	2302      	movs	r3, #2
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b30:	2303      	movs	r3, #3
 8005b32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005b34:	2307      	movs	r3, #7
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4838      	ldr	r0, [pc, #224]	; (8005c20 <HAL_UART_MspInit+0x1f8>)
 8005b40:	f000 fe04 	bl	800674c <HAL_GPIO_Init>
}
 8005b44:	e063      	b.n	8005c0e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART3)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a38      	ldr	r2, [pc, #224]	; (8005c2c <HAL_UART_MspInit+0x204>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d12d      	bne.n	8005bac <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005b50:	2300      	movs	r3, #0
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	4b31      	ldr	r3, [pc, #196]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	4a30      	ldr	r2, [pc, #192]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8005b60:	4b2e      	ldr	r3, [pc, #184]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	4b2a      	ldr	r3, [pc, #168]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	4a29      	ldr	r2, [pc, #164]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005b76:	f043 0304 	orr.w	r3, r3, #4
 8005b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b7c:	4b27      	ldr	r3, [pc, #156]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005b88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b8e:	2302      	movs	r3, #2
 8005b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b96:	2303      	movs	r3, #3
 8005b98:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005b9a:	2307      	movs	r3, #7
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	4822      	ldr	r0, [pc, #136]	; (8005c30 <HAL_UART_MspInit+0x208>)
 8005ba6:	f000 fdd1 	bl	800674c <HAL_GPIO_Init>
}
 8005baa:	e030      	b.n	8005c0e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART6)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a20      	ldr	r2, [pc, #128]	; (8005c34 <HAL_UART_MspInit+0x20c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d12b      	bne.n	8005c0e <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	4a17      	ldr	r2, [pc, #92]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005bc0:	f043 0320 	orr.w	r3, r3, #32
 8005bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8005bc6:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	4a10      	ldr	r2, [pc, #64]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005bdc:	f043 0304 	orr.w	r3, r3, #4
 8005be0:	6313      	str	r3, [r2, #48]	; 0x30
 8005be2:	4b0e      	ldr	r3, [pc, #56]	; (8005c1c <HAL_UART_MspInit+0x1f4>)
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	60bb      	str	r3, [r7, #8]
 8005bec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005bee:	23c0      	movs	r3, #192	; 0xc0
 8005bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005bfe:	2308      	movs	r3, #8
 8005c00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c06:	4619      	mov	r1, r3
 8005c08:	4809      	ldr	r0, [pc, #36]	; (8005c30 <HAL_UART_MspInit+0x208>)
 8005c0a:	f000 fd9f 	bl	800674c <HAL_GPIO_Init>
}
 8005c0e:	bf00      	nop
 8005c10:	3740      	adds	r7, #64	; 0x40
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	40011000 	.word	0x40011000
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40020000 	.word	0x40020000
 8005c24:	40020400 	.word	0x40020400
 8005c28:	40004400 	.word	0x40004400
 8005c2c:	40004800 	.word	0x40004800
 8005c30:	40020800 	.word	0x40020800
 8005c34:	40011400 	.word	0x40011400

08005c38 <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8005c3c:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <SDTimer_Handler+0x40>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <SDTimer_Handler+0x1c>
    Timer1--;
 8005c46:	4b0c      	ldr	r3, [pc, #48]	; (8005c78 <SDTimer_Handler+0x40>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <SDTimer_Handler+0x40>)
 8005c52:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8005c54:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <SDTimer_Handler+0x44>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d006      	beq.n	8005c6c <SDTimer_Handler+0x34>
    Timer2--;
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <SDTimer_Handler+0x44>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <SDTimer_Handler+0x44>)
 8005c6a:	701a      	strb	r2, [r3, #0]
}
 8005c6c:	bf00      	nop
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	20002a3c 	.word	0x20002a3c
 8005c7c:	20002a3e 	.word	0x20002a3e

08005c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c84:	e7fe      	b.n	8005c84 <NMI_Handler+0x4>

08005c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c86:	b480      	push	{r7}
 8005c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c8a:	e7fe      	b.n	8005c8a <HardFault_Handler+0x4>

08005c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c90:	e7fe      	b.n	8005c90 <MemManage_Handler+0x4>

08005c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c92:	b480      	push	{r7}
 8005c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c96:	e7fe      	b.n	8005c96 <BusFault_Handler+0x4>

08005c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c9c:	e7fe      	b.n	8005c9c <UsageFault_Handler+0x4>

08005c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ca2:	bf00      	nop
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cb0:	bf00      	nop
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cbe:	bf00      	nop
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <SysTick_Handler+0x30>)
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <SysTick_Handler+0x30>)
 8005cd8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8005cda:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <SysTick_Handler+0x30>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b09      	cmp	r3, #9
 8005ce2:	d904      	bls.n	8005cee <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8005ce4:	4b04      	ldr	r3, [pc, #16]	; (8005cf8 <SysTick_Handler+0x30>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8005cea:	f7ff ffa5 	bl	8005c38 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005cee:	f000 f975 	bl	8005fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005cf2:	bf00      	nop
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20002dbc 	.word	0x20002dbc

08005cfc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005d00:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005d04:	f000 fed8 	bl	8006ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005d08:	bf00      	nop
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005d10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005d14:	f000 fed0 	bl	8006ab8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005d18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005d1c:	f000 fecc 	bl	8006ab8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005d20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005d24:	f000 fec8 	bl	8006ab8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005d28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005d2c:	f000 fec4 	bl	8006ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005d30:	bf00      	nop
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
  return 1;
 8005d38:	2301      	movs	r3, #1
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <_kill>:

int _kill(int pid, int sig)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005d4e:	f009 ff2f 	bl	800fbb0 <__errno>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2216      	movs	r2, #22
 8005d56:	601a      	str	r2, [r3, #0]
  return -1;
 8005d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <_exit>:

void _exit (int status)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7ff ffe7 	bl	8005d44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005d76:	e7fe      	b.n	8005d76 <_exit+0x12>

08005d78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	e00a      	b.n	8005da0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005d8a:	f3af 8000 	nop.w
 8005d8e:	4601      	mov	r1, r0
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	60ba      	str	r2, [r7, #8]
 8005d96:	b2ca      	uxtb	r2, r1
 8005d98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	dbf0      	blt.n	8005d8a <_read+0x12>
  }

  return len;
 8005da8:	687b      	ldr	r3, [r7, #4]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b086      	sub	sp, #24
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	e009      	b.n	8005dd8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	60ba      	str	r2, [r7, #8]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	dbf1      	blt.n	8005dc4 <_write+0x12>
  }
  return len;
 8005de0:	687b      	ldr	r3, [r7, #4]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <_close>:

int _close(int file)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e12:	605a      	str	r2, [r3, #4]
  return 0;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <_isatty>:

int _isatty(int file)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005e2a:	2301      	movs	r3, #1
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e5c:	4a14      	ldr	r2, [pc, #80]	; (8005eb0 <_sbrk+0x5c>)
 8005e5e:	4b15      	ldr	r3, [pc, #84]	; (8005eb4 <_sbrk+0x60>)
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e68:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <_sbrk+0x64>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d102      	bne.n	8005e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e70:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <_sbrk+0x64>)
 8005e72:	4a12      	ldr	r2, [pc, #72]	; (8005ebc <_sbrk+0x68>)
 8005e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e76:	4b10      	ldr	r3, [pc, #64]	; (8005eb8 <_sbrk+0x64>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d207      	bcs.n	8005e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e84:	f009 fe94 	bl	800fbb0 <__errno>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	220c      	movs	r2, #12
 8005e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e92:	e009      	b.n	8005ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e94:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <_sbrk+0x64>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e9a:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <_sbrk+0x64>)
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	4a05      	ldr	r2, [pc, #20]	; (8005eb8 <_sbrk+0x64>)
 8005ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20020000 	.word	0x20020000
 8005eb4:	00000400 	.word	0x00000400
 8005eb8:	20002dc0 	.word	0x20002dc0
 8005ebc:	20003150 	.word	0x20003150

08005ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <SystemInit+0x20>)
 8005ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eca:	4a05      	ldr	r2, [pc, #20]	; (8005ee0 <SystemInit+0x20>)
 8005ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ed4:	bf00      	nop
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	e000ed00 	.word	0xe000ed00

08005ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ee8:	480d      	ldr	r0, [pc, #52]	; (8005f20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005eea:	490e      	ldr	r1, [pc, #56]	; (8005f24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005eec:	4a0e      	ldr	r2, [pc, #56]	; (8005f28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ef0:	e002      	b.n	8005ef8 <LoopCopyDataInit>

08005ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ef6:	3304      	adds	r3, #4

08005ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005efc:	d3f9      	bcc.n	8005ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005efe:	4a0b      	ldr	r2, [pc, #44]	; (8005f2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005f00:	4c0b      	ldr	r4, [pc, #44]	; (8005f30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f04:	e001      	b.n	8005f0a <LoopFillZerobss>

08005f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f08:	3204      	adds	r2, #4

08005f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f0c:	d3fb      	bcc.n	8005f06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005f0e:	f7ff ffd7 	bl	8005ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f12:	f009 fe53 	bl	800fbbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f16:	f7fe fe05 	bl	8004b24 <main>
  bx  lr    
 8005f1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005f1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f24:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005f28:	08015688 	.word	0x08015688
  ldr r2, =_sbss
 8005f2c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005f30:	20003150 	.word	0x20003150

08005f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f34:	e7fe      	b.n	8005f34 <ADC_IRQHandler>
	...

08005f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <HAL_Init+0x40>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a0d      	ldr	r2, [pc, #52]	; (8005f78 <HAL_Init+0x40>)
 8005f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f48:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <HAL_Init+0x40>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	; (8005f78 <HAL_Init+0x40>)
 8005f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f54:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <HAL_Init+0x40>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a07      	ldr	r2, [pc, #28]	; (8005f78 <HAL_Init+0x40>)
 8005f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f60:	2003      	movs	r0, #3
 8005f62:	f000 fbb1 	bl	80066c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f66:	200f      	movs	r0, #15
 8005f68:	f000 f808 	bl	8005f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f6c:	f7ff faee 	bl	800554c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40023c00 	.word	0x40023c00

08005f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f84:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <HAL_InitTick+0x54>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <HAL_InitTick+0x58>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fbc9 	bl	8006732 <HAL_SYSTICK_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e00e      	b.n	8005fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b0f      	cmp	r3, #15
 8005fae:	d80a      	bhi.n	8005fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fb8:	f000 fb91 	bl	80066de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005fbc:	4a06      	ldr	r2, [pc, #24]	; (8005fd8 <HAL_InitTick+0x5c>)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e000      	b.n	8005fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	20000008 	.word	0x20000008
 8005fd4:	20000010 	.word	0x20000010
 8005fd8:	2000000c 	.word	0x2000000c

08005fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fe0:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <HAL_IncTick+0x20>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <HAL_IncTick+0x24>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4413      	add	r3, r2
 8005fec:	4a04      	ldr	r2, [pc, #16]	; (8006000 <HAL_IncTick+0x24>)
 8005fee:	6013      	str	r3, [r2, #0]
}
 8005ff0:	bf00      	nop
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	20000010 	.word	0x20000010
 8006000:	20002dc4 	.word	0x20002dc4

08006004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return uwTick;
 8006008:	4b03      	ldr	r3, [pc, #12]	; (8006018 <HAL_GetTick+0x14>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	4618      	mov	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20002dc4 	.word	0x20002dc4

0800601c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006024:	f7ff ffee 	bl	8006004 <HAL_GetTick>
 8006028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006034:	d005      	beq.n	8006042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006036:	4b0a      	ldr	r3, [pc, #40]	; (8006060 <HAL_Delay+0x44>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006042:	bf00      	nop
 8006044:	f7ff ffde 	bl	8006004 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	429a      	cmp	r2, r3
 8006052:	d8f7      	bhi.n	8006044 <HAL_Delay+0x28>
  {
  }
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000010 	.word	0x20000010

08006064 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e033      	b.n	80060e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fa8a 	bl	800559c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f003 0310 	and.w	r3, r3, #16
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d118      	bne.n	80060d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80060aa:	f023 0302 	bic.w	r3, r3, #2
 80060ae:	f043 0202 	orr.w	r2, r3, #2
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f93a 	bl	8006330 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	f023 0303 	bic.w	r3, r3, #3
 80060ca:	f043 0201 	orr.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
 80060d2:	e001      	b.n	80060d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x1c>
 8006104:	2302      	movs	r3, #2
 8006106:	e105      	b.n	8006314 <HAL_ADC_ConfigChannel+0x228>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b09      	cmp	r3, #9
 8006116:	d925      	bls.n	8006164 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68d9      	ldr	r1, [r3, #12]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	4613      	mov	r3, r2
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	4413      	add	r3, r2
 800612c:	3b1e      	subs	r3, #30
 800612e:	2207      	movs	r2, #7
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	43da      	mvns	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	400a      	ands	r2, r1
 800613c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68d9      	ldr	r1, [r3, #12]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	4618      	mov	r0, r3
 8006150:	4603      	mov	r3, r0
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	4403      	add	r3, r0
 8006156:	3b1e      	subs	r3, #30
 8006158:	409a      	lsls	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	60da      	str	r2, [r3, #12]
 8006162:	e022      	b.n	80061aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6919      	ldr	r1, [r3, #16]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	4613      	mov	r3, r2
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	4413      	add	r3, r2
 8006178:	2207      	movs	r2, #7
 800617a:	fa02 f303 	lsl.w	r3, r2, r3
 800617e:	43da      	mvns	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	400a      	ands	r2, r1
 8006186:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6919      	ldr	r1, [r3, #16]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	4618      	mov	r0, r3
 800619a:	4603      	mov	r3, r0
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	4403      	add	r3, r0
 80061a0:	409a      	lsls	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b06      	cmp	r3, #6
 80061b0:	d824      	bhi.n	80061fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	3b05      	subs	r3, #5
 80061c4:	221f      	movs	r2, #31
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	43da      	mvns	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	400a      	ands	r2, r1
 80061d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	4618      	mov	r0, r3
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	3b05      	subs	r3, #5
 80061ee:	fa00 f203 	lsl.w	r2, r0, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	635a      	str	r2, [r3, #52]	; 0x34
 80061fa:	e04c      	b.n	8006296 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b0c      	cmp	r3, #12
 8006202:	d824      	bhi.n	800624e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	3b23      	subs	r3, #35	; 0x23
 8006216:	221f      	movs	r2, #31
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	43da      	mvns	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	400a      	ands	r2, r1
 8006224:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	4618      	mov	r0, r3
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	3b23      	subs	r3, #35	; 0x23
 8006240:	fa00 f203 	lsl.w	r2, r0, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
 800624c:	e023      	b.n	8006296 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	3b41      	subs	r3, #65	; 0x41
 8006260:	221f      	movs	r2, #31
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	43da      	mvns	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	400a      	ands	r2, r1
 800626e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	4618      	mov	r0, r3
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	3b41      	subs	r3, #65	; 0x41
 800628a:	fa00 f203 	lsl.w	r2, r0, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006296:	4b22      	ldr	r3, [pc, #136]	; (8006320 <HAL_ADC_ConfigChannel+0x234>)
 8006298:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a21      	ldr	r2, [pc, #132]	; (8006324 <HAL_ADC_ConfigChannel+0x238>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d109      	bne.n	80062b8 <HAL_ADC_ConfigChannel+0x1cc>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b12      	cmp	r3, #18
 80062aa:	d105      	bne.n	80062b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a19      	ldr	r2, [pc, #100]	; (8006324 <HAL_ADC_ConfigChannel+0x238>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d123      	bne.n	800630a <HAL_ADC_ConfigChannel+0x21e>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b10      	cmp	r3, #16
 80062c8:	d003      	beq.n	80062d2 <HAL_ADC_ConfigChannel+0x1e6>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b11      	cmp	r3, #17
 80062d0:	d11b      	bne.n	800630a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b10      	cmp	r3, #16
 80062e4:	d111      	bne.n	800630a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80062e6:	4b10      	ldr	r3, [pc, #64]	; (8006328 <HAL_ADC_ConfigChannel+0x23c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a10      	ldr	r2, [pc, #64]	; (800632c <HAL_ADC_ConfigChannel+0x240>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	0c9a      	lsrs	r2, r3, #18
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80062fc:	e002      	b.n	8006304 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	3b01      	subs	r3, #1
 8006302:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1f9      	bne.n	80062fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	40012300 	.word	0x40012300
 8006324:	40012000 	.word	0x40012000
 8006328:	20000008 	.word	0x20000008
 800632c:	431bde83 	.word	0x431bde83

08006330 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006338:	4b79      	ldr	r3, [pc, #484]	; (8006520 <ADC_Init+0x1f0>)
 800633a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	431a      	orrs	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6859      	ldr	r1, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	021a      	lsls	r2, r3, #8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6859      	ldr	r1, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6899      	ldr	r1, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	4a58      	ldr	r2, [pc, #352]	; (8006524 <ADC_Init+0x1f4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d022      	beq.n	800640e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6899      	ldr	r1, [r3, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6899      	ldr	r1, [r3, #8]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	609a      	str	r2, [r3, #8]
 800640c:	e00f      	b.n	800642e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800641c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800642c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0202 	bic.w	r2, r2, #2
 800643c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6899      	ldr	r1, [r3, #8]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	7e1b      	ldrb	r3, [r3, #24]
 8006448:	005a      	lsls	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d01b      	beq.n	8006494 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800646a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800647a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6859      	ldr	r1, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	3b01      	subs	r3, #1
 8006488:	035a      	lsls	r2, r3, #13
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
 8006492:	e007      	b.n	80064a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80064b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	3b01      	subs	r3, #1
 80064c0:	051a      	lsls	r2, r3, #20
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6899      	ldr	r1, [r3, #8]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064e6:	025a      	lsls	r2, r3, #9
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6899      	ldr	r1, [r3, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	029a      	lsls	r2, r3, #10
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	609a      	str	r2, [r3, #8]
}
 8006514:	bf00      	nop
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	40012300 	.word	0x40012300
 8006524:	0f000001 	.word	0x0f000001

08006528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <__NVIC_SetPriorityGrouping+0x44>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006544:	4013      	ands	r3, r2
 8006546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800655a:	4a04      	ldr	r2, [pc, #16]	; (800656c <__NVIC_SetPriorityGrouping+0x44>)
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	60d3      	str	r3, [r2, #12]
}
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	e000ed00 	.word	0xe000ed00

08006570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006574:	4b04      	ldr	r3, [pc, #16]	; (8006588 <__NVIC_GetPriorityGrouping+0x18>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	0a1b      	lsrs	r3, r3, #8
 800657a:	f003 0307 	and.w	r3, r3, #7
}
 800657e:	4618      	mov	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	e000ed00 	.word	0xe000ed00

0800658c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800659a:	2b00      	cmp	r3, #0
 800659c:	db0b      	blt.n	80065b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	f003 021f 	and.w	r2, r3, #31
 80065a4:	4907      	ldr	r1, [pc, #28]	; (80065c4 <__NVIC_EnableIRQ+0x38>)
 80065a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	2001      	movs	r0, #1
 80065ae:	fa00 f202 	lsl.w	r2, r0, r2
 80065b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	e000e100 	.word	0xe000e100

080065c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	6039      	str	r1, [r7, #0]
 80065d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	db0a      	blt.n	80065f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	490c      	ldr	r1, [pc, #48]	; (8006614 <__NVIC_SetPriority+0x4c>)
 80065e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e6:	0112      	lsls	r2, r2, #4
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	440b      	add	r3, r1
 80065ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065f0:	e00a      	b.n	8006608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	4908      	ldr	r1, [pc, #32]	; (8006618 <__NVIC_SetPriority+0x50>)
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	3b04      	subs	r3, #4
 8006600:	0112      	lsls	r2, r2, #4
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	440b      	add	r3, r1
 8006606:	761a      	strb	r2, [r3, #24]
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	e000e100 	.word	0xe000e100
 8006618:	e000ed00 	.word	0xe000ed00

0800661c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800661c:	b480      	push	{r7}
 800661e:	b089      	sub	sp, #36	; 0x24
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f1c3 0307 	rsb	r3, r3, #7
 8006636:	2b04      	cmp	r3, #4
 8006638:	bf28      	it	cs
 800663a:	2304      	movcs	r3, #4
 800663c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	3304      	adds	r3, #4
 8006642:	2b06      	cmp	r3, #6
 8006644:	d902      	bls.n	800664c <NVIC_EncodePriority+0x30>
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	3b03      	subs	r3, #3
 800664a:	e000      	b.n	800664e <NVIC_EncodePriority+0x32>
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	fa02 f303 	lsl.w	r3, r2, r3
 800665a:	43da      	mvns	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	401a      	ands	r2, r3
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	fa01 f303 	lsl.w	r3, r1, r3
 800666e:	43d9      	mvns	r1, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006674:	4313      	orrs	r3, r2
         );
}
 8006676:	4618      	mov	r0, r3
 8006678:	3724      	adds	r7, #36	; 0x24
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3b01      	subs	r3, #1
 8006690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006694:	d301      	bcc.n	800669a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006696:	2301      	movs	r3, #1
 8006698:	e00f      	b.n	80066ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800669a:	4a0a      	ldr	r2, [pc, #40]	; (80066c4 <SysTick_Config+0x40>)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3b01      	subs	r3, #1
 80066a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066a2:	210f      	movs	r1, #15
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066a8:	f7ff ff8e 	bl	80065c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <SysTick_Config+0x40>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066b2:	4b04      	ldr	r3, [pc, #16]	; (80066c4 <SysTick_Config+0x40>)
 80066b4:	2207      	movs	r2, #7
 80066b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	e000e010 	.word	0xe000e010

080066c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff ff29 	bl	8006528 <__NVIC_SetPriorityGrouping>
}
 80066d6:	bf00      	nop
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	4603      	mov	r3, r0
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80066f0:	f7ff ff3e 	bl	8006570 <__NVIC_GetPriorityGrouping>
 80066f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	6978      	ldr	r0, [r7, #20]
 80066fc:	f7ff ff8e 	bl	800661c <NVIC_EncodePriority>
 8006700:	4602      	mov	r2, r0
 8006702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006706:	4611      	mov	r1, r2
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff ff5d 	bl	80065c8 <__NVIC_SetPriority>
}
 800670e:	bf00      	nop
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	4603      	mov	r3, r0
 800671e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff ff31 	bl	800658c <__NVIC_EnableIRQ>
}
 800672a:	bf00      	nop
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff ffa2 	bl	8006684 <SysTick_Config>
 8006740:	4603      	mov	r3, r0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800674c:	b480      	push	{r7}
 800674e:	b089      	sub	sp, #36	; 0x24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800675a:	2300      	movs	r3, #0
 800675c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800675e:	2300      	movs	r3, #0
 8006760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006762:	2300      	movs	r3, #0
 8006764:	61fb      	str	r3, [r7, #28]
 8006766:	e16b      	b.n	8006a40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006768:	2201      	movs	r2, #1
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4013      	ands	r3, r2
 800677a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	429a      	cmp	r2, r3
 8006782:	f040 815a 	bne.w	8006a3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	2b01      	cmp	r3, #1
 8006790:	d005      	beq.n	800679e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800679a:	2b02      	cmp	r3, #2
 800679c:	d130      	bne.n	8006800 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	2203      	movs	r2, #3
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	fa02 f303 	lsl.w	r3, r2, r3
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80067d4:	2201      	movs	r2, #1
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	43db      	mvns	r3, r3
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4013      	ands	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	091b      	lsrs	r3, r3, #4
 80067ea:	f003 0201 	and.w	r2, r3, #1
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	fa02 f303 	lsl.w	r3, r2, r3
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f003 0303 	and.w	r3, r3, #3
 8006808:	2b03      	cmp	r3, #3
 800680a:	d017      	beq.n	800683c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	2203      	movs	r2, #3
 8006818:	fa02 f303 	lsl.w	r3, r2, r3
 800681c:	43db      	mvns	r3, r3
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	4013      	ands	r3, r2
 8006822:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	4313      	orrs	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f003 0303 	and.w	r3, r3, #3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d123      	bne.n	8006890 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	08da      	lsrs	r2, r3, #3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3208      	adds	r2, #8
 8006850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006854:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	220f      	movs	r2, #15
 8006860:	fa02 f303 	lsl.w	r3, r2, r3
 8006864:	43db      	mvns	r3, r3
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	4013      	ands	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	fa02 f303 	lsl.w	r3, r2, r3
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	4313      	orrs	r3, r2
 8006880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	08da      	lsrs	r2, r3, #3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3208      	adds	r2, #8
 800688a:	69b9      	ldr	r1, [r7, #24]
 800688c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	2203      	movs	r2, #3
 800689c:	fa02 f303 	lsl.w	r3, r2, r3
 80068a0:	43db      	mvns	r3, r3
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	4013      	ands	r3, r2
 80068a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f003 0203 	and.w	r2, r3, #3
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	fa02 f303 	lsl.w	r3, r2, r3
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80b4 	beq.w	8006a3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	4b60      	ldr	r3, [pc, #384]	; (8006a58 <HAL_GPIO_Init+0x30c>)
 80068d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068da:	4a5f      	ldr	r2, [pc, #380]	; (8006a58 <HAL_GPIO_Init+0x30c>)
 80068dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068e0:	6453      	str	r3, [r2, #68]	; 0x44
 80068e2:	4b5d      	ldr	r3, [pc, #372]	; (8006a58 <HAL_GPIO_Init+0x30c>)
 80068e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068ee:	4a5b      	ldr	r2, [pc, #364]	; (8006a5c <HAL_GPIO_Init+0x310>)
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	089b      	lsrs	r3, r3, #2
 80068f4:	3302      	adds	r3, #2
 80068f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	220f      	movs	r2, #15
 8006906:	fa02 f303 	lsl.w	r3, r2, r3
 800690a:	43db      	mvns	r3, r3
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	4013      	ands	r3, r2
 8006910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a52      	ldr	r2, [pc, #328]	; (8006a60 <HAL_GPIO_Init+0x314>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d02b      	beq.n	8006972 <HAL_GPIO_Init+0x226>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a51      	ldr	r2, [pc, #324]	; (8006a64 <HAL_GPIO_Init+0x318>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d025      	beq.n	800696e <HAL_GPIO_Init+0x222>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a50      	ldr	r2, [pc, #320]	; (8006a68 <HAL_GPIO_Init+0x31c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d01f      	beq.n	800696a <HAL_GPIO_Init+0x21e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a4f      	ldr	r2, [pc, #316]	; (8006a6c <HAL_GPIO_Init+0x320>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d019      	beq.n	8006966 <HAL_GPIO_Init+0x21a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a4e      	ldr	r2, [pc, #312]	; (8006a70 <HAL_GPIO_Init+0x324>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d013      	beq.n	8006962 <HAL_GPIO_Init+0x216>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a4d      	ldr	r2, [pc, #308]	; (8006a74 <HAL_GPIO_Init+0x328>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00d      	beq.n	800695e <HAL_GPIO_Init+0x212>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a4c      	ldr	r2, [pc, #304]	; (8006a78 <HAL_GPIO_Init+0x32c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d007      	beq.n	800695a <HAL_GPIO_Init+0x20e>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a4b      	ldr	r2, [pc, #300]	; (8006a7c <HAL_GPIO_Init+0x330>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d101      	bne.n	8006956 <HAL_GPIO_Init+0x20a>
 8006952:	2307      	movs	r3, #7
 8006954:	e00e      	b.n	8006974 <HAL_GPIO_Init+0x228>
 8006956:	2308      	movs	r3, #8
 8006958:	e00c      	b.n	8006974 <HAL_GPIO_Init+0x228>
 800695a:	2306      	movs	r3, #6
 800695c:	e00a      	b.n	8006974 <HAL_GPIO_Init+0x228>
 800695e:	2305      	movs	r3, #5
 8006960:	e008      	b.n	8006974 <HAL_GPIO_Init+0x228>
 8006962:	2304      	movs	r3, #4
 8006964:	e006      	b.n	8006974 <HAL_GPIO_Init+0x228>
 8006966:	2303      	movs	r3, #3
 8006968:	e004      	b.n	8006974 <HAL_GPIO_Init+0x228>
 800696a:	2302      	movs	r3, #2
 800696c:	e002      	b.n	8006974 <HAL_GPIO_Init+0x228>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <HAL_GPIO_Init+0x228>
 8006972:	2300      	movs	r3, #0
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	f002 0203 	and.w	r2, r2, #3
 800697a:	0092      	lsls	r2, r2, #2
 800697c:	4093      	lsls	r3, r2
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	4313      	orrs	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006984:	4935      	ldr	r1, [pc, #212]	; (8006a5c <HAL_GPIO_Init+0x310>)
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	089b      	lsrs	r3, r3, #2
 800698a:	3302      	adds	r3, #2
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006992:	4b3b      	ldr	r3, [pc, #236]	; (8006a80 <HAL_GPIO_Init+0x334>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	43db      	mvns	r3, r3
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	4013      	ands	r3, r2
 80069a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80069b6:	4a32      	ldr	r2, [pc, #200]	; (8006a80 <HAL_GPIO_Init+0x334>)
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80069bc:	4b30      	ldr	r3, [pc, #192]	; (8006a80 <HAL_GPIO_Init+0x334>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	43db      	mvns	r3, r3
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	4013      	ands	r3, r2
 80069ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80069e0:	4a27      	ldr	r2, [pc, #156]	; (8006a80 <HAL_GPIO_Init+0x334>)
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80069e6:	4b26      	ldr	r3, [pc, #152]	; (8006a80 <HAL_GPIO_Init+0x334>)
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	43db      	mvns	r3, r3
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	4013      	ands	r3, r2
 80069f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a0a:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <HAL_GPIO_Init+0x334>)
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a10:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <HAL_GPIO_Init+0x334>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a34:	4a12      	ldr	r2, [pc, #72]	; (8006a80 <HAL_GPIO_Init+0x334>)
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	61fb      	str	r3, [r7, #28]
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	2b0f      	cmp	r3, #15
 8006a44:	f67f ae90 	bls.w	8006768 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	3724      	adds	r7, #36	; 0x24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	40013800 	.word	0x40013800
 8006a60:	40020000 	.word	0x40020000
 8006a64:	40020400 	.word	0x40020400
 8006a68:	40020800 	.word	0x40020800
 8006a6c:	40020c00 	.word	0x40020c00
 8006a70:	40021000 	.word	0x40021000
 8006a74:	40021400 	.word	0x40021400
 8006a78:	40021800 	.word	0x40021800
 8006a7c:	40021c00 	.word	0x40021c00
 8006a80:	40013c00 	.word	0x40013c00

08006a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	807b      	strh	r3, [r7, #2]
 8006a90:	4613      	mov	r3, r2
 8006a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a94:	787b      	ldrb	r3, [r7, #1]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a9a:	887a      	ldrh	r2, [r7, #2]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006aa0:	e003      	b.n	8006aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006aa2:	887b      	ldrh	r3, [r7, #2]
 8006aa4:	041a      	lsls	r2, r3, #16
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	619a      	str	r2, [r3, #24]
}
 8006aaa:	bf00      	nop
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
	...

08006ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006ac2:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ac4:	695a      	ldr	r2, [r3, #20]
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d006      	beq.n	8006adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ace:	4a05      	ldr	r2, [pc, #20]	; (8006ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ad4:	88fb      	ldrh	r3, [r7, #6]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 f806 	bl	8006ae8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40013c00 	.word	0x40013c00

08006ae8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	4603      	mov	r3, r0
 8006af0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
	...

08006b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e12b      	b.n	8006d6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fe fd7c 	bl	8005624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2224      	movs	r2, #36	; 0x24
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b64:	f002 f830 	bl	8008bc8 <HAL_RCC_GetPCLK1Freq>
 8006b68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	4a81      	ldr	r2, [pc, #516]	; (8006d74 <HAL_I2C_Init+0x274>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d807      	bhi.n	8006b84 <HAL_I2C_Init+0x84>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4a80      	ldr	r2, [pc, #512]	; (8006d78 <HAL_I2C_Init+0x278>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	bf94      	ite	ls
 8006b7c:	2301      	movls	r3, #1
 8006b7e:	2300      	movhi	r3, #0
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	e006      	b.n	8006b92 <HAL_I2C_Init+0x92>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4a7d      	ldr	r2, [pc, #500]	; (8006d7c <HAL_I2C_Init+0x27c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	bf94      	ite	ls
 8006b8c:	2301      	movls	r3, #1
 8006b8e:	2300      	movhi	r3, #0
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e0e7      	b.n	8006d6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4a78      	ldr	r2, [pc, #480]	; (8006d80 <HAL_I2C_Init+0x280>)
 8006b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba2:	0c9b      	lsrs	r3, r3, #18
 8006ba4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	4a6a      	ldr	r2, [pc, #424]	; (8006d74 <HAL_I2C_Init+0x274>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d802      	bhi.n	8006bd4 <HAL_I2C_Init+0xd4>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	e009      	b.n	8006be8 <HAL_I2C_Init+0xe8>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
 8006bde:	4a69      	ldr	r2, [pc, #420]	; (8006d84 <HAL_I2C_Init+0x284>)
 8006be0:	fba2 2303 	umull	r2, r3, r2, r3
 8006be4:	099b      	lsrs	r3, r3, #6
 8006be6:	3301      	adds	r3, #1
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	430b      	orrs	r3, r1
 8006bee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006bfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	495c      	ldr	r1, [pc, #368]	; (8006d74 <HAL_I2C_Init+0x274>)
 8006c04:	428b      	cmp	r3, r1
 8006c06:	d819      	bhi.n	8006c3c <HAL_I2C_Init+0x13c>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	1e59      	subs	r1, r3, #1
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c16:	1c59      	adds	r1, r3, #1
 8006c18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c1c:	400b      	ands	r3, r1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <HAL_I2C_Init+0x138>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1e59      	subs	r1, r3, #1
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c30:	3301      	adds	r3, #1
 8006c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c36:	e051      	b.n	8006cdc <HAL_I2C_Init+0x1dc>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	e04f      	b.n	8006cdc <HAL_I2C_Init+0x1dc>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d111      	bne.n	8006c68 <HAL_I2C_Init+0x168>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	1e58      	subs	r0, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6859      	ldr	r1, [r3, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	440b      	add	r3, r1
 8006c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c56:	3301      	adds	r3, #1
 8006c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	bf0c      	ite	eq
 8006c60:	2301      	moveq	r3, #1
 8006c62:	2300      	movne	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	e012      	b.n	8006c8e <HAL_I2C_Init+0x18e>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	1e58      	subs	r0, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6859      	ldr	r1, [r3, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	0099      	lsls	r1, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c7e:	3301      	adds	r3, #1
 8006c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bf0c      	ite	eq
 8006c88:	2301      	moveq	r3, #1
 8006c8a:	2300      	movne	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_I2C_Init+0x196>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e022      	b.n	8006cdc <HAL_I2C_Init+0x1dc>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10e      	bne.n	8006cbc <HAL_I2C_Init+0x1bc>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	1e58      	subs	r0, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6859      	ldr	r1, [r3, #4]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	440b      	add	r3, r1
 8006cac:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cba:	e00f      	b.n	8006cdc <HAL_I2C_Init+0x1dc>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	1e58      	subs	r0, r3, #1
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6859      	ldr	r1, [r3, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	440b      	add	r3, r1
 8006cca:	0099      	lsls	r1, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cdc:	6879      	ldr	r1, [r7, #4]
 8006cde:	6809      	ldr	r1, [r1, #0]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	69da      	ldr	r2, [r3, #28]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006d0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6911      	ldr	r1, [r2, #16]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	68d2      	ldr	r2, [r2, #12]
 8006d16:	4311      	orrs	r1, r2
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6812      	ldr	r2, [r2, #0]
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695a      	ldr	r2, [r3, #20]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	000186a0 	.word	0x000186a0
 8006d78:	001e847f 	.word	0x001e847f
 8006d7c:	003d08ff 	.word	0x003d08ff
 8006d80:	431bde83 	.word	0x431bde83
 8006d84:	10624dd3 	.word	0x10624dd3

08006d88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	607a      	str	r2, [r7, #4]
 8006d92:	461a      	mov	r2, r3
 8006d94:	460b      	mov	r3, r1
 8006d96:	817b      	strh	r3, [r7, #10]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d9c:	f7ff f932 	bl	8006004 <HAL_GetTick>
 8006da0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	f040 80e0 	bne.w	8006f70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	2319      	movs	r3, #25
 8006db6:	2201      	movs	r2, #1
 8006db8:	4970      	ldr	r1, [pc, #448]	; (8006f7c <HAL_I2C_Master_Transmit+0x1f4>)
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f001 f8f6 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	e0d3      	b.n	8006f72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_I2C_Master_Transmit+0x50>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e0cc      	b.n	8006f72 <HAL_I2C_Master_Transmit+0x1ea>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d007      	beq.n	8006dfe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0201 	orr.w	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2221      	movs	r2, #33	; 0x21
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2210      	movs	r2, #16
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	893a      	ldrh	r2, [r7, #8]
 8006e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4a50      	ldr	r2, [pc, #320]	; (8006f80 <HAL_I2C_Master_Transmit+0x1f8>)
 8006e3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006e40:	8979      	ldrh	r1, [r7, #10]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	6a3a      	ldr	r2, [r7, #32]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 fde2 	bl	8007a10 <I2C_MasterRequestWrite>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e08d      	b.n	8006f72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e56:	2300      	movs	r3, #0
 8006e58:	613b      	str	r3, [r7, #16]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	613b      	str	r3, [r7, #16]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	613b      	str	r3, [r7, #16]
 8006e6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006e6c:	e066      	b.n	8006f3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	6a39      	ldr	r1, [r7, #32]
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f001 f970 	bl	8008158 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00d      	beq.n	8006e9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d107      	bne.n	8006e96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e06b      	b.n	8006f72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	781a      	ldrb	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d11b      	bne.n	8006f10 <HAL_I2C_Master_Transmit+0x188>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d017      	beq.n	8006f10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	781a      	ldrb	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	6a39      	ldr	r1, [r7, #32]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f001 f960 	bl	80081da <I2C_WaitOnBTFFlagUntilTimeout>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00d      	beq.n	8006f3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d107      	bne.n	8006f38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e01a      	b.n	8006f72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d194      	bne.n	8006e6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e000      	b.n	8006f72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006f70:	2302      	movs	r3, #2
  }
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	00100002 	.word	0x00100002
 8006f80:	ffff0000 	.word	0xffff0000

08006f84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08c      	sub	sp, #48	; 0x30
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	460b      	mov	r3, r1
 8006f92:	817b      	strh	r3, [r7, #10]
 8006f94:	4613      	mov	r3, r2
 8006f96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f98:	f7ff f834 	bl	8006004 <HAL_GetTick>
 8006f9c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	f040 820b 	bne.w	80073c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	2319      	movs	r3, #25
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	497c      	ldr	r1, [pc, #496]	; (80071a8 <HAL_I2C_Master_Receive+0x224>)
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 fff8 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e1fe      	b.n	80073c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_I2C_Master_Receive+0x50>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e1f7      	b.n	80073c4 <HAL_I2C_Master_Receive+0x440>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d007      	beq.n	8006ffa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f042 0201 	orr.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007008:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2222      	movs	r2, #34	; 0x22
 800700e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2210      	movs	r2, #16
 8007016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	893a      	ldrh	r2, [r7, #8]
 800702a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a5c      	ldr	r2, [pc, #368]	; (80071ac <HAL_I2C_Master_Receive+0x228>)
 800703a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800703c:	8979      	ldrh	r1, [r7, #10]
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 fd66 	bl	8007b14 <I2C_MasterRequestRead>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e1b8      	b.n	80073c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007056:	2b00      	cmp	r3, #0
 8007058:	d113      	bne.n	8007082 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800705a:	2300      	movs	r3, #0
 800705c:	623b      	str	r3, [r7, #32]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	623b      	str	r3, [r7, #32]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	623b      	str	r3, [r7, #32]
 800706e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	e18c      	b.n	800739c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007086:	2b01      	cmp	r3, #1
 8007088:	d11b      	bne.n	80070c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	61fb      	str	r3, [r7, #28]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	61fb      	str	r3, [r7, #28]
 80070ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	e16c      	b.n	800739c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d11b      	bne.n	8007102 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ea:	2300      	movs	r3, #0
 80070ec:	61bb      	str	r3, [r7, #24]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	61bb      	str	r3, [r7, #24]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	e14c      	b.n	800739c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007110:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007128:	e138      	b.n	800739c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712e:	2b03      	cmp	r3, #3
 8007130:	f200 80f1 	bhi.w	8007316 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007138:	2b01      	cmp	r3, #1
 800713a:	d123      	bne.n	8007184 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800713c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800713e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f001 f88b 	bl	800825c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e139      	b.n	80073c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	691a      	ldr	r2, [r3, #16]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716c:	3b01      	subs	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007182:	e10b      	b.n	800739c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007188:	2b02      	cmp	r3, #2
 800718a:	d14e      	bne.n	800722a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	2200      	movs	r2, #0
 8007194:	4906      	ldr	r1, [pc, #24]	; (80071b0 <HAL_I2C_Master_Receive+0x22c>)
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 ff08 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d008      	beq.n	80071b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e10e      	b.n	80073c4 <HAL_I2C_Master_Receive+0x440>
 80071a6:	bf00      	nop
 80071a8:	00100002 	.word	0x00100002
 80071ac:	ffff0000 	.word	0xffff0000
 80071b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	b2d2      	uxtb	r2, r2
 8007202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007212:	3b01      	subs	r3, #1
 8007214:	b29a      	uxth	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007228:	e0b8      	b.n	800739c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	2200      	movs	r2, #0
 8007232:	4966      	ldr	r1, [pc, #408]	; (80073cc <HAL_I2C_Master_Receive+0x448>)
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 feb9 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e0bf      	b.n	80073c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	691a      	ldr	r2, [r3, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	b2d2      	uxtb	r2, r2
 8007260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007270:	3b01      	subs	r3, #1
 8007272:	b29a      	uxth	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727c:	b29b      	uxth	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	b29a      	uxth	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	2200      	movs	r2, #0
 800728e:	494f      	ldr	r1, [pc, #316]	; (80073cc <HAL_I2C_Master_Receive+0x448>)
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 fe8b 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e091      	b.n	80073c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	691a      	ldr	r2, [r3, #16]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072cc:	3b01      	subs	r3, #1
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	691a      	ldr	r2, [r3, #16]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072fe:	3b01      	subs	r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730a:	b29b      	uxth	r3, r3
 800730c:	3b01      	subs	r3, #1
 800730e:	b29a      	uxth	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007314:	e042      	b.n	800739c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007318:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 ff9e 	bl	800825c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e04c      	b.n	80073c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	691a      	ldr	r2, [r3, #16]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007346:	3b01      	subs	r3, #1
 8007348:	b29a      	uxth	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	f003 0304 	and.w	r3, r3, #4
 8007366:	2b04      	cmp	r3, #4
 8007368:	d118      	bne.n	800739c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691a      	ldr	r2, [r3, #16]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f47f aec2 	bne.w	800712a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	e000      	b.n	80073c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80073c2:	2302      	movs	r3, #2
  }
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3728      	adds	r7, #40	; 0x28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	00010004 	.word	0x00010004

080073d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af02      	add	r7, sp, #8
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	4608      	mov	r0, r1
 80073da:	4611      	mov	r1, r2
 80073dc:	461a      	mov	r2, r3
 80073de:	4603      	mov	r3, r0
 80073e0:	817b      	strh	r3, [r7, #10]
 80073e2:	460b      	mov	r3, r1
 80073e4:	813b      	strh	r3, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073ea:	f7fe fe0b 	bl	8006004 <HAL_GetTick>
 80073ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	f040 80d9 	bne.w	80075b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	2319      	movs	r3, #25
 8007404:	2201      	movs	r2, #1
 8007406:	496d      	ldr	r1, [pc, #436]	; (80075bc <HAL_I2C_Mem_Write+0x1ec>)
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fdcf 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007414:	2302      	movs	r3, #2
 8007416:	e0cc      	b.n	80075b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_I2C_Mem_Write+0x56>
 8007422:	2302      	movs	r3, #2
 8007424:	e0c5      	b.n	80075b2 <HAL_I2C_Mem_Write+0x1e2>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b01      	cmp	r3, #1
 800743a:	d007      	beq.n	800744c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800745a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2221      	movs	r2, #33	; 0x21
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2240      	movs	r2, #64	; 0x40
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a3a      	ldr	r2, [r7, #32]
 8007476:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800747c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007482:	b29a      	uxth	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4a4d      	ldr	r2, [pc, #308]	; (80075c0 <HAL_I2C_Mem_Write+0x1f0>)
 800748c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800748e:	88f8      	ldrh	r0, [r7, #6]
 8007490:	893a      	ldrh	r2, [r7, #8]
 8007492:	8979      	ldrh	r1, [r7, #10]
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	4603      	mov	r3, r0
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fc06 	bl	8007cb0 <I2C_RequestMemoryWrite>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d052      	beq.n	8007550 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e081      	b.n	80075b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fe50 	bl	8008158 <I2C_WaitOnTXEFlagUntilTimeout>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00d      	beq.n	80074da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d107      	bne.n	80074d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e06b      	b.n	80075b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	781a      	ldrb	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b04      	cmp	r3, #4
 8007516:	d11b      	bne.n	8007550 <HAL_I2C_Mem_Write+0x180>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	d017      	beq.n	8007550 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	781a      	ldrb	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800753a:	3b01      	subs	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1aa      	bne.n	80074ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 fe3c 	bl	80081da <I2C_WaitOnBTFFlagUntilTimeout>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00d      	beq.n	8007584 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756c:	2b04      	cmp	r3, #4
 800756e:	d107      	bne.n	8007580 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800757e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e016      	b.n	80075b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2220      	movs	r2, #32
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	e000      	b.n	80075b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80075b0:	2302      	movs	r3, #2
  }
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	00100002 	.word	0x00100002
 80075c0:	ffff0000 	.word	0xffff0000

080075c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08c      	sub	sp, #48	; 0x30
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	4608      	mov	r0, r1
 80075ce:	4611      	mov	r1, r2
 80075d0:	461a      	mov	r2, r3
 80075d2:	4603      	mov	r3, r0
 80075d4:	817b      	strh	r3, [r7, #10]
 80075d6:	460b      	mov	r3, r1
 80075d8:	813b      	strh	r3, [r7, #8]
 80075da:	4613      	mov	r3, r2
 80075dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075de:	f7fe fd11 	bl	8006004 <HAL_GetTick>
 80075e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	f040 8208 	bne.w	8007a02 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	2319      	movs	r3, #25
 80075f8:	2201      	movs	r2, #1
 80075fa:	497b      	ldr	r1, [pc, #492]	; (80077e8 <HAL_I2C_Mem_Read+0x224>)
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 fcd5 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007608:	2302      	movs	r3, #2
 800760a:	e1fb      	b.n	8007a04 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007612:	2b01      	cmp	r3, #1
 8007614:	d101      	bne.n	800761a <HAL_I2C_Mem_Read+0x56>
 8007616:	2302      	movs	r3, #2
 8007618:	e1f4      	b.n	8007a04 <HAL_I2C_Mem_Read+0x440>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b01      	cmp	r3, #1
 800762e:	d007      	beq.n	8007640 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f042 0201 	orr.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800764e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2222      	movs	r2, #34	; 0x22
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2240      	movs	r2, #64	; 0x40
 800765c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800766a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007670:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007676:	b29a      	uxth	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4a5b      	ldr	r2, [pc, #364]	; (80077ec <HAL_I2C_Mem_Read+0x228>)
 8007680:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007682:	88f8      	ldrh	r0, [r7, #6]
 8007684:	893a      	ldrh	r2, [r7, #8]
 8007686:	8979      	ldrh	r1, [r7, #10]
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	4603      	mov	r3, r0
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 fba2 	bl	8007ddc <I2C_RequestMemoryRead>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e1b0      	b.n	8007a04 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d113      	bne.n	80076d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076aa:	2300      	movs	r3, #0
 80076ac:	623b      	str	r3, [r7, #32]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	623b      	str	r3, [r7, #32]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	623b      	str	r3, [r7, #32]
 80076be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	e184      	b.n	80079dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d11b      	bne.n	8007712 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ea:	2300      	movs	r3, #0
 80076ec:	61fb      	str	r3, [r7, #28]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	61fb      	str	r3, [r7, #28]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	61fb      	str	r3, [r7, #28]
 80076fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	e164      	b.n	80079dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007716:	2b02      	cmp	r3, #2
 8007718:	d11b      	bne.n	8007752 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007728:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007738:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800773a:	2300      	movs	r3, #0
 800773c:	61bb      	str	r3, [r7, #24]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	61bb      	str	r3, [r7, #24]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	61bb      	str	r3, [r7, #24]
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	e144      	b.n	80079dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007768:	e138      	b.n	80079dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800776e:	2b03      	cmp	r3, #3
 8007770:	f200 80f1 	bhi.w	8007956 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007778:	2b01      	cmp	r3, #1
 800777a:	d123      	bne.n	80077c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800777c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 fd6b 	bl	800825c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e139      	b.n	8007a04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	b2d2      	uxtb	r2, r2
 800779c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077c2:	e10b      	b.n	80079dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d14e      	bne.n	800786a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d2:	2200      	movs	r2, #0
 80077d4:	4906      	ldr	r1, [pc, #24]	; (80077f0 <HAL_I2C_Mem_Read+0x22c>)
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 fbe8 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d008      	beq.n	80077f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e10e      	b.n	8007a04 <HAL_I2C_Mem_Read+0x440>
 80077e6:	bf00      	nop
 80077e8:	00100002 	.word	0x00100002
 80077ec:	ffff0000 	.word	0xffff0000
 80077f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691a      	ldr	r2, [r3, #16]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007820:	3b01      	subs	r3, #1
 8007822:	b29a      	uxth	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007852:	3b01      	subs	r3, #1
 8007854:	b29a      	uxth	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007868:	e0b8      	b.n	80079dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007870:	2200      	movs	r2, #0
 8007872:	4966      	ldr	r1, [pc, #408]	; (8007a0c <HAL_I2C_Mem_Read+0x448>)
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 fb99 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e0bf      	b.n	8007a04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	2200      	movs	r2, #0
 80078ce:	494f      	ldr	r1, [pc, #316]	; (8007a0c <HAL_I2C_Mem_Read+0x448>)
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 fb6b 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e091      	b.n	8007a04 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691a      	ldr	r2, [r3, #16]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800790c:	3b01      	subs	r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	b2d2      	uxtb	r2, r2
 800792e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793e:	3b01      	subs	r3, #1
 8007940:	b29a      	uxth	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007954:	e042      	b.n	80079dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007958:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f000 fc7e 	bl	800825c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e04c      	b.n	8007a04 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007986:	3b01      	subs	r3, #1
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d118      	bne.n	80079dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f47f aec2 	bne.w	800776a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e000      	b.n	8007a04 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007a02:	2302      	movs	r3, #2
  }
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3728      	adds	r7, #40	; 0x28
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	00010004 	.word	0x00010004

08007a10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	607a      	str	r2, [r7, #4]
 8007a1a:	603b      	str	r3, [r7, #0]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d006      	beq.n	8007a3a <I2C_MasterRequestWrite+0x2a>
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d003      	beq.n	8007a3a <I2C_MasterRequestWrite+0x2a>
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a38:	d108      	bne.n	8007a4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	e00b      	b.n	8007a64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a50:	2b12      	cmp	r3, #18
 8007a52:	d107      	bne.n	8007a64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fa9b 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00d      	beq.n	8007a98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a8a:	d103      	bne.n	8007a94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e035      	b.n	8007b04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aa0:	d108      	bne.n	8007ab4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007aa2:	897b      	ldrh	r3, [r7, #10]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ab0:	611a      	str	r2, [r3, #16]
 8007ab2:	e01b      	b.n	8007aec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007ab4:	897b      	ldrh	r3, [r7, #10]
 8007ab6:	11db      	asrs	r3, r3, #7
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	f003 0306 	and.w	r3, r3, #6
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	f063 030f 	orn	r3, r3, #15
 8007ac4:	b2da      	uxtb	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	490e      	ldr	r1, [pc, #56]	; (8007b0c <I2C_MasterRequestWrite+0xfc>)
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 fac1 	bl	800805a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e010      	b.n	8007b04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ae2:	897b      	ldrh	r3, [r7, #10]
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	4907      	ldr	r1, [pc, #28]	; (8007b10 <I2C_MasterRequestWrite+0x100>)
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 fab1 	bl	800805a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	00010008 	.word	0x00010008
 8007b10:	00010002 	.word	0x00010002

08007b14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	460b      	mov	r3, r1
 8007b22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d006      	beq.n	8007b4e <I2C_MasterRequestRead+0x3a>
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d003      	beq.n	8007b4e <I2C_MasterRequestRead+0x3a>
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b4c:	d108      	bne.n	8007b60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	e00b      	b.n	8007b78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b64:	2b11      	cmp	r3, #17
 8007b66:	d107      	bne.n	8007b78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 fa11 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00d      	beq.n	8007bac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b9e:	d103      	bne.n	8007ba8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e079      	b.n	8007ca0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bb4:	d108      	bne.n	8007bc8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007bb6:	897b      	ldrh	r3, [r7, #10]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	f043 0301 	orr.w	r3, r3, #1
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	611a      	str	r2, [r3, #16]
 8007bc6:	e05f      	b.n	8007c88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007bc8:	897b      	ldrh	r3, [r7, #10]
 8007bca:	11db      	asrs	r3, r3, #7
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f003 0306 	and.w	r3, r3, #6
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f063 030f 	orn	r3, r3, #15
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	4930      	ldr	r1, [pc, #192]	; (8007ca8 <I2C_MasterRequestRead+0x194>)
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 fa37 	bl	800805a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e054      	b.n	8007ca0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007bf6:	897b      	ldrh	r3, [r7, #10]
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	4929      	ldr	r1, [pc, #164]	; (8007cac <I2C_MasterRequestRead+0x198>)
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 fa27 	bl	800805a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e044      	b.n	8007ca0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c16:	2300      	movs	r3, #0
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	613b      	str	r3, [r7, #16]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	613b      	str	r3, [r7, #16]
 8007c2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 f9af 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00d      	beq.n	8007c70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c62:	d103      	bne.n	8007c6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c6a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e017      	b.n	8007ca0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007c70:	897b      	ldrh	r3, [r7, #10]
 8007c72:	11db      	asrs	r3, r3, #7
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	f003 0306 	and.w	r3, r3, #6
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	f063 030e 	orn	r3, r3, #14
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	4907      	ldr	r1, [pc, #28]	; (8007cac <I2C_MasterRequestRead+0x198>)
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 f9e3 	bl	800805a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e000      	b.n	8007ca0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	00010008 	.word	0x00010008
 8007cac:	00010002 	.word	0x00010002

08007cb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	817b      	strh	r3, [r7, #10]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	813b      	strh	r3, [r7, #8]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 f960 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00d      	beq.n	8007d0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d00:	d103      	bne.n	8007d0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e05f      	b.n	8007dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d0e:	897b      	ldrh	r3, [r7, #10]
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	461a      	mov	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	6a3a      	ldr	r2, [r7, #32]
 8007d22:	492d      	ldr	r1, [pc, #180]	; (8007dd8 <I2C_RequestMemoryWrite+0x128>)
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 f998 	bl	800805a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e04c      	b.n	8007dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d34:	2300      	movs	r3, #0
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	617b      	str	r3, [r7, #20]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d4c:	6a39      	ldr	r1, [r7, #32]
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 fa02 	bl	8008158 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00d      	beq.n	8007d76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d107      	bne.n	8007d72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e02b      	b.n	8007dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d105      	bne.n	8007d88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d7c:	893b      	ldrh	r3, [r7, #8]
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	611a      	str	r2, [r3, #16]
 8007d86:	e021      	b.n	8007dcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d88:	893b      	ldrh	r3, [r7, #8]
 8007d8a:	0a1b      	lsrs	r3, r3, #8
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d98:	6a39      	ldr	r1, [r7, #32]
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 f9dc 	bl	8008158 <I2C_WaitOnTXEFlagUntilTimeout>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00d      	beq.n	8007dc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	2b04      	cmp	r3, #4
 8007dac:	d107      	bne.n	8007dbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e005      	b.n	8007dce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dc2:	893b      	ldrh	r3, [r7, #8]
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	00010002 	.word	0x00010002

08007ddc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af02      	add	r7, sp, #8
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	4608      	mov	r0, r1
 8007de6:	4611      	mov	r1, r2
 8007de8:	461a      	mov	r2, r3
 8007dea:	4603      	mov	r3, r0
 8007dec:	817b      	strh	r3, [r7, #10]
 8007dee:	460b      	mov	r3, r1
 8007df0:	813b      	strh	r3, [r7, #8]
 8007df2:	4613      	mov	r3, r2
 8007df4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 f8c2 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00d      	beq.n	8007e4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e3c:	d103      	bne.n	8007e46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e0aa      	b.n	8007fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e4a:	897b      	ldrh	r3, [r7, #10]
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	461a      	mov	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	6a3a      	ldr	r2, [r7, #32]
 8007e5e:	4952      	ldr	r1, [pc, #328]	; (8007fa8 <I2C_RequestMemoryRead+0x1cc>)
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 f8fa 	bl	800805a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e097      	b.n	8007fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e70:	2300      	movs	r3, #0
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e88:	6a39      	ldr	r1, [r7, #32]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f964 	bl	8008158 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00d      	beq.n	8007eb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d107      	bne.n	8007eae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e076      	b.n	8007fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d105      	bne.n	8007ec4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007eb8:	893b      	ldrh	r3, [r7, #8]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	611a      	str	r2, [r3, #16]
 8007ec2:	e021      	b.n	8007f08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ec4:	893b      	ldrh	r3, [r7, #8]
 8007ec6:	0a1b      	lsrs	r3, r3, #8
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed4:	6a39      	ldr	r1, [r7, #32]
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 f93e 	bl	8008158 <I2C_WaitOnTXEFlagUntilTimeout>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00d      	beq.n	8007efe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d107      	bne.n	8007efa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e050      	b.n	8007fa0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007efe:	893b      	ldrh	r3, [r7, #8]
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0a:	6a39      	ldr	r1, [r7, #32]
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f923 	bl	8008158 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00d      	beq.n	8007f34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d107      	bne.n	8007f30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e035      	b.n	8007fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f82b 	bl	8007fac <I2C_WaitOnFlagUntilTimeout>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00d      	beq.n	8007f78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6a:	d103      	bne.n	8007f74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e013      	b.n	8007fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007f78:	897b      	ldrh	r3, [r7, #10]
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	f043 0301 	orr.w	r3, r3, #1
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	6a3a      	ldr	r2, [r7, #32]
 8007f8c:	4906      	ldr	r1, [pc, #24]	; (8007fa8 <I2C_RequestMemoryRead+0x1cc>)
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 f863 	bl	800805a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e000      	b.n	8007fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	00010002 	.word	0x00010002

08007fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fbc:	e025      	b.n	800800a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fc4:	d021      	beq.n	800800a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fc6:	f7fe f81d 	bl	8006004 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	683a      	ldr	r2, [r7, #0]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d302      	bcc.n	8007fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d116      	bne.n	800800a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff6:	f043 0220 	orr.w	r2, r3, #32
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e023      	b.n	8008052 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	0c1b      	lsrs	r3, r3, #16
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b01      	cmp	r3, #1
 8008012:	d10d      	bne.n	8008030 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	43da      	mvns	r2, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	4013      	ands	r3, r2
 8008020:	b29b      	uxth	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	bf0c      	ite	eq
 8008026:	2301      	moveq	r3, #1
 8008028:	2300      	movne	r3, #0
 800802a:	b2db      	uxtb	r3, r3
 800802c:	461a      	mov	r2, r3
 800802e:	e00c      	b.n	800804a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	43da      	mvns	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4013      	ands	r3, r2
 800803c:	b29b      	uxth	r3, r3
 800803e:	2b00      	cmp	r3, #0
 8008040:	bf0c      	ite	eq
 8008042:	2301      	moveq	r3, #1
 8008044:	2300      	movne	r3, #0
 8008046:	b2db      	uxtb	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	429a      	cmp	r2, r3
 800804e:	d0b6      	beq.n	8007fbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	607a      	str	r2, [r7, #4]
 8008066:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008068:	e051      	b.n	800810e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008078:	d123      	bne.n	80080c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008088:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008092:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2220      	movs	r2, #32
 800809e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	f043 0204 	orr.w	r2, r3, #4
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e046      	b.n	8008150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080c8:	d021      	beq.n	800810e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ca:	f7fd ff9b 	bl	8006004 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d302      	bcc.n	80080e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d116      	bne.n	800810e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fa:	f043 0220 	orr.w	r2, r3, #32
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e020      	b.n	8008150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	0c1b      	lsrs	r3, r3, #16
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b01      	cmp	r3, #1
 8008116:	d10c      	bne.n	8008132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	43da      	mvns	r2, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4013      	ands	r3, r2
 8008124:	b29b      	uxth	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	bf14      	ite	ne
 800812a:	2301      	movne	r3, #1
 800812c:	2300      	moveq	r3, #0
 800812e:	b2db      	uxtb	r3, r3
 8008130:	e00b      	b.n	800814a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	43da      	mvns	r2, r3
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	4013      	ands	r3, r2
 800813e:	b29b      	uxth	r3, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	bf14      	ite	ne
 8008144:	2301      	movne	r3, #1
 8008146:	2300      	moveq	r3, #0
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d18d      	bne.n	800806a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008164:	e02d      	b.n	80081c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 f8ce 	bl	8008308 <I2C_IsAcknowledgeFailed>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e02d      	b.n	80081d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800817c:	d021      	beq.n	80081c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800817e:	f7fd ff41 	bl	8006004 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	429a      	cmp	r2, r3
 800818c:	d302      	bcc.n	8008194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d116      	bne.n	80081c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2220      	movs	r2, #32
 800819e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	f043 0220 	orr.w	r2, r3, #32
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e007      	b.n	80081d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081cc:	2b80      	cmp	r3, #128	; 0x80
 80081ce:	d1ca      	bne.n	8008166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b084      	sub	sp, #16
 80081de:	af00      	add	r7, sp, #0
 80081e0:	60f8      	str	r0, [r7, #12]
 80081e2:	60b9      	str	r1, [r7, #8]
 80081e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081e6:	e02d      	b.n	8008244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f88d 	bl	8008308 <I2C_IsAcknowledgeFailed>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e02d      	b.n	8008254 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081fe:	d021      	beq.n	8008244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008200:	f7fd ff00 	bl	8006004 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	429a      	cmp	r2, r3
 800820e:	d302      	bcc.n	8008216 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d116      	bne.n	8008244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2220      	movs	r2, #32
 8008220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	f043 0220 	orr.w	r2, r3, #32
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e007      	b.n	8008254 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	f003 0304 	and.w	r3, r3, #4
 800824e:	2b04      	cmp	r3, #4
 8008250:	d1ca      	bne.n	80081e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008268:	e042      	b.n	80082f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	f003 0310 	and.w	r3, r3, #16
 8008274:	2b10      	cmp	r3, #16
 8008276:	d119      	bne.n	80082ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f06f 0210 	mvn.w	r2, #16
 8008280:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2220      	movs	r2, #32
 800828c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e029      	b.n	8008300 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ac:	f7fd feaa 	bl	8006004 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d302      	bcc.n	80082c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d116      	bne.n	80082f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082dc:	f043 0220 	orr.w	r2, r3, #32
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e007      	b.n	8008300 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fa:	2b40      	cmp	r3, #64	; 0x40
 80082fc:	d1b5      	bne.n	800826a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800831a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800831e:	d11b      	bne.n	8008358 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008328:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2220      	movs	r2, #32
 8008334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008344:	f043 0204 	orr.w	r2, r3, #4
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e000      	b.n	800835a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
	...

08008368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e267      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d075      	beq.n	8008472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008386:	4b88      	ldr	r3, [pc, #544]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f003 030c 	and.w	r3, r3, #12
 800838e:	2b04      	cmp	r3, #4
 8008390:	d00c      	beq.n	80083ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008392:	4b85      	ldr	r3, [pc, #532]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800839a:	2b08      	cmp	r3, #8
 800839c:	d112      	bne.n	80083c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800839e:	4b82      	ldr	r3, [pc, #520]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083aa:	d10b      	bne.n	80083c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ac:	4b7e      	ldr	r3, [pc, #504]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d05b      	beq.n	8008470 <HAL_RCC_OscConfig+0x108>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d157      	bne.n	8008470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e242      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083cc:	d106      	bne.n	80083dc <HAL_RCC_OscConfig+0x74>
 80083ce:	4b76      	ldr	r3, [pc, #472]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a75      	ldr	r2, [pc, #468]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	e01d      	b.n	8008418 <HAL_RCC_OscConfig+0xb0>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083e4:	d10c      	bne.n	8008400 <HAL_RCC_OscConfig+0x98>
 80083e6:	4b70      	ldr	r3, [pc, #448]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a6f      	ldr	r2, [pc, #444]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	4b6d      	ldr	r3, [pc, #436]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a6c      	ldr	r2, [pc, #432]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 80083f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	e00b      	b.n	8008418 <HAL_RCC_OscConfig+0xb0>
 8008400:	4b69      	ldr	r3, [pc, #420]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a68      	ldr	r2, [pc, #416]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800840a:	6013      	str	r3, [r2, #0]
 800840c:	4b66      	ldr	r3, [pc, #408]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a65      	ldr	r2, [pc, #404]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d013      	beq.n	8008448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008420:	f7fd fdf0 	bl	8006004 <HAL_GetTick>
 8008424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008426:	e008      	b.n	800843a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008428:	f7fd fdec 	bl	8006004 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b64      	cmp	r3, #100	; 0x64
 8008434:	d901      	bls.n	800843a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e207      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800843a:	4b5b      	ldr	r3, [pc, #364]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0f0      	beq.n	8008428 <HAL_RCC_OscConfig+0xc0>
 8008446:	e014      	b.n	8008472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008448:	f7fd fddc 	bl	8006004 <HAL_GetTick>
 800844c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008450:	f7fd fdd8 	bl	8006004 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b64      	cmp	r3, #100	; 0x64
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e1f3      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008462:	4b51      	ldr	r3, [pc, #324]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f0      	bne.n	8008450 <HAL_RCC_OscConfig+0xe8>
 800846e:	e000      	b.n	8008472 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d063      	beq.n	8008546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800847e:	4b4a      	ldr	r3, [pc, #296]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f003 030c 	and.w	r3, r3, #12
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00b      	beq.n	80084a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800848a:	4b47      	ldr	r3, [pc, #284]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008492:	2b08      	cmp	r3, #8
 8008494:	d11c      	bne.n	80084d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008496:	4b44      	ldr	r3, [pc, #272]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d116      	bne.n	80084d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084a2:	4b41      	ldr	r3, [pc, #260]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <HAL_RCC_OscConfig+0x152>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d001      	beq.n	80084ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e1c7      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ba:	4b3b      	ldr	r3, [pc, #236]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	4937      	ldr	r1, [pc, #220]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084ce:	e03a      	b.n	8008546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d020      	beq.n	800851a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084d8:	4b34      	ldr	r3, [pc, #208]	; (80085ac <HAL_RCC_OscConfig+0x244>)
 80084da:	2201      	movs	r2, #1
 80084dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084de:	f7fd fd91 	bl	8006004 <HAL_GetTick>
 80084e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084e4:	e008      	b.n	80084f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084e6:	f7fd fd8d 	bl	8006004 <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d901      	bls.n	80084f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e1a8      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084f8:	4b2b      	ldr	r3, [pc, #172]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d0f0      	beq.n	80084e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008504:	4b28      	ldr	r3, [pc, #160]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	4925      	ldr	r1, [pc, #148]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 8008514:	4313      	orrs	r3, r2
 8008516:	600b      	str	r3, [r1, #0]
 8008518:	e015      	b.n	8008546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800851a:	4b24      	ldr	r3, [pc, #144]	; (80085ac <HAL_RCC_OscConfig+0x244>)
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008520:	f7fd fd70 	bl	8006004 <HAL_GetTick>
 8008524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008526:	e008      	b.n	800853a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008528:	f7fd fd6c 	bl	8006004 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d901      	bls.n	800853a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e187      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800853a:	4b1b      	ldr	r3, [pc, #108]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1f0      	bne.n	8008528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0308 	and.w	r3, r3, #8
 800854e:	2b00      	cmp	r3, #0
 8008550:	d036      	beq.n	80085c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d016      	beq.n	8008588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800855a:	4b15      	ldr	r3, [pc, #84]	; (80085b0 <HAL_RCC_OscConfig+0x248>)
 800855c:	2201      	movs	r2, #1
 800855e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008560:	f7fd fd50 	bl	8006004 <HAL_GetTick>
 8008564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008566:	e008      	b.n	800857a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008568:	f7fd fd4c 	bl	8006004 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e167      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800857a:	4b0b      	ldr	r3, [pc, #44]	; (80085a8 <HAL_RCC_OscConfig+0x240>)
 800857c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0f0      	beq.n	8008568 <HAL_RCC_OscConfig+0x200>
 8008586:	e01b      	b.n	80085c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008588:	4b09      	ldr	r3, [pc, #36]	; (80085b0 <HAL_RCC_OscConfig+0x248>)
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800858e:	f7fd fd39 	bl	8006004 <HAL_GetTick>
 8008592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008594:	e00e      	b.n	80085b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008596:	f7fd fd35 	bl	8006004 <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d907      	bls.n	80085b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e150      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
 80085a8:	40023800 	.word	0x40023800
 80085ac:	42470000 	.word	0x42470000
 80085b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085b4:	4b88      	ldr	r3, [pc, #544]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 80085b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1ea      	bne.n	8008596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8097 	beq.w	80086fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085d2:	4b81      	ldr	r3, [pc, #516]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 80085d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10f      	bne.n	80085fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085de:	2300      	movs	r3, #0
 80085e0:	60bb      	str	r3, [r7, #8]
 80085e2:	4b7d      	ldr	r3, [pc, #500]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	4a7c      	ldr	r2, [pc, #496]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 80085e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ec:	6413      	str	r3, [r2, #64]	; 0x40
 80085ee:	4b7a      	ldr	r3, [pc, #488]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085f6:	60bb      	str	r3, [r7, #8]
 80085f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085fa:	2301      	movs	r3, #1
 80085fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085fe:	4b77      	ldr	r3, [pc, #476]	; (80087dc <HAL_RCC_OscConfig+0x474>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008606:	2b00      	cmp	r3, #0
 8008608:	d118      	bne.n	800863c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800860a:	4b74      	ldr	r3, [pc, #464]	; (80087dc <HAL_RCC_OscConfig+0x474>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a73      	ldr	r2, [pc, #460]	; (80087dc <HAL_RCC_OscConfig+0x474>)
 8008610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008616:	f7fd fcf5 	bl	8006004 <HAL_GetTick>
 800861a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800861c:	e008      	b.n	8008630 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800861e:	f7fd fcf1 	bl	8006004 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b02      	cmp	r3, #2
 800862a:	d901      	bls.n	8008630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e10c      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008630:	4b6a      	ldr	r3, [pc, #424]	; (80087dc <HAL_RCC_OscConfig+0x474>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0f0      	beq.n	800861e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d106      	bne.n	8008652 <HAL_RCC_OscConfig+0x2ea>
 8008644:	4b64      	ldr	r3, [pc, #400]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008648:	4a63      	ldr	r2, [pc, #396]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 800864a:	f043 0301 	orr.w	r3, r3, #1
 800864e:	6713      	str	r3, [r2, #112]	; 0x70
 8008650:	e01c      	b.n	800868c <HAL_RCC_OscConfig+0x324>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	2b05      	cmp	r3, #5
 8008658:	d10c      	bne.n	8008674 <HAL_RCC_OscConfig+0x30c>
 800865a:	4b5f      	ldr	r3, [pc, #380]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 800865c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865e:	4a5e      	ldr	r2, [pc, #376]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008660:	f043 0304 	orr.w	r3, r3, #4
 8008664:	6713      	str	r3, [r2, #112]	; 0x70
 8008666:	4b5c      	ldr	r3, [pc, #368]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866a:	4a5b      	ldr	r2, [pc, #364]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 800866c:	f043 0301 	orr.w	r3, r3, #1
 8008670:	6713      	str	r3, [r2, #112]	; 0x70
 8008672:	e00b      	b.n	800868c <HAL_RCC_OscConfig+0x324>
 8008674:	4b58      	ldr	r3, [pc, #352]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008678:	4a57      	ldr	r2, [pc, #348]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 800867a:	f023 0301 	bic.w	r3, r3, #1
 800867e:	6713      	str	r3, [r2, #112]	; 0x70
 8008680:	4b55      	ldr	r3, [pc, #340]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008684:	4a54      	ldr	r2, [pc, #336]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008686:	f023 0304 	bic.w	r3, r3, #4
 800868a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d015      	beq.n	80086c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008694:	f7fd fcb6 	bl	8006004 <HAL_GetTick>
 8008698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800869a:	e00a      	b.n	80086b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800869c:	f7fd fcb2 	bl	8006004 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d901      	bls.n	80086b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e0cb      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086b2:	4b49      	ldr	r3, [pc, #292]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 80086b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b6:	f003 0302 	and.w	r3, r3, #2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d0ee      	beq.n	800869c <HAL_RCC_OscConfig+0x334>
 80086be:	e014      	b.n	80086ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086c0:	f7fd fca0 	bl	8006004 <HAL_GetTick>
 80086c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086c6:	e00a      	b.n	80086de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086c8:	f7fd fc9c 	bl	8006004 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d901      	bls.n	80086de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e0b5      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086de:	4b3e      	ldr	r3, [pc, #248]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e2:	f003 0302 	and.w	r3, r3, #2
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1ee      	bne.n	80086c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d105      	bne.n	80086fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086f0:	4b39      	ldr	r3, [pc, #228]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 80086f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f4:	4a38      	ldr	r2, [pc, #224]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 80086f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f000 80a1 	beq.w	8008848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008706:	4b34      	ldr	r3, [pc, #208]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 030c 	and.w	r3, r3, #12
 800870e:	2b08      	cmp	r3, #8
 8008710:	d05c      	beq.n	80087cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	2b02      	cmp	r3, #2
 8008718:	d141      	bne.n	800879e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800871a:	4b31      	ldr	r3, [pc, #196]	; (80087e0 <HAL_RCC_OscConfig+0x478>)
 800871c:	2200      	movs	r2, #0
 800871e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008720:	f7fd fc70 	bl	8006004 <HAL_GetTick>
 8008724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008726:	e008      	b.n	800873a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008728:	f7fd fc6c 	bl	8006004 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	2b02      	cmp	r3, #2
 8008734:	d901      	bls.n	800873a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e087      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800873a:	4b27      	ldr	r3, [pc, #156]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1f0      	bne.n	8008728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	69da      	ldr	r2, [r3, #28]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	019b      	lsls	r3, r3, #6
 8008756:	431a      	orrs	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	3b01      	subs	r3, #1
 8008760:	041b      	lsls	r3, r3, #16
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	061b      	lsls	r3, r3, #24
 800876a:	491b      	ldr	r1, [pc, #108]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 800876c:	4313      	orrs	r3, r2
 800876e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008770:	4b1b      	ldr	r3, [pc, #108]	; (80087e0 <HAL_RCC_OscConfig+0x478>)
 8008772:	2201      	movs	r2, #1
 8008774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008776:	f7fd fc45 	bl	8006004 <HAL_GetTick>
 800877a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800877c:	e008      	b.n	8008790 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800877e:	f7fd fc41 	bl	8006004 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d901      	bls.n	8008790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e05c      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008790:	4b11      	ldr	r3, [pc, #68]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d0f0      	beq.n	800877e <HAL_RCC_OscConfig+0x416>
 800879c:	e054      	b.n	8008848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800879e:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <HAL_RCC_OscConfig+0x478>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087a4:	f7fd fc2e 	bl	8006004 <HAL_GetTick>
 80087a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087aa:	e008      	b.n	80087be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087ac:	f7fd fc2a 	bl	8006004 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d901      	bls.n	80087be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e045      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087be:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <HAL_RCC_OscConfig+0x470>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1f0      	bne.n	80087ac <HAL_RCC_OscConfig+0x444>
 80087ca:	e03d      	b.n	8008848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d107      	bne.n	80087e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e038      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
 80087d8:	40023800 	.word	0x40023800
 80087dc:	40007000 	.word	0x40007000
 80087e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80087e4:	4b1b      	ldr	r3, [pc, #108]	; (8008854 <HAL_RCC_OscConfig+0x4ec>)
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d028      	beq.n	8008844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d121      	bne.n	8008844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800880a:	429a      	cmp	r2, r3
 800880c:	d11a      	bne.n	8008844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008814:	4013      	ands	r3, r2
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800881a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800881c:	4293      	cmp	r3, r2
 800881e:	d111      	bne.n	8008844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882a:	085b      	lsrs	r3, r3, #1
 800882c:	3b01      	subs	r3, #1
 800882e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008830:	429a      	cmp	r2, r3
 8008832:	d107      	bne.n	8008844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008840:	429a      	cmp	r2, r3
 8008842:	d001      	beq.n	8008848 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e000      	b.n	800884a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	40023800 	.word	0x40023800

08008858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e0cc      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800886c:	4b68      	ldr	r3, [pc, #416]	; (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d90c      	bls.n	8008894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800887a:	4b65      	ldr	r3, [pc, #404]	; (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	b2d2      	uxtb	r2, r2
 8008880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008882:	4b63      	ldr	r3, [pc, #396]	; (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	429a      	cmp	r2, r3
 800888e:	d001      	beq.n	8008894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e0b8      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0302 	and.w	r3, r3, #2
 800889c:	2b00      	cmp	r3, #0
 800889e:	d020      	beq.n	80088e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d005      	beq.n	80088b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088ac:	4b59      	ldr	r3, [pc, #356]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	4a58      	ldr	r2, [pc, #352]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0308 	and.w	r3, r3, #8
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d005      	beq.n	80088d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088c4:	4b53      	ldr	r3, [pc, #332]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	4a52      	ldr	r2, [pc, #328]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80088ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088d0:	4b50      	ldr	r3, [pc, #320]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	494d      	ldr	r1, [pc, #308]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d044      	beq.n	8008978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d107      	bne.n	8008906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088f6:	4b47      	ldr	r3, [pc, #284]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d119      	bne.n	8008936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e07f      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d003      	beq.n	8008916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008912:	2b03      	cmp	r3, #3
 8008914:	d107      	bne.n	8008926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008916:	4b3f      	ldr	r3, [pc, #252]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d109      	bne.n	8008936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e06f      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008926:	4b3b      	ldr	r3, [pc, #236]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0302 	and.w	r3, r3, #2
 800892e:	2b00      	cmp	r3, #0
 8008930:	d101      	bne.n	8008936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e067      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008936:	4b37      	ldr	r3, [pc, #220]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f023 0203 	bic.w	r2, r3, #3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	4934      	ldr	r1, [pc, #208]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 8008944:	4313      	orrs	r3, r2
 8008946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008948:	f7fd fb5c 	bl	8006004 <HAL_GetTick>
 800894c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800894e:	e00a      	b.n	8008966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008950:	f7fd fb58 	bl	8006004 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	f241 3288 	movw	r2, #5000	; 0x1388
 800895e:	4293      	cmp	r3, r2
 8008960:	d901      	bls.n	8008966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e04f      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008966:	4b2b      	ldr	r3, [pc, #172]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f003 020c 	and.w	r2, r3, #12
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	429a      	cmp	r2, r3
 8008976:	d1eb      	bne.n	8008950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008978:	4b25      	ldr	r3, [pc, #148]	; (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0307 	and.w	r3, r3, #7
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	d20c      	bcs.n	80089a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008986:	4b22      	ldr	r3, [pc, #136]	; (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	b2d2      	uxtb	r2, r2
 800898c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800898e:	4b20      	ldr	r3, [pc, #128]	; (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	429a      	cmp	r2, r3
 800899a:	d001      	beq.n	80089a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e032      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d008      	beq.n	80089be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089ac:	4b19      	ldr	r3, [pc, #100]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	4916      	ldr	r1, [pc, #88]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0308 	and.w	r3, r3, #8
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d009      	beq.n	80089de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089ca:	4b12      	ldr	r3, [pc, #72]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	490e      	ldr	r1, [pc, #56]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80089de:	f000 f821 	bl	8008a24 <HAL_RCC_GetSysClockFreq>
 80089e2:	4602      	mov	r2, r0
 80089e4:	4b0b      	ldr	r3, [pc, #44]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	091b      	lsrs	r3, r3, #4
 80089ea:	f003 030f 	and.w	r3, r3, #15
 80089ee:	490a      	ldr	r1, [pc, #40]	; (8008a18 <HAL_RCC_ClockConfig+0x1c0>)
 80089f0:	5ccb      	ldrb	r3, [r1, r3]
 80089f2:	fa22 f303 	lsr.w	r3, r2, r3
 80089f6:	4a09      	ldr	r2, [pc, #36]	; (8008a1c <HAL_RCC_ClockConfig+0x1c4>)
 80089f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80089fa:	4b09      	ldr	r3, [pc, #36]	; (8008a20 <HAL_RCC_ClockConfig+0x1c8>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fd fabc 	bl	8005f7c <HAL_InitTick>

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	40023c00 	.word	0x40023c00
 8008a14:	40023800 	.word	0x40023800
 8008a18:	08014b78 	.word	0x08014b78
 8008a1c:	20000008 	.word	0x20000008
 8008a20:	2000000c 	.word	0x2000000c

08008a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a28:	b090      	sub	sp, #64	; 0x40
 8008a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a30:	2300      	movs	r3, #0
 8008a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a34:	2300      	movs	r3, #0
 8008a36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a3c:	4b59      	ldr	r3, [pc, #356]	; (8008ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f003 030c 	and.w	r3, r3, #12
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d00d      	beq.n	8008a64 <HAL_RCC_GetSysClockFreq+0x40>
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	f200 80a1 	bhi.w	8008b90 <HAL_RCC_GetSysClockFreq+0x16c>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <HAL_RCC_GetSysClockFreq+0x34>
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	d003      	beq.n	8008a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8008a56:	e09b      	b.n	8008b90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a58:	4b53      	ldr	r3, [pc, #332]	; (8008ba8 <HAL_RCC_GetSysClockFreq+0x184>)
 8008a5a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008a5c:	e09b      	b.n	8008b96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a5e:	4b53      	ldr	r3, [pc, #332]	; (8008bac <HAL_RCC_GetSysClockFreq+0x188>)
 8008a60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a62:	e098      	b.n	8008b96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a64:	4b4f      	ldr	r3, [pc, #316]	; (8008ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a6e:	4b4d      	ldr	r3, [pc, #308]	; (8008ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d028      	beq.n	8008acc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a7a:	4b4a      	ldr	r3, [pc, #296]	; (8008ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	099b      	lsrs	r3, r3, #6
 8008a80:	2200      	movs	r2, #0
 8008a82:	623b      	str	r3, [r7, #32]
 8008a84:	627a      	str	r2, [r7, #36]	; 0x24
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	4b47      	ldr	r3, [pc, #284]	; (8008bac <HAL_RCC_GetSysClockFreq+0x188>)
 8008a90:	fb03 f201 	mul.w	r2, r3, r1
 8008a94:	2300      	movs	r3, #0
 8008a96:	fb00 f303 	mul.w	r3, r0, r3
 8008a9a:	4413      	add	r3, r2
 8008a9c:	4a43      	ldr	r2, [pc, #268]	; (8008bac <HAL_RCC_GetSysClockFreq+0x188>)
 8008a9e:	fba0 1202 	umull	r1, r2, r0, r2
 8008aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008aa4:	460a      	mov	r2, r1
 8008aa6:	62ba      	str	r2, [r7, #40]	; 0x28
 8008aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aaa:	4413      	add	r3, r2
 8008aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	61bb      	str	r3, [r7, #24]
 8008ab4:	61fa      	str	r2, [r7, #28]
 8008ab6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008aba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008abe:	f7f8 f8e3 	bl	8000c88 <__aeabi_uldivmod>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aca:	e053      	b.n	8008b74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008acc:	4b35      	ldr	r3, [pc, #212]	; (8008ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	099b      	lsrs	r3, r3, #6
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	613b      	str	r3, [r7, #16]
 8008ad6:	617a      	str	r2, [r7, #20]
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008ade:	f04f 0b00 	mov.w	fp, #0
 8008ae2:	4652      	mov	r2, sl
 8008ae4:	465b      	mov	r3, fp
 8008ae6:	f04f 0000 	mov.w	r0, #0
 8008aea:	f04f 0100 	mov.w	r1, #0
 8008aee:	0159      	lsls	r1, r3, #5
 8008af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008af4:	0150      	lsls	r0, r2, #5
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	ebb2 080a 	subs.w	r8, r2, sl
 8008afe:	eb63 090b 	sbc.w	r9, r3, fp
 8008b02:	f04f 0200 	mov.w	r2, #0
 8008b06:	f04f 0300 	mov.w	r3, #0
 8008b0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008b0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008b12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008b16:	ebb2 0408 	subs.w	r4, r2, r8
 8008b1a:	eb63 0509 	sbc.w	r5, r3, r9
 8008b1e:	f04f 0200 	mov.w	r2, #0
 8008b22:	f04f 0300 	mov.w	r3, #0
 8008b26:	00eb      	lsls	r3, r5, #3
 8008b28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b2c:	00e2      	lsls	r2, r4, #3
 8008b2e:	4614      	mov	r4, r2
 8008b30:	461d      	mov	r5, r3
 8008b32:	eb14 030a 	adds.w	r3, r4, sl
 8008b36:	603b      	str	r3, [r7, #0]
 8008b38:	eb45 030b 	adc.w	r3, r5, fp
 8008b3c:	607b      	str	r3, [r7, #4]
 8008b3e:	f04f 0200 	mov.w	r2, #0
 8008b42:	f04f 0300 	mov.w	r3, #0
 8008b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	028b      	lsls	r3, r1, #10
 8008b4e:	4621      	mov	r1, r4
 8008b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b54:	4621      	mov	r1, r4
 8008b56:	028a      	lsls	r2, r1, #10
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5e:	2200      	movs	r2, #0
 8008b60:	60bb      	str	r3, [r7, #8]
 8008b62:	60fa      	str	r2, [r7, #12]
 8008b64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b68:	f7f8 f88e 	bl	8000c88 <__aeabi_uldivmod>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4613      	mov	r3, r2
 8008b72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b74:	4b0b      	ldr	r3, [pc, #44]	; (8008ba4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	0c1b      	lsrs	r3, r3, #16
 8008b7a:	f003 0303 	and.w	r3, r3, #3
 8008b7e:	3301      	adds	r3, #1
 8008b80:	005b      	lsls	r3, r3, #1
 8008b82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008b84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b8e:	e002      	b.n	8008b96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b90:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <HAL_RCC_GetSysClockFreq+0x184>)
 8008b92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3740      	adds	r7, #64	; 0x40
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ba2:	bf00      	nop
 8008ba4:	40023800 	.word	0x40023800
 8008ba8:	00f42400 	.word	0x00f42400
 8008bac:	017d7840 	.word	0x017d7840

08008bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bb4:	4b03      	ldr	r3, [pc, #12]	; (8008bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	20000008 	.word	0x20000008

08008bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008bcc:	f7ff fff0 	bl	8008bb0 <HAL_RCC_GetHCLKFreq>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	0a9b      	lsrs	r3, r3, #10
 8008bd8:	f003 0307 	and.w	r3, r3, #7
 8008bdc:	4903      	ldr	r1, [pc, #12]	; (8008bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bde:	5ccb      	ldrb	r3, [r1, r3]
 8008be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	40023800 	.word	0x40023800
 8008bec:	08014b88 	.word	0x08014b88

08008bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008bf4:	f7ff ffdc 	bl	8008bb0 <HAL_RCC_GetHCLKFreq>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	4b05      	ldr	r3, [pc, #20]	; (8008c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	0b5b      	lsrs	r3, r3, #13
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	4903      	ldr	r1, [pc, #12]	; (8008c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c06:	5ccb      	ldrb	r3, [r1, r3]
 8008c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	40023800 	.word	0x40023800
 8008c14:	08014b88 	.word	0x08014b88

08008c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e07b      	b.n	8008d22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d108      	bne.n	8008c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c3a:	d009      	beq.n	8008c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	61da      	str	r2, [r3, #28]
 8008c42:	e005      	b.n	8008c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d106      	bne.n	8008c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7fc fd58 	bl	8005720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	431a      	orrs	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd4:	ea42 0103 	orr.w	r1, r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	0c1b      	lsrs	r3, r3, #16
 8008cee:	f003 0104 	and.w	r1, r3, #4
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	f003 0210 	and.w	r2, r3, #16
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69da      	ldr	r2, [r3, #28]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b088      	sub	sp, #32
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	603b      	str	r3, [r7, #0]
 8008d36:	4613      	mov	r3, r2
 8008d38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_SPI_Transmit+0x22>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e126      	b.n	8008f9a <HAL_SPI_Transmit+0x270>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d54:	f7fd f956 	bl	8006004 <HAL_GetTick>
 8008d58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008d5a:	88fb      	ldrh	r3, [r7, #6]
 8008d5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d002      	beq.n	8008d70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d6e:	e10b      	b.n	8008f88 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <HAL_SPI_Transmit+0x52>
 8008d76:	88fb      	ldrh	r3, [r7, #6]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d102      	bne.n	8008d82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d80:	e102      	b.n	8008f88 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2203      	movs	r2, #3
 8008d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	88fa      	ldrh	r2, [r7, #6]
 8008d9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	88fa      	ldrh	r2, [r7, #6]
 8008da0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dc8:	d10f      	bne.n	8008dea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008de8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df4:	2b40      	cmp	r3, #64	; 0x40
 8008df6:	d007      	beq.n	8008e08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e10:	d14b      	bne.n	8008eaa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <HAL_SPI_Transmit+0xf6>
 8008e1a:	8afb      	ldrh	r3, [r7, #22]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d13e      	bne.n	8008e9e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e24:	881a      	ldrh	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e30:	1c9a      	adds	r2, r3, #2
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008e44:	e02b      	b.n	8008e9e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d112      	bne.n	8008e7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e58:	881a      	ldrh	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e64:	1c9a      	adds	r2, r3, #2
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	3b01      	subs	r3, #1
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e78:	e011      	b.n	8008e9e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e7a:	f7fd f8c3 	bl	8006004 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d803      	bhi.n	8008e92 <HAL_SPI_Transmit+0x168>
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e90:	d102      	bne.n	8008e98 <HAL_SPI_Transmit+0x16e>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d102      	bne.n	8008e9e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e9c:	e074      	b.n	8008f88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1ce      	bne.n	8008e46 <HAL_SPI_Transmit+0x11c>
 8008ea8:	e04c      	b.n	8008f44 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d002      	beq.n	8008eb8 <HAL_SPI_Transmit+0x18e>
 8008eb2:	8afb      	ldrh	r3, [r7, #22]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d140      	bne.n	8008f3a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	330c      	adds	r3, #12
 8008ec2:	7812      	ldrb	r2, [r2, #0]
 8008ec4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008ede:	e02c      	b.n	8008f3a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f003 0302 	and.w	r3, r3, #2
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d113      	bne.n	8008f16 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	330c      	adds	r3, #12
 8008ef8:	7812      	ldrb	r2, [r2, #0]
 8008efa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	86da      	strh	r2, [r3, #54]	; 0x36
 8008f14:	e011      	b.n	8008f3a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f16:	f7fd f875 	bl	8006004 <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d803      	bhi.n	8008f2e <HAL_SPI_Transmit+0x204>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f2c:	d102      	bne.n	8008f34 <HAL_SPI_Transmit+0x20a>
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d102      	bne.n	8008f3a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008f38:	e026      	b.n	8008f88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1cd      	bne.n	8008ee0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 fa55 	bl	80093f8 <SPI_EndRxTxTransaction>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2220      	movs	r2, #32
 8008f58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10a      	bne.n	8008f78 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f62:	2300      	movs	r3, #0
 8008f64:	613b      	str	r3, [r7, #16]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	613b      	str	r3, [r7, #16]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	613b      	str	r3, [r7, #16]
 8008f76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	77fb      	strb	r3, [r7, #31]
 8008f84:	e000      	b.n	8008f88 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008f86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f98:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3720      	adds	r7, #32
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b08c      	sub	sp, #48	; 0x30
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	60f8      	str	r0, [r7, #12]
 8008faa:	60b9      	str	r1, [r7, #8]
 8008fac:	607a      	str	r2, [r7, #4]
 8008fae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d101      	bne.n	8008fc8 <HAL_SPI_TransmitReceive+0x26>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	e18a      	b.n	80092de <HAL_SPI_TransmitReceive+0x33c>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fd0:	f7fd f818 	bl	8006004 <HAL_GetTick>
 8008fd4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008fe6:	887b      	ldrh	r3, [r7, #2]
 8008fe8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d00f      	beq.n	8009012 <HAL_SPI_TransmitReceive+0x70>
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ff8:	d107      	bne.n	800900a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d103      	bne.n	800900a <HAL_SPI_TransmitReceive+0x68>
 8009002:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009006:	2b04      	cmp	r3, #4
 8009008:	d003      	beq.n	8009012 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800900a:	2302      	movs	r3, #2
 800900c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009010:	e15b      	b.n	80092ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d005      	beq.n	8009024 <HAL_SPI_TransmitReceive+0x82>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <HAL_SPI_TransmitReceive+0x82>
 800901e:	887b      	ldrh	r3, [r7, #2]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d103      	bne.n	800902c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800902a:	e14e      	b.n	80092ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b04      	cmp	r3, #4
 8009036:	d003      	beq.n	8009040 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2205      	movs	r2, #5
 800903c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	887a      	ldrh	r2, [r7, #2]
 8009050:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	887a      	ldrh	r2, [r7, #2]
 8009056:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	887a      	ldrh	r2, [r7, #2]
 8009062:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	887a      	ldrh	r2, [r7, #2]
 8009068:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009080:	2b40      	cmp	r3, #64	; 0x40
 8009082:	d007      	beq.n	8009094 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009092:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800909c:	d178      	bne.n	8009190 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <HAL_SPI_TransmitReceive+0x10a>
 80090a6:	8b7b      	ldrh	r3, [r7, #26]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d166      	bne.n	800917a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	881a      	ldrh	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090bc:	1c9a      	adds	r2, r3, #2
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	3b01      	subs	r3, #1
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090d0:	e053      	b.n	800917a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f003 0302 	and.w	r3, r3, #2
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d11b      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x176>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d016      	beq.n	8009118 <HAL_SPI_TransmitReceive+0x176>
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d113      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f4:	881a      	ldrh	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009100:	1c9a      	adds	r2, r3, #2
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800910a:	b29b      	uxth	r3, r3
 800910c:	3b01      	subs	r3, #1
 800910e:	b29a      	uxth	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b01      	cmp	r3, #1
 8009124:	d119      	bne.n	800915a <HAL_SPI_TransmitReceive+0x1b8>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800912a:	b29b      	uxth	r3, r3
 800912c:	2b00      	cmp	r3, #0
 800912e:	d014      	beq.n	800915a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68da      	ldr	r2, [r3, #12]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913a:	b292      	uxth	r2, r2
 800913c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009142:	1c9a      	adds	r2, r3, #2
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800914c:	b29b      	uxth	r3, r3
 800914e:	3b01      	subs	r3, #1
 8009150:	b29a      	uxth	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009156:	2301      	movs	r3, #1
 8009158:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800915a:	f7fc ff53 	bl	8006004 <HAL_GetTick>
 800915e:	4602      	mov	r2, r0
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009166:	429a      	cmp	r2, r3
 8009168:	d807      	bhi.n	800917a <HAL_SPI_TransmitReceive+0x1d8>
 800916a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009170:	d003      	beq.n	800917a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009178:	e0a7      	b.n	80092ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800917e:	b29b      	uxth	r3, r3
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1a6      	bne.n	80090d2 <HAL_SPI_TransmitReceive+0x130>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009188:	b29b      	uxth	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1a1      	bne.n	80090d2 <HAL_SPI_TransmitReceive+0x130>
 800918e:	e07c      	b.n	800928a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <HAL_SPI_TransmitReceive+0x1fc>
 8009198:	8b7b      	ldrh	r3, [r7, #26]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d16b      	bne.n	8009276 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	330c      	adds	r3, #12
 80091a8:	7812      	ldrb	r2, [r2, #0]
 80091aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	3b01      	subs	r3, #1
 80091be:	b29a      	uxth	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091c4:	e057      	b.n	8009276 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d11c      	bne.n	800920e <HAL_SPI_TransmitReceive+0x26c>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091d8:	b29b      	uxth	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d017      	beq.n	800920e <HAL_SPI_TransmitReceive+0x26c>
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d114      	bne.n	800920e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	330c      	adds	r3, #12
 80091ee:	7812      	ldrb	r2, [r2, #0]
 80091f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f6:	1c5a      	adds	r2, r3, #1
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009200:	b29b      	uxth	r3, r3
 8009202:	3b01      	subs	r3, #1
 8009204:	b29a      	uxth	r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f003 0301 	and.w	r3, r3, #1
 8009218:	2b01      	cmp	r3, #1
 800921a:	d119      	bne.n	8009250 <HAL_SPI_TransmitReceive+0x2ae>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009220:	b29b      	uxth	r3, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	d014      	beq.n	8009250 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68da      	ldr	r2, [r3, #12]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009230:	b2d2      	uxtb	r2, r2
 8009232:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009242:	b29b      	uxth	r3, r3
 8009244:	3b01      	subs	r3, #1
 8009246:	b29a      	uxth	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800924c:	2301      	movs	r3, #1
 800924e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009250:	f7fc fed8 	bl	8006004 <HAL_GetTick>
 8009254:	4602      	mov	r2, r0
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800925c:	429a      	cmp	r2, r3
 800925e:	d803      	bhi.n	8009268 <HAL_SPI_TransmitReceive+0x2c6>
 8009260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009266:	d102      	bne.n	800926e <HAL_SPI_TransmitReceive+0x2cc>
 8009268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926a:	2b00      	cmp	r3, #0
 800926c:	d103      	bne.n	8009276 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009274:	e029      	b.n	80092ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800927a:	b29b      	uxth	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1a2      	bne.n	80091c6 <HAL_SPI_TransmitReceive+0x224>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009284:	b29b      	uxth	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d19d      	bne.n	80091c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800928a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800928c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 f8b2 	bl	80093f8 <SPI_EndRxTxTransaction>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d006      	beq.n	80092a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2220      	movs	r2, #32
 80092a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80092a6:	e010      	b.n	80092ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10b      	bne.n	80092c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092b0:	2300      	movs	r3, #0
 80092b2:	617b      	str	r3, [r7, #20]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	617b      	str	r3, [r7, #20]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	e000      	b.n	80092ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80092c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80092da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3730      	adds	r7, #48	; 0x30
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b088      	sub	sp, #32
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	603b      	str	r3, [r7, #0]
 80092f4:	4613      	mov	r3, r2
 80092f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80092f8:	f7fc fe84 	bl	8006004 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009300:	1a9b      	subs	r3, r3, r2
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	4413      	add	r3, r2
 8009306:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009308:	f7fc fe7c 	bl	8006004 <HAL_GetTick>
 800930c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800930e:	4b39      	ldr	r3, [pc, #228]	; (80093f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	015b      	lsls	r3, r3, #5
 8009314:	0d1b      	lsrs	r3, r3, #20
 8009316:	69fa      	ldr	r2, [r7, #28]
 8009318:	fb02 f303 	mul.w	r3, r2, r3
 800931c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800931e:	e054      	b.n	80093ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009326:	d050      	beq.n	80093ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009328:	f7fc fe6c 	bl	8006004 <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	69fa      	ldr	r2, [r7, #28]
 8009334:	429a      	cmp	r2, r3
 8009336:	d902      	bls.n	800933e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d13d      	bne.n	80093ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800934c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009356:	d111      	bne.n	800937c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009360:	d004      	beq.n	800936c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800936a:	d107      	bne.n	800937c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800937a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009384:	d10f      	bne.n	80093a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e017      	b.n	80093ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d101      	bne.n	80093c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689a      	ldr	r2, [r3, #8]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	4013      	ands	r3, r2
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	bf0c      	ite	eq
 80093da:	2301      	moveq	r3, #1
 80093dc:	2300      	movne	r3, #0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	461a      	mov	r2, r3
 80093e2:	79fb      	ldrb	r3, [r7, #7]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d19b      	bne.n	8009320 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3720      	adds	r7, #32
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	20000008 	.word	0x20000008

080093f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af02      	add	r7, sp, #8
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009404:	4b1b      	ldr	r3, [pc, #108]	; (8009474 <SPI_EndRxTxTransaction+0x7c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a1b      	ldr	r2, [pc, #108]	; (8009478 <SPI_EndRxTxTransaction+0x80>)
 800940a:	fba2 2303 	umull	r2, r3, r2, r3
 800940e:	0d5b      	lsrs	r3, r3, #21
 8009410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009414:	fb02 f303 	mul.w	r3, r2, r3
 8009418:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009422:	d112      	bne.n	800944a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	2200      	movs	r2, #0
 800942c:	2180      	movs	r1, #128	; 0x80
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7ff ff5a 	bl	80092e8 <SPI_WaitFlagStateUntilTimeout>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d016      	beq.n	8009468 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943e:	f043 0220 	orr.w	r2, r3, #32
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e00f      	b.n	800946a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00a      	beq.n	8009466 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	3b01      	subs	r3, #1
 8009454:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009460:	2b80      	cmp	r3, #128	; 0x80
 8009462:	d0f2      	beq.n	800944a <SPI_EndRxTxTransaction+0x52>
 8009464:	e000      	b.n	8009468 <SPI_EndRxTxTransaction+0x70>
        break;
 8009466:	bf00      	nop
  }

  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3718      	adds	r7, #24
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	20000008 	.word	0x20000008
 8009478:	165e9f81 	.word	0x165e9f81

0800947c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e041      	b.n	8009512 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d106      	bne.n	80094a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7fc f984 	bl	80057b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3304      	adds	r3, #4
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f000 fa06 	bl	80098cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b082      	sub	sp, #8
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e041      	b.n	80095b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7fc f981 	bl	8005848 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2202      	movs	r2, #2
 800954a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3304      	adds	r3, #4
 8009556:	4619      	mov	r1, r3
 8009558:	4610      	mov	r0, r2
 800955a:	f000 f9b7 	bl	80098cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80095d2:	2302      	movs	r3, #2
 80095d4:	e0ae      	b.n	8009734 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b0c      	cmp	r3, #12
 80095e2:	f200 809f 	bhi.w	8009724 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80095e6:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80095e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ec:	08009621 	.word	0x08009621
 80095f0:	08009725 	.word	0x08009725
 80095f4:	08009725 	.word	0x08009725
 80095f8:	08009725 	.word	0x08009725
 80095fc:	08009661 	.word	0x08009661
 8009600:	08009725 	.word	0x08009725
 8009604:	08009725 	.word	0x08009725
 8009608:	08009725 	.word	0x08009725
 800960c:	080096a3 	.word	0x080096a3
 8009610:	08009725 	.word	0x08009725
 8009614:	08009725 	.word	0x08009725
 8009618:	08009725 	.word	0x08009725
 800961c:	080096e3 	.word	0x080096e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f9f0 	bl	8009a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	699a      	ldr	r2, [r3, #24]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f042 0208 	orr.w	r2, r2, #8
 800963a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	699a      	ldr	r2, [r3, #24]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f022 0204 	bic.w	r2, r2, #4
 800964a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6999      	ldr	r1, [r3, #24]
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	691a      	ldr	r2, [r3, #16]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	619a      	str	r2, [r3, #24]
      break;
 800965e:	e064      	b.n	800972a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fa40 	bl	8009aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	699a      	ldr	r2, [r3, #24]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800967a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699a      	ldr	r2, [r3, #24]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800968a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6999      	ldr	r1, [r3, #24]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	021a      	lsls	r2, r3, #8
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	430a      	orrs	r2, r1
 800969e:	619a      	str	r2, [r3, #24]
      break;
 80096a0:	e043      	b.n	800972a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68b9      	ldr	r1, [r7, #8]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 fa95 	bl	8009bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	69da      	ldr	r2, [r3, #28]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f042 0208 	orr.w	r2, r2, #8
 80096bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	69da      	ldr	r2, [r3, #28]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0204 	bic.w	r2, r2, #4
 80096cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	69d9      	ldr	r1, [r3, #28]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	691a      	ldr	r2, [r3, #16]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	430a      	orrs	r2, r1
 80096de:	61da      	str	r2, [r3, #28]
      break;
 80096e0:	e023      	b.n	800972a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68b9      	ldr	r1, [r7, #8]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 fae9 	bl	8009cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	69da      	ldr	r2, [r3, #28]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	69da      	ldr	r2, [r3, #28]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800970c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69d9      	ldr	r1, [r3, #28]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	021a      	lsls	r2, r3, #8
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	61da      	str	r2, [r3, #28]
      break;
 8009722:	e002      	b.n	800972a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	75fb      	strb	r3, [r7, #23]
      break;
 8009728:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009732:	7dfb      	ldrb	r3, [r7, #23]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3718      	adds	r7, #24
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_TIM_ConfigClockSource+0x1c>
 8009754:	2302      	movs	r3, #2
 8009756:	e0b4      	b.n	80098c2 <HAL_TIM_ConfigClockSource+0x186>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800977e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009790:	d03e      	beq.n	8009810 <HAL_TIM_ConfigClockSource+0xd4>
 8009792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009796:	f200 8087 	bhi.w	80098a8 <HAL_TIM_ConfigClockSource+0x16c>
 800979a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800979e:	f000 8086 	beq.w	80098ae <HAL_TIM_ConfigClockSource+0x172>
 80097a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097a6:	d87f      	bhi.n	80098a8 <HAL_TIM_ConfigClockSource+0x16c>
 80097a8:	2b70      	cmp	r3, #112	; 0x70
 80097aa:	d01a      	beq.n	80097e2 <HAL_TIM_ConfigClockSource+0xa6>
 80097ac:	2b70      	cmp	r3, #112	; 0x70
 80097ae:	d87b      	bhi.n	80098a8 <HAL_TIM_ConfigClockSource+0x16c>
 80097b0:	2b60      	cmp	r3, #96	; 0x60
 80097b2:	d050      	beq.n	8009856 <HAL_TIM_ConfigClockSource+0x11a>
 80097b4:	2b60      	cmp	r3, #96	; 0x60
 80097b6:	d877      	bhi.n	80098a8 <HAL_TIM_ConfigClockSource+0x16c>
 80097b8:	2b50      	cmp	r3, #80	; 0x50
 80097ba:	d03c      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0xfa>
 80097bc:	2b50      	cmp	r3, #80	; 0x50
 80097be:	d873      	bhi.n	80098a8 <HAL_TIM_ConfigClockSource+0x16c>
 80097c0:	2b40      	cmp	r3, #64	; 0x40
 80097c2:	d058      	beq.n	8009876 <HAL_TIM_ConfigClockSource+0x13a>
 80097c4:	2b40      	cmp	r3, #64	; 0x40
 80097c6:	d86f      	bhi.n	80098a8 <HAL_TIM_ConfigClockSource+0x16c>
 80097c8:	2b30      	cmp	r3, #48	; 0x30
 80097ca:	d064      	beq.n	8009896 <HAL_TIM_ConfigClockSource+0x15a>
 80097cc:	2b30      	cmp	r3, #48	; 0x30
 80097ce:	d86b      	bhi.n	80098a8 <HAL_TIM_ConfigClockSource+0x16c>
 80097d0:	2b20      	cmp	r3, #32
 80097d2:	d060      	beq.n	8009896 <HAL_TIM_ConfigClockSource+0x15a>
 80097d4:	2b20      	cmp	r3, #32
 80097d6:	d867      	bhi.n	80098a8 <HAL_TIM_ConfigClockSource+0x16c>
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d05c      	beq.n	8009896 <HAL_TIM_ConfigClockSource+0x15a>
 80097dc:	2b10      	cmp	r3, #16
 80097de:	d05a      	beq.n	8009896 <HAL_TIM_ConfigClockSource+0x15a>
 80097e0:	e062      	b.n	80098a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	6899      	ldr	r1, [r3, #8]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	f000 fb35 	bl	8009e60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009804:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	609a      	str	r2, [r3, #8]
      break;
 800980e:	e04f      	b.n	80098b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	6899      	ldr	r1, [r3, #8]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f000 fb1e 	bl	8009e60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689a      	ldr	r2, [r3, #8]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009832:	609a      	str	r2, [r3, #8]
      break;
 8009834:	e03c      	b.n	80098b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	6859      	ldr	r1, [r3, #4]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	461a      	mov	r2, r3
 8009844:	f000 fa92 	bl	8009d6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2150      	movs	r1, #80	; 0x50
 800984e:	4618      	mov	r0, r3
 8009850:	f000 faeb 	bl	8009e2a <TIM_ITRx_SetConfig>
      break;
 8009854:	e02c      	b.n	80098b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6818      	ldr	r0, [r3, #0]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	6859      	ldr	r1, [r3, #4]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	461a      	mov	r2, r3
 8009864:	f000 fab1 	bl	8009dca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2160      	movs	r1, #96	; 0x60
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fadb 	bl	8009e2a <TIM_ITRx_SetConfig>
      break;
 8009874:	e01c      	b.n	80098b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6818      	ldr	r0, [r3, #0]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	6859      	ldr	r1, [r3, #4]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	461a      	mov	r2, r3
 8009884:	f000 fa72 	bl	8009d6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2140      	movs	r1, #64	; 0x40
 800988e:	4618      	mov	r0, r3
 8009890:	f000 facb 	bl	8009e2a <TIM_ITRx_SetConfig>
      break;
 8009894:	e00c      	b.n	80098b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4619      	mov	r1, r3
 80098a0:	4610      	mov	r0, r2
 80098a2:	f000 fac2 	bl	8009e2a <TIM_ITRx_SetConfig>
      break;
 80098a6:	e003      	b.n	80098b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	73fb      	strb	r3, [r7, #15]
      break;
 80098ac:	e000      	b.n	80098b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80098ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
	...

080098cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a40      	ldr	r2, [pc, #256]	; (80099e0 <TIM_Base_SetConfig+0x114>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d013      	beq.n	800990c <TIM_Base_SetConfig+0x40>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ea:	d00f      	beq.n	800990c <TIM_Base_SetConfig+0x40>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a3d      	ldr	r2, [pc, #244]	; (80099e4 <TIM_Base_SetConfig+0x118>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d00b      	beq.n	800990c <TIM_Base_SetConfig+0x40>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a3c      	ldr	r2, [pc, #240]	; (80099e8 <TIM_Base_SetConfig+0x11c>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d007      	beq.n	800990c <TIM_Base_SetConfig+0x40>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a3b      	ldr	r2, [pc, #236]	; (80099ec <TIM_Base_SetConfig+0x120>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d003      	beq.n	800990c <TIM_Base_SetConfig+0x40>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4a3a      	ldr	r2, [pc, #232]	; (80099f0 <TIM_Base_SetConfig+0x124>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d108      	bne.n	800991e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a2f      	ldr	r2, [pc, #188]	; (80099e0 <TIM_Base_SetConfig+0x114>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d02b      	beq.n	800997e <TIM_Base_SetConfig+0xb2>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800992c:	d027      	beq.n	800997e <TIM_Base_SetConfig+0xb2>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a2c      	ldr	r2, [pc, #176]	; (80099e4 <TIM_Base_SetConfig+0x118>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d023      	beq.n	800997e <TIM_Base_SetConfig+0xb2>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a2b      	ldr	r2, [pc, #172]	; (80099e8 <TIM_Base_SetConfig+0x11c>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d01f      	beq.n	800997e <TIM_Base_SetConfig+0xb2>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4a2a      	ldr	r2, [pc, #168]	; (80099ec <TIM_Base_SetConfig+0x120>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d01b      	beq.n	800997e <TIM_Base_SetConfig+0xb2>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a29      	ldr	r2, [pc, #164]	; (80099f0 <TIM_Base_SetConfig+0x124>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d017      	beq.n	800997e <TIM_Base_SetConfig+0xb2>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a28      	ldr	r2, [pc, #160]	; (80099f4 <TIM_Base_SetConfig+0x128>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d013      	beq.n	800997e <TIM_Base_SetConfig+0xb2>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a27      	ldr	r2, [pc, #156]	; (80099f8 <TIM_Base_SetConfig+0x12c>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d00f      	beq.n	800997e <TIM_Base_SetConfig+0xb2>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a26      	ldr	r2, [pc, #152]	; (80099fc <TIM_Base_SetConfig+0x130>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d00b      	beq.n	800997e <TIM_Base_SetConfig+0xb2>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a25      	ldr	r2, [pc, #148]	; (8009a00 <TIM_Base_SetConfig+0x134>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d007      	beq.n	800997e <TIM_Base_SetConfig+0xb2>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a24      	ldr	r2, [pc, #144]	; (8009a04 <TIM_Base_SetConfig+0x138>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d003      	beq.n	800997e <TIM_Base_SetConfig+0xb2>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a23      	ldr	r2, [pc, #140]	; (8009a08 <TIM_Base_SetConfig+0x13c>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d108      	bne.n	8009990 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	4313      	orrs	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	695b      	ldr	r3, [r3, #20]
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	689a      	ldr	r2, [r3, #8]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a0a      	ldr	r2, [pc, #40]	; (80099e0 <TIM_Base_SetConfig+0x114>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d003      	beq.n	80099c4 <TIM_Base_SetConfig+0xf8>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a0c      	ldr	r2, [pc, #48]	; (80099f0 <TIM_Base_SetConfig+0x124>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d103      	bne.n	80099cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	691a      	ldr	r2, [r3, #16]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	615a      	str	r2, [r3, #20]
}
 80099d2:	bf00      	nop
 80099d4:	3714      	adds	r7, #20
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	40010000 	.word	0x40010000
 80099e4:	40000400 	.word	0x40000400
 80099e8:	40000800 	.word	0x40000800
 80099ec:	40000c00 	.word	0x40000c00
 80099f0:	40010400 	.word	0x40010400
 80099f4:	40014000 	.word	0x40014000
 80099f8:	40014400 	.word	0x40014400
 80099fc:	40014800 	.word	0x40014800
 8009a00:	40001800 	.word	0x40001800
 8009a04:	40001c00 	.word	0x40001c00
 8009a08:	40002000 	.word	0x40002000

08009a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	f023 0201 	bic.w	r2, r3, #1
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 0303 	bic.w	r3, r3, #3
 8009a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f023 0302 	bic.w	r3, r3, #2
 8009a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a20      	ldr	r2, [pc, #128]	; (8009ae4 <TIM_OC1_SetConfig+0xd8>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d003      	beq.n	8009a70 <TIM_OC1_SetConfig+0x64>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a1f      	ldr	r2, [pc, #124]	; (8009ae8 <TIM_OC1_SetConfig+0xdc>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d10c      	bne.n	8009a8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f023 0308 	bic.w	r3, r3, #8
 8009a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f023 0304 	bic.w	r3, r3, #4
 8009a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a15      	ldr	r2, [pc, #84]	; (8009ae4 <TIM_OC1_SetConfig+0xd8>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d003      	beq.n	8009a9a <TIM_OC1_SetConfig+0x8e>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a14      	ldr	r2, [pc, #80]	; (8009ae8 <TIM_OC1_SetConfig+0xdc>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d111      	bne.n	8009abe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	621a      	str	r2, [r3, #32]
}
 8009ad8:	bf00      	nop
 8009ada:	371c      	adds	r7, #28
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	40010000 	.word	0x40010000
 8009ae8:	40010400 	.word	0x40010400

08009aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a1b      	ldr	r3, [r3, #32]
 8009afa:	f023 0210 	bic.w	r2, r3, #16
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	021b      	lsls	r3, r3, #8
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f023 0320 	bic.w	r3, r3, #32
 8009b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	011b      	lsls	r3, r3, #4
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a22      	ldr	r2, [pc, #136]	; (8009bd0 <TIM_OC2_SetConfig+0xe4>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d003      	beq.n	8009b54 <TIM_OC2_SetConfig+0x68>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a21      	ldr	r2, [pc, #132]	; (8009bd4 <TIM_OC2_SetConfig+0xe8>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d10d      	bne.n	8009b70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	011b      	lsls	r3, r3, #4
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a17      	ldr	r2, [pc, #92]	; (8009bd0 <TIM_OC2_SetConfig+0xe4>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d003      	beq.n	8009b80 <TIM_OC2_SetConfig+0x94>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a16      	ldr	r2, [pc, #88]	; (8009bd4 <TIM_OC2_SetConfig+0xe8>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d113      	bne.n	8009ba8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	695b      	ldr	r3, [r3, #20]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	621a      	str	r2, [r3, #32]
}
 8009bc2:	bf00      	nop
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	40010000 	.word	0x40010000
 8009bd4:	40010400 	.word	0x40010400

08009bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f023 0303 	bic.w	r3, r3, #3
 8009c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	021b      	lsls	r3, r3, #8
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a21      	ldr	r2, [pc, #132]	; (8009cb8 <TIM_OC3_SetConfig+0xe0>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d003      	beq.n	8009c3e <TIM_OC3_SetConfig+0x66>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a20      	ldr	r2, [pc, #128]	; (8009cbc <TIM_OC3_SetConfig+0xe4>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d10d      	bne.n	8009c5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	021b      	lsls	r3, r3, #8
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a16      	ldr	r2, [pc, #88]	; (8009cb8 <TIM_OC3_SetConfig+0xe0>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d003      	beq.n	8009c6a <TIM_OC3_SetConfig+0x92>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a15      	ldr	r2, [pc, #84]	; (8009cbc <TIM_OC3_SetConfig+0xe4>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d113      	bne.n	8009c92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	621a      	str	r2, [r3, #32]
}
 8009cac:	bf00      	nop
 8009cae:	371c      	adds	r7, #28
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	40010000 	.word	0x40010000
 8009cbc:	40010400 	.word	0x40010400

08009cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	021b      	lsls	r3, r3, #8
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	031b      	lsls	r3, r3, #12
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a12      	ldr	r2, [pc, #72]	; (8009d64 <TIM_OC4_SetConfig+0xa4>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d003      	beq.n	8009d28 <TIM_OC4_SetConfig+0x68>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a11      	ldr	r2, [pc, #68]	; (8009d68 <TIM_OC4_SetConfig+0xa8>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d109      	bne.n	8009d3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	019b      	lsls	r3, r3, #6
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	621a      	str	r2, [r3, #32]
}
 8009d56:	bf00      	nop
 8009d58:	371c      	adds	r7, #28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	40010000 	.word	0x40010000
 8009d68:	40010400 	.word	0x40010400

08009d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	f023 0201 	bic.w	r2, r3, #1
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	011b      	lsls	r3, r3, #4
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f023 030a 	bic.w	r3, r3, #10
 8009da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	621a      	str	r2, [r3, #32]
}
 8009dbe:	bf00      	nop
 8009dc0:	371c      	adds	r7, #28
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b087      	sub	sp, #28
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	60f8      	str	r0, [r7, #12]
 8009dd2:	60b9      	str	r1, [r7, #8]
 8009dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	f023 0210 	bic.w	r2, r3, #16
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a1b      	ldr	r3, [r3, #32]
 8009dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	031b      	lsls	r3, r3, #12
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	011b      	lsls	r3, r3, #4
 8009e0c:	693a      	ldr	r2, [r7, #16]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	621a      	str	r2, [r3, #32]
}
 8009e1e:	bf00      	nop
 8009e20:	371c      	adds	r7, #28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b085      	sub	sp, #20
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	f043 0307 	orr.w	r3, r3, #7
 8009e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	609a      	str	r2, [r3, #8]
}
 8009e54:	bf00      	nop
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	021a      	lsls	r2, r3, #8
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	431a      	orrs	r2, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	609a      	str	r2, [r3, #8]
}
 8009e94:	bf00      	nop
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d101      	bne.n	8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	e05a      	b.n	8009f6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a21      	ldr	r2, [pc, #132]	; (8009f7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d022      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f04:	d01d      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a1d      	ldr	r2, [pc, #116]	; (8009f80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d018      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1b      	ldr	r2, [pc, #108]	; (8009f84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d013      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a1a      	ldr	r2, [pc, #104]	; (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d00e      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a18      	ldr	r2, [pc, #96]	; (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d009      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a17      	ldr	r2, [pc, #92]	; (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d004      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a15      	ldr	r2, [pc, #84]	; (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d10c      	bne.n	8009f5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	40010000 	.word	0x40010000
 8009f80:	40000400 	.word	0x40000400
 8009f84:	40000800 	.word	0x40000800
 8009f88:	40000c00 	.word	0x40000c00
 8009f8c:	40010400 	.word	0x40010400
 8009f90:	40014000 	.word	0x40014000
 8009f94:	40001800 	.word	0x40001800

08009f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d101      	bne.n	8009faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e03f      	b.n	800a02a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d106      	bne.n	8009fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7fb fd32 	bl	8005a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2224      	movs	r2, #36	; 0x24
 8009fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68da      	ldr	r2, [r3, #12]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f9cb 	bl	800a378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	691a      	ldr	r2, [r3, #16]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	695a      	ldr	r2, [r3, #20]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68da      	ldr	r2, [r3, #12]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2220      	movs	r2, #32
 800a024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b08a      	sub	sp, #40	; 0x28
 800a036:	af02      	add	r7, sp, #8
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	603b      	str	r3, [r7, #0]
 800a03e:	4613      	mov	r3, r2
 800a040:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	2b20      	cmp	r3, #32
 800a050:	d17c      	bne.n	800a14c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <HAL_UART_Transmit+0x2c>
 800a058:	88fb      	ldrh	r3, [r7, #6]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e075      	b.n	800a14e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d101      	bne.n	800a070 <HAL_UART_Transmit+0x3e>
 800a06c:	2302      	movs	r3, #2
 800a06e:	e06e      	b.n	800a14e <HAL_UART_Transmit+0x11c>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2221      	movs	r2, #33	; 0x21
 800a082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a086:	f7fb ffbd 	bl	8006004 <HAL_GetTick>
 800a08a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	88fa      	ldrh	r2, [r7, #6]
 800a090:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	88fa      	ldrh	r2, [r7, #6]
 800a096:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0a0:	d108      	bne.n	800a0b4 <HAL_UART_Transmit+0x82>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d104      	bne.n	800a0b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	61bb      	str	r3, [r7, #24]
 800a0b2:	e003      	b.n	800a0bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a0c4:	e02a      	b.n	800a11c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2180      	movs	r1, #128	; 0x80
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 f8e2 	bl	800a29a <UART_WaitOnFlagUntilTimeout>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e036      	b.n	800a14e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10b      	bne.n	800a0fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	881b      	ldrh	r3, [r3, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	3302      	adds	r3, #2
 800a0fa:	61bb      	str	r3, [r7, #24]
 800a0fc:	e007      	b.n	800a10e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	781a      	ldrb	r2, [r3, #0]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	3301      	adds	r3, #1
 800a10c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a112:	b29b      	uxth	r3, r3
 800a114:	3b01      	subs	r3, #1
 800a116:	b29a      	uxth	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a120:	b29b      	uxth	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1cf      	bne.n	800a0c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2200      	movs	r2, #0
 800a12e:	2140      	movs	r1, #64	; 0x40
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 f8b2 	bl	800a29a <UART_WaitOnFlagUntilTimeout>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e006      	b.n	800a14e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2220      	movs	r2, #32
 800a144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	e000      	b.n	800a14e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a14c:	2302      	movs	r3, #2
  }
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3720      	adds	r7, #32
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b08a      	sub	sp, #40	; 0x28
 800a15a:	af02      	add	r7, sp, #8
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	60b9      	str	r1, [r7, #8]
 800a160:	603b      	str	r3, [r7, #0]
 800a162:	4613      	mov	r3, r2
 800a164:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a166:	2300      	movs	r3, #0
 800a168:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b20      	cmp	r3, #32
 800a174:	f040 808c 	bne.w	800a290 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d002      	beq.n	800a184 <HAL_UART_Receive+0x2e>
 800a17e:	88fb      	ldrh	r3, [r7, #6]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d101      	bne.n	800a188 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e084      	b.n	800a292 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d101      	bne.n	800a196 <HAL_UART_Receive+0x40>
 800a192:	2302      	movs	r3, #2
 800a194:	e07d      	b.n	800a292 <HAL_UART_Receive+0x13c>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2222      	movs	r2, #34	; 0x22
 800a1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1b2:	f7fb ff27 	bl	8006004 <HAL_GetTick>
 800a1b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	88fa      	ldrh	r2, [r7, #6]
 800a1bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	88fa      	ldrh	r2, [r7, #6]
 800a1c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1cc:	d108      	bne.n	800a1e0 <HAL_UART_Receive+0x8a>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d104      	bne.n	800a1e0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	61bb      	str	r3, [r7, #24]
 800a1de:	e003      	b.n	800a1e8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a1f0:	e043      	b.n	800a27a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	2120      	movs	r1, #32
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f84c 	bl	800a29a <UART_WaitOnFlagUntilTimeout>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e042      	b.n	800a292 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10c      	bne.n	800a22c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	b29b      	uxth	r3, r3
 800a21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a21e:	b29a      	uxth	r2, r3
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	3302      	adds	r3, #2
 800a228:	61bb      	str	r3, [r7, #24]
 800a22a:	e01f      	b.n	800a26c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a234:	d007      	beq.n	800a246 <HAL_UART_Receive+0xf0>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10a      	bne.n	800a254 <HAL_UART_Receive+0xfe>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d106      	bne.n	800a254 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	701a      	strb	r2, [r3, #0]
 800a252:	e008      	b.n	800a266 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a260:	b2da      	uxtb	r2, r3
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	3301      	adds	r3, #1
 800a26a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a270:	b29b      	uxth	r3, r3
 800a272:	3b01      	subs	r3, #1
 800a274:	b29a      	uxth	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a27e:	b29b      	uxth	r3, r3
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1b6      	bne.n	800a1f2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2220      	movs	r2, #32
 800a288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	e000      	b.n	800a292 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a290:	2302      	movs	r3, #2
  }
}
 800a292:	4618      	mov	r0, r3
 800a294:	3720      	adds	r7, #32
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b090      	sub	sp, #64	; 0x40
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	60b9      	str	r1, [r7, #8]
 800a2a4:	603b      	str	r3, [r7, #0]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2aa:	e050      	b.n	800a34e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2b2:	d04c      	beq.n	800a34e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a2b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d007      	beq.n	800a2ca <UART_WaitOnFlagUntilTimeout+0x30>
 800a2ba:	f7fb fea3 	bl	8006004 <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d241      	bcs.n	800a34e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	330c      	adds	r3, #12
 800a2d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d4:	e853 3f00 	ldrex	r3, [r3]
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	330c      	adds	r3, #12
 800a2e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2ea:	637a      	str	r2, [r7, #52]	; 0x34
 800a2ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2f2:	e841 2300 	strex	r3, r2, [r1]
 800a2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1e5      	bne.n	800a2ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3314      	adds	r3, #20
 800a304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	e853 3f00 	ldrex	r3, [r3]
 800a30c:	613b      	str	r3, [r7, #16]
   return(result);
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	f023 0301 	bic.w	r3, r3, #1
 800a314:	63bb      	str	r3, [r7, #56]	; 0x38
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3314      	adds	r3, #20
 800a31c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a31e:	623a      	str	r2, [r7, #32]
 800a320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a322:	69f9      	ldr	r1, [r7, #28]
 800a324:	6a3a      	ldr	r2, [r7, #32]
 800a326:	e841 2300 	strex	r3, r2, [r1]
 800a32a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1e5      	bne.n	800a2fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2220      	movs	r2, #32
 800a336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a34a:	2303      	movs	r3, #3
 800a34c:	e00f      	b.n	800a36e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	4013      	ands	r3, r2
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	bf0c      	ite	eq
 800a35e:	2301      	moveq	r3, #1
 800a360:	2300      	movne	r3, #0
 800a362:	b2db      	uxtb	r3, r3
 800a364:	461a      	mov	r2, r3
 800a366:	79fb      	ldrb	r3, [r7, #7]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d09f      	beq.n	800a2ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3740      	adds	r7, #64	; 0x40
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
	...

0800a378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a37c:	b0c0      	sub	sp, #256	; 0x100
 800a37e:	af00      	add	r7, sp, #0
 800a380:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a394:	68d9      	ldr	r1, [r3, #12]
 800a396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	ea40 0301 	orr.w	r3, r0, r1
 800a3a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a6:	689a      	ldr	r2, [r3, #8]
 800a3a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	431a      	orrs	r2, r3
 800a3b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a3c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a3d0:	f021 010c 	bic.w	r1, r1, #12
 800a3d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a3de:	430b      	orrs	r3, r1
 800a3e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a3e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a3ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3f2:	6999      	ldr	r1, [r3, #24]
 800a3f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	ea40 0301 	orr.w	r3, r0, r1
 800a3fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	4b8f      	ldr	r3, [pc, #572]	; (800a644 <UART_SetConfig+0x2cc>)
 800a408:	429a      	cmp	r2, r3
 800a40a:	d005      	beq.n	800a418 <UART_SetConfig+0xa0>
 800a40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	4b8d      	ldr	r3, [pc, #564]	; (800a648 <UART_SetConfig+0x2d0>)
 800a414:	429a      	cmp	r2, r3
 800a416:	d104      	bne.n	800a422 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a418:	f7fe fbea 	bl	8008bf0 <HAL_RCC_GetPCLK2Freq>
 800a41c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a420:	e003      	b.n	800a42a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a422:	f7fe fbd1 	bl	8008bc8 <HAL_RCC_GetPCLK1Freq>
 800a426:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a42a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a42e:	69db      	ldr	r3, [r3, #28]
 800a430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a434:	f040 810c 	bne.w	800a650 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a43c:	2200      	movs	r2, #0
 800a43e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a442:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a44a:	4622      	mov	r2, r4
 800a44c:	462b      	mov	r3, r5
 800a44e:	1891      	adds	r1, r2, r2
 800a450:	65b9      	str	r1, [r7, #88]	; 0x58
 800a452:	415b      	adcs	r3, r3
 800a454:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a45a:	4621      	mov	r1, r4
 800a45c:	eb12 0801 	adds.w	r8, r2, r1
 800a460:	4629      	mov	r1, r5
 800a462:	eb43 0901 	adc.w	r9, r3, r1
 800a466:	f04f 0200 	mov.w	r2, #0
 800a46a:	f04f 0300 	mov.w	r3, #0
 800a46e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a47a:	4690      	mov	r8, r2
 800a47c:	4699      	mov	r9, r3
 800a47e:	4623      	mov	r3, r4
 800a480:	eb18 0303 	adds.w	r3, r8, r3
 800a484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a488:	462b      	mov	r3, r5
 800a48a:	eb49 0303 	adc.w	r3, r9, r3
 800a48e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a49e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a4a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	18db      	adds	r3, r3, r3
 800a4aa:	653b      	str	r3, [r7, #80]	; 0x50
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	eb42 0303 	adc.w	r3, r2, r3
 800a4b2:	657b      	str	r3, [r7, #84]	; 0x54
 800a4b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a4b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a4bc:	f7f6 fbe4 	bl	8000c88 <__aeabi_uldivmod>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4b61      	ldr	r3, [pc, #388]	; (800a64c <UART_SetConfig+0x2d4>)
 800a4c6:	fba3 2302 	umull	r2, r3, r3, r2
 800a4ca:	095b      	lsrs	r3, r3, #5
 800a4cc:	011c      	lsls	r4, r3, #4
 800a4ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a4d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a4dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a4e0:	4642      	mov	r2, r8
 800a4e2:	464b      	mov	r3, r9
 800a4e4:	1891      	adds	r1, r2, r2
 800a4e6:	64b9      	str	r1, [r7, #72]	; 0x48
 800a4e8:	415b      	adcs	r3, r3
 800a4ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a4f0:	4641      	mov	r1, r8
 800a4f2:	eb12 0a01 	adds.w	sl, r2, r1
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	eb43 0b01 	adc.w	fp, r3, r1
 800a4fc:	f04f 0200 	mov.w	r2, #0
 800a500:	f04f 0300 	mov.w	r3, #0
 800a504:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a508:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a50c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a510:	4692      	mov	sl, r2
 800a512:	469b      	mov	fp, r3
 800a514:	4643      	mov	r3, r8
 800a516:	eb1a 0303 	adds.w	r3, sl, r3
 800a51a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a51e:	464b      	mov	r3, r9
 800a520:	eb4b 0303 	adc.w	r3, fp, r3
 800a524:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a534:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a53c:	460b      	mov	r3, r1
 800a53e:	18db      	adds	r3, r3, r3
 800a540:	643b      	str	r3, [r7, #64]	; 0x40
 800a542:	4613      	mov	r3, r2
 800a544:	eb42 0303 	adc.w	r3, r2, r3
 800a548:	647b      	str	r3, [r7, #68]	; 0x44
 800a54a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a54e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a552:	f7f6 fb99 	bl	8000c88 <__aeabi_uldivmod>
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4611      	mov	r1, r2
 800a55c:	4b3b      	ldr	r3, [pc, #236]	; (800a64c <UART_SetConfig+0x2d4>)
 800a55e:	fba3 2301 	umull	r2, r3, r3, r1
 800a562:	095b      	lsrs	r3, r3, #5
 800a564:	2264      	movs	r2, #100	; 0x64
 800a566:	fb02 f303 	mul.w	r3, r2, r3
 800a56a:	1acb      	subs	r3, r1, r3
 800a56c:	00db      	lsls	r3, r3, #3
 800a56e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a572:	4b36      	ldr	r3, [pc, #216]	; (800a64c <UART_SetConfig+0x2d4>)
 800a574:	fba3 2302 	umull	r2, r3, r3, r2
 800a578:	095b      	lsrs	r3, r3, #5
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a580:	441c      	add	r4, r3
 800a582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a586:	2200      	movs	r2, #0
 800a588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a58c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a590:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a594:	4642      	mov	r2, r8
 800a596:	464b      	mov	r3, r9
 800a598:	1891      	adds	r1, r2, r2
 800a59a:	63b9      	str	r1, [r7, #56]	; 0x38
 800a59c:	415b      	adcs	r3, r3
 800a59e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a5a4:	4641      	mov	r1, r8
 800a5a6:	1851      	adds	r1, r2, r1
 800a5a8:	6339      	str	r1, [r7, #48]	; 0x30
 800a5aa:	4649      	mov	r1, r9
 800a5ac:	414b      	adcs	r3, r1
 800a5ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a5b0:	f04f 0200 	mov.w	r2, #0
 800a5b4:	f04f 0300 	mov.w	r3, #0
 800a5b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a5bc:	4659      	mov	r1, fp
 800a5be:	00cb      	lsls	r3, r1, #3
 800a5c0:	4651      	mov	r1, sl
 800a5c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5c6:	4651      	mov	r1, sl
 800a5c8:	00ca      	lsls	r2, r1, #3
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	4642      	mov	r2, r8
 800a5d2:	189b      	adds	r3, r3, r2
 800a5d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a5d8:	464b      	mov	r3, r9
 800a5da:	460a      	mov	r2, r1
 800a5dc:	eb42 0303 	adc.w	r3, r2, r3
 800a5e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a5f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a5f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	18db      	adds	r3, r3, r3
 800a5fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5fe:	4613      	mov	r3, r2
 800a600:	eb42 0303 	adc.w	r3, r2, r3
 800a604:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a60a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a60e:	f7f6 fb3b 	bl	8000c88 <__aeabi_uldivmod>
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <UART_SetConfig+0x2d4>)
 800a618:	fba3 1302 	umull	r1, r3, r3, r2
 800a61c:	095b      	lsrs	r3, r3, #5
 800a61e:	2164      	movs	r1, #100	; 0x64
 800a620:	fb01 f303 	mul.w	r3, r1, r3
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	00db      	lsls	r3, r3, #3
 800a628:	3332      	adds	r3, #50	; 0x32
 800a62a:	4a08      	ldr	r2, [pc, #32]	; (800a64c <UART_SetConfig+0x2d4>)
 800a62c:	fba2 2303 	umull	r2, r3, r2, r3
 800a630:	095b      	lsrs	r3, r3, #5
 800a632:	f003 0207 	and.w	r2, r3, #7
 800a636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4422      	add	r2, r4
 800a63e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a640:	e106      	b.n	800a850 <UART_SetConfig+0x4d8>
 800a642:	bf00      	nop
 800a644:	40011000 	.word	0x40011000
 800a648:	40011400 	.word	0x40011400
 800a64c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a654:	2200      	movs	r2, #0
 800a656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a65a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a65e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a662:	4642      	mov	r2, r8
 800a664:	464b      	mov	r3, r9
 800a666:	1891      	adds	r1, r2, r2
 800a668:	6239      	str	r1, [r7, #32]
 800a66a:	415b      	adcs	r3, r3
 800a66c:	627b      	str	r3, [r7, #36]	; 0x24
 800a66e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a672:	4641      	mov	r1, r8
 800a674:	1854      	adds	r4, r2, r1
 800a676:	4649      	mov	r1, r9
 800a678:	eb43 0501 	adc.w	r5, r3, r1
 800a67c:	f04f 0200 	mov.w	r2, #0
 800a680:	f04f 0300 	mov.w	r3, #0
 800a684:	00eb      	lsls	r3, r5, #3
 800a686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a68a:	00e2      	lsls	r2, r4, #3
 800a68c:	4614      	mov	r4, r2
 800a68e:	461d      	mov	r5, r3
 800a690:	4643      	mov	r3, r8
 800a692:	18e3      	adds	r3, r4, r3
 800a694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a698:	464b      	mov	r3, r9
 800a69a:	eb45 0303 	adc.w	r3, r5, r3
 800a69e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a6a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a6ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a6b2:	f04f 0200 	mov.w	r2, #0
 800a6b6:	f04f 0300 	mov.w	r3, #0
 800a6ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a6be:	4629      	mov	r1, r5
 800a6c0:	008b      	lsls	r3, r1, #2
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	008a      	lsls	r2, r1, #2
 800a6cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a6d0:	f7f6 fada 	bl	8000c88 <__aeabi_uldivmod>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4b60      	ldr	r3, [pc, #384]	; (800a85c <UART_SetConfig+0x4e4>)
 800a6da:	fba3 2302 	umull	r2, r3, r3, r2
 800a6de:	095b      	lsrs	r3, r3, #5
 800a6e0:	011c      	lsls	r4, r3, #4
 800a6e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a6f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a6f4:	4642      	mov	r2, r8
 800a6f6:	464b      	mov	r3, r9
 800a6f8:	1891      	adds	r1, r2, r2
 800a6fa:	61b9      	str	r1, [r7, #24]
 800a6fc:	415b      	adcs	r3, r3
 800a6fe:	61fb      	str	r3, [r7, #28]
 800a700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a704:	4641      	mov	r1, r8
 800a706:	1851      	adds	r1, r2, r1
 800a708:	6139      	str	r1, [r7, #16]
 800a70a:	4649      	mov	r1, r9
 800a70c:	414b      	adcs	r3, r1
 800a70e:	617b      	str	r3, [r7, #20]
 800a710:	f04f 0200 	mov.w	r2, #0
 800a714:	f04f 0300 	mov.w	r3, #0
 800a718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a71c:	4659      	mov	r1, fp
 800a71e:	00cb      	lsls	r3, r1, #3
 800a720:	4651      	mov	r1, sl
 800a722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a726:	4651      	mov	r1, sl
 800a728:	00ca      	lsls	r2, r1, #3
 800a72a:	4610      	mov	r0, r2
 800a72c:	4619      	mov	r1, r3
 800a72e:	4603      	mov	r3, r0
 800a730:	4642      	mov	r2, r8
 800a732:	189b      	adds	r3, r3, r2
 800a734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a738:	464b      	mov	r3, r9
 800a73a:	460a      	mov	r2, r1
 800a73c:	eb42 0303 	adc.w	r3, r2, r3
 800a740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a74e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a750:	f04f 0200 	mov.w	r2, #0
 800a754:	f04f 0300 	mov.w	r3, #0
 800a758:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a75c:	4649      	mov	r1, r9
 800a75e:	008b      	lsls	r3, r1, #2
 800a760:	4641      	mov	r1, r8
 800a762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a766:	4641      	mov	r1, r8
 800a768:	008a      	lsls	r2, r1, #2
 800a76a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a76e:	f7f6 fa8b 	bl	8000c88 <__aeabi_uldivmod>
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	4611      	mov	r1, r2
 800a778:	4b38      	ldr	r3, [pc, #224]	; (800a85c <UART_SetConfig+0x4e4>)
 800a77a:	fba3 2301 	umull	r2, r3, r3, r1
 800a77e:	095b      	lsrs	r3, r3, #5
 800a780:	2264      	movs	r2, #100	; 0x64
 800a782:	fb02 f303 	mul.w	r3, r2, r3
 800a786:	1acb      	subs	r3, r1, r3
 800a788:	011b      	lsls	r3, r3, #4
 800a78a:	3332      	adds	r3, #50	; 0x32
 800a78c:	4a33      	ldr	r2, [pc, #204]	; (800a85c <UART_SetConfig+0x4e4>)
 800a78e:	fba2 2303 	umull	r2, r3, r2, r3
 800a792:	095b      	lsrs	r3, r3, #5
 800a794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a798:	441c      	add	r4, r3
 800a79a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a79e:	2200      	movs	r2, #0
 800a7a0:	673b      	str	r3, [r7, #112]	; 0x70
 800a7a2:	677a      	str	r2, [r7, #116]	; 0x74
 800a7a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a7a8:	4642      	mov	r2, r8
 800a7aa:	464b      	mov	r3, r9
 800a7ac:	1891      	adds	r1, r2, r2
 800a7ae:	60b9      	str	r1, [r7, #8]
 800a7b0:	415b      	adcs	r3, r3
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a7b8:	4641      	mov	r1, r8
 800a7ba:	1851      	adds	r1, r2, r1
 800a7bc:	6039      	str	r1, [r7, #0]
 800a7be:	4649      	mov	r1, r9
 800a7c0:	414b      	adcs	r3, r1
 800a7c2:	607b      	str	r3, [r7, #4]
 800a7c4:	f04f 0200 	mov.w	r2, #0
 800a7c8:	f04f 0300 	mov.w	r3, #0
 800a7cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a7d0:	4659      	mov	r1, fp
 800a7d2:	00cb      	lsls	r3, r1, #3
 800a7d4:	4651      	mov	r1, sl
 800a7d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7da:	4651      	mov	r1, sl
 800a7dc:	00ca      	lsls	r2, r1, #3
 800a7de:	4610      	mov	r0, r2
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	4642      	mov	r2, r8
 800a7e6:	189b      	adds	r3, r3, r2
 800a7e8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7ea:	464b      	mov	r3, r9
 800a7ec:	460a      	mov	r2, r1
 800a7ee:	eb42 0303 	adc.w	r3, r2, r3
 800a7f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	663b      	str	r3, [r7, #96]	; 0x60
 800a7fe:	667a      	str	r2, [r7, #100]	; 0x64
 800a800:	f04f 0200 	mov.w	r2, #0
 800a804:	f04f 0300 	mov.w	r3, #0
 800a808:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a80c:	4649      	mov	r1, r9
 800a80e:	008b      	lsls	r3, r1, #2
 800a810:	4641      	mov	r1, r8
 800a812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a816:	4641      	mov	r1, r8
 800a818:	008a      	lsls	r2, r1, #2
 800a81a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a81e:	f7f6 fa33 	bl	8000c88 <__aeabi_uldivmod>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	4b0d      	ldr	r3, [pc, #52]	; (800a85c <UART_SetConfig+0x4e4>)
 800a828:	fba3 1302 	umull	r1, r3, r3, r2
 800a82c:	095b      	lsrs	r3, r3, #5
 800a82e:	2164      	movs	r1, #100	; 0x64
 800a830:	fb01 f303 	mul.w	r3, r1, r3
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	011b      	lsls	r3, r3, #4
 800a838:	3332      	adds	r3, #50	; 0x32
 800a83a:	4a08      	ldr	r2, [pc, #32]	; (800a85c <UART_SetConfig+0x4e4>)
 800a83c:	fba2 2303 	umull	r2, r3, r2, r3
 800a840:	095b      	lsrs	r3, r3, #5
 800a842:	f003 020f 	and.w	r2, r3, #15
 800a846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4422      	add	r2, r4
 800a84e:	609a      	str	r2, [r3, #8]
}
 800a850:	bf00      	nop
 800a852:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a856:	46bd      	mov	sp, r7
 800a858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a85c:	51eb851f 	.word	0x51eb851f

0800a860 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a864:	4904      	ldr	r1, [pc, #16]	; (800a878 <MX_FATFS_Init+0x18>)
 800a866:	4805      	ldr	r0, [pc, #20]	; (800a87c <MX_FATFS_Init+0x1c>)
 800a868:	f003 f8a8 	bl	800d9bc <FATFS_LinkDriver>
 800a86c:	4603      	mov	r3, r0
 800a86e:	461a      	mov	r2, r3
 800a870:	4b03      	ldr	r3, [pc, #12]	; (800a880 <MX_FATFS_Init+0x20>)
 800a872:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a874:	bf00      	nop
 800a876:	bd80      	pop	{r7, pc}
 800a878:	20002dcc 	.word	0x20002dcc
 800a87c:	20000014 	.word	0x20000014
 800a880:	20002dc8 	.word	0x20002dc8

0800a884 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a884:	b480      	push	{r7}
 800a886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a888:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a89e:	79fb      	ldrb	r3, [r7, #7]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7f9 fb6f 	bl	8003f84 <SD_disk_initialize>
 800a8a6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7f9 fc47 	bl	8004150 <SD_disk_status>
 800a8c2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60b9      	str	r1, [r7, #8]
 800a8d4:	607a      	str	r2, [r7, #4]
 800a8d6:	603b      	str	r3, [r7, #0]
 800a8d8:	4603      	mov	r3, r0
 800a8da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800a8dc:	7bf8      	ldrb	r0, [r7, #15]
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	68b9      	ldr	r1, [r7, #8]
 800a8e4:	f7f9 fc4a 	bl	800417c <SD_disk_read>
 800a8e8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b084      	sub	sp, #16
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	607a      	str	r2, [r7, #4]
 800a8fc:	603b      	str	r3, [r7, #0]
 800a8fe:	4603      	mov	r3, r0
 800a900:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800a902:	7bf8      	ldrb	r0, [r7, #15]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	f7f9 fca1 	bl	8004250 <SD_disk_write>
 800a90e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	4603      	mov	r3, r0
 800a920:	603a      	str	r2, [r7, #0]
 800a922:	71fb      	strb	r3, [r7, #7]
 800a924:	460b      	mov	r3, r1
 800a926:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a928:	79b9      	ldrb	r1, [r7, #6]
 800a92a:	79fb      	ldrb	r3, [r7, #7]
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	4618      	mov	r0, r3
 800a930:	f7f9 fd12 	bl	8004358 <SD_disk_ioctl>
 800a934:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
	...

0800a940 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a94a:	79fb      	ldrb	r3, [r7, #7]
 800a94c:	4a08      	ldr	r2, [pc, #32]	; (800a970 <disk_status+0x30>)
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	79fa      	ldrb	r2, [r7, #7]
 800a958:	4905      	ldr	r1, [pc, #20]	; (800a970 <disk_status+0x30>)
 800a95a:	440a      	add	r2, r1
 800a95c:	7a12      	ldrb	r2, [r2, #8]
 800a95e:	4610      	mov	r0, r2
 800a960:	4798      	blx	r3
 800a962:	4603      	mov	r3, r0
 800a964:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a966:	7bfb      	ldrb	r3, [r7, #15]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	20002ff8 	.word	0x20002ff8

0800a974 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	4603      	mov	r3, r0
 800a97c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	4a0d      	ldr	r2, [pc, #52]	; (800a9bc <disk_initialize+0x48>)
 800a986:	5cd3      	ldrb	r3, [r2, r3]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d111      	bne.n	800a9b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a98c:	79fb      	ldrb	r3, [r7, #7]
 800a98e:	4a0b      	ldr	r2, [pc, #44]	; (800a9bc <disk_initialize+0x48>)
 800a990:	2101      	movs	r1, #1
 800a992:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a994:	79fb      	ldrb	r3, [r7, #7]
 800a996:	4a09      	ldr	r2, [pc, #36]	; (800a9bc <disk_initialize+0x48>)
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	79fa      	ldrb	r2, [r7, #7]
 800a9a2:	4906      	ldr	r1, [pc, #24]	; (800a9bc <disk_initialize+0x48>)
 800a9a4:	440a      	add	r2, r1
 800a9a6:	7a12      	ldrb	r2, [r2, #8]
 800a9a8:	4610      	mov	r0, r2
 800a9aa:	4798      	blx	r3
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20002ff8 	.word	0x20002ff8

0800a9c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a9c0:	b590      	push	{r4, r7, lr}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60b9      	str	r1, [r7, #8]
 800a9c8:	607a      	str	r2, [r7, #4]
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
 800a9d2:	4a0a      	ldr	r2, [pc, #40]	; (800a9fc <disk_read+0x3c>)
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	689c      	ldr	r4, [r3, #8]
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
 800a9de:	4a07      	ldr	r2, [pc, #28]	; (800a9fc <disk_read+0x3c>)
 800a9e0:	4413      	add	r3, r2
 800a9e2:	7a18      	ldrb	r0, [r3, #8]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	68b9      	ldr	r1, [r7, #8]
 800a9ea:	47a0      	blx	r4
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	371c      	adds	r7, #28
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd90      	pop	{r4, r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20002ff8 	.word	0x20002ff8

0800aa00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aa00:	b590      	push	{r4, r7, lr}
 800aa02:	b087      	sub	sp, #28
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60b9      	str	r1, [r7, #8]
 800aa08:	607a      	str	r2, [r7, #4]
 800aa0a:	603b      	str	r3, [r7, #0]
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
 800aa12:	4a0a      	ldr	r2, [pc, #40]	; (800aa3c <disk_write+0x3c>)
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	68dc      	ldr	r4, [r3, #12]
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
 800aa1e:	4a07      	ldr	r2, [pc, #28]	; (800aa3c <disk_write+0x3c>)
 800aa20:	4413      	add	r3, r2
 800aa22:	7a18      	ldrb	r0, [r3, #8]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	68b9      	ldr	r1, [r7, #8]
 800aa2a:	47a0      	blx	r4
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	75fb      	strb	r3, [r7, #23]
  return res;
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd90      	pop	{r4, r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20002ff8 	.word	0x20002ff8

0800aa40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	4603      	mov	r3, r0
 800aa48:	603a      	str	r2, [r7, #0]
 800aa4a:	71fb      	strb	r3, [r7, #7]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aa50:	79fb      	ldrb	r3, [r7, #7]
 800aa52:	4a09      	ldr	r2, [pc, #36]	; (800aa78 <disk_ioctl+0x38>)
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	79fa      	ldrb	r2, [r7, #7]
 800aa5e:	4906      	ldr	r1, [pc, #24]	; (800aa78 <disk_ioctl+0x38>)
 800aa60:	440a      	add	r2, r1
 800aa62:	7a10      	ldrb	r0, [r2, #8]
 800aa64:	79b9      	ldrb	r1, [r7, #6]
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	4798      	blx	r3
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73fb      	strb	r3, [r7, #15]
  return res;
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20002ff8 	.word	0x20002ff8

0800aa7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	3301      	adds	r3, #1
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800aa8c:	89fb      	ldrh	r3, [r7, #14]
 800aa8e:	021b      	lsls	r3, r3, #8
 800aa90:	b21a      	sxth	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	b21b      	sxth	r3, r3
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	b21b      	sxth	r3, r3
 800aa9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aa9e:	89fb      	ldrh	r3, [r7, #14]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	3303      	adds	r3, #3
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	021b      	lsls	r3, r3, #8
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	3202      	adds	r2, #2
 800aac4:	7812      	ldrb	r2, [r2, #0]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	021b      	lsls	r3, r3, #8
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	3201      	adds	r2, #1
 800aad2:	7812      	ldrb	r2, [r2, #0]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	021b      	lsls	r3, r3, #8
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	7812      	ldrb	r2, [r2, #0]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	60fb      	str	r3, [r7, #12]
	return rv;
 800aae4:	68fb      	ldr	r3, [r7, #12]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	460b      	mov	r3, r1
 800aafc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	887a      	ldrh	r2, [r7, #2]
 800ab06:	b2d2      	uxtb	r2, r2
 800ab08:	701a      	strb	r2, [r3, #0]
 800ab0a:	887b      	ldrh	r3, [r7, #2]
 800ab0c:	0a1b      	lsrs	r3, r3, #8
 800ab0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	607a      	str	r2, [r7, #4]
 800ab16:	887a      	ldrh	r2, [r7, #2]
 800ab18:	b2d2      	uxtb	r2, r2
 800ab1a:	701a      	strb	r2, [r3, #0]
}
 800ab1c:	bf00      	nop
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	607a      	str	r2, [r7, #4]
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	b2d2      	uxtb	r2, r2
 800ab3c:	701a      	strb	r2, [r3, #0]
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	0a1b      	lsrs	r3, r3, #8
 800ab42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	1c5a      	adds	r2, r3, #1
 800ab48:	607a      	str	r2, [r7, #4]
 800ab4a:	683a      	ldr	r2, [r7, #0]
 800ab4c:	b2d2      	uxtb	r2, r2
 800ab4e:	701a      	strb	r2, [r3, #0]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	0a1b      	lsrs	r3, r3, #8
 800ab54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	683a      	ldr	r2, [r7, #0]
 800ab5e:	b2d2      	uxtb	r2, r2
 800ab60:	701a      	strb	r2, [r3, #0]
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	0a1b      	lsrs	r3, r3, #8
 800ab66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	1c5a      	adds	r2, r3, #1
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	b2d2      	uxtb	r2, r2
 800ab72:	701a      	strb	r2, [r3, #0]
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ab80:	b480      	push	{r7}
 800ab82:	b087      	sub	sp, #28
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00d      	beq.n	800abb6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	1c53      	adds	r3, r2, #1
 800ab9e:	613b      	str	r3, [r7, #16]
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	1c59      	adds	r1, r3, #1
 800aba4:	6179      	str	r1, [r7, #20]
 800aba6:	7812      	ldrb	r2, [r2, #0]
 800aba8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	3b01      	subs	r3, #1
 800abae:	607b      	str	r3, [r7, #4]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1f1      	bne.n	800ab9a <mem_cpy+0x1a>
	}
}
 800abb6:	bf00      	nop
 800abb8:	371c      	adds	r7, #28
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800abc2:	b480      	push	{r7}
 800abc4:	b087      	sub	sp, #28
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	60f8      	str	r0, [r7, #12]
 800abca:	60b9      	str	r1, [r7, #8]
 800abcc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	1c5a      	adds	r2, r3, #1
 800abd6:	617a      	str	r2, [r7, #20]
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	b2d2      	uxtb	r2, r2
 800abdc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	3b01      	subs	r3, #1
 800abe2:	607b      	str	r3, [r7, #4]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1f3      	bne.n	800abd2 <mem_set+0x10>
}
 800abea:	bf00      	nop
 800abec:	bf00      	nop
 800abee:	371c      	adds	r7, #28
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800abf8:	b480      	push	{r7}
 800abfa:	b089      	sub	sp, #36	; 0x24
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	61fb      	str	r3, [r7, #28]
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	61fa      	str	r2, [r7, #28]
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	4619      	mov	r1, r3
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	1c5a      	adds	r2, r3, #1
 800ac1e:	61ba      	str	r2, [r7, #24]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	1acb      	subs	r3, r1, r3
 800ac24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	607b      	str	r3, [r7, #4]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <mem_cmp+0x40>
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d0eb      	beq.n	800ac10 <mem_cmp+0x18>

	return r;
 800ac38:	697b      	ldr	r3, [r7, #20]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3724      	adds	r7, #36	; 0x24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ac46:	b480      	push	{r7}
 800ac48:	b083      	sub	sp, #12
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ac50:	e002      	b.n	800ac58 <chk_chr+0x12>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	3301      	adds	r3, #1
 800ac56:	607b      	str	r3, [r7, #4]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d005      	beq.n	800ac6c <chk_chr+0x26>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	461a      	mov	r2, r3
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d1f2      	bne.n	800ac52 <chk_chr+0xc>
	return *str;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ac86:	2300      	movs	r3, #0
 800ac88:	60bb      	str	r3, [r7, #8]
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	60fb      	str	r3, [r7, #12]
 800ac8e:	e029      	b.n	800ace4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ac90:	4a27      	ldr	r2, [pc, #156]	; (800ad30 <chk_lock+0xb4>)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	011b      	lsls	r3, r3, #4
 800ac96:	4413      	add	r3, r2
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d01d      	beq.n	800acda <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ac9e:	4a24      	ldr	r2, [pc, #144]	; (800ad30 <chk_lock+0xb4>)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	011b      	lsls	r3, r3, #4
 800aca4:	4413      	add	r3, r2
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	429a      	cmp	r2, r3
 800acae:	d116      	bne.n	800acde <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800acb0:	4a1f      	ldr	r2, [pc, #124]	; (800ad30 <chk_lock+0xb4>)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	011b      	lsls	r3, r3, #4
 800acb6:	4413      	add	r3, r2
 800acb8:	3304      	adds	r3, #4
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d10c      	bne.n	800acde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800acc4:	4a1a      	ldr	r2, [pc, #104]	; (800ad30 <chk_lock+0xb4>)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	011b      	lsls	r3, r3, #4
 800acca:	4413      	add	r3, r2
 800accc:	3308      	adds	r3, #8
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d102      	bne.n	800acde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800acd8:	e007      	b.n	800acea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800acda:	2301      	movs	r3, #1
 800acdc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3301      	adds	r3, #1
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d9d2      	bls.n	800ac90 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b02      	cmp	r3, #2
 800acee:	d109      	bne.n	800ad04 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <chk_lock+0x80>
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d101      	bne.n	800ad00 <chk_lock+0x84>
 800acfc:	2300      	movs	r3, #0
 800acfe:	e010      	b.n	800ad22 <chk_lock+0xa6>
 800ad00:	2312      	movs	r3, #18
 800ad02:	e00e      	b.n	800ad22 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d108      	bne.n	800ad1c <chk_lock+0xa0>
 800ad0a:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <chk_lock+0xb4>)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	011b      	lsls	r3, r3, #4
 800ad10:	4413      	add	r3, r2
 800ad12:	330c      	adds	r3, #12
 800ad14:	881b      	ldrh	r3, [r3, #0]
 800ad16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad1a:	d101      	bne.n	800ad20 <chk_lock+0xa4>
 800ad1c:	2310      	movs	r3, #16
 800ad1e:	e000      	b.n	800ad22 <chk_lock+0xa6>
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	20002dd8 	.word	0x20002dd8

0800ad34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	607b      	str	r3, [r7, #4]
 800ad3e:	e002      	b.n	800ad46 <enq_lock+0x12>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3301      	adds	r3, #1
 800ad44:	607b      	str	r3, [r7, #4]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d806      	bhi.n	800ad5a <enq_lock+0x26>
 800ad4c:	4a09      	ldr	r2, [pc, #36]	; (800ad74 <enq_lock+0x40>)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	011b      	lsls	r3, r3, #4
 800ad52:	4413      	add	r3, r2
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1f2      	bne.n	800ad40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	bf14      	ite	ne
 800ad60:	2301      	movne	r3, #1
 800ad62:	2300      	moveq	r3, #0
 800ad64:	b2db      	uxtb	r3, r3
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	370c      	adds	r7, #12
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	20002dd8 	.word	0x20002dd8

0800ad78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ad82:	2300      	movs	r3, #0
 800ad84:	60fb      	str	r3, [r7, #12]
 800ad86:	e01f      	b.n	800adc8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ad88:	4a41      	ldr	r2, [pc, #260]	; (800ae90 <inc_lock+0x118>)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	011b      	lsls	r3, r3, #4
 800ad8e:	4413      	add	r3, r2
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d113      	bne.n	800adc2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ad9a:	4a3d      	ldr	r2, [pc, #244]	; (800ae90 <inc_lock+0x118>)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	011b      	lsls	r3, r3, #4
 800ada0:	4413      	add	r3, r2
 800ada2:	3304      	adds	r3, #4
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800adaa:	429a      	cmp	r2, r3
 800adac:	d109      	bne.n	800adc2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800adae:	4a38      	ldr	r2, [pc, #224]	; (800ae90 <inc_lock+0x118>)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	011b      	lsls	r3, r3, #4
 800adb4:	4413      	add	r3, r2
 800adb6:	3308      	adds	r3, #8
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d006      	beq.n	800add0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3301      	adds	r3, #1
 800adc6:	60fb      	str	r3, [r7, #12]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d9dc      	bls.n	800ad88 <inc_lock+0x10>
 800adce:	e000      	b.n	800add2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800add0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d132      	bne.n	800ae3e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800add8:	2300      	movs	r3, #0
 800adda:	60fb      	str	r3, [r7, #12]
 800addc:	e002      	b.n	800ade4 <inc_lock+0x6c>
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3301      	adds	r3, #1
 800ade2:	60fb      	str	r3, [r7, #12]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d806      	bhi.n	800adf8 <inc_lock+0x80>
 800adea:	4a29      	ldr	r2, [pc, #164]	; (800ae90 <inc_lock+0x118>)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	011b      	lsls	r3, r3, #4
 800adf0:	4413      	add	r3, r2
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1f2      	bne.n	800adde <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d101      	bne.n	800ae02 <inc_lock+0x8a>
 800adfe:	2300      	movs	r3, #0
 800ae00:	e040      	b.n	800ae84 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	4922      	ldr	r1, [pc, #136]	; (800ae90 <inc_lock+0x118>)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	011b      	lsls	r3, r3, #4
 800ae0c:	440b      	add	r3, r1
 800ae0e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	689a      	ldr	r2, [r3, #8]
 800ae14:	491e      	ldr	r1, [pc, #120]	; (800ae90 <inc_lock+0x118>)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	011b      	lsls	r3, r3, #4
 800ae1a:	440b      	add	r3, r1
 800ae1c:	3304      	adds	r3, #4
 800ae1e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	695a      	ldr	r2, [r3, #20]
 800ae24:	491a      	ldr	r1, [pc, #104]	; (800ae90 <inc_lock+0x118>)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	011b      	lsls	r3, r3, #4
 800ae2a:	440b      	add	r3, r1
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ae30:	4a17      	ldr	r2, [pc, #92]	; (800ae90 <inc_lock+0x118>)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	4413      	add	r3, r2
 800ae38:	330c      	adds	r3, #12
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d009      	beq.n	800ae58 <inc_lock+0xe0>
 800ae44:	4a12      	ldr	r2, [pc, #72]	; (800ae90 <inc_lock+0x118>)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	011b      	lsls	r3, r3, #4
 800ae4a:	4413      	add	r3, r2
 800ae4c:	330c      	adds	r3, #12
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d001      	beq.n	800ae58 <inc_lock+0xe0>
 800ae54:	2300      	movs	r3, #0
 800ae56:	e015      	b.n	800ae84 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d108      	bne.n	800ae70 <inc_lock+0xf8>
 800ae5e:	4a0c      	ldr	r2, [pc, #48]	; (800ae90 <inc_lock+0x118>)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	011b      	lsls	r3, r3, #4
 800ae64:	4413      	add	r3, r2
 800ae66:	330c      	adds	r3, #12
 800ae68:	881b      	ldrh	r3, [r3, #0]
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	e001      	b.n	800ae74 <inc_lock+0xfc>
 800ae70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae74:	4906      	ldr	r1, [pc, #24]	; (800ae90 <inc_lock+0x118>)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	011b      	lsls	r3, r3, #4
 800ae7a:	440b      	add	r3, r1
 800ae7c:	330c      	adds	r3, #12
 800ae7e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3301      	adds	r3, #1
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr
 800ae90:	20002dd8 	.word	0x20002dd8

0800ae94 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	607b      	str	r3, [r7, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d825      	bhi.n	800aef4 <dec_lock+0x60>
		n = Files[i].ctr;
 800aea8:	4a17      	ldr	r2, [pc, #92]	; (800af08 <dec_lock+0x74>)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	011b      	lsls	r3, r3, #4
 800aeae:	4413      	add	r3, r2
 800aeb0:	330c      	adds	r3, #12
 800aeb2:	881b      	ldrh	r3, [r3, #0]
 800aeb4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aeb6:	89fb      	ldrh	r3, [r7, #14]
 800aeb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aebc:	d101      	bne.n	800aec2 <dec_lock+0x2e>
 800aebe:	2300      	movs	r3, #0
 800aec0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aec2:	89fb      	ldrh	r3, [r7, #14]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d002      	beq.n	800aece <dec_lock+0x3a>
 800aec8:	89fb      	ldrh	r3, [r7, #14]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aece:	4a0e      	ldr	r2, [pc, #56]	; (800af08 <dec_lock+0x74>)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	4413      	add	r3, r2
 800aed6:	330c      	adds	r3, #12
 800aed8:	89fa      	ldrh	r2, [r7, #14]
 800aeda:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aedc:	89fb      	ldrh	r3, [r7, #14]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d105      	bne.n	800aeee <dec_lock+0x5a>
 800aee2:	4a09      	ldr	r2, [pc, #36]	; (800af08 <dec_lock+0x74>)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	011b      	lsls	r3, r3, #4
 800aee8:	4413      	add	r3, r2
 800aeea:	2200      	movs	r2, #0
 800aeec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	737b      	strb	r3, [r7, #13]
 800aef2:	e001      	b.n	800aef8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aef4:	2302      	movs	r3, #2
 800aef6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aef8:	7b7b      	ldrb	r3, [r7, #13]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	20002dd8 	.word	0x20002dd8

0800af0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800af14:	2300      	movs	r3, #0
 800af16:	60fb      	str	r3, [r7, #12]
 800af18:	e010      	b.n	800af3c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800af1a:	4a0d      	ldr	r2, [pc, #52]	; (800af50 <clear_lock+0x44>)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	011b      	lsls	r3, r3, #4
 800af20:	4413      	add	r3, r2
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	429a      	cmp	r2, r3
 800af28:	d105      	bne.n	800af36 <clear_lock+0x2a>
 800af2a:	4a09      	ldr	r2, [pc, #36]	; (800af50 <clear_lock+0x44>)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	011b      	lsls	r3, r3, #4
 800af30:	4413      	add	r3, r2
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3301      	adds	r3, #1
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d9eb      	bls.n	800af1a <clear_lock+0xe>
	}
}
 800af42:	bf00      	nop
 800af44:	bf00      	nop
 800af46:	3714      	adds	r7, #20
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	20002dd8 	.word	0x20002dd8

0800af54 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	78db      	ldrb	r3, [r3, #3]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d034      	beq.n	800afd2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7858      	ldrb	r0, [r3, #1]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800af78:	2301      	movs	r3, #1
 800af7a:	697a      	ldr	r2, [r7, #20]
 800af7c:	f7ff fd40 	bl	800aa00 <disk_write>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d002      	beq.n	800af8c <sync_window+0x38>
			res = FR_DISK_ERR;
 800af86:	2301      	movs	r3, #1
 800af88:	73fb      	strb	r3, [r7, #15]
 800af8a:	e022      	b.n	800afd2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	1ad2      	subs	r2, r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d217      	bcs.n	800afd2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	789b      	ldrb	r3, [r3, #2]
 800afa6:	613b      	str	r3, [r7, #16]
 800afa8:	e010      	b.n	800afcc <sync_window+0x78>
					wsect += fs->fsize;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a1b      	ldr	r3, [r3, #32]
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	4413      	add	r3, r2
 800afb2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	7858      	ldrb	r0, [r3, #1]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800afbe:	2301      	movs	r3, #1
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	f7ff fd1d 	bl	800aa00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	3b01      	subs	r3, #1
 800afca:	613b      	str	r3, [r7, #16]
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d8eb      	bhi.n	800afaa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d01b      	beq.n	800b02c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f7ff ffad 	bl	800af54 <sync_window>
 800affa:	4603      	mov	r3, r0
 800affc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d113      	bne.n	800b02c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	7858      	ldrb	r0, [r3, #1]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b00e:	2301      	movs	r3, #1
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	f7ff fcd5 	bl	800a9c0 <disk_read>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d004      	beq.n	800b026 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b020:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b022:	2301      	movs	r3, #1
 800b024:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	683a      	ldr	r2, [r7, #0]
 800b02a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7ff ff87 	bl	800af54 <sync_window>
 800b046:	4603      	mov	r3, r0
 800b048:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d159      	bne.n	800b104 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	2b03      	cmp	r3, #3
 800b056:	d149      	bne.n	800b0ec <sync_fs+0xb4>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	791b      	ldrb	r3, [r3, #4]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d145      	bne.n	800b0ec <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	899b      	ldrh	r3, [r3, #12]
 800b06a:	461a      	mov	r2, r3
 800b06c:	2100      	movs	r1, #0
 800b06e:	f7ff fda8 	bl	800abc2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3338      	adds	r3, #56	; 0x38
 800b076:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b07a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b07e:	4618      	mov	r0, r3
 800b080:	f7ff fd37 	bl	800aaf2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	3338      	adds	r3, #56	; 0x38
 800b088:	4921      	ldr	r1, [pc, #132]	; (800b110 <sync_fs+0xd8>)
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7ff fd4c 	bl	800ab28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	3338      	adds	r3, #56	; 0x38
 800b094:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b098:	491e      	ldr	r1, [pc, #120]	; (800b114 <sync_fs+0xdc>)
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7ff fd44 	bl	800ab28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	3338      	adds	r3, #56	; 0x38
 800b0a4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	f7ff fd3a 	bl	800ab28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	3338      	adds	r3, #56	; 0x38
 800b0b8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	4610      	mov	r0, r2
 800b0c4:	f7ff fd30 	bl	800ab28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0cc:	1c5a      	adds	r2, r3, #1
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	7858      	ldrb	r0, [r3, #1]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	f7ff fc8d 	bl	800aa00 <disk_write>
			fs->fsi_flag = 0;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	785b      	ldrb	r3, [r3, #1]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff fca3 	bl	800aa40 <disk_ioctl>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <sync_fs+0xcc>
 800b100:	2301      	movs	r3, #1
 800b102:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	41615252 	.word	0x41615252
 800b114:	61417272 	.word	0x61417272

0800b118 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	3b02      	subs	r3, #2
 800b126:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	3b02      	subs	r3, #2
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	429a      	cmp	r2, r3
 800b132:	d301      	bcc.n	800b138 <clust2sect+0x20>
 800b134:	2300      	movs	r3, #0
 800b136:	e008      	b.n	800b14a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	895b      	ldrh	r3, [r3, #10]
 800b13c:	461a      	mov	r2, r3
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	fb03 f202 	mul.w	r2, r3, r2
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b148:	4413      	add	r3, r2
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	370c      	adds	r7, #12
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b086      	sub	sp, #24
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d904      	bls.n	800b176 <get_fat+0x20>
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	429a      	cmp	r2, r3
 800b174:	d302      	bcc.n	800b17c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b176:	2301      	movs	r3, #1
 800b178:	617b      	str	r3, [r7, #20]
 800b17a:	e0bb      	b.n	800b2f4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b17c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b180:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	2b03      	cmp	r3, #3
 800b188:	f000 8083 	beq.w	800b292 <get_fat+0x13c>
 800b18c:	2b03      	cmp	r3, #3
 800b18e:	f300 80a7 	bgt.w	800b2e0 <get_fat+0x18a>
 800b192:	2b01      	cmp	r3, #1
 800b194:	d002      	beq.n	800b19c <get_fat+0x46>
 800b196:	2b02      	cmp	r3, #2
 800b198:	d056      	beq.n	800b248 <get_fat+0xf2>
 800b19a:	e0a1      	b.n	800b2e0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	085b      	lsrs	r3, r3, #1
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	899b      	ldrh	r3, [r3, #12]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1ba:	4413      	add	r3, r2
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6938      	ldr	r0, [r7, #16]
 800b1c0:	f7ff ff0c 	bl	800afdc <move_window>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f040 808d 	bne.w	800b2e6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	60fa      	str	r2, [r7, #12]
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	8992      	ldrh	r2, [r2, #12]
 800b1d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1da:	fb01 f202 	mul.w	r2, r1, r2
 800b1de:	1a9b      	subs	r3, r3, r2
 800b1e0:	693a      	ldr	r2, [r7, #16]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b1e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	899b      	ldrh	r3, [r3, #12]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1fa:	4413      	add	r3, r2
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6938      	ldr	r0, [r7, #16]
 800b200:	f7ff feec 	bl	800afdc <move_window>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d16f      	bne.n	800b2ea <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	899b      	ldrh	r3, [r3, #12]
 800b20e:	461a      	mov	r2, r3
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	fbb3 f1f2 	udiv	r1, r3, r2
 800b216:	fb01 f202 	mul.w	r2, r1, r2
 800b21a:	1a9b      	subs	r3, r3, r2
 800b21c:	693a      	ldr	r2, [r7, #16]
 800b21e:	4413      	add	r3, r2
 800b220:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b224:	021b      	lsls	r3, r3, #8
 800b226:	461a      	mov	r2, r3
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <get_fat+0xe8>
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	091b      	lsrs	r3, r3, #4
 800b23c:	e002      	b.n	800b244 <get_fat+0xee>
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b244:	617b      	str	r3, [r7, #20]
			break;
 800b246:	e055      	b.n	800b2f4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	899b      	ldrh	r3, [r3, #12]
 800b250:	085b      	lsrs	r3, r3, #1
 800b252:	b29b      	uxth	r3, r3
 800b254:	4619      	mov	r1, r3
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	fbb3 f3f1 	udiv	r3, r3, r1
 800b25c:	4413      	add	r3, r2
 800b25e:	4619      	mov	r1, r3
 800b260:	6938      	ldr	r0, [r7, #16]
 800b262:	f7ff febb 	bl	800afdc <move_window>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d140      	bne.n	800b2ee <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	8992      	ldrh	r2, [r2, #12]
 800b27a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b27e:	fb00 f202 	mul.w	r2, r0, r2
 800b282:	1a9b      	subs	r3, r3, r2
 800b284:	440b      	add	r3, r1
 800b286:	4618      	mov	r0, r3
 800b288:	f7ff fbf8 	bl	800aa7c <ld_word>
 800b28c:	4603      	mov	r3, r0
 800b28e:	617b      	str	r3, [r7, #20]
			break;
 800b290:	e030      	b.n	800b2f4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	899b      	ldrh	r3, [r3, #12]
 800b29a:	089b      	lsrs	r3, r3, #2
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	4619      	mov	r1, r3
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2a6:	4413      	add	r3, r2
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6938      	ldr	r0, [r7, #16]
 800b2ac:	f7ff fe96 	bl	800afdc <move_window>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d11d      	bne.n	800b2f2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	8992      	ldrh	r2, [r2, #12]
 800b2c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2c8:	fb00 f202 	mul.w	r2, r0, r2
 800b2cc:	1a9b      	subs	r3, r3, r2
 800b2ce:	440b      	add	r3, r1
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7ff fbeb 	bl	800aaac <ld_dword>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b2dc:	617b      	str	r3, [r7, #20]
			break;
 800b2de:	e009      	b.n	800b2f4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	617b      	str	r3, [r7, #20]
 800b2e4:	e006      	b.n	800b2f4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2e6:	bf00      	nop
 800b2e8:	e004      	b.n	800b2f4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2ea:	bf00      	nop
 800b2ec:	e002      	b.n	800b2f4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b2ee:	bf00      	nop
 800b2f0:	e000      	b.n	800b2f4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b2f2:	bf00      	nop
		}
	}

	return val;
 800b2f4:	697b      	ldr	r3, [r7, #20]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b2fe:	b590      	push	{r4, r7, lr}
 800b300:	b089      	sub	sp, #36	; 0x24
 800b302:	af00      	add	r7, sp, #0
 800b304:	60f8      	str	r0, [r7, #12]
 800b306:	60b9      	str	r1, [r7, #8]
 800b308:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b30a:	2302      	movs	r3, #2
 800b30c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	2b01      	cmp	r3, #1
 800b312:	f240 8109 	bls.w	800b528 <put_fat+0x22a>
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	69db      	ldr	r3, [r3, #28]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	f080 8103 	bcs.w	800b528 <put_fat+0x22a>
		switch (fs->fs_type) {
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	2b03      	cmp	r3, #3
 800b328:	f000 80b6 	beq.w	800b498 <put_fat+0x19a>
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	f300 80fb 	bgt.w	800b528 <put_fat+0x22a>
 800b332:	2b01      	cmp	r3, #1
 800b334:	d003      	beq.n	800b33e <put_fat+0x40>
 800b336:	2b02      	cmp	r3, #2
 800b338:	f000 8083 	beq.w	800b442 <put_fat+0x144>
 800b33c:	e0f4      	b.n	800b528 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	61bb      	str	r3, [r7, #24]
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	085b      	lsrs	r3, r3, #1
 800b346:	69ba      	ldr	r2, [r7, #24]
 800b348:	4413      	add	r3, r2
 800b34a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	899b      	ldrh	r3, [r3, #12]
 800b354:	4619      	mov	r1, r3
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	fbb3 f3f1 	udiv	r3, r3, r1
 800b35c:	4413      	add	r3, r2
 800b35e:	4619      	mov	r1, r3
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f7ff fe3b 	bl	800afdc <move_window>
 800b366:	4603      	mov	r3, r0
 800b368:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b36a:	7ffb      	ldrb	r3, [r7, #31]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f040 80d4 	bne.w	800b51a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	1c5a      	adds	r2, r3, #1
 800b37c:	61ba      	str	r2, [r7, #24]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	8992      	ldrh	r2, [r2, #12]
 800b382:	fbb3 f0f2 	udiv	r0, r3, r2
 800b386:	fb00 f202 	mul.w	r2, r0, r2
 800b38a:	1a9b      	subs	r3, r3, r2
 800b38c:	440b      	add	r3, r1
 800b38e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	f003 0301 	and.w	r3, r3, #1
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00d      	beq.n	800b3b6 <put_fat+0xb8>
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	b25b      	sxtb	r3, r3
 800b3a0:	f003 030f 	and.w	r3, r3, #15
 800b3a4:	b25a      	sxtb	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	011b      	lsls	r3, r3, #4
 800b3ac:	b25b      	sxtb	r3, r3
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	b25b      	sxtb	r3, r3
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	e001      	b.n	800b3ba <put_fat+0xbc>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	697a      	ldr	r2, [r7, #20]
 800b3bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	899b      	ldrh	r3, [r3, #12]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3d4:	4413      	add	r3, r2
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f7ff fdff 	bl	800afdc <move_window>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3e2:	7ffb      	ldrb	r3, [r7, #31]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f040 809a 	bne.w	800b51e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	899b      	ldrh	r3, [r3, #12]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3fc:	fb00 f202 	mul.w	r2, r0, r2
 800b400:	1a9b      	subs	r3, r3, r2
 800b402:	440b      	add	r3, r1
 800b404:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	f003 0301 	and.w	r3, r3, #1
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d003      	beq.n	800b418 <put_fat+0x11a>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	091b      	lsrs	r3, r3, #4
 800b414:	b2db      	uxtb	r3, r3
 800b416:	e00e      	b.n	800b436 <put_fat+0x138>
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	b25b      	sxtb	r3, r3
 800b41e:	f023 030f 	bic.w	r3, r3, #15
 800b422:	b25a      	sxtb	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	0a1b      	lsrs	r3, r3, #8
 800b428:	b25b      	sxtb	r3, r3
 800b42a:	f003 030f 	and.w	r3, r3, #15
 800b42e:	b25b      	sxtb	r3, r3
 800b430:	4313      	orrs	r3, r2
 800b432:	b25b      	sxtb	r3, r3
 800b434:	b2db      	uxtb	r3, r3
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2201      	movs	r2, #1
 800b43e:	70da      	strb	r2, [r3, #3]
			break;
 800b440:	e072      	b.n	800b528 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	899b      	ldrh	r3, [r3, #12]
 800b44a:	085b      	lsrs	r3, r3, #1
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	4619      	mov	r1, r3
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	fbb3 f3f1 	udiv	r3, r3, r1
 800b456:	4413      	add	r3, r2
 800b458:	4619      	mov	r1, r3
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f7ff fdbe 	bl	800afdc <move_window>
 800b460:	4603      	mov	r3, r0
 800b462:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b464:	7ffb      	ldrb	r3, [r7, #31]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d15b      	bne.n	800b522 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	005b      	lsls	r3, r3, #1
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	8992      	ldrh	r2, [r2, #12]
 800b478:	fbb3 f0f2 	udiv	r0, r3, r2
 800b47c:	fb00 f202 	mul.w	r2, r0, r2
 800b480:	1a9b      	subs	r3, r3, r2
 800b482:	440b      	add	r3, r1
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	b292      	uxth	r2, r2
 800b488:	4611      	mov	r1, r2
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7ff fb31 	bl	800aaf2 <st_word>
			fs->wflag = 1;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2201      	movs	r2, #1
 800b494:	70da      	strb	r2, [r3, #3]
			break;
 800b496:	e047      	b.n	800b528 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	899b      	ldrh	r3, [r3, #12]
 800b4a0:	089b      	lsrs	r3, r3, #2
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4ac:	4413      	add	r3, r2
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f7ff fd93 	bl	800afdc <move_window>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4ba:	7ffb      	ldrb	r3, [r7, #31]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d132      	bne.n	800b526 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	8992      	ldrh	r2, [r2, #12]
 800b4d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4d8:	fb00 f202 	mul.w	r2, r0, r2
 800b4dc:	1a9b      	subs	r3, r3, r2
 800b4de:	440b      	add	r3, r1
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7ff fae3 	bl	800aaac <ld_dword>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b4ec:	4323      	orrs	r3, r4
 800b4ee:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	8992      	ldrh	r2, [r2, #12]
 800b4fe:	fbb3 f0f2 	udiv	r0, r3, r2
 800b502:	fb00 f202 	mul.w	r2, r0, r2
 800b506:	1a9b      	subs	r3, r3, r2
 800b508:	440b      	add	r3, r1
 800b50a:	6879      	ldr	r1, [r7, #4]
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7ff fb0b 	bl	800ab28 <st_dword>
			fs->wflag = 1;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2201      	movs	r2, #1
 800b516:	70da      	strb	r2, [r3, #3]
			break;
 800b518:	e006      	b.n	800b528 <put_fat+0x22a>
			if (res != FR_OK) break;
 800b51a:	bf00      	nop
 800b51c:	e004      	b.n	800b528 <put_fat+0x22a>
			if (res != FR_OK) break;
 800b51e:	bf00      	nop
 800b520:	e002      	b.n	800b528 <put_fat+0x22a>
			if (res != FR_OK) break;
 800b522:	bf00      	nop
 800b524:	e000      	b.n	800b528 <put_fat+0x22a>
			if (res != FR_OK) break;
 800b526:	bf00      	nop
		}
	}
	return res;
 800b528:	7ffb      	ldrb	r3, [r7, #31]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3724      	adds	r7, #36	; 0x24
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd90      	pop	{r4, r7, pc}

0800b532 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b088      	sub	sp, #32
 800b536:	af00      	add	r7, sp, #0
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	60b9      	str	r1, [r7, #8]
 800b53c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d904      	bls.n	800b558 <remove_chain+0x26>
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	429a      	cmp	r2, r3
 800b556:	d301      	bcc.n	800b55c <remove_chain+0x2a>
 800b558:	2302      	movs	r3, #2
 800b55a:	e04b      	b.n	800b5f4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00c      	beq.n	800b57c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	69b8      	ldr	r0, [r7, #24]
 800b56a:	f7ff fec8 	bl	800b2fe <put_fat>
 800b56e:	4603      	mov	r3, r0
 800b570:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b572:	7ffb      	ldrb	r3, [r7, #31]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <remove_chain+0x4a>
 800b578:	7ffb      	ldrb	r3, [r7, #31]
 800b57a:	e03b      	b.n	800b5f4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b57c:	68b9      	ldr	r1, [r7, #8]
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f7ff fde9 	bl	800b156 <get_fat>
 800b584:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d031      	beq.n	800b5f0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d101      	bne.n	800b596 <remove_chain+0x64>
 800b592:	2302      	movs	r3, #2
 800b594:	e02e      	b.n	800b5f4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b59c:	d101      	bne.n	800b5a2 <remove_chain+0x70>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e028      	b.n	800b5f4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	68b9      	ldr	r1, [r7, #8]
 800b5a6:	69b8      	ldr	r0, [r7, #24]
 800b5a8:	f7ff fea9 	bl	800b2fe <put_fat>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b5b0:	7ffb      	ldrb	r3, [r7, #31]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d001      	beq.n	800b5ba <remove_chain+0x88>
 800b5b6:	7ffb      	ldrb	r3, [r7, #31]
 800b5b8:	e01c      	b.n	800b5f4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	699a      	ldr	r2, [r3, #24]
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	69db      	ldr	r3, [r3, #28]
 800b5c2:	3b02      	subs	r3, #2
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d20b      	bcs.n	800b5e0 <remove_chain+0xae>
			fs->free_clst++;
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	1c5a      	adds	r2, r3, #1
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	791b      	ldrb	r3, [r3, #4]
 800b5d6:	f043 0301 	orr.w	r3, r3, #1
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b5e4:	69bb      	ldr	r3, [r7, #24]
 800b5e6:	69db      	ldr	r3, [r3, #28]
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d3c6      	bcc.n	800b57c <remove_chain+0x4a>
 800b5ee:	e000      	b.n	800b5f2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b5f0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3720      	adds	r7, #32
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10d      	bne.n	800b62e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	695b      	ldr	r3, [r3, #20]
 800b616:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d004      	beq.n	800b628 <create_chain+0x2c>
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	69ba      	ldr	r2, [r7, #24]
 800b624:	429a      	cmp	r2, r3
 800b626:	d31b      	bcc.n	800b660 <create_chain+0x64>
 800b628:	2301      	movs	r3, #1
 800b62a:	61bb      	str	r3, [r7, #24]
 800b62c:	e018      	b.n	800b660 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f7ff fd90 	bl	800b156 <get_fat>
 800b636:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d801      	bhi.n	800b642 <create_chain+0x46>
 800b63e:	2301      	movs	r3, #1
 800b640:	e070      	b.n	800b724 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b648:	d101      	bne.n	800b64e <create_chain+0x52>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	e06a      	b.n	800b724 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	69db      	ldr	r3, [r3, #28]
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	429a      	cmp	r2, r3
 800b656:	d201      	bcs.n	800b65c <create_chain+0x60>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	e063      	b.n	800b724 <create_chain+0x128>
		scl = clst;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	3301      	adds	r3, #1
 800b668:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	69db      	ldr	r3, [r3, #28]
 800b66e:	69fa      	ldr	r2, [r7, #28]
 800b670:	429a      	cmp	r2, r3
 800b672:	d307      	bcc.n	800b684 <create_chain+0x88>
				ncl = 2;
 800b674:	2302      	movs	r3, #2
 800b676:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b678:	69fa      	ldr	r2, [r7, #28]
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d901      	bls.n	800b684 <create_chain+0x88>
 800b680:	2300      	movs	r3, #0
 800b682:	e04f      	b.n	800b724 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b684:	69f9      	ldr	r1, [r7, #28]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff fd65 	bl	800b156 <get_fat>
 800b68c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00e      	beq.n	800b6b2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d003      	beq.n	800b6a2 <create_chain+0xa6>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6a0:	d101      	bne.n	800b6a6 <create_chain+0xaa>
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	e03e      	b.n	800b724 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b6a6:	69fa      	ldr	r2, [r7, #28]
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d1da      	bne.n	800b664 <create_chain+0x68>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e038      	b.n	800b724 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b6b2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b6b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6b8:	69f9      	ldr	r1, [r7, #28]
 800b6ba:	6938      	ldr	r0, [r7, #16]
 800b6bc:	f7ff fe1f 	bl	800b2fe <put_fat>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b6c4:	7dfb      	ldrb	r3, [r7, #23]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d109      	bne.n	800b6de <create_chain+0xe2>
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d006      	beq.n	800b6de <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b6d0:	69fa      	ldr	r2, [r7, #28]
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6938      	ldr	r0, [r7, #16]
 800b6d6:	f7ff fe12 	bl	800b2fe <put_fat>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b6de:	7dfb      	ldrb	r3, [r7, #23]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d116      	bne.n	800b712 <create_chain+0x116>
		fs->last_clst = ncl;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	69fa      	ldr	r2, [r7, #28]
 800b6e8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	699a      	ldr	r2, [r3, #24]
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	69db      	ldr	r3, [r3, #28]
 800b6f2:	3b02      	subs	r3, #2
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d804      	bhi.n	800b702 <create_chain+0x106>
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	1e5a      	subs	r2, r3, #1
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	791b      	ldrb	r3, [r3, #4]
 800b706:	f043 0301 	orr.w	r3, r3, #1
 800b70a:	b2da      	uxtb	r2, r3
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	711a      	strb	r2, [r3, #4]
 800b710:	e007      	b.n	800b722 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b712:	7dfb      	ldrb	r3, [r7, #23]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d102      	bne.n	800b71e <create_chain+0x122>
 800b718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b71c:	e000      	b.n	800b720 <create_chain+0x124>
 800b71e:	2301      	movs	r3, #1
 800b720:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b722:	69fb      	ldr	r3, [r7, #28]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3720      	adds	r7, #32
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b087      	sub	sp, #28
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b740:	3304      	adds	r3, #4
 800b742:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	899b      	ldrh	r3, [r3, #12]
 800b748:	461a      	mov	r2, r3
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	8952      	ldrh	r2, [r2, #10]
 800b754:	fbb3 f3f2 	udiv	r3, r3, r2
 800b758:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	1d1a      	adds	r2, r3, #4
 800b75e:	613a      	str	r2, [r7, #16]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <clmt_clust+0x42>
 800b76a:	2300      	movs	r3, #0
 800b76c:	e010      	b.n	800b790 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	429a      	cmp	r2, r3
 800b774:	d307      	bcc.n	800b786 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b776:	697a      	ldr	r2, [r7, #20]
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	617b      	str	r3, [r7, #20]
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	3304      	adds	r3, #4
 800b782:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b784:	e7e9      	b.n	800b75a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b786:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	4413      	add	r3, r2
}
 800b790:	4618      	mov	r0, r3
 800b792:	371c      	adds	r7, #28
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7b2:	d204      	bcs.n	800b7be <dir_sdi+0x22>
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	f003 031f 	and.w	r3, r3, #31
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b7be:	2302      	movs	r3, #2
 800b7c0:	e071      	b.n	800b8a6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d106      	bne.n	800b7e2 <dir_sdi+0x46>
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d902      	bls.n	800b7e2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10c      	bne.n	800b802 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	095b      	lsrs	r3, r3, #5
 800b7ec:	693a      	ldr	r2, [r7, #16]
 800b7ee:	8912      	ldrh	r2, [r2, #8]
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d301      	bcc.n	800b7f8 <dir_sdi+0x5c>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	e056      	b.n	800b8a6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	61da      	str	r2, [r3, #28]
 800b800:	e02d      	b.n	800b85e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	895b      	ldrh	r3, [r3, #10]
 800b806:	461a      	mov	r2, r3
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	899b      	ldrh	r3, [r3, #12]
 800b80c:	fb02 f303 	mul.w	r3, r2, r3
 800b810:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b812:	e019      	b.n	800b848 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6979      	ldr	r1, [r7, #20]
 800b818:	4618      	mov	r0, r3
 800b81a:	f7ff fc9c 	bl	800b156 <get_fat>
 800b81e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b826:	d101      	bne.n	800b82c <dir_sdi+0x90>
 800b828:	2301      	movs	r3, #1
 800b82a:	e03c      	b.n	800b8a6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d904      	bls.n	800b83c <dir_sdi+0xa0>
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	69db      	ldr	r3, [r3, #28]
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d301      	bcc.n	800b840 <dir_sdi+0xa4>
 800b83c:	2302      	movs	r3, #2
 800b83e:	e032      	b.n	800b8a6 <dir_sdi+0x10a>
			ofs -= csz;
 800b840:	683a      	ldr	r2, [r7, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d2e1      	bcs.n	800b814 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b850:	6979      	ldr	r1, [r7, #20]
 800b852:	6938      	ldr	r0, [r7, #16]
 800b854:	f7ff fc60 	bl	800b118 <clust2sect>
 800b858:	4602      	mov	r2, r0
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	69db      	ldr	r3, [r3, #28]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d101      	bne.n	800b870 <dir_sdi+0xd4>
 800b86c:	2302      	movs	r3, #2
 800b86e:	e01a      	b.n	800b8a6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	69da      	ldr	r2, [r3, #28]
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	899b      	ldrh	r3, [r3, #12]
 800b878:	4619      	mov	r1, r3
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b880:	441a      	add	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	899b      	ldrh	r3, [r3, #12]
 800b890:	461a      	mov	r2, r3
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	fbb3 f0f2 	udiv	r0, r3, r2
 800b898:	fb00 f202 	mul.w	r2, r0, r2
 800b89c:	1a9b      	subs	r3, r3, r2
 800b89e:	18ca      	adds	r2, r1, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b086      	sub	sp, #24
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	3320      	adds	r3, #32
 800b8c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	69db      	ldr	r3, [r3, #28]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <dir_next+0x28>
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8d4:	d301      	bcc.n	800b8da <dir_next+0x2c>
 800b8d6:	2304      	movs	r3, #4
 800b8d8:	e0bb      	b.n	800ba52 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	899b      	ldrh	r3, [r3, #12]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8e6:	fb01 f202 	mul.w	r2, r1, r2
 800b8ea:	1a9b      	subs	r3, r3, r2
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f040 809d 	bne.w	800ba2c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	69db      	ldr	r3, [r3, #28]
 800b8f6:	1c5a      	adds	r2, r3, #1
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10b      	bne.n	800b91c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	095b      	lsrs	r3, r3, #5
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	8912      	ldrh	r2, [r2, #8]
 800b90c:	4293      	cmp	r3, r2
 800b90e:	f0c0 808d 	bcc.w	800ba2c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	61da      	str	r2, [r3, #28]
 800b918:	2304      	movs	r3, #4
 800b91a:	e09a      	b.n	800ba52 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	899b      	ldrh	r3, [r3, #12]
 800b920:	461a      	mov	r2, r3
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	fbb3 f3f2 	udiv	r3, r3, r2
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	8952      	ldrh	r2, [r2, #10]
 800b92c:	3a01      	subs	r2, #1
 800b92e:	4013      	ands	r3, r2
 800b930:	2b00      	cmp	r3, #0
 800b932:	d17b      	bne.n	800ba2c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	4619      	mov	r1, r3
 800b93c:	4610      	mov	r0, r2
 800b93e:	f7ff fc0a 	bl	800b156 <get_fat>
 800b942:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d801      	bhi.n	800b94e <dir_next+0xa0>
 800b94a:	2302      	movs	r3, #2
 800b94c:	e081      	b.n	800ba52 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b954:	d101      	bne.n	800b95a <dir_next+0xac>
 800b956:	2301      	movs	r3, #1
 800b958:	e07b      	b.n	800ba52 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	69db      	ldr	r3, [r3, #28]
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	429a      	cmp	r2, r3
 800b962:	d359      	bcc.n	800ba18 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d104      	bne.n	800b974 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	61da      	str	r2, [r3, #28]
 800b970:	2304      	movs	r3, #4
 800b972:	e06e      	b.n	800ba52 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	4619      	mov	r1, r3
 800b97c:	4610      	mov	r0, r2
 800b97e:	f7ff fe3d 	bl	800b5fc <create_chain>
 800b982:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d101      	bne.n	800b98e <dir_next+0xe0>
 800b98a:	2307      	movs	r3, #7
 800b98c:	e061      	b.n	800ba52 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d101      	bne.n	800b998 <dir_next+0xea>
 800b994:	2302      	movs	r3, #2
 800b996:	e05c      	b.n	800ba52 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b99e:	d101      	bne.n	800b9a4 <dir_next+0xf6>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e056      	b.n	800ba52 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f7ff fad5 	bl	800af54 <sync_window>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <dir_next+0x106>
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e04e      	b.n	800ba52 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	899b      	ldrh	r3, [r3, #12]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	f7ff f8fe 	bl	800abc2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	613b      	str	r3, [r7, #16]
 800b9ca:	6979      	ldr	r1, [r7, #20]
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f7ff fba3 	bl	800b118 <clust2sect>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	635a      	str	r2, [r3, #52]	; 0x34
 800b9d8:	e012      	b.n	800ba00 <dir_next+0x152>
						fs->wflag = 1;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f7ff fab7 	bl	800af54 <sync_window>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <dir_next+0x142>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e030      	b.n	800ba52 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	613b      	str	r3, [r7, #16]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9fa:	1c5a      	adds	r2, r3, #1
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	635a      	str	r2, [r3, #52]	; 0x34
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	895b      	ldrh	r3, [r3, #10]
 800ba04:	461a      	mov	r2, r3
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d3e6      	bcc.n	800b9da <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	1ad2      	subs	r2, r2, r3
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	697a      	ldr	r2, [r7, #20]
 800ba1c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ba1e:	6979      	ldr	r1, [r7, #20]
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f7ff fb79 	bl	800b118 <clust2sect>
 800ba26:	4602      	mov	r2, r0
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	899b      	ldrh	r3, [r3, #12]
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba44:	fb00 f202 	mul.w	r2, r0, r2
 800ba48:	1a9b      	subs	r3, r3, r2
 800ba4a:	18ca      	adds	r2, r1, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3718      	adds	r7, #24
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b086      	sub	sp, #24
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f7ff fe95 	bl	800b79c <dir_sdi>
 800ba72:	4603      	mov	r3, r0
 800ba74:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ba76:	7dfb      	ldrb	r3, [r7, #23]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d12b      	bne.n	800bad4 <dir_alloc+0x7a>
		n = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	69db      	ldr	r3, [r3, #28]
 800ba84:	4619      	mov	r1, r3
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f7ff faa8 	bl	800afdc <move_window>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba90:	7dfb      	ldrb	r3, [r7, #23]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d11d      	bne.n	800bad2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a1b      	ldr	r3, [r3, #32]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	2be5      	cmp	r3, #229	; 0xe5
 800ba9e:	d004      	beq.n	800baaa <dir_alloc+0x50>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6a1b      	ldr	r3, [r3, #32]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d107      	bne.n	800baba <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	3301      	adds	r3, #1
 800baae:	613b      	str	r3, [r7, #16]
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d102      	bne.n	800babe <dir_alloc+0x64>
 800bab8:	e00c      	b.n	800bad4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800baba:	2300      	movs	r3, #0
 800babc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800babe:	2101      	movs	r1, #1
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f7ff fef4 	bl	800b8ae <dir_next>
 800bac6:	4603      	mov	r3, r0
 800bac8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d0d7      	beq.n	800ba80 <dir_alloc+0x26>
 800bad0:	e000      	b.n	800bad4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bad2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bad4:	7dfb      	ldrb	r3, [r7, #23]
 800bad6:	2b04      	cmp	r3, #4
 800bad8:	d101      	bne.n	800bade <dir_alloc+0x84>
 800bada:	2307      	movs	r3, #7
 800badc:	75fb      	strb	r3, [r7, #23]
	return res;
 800bade:	7dfb      	ldrb	r3, [r7, #23]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3718      	adds	r7, #24
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	331a      	adds	r3, #26
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe ffc0 	bl	800aa7c <ld_word>
 800bafc:	4603      	mov	r3, r0
 800bafe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	d109      	bne.n	800bb1c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	3314      	adds	r3, #20
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7fe ffb5 	bl	800aa7c <ld_word>
 800bb12:	4603      	mov	r3, r0
 800bb14:	041b      	lsls	r3, r3, #16
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	60b9      	str	r1, [r7, #8]
 800bb30:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	331a      	adds	r3, #26
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	b292      	uxth	r2, r2
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fe ffd8 	bl	800aaf2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	2b03      	cmp	r3, #3
 800bb48:	d109      	bne.n	800bb5e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	f103 0214 	add.w	r2, r3, #20
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	0c1b      	lsrs	r3, r3, #16
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	4619      	mov	r1, r3
 800bb58:	4610      	mov	r0, r2
 800bb5a:	f7fe ffca 	bl	800aaf2 <st_word>
	}
}
 800bb5e:	bf00      	nop
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
	...

0800bb68 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bb68:	b590      	push	{r4, r7, lr}
 800bb6a:	b087      	sub	sp, #28
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	331a      	adds	r3, #26
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fe ff80 	bl	800aa7c <ld_word>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d001      	beq.n	800bb86 <cmp_lfn+0x1e>
 800bb82:	2300      	movs	r3, #0
 800bb84:	e059      	b.n	800bc3a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb8e:	1e5a      	subs	r2, r3, #1
 800bb90:	4613      	mov	r3, r2
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	4413      	add	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	81fb      	strh	r3, [r7, #14]
 800bba0:	2300      	movs	r3, #0
 800bba2:	613b      	str	r3, [r7, #16]
 800bba4:	e033      	b.n	800bc0e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bba6:	4a27      	ldr	r2, [pc, #156]	; (800bc44 <cmp_lfn+0xdc>)
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	4413      	add	r3, r2
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	461a      	mov	r2, r3
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fe ff61 	bl	800aa7c <ld_word>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bbbe:	89fb      	ldrh	r3, [r7, #14]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d01a      	beq.n	800bbfa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	2bfe      	cmp	r3, #254	; 0xfe
 800bbc8:	d812      	bhi.n	800bbf0 <cmp_lfn+0x88>
 800bbca:	89bb      	ldrh	r3, [r7, #12]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f001 ff41 	bl	800da54 <ff_wtoupper>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	461c      	mov	r4, r3
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	1c5a      	adds	r2, r3, #1
 800bbda:	617a      	str	r2, [r7, #20]
 800bbdc:	005b      	lsls	r3, r3, #1
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	881b      	ldrh	r3, [r3, #0]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f001 ff35 	bl	800da54 <ff_wtoupper>
 800bbea:	4603      	mov	r3, r0
 800bbec:	429c      	cmp	r4, r3
 800bbee:	d001      	beq.n	800bbf4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	e022      	b.n	800bc3a <cmp_lfn+0xd2>
			}
			wc = uc;
 800bbf4:	89bb      	ldrh	r3, [r7, #12]
 800bbf6:	81fb      	strh	r3, [r7, #14]
 800bbf8:	e006      	b.n	800bc08 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bbfa:	89bb      	ldrh	r3, [r7, #12]
 800bbfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d001      	beq.n	800bc08 <cmp_lfn+0xa0>
 800bc04:	2300      	movs	r3, #0
 800bc06:	e018      	b.n	800bc3a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	613b      	str	r3, [r7, #16]
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	2b0c      	cmp	r3, #12
 800bc12:	d9c8      	bls.n	800bba6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00b      	beq.n	800bc38 <cmp_lfn+0xd0>
 800bc20:	89fb      	ldrh	r3, [r7, #14]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d008      	beq.n	800bc38 <cmp_lfn+0xd0>
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	005b      	lsls	r3, r3, #1
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	881b      	ldrh	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <cmp_lfn+0xd0>
 800bc34:	2300      	movs	r3, #0
 800bc36:	e000      	b.n	800bc3a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bc38:	2301      	movs	r3, #1
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd90      	pop	{r4, r7, pc}
 800bc42:	bf00      	nop
 800bc44:	08014c10 	.word	0x08014c10

0800bc48 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b088      	sub	sp, #32
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	4611      	mov	r1, r2
 800bc54:	461a      	mov	r2, r3
 800bc56:	460b      	mov	r3, r1
 800bc58:	71fb      	strb	r3, [r7, #7]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	330d      	adds	r3, #13
 800bc62:	79ba      	ldrb	r2, [r7, #6]
 800bc64:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	330b      	adds	r3, #11
 800bc6a:	220f      	movs	r2, #15
 800bc6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	330c      	adds	r3, #12
 800bc72:	2200      	movs	r2, #0
 800bc74:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	331a      	adds	r3, #26
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7fe ff38 	bl	800aaf2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bc82:	79fb      	ldrb	r3, [r7, #7]
 800bc84:	1e5a      	subs	r2, r3, #1
 800bc86:	4613      	mov	r3, r2
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	4413      	add	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	82fb      	strh	r3, [r7, #22]
 800bc96:	2300      	movs	r3, #0
 800bc98:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bc9a:	8afb      	ldrh	r3, [r7, #22]
 800bc9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d007      	beq.n	800bcb4 <put_lfn+0x6c>
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	1c5a      	adds	r2, r3, #1
 800bca8:	61fa      	str	r2, [r7, #28]
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	4413      	add	r3, r2
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bcb4:	4a17      	ldr	r2, [pc, #92]	; (800bd14 <put_lfn+0xcc>)
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	4413      	add	r3, r2
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	8afa      	ldrh	r2, [r7, #22]
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe ff13 	bl	800aaf2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bccc:	8afb      	ldrh	r3, [r7, #22]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d102      	bne.n	800bcd8 <put_lfn+0x90>
 800bcd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcd6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	61bb      	str	r3, [r7, #24]
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	2b0c      	cmp	r3, #12
 800bce2:	d9da      	bls.n	800bc9a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bce4:	8afb      	ldrh	r3, [r7, #22]
 800bce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d006      	beq.n	800bcfc <put_lfn+0xb4>
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d103      	bne.n	800bd04 <put_lfn+0xbc>
 800bcfc:	79fb      	ldrb	r3, [r7, #7]
 800bcfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd02:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	79fa      	ldrb	r2, [r7, #7]
 800bd08:	701a      	strb	r2, [r3, #0]
}
 800bd0a:	bf00      	nop
 800bd0c:	3720      	adds	r7, #32
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	08014c10 	.word	0x08014c10

0800bd18 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08c      	sub	sp, #48	; 0x30
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bd26:	220b      	movs	r2, #11
 800bd28:	68b9      	ldr	r1, [r7, #8]
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f7fe ff28 	bl	800ab80 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	2b05      	cmp	r3, #5
 800bd34:	d92b      	bls.n	800bd8e <gen_numname+0x76>
		sr = seq;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bd3a:	e022      	b.n	800bd82 <gen_numname+0x6a>
			wc = *lfn++;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	1c9a      	adds	r2, r3, #2
 800bd40:	607a      	str	r2, [r7, #4]
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bd46:	2300      	movs	r3, #0
 800bd48:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd4a:	e017      	b.n	800bd7c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	005a      	lsls	r2, r3, #1
 800bd50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	4413      	add	r3, r2
 800bd58:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bd5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd5c:	085b      	lsrs	r3, r3, #1
 800bd5e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d005      	beq.n	800bd76 <gen_numname+0x5e>
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bd70:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bd74:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	3301      	adds	r3, #1
 800bd7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	2b0f      	cmp	r3, #15
 800bd80:	d9e4      	bls.n	800bd4c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	881b      	ldrh	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1d8      	bne.n	800bd3c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bd8e:	2307      	movs	r3, #7
 800bd90:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	f003 030f 	and.w	r3, r3, #15
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	3330      	adds	r3, #48	; 0x30
 800bd9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bda2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bda6:	2b39      	cmp	r3, #57	; 0x39
 800bda8:	d904      	bls.n	800bdb4 <gen_numname+0x9c>
 800bdaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdae:	3307      	adds	r3, #7
 800bdb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	1e5a      	subs	r2, r3, #1
 800bdb8:	62ba      	str	r2, [r7, #40]	; 0x28
 800bdba:	3330      	adds	r3, #48	; 0x30
 800bdbc:	443b      	add	r3, r7
 800bdbe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bdc2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	091b      	lsrs	r3, r3, #4
 800bdca:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1df      	bne.n	800bd92 <gen_numname+0x7a>
	ns[i] = '~';
 800bdd2:	f107 0214 	add.w	r2, r7, #20
 800bdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd8:	4413      	add	r3, r2
 800bdda:	227e      	movs	r2, #126	; 0x7e
 800bddc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bdde:	2300      	movs	r3, #0
 800bde0:	627b      	str	r3, [r7, #36]	; 0x24
 800bde2:	e002      	b.n	800bdea <gen_numname+0xd2>
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	3301      	adds	r3, #1
 800bde8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d205      	bcs.n	800bdfe <gen_numname+0xe6>
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	4413      	add	r3, r2
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	2b20      	cmp	r3, #32
 800bdfc:	d1f2      	bne.n	800bde4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be00:	2b07      	cmp	r3, #7
 800be02:	d807      	bhi.n	800be14 <gen_numname+0xfc>
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	1c5a      	adds	r2, r3, #1
 800be08:	62ba      	str	r2, [r7, #40]	; 0x28
 800be0a:	3330      	adds	r3, #48	; 0x30
 800be0c:	443b      	add	r3, r7
 800be0e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800be12:	e000      	b.n	800be16 <gen_numname+0xfe>
 800be14:	2120      	movs	r1, #32
 800be16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be18:	1c5a      	adds	r2, r3, #1
 800be1a:	627a      	str	r2, [r7, #36]	; 0x24
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4413      	add	r3, r2
 800be20:	460a      	mov	r2, r1
 800be22:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800be24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be26:	2b07      	cmp	r3, #7
 800be28:	d9e9      	bls.n	800bdfe <gen_numname+0xe6>
}
 800be2a:	bf00      	nop
 800be2c:	bf00      	nop
 800be2e:	3730      	adds	r7, #48	; 0x30
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800be40:	230b      	movs	r3, #11
 800be42:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800be44:	7bfb      	ldrb	r3, [r7, #15]
 800be46:	b2da      	uxtb	r2, r3
 800be48:	0852      	lsrs	r2, r2, #1
 800be4a:	01db      	lsls	r3, r3, #7
 800be4c:	4313      	orrs	r3, r2
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	1c59      	adds	r1, r3, #1
 800be54:	6079      	str	r1, [r7, #4]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	4413      	add	r3, r2
 800be5a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	3b01      	subs	r3, #1
 800be60:	60bb      	str	r3, [r7, #8]
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1ed      	bne.n	800be44 <sum_sfn+0x10>
	return sum;
 800be68:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b086      	sub	sp, #24
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800be84:	2100      	movs	r1, #0
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f7ff fc88 	bl	800b79c <dir_sdi>
 800be8c:	4603      	mov	r3, r0
 800be8e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800be90:	7dfb      	ldrb	r3, [r7, #23]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d001      	beq.n	800be9a <dir_find+0x24>
 800be96:	7dfb      	ldrb	r3, [r7, #23]
 800be98:	e0a9      	b.n	800bfee <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800be9a:	23ff      	movs	r3, #255	; 0xff
 800be9c:	753b      	strb	r3, [r7, #20]
 800be9e:	7d3b      	ldrb	r3, [r7, #20]
 800bea0:	757b      	strb	r3, [r7, #21]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bea8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	69db      	ldr	r3, [r3, #28]
 800beae:	4619      	mov	r1, r3
 800beb0:	6938      	ldr	r0, [r7, #16]
 800beb2:	f7ff f893 	bl	800afdc <move_window>
 800beb6:	4603      	mov	r3, r0
 800beb8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800beba:	7dfb      	ldrb	r3, [r7, #23]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f040 8090 	bne.w	800bfe2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800beca:	7dbb      	ldrb	r3, [r7, #22]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d102      	bne.n	800bed6 <dir_find+0x60>
 800bed0:	2304      	movs	r3, #4
 800bed2:	75fb      	strb	r3, [r7, #23]
 800bed4:	e08a      	b.n	800bfec <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6a1b      	ldr	r3, [r3, #32]
 800beda:	330b      	adds	r3, #11
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bee2:	73fb      	strb	r3, [r7, #15]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	7bfa      	ldrb	r2, [r7, #15]
 800bee8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800beea:	7dbb      	ldrb	r3, [r7, #22]
 800beec:	2be5      	cmp	r3, #229	; 0xe5
 800beee:	d007      	beq.n	800bf00 <dir_find+0x8a>
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	f003 0308 	and.w	r3, r3, #8
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d009      	beq.n	800bf0e <dir_find+0x98>
 800befa:	7bfb      	ldrb	r3, [r7, #15]
 800befc:	2b0f      	cmp	r3, #15
 800befe:	d006      	beq.n	800bf0e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bf00:	23ff      	movs	r3, #255	; 0xff
 800bf02:	757b      	strb	r3, [r7, #21]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf0a:	631a      	str	r2, [r3, #48]	; 0x30
 800bf0c:	e05e      	b.n	800bfcc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bf0e:	7bfb      	ldrb	r3, [r7, #15]
 800bf10:	2b0f      	cmp	r3, #15
 800bf12:	d136      	bne.n	800bf82 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d154      	bne.n	800bfcc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bf22:	7dbb      	ldrb	r3, [r7, #22]
 800bf24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00d      	beq.n	800bf48 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a1b      	ldr	r3, [r3, #32]
 800bf30:	7b5b      	ldrb	r3, [r3, #13]
 800bf32:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bf34:	7dbb      	ldrb	r3, [r7, #22]
 800bf36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf3a:	75bb      	strb	r3, [r7, #22]
 800bf3c:	7dbb      	ldrb	r3, [r7, #22]
 800bf3e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	695a      	ldr	r2, [r3, #20]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bf48:	7dba      	ldrb	r2, [r7, #22]
 800bf4a:	7d7b      	ldrb	r3, [r7, #21]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d115      	bne.n	800bf7c <dir_find+0x106>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a1b      	ldr	r3, [r3, #32]
 800bf54:	330d      	adds	r3, #13
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	7d3a      	ldrb	r2, [r7, #20]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d10e      	bne.n	800bf7c <dir_find+0x106>
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	691a      	ldr	r2, [r3, #16]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	4619      	mov	r1, r3
 800bf68:	4610      	mov	r0, r2
 800bf6a:	f7ff fdfd 	bl	800bb68 <cmp_lfn>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d003      	beq.n	800bf7c <dir_find+0x106>
 800bf74:	7d7b      	ldrb	r3, [r7, #21]
 800bf76:	3b01      	subs	r3, #1
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	e000      	b.n	800bf7e <dir_find+0x108>
 800bf7c:	23ff      	movs	r3, #255	; 0xff
 800bf7e:	757b      	strb	r3, [r7, #21]
 800bf80:	e024      	b.n	800bfcc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bf82:	7d7b      	ldrb	r3, [r7, #21]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d109      	bne.n	800bf9c <dir_find+0x126>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a1b      	ldr	r3, [r3, #32]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7ff ff51 	bl	800be34 <sum_sfn>
 800bf92:	4603      	mov	r3, r0
 800bf94:	461a      	mov	r2, r3
 800bf96:	7d3b      	ldrb	r3, [r7, #20]
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d024      	beq.n	800bfe6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10a      	bne.n	800bfc0 <dir_find+0x14a>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a18      	ldr	r0, [r3, #32]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	3324      	adds	r3, #36	; 0x24
 800bfb2:	220b      	movs	r2, #11
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	f7fe fe1f 	bl	800abf8 <mem_cmp>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d014      	beq.n	800bfea <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bfc0:	23ff      	movs	r3, #255	; 0xff
 800bfc2:	757b      	strb	r3, [r7, #21]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfca:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bfcc:	2100      	movs	r1, #0
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7ff fc6d 	bl	800b8ae <dir_next>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bfd8:	7dfb      	ldrb	r3, [r7, #23]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f43f af65 	beq.w	800beaa <dir_find+0x34>
 800bfe0:	e004      	b.n	800bfec <dir_find+0x176>
		if (res != FR_OK) break;
 800bfe2:	bf00      	nop
 800bfe4:	e002      	b.n	800bfec <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bfe6:	bf00      	nop
 800bfe8:	e000      	b.n	800bfec <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bfea:	bf00      	nop

	return res;
 800bfec:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3718      	adds	r7, #24
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
	...

0800bff8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b08c      	sub	sp, #48	; 0x30
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c00c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <dir_register+0x20>
 800c014:	2306      	movs	r3, #6
 800c016:	e0e0      	b.n	800c1da <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c018:	2300      	movs	r3, #0
 800c01a:	627b      	str	r3, [r7, #36]	; 0x24
 800c01c:	e002      	b.n	800c024 <dir_register+0x2c>
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	3301      	adds	r3, #1
 800c022:	627b      	str	r3, [r7, #36]	; 0x24
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	691a      	ldr	r2, [r3, #16]
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	4413      	add	r3, r2
 800c02e:	881b      	ldrh	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1f4      	bne.n	800c01e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c03a:	f107 030c 	add.w	r3, r7, #12
 800c03e:	220c      	movs	r2, #12
 800c040:	4618      	mov	r0, r3
 800c042:	f7fe fd9d 	bl	800ab80 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c046:	7dfb      	ldrb	r3, [r7, #23]
 800c048:	f003 0301 	and.w	r3, r3, #1
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d032      	beq.n	800c0b6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2240      	movs	r2, #64	; 0x40
 800c054:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c058:	2301      	movs	r3, #1
 800c05a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c05c:	e016      	b.n	800c08c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	691a      	ldr	r2, [r3, #16]
 800c068:	f107 010c 	add.w	r1, r7, #12
 800c06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06e:	f7ff fe53 	bl	800bd18 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7ff feff 	bl	800be76 <dir_find>
 800c078:	4603      	mov	r3, r0
 800c07a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c07e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c082:	2b00      	cmp	r3, #0
 800c084:	d106      	bne.n	800c094 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c088:	3301      	adds	r3, #1
 800c08a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	2b63      	cmp	r3, #99	; 0x63
 800c090:	d9e5      	bls.n	800c05e <dir_register+0x66>
 800c092:	e000      	b.n	800c096 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c094:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c098:	2b64      	cmp	r3, #100	; 0x64
 800c09a:	d101      	bne.n	800c0a0 <dir_register+0xa8>
 800c09c:	2307      	movs	r3, #7
 800c09e:	e09c      	b.n	800c1da <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c0a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0a4:	2b04      	cmp	r3, #4
 800c0a6:	d002      	beq.n	800c0ae <dir_register+0xb6>
 800c0a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0ac:	e095      	b.n	800c1da <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c0ae:	7dfa      	ldrb	r2, [r7, #23]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
 800c0b8:	f003 0302 	and.w	r3, r3, #2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d007      	beq.n	800c0d0 <dir_register+0xd8>
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	330c      	adds	r3, #12
 800c0c4:	4a47      	ldr	r2, [pc, #284]	; (800c1e4 <dir_register+0x1ec>)
 800c0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ca:	089b      	lsrs	r3, r3, #2
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	e000      	b.n	800c0d2 <dir_register+0xda>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c0d4:	6a39      	ldr	r1, [r7, #32]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff fcbf 	bl	800ba5a <dir_alloc>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d148      	bne.n	800c17c <dir_register+0x184>
 800c0ea:	6a3b      	ldr	r3, [r7, #32]
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	623b      	str	r3, [r7, #32]
 800c0f0:	6a3b      	ldr	r3, [r7, #32]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d042      	beq.n	800c17c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	695a      	ldr	r2, [r3, #20]
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	015b      	lsls	r3, r3, #5
 800c0fe:	1ad3      	subs	r3, r2, r3
 800c100:	4619      	mov	r1, r3
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f7ff fb4a 	bl	800b79c <dir_sdi>
 800c108:	4603      	mov	r3, r0
 800c10a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c10e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c112:	2b00      	cmp	r3, #0
 800c114:	d132      	bne.n	800c17c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3324      	adds	r3, #36	; 0x24
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7ff fe8a 	bl	800be34 <sum_sfn>
 800c120:	4603      	mov	r3, r0
 800c122:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	69db      	ldr	r3, [r3, #28]
 800c128:	4619      	mov	r1, r3
 800c12a:	69f8      	ldr	r0, [r7, #28]
 800c12c:	f7fe ff56 	bl	800afdc <move_window>
 800c130:	4603      	mov	r3, r0
 800c132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d11d      	bne.n	800c17a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	6918      	ldr	r0, [r3, #16]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a19      	ldr	r1, [r3, #32]
 800c146:	6a3b      	ldr	r3, [r7, #32]
 800c148:	b2da      	uxtb	r2, r3
 800c14a:	7efb      	ldrb	r3, [r7, #27]
 800c14c:	f7ff fd7c 	bl	800bc48 <put_lfn>
				fs->wflag = 1;
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	2201      	movs	r2, #1
 800c154:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c156:	2100      	movs	r1, #0
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7ff fba8 	bl	800b8ae <dir_next>
 800c15e:	4603      	mov	r3, r0
 800c160:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d107      	bne.n	800c17c <dir_register+0x184>
 800c16c:	6a3b      	ldr	r3, [r7, #32]
 800c16e:	3b01      	subs	r3, #1
 800c170:	623b      	str	r3, [r7, #32]
 800c172:	6a3b      	ldr	r3, [r7, #32]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1d5      	bne.n	800c124 <dir_register+0x12c>
 800c178:	e000      	b.n	800c17c <dir_register+0x184>
				if (res != FR_OK) break;
 800c17a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c17c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c180:	2b00      	cmp	r3, #0
 800c182:	d128      	bne.n	800c1d6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	69db      	ldr	r3, [r3, #28]
 800c188:	4619      	mov	r1, r3
 800c18a:	69f8      	ldr	r0, [r7, #28]
 800c18c:	f7fe ff26 	bl	800afdc <move_window>
 800c190:	4603      	mov	r3, r0
 800c192:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c196:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d11b      	bne.n	800c1d6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	2220      	movs	r2, #32
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7fe fd0b 	bl	800abc2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a18      	ldr	r0, [r3, #32]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3324      	adds	r3, #36	; 0x24
 800c1b4:	220b      	movs	r2, #11
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	f7fe fce2 	bl	800ab80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	330c      	adds	r3, #12
 800c1c8:	f002 0218 	and.w	r2, r2, #24
 800c1cc:	b2d2      	uxtb	r2, r2
 800c1ce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c1d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3730      	adds	r7, #48	; 0x30
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	4ec4ec4f 	.word	0x4ec4ec4f

0800c1e8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b088      	sub	sp, #32
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	69db      	ldr	r3, [r3, #28]
 800c202:	2b00      	cmp	r3, #0
 800c204:	f000 80c9 	beq.w	800c39a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c20c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c210:	d032      	beq.n	800c278 <get_fileinfo+0x90>
			i = j = 0;
 800c212:	2300      	movs	r3, #0
 800c214:	61bb      	str	r3, [r7, #24]
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c21a:	e01b      	b.n	800c254 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c21c:	89fb      	ldrh	r3, [r7, #14]
 800c21e:	2100      	movs	r1, #0
 800c220:	4618      	mov	r0, r3
 800c222:	f001 fbdb 	bl	800d9dc <ff_convert>
 800c226:	4603      	mov	r3, r0
 800c228:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c22a:	89fb      	ldrh	r3, [r7, #14]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d102      	bne.n	800c236 <get_fileinfo+0x4e>
 800c230:	2300      	movs	r3, #0
 800c232:	61fb      	str	r3, [r7, #28]
 800c234:	e01a      	b.n	800c26c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	2bfe      	cmp	r3, #254	; 0xfe
 800c23a:	d902      	bls.n	800c242 <get_fileinfo+0x5a>
 800c23c:	2300      	movs	r3, #0
 800c23e:	61fb      	str	r3, [r7, #28]
 800c240:	e014      	b.n	800c26c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800c242:	69fb      	ldr	r3, [r7, #28]
 800c244:	1c5a      	adds	r2, r3, #1
 800c246:	61fa      	str	r2, [r7, #28]
 800c248:	89fa      	ldrh	r2, [r7, #14]
 800c24a:	b2d1      	uxtb	r1, r2
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	4413      	add	r3, r2
 800c250:	460a      	mov	r2, r1
 800c252:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	691a      	ldr	r2, [r3, #16]
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	1c59      	adds	r1, r3, #1
 800c25c:	61b9      	str	r1, [r7, #24]
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	4413      	add	r3, r2
 800c262:	881b      	ldrh	r3, [r3, #0]
 800c264:	81fb      	strh	r3, [r7, #14]
 800c266:	89fb      	ldrh	r3, [r7, #14]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1d7      	bne.n	800c21c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	4413      	add	r3, r2
 800c272:	3316      	adds	r3, #22
 800c274:	2200      	movs	r2, #0
 800c276:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c278:	2300      	movs	r3, #0
 800c27a:	61bb      	str	r3, [r7, #24]
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	4413      	add	r3, r2
 800c286:	3316      	adds	r3, #22
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c28c:	e04c      	b.n	800c328 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a1a      	ldr	r2, [r3, #32]
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	1c59      	adds	r1, r3, #1
 800c296:	61f9      	str	r1, [r7, #28]
 800c298:	4413      	add	r3, r2
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c29e:	7dfb      	ldrb	r3, [r7, #23]
 800c2a0:	2b20      	cmp	r3, #32
 800c2a2:	d100      	bne.n	800c2a6 <get_fileinfo+0xbe>
 800c2a4:	e040      	b.n	800c328 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c2a6:	7dfb      	ldrb	r3, [r7, #23]
 800c2a8:	2b05      	cmp	r3, #5
 800c2aa:	d101      	bne.n	800c2b0 <get_fileinfo+0xc8>
 800c2ac:	23e5      	movs	r3, #229	; 0xe5
 800c2ae:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	2b09      	cmp	r3, #9
 800c2b4:	d10f      	bne.n	800c2d6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800c2b6:	89bb      	ldrh	r3, [r7, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d105      	bne.n	800c2c8 <get_fileinfo+0xe0>
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	3316      	adds	r3, #22
 800c2c4:	222e      	movs	r2, #46	; 0x2e
 800c2c6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	61ba      	str	r2, [r7, #24]
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	222e      	movs	r2, #46	; 0x2e
 800c2d4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	4413      	add	r3, r2
 800c2dc:	3309      	adds	r3, #9
 800c2de:	7dfa      	ldrb	r2, [r7, #23]
 800c2e0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c2e2:	89bb      	ldrh	r3, [r7, #12]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d11c      	bne.n	800c322 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c2e8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ea:	2b40      	cmp	r3, #64	; 0x40
 800c2ec:	d913      	bls.n	800c316 <get_fileinfo+0x12e>
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	2b5a      	cmp	r3, #90	; 0x5a
 800c2f2:	d810      	bhi.n	800c316 <get_fileinfo+0x12e>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a1b      	ldr	r3, [r3, #32]
 800c2f8:	330c      	adds	r3, #12
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	2b08      	cmp	r3, #8
 800c302:	d901      	bls.n	800c308 <get_fileinfo+0x120>
 800c304:	2310      	movs	r3, #16
 800c306:	e000      	b.n	800c30a <get_fileinfo+0x122>
 800c308:	2308      	movs	r3, #8
 800c30a:	4013      	ands	r3, r2
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800c310:	7dfb      	ldrb	r3, [r7, #23]
 800c312:	3320      	adds	r3, #32
 800c314:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c316:	683a      	ldr	r2, [r7, #0]
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	4413      	add	r3, r2
 800c31c:	3316      	adds	r3, #22
 800c31e:	7dfa      	ldrb	r2, [r7, #23]
 800c320:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	3301      	adds	r3, #1
 800c326:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	2b0a      	cmp	r3, #10
 800c32c:	d9af      	bls.n	800c28e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800c32e:	89bb      	ldrh	r3, [r7, #12]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d10d      	bne.n	800c350 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800c334:	683a      	ldr	r2, [r7, #0]
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	4413      	add	r3, r2
 800c33a:	3316      	adds	r3, #22
 800c33c:	2200      	movs	r2, #0
 800c33e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6a1b      	ldr	r3, [r3, #32]
 800c344:	330c      	adds	r3, #12
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <get_fileinfo+0x168>
 800c34c:	2300      	movs	r3, #0
 800c34e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c350:	683a      	ldr	r2, [r7, #0]
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	4413      	add	r3, r2
 800c356:	3309      	adds	r3, #9
 800c358:	2200      	movs	r2, #0
 800c35a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6a1b      	ldr	r3, [r3, #32]
 800c360:	7ada      	ldrb	r2, [r3, #11]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a1b      	ldr	r3, [r3, #32]
 800c36a:	331c      	adds	r3, #28
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7fe fb9d 	bl	800aaac <ld_dword>
 800c372:	4602      	mov	r2, r0
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6a1b      	ldr	r3, [r3, #32]
 800c37c:	3316      	adds	r3, #22
 800c37e:	4618      	mov	r0, r3
 800c380:	f7fe fb94 	bl	800aaac <ld_dword>
 800c384:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	b29a      	uxth	r2, r3
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	80da      	strh	r2, [r3, #6]
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	0c1b      	lsrs	r3, r3, #16
 800c392:	b29a      	uxth	r2, r3
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	809a      	strh	r2, [r3, #4]
 800c398:	e000      	b.n	800c39c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c39a:	bf00      	nop
}
 800c39c:	3720      	adds	r7, #32
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
	...

0800c3a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b08a      	sub	sp, #40	; 0x28
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	613b      	str	r3, [r7, #16]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	60fb      	str	r3, [r7, #12]
 800c3bc:	2300      	movs	r3, #0
 800c3be:	617b      	str	r3, [r7, #20]
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	61ba      	str	r2, [r7, #24]
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c3d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3d4:	2b1f      	cmp	r3, #31
 800c3d6:	d940      	bls.n	800c45a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c3d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3da:	2b2f      	cmp	r3, #47	; 0x2f
 800c3dc:	d006      	beq.n	800c3ec <create_name+0x48>
 800c3de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3e0:	2b5c      	cmp	r3, #92	; 0x5c
 800c3e2:	d110      	bne.n	800c406 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c3e4:	e002      	b.n	800c3ec <create_name+0x48>
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	61bb      	str	r3, [r7, #24]
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	2b2f      	cmp	r3, #47	; 0x2f
 800c3f6:	d0f6      	beq.n	800c3e6 <create_name+0x42>
 800c3f8:	693a      	ldr	r2, [r7, #16]
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	2b5c      	cmp	r3, #92	; 0x5c
 800c402:	d0f0      	beq.n	800c3e6 <create_name+0x42>
			break;
 800c404:	e02a      	b.n	800c45c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	2bfe      	cmp	r3, #254	; 0xfe
 800c40a:	d901      	bls.n	800c410 <create_name+0x6c>
 800c40c:	2306      	movs	r3, #6
 800c40e:	e17d      	b.n	800c70c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c412:	b2db      	uxtb	r3, r3
 800c414:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c418:	2101      	movs	r1, #1
 800c41a:	4618      	mov	r0, r3
 800c41c:	f001 fade 	bl	800d9dc <ff_convert>
 800c420:	4603      	mov	r3, r0
 800c422:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <create_name+0x8a>
 800c42a:	2306      	movs	r3, #6
 800c42c:	e16e      	b.n	800c70c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c42e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c430:	2b7f      	cmp	r3, #127	; 0x7f
 800c432:	d809      	bhi.n	800c448 <create_name+0xa4>
 800c434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c436:	4619      	mov	r1, r3
 800c438:	488d      	ldr	r0, [pc, #564]	; (800c670 <create_name+0x2cc>)
 800c43a:	f7fe fc04 	bl	800ac46 <chk_chr>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d001      	beq.n	800c448 <create_name+0xa4>
 800c444:	2306      	movs	r3, #6
 800c446:	e161      	b.n	800c70c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	617a      	str	r2, [r7, #20]
 800c44e:	005b      	lsls	r3, r3, #1
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	4413      	add	r3, r2
 800c454:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c456:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c458:	e7b4      	b.n	800c3c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c45a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c45c:	693a      	ldr	r2, [r7, #16]
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	441a      	add	r2, r3
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c468:	2b1f      	cmp	r3, #31
 800c46a:	d801      	bhi.n	800c470 <create_name+0xcc>
 800c46c:	2304      	movs	r3, #4
 800c46e:	e000      	b.n	800c472 <create_name+0xce>
 800c470:	2300      	movs	r3, #0
 800c472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c476:	e011      	b.n	800c49c <create_name+0xf8>
		w = lfn[di - 1];
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c47e:	3b01      	subs	r3, #1
 800c480:	005b      	lsls	r3, r3, #1
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	4413      	add	r3, r2
 800c486:	881b      	ldrh	r3, [r3, #0]
 800c488:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c48a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c48c:	2b20      	cmp	r3, #32
 800c48e:	d002      	beq.n	800c496 <create_name+0xf2>
 800c490:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c492:	2b2e      	cmp	r3, #46	; 0x2e
 800c494:	d106      	bne.n	800c4a4 <create_name+0x100>
		di--;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	3b01      	subs	r3, #1
 800c49a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1ea      	bne.n	800c478 <create_name+0xd4>
 800c4a2:	e000      	b.n	800c4a6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c4a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	005b      	lsls	r3, r3, #1
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <create_name+0x118>
 800c4b8:	2306      	movs	r3, #6
 800c4ba:	e127      	b.n	800c70c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	3324      	adds	r3, #36	; 0x24
 800c4c0:	220b      	movs	r2, #11
 800c4c2:	2120      	movs	r1, #32
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fe fb7c 	bl	800abc2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	61bb      	str	r3, [r7, #24]
 800c4ce:	e002      	b.n	800c4d6 <create_name+0x132>
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	61bb      	str	r3, [r7, #24]
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	005b      	lsls	r3, r3, #1
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	4413      	add	r3, r2
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	2b20      	cmp	r3, #32
 800c4e2:	d0f5      	beq.n	800c4d0 <create_name+0x12c>
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	005b      	lsls	r3, r3, #1
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	881b      	ldrh	r3, [r3, #0]
 800c4ee:	2b2e      	cmp	r3, #46	; 0x2e
 800c4f0:	d0ee      	beq.n	800c4d0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d009      	beq.n	800c50c <create_name+0x168>
 800c4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4fc:	f043 0303 	orr.w	r3, r3, #3
 800c500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c504:	e002      	b.n	800c50c <create_name+0x168>
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	3b01      	subs	r3, #1
 800c50a:	617b      	str	r3, [r7, #20]
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d009      	beq.n	800c526 <create_name+0x182>
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c518:	3b01      	subs	r3, #1
 800c51a:	005b      	lsls	r3, r3, #1
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	4413      	add	r3, r2
 800c520:	881b      	ldrh	r3, [r3, #0]
 800c522:	2b2e      	cmp	r3, #46	; 0x2e
 800c524:	d1ef      	bne.n	800c506 <create_name+0x162>

	i = b = 0; ni = 8;
 800c526:	2300      	movs	r3, #0
 800c528:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c52c:	2300      	movs	r3, #0
 800c52e:	623b      	str	r3, [r7, #32]
 800c530:	2308      	movs	r3, #8
 800c532:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	1c5a      	adds	r2, r3, #1
 800c538:	61ba      	str	r2, [r7, #24]
 800c53a:	005b      	lsls	r3, r3, #1
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	4413      	add	r3, r2
 800c540:	881b      	ldrh	r3, [r3, #0]
 800c542:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c546:	2b00      	cmp	r3, #0
 800c548:	f000 8090 	beq.w	800c66c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c54c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c54e:	2b20      	cmp	r3, #32
 800c550:	d006      	beq.n	800c560 <create_name+0x1bc>
 800c552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c554:	2b2e      	cmp	r3, #46	; 0x2e
 800c556:	d10a      	bne.n	800c56e <create_name+0x1ca>
 800c558:	69ba      	ldr	r2, [r7, #24]
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d006      	beq.n	800c56e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c564:	f043 0303 	orr.w	r3, r3, #3
 800c568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c56c:	e07d      	b.n	800c66a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c56e:	6a3a      	ldr	r2, [r7, #32]
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	429a      	cmp	r2, r3
 800c574:	d203      	bcs.n	800c57e <create_name+0x1da>
 800c576:	69ba      	ldr	r2, [r7, #24]
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d123      	bne.n	800c5c6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	2b0b      	cmp	r3, #11
 800c582:	d106      	bne.n	800c592 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c588:	f043 0303 	orr.w	r3, r3, #3
 800c58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c590:	e075      	b.n	800c67e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c592:	69ba      	ldr	r2, [r7, #24]
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	429a      	cmp	r2, r3
 800c598:	d005      	beq.n	800c5a6 <create_name+0x202>
 800c59a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c59e:	f043 0303 	orr.w	r3, r3, #3
 800c5a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c5a6:	69ba      	ldr	r2, [r7, #24]
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d866      	bhi.n	800c67c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	61bb      	str	r3, [r7, #24]
 800c5b2:	2308      	movs	r3, #8
 800c5b4:	623b      	str	r3, [r7, #32]
 800c5b6:	230b      	movs	r3, #11
 800c5b8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c5ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c5c4:	e051      	b.n	800c66a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c5c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5c8:	2b7f      	cmp	r3, #127	; 0x7f
 800c5ca:	d914      	bls.n	800c5f6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c5cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5ce:	2100      	movs	r1, #0
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f001 fa03 	bl	800d9dc <ff_convert>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c5da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d004      	beq.n	800c5ea <create_name+0x246>
 800c5e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5e2:	3b80      	subs	r3, #128	; 0x80
 800c5e4:	4a23      	ldr	r2, [pc, #140]	; (800c674 <create_name+0x2d0>)
 800c5e6:	5cd3      	ldrb	r3, [r2, r3]
 800c5e8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c5ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ee:	f043 0302 	orr.w	r3, r3, #2
 800c5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c5f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d007      	beq.n	800c60c <create_name+0x268>
 800c5fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5fe:	4619      	mov	r1, r3
 800c600:	481d      	ldr	r0, [pc, #116]	; (800c678 <create_name+0x2d4>)
 800c602:	f7fe fb20 	bl	800ac46 <chk_chr>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d008      	beq.n	800c61e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c60c:	235f      	movs	r3, #95	; 0x5f
 800c60e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c614:	f043 0303 	orr.w	r3, r3, #3
 800c618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c61c:	e01b      	b.n	800c656 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c61e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c620:	2b40      	cmp	r3, #64	; 0x40
 800c622:	d909      	bls.n	800c638 <create_name+0x294>
 800c624:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c626:	2b5a      	cmp	r3, #90	; 0x5a
 800c628:	d806      	bhi.n	800c638 <create_name+0x294>
					b |= 2;
 800c62a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c62e:	f043 0302 	orr.w	r3, r3, #2
 800c632:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c636:	e00e      	b.n	800c656 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c638:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c63a:	2b60      	cmp	r3, #96	; 0x60
 800c63c:	d90b      	bls.n	800c656 <create_name+0x2b2>
 800c63e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c640:	2b7a      	cmp	r3, #122	; 0x7a
 800c642:	d808      	bhi.n	800c656 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c644:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c648:	f043 0301 	orr.w	r3, r3, #1
 800c64c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c652:	3b20      	subs	r3, #32
 800c654:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c656:	6a3b      	ldr	r3, [r7, #32]
 800c658:	1c5a      	adds	r2, r3, #1
 800c65a:	623a      	str	r2, [r7, #32]
 800c65c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c65e:	b2d1      	uxtb	r1, r2
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	4413      	add	r3, r2
 800c664:	460a      	mov	r2, r1
 800c666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c66a:	e763      	b.n	800c534 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c66c:	bf00      	nop
 800c66e:	e006      	b.n	800c67e <create_name+0x2da>
 800c670:	08014ac4 	.word	0x08014ac4
 800c674:	08014b90 	.word	0x08014b90
 800c678:	08014ad0 	.word	0x08014ad0
			if (si > di) break;			/* No extension */
 800c67c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c684:	2be5      	cmp	r3, #229	; 0xe5
 800c686:	d103      	bne.n	800c690 <create_name+0x2ec>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2205      	movs	r2, #5
 800c68c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	2b08      	cmp	r3, #8
 800c694:	d104      	bne.n	800c6a0 <create_name+0x2fc>
 800c696:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c6a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6a4:	f003 030c 	and.w	r3, r3, #12
 800c6a8:	2b0c      	cmp	r3, #12
 800c6aa:	d005      	beq.n	800c6b8 <create_name+0x314>
 800c6ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6b0:	f003 0303 	and.w	r3, r3, #3
 800c6b4:	2b03      	cmp	r3, #3
 800c6b6:	d105      	bne.n	800c6c4 <create_name+0x320>
 800c6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6bc:	f043 0302 	orr.w	r3, r3, #2
 800c6c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6c8:	f003 0302 	and.w	r3, r3, #2
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d117      	bne.n	800c700 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c6d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6d4:	f003 0303 	and.w	r3, r3, #3
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d105      	bne.n	800c6e8 <create_name+0x344>
 800c6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6e0:	f043 0310 	orr.w	r3, r3, #16
 800c6e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c6e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6ec:	f003 030c 	and.w	r3, r3, #12
 800c6f0:	2b04      	cmp	r3, #4
 800c6f2:	d105      	bne.n	800c700 <create_name+0x35c>
 800c6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6f8:	f043 0308 	orr.w	r3, r3, #8
 800c6fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c706:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c70a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3728      	adds	r7, #40	; 0x28
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b086      	sub	sp, #24
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c728:	e002      	b.n	800c730 <follow_path+0x1c>
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	3301      	adds	r3, #1
 800c72e:	603b      	str	r3, [r7, #0]
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	2b2f      	cmp	r3, #47	; 0x2f
 800c736:	d0f8      	beq.n	800c72a <follow_path+0x16>
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b5c      	cmp	r3, #92	; 0x5c
 800c73e:	d0f4      	beq.n	800c72a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	2200      	movs	r2, #0
 800c744:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	2b1f      	cmp	r3, #31
 800c74c:	d80a      	bhi.n	800c764 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2280      	movs	r2, #128	; 0x80
 800c752:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c756:	2100      	movs	r1, #0
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f7ff f81f 	bl	800b79c <dir_sdi>
 800c75e:	4603      	mov	r3, r0
 800c760:	75fb      	strb	r3, [r7, #23]
 800c762:	e048      	b.n	800c7f6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c764:	463b      	mov	r3, r7
 800c766:	4619      	mov	r1, r3
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f7ff fe1b 	bl	800c3a4 <create_name>
 800c76e:	4603      	mov	r3, r0
 800c770:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c772:	7dfb      	ldrb	r3, [r7, #23]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d139      	bne.n	800c7ec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f7ff fb7c 	bl	800be76 <dir_find>
 800c77e:	4603      	mov	r3, r0
 800c780:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c788:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c78a:	7dfb      	ldrb	r3, [r7, #23]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00a      	beq.n	800c7a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c790:	7dfb      	ldrb	r3, [r7, #23]
 800c792:	2b04      	cmp	r3, #4
 800c794:	d12c      	bne.n	800c7f0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c796:	7afb      	ldrb	r3, [r7, #11]
 800c798:	f003 0304 	and.w	r3, r3, #4
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d127      	bne.n	800c7f0 <follow_path+0xdc>
 800c7a0:	2305      	movs	r3, #5
 800c7a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c7a4:	e024      	b.n	800c7f0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7a6:	7afb      	ldrb	r3, [r7, #11]
 800c7a8:	f003 0304 	and.w	r3, r3, #4
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d121      	bne.n	800c7f4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	799b      	ldrb	r3, [r3, #6]
 800c7b4:	f003 0310 	and.w	r3, r3, #16
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d102      	bne.n	800c7c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c7bc:	2305      	movs	r3, #5
 800c7be:	75fb      	strb	r3, [r7, #23]
 800c7c0:	e019      	b.n	800c7f6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	695b      	ldr	r3, [r3, #20]
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	8992      	ldrh	r2, [r2, #12]
 800c7d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7d4:	fb00 f202 	mul.w	r2, r0, r2
 800c7d8:	1a9b      	subs	r3, r3, r2
 800c7da:	440b      	add	r3, r1
 800c7dc:	4619      	mov	r1, r3
 800c7de:	68f8      	ldr	r0, [r7, #12]
 800c7e0:	f7ff f982 	bl	800bae8 <ld_clust>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c7ea:	e7bb      	b.n	800c764 <follow_path+0x50>
			if (res != FR_OK) break;
 800c7ec:	bf00      	nop
 800c7ee:	e002      	b.n	800c7f6 <follow_path+0xe2>
				break;
 800c7f0:	bf00      	nop
 800c7f2:	e000      	b.n	800c7f6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7f4:	bf00      	nop
			}
		}
	}

	return res;
 800c7f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3718      	adds	r7, #24
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c800:	b480      	push	{r7}
 800c802:	b087      	sub	sp, #28
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c80c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d031      	beq.n	800c87a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	e002      	b.n	800c824 <get_ldnumber+0x24>
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	3301      	adds	r3, #1
 800c822:	617b      	str	r3, [r7, #20]
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	2b1f      	cmp	r3, #31
 800c82a:	d903      	bls.n	800c834 <get_ldnumber+0x34>
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	2b3a      	cmp	r3, #58	; 0x3a
 800c832:	d1f4      	bne.n	800c81e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	2b3a      	cmp	r3, #58	; 0x3a
 800c83a:	d11c      	bne.n	800c876 <get_ldnumber+0x76>
			tp = *path;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	60fa      	str	r2, [r7, #12]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	3b30      	subs	r3, #48	; 0x30
 800c84c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2b09      	cmp	r3, #9
 800c852:	d80e      	bhi.n	800c872 <get_ldnumber+0x72>
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d10a      	bne.n	800c872 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d107      	bne.n	800c872 <get_ldnumber+0x72>
					vol = (int)i;
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	3301      	adds	r3, #1
 800c86a:	617b      	str	r3, [r7, #20]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	e002      	b.n	800c87c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c876:	2300      	movs	r3, #0
 800c878:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c87a:	693b      	ldr	r3, [r7, #16]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	371c      	adds	r7, #28
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	70da      	strb	r2, [r3, #3]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c89e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c8a0:	6839      	ldr	r1, [r7, #0]
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f7fe fb9a 	bl	800afdc <move_window>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d001      	beq.n	800c8b2 <check_fs+0x2a>
 800c8ae:	2304      	movs	r3, #4
 800c8b0:	e038      	b.n	800c924 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	3338      	adds	r3, #56	; 0x38
 800c8b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fe f8de 	bl	800aa7c <ld_word>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d001      	beq.n	800c8d0 <check_fs+0x48>
 800c8cc:	2303      	movs	r3, #3
 800c8ce:	e029      	b.n	800c924 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c8d6:	2be9      	cmp	r3, #233	; 0xe9
 800c8d8:	d009      	beq.n	800c8ee <check_fs+0x66>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c8e0:	2beb      	cmp	r3, #235	; 0xeb
 800c8e2:	d11e      	bne.n	800c922 <check_fs+0x9a>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c8ea:	2b90      	cmp	r3, #144	; 0x90
 800c8ec:	d119      	bne.n	800c922 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	3338      	adds	r3, #56	; 0x38
 800c8f2:	3336      	adds	r3, #54	; 0x36
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fe f8d9 	bl	800aaac <ld_dword>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c900:	4a0a      	ldr	r2, [pc, #40]	; (800c92c <check_fs+0xa4>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d101      	bne.n	800c90a <check_fs+0x82>
 800c906:	2300      	movs	r3, #0
 800c908:	e00c      	b.n	800c924 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	3338      	adds	r3, #56	; 0x38
 800c90e:	3352      	adds	r3, #82	; 0x52
 800c910:	4618      	mov	r0, r3
 800c912:	f7fe f8cb 	bl	800aaac <ld_dword>
 800c916:	4603      	mov	r3, r0
 800c918:	4a05      	ldr	r2, [pc, #20]	; (800c930 <check_fs+0xa8>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d101      	bne.n	800c922 <check_fs+0x9a>
 800c91e:	2300      	movs	r3, #0
 800c920:	e000      	b.n	800c924 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c922:	2302      	movs	r3, #2
}
 800c924:	4618      	mov	r0, r3
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	00544146 	.word	0x00544146
 800c930:	33544146 	.word	0x33544146

0800c934 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b096      	sub	sp, #88	; 0x58
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	4613      	mov	r3, r2
 800c940:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	2200      	movs	r2, #0
 800c946:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f7ff ff59 	bl	800c800 <get_ldnumber>
 800c94e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c952:	2b00      	cmp	r3, #0
 800c954:	da01      	bge.n	800c95a <find_volume+0x26>
 800c956:	230b      	movs	r3, #11
 800c958:	e265      	b.n	800ce26 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c95a:	4a9f      	ldr	r2, [pc, #636]	; (800cbd8 <find_volume+0x2a4>)
 800c95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c962:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c966:	2b00      	cmp	r3, #0
 800c968:	d101      	bne.n	800c96e <find_volume+0x3a>
 800c96a:	230c      	movs	r3, #12
 800c96c:	e25b      	b.n	800ce26 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c972:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c974:	79fb      	ldrb	r3, [r7, #7]
 800c976:	f023 0301 	bic.w	r3, r3, #1
 800c97a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d01a      	beq.n	800c9ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c986:	785b      	ldrb	r3, [r3, #1]
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fd ffd9 	bl	800a940 <disk_status>
 800c98e:	4603      	mov	r3, r0
 800c990:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c994:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10c      	bne.n	800c9ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c9a0:	79fb      	ldrb	r3, [r7, #7]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d007      	beq.n	800c9b6 <find_volume+0x82>
 800c9a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9aa:	f003 0304 	and.w	r3, r3, #4
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d001      	beq.n	800c9b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c9b2:	230a      	movs	r3, #10
 800c9b4:	e237      	b.n	800ce26 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e235      	b.n	800ce26 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9bc:	2200      	movs	r2, #0
 800c9be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c9c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ca:	785b      	ldrb	r3, [r3, #1]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7fd ffd1 	bl	800a974 <disk_initialize>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c9d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9dc:	f003 0301 	and.w	r3, r3, #1
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c9e4:	2303      	movs	r3, #3
 800c9e6:	e21e      	b.n	800ce26 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c9e8:	79fb      	ldrb	r3, [r7, #7]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d007      	beq.n	800c9fe <find_volume+0xca>
 800c9ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9f2:	f003 0304 	and.w	r3, r3, #4
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c9fa:	230a      	movs	r3, #10
 800c9fc:	e213      	b.n	800ce26 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca00:	7858      	ldrb	r0, [r3, #1]
 800ca02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca04:	330c      	adds	r3, #12
 800ca06:	461a      	mov	r2, r3
 800ca08:	2102      	movs	r1, #2
 800ca0a:	f7fe f819 	bl	800aa40 <disk_ioctl>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d001      	beq.n	800ca18 <find_volume+0xe4>
 800ca14:	2301      	movs	r3, #1
 800ca16:	e206      	b.n	800ce26 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	899b      	ldrh	r3, [r3, #12]
 800ca1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca20:	d80d      	bhi.n	800ca3e <find_volume+0x10a>
 800ca22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca24:	899b      	ldrh	r3, [r3, #12]
 800ca26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca2a:	d308      	bcc.n	800ca3e <find_volume+0x10a>
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2e:	899b      	ldrh	r3, [r3, #12]
 800ca30:	461a      	mov	r2, r3
 800ca32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca34:	899b      	ldrh	r3, [r3, #12]
 800ca36:	3b01      	subs	r3, #1
 800ca38:	4013      	ands	r3, r2
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d001      	beq.n	800ca42 <find_volume+0x10e>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e1f1      	b.n	800ce26 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ca46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca4a:	f7ff ff1d 	bl	800c888 <check_fs>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ca54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d149      	bne.n	800caf0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	643b      	str	r3, [r7, #64]	; 0x40
 800ca60:	e01e      	b.n	800caa0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ca62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca64:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ca68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca6a:	011b      	lsls	r3, r3, #4
 800ca6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ca70:	4413      	add	r3, r2
 800ca72:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ca74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca76:	3304      	adds	r3, #4
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d006      	beq.n	800ca8c <find_volume+0x158>
 800ca7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca80:	3308      	adds	r3, #8
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fe f812 	bl	800aaac <ld_dword>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	e000      	b.n	800ca8e <find_volume+0x15a>
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	3358      	adds	r3, #88	; 0x58
 800ca94:	443b      	add	r3, r7
 800ca96:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	643b      	str	r3, [r7, #64]	; 0x40
 800caa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caa2:	2b03      	cmp	r3, #3
 800caa4:	d9dd      	bls.n	800ca62 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800caa6:	2300      	movs	r3, #0
 800caa8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800caaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caac:	2b00      	cmp	r3, #0
 800caae:	d002      	beq.n	800cab6 <find_volume+0x182>
 800cab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cab2:	3b01      	subs	r3, #1
 800cab4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	3358      	adds	r3, #88	; 0x58
 800cabc:	443b      	add	r3, r7
 800cabe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cac2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d005      	beq.n	800cad6 <find_volume+0x1a2>
 800caca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cacc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cace:	f7ff fedb 	bl	800c888 <check_fs>
 800cad2:	4603      	mov	r3, r0
 800cad4:	e000      	b.n	800cad8 <find_volume+0x1a4>
 800cad6:	2303      	movs	r3, #3
 800cad8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cadc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d905      	bls.n	800caf0 <find_volume+0x1bc>
 800cae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cae6:	3301      	adds	r3, #1
 800cae8:	643b      	str	r3, [r7, #64]	; 0x40
 800caea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caec:	2b03      	cmp	r3, #3
 800caee:	d9e2      	bls.n	800cab6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800caf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800caf4:	2b04      	cmp	r3, #4
 800caf6:	d101      	bne.n	800cafc <find_volume+0x1c8>
 800caf8:	2301      	movs	r3, #1
 800cafa:	e194      	b.n	800ce26 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cafc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d901      	bls.n	800cb08 <find_volume+0x1d4>
 800cb04:	230d      	movs	r3, #13
 800cb06:	e18e      	b.n	800ce26 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0a:	3338      	adds	r3, #56	; 0x38
 800cb0c:	330b      	adds	r3, #11
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fd ffb4 	bl	800aa7c <ld_word>
 800cb14:	4603      	mov	r3, r0
 800cb16:	461a      	mov	r2, r3
 800cb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1a:	899b      	ldrh	r3, [r3, #12]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d001      	beq.n	800cb24 <find_volume+0x1f0>
 800cb20:	230d      	movs	r3, #13
 800cb22:	e180      	b.n	800ce26 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	3338      	adds	r3, #56	; 0x38
 800cb28:	3316      	adds	r3, #22
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fd ffa6 	bl	800aa7c <ld_word>
 800cb30:	4603      	mov	r3, r0
 800cb32:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cb34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d106      	bne.n	800cb48 <find_volume+0x214>
 800cb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3c:	3338      	adds	r3, #56	; 0x38
 800cb3e:	3324      	adds	r3, #36	; 0x24
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fd ffb3 	bl	800aaac <ld_dword>
 800cb46:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb4c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb50:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800cb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5a:	789b      	ldrb	r3, [r3, #2]
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d005      	beq.n	800cb6c <find_volume+0x238>
 800cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb62:	789b      	ldrb	r3, [r3, #2]
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d001      	beq.n	800cb6c <find_volume+0x238>
 800cb68:	230d      	movs	r3, #13
 800cb6a:	e15c      	b.n	800ce26 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6e:	789b      	ldrb	r3, [r3, #2]
 800cb70:	461a      	mov	r2, r3
 800cb72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb74:	fb02 f303 	mul.w	r3, r2, r3
 800cb78:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb80:	b29a      	uxth	r2, r3
 800cb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	895b      	ldrh	r3, [r3, #10]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d008      	beq.n	800cba0 <find_volume+0x26c>
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb90:	895b      	ldrh	r3, [r3, #10]
 800cb92:	461a      	mov	r2, r3
 800cb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb96:	895b      	ldrh	r3, [r3, #10]
 800cb98:	3b01      	subs	r3, #1
 800cb9a:	4013      	ands	r3, r2
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <find_volume+0x270>
 800cba0:	230d      	movs	r3, #13
 800cba2:	e140      	b.n	800ce26 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba6:	3338      	adds	r3, #56	; 0x38
 800cba8:	3311      	adds	r3, #17
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7fd ff66 	bl	800aa7c <ld_word>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbba:	891b      	ldrh	r3, [r3, #8]
 800cbbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbbe:	8992      	ldrh	r2, [r2, #12]
 800cbc0:	0952      	lsrs	r2, r2, #5
 800cbc2:	b292      	uxth	r2, r2
 800cbc4:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbc8:	fb01 f202 	mul.w	r2, r1, r2
 800cbcc:	1a9b      	subs	r3, r3, r2
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d003      	beq.n	800cbdc <find_volume+0x2a8>
 800cbd4:	230d      	movs	r3, #13
 800cbd6:	e126      	b.n	800ce26 <find_volume+0x4f2>
 800cbd8:	20002dd0 	.word	0x20002dd0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbde:	3338      	adds	r3, #56	; 0x38
 800cbe0:	3313      	adds	r3, #19
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fd ff4a 	bl	800aa7c <ld_word>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cbec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d106      	bne.n	800cc00 <find_volume+0x2cc>
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	3338      	adds	r3, #56	; 0x38
 800cbf6:	3320      	adds	r3, #32
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fd ff57 	bl	800aaac <ld_dword>
 800cbfe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc02:	3338      	adds	r3, #56	; 0x38
 800cc04:	330e      	adds	r3, #14
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fd ff38 	bl	800aa7c <ld_word>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cc10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d101      	bne.n	800cc1a <find_volume+0x2e6>
 800cc16:	230d      	movs	r3, #13
 800cc18:	e105      	b.n	800ce26 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cc1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc1e:	4413      	add	r3, r2
 800cc20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc22:	8911      	ldrh	r1, [r2, #8]
 800cc24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc26:	8992      	ldrh	r2, [r2, #12]
 800cc28:	0952      	lsrs	r2, r2, #5
 800cc2a:	b292      	uxth	r2, r2
 800cc2c:	fbb1 f2f2 	udiv	r2, r1, r2
 800cc30:	b292      	uxth	r2, r2
 800cc32:	4413      	add	r3, r2
 800cc34:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cc36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d201      	bcs.n	800cc42 <find_volume+0x30e>
 800cc3e:	230d      	movs	r3, #13
 800cc40:	e0f1      	b.n	800ce26 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cc42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc46:	1ad3      	subs	r3, r2, r3
 800cc48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc4a:	8952      	ldrh	r2, [r2, #10]
 800cc4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc50:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d101      	bne.n	800cc5c <find_volume+0x328>
 800cc58:	230d      	movs	r3, #13
 800cc5a:	e0e4      	b.n	800ce26 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800cc5c:	2303      	movs	r3, #3
 800cc5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc64:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d802      	bhi.n	800cc72 <find_volume+0x33e>
 800cc6c:	2302      	movs	r3, #2
 800cc6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc74:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d802      	bhi.n	800cc82 <find_volume+0x34e>
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc84:	1c9a      	adds	r2, r3, #2
 800cc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc88:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc8e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cc90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc94:	441a      	add	r2, r3
 800cc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc98:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800cc9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9e:	441a      	add	r2, r3
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800cca4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cca8:	2b03      	cmp	r3, #3
 800ccaa:	d11e      	bne.n	800ccea <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ccac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccae:	3338      	adds	r3, #56	; 0x38
 800ccb0:	332a      	adds	r3, #42	; 0x2a
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fd fee2 	bl	800aa7c <ld_word>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d001      	beq.n	800ccc2 <find_volume+0x38e>
 800ccbe:	230d      	movs	r3, #13
 800ccc0:	e0b1      	b.n	800ce26 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ccc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc4:	891b      	ldrh	r3, [r3, #8]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <find_volume+0x39a>
 800ccca:	230d      	movs	r3, #13
 800cccc:	e0ab      	b.n	800ce26 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ccce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd0:	3338      	adds	r3, #56	; 0x38
 800ccd2:	332c      	adds	r3, #44	; 0x2c
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fd fee9 	bl	800aaac <ld_dword>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccde:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce2:	69db      	ldr	r3, [r3, #28]
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	647b      	str	r3, [r7, #68]	; 0x44
 800cce8:	e01f      	b.n	800cd2a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ccea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccec:	891b      	ldrh	r3, [r3, #8]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d101      	bne.n	800ccf6 <find_volume+0x3c2>
 800ccf2:	230d      	movs	r3, #13
 800ccf4:	e097      	b.n	800ce26 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccfc:	441a      	add	r2, r3
 800ccfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd00:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d103      	bne.n	800cd12 <find_volume+0x3de>
 800cd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0c:	69db      	ldr	r3, [r3, #28]
 800cd0e:	005b      	lsls	r3, r3, #1
 800cd10:	e00a      	b.n	800cd28 <find_volume+0x3f4>
 800cd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd14:	69da      	ldr	r2, [r3, #28]
 800cd16:	4613      	mov	r3, r2
 800cd18:	005b      	lsls	r3, r3, #1
 800cd1a:	4413      	add	r3, r2
 800cd1c:	085a      	lsrs	r2, r3, #1
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd20:	69db      	ldr	r3, [r3, #28]
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cd28:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2c:	6a1a      	ldr	r2, [r3, #32]
 800cd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd30:	899b      	ldrh	r3, [r3, #12]
 800cd32:	4619      	mov	r1, r3
 800cd34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd36:	440b      	add	r3, r1
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd3c:	8989      	ldrh	r1, [r1, #12]
 800cd3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d201      	bcs.n	800cd4a <find_volume+0x416>
 800cd46:	230d      	movs	r3, #13
 800cd48:	e06d      	b.n	800ce26 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd50:	619a      	str	r2, [r3, #24]
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	699a      	ldr	r2, [r3, #24]
 800cd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd58:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	2280      	movs	r2, #128	; 0x80
 800cd5e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cd60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd64:	2b03      	cmp	r3, #3
 800cd66:	d149      	bne.n	800cdfc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6a:	3338      	adds	r3, #56	; 0x38
 800cd6c:	3330      	adds	r3, #48	; 0x30
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fd fe84 	bl	800aa7c <ld_word>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d140      	bne.n	800cdfc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cd7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	4619      	mov	r1, r3
 800cd80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd82:	f7fe f92b 	bl	800afdc <move_window>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d137      	bne.n	800cdfc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8e:	2200      	movs	r2, #0
 800cd90:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd94:	3338      	adds	r3, #56	; 0x38
 800cd96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fd fe6e 	bl	800aa7c <ld_word>
 800cda0:	4603      	mov	r3, r0
 800cda2:	461a      	mov	r2, r3
 800cda4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d127      	bne.n	800cdfc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdae:	3338      	adds	r3, #56	; 0x38
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7fd fe7b 	bl	800aaac <ld_dword>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	4a1d      	ldr	r2, [pc, #116]	; (800ce30 <find_volume+0x4fc>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d11e      	bne.n	800cdfc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc0:	3338      	adds	r3, #56	; 0x38
 800cdc2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fd fe70 	bl	800aaac <ld_dword>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	4a19      	ldr	r2, [pc, #100]	; (800ce34 <find_volume+0x500>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d113      	bne.n	800cdfc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd6:	3338      	adds	r3, #56	; 0x38
 800cdd8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fd fe65 	bl	800aaac <ld_dword>
 800cde2:	4602      	mov	r2, r0
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdea:	3338      	adds	r3, #56	; 0x38
 800cdec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fd fe5b 	bl	800aaac <ld_dword>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ce02:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce04:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <find_volume+0x504>)
 800ce06:	881b      	ldrh	r3, [r3, #0]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	b29a      	uxth	r2, r3
 800ce0c:	4b0a      	ldr	r3, [pc, #40]	; (800ce38 <find_volume+0x504>)
 800ce0e:	801a      	strh	r2, [r3, #0]
 800ce10:	4b09      	ldr	r3, [pc, #36]	; (800ce38 <find_volume+0x504>)
 800ce12:	881a      	ldrh	r2, [r3, #0]
 800ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce16:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ce18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1a:	4a08      	ldr	r2, [pc, #32]	; (800ce3c <find_volume+0x508>)
 800ce1c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ce1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce20:	f7fe f874 	bl	800af0c <clear_lock>
#endif
	return FR_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3758      	adds	r7, #88	; 0x58
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	41615252 	.word	0x41615252
 800ce34:	61417272 	.word	0x61417272
 800ce38:	20002dd4 	.word	0x20002dd4
 800ce3c:	20002df8 	.word	0x20002df8

0800ce40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ce4a:	2309      	movs	r3, #9
 800ce4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d01c      	beq.n	800ce8e <validate+0x4e>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d018      	beq.n	800ce8e <validate+0x4e>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d013      	beq.n	800ce8e <validate+0x4e>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	889a      	ldrh	r2, [r3, #4]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	88db      	ldrh	r3, [r3, #6]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d10c      	bne.n	800ce8e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	785b      	ldrb	r3, [r3, #1]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fd fd60 	bl	800a940 <disk_status>
 800ce80:	4603      	mov	r3, r0
 800ce82:	f003 0301 	and.w	r3, r3, #1
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d101      	bne.n	800ce8e <validate+0x4e>
			res = FR_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d102      	bne.n	800ce9a <validate+0x5a>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	e000      	b.n	800ce9c <validate+0x5c>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	683a      	ldr	r2, [r7, #0]
 800ce9e:	6013      	str	r3, [r2, #0]
	return res;
 800cea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
	...

0800ceac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b088      	sub	sp, #32
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cebe:	f107 0310 	add.w	r3, r7, #16
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7ff fc9c 	bl	800c800 <get_ldnumber>
 800cec8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	da01      	bge.n	800ced4 <f_mount+0x28>
 800ced0:	230b      	movs	r3, #11
 800ced2:	e02b      	b.n	800cf2c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ced4:	4a17      	ldr	r2, [pc, #92]	; (800cf34 <f_mount+0x88>)
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cedc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d005      	beq.n	800cef0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cee4:	69b8      	ldr	r0, [r7, #24]
 800cee6:	f7fe f811 	bl	800af0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	2200      	movs	r2, #0
 800ceee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d002      	beq.n	800cefc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2200      	movs	r2, #0
 800cefa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	490d      	ldr	r1, [pc, #52]	; (800cf34 <f_mount+0x88>)
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d002      	beq.n	800cf12 <f_mount+0x66>
 800cf0c:	79fb      	ldrb	r3, [r7, #7]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d001      	beq.n	800cf16 <f_mount+0x6a>
 800cf12:	2300      	movs	r3, #0
 800cf14:	e00a      	b.n	800cf2c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cf16:	f107 010c 	add.w	r1, r7, #12
 800cf1a:	f107 0308 	add.w	r3, r7, #8
 800cf1e:	2200      	movs	r2, #0
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7ff fd07 	bl	800c934 <find_volume>
 800cf26:	4603      	mov	r3, r0
 800cf28:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cf2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3720      	adds	r7, #32
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	20002dd0 	.word	0x20002dd0

0800cf38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b09a      	sub	sp, #104	; 0x68
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	4613      	mov	r3, r2
 800cf44:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <f_open+0x18>
 800cf4c:	2309      	movs	r3, #9
 800cf4e:	e1bb      	b.n	800d2c8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cf50:	79fb      	ldrb	r3, [r7, #7]
 800cf52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf56:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cf58:	79fa      	ldrb	r2, [r7, #7]
 800cf5a:	f107 0114 	add.w	r1, r7, #20
 800cf5e:	f107 0308 	add.w	r3, r7, #8
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7ff fce6 	bl	800c934 <find_volume>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cf6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f040 819f 	bne.w	800d2b6 <f_open+0x37e>
		dj.obj.fs = fs;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cf7c:	68ba      	ldr	r2, [r7, #8]
 800cf7e:	f107 0318 	add.w	r3, r7, #24
 800cf82:	4611      	mov	r1, r2
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7ff fbc5 	bl	800c714 <follow_path>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cf90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d11a      	bne.n	800cfce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cf98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cf9c:	b25b      	sxtb	r3, r3
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	da03      	bge.n	800cfaa <f_open+0x72>
				res = FR_INVALID_NAME;
 800cfa2:	2306      	movs	r3, #6
 800cfa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cfa8:	e011      	b.n	800cfce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	f023 0301 	bic.w	r3, r3, #1
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	bf14      	ite	ne
 800cfb4:	2301      	movne	r3, #1
 800cfb6:	2300      	moveq	r3, #0
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	461a      	mov	r2, r3
 800cfbc:	f107 0318 	add.w	r3, r7, #24
 800cfc0:	4611      	mov	r1, r2
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fd fe5a 	bl	800ac7c <chk_lock>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	f003 031c 	and.w	r3, r3, #28
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d07f      	beq.n	800d0d8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cfd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d017      	beq.n	800d010 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cfe0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfe4:	2b04      	cmp	r3, #4
 800cfe6:	d10e      	bne.n	800d006 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cfe8:	f7fd fea4 	bl	800ad34 <enq_lock>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d006      	beq.n	800d000 <f_open+0xc8>
 800cff2:	f107 0318 	add.w	r3, r7, #24
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fe fffe 	bl	800bff8 <dir_register>
 800cffc:	4603      	mov	r3, r0
 800cffe:	e000      	b.n	800d002 <f_open+0xca>
 800d000:	2312      	movs	r3, #18
 800d002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	f043 0308 	orr.w	r3, r3, #8
 800d00c:	71fb      	strb	r3, [r7, #7]
 800d00e:	e010      	b.n	800d032 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d010:	7fbb      	ldrb	r3, [r7, #30]
 800d012:	f003 0311 	and.w	r3, r3, #17
 800d016:	2b00      	cmp	r3, #0
 800d018:	d003      	beq.n	800d022 <f_open+0xea>
					res = FR_DENIED;
 800d01a:	2307      	movs	r3, #7
 800d01c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d020:	e007      	b.n	800d032 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d022:	79fb      	ldrb	r3, [r7, #7]
 800d024:	f003 0304 	and.w	r3, r3, #4
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <f_open+0xfa>
 800d02c:	2308      	movs	r3, #8
 800d02e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d032:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d036:	2b00      	cmp	r3, #0
 800d038:	d168      	bne.n	800d10c <f_open+0x1d4>
 800d03a:	79fb      	ldrb	r3, [r7, #7]
 800d03c:	f003 0308 	and.w	r3, r3, #8
 800d040:	2b00      	cmp	r3, #0
 800d042:	d063      	beq.n	800d10c <f_open+0x1d4>
				dw = GET_FATTIME();
 800d044:	f7fd fc1e 	bl	800a884 <get_fattime>
 800d048:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	330e      	adds	r3, #14
 800d04e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d050:	4618      	mov	r0, r3
 800d052:	f7fd fd69 	bl	800ab28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d058:	3316      	adds	r3, #22
 800d05a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7fd fd63 	bl	800ab28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d064:	330b      	adds	r3, #11
 800d066:	2220      	movs	r2, #32
 800d068:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d06e:	4611      	mov	r1, r2
 800d070:	4618      	mov	r0, r3
 800d072:	f7fe fd39 	bl	800bae8 <ld_clust>
 800d076:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d07c:	2200      	movs	r2, #0
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fe fd51 	bl	800bb26 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d086:	331c      	adds	r3, #28
 800d088:	2100      	movs	r1, #0
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fd fd4c 	bl	800ab28 <st_dword>
					fs->wflag = 1;
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	2201      	movs	r2, #1
 800d094:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d037      	beq.n	800d10c <f_open+0x1d4>
						dw = fs->winsect;
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d0a2:	f107 0318 	add.w	r3, r7, #24
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fe fa41 	bl	800b532 <remove_chain>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d0b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d126      	bne.n	800d10c <f_open+0x1d4>
							res = move_window(fs, dw);
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fd ff8a 	bl	800afdc <move_window>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0d2:	3a01      	subs	r2, #1
 800d0d4:	615a      	str	r2, [r3, #20]
 800d0d6:	e019      	b.n	800d10c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d0d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d115      	bne.n	800d10c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d0e0:	7fbb      	ldrb	r3, [r7, #30]
 800d0e2:	f003 0310 	and.w	r3, r3, #16
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d003      	beq.n	800d0f2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d0ea:	2304      	movs	r3, #4
 800d0ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d0f0:	e00c      	b.n	800d10c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d0f2:	79fb      	ldrb	r3, [r7, #7]
 800d0f4:	f003 0302 	and.w	r3, r3, #2
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d007      	beq.n	800d10c <f_open+0x1d4>
 800d0fc:	7fbb      	ldrb	r3, [r7, #30]
 800d0fe:	f003 0301 	and.w	r3, r3, #1
 800d102:	2b00      	cmp	r3, #0
 800d104:	d002      	beq.n	800d10c <f_open+0x1d4>
						res = FR_DENIED;
 800d106:	2307      	movs	r3, #7
 800d108:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d10c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d110:	2b00      	cmp	r3, #0
 800d112:	d128      	bne.n	800d166 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d114:	79fb      	ldrb	r3, [r7, #7]
 800d116:	f003 0308 	and.w	r3, r3, #8
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d003      	beq.n	800d126 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d11e:	79fb      	ldrb	r3, [r7, #7]
 800d120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d124:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d12e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d134:	79fb      	ldrb	r3, [r7, #7]
 800d136:	f023 0301 	bic.w	r3, r3, #1
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	bf14      	ite	ne
 800d13e:	2301      	movne	r3, #1
 800d140:	2300      	moveq	r3, #0
 800d142:	b2db      	uxtb	r3, r3
 800d144:	461a      	mov	r2, r3
 800d146:	f107 0318 	add.w	r3, r7, #24
 800d14a:	4611      	mov	r1, r2
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7fd fe13 	bl	800ad78 <inc_lock>
 800d152:	4602      	mov	r2, r0
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d102      	bne.n	800d166 <f_open+0x22e>
 800d160:	2302      	movs	r3, #2
 800d162:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d166:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f040 80a3 	bne.w	800d2b6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d174:	4611      	mov	r1, r2
 800d176:	4618      	mov	r0, r3
 800d178:	f7fe fcb6 	bl	800bae8 <ld_clust>
 800d17c:	4602      	mov	r2, r0
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d184:	331c      	adds	r3, #28
 800d186:	4618      	mov	r0, r3
 800d188:	f7fd fc90 	bl	800aaac <ld_dword>
 800d18c:	4602      	mov	r2, r0
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	88da      	ldrh	r2, [r3, #6]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	79fa      	ldrb	r2, [r7, #7]
 800d1aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	3330      	adds	r3, #48	; 0x30
 800d1c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7fd fcfa 	bl	800abc2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d1ce:	79fb      	ldrb	r3, [r7, #7]
 800d1d0:	f003 0320 	and.w	r3, r3, #32
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d06e      	beq.n	800d2b6 <f_open+0x37e>
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d06a      	beq.n	800d2b6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	68da      	ldr	r2, [r3, #12]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	895b      	ldrh	r3, [r3, #10]
 800d1ec:	461a      	mov	r2, r3
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	899b      	ldrh	r3, [r3, #12]
 800d1f2:	fb02 f303 	mul.w	r3, r2, r3
 800d1f6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d204:	e016      	b.n	800d234 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fd ffa3 	bl	800b156 <get_fat>
 800d210:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d214:	2b01      	cmp	r3, #1
 800d216:	d802      	bhi.n	800d21e <f_open+0x2e6>
 800d218:	2302      	movs	r3, #2
 800d21a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d21e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d224:	d102      	bne.n	800d22c <f_open+0x2f4>
 800d226:	2301      	movs	r3, #1
 800d228:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d22c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d22e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d230:	1ad3      	subs	r3, r2, r3
 800d232:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d234:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d103      	bne.n	800d244 <f_open+0x30c>
 800d23c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d23e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d240:	429a      	cmp	r2, r3
 800d242:	d8e0      	bhi.n	800d206 <f_open+0x2ce>
				}
				fp->clust = clst;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d248:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d24a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d131      	bne.n	800d2b6 <f_open+0x37e>
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	899b      	ldrh	r3, [r3, #12]
 800d256:	461a      	mov	r2, r3
 800d258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d25a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d25e:	fb01 f202 	mul.w	r2, r1, r2
 800d262:	1a9b      	subs	r3, r3, r2
 800d264:	2b00      	cmp	r3, #0
 800d266:	d026      	beq.n	800d2b6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7fd ff53 	bl	800b118 <clust2sect>
 800d272:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d276:	2b00      	cmp	r3, #0
 800d278:	d103      	bne.n	800d282 <f_open+0x34a>
						res = FR_INT_ERR;
 800d27a:	2302      	movs	r3, #2
 800d27c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d280:	e019      	b.n	800d2b6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	899b      	ldrh	r3, [r3, #12]
 800d286:	461a      	mov	r2, r3
 800d288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d28a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d290:	441a      	add	r2, r3
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	7858      	ldrb	r0, [r3, #1]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6a1a      	ldr	r2, [r3, #32]
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	f7fd fb8b 	bl	800a9c0 <disk_read>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d002      	beq.n	800d2b6 <f_open+0x37e>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d2b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d002      	beq.n	800d2c4 <f_open+0x38c>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d2c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3768      	adds	r7, #104	; 0x68
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b08c      	sub	sp, #48	; 0x30
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
 800d2dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f107 0210 	add.w	r2, r7, #16
 800d2ee:	4611      	mov	r1, r2
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f7ff fda5 	bl	800ce40 <validate>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d2fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d300:	2b00      	cmp	r3, #0
 800d302:	d107      	bne.n	800d314 <f_write+0x44>
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	7d5b      	ldrb	r3, [r3, #21]
 800d308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d30c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <f_write+0x4a>
 800d314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d318:	e16a      	b.n	800d5f0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	7d1b      	ldrb	r3, [r3, #20]
 800d31e:	f003 0302 	and.w	r3, r3, #2
 800d322:	2b00      	cmp	r3, #0
 800d324:	d101      	bne.n	800d32a <f_write+0x5a>
 800d326:	2307      	movs	r3, #7
 800d328:	e162      	b.n	800d5f0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	699a      	ldr	r2, [r3, #24]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	441a      	add	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	699b      	ldr	r3, [r3, #24]
 800d336:	429a      	cmp	r2, r3
 800d338:	f080 814c 	bcs.w	800d5d4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	699b      	ldr	r3, [r3, #24]
 800d340:	43db      	mvns	r3, r3
 800d342:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d344:	e146      	b.n	800d5d4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	699b      	ldr	r3, [r3, #24]
 800d34a:	693a      	ldr	r2, [r7, #16]
 800d34c:	8992      	ldrh	r2, [r2, #12]
 800d34e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d352:	fb01 f202 	mul.w	r2, r1, r2
 800d356:	1a9b      	subs	r3, r3, r2
 800d358:	2b00      	cmp	r3, #0
 800d35a:	f040 80f1 	bne.w	800d540 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	699b      	ldr	r3, [r3, #24]
 800d362:	693a      	ldr	r2, [r7, #16]
 800d364:	8992      	ldrh	r2, [r2, #12]
 800d366:	fbb3 f3f2 	udiv	r3, r3, r2
 800d36a:	693a      	ldr	r2, [r7, #16]
 800d36c:	8952      	ldrh	r2, [r2, #10]
 800d36e:	3a01      	subs	r2, #1
 800d370:	4013      	ands	r3, r2
 800d372:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d143      	bne.n	800d402 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	699b      	ldr	r3, [r3, #24]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d10c      	bne.n	800d39c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d11a      	bne.n	800d3c4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2100      	movs	r1, #0
 800d392:	4618      	mov	r0, r3
 800d394:	f7fe f932 	bl	800b5fc <create_chain>
 800d398:	62b8      	str	r0, [r7, #40]	; 0x28
 800d39a:	e013      	b.n	800d3c4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d007      	beq.n	800d3b4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	699b      	ldr	r3, [r3, #24]
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f7fe f9be 	bl	800b72c <clmt_clust>
 800d3b0:	62b8      	str	r0, [r7, #40]	; 0x28
 800d3b2:	e007      	b.n	800d3c4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d3b4:	68fa      	ldr	r2, [r7, #12]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	69db      	ldr	r3, [r3, #28]
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	4610      	mov	r0, r2
 800d3be:	f7fe f91d 	bl	800b5fc <create_chain>
 800d3c2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f000 8109 	beq.w	800d5de <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d104      	bne.n	800d3dc <f_write+0x10c>
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2202      	movs	r2, #2
 800d3d6:	755a      	strb	r2, [r3, #21]
 800d3d8:	2302      	movs	r3, #2
 800d3da:	e109      	b.n	800d5f0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3e2:	d104      	bne.n	800d3ee <f_write+0x11e>
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	755a      	strb	r2, [r3, #21]
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e100      	b.n	800d5f0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3f2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d102      	bne.n	800d402 <f_write+0x132>
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d400:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	7d1b      	ldrb	r3, [r3, #20]
 800d406:	b25b      	sxtb	r3, r3
 800d408:	2b00      	cmp	r3, #0
 800d40a:	da18      	bge.n	800d43e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	7858      	ldrb	r0, [r3, #1]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6a1a      	ldr	r2, [r3, #32]
 800d41a:	2301      	movs	r3, #1
 800d41c:	f7fd faf0 	bl	800aa00 <disk_write>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d004      	beq.n	800d430 <f_write+0x160>
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2201      	movs	r2, #1
 800d42a:	755a      	strb	r2, [r3, #21]
 800d42c:	2301      	movs	r3, #1
 800d42e:	e0df      	b.n	800d5f0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	7d1b      	ldrb	r3, [r3, #20]
 800d434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d43e:	693a      	ldr	r2, [r7, #16]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	69db      	ldr	r3, [r3, #28]
 800d444:	4619      	mov	r1, r3
 800d446:	4610      	mov	r0, r2
 800d448:	f7fd fe66 	bl	800b118 <clust2sect>
 800d44c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d104      	bne.n	800d45e <f_write+0x18e>
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2202      	movs	r2, #2
 800d458:	755a      	strb	r2, [r3, #21]
 800d45a:	2302      	movs	r3, #2
 800d45c:	e0c8      	b.n	800d5f0 <f_write+0x320>
			sect += csect;
 800d45e:	697a      	ldr	r2, [r7, #20]
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	4413      	add	r3, r2
 800d464:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	899b      	ldrh	r3, [r3, #12]
 800d46a:	461a      	mov	r2, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d472:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d474:	6a3b      	ldr	r3, [r7, #32]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d043      	beq.n	800d502 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d47a:	69ba      	ldr	r2, [r7, #24]
 800d47c:	6a3b      	ldr	r3, [r7, #32]
 800d47e:	4413      	add	r3, r2
 800d480:	693a      	ldr	r2, [r7, #16]
 800d482:	8952      	ldrh	r2, [r2, #10]
 800d484:	4293      	cmp	r3, r2
 800d486:	d905      	bls.n	800d494 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	895b      	ldrh	r3, [r3, #10]
 800d48c:	461a      	mov	r2, r3
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	7858      	ldrb	r0, [r3, #1]
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	697a      	ldr	r2, [r7, #20]
 800d49c:	69f9      	ldr	r1, [r7, #28]
 800d49e:	f7fd faaf 	bl	800aa00 <disk_write>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d004      	beq.n	800d4b2 <f_write+0x1e2>
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	755a      	strb	r2, [r3, #21]
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e09e      	b.n	800d5f0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6a1a      	ldr	r2, [r3, #32]
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	1ad3      	subs	r3, r2, r3
 800d4ba:	6a3a      	ldr	r2, [r7, #32]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d918      	bls.n	800d4f2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6a1a      	ldr	r2, [r3, #32]
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	693a      	ldr	r2, [r7, #16]
 800d4d0:	8992      	ldrh	r2, [r2, #12]
 800d4d2:	fb02 f303 	mul.w	r3, r2, r3
 800d4d6:	69fa      	ldr	r2, [r7, #28]
 800d4d8:	18d1      	adds	r1, r2, r3
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	899b      	ldrh	r3, [r3, #12]
 800d4de:	461a      	mov	r2, r3
 800d4e0:	f7fd fb4e 	bl	800ab80 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	7d1b      	ldrb	r3, [r3, #20]
 800d4e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ec:	b2da      	uxtb	r2, r3
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	899b      	ldrh	r3, [r3, #12]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	6a3b      	ldr	r3, [r7, #32]
 800d4fa:	fb02 f303 	mul.w	r3, r2, r3
 800d4fe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d500:	e04b      	b.n	800d59a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	697a      	ldr	r2, [r7, #20]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d016      	beq.n	800d53a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	699a      	ldr	r2, [r3, #24]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d514:	429a      	cmp	r2, r3
 800d516:	d210      	bcs.n	800d53a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	7858      	ldrb	r0, [r3, #1]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d522:	2301      	movs	r3, #1
 800d524:	697a      	ldr	r2, [r7, #20]
 800d526:	f7fd fa4b 	bl	800a9c0 <disk_read>
 800d52a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d004      	beq.n	800d53a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2201      	movs	r2, #1
 800d534:	755a      	strb	r2, [r3, #21]
 800d536:	2301      	movs	r3, #1
 800d538:	e05a      	b.n	800d5f0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	697a      	ldr	r2, [r7, #20]
 800d53e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	899b      	ldrh	r3, [r3, #12]
 800d544:	4618      	mov	r0, r3
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	699b      	ldr	r3, [r3, #24]
 800d54a:	693a      	ldr	r2, [r7, #16]
 800d54c:	8992      	ldrh	r2, [r2, #12]
 800d54e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d552:	fb01 f202 	mul.w	r2, r1, r2
 800d556:	1a9b      	subs	r3, r3, r2
 800d558:	1ac3      	subs	r3, r0, r3
 800d55a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d55c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	429a      	cmp	r2, r3
 800d562:	d901      	bls.n	800d568 <f_write+0x298>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	693a      	ldr	r2, [r7, #16]
 800d574:	8992      	ldrh	r2, [r2, #12]
 800d576:	fbb3 f0f2 	udiv	r0, r3, r2
 800d57a:	fb00 f202 	mul.w	r2, r0, r2
 800d57e:	1a9b      	subs	r3, r3, r2
 800d580:	440b      	add	r3, r1
 800d582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d584:	69f9      	ldr	r1, [r7, #28]
 800d586:	4618      	mov	r0, r3
 800d588:	f7fd fafa 	bl	800ab80 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	7d1b      	ldrb	r3, [r3, #20]
 800d590:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d594:	b2da      	uxtb	r2, r3
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d59a:	69fa      	ldr	r2, [r7, #28]
 800d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59e:	4413      	add	r3, r2
 800d5a0:	61fb      	str	r3, [r7, #28]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	699a      	ldr	r2, [r3, #24]
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a8:	441a      	add	r2, r3
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	619a      	str	r2, [r3, #24]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	68da      	ldr	r2, [r3, #12]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	699b      	ldr	r3, [r3, #24]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	bf38      	it	cc
 800d5ba:	461a      	movcc	r2, r3
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	60da      	str	r2, [r3, #12]
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c6:	441a      	add	r2, r3
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	601a      	str	r2, [r3, #0]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d0:	1ad3      	subs	r3, r2, r3
 800d5d2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	f47f aeb5 	bne.w	800d346 <f_write+0x76>
 800d5dc:	e000      	b.n	800d5e0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d5de:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	7d1b      	ldrb	r3, [r3, #20]
 800d5e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5e8:	b2da      	uxtb	r2, r3
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d5ee:	2300      	movs	r3, #0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3730      	adds	r7, #48	; 0x30
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b086      	sub	sp, #24
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f107 0208 	add.w	r2, r7, #8
 800d606:	4611      	mov	r1, r2
 800d608:	4618      	mov	r0, r3
 800d60a:	f7ff fc19 	bl	800ce40 <validate>
 800d60e:	4603      	mov	r3, r0
 800d610:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d612:	7dfb      	ldrb	r3, [r7, #23]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d168      	bne.n	800d6ea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	7d1b      	ldrb	r3, [r3, #20]
 800d61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d620:	2b00      	cmp	r3, #0
 800d622:	d062      	beq.n	800d6ea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	7d1b      	ldrb	r3, [r3, #20]
 800d628:	b25b      	sxtb	r3, r3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	da15      	bge.n	800d65a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	7858      	ldrb	r0, [r3, #1]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6a1a      	ldr	r2, [r3, #32]
 800d63c:	2301      	movs	r3, #1
 800d63e:	f7fd f9df 	bl	800aa00 <disk_write>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d001      	beq.n	800d64c <f_sync+0x54>
 800d648:	2301      	movs	r3, #1
 800d64a:	e04f      	b.n	800d6ec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	7d1b      	ldrb	r3, [r3, #20]
 800d650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d654:	b2da      	uxtb	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d65a:	f7fd f913 	bl	800a884 <get_fattime>
 800d65e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d666:	4619      	mov	r1, r3
 800d668:	4610      	mov	r0, r2
 800d66a:	f7fd fcb7 	bl	800afdc <move_window>
 800d66e:	4603      	mov	r3, r0
 800d670:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d672:	7dfb      	ldrb	r3, [r7, #23]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d138      	bne.n	800d6ea <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d67c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	330b      	adds	r3, #11
 800d682:	781a      	ldrb	r2, [r3, #0]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	330b      	adds	r3, #11
 800d688:	f042 0220 	orr.w	r2, r2, #32
 800d68c:	b2d2      	uxtb	r2, r2
 800d68e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6818      	ldr	r0, [r3, #0]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	461a      	mov	r2, r3
 800d69a:	68f9      	ldr	r1, [r7, #12]
 800d69c:	f7fe fa43 	bl	800bb26 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f103 021c 	add.w	r2, r3, #28
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	f7fd fa3b 	bl	800ab28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	3316      	adds	r3, #22
 800d6b6:	6939      	ldr	r1, [r7, #16]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7fd fa35 	bl	800ab28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	3312      	adds	r3, #18
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7fd fa14 	bl	800aaf2 <st_word>
					fs->wflag = 1;
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7fd fcb0 	bl	800b038 <sync_fs>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	7d1b      	ldrb	r3, [r3, #20]
 800d6e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6e4:	b2da      	uxtb	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3718      	adds	r7, #24
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b084      	sub	sp, #16
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f7ff ff7b 	bl	800d5f8 <f_sync>
 800d702:	4603      	mov	r3, r0
 800d704:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d706:	7bfb      	ldrb	r3, [r7, #15]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d118      	bne.n	800d73e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f107 0208 	add.w	r2, r7, #8
 800d712:	4611      	mov	r1, r2
 800d714:	4618      	mov	r0, r3
 800d716:	f7ff fb93 	bl	800ce40 <validate>
 800d71a:	4603      	mov	r3, r0
 800d71c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10c      	bne.n	800d73e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	691b      	ldr	r3, [r3, #16]
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fd fbb3 	bl	800ae94 <dec_lock>
 800d72e:	4603      	mov	r3, r0
 800d730:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d732:	7bfb      	ldrb	r3, [r7, #15]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d102      	bne.n	800d73e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2200      	movs	r2, #0
 800d73c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d740:	4618      	mov	r0, r3
 800d742:	3710      	adds	r7, #16
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b090      	sub	sp, #64	; 0x40
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d752:	f107 0108 	add.w	r1, r7, #8
 800d756:	1d3b      	adds	r3, r7, #4
 800d758:	2200      	movs	r2, #0
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7ff f8ea 	bl	800c934 <find_volume>
 800d760:	4603      	mov	r3, r0
 800d762:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d766:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d11f      	bne.n	800d7ae <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	f107 0308 	add.w	r3, r7, #8
 800d774:	4611      	mov	r1, r2
 800d776:	4618      	mov	r0, r3
 800d778:	f7fe ffcc 	bl	800c714 <follow_path>
 800d77c:	4603      	mov	r3, r0
 800d77e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d782:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d786:	2b00      	cmp	r3, #0
 800d788:	d111      	bne.n	800d7ae <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d78a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d78e:	b25b      	sxtb	r3, r3
 800d790:	2b00      	cmp	r3, #0
 800d792:	da03      	bge.n	800d79c <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d794:	2306      	movs	r3, #6
 800d796:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d79a:	e008      	b.n	800d7ae <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d005      	beq.n	800d7ae <f_stat+0x66>
 800d7a2:	f107 0308 	add.w	r3, r7, #8
 800d7a6:	6839      	ldr	r1, [r7, #0]
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fe fd1d 	bl	800c1e8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d7ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3740      	adds	r7, #64	; 0x40
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b092      	sub	sp, #72	; 0x48
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d7c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d7ca:	f107 030c 	add.w	r3, r7, #12
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff f8af 	bl	800c934 <find_volume>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d7dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f040 8099 	bne.w	800d918 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d7e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ee:	699a      	ldr	r2, [r3, #24]
 800d7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f2:	69db      	ldr	r3, [r3, #28]
 800d7f4:	3b02      	subs	r3, #2
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d804      	bhi.n	800d804 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fc:	699a      	ldr	r2, [r3, #24]
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	601a      	str	r2, [r3, #0]
 800d802:	e089      	b.n	800d918 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d804:	2300      	movs	r3, #0
 800d806:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d128      	bne.n	800d862 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d810:	2302      	movs	r3, #2
 800d812:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d818:	f107 0314 	add.w	r3, r7, #20
 800d81c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fd fc99 	bl	800b156 <get_fat>
 800d824:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d82c:	d103      	bne.n	800d836 <f_getfree+0x7c>
 800d82e:	2301      	movs	r3, #1
 800d830:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d834:	e063      	b.n	800d8fe <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d103      	bne.n	800d844 <f_getfree+0x8a>
 800d83c:	2302      	movs	r3, #2
 800d83e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d842:	e05c      	b.n	800d8fe <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	2b00      	cmp	r3, #0
 800d848:	d102      	bne.n	800d850 <f_getfree+0x96>
 800d84a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d84c:	3301      	adds	r3, #1
 800d84e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d852:	3301      	adds	r3, #1
 800d854:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d858:	69db      	ldr	r3, [r3, #28]
 800d85a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d3db      	bcc.n	800d818 <f_getfree+0x5e>
 800d860:	e04d      	b.n	800d8fe <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d864:	69db      	ldr	r3, [r3, #28]
 800d866:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d86c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	637b      	str	r3, [r7, #52]	; 0x34
 800d872:	2300      	movs	r3, #0
 800d874:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d113      	bne.n	800d8a4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d87c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d880:	1c5a      	adds	r2, r3, #1
 800d882:	63ba      	str	r2, [r7, #56]	; 0x38
 800d884:	4619      	mov	r1, r3
 800d886:	f7fd fba9 	bl	800afdc <move_window>
 800d88a:	4603      	mov	r3, r0
 800d88c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d890:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d894:	2b00      	cmp	r3, #0
 800d896:	d131      	bne.n	800d8fc <f_getfree+0x142>
							p = fs->win;
 800d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89a:	3338      	adds	r3, #56	; 0x38
 800d89c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a0:	899b      	ldrh	r3, [r3, #12]
 800d8a2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	2b02      	cmp	r3, #2
 800d8aa:	d10f      	bne.n	800d8cc <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d8ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8ae:	f7fd f8e5 	bl	800aa7c <ld_word>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d102      	bne.n	800d8be <f_getfree+0x104>
 800d8b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c0:	3302      	adds	r3, #2
 800d8c2:	633b      	str	r3, [r7, #48]	; 0x30
 800d8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c6:	3b02      	subs	r3, #2
 800d8c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d8ca:	e010      	b.n	800d8ee <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d8cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8ce:	f7fd f8ed 	bl	800aaac <ld_dword>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d102      	bne.n	800d8e2 <f_getfree+0x128>
 800d8dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8de:	3301      	adds	r3, #1
 800d8e0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e4:	3304      	adds	r3, #4
 800d8e6:	633b      	str	r3, [r7, #48]	; 0x30
 800d8e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ea:	3b04      	subs	r3, #4
 800d8ec:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d1bd      	bne.n	800d876 <f_getfree+0xbc>
 800d8fa:	e000      	b.n	800d8fe <f_getfree+0x144>
							if (res != FR_OK) break;
 800d8fc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d902:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d908:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90c:	791a      	ldrb	r2, [r3, #4]
 800d90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d910:	f042 0201 	orr.w	r2, r2, #1
 800d914:	b2d2      	uxtb	r2, r2
 800d916:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d918:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3748      	adds	r7, #72	; 0x48
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d924:	b480      	push	{r7}
 800d926:	b087      	sub	sp, #28
 800d928:	af00      	add	r7, sp, #0
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	4613      	mov	r3, r2
 800d930:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d932:	2301      	movs	r3, #1
 800d934:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d936:	2300      	movs	r3, #0
 800d938:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d93a:	4b1f      	ldr	r3, [pc, #124]	; (800d9b8 <FATFS_LinkDriverEx+0x94>)
 800d93c:	7a5b      	ldrb	r3, [r3, #9]
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	2b00      	cmp	r3, #0
 800d942:	d131      	bne.n	800d9a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d944:	4b1c      	ldr	r3, [pc, #112]	; (800d9b8 <FATFS_LinkDriverEx+0x94>)
 800d946:	7a5b      	ldrb	r3, [r3, #9]
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	461a      	mov	r2, r3
 800d94c:	4b1a      	ldr	r3, [pc, #104]	; (800d9b8 <FATFS_LinkDriverEx+0x94>)
 800d94e:	2100      	movs	r1, #0
 800d950:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d952:	4b19      	ldr	r3, [pc, #100]	; (800d9b8 <FATFS_LinkDriverEx+0x94>)
 800d954:	7a5b      	ldrb	r3, [r3, #9]
 800d956:	b2db      	uxtb	r3, r3
 800d958:	4a17      	ldr	r2, [pc, #92]	; (800d9b8 <FATFS_LinkDriverEx+0x94>)
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	4413      	add	r3, r2
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d962:	4b15      	ldr	r3, [pc, #84]	; (800d9b8 <FATFS_LinkDriverEx+0x94>)
 800d964:	7a5b      	ldrb	r3, [r3, #9]
 800d966:	b2db      	uxtb	r3, r3
 800d968:	461a      	mov	r2, r3
 800d96a:	4b13      	ldr	r3, [pc, #76]	; (800d9b8 <FATFS_LinkDriverEx+0x94>)
 800d96c:	4413      	add	r3, r2
 800d96e:	79fa      	ldrb	r2, [r7, #7]
 800d970:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d972:	4b11      	ldr	r3, [pc, #68]	; (800d9b8 <FATFS_LinkDriverEx+0x94>)
 800d974:	7a5b      	ldrb	r3, [r3, #9]
 800d976:	b2db      	uxtb	r3, r3
 800d978:	1c5a      	adds	r2, r3, #1
 800d97a:	b2d1      	uxtb	r1, r2
 800d97c:	4a0e      	ldr	r2, [pc, #56]	; (800d9b8 <FATFS_LinkDriverEx+0x94>)
 800d97e:	7251      	strb	r1, [r2, #9]
 800d980:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d982:	7dbb      	ldrb	r3, [r7, #22]
 800d984:	3330      	adds	r3, #48	; 0x30
 800d986:	b2da      	uxtb	r2, r3
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	3301      	adds	r3, #1
 800d990:	223a      	movs	r2, #58	; 0x3a
 800d992:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	3302      	adds	r3, #2
 800d998:	222f      	movs	r2, #47	; 0x2f
 800d99a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	3303      	adds	r3, #3
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	371c      	adds	r7, #28
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	20002ff8 	.word	0x20002ff8

0800d9bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	6839      	ldr	r1, [r7, #0]
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f7ff ffaa 	bl	800d924 <FATFS_LinkDriverEx>
 800d9d0:	4603      	mov	r3, r0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3708      	adds	r7, #8
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
	...

0800d9dc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	6039      	str	r1, [r7, #0]
 800d9e6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d9e8:	88fb      	ldrh	r3, [r7, #6]
 800d9ea:	2b7f      	cmp	r3, #127	; 0x7f
 800d9ec:	d802      	bhi.n	800d9f4 <ff_convert+0x18>
		c = chr;
 800d9ee:	88fb      	ldrh	r3, [r7, #6]
 800d9f0:	81fb      	strh	r3, [r7, #14]
 800d9f2:	e025      	b.n	800da40 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00b      	beq.n	800da12 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d9fa:	88fb      	ldrh	r3, [r7, #6]
 800d9fc:	2bff      	cmp	r3, #255	; 0xff
 800d9fe:	d805      	bhi.n	800da0c <ff_convert+0x30>
 800da00:	88fb      	ldrh	r3, [r7, #6]
 800da02:	3b80      	subs	r3, #128	; 0x80
 800da04:	4a12      	ldr	r2, [pc, #72]	; (800da50 <ff_convert+0x74>)
 800da06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da0a:	e000      	b.n	800da0e <ff_convert+0x32>
 800da0c:	2300      	movs	r3, #0
 800da0e:	81fb      	strh	r3, [r7, #14]
 800da10:	e016      	b.n	800da40 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800da12:	2300      	movs	r3, #0
 800da14:	81fb      	strh	r3, [r7, #14]
 800da16:	e009      	b.n	800da2c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800da18:	89fb      	ldrh	r3, [r7, #14]
 800da1a:	4a0d      	ldr	r2, [pc, #52]	; (800da50 <ff_convert+0x74>)
 800da1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da20:	88fa      	ldrh	r2, [r7, #6]
 800da22:	429a      	cmp	r2, r3
 800da24:	d006      	beq.n	800da34 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800da26:	89fb      	ldrh	r3, [r7, #14]
 800da28:	3301      	adds	r3, #1
 800da2a:	81fb      	strh	r3, [r7, #14]
 800da2c:	89fb      	ldrh	r3, [r7, #14]
 800da2e:	2b7f      	cmp	r3, #127	; 0x7f
 800da30:	d9f2      	bls.n	800da18 <ff_convert+0x3c>
 800da32:	e000      	b.n	800da36 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800da34:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800da36:	89fb      	ldrh	r3, [r7, #14]
 800da38:	3380      	adds	r3, #128	; 0x80
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800da40:	89fb      	ldrh	r3, [r7, #14]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3714      	adds	r7, #20
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	08014c20 	.word	0x08014c20

0800da54 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800da54:	b480      	push	{r7}
 800da56:	b087      	sub	sp, #28
 800da58:	af00      	add	r7, sp, #0
 800da5a:	4603      	mov	r3, r0
 800da5c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800da5e:	88fb      	ldrh	r3, [r7, #6]
 800da60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da64:	d201      	bcs.n	800da6a <ff_wtoupper+0x16>
 800da66:	4b3e      	ldr	r3, [pc, #248]	; (800db60 <ff_wtoupper+0x10c>)
 800da68:	e000      	b.n	800da6c <ff_wtoupper+0x18>
 800da6a:	4b3e      	ldr	r3, [pc, #248]	; (800db64 <ff_wtoupper+0x110>)
 800da6c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	1c9a      	adds	r2, r3, #2
 800da72:	617a      	str	r2, [r7, #20]
 800da74:	881b      	ldrh	r3, [r3, #0]
 800da76:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800da78:	8a7b      	ldrh	r3, [r7, #18]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d068      	beq.n	800db50 <ff_wtoupper+0xfc>
 800da7e:	88fa      	ldrh	r2, [r7, #6]
 800da80:	8a7b      	ldrh	r3, [r7, #18]
 800da82:	429a      	cmp	r2, r3
 800da84:	d364      	bcc.n	800db50 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	1c9a      	adds	r2, r3, #2
 800da8a:	617a      	str	r2, [r7, #20]
 800da8c:	881b      	ldrh	r3, [r3, #0]
 800da8e:	823b      	strh	r3, [r7, #16]
 800da90:	8a3b      	ldrh	r3, [r7, #16]
 800da92:	0a1b      	lsrs	r3, r3, #8
 800da94:	81fb      	strh	r3, [r7, #14]
 800da96:	8a3b      	ldrh	r3, [r7, #16]
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800da9c:	88fa      	ldrh	r2, [r7, #6]
 800da9e:	8a79      	ldrh	r1, [r7, #18]
 800daa0:	8a3b      	ldrh	r3, [r7, #16]
 800daa2:	440b      	add	r3, r1
 800daa4:	429a      	cmp	r2, r3
 800daa6:	da49      	bge.n	800db3c <ff_wtoupper+0xe8>
			switch (cmd) {
 800daa8:	89fb      	ldrh	r3, [r7, #14]
 800daaa:	2b08      	cmp	r3, #8
 800daac:	d84f      	bhi.n	800db4e <ff_wtoupper+0xfa>
 800daae:	a201      	add	r2, pc, #4	; (adr r2, 800dab4 <ff_wtoupper+0x60>)
 800dab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab4:	0800dad9 	.word	0x0800dad9
 800dab8:	0800daeb 	.word	0x0800daeb
 800dabc:	0800db01 	.word	0x0800db01
 800dac0:	0800db09 	.word	0x0800db09
 800dac4:	0800db11 	.word	0x0800db11
 800dac8:	0800db19 	.word	0x0800db19
 800dacc:	0800db21 	.word	0x0800db21
 800dad0:	0800db29 	.word	0x0800db29
 800dad4:	0800db31 	.word	0x0800db31
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dad8:	88fa      	ldrh	r2, [r7, #6]
 800dada:	8a7b      	ldrh	r3, [r7, #18]
 800dadc:	1ad3      	subs	r3, r2, r3
 800dade:	005b      	lsls	r3, r3, #1
 800dae0:	697a      	ldr	r2, [r7, #20]
 800dae2:	4413      	add	r3, r2
 800dae4:	881b      	ldrh	r3, [r3, #0]
 800dae6:	80fb      	strh	r3, [r7, #6]
 800dae8:	e027      	b.n	800db3a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800daea:	88fa      	ldrh	r2, [r7, #6]
 800daec:	8a7b      	ldrh	r3, [r7, #18]
 800daee:	1ad3      	subs	r3, r2, r3
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	f003 0301 	and.w	r3, r3, #1
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	88fa      	ldrh	r2, [r7, #6]
 800dafa:	1ad3      	subs	r3, r2, r3
 800dafc:	80fb      	strh	r3, [r7, #6]
 800dafe:	e01c      	b.n	800db3a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800db00:	88fb      	ldrh	r3, [r7, #6]
 800db02:	3b10      	subs	r3, #16
 800db04:	80fb      	strh	r3, [r7, #6]
 800db06:	e018      	b.n	800db3a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800db08:	88fb      	ldrh	r3, [r7, #6]
 800db0a:	3b20      	subs	r3, #32
 800db0c:	80fb      	strh	r3, [r7, #6]
 800db0e:	e014      	b.n	800db3a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800db10:	88fb      	ldrh	r3, [r7, #6]
 800db12:	3b30      	subs	r3, #48	; 0x30
 800db14:	80fb      	strh	r3, [r7, #6]
 800db16:	e010      	b.n	800db3a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800db18:	88fb      	ldrh	r3, [r7, #6]
 800db1a:	3b1a      	subs	r3, #26
 800db1c:	80fb      	strh	r3, [r7, #6]
 800db1e:	e00c      	b.n	800db3a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800db20:	88fb      	ldrh	r3, [r7, #6]
 800db22:	3308      	adds	r3, #8
 800db24:	80fb      	strh	r3, [r7, #6]
 800db26:	e008      	b.n	800db3a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800db28:	88fb      	ldrh	r3, [r7, #6]
 800db2a:	3b50      	subs	r3, #80	; 0x50
 800db2c:	80fb      	strh	r3, [r7, #6]
 800db2e:	e004      	b.n	800db3a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800db30:	88fb      	ldrh	r3, [r7, #6]
 800db32:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800db36:	80fb      	strh	r3, [r7, #6]
 800db38:	bf00      	nop
			}
			break;
 800db3a:	e008      	b.n	800db4e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800db3c:	89fb      	ldrh	r3, [r7, #14]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d195      	bne.n	800da6e <ff_wtoupper+0x1a>
 800db42:	8a3b      	ldrh	r3, [r7, #16]
 800db44:	005b      	lsls	r3, r3, #1
 800db46:	697a      	ldr	r2, [r7, #20]
 800db48:	4413      	add	r3, r2
 800db4a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800db4c:	e78f      	b.n	800da6e <ff_wtoupper+0x1a>
			break;
 800db4e:	bf00      	nop
	}

	return chr;
 800db50:	88fb      	ldrh	r3, [r7, #6]
}
 800db52:	4618      	mov	r0, r3
 800db54:	371c      	adds	r7, #28
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop
 800db60:	08014d20 	.word	0x08014d20
 800db64:	08014f14 	.word	0x08014f14

0800db68 <arm_mat_mult_f32>:
 800db68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db6c:	8843      	ldrh	r3, [r0, #2]
 800db6e:	880d      	ldrh	r5, [r1, #0]
 800db70:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800db74:	6854      	ldr	r4, [r2, #4]
 800db76:	8800      	ldrh	r0, [r0, #0]
 800db78:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800db7c:	b087      	sub	sp, #28
 800db7e:	429d      	cmp	r5, r3
 800db80:	9003      	str	r0, [sp, #12]
 800db82:	9404      	str	r4, [sp, #16]
 800db84:	f040 808d 	bne.w	800dca2 <arm_mat_mult_f32+0x13a>
 800db88:	8813      	ldrh	r3, [r2, #0]
 800db8a:	4283      	cmp	r3, r0
 800db8c:	f040 8089 	bne.w	800dca2 <arm_mat_mult_f32+0x13a>
 800db90:	8853      	ldrh	r3, [r2, #2]
 800db92:	4543      	cmp	r3, r8
 800db94:	f040 8085 	bne.w	800dca2 <arm_mat_mult_f32+0x13a>
 800db98:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 800db9c:	f005 0303 	and.w	r3, r5, #3
 800dba0:	461a      	mov	r2, r3
 800dba2:	9301      	str	r3, [sp, #4]
 800dba4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	3301      	adds	r3, #1
 800dbac:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 800dbb0:	fb0b fb03 	mul.w	fp, fp, r3
 800dbb4:	3a01      	subs	r2, #1
 800dbb6:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 800dbba:	00ab      	lsls	r3, r5, #2
 800dbbc:	b292      	uxth	r2, r2
 800dbbe:	9305      	str	r3, [sp, #20]
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	3201      	adds	r2, #1
 800dbc4:	9302      	str	r3, [sp, #8]
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	684c      	ldr	r4, [r1, #4]
 800dbca:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800dbce:	4651      	mov	r1, sl
 800dbd0:	ea4f 0088 	mov.w	r0, r8, lsl #2
 800dbd4:	46da      	mov	sl, fp
 800dbd6:	469b      	mov	fp, r3
 800dbd8:	9b04      	ldr	r3, [sp, #16]
 800dbda:	9a02      	ldr	r2, [sp, #8]
 800dbdc:	2600      	movs	r6, #0
 800dbde:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800dbe2:	f10c 0510 	add.w	r5, ip, #16
 800dbe6:	eddf 7a31 	vldr	s15, [pc, #196]	; 800dcac <arm_mat_mult_f32+0x144>
 800dbea:	2900      	cmp	r1, #0
 800dbec:	d057      	beq.n	800dc9e <arm_mat_mult_f32+0x136>
 800dbee:	f10e 0210 	add.w	r2, lr, #16
 800dbf2:	4623      	mov	r3, r4
 800dbf4:	ed52 5a04 	vldr	s11, [r2, #-16]
 800dbf8:	edd3 6a00 	vldr	s13, [r3]
 800dbfc:	ed12 7a03 	vldr	s14, [r2, #-12]
 800dc00:	ed12 5a02 	vldr	s10, [r2, #-8]
 800dc04:	ed12 6a01 	vldr	s12, [r2, #-4]
 800dc08:	4403      	add	r3, r0
 800dc0a:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800dc0e:	edd3 6a00 	vldr	s13, [r3]
 800dc12:	4403      	add	r3, r0
 800dc14:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dc18:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800dc1c:	edd3 6a00 	vldr	s13, [r3]
 800dc20:	4403      	add	r3, r0
 800dc22:	ee77 5a27 	vadd.f32	s11, s14, s15
 800dc26:	ee65 7a26 	vmul.f32	s15, s10, s13
 800dc2a:	edd3 6a00 	vldr	s13, [r3]
 800dc2e:	ee37 7aa5 	vadd.f32	s14, s15, s11
 800dc32:	3210      	adds	r2, #16
 800dc34:	ee66 7a26 	vmul.f32	s15, s12, s13
 800dc38:	42aa      	cmp	r2, r5
 800dc3a:	4403      	add	r3, r0
 800dc3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc40:	d1d8      	bne.n	800dbf4 <arm_mat_mult_f32+0x8c>
 800dc42:	4454      	add	r4, sl
 800dc44:	4663      	mov	r3, ip
 800dc46:	9a01      	ldr	r2, [sp, #4]
 800dc48:	b162      	cbz	r2, 800dc64 <arm_mat_mult_f32+0xfc>
 800dc4a:	eb03 0209 	add.w	r2, r3, r9
 800dc4e:	ecf3 6a01 	vldmia	r3!, {s13}
 800dc52:	ed94 7a00 	vldr	s14, [r4]
 800dc56:	ee26 7a87 	vmul.f32	s14, s13, s14
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	4404      	add	r4, r0
 800dc5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc62:	d1f4      	bne.n	800dc4e <arm_mat_mult_f32+0xe6>
 800dc64:	ece7 7a01 	vstmia	r7!, {s15}
 800dc68:	3601      	adds	r6, #1
 800dc6a:	b2b6      	uxth	r6, r6
 800dc6c:	f8db 3004 	ldr.w	r3, [fp, #4]
 800dc70:	4546      	cmp	r6, r8
 800dc72:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 800dc76:	d1b6      	bne.n	800dbe6 <arm_mat_mult_f32+0x7e>
 800dc78:	9a03      	ldr	r2, [sp, #12]
 800dc7a:	9c02      	ldr	r4, [sp, #8]
 800dc7c:	9d05      	ldr	r5, [sp, #20]
 800dc7e:	3a01      	subs	r2, #1
 800dc80:	4434      	add	r4, r6
 800dc82:	b2a4      	uxth	r4, r4
 800dc84:	b292      	uxth	r2, r2
 800dc86:	9402      	str	r4, [sp, #8]
 800dc88:	9203      	str	r2, [sp, #12]
 800dc8a:	44ae      	add	lr, r5
 800dc8c:	44ac      	add	ip, r5
 800dc8e:	461c      	mov	r4, r3
 800dc90:	2a00      	cmp	r2, #0
 800dc92:	d1a1      	bne.n	800dbd8 <arm_mat_mult_f32+0x70>
 800dc94:	4610      	mov	r0, r2
 800dc96:	b240      	sxtb	r0, r0
 800dc98:	b007      	add	sp, #28
 800dc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc9e:	4673      	mov	r3, lr
 800dca0:	e7d1      	b.n	800dc46 <arm_mat_mult_f32+0xde>
 800dca2:	20fd      	movs	r0, #253	; 0xfd
 800dca4:	b240      	sxtb	r0, r0
 800dca6:	b007      	add	sp, #28
 800dca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcac:	00000000 	.word	0x00000000

0800dcb0 <arm_mat_inverse_f32>:
 800dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb4:	8803      	ldrh	r3, [r0, #0]
 800dcb6:	8844      	ldrh	r4, [r0, #2]
 800dcb8:	6845      	ldr	r5, [r0, #4]
 800dcba:	684a      	ldr	r2, [r1, #4]
 800dcbc:	b089      	sub	sp, #36	; 0x24
 800dcbe:	429c      	cmp	r4, r3
 800dcc0:	9202      	str	r2, [sp, #8]
 800dcc2:	9501      	str	r5, [sp, #4]
 800dcc4:	d004      	beq.n	800dcd0 <arm_mat_inverse_f32+0x20>
 800dcc6:	20fd      	movs	r0, #253	; 0xfd
 800dcc8:	b240      	sxtb	r0, r0
 800dcca:	b009      	add	sp, #36	; 0x24
 800dccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd0:	880a      	ldrh	r2, [r1, #0]
 800dcd2:	884b      	ldrh	r3, [r1, #2]
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d1f6      	bne.n	800dcc6 <arm_mat_inverse_f32+0x16>
 800dcd8:	429c      	cmp	r4, r3
 800dcda:	d1f4      	bne.n	800dcc6 <arm_mat_inverse_f32+0x16>
 800dcdc:	2c00      	cmp	r4, #0
 800dcde:	f000 80e4 	beq.w	800deaa <arm_mat_inverse_f32+0x1fa>
 800dce2:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
 800dce6:	4623      	mov	r3, r4
 800dce8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800dcec:	f04f 0a00 	mov.w	sl, #0
 800dcf0:	1e67      	subs	r7, r4, #1
 800dcf2:	9007      	str	r0, [sp, #28]
 800dcf4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800dcf8:	9e02      	ldr	r6, [sp, #8]
 800dcfa:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800dcfe:	4654      	mov	r4, sl
 800dd00:	4698      	mov	r8, r3
 800dd02:	e007      	b.n	800dd14 <arm_mat_inverse_f32+0x64>
 800dd04:	f001 ff48 	bl	800fb98 <memset>
 800dd08:	444e      	add	r6, r9
 800dd0a:	3401      	adds	r4, #1
 800dd0c:	f1a9 0904 	sub.w	r9, r9, #4
 800dd10:	f10a 0a04 	add.w	sl, sl, #4
 800dd14:	4652      	mov	r2, sl
 800dd16:	4630      	mov	r0, r6
 800dd18:	2100      	movs	r1, #0
 800dd1a:	b114      	cbz	r4, 800dd22 <arm_mat_inverse_f32+0x72>
 800dd1c:	f001 ff3c 	bl	800fb98 <memset>
 800dd20:	4456      	add	r6, sl
 800dd22:	f8c6 b000 	str.w	fp, [r6]
 800dd26:	42bc      	cmp	r4, r7
 800dd28:	f106 0604 	add.w	r6, r6, #4
 800dd2c:	464a      	mov	r2, r9
 800dd2e:	4630      	mov	r0, r6
 800dd30:	f04f 0100 	mov.w	r1, #0
 800dd34:	d1e6      	bne.n	800dd04 <arm_mat_inverse_f32+0x54>
 800dd36:	4643      	mov	r3, r8
 800dd38:	009e      	lsls	r6, r3, #2
 800dd3a:	46a0      	mov	r8, r4
 800dd3c:	2700      	movs	r7, #0
 800dd3e:	461c      	mov	r4, r3
 800dd40:	f8dd c008 	ldr.w	ip, [sp, #8]
 800dd44:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd48:	1d33      	adds	r3, r6, #4
 800dd4a:	9306      	str	r3, [sp, #24]
 800dd4c:	46b1      	mov	r9, r6
 800dd4e:	9705      	str	r7, [sp, #20]
 800dd50:	46a6      	mov	lr, r4
 800dd52:	42bc      	cmp	r4, r7
 800dd54:	edd5 6a00 	vldr	s13, [r5]
 800dd58:	f000 80be 	beq.w	800ded8 <arm_mat_inverse_f32+0x228>
 800dd5c:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800df28 <arm_mat_inverse_f32+0x278>
 800dd60:	463a      	mov	r2, r7
 800dd62:	462b      	mov	r3, r5
 800dd64:	edd3 7a00 	vldr	s15, [r3]
 800dd68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd70:	bfd8      	it	le
 800dd72:	eef1 7a67 	vnegle.f32	s15, s15
 800dd76:	eef4 7a47 	vcmp.f32	s15, s14
 800dd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd7e:	f102 0201 	add.w	r2, r2, #1
 800dd82:	bfc8      	it	gt
 800dd84:	eeb0 7a67 	vmovgt.f32	s14, s15
 800dd88:	4294      	cmp	r4, r2
 800dd8a:	4433      	add	r3, r6
 800dd8c:	d1ea      	bne.n	800dd64 <arm_mat_inverse_f32+0xb4>
 800dd8e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd96:	f000 809f 	beq.w	800ded8 <arm_mat_inverse_f32+0x228>
 800dd9a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800dd9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda2:	bfd4      	ite	le
 800dda4:	eef1 7a66 	vnegle.f32	s15, s13
 800dda8:	eef0 7a66 	vmovgt.f32	s15, s13
 800ddac:	eef4 7a47 	vcmp.f32	s15, s14
 800ddb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb4:	d010      	beq.n	800ddd8 <arm_mat_inverse_f32+0x128>
 800ddb6:	9b03      	ldr	r3, [sp, #12]
 800ddb8:	b173      	cbz	r3, 800ddd8 <arm_mat_inverse_f32+0x128>
 800ddba:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ddbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddc2:	eef1 7a66 	vneg.f32	s15, s13
 800ddc6:	bfc8      	it	gt
 800ddc8:	eef0 7a66 	vmovgt.f32	s15, s13
 800ddcc:	eef4 7a47 	vcmp.f32	s15, s14
 800ddd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd4:	f000 8084 	beq.w	800dee0 <arm_mat_inverse_f32+0x230>
 800ddd8:	9b05      	ldr	r3, [sp, #20]
 800ddda:	b933      	cbnz	r3, 800ddea <arm_mat_inverse_f32+0x13a>
 800dddc:	eef5 6a40 	vcmp.f32	s13, #0.0
 800dde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde4:	d078      	beq.n	800ded8 <arm_mat_inverse_f32+0x228>
 800dde6:	2300      	movs	r3, #0
 800dde8:	9305      	str	r3, [sp, #20]
 800ddea:	eb0c 0306 	add.w	r3, ip, r6
 800ddee:	9304      	str	r3, [sp, #16]
 800ddf0:	4672      	mov	r2, lr
 800ddf2:	462b      	mov	r3, r5
 800ddf4:	edd3 7a00 	vldr	s15, [r3]
 800ddf8:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 800ddfc:	3a01      	subs	r2, #1
 800ddfe:	ece3 7a01 	vstmia	r3!, {s15}
 800de02:	d1f7      	bne.n	800ddf4 <arm_mat_inverse_f32+0x144>
 800de04:	4621      	mov	r1, r4
 800de06:	4663      	mov	r3, ip
 800de08:	edd3 7a00 	vldr	s15, [r3]
 800de0c:	eec7 7aa6 	vdiv.f32	s15, s15, s13
 800de10:	3901      	subs	r1, #1
 800de12:	ece3 7a01 	vstmia	r3!, {s15}
 800de16:	d1f7      	bne.n	800de08 <arm_mat_inverse_f32+0x158>
 800de18:	9802      	ldr	r0, [sp, #8]
 800de1a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800de1e:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800de22:	42b9      	cmp	r1, r7
 800de24:	d07c      	beq.n	800df20 <arm_mat_inverse_f32+0x270>
 800de26:	eddb 6a00 	vldr	s13, [fp]
 800de2a:	4672      	mov	r2, lr
 800de2c:	46aa      	mov	sl, r5
 800de2e:	465b      	mov	r3, fp
 800de30:	ecfa 7a01 	vldmia	sl!, {s15}
 800de34:	ed93 7a00 	vldr	s14, [r3]
 800de38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de3c:	3a01      	subs	r2, #1
 800de3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de42:	ece3 7a01 	vstmia	r3!, {s15}
 800de46:	d1f3      	bne.n	800de30 <arm_mat_inverse_f32+0x180>
 800de48:	44cb      	add	fp, r9
 800de4a:	4622      	mov	r2, r4
 800de4c:	46e2      	mov	sl, ip
 800de4e:	4603      	mov	r3, r0
 800de50:	ecfa 7a01 	vldmia	sl!, {s15}
 800de54:	ed93 7a00 	vldr	s14, [r3]
 800de58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de5c:	3a01      	subs	r2, #1
 800de5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de62:	ece3 7a01 	vstmia	r3!, {s15}
 800de66:	d1f3      	bne.n	800de50 <arm_mat_inverse_f32+0x1a0>
 800de68:	4430      	add	r0, r6
 800de6a:	3101      	adds	r1, #1
 800de6c:	428c      	cmp	r4, r1
 800de6e:	44c3      	add	fp, r8
 800de70:	d1d7      	bne.n	800de22 <arm_mat_inverse_f32+0x172>
 800de72:	9b01      	ldr	r3, [sp, #4]
 800de74:	f8dd c010 	ldr.w	ip, [sp, #16]
 800de78:	3304      	adds	r3, #4
 800de7a:	9301      	str	r3, [sp, #4]
 800de7c:	9b06      	ldr	r3, [sp, #24]
 800de7e:	441d      	add	r5, r3
 800de80:	9b03      	ldr	r3, [sp, #12]
 800de82:	f1be 0e01 	subs.w	lr, lr, #1
 800de86:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800de8a:	f107 0701 	add.w	r7, r7, #1
 800de8e:	9303      	str	r3, [sp, #12]
 800de90:	f1a9 0904 	sub.w	r9, r9, #4
 800de94:	f47f af5d 	bne.w	800dd52 <arm_mat_inverse_f32+0xa2>
 800de98:	9b05      	ldr	r3, [sp, #20]
 800de9a:	b9fb      	cbnz	r3, 800dedc <arm_mat_inverse_f32+0x22c>
 800de9c:	eef5 6a40 	vcmp.f32	s13, #0.0
 800dea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dea4:	d11a      	bne.n	800dedc <arm_mat_inverse_f32+0x22c>
 800dea6:	9b07      	ldr	r3, [sp, #28]
 800dea8:	685d      	ldr	r5, [r3, #4]
 800deaa:	fb04 f404 	mul.w	r4, r4, r4
 800deae:	b19c      	cbz	r4, 800ded8 <arm_mat_inverse_f32+0x228>
 800deb0:	edd5 7a00 	vldr	s15, [r5]
 800deb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800deb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800debc:	d10e      	bne.n	800dedc <arm_mat_inverse_f32+0x22c>
 800debe:	3504      	adds	r5, #4
 800dec0:	2300      	movs	r3, #0
 800dec2:	e006      	b.n	800ded2 <arm_mat_inverse_f32+0x222>
 800dec4:	ecf5 7a01 	vldmia	r5!, {s15}
 800dec8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800decc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded0:	d104      	bne.n	800dedc <arm_mat_inverse_f32+0x22c>
 800ded2:	3301      	adds	r3, #1
 800ded4:	42a3      	cmp	r3, r4
 800ded6:	d1f5      	bne.n	800dec4 <arm_mat_inverse_f32+0x214>
 800ded8:	20fb      	movs	r0, #251	; 0xfb
 800deda:	e6f5      	b.n	800dcc8 <arm_mat_inverse_f32+0x18>
 800dedc:	2000      	movs	r0, #0
 800dede:	e6f3      	b.n	800dcc8 <arm_mat_inverse_f32+0x18>
 800dee0:	9b01      	ldr	r3, [sp, #4]
 800dee2:	4671      	mov	r1, lr
 800dee4:	462a      	mov	r2, r5
 800dee6:	6810      	ldr	r0, [r2, #0]
 800dee8:	f8d3 8000 	ldr.w	r8, [r3]
 800deec:	f842 8b04 	str.w	r8, [r2], #4
 800def0:	3901      	subs	r1, #1
 800def2:	f843 0b04 	str.w	r0, [r3], #4
 800def6:	d1f6      	bne.n	800dee6 <arm_mat_inverse_f32+0x236>
 800def8:	eb0c 0306 	add.w	r3, ip, r6
 800defc:	9304      	str	r3, [sp, #16]
 800defe:	4619      	mov	r1, r3
 800df00:	4622      	mov	r2, r4
 800df02:	4663      	mov	r3, ip
 800df04:	6808      	ldr	r0, [r1, #0]
 800df06:	f8d3 8000 	ldr.w	r8, [r3]
 800df0a:	f841 8b04 	str.w	r8, [r1], #4
 800df0e:	3a01      	subs	r2, #1
 800df10:	f843 0b04 	str.w	r0, [r3], #4
 800df14:	d1f6      	bne.n	800df04 <arm_mat_inverse_f32+0x254>
 800df16:	2301      	movs	r3, #1
 800df18:	edd5 6a00 	vldr	s13, [r5]
 800df1c:	9305      	str	r3, [sp, #20]
 800df1e:	e767      	b.n	800ddf0 <arm_mat_inverse_f32+0x140>
 800df20:	44cb      	add	fp, r9
 800df22:	4430      	add	r0, r6
 800df24:	e7a1      	b.n	800de6a <arm_mat_inverse_f32+0x1ba>
 800df26:	bf00      	nop
 800df28:	00000000 	.word	0x00000000

0800df2c <arm_mat_init_f32>:
 800df2c:	8001      	strh	r1, [r0, #0]
 800df2e:	8042      	strh	r2, [r0, #2]
 800df30:	6043      	str	r3, [r0, #4]
 800df32:	4770      	bx	lr

0800df34 <atoi>:
 800df34:	220a      	movs	r2, #10
 800df36:	2100      	movs	r1, #0
 800df38:	f001 bdf4 	b.w	800fb24 <strtol>

0800df3c <__cvt>:
 800df3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800df40:	ec55 4b10 	vmov	r4, r5, d0
 800df44:	2d00      	cmp	r5, #0
 800df46:	460e      	mov	r6, r1
 800df48:	4619      	mov	r1, r3
 800df4a:	462b      	mov	r3, r5
 800df4c:	bfbb      	ittet	lt
 800df4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800df52:	461d      	movlt	r5, r3
 800df54:	2300      	movge	r3, #0
 800df56:	232d      	movlt	r3, #45	; 0x2d
 800df58:	700b      	strb	r3, [r1, #0]
 800df5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800df60:	4691      	mov	r9, r2
 800df62:	f023 0820 	bic.w	r8, r3, #32
 800df66:	bfbc      	itt	lt
 800df68:	4622      	movlt	r2, r4
 800df6a:	4614      	movlt	r4, r2
 800df6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df70:	d005      	beq.n	800df7e <__cvt+0x42>
 800df72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800df76:	d100      	bne.n	800df7a <__cvt+0x3e>
 800df78:	3601      	adds	r6, #1
 800df7a:	2102      	movs	r1, #2
 800df7c:	e000      	b.n	800df80 <__cvt+0x44>
 800df7e:	2103      	movs	r1, #3
 800df80:	ab03      	add	r3, sp, #12
 800df82:	9301      	str	r3, [sp, #4]
 800df84:	ab02      	add	r3, sp, #8
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	ec45 4b10 	vmov	d0, r4, r5
 800df8c:	4653      	mov	r3, sl
 800df8e:	4632      	mov	r2, r6
 800df90:	f001 fee2 	bl	800fd58 <_dtoa_r>
 800df94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800df98:	4607      	mov	r7, r0
 800df9a:	d102      	bne.n	800dfa2 <__cvt+0x66>
 800df9c:	f019 0f01 	tst.w	r9, #1
 800dfa0:	d022      	beq.n	800dfe8 <__cvt+0xac>
 800dfa2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dfa6:	eb07 0906 	add.w	r9, r7, r6
 800dfaa:	d110      	bne.n	800dfce <__cvt+0x92>
 800dfac:	783b      	ldrb	r3, [r7, #0]
 800dfae:	2b30      	cmp	r3, #48	; 0x30
 800dfb0:	d10a      	bne.n	800dfc8 <__cvt+0x8c>
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	4629      	mov	r1, r5
 800dfba:	f7f2 fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfbe:	b918      	cbnz	r0, 800dfc8 <__cvt+0x8c>
 800dfc0:	f1c6 0601 	rsb	r6, r6, #1
 800dfc4:	f8ca 6000 	str.w	r6, [sl]
 800dfc8:	f8da 3000 	ldr.w	r3, [sl]
 800dfcc:	4499      	add	r9, r3
 800dfce:	2200      	movs	r2, #0
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	f7f2 fd77 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfda:	b108      	cbz	r0, 800dfe0 <__cvt+0xa4>
 800dfdc:	f8cd 900c 	str.w	r9, [sp, #12]
 800dfe0:	2230      	movs	r2, #48	; 0x30
 800dfe2:	9b03      	ldr	r3, [sp, #12]
 800dfe4:	454b      	cmp	r3, r9
 800dfe6:	d307      	bcc.n	800dff8 <__cvt+0xbc>
 800dfe8:	9b03      	ldr	r3, [sp, #12]
 800dfea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfec:	1bdb      	subs	r3, r3, r7
 800dfee:	4638      	mov	r0, r7
 800dff0:	6013      	str	r3, [r2, #0]
 800dff2:	b004      	add	sp, #16
 800dff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dff8:	1c59      	adds	r1, r3, #1
 800dffa:	9103      	str	r1, [sp, #12]
 800dffc:	701a      	strb	r2, [r3, #0]
 800dffe:	e7f0      	b.n	800dfe2 <__cvt+0xa6>

0800e000 <__exponent>:
 800e000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e002:	4603      	mov	r3, r0
 800e004:	2900      	cmp	r1, #0
 800e006:	bfb8      	it	lt
 800e008:	4249      	neglt	r1, r1
 800e00a:	f803 2b02 	strb.w	r2, [r3], #2
 800e00e:	bfb4      	ite	lt
 800e010:	222d      	movlt	r2, #45	; 0x2d
 800e012:	222b      	movge	r2, #43	; 0x2b
 800e014:	2909      	cmp	r1, #9
 800e016:	7042      	strb	r2, [r0, #1]
 800e018:	dd2a      	ble.n	800e070 <__exponent+0x70>
 800e01a:	f10d 0207 	add.w	r2, sp, #7
 800e01e:	4617      	mov	r7, r2
 800e020:	260a      	movs	r6, #10
 800e022:	4694      	mov	ip, r2
 800e024:	fb91 f5f6 	sdiv	r5, r1, r6
 800e028:	fb06 1415 	mls	r4, r6, r5, r1
 800e02c:	3430      	adds	r4, #48	; 0x30
 800e02e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e032:	460c      	mov	r4, r1
 800e034:	2c63      	cmp	r4, #99	; 0x63
 800e036:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800e03a:	4629      	mov	r1, r5
 800e03c:	dcf1      	bgt.n	800e022 <__exponent+0x22>
 800e03e:	3130      	adds	r1, #48	; 0x30
 800e040:	f1ac 0402 	sub.w	r4, ip, #2
 800e044:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e048:	1c41      	adds	r1, r0, #1
 800e04a:	4622      	mov	r2, r4
 800e04c:	42ba      	cmp	r2, r7
 800e04e:	d30a      	bcc.n	800e066 <__exponent+0x66>
 800e050:	f10d 0209 	add.w	r2, sp, #9
 800e054:	eba2 020c 	sub.w	r2, r2, ip
 800e058:	42bc      	cmp	r4, r7
 800e05a:	bf88      	it	hi
 800e05c:	2200      	movhi	r2, #0
 800e05e:	4413      	add	r3, r2
 800e060:	1a18      	subs	r0, r3, r0
 800e062:	b003      	add	sp, #12
 800e064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e066:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e06a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e06e:	e7ed      	b.n	800e04c <__exponent+0x4c>
 800e070:	2330      	movs	r3, #48	; 0x30
 800e072:	3130      	adds	r1, #48	; 0x30
 800e074:	7083      	strb	r3, [r0, #2]
 800e076:	70c1      	strb	r1, [r0, #3]
 800e078:	1d03      	adds	r3, r0, #4
 800e07a:	e7f1      	b.n	800e060 <__exponent+0x60>

0800e07c <_printf_float>:
 800e07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e080:	ed2d 8b02 	vpush	{d8}
 800e084:	b08d      	sub	sp, #52	; 0x34
 800e086:	460c      	mov	r4, r1
 800e088:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e08c:	4616      	mov	r6, r2
 800e08e:	461f      	mov	r7, r3
 800e090:	4605      	mov	r5, r0
 800e092:	f001 fd89 	bl	800fba8 <_localeconv_r>
 800e096:	f8d0 a000 	ldr.w	sl, [r0]
 800e09a:	4650      	mov	r0, sl
 800e09c:	f7f2 f8e8 	bl	8000270 <strlen>
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	930a      	str	r3, [sp, #40]	; 0x28
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	9305      	str	r3, [sp, #20]
 800e0a8:	f8d8 3000 	ldr.w	r3, [r8]
 800e0ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e0b0:	3307      	adds	r3, #7
 800e0b2:	f023 0307 	bic.w	r3, r3, #7
 800e0b6:	f103 0208 	add.w	r2, r3, #8
 800e0ba:	f8c8 2000 	str.w	r2, [r8]
 800e0be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e0c6:	9307      	str	r3, [sp, #28]
 800e0c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e0cc:	ee08 0a10 	vmov	s16, r0
 800e0d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e0d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0d8:	4b9e      	ldr	r3, [pc, #632]	; (800e354 <_printf_float+0x2d8>)
 800e0da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0de:	f7f2 fd25 	bl	8000b2c <__aeabi_dcmpun>
 800e0e2:	bb88      	cbnz	r0, 800e148 <_printf_float+0xcc>
 800e0e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0e8:	4b9a      	ldr	r3, [pc, #616]	; (800e354 <_printf_float+0x2d8>)
 800e0ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0ee:	f7f2 fcff 	bl	8000af0 <__aeabi_dcmple>
 800e0f2:	bb48      	cbnz	r0, 800e148 <_printf_float+0xcc>
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	4640      	mov	r0, r8
 800e0fa:	4649      	mov	r1, r9
 800e0fc:	f7f2 fcee 	bl	8000adc <__aeabi_dcmplt>
 800e100:	b110      	cbz	r0, 800e108 <_printf_float+0x8c>
 800e102:	232d      	movs	r3, #45	; 0x2d
 800e104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e108:	4a93      	ldr	r2, [pc, #588]	; (800e358 <_printf_float+0x2dc>)
 800e10a:	4b94      	ldr	r3, [pc, #592]	; (800e35c <_printf_float+0x2e0>)
 800e10c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e110:	bf94      	ite	ls
 800e112:	4690      	movls	r8, r2
 800e114:	4698      	movhi	r8, r3
 800e116:	2303      	movs	r3, #3
 800e118:	6123      	str	r3, [r4, #16]
 800e11a:	9b05      	ldr	r3, [sp, #20]
 800e11c:	f023 0304 	bic.w	r3, r3, #4
 800e120:	6023      	str	r3, [r4, #0]
 800e122:	f04f 0900 	mov.w	r9, #0
 800e126:	9700      	str	r7, [sp, #0]
 800e128:	4633      	mov	r3, r6
 800e12a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e12c:	4621      	mov	r1, r4
 800e12e:	4628      	mov	r0, r5
 800e130:	f000 f9da 	bl	800e4e8 <_printf_common>
 800e134:	3001      	adds	r0, #1
 800e136:	f040 8090 	bne.w	800e25a <_printf_float+0x1de>
 800e13a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e13e:	b00d      	add	sp, #52	; 0x34
 800e140:	ecbd 8b02 	vpop	{d8}
 800e144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e148:	4642      	mov	r2, r8
 800e14a:	464b      	mov	r3, r9
 800e14c:	4640      	mov	r0, r8
 800e14e:	4649      	mov	r1, r9
 800e150:	f7f2 fcec 	bl	8000b2c <__aeabi_dcmpun>
 800e154:	b140      	cbz	r0, 800e168 <_printf_float+0xec>
 800e156:	464b      	mov	r3, r9
 800e158:	2b00      	cmp	r3, #0
 800e15a:	bfbc      	itt	lt
 800e15c:	232d      	movlt	r3, #45	; 0x2d
 800e15e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e162:	4a7f      	ldr	r2, [pc, #508]	; (800e360 <_printf_float+0x2e4>)
 800e164:	4b7f      	ldr	r3, [pc, #508]	; (800e364 <_printf_float+0x2e8>)
 800e166:	e7d1      	b.n	800e10c <_printf_float+0x90>
 800e168:	6863      	ldr	r3, [r4, #4]
 800e16a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e16e:	9206      	str	r2, [sp, #24]
 800e170:	1c5a      	adds	r2, r3, #1
 800e172:	d13f      	bne.n	800e1f4 <_printf_float+0x178>
 800e174:	2306      	movs	r3, #6
 800e176:	6063      	str	r3, [r4, #4]
 800e178:	9b05      	ldr	r3, [sp, #20]
 800e17a:	6861      	ldr	r1, [r4, #4]
 800e17c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e180:	2300      	movs	r3, #0
 800e182:	9303      	str	r3, [sp, #12]
 800e184:	ab0a      	add	r3, sp, #40	; 0x28
 800e186:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e18a:	ab09      	add	r3, sp, #36	; 0x24
 800e18c:	ec49 8b10 	vmov	d0, r8, r9
 800e190:	9300      	str	r3, [sp, #0]
 800e192:	6022      	str	r2, [r4, #0]
 800e194:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e198:	4628      	mov	r0, r5
 800e19a:	f7ff fecf 	bl	800df3c <__cvt>
 800e19e:	9b06      	ldr	r3, [sp, #24]
 800e1a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e1a2:	2b47      	cmp	r3, #71	; 0x47
 800e1a4:	4680      	mov	r8, r0
 800e1a6:	d108      	bne.n	800e1ba <_printf_float+0x13e>
 800e1a8:	1cc8      	adds	r0, r1, #3
 800e1aa:	db02      	blt.n	800e1b2 <_printf_float+0x136>
 800e1ac:	6863      	ldr	r3, [r4, #4]
 800e1ae:	4299      	cmp	r1, r3
 800e1b0:	dd41      	ble.n	800e236 <_printf_float+0x1ba>
 800e1b2:	f1ab 0302 	sub.w	r3, fp, #2
 800e1b6:	fa5f fb83 	uxtb.w	fp, r3
 800e1ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e1be:	d820      	bhi.n	800e202 <_printf_float+0x186>
 800e1c0:	3901      	subs	r1, #1
 800e1c2:	465a      	mov	r2, fp
 800e1c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e1c8:	9109      	str	r1, [sp, #36]	; 0x24
 800e1ca:	f7ff ff19 	bl	800e000 <__exponent>
 800e1ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1d0:	1813      	adds	r3, r2, r0
 800e1d2:	2a01      	cmp	r2, #1
 800e1d4:	4681      	mov	r9, r0
 800e1d6:	6123      	str	r3, [r4, #16]
 800e1d8:	dc02      	bgt.n	800e1e0 <_printf_float+0x164>
 800e1da:	6822      	ldr	r2, [r4, #0]
 800e1dc:	07d2      	lsls	r2, r2, #31
 800e1de:	d501      	bpl.n	800e1e4 <_printf_float+0x168>
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	6123      	str	r3, [r4, #16]
 800e1e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d09c      	beq.n	800e126 <_printf_float+0xaa>
 800e1ec:	232d      	movs	r3, #45	; 0x2d
 800e1ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1f2:	e798      	b.n	800e126 <_printf_float+0xaa>
 800e1f4:	9a06      	ldr	r2, [sp, #24]
 800e1f6:	2a47      	cmp	r2, #71	; 0x47
 800e1f8:	d1be      	bne.n	800e178 <_printf_float+0xfc>
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1bc      	bne.n	800e178 <_printf_float+0xfc>
 800e1fe:	2301      	movs	r3, #1
 800e200:	e7b9      	b.n	800e176 <_printf_float+0xfa>
 800e202:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e206:	d118      	bne.n	800e23a <_printf_float+0x1be>
 800e208:	2900      	cmp	r1, #0
 800e20a:	6863      	ldr	r3, [r4, #4]
 800e20c:	dd0b      	ble.n	800e226 <_printf_float+0x1aa>
 800e20e:	6121      	str	r1, [r4, #16]
 800e210:	b913      	cbnz	r3, 800e218 <_printf_float+0x19c>
 800e212:	6822      	ldr	r2, [r4, #0]
 800e214:	07d0      	lsls	r0, r2, #31
 800e216:	d502      	bpl.n	800e21e <_printf_float+0x1a2>
 800e218:	3301      	adds	r3, #1
 800e21a:	440b      	add	r3, r1
 800e21c:	6123      	str	r3, [r4, #16]
 800e21e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e220:	f04f 0900 	mov.w	r9, #0
 800e224:	e7de      	b.n	800e1e4 <_printf_float+0x168>
 800e226:	b913      	cbnz	r3, 800e22e <_printf_float+0x1b2>
 800e228:	6822      	ldr	r2, [r4, #0]
 800e22a:	07d2      	lsls	r2, r2, #31
 800e22c:	d501      	bpl.n	800e232 <_printf_float+0x1b6>
 800e22e:	3302      	adds	r3, #2
 800e230:	e7f4      	b.n	800e21c <_printf_float+0x1a0>
 800e232:	2301      	movs	r3, #1
 800e234:	e7f2      	b.n	800e21c <_printf_float+0x1a0>
 800e236:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e23c:	4299      	cmp	r1, r3
 800e23e:	db05      	blt.n	800e24c <_printf_float+0x1d0>
 800e240:	6823      	ldr	r3, [r4, #0]
 800e242:	6121      	str	r1, [r4, #16]
 800e244:	07d8      	lsls	r0, r3, #31
 800e246:	d5ea      	bpl.n	800e21e <_printf_float+0x1a2>
 800e248:	1c4b      	adds	r3, r1, #1
 800e24a:	e7e7      	b.n	800e21c <_printf_float+0x1a0>
 800e24c:	2900      	cmp	r1, #0
 800e24e:	bfd4      	ite	le
 800e250:	f1c1 0202 	rsble	r2, r1, #2
 800e254:	2201      	movgt	r2, #1
 800e256:	4413      	add	r3, r2
 800e258:	e7e0      	b.n	800e21c <_printf_float+0x1a0>
 800e25a:	6823      	ldr	r3, [r4, #0]
 800e25c:	055a      	lsls	r2, r3, #21
 800e25e:	d407      	bmi.n	800e270 <_printf_float+0x1f4>
 800e260:	6923      	ldr	r3, [r4, #16]
 800e262:	4642      	mov	r2, r8
 800e264:	4631      	mov	r1, r6
 800e266:	4628      	mov	r0, r5
 800e268:	47b8      	blx	r7
 800e26a:	3001      	adds	r0, #1
 800e26c:	d12c      	bne.n	800e2c8 <_printf_float+0x24c>
 800e26e:	e764      	b.n	800e13a <_printf_float+0xbe>
 800e270:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e274:	f240 80e0 	bls.w	800e438 <_printf_float+0x3bc>
 800e278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e27c:	2200      	movs	r2, #0
 800e27e:	2300      	movs	r3, #0
 800e280:	f7f2 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 800e284:	2800      	cmp	r0, #0
 800e286:	d034      	beq.n	800e2f2 <_printf_float+0x276>
 800e288:	4a37      	ldr	r2, [pc, #220]	; (800e368 <_printf_float+0x2ec>)
 800e28a:	2301      	movs	r3, #1
 800e28c:	4631      	mov	r1, r6
 800e28e:	4628      	mov	r0, r5
 800e290:	47b8      	blx	r7
 800e292:	3001      	adds	r0, #1
 800e294:	f43f af51 	beq.w	800e13a <_printf_float+0xbe>
 800e298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e29c:	429a      	cmp	r2, r3
 800e29e:	db02      	blt.n	800e2a6 <_printf_float+0x22a>
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	07d8      	lsls	r0, r3, #31
 800e2a4:	d510      	bpl.n	800e2c8 <_printf_float+0x24c>
 800e2a6:	ee18 3a10 	vmov	r3, s16
 800e2aa:	4652      	mov	r2, sl
 800e2ac:	4631      	mov	r1, r6
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	47b8      	blx	r7
 800e2b2:	3001      	adds	r0, #1
 800e2b4:	f43f af41 	beq.w	800e13a <_printf_float+0xbe>
 800e2b8:	f04f 0800 	mov.w	r8, #0
 800e2bc:	f104 091a 	add.w	r9, r4, #26
 800e2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2c2:	3b01      	subs	r3, #1
 800e2c4:	4543      	cmp	r3, r8
 800e2c6:	dc09      	bgt.n	800e2dc <_printf_float+0x260>
 800e2c8:	6823      	ldr	r3, [r4, #0]
 800e2ca:	079b      	lsls	r3, r3, #30
 800e2cc:	f100 8107 	bmi.w	800e4de <_printf_float+0x462>
 800e2d0:	68e0      	ldr	r0, [r4, #12]
 800e2d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2d4:	4298      	cmp	r0, r3
 800e2d6:	bfb8      	it	lt
 800e2d8:	4618      	movlt	r0, r3
 800e2da:	e730      	b.n	800e13e <_printf_float+0xc2>
 800e2dc:	2301      	movs	r3, #1
 800e2de:	464a      	mov	r2, r9
 800e2e0:	4631      	mov	r1, r6
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	47b8      	blx	r7
 800e2e6:	3001      	adds	r0, #1
 800e2e8:	f43f af27 	beq.w	800e13a <_printf_float+0xbe>
 800e2ec:	f108 0801 	add.w	r8, r8, #1
 800e2f0:	e7e6      	b.n	800e2c0 <_printf_float+0x244>
 800e2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	dc39      	bgt.n	800e36c <_printf_float+0x2f0>
 800e2f8:	4a1b      	ldr	r2, [pc, #108]	; (800e368 <_printf_float+0x2ec>)
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	4631      	mov	r1, r6
 800e2fe:	4628      	mov	r0, r5
 800e300:	47b8      	blx	r7
 800e302:	3001      	adds	r0, #1
 800e304:	f43f af19 	beq.w	800e13a <_printf_float+0xbe>
 800e308:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e30c:	4313      	orrs	r3, r2
 800e30e:	d102      	bne.n	800e316 <_printf_float+0x29a>
 800e310:	6823      	ldr	r3, [r4, #0]
 800e312:	07d9      	lsls	r1, r3, #31
 800e314:	d5d8      	bpl.n	800e2c8 <_printf_float+0x24c>
 800e316:	ee18 3a10 	vmov	r3, s16
 800e31a:	4652      	mov	r2, sl
 800e31c:	4631      	mov	r1, r6
 800e31e:	4628      	mov	r0, r5
 800e320:	47b8      	blx	r7
 800e322:	3001      	adds	r0, #1
 800e324:	f43f af09 	beq.w	800e13a <_printf_float+0xbe>
 800e328:	f04f 0900 	mov.w	r9, #0
 800e32c:	f104 0a1a 	add.w	sl, r4, #26
 800e330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e332:	425b      	negs	r3, r3
 800e334:	454b      	cmp	r3, r9
 800e336:	dc01      	bgt.n	800e33c <_printf_float+0x2c0>
 800e338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e33a:	e792      	b.n	800e262 <_printf_float+0x1e6>
 800e33c:	2301      	movs	r3, #1
 800e33e:	4652      	mov	r2, sl
 800e340:	4631      	mov	r1, r6
 800e342:	4628      	mov	r0, r5
 800e344:	47b8      	blx	r7
 800e346:	3001      	adds	r0, #1
 800e348:	f43f aef7 	beq.w	800e13a <_printf_float+0xbe>
 800e34c:	f109 0901 	add.w	r9, r9, #1
 800e350:	e7ee      	b.n	800e330 <_printf_float+0x2b4>
 800e352:	bf00      	nop
 800e354:	7fefffff 	.word	0x7fefffff
 800e358:	08014fd0 	.word	0x08014fd0
 800e35c:	08014fd4 	.word	0x08014fd4
 800e360:	08014fd8 	.word	0x08014fd8
 800e364:	08014fdc 	.word	0x08014fdc
 800e368:	08014fe0 	.word	0x08014fe0
 800e36c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e36e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e370:	429a      	cmp	r2, r3
 800e372:	bfa8      	it	ge
 800e374:	461a      	movge	r2, r3
 800e376:	2a00      	cmp	r2, #0
 800e378:	4691      	mov	r9, r2
 800e37a:	dc37      	bgt.n	800e3ec <_printf_float+0x370>
 800e37c:	f04f 0b00 	mov.w	fp, #0
 800e380:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e384:	f104 021a 	add.w	r2, r4, #26
 800e388:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e38a:	9305      	str	r3, [sp, #20]
 800e38c:	eba3 0309 	sub.w	r3, r3, r9
 800e390:	455b      	cmp	r3, fp
 800e392:	dc33      	bgt.n	800e3fc <_printf_float+0x380>
 800e394:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e398:	429a      	cmp	r2, r3
 800e39a:	db3b      	blt.n	800e414 <_printf_float+0x398>
 800e39c:	6823      	ldr	r3, [r4, #0]
 800e39e:	07da      	lsls	r2, r3, #31
 800e3a0:	d438      	bmi.n	800e414 <_printf_float+0x398>
 800e3a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e3a6:	eba2 0903 	sub.w	r9, r2, r3
 800e3aa:	9b05      	ldr	r3, [sp, #20]
 800e3ac:	1ad2      	subs	r2, r2, r3
 800e3ae:	4591      	cmp	r9, r2
 800e3b0:	bfa8      	it	ge
 800e3b2:	4691      	movge	r9, r2
 800e3b4:	f1b9 0f00 	cmp.w	r9, #0
 800e3b8:	dc35      	bgt.n	800e426 <_printf_float+0x3aa>
 800e3ba:	f04f 0800 	mov.w	r8, #0
 800e3be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e3c2:	f104 0a1a 	add.w	sl, r4, #26
 800e3c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e3ca:	1a9b      	subs	r3, r3, r2
 800e3cc:	eba3 0309 	sub.w	r3, r3, r9
 800e3d0:	4543      	cmp	r3, r8
 800e3d2:	f77f af79 	ble.w	800e2c8 <_printf_float+0x24c>
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	4652      	mov	r2, sl
 800e3da:	4631      	mov	r1, r6
 800e3dc:	4628      	mov	r0, r5
 800e3de:	47b8      	blx	r7
 800e3e0:	3001      	adds	r0, #1
 800e3e2:	f43f aeaa 	beq.w	800e13a <_printf_float+0xbe>
 800e3e6:	f108 0801 	add.w	r8, r8, #1
 800e3ea:	e7ec      	b.n	800e3c6 <_printf_float+0x34a>
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	4631      	mov	r1, r6
 800e3f0:	4642      	mov	r2, r8
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	47b8      	blx	r7
 800e3f6:	3001      	adds	r0, #1
 800e3f8:	d1c0      	bne.n	800e37c <_printf_float+0x300>
 800e3fa:	e69e      	b.n	800e13a <_printf_float+0xbe>
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	4631      	mov	r1, r6
 800e400:	4628      	mov	r0, r5
 800e402:	9205      	str	r2, [sp, #20]
 800e404:	47b8      	blx	r7
 800e406:	3001      	adds	r0, #1
 800e408:	f43f ae97 	beq.w	800e13a <_printf_float+0xbe>
 800e40c:	9a05      	ldr	r2, [sp, #20]
 800e40e:	f10b 0b01 	add.w	fp, fp, #1
 800e412:	e7b9      	b.n	800e388 <_printf_float+0x30c>
 800e414:	ee18 3a10 	vmov	r3, s16
 800e418:	4652      	mov	r2, sl
 800e41a:	4631      	mov	r1, r6
 800e41c:	4628      	mov	r0, r5
 800e41e:	47b8      	blx	r7
 800e420:	3001      	adds	r0, #1
 800e422:	d1be      	bne.n	800e3a2 <_printf_float+0x326>
 800e424:	e689      	b.n	800e13a <_printf_float+0xbe>
 800e426:	9a05      	ldr	r2, [sp, #20]
 800e428:	464b      	mov	r3, r9
 800e42a:	4442      	add	r2, r8
 800e42c:	4631      	mov	r1, r6
 800e42e:	4628      	mov	r0, r5
 800e430:	47b8      	blx	r7
 800e432:	3001      	adds	r0, #1
 800e434:	d1c1      	bne.n	800e3ba <_printf_float+0x33e>
 800e436:	e680      	b.n	800e13a <_printf_float+0xbe>
 800e438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e43a:	2a01      	cmp	r2, #1
 800e43c:	dc01      	bgt.n	800e442 <_printf_float+0x3c6>
 800e43e:	07db      	lsls	r3, r3, #31
 800e440:	d53a      	bpl.n	800e4b8 <_printf_float+0x43c>
 800e442:	2301      	movs	r3, #1
 800e444:	4642      	mov	r2, r8
 800e446:	4631      	mov	r1, r6
 800e448:	4628      	mov	r0, r5
 800e44a:	47b8      	blx	r7
 800e44c:	3001      	adds	r0, #1
 800e44e:	f43f ae74 	beq.w	800e13a <_printf_float+0xbe>
 800e452:	ee18 3a10 	vmov	r3, s16
 800e456:	4652      	mov	r2, sl
 800e458:	4631      	mov	r1, r6
 800e45a:	4628      	mov	r0, r5
 800e45c:	47b8      	blx	r7
 800e45e:	3001      	adds	r0, #1
 800e460:	f43f ae6b 	beq.w	800e13a <_printf_float+0xbe>
 800e464:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e468:	2200      	movs	r2, #0
 800e46a:	2300      	movs	r3, #0
 800e46c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e470:	f7f2 fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e474:	b9d8      	cbnz	r0, 800e4ae <_printf_float+0x432>
 800e476:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800e47a:	f108 0201 	add.w	r2, r8, #1
 800e47e:	4631      	mov	r1, r6
 800e480:	4628      	mov	r0, r5
 800e482:	47b8      	blx	r7
 800e484:	3001      	adds	r0, #1
 800e486:	d10e      	bne.n	800e4a6 <_printf_float+0x42a>
 800e488:	e657      	b.n	800e13a <_printf_float+0xbe>
 800e48a:	2301      	movs	r3, #1
 800e48c:	4652      	mov	r2, sl
 800e48e:	4631      	mov	r1, r6
 800e490:	4628      	mov	r0, r5
 800e492:	47b8      	blx	r7
 800e494:	3001      	adds	r0, #1
 800e496:	f43f ae50 	beq.w	800e13a <_printf_float+0xbe>
 800e49a:	f108 0801 	add.w	r8, r8, #1
 800e49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4a0:	3b01      	subs	r3, #1
 800e4a2:	4543      	cmp	r3, r8
 800e4a4:	dcf1      	bgt.n	800e48a <_printf_float+0x40e>
 800e4a6:	464b      	mov	r3, r9
 800e4a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e4ac:	e6da      	b.n	800e264 <_printf_float+0x1e8>
 800e4ae:	f04f 0800 	mov.w	r8, #0
 800e4b2:	f104 0a1a 	add.w	sl, r4, #26
 800e4b6:	e7f2      	b.n	800e49e <_printf_float+0x422>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	4642      	mov	r2, r8
 800e4bc:	e7df      	b.n	800e47e <_printf_float+0x402>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	464a      	mov	r2, r9
 800e4c2:	4631      	mov	r1, r6
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	47b8      	blx	r7
 800e4c8:	3001      	adds	r0, #1
 800e4ca:	f43f ae36 	beq.w	800e13a <_printf_float+0xbe>
 800e4ce:	f108 0801 	add.w	r8, r8, #1
 800e4d2:	68e3      	ldr	r3, [r4, #12]
 800e4d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4d6:	1a5b      	subs	r3, r3, r1
 800e4d8:	4543      	cmp	r3, r8
 800e4da:	dcf0      	bgt.n	800e4be <_printf_float+0x442>
 800e4dc:	e6f8      	b.n	800e2d0 <_printf_float+0x254>
 800e4de:	f04f 0800 	mov.w	r8, #0
 800e4e2:	f104 0919 	add.w	r9, r4, #25
 800e4e6:	e7f4      	b.n	800e4d2 <_printf_float+0x456>

0800e4e8 <_printf_common>:
 800e4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4ec:	4616      	mov	r6, r2
 800e4ee:	4699      	mov	r9, r3
 800e4f0:	688a      	ldr	r2, [r1, #8]
 800e4f2:	690b      	ldr	r3, [r1, #16]
 800e4f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	bfb8      	it	lt
 800e4fc:	4613      	movlt	r3, r2
 800e4fe:	6033      	str	r3, [r6, #0]
 800e500:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e504:	4607      	mov	r7, r0
 800e506:	460c      	mov	r4, r1
 800e508:	b10a      	cbz	r2, 800e50e <_printf_common+0x26>
 800e50a:	3301      	adds	r3, #1
 800e50c:	6033      	str	r3, [r6, #0]
 800e50e:	6823      	ldr	r3, [r4, #0]
 800e510:	0699      	lsls	r1, r3, #26
 800e512:	bf42      	ittt	mi
 800e514:	6833      	ldrmi	r3, [r6, #0]
 800e516:	3302      	addmi	r3, #2
 800e518:	6033      	strmi	r3, [r6, #0]
 800e51a:	6825      	ldr	r5, [r4, #0]
 800e51c:	f015 0506 	ands.w	r5, r5, #6
 800e520:	d106      	bne.n	800e530 <_printf_common+0x48>
 800e522:	f104 0a19 	add.w	sl, r4, #25
 800e526:	68e3      	ldr	r3, [r4, #12]
 800e528:	6832      	ldr	r2, [r6, #0]
 800e52a:	1a9b      	subs	r3, r3, r2
 800e52c:	42ab      	cmp	r3, r5
 800e52e:	dc26      	bgt.n	800e57e <_printf_common+0x96>
 800e530:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e534:	1e13      	subs	r3, r2, #0
 800e536:	6822      	ldr	r2, [r4, #0]
 800e538:	bf18      	it	ne
 800e53a:	2301      	movne	r3, #1
 800e53c:	0692      	lsls	r2, r2, #26
 800e53e:	d42b      	bmi.n	800e598 <_printf_common+0xb0>
 800e540:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e544:	4649      	mov	r1, r9
 800e546:	4638      	mov	r0, r7
 800e548:	47c0      	blx	r8
 800e54a:	3001      	adds	r0, #1
 800e54c:	d01e      	beq.n	800e58c <_printf_common+0xa4>
 800e54e:	6823      	ldr	r3, [r4, #0]
 800e550:	6922      	ldr	r2, [r4, #16]
 800e552:	f003 0306 	and.w	r3, r3, #6
 800e556:	2b04      	cmp	r3, #4
 800e558:	bf02      	ittt	eq
 800e55a:	68e5      	ldreq	r5, [r4, #12]
 800e55c:	6833      	ldreq	r3, [r6, #0]
 800e55e:	1aed      	subeq	r5, r5, r3
 800e560:	68a3      	ldr	r3, [r4, #8]
 800e562:	bf0c      	ite	eq
 800e564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e568:	2500      	movne	r5, #0
 800e56a:	4293      	cmp	r3, r2
 800e56c:	bfc4      	itt	gt
 800e56e:	1a9b      	subgt	r3, r3, r2
 800e570:	18ed      	addgt	r5, r5, r3
 800e572:	2600      	movs	r6, #0
 800e574:	341a      	adds	r4, #26
 800e576:	42b5      	cmp	r5, r6
 800e578:	d11a      	bne.n	800e5b0 <_printf_common+0xc8>
 800e57a:	2000      	movs	r0, #0
 800e57c:	e008      	b.n	800e590 <_printf_common+0xa8>
 800e57e:	2301      	movs	r3, #1
 800e580:	4652      	mov	r2, sl
 800e582:	4649      	mov	r1, r9
 800e584:	4638      	mov	r0, r7
 800e586:	47c0      	blx	r8
 800e588:	3001      	adds	r0, #1
 800e58a:	d103      	bne.n	800e594 <_printf_common+0xac>
 800e58c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e594:	3501      	adds	r5, #1
 800e596:	e7c6      	b.n	800e526 <_printf_common+0x3e>
 800e598:	18e1      	adds	r1, r4, r3
 800e59a:	1c5a      	adds	r2, r3, #1
 800e59c:	2030      	movs	r0, #48	; 0x30
 800e59e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5a2:	4422      	add	r2, r4
 800e5a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5ac:	3302      	adds	r3, #2
 800e5ae:	e7c7      	b.n	800e540 <_printf_common+0x58>
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	4622      	mov	r2, r4
 800e5b4:	4649      	mov	r1, r9
 800e5b6:	4638      	mov	r0, r7
 800e5b8:	47c0      	blx	r8
 800e5ba:	3001      	adds	r0, #1
 800e5bc:	d0e6      	beq.n	800e58c <_printf_common+0xa4>
 800e5be:	3601      	adds	r6, #1
 800e5c0:	e7d9      	b.n	800e576 <_printf_common+0x8e>
	...

0800e5c4 <_printf_i>:
 800e5c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5c8:	7e0f      	ldrb	r7, [r1, #24]
 800e5ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5cc:	2f78      	cmp	r7, #120	; 0x78
 800e5ce:	4691      	mov	r9, r2
 800e5d0:	4680      	mov	r8, r0
 800e5d2:	460c      	mov	r4, r1
 800e5d4:	469a      	mov	sl, r3
 800e5d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5da:	d807      	bhi.n	800e5ec <_printf_i+0x28>
 800e5dc:	2f62      	cmp	r7, #98	; 0x62
 800e5de:	d80a      	bhi.n	800e5f6 <_printf_i+0x32>
 800e5e0:	2f00      	cmp	r7, #0
 800e5e2:	f000 80d4 	beq.w	800e78e <_printf_i+0x1ca>
 800e5e6:	2f58      	cmp	r7, #88	; 0x58
 800e5e8:	f000 80c0 	beq.w	800e76c <_printf_i+0x1a8>
 800e5ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5f4:	e03a      	b.n	800e66c <_printf_i+0xa8>
 800e5f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5fa:	2b15      	cmp	r3, #21
 800e5fc:	d8f6      	bhi.n	800e5ec <_printf_i+0x28>
 800e5fe:	a101      	add	r1, pc, #4	; (adr r1, 800e604 <_printf_i+0x40>)
 800e600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e604:	0800e65d 	.word	0x0800e65d
 800e608:	0800e671 	.word	0x0800e671
 800e60c:	0800e5ed 	.word	0x0800e5ed
 800e610:	0800e5ed 	.word	0x0800e5ed
 800e614:	0800e5ed 	.word	0x0800e5ed
 800e618:	0800e5ed 	.word	0x0800e5ed
 800e61c:	0800e671 	.word	0x0800e671
 800e620:	0800e5ed 	.word	0x0800e5ed
 800e624:	0800e5ed 	.word	0x0800e5ed
 800e628:	0800e5ed 	.word	0x0800e5ed
 800e62c:	0800e5ed 	.word	0x0800e5ed
 800e630:	0800e775 	.word	0x0800e775
 800e634:	0800e69d 	.word	0x0800e69d
 800e638:	0800e72f 	.word	0x0800e72f
 800e63c:	0800e5ed 	.word	0x0800e5ed
 800e640:	0800e5ed 	.word	0x0800e5ed
 800e644:	0800e797 	.word	0x0800e797
 800e648:	0800e5ed 	.word	0x0800e5ed
 800e64c:	0800e69d 	.word	0x0800e69d
 800e650:	0800e5ed 	.word	0x0800e5ed
 800e654:	0800e5ed 	.word	0x0800e5ed
 800e658:	0800e737 	.word	0x0800e737
 800e65c:	682b      	ldr	r3, [r5, #0]
 800e65e:	1d1a      	adds	r2, r3, #4
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	602a      	str	r2, [r5, #0]
 800e664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e66c:	2301      	movs	r3, #1
 800e66e:	e09f      	b.n	800e7b0 <_printf_i+0x1ec>
 800e670:	6820      	ldr	r0, [r4, #0]
 800e672:	682b      	ldr	r3, [r5, #0]
 800e674:	0607      	lsls	r7, r0, #24
 800e676:	f103 0104 	add.w	r1, r3, #4
 800e67a:	6029      	str	r1, [r5, #0]
 800e67c:	d501      	bpl.n	800e682 <_printf_i+0xbe>
 800e67e:	681e      	ldr	r6, [r3, #0]
 800e680:	e003      	b.n	800e68a <_printf_i+0xc6>
 800e682:	0646      	lsls	r6, r0, #25
 800e684:	d5fb      	bpl.n	800e67e <_printf_i+0xba>
 800e686:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e68a:	2e00      	cmp	r6, #0
 800e68c:	da03      	bge.n	800e696 <_printf_i+0xd2>
 800e68e:	232d      	movs	r3, #45	; 0x2d
 800e690:	4276      	negs	r6, r6
 800e692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e696:	485a      	ldr	r0, [pc, #360]	; (800e800 <_printf_i+0x23c>)
 800e698:	230a      	movs	r3, #10
 800e69a:	e012      	b.n	800e6c2 <_printf_i+0xfe>
 800e69c:	682b      	ldr	r3, [r5, #0]
 800e69e:	6820      	ldr	r0, [r4, #0]
 800e6a0:	1d19      	adds	r1, r3, #4
 800e6a2:	6029      	str	r1, [r5, #0]
 800e6a4:	0605      	lsls	r5, r0, #24
 800e6a6:	d501      	bpl.n	800e6ac <_printf_i+0xe8>
 800e6a8:	681e      	ldr	r6, [r3, #0]
 800e6aa:	e002      	b.n	800e6b2 <_printf_i+0xee>
 800e6ac:	0641      	lsls	r1, r0, #25
 800e6ae:	d5fb      	bpl.n	800e6a8 <_printf_i+0xe4>
 800e6b0:	881e      	ldrh	r6, [r3, #0]
 800e6b2:	4853      	ldr	r0, [pc, #332]	; (800e800 <_printf_i+0x23c>)
 800e6b4:	2f6f      	cmp	r7, #111	; 0x6f
 800e6b6:	bf0c      	ite	eq
 800e6b8:	2308      	moveq	r3, #8
 800e6ba:	230a      	movne	r3, #10
 800e6bc:	2100      	movs	r1, #0
 800e6be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6c2:	6865      	ldr	r5, [r4, #4]
 800e6c4:	60a5      	str	r5, [r4, #8]
 800e6c6:	2d00      	cmp	r5, #0
 800e6c8:	bfa2      	ittt	ge
 800e6ca:	6821      	ldrge	r1, [r4, #0]
 800e6cc:	f021 0104 	bicge.w	r1, r1, #4
 800e6d0:	6021      	strge	r1, [r4, #0]
 800e6d2:	b90e      	cbnz	r6, 800e6d8 <_printf_i+0x114>
 800e6d4:	2d00      	cmp	r5, #0
 800e6d6:	d04b      	beq.n	800e770 <_printf_i+0x1ac>
 800e6d8:	4615      	mov	r5, r2
 800e6da:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6de:	fb03 6711 	mls	r7, r3, r1, r6
 800e6e2:	5dc7      	ldrb	r7, [r0, r7]
 800e6e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6e8:	4637      	mov	r7, r6
 800e6ea:	42bb      	cmp	r3, r7
 800e6ec:	460e      	mov	r6, r1
 800e6ee:	d9f4      	bls.n	800e6da <_printf_i+0x116>
 800e6f0:	2b08      	cmp	r3, #8
 800e6f2:	d10b      	bne.n	800e70c <_printf_i+0x148>
 800e6f4:	6823      	ldr	r3, [r4, #0]
 800e6f6:	07de      	lsls	r6, r3, #31
 800e6f8:	d508      	bpl.n	800e70c <_printf_i+0x148>
 800e6fa:	6923      	ldr	r3, [r4, #16]
 800e6fc:	6861      	ldr	r1, [r4, #4]
 800e6fe:	4299      	cmp	r1, r3
 800e700:	bfde      	ittt	le
 800e702:	2330      	movle	r3, #48	; 0x30
 800e704:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e708:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e70c:	1b52      	subs	r2, r2, r5
 800e70e:	6122      	str	r2, [r4, #16]
 800e710:	f8cd a000 	str.w	sl, [sp]
 800e714:	464b      	mov	r3, r9
 800e716:	aa03      	add	r2, sp, #12
 800e718:	4621      	mov	r1, r4
 800e71a:	4640      	mov	r0, r8
 800e71c:	f7ff fee4 	bl	800e4e8 <_printf_common>
 800e720:	3001      	adds	r0, #1
 800e722:	d14a      	bne.n	800e7ba <_printf_i+0x1f6>
 800e724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e728:	b004      	add	sp, #16
 800e72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e72e:	6823      	ldr	r3, [r4, #0]
 800e730:	f043 0320 	orr.w	r3, r3, #32
 800e734:	6023      	str	r3, [r4, #0]
 800e736:	4833      	ldr	r0, [pc, #204]	; (800e804 <_printf_i+0x240>)
 800e738:	2778      	movs	r7, #120	; 0x78
 800e73a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	6829      	ldr	r1, [r5, #0]
 800e742:	061f      	lsls	r7, r3, #24
 800e744:	f851 6b04 	ldr.w	r6, [r1], #4
 800e748:	d402      	bmi.n	800e750 <_printf_i+0x18c>
 800e74a:	065f      	lsls	r7, r3, #25
 800e74c:	bf48      	it	mi
 800e74e:	b2b6      	uxthmi	r6, r6
 800e750:	07df      	lsls	r7, r3, #31
 800e752:	bf48      	it	mi
 800e754:	f043 0320 	orrmi.w	r3, r3, #32
 800e758:	6029      	str	r1, [r5, #0]
 800e75a:	bf48      	it	mi
 800e75c:	6023      	strmi	r3, [r4, #0]
 800e75e:	b91e      	cbnz	r6, 800e768 <_printf_i+0x1a4>
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	f023 0320 	bic.w	r3, r3, #32
 800e766:	6023      	str	r3, [r4, #0]
 800e768:	2310      	movs	r3, #16
 800e76a:	e7a7      	b.n	800e6bc <_printf_i+0xf8>
 800e76c:	4824      	ldr	r0, [pc, #144]	; (800e800 <_printf_i+0x23c>)
 800e76e:	e7e4      	b.n	800e73a <_printf_i+0x176>
 800e770:	4615      	mov	r5, r2
 800e772:	e7bd      	b.n	800e6f0 <_printf_i+0x12c>
 800e774:	682b      	ldr	r3, [r5, #0]
 800e776:	6826      	ldr	r6, [r4, #0]
 800e778:	6961      	ldr	r1, [r4, #20]
 800e77a:	1d18      	adds	r0, r3, #4
 800e77c:	6028      	str	r0, [r5, #0]
 800e77e:	0635      	lsls	r5, r6, #24
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	d501      	bpl.n	800e788 <_printf_i+0x1c4>
 800e784:	6019      	str	r1, [r3, #0]
 800e786:	e002      	b.n	800e78e <_printf_i+0x1ca>
 800e788:	0670      	lsls	r0, r6, #25
 800e78a:	d5fb      	bpl.n	800e784 <_printf_i+0x1c0>
 800e78c:	8019      	strh	r1, [r3, #0]
 800e78e:	2300      	movs	r3, #0
 800e790:	6123      	str	r3, [r4, #16]
 800e792:	4615      	mov	r5, r2
 800e794:	e7bc      	b.n	800e710 <_printf_i+0x14c>
 800e796:	682b      	ldr	r3, [r5, #0]
 800e798:	1d1a      	adds	r2, r3, #4
 800e79a:	602a      	str	r2, [r5, #0]
 800e79c:	681d      	ldr	r5, [r3, #0]
 800e79e:	6862      	ldr	r2, [r4, #4]
 800e7a0:	2100      	movs	r1, #0
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f7f1 fd14 	bl	80001d0 <memchr>
 800e7a8:	b108      	cbz	r0, 800e7ae <_printf_i+0x1ea>
 800e7aa:	1b40      	subs	r0, r0, r5
 800e7ac:	6060      	str	r0, [r4, #4]
 800e7ae:	6863      	ldr	r3, [r4, #4]
 800e7b0:	6123      	str	r3, [r4, #16]
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7b8:	e7aa      	b.n	800e710 <_printf_i+0x14c>
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	462a      	mov	r2, r5
 800e7be:	4649      	mov	r1, r9
 800e7c0:	4640      	mov	r0, r8
 800e7c2:	47d0      	blx	sl
 800e7c4:	3001      	adds	r0, #1
 800e7c6:	d0ad      	beq.n	800e724 <_printf_i+0x160>
 800e7c8:	6823      	ldr	r3, [r4, #0]
 800e7ca:	079b      	lsls	r3, r3, #30
 800e7cc:	d413      	bmi.n	800e7f6 <_printf_i+0x232>
 800e7ce:	68e0      	ldr	r0, [r4, #12]
 800e7d0:	9b03      	ldr	r3, [sp, #12]
 800e7d2:	4298      	cmp	r0, r3
 800e7d4:	bfb8      	it	lt
 800e7d6:	4618      	movlt	r0, r3
 800e7d8:	e7a6      	b.n	800e728 <_printf_i+0x164>
 800e7da:	2301      	movs	r3, #1
 800e7dc:	4632      	mov	r2, r6
 800e7de:	4649      	mov	r1, r9
 800e7e0:	4640      	mov	r0, r8
 800e7e2:	47d0      	blx	sl
 800e7e4:	3001      	adds	r0, #1
 800e7e6:	d09d      	beq.n	800e724 <_printf_i+0x160>
 800e7e8:	3501      	adds	r5, #1
 800e7ea:	68e3      	ldr	r3, [r4, #12]
 800e7ec:	9903      	ldr	r1, [sp, #12]
 800e7ee:	1a5b      	subs	r3, r3, r1
 800e7f0:	42ab      	cmp	r3, r5
 800e7f2:	dcf2      	bgt.n	800e7da <_printf_i+0x216>
 800e7f4:	e7eb      	b.n	800e7ce <_printf_i+0x20a>
 800e7f6:	2500      	movs	r5, #0
 800e7f8:	f104 0619 	add.w	r6, r4, #25
 800e7fc:	e7f5      	b.n	800e7ea <_printf_i+0x226>
 800e7fe:	bf00      	nop
 800e800:	08014fe2 	.word	0x08014fe2
 800e804:	08014ff3 	.word	0x08014ff3

0800e808 <_scanf_float>:
 800e808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e80c:	b087      	sub	sp, #28
 800e80e:	4617      	mov	r7, r2
 800e810:	9303      	str	r3, [sp, #12]
 800e812:	688b      	ldr	r3, [r1, #8]
 800e814:	1e5a      	subs	r2, r3, #1
 800e816:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e81a:	bf83      	ittte	hi
 800e81c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e820:	195b      	addhi	r3, r3, r5
 800e822:	9302      	strhi	r3, [sp, #8]
 800e824:	2300      	movls	r3, #0
 800e826:	bf86      	itte	hi
 800e828:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e82c:	608b      	strhi	r3, [r1, #8]
 800e82e:	9302      	strls	r3, [sp, #8]
 800e830:	680b      	ldr	r3, [r1, #0]
 800e832:	468b      	mov	fp, r1
 800e834:	2500      	movs	r5, #0
 800e836:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e83a:	f84b 3b1c 	str.w	r3, [fp], #28
 800e83e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e842:	4680      	mov	r8, r0
 800e844:	460c      	mov	r4, r1
 800e846:	465e      	mov	r6, fp
 800e848:	46aa      	mov	sl, r5
 800e84a:	46a9      	mov	r9, r5
 800e84c:	9501      	str	r5, [sp, #4]
 800e84e:	68a2      	ldr	r2, [r4, #8]
 800e850:	b152      	cbz	r2, 800e868 <_scanf_float+0x60>
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	2b4e      	cmp	r3, #78	; 0x4e
 800e858:	d864      	bhi.n	800e924 <_scanf_float+0x11c>
 800e85a:	2b40      	cmp	r3, #64	; 0x40
 800e85c:	d83c      	bhi.n	800e8d8 <_scanf_float+0xd0>
 800e85e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e862:	b2c8      	uxtb	r0, r1
 800e864:	280e      	cmp	r0, #14
 800e866:	d93a      	bls.n	800e8de <_scanf_float+0xd6>
 800e868:	f1b9 0f00 	cmp.w	r9, #0
 800e86c:	d003      	beq.n	800e876 <_scanf_float+0x6e>
 800e86e:	6823      	ldr	r3, [r4, #0]
 800e870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e874:	6023      	str	r3, [r4, #0]
 800e876:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e87a:	f1ba 0f01 	cmp.w	sl, #1
 800e87e:	f200 8113 	bhi.w	800eaa8 <_scanf_float+0x2a0>
 800e882:	455e      	cmp	r6, fp
 800e884:	f200 8105 	bhi.w	800ea92 <_scanf_float+0x28a>
 800e888:	2501      	movs	r5, #1
 800e88a:	4628      	mov	r0, r5
 800e88c:	b007      	add	sp, #28
 800e88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e892:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e896:	2a0d      	cmp	r2, #13
 800e898:	d8e6      	bhi.n	800e868 <_scanf_float+0x60>
 800e89a:	a101      	add	r1, pc, #4	; (adr r1, 800e8a0 <_scanf_float+0x98>)
 800e89c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e8a0:	0800e9df 	.word	0x0800e9df
 800e8a4:	0800e869 	.word	0x0800e869
 800e8a8:	0800e869 	.word	0x0800e869
 800e8ac:	0800e869 	.word	0x0800e869
 800e8b0:	0800ea3f 	.word	0x0800ea3f
 800e8b4:	0800ea17 	.word	0x0800ea17
 800e8b8:	0800e869 	.word	0x0800e869
 800e8bc:	0800e869 	.word	0x0800e869
 800e8c0:	0800e9ed 	.word	0x0800e9ed
 800e8c4:	0800e869 	.word	0x0800e869
 800e8c8:	0800e869 	.word	0x0800e869
 800e8cc:	0800e869 	.word	0x0800e869
 800e8d0:	0800e869 	.word	0x0800e869
 800e8d4:	0800e9a5 	.word	0x0800e9a5
 800e8d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e8dc:	e7db      	b.n	800e896 <_scanf_float+0x8e>
 800e8de:	290e      	cmp	r1, #14
 800e8e0:	d8c2      	bhi.n	800e868 <_scanf_float+0x60>
 800e8e2:	a001      	add	r0, pc, #4	; (adr r0, 800e8e8 <_scanf_float+0xe0>)
 800e8e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e8e8:	0800e997 	.word	0x0800e997
 800e8ec:	0800e869 	.word	0x0800e869
 800e8f0:	0800e997 	.word	0x0800e997
 800e8f4:	0800ea2b 	.word	0x0800ea2b
 800e8f8:	0800e869 	.word	0x0800e869
 800e8fc:	0800e945 	.word	0x0800e945
 800e900:	0800e981 	.word	0x0800e981
 800e904:	0800e981 	.word	0x0800e981
 800e908:	0800e981 	.word	0x0800e981
 800e90c:	0800e981 	.word	0x0800e981
 800e910:	0800e981 	.word	0x0800e981
 800e914:	0800e981 	.word	0x0800e981
 800e918:	0800e981 	.word	0x0800e981
 800e91c:	0800e981 	.word	0x0800e981
 800e920:	0800e981 	.word	0x0800e981
 800e924:	2b6e      	cmp	r3, #110	; 0x6e
 800e926:	d809      	bhi.n	800e93c <_scanf_float+0x134>
 800e928:	2b60      	cmp	r3, #96	; 0x60
 800e92a:	d8b2      	bhi.n	800e892 <_scanf_float+0x8a>
 800e92c:	2b54      	cmp	r3, #84	; 0x54
 800e92e:	d077      	beq.n	800ea20 <_scanf_float+0x218>
 800e930:	2b59      	cmp	r3, #89	; 0x59
 800e932:	d199      	bne.n	800e868 <_scanf_float+0x60>
 800e934:	2d07      	cmp	r5, #7
 800e936:	d197      	bne.n	800e868 <_scanf_float+0x60>
 800e938:	2508      	movs	r5, #8
 800e93a:	e029      	b.n	800e990 <_scanf_float+0x188>
 800e93c:	2b74      	cmp	r3, #116	; 0x74
 800e93e:	d06f      	beq.n	800ea20 <_scanf_float+0x218>
 800e940:	2b79      	cmp	r3, #121	; 0x79
 800e942:	e7f6      	b.n	800e932 <_scanf_float+0x12a>
 800e944:	6821      	ldr	r1, [r4, #0]
 800e946:	05c8      	lsls	r0, r1, #23
 800e948:	d51a      	bpl.n	800e980 <_scanf_float+0x178>
 800e94a:	9b02      	ldr	r3, [sp, #8]
 800e94c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e950:	6021      	str	r1, [r4, #0]
 800e952:	f109 0901 	add.w	r9, r9, #1
 800e956:	b11b      	cbz	r3, 800e960 <_scanf_float+0x158>
 800e958:	3b01      	subs	r3, #1
 800e95a:	3201      	adds	r2, #1
 800e95c:	9302      	str	r3, [sp, #8]
 800e95e:	60a2      	str	r2, [r4, #8]
 800e960:	68a3      	ldr	r3, [r4, #8]
 800e962:	3b01      	subs	r3, #1
 800e964:	60a3      	str	r3, [r4, #8]
 800e966:	6923      	ldr	r3, [r4, #16]
 800e968:	3301      	adds	r3, #1
 800e96a:	6123      	str	r3, [r4, #16]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	3b01      	subs	r3, #1
 800e970:	2b00      	cmp	r3, #0
 800e972:	607b      	str	r3, [r7, #4]
 800e974:	f340 8084 	ble.w	800ea80 <_scanf_float+0x278>
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	3301      	adds	r3, #1
 800e97c:	603b      	str	r3, [r7, #0]
 800e97e:	e766      	b.n	800e84e <_scanf_float+0x46>
 800e980:	eb1a 0f05 	cmn.w	sl, r5
 800e984:	f47f af70 	bne.w	800e868 <_scanf_float+0x60>
 800e988:	6822      	ldr	r2, [r4, #0]
 800e98a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e98e:	6022      	str	r2, [r4, #0]
 800e990:	f806 3b01 	strb.w	r3, [r6], #1
 800e994:	e7e4      	b.n	800e960 <_scanf_float+0x158>
 800e996:	6822      	ldr	r2, [r4, #0]
 800e998:	0610      	lsls	r0, r2, #24
 800e99a:	f57f af65 	bpl.w	800e868 <_scanf_float+0x60>
 800e99e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e9a2:	e7f4      	b.n	800e98e <_scanf_float+0x186>
 800e9a4:	f1ba 0f00 	cmp.w	sl, #0
 800e9a8:	d10e      	bne.n	800e9c8 <_scanf_float+0x1c0>
 800e9aa:	f1b9 0f00 	cmp.w	r9, #0
 800e9ae:	d10e      	bne.n	800e9ce <_scanf_float+0x1c6>
 800e9b0:	6822      	ldr	r2, [r4, #0]
 800e9b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e9b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e9ba:	d108      	bne.n	800e9ce <_scanf_float+0x1c6>
 800e9bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e9c0:	6022      	str	r2, [r4, #0]
 800e9c2:	f04f 0a01 	mov.w	sl, #1
 800e9c6:	e7e3      	b.n	800e990 <_scanf_float+0x188>
 800e9c8:	f1ba 0f02 	cmp.w	sl, #2
 800e9cc:	d055      	beq.n	800ea7a <_scanf_float+0x272>
 800e9ce:	2d01      	cmp	r5, #1
 800e9d0:	d002      	beq.n	800e9d8 <_scanf_float+0x1d0>
 800e9d2:	2d04      	cmp	r5, #4
 800e9d4:	f47f af48 	bne.w	800e868 <_scanf_float+0x60>
 800e9d8:	3501      	adds	r5, #1
 800e9da:	b2ed      	uxtb	r5, r5
 800e9dc:	e7d8      	b.n	800e990 <_scanf_float+0x188>
 800e9de:	f1ba 0f01 	cmp.w	sl, #1
 800e9e2:	f47f af41 	bne.w	800e868 <_scanf_float+0x60>
 800e9e6:	f04f 0a02 	mov.w	sl, #2
 800e9ea:	e7d1      	b.n	800e990 <_scanf_float+0x188>
 800e9ec:	b97d      	cbnz	r5, 800ea0e <_scanf_float+0x206>
 800e9ee:	f1b9 0f00 	cmp.w	r9, #0
 800e9f2:	f47f af3c 	bne.w	800e86e <_scanf_float+0x66>
 800e9f6:	6822      	ldr	r2, [r4, #0]
 800e9f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e9fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ea00:	f47f af39 	bne.w	800e876 <_scanf_float+0x6e>
 800ea04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ea08:	6022      	str	r2, [r4, #0]
 800ea0a:	2501      	movs	r5, #1
 800ea0c:	e7c0      	b.n	800e990 <_scanf_float+0x188>
 800ea0e:	2d03      	cmp	r5, #3
 800ea10:	d0e2      	beq.n	800e9d8 <_scanf_float+0x1d0>
 800ea12:	2d05      	cmp	r5, #5
 800ea14:	e7de      	b.n	800e9d4 <_scanf_float+0x1cc>
 800ea16:	2d02      	cmp	r5, #2
 800ea18:	f47f af26 	bne.w	800e868 <_scanf_float+0x60>
 800ea1c:	2503      	movs	r5, #3
 800ea1e:	e7b7      	b.n	800e990 <_scanf_float+0x188>
 800ea20:	2d06      	cmp	r5, #6
 800ea22:	f47f af21 	bne.w	800e868 <_scanf_float+0x60>
 800ea26:	2507      	movs	r5, #7
 800ea28:	e7b2      	b.n	800e990 <_scanf_float+0x188>
 800ea2a:	6822      	ldr	r2, [r4, #0]
 800ea2c:	0591      	lsls	r1, r2, #22
 800ea2e:	f57f af1b 	bpl.w	800e868 <_scanf_float+0x60>
 800ea32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ea36:	6022      	str	r2, [r4, #0]
 800ea38:	f8cd 9004 	str.w	r9, [sp, #4]
 800ea3c:	e7a8      	b.n	800e990 <_scanf_float+0x188>
 800ea3e:	6822      	ldr	r2, [r4, #0]
 800ea40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ea44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ea48:	d006      	beq.n	800ea58 <_scanf_float+0x250>
 800ea4a:	0550      	lsls	r0, r2, #21
 800ea4c:	f57f af0c 	bpl.w	800e868 <_scanf_float+0x60>
 800ea50:	f1b9 0f00 	cmp.w	r9, #0
 800ea54:	f43f af0f 	beq.w	800e876 <_scanf_float+0x6e>
 800ea58:	0591      	lsls	r1, r2, #22
 800ea5a:	bf58      	it	pl
 800ea5c:	9901      	ldrpl	r1, [sp, #4]
 800ea5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ea62:	bf58      	it	pl
 800ea64:	eba9 0101 	subpl.w	r1, r9, r1
 800ea68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ea6c:	bf58      	it	pl
 800ea6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ea72:	6022      	str	r2, [r4, #0]
 800ea74:	f04f 0900 	mov.w	r9, #0
 800ea78:	e78a      	b.n	800e990 <_scanf_float+0x188>
 800ea7a:	f04f 0a03 	mov.w	sl, #3
 800ea7e:	e787      	b.n	800e990 <_scanf_float+0x188>
 800ea80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ea84:	4639      	mov	r1, r7
 800ea86:	4640      	mov	r0, r8
 800ea88:	4798      	blx	r3
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	f43f aedf 	beq.w	800e84e <_scanf_float+0x46>
 800ea90:	e6ea      	b.n	800e868 <_scanf_float+0x60>
 800ea92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ea96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ea9a:	463a      	mov	r2, r7
 800ea9c:	4640      	mov	r0, r8
 800ea9e:	4798      	blx	r3
 800eaa0:	6923      	ldr	r3, [r4, #16]
 800eaa2:	3b01      	subs	r3, #1
 800eaa4:	6123      	str	r3, [r4, #16]
 800eaa6:	e6ec      	b.n	800e882 <_scanf_float+0x7a>
 800eaa8:	1e6b      	subs	r3, r5, #1
 800eaaa:	2b06      	cmp	r3, #6
 800eaac:	d825      	bhi.n	800eafa <_scanf_float+0x2f2>
 800eaae:	2d02      	cmp	r5, #2
 800eab0:	d836      	bhi.n	800eb20 <_scanf_float+0x318>
 800eab2:	455e      	cmp	r6, fp
 800eab4:	f67f aee8 	bls.w	800e888 <_scanf_float+0x80>
 800eab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eabc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eac0:	463a      	mov	r2, r7
 800eac2:	4640      	mov	r0, r8
 800eac4:	4798      	blx	r3
 800eac6:	6923      	ldr	r3, [r4, #16]
 800eac8:	3b01      	subs	r3, #1
 800eaca:	6123      	str	r3, [r4, #16]
 800eacc:	e7f1      	b.n	800eab2 <_scanf_float+0x2aa>
 800eace:	9802      	ldr	r0, [sp, #8]
 800ead0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ead4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ead8:	9002      	str	r0, [sp, #8]
 800eada:	463a      	mov	r2, r7
 800eadc:	4640      	mov	r0, r8
 800eade:	4798      	blx	r3
 800eae0:	6923      	ldr	r3, [r4, #16]
 800eae2:	3b01      	subs	r3, #1
 800eae4:	6123      	str	r3, [r4, #16]
 800eae6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800eaea:	fa5f fa8a 	uxtb.w	sl, sl
 800eaee:	f1ba 0f02 	cmp.w	sl, #2
 800eaf2:	d1ec      	bne.n	800eace <_scanf_float+0x2c6>
 800eaf4:	3d03      	subs	r5, #3
 800eaf6:	b2ed      	uxtb	r5, r5
 800eaf8:	1b76      	subs	r6, r6, r5
 800eafa:	6823      	ldr	r3, [r4, #0]
 800eafc:	05da      	lsls	r2, r3, #23
 800eafe:	d52f      	bpl.n	800eb60 <_scanf_float+0x358>
 800eb00:	055b      	lsls	r3, r3, #21
 800eb02:	d510      	bpl.n	800eb26 <_scanf_float+0x31e>
 800eb04:	455e      	cmp	r6, fp
 800eb06:	f67f aebf 	bls.w	800e888 <_scanf_float+0x80>
 800eb0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800eb12:	463a      	mov	r2, r7
 800eb14:	4640      	mov	r0, r8
 800eb16:	4798      	blx	r3
 800eb18:	6923      	ldr	r3, [r4, #16]
 800eb1a:	3b01      	subs	r3, #1
 800eb1c:	6123      	str	r3, [r4, #16]
 800eb1e:	e7f1      	b.n	800eb04 <_scanf_float+0x2fc>
 800eb20:	46aa      	mov	sl, r5
 800eb22:	9602      	str	r6, [sp, #8]
 800eb24:	e7df      	b.n	800eae6 <_scanf_float+0x2de>
 800eb26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800eb2a:	6923      	ldr	r3, [r4, #16]
 800eb2c:	2965      	cmp	r1, #101	; 0x65
 800eb2e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800eb32:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800eb36:	6123      	str	r3, [r4, #16]
 800eb38:	d00c      	beq.n	800eb54 <_scanf_float+0x34c>
 800eb3a:	2945      	cmp	r1, #69	; 0x45
 800eb3c:	d00a      	beq.n	800eb54 <_scanf_float+0x34c>
 800eb3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb42:	463a      	mov	r2, r7
 800eb44:	4640      	mov	r0, r8
 800eb46:	4798      	blx	r3
 800eb48:	6923      	ldr	r3, [r4, #16]
 800eb4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800eb4e:	3b01      	subs	r3, #1
 800eb50:	1eb5      	subs	r5, r6, #2
 800eb52:	6123      	str	r3, [r4, #16]
 800eb54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800eb58:	463a      	mov	r2, r7
 800eb5a:	4640      	mov	r0, r8
 800eb5c:	4798      	blx	r3
 800eb5e:	462e      	mov	r6, r5
 800eb60:	6825      	ldr	r5, [r4, #0]
 800eb62:	f015 0510 	ands.w	r5, r5, #16
 800eb66:	d158      	bne.n	800ec1a <_scanf_float+0x412>
 800eb68:	7035      	strb	r5, [r6, #0]
 800eb6a:	6823      	ldr	r3, [r4, #0]
 800eb6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800eb70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb74:	d11c      	bne.n	800ebb0 <_scanf_float+0x3a8>
 800eb76:	9b01      	ldr	r3, [sp, #4]
 800eb78:	454b      	cmp	r3, r9
 800eb7a:	eba3 0209 	sub.w	r2, r3, r9
 800eb7e:	d124      	bne.n	800ebca <_scanf_float+0x3c2>
 800eb80:	2200      	movs	r2, #0
 800eb82:	4659      	mov	r1, fp
 800eb84:	4640      	mov	r0, r8
 800eb86:	f000 ff43 	bl	800fa10 <_strtod_r>
 800eb8a:	9b03      	ldr	r3, [sp, #12]
 800eb8c:	6821      	ldr	r1, [r4, #0]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f011 0f02 	tst.w	r1, #2
 800eb94:	ec57 6b10 	vmov	r6, r7, d0
 800eb98:	f103 0204 	add.w	r2, r3, #4
 800eb9c:	d020      	beq.n	800ebe0 <_scanf_float+0x3d8>
 800eb9e:	9903      	ldr	r1, [sp, #12]
 800eba0:	600a      	str	r2, [r1, #0]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	e9c3 6700 	strd	r6, r7, [r3]
 800eba8:	68e3      	ldr	r3, [r4, #12]
 800ebaa:	3301      	adds	r3, #1
 800ebac:	60e3      	str	r3, [r4, #12]
 800ebae:	e66c      	b.n	800e88a <_scanf_float+0x82>
 800ebb0:	9b04      	ldr	r3, [sp, #16]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d0e4      	beq.n	800eb80 <_scanf_float+0x378>
 800ebb6:	9905      	ldr	r1, [sp, #20]
 800ebb8:	230a      	movs	r3, #10
 800ebba:	462a      	mov	r2, r5
 800ebbc:	3101      	adds	r1, #1
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	f000 ffae 	bl	800fb20 <_strtol_r>
 800ebc4:	9b04      	ldr	r3, [sp, #16]
 800ebc6:	9e05      	ldr	r6, [sp, #20]
 800ebc8:	1ac2      	subs	r2, r0, r3
 800ebca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ebce:	429e      	cmp	r6, r3
 800ebd0:	bf28      	it	cs
 800ebd2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ebd6:	4912      	ldr	r1, [pc, #72]	; (800ec20 <_scanf_float+0x418>)
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f000 f859 	bl	800ec90 <siprintf>
 800ebde:	e7cf      	b.n	800eb80 <_scanf_float+0x378>
 800ebe0:	f011 0f04 	tst.w	r1, #4
 800ebe4:	9903      	ldr	r1, [sp, #12]
 800ebe6:	600a      	str	r2, [r1, #0]
 800ebe8:	d1db      	bne.n	800eba2 <_scanf_float+0x39a>
 800ebea:	f8d3 8000 	ldr.w	r8, [r3]
 800ebee:	ee10 2a10 	vmov	r2, s0
 800ebf2:	ee10 0a10 	vmov	r0, s0
 800ebf6:	463b      	mov	r3, r7
 800ebf8:	4639      	mov	r1, r7
 800ebfa:	f7f1 ff97 	bl	8000b2c <__aeabi_dcmpun>
 800ebfe:	b128      	cbz	r0, 800ec0c <_scanf_float+0x404>
 800ec00:	4808      	ldr	r0, [pc, #32]	; (800ec24 <_scanf_float+0x41c>)
 800ec02:	f001 f819 	bl	800fc38 <nanf>
 800ec06:	ed88 0a00 	vstr	s0, [r8]
 800ec0a:	e7cd      	b.n	800eba8 <_scanf_float+0x3a0>
 800ec0c:	4630      	mov	r0, r6
 800ec0e:	4639      	mov	r1, r7
 800ec10:	f7f1 ffea 	bl	8000be8 <__aeabi_d2f>
 800ec14:	f8c8 0000 	str.w	r0, [r8]
 800ec18:	e7c6      	b.n	800eba8 <_scanf_float+0x3a0>
 800ec1a:	2500      	movs	r5, #0
 800ec1c:	e635      	b.n	800e88a <_scanf_float+0x82>
 800ec1e:	bf00      	nop
 800ec20:	08015004 	.word	0x08015004
 800ec24:	080153f7 	.word	0x080153f7

0800ec28 <sniprintf>:
 800ec28:	b40c      	push	{r2, r3}
 800ec2a:	b530      	push	{r4, r5, lr}
 800ec2c:	4b17      	ldr	r3, [pc, #92]	; (800ec8c <sniprintf+0x64>)
 800ec2e:	1e0c      	subs	r4, r1, #0
 800ec30:	681d      	ldr	r5, [r3, #0]
 800ec32:	b09d      	sub	sp, #116	; 0x74
 800ec34:	da08      	bge.n	800ec48 <sniprintf+0x20>
 800ec36:	238b      	movs	r3, #139	; 0x8b
 800ec38:	602b      	str	r3, [r5, #0]
 800ec3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec3e:	b01d      	add	sp, #116	; 0x74
 800ec40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec44:	b002      	add	sp, #8
 800ec46:	4770      	bx	lr
 800ec48:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ec4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ec50:	bf14      	ite	ne
 800ec52:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ec56:	4623      	moveq	r3, r4
 800ec58:	9304      	str	r3, [sp, #16]
 800ec5a:	9307      	str	r3, [sp, #28]
 800ec5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec60:	9002      	str	r0, [sp, #8]
 800ec62:	9006      	str	r0, [sp, #24]
 800ec64:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ec68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ec6a:	ab21      	add	r3, sp, #132	; 0x84
 800ec6c:	a902      	add	r1, sp, #8
 800ec6e:	4628      	mov	r0, r5
 800ec70:	9301      	str	r3, [sp, #4]
 800ec72:	f002 fa15 	bl	80110a0 <_svfiprintf_r>
 800ec76:	1c43      	adds	r3, r0, #1
 800ec78:	bfbc      	itt	lt
 800ec7a:	238b      	movlt	r3, #139	; 0x8b
 800ec7c:	602b      	strlt	r3, [r5, #0]
 800ec7e:	2c00      	cmp	r4, #0
 800ec80:	d0dd      	beq.n	800ec3e <sniprintf+0x16>
 800ec82:	9b02      	ldr	r3, [sp, #8]
 800ec84:	2200      	movs	r2, #0
 800ec86:	701a      	strb	r2, [r3, #0]
 800ec88:	e7d9      	b.n	800ec3e <sniprintf+0x16>
 800ec8a:	bf00      	nop
 800ec8c:	200001ec 	.word	0x200001ec

0800ec90 <siprintf>:
 800ec90:	b40e      	push	{r1, r2, r3}
 800ec92:	b500      	push	{lr}
 800ec94:	b09c      	sub	sp, #112	; 0x70
 800ec96:	ab1d      	add	r3, sp, #116	; 0x74
 800ec98:	9002      	str	r0, [sp, #8]
 800ec9a:	9006      	str	r0, [sp, #24]
 800ec9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eca0:	4809      	ldr	r0, [pc, #36]	; (800ecc8 <siprintf+0x38>)
 800eca2:	9107      	str	r1, [sp, #28]
 800eca4:	9104      	str	r1, [sp, #16]
 800eca6:	4909      	ldr	r1, [pc, #36]	; (800eccc <siprintf+0x3c>)
 800eca8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecac:	9105      	str	r1, [sp, #20]
 800ecae:	6800      	ldr	r0, [r0, #0]
 800ecb0:	9301      	str	r3, [sp, #4]
 800ecb2:	a902      	add	r1, sp, #8
 800ecb4:	f002 f9f4 	bl	80110a0 <_svfiprintf_r>
 800ecb8:	9b02      	ldr	r3, [sp, #8]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	701a      	strb	r2, [r3, #0]
 800ecbe:	b01c      	add	sp, #112	; 0x70
 800ecc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ecc4:	b003      	add	sp, #12
 800ecc6:	4770      	bx	lr
 800ecc8:	200001ec 	.word	0x200001ec
 800eccc:	ffff0208 	.word	0xffff0208

0800ecd0 <std>:
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	b510      	push	{r4, lr}
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	e9c0 3300 	strd	r3, r3, [r0]
 800ecda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecde:	6083      	str	r3, [r0, #8]
 800ece0:	8181      	strh	r1, [r0, #12]
 800ece2:	6643      	str	r3, [r0, #100]	; 0x64
 800ece4:	81c2      	strh	r2, [r0, #14]
 800ece6:	6183      	str	r3, [r0, #24]
 800ece8:	4619      	mov	r1, r3
 800ecea:	2208      	movs	r2, #8
 800ecec:	305c      	adds	r0, #92	; 0x5c
 800ecee:	f000 ff53 	bl	800fb98 <memset>
 800ecf2:	4b05      	ldr	r3, [pc, #20]	; (800ed08 <std+0x38>)
 800ecf4:	6263      	str	r3, [r4, #36]	; 0x24
 800ecf6:	4b05      	ldr	r3, [pc, #20]	; (800ed0c <std+0x3c>)
 800ecf8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ecfa:	4b05      	ldr	r3, [pc, #20]	; (800ed10 <std+0x40>)
 800ecfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ecfe:	4b05      	ldr	r3, [pc, #20]	; (800ed14 <std+0x44>)
 800ed00:	6224      	str	r4, [r4, #32]
 800ed02:	6323      	str	r3, [r4, #48]	; 0x30
 800ed04:	bd10      	pop	{r4, pc}
 800ed06:	bf00      	nop
 800ed08:	08011edf 	.word	0x08011edf
 800ed0c:	08011f01 	.word	0x08011f01
 800ed10:	08011f39 	.word	0x08011f39
 800ed14:	08011f5d 	.word	0x08011f5d

0800ed18 <stdio_exit_handler>:
 800ed18:	4a02      	ldr	r2, [pc, #8]	; (800ed24 <stdio_exit_handler+0xc>)
 800ed1a:	4903      	ldr	r1, [pc, #12]	; (800ed28 <stdio_exit_handler+0x10>)
 800ed1c:	4803      	ldr	r0, [pc, #12]	; (800ed2c <stdio_exit_handler+0x14>)
 800ed1e:	f000 bf0b 	b.w	800fb38 <_fwalk_sglue>
 800ed22:	bf00      	nop
 800ed24:	20000028 	.word	0x20000028
 800ed28:	0801151d 	.word	0x0801151d
 800ed2c:	200001a0 	.word	0x200001a0

0800ed30 <cleanup_stdio>:
 800ed30:	6841      	ldr	r1, [r0, #4]
 800ed32:	4b0c      	ldr	r3, [pc, #48]	; (800ed64 <cleanup_stdio+0x34>)
 800ed34:	4299      	cmp	r1, r3
 800ed36:	b510      	push	{r4, lr}
 800ed38:	4604      	mov	r4, r0
 800ed3a:	d001      	beq.n	800ed40 <cleanup_stdio+0x10>
 800ed3c:	f002 fbee 	bl	801151c <_fflush_r>
 800ed40:	68a1      	ldr	r1, [r4, #8]
 800ed42:	4b09      	ldr	r3, [pc, #36]	; (800ed68 <cleanup_stdio+0x38>)
 800ed44:	4299      	cmp	r1, r3
 800ed46:	d002      	beq.n	800ed4e <cleanup_stdio+0x1e>
 800ed48:	4620      	mov	r0, r4
 800ed4a:	f002 fbe7 	bl	801151c <_fflush_r>
 800ed4e:	68e1      	ldr	r1, [r4, #12]
 800ed50:	4b06      	ldr	r3, [pc, #24]	; (800ed6c <cleanup_stdio+0x3c>)
 800ed52:	4299      	cmp	r1, r3
 800ed54:	d004      	beq.n	800ed60 <cleanup_stdio+0x30>
 800ed56:	4620      	mov	r0, r4
 800ed58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed5c:	f002 bbde 	b.w	801151c <_fflush_r>
 800ed60:	bd10      	pop	{r4, pc}
 800ed62:	bf00      	nop
 800ed64:	20003004 	.word	0x20003004
 800ed68:	2000306c 	.word	0x2000306c
 800ed6c:	200030d4 	.word	0x200030d4

0800ed70 <global_stdio_init.part.0>:
 800ed70:	b510      	push	{r4, lr}
 800ed72:	4b0b      	ldr	r3, [pc, #44]	; (800eda0 <global_stdio_init.part.0+0x30>)
 800ed74:	4c0b      	ldr	r4, [pc, #44]	; (800eda4 <global_stdio_init.part.0+0x34>)
 800ed76:	4a0c      	ldr	r2, [pc, #48]	; (800eda8 <global_stdio_init.part.0+0x38>)
 800ed78:	601a      	str	r2, [r3, #0]
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	2104      	movs	r1, #4
 800ed80:	f7ff ffa6 	bl	800ecd0 <std>
 800ed84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ed88:	2201      	movs	r2, #1
 800ed8a:	2109      	movs	r1, #9
 800ed8c:	f7ff ffa0 	bl	800ecd0 <std>
 800ed90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ed94:	2202      	movs	r2, #2
 800ed96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed9a:	2112      	movs	r1, #18
 800ed9c:	f7ff bf98 	b.w	800ecd0 <std>
 800eda0:	2000313c 	.word	0x2000313c
 800eda4:	20003004 	.word	0x20003004
 800eda8:	0800ed19 	.word	0x0800ed19

0800edac <__sfp_lock_acquire>:
 800edac:	4801      	ldr	r0, [pc, #4]	; (800edb4 <__sfp_lock_acquire+0x8>)
 800edae:	f000 bf29 	b.w	800fc04 <__retarget_lock_acquire_recursive>
 800edb2:	bf00      	nop
 800edb4:	20003141 	.word	0x20003141

0800edb8 <__sfp_lock_release>:
 800edb8:	4801      	ldr	r0, [pc, #4]	; (800edc0 <__sfp_lock_release+0x8>)
 800edba:	f000 bf24 	b.w	800fc06 <__retarget_lock_release_recursive>
 800edbe:	bf00      	nop
 800edc0:	20003141 	.word	0x20003141

0800edc4 <__sinit>:
 800edc4:	b510      	push	{r4, lr}
 800edc6:	4604      	mov	r4, r0
 800edc8:	f7ff fff0 	bl	800edac <__sfp_lock_acquire>
 800edcc:	6a23      	ldr	r3, [r4, #32]
 800edce:	b11b      	cbz	r3, 800edd8 <__sinit+0x14>
 800edd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd4:	f7ff bff0 	b.w	800edb8 <__sfp_lock_release>
 800edd8:	4b04      	ldr	r3, [pc, #16]	; (800edec <__sinit+0x28>)
 800edda:	6223      	str	r3, [r4, #32]
 800eddc:	4b04      	ldr	r3, [pc, #16]	; (800edf0 <__sinit+0x2c>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1f5      	bne.n	800edd0 <__sinit+0xc>
 800ede4:	f7ff ffc4 	bl	800ed70 <global_stdio_init.part.0>
 800ede8:	e7f2      	b.n	800edd0 <__sinit+0xc>
 800edea:	bf00      	nop
 800edec:	0800ed31 	.word	0x0800ed31
 800edf0:	2000313c 	.word	0x2000313c

0800edf4 <sulp>:
 800edf4:	b570      	push	{r4, r5, r6, lr}
 800edf6:	4604      	mov	r4, r0
 800edf8:	460d      	mov	r5, r1
 800edfa:	ec45 4b10 	vmov	d0, r4, r5
 800edfe:	4616      	mov	r6, r2
 800ee00:	f002 ff2c 	bl	8011c5c <__ulp>
 800ee04:	ec51 0b10 	vmov	r0, r1, d0
 800ee08:	b17e      	cbz	r6, 800ee2a <sulp+0x36>
 800ee0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ee0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	dd09      	ble.n	800ee2a <sulp+0x36>
 800ee16:	051b      	lsls	r3, r3, #20
 800ee18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ee1c:	2400      	movs	r4, #0
 800ee1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ee22:	4622      	mov	r2, r4
 800ee24:	462b      	mov	r3, r5
 800ee26:	f7f1 fbe7 	bl	80005f8 <__aeabi_dmul>
 800ee2a:	bd70      	pop	{r4, r5, r6, pc}
 800ee2c:	0000      	movs	r0, r0
	...

0800ee30 <_strtod_l>:
 800ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee34:	ed2d 8b02 	vpush	{d8}
 800ee38:	b09b      	sub	sp, #108	; 0x6c
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	9213      	str	r2, [sp, #76]	; 0x4c
 800ee3e:	2200      	movs	r2, #0
 800ee40:	9216      	str	r2, [sp, #88]	; 0x58
 800ee42:	460d      	mov	r5, r1
 800ee44:	f04f 0800 	mov.w	r8, #0
 800ee48:	f04f 0900 	mov.w	r9, #0
 800ee4c:	460a      	mov	r2, r1
 800ee4e:	9215      	str	r2, [sp, #84]	; 0x54
 800ee50:	7811      	ldrb	r1, [r2, #0]
 800ee52:	292b      	cmp	r1, #43	; 0x2b
 800ee54:	d04c      	beq.n	800eef0 <_strtod_l+0xc0>
 800ee56:	d83a      	bhi.n	800eece <_strtod_l+0x9e>
 800ee58:	290d      	cmp	r1, #13
 800ee5a:	d834      	bhi.n	800eec6 <_strtod_l+0x96>
 800ee5c:	2908      	cmp	r1, #8
 800ee5e:	d834      	bhi.n	800eeca <_strtod_l+0x9a>
 800ee60:	2900      	cmp	r1, #0
 800ee62:	d03d      	beq.n	800eee0 <_strtod_l+0xb0>
 800ee64:	2200      	movs	r2, #0
 800ee66:	920a      	str	r2, [sp, #40]	; 0x28
 800ee68:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ee6a:	7832      	ldrb	r2, [r6, #0]
 800ee6c:	2a30      	cmp	r2, #48	; 0x30
 800ee6e:	f040 80b4 	bne.w	800efda <_strtod_l+0x1aa>
 800ee72:	7872      	ldrb	r2, [r6, #1]
 800ee74:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ee78:	2a58      	cmp	r2, #88	; 0x58
 800ee7a:	d170      	bne.n	800ef5e <_strtod_l+0x12e>
 800ee7c:	9302      	str	r3, [sp, #8]
 800ee7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee80:	9301      	str	r3, [sp, #4]
 800ee82:	ab16      	add	r3, sp, #88	; 0x58
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	4a8e      	ldr	r2, [pc, #568]	; (800f0c0 <_strtod_l+0x290>)
 800ee88:	ab17      	add	r3, sp, #92	; 0x5c
 800ee8a:	a915      	add	r1, sp, #84	; 0x54
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f001 fdbd 	bl	8010a0c <__gethex>
 800ee92:	f010 070f 	ands.w	r7, r0, #15
 800ee96:	4605      	mov	r5, r0
 800ee98:	d005      	beq.n	800eea6 <_strtod_l+0x76>
 800ee9a:	2f06      	cmp	r7, #6
 800ee9c:	d12a      	bne.n	800eef4 <_strtod_l+0xc4>
 800ee9e:	3601      	adds	r6, #1
 800eea0:	2300      	movs	r3, #0
 800eea2:	9615      	str	r6, [sp, #84]	; 0x54
 800eea4:	930a      	str	r3, [sp, #40]	; 0x28
 800eea6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f040 857f 	bne.w	800f9ac <_strtod_l+0xb7c>
 800eeae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eeb0:	b1db      	cbz	r3, 800eeea <_strtod_l+0xba>
 800eeb2:	4642      	mov	r2, r8
 800eeb4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eeb8:	ec43 2b10 	vmov	d0, r2, r3
 800eebc:	b01b      	add	sp, #108	; 0x6c
 800eebe:	ecbd 8b02 	vpop	{d8}
 800eec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec6:	2920      	cmp	r1, #32
 800eec8:	d1cc      	bne.n	800ee64 <_strtod_l+0x34>
 800eeca:	3201      	adds	r2, #1
 800eecc:	e7bf      	b.n	800ee4e <_strtod_l+0x1e>
 800eece:	292d      	cmp	r1, #45	; 0x2d
 800eed0:	d1c8      	bne.n	800ee64 <_strtod_l+0x34>
 800eed2:	2101      	movs	r1, #1
 800eed4:	910a      	str	r1, [sp, #40]	; 0x28
 800eed6:	1c51      	adds	r1, r2, #1
 800eed8:	9115      	str	r1, [sp, #84]	; 0x54
 800eeda:	7852      	ldrb	r2, [r2, #1]
 800eedc:	2a00      	cmp	r2, #0
 800eede:	d1c3      	bne.n	800ee68 <_strtod_l+0x38>
 800eee0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eee2:	9515      	str	r5, [sp, #84]	; 0x54
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	f040 855f 	bne.w	800f9a8 <_strtod_l+0xb78>
 800eeea:	4642      	mov	r2, r8
 800eeec:	464b      	mov	r3, r9
 800eeee:	e7e3      	b.n	800eeb8 <_strtod_l+0x88>
 800eef0:	2100      	movs	r1, #0
 800eef2:	e7ef      	b.n	800eed4 <_strtod_l+0xa4>
 800eef4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eef6:	b13a      	cbz	r2, 800ef08 <_strtod_l+0xd8>
 800eef8:	2135      	movs	r1, #53	; 0x35
 800eefa:	a818      	add	r0, sp, #96	; 0x60
 800eefc:	f002 ffab 	bl	8011e56 <__copybits>
 800ef00:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ef02:	4620      	mov	r0, r4
 800ef04:	f002 fb7e 	bl	8011604 <_Bfree>
 800ef08:	3f01      	subs	r7, #1
 800ef0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ef0c:	2f04      	cmp	r7, #4
 800ef0e:	d806      	bhi.n	800ef1e <_strtod_l+0xee>
 800ef10:	e8df f007 	tbb	[pc, r7]
 800ef14:	201d0314 	.word	0x201d0314
 800ef18:	14          	.byte	0x14
 800ef19:	00          	.byte	0x00
 800ef1a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ef1e:	05e9      	lsls	r1, r5, #23
 800ef20:	bf48      	it	mi
 800ef22:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ef26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef2a:	0d1b      	lsrs	r3, r3, #20
 800ef2c:	051b      	lsls	r3, r3, #20
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1b9      	bne.n	800eea6 <_strtod_l+0x76>
 800ef32:	f000 fe3d 	bl	800fbb0 <__errno>
 800ef36:	2322      	movs	r3, #34	; 0x22
 800ef38:	6003      	str	r3, [r0, #0]
 800ef3a:	e7b4      	b.n	800eea6 <_strtod_l+0x76>
 800ef3c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ef40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ef44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ef48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ef4c:	e7e7      	b.n	800ef1e <_strtod_l+0xee>
 800ef4e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f0c8 <_strtod_l+0x298>
 800ef52:	e7e4      	b.n	800ef1e <_strtod_l+0xee>
 800ef54:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ef58:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ef5c:	e7df      	b.n	800ef1e <_strtod_l+0xee>
 800ef5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef60:	1c5a      	adds	r2, r3, #1
 800ef62:	9215      	str	r2, [sp, #84]	; 0x54
 800ef64:	785b      	ldrb	r3, [r3, #1]
 800ef66:	2b30      	cmp	r3, #48	; 0x30
 800ef68:	d0f9      	beq.n	800ef5e <_strtod_l+0x12e>
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d09b      	beq.n	800eea6 <_strtod_l+0x76>
 800ef6e:	2301      	movs	r3, #1
 800ef70:	f04f 0a00 	mov.w	sl, #0
 800ef74:	9304      	str	r3, [sp, #16]
 800ef76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef78:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef7a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ef7e:	46d3      	mov	fp, sl
 800ef80:	220a      	movs	r2, #10
 800ef82:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ef84:	7806      	ldrb	r6, [r0, #0]
 800ef86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ef8a:	b2d9      	uxtb	r1, r3
 800ef8c:	2909      	cmp	r1, #9
 800ef8e:	d926      	bls.n	800efde <_strtod_l+0x1ae>
 800ef90:	494c      	ldr	r1, [pc, #304]	; (800f0c4 <_strtod_l+0x294>)
 800ef92:	2201      	movs	r2, #1
 800ef94:	f000 fdee 	bl	800fb74 <strncmp>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	d030      	beq.n	800effe <_strtod_l+0x1ce>
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	4632      	mov	r2, r6
 800efa0:	9005      	str	r0, [sp, #20]
 800efa2:	465e      	mov	r6, fp
 800efa4:	4603      	mov	r3, r0
 800efa6:	2a65      	cmp	r2, #101	; 0x65
 800efa8:	d001      	beq.n	800efae <_strtod_l+0x17e>
 800efaa:	2a45      	cmp	r2, #69	; 0x45
 800efac:	d113      	bne.n	800efd6 <_strtod_l+0x1a6>
 800efae:	b91e      	cbnz	r6, 800efb8 <_strtod_l+0x188>
 800efb0:	9a04      	ldr	r2, [sp, #16]
 800efb2:	4302      	orrs	r2, r0
 800efb4:	d094      	beq.n	800eee0 <_strtod_l+0xb0>
 800efb6:	2600      	movs	r6, #0
 800efb8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800efba:	1c6a      	adds	r2, r5, #1
 800efbc:	9215      	str	r2, [sp, #84]	; 0x54
 800efbe:	786a      	ldrb	r2, [r5, #1]
 800efc0:	2a2b      	cmp	r2, #43	; 0x2b
 800efc2:	d074      	beq.n	800f0ae <_strtod_l+0x27e>
 800efc4:	2a2d      	cmp	r2, #45	; 0x2d
 800efc6:	d078      	beq.n	800f0ba <_strtod_l+0x28a>
 800efc8:	f04f 0c00 	mov.w	ip, #0
 800efcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800efd0:	2909      	cmp	r1, #9
 800efd2:	d97f      	bls.n	800f0d4 <_strtod_l+0x2a4>
 800efd4:	9515      	str	r5, [sp, #84]	; 0x54
 800efd6:	2700      	movs	r7, #0
 800efd8:	e09e      	b.n	800f118 <_strtod_l+0x2e8>
 800efda:	2300      	movs	r3, #0
 800efdc:	e7c8      	b.n	800ef70 <_strtod_l+0x140>
 800efde:	f1bb 0f08 	cmp.w	fp, #8
 800efe2:	bfd8      	it	le
 800efe4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800efe6:	f100 0001 	add.w	r0, r0, #1
 800efea:	bfda      	itte	le
 800efec:	fb02 3301 	mlale	r3, r2, r1, r3
 800eff0:	9309      	strle	r3, [sp, #36]	; 0x24
 800eff2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800eff6:	f10b 0b01 	add.w	fp, fp, #1
 800effa:	9015      	str	r0, [sp, #84]	; 0x54
 800effc:	e7c1      	b.n	800ef82 <_strtod_l+0x152>
 800effe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f000:	1c5a      	adds	r2, r3, #1
 800f002:	9215      	str	r2, [sp, #84]	; 0x54
 800f004:	785a      	ldrb	r2, [r3, #1]
 800f006:	f1bb 0f00 	cmp.w	fp, #0
 800f00a:	d037      	beq.n	800f07c <_strtod_l+0x24c>
 800f00c:	9005      	str	r0, [sp, #20]
 800f00e:	465e      	mov	r6, fp
 800f010:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f014:	2b09      	cmp	r3, #9
 800f016:	d912      	bls.n	800f03e <_strtod_l+0x20e>
 800f018:	2301      	movs	r3, #1
 800f01a:	e7c4      	b.n	800efa6 <_strtod_l+0x176>
 800f01c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f01e:	1c5a      	adds	r2, r3, #1
 800f020:	9215      	str	r2, [sp, #84]	; 0x54
 800f022:	785a      	ldrb	r2, [r3, #1]
 800f024:	3001      	adds	r0, #1
 800f026:	2a30      	cmp	r2, #48	; 0x30
 800f028:	d0f8      	beq.n	800f01c <_strtod_l+0x1ec>
 800f02a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f02e:	2b08      	cmp	r3, #8
 800f030:	f200 84c1 	bhi.w	800f9b6 <_strtod_l+0xb86>
 800f034:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f036:	9005      	str	r0, [sp, #20]
 800f038:	2000      	movs	r0, #0
 800f03a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f03c:	4606      	mov	r6, r0
 800f03e:	3a30      	subs	r2, #48	; 0x30
 800f040:	f100 0301 	add.w	r3, r0, #1
 800f044:	d014      	beq.n	800f070 <_strtod_l+0x240>
 800f046:	9905      	ldr	r1, [sp, #20]
 800f048:	4419      	add	r1, r3
 800f04a:	9105      	str	r1, [sp, #20]
 800f04c:	4633      	mov	r3, r6
 800f04e:	eb00 0c06 	add.w	ip, r0, r6
 800f052:	210a      	movs	r1, #10
 800f054:	4563      	cmp	r3, ip
 800f056:	d113      	bne.n	800f080 <_strtod_l+0x250>
 800f058:	1833      	adds	r3, r6, r0
 800f05a:	2b08      	cmp	r3, #8
 800f05c:	f106 0601 	add.w	r6, r6, #1
 800f060:	4406      	add	r6, r0
 800f062:	dc1a      	bgt.n	800f09a <_strtod_l+0x26a>
 800f064:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f066:	230a      	movs	r3, #10
 800f068:	fb03 2301 	mla	r3, r3, r1, r2
 800f06c:	9309      	str	r3, [sp, #36]	; 0x24
 800f06e:	2300      	movs	r3, #0
 800f070:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f072:	1c51      	adds	r1, r2, #1
 800f074:	9115      	str	r1, [sp, #84]	; 0x54
 800f076:	7852      	ldrb	r2, [r2, #1]
 800f078:	4618      	mov	r0, r3
 800f07a:	e7c9      	b.n	800f010 <_strtod_l+0x1e0>
 800f07c:	4658      	mov	r0, fp
 800f07e:	e7d2      	b.n	800f026 <_strtod_l+0x1f6>
 800f080:	2b08      	cmp	r3, #8
 800f082:	f103 0301 	add.w	r3, r3, #1
 800f086:	dc03      	bgt.n	800f090 <_strtod_l+0x260>
 800f088:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f08a:	434f      	muls	r7, r1
 800f08c:	9709      	str	r7, [sp, #36]	; 0x24
 800f08e:	e7e1      	b.n	800f054 <_strtod_l+0x224>
 800f090:	2b10      	cmp	r3, #16
 800f092:	bfd8      	it	le
 800f094:	fb01 fa0a 	mulle.w	sl, r1, sl
 800f098:	e7dc      	b.n	800f054 <_strtod_l+0x224>
 800f09a:	2e10      	cmp	r6, #16
 800f09c:	bfdc      	itt	le
 800f09e:	230a      	movle	r3, #10
 800f0a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800f0a4:	e7e3      	b.n	800f06e <_strtod_l+0x23e>
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	9305      	str	r3, [sp, #20]
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	e780      	b.n	800efb0 <_strtod_l+0x180>
 800f0ae:	f04f 0c00 	mov.w	ip, #0
 800f0b2:	1caa      	adds	r2, r5, #2
 800f0b4:	9215      	str	r2, [sp, #84]	; 0x54
 800f0b6:	78aa      	ldrb	r2, [r5, #2]
 800f0b8:	e788      	b.n	800efcc <_strtod_l+0x19c>
 800f0ba:	f04f 0c01 	mov.w	ip, #1
 800f0be:	e7f8      	b.n	800f0b2 <_strtod_l+0x282>
 800f0c0:	0801500c 	.word	0x0801500c
 800f0c4:	08015009 	.word	0x08015009
 800f0c8:	7ff00000 	.word	0x7ff00000
 800f0cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f0ce:	1c51      	adds	r1, r2, #1
 800f0d0:	9115      	str	r1, [sp, #84]	; 0x54
 800f0d2:	7852      	ldrb	r2, [r2, #1]
 800f0d4:	2a30      	cmp	r2, #48	; 0x30
 800f0d6:	d0f9      	beq.n	800f0cc <_strtod_l+0x29c>
 800f0d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f0dc:	2908      	cmp	r1, #8
 800f0de:	f63f af7a 	bhi.w	800efd6 <_strtod_l+0x1a6>
 800f0e2:	3a30      	subs	r2, #48	; 0x30
 800f0e4:	9208      	str	r2, [sp, #32]
 800f0e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f0e8:	920c      	str	r2, [sp, #48]	; 0x30
 800f0ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f0ec:	1c57      	adds	r7, r2, #1
 800f0ee:	9715      	str	r7, [sp, #84]	; 0x54
 800f0f0:	7852      	ldrb	r2, [r2, #1]
 800f0f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f0f6:	f1be 0f09 	cmp.w	lr, #9
 800f0fa:	d938      	bls.n	800f16e <_strtod_l+0x33e>
 800f0fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f0fe:	1a7f      	subs	r7, r7, r1
 800f100:	2f08      	cmp	r7, #8
 800f102:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800f106:	dc03      	bgt.n	800f110 <_strtod_l+0x2e0>
 800f108:	9908      	ldr	r1, [sp, #32]
 800f10a:	428f      	cmp	r7, r1
 800f10c:	bfa8      	it	ge
 800f10e:	460f      	movge	r7, r1
 800f110:	f1bc 0f00 	cmp.w	ip, #0
 800f114:	d000      	beq.n	800f118 <_strtod_l+0x2e8>
 800f116:	427f      	negs	r7, r7
 800f118:	2e00      	cmp	r6, #0
 800f11a:	d14f      	bne.n	800f1bc <_strtod_l+0x38c>
 800f11c:	9904      	ldr	r1, [sp, #16]
 800f11e:	4301      	orrs	r1, r0
 800f120:	f47f aec1 	bne.w	800eea6 <_strtod_l+0x76>
 800f124:	2b00      	cmp	r3, #0
 800f126:	f47f aedb 	bne.w	800eee0 <_strtod_l+0xb0>
 800f12a:	2a69      	cmp	r2, #105	; 0x69
 800f12c:	d029      	beq.n	800f182 <_strtod_l+0x352>
 800f12e:	dc26      	bgt.n	800f17e <_strtod_l+0x34e>
 800f130:	2a49      	cmp	r2, #73	; 0x49
 800f132:	d026      	beq.n	800f182 <_strtod_l+0x352>
 800f134:	2a4e      	cmp	r2, #78	; 0x4e
 800f136:	f47f aed3 	bne.w	800eee0 <_strtod_l+0xb0>
 800f13a:	499b      	ldr	r1, [pc, #620]	; (800f3a8 <_strtod_l+0x578>)
 800f13c:	a815      	add	r0, sp, #84	; 0x54
 800f13e:	f001 fea5 	bl	8010e8c <__match>
 800f142:	2800      	cmp	r0, #0
 800f144:	f43f aecc 	beq.w	800eee0 <_strtod_l+0xb0>
 800f148:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	2b28      	cmp	r3, #40	; 0x28
 800f14e:	d12f      	bne.n	800f1b0 <_strtod_l+0x380>
 800f150:	4996      	ldr	r1, [pc, #600]	; (800f3ac <_strtod_l+0x57c>)
 800f152:	aa18      	add	r2, sp, #96	; 0x60
 800f154:	a815      	add	r0, sp, #84	; 0x54
 800f156:	f001 fead 	bl	8010eb4 <__hexnan>
 800f15a:	2805      	cmp	r0, #5
 800f15c:	d128      	bne.n	800f1b0 <_strtod_l+0x380>
 800f15e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f160:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f164:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f168:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f16c:	e69b      	b.n	800eea6 <_strtod_l+0x76>
 800f16e:	9f08      	ldr	r7, [sp, #32]
 800f170:	210a      	movs	r1, #10
 800f172:	fb01 2107 	mla	r1, r1, r7, r2
 800f176:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800f17a:	9208      	str	r2, [sp, #32]
 800f17c:	e7b5      	b.n	800f0ea <_strtod_l+0x2ba>
 800f17e:	2a6e      	cmp	r2, #110	; 0x6e
 800f180:	e7d9      	b.n	800f136 <_strtod_l+0x306>
 800f182:	498b      	ldr	r1, [pc, #556]	; (800f3b0 <_strtod_l+0x580>)
 800f184:	a815      	add	r0, sp, #84	; 0x54
 800f186:	f001 fe81 	bl	8010e8c <__match>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	f43f aea8 	beq.w	800eee0 <_strtod_l+0xb0>
 800f190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f192:	4988      	ldr	r1, [pc, #544]	; (800f3b4 <_strtod_l+0x584>)
 800f194:	3b01      	subs	r3, #1
 800f196:	a815      	add	r0, sp, #84	; 0x54
 800f198:	9315      	str	r3, [sp, #84]	; 0x54
 800f19a:	f001 fe77 	bl	8010e8c <__match>
 800f19e:	b910      	cbnz	r0, 800f1a6 <_strtod_l+0x376>
 800f1a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	9315      	str	r3, [sp, #84]	; 0x54
 800f1a6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800f3c4 <_strtod_l+0x594>
 800f1aa:	f04f 0800 	mov.w	r8, #0
 800f1ae:	e67a      	b.n	800eea6 <_strtod_l+0x76>
 800f1b0:	4881      	ldr	r0, [pc, #516]	; (800f3b8 <_strtod_l+0x588>)
 800f1b2:	f000 fd39 	bl	800fc28 <nan>
 800f1b6:	ec59 8b10 	vmov	r8, r9, d0
 800f1ba:	e674      	b.n	800eea6 <_strtod_l+0x76>
 800f1bc:	9b05      	ldr	r3, [sp, #20]
 800f1be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1c0:	1afb      	subs	r3, r7, r3
 800f1c2:	f1bb 0f00 	cmp.w	fp, #0
 800f1c6:	bf08      	it	eq
 800f1c8:	46b3      	moveq	fp, r6
 800f1ca:	2e10      	cmp	r6, #16
 800f1cc:	9308      	str	r3, [sp, #32]
 800f1ce:	4635      	mov	r5, r6
 800f1d0:	bfa8      	it	ge
 800f1d2:	2510      	movge	r5, #16
 800f1d4:	f7f1 f996 	bl	8000504 <__aeabi_ui2d>
 800f1d8:	2e09      	cmp	r6, #9
 800f1da:	4680      	mov	r8, r0
 800f1dc:	4689      	mov	r9, r1
 800f1de:	dd13      	ble.n	800f208 <_strtod_l+0x3d8>
 800f1e0:	4b76      	ldr	r3, [pc, #472]	; (800f3bc <_strtod_l+0x58c>)
 800f1e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f1e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f1ea:	f7f1 fa05 	bl	80005f8 <__aeabi_dmul>
 800f1ee:	4680      	mov	r8, r0
 800f1f0:	4650      	mov	r0, sl
 800f1f2:	4689      	mov	r9, r1
 800f1f4:	f7f1 f986 	bl	8000504 <__aeabi_ui2d>
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	4640      	mov	r0, r8
 800f1fe:	4649      	mov	r1, r9
 800f200:	f7f1 f844 	bl	800028c <__adddf3>
 800f204:	4680      	mov	r8, r0
 800f206:	4689      	mov	r9, r1
 800f208:	2e0f      	cmp	r6, #15
 800f20a:	dc38      	bgt.n	800f27e <_strtod_l+0x44e>
 800f20c:	9b08      	ldr	r3, [sp, #32]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f43f ae49 	beq.w	800eea6 <_strtod_l+0x76>
 800f214:	dd24      	ble.n	800f260 <_strtod_l+0x430>
 800f216:	2b16      	cmp	r3, #22
 800f218:	dc0b      	bgt.n	800f232 <_strtod_l+0x402>
 800f21a:	4968      	ldr	r1, [pc, #416]	; (800f3bc <_strtod_l+0x58c>)
 800f21c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f220:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f224:	4642      	mov	r2, r8
 800f226:	464b      	mov	r3, r9
 800f228:	f7f1 f9e6 	bl	80005f8 <__aeabi_dmul>
 800f22c:	4680      	mov	r8, r0
 800f22e:	4689      	mov	r9, r1
 800f230:	e639      	b.n	800eea6 <_strtod_l+0x76>
 800f232:	9a08      	ldr	r2, [sp, #32]
 800f234:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800f238:	4293      	cmp	r3, r2
 800f23a:	db20      	blt.n	800f27e <_strtod_l+0x44e>
 800f23c:	4c5f      	ldr	r4, [pc, #380]	; (800f3bc <_strtod_l+0x58c>)
 800f23e:	f1c6 060f 	rsb	r6, r6, #15
 800f242:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800f246:	4642      	mov	r2, r8
 800f248:	464b      	mov	r3, r9
 800f24a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f24e:	f7f1 f9d3 	bl	80005f8 <__aeabi_dmul>
 800f252:	9b08      	ldr	r3, [sp, #32]
 800f254:	1b9e      	subs	r6, r3, r6
 800f256:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800f25a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f25e:	e7e3      	b.n	800f228 <_strtod_l+0x3f8>
 800f260:	9b08      	ldr	r3, [sp, #32]
 800f262:	3316      	adds	r3, #22
 800f264:	db0b      	blt.n	800f27e <_strtod_l+0x44e>
 800f266:	9b05      	ldr	r3, [sp, #20]
 800f268:	1bdf      	subs	r7, r3, r7
 800f26a:	4b54      	ldr	r3, [pc, #336]	; (800f3bc <_strtod_l+0x58c>)
 800f26c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f274:	4640      	mov	r0, r8
 800f276:	4649      	mov	r1, r9
 800f278:	f7f1 fae8 	bl	800084c <__aeabi_ddiv>
 800f27c:	e7d6      	b.n	800f22c <_strtod_l+0x3fc>
 800f27e:	9b08      	ldr	r3, [sp, #32]
 800f280:	1b75      	subs	r5, r6, r5
 800f282:	441d      	add	r5, r3
 800f284:	2d00      	cmp	r5, #0
 800f286:	dd70      	ble.n	800f36a <_strtod_l+0x53a>
 800f288:	f015 030f 	ands.w	r3, r5, #15
 800f28c:	d00a      	beq.n	800f2a4 <_strtod_l+0x474>
 800f28e:	494b      	ldr	r1, [pc, #300]	; (800f3bc <_strtod_l+0x58c>)
 800f290:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f294:	4642      	mov	r2, r8
 800f296:	464b      	mov	r3, r9
 800f298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f29c:	f7f1 f9ac 	bl	80005f8 <__aeabi_dmul>
 800f2a0:	4680      	mov	r8, r0
 800f2a2:	4689      	mov	r9, r1
 800f2a4:	f035 050f 	bics.w	r5, r5, #15
 800f2a8:	d04d      	beq.n	800f346 <_strtod_l+0x516>
 800f2aa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800f2ae:	dd22      	ble.n	800f2f6 <_strtod_l+0x4c6>
 800f2b0:	2500      	movs	r5, #0
 800f2b2:	46ab      	mov	fp, r5
 800f2b4:	9509      	str	r5, [sp, #36]	; 0x24
 800f2b6:	9505      	str	r5, [sp, #20]
 800f2b8:	2322      	movs	r3, #34	; 0x22
 800f2ba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f3c4 <_strtod_l+0x594>
 800f2be:	6023      	str	r3, [r4, #0]
 800f2c0:	f04f 0800 	mov.w	r8, #0
 800f2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	f43f aded 	beq.w	800eea6 <_strtod_l+0x76>
 800f2cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f002 f998 	bl	8011604 <_Bfree>
 800f2d4:	9905      	ldr	r1, [sp, #20]
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f002 f994 	bl	8011604 <_Bfree>
 800f2dc:	4659      	mov	r1, fp
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f002 f990 	bl	8011604 <_Bfree>
 800f2e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f002 f98c 	bl	8011604 <_Bfree>
 800f2ec:	4629      	mov	r1, r5
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	f002 f988 	bl	8011604 <_Bfree>
 800f2f4:	e5d7      	b.n	800eea6 <_strtod_l+0x76>
 800f2f6:	4b32      	ldr	r3, [pc, #200]	; (800f3c0 <_strtod_l+0x590>)
 800f2f8:	9304      	str	r3, [sp, #16]
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	112d      	asrs	r5, r5, #4
 800f2fe:	4640      	mov	r0, r8
 800f300:	4649      	mov	r1, r9
 800f302:	469a      	mov	sl, r3
 800f304:	2d01      	cmp	r5, #1
 800f306:	dc21      	bgt.n	800f34c <_strtod_l+0x51c>
 800f308:	b10b      	cbz	r3, 800f30e <_strtod_l+0x4de>
 800f30a:	4680      	mov	r8, r0
 800f30c:	4689      	mov	r9, r1
 800f30e:	492c      	ldr	r1, [pc, #176]	; (800f3c0 <_strtod_l+0x590>)
 800f310:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f314:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f318:	4642      	mov	r2, r8
 800f31a:	464b      	mov	r3, r9
 800f31c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f320:	f7f1 f96a 	bl	80005f8 <__aeabi_dmul>
 800f324:	4b27      	ldr	r3, [pc, #156]	; (800f3c4 <_strtod_l+0x594>)
 800f326:	460a      	mov	r2, r1
 800f328:	400b      	ands	r3, r1
 800f32a:	4927      	ldr	r1, [pc, #156]	; (800f3c8 <_strtod_l+0x598>)
 800f32c:	428b      	cmp	r3, r1
 800f32e:	4680      	mov	r8, r0
 800f330:	d8be      	bhi.n	800f2b0 <_strtod_l+0x480>
 800f332:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f336:	428b      	cmp	r3, r1
 800f338:	bf86      	itte	hi
 800f33a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800f3cc <_strtod_l+0x59c>
 800f33e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800f342:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f346:	2300      	movs	r3, #0
 800f348:	9304      	str	r3, [sp, #16]
 800f34a:	e07b      	b.n	800f444 <_strtod_l+0x614>
 800f34c:	07ea      	lsls	r2, r5, #31
 800f34e:	d505      	bpl.n	800f35c <_strtod_l+0x52c>
 800f350:	9b04      	ldr	r3, [sp, #16]
 800f352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f356:	f7f1 f94f 	bl	80005f8 <__aeabi_dmul>
 800f35a:	2301      	movs	r3, #1
 800f35c:	9a04      	ldr	r2, [sp, #16]
 800f35e:	3208      	adds	r2, #8
 800f360:	f10a 0a01 	add.w	sl, sl, #1
 800f364:	106d      	asrs	r5, r5, #1
 800f366:	9204      	str	r2, [sp, #16]
 800f368:	e7cc      	b.n	800f304 <_strtod_l+0x4d4>
 800f36a:	d0ec      	beq.n	800f346 <_strtod_l+0x516>
 800f36c:	426d      	negs	r5, r5
 800f36e:	f015 020f 	ands.w	r2, r5, #15
 800f372:	d00a      	beq.n	800f38a <_strtod_l+0x55a>
 800f374:	4b11      	ldr	r3, [pc, #68]	; (800f3bc <_strtod_l+0x58c>)
 800f376:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f37a:	4640      	mov	r0, r8
 800f37c:	4649      	mov	r1, r9
 800f37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f382:	f7f1 fa63 	bl	800084c <__aeabi_ddiv>
 800f386:	4680      	mov	r8, r0
 800f388:	4689      	mov	r9, r1
 800f38a:	112d      	asrs	r5, r5, #4
 800f38c:	d0db      	beq.n	800f346 <_strtod_l+0x516>
 800f38e:	2d1f      	cmp	r5, #31
 800f390:	dd1e      	ble.n	800f3d0 <_strtod_l+0x5a0>
 800f392:	2500      	movs	r5, #0
 800f394:	46ab      	mov	fp, r5
 800f396:	9509      	str	r5, [sp, #36]	; 0x24
 800f398:	9505      	str	r5, [sp, #20]
 800f39a:	2322      	movs	r3, #34	; 0x22
 800f39c:	f04f 0800 	mov.w	r8, #0
 800f3a0:	f04f 0900 	mov.w	r9, #0
 800f3a4:	6023      	str	r3, [r4, #0]
 800f3a6:	e78d      	b.n	800f2c4 <_strtod_l+0x494>
 800f3a8:	08014fdd 	.word	0x08014fdd
 800f3ac:	08015020 	.word	0x08015020
 800f3b0:	08014fd5 	.word	0x08014fd5
 800f3b4:	0801516c 	.word	0x0801516c
 800f3b8:	080153f7 	.word	0x080153f7
 800f3bc:	080152e8 	.word	0x080152e8
 800f3c0:	080152c0 	.word	0x080152c0
 800f3c4:	7ff00000 	.word	0x7ff00000
 800f3c8:	7ca00000 	.word	0x7ca00000
 800f3cc:	7fefffff 	.word	0x7fefffff
 800f3d0:	f015 0310 	ands.w	r3, r5, #16
 800f3d4:	bf18      	it	ne
 800f3d6:	236a      	movne	r3, #106	; 0x6a
 800f3d8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800f77c <_strtod_l+0x94c>
 800f3dc:	9304      	str	r3, [sp, #16]
 800f3de:	4640      	mov	r0, r8
 800f3e0:	4649      	mov	r1, r9
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	07ea      	lsls	r2, r5, #31
 800f3e6:	d504      	bpl.n	800f3f2 <_strtod_l+0x5c2>
 800f3e8:	e9da 2300 	ldrd	r2, r3, [sl]
 800f3ec:	f7f1 f904 	bl	80005f8 <__aeabi_dmul>
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	106d      	asrs	r5, r5, #1
 800f3f4:	f10a 0a08 	add.w	sl, sl, #8
 800f3f8:	d1f4      	bne.n	800f3e4 <_strtod_l+0x5b4>
 800f3fa:	b10b      	cbz	r3, 800f400 <_strtod_l+0x5d0>
 800f3fc:	4680      	mov	r8, r0
 800f3fe:	4689      	mov	r9, r1
 800f400:	9b04      	ldr	r3, [sp, #16]
 800f402:	b1bb      	cbz	r3, 800f434 <_strtod_l+0x604>
 800f404:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800f408:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	4649      	mov	r1, r9
 800f410:	dd10      	ble.n	800f434 <_strtod_l+0x604>
 800f412:	2b1f      	cmp	r3, #31
 800f414:	f340 811e 	ble.w	800f654 <_strtod_l+0x824>
 800f418:	2b34      	cmp	r3, #52	; 0x34
 800f41a:	bfde      	ittt	le
 800f41c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800f420:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f424:	4093      	lslle	r3, r2
 800f426:	f04f 0800 	mov.w	r8, #0
 800f42a:	bfcc      	ite	gt
 800f42c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f430:	ea03 0901 	andle.w	r9, r3, r1
 800f434:	2200      	movs	r2, #0
 800f436:	2300      	movs	r3, #0
 800f438:	4640      	mov	r0, r8
 800f43a:	4649      	mov	r1, r9
 800f43c:	f7f1 fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 800f440:	2800      	cmp	r0, #0
 800f442:	d1a6      	bne.n	800f392 <_strtod_l+0x562>
 800f444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f44a:	4633      	mov	r3, r6
 800f44c:	465a      	mov	r2, fp
 800f44e:	4620      	mov	r0, r4
 800f450:	f002 f940 	bl	80116d4 <__s2b>
 800f454:	9009      	str	r0, [sp, #36]	; 0x24
 800f456:	2800      	cmp	r0, #0
 800f458:	f43f af2a 	beq.w	800f2b0 <_strtod_l+0x480>
 800f45c:	9a08      	ldr	r2, [sp, #32]
 800f45e:	9b05      	ldr	r3, [sp, #20]
 800f460:	2a00      	cmp	r2, #0
 800f462:	eba3 0307 	sub.w	r3, r3, r7
 800f466:	bfa8      	it	ge
 800f468:	2300      	movge	r3, #0
 800f46a:	930c      	str	r3, [sp, #48]	; 0x30
 800f46c:	2500      	movs	r5, #0
 800f46e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f472:	9312      	str	r3, [sp, #72]	; 0x48
 800f474:	46ab      	mov	fp, r5
 800f476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f478:	4620      	mov	r0, r4
 800f47a:	6859      	ldr	r1, [r3, #4]
 800f47c:	f002 f882 	bl	8011584 <_Balloc>
 800f480:	9005      	str	r0, [sp, #20]
 800f482:	2800      	cmp	r0, #0
 800f484:	f43f af18 	beq.w	800f2b8 <_strtod_l+0x488>
 800f488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f48a:	691a      	ldr	r2, [r3, #16]
 800f48c:	3202      	adds	r2, #2
 800f48e:	f103 010c 	add.w	r1, r3, #12
 800f492:	0092      	lsls	r2, r2, #2
 800f494:	300c      	adds	r0, #12
 800f496:	f000 fbb7 	bl	800fc08 <memcpy>
 800f49a:	ec49 8b10 	vmov	d0, r8, r9
 800f49e:	aa18      	add	r2, sp, #96	; 0x60
 800f4a0:	a917      	add	r1, sp, #92	; 0x5c
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	f002 fc4a 	bl	8011d3c <__d2b>
 800f4a8:	ec49 8b18 	vmov	d8, r8, r9
 800f4ac:	9016      	str	r0, [sp, #88]	; 0x58
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	f43f af02 	beq.w	800f2b8 <_strtod_l+0x488>
 800f4b4:	2101      	movs	r1, #1
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f002 f9a4 	bl	8011804 <__i2b>
 800f4bc:	4683      	mov	fp, r0
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	f43f aefa 	beq.w	800f2b8 <_strtod_l+0x488>
 800f4c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f4c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f4c8:	2e00      	cmp	r6, #0
 800f4ca:	bfab      	itete	ge
 800f4cc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800f4ce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800f4d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f4d2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800f4d6:	bfac      	ite	ge
 800f4d8:	eb06 0a03 	addge.w	sl, r6, r3
 800f4dc:	1b9f      	sublt	r7, r3, r6
 800f4de:	9b04      	ldr	r3, [sp, #16]
 800f4e0:	1af6      	subs	r6, r6, r3
 800f4e2:	4416      	add	r6, r2
 800f4e4:	4ba0      	ldr	r3, [pc, #640]	; (800f768 <_strtod_l+0x938>)
 800f4e6:	3e01      	subs	r6, #1
 800f4e8:	429e      	cmp	r6, r3
 800f4ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f4ee:	f280 80c4 	bge.w	800f67a <_strtod_l+0x84a>
 800f4f2:	1b9b      	subs	r3, r3, r6
 800f4f4:	2b1f      	cmp	r3, #31
 800f4f6:	eba2 0203 	sub.w	r2, r2, r3
 800f4fa:	f04f 0101 	mov.w	r1, #1
 800f4fe:	f300 80b0 	bgt.w	800f662 <_strtod_l+0x832>
 800f502:	fa01 f303 	lsl.w	r3, r1, r3
 800f506:	930e      	str	r3, [sp, #56]	; 0x38
 800f508:	2300      	movs	r3, #0
 800f50a:	930d      	str	r3, [sp, #52]	; 0x34
 800f50c:	eb0a 0602 	add.w	r6, sl, r2
 800f510:	9b04      	ldr	r3, [sp, #16]
 800f512:	45b2      	cmp	sl, r6
 800f514:	4417      	add	r7, r2
 800f516:	441f      	add	r7, r3
 800f518:	4653      	mov	r3, sl
 800f51a:	bfa8      	it	ge
 800f51c:	4633      	movge	r3, r6
 800f51e:	42bb      	cmp	r3, r7
 800f520:	bfa8      	it	ge
 800f522:	463b      	movge	r3, r7
 800f524:	2b00      	cmp	r3, #0
 800f526:	bfc2      	ittt	gt
 800f528:	1af6      	subgt	r6, r6, r3
 800f52a:	1aff      	subgt	r7, r7, r3
 800f52c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800f530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f532:	2b00      	cmp	r3, #0
 800f534:	dd17      	ble.n	800f566 <_strtod_l+0x736>
 800f536:	4659      	mov	r1, fp
 800f538:	461a      	mov	r2, r3
 800f53a:	4620      	mov	r0, r4
 800f53c:	f002 fa22 	bl	8011984 <__pow5mult>
 800f540:	4683      	mov	fp, r0
 800f542:	2800      	cmp	r0, #0
 800f544:	f43f aeb8 	beq.w	800f2b8 <_strtod_l+0x488>
 800f548:	4601      	mov	r1, r0
 800f54a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f54c:	4620      	mov	r0, r4
 800f54e:	f002 f96f 	bl	8011830 <__multiply>
 800f552:	900b      	str	r0, [sp, #44]	; 0x2c
 800f554:	2800      	cmp	r0, #0
 800f556:	f43f aeaf 	beq.w	800f2b8 <_strtod_l+0x488>
 800f55a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f55c:	4620      	mov	r0, r4
 800f55e:	f002 f851 	bl	8011604 <_Bfree>
 800f562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f564:	9316      	str	r3, [sp, #88]	; 0x58
 800f566:	2e00      	cmp	r6, #0
 800f568:	f300 808c 	bgt.w	800f684 <_strtod_l+0x854>
 800f56c:	9b08      	ldr	r3, [sp, #32]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	dd08      	ble.n	800f584 <_strtod_l+0x754>
 800f572:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f574:	9905      	ldr	r1, [sp, #20]
 800f576:	4620      	mov	r0, r4
 800f578:	f002 fa04 	bl	8011984 <__pow5mult>
 800f57c:	9005      	str	r0, [sp, #20]
 800f57e:	2800      	cmp	r0, #0
 800f580:	f43f ae9a 	beq.w	800f2b8 <_strtod_l+0x488>
 800f584:	2f00      	cmp	r7, #0
 800f586:	dd08      	ble.n	800f59a <_strtod_l+0x76a>
 800f588:	9905      	ldr	r1, [sp, #20]
 800f58a:	463a      	mov	r2, r7
 800f58c:	4620      	mov	r0, r4
 800f58e:	f002 fa53 	bl	8011a38 <__lshift>
 800f592:	9005      	str	r0, [sp, #20]
 800f594:	2800      	cmp	r0, #0
 800f596:	f43f ae8f 	beq.w	800f2b8 <_strtod_l+0x488>
 800f59a:	f1ba 0f00 	cmp.w	sl, #0
 800f59e:	dd08      	ble.n	800f5b2 <_strtod_l+0x782>
 800f5a0:	4659      	mov	r1, fp
 800f5a2:	4652      	mov	r2, sl
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	f002 fa47 	bl	8011a38 <__lshift>
 800f5aa:	4683      	mov	fp, r0
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	f43f ae83 	beq.w	800f2b8 <_strtod_l+0x488>
 800f5b2:	9a05      	ldr	r2, [sp, #20]
 800f5b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	f002 fac6 	bl	8011b48 <__mdiff>
 800f5bc:	4605      	mov	r5, r0
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	f43f ae7a 	beq.w	800f2b8 <_strtod_l+0x488>
 800f5c4:	68c3      	ldr	r3, [r0, #12]
 800f5c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	60c3      	str	r3, [r0, #12]
 800f5cc:	4659      	mov	r1, fp
 800f5ce:	f002 fa9f 	bl	8011b10 <__mcmp>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	da60      	bge.n	800f698 <_strtod_l+0x868>
 800f5d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5d8:	ea53 0308 	orrs.w	r3, r3, r8
 800f5dc:	f040 8084 	bne.w	800f6e8 <_strtod_l+0x8b8>
 800f5e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d17f      	bne.n	800f6e8 <_strtod_l+0x8b8>
 800f5e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f5ec:	0d1b      	lsrs	r3, r3, #20
 800f5ee:	051b      	lsls	r3, r3, #20
 800f5f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f5f4:	d978      	bls.n	800f6e8 <_strtod_l+0x8b8>
 800f5f6:	696b      	ldr	r3, [r5, #20]
 800f5f8:	b913      	cbnz	r3, 800f600 <_strtod_l+0x7d0>
 800f5fa:	692b      	ldr	r3, [r5, #16]
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	dd73      	ble.n	800f6e8 <_strtod_l+0x8b8>
 800f600:	4629      	mov	r1, r5
 800f602:	2201      	movs	r2, #1
 800f604:	4620      	mov	r0, r4
 800f606:	f002 fa17 	bl	8011a38 <__lshift>
 800f60a:	4659      	mov	r1, fp
 800f60c:	4605      	mov	r5, r0
 800f60e:	f002 fa7f 	bl	8011b10 <__mcmp>
 800f612:	2800      	cmp	r0, #0
 800f614:	dd68      	ble.n	800f6e8 <_strtod_l+0x8b8>
 800f616:	9904      	ldr	r1, [sp, #16]
 800f618:	4a54      	ldr	r2, [pc, #336]	; (800f76c <_strtod_l+0x93c>)
 800f61a:	464b      	mov	r3, r9
 800f61c:	2900      	cmp	r1, #0
 800f61e:	f000 8084 	beq.w	800f72a <_strtod_l+0x8fa>
 800f622:	ea02 0109 	and.w	r1, r2, r9
 800f626:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f62a:	dc7e      	bgt.n	800f72a <_strtod_l+0x8fa>
 800f62c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f630:	f77f aeb3 	ble.w	800f39a <_strtod_l+0x56a>
 800f634:	4b4e      	ldr	r3, [pc, #312]	; (800f770 <_strtod_l+0x940>)
 800f636:	4640      	mov	r0, r8
 800f638:	4649      	mov	r1, r9
 800f63a:	2200      	movs	r2, #0
 800f63c:	f7f0 ffdc 	bl	80005f8 <__aeabi_dmul>
 800f640:	4b4a      	ldr	r3, [pc, #296]	; (800f76c <_strtod_l+0x93c>)
 800f642:	400b      	ands	r3, r1
 800f644:	4680      	mov	r8, r0
 800f646:	4689      	mov	r9, r1
 800f648:	2b00      	cmp	r3, #0
 800f64a:	f47f ae3f 	bne.w	800f2cc <_strtod_l+0x49c>
 800f64e:	2322      	movs	r3, #34	; 0x22
 800f650:	6023      	str	r3, [r4, #0]
 800f652:	e63b      	b.n	800f2cc <_strtod_l+0x49c>
 800f654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f658:	fa02 f303 	lsl.w	r3, r2, r3
 800f65c:	ea03 0808 	and.w	r8, r3, r8
 800f660:	e6e8      	b.n	800f434 <_strtod_l+0x604>
 800f662:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f666:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f66a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f66e:	36e2      	adds	r6, #226	; 0xe2
 800f670:	fa01 f306 	lsl.w	r3, r1, r6
 800f674:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800f678:	e748      	b.n	800f50c <_strtod_l+0x6dc>
 800f67a:	2100      	movs	r1, #0
 800f67c:	2301      	movs	r3, #1
 800f67e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800f682:	e743      	b.n	800f50c <_strtod_l+0x6dc>
 800f684:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f686:	4632      	mov	r2, r6
 800f688:	4620      	mov	r0, r4
 800f68a:	f002 f9d5 	bl	8011a38 <__lshift>
 800f68e:	9016      	str	r0, [sp, #88]	; 0x58
 800f690:	2800      	cmp	r0, #0
 800f692:	f47f af6b 	bne.w	800f56c <_strtod_l+0x73c>
 800f696:	e60f      	b.n	800f2b8 <_strtod_l+0x488>
 800f698:	46ca      	mov	sl, r9
 800f69a:	d171      	bne.n	800f780 <_strtod_l+0x950>
 800f69c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f69e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f6a2:	b352      	cbz	r2, 800f6fa <_strtod_l+0x8ca>
 800f6a4:	4a33      	ldr	r2, [pc, #204]	; (800f774 <_strtod_l+0x944>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d12a      	bne.n	800f700 <_strtod_l+0x8d0>
 800f6aa:	9b04      	ldr	r3, [sp, #16]
 800f6ac:	4641      	mov	r1, r8
 800f6ae:	b1fb      	cbz	r3, 800f6f0 <_strtod_l+0x8c0>
 800f6b0:	4b2e      	ldr	r3, [pc, #184]	; (800f76c <_strtod_l+0x93c>)
 800f6b2:	ea09 0303 	and.w	r3, r9, r3
 800f6b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f6ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6be:	d81a      	bhi.n	800f6f6 <_strtod_l+0x8c6>
 800f6c0:	0d1b      	lsrs	r3, r3, #20
 800f6c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f6c6:	fa02 f303 	lsl.w	r3, r2, r3
 800f6ca:	4299      	cmp	r1, r3
 800f6cc:	d118      	bne.n	800f700 <_strtod_l+0x8d0>
 800f6ce:	4b2a      	ldr	r3, [pc, #168]	; (800f778 <_strtod_l+0x948>)
 800f6d0:	459a      	cmp	sl, r3
 800f6d2:	d102      	bne.n	800f6da <_strtod_l+0x8aa>
 800f6d4:	3101      	adds	r1, #1
 800f6d6:	f43f adef 	beq.w	800f2b8 <_strtod_l+0x488>
 800f6da:	4b24      	ldr	r3, [pc, #144]	; (800f76c <_strtod_l+0x93c>)
 800f6dc:	ea0a 0303 	and.w	r3, sl, r3
 800f6e0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f6e4:	f04f 0800 	mov.w	r8, #0
 800f6e8:	9b04      	ldr	r3, [sp, #16]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d1a2      	bne.n	800f634 <_strtod_l+0x804>
 800f6ee:	e5ed      	b.n	800f2cc <_strtod_l+0x49c>
 800f6f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6f4:	e7e9      	b.n	800f6ca <_strtod_l+0x89a>
 800f6f6:	4613      	mov	r3, r2
 800f6f8:	e7e7      	b.n	800f6ca <_strtod_l+0x89a>
 800f6fa:	ea53 0308 	orrs.w	r3, r3, r8
 800f6fe:	d08a      	beq.n	800f616 <_strtod_l+0x7e6>
 800f700:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f702:	b1e3      	cbz	r3, 800f73e <_strtod_l+0x90e>
 800f704:	ea13 0f0a 	tst.w	r3, sl
 800f708:	d0ee      	beq.n	800f6e8 <_strtod_l+0x8b8>
 800f70a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f70c:	9a04      	ldr	r2, [sp, #16]
 800f70e:	4640      	mov	r0, r8
 800f710:	4649      	mov	r1, r9
 800f712:	b1c3      	cbz	r3, 800f746 <_strtod_l+0x916>
 800f714:	f7ff fb6e 	bl	800edf4 <sulp>
 800f718:	4602      	mov	r2, r0
 800f71a:	460b      	mov	r3, r1
 800f71c:	ec51 0b18 	vmov	r0, r1, d8
 800f720:	f7f0 fdb4 	bl	800028c <__adddf3>
 800f724:	4680      	mov	r8, r0
 800f726:	4689      	mov	r9, r1
 800f728:	e7de      	b.n	800f6e8 <_strtod_l+0x8b8>
 800f72a:	4013      	ands	r3, r2
 800f72c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f730:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f734:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f738:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f73c:	e7d4      	b.n	800f6e8 <_strtod_l+0x8b8>
 800f73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f740:	ea13 0f08 	tst.w	r3, r8
 800f744:	e7e0      	b.n	800f708 <_strtod_l+0x8d8>
 800f746:	f7ff fb55 	bl	800edf4 <sulp>
 800f74a:	4602      	mov	r2, r0
 800f74c:	460b      	mov	r3, r1
 800f74e:	ec51 0b18 	vmov	r0, r1, d8
 800f752:	f7f0 fd99 	bl	8000288 <__aeabi_dsub>
 800f756:	2200      	movs	r2, #0
 800f758:	2300      	movs	r3, #0
 800f75a:	4680      	mov	r8, r0
 800f75c:	4689      	mov	r9, r1
 800f75e:	f7f1 f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 800f762:	2800      	cmp	r0, #0
 800f764:	d0c0      	beq.n	800f6e8 <_strtod_l+0x8b8>
 800f766:	e618      	b.n	800f39a <_strtod_l+0x56a>
 800f768:	fffffc02 	.word	0xfffffc02
 800f76c:	7ff00000 	.word	0x7ff00000
 800f770:	39500000 	.word	0x39500000
 800f774:	000fffff 	.word	0x000fffff
 800f778:	7fefffff 	.word	0x7fefffff
 800f77c:	08015038 	.word	0x08015038
 800f780:	4659      	mov	r1, fp
 800f782:	4628      	mov	r0, r5
 800f784:	f002 fb34 	bl	8011df0 <__ratio>
 800f788:	ec57 6b10 	vmov	r6, r7, d0
 800f78c:	ee10 0a10 	vmov	r0, s0
 800f790:	2200      	movs	r2, #0
 800f792:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f796:	4639      	mov	r1, r7
 800f798:	f7f1 f9aa 	bl	8000af0 <__aeabi_dcmple>
 800f79c:	2800      	cmp	r0, #0
 800f79e:	d071      	beq.n	800f884 <_strtod_l+0xa54>
 800f7a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d17c      	bne.n	800f8a0 <_strtod_l+0xa70>
 800f7a6:	f1b8 0f00 	cmp.w	r8, #0
 800f7aa:	d15a      	bne.n	800f862 <_strtod_l+0xa32>
 800f7ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d15d      	bne.n	800f870 <_strtod_l+0xa40>
 800f7b4:	4b90      	ldr	r3, [pc, #576]	; (800f9f8 <_strtod_l+0xbc8>)
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	4639      	mov	r1, r7
 800f7bc:	f7f1 f98e 	bl	8000adc <__aeabi_dcmplt>
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	d15c      	bne.n	800f87e <_strtod_l+0xa4e>
 800f7c4:	4630      	mov	r0, r6
 800f7c6:	4639      	mov	r1, r7
 800f7c8:	4b8c      	ldr	r3, [pc, #560]	; (800f9fc <_strtod_l+0xbcc>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f7f0 ff14 	bl	80005f8 <__aeabi_dmul>
 800f7d0:	4606      	mov	r6, r0
 800f7d2:	460f      	mov	r7, r1
 800f7d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f7d8:	9606      	str	r6, [sp, #24]
 800f7da:	9307      	str	r3, [sp, #28]
 800f7dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f7e4:	4b86      	ldr	r3, [pc, #536]	; (800fa00 <_strtod_l+0xbd0>)
 800f7e6:	ea0a 0303 	and.w	r3, sl, r3
 800f7ea:	930d      	str	r3, [sp, #52]	; 0x34
 800f7ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7ee:	4b85      	ldr	r3, [pc, #532]	; (800fa04 <_strtod_l+0xbd4>)
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	f040 8090 	bne.w	800f916 <_strtod_l+0xae6>
 800f7f6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800f7fa:	ec49 8b10 	vmov	d0, r8, r9
 800f7fe:	f002 fa2d 	bl	8011c5c <__ulp>
 800f802:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f806:	ec51 0b10 	vmov	r0, r1, d0
 800f80a:	f7f0 fef5 	bl	80005f8 <__aeabi_dmul>
 800f80e:	4642      	mov	r2, r8
 800f810:	464b      	mov	r3, r9
 800f812:	f7f0 fd3b 	bl	800028c <__adddf3>
 800f816:	460b      	mov	r3, r1
 800f818:	4979      	ldr	r1, [pc, #484]	; (800fa00 <_strtod_l+0xbd0>)
 800f81a:	4a7b      	ldr	r2, [pc, #492]	; (800fa08 <_strtod_l+0xbd8>)
 800f81c:	4019      	ands	r1, r3
 800f81e:	4291      	cmp	r1, r2
 800f820:	4680      	mov	r8, r0
 800f822:	d944      	bls.n	800f8ae <_strtod_l+0xa7e>
 800f824:	ee18 2a90 	vmov	r2, s17
 800f828:	4b78      	ldr	r3, [pc, #480]	; (800fa0c <_strtod_l+0xbdc>)
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d104      	bne.n	800f838 <_strtod_l+0xa08>
 800f82e:	ee18 3a10 	vmov	r3, s16
 800f832:	3301      	adds	r3, #1
 800f834:	f43f ad40 	beq.w	800f2b8 <_strtod_l+0x488>
 800f838:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800fa0c <_strtod_l+0xbdc>
 800f83c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800f840:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f842:	4620      	mov	r0, r4
 800f844:	f001 fede 	bl	8011604 <_Bfree>
 800f848:	9905      	ldr	r1, [sp, #20]
 800f84a:	4620      	mov	r0, r4
 800f84c:	f001 feda 	bl	8011604 <_Bfree>
 800f850:	4659      	mov	r1, fp
 800f852:	4620      	mov	r0, r4
 800f854:	f001 fed6 	bl	8011604 <_Bfree>
 800f858:	4629      	mov	r1, r5
 800f85a:	4620      	mov	r0, r4
 800f85c:	f001 fed2 	bl	8011604 <_Bfree>
 800f860:	e609      	b.n	800f476 <_strtod_l+0x646>
 800f862:	f1b8 0f01 	cmp.w	r8, #1
 800f866:	d103      	bne.n	800f870 <_strtod_l+0xa40>
 800f868:	f1b9 0f00 	cmp.w	r9, #0
 800f86c:	f43f ad95 	beq.w	800f39a <_strtod_l+0x56a>
 800f870:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800f9c8 <_strtod_l+0xb98>
 800f874:	4f60      	ldr	r7, [pc, #384]	; (800f9f8 <_strtod_l+0xbc8>)
 800f876:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f87a:	2600      	movs	r6, #0
 800f87c:	e7ae      	b.n	800f7dc <_strtod_l+0x9ac>
 800f87e:	4f5f      	ldr	r7, [pc, #380]	; (800f9fc <_strtod_l+0xbcc>)
 800f880:	2600      	movs	r6, #0
 800f882:	e7a7      	b.n	800f7d4 <_strtod_l+0x9a4>
 800f884:	4b5d      	ldr	r3, [pc, #372]	; (800f9fc <_strtod_l+0xbcc>)
 800f886:	4630      	mov	r0, r6
 800f888:	4639      	mov	r1, r7
 800f88a:	2200      	movs	r2, #0
 800f88c:	f7f0 feb4 	bl	80005f8 <__aeabi_dmul>
 800f890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f892:	4606      	mov	r6, r0
 800f894:	460f      	mov	r7, r1
 800f896:	2b00      	cmp	r3, #0
 800f898:	d09c      	beq.n	800f7d4 <_strtod_l+0x9a4>
 800f89a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f89e:	e79d      	b.n	800f7dc <_strtod_l+0x9ac>
 800f8a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800f9d0 <_strtod_l+0xba0>
 800f8a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f8a8:	ec57 6b17 	vmov	r6, r7, d7
 800f8ac:	e796      	b.n	800f7dc <_strtod_l+0x9ac>
 800f8ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f8b2:	9b04      	ldr	r3, [sp, #16]
 800f8b4:	46ca      	mov	sl, r9
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d1c2      	bne.n	800f840 <_strtod_l+0xa10>
 800f8ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f8be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f8c0:	0d1b      	lsrs	r3, r3, #20
 800f8c2:	051b      	lsls	r3, r3, #20
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d1bb      	bne.n	800f840 <_strtod_l+0xa10>
 800f8c8:	4630      	mov	r0, r6
 800f8ca:	4639      	mov	r1, r7
 800f8cc:	f7f1 f9f4 	bl	8000cb8 <__aeabi_d2lz>
 800f8d0:	f7f0 fe64 	bl	800059c <__aeabi_l2d>
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	4630      	mov	r0, r6
 800f8da:	4639      	mov	r1, r7
 800f8dc:	f7f0 fcd4 	bl	8000288 <__aeabi_dsub>
 800f8e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f8e6:	ea43 0308 	orr.w	r3, r3, r8
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	4606      	mov	r6, r0
 800f8ee:	460f      	mov	r7, r1
 800f8f0:	d054      	beq.n	800f99c <_strtod_l+0xb6c>
 800f8f2:	a339      	add	r3, pc, #228	; (adr r3, 800f9d8 <_strtod_l+0xba8>)
 800f8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f8:	f7f1 f8f0 	bl	8000adc <__aeabi_dcmplt>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	f47f ace5 	bne.w	800f2cc <_strtod_l+0x49c>
 800f902:	a337      	add	r3, pc, #220	; (adr r3, 800f9e0 <_strtod_l+0xbb0>)
 800f904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f908:	4630      	mov	r0, r6
 800f90a:	4639      	mov	r1, r7
 800f90c:	f7f1 f904 	bl	8000b18 <__aeabi_dcmpgt>
 800f910:	2800      	cmp	r0, #0
 800f912:	d095      	beq.n	800f840 <_strtod_l+0xa10>
 800f914:	e4da      	b.n	800f2cc <_strtod_l+0x49c>
 800f916:	9b04      	ldr	r3, [sp, #16]
 800f918:	b333      	cbz	r3, 800f968 <_strtod_l+0xb38>
 800f91a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f91c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f920:	d822      	bhi.n	800f968 <_strtod_l+0xb38>
 800f922:	a331      	add	r3, pc, #196	; (adr r3, 800f9e8 <_strtod_l+0xbb8>)
 800f924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f928:	4630      	mov	r0, r6
 800f92a:	4639      	mov	r1, r7
 800f92c:	f7f1 f8e0 	bl	8000af0 <__aeabi_dcmple>
 800f930:	b1a0      	cbz	r0, 800f95c <_strtod_l+0xb2c>
 800f932:	4639      	mov	r1, r7
 800f934:	4630      	mov	r0, r6
 800f936:	f7f1 f937 	bl	8000ba8 <__aeabi_d2uiz>
 800f93a:	2801      	cmp	r0, #1
 800f93c:	bf38      	it	cc
 800f93e:	2001      	movcc	r0, #1
 800f940:	f7f0 fde0 	bl	8000504 <__aeabi_ui2d>
 800f944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f946:	4606      	mov	r6, r0
 800f948:	460f      	mov	r7, r1
 800f94a:	bb23      	cbnz	r3, 800f996 <_strtod_l+0xb66>
 800f94c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f950:	9010      	str	r0, [sp, #64]	; 0x40
 800f952:	9311      	str	r3, [sp, #68]	; 0x44
 800f954:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f958:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f95c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f95e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f960:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f964:	1a9b      	subs	r3, r3, r2
 800f966:	930f      	str	r3, [sp, #60]	; 0x3c
 800f968:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f96c:	eeb0 0a48 	vmov.f32	s0, s16
 800f970:	eef0 0a68 	vmov.f32	s1, s17
 800f974:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f978:	f002 f970 	bl	8011c5c <__ulp>
 800f97c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f980:	ec53 2b10 	vmov	r2, r3, d0
 800f984:	f7f0 fe38 	bl	80005f8 <__aeabi_dmul>
 800f988:	ec53 2b18 	vmov	r2, r3, d8
 800f98c:	f7f0 fc7e 	bl	800028c <__adddf3>
 800f990:	4680      	mov	r8, r0
 800f992:	4689      	mov	r9, r1
 800f994:	e78d      	b.n	800f8b2 <_strtod_l+0xa82>
 800f996:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f99a:	e7db      	b.n	800f954 <_strtod_l+0xb24>
 800f99c:	a314      	add	r3, pc, #80	; (adr r3, 800f9f0 <_strtod_l+0xbc0>)
 800f99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a2:	f7f1 f89b 	bl	8000adc <__aeabi_dcmplt>
 800f9a6:	e7b3      	b.n	800f910 <_strtod_l+0xae0>
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	930a      	str	r3, [sp, #40]	; 0x28
 800f9ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f9ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9b0:	6013      	str	r3, [r2, #0]
 800f9b2:	f7ff ba7c 	b.w	800eeae <_strtod_l+0x7e>
 800f9b6:	2a65      	cmp	r2, #101	; 0x65
 800f9b8:	f43f ab75 	beq.w	800f0a6 <_strtod_l+0x276>
 800f9bc:	2a45      	cmp	r2, #69	; 0x45
 800f9be:	f43f ab72 	beq.w	800f0a6 <_strtod_l+0x276>
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	f7ff bbaa 	b.w	800f11c <_strtod_l+0x2ec>
 800f9c8:	00000000 	.word	0x00000000
 800f9cc:	bff00000 	.word	0xbff00000
 800f9d0:	00000000 	.word	0x00000000
 800f9d4:	3ff00000 	.word	0x3ff00000
 800f9d8:	94a03595 	.word	0x94a03595
 800f9dc:	3fdfffff 	.word	0x3fdfffff
 800f9e0:	35afe535 	.word	0x35afe535
 800f9e4:	3fe00000 	.word	0x3fe00000
 800f9e8:	ffc00000 	.word	0xffc00000
 800f9ec:	41dfffff 	.word	0x41dfffff
 800f9f0:	94a03595 	.word	0x94a03595
 800f9f4:	3fcfffff 	.word	0x3fcfffff
 800f9f8:	3ff00000 	.word	0x3ff00000
 800f9fc:	3fe00000 	.word	0x3fe00000
 800fa00:	7ff00000 	.word	0x7ff00000
 800fa04:	7fe00000 	.word	0x7fe00000
 800fa08:	7c9fffff 	.word	0x7c9fffff
 800fa0c:	7fefffff 	.word	0x7fefffff

0800fa10 <_strtod_r>:
 800fa10:	4b01      	ldr	r3, [pc, #4]	; (800fa18 <_strtod_r+0x8>)
 800fa12:	f7ff ba0d 	b.w	800ee30 <_strtod_l>
 800fa16:	bf00      	nop
 800fa18:	20000034 	.word	0x20000034

0800fa1c <_strtol_l.constprop.0>:
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa22:	d001      	beq.n	800fa28 <_strtol_l.constprop.0+0xc>
 800fa24:	2b24      	cmp	r3, #36	; 0x24
 800fa26:	d906      	bls.n	800fa36 <_strtol_l.constprop.0+0x1a>
 800fa28:	f000 f8c2 	bl	800fbb0 <__errno>
 800fa2c:	2316      	movs	r3, #22
 800fa2e:	6003      	str	r3, [r0, #0]
 800fa30:	2000      	movs	r0, #0
 800fa32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fb1c <_strtol_l.constprop.0+0x100>
 800fa3a:	460d      	mov	r5, r1
 800fa3c:	462e      	mov	r6, r5
 800fa3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa42:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800fa46:	f017 0708 	ands.w	r7, r7, #8
 800fa4a:	d1f7      	bne.n	800fa3c <_strtol_l.constprop.0+0x20>
 800fa4c:	2c2d      	cmp	r4, #45	; 0x2d
 800fa4e:	d132      	bne.n	800fab6 <_strtol_l.constprop.0+0x9a>
 800fa50:	782c      	ldrb	r4, [r5, #0]
 800fa52:	2701      	movs	r7, #1
 800fa54:	1cb5      	adds	r5, r6, #2
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d05b      	beq.n	800fb12 <_strtol_l.constprop.0+0xf6>
 800fa5a:	2b10      	cmp	r3, #16
 800fa5c:	d109      	bne.n	800fa72 <_strtol_l.constprop.0+0x56>
 800fa5e:	2c30      	cmp	r4, #48	; 0x30
 800fa60:	d107      	bne.n	800fa72 <_strtol_l.constprop.0+0x56>
 800fa62:	782c      	ldrb	r4, [r5, #0]
 800fa64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fa68:	2c58      	cmp	r4, #88	; 0x58
 800fa6a:	d14d      	bne.n	800fb08 <_strtol_l.constprop.0+0xec>
 800fa6c:	786c      	ldrb	r4, [r5, #1]
 800fa6e:	2310      	movs	r3, #16
 800fa70:	3502      	adds	r5, #2
 800fa72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fa76:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800fa7a:	f04f 0e00 	mov.w	lr, #0
 800fa7e:	fbb8 f9f3 	udiv	r9, r8, r3
 800fa82:	4676      	mov	r6, lr
 800fa84:	fb03 8a19 	mls	sl, r3, r9, r8
 800fa88:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fa8c:	f1bc 0f09 	cmp.w	ip, #9
 800fa90:	d816      	bhi.n	800fac0 <_strtol_l.constprop.0+0xa4>
 800fa92:	4664      	mov	r4, ip
 800fa94:	42a3      	cmp	r3, r4
 800fa96:	dd24      	ble.n	800fae2 <_strtol_l.constprop.0+0xc6>
 800fa98:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800fa9c:	d008      	beq.n	800fab0 <_strtol_l.constprop.0+0x94>
 800fa9e:	45b1      	cmp	r9, r6
 800faa0:	d31c      	bcc.n	800fadc <_strtol_l.constprop.0+0xc0>
 800faa2:	d101      	bne.n	800faa8 <_strtol_l.constprop.0+0x8c>
 800faa4:	45a2      	cmp	sl, r4
 800faa6:	db19      	blt.n	800fadc <_strtol_l.constprop.0+0xc0>
 800faa8:	fb06 4603 	mla	r6, r6, r3, r4
 800faac:	f04f 0e01 	mov.w	lr, #1
 800fab0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fab4:	e7e8      	b.n	800fa88 <_strtol_l.constprop.0+0x6c>
 800fab6:	2c2b      	cmp	r4, #43	; 0x2b
 800fab8:	bf04      	itt	eq
 800faba:	782c      	ldrbeq	r4, [r5, #0]
 800fabc:	1cb5      	addeq	r5, r6, #2
 800fabe:	e7ca      	b.n	800fa56 <_strtol_l.constprop.0+0x3a>
 800fac0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fac4:	f1bc 0f19 	cmp.w	ip, #25
 800fac8:	d801      	bhi.n	800face <_strtol_l.constprop.0+0xb2>
 800faca:	3c37      	subs	r4, #55	; 0x37
 800facc:	e7e2      	b.n	800fa94 <_strtol_l.constprop.0+0x78>
 800face:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fad2:	f1bc 0f19 	cmp.w	ip, #25
 800fad6:	d804      	bhi.n	800fae2 <_strtol_l.constprop.0+0xc6>
 800fad8:	3c57      	subs	r4, #87	; 0x57
 800fada:	e7db      	b.n	800fa94 <_strtol_l.constprop.0+0x78>
 800fadc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800fae0:	e7e6      	b.n	800fab0 <_strtol_l.constprop.0+0x94>
 800fae2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800fae6:	d105      	bne.n	800faf4 <_strtol_l.constprop.0+0xd8>
 800fae8:	2322      	movs	r3, #34	; 0x22
 800faea:	6003      	str	r3, [r0, #0]
 800faec:	4646      	mov	r6, r8
 800faee:	b942      	cbnz	r2, 800fb02 <_strtol_l.constprop.0+0xe6>
 800faf0:	4630      	mov	r0, r6
 800faf2:	e79e      	b.n	800fa32 <_strtol_l.constprop.0+0x16>
 800faf4:	b107      	cbz	r7, 800faf8 <_strtol_l.constprop.0+0xdc>
 800faf6:	4276      	negs	r6, r6
 800faf8:	2a00      	cmp	r2, #0
 800fafa:	d0f9      	beq.n	800faf0 <_strtol_l.constprop.0+0xd4>
 800fafc:	f1be 0f00 	cmp.w	lr, #0
 800fb00:	d000      	beq.n	800fb04 <_strtol_l.constprop.0+0xe8>
 800fb02:	1e69      	subs	r1, r5, #1
 800fb04:	6011      	str	r1, [r2, #0]
 800fb06:	e7f3      	b.n	800faf0 <_strtol_l.constprop.0+0xd4>
 800fb08:	2430      	movs	r4, #48	; 0x30
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1b1      	bne.n	800fa72 <_strtol_l.constprop.0+0x56>
 800fb0e:	2308      	movs	r3, #8
 800fb10:	e7af      	b.n	800fa72 <_strtol_l.constprop.0+0x56>
 800fb12:	2c30      	cmp	r4, #48	; 0x30
 800fb14:	d0a5      	beq.n	800fa62 <_strtol_l.constprop.0+0x46>
 800fb16:	230a      	movs	r3, #10
 800fb18:	e7ab      	b.n	800fa72 <_strtol_l.constprop.0+0x56>
 800fb1a:	bf00      	nop
 800fb1c:	08015069 	.word	0x08015069

0800fb20 <_strtol_r>:
 800fb20:	f7ff bf7c 	b.w	800fa1c <_strtol_l.constprop.0>

0800fb24 <strtol>:
 800fb24:	4613      	mov	r3, r2
 800fb26:	460a      	mov	r2, r1
 800fb28:	4601      	mov	r1, r0
 800fb2a:	4802      	ldr	r0, [pc, #8]	; (800fb34 <strtol+0x10>)
 800fb2c:	6800      	ldr	r0, [r0, #0]
 800fb2e:	f7ff bf75 	b.w	800fa1c <_strtol_l.constprop.0>
 800fb32:	bf00      	nop
 800fb34:	200001ec 	.word	0x200001ec

0800fb38 <_fwalk_sglue>:
 800fb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb3c:	4607      	mov	r7, r0
 800fb3e:	4688      	mov	r8, r1
 800fb40:	4614      	mov	r4, r2
 800fb42:	2600      	movs	r6, #0
 800fb44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb48:	f1b9 0901 	subs.w	r9, r9, #1
 800fb4c:	d505      	bpl.n	800fb5a <_fwalk_sglue+0x22>
 800fb4e:	6824      	ldr	r4, [r4, #0]
 800fb50:	2c00      	cmp	r4, #0
 800fb52:	d1f7      	bne.n	800fb44 <_fwalk_sglue+0xc>
 800fb54:	4630      	mov	r0, r6
 800fb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb5a:	89ab      	ldrh	r3, [r5, #12]
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d907      	bls.n	800fb70 <_fwalk_sglue+0x38>
 800fb60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb64:	3301      	adds	r3, #1
 800fb66:	d003      	beq.n	800fb70 <_fwalk_sglue+0x38>
 800fb68:	4629      	mov	r1, r5
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	47c0      	blx	r8
 800fb6e:	4306      	orrs	r6, r0
 800fb70:	3568      	adds	r5, #104	; 0x68
 800fb72:	e7e9      	b.n	800fb48 <_fwalk_sglue+0x10>

0800fb74 <strncmp>:
 800fb74:	b510      	push	{r4, lr}
 800fb76:	b16a      	cbz	r2, 800fb94 <strncmp+0x20>
 800fb78:	3901      	subs	r1, #1
 800fb7a:	1884      	adds	r4, r0, r2
 800fb7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d103      	bne.n	800fb90 <strncmp+0x1c>
 800fb88:	42a0      	cmp	r0, r4
 800fb8a:	d001      	beq.n	800fb90 <strncmp+0x1c>
 800fb8c:	2a00      	cmp	r2, #0
 800fb8e:	d1f5      	bne.n	800fb7c <strncmp+0x8>
 800fb90:	1ad0      	subs	r0, r2, r3
 800fb92:	bd10      	pop	{r4, pc}
 800fb94:	4610      	mov	r0, r2
 800fb96:	e7fc      	b.n	800fb92 <strncmp+0x1e>

0800fb98 <memset>:
 800fb98:	4402      	add	r2, r0
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d100      	bne.n	800fba2 <memset+0xa>
 800fba0:	4770      	bx	lr
 800fba2:	f803 1b01 	strb.w	r1, [r3], #1
 800fba6:	e7f9      	b.n	800fb9c <memset+0x4>

0800fba8 <_localeconv_r>:
 800fba8:	4800      	ldr	r0, [pc, #0]	; (800fbac <_localeconv_r+0x4>)
 800fbaa:	4770      	bx	lr
 800fbac:	20000124 	.word	0x20000124

0800fbb0 <__errno>:
 800fbb0:	4b01      	ldr	r3, [pc, #4]	; (800fbb8 <__errno+0x8>)
 800fbb2:	6818      	ldr	r0, [r3, #0]
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop
 800fbb8:	200001ec 	.word	0x200001ec

0800fbbc <__libc_init_array>:
 800fbbc:	b570      	push	{r4, r5, r6, lr}
 800fbbe:	4d0d      	ldr	r5, [pc, #52]	; (800fbf4 <__libc_init_array+0x38>)
 800fbc0:	4c0d      	ldr	r4, [pc, #52]	; (800fbf8 <__libc_init_array+0x3c>)
 800fbc2:	1b64      	subs	r4, r4, r5
 800fbc4:	10a4      	asrs	r4, r4, #2
 800fbc6:	2600      	movs	r6, #0
 800fbc8:	42a6      	cmp	r6, r4
 800fbca:	d109      	bne.n	800fbe0 <__libc_init_array+0x24>
 800fbcc:	4d0b      	ldr	r5, [pc, #44]	; (800fbfc <__libc_init_array+0x40>)
 800fbce:	4c0c      	ldr	r4, [pc, #48]	; (800fc00 <__libc_init_array+0x44>)
 800fbd0:	f004 fb3e 	bl	8014250 <_init>
 800fbd4:	1b64      	subs	r4, r4, r5
 800fbd6:	10a4      	asrs	r4, r4, #2
 800fbd8:	2600      	movs	r6, #0
 800fbda:	42a6      	cmp	r6, r4
 800fbdc:	d105      	bne.n	800fbea <__libc_init_array+0x2e>
 800fbde:	bd70      	pop	{r4, r5, r6, pc}
 800fbe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbe4:	4798      	blx	r3
 800fbe6:	3601      	adds	r6, #1
 800fbe8:	e7ee      	b.n	800fbc8 <__libc_init_array+0xc>
 800fbea:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbee:	4798      	blx	r3
 800fbf0:	3601      	adds	r6, #1
 800fbf2:	e7f2      	b.n	800fbda <__libc_init_array+0x1e>
 800fbf4:	08015680 	.word	0x08015680
 800fbf8:	08015680 	.word	0x08015680
 800fbfc:	08015680 	.word	0x08015680
 800fc00:	08015684 	.word	0x08015684

0800fc04 <__retarget_lock_acquire_recursive>:
 800fc04:	4770      	bx	lr

0800fc06 <__retarget_lock_release_recursive>:
 800fc06:	4770      	bx	lr

0800fc08 <memcpy>:
 800fc08:	440a      	add	r2, r1
 800fc0a:	4291      	cmp	r1, r2
 800fc0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fc10:	d100      	bne.n	800fc14 <memcpy+0xc>
 800fc12:	4770      	bx	lr
 800fc14:	b510      	push	{r4, lr}
 800fc16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc1e:	4291      	cmp	r1, r2
 800fc20:	d1f9      	bne.n	800fc16 <memcpy+0xe>
 800fc22:	bd10      	pop	{r4, pc}
 800fc24:	0000      	movs	r0, r0
	...

0800fc28 <nan>:
 800fc28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fc30 <nan+0x8>
 800fc2c:	4770      	bx	lr
 800fc2e:	bf00      	nop
 800fc30:	00000000 	.word	0x00000000
 800fc34:	7ff80000 	.word	0x7ff80000

0800fc38 <nanf>:
 800fc38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fc40 <nanf+0x8>
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	7fc00000 	.word	0x7fc00000

0800fc44 <quorem>:
 800fc44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc48:	6903      	ldr	r3, [r0, #16]
 800fc4a:	690c      	ldr	r4, [r1, #16]
 800fc4c:	42a3      	cmp	r3, r4
 800fc4e:	4607      	mov	r7, r0
 800fc50:	db7e      	blt.n	800fd50 <quorem+0x10c>
 800fc52:	3c01      	subs	r4, #1
 800fc54:	f101 0814 	add.w	r8, r1, #20
 800fc58:	f100 0514 	add.w	r5, r0, #20
 800fc5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc60:	9301      	str	r3, [sp, #4]
 800fc62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fc72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc76:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc7a:	d331      	bcc.n	800fce0 <quorem+0x9c>
 800fc7c:	f04f 0e00 	mov.w	lr, #0
 800fc80:	4640      	mov	r0, r8
 800fc82:	46ac      	mov	ip, r5
 800fc84:	46f2      	mov	sl, lr
 800fc86:	f850 2b04 	ldr.w	r2, [r0], #4
 800fc8a:	b293      	uxth	r3, r2
 800fc8c:	fb06 e303 	mla	r3, r6, r3, lr
 800fc90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fc94:	0c1a      	lsrs	r2, r3, #16
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	ebaa 0303 	sub.w	r3, sl, r3
 800fc9c:	f8dc a000 	ldr.w	sl, [ip]
 800fca0:	fa13 f38a 	uxtah	r3, r3, sl
 800fca4:	fb06 220e 	mla	r2, r6, lr, r2
 800fca8:	9300      	str	r3, [sp, #0]
 800fcaa:	9b00      	ldr	r3, [sp, #0]
 800fcac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fcb0:	b292      	uxth	r2, r2
 800fcb2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fcb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fcba:	f8bd 3000 	ldrh.w	r3, [sp]
 800fcbe:	4581      	cmp	r9, r0
 800fcc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcc4:	f84c 3b04 	str.w	r3, [ip], #4
 800fcc8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fccc:	d2db      	bcs.n	800fc86 <quorem+0x42>
 800fcce:	f855 300b 	ldr.w	r3, [r5, fp]
 800fcd2:	b92b      	cbnz	r3, 800fce0 <quorem+0x9c>
 800fcd4:	9b01      	ldr	r3, [sp, #4]
 800fcd6:	3b04      	subs	r3, #4
 800fcd8:	429d      	cmp	r5, r3
 800fcda:	461a      	mov	r2, r3
 800fcdc:	d32c      	bcc.n	800fd38 <quorem+0xf4>
 800fcde:	613c      	str	r4, [r7, #16]
 800fce0:	4638      	mov	r0, r7
 800fce2:	f001 ff15 	bl	8011b10 <__mcmp>
 800fce6:	2800      	cmp	r0, #0
 800fce8:	db22      	blt.n	800fd30 <quorem+0xec>
 800fcea:	3601      	adds	r6, #1
 800fcec:	4629      	mov	r1, r5
 800fcee:	2000      	movs	r0, #0
 800fcf0:	f858 2b04 	ldr.w	r2, [r8], #4
 800fcf4:	f8d1 c000 	ldr.w	ip, [r1]
 800fcf8:	b293      	uxth	r3, r2
 800fcfa:	1ac3      	subs	r3, r0, r3
 800fcfc:	0c12      	lsrs	r2, r2, #16
 800fcfe:	fa13 f38c 	uxtah	r3, r3, ip
 800fd02:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fd06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd10:	45c1      	cmp	r9, r8
 800fd12:	f841 3b04 	str.w	r3, [r1], #4
 800fd16:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fd1a:	d2e9      	bcs.n	800fcf0 <quorem+0xac>
 800fd1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd24:	b922      	cbnz	r2, 800fd30 <quorem+0xec>
 800fd26:	3b04      	subs	r3, #4
 800fd28:	429d      	cmp	r5, r3
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	d30a      	bcc.n	800fd44 <quorem+0x100>
 800fd2e:	613c      	str	r4, [r7, #16]
 800fd30:	4630      	mov	r0, r6
 800fd32:	b003      	add	sp, #12
 800fd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd38:	6812      	ldr	r2, [r2, #0]
 800fd3a:	3b04      	subs	r3, #4
 800fd3c:	2a00      	cmp	r2, #0
 800fd3e:	d1ce      	bne.n	800fcde <quorem+0x9a>
 800fd40:	3c01      	subs	r4, #1
 800fd42:	e7c9      	b.n	800fcd8 <quorem+0x94>
 800fd44:	6812      	ldr	r2, [r2, #0]
 800fd46:	3b04      	subs	r3, #4
 800fd48:	2a00      	cmp	r2, #0
 800fd4a:	d1f0      	bne.n	800fd2e <quorem+0xea>
 800fd4c:	3c01      	subs	r4, #1
 800fd4e:	e7eb      	b.n	800fd28 <quorem+0xe4>
 800fd50:	2000      	movs	r0, #0
 800fd52:	e7ee      	b.n	800fd32 <quorem+0xee>
 800fd54:	0000      	movs	r0, r0
	...

0800fd58 <_dtoa_r>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	ed2d 8b04 	vpush	{d8-d9}
 800fd60:	69c5      	ldr	r5, [r0, #28]
 800fd62:	b093      	sub	sp, #76	; 0x4c
 800fd64:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fd68:	ec57 6b10 	vmov	r6, r7, d0
 800fd6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fd70:	9107      	str	r1, [sp, #28]
 800fd72:	4604      	mov	r4, r0
 800fd74:	920a      	str	r2, [sp, #40]	; 0x28
 800fd76:	930d      	str	r3, [sp, #52]	; 0x34
 800fd78:	b975      	cbnz	r5, 800fd98 <_dtoa_r+0x40>
 800fd7a:	2010      	movs	r0, #16
 800fd7c:	f001 fa8e 	bl	801129c <malloc>
 800fd80:	4602      	mov	r2, r0
 800fd82:	61e0      	str	r0, [r4, #28]
 800fd84:	b920      	cbnz	r0, 800fd90 <_dtoa_r+0x38>
 800fd86:	4bae      	ldr	r3, [pc, #696]	; (8010040 <_dtoa_r+0x2e8>)
 800fd88:	21ef      	movs	r1, #239	; 0xef
 800fd8a:	48ae      	ldr	r0, [pc, #696]	; (8010044 <_dtoa_r+0x2ec>)
 800fd8c:	f002 f996 	bl	80120bc <__assert_func>
 800fd90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fd94:	6005      	str	r5, [r0, #0]
 800fd96:	60c5      	str	r5, [r0, #12]
 800fd98:	69e3      	ldr	r3, [r4, #28]
 800fd9a:	6819      	ldr	r1, [r3, #0]
 800fd9c:	b151      	cbz	r1, 800fdb4 <_dtoa_r+0x5c>
 800fd9e:	685a      	ldr	r2, [r3, #4]
 800fda0:	604a      	str	r2, [r1, #4]
 800fda2:	2301      	movs	r3, #1
 800fda4:	4093      	lsls	r3, r2
 800fda6:	608b      	str	r3, [r1, #8]
 800fda8:	4620      	mov	r0, r4
 800fdaa:	f001 fc2b 	bl	8011604 <_Bfree>
 800fdae:	69e3      	ldr	r3, [r4, #28]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	601a      	str	r2, [r3, #0]
 800fdb4:	1e3b      	subs	r3, r7, #0
 800fdb6:	bfbb      	ittet	lt
 800fdb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fdbc:	9303      	strlt	r3, [sp, #12]
 800fdbe:	2300      	movge	r3, #0
 800fdc0:	2201      	movlt	r2, #1
 800fdc2:	bfac      	ite	ge
 800fdc4:	f8c8 3000 	strge.w	r3, [r8]
 800fdc8:	f8c8 2000 	strlt.w	r2, [r8]
 800fdcc:	4b9e      	ldr	r3, [pc, #632]	; (8010048 <_dtoa_r+0x2f0>)
 800fdce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fdd2:	ea33 0308 	bics.w	r3, r3, r8
 800fdd6:	d11b      	bne.n	800fe10 <_dtoa_r+0xb8>
 800fdd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fdda:	f242 730f 	movw	r3, #9999	; 0x270f
 800fdde:	6013      	str	r3, [r2, #0]
 800fde0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fde4:	4333      	orrs	r3, r6
 800fde6:	f000 8593 	beq.w	8010910 <_dtoa_r+0xbb8>
 800fdea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdec:	b963      	cbnz	r3, 800fe08 <_dtoa_r+0xb0>
 800fdee:	4b97      	ldr	r3, [pc, #604]	; (801004c <_dtoa_r+0x2f4>)
 800fdf0:	e027      	b.n	800fe42 <_dtoa_r+0xea>
 800fdf2:	4b97      	ldr	r3, [pc, #604]	; (8010050 <_dtoa_r+0x2f8>)
 800fdf4:	9300      	str	r3, [sp, #0]
 800fdf6:	3308      	adds	r3, #8
 800fdf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fdfa:	6013      	str	r3, [r2, #0]
 800fdfc:	9800      	ldr	r0, [sp, #0]
 800fdfe:	b013      	add	sp, #76	; 0x4c
 800fe00:	ecbd 8b04 	vpop	{d8-d9}
 800fe04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe08:	4b90      	ldr	r3, [pc, #576]	; (801004c <_dtoa_r+0x2f4>)
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	3303      	adds	r3, #3
 800fe0e:	e7f3      	b.n	800fdf8 <_dtoa_r+0xa0>
 800fe10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe14:	2200      	movs	r2, #0
 800fe16:	ec51 0b17 	vmov	r0, r1, d7
 800fe1a:	eeb0 8a47 	vmov.f32	s16, s14
 800fe1e:	eef0 8a67 	vmov.f32	s17, s15
 800fe22:	2300      	movs	r3, #0
 800fe24:	f7f0 fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe28:	4681      	mov	r9, r0
 800fe2a:	b160      	cbz	r0, 800fe46 <_dtoa_r+0xee>
 800fe2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe2e:	2301      	movs	r3, #1
 800fe30:	6013      	str	r3, [r2, #0]
 800fe32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f000 8568 	beq.w	801090a <_dtoa_r+0xbb2>
 800fe3a:	4b86      	ldr	r3, [pc, #536]	; (8010054 <_dtoa_r+0x2fc>)
 800fe3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fe3e:	6013      	str	r3, [r2, #0]
 800fe40:	3b01      	subs	r3, #1
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	e7da      	b.n	800fdfc <_dtoa_r+0xa4>
 800fe46:	aa10      	add	r2, sp, #64	; 0x40
 800fe48:	a911      	add	r1, sp, #68	; 0x44
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	eeb0 0a48 	vmov.f32	s0, s16
 800fe50:	eef0 0a68 	vmov.f32	s1, s17
 800fe54:	f001 ff72 	bl	8011d3c <__d2b>
 800fe58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fe5c:	4682      	mov	sl, r0
 800fe5e:	2d00      	cmp	r5, #0
 800fe60:	d07f      	beq.n	800ff62 <_dtoa_r+0x20a>
 800fe62:	ee18 3a90 	vmov	r3, s17
 800fe66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fe6e:	ec51 0b18 	vmov	r0, r1, d8
 800fe72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fe76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fe7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fe7e:	4619      	mov	r1, r3
 800fe80:	2200      	movs	r2, #0
 800fe82:	4b75      	ldr	r3, [pc, #468]	; (8010058 <_dtoa_r+0x300>)
 800fe84:	f7f0 fa00 	bl	8000288 <__aeabi_dsub>
 800fe88:	a367      	add	r3, pc, #412	; (adr r3, 8010028 <_dtoa_r+0x2d0>)
 800fe8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8e:	f7f0 fbb3 	bl	80005f8 <__aeabi_dmul>
 800fe92:	a367      	add	r3, pc, #412	; (adr r3, 8010030 <_dtoa_r+0x2d8>)
 800fe94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe98:	f7f0 f9f8 	bl	800028c <__adddf3>
 800fe9c:	4606      	mov	r6, r0
 800fe9e:	4628      	mov	r0, r5
 800fea0:	460f      	mov	r7, r1
 800fea2:	f7f0 fb3f 	bl	8000524 <__aeabi_i2d>
 800fea6:	a364      	add	r3, pc, #400	; (adr r3, 8010038 <_dtoa_r+0x2e0>)
 800fea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feac:	f7f0 fba4 	bl	80005f8 <__aeabi_dmul>
 800feb0:	4602      	mov	r2, r0
 800feb2:	460b      	mov	r3, r1
 800feb4:	4630      	mov	r0, r6
 800feb6:	4639      	mov	r1, r7
 800feb8:	f7f0 f9e8 	bl	800028c <__adddf3>
 800febc:	4606      	mov	r6, r0
 800febe:	460f      	mov	r7, r1
 800fec0:	f7f0 fe4a 	bl	8000b58 <__aeabi_d2iz>
 800fec4:	2200      	movs	r2, #0
 800fec6:	4683      	mov	fp, r0
 800fec8:	2300      	movs	r3, #0
 800feca:	4630      	mov	r0, r6
 800fecc:	4639      	mov	r1, r7
 800fece:	f7f0 fe05 	bl	8000adc <__aeabi_dcmplt>
 800fed2:	b148      	cbz	r0, 800fee8 <_dtoa_r+0x190>
 800fed4:	4658      	mov	r0, fp
 800fed6:	f7f0 fb25 	bl	8000524 <__aeabi_i2d>
 800feda:	4632      	mov	r2, r6
 800fedc:	463b      	mov	r3, r7
 800fede:	f7f0 fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800fee2:	b908      	cbnz	r0, 800fee8 <_dtoa_r+0x190>
 800fee4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800fee8:	f1bb 0f16 	cmp.w	fp, #22
 800feec:	d857      	bhi.n	800ff9e <_dtoa_r+0x246>
 800feee:	4b5b      	ldr	r3, [pc, #364]	; (801005c <_dtoa_r+0x304>)
 800fef0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef8:	ec51 0b18 	vmov	r0, r1, d8
 800fefc:	f7f0 fdee 	bl	8000adc <__aeabi_dcmplt>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d04e      	beq.n	800ffa2 <_dtoa_r+0x24a>
 800ff04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ff08:	2300      	movs	r3, #0
 800ff0a:	930c      	str	r3, [sp, #48]	; 0x30
 800ff0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff0e:	1b5b      	subs	r3, r3, r5
 800ff10:	1e5a      	subs	r2, r3, #1
 800ff12:	bf45      	ittet	mi
 800ff14:	f1c3 0301 	rsbmi	r3, r3, #1
 800ff18:	9305      	strmi	r3, [sp, #20]
 800ff1a:	2300      	movpl	r3, #0
 800ff1c:	2300      	movmi	r3, #0
 800ff1e:	9206      	str	r2, [sp, #24]
 800ff20:	bf54      	ite	pl
 800ff22:	9305      	strpl	r3, [sp, #20]
 800ff24:	9306      	strmi	r3, [sp, #24]
 800ff26:	f1bb 0f00 	cmp.w	fp, #0
 800ff2a:	db3c      	blt.n	800ffa6 <_dtoa_r+0x24e>
 800ff2c:	9b06      	ldr	r3, [sp, #24]
 800ff2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ff32:	445b      	add	r3, fp
 800ff34:	9306      	str	r3, [sp, #24]
 800ff36:	2300      	movs	r3, #0
 800ff38:	9308      	str	r3, [sp, #32]
 800ff3a:	9b07      	ldr	r3, [sp, #28]
 800ff3c:	2b09      	cmp	r3, #9
 800ff3e:	d868      	bhi.n	8010012 <_dtoa_r+0x2ba>
 800ff40:	2b05      	cmp	r3, #5
 800ff42:	bfc4      	itt	gt
 800ff44:	3b04      	subgt	r3, #4
 800ff46:	9307      	strgt	r3, [sp, #28]
 800ff48:	9b07      	ldr	r3, [sp, #28]
 800ff4a:	f1a3 0302 	sub.w	r3, r3, #2
 800ff4e:	bfcc      	ite	gt
 800ff50:	2500      	movgt	r5, #0
 800ff52:	2501      	movle	r5, #1
 800ff54:	2b03      	cmp	r3, #3
 800ff56:	f200 8085 	bhi.w	8010064 <_dtoa_r+0x30c>
 800ff5a:	e8df f003 	tbb	[pc, r3]
 800ff5e:	3b2e      	.short	0x3b2e
 800ff60:	5839      	.short	0x5839
 800ff62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ff66:	441d      	add	r5, r3
 800ff68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ff6c:	2b20      	cmp	r3, #32
 800ff6e:	bfc1      	itttt	gt
 800ff70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ff74:	fa08 f803 	lslgt.w	r8, r8, r3
 800ff78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ff7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ff80:	bfd6      	itet	le
 800ff82:	f1c3 0320 	rsble	r3, r3, #32
 800ff86:	ea48 0003 	orrgt.w	r0, r8, r3
 800ff8a:	fa06 f003 	lslle.w	r0, r6, r3
 800ff8e:	f7f0 fab9 	bl	8000504 <__aeabi_ui2d>
 800ff92:	2201      	movs	r2, #1
 800ff94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ff98:	3d01      	subs	r5, #1
 800ff9a:	920e      	str	r2, [sp, #56]	; 0x38
 800ff9c:	e76f      	b.n	800fe7e <_dtoa_r+0x126>
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	e7b3      	b.n	800ff0a <_dtoa_r+0x1b2>
 800ffa2:	900c      	str	r0, [sp, #48]	; 0x30
 800ffa4:	e7b2      	b.n	800ff0c <_dtoa_r+0x1b4>
 800ffa6:	9b05      	ldr	r3, [sp, #20]
 800ffa8:	eba3 030b 	sub.w	r3, r3, fp
 800ffac:	9305      	str	r3, [sp, #20]
 800ffae:	f1cb 0300 	rsb	r3, fp, #0
 800ffb2:	9308      	str	r3, [sp, #32]
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffb8:	e7bf      	b.n	800ff3a <_dtoa_r+0x1e2>
 800ffba:	2300      	movs	r3, #0
 800ffbc:	9309      	str	r3, [sp, #36]	; 0x24
 800ffbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	dc52      	bgt.n	801006a <_dtoa_r+0x312>
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	9301      	str	r3, [sp, #4]
 800ffc8:	9304      	str	r3, [sp, #16]
 800ffca:	461a      	mov	r2, r3
 800ffcc:	920a      	str	r2, [sp, #40]	; 0x28
 800ffce:	e00b      	b.n	800ffe8 <_dtoa_r+0x290>
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	e7f3      	b.n	800ffbc <_dtoa_r+0x264>
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	9309      	str	r3, [sp, #36]	; 0x24
 800ffd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffda:	445b      	add	r3, fp
 800ffdc:	9301      	str	r3, [sp, #4]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	9304      	str	r3, [sp, #16]
 800ffe4:	bfb8      	it	lt
 800ffe6:	2301      	movlt	r3, #1
 800ffe8:	69e0      	ldr	r0, [r4, #28]
 800ffea:	2100      	movs	r1, #0
 800ffec:	2204      	movs	r2, #4
 800ffee:	f102 0614 	add.w	r6, r2, #20
 800fff2:	429e      	cmp	r6, r3
 800fff4:	d93d      	bls.n	8010072 <_dtoa_r+0x31a>
 800fff6:	6041      	str	r1, [r0, #4]
 800fff8:	4620      	mov	r0, r4
 800fffa:	f001 fac3 	bl	8011584 <_Balloc>
 800fffe:	9000      	str	r0, [sp, #0]
 8010000:	2800      	cmp	r0, #0
 8010002:	d139      	bne.n	8010078 <_dtoa_r+0x320>
 8010004:	4b16      	ldr	r3, [pc, #88]	; (8010060 <_dtoa_r+0x308>)
 8010006:	4602      	mov	r2, r0
 8010008:	f240 11af 	movw	r1, #431	; 0x1af
 801000c:	e6bd      	b.n	800fd8a <_dtoa_r+0x32>
 801000e:	2301      	movs	r3, #1
 8010010:	e7e1      	b.n	800ffd6 <_dtoa_r+0x27e>
 8010012:	2501      	movs	r5, #1
 8010014:	2300      	movs	r3, #0
 8010016:	9307      	str	r3, [sp, #28]
 8010018:	9509      	str	r5, [sp, #36]	; 0x24
 801001a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801001e:	9301      	str	r3, [sp, #4]
 8010020:	9304      	str	r3, [sp, #16]
 8010022:	2200      	movs	r2, #0
 8010024:	2312      	movs	r3, #18
 8010026:	e7d1      	b.n	800ffcc <_dtoa_r+0x274>
 8010028:	636f4361 	.word	0x636f4361
 801002c:	3fd287a7 	.word	0x3fd287a7
 8010030:	8b60c8b3 	.word	0x8b60c8b3
 8010034:	3fc68a28 	.word	0x3fc68a28
 8010038:	509f79fb 	.word	0x509f79fb
 801003c:	3fd34413 	.word	0x3fd34413
 8010040:	08015176 	.word	0x08015176
 8010044:	0801518d 	.word	0x0801518d
 8010048:	7ff00000 	.word	0x7ff00000
 801004c:	08015172 	.word	0x08015172
 8010050:	08015169 	.word	0x08015169
 8010054:	08014fe1 	.word	0x08014fe1
 8010058:	3ff80000 	.word	0x3ff80000
 801005c:	080152e8 	.word	0x080152e8
 8010060:	080151e5 	.word	0x080151e5
 8010064:	2301      	movs	r3, #1
 8010066:	9309      	str	r3, [sp, #36]	; 0x24
 8010068:	e7d7      	b.n	801001a <_dtoa_r+0x2c2>
 801006a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801006c:	9301      	str	r3, [sp, #4]
 801006e:	9304      	str	r3, [sp, #16]
 8010070:	e7ba      	b.n	800ffe8 <_dtoa_r+0x290>
 8010072:	3101      	adds	r1, #1
 8010074:	0052      	lsls	r2, r2, #1
 8010076:	e7ba      	b.n	800ffee <_dtoa_r+0x296>
 8010078:	69e3      	ldr	r3, [r4, #28]
 801007a:	9a00      	ldr	r2, [sp, #0]
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	9b04      	ldr	r3, [sp, #16]
 8010080:	2b0e      	cmp	r3, #14
 8010082:	f200 80a8 	bhi.w	80101d6 <_dtoa_r+0x47e>
 8010086:	2d00      	cmp	r5, #0
 8010088:	f000 80a5 	beq.w	80101d6 <_dtoa_r+0x47e>
 801008c:	f1bb 0f00 	cmp.w	fp, #0
 8010090:	dd38      	ble.n	8010104 <_dtoa_r+0x3ac>
 8010092:	4bc0      	ldr	r3, [pc, #768]	; (8010394 <_dtoa_r+0x63c>)
 8010094:	f00b 020f 	and.w	r2, fp, #15
 8010098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801009c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80100a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80100a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80100a8:	d019      	beq.n	80100de <_dtoa_r+0x386>
 80100aa:	4bbb      	ldr	r3, [pc, #748]	; (8010398 <_dtoa_r+0x640>)
 80100ac:	ec51 0b18 	vmov	r0, r1, d8
 80100b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80100b4:	f7f0 fbca 	bl	800084c <__aeabi_ddiv>
 80100b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100bc:	f008 080f 	and.w	r8, r8, #15
 80100c0:	2503      	movs	r5, #3
 80100c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010398 <_dtoa_r+0x640>
 80100c6:	f1b8 0f00 	cmp.w	r8, #0
 80100ca:	d10a      	bne.n	80100e2 <_dtoa_r+0x38a>
 80100cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100d0:	4632      	mov	r2, r6
 80100d2:	463b      	mov	r3, r7
 80100d4:	f7f0 fbba 	bl	800084c <__aeabi_ddiv>
 80100d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100dc:	e02b      	b.n	8010136 <_dtoa_r+0x3de>
 80100de:	2502      	movs	r5, #2
 80100e0:	e7ef      	b.n	80100c2 <_dtoa_r+0x36a>
 80100e2:	f018 0f01 	tst.w	r8, #1
 80100e6:	d008      	beq.n	80100fa <_dtoa_r+0x3a2>
 80100e8:	4630      	mov	r0, r6
 80100ea:	4639      	mov	r1, r7
 80100ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80100f0:	f7f0 fa82 	bl	80005f8 <__aeabi_dmul>
 80100f4:	3501      	adds	r5, #1
 80100f6:	4606      	mov	r6, r0
 80100f8:	460f      	mov	r7, r1
 80100fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80100fe:	f109 0908 	add.w	r9, r9, #8
 8010102:	e7e0      	b.n	80100c6 <_dtoa_r+0x36e>
 8010104:	f000 809f 	beq.w	8010246 <_dtoa_r+0x4ee>
 8010108:	f1cb 0600 	rsb	r6, fp, #0
 801010c:	4ba1      	ldr	r3, [pc, #644]	; (8010394 <_dtoa_r+0x63c>)
 801010e:	4fa2      	ldr	r7, [pc, #648]	; (8010398 <_dtoa_r+0x640>)
 8010110:	f006 020f 	and.w	r2, r6, #15
 8010114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011c:	ec51 0b18 	vmov	r0, r1, d8
 8010120:	f7f0 fa6a 	bl	80005f8 <__aeabi_dmul>
 8010124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010128:	1136      	asrs	r6, r6, #4
 801012a:	2300      	movs	r3, #0
 801012c:	2502      	movs	r5, #2
 801012e:	2e00      	cmp	r6, #0
 8010130:	d17e      	bne.n	8010230 <_dtoa_r+0x4d8>
 8010132:	2b00      	cmp	r3, #0
 8010134:	d1d0      	bne.n	80100d8 <_dtoa_r+0x380>
 8010136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010138:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801013c:	2b00      	cmp	r3, #0
 801013e:	f000 8084 	beq.w	801024a <_dtoa_r+0x4f2>
 8010142:	4b96      	ldr	r3, [pc, #600]	; (801039c <_dtoa_r+0x644>)
 8010144:	2200      	movs	r2, #0
 8010146:	4640      	mov	r0, r8
 8010148:	4649      	mov	r1, r9
 801014a:	f7f0 fcc7 	bl	8000adc <__aeabi_dcmplt>
 801014e:	2800      	cmp	r0, #0
 8010150:	d07b      	beq.n	801024a <_dtoa_r+0x4f2>
 8010152:	9b04      	ldr	r3, [sp, #16]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d078      	beq.n	801024a <_dtoa_r+0x4f2>
 8010158:	9b01      	ldr	r3, [sp, #4]
 801015a:	2b00      	cmp	r3, #0
 801015c:	dd39      	ble.n	80101d2 <_dtoa_r+0x47a>
 801015e:	4b90      	ldr	r3, [pc, #576]	; (80103a0 <_dtoa_r+0x648>)
 8010160:	2200      	movs	r2, #0
 8010162:	4640      	mov	r0, r8
 8010164:	4649      	mov	r1, r9
 8010166:	f7f0 fa47 	bl	80005f8 <__aeabi_dmul>
 801016a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801016e:	9e01      	ldr	r6, [sp, #4]
 8010170:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8010174:	3501      	adds	r5, #1
 8010176:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801017a:	4628      	mov	r0, r5
 801017c:	f7f0 f9d2 	bl	8000524 <__aeabi_i2d>
 8010180:	4642      	mov	r2, r8
 8010182:	464b      	mov	r3, r9
 8010184:	f7f0 fa38 	bl	80005f8 <__aeabi_dmul>
 8010188:	4b86      	ldr	r3, [pc, #536]	; (80103a4 <_dtoa_r+0x64c>)
 801018a:	2200      	movs	r2, #0
 801018c:	f7f0 f87e 	bl	800028c <__adddf3>
 8010190:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010198:	9303      	str	r3, [sp, #12]
 801019a:	2e00      	cmp	r6, #0
 801019c:	d158      	bne.n	8010250 <_dtoa_r+0x4f8>
 801019e:	4b82      	ldr	r3, [pc, #520]	; (80103a8 <_dtoa_r+0x650>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	4640      	mov	r0, r8
 80101a4:	4649      	mov	r1, r9
 80101a6:	f7f0 f86f 	bl	8000288 <__aeabi_dsub>
 80101aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101ae:	4680      	mov	r8, r0
 80101b0:	4689      	mov	r9, r1
 80101b2:	f7f0 fcb1 	bl	8000b18 <__aeabi_dcmpgt>
 80101b6:	2800      	cmp	r0, #0
 80101b8:	f040 8296 	bne.w	80106e8 <_dtoa_r+0x990>
 80101bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80101c0:	4640      	mov	r0, r8
 80101c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101c6:	4649      	mov	r1, r9
 80101c8:	f7f0 fc88 	bl	8000adc <__aeabi_dcmplt>
 80101cc:	2800      	cmp	r0, #0
 80101ce:	f040 8289 	bne.w	80106e4 <_dtoa_r+0x98c>
 80101d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80101d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101d8:	2b00      	cmp	r3, #0
 80101da:	f2c0 814e 	blt.w	801047a <_dtoa_r+0x722>
 80101de:	f1bb 0f0e 	cmp.w	fp, #14
 80101e2:	f300 814a 	bgt.w	801047a <_dtoa_r+0x722>
 80101e6:	4b6b      	ldr	r3, [pc, #428]	; (8010394 <_dtoa_r+0x63c>)
 80101e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80101ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80101f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	f280 80dc 	bge.w	80103b0 <_dtoa_r+0x658>
 80101f8:	9b04      	ldr	r3, [sp, #16]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f300 80d8 	bgt.w	80103b0 <_dtoa_r+0x658>
 8010200:	f040 826f 	bne.w	80106e2 <_dtoa_r+0x98a>
 8010204:	4b68      	ldr	r3, [pc, #416]	; (80103a8 <_dtoa_r+0x650>)
 8010206:	2200      	movs	r2, #0
 8010208:	4640      	mov	r0, r8
 801020a:	4649      	mov	r1, r9
 801020c:	f7f0 f9f4 	bl	80005f8 <__aeabi_dmul>
 8010210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010214:	f7f0 fc76 	bl	8000b04 <__aeabi_dcmpge>
 8010218:	9e04      	ldr	r6, [sp, #16]
 801021a:	4637      	mov	r7, r6
 801021c:	2800      	cmp	r0, #0
 801021e:	f040 8245 	bne.w	80106ac <_dtoa_r+0x954>
 8010222:	9d00      	ldr	r5, [sp, #0]
 8010224:	2331      	movs	r3, #49	; 0x31
 8010226:	f805 3b01 	strb.w	r3, [r5], #1
 801022a:	f10b 0b01 	add.w	fp, fp, #1
 801022e:	e241      	b.n	80106b4 <_dtoa_r+0x95c>
 8010230:	07f2      	lsls	r2, r6, #31
 8010232:	d505      	bpl.n	8010240 <_dtoa_r+0x4e8>
 8010234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010238:	f7f0 f9de 	bl	80005f8 <__aeabi_dmul>
 801023c:	3501      	adds	r5, #1
 801023e:	2301      	movs	r3, #1
 8010240:	1076      	asrs	r6, r6, #1
 8010242:	3708      	adds	r7, #8
 8010244:	e773      	b.n	801012e <_dtoa_r+0x3d6>
 8010246:	2502      	movs	r5, #2
 8010248:	e775      	b.n	8010136 <_dtoa_r+0x3de>
 801024a:	9e04      	ldr	r6, [sp, #16]
 801024c:	465f      	mov	r7, fp
 801024e:	e792      	b.n	8010176 <_dtoa_r+0x41e>
 8010250:	9900      	ldr	r1, [sp, #0]
 8010252:	4b50      	ldr	r3, [pc, #320]	; (8010394 <_dtoa_r+0x63c>)
 8010254:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010258:	4431      	add	r1, r6
 801025a:	9102      	str	r1, [sp, #8]
 801025c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801025e:	eeb0 9a47 	vmov.f32	s18, s14
 8010262:	eef0 9a67 	vmov.f32	s19, s15
 8010266:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801026a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801026e:	2900      	cmp	r1, #0
 8010270:	d044      	beq.n	80102fc <_dtoa_r+0x5a4>
 8010272:	494e      	ldr	r1, [pc, #312]	; (80103ac <_dtoa_r+0x654>)
 8010274:	2000      	movs	r0, #0
 8010276:	f7f0 fae9 	bl	800084c <__aeabi_ddiv>
 801027a:	ec53 2b19 	vmov	r2, r3, d9
 801027e:	f7f0 f803 	bl	8000288 <__aeabi_dsub>
 8010282:	9d00      	ldr	r5, [sp, #0]
 8010284:	ec41 0b19 	vmov	d9, r0, r1
 8010288:	4649      	mov	r1, r9
 801028a:	4640      	mov	r0, r8
 801028c:	f7f0 fc64 	bl	8000b58 <__aeabi_d2iz>
 8010290:	4606      	mov	r6, r0
 8010292:	f7f0 f947 	bl	8000524 <__aeabi_i2d>
 8010296:	4602      	mov	r2, r0
 8010298:	460b      	mov	r3, r1
 801029a:	4640      	mov	r0, r8
 801029c:	4649      	mov	r1, r9
 801029e:	f7ef fff3 	bl	8000288 <__aeabi_dsub>
 80102a2:	3630      	adds	r6, #48	; 0x30
 80102a4:	f805 6b01 	strb.w	r6, [r5], #1
 80102a8:	ec53 2b19 	vmov	r2, r3, d9
 80102ac:	4680      	mov	r8, r0
 80102ae:	4689      	mov	r9, r1
 80102b0:	f7f0 fc14 	bl	8000adc <__aeabi_dcmplt>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	d164      	bne.n	8010382 <_dtoa_r+0x62a>
 80102b8:	4642      	mov	r2, r8
 80102ba:	464b      	mov	r3, r9
 80102bc:	4937      	ldr	r1, [pc, #220]	; (801039c <_dtoa_r+0x644>)
 80102be:	2000      	movs	r0, #0
 80102c0:	f7ef ffe2 	bl	8000288 <__aeabi_dsub>
 80102c4:	ec53 2b19 	vmov	r2, r3, d9
 80102c8:	f7f0 fc08 	bl	8000adc <__aeabi_dcmplt>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	f040 80b6 	bne.w	801043e <_dtoa_r+0x6e6>
 80102d2:	9b02      	ldr	r3, [sp, #8]
 80102d4:	429d      	cmp	r5, r3
 80102d6:	f43f af7c 	beq.w	80101d2 <_dtoa_r+0x47a>
 80102da:	4b31      	ldr	r3, [pc, #196]	; (80103a0 <_dtoa_r+0x648>)
 80102dc:	ec51 0b19 	vmov	r0, r1, d9
 80102e0:	2200      	movs	r2, #0
 80102e2:	f7f0 f989 	bl	80005f8 <__aeabi_dmul>
 80102e6:	4b2e      	ldr	r3, [pc, #184]	; (80103a0 <_dtoa_r+0x648>)
 80102e8:	ec41 0b19 	vmov	d9, r0, r1
 80102ec:	2200      	movs	r2, #0
 80102ee:	4640      	mov	r0, r8
 80102f0:	4649      	mov	r1, r9
 80102f2:	f7f0 f981 	bl	80005f8 <__aeabi_dmul>
 80102f6:	4680      	mov	r8, r0
 80102f8:	4689      	mov	r9, r1
 80102fa:	e7c5      	b.n	8010288 <_dtoa_r+0x530>
 80102fc:	ec51 0b17 	vmov	r0, r1, d7
 8010300:	f7f0 f97a 	bl	80005f8 <__aeabi_dmul>
 8010304:	9b02      	ldr	r3, [sp, #8]
 8010306:	9d00      	ldr	r5, [sp, #0]
 8010308:	930f      	str	r3, [sp, #60]	; 0x3c
 801030a:	ec41 0b19 	vmov	d9, r0, r1
 801030e:	4649      	mov	r1, r9
 8010310:	4640      	mov	r0, r8
 8010312:	f7f0 fc21 	bl	8000b58 <__aeabi_d2iz>
 8010316:	4606      	mov	r6, r0
 8010318:	f7f0 f904 	bl	8000524 <__aeabi_i2d>
 801031c:	3630      	adds	r6, #48	; 0x30
 801031e:	4602      	mov	r2, r0
 8010320:	460b      	mov	r3, r1
 8010322:	4640      	mov	r0, r8
 8010324:	4649      	mov	r1, r9
 8010326:	f7ef ffaf 	bl	8000288 <__aeabi_dsub>
 801032a:	f805 6b01 	strb.w	r6, [r5], #1
 801032e:	9b02      	ldr	r3, [sp, #8]
 8010330:	429d      	cmp	r5, r3
 8010332:	4680      	mov	r8, r0
 8010334:	4689      	mov	r9, r1
 8010336:	f04f 0200 	mov.w	r2, #0
 801033a:	d124      	bne.n	8010386 <_dtoa_r+0x62e>
 801033c:	4b1b      	ldr	r3, [pc, #108]	; (80103ac <_dtoa_r+0x654>)
 801033e:	ec51 0b19 	vmov	r0, r1, d9
 8010342:	f7ef ffa3 	bl	800028c <__adddf3>
 8010346:	4602      	mov	r2, r0
 8010348:	460b      	mov	r3, r1
 801034a:	4640      	mov	r0, r8
 801034c:	4649      	mov	r1, r9
 801034e:	f7f0 fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 8010352:	2800      	cmp	r0, #0
 8010354:	d173      	bne.n	801043e <_dtoa_r+0x6e6>
 8010356:	ec53 2b19 	vmov	r2, r3, d9
 801035a:	4914      	ldr	r1, [pc, #80]	; (80103ac <_dtoa_r+0x654>)
 801035c:	2000      	movs	r0, #0
 801035e:	f7ef ff93 	bl	8000288 <__aeabi_dsub>
 8010362:	4602      	mov	r2, r0
 8010364:	460b      	mov	r3, r1
 8010366:	4640      	mov	r0, r8
 8010368:	4649      	mov	r1, r9
 801036a:	f7f0 fbb7 	bl	8000adc <__aeabi_dcmplt>
 801036e:	2800      	cmp	r0, #0
 8010370:	f43f af2f 	beq.w	80101d2 <_dtoa_r+0x47a>
 8010374:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010376:	1e6b      	subs	r3, r5, #1
 8010378:	930f      	str	r3, [sp, #60]	; 0x3c
 801037a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801037e:	2b30      	cmp	r3, #48	; 0x30
 8010380:	d0f8      	beq.n	8010374 <_dtoa_r+0x61c>
 8010382:	46bb      	mov	fp, r7
 8010384:	e04a      	b.n	801041c <_dtoa_r+0x6c4>
 8010386:	4b06      	ldr	r3, [pc, #24]	; (80103a0 <_dtoa_r+0x648>)
 8010388:	f7f0 f936 	bl	80005f8 <__aeabi_dmul>
 801038c:	4680      	mov	r8, r0
 801038e:	4689      	mov	r9, r1
 8010390:	e7bd      	b.n	801030e <_dtoa_r+0x5b6>
 8010392:	bf00      	nop
 8010394:	080152e8 	.word	0x080152e8
 8010398:	080152c0 	.word	0x080152c0
 801039c:	3ff00000 	.word	0x3ff00000
 80103a0:	40240000 	.word	0x40240000
 80103a4:	401c0000 	.word	0x401c0000
 80103a8:	40140000 	.word	0x40140000
 80103ac:	3fe00000 	.word	0x3fe00000
 80103b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80103b4:	9d00      	ldr	r5, [sp, #0]
 80103b6:	4642      	mov	r2, r8
 80103b8:	464b      	mov	r3, r9
 80103ba:	4630      	mov	r0, r6
 80103bc:	4639      	mov	r1, r7
 80103be:	f7f0 fa45 	bl	800084c <__aeabi_ddiv>
 80103c2:	f7f0 fbc9 	bl	8000b58 <__aeabi_d2iz>
 80103c6:	9001      	str	r0, [sp, #4]
 80103c8:	f7f0 f8ac 	bl	8000524 <__aeabi_i2d>
 80103cc:	4642      	mov	r2, r8
 80103ce:	464b      	mov	r3, r9
 80103d0:	f7f0 f912 	bl	80005f8 <__aeabi_dmul>
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	4630      	mov	r0, r6
 80103da:	4639      	mov	r1, r7
 80103dc:	f7ef ff54 	bl	8000288 <__aeabi_dsub>
 80103e0:	9e01      	ldr	r6, [sp, #4]
 80103e2:	9f04      	ldr	r7, [sp, #16]
 80103e4:	3630      	adds	r6, #48	; 0x30
 80103e6:	f805 6b01 	strb.w	r6, [r5], #1
 80103ea:	9e00      	ldr	r6, [sp, #0]
 80103ec:	1bae      	subs	r6, r5, r6
 80103ee:	42b7      	cmp	r7, r6
 80103f0:	4602      	mov	r2, r0
 80103f2:	460b      	mov	r3, r1
 80103f4:	d134      	bne.n	8010460 <_dtoa_r+0x708>
 80103f6:	f7ef ff49 	bl	800028c <__adddf3>
 80103fa:	4642      	mov	r2, r8
 80103fc:	464b      	mov	r3, r9
 80103fe:	4606      	mov	r6, r0
 8010400:	460f      	mov	r7, r1
 8010402:	f7f0 fb89 	bl	8000b18 <__aeabi_dcmpgt>
 8010406:	b9c8      	cbnz	r0, 801043c <_dtoa_r+0x6e4>
 8010408:	4642      	mov	r2, r8
 801040a:	464b      	mov	r3, r9
 801040c:	4630      	mov	r0, r6
 801040e:	4639      	mov	r1, r7
 8010410:	f7f0 fb5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010414:	b110      	cbz	r0, 801041c <_dtoa_r+0x6c4>
 8010416:	9b01      	ldr	r3, [sp, #4]
 8010418:	07db      	lsls	r3, r3, #31
 801041a:	d40f      	bmi.n	801043c <_dtoa_r+0x6e4>
 801041c:	4651      	mov	r1, sl
 801041e:	4620      	mov	r0, r4
 8010420:	f001 f8f0 	bl	8011604 <_Bfree>
 8010424:	2300      	movs	r3, #0
 8010426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010428:	702b      	strb	r3, [r5, #0]
 801042a:	f10b 0301 	add.w	r3, fp, #1
 801042e:	6013      	str	r3, [r2, #0]
 8010430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010432:	2b00      	cmp	r3, #0
 8010434:	f43f ace2 	beq.w	800fdfc <_dtoa_r+0xa4>
 8010438:	601d      	str	r5, [r3, #0]
 801043a:	e4df      	b.n	800fdfc <_dtoa_r+0xa4>
 801043c:	465f      	mov	r7, fp
 801043e:	462b      	mov	r3, r5
 8010440:	461d      	mov	r5, r3
 8010442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010446:	2a39      	cmp	r2, #57	; 0x39
 8010448:	d106      	bne.n	8010458 <_dtoa_r+0x700>
 801044a:	9a00      	ldr	r2, [sp, #0]
 801044c:	429a      	cmp	r2, r3
 801044e:	d1f7      	bne.n	8010440 <_dtoa_r+0x6e8>
 8010450:	9900      	ldr	r1, [sp, #0]
 8010452:	2230      	movs	r2, #48	; 0x30
 8010454:	3701      	adds	r7, #1
 8010456:	700a      	strb	r2, [r1, #0]
 8010458:	781a      	ldrb	r2, [r3, #0]
 801045a:	3201      	adds	r2, #1
 801045c:	701a      	strb	r2, [r3, #0]
 801045e:	e790      	b.n	8010382 <_dtoa_r+0x62a>
 8010460:	4ba3      	ldr	r3, [pc, #652]	; (80106f0 <_dtoa_r+0x998>)
 8010462:	2200      	movs	r2, #0
 8010464:	f7f0 f8c8 	bl	80005f8 <__aeabi_dmul>
 8010468:	2200      	movs	r2, #0
 801046a:	2300      	movs	r3, #0
 801046c:	4606      	mov	r6, r0
 801046e:	460f      	mov	r7, r1
 8010470:	f7f0 fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010474:	2800      	cmp	r0, #0
 8010476:	d09e      	beq.n	80103b6 <_dtoa_r+0x65e>
 8010478:	e7d0      	b.n	801041c <_dtoa_r+0x6c4>
 801047a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801047c:	2a00      	cmp	r2, #0
 801047e:	f000 80ca 	beq.w	8010616 <_dtoa_r+0x8be>
 8010482:	9a07      	ldr	r2, [sp, #28]
 8010484:	2a01      	cmp	r2, #1
 8010486:	f300 80ad 	bgt.w	80105e4 <_dtoa_r+0x88c>
 801048a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801048c:	2a00      	cmp	r2, #0
 801048e:	f000 80a5 	beq.w	80105dc <_dtoa_r+0x884>
 8010492:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010496:	9e08      	ldr	r6, [sp, #32]
 8010498:	9d05      	ldr	r5, [sp, #20]
 801049a:	9a05      	ldr	r2, [sp, #20]
 801049c:	441a      	add	r2, r3
 801049e:	9205      	str	r2, [sp, #20]
 80104a0:	9a06      	ldr	r2, [sp, #24]
 80104a2:	2101      	movs	r1, #1
 80104a4:	441a      	add	r2, r3
 80104a6:	4620      	mov	r0, r4
 80104a8:	9206      	str	r2, [sp, #24]
 80104aa:	f001 f9ab 	bl	8011804 <__i2b>
 80104ae:	4607      	mov	r7, r0
 80104b0:	b165      	cbz	r5, 80104cc <_dtoa_r+0x774>
 80104b2:	9b06      	ldr	r3, [sp, #24]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	dd09      	ble.n	80104cc <_dtoa_r+0x774>
 80104b8:	42ab      	cmp	r3, r5
 80104ba:	9a05      	ldr	r2, [sp, #20]
 80104bc:	bfa8      	it	ge
 80104be:	462b      	movge	r3, r5
 80104c0:	1ad2      	subs	r2, r2, r3
 80104c2:	9205      	str	r2, [sp, #20]
 80104c4:	9a06      	ldr	r2, [sp, #24]
 80104c6:	1aed      	subs	r5, r5, r3
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	9306      	str	r3, [sp, #24]
 80104cc:	9b08      	ldr	r3, [sp, #32]
 80104ce:	b1f3      	cbz	r3, 801050e <_dtoa_r+0x7b6>
 80104d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	f000 80a3 	beq.w	801061e <_dtoa_r+0x8c6>
 80104d8:	2e00      	cmp	r6, #0
 80104da:	dd10      	ble.n	80104fe <_dtoa_r+0x7a6>
 80104dc:	4639      	mov	r1, r7
 80104de:	4632      	mov	r2, r6
 80104e0:	4620      	mov	r0, r4
 80104e2:	f001 fa4f 	bl	8011984 <__pow5mult>
 80104e6:	4652      	mov	r2, sl
 80104e8:	4601      	mov	r1, r0
 80104ea:	4607      	mov	r7, r0
 80104ec:	4620      	mov	r0, r4
 80104ee:	f001 f99f 	bl	8011830 <__multiply>
 80104f2:	4651      	mov	r1, sl
 80104f4:	4680      	mov	r8, r0
 80104f6:	4620      	mov	r0, r4
 80104f8:	f001 f884 	bl	8011604 <_Bfree>
 80104fc:	46c2      	mov	sl, r8
 80104fe:	9b08      	ldr	r3, [sp, #32]
 8010500:	1b9a      	subs	r2, r3, r6
 8010502:	d004      	beq.n	801050e <_dtoa_r+0x7b6>
 8010504:	4651      	mov	r1, sl
 8010506:	4620      	mov	r0, r4
 8010508:	f001 fa3c 	bl	8011984 <__pow5mult>
 801050c:	4682      	mov	sl, r0
 801050e:	2101      	movs	r1, #1
 8010510:	4620      	mov	r0, r4
 8010512:	f001 f977 	bl	8011804 <__i2b>
 8010516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010518:	2b00      	cmp	r3, #0
 801051a:	4606      	mov	r6, r0
 801051c:	f340 8081 	ble.w	8010622 <_dtoa_r+0x8ca>
 8010520:	461a      	mov	r2, r3
 8010522:	4601      	mov	r1, r0
 8010524:	4620      	mov	r0, r4
 8010526:	f001 fa2d 	bl	8011984 <__pow5mult>
 801052a:	9b07      	ldr	r3, [sp, #28]
 801052c:	2b01      	cmp	r3, #1
 801052e:	4606      	mov	r6, r0
 8010530:	dd7a      	ble.n	8010628 <_dtoa_r+0x8d0>
 8010532:	f04f 0800 	mov.w	r8, #0
 8010536:	6933      	ldr	r3, [r6, #16]
 8010538:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801053c:	6918      	ldr	r0, [r3, #16]
 801053e:	f001 f913 	bl	8011768 <__hi0bits>
 8010542:	f1c0 0020 	rsb	r0, r0, #32
 8010546:	9b06      	ldr	r3, [sp, #24]
 8010548:	4418      	add	r0, r3
 801054a:	f010 001f 	ands.w	r0, r0, #31
 801054e:	f000 8094 	beq.w	801067a <_dtoa_r+0x922>
 8010552:	f1c0 0320 	rsb	r3, r0, #32
 8010556:	2b04      	cmp	r3, #4
 8010558:	f340 8085 	ble.w	8010666 <_dtoa_r+0x90e>
 801055c:	9b05      	ldr	r3, [sp, #20]
 801055e:	f1c0 001c 	rsb	r0, r0, #28
 8010562:	4403      	add	r3, r0
 8010564:	9305      	str	r3, [sp, #20]
 8010566:	9b06      	ldr	r3, [sp, #24]
 8010568:	4403      	add	r3, r0
 801056a:	4405      	add	r5, r0
 801056c:	9306      	str	r3, [sp, #24]
 801056e:	9b05      	ldr	r3, [sp, #20]
 8010570:	2b00      	cmp	r3, #0
 8010572:	dd05      	ble.n	8010580 <_dtoa_r+0x828>
 8010574:	4651      	mov	r1, sl
 8010576:	461a      	mov	r2, r3
 8010578:	4620      	mov	r0, r4
 801057a:	f001 fa5d 	bl	8011a38 <__lshift>
 801057e:	4682      	mov	sl, r0
 8010580:	9b06      	ldr	r3, [sp, #24]
 8010582:	2b00      	cmp	r3, #0
 8010584:	dd05      	ble.n	8010592 <_dtoa_r+0x83a>
 8010586:	4631      	mov	r1, r6
 8010588:	461a      	mov	r2, r3
 801058a:	4620      	mov	r0, r4
 801058c:	f001 fa54 	bl	8011a38 <__lshift>
 8010590:	4606      	mov	r6, r0
 8010592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010594:	2b00      	cmp	r3, #0
 8010596:	d072      	beq.n	801067e <_dtoa_r+0x926>
 8010598:	4631      	mov	r1, r6
 801059a:	4650      	mov	r0, sl
 801059c:	f001 fab8 	bl	8011b10 <__mcmp>
 80105a0:	2800      	cmp	r0, #0
 80105a2:	da6c      	bge.n	801067e <_dtoa_r+0x926>
 80105a4:	2300      	movs	r3, #0
 80105a6:	4651      	mov	r1, sl
 80105a8:	220a      	movs	r2, #10
 80105aa:	4620      	mov	r0, r4
 80105ac:	f001 f84c 	bl	8011648 <__multadd>
 80105b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80105b6:	4682      	mov	sl, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	f000 81b0 	beq.w	801091e <_dtoa_r+0xbc6>
 80105be:	2300      	movs	r3, #0
 80105c0:	4639      	mov	r1, r7
 80105c2:	220a      	movs	r2, #10
 80105c4:	4620      	mov	r0, r4
 80105c6:	f001 f83f 	bl	8011648 <__multadd>
 80105ca:	9b01      	ldr	r3, [sp, #4]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	4607      	mov	r7, r0
 80105d0:	f300 8096 	bgt.w	8010700 <_dtoa_r+0x9a8>
 80105d4:	9b07      	ldr	r3, [sp, #28]
 80105d6:	2b02      	cmp	r3, #2
 80105d8:	dc59      	bgt.n	801068e <_dtoa_r+0x936>
 80105da:	e091      	b.n	8010700 <_dtoa_r+0x9a8>
 80105dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80105e2:	e758      	b.n	8010496 <_dtoa_r+0x73e>
 80105e4:	9b04      	ldr	r3, [sp, #16]
 80105e6:	1e5e      	subs	r6, r3, #1
 80105e8:	9b08      	ldr	r3, [sp, #32]
 80105ea:	42b3      	cmp	r3, r6
 80105ec:	bfbf      	itttt	lt
 80105ee:	9b08      	ldrlt	r3, [sp, #32]
 80105f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80105f2:	9608      	strlt	r6, [sp, #32]
 80105f4:	1af3      	sublt	r3, r6, r3
 80105f6:	bfb4      	ite	lt
 80105f8:	18d2      	addlt	r2, r2, r3
 80105fa:	1b9e      	subge	r6, r3, r6
 80105fc:	9b04      	ldr	r3, [sp, #16]
 80105fe:	bfbc      	itt	lt
 8010600:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010602:	2600      	movlt	r6, #0
 8010604:	2b00      	cmp	r3, #0
 8010606:	bfb7      	itett	lt
 8010608:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801060c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010610:	1a9d      	sublt	r5, r3, r2
 8010612:	2300      	movlt	r3, #0
 8010614:	e741      	b.n	801049a <_dtoa_r+0x742>
 8010616:	9e08      	ldr	r6, [sp, #32]
 8010618:	9d05      	ldr	r5, [sp, #20]
 801061a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801061c:	e748      	b.n	80104b0 <_dtoa_r+0x758>
 801061e:	9a08      	ldr	r2, [sp, #32]
 8010620:	e770      	b.n	8010504 <_dtoa_r+0x7ac>
 8010622:	9b07      	ldr	r3, [sp, #28]
 8010624:	2b01      	cmp	r3, #1
 8010626:	dc19      	bgt.n	801065c <_dtoa_r+0x904>
 8010628:	9b02      	ldr	r3, [sp, #8]
 801062a:	b9bb      	cbnz	r3, 801065c <_dtoa_r+0x904>
 801062c:	9b03      	ldr	r3, [sp, #12]
 801062e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010632:	b99b      	cbnz	r3, 801065c <_dtoa_r+0x904>
 8010634:	9b03      	ldr	r3, [sp, #12]
 8010636:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801063a:	0d1b      	lsrs	r3, r3, #20
 801063c:	051b      	lsls	r3, r3, #20
 801063e:	b183      	cbz	r3, 8010662 <_dtoa_r+0x90a>
 8010640:	9b05      	ldr	r3, [sp, #20]
 8010642:	3301      	adds	r3, #1
 8010644:	9305      	str	r3, [sp, #20]
 8010646:	9b06      	ldr	r3, [sp, #24]
 8010648:	3301      	adds	r3, #1
 801064a:	9306      	str	r3, [sp, #24]
 801064c:	f04f 0801 	mov.w	r8, #1
 8010650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010652:	2b00      	cmp	r3, #0
 8010654:	f47f af6f 	bne.w	8010536 <_dtoa_r+0x7de>
 8010658:	2001      	movs	r0, #1
 801065a:	e774      	b.n	8010546 <_dtoa_r+0x7ee>
 801065c:	f04f 0800 	mov.w	r8, #0
 8010660:	e7f6      	b.n	8010650 <_dtoa_r+0x8f8>
 8010662:	4698      	mov	r8, r3
 8010664:	e7f4      	b.n	8010650 <_dtoa_r+0x8f8>
 8010666:	d082      	beq.n	801056e <_dtoa_r+0x816>
 8010668:	9a05      	ldr	r2, [sp, #20]
 801066a:	331c      	adds	r3, #28
 801066c:	441a      	add	r2, r3
 801066e:	9205      	str	r2, [sp, #20]
 8010670:	9a06      	ldr	r2, [sp, #24]
 8010672:	441a      	add	r2, r3
 8010674:	441d      	add	r5, r3
 8010676:	9206      	str	r2, [sp, #24]
 8010678:	e779      	b.n	801056e <_dtoa_r+0x816>
 801067a:	4603      	mov	r3, r0
 801067c:	e7f4      	b.n	8010668 <_dtoa_r+0x910>
 801067e:	9b04      	ldr	r3, [sp, #16]
 8010680:	2b00      	cmp	r3, #0
 8010682:	dc37      	bgt.n	80106f4 <_dtoa_r+0x99c>
 8010684:	9b07      	ldr	r3, [sp, #28]
 8010686:	2b02      	cmp	r3, #2
 8010688:	dd34      	ble.n	80106f4 <_dtoa_r+0x99c>
 801068a:	9b04      	ldr	r3, [sp, #16]
 801068c:	9301      	str	r3, [sp, #4]
 801068e:	9b01      	ldr	r3, [sp, #4]
 8010690:	b963      	cbnz	r3, 80106ac <_dtoa_r+0x954>
 8010692:	4631      	mov	r1, r6
 8010694:	2205      	movs	r2, #5
 8010696:	4620      	mov	r0, r4
 8010698:	f000 ffd6 	bl	8011648 <__multadd>
 801069c:	4601      	mov	r1, r0
 801069e:	4606      	mov	r6, r0
 80106a0:	4650      	mov	r0, sl
 80106a2:	f001 fa35 	bl	8011b10 <__mcmp>
 80106a6:	2800      	cmp	r0, #0
 80106a8:	f73f adbb 	bgt.w	8010222 <_dtoa_r+0x4ca>
 80106ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106ae:	9d00      	ldr	r5, [sp, #0]
 80106b0:	ea6f 0b03 	mvn.w	fp, r3
 80106b4:	f04f 0800 	mov.w	r8, #0
 80106b8:	4631      	mov	r1, r6
 80106ba:	4620      	mov	r0, r4
 80106bc:	f000 ffa2 	bl	8011604 <_Bfree>
 80106c0:	2f00      	cmp	r7, #0
 80106c2:	f43f aeab 	beq.w	801041c <_dtoa_r+0x6c4>
 80106c6:	f1b8 0f00 	cmp.w	r8, #0
 80106ca:	d005      	beq.n	80106d8 <_dtoa_r+0x980>
 80106cc:	45b8      	cmp	r8, r7
 80106ce:	d003      	beq.n	80106d8 <_dtoa_r+0x980>
 80106d0:	4641      	mov	r1, r8
 80106d2:	4620      	mov	r0, r4
 80106d4:	f000 ff96 	bl	8011604 <_Bfree>
 80106d8:	4639      	mov	r1, r7
 80106da:	4620      	mov	r0, r4
 80106dc:	f000 ff92 	bl	8011604 <_Bfree>
 80106e0:	e69c      	b.n	801041c <_dtoa_r+0x6c4>
 80106e2:	2600      	movs	r6, #0
 80106e4:	4637      	mov	r7, r6
 80106e6:	e7e1      	b.n	80106ac <_dtoa_r+0x954>
 80106e8:	46bb      	mov	fp, r7
 80106ea:	4637      	mov	r7, r6
 80106ec:	e599      	b.n	8010222 <_dtoa_r+0x4ca>
 80106ee:	bf00      	nop
 80106f0:	40240000 	.word	0x40240000
 80106f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	f000 80c8 	beq.w	801088c <_dtoa_r+0xb34>
 80106fc:	9b04      	ldr	r3, [sp, #16]
 80106fe:	9301      	str	r3, [sp, #4]
 8010700:	2d00      	cmp	r5, #0
 8010702:	dd05      	ble.n	8010710 <_dtoa_r+0x9b8>
 8010704:	4639      	mov	r1, r7
 8010706:	462a      	mov	r2, r5
 8010708:	4620      	mov	r0, r4
 801070a:	f001 f995 	bl	8011a38 <__lshift>
 801070e:	4607      	mov	r7, r0
 8010710:	f1b8 0f00 	cmp.w	r8, #0
 8010714:	d05b      	beq.n	80107ce <_dtoa_r+0xa76>
 8010716:	6879      	ldr	r1, [r7, #4]
 8010718:	4620      	mov	r0, r4
 801071a:	f000 ff33 	bl	8011584 <_Balloc>
 801071e:	4605      	mov	r5, r0
 8010720:	b928      	cbnz	r0, 801072e <_dtoa_r+0x9d6>
 8010722:	4b83      	ldr	r3, [pc, #524]	; (8010930 <_dtoa_r+0xbd8>)
 8010724:	4602      	mov	r2, r0
 8010726:	f240 21ef 	movw	r1, #751	; 0x2ef
 801072a:	f7ff bb2e 	b.w	800fd8a <_dtoa_r+0x32>
 801072e:	693a      	ldr	r2, [r7, #16]
 8010730:	3202      	adds	r2, #2
 8010732:	0092      	lsls	r2, r2, #2
 8010734:	f107 010c 	add.w	r1, r7, #12
 8010738:	300c      	adds	r0, #12
 801073a:	f7ff fa65 	bl	800fc08 <memcpy>
 801073e:	2201      	movs	r2, #1
 8010740:	4629      	mov	r1, r5
 8010742:	4620      	mov	r0, r4
 8010744:	f001 f978 	bl	8011a38 <__lshift>
 8010748:	9b00      	ldr	r3, [sp, #0]
 801074a:	3301      	adds	r3, #1
 801074c:	9304      	str	r3, [sp, #16]
 801074e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010752:	4413      	add	r3, r2
 8010754:	9308      	str	r3, [sp, #32]
 8010756:	9b02      	ldr	r3, [sp, #8]
 8010758:	f003 0301 	and.w	r3, r3, #1
 801075c:	46b8      	mov	r8, r7
 801075e:	9306      	str	r3, [sp, #24]
 8010760:	4607      	mov	r7, r0
 8010762:	9b04      	ldr	r3, [sp, #16]
 8010764:	4631      	mov	r1, r6
 8010766:	3b01      	subs	r3, #1
 8010768:	4650      	mov	r0, sl
 801076a:	9301      	str	r3, [sp, #4]
 801076c:	f7ff fa6a 	bl	800fc44 <quorem>
 8010770:	4641      	mov	r1, r8
 8010772:	9002      	str	r0, [sp, #8]
 8010774:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010778:	4650      	mov	r0, sl
 801077a:	f001 f9c9 	bl	8011b10 <__mcmp>
 801077e:	463a      	mov	r2, r7
 8010780:	9005      	str	r0, [sp, #20]
 8010782:	4631      	mov	r1, r6
 8010784:	4620      	mov	r0, r4
 8010786:	f001 f9df 	bl	8011b48 <__mdiff>
 801078a:	68c2      	ldr	r2, [r0, #12]
 801078c:	4605      	mov	r5, r0
 801078e:	bb02      	cbnz	r2, 80107d2 <_dtoa_r+0xa7a>
 8010790:	4601      	mov	r1, r0
 8010792:	4650      	mov	r0, sl
 8010794:	f001 f9bc 	bl	8011b10 <__mcmp>
 8010798:	4602      	mov	r2, r0
 801079a:	4629      	mov	r1, r5
 801079c:	4620      	mov	r0, r4
 801079e:	9209      	str	r2, [sp, #36]	; 0x24
 80107a0:	f000 ff30 	bl	8011604 <_Bfree>
 80107a4:	9b07      	ldr	r3, [sp, #28]
 80107a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107a8:	9d04      	ldr	r5, [sp, #16]
 80107aa:	ea43 0102 	orr.w	r1, r3, r2
 80107ae:	9b06      	ldr	r3, [sp, #24]
 80107b0:	4319      	orrs	r1, r3
 80107b2:	d110      	bne.n	80107d6 <_dtoa_r+0xa7e>
 80107b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80107b8:	d029      	beq.n	801080e <_dtoa_r+0xab6>
 80107ba:	9b05      	ldr	r3, [sp, #20]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	dd02      	ble.n	80107c6 <_dtoa_r+0xa6e>
 80107c0:	9b02      	ldr	r3, [sp, #8]
 80107c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80107c6:	9b01      	ldr	r3, [sp, #4]
 80107c8:	f883 9000 	strb.w	r9, [r3]
 80107cc:	e774      	b.n	80106b8 <_dtoa_r+0x960>
 80107ce:	4638      	mov	r0, r7
 80107d0:	e7ba      	b.n	8010748 <_dtoa_r+0x9f0>
 80107d2:	2201      	movs	r2, #1
 80107d4:	e7e1      	b.n	801079a <_dtoa_r+0xa42>
 80107d6:	9b05      	ldr	r3, [sp, #20]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	db04      	blt.n	80107e6 <_dtoa_r+0xa8e>
 80107dc:	9907      	ldr	r1, [sp, #28]
 80107de:	430b      	orrs	r3, r1
 80107e0:	9906      	ldr	r1, [sp, #24]
 80107e2:	430b      	orrs	r3, r1
 80107e4:	d120      	bne.n	8010828 <_dtoa_r+0xad0>
 80107e6:	2a00      	cmp	r2, #0
 80107e8:	dded      	ble.n	80107c6 <_dtoa_r+0xa6e>
 80107ea:	4651      	mov	r1, sl
 80107ec:	2201      	movs	r2, #1
 80107ee:	4620      	mov	r0, r4
 80107f0:	f001 f922 	bl	8011a38 <__lshift>
 80107f4:	4631      	mov	r1, r6
 80107f6:	4682      	mov	sl, r0
 80107f8:	f001 f98a 	bl	8011b10 <__mcmp>
 80107fc:	2800      	cmp	r0, #0
 80107fe:	dc03      	bgt.n	8010808 <_dtoa_r+0xab0>
 8010800:	d1e1      	bne.n	80107c6 <_dtoa_r+0xa6e>
 8010802:	f019 0f01 	tst.w	r9, #1
 8010806:	d0de      	beq.n	80107c6 <_dtoa_r+0xa6e>
 8010808:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801080c:	d1d8      	bne.n	80107c0 <_dtoa_r+0xa68>
 801080e:	9a01      	ldr	r2, [sp, #4]
 8010810:	2339      	movs	r3, #57	; 0x39
 8010812:	7013      	strb	r3, [r2, #0]
 8010814:	462b      	mov	r3, r5
 8010816:	461d      	mov	r5, r3
 8010818:	3b01      	subs	r3, #1
 801081a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801081e:	2a39      	cmp	r2, #57	; 0x39
 8010820:	d06c      	beq.n	80108fc <_dtoa_r+0xba4>
 8010822:	3201      	adds	r2, #1
 8010824:	701a      	strb	r2, [r3, #0]
 8010826:	e747      	b.n	80106b8 <_dtoa_r+0x960>
 8010828:	2a00      	cmp	r2, #0
 801082a:	dd07      	ble.n	801083c <_dtoa_r+0xae4>
 801082c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010830:	d0ed      	beq.n	801080e <_dtoa_r+0xab6>
 8010832:	9a01      	ldr	r2, [sp, #4]
 8010834:	f109 0301 	add.w	r3, r9, #1
 8010838:	7013      	strb	r3, [r2, #0]
 801083a:	e73d      	b.n	80106b8 <_dtoa_r+0x960>
 801083c:	9b04      	ldr	r3, [sp, #16]
 801083e:	9a08      	ldr	r2, [sp, #32]
 8010840:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010844:	4293      	cmp	r3, r2
 8010846:	d043      	beq.n	80108d0 <_dtoa_r+0xb78>
 8010848:	4651      	mov	r1, sl
 801084a:	2300      	movs	r3, #0
 801084c:	220a      	movs	r2, #10
 801084e:	4620      	mov	r0, r4
 8010850:	f000 fefa 	bl	8011648 <__multadd>
 8010854:	45b8      	cmp	r8, r7
 8010856:	4682      	mov	sl, r0
 8010858:	f04f 0300 	mov.w	r3, #0
 801085c:	f04f 020a 	mov.w	r2, #10
 8010860:	4641      	mov	r1, r8
 8010862:	4620      	mov	r0, r4
 8010864:	d107      	bne.n	8010876 <_dtoa_r+0xb1e>
 8010866:	f000 feef 	bl	8011648 <__multadd>
 801086a:	4680      	mov	r8, r0
 801086c:	4607      	mov	r7, r0
 801086e:	9b04      	ldr	r3, [sp, #16]
 8010870:	3301      	adds	r3, #1
 8010872:	9304      	str	r3, [sp, #16]
 8010874:	e775      	b.n	8010762 <_dtoa_r+0xa0a>
 8010876:	f000 fee7 	bl	8011648 <__multadd>
 801087a:	4639      	mov	r1, r7
 801087c:	4680      	mov	r8, r0
 801087e:	2300      	movs	r3, #0
 8010880:	220a      	movs	r2, #10
 8010882:	4620      	mov	r0, r4
 8010884:	f000 fee0 	bl	8011648 <__multadd>
 8010888:	4607      	mov	r7, r0
 801088a:	e7f0      	b.n	801086e <_dtoa_r+0xb16>
 801088c:	9b04      	ldr	r3, [sp, #16]
 801088e:	9301      	str	r3, [sp, #4]
 8010890:	9d00      	ldr	r5, [sp, #0]
 8010892:	4631      	mov	r1, r6
 8010894:	4650      	mov	r0, sl
 8010896:	f7ff f9d5 	bl	800fc44 <quorem>
 801089a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801089e:	9b00      	ldr	r3, [sp, #0]
 80108a0:	f805 9b01 	strb.w	r9, [r5], #1
 80108a4:	1aea      	subs	r2, r5, r3
 80108a6:	9b01      	ldr	r3, [sp, #4]
 80108a8:	4293      	cmp	r3, r2
 80108aa:	dd07      	ble.n	80108bc <_dtoa_r+0xb64>
 80108ac:	4651      	mov	r1, sl
 80108ae:	2300      	movs	r3, #0
 80108b0:	220a      	movs	r2, #10
 80108b2:	4620      	mov	r0, r4
 80108b4:	f000 fec8 	bl	8011648 <__multadd>
 80108b8:	4682      	mov	sl, r0
 80108ba:	e7ea      	b.n	8010892 <_dtoa_r+0xb3a>
 80108bc:	9b01      	ldr	r3, [sp, #4]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	bfc8      	it	gt
 80108c2:	461d      	movgt	r5, r3
 80108c4:	9b00      	ldr	r3, [sp, #0]
 80108c6:	bfd8      	it	le
 80108c8:	2501      	movle	r5, #1
 80108ca:	441d      	add	r5, r3
 80108cc:	f04f 0800 	mov.w	r8, #0
 80108d0:	4651      	mov	r1, sl
 80108d2:	2201      	movs	r2, #1
 80108d4:	4620      	mov	r0, r4
 80108d6:	f001 f8af 	bl	8011a38 <__lshift>
 80108da:	4631      	mov	r1, r6
 80108dc:	4682      	mov	sl, r0
 80108de:	f001 f917 	bl	8011b10 <__mcmp>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	dc96      	bgt.n	8010814 <_dtoa_r+0xabc>
 80108e6:	d102      	bne.n	80108ee <_dtoa_r+0xb96>
 80108e8:	f019 0f01 	tst.w	r9, #1
 80108ec:	d192      	bne.n	8010814 <_dtoa_r+0xabc>
 80108ee:	462b      	mov	r3, r5
 80108f0:	461d      	mov	r5, r3
 80108f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108f6:	2a30      	cmp	r2, #48	; 0x30
 80108f8:	d0fa      	beq.n	80108f0 <_dtoa_r+0xb98>
 80108fa:	e6dd      	b.n	80106b8 <_dtoa_r+0x960>
 80108fc:	9a00      	ldr	r2, [sp, #0]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d189      	bne.n	8010816 <_dtoa_r+0xabe>
 8010902:	f10b 0b01 	add.w	fp, fp, #1
 8010906:	2331      	movs	r3, #49	; 0x31
 8010908:	e796      	b.n	8010838 <_dtoa_r+0xae0>
 801090a:	4b0a      	ldr	r3, [pc, #40]	; (8010934 <_dtoa_r+0xbdc>)
 801090c:	f7ff ba99 	b.w	800fe42 <_dtoa_r+0xea>
 8010910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010912:	2b00      	cmp	r3, #0
 8010914:	f47f aa6d 	bne.w	800fdf2 <_dtoa_r+0x9a>
 8010918:	4b07      	ldr	r3, [pc, #28]	; (8010938 <_dtoa_r+0xbe0>)
 801091a:	f7ff ba92 	b.w	800fe42 <_dtoa_r+0xea>
 801091e:	9b01      	ldr	r3, [sp, #4]
 8010920:	2b00      	cmp	r3, #0
 8010922:	dcb5      	bgt.n	8010890 <_dtoa_r+0xb38>
 8010924:	9b07      	ldr	r3, [sp, #28]
 8010926:	2b02      	cmp	r3, #2
 8010928:	f73f aeb1 	bgt.w	801068e <_dtoa_r+0x936>
 801092c:	e7b0      	b.n	8010890 <_dtoa_r+0xb38>
 801092e:	bf00      	nop
 8010930:	080151e5 	.word	0x080151e5
 8010934:	08014fe0 	.word	0x08014fe0
 8010938:	08015169 	.word	0x08015169

0801093c <rshift>:
 801093c:	6903      	ldr	r3, [r0, #16]
 801093e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010942:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010946:	ea4f 1261 	mov.w	r2, r1, asr #5
 801094a:	f100 0414 	add.w	r4, r0, #20
 801094e:	dd45      	ble.n	80109dc <rshift+0xa0>
 8010950:	f011 011f 	ands.w	r1, r1, #31
 8010954:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010958:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801095c:	d10c      	bne.n	8010978 <rshift+0x3c>
 801095e:	f100 0710 	add.w	r7, r0, #16
 8010962:	4629      	mov	r1, r5
 8010964:	42b1      	cmp	r1, r6
 8010966:	d334      	bcc.n	80109d2 <rshift+0x96>
 8010968:	1a9b      	subs	r3, r3, r2
 801096a:	009b      	lsls	r3, r3, #2
 801096c:	1eea      	subs	r2, r5, #3
 801096e:	4296      	cmp	r6, r2
 8010970:	bf38      	it	cc
 8010972:	2300      	movcc	r3, #0
 8010974:	4423      	add	r3, r4
 8010976:	e015      	b.n	80109a4 <rshift+0x68>
 8010978:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801097c:	f1c1 0820 	rsb	r8, r1, #32
 8010980:	40cf      	lsrs	r7, r1
 8010982:	f105 0e04 	add.w	lr, r5, #4
 8010986:	46a1      	mov	r9, r4
 8010988:	4576      	cmp	r6, lr
 801098a:	46f4      	mov	ip, lr
 801098c:	d815      	bhi.n	80109ba <rshift+0x7e>
 801098e:	1a9a      	subs	r2, r3, r2
 8010990:	0092      	lsls	r2, r2, #2
 8010992:	3a04      	subs	r2, #4
 8010994:	3501      	adds	r5, #1
 8010996:	42ae      	cmp	r6, r5
 8010998:	bf38      	it	cc
 801099a:	2200      	movcc	r2, #0
 801099c:	18a3      	adds	r3, r4, r2
 801099e:	50a7      	str	r7, [r4, r2]
 80109a0:	b107      	cbz	r7, 80109a4 <rshift+0x68>
 80109a2:	3304      	adds	r3, #4
 80109a4:	1b1a      	subs	r2, r3, r4
 80109a6:	42a3      	cmp	r3, r4
 80109a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80109ac:	bf08      	it	eq
 80109ae:	2300      	moveq	r3, #0
 80109b0:	6102      	str	r2, [r0, #16]
 80109b2:	bf08      	it	eq
 80109b4:	6143      	streq	r3, [r0, #20]
 80109b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109ba:	f8dc c000 	ldr.w	ip, [ip]
 80109be:	fa0c fc08 	lsl.w	ip, ip, r8
 80109c2:	ea4c 0707 	orr.w	r7, ip, r7
 80109c6:	f849 7b04 	str.w	r7, [r9], #4
 80109ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80109ce:	40cf      	lsrs	r7, r1
 80109d0:	e7da      	b.n	8010988 <rshift+0x4c>
 80109d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80109d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80109da:	e7c3      	b.n	8010964 <rshift+0x28>
 80109dc:	4623      	mov	r3, r4
 80109de:	e7e1      	b.n	80109a4 <rshift+0x68>

080109e0 <__hexdig_fun>:
 80109e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80109e4:	2b09      	cmp	r3, #9
 80109e6:	d802      	bhi.n	80109ee <__hexdig_fun+0xe>
 80109e8:	3820      	subs	r0, #32
 80109ea:	b2c0      	uxtb	r0, r0
 80109ec:	4770      	bx	lr
 80109ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80109f2:	2b05      	cmp	r3, #5
 80109f4:	d801      	bhi.n	80109fa <__hexdig_fun+0x1a>
 80109f6:	3847      	subs	r0, #71	; 0x47
 80109f8:	e7f7      	b.n	80109ea <__hexdig_fun+0xa>
 80109fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80109fe:	2b05      	cmp	r3, #5
 8010a00:	d801      	bhi.n	8010a06 <__hexdig_fun+0x26>
 8010a02:	3827      	subs	r0, #39	; 0x27
 8010a04:	e7f1      	b.n	80109ea <__hexdig_fun+0xa>
 8010a06:	2000      	movs	r0, #0
 8010a08:	4770      	bx	lr
	...

08010a0c <__gethex>:
 8010a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a10:	4617      	mov	r7, r2
 8010a12:	680a      	ldr	r2, [r1, #0]
 8010a14:	b085      	sub	sp, #20
 8010a16:	f102 0b02 	add.w	fp, r2, #2
 8010a1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010a1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010a22:	4681      	mov	r9, r0
 8010a24:	468a      	mov	sl, r1
 8010a26:	9302      	str	r3, [sp, #8]
 8010a28:	32fe      	adds	r2, #254	; 0xfe
 8010a2a:	eb02 030b 	add.w	r3, r2, fp
 8010a2e:	46d8      	mov	r8, fp
 8010a30:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8010a34:	9301      	str	r3, [sp, #4]
 8010a36:	2830      	cmp	r0, #48	; 0x30
 8010a38:	d0f7      	beq.n	8010a2a <__gethex+0x1e>
 8010a3a:	f7ff ffd1 	bl	80109e0 <__hexdig_fun>
 8010a3e:	4604      	mov	r4, r0
 8010a40:	2800      	cmp	r0, #0
 8010a42:	d138      	bne.n	8010ab6 <__gethex+0xaa>
 8010a44:	49a7      	ldr	r1, [pc, #668]	; (8010ce4 <__gethex+0x2d8>)
 8010a46:	2201      	movs	r2, #1
 8010a48:	4640      	mov	r0, r8
 8010a4a:	f7ff f893 	bl	800fb74 <strncmp>
 8010a4e:	4606      	mov	r6, r0
 8010a50:	2800      	cmp	r0, #0
 8010a52:	d169      	bne.n	8010b28 <__gethex+0x11c>
 8010a54:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010a58:	465d      	mov	r5, fp
 8010a5a:	f7ff ffc1 	bl	80109e0 <__hexdig_fun>
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d064      	beq.n	8010b2c <__gethex+0x120>
 8010a62:	465a      	mov	r2, fp
 8010a64:	7810      	ldrb	r0, [r2, #0]
 8010a66:	2830      	cmp	r0, #48	; 0x30
 8010a68:	4690      	mov	r8, r2
 8010a6a:	f102 0201 	add.w	r2, r2, #1
 8010a6e:	d0f9      	beq.n	8010a64 <__gethex+0x58>
 8010a70:	f7ff ffb6 	bl	80109e0 <__hexdig_fun>
 8010a74:	2301      	movs	r3, #1
 8010a76:	fab0 f480 	clz	r4, r0
 8010a7a:	0964      	lsrs	r4, r4, #5
 8010a7c:	465e      	mov	r6, fp
 8010a7e:	9301      	str	r3, [sp, #4]
 8010a80:	4642      	mov	r2, r8
 8010a82:	4615      	mov	r5, r2
 8010a84:	3201      	adds	r2, #1
 8010a86:	7828      	ldrb	r0, [r5, #0]
 8010a88:	f7ff ffaa 	bl	80109e0 <__hexdig_fun>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	d1f8      	bne.n	8010a82 <__gethex+0x76>
 8010a90:	4994      	ldr	r1, [pc, #592]	; (8010ce4 <__gethex+0x2d8>)
 8010a92:	2201      	movs	r2, #1
 8010a94:	4628      	mov	r0, r5
 8010a96:	f7ff f86d 	bl	800fb74 <strncmp>
 8010a9a:	b978      	cbnz	r0, 8010abc <__gethex+0xb0>
 8010a9c:	b946      	cbnz	r6, 8010ab0 <__gethex+0xa4>
 8010a9e:	1c6e      	adds	r6, r5, #1
 8010aa0:	4632      	mov	r2, r6
 8010aa2:	4615      	mov	r5, r2
 8010aa4:	3201      	adds	r2, #1
 8010aa6:	7828      	ldrb	r0, [r5, #0]
 8010aa8:	f7ff ff9a 	bl	80109e0 <__hexdig_fun>
 8010aac:	2800      	cmp	r0, #0
 8010aae:	d1f8      	bne.n	8010aa2 <__gethex+0x96>
 8010ab0:	1b73      	subs	r3, r6, r5
 8010ab2:	009e      	lsls	r6, r3, #2
 8010ab4:	e004      	b.n	8010ac0 <__gethex+0xb4>
 8010ab6:	2400      	movs	r4, #0
 8010ab8:	4626      	mov	r6, r4
 8010aba:	e7e1      	b.n	8010a80 <__gethex+0x74>
 8010abc:	2e00      	cmp	r6, #0
 8010abe:	d1f7      	bne.n	8010ab0 <__gethex+0xa4>
 8010ac0:	782b      	ldrb	r3, [r5, #0]
 8010ac2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010ac6:	2b50      	cmp	r3, #80	; 0x50
 8010ac8:	d13d      	bne.n	8010b46 <__gethex+0x13a>
 8010aca:	786b      	ldrb	r3, [r5, #1]
 8010acc:	2b2b      	cmp	r3, #43	; 0x2b
 8010ace:	d02f      	beq.n	8010b30 <__gethex+0x124>
 8010ad0:	2b2d      	cmp	r3, #45	; 0x2d
 8010ad2:	d031      	beq.n	8010b38 <__gethex+0x12c>
 8010ad4:	1c69      	adds	r1, r5, #1
 8010ad6:	f04f 0b00 	mov.w	fp, #0
 8010ada:	7808      	ldrb	r0, [r1, #0]
 8010adc:	f7ff ff80 	bl	80109e0 <__hexdig_fun>
 8010ae0:	1e42      	subs	r2, r0, #1
 8010ae2:	b2d2      	uxtb	r2, r2
 8010ae4:	2a18      	cmp	r2, #24
 8010ae6:	d82e      	bhi.n	8010b46 <__gethex+0x13a>
 8010ae8:	f1a0 0210 	sub.w	r2, r0, #16
 8010aec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010af0:	f7ff ff76 	bl	80109e0 <__hexdig_fun>
 8010af4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8010af8:	fa5f fc8c 	uxtb.w	ip, ip
 8010afc:	f1bc 0f18 	cmp.w	ip, #24
 8010b00:	d91d      	bls.n	8010b3e <__gethex+0x132>
 8010b02:	f1bb 0f00 	cmp.w	fp, #0
 8010b06:	d000      	beq.n	8010b0a <__gethex+0xfe>
 8010b08:	4252      	negs	r2, r2
 8010b0a:	4416      	add	r6, r2
 8010b0c:	f8ca 1000 	str.w	r1, [sl]
 8010b10:	b1dc      	cbz	r4, 8010b4a <__gethex+0x13e>
 8010b12:	9b01      	ldr	r3, [sp, #4]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	bf14      	ite	ne
 8010b18:	f04f 0800 	movne.w	r8, #0
 8010b1c:	f04f 0806 	moveq.w	r8, #6
 8010b20:	4640      	mov	r0, r8
 8010b22:	b005      	add	sp, #20
 8010b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b28:	4645      	mov	r5, r8
 8010b2a:	4626      	mov	r6, r4
 8010b2c:	2401      	movs	r4, #1
 8010b2e:	e7c7      	b.n	8010ac0 <__gethex+0xb4>
 8010b30:	f04f 0b00 	mov.w	fp, #0
 8010b34:	1ca9      	adds	r1, r5, #2
 8010b36:	e7d0      	b.n	8010ada <__gethex+0xce>
 8010b38:	f04f 0b01 	mov.w	fp, #1
 8010b3c:	e7fa      	b.n	8010b34 <__gethex+0x128>
 8010b3e:	230a      	movs	r3, #10
 8010b40:	fb03 0002 	mla	r0, r3, r2, r0
 8010b44:	e7d0      	b.n	8010ae8 <__gethex+0xdc>
 8010b46:	4629      	mov	r1, r5
 8010b48:	e7e0      	b.n	8010b0c <__gethex+0x100>
 8010b4a:	eba5 0308 	sub.w	r3, r5, r8
 8010b4e:	3b01      	subs	r3, #1
 8010b50:	4621      	mov	r1, r4
 8010b52:	2b07      	cmp	r3, #7
 8010b54:	dc0a      	bgt.n	8010b6c <__gethex+0x160>
 8010b56:	4648      	mov	r0, r9
 8010b58:	f000 fd14 	bl	8011584 <_Balloc>
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	b940      	cbnz	r0, 8010b72 <__gethex+0x166>
 8010b60:	4b61      	ldr	r3, [pc, #388]	; (8010ce8 <__gethex+0x2dc>)
 8010b62:	4602      	mov	r2, r0
 8010b64:	21e4      	movs	r1, #228	; 0xe4
 8010b66:	4861      	ldr	r0, [pc, #388]	; (8010cec <__gethex+0x2e0>)
 8010b68:	f001 faa8 	bl	80120bc <__assert_func>
 8010b6c:	3101      	adds	r1, #1
 8010b6e:	105b      	asrs	r3, r3, #1
 8010b70:	e7ef      	b.n	8010b52 <__gethex+0x146>
 8010b72:	f100 0a14 	add.w	sl, r0, #20
 8010b76:	2300      	movs	r3, #0
 8010b78:	495a      	ldr	r1, [pc, #360]	; (8010ce4 <__gethex+0x2d8>)
 8010b7a:	f8cd a004 	str.w	sl, [sp, #4]
 8010b7e:	469b      	mov	fp, r3
 8010b80:	45a8      	cmp	r8, r5
 8010b82:	d342      	bcc.n	8010c0a <__gethex+0x1fe>
 8010b84:	9801      	ldr	r0, [sp, #4]
 8010b86:	f840 bb04 	str.w	fp, [r0], #4
 8010b8a:	eba0 000a 	sub.w	r0, r0, sl
 8010b8e:	1080      	asrs	r0, r0, #2
 8010b90:	6120      	str	r0, [r4, #16]
 8010b92:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8010b96:	4658      	mov	r0, fp
 8010b98:	f000 fde6 	bl	8011768 <__hi0bits>
 8010b9c:	683d      	ldr	r5, [r7, #0]
 8010b9e:	eba8 0000 	sub.w	r0, r8, r0
 8010ba2:	42a8      	cmp	r0, r5
 8010ba4:	dd59      	ble.n	8010c5a <__gethex+0x24e>
 8010ba6:	eba0 0805 	sub.w	r8, r0, r5
 8010baa:	4641      	mov	r1, r8
 8010bac:	4620      	mov	r0, r4
 8010bae:	f001 f975 	bl	8011e9c <__any_on>
 8010bb2:	4683      	mov	fp, r0
 8010bb4:	b1b8      	cbz	r0, 8010be6 <__gethex+0x1da>
 8010bb6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8010bba:	1159      	asrs	r1, r3, #5
 8010bbc:	f003 021f 	and.w	r2, r3, #31
 8010bc0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010bc4:	f04f 0b01 	mov.w	fp, #1
 8010bc8:	fa0b f202 	lsl.w	r2, fp, r2
 8010bcc:	420a      	tst	r2, r1
 8010bce:	d00a      	beq.n	8010be6 <__gethex+0x1da>
 8010bd0:	455b      	cmp	r3, fp
 8010bd2:	dd06      	ble.n	8010be2 <__gethex+0x1d6>
 8010bd4:	f1a8 0102 	sub.w	r1, r8, #2
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f001 f95f 	bl	8011e9c <__any_on>
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d138      	bne.n	8010c54 <__gethex+0x248>
 8010be2:	f04f 0b02 	mov.w	fp, #2
 8010be6:	4641      	mov	r1, r8
 8010be8:	4620      	mov	r0, r4
 8010bea:	f7ff fea7 	bl	801093c <rshift>
 8010bee:	4446      	add	r6, r8
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	42b3      	cmp	r3, r6
 8010bf4:	da41      	bge.n	8010c7a <__gethex+0x26e>
 8010bf6:	4621      	mov	r1, r4
 8010bf8:	4648      	mov	r0, r9
 8010bfa:	f000 fd03 	bl	8011604 <_Bfree>
 8010bfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c00:	2300      	movs	r3, #0
 8010c02:	6013      	str	r3, [r2, #0]
 8010c04:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8010c08:	e78a      	b.n	8010b20 <__gethex+0x114>
 8010c0a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8010c0e:	2a2e      	cmp	r2, #46	; 0x2e
 8010c10:	d014      	beq.n	8010c3c <__gethex+0x230>
 8010c12:	2b20      	cmp	r3, #32
 8010c14:	d106      	bne.n	8010c24 <__gethex+0x218>
 8010c16:	9b01      	ldr	r3, [sp, #4]
 8010c18:	f843 bb04 	str.w	fp, [r3], #4
 8010c1c:	f04f 0b00 	mov.w	fp, #0
 8010c20:	9301      	str	r3, [sp, #4]
 8010c22:	465b      	mov	r3, fp
 8010c24:	7828      	ldrb	r0, [r5, #0]
 8010c26:	9303      	str	r3, [sp, #12]
 8010c28:	f7ff feda 	bl	80109e0 <__hexdig_fun>
 8010c2c:	9b03      	ldr	r3, [sp, #12]
 8010c2e:	f000 000f 	and.w	r0, r0, #15
 8010c32:	4098      	lsls	r0, r3
 8010c34:	ea4b 0b00 	orr.w	fp, fp, r0
 8010c38:	3304      	adds	r3, #4
 8010c3a:	e7a1      	b.n	8010b80 <__gethex+0x174>
 8010c3c:	45a8      	cmp	r8, r5
 8010c3e:	d8e8      	bhi.n	8010c12 <__gethex+0x206>
 8010c40:	2201      	movs	r2, #1
 8010c42:	4628      	mov	r0, r5
 8010c44:	9303      	str	r3, [sp, #12]
 8010c46:	f7fe ff95 	bl	800fb74 <strncmp>
 8010c4a:	4926      	ldr	r1, [pc, #152]	; (8010ce4 <__gethex+0x2d8>)
 8010c4c:	9b03      	ldr	r3, [sp, #12]
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	d1df      	bne.n	8010c12 <__gethex+0x206>
 8010c52:	e795      	b.n	8010b80 <__gethex+0x174>
 8010c54:	f04f 0b03 	mov.w	fp, #3
 8010c58:	e7c5      	b.n	8010be6 <__gethex+0x1da>
 8010c5a:	da0b      	bge.n	8010c74 <__gethex+0x268>
 8010c5c:	eba5 0800 	sub.w	r8, r5, r0
 8010c60:	4621      	mov	r1, r4
 8010c62:	4642      	mov	r2, r8
 8010c64:	4648      	mov	r0, r9
 8010c66:	f000 fee7 	bl	8011a38 <__lshift>
 8010c6a:	eba6 0608 	sub.w	r6, r6, r8
 8010c6e:	4604      	mov	r4, r0
 8010c70:	f100 0a14 	add.w	sl, r0, #20
 8010c74:	f04f 0b00 	mov.w	fp, #0
 8010c78:	e7ba      	b.n	8010bf0 <__gethex+0x1e4>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	42b3      	cmp	r3, r6
 8010c7e:	dd73      	ble.n	8010d68 <__gethex+0x35c>
 8010c80:	1b9e      	subs	r6, r3, r6
 8010c82:	42b5      	cmp	r5, r6
 8010c84:	dc34      	bgt.n	8010cf0 <__gethex+0x2e4>
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	2b02      	cmp	r3, #2
 8010c8a:	d023      	beq.n	8010cd4 <__gethex+0x2c8>
 8010c8c:	2b03      	cmp	r3, #3
 8010c8e:	d025      	beq.n	8010cdc <__gethex+0x2d0>
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d115      	bne.n	8010cc0 <__gethex+0x2b4>
 8010c94:	42b5      	cmp	r5, r6
 8010c96:	d113      	bne.n	8010cc0 <__gethex+0x2b4>
 8010c98:	2d01      	cmp	r5, #1
 8010c9a:	d10b      	bne.n	8010cb4 <__gethex+0x2a8>
 8010c9c:	9a02      	ldr	r2, [sp, #8]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6013      	str	r3, [r2, #0]
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	6123      	str	r3, [r4, #16]
 8010ca6:	f8ca 3000 	str.w	r3, [sl]
 8010caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cac:	f04f 0862 	mov.w	r8, #98	; 0x62
 8010cb0:	601c      	str	r4, [r3, #0]
 8010cb2:	e735      	b.n	8010b20 <__gethex+0x114>
 8010cb4:	1e69      	subs	r1, r5, #1
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f001 f8f0 	bl	8011e9c <__any_on>
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d1ed      	bne.n	8010c9c <__gethex+0x290>
 8010cc0:	4621      	mov	r1, r4
 8010cc2:	4648      	mov	r0, r9
 8010cc4:	f000 fc9e 	bl	8011604 <_Bfree>
 8010cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010cca:	2300      	movs	r3, #0
 8010ccc:	6013      	str	r3, [r2, #0]
 8010cce:	f04f 0850 	mov.w	r8, #80	; 0x50
 8010cd2:	e725      	b.n	8010b20 <__gethex+0x114>
 8010cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d1f2      	bne.n	8010cc0 <__gethex+0x2b4>
 8010cda:	e7df      	b.n	8010c9c <__gethex+0x290>
 8010cdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d1dc      	bne.n	8010c9c <__gethex+0x290>
 8010ce2:	e7ed      	b.n	8010cc0 <__gethex+0x2b4>
 8010ce4:	08015009 	.word	0x08015009
 8010ce8:	080151e5 	.word	0x080151e5
 8010cec:	080151f6 	.word	0x080151f6
 8010cf0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8010cf4:	f1bb 0f00 	cmp.w	fp, #0
 8010cf8:	d133      	bne.n	8010d62 <__gethex+0x356>
 8010cfa:	f1b8 0f00 	cmp.w	r8, #0
 8010cfe:	d004      	beq.n	8010d0a <__gethex+0x2fe>
 8010d00:	4641      	mov	r1, r8
 8010d02:	4620      	mov	r0, r4
 8010d04:	f001 f8ca 	bl	8011e9c <__any_on>
 8010d08:	4683      	mov	fp, r0
 8010d0a:	ea4f 1268 	mov.w	r2, r8, asr #5
 8010d0e:	2301      	movs	r3, #1
 8010d10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010d14:	f008 081f 	and.w	r8, r8, #31
 8010d18:	fa03 f308 	lsl.w	r3, r3, r8
 8010d1c:	4213      	tst	r3, r2
 8010d1e:	4631      	mov	r1, r6
 8010d20:	4620      	mov	r0, r4
 8010d22:	bf18      	it	ne
 8010d24:	f04b 0b02 	orrne.w	fp, fp, #2
 8010d28:	1bad      	subs	r5, r5, r6
 8010d2a:	f7ff fe07 	bl	801093c <rshift>
 8010d2e:	687e      	ldr	r6, [r7, #4]
 8010d30:	f04f 0802 	mov.w	r8, #2
 8010d34:	f1bb 0f00 	cmp.w	fp, #0
 8010d38:	d04a      	beq.n	8010dd0 <__gethex+0x3c4>
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2b02      	cmp	r3, #2
 8010d3e:	d016      	beq.n	8010d6e <__gethex+0x362>
 8010d40:	2b03      	cmp	r3, #3
 8010d42:	d018      	beq.n	8010d76 <__gethex+0x36a>
 8010d44:	2b01      	cmp	r3, #1
 8010d46:	d109      	bne.n	8010d5c <__gethex+0x350>
 8010d48:	f01b 0f02 	tst.w	fp, #2
 8010d4c:	d006      	beq.n	8010d5c <__gethex+0x350>
 8010d4e:	f8da 3000 	ldr.w	r3, [sl]
 8010d52:	ea4b 0b03 	orr.w	fp, fp, r3
 8010d56:	f01b 0f01 	tst.w	fp, #1
 8010d5a:	d10f      	bne.n	8010d7c <__gethex+0x370>
 8010d5c:	f048 0810 	orr.w	r8, r8, #16
 8010d60:	e036      	b.n	8010dd0 <__gethex+0x3c4>
 8010d62:	f04f 0b01 	mov.w	fp, #1
 8010d66:	e7d0      	b.n	8010d0a <__gethex+0x2fe>
 8010d68:	f04f 0801 	mov.w	r8, #1
 8010d6c:	e7e2      	b.n	8010d34 <__gethex+0x328>
 8010d6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d70:	f1c3 0301 	rsb	r3, r3, #1
 8010d74:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d0ef      	beq.n	8010d5c <__gethex+0x350>
 8010d7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010d80:	f104 0214 	add.w	r2, r4, #20
 8010d84:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010d88:	9301      	str	r3, [sp, #4]
 8010d8a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8010d8e:	2300      	movs	r3, #0
 8010d90:	4694      	mov	ip, r2
 8010d92:	f852 1b04 	ldr.w	r1, [r2], #4
 8010d96:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8010d9a:	d01e      	beq.n	8010dda <__gethex+0x3ce>
 8010d9c:	3101      	adds	r1, #1
 8010d9e:	f8cc 1000 	str.w	r1, [ip]
 8010da2:	f1b8 0f02 	cmp.w	r8, #2
 8010da6:	f104 0214 	add.w	r2, r4, #20
 8010daa:	d13d      	bne.n	8010e28 <__gethex+0x41c>
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	3b01      	subs	r3, #1
 8010db0:	42ab      	cmp	r3, r5
 8010db2:	d10b      	bne.n	8010dcc <__gethex+0x3c0>
 8010db4:	1169      	asrs	r1, r5, #5
 8010db6:	2301      	movs	r3, #1
 8010db8:	f005 051f 	and.w	r5, r5, #31
 8010dbc:	fa03 f505 	lsl.w	r5, r3, r5
 8010dc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010dc4:	421d      	tst	r5, r3
 8010dc6:	bf18      	it	ne
 8010dc8:	f04f 0801 	movne.w	r8, #1
 8010dcc:	f048 0820 	orr.w	r8, r8, #32
 8010dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dd2:	601c      	str	r4, [r3, #0]
 8010dd4:	9b02      	ldr	r3, [sp, #8]
 8010dd6:	601e      	str	r6, [r3, #0]
 8010dd8:	e6a2      	b.n	8010b20 <__gethex+0x114>
 8010dda:	4290      	cmp	r0, r2
 8010ddc:	f842 3c04 	str.w	r3, [r2, #-4]
 8010de0:	d8d6      	bhi.n	8010d90 <__gethex+0x384>
 8010de2:	68a2      	ldr	r2, [r4, #8]
 8010de4:	4593      	cmp	fp, r2
 8010de6:	db17      	blt.n	8010e18 <__gethex+0x40c>
 8010de8:	6861      	ldr	r1, [r4, #4]
 8010dea:	4648      	mov	r0, r9
 8010dec:	3101      	adds	r1, #1
 8010dee:	f000 fbc9 	bl	8011584 <_Balloc>
 8010df2:	4682      	mov	sl, r0
 8010df4:	b918      	cbnz	r0, 8010dfe <__gethex+0x3f2>
 8010df6:	4b1b      	ldr	r3, [pc, #108]	; (8010e64 <__gethex+0x458>)
 8010df8:	4602      	mov	r2, r0
 8010dfa:	2184      	movs	r1, #132	; 0x84
 8010dfc:	e6b3      	b.n	8010b66 <__gethex+0x15a>
 8010dfe:	6922      	ldr	r2, [r4, #16]
 8010e00:	3202      	adds	r2, #2
 8010e02:	f104 010c 	add.w	r1, r4, #12
 8010e06:	0092      	lsls	r2, r2, #2
 8010e08:	300c      	adds	r0, #12
 8010e0a:	f7fe fefd 	bl	800fc08 <memcpy>
 8010e0e:	4621      	mov	r1, r4
 8010e10:	4648      	mov	r0, r9
 8010e12:	f000 fbf7 	bl	8011604 <_Bfree>
 8010e16:	4654      	mov	r4, sl
 8010e18:	6922      	ldr	r2, [r4, #16]
 8010e1a:	1c51      	adds	r1, r2, #1
 8010e1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010e20:	6121      	str	r1, [r4, #16]
 8010e22:	2101      	movs	r1, #1
 8010e24:	6151      	str	r1, [r2, #20]
 8010e26:	e7bc      	b.n	8010da2 <__gethex+0x396>
 8010e28:	6921      	ldr	r1, [r4, #16]
 8010e2a:	4559      	cmp	r1, fp
 8010e2c:	dd0b      	ble.n	8010e46 <__gethex+0x43a>
 8010e2e:	2101      	movs	r1, #1
 8010e30:	4620      	mov	r0, r4
 8010e32:	f7ff fd83 	bl	801093c <rshift>
 8010e36:	68bb      	ldr	r3, [r7, #8]
 8010e38:	3601      	adds	r6, #1
 8010e3a:	42b3      	cmp	r3, r6
 8010e3c:	f6ff aedb 	blt.w	8010bf6 <__gethex+0x1ea>
 8010e40:	f04f 0801 	mov.w	r8, #1
 8010e44:	e7c2      	b.n	8010dcc <__gethex+0x3c0>
 8010e46:	f015 051f 	ands.w	r5, r5, #31
 8010e4a:	d0f9      	beq.n	8010e40 <__gethex+0x434>
 8010e4c:	9b01      	ldr	r3, [sp, #4]
 8010e4e:	441a      	add	r2, r3
 8010e50:	f1c5 0520 	rsb	r5, r5, #32
 8010e54:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8010e58:	f000 fc86 	bl	8011768 <__hi0bits>
 8010e5c:	42a8      	cmp	r0, r5
 8010e5e:	dbe6      	blt.n	8010e2e <__gethex+0x422>
 8010e60:	e7ee      	b.n	8010e40 <__gethex+0x434>
 8010e62:	bf00      	nop
 8010e64:	080151e5 	.word	0x080151e5

08010e68 <L_shift>:
 8010e68:	f1c2 0208 	rsb	r2, r2, #8
 8010e6c:	0092      	lsls	r2, r2, #2
 8010e6e:	b570      	push	{r4, r5, r6, lr}
 8010e70:	f1c2 0620 	rsb	r6, r2, #32
 8010e74:	6843      	ldr	r3, [r0, #4]
 8010e76:	6804      	ldr	r4, [r0, #0]
 8010e78:	fa03 f506 	lsl.w	r5, r3, r6
 8010e7c:	432c      	orrs	r4, r5
 8010e7e:	40d3      	lsrs	r3, r2
 8010e80:	6004      	str	r4, [r0, #0]
 8010e82:	f840 3f04 	str.w	r3, [r0, #4]!
 8010e86:	4288      	cmp	r0, r1
 8010e88:	d3f4      	bcc.n	8010e74 <L_shift+0xc>
 8010e8a:	bd70      	pop	{r4, r5, r6, pc}

08010e8c <__match>:
 8010e8c:	b530      	push	{r4, r5, lr}
 8010e8e:	6803      	ldr	r3, [r0, #0]
 8010e90:	3301      	adds	r3, #1
 8010e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e96:	b914      	cbnz	r4, 8010e9e <__match+0x12>
 8010e98:	6003      	str	r3, [r0, #0]
 8010e9a:	2001      	movs	r0, #1
 8010e9c:	bd30      	pop	{r4, r5, pc}
 8010e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ea2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010ea6:	2d19      	cmp	r5, #25
 8010ea8:	bf98      	it	ls
 8010eaa:	3220      	addls	r2, #32
 8010eac:	42a2      	cmp	r2, r4
 8010eae:	d0f0      	beq.n	8010e92 <__match+0x6>
 8010eb0:	2000      	movs	r0, #0
 8010eb2:	e7f3      	b.n	8010e9c <__match+0x10>

08010eb4 <__hexnan>:
 8010eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb8:	680b      	ldr	r3, [r1, #0]
 8010eba:	6801      	ldr	r1, [r0, #0]
 8010ebc:	115e      	asrs	r6, r3, #5
 8010ebe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ec2:	f013 031f 	ands.w	r3, r3, #31
 8010ec6:	b087      	sub	sp, #28
 8010ec8:	bf18      	it	ne
 8010eca:	3604      	addne	r6, #4
 8010ecc:	2500      	movs	r5, #0
 8010ece:	1f37      	subs	r7, r6, #4
 8010ed0:	4682      	mov	sl, r0
 8010ed2:	4690      	mov	r8, r2
 8010ed4:	9301      	str	r3, [sp, #4]
 8010ed6:	f846 5c04 	str.w	r5, [r6, #-4]
 8010eda:	46b9      	mov	r9, r7
 8010edc:	463c      	mov	r4, r7
 8010ede:	9502      	str	r5, [sp, #8]
 8010ee0:	46ab      	mov	fp, r5
 8010ee2:	784a      	ldrb	r2, [r1, #1]
 8010ee4:	1c4b      	adds	r3, r1, #1
 8010ee6:	9303      	str	r3, [sp, #12]
 8010ee8:	b342      	cbz	r2, 8010f3c <__hexnan+0x88>
 8010eea:	4610      	mov	r0, r2
 8010eec:	9105      	str	r1, [sp, #20]
 8010eee:	9204      	str	r2, [sp, #16]
 8010ef0:	f7ff fd76 	bl	80109e0 <__hexdig_fun>
 8010ef4:	2800      	cmp	r0, #0
 8010ef6:	d14f      	bne.n	8010f98 <__hexnan+0xe4>
 8010ef8:	9a04      	ldr	r2, [sp, #16]
 8010efa:	9905      	ldr	r1, [sp, #20]
 8010efc:	2a20      	cmp	r2, #32
 8010efe:	d818      	bhi.n	8010f32 <__hexnan+0x7e>
 8010f00:	9b02      	ldr	r3, [sp, #8]
 8010f02:	459b      	cmp	fp, r3
 8010f04:	dd13      	ble.n	8010f2e <__hexnan+0x7a>
 8010f06:	454c      	cmp	r4, r9
 8010f08:	d206      	bcs.n	8010f18 <__hexnan+0x64>
 8010f0a:	2d07      	cmp	r5, #7
 8010f0c:	dc04      	bgt.n	8010f18 <__hexnan+0x64>
 8010f0e:	462a      	mov	r2, r5
 8010f10:	4649      	mov	r1, r9
 8010f12:	4620      	mov	r0, r4
 8010f14:	f7ff ffa8 	bl	8010e68 <L_shift>
 8010f18:	4544      	cmp	r4, r8
 8010f1a:	d950      	bls.n	8010fbe <__hexnan+0x10a>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	f1a4 0904 	sub.w	r9, r4, #4
 8010f22:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f26:	f8cd b008 	str.w	fp, [sp, #8]
 8010f2a:	464c      	mov	r4, r9
 8010f2c:	461d      	mov	r5, r3
 8010f2e:	9903      	ldr	r1, [sp, #12]
 8010f30:	e7d7      	b.n	8010ee2 <__hexnan+0x2e>
 8010f32:	2a29      	cmp	r2, #41	; 0x29
 8010f34:	d155      	bne.n	8010fe2 <__hexnan+0x12e>
 8010f36:	3102      	adds	r1, #2
 8010f38:	f8ca 1000 	str.w	r1, [sl]
 8010f3c:	f1bb 0f00 	cmp.w	fp, #0
 8010f40:	d04f      	beq.n	8010fe2 <__hexnan+0x12e>
 8010f42:	454c      	cmp	r4, r9
 8010f44:	d206      	bcs.n	8010f54 <__hexnan+0xa0>
 8010f46:	2d07      	cmp	r5, #7
 8010f48:	dc04      	bgt.n	8010f54 <__hexnan+0xa0>
 8010f4a:	462a      	mov	r2, r5
 8010f4c:	4649      	mov	r1, r9
 8010f4e:	4620      	mov	r0, r4
 8010f50:	f7ff ff8a 	bl	8010e68 <L_shift>
 8010f54:	4544      	cmp	r4, r8
 8010f56:	d934      	bls.n	8010fc2 <__hexnan+0x10e>
 8010f58:	f1a8 0204 	sub.w	r2, r8, #4
 8010f5c:	4623      	mov	r3, r4
 8010f5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010f62:	f842 1f04 	str.w	r1, [r2, #4]!
 8010f66:	429f      	cmp	r7, r3
 8010f68:	d2f9      	bcs.n	8010f5e <__hexnan+0xaa>
 8010f6a:	1b3b      	subs	r3, r7, r4
 8010f6c:	f023 0303 	bic.w	r3, r3, #3
 8010f70:	3304      	adds	r3, #4
 8010f72:	3e03      	subs	r6, #3
 8010f74:	3401      	adds	r4, #1
 8010f76:	42a6      	cmp	r6, r4
 8010f78:	bf38      	it	cc
 8010f7a:	2304      	movcc	r3, #4
 8010f7c:	4443      	add	r3, r8
 8010f7e:	2200      	movs	r2, #0
 8010f80:	f843 2b04 	str.w	r2, [r3], #4
 8010f84:	429f      	cmp	r7, r3
 8010f86:	d2fb      	bcs.n	8010f80 <__hexnan+0xcc>
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	b91b      	cbnz	r3, 8010f94 <__hexnan+0xe0>
 8010f8c:	4547      	cmp	r7, r8
 8010f8e:	d126      	bne.n	8010fde <__hexnan+0x12a>
 8010f90:	2301      	movs	r3, #1
 8010f92:	603b      	str	r3, [r7, #0]
 8010f94:	2005      	movs	r0, #5
 8010f96:	e025      	b.n	8010fe4 <__hexnan+0x130>
 8010f98:	3501      	adds	r5, #1
 8010f9a:	2d08      	cmp	r5, #8
 8010f9c:	f10b 0b01 	add.w	fp, fp, #1
 8010fa0:	dd06      	ble.n	8010fb0 <__hexnan+0xfc>
 8010fa2:	4544      	cmp	r4, r8
 8010fa4:	d9c3      	bls.n	8010f2e <__hexnan+0x7a>
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fac:	2501      	movs	r5, #1
 8010fae:	3c04      	subs	r4, #4
 8010fb0:	6822      	ldr	r2, [r4, #0]
 8010fb2:	f000 000f 	and.w	r0, r0, #15
 8010fb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010fba:	6020      	str	r0, [r4, #0]
 8010fbc:	e7b7      	b.n	8010f2e <__hexnan+0x7a>
 8010fbe:	2508      	movs	r5, #8
 8010fc0:	e7b5      	b.n	8010f2e <__hexnan+0x7a>
 8010fc2:	9b01      	ldr	r3, [sp, #4]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d0df      	beq.n	8010f88 <__hexnan+0xd4>
 8010fc8:	f1c3 0320 	rsb	r3, r3, #32
 8010fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010fd0:	40da      	lsrs	r2, r3
 8010fd2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010fd6:	4013      	ands	r3, r2
 8010fd8:	f846 3c04 	str.w	r3, [r6, #-4]
 8010fdc:	e7d4      	b.n	8010f88 <__hexnan+0xd4>
 8010fde:	3f04      	subs	r7, #4
 8010fe0:	e7d2      	b.n	8010f88 <__hexnan+0xd4>
 8010fe2:	2004      	movs	r0, #4
 8010fe4:	b007      	add	sp, #28
 8010fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010fea <__ssputs_r>:
 8010fea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fee:	688e      	ldr	r6, [r1, #8]
 8010ff0:	461f      	mov	r7, r3
 8010ff2:	42be      	cmp	r6, r7
 8010ff4:	680b      	ldr	r3, [r1, #0]
 8010ff6:	4682      	mov	sl, r0
 8010ff8:	460c      	mov	r4, r1
 8010ffa:	4690      	mov	r8, r2
 8010ffc:	d82c      	bhi.n	8011058 <__ssputs_r+0x6e>
 8010ffe:	898a      	ldrh	r2, [r1, #12]
 8011000:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011004:	d026      	beq.n	8011054 <__ssputs_r+0x6a>
 8011006:	6965      	ldr	r5, [r4, #20]
 8011008:	6909      	ldr	r1, [r1, #16]
 801100a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801100e:	eba3 0901 	sub.w	r9, r3, r1
 8011012:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011016:	1c7b      	adds	r3, r7, #1
 8011018:	444b      	add	r3, r9
 801101a:	106d      	asrs	r5, r5, #1
 801101c:	429d      	cmp	r5, r3
 801101e:	bf38      	it	cc
 8011020:	461d      	movcc	r5, r3
 8011022:	0553      	lsls	r3, r2, #21
 8011024:	d527      	bpl.n	8011076 <__ssputs_r+0x8c>
 8011026:	4629      	mov	r1, r5
 8011028:	f000 f960 	bl	80112ec <_malloc_r>
 801102c:	4606      	mov	r6, r0
 801102e:	b360      	cbz	r0, 801108a <__ssputs_r+0xa0>
 8011030:	6921      	ldr	r1, [r4, #16]
 8011032:	464a      	mov	r2, r9
 8011034:	f7fe fde8 	bl	800fc08 <memcpy>
 8011038:	89a3      	ldrh	r3, [r4, #12]
 801103a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801103e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011042:	81a3      	strh	r3, [r4, #12]
 8011044:	6126      	str	r6, [r4, #16]
 8011046:	6165      	str	r5, [r4, #20]
 8011048:	444e      	add	r6, r9
 801104a:	eba5 0509 	sub.w	r5, r5, r9
 801104e:	6026      	str	r6, [r4, #0]
 8011050:	60a5      	str	r5, [r4, #8]
 8011052:	463e      	mov	r6, r7
 8011054:	42be      	cmp	r6, r7
 8011056:	d900      	bls.n	801105a <__ssputs_r+0x70>
 8011058:	463e      	mov	r6, r7
 801105a:	6820      	ldr	r0, [r4, #0]
 801105c:	4632      	mov	r2, r6
 801105e:	4641      	mov	r1, r8
 8011060:	f000 ffbc 	bl	8011fdc <memmove>
 8011064:	68a3      	ldr	r3, [r4, #8]
 8011066:	1b9b      	subs	r3, r3, r6
 8011068:	60a3      	str	r3, [r4, #8]
 801106a:	6823      	ldr	r3, [r4, #0]
 801106c:	4433      	add	r3, r6
 801106e:	6023      	str	r3, [r4, #0]
 8011070:	2000      	movs	r0, #0
 8011072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011076:	462a      	mov	r2, r5
 8011078:	f000 ff74 	bl	8011f64 <_realloc_r>
 801107c:	4606      	mov	r6, r0
 801107e:	2800      	cmp	r0, #0
 8011080:	d1e0      	bne.n	8011044 <__ssputs_r+0x5a>
 8011082:	6921      	ldr	r1, [r4, #16]
 8011084:	4650      	mov	r0, sl
 8011086:	f001 f84d 	bl	8012124 <_free_r>
 801108a:	230c      	movs	r3, #12
 801108c:	f8ca 3000 	str.w	r3, [sl]
 8011090:	89a3      	ldrh	r3, [r4, #12]
 8011092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011096:	81a3      	strh	r3, [r4, #12]
 8011098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801109c:	e7e9      	b.n	8011072 <__ssputs_r+0x88>
	...

080110a0 <_svfiprintf_r>:
 80110a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110a4:	4698      	mov	r8, r3
 80110a6:	898b      	ldrh	r3, [r1, #12]
 80110a8:	061b      	lsls	r3, r3, #24
 80110aa:	b09d      	sub	sp, #116	; 0x74
 80110ac:	4607      	mov	r7, r0
 80110ae:	460d      	mov	r5, r1
 80110b0:	4614      	mov	r4, r2
 80110b2:	d50e      	bpl.n	80110d2 <_svfiprintf_r+0x32>
 80110b4:	690b      	ldr	r3, [r1, #16]
 80110b6:	b963      	cbnz	r3, 80110d2 <_svfiprintf_r+0x32>
 80110b8:	2140      	movs	r1, #64	; 0x40
 80110ba:	f000 f917 	bl	80112ec <_malloc_r>
 80110be:	6028      	str	r0, [r5, #0]
 80110c0:	6128      	str	r0, [r5, #16]
 80110c2:	b920      	cbnz	r0, 80110ce <_svfiprintf_r+0x2e>
 80110c4:	230c      	movs	r3, #12
 80110c6:	603b      	str	r3, [r7, #0]
 80110c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80110cc:	e0d0      	b.n	8011270 <_svfiprintf_r+0x1d0>
 80110ce:	2340      	movs	r3, #64	; 0x40
 80110d0:	616b      	str	r3, [r5, #20]
 80110d2:	2300      	movs	r3, #0
 80110d4:	9309      	str	r3, [sp, #36]	; 0x24
 80110d6:	2320      	movs	r3, #32
 80110d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80110dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80110e0:	2330      	movs	r3, #48	; 0x30
 80110e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011288 <_svfiprintf_r+0x1e8>
 80110e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110ea:	f04f 0901 	mov.w	r9, #1
 80110ee:	4623      	mov	r3, r4
 80110f0:	469a      	mov	sl, r3
 80110f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110f6:	b10a      	cbz	r2, 80110fc <_svfiprintf_r+0x5c>
 80110f8:	2a25      	cmp	r2, #37	; 0x25
 80110fa:	d1f9      	bne.n	80110f0 <_svfiprintf_r+0x50>
 80110fc:	ebba 0b04 	subs.w	fp, sl, r4
 8011100:	d00b      	beq.n	801111a <_svfiprintf_r+0x7a>
 8011102:	465b      	mov	r3, fp
 8011104:	4622      	mov	r2, r4
 8011106:	4629      	mov	r1, r5
 8011108:	4638      	mov	r0, r7
 801110a:	f7ff ff6e 	bl	8010fea <__ssputs_r>
 801110e:	3001      	adds	r0, #1
 8011110:	f000 80a9 	beq.w	8011266 <_svfiprintf_r+0x1c6>
 8011114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011116:	445a      	add	r2, fp
 8011118:	9209      	str	r2, [sp, #36]	; 0x24
 801111a:	f89a 3000 	ldrb.w	r3, [sl]
 801111e:	2b00      	cmp	r3, #0
 8011120:	f000 80a1 	beq.w	8011266 <_svfiprintf_r+0x1c6>
 8011124:	2300      	movs	r3, #0
 8011126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801112a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801112e:	f10a 0a01 	add.w	sl, sl, #1
 8011132:	9304      	str	r3, [sp, #16]
 8011134:	9307      	str	r3, [sp, #28]
 8011136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801113a:	931a      	str	r3, [sp, #104]	; 0x68
 801113c:	4654      	mov	r4, sl
 801113e:	2205      	movs	r2, #5
 8011140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011144:	4850      	ldr	r0, [pc, #320]	; (8011288 <_svfiprintf_r+0x1e8>)
 8011146:	f7ef f843 	bl	80001d0 <memchr>
 801114a:	9a04      	ldr	r2, [sp, #16]
 801114c:	b9d8      	cbnz	r0, 8011186 <_svfiprintf_r+0xe6>
 801114e:	06d0      	lsls	r0, r2, #27
 8011150:	bf44      	itt	mi
 8011152:	2320      	movmi	r3, #32
 8011154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011158:	0711      	lsls	r1, r2, #28
 801115a:	bf44      	itt	mi
 801115c:	232b      	movmi	r3, #43	; 0x2b
 801115e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011162:	f89a 3000 	ldrb.w	r3, [sl]
 8011166:	2b2a      	cmp	r3, #42	; 0x2a
 8011168:	d015      	beq.n	8011196 <_svfiprintf_r+0xf6>
 801116a:	9a07      	ldr	r2, [sp, #28]
 801116c:	4654      	mov	r4, sl
 801116e:	2000      	movs	r0, #0
 8011170:	f04f 0c0a 	mov.w	ip, #10
 8011174:	4621      	mov	r1, r4
 8011176:	f811 3b01 	ldrb.w	r3, [r1], #1
 801117a:	3b30      	subs	r3, #48	; 0x30
 801117c:	2b09      	cmp	r3, #9
 801117e:	d94d      	bls.n	801121c <_svfiprintf_r+0x17c>
 8011180:	b1b0      	cbz	r0, 80111b0 <_svfiprintf_r+0x110>
 8011182:	9207      	str	r2, [sp, #28]
 8011184:	e014      	b.n	80111b0 <_svfiprintf_r+0x110>
 8011186:	eba0 0308 	sub.w	r3, r0, r8
 801118a:	fa09 f303 	lsl.w	r3, r9, r3
 801118e:	4313      	orrs	r3, r2
 8011190:	9304      	str	r3, [sp, #16]
 8011192:	46a2      	mov	sl, r4
 8011194:	e7d2      	b.n	801113c <_svfiprintf_r+0x9c>
 8011196:	9b03      	ldr	r3, [sp, #12]
 8011198:	1d19      	adds	r1, r3, #4
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	9103      	str	r1, [sp, #12]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	bfbb      	ittet	lt
 80111a2:	425b      	neglt	r3, r3
 80111a4:	f042 0202 	orrlt.w	r2, r2, #2
 80111a8:	9307      	strge	r3, [sp, #28]
 80111aa:	9307      	strlt	r3, [sp, #28]
 80111ac:	bfb8      	it	lt
 80111ae:	9204      	strlt	r2, [sp, #16]
 80111b0:	7823      	ldrb	r3, [r4, #0]
 80111b2:	2b2e      	cmp	r3, #46	; 0x2e
 80111b4:	d10c      	bne.n	80111d0 <_svfiprintf_r+0x130>
 80111b6:	7863      	ldrb	r3, [r4, #1]
 80111b8:	2b2a      	cmp	r3, #42	; 0x2a
 80111ba:	d134      	bne.n	8011226 <_svfiprintf_r+0x186>
 80111bc:	9b03      	ldr	r3, [sp, #12]
 80111be:	1d1a      	adds	r2, r3, #4
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	9203      	str	r2, [sp, #12]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	bfb8      	it	lt
 80111c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80111cc:	3402      	adds	r4, #2
 80111ce:	9305      	str	r3, [sp, #20]
 80111d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011298 <_svfiprintf_r+0x1f8>
 80111d4:	7821      	ldrb	r1, [r4, #0]
 80111d6:	2203      	movs	r2, #3
 80111d8:	4650      	mov	r0, sl
 80111da:	f7ee fff9 	bl	80001d0 <memchr>
 80111de:	b138      	cbz	r0, 80111f0 <_svfiprintf_r+0x150>
 80111e0:	9b04      	ldr	r3, [sp, #16]
 80111e2:	eba0 000a 	sub.w	r0, r0, sl
 80111e6:	2240      	movs	r2, #64	; 0x40
 80111e8:	4082      	lsls	r2, r0
 80111ea:	4313      	orrs	r3, r2
 80111ec:	3401      	adds	r4, #1
 80111ee:	9304      	str	r3, [sp, #16]
 80111f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111f4:	4825      	ldr	r0, [pc, #148]	; (801128c <_svfiprintf_r+0x1ec>)
 80111f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111fa:	2206      	movs	r2, #6
 80111fc:	f7ee ffe8 	bl	80001d0 <memchr>
 8011200:	2800      	cmp	r0, #0
 8011202:	d038      	beq.n	8011276 <_svfiprintf_r+0x1d6>
 8011204:	4b22      	ldr	r3, [pc, #136]	; (8011290 <_svfiprintf_r+0x1f0>)
 8011206:	bb1b      	cbnz	r3, 8011250 <_svfiprintf_r+0x1b0>
 8011208:	9b03      	ldr	r3, [sp, #12]
 801120a:	3307      	adds	r3, #7
 801120c:	f023 0307 	bic.w	r3, r3, #7
 8011210:	3308      	adds	r3, #8
 8011212:	9303      	str	r3, [sp, #12]
 8011214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011216:	4433      	add	r3, r6
 8011218:	9309      	str	r3, [sp, #36]	; 0x24
 801121a:	e768      	b.n	80110ee <_svfiprintf_r+0x4e>
 801121c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011220:	460c      	mov	r4, r1
 8011222:	2001      	movs	r0, #1
 8011224:	e7a6      	b.n	8011174 <_svfiprintf_r+0xd4>
 8011226:	2300      	movs	r3, #0
 8011228:	3401      	adds	r4, #1
 801122a:	9305      	str	r3, [sp, #20]
 801122c:	4619      	mov	r1, r3
 801122e:	f04f 0c0a 	mov.w	ip, #10
 8011232:	4620      	mov	r0, r4
 8011234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011238:	3a30      	subs	r2, #48	; 0x30
 801123a:	2a09      	cmp	r2, #9
 801123c:	d903      	bls.n	8011246 <_svfiprintf_r+0x1a6>
 801123e:	2b00      	cmp	r3, #0
 8011240:	d0c6      	beq.n	80111d0 <_svfiprintf_r+0x130>
 8011242:	9105      	str	r1, [sp, #20]
 8011244:	e7c4      	b.n	80111d0 <_svfiprintf_r+0x130>
 8011246:	fb0c 2101 	mla	r1, ip, r1, r2
 801124a:	4604      	mov	r4, r0
 801124c:	2301      	movs	r3, #1
 801124e:	e7f0      	b.n	8011232 <_svfiprintf_r+0x192>
 8011250:	ab03      	add	r3, sp, #12
 8011252:	9300      	str	r3, [sp, #0]
 8011254:	462a      	mov	r2, r5
 8011256:	4b0f      	ldr	r3, [pc, #60]	; (8011294 <_svfiprintf_r+0x1f4>)
 8011258:	a904      	add	r1, sp, #16
 801125a:	4638      	mov	r0, r7
 801125c:	f7fc ff0e 	bl	800e07c <_printf_float>
 8011260:	1c42      	adds	r2, r0, #1
 8011262:	4606      	mov	r6, r0
 8011264:	d1d6      	bne.n	8011214 <_svfiprintf_r+0x174>
 8011266:	89ab      	ldrh	r3, [r5, #12]
 8011268:	065b      	lsls	r3, r3, #25
 801126a:	f53f af2d 	bmi.w	80110c8 <_svfiprintf_r+0x28>
 801126e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011270:	b01d      	add	sp, #116	; 0x74
 8011272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011276:	ab03      	add	r3, sp, #12
 8011278:	9300      	str	r3, [sp, #0]
 801127a:	462a      	mov	r2, r5
 801127c:	4b05      	ldr	r3, [pc, #20]	; (8011294 <_svfiprintf_r+0x1f4>)
 801127e:	a904      	add	r1, sp, #16
 8011280:	4638      	mov	r0, r7
 8011282:	f7fd f99f 	bl	800e5c4 <_printf_i>
 8011286:	e7eb      	b.n	8011260 <_svfiprintf_r+0x1c0>
 8011288:	08015256 	.word	0x08015256
 801128c:	08015260 	.word	0x08015260
 8011290:	0800e07d 	.word	0x0800e07d
 8011294:	08010feb 	.word	0x08010feb
 8011298:	0801525c 	.word	0x0801525c

0801129c <malloc>:
 801129c:	4b02      	ldr	r3, [pc, #8]	; (80112a8 <malloc+0xc>)
 801129e:	4601      	mov	r1, r0
 80112a0:	6818      	ldr	r0, [r3, #0]
 80112a2:	f000 b823 	b.w	80112ec <_malloc_r>
 80112a6:	bf00      	nop
 80112a8:	200001ec 	.word	0x200001ec

080112ac <sbrk_aligned>:
 80112ac:	b570      	push	{r4, r5, r6, lr}
 80112ae:	4e0e      	ldr	r6, [pc, #56]	; (80112e8 <sbrk_aligned+0x3c>)
 80112b0:	460c      	mov	r4, r1
 80112b2:	6831      	ldr	r1, [r6, #0]
 80112b4:	4605      	mov	r5, r0
 80112b6:	b911      	cbnz	r1, 80112be <sbrk_aligned+0x12>
 80112b8:	f000 fede 	bl	8012078 <_sbrk_r>
 80112bc:	6030      	str	r0, [r6, #0]
 80112be:	4621      	mov	r1, r4
 80112c0:	4628      	mov	r0, r5
 80112c2:	f000 fed9 	bl	8012078 <_sbrk_r>
 80112c6:	1c43      	adds	r3, r0, #1
 80112c8:	d00a      	beq.n	80112e0 <sbrk_aligned+0x34>
 80112ca:	1cc4      	adds	r4, r0, #3
 80112cc:	f024 0403 	bic.w	r4, r4, #3
 80112d0:	42a0      	cmp	r0, r4
 80112d2:	d007      	beq.n	80112e4 <sbrk_aligned+0x38>
 80112d4:	1a21      	subs	r1, r4, r0
 80112d6:	4628      	mov	r0, r5
 80112d8:	f000 fece 	bl	8012078 <_sbrk_r>
 80112dc:	3001      	adds	r0, #1
 80112de:	d101      	bne.n	80112e4 <sbrk_aligned+0x38>
 80112e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80112e4:	4620      	mov	r0, r4
 80112e6:	bd70      	pop	{r4, r5, r6, pc}
 80112e8:	20003148 	.word	0x20003148

080112ec <_malloc_r>:
 80112ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112f0:	1ccd      	adds	r5, r1, #3
 80112f2:	f025 0503 	bic.w	r5, r5, #3
 80112f6:	3508      	adds	r5, #8
 80112f8:	2d0c      	cmp	r5, #12
 80112fa:	bf38      	it	cc
 80112fc:	250c      	movcc	r5, #12
 80112fe:	2d00      	cmp	r5, #0
 8011300:	4607      	mov	r7, r0
 8011302:	db01      	blt.n	8011308 <_malloc_r+0x1c>
 8011304:	42a9      	cmp	r1, r5
 8011306:	d905      	bls.n	8011314 <_malloc_r+0x28>
 8011308:	230c      	movs	r3, #12
 801130a:	603b      	str	r3, [r7, #0]
 801130c:	2600      	movs	r6, #0
 801130e:	4630      	mov	r0, r6
 8011310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011314:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80113e8 <_malloc_r+0xfc>
 8011318:	f000 f928 	bl	801156c <__malloc_lock>
 801131c:	f8d8 3000 	ldr.w	r3, [r8]
 8011320:	461c      	mov	r4, r3
 8011322:	bb5c      	cbnz	r4, 801137c <_malloc_r+0x90>
 8011324:	4629      	mov	r1, r5
 8011326:	4638      	mov	r0, r7
 8011328:	f7ff ffc0 	bl	80112ac <sbrk_aligned>
 801132c:	1c43      	adds	r3, r0, #1
 801132e:	4604      	mov	r4, r0
 8011330:	d155      	bne.n	80113de <_malloc_r+0xf2>
 8011332:	f8d8 4000 	ldr.w	r4, [r8]
 8011336:	4626      	mov	r6, r4
 8011338:	2e00      	cmp	r6, #0
 801133a:	d145      	bne.n	80113c8 <_malloc_r+0xdc>
 801133c:	2c00      	cmp	r4, #0
 801133e:	d048      	beq.n	80113d2 <_malloc_r+0xe6>
 8011340:	6823      	ldr	r3, [r4, #0]
 8011342:	4631      	mov	r1, r6
 8011344:	4638      	mov	r0, r7
 8011346:	eb04 0903 	add.w	r9, r4, r3
 801134a:	f000 fe95 	bl	8012078 <_sbrk_r>
 801134e:	4581      	cmp	r9, r0
 8011350:	d13f      	bne.n	80113d2 <_malloc_r+0xe6>
 8011352:	6821      	ldr	r1, [r4, #0]
 8011354:	1a6d      	subs	r5, r5, r1
 8011356:	4629      	mov	r1, r5
 8011358:	4638      	mov	r0, r7
 801135a:	f7ff ffa7 	bl	80112ac <sbrk_aligned>
 801135e:	3001      	adds	r0, #1
 8011360:	d037      	beq.n	80113d2 <_malloc_r+0xe6>
 8011362:	6823      	ldr	r3, [r4, #0]
 8011364:	442b      	add	r3, r5
 8011366:	6023      	str	r3, [r4, #0]
 8011368:	f8d8 3000 	ldr.w	r3, [r8]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d038      	beq.n	80113e2 <_malloc_r+0xf6>
 8011370:	685a      	ldr	r2, [r3, #4]
 8011372:	42a2      	cmp	r2, r4
 8011374:	d12b      	bne.n	80113ce <_malloc_r+0xe2>
 8011376:	2200      	movs	r2, #0
 8011378:	605a      	str	r2, [r3, #4]
 801137a:	e00f      	b.n	801139c <_malloc_r+0xb0>
 801137c:	6822      	ldr	r2, [r4, #0]
 801137e:	1b52      	subs	r2, r2, r5
 8011380:	d41f      	bmi.n	80113c2 <_malloc_r+0xd6>
 8011382:	2a0b      	cmp	r2, #11
 8011384:	d917      	bls.n	80113b6 <_malloc_r+0xca>
 8011386:	1961      	adds	r1, r4, r5
 8011388:	42a3      	cmp	r3, r4
 801138a:	6025      	str	r5, [r4, #0]
 801138c:	bf18      	it	ne
 801138e:	6059      	strne	r1, [r3, #4]
 8011390:	6863      	ldr	r3, [r4, #4]
 8011392:	bf08      	it	eq
 8011394:	f8c8 1000 	streq.w	r1, [r8]
 8011398:	5162      	str	r2, [r4, r5]
 801139a:	604b      	str	r3, [r1, #4]
 801139c:	4638      	mov	r0, r7
 801139e:	f104 060b 	add.w	r6, r4, #11
 80113a2:	f000 f8e9 	bl	8011578 <__malloc_unlock>
 80113a6:	f026 0607 	bic.w	r6, r6, #7
 80113aa:	1d23      	adds	r3, r4, #4
 80113ac:	1af2      	subs	r2, r6, r3
 80113ae:	d0ae      	beq.n	801130e <_malloc_r+0x22>
 80113b0:	1b9b      	subs	r3, r3, r6
 80113b2:	50a3      	str	r3, [r4, r2]
 80113b4:	e7ab      	b.n	801130e <_malloc_r+0x22>
 80113b6:	42a3      	cmp	r3, r4
 80113b8:	6862      	ldr	r2, [r4, #4]
 80113ba:	d1dd      	bne.n	8011378 <_malloc_r+0x8c>
 80113bc:	f8c8 2000 	str.w	r2, [r8]
 80113c0:	e7ec      	b.n	801139c <_malloc_r+0xb0>
 80113c2:	4623      	mov	r3, r4
 80113c4:	6864      	ldr	r4, [r4, #4]
 80113c6:	e7ac      	b.n	8011322 <_malloc_r+0x36>
 80113c8:	4634      	mov	r4, r6
 80113ca:	6876      	ldr	r6, [r6, #4]
 80113cc:	e7b4      	b.n	8011338 <_malloc_r+0x4c>
 80113ce:	4613      	mov	r3, r2
 80113d0:	e7cc      	b.n	801136c <_malloc_r+0x80>
 80113d2:	230c      	movs	r3, #12
 80113d4:	603b      	str	r3, [r7, #0]
 80113d6:	4638      	mov	r0, r7
 80113d8:	f000 f8ce 	bl	8011578 <__malloc_unlock>
 80113dc:	e797      	b.n	801130e <_malloc_r+0x22>
 80113de:	6025      	str	r5, [r4, #0]
 80113e0:	e7dc      	b.n	801139c <_malloc_r+0xb0>
 80113e2:	605b      	str	r3, [r3, #4]
 80113e4:	deff      	udf	#255	; 0xff
 80113e6:	bf00      	nop
 80113e8:	20003144 	.word	0x20003144

080113ec <__ascii_mbtowc>:
 80113ec:	b082      	sub	sp, #8
 80113ee:	b901      	cbnz	r1, 80113f2 <__ascii_mbtowc+0x6>
 80113f0:	a901      	add	r1, sp, #4
 80113f2:	b142      	cbz	r2, 8011406 <__ascii_mbtowc+0x1a>
 80113f4:	b14b      	cbz	r3, 801140a <__ascii_mbtowc+0x1e>
 80113f6:	7813      	ldrb	r3, [r2, #0]
 80113f8:	600b      	str	r3, [r1, #0]
 80113fa:	7812      	ldrb	r2, [r2, #0]
 80113fc:	1e10      	subs	r0, r2, #0
 80113fe:	bf18      	it	ne
 8011400:	2001      	movne	r0, #1
 8011402:	b002      	add	sp, #8
 8011404:	4770      	bx	lr
 8011406:	4610      	mov	r0, r2
 8011408:	e7fb      	b.n	8011402 <__ascii_mbtowc+0x16>
 801140a:	f06f 0001 	mvn.w	r0, #1
 801140e:	e7f8      	b.n	8011402 <__ascii_mbtowc+0x16>

08011410 <__sflush_r>:
 8011410:	898a      	ldrh	r2, [r1, #12]
 8011412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011416:	4605      	mov	r5, r0
 8011418:	0710      	lsls	r0, r2, #28
 801141a:	460c      	mov	r4, r1
 801141c:	d458      	bmi.n	80114d0 <__sflush_r+0xc0>
 801141e:	684b      	ldr	r3, [r1, #4]
 8011420:	2b00      	cmp	r3, #0
 8011422:	dc05      	bgt.n	8011430 <__sflush_r+0x20>
 8011424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011426:	2b00      	cmp	r3, #0
 8011428:	dc02      	bgt.n	8011430 <__sflush_r+0x20>
 801142a:	2000      	movs	r0, #0
 801142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011432:	2e00      	cmp	r6, #0
 8011434:	d0f9      	beq.n	801142a <__sflush_r+0x1a>
 8011436:	2300      	movs	r3, #0
 8011438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801143c:	682f      	ldr	r7, [r5, #0]
 801143e:	6a21      	ldr	r1, [r4, #32]
 8011440:	602b      	str	r3, [r5, #0]
 8011442:	d032      	beq.n	80114aa <__sflush_r+0x9a>
 8011444:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011446:	89a3      	ldrh	r3, [r4, #12]
 8011448:	075a      	lsls	r2, r3, #29
 801144a:	d505      	bpl.n	8011458 <__sflush_r+0x48>
 801144c:	6863      	ldr	r3, [r4, #4]
 801144e:	1ac0      	subs	r0, r0, r3
 8011450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011452:	b10b      	cbz	r3, 8011458 <__sflush_r+0x48>
 8011454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011456:	1ac0      	subs	r0, r0, r3
 8011458:	2300      	movs	r3, #0
 801145a:	4602      	mov	r2, r0
 801145c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801145e:	6a21      	ldr	r1, [r4, #32]
 8011460:	4628      	mov	r0, r5
 8011462:	47b0      	blx	r6
 8011464:	1c43      	adds	r3, r0, #1
 8011466:	89a3      	ldrh	r3, [r4, #12]
 8011468:	d106      	bne.n	8011478 <__sflush_r+0x68>
 801146a:	6829      	ldr	r1, [r5, #0]
 801146c:	291d      	cmp	r1, #29
 801146e:	d82b      	bhi.n	80114c8 <__sflush_r+0xb8>
 8011470:	4a29      	ldr	r2, [pc, #164]	; (8011518 <__sflush_r+0x108>)
 8011472:	410a      	asrs	r2, r1
 8011474:	07d6      	lsls	r6, r2, #31
 8011476:	d427      	bmi.n	80114c8 <__sflush_r+0xb8>
 8011478:	2200      	movs	r2, #0
 801147a:	6062      	str	r2, [r4, #4]
 801147c:	04d9      	lsls	r1, r3, #19
 801147e:	6922      	ldr	r2, [r4, #16]
 8011480:	6022      	str	r2, [r4, #0]
 8011482:	d504      	bpl.n	801148e <__sflush_r+0x7e>
 8011484:	1c42      	adds	r2, r0, #1
 8011486:	d101      	bne.n	801148c <__sflush_r+0x7c>
 8011488:	682b      	ldr	r3, [r5, #0]
 801148a:	b903      	cbnz	r3, 801148e <__sflush_r+0x7e>
 801148c:	6560      	str	r0, [r4, #84]	; 0x54
 801148e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011490:	602f      	str	r7, [r5, #0]
 8011492:	2900      	cmp	r1, #0
 8011494:	d0c9      	beq.n	801142a <__sflush_r+0x1a>
 8011496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801149a:	4299      	cmp	r1, r3
 801149c:	d002      	beq.n	80114a4 <__sflush_r+0x94>
 801149e:	4628      	mov	r0, r5
 80114a0:	f000 fe40 	bl	8012124 <_free_r>
 80114a4:	2000      	movs	r0, #0
 80114a6:	6360      	str	r0, [r4, #52]	; 0x34
 80114a8:	e7c0      	b.n	801142c <__sflush_r+0x1c>
 80114aa:	2301      	movs	r3, #1
 80114ac:	4628      	mov	r0, r5
 80114ae:	47b0      	blx	r6
 80114b0:	1c41      	adds	r1, r0, #1
 80114b2:	d1c8      	bne.n	8011446 <__sflush_r+0x36>
 80114b4:	682b      	ldr	r3, [r5, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d0c5      	beq.n	8011446 <__sflush_r+0x36>
 80114ba:	2b1d      	cmp	r3, #29
 80114bc:	d001      	beq.n	80114c2 <__sflush_r+0xb2>
 80114be:	2b16      	cmp	r3, #22
 80114c0:	d101      	bne.n	80114c6 <__sflush_r+0xb6>
 80114c2:	602f      	str	r7, [r5, #0]
 80114c4:	e7b1      	b.n	801142a <__sflush_r+0x1a>
 80114c6:	89a3      	ldrh	r3, [r4, #12]
 80114c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114cc:	81a3      	strh	r3, [r4, #12]
 80114ce:	e7ad      	b.n	801142c <__sflush_r+0x1c>
 80114d0:	690f      	ldr	r7, [r1, #16]
 80114d2:	2f00      	cmp	r7, #0
 80114d4:	d0a9      	beq.n	801142a <__sflush_r+0x1a>
 80114d6:	0793      	lsls	r3, r2, #30
 80114d8:	680e      	ldr	r6, [r1, #0]
 80114da:	bf08      	it	eq
 80114dc:	694b      	ldreq	r3, [r1, #20]
 80114de:	600f      	str	r7, [r1, #0]
 80114e0:	bf18      	it	ne
 80114e2:	2300      	movne	r3, #0
 80114e4:	eba6 0807 	sub.w	r8, r6, r7
 80114e8:	608b      	str	r3, [r1, #8]
 80114ea:	f1b8 0f00 	cmp.w	r8, #0
 80114ee:	dd9c      	ble.n	801142a <__sflush_r+0x1a>
 80114f0:	6a21      	ldr	r1, [r4, #32]
 80114f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80114f4:	4643      	mov	r3, r8
 80114f6:	463a      	mov	r2, r7
 80114f8:	4628      	mov	r0, r5
 80114fa:	47b0      	blx	r6
 80114fc:	2800      	cmp	r0, #0
 80114fe:	dc06      	bgt.n	801150e <__sflush_r+0xfe>
 8011500:	89a3      	ldrh	r3, [r4, #12]
 8011502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011506:	81a3      	strh	r3, [r4, #12]
 8011508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801150c:	e78e      	b.n	801142c <__sflush_r+0x1c>
 801150e:	4407      	add	r7, r0
 8011510:	eba8 0800 	sub.w	r8, r8, r0
 8011514:	e7e9      	b.n	80114ea <__sflush_r+0xda>
 8011516:	bf00      	nop
 8011518:	dfbffffe 	.word	0xdfbffffe

0801151c <_fflush_r>:
 801151c:	b538      	push	{r3, r4, r5, lr}
 801151e:	690b      	ldr	r3, [r1, #16]
 8011520:	4605      	mov	r5, r0
 8011522:	460c      	mov	r4, r1
 8011524:	b913      	cbnz	r3, 801152c <_fflush_r+0x10>
 8011526:	2500      	movs	r5, #0
 8011528:	4628      	mov	r0, r5
 801152a:	bd38      	pop	{r3, r4, r5, pc}
 801152c:	b118      	cbz	r0, 8011536 <_fflush_r+0x1a>
 801152e:	6a03      	ldr	r3, [r0, #32]
 8011530:	b90b      	cbnz	r3, 8011536 <_fflush_r+0x1a>
 8011532:	f7fd fc47 	bl	800edc4 <__sinit>
 8011536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d0f3      	beq.n	8011526 <_fflush_r+0xa>
 801153e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011540:	07d0      	lsls	r0, r2, #31
 8011542:	d404      	bmi.n	801154e <_fflush_r+0x32>
 8011544:	0599      	lsls	r1, r3, #22
 8011546:	d402      	bmi.n	801154e <_fflush_r+0x32>
 8011548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801154a:	f7fe fb5b 	bl	800fc04 <__retarget_lock_acquire_recursive>
 801154e:	4628      	mov	r0, r5
 8011550:	4621      	mov	r1, r4
 8011552:	f7ff ff5d 	bl	8011410 <__sflush_r>
 8011556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011558:	07da      	lsls	r2, r3, #31
 801155a:	4605      	mov	r5, r0
 801155c:	d4e4      	bmi.n	8011528 <_fflush_r+0xc>
 801155e:	89a3      	ldrh	r3, [r4, #12]
 8011560:	059b      	lsls	r3, r3, #22
 8011562:	d4e1      	bmi.n	8011528 <_fflush_r+0xc>
 8011564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011566:	f7fe fb4e 	bl	800fc06 <__retarget_lock_release_recursive>
 801156a:	e7dd      	b.n	8011528 <_fflush_r+0xc>

0801156c <__malloc_lock>:
 801156c:	4801      	ldr	r0, [pc, #4]	; (8011574 <__malloc_lock+0x8>)
 801156e:	f7fe bb49 	b.w	800fc04 <__retarget_lock_acquire_recursive>
 8011572:	bf00      	nop
 8011574:	20003140 	.word	0x20003140

08011578 <__malloc_unlock>:
 8011578:	4801      	ldr	r0, [pc, #4]	; (8011580 <__malloc_unlock+0x8>)
 801157a:	f7fe bb44 	b.w	800fc06 <__retarget_lock_release_recursive>
 801157e:	bf00      	nop
 8011580:	20003140 	.word	0x20003140

08011584 <_Balloc>:
 8011584:	b570      	push	{r4, r5, r6, lr}
 8011586:	69c6      	ldr	r6, [r0, #28]
 8011588:	4604      	mov	r4, r0
 801158a:	460d      	mov	r5, r1
 801158c:	b976      	cbnz	r6, 80115ac <_Balloc+0x28>
 801158e:	2010      	movs	r0, #16
 8011590:	f7ff fe84 	bl	801129c <malloc>
 8011594:	4602      	mov	r2, r0
 8011596:	61e0      	str	r0, [r4, #28]
 8011598:	b920      	cbnz	r0, 80115a4 <_Balloc+0x20>
 801159a:	4b18      	ldr	r3, [pc, #96]	; (80115fc <_Balloc+0x78>)
 801159c:	4818      	ldr	r0, [pc, #96]	; (8011600 <_Balloc+0x7c>)
 801159e:	216b      	movs	r1, #107	; 0x6b
 80115a0:	f000 fd8c 	bl	80120bc <__assert_func>
 80115a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115a8:	6006      	str	r6, [r0, #0]
 80115aa:	60c6      	str	r6, [r0, #12]
 80115ac:	69e6      	ldr	r6, [r4, #28]
 80115ae:	68f3      	ldr	r3, [r6, #12]
 80115b0:	b183      	cbz	r3, 80115d4 <_Balloc+0x50>
 80115b2:	69e3      	ldr	r3, [r4, #28]
 80115b4:	68db      	ldr	r3, [r3, #12]
 80115b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80115ba:	b9b8      	cbnz	r0, 80115ec <_Balloc+0x68>
 80115bc:	2101      	movs	r1, #1
 80115be:	fa01 f605 	lsl.w	r6, r1, r5
 80115c2:	1d72      	adds	r2, r6, #5
 80115c4:	0092      	lsls	r2, r2, #2
 80115c6:	4620      	mov	r0, r4
 80115c8:	f000 fd96 	bl	80120f8 <_calloc_r>
 80115cc:	b160      	cbz	r0, 80115e8 <_Balloc+0x64>
 80115ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80115d2:	e00e      	b.n	80115f2 <_Balloc+0x6e>
 80115d4:	2221      	movs	r2, #33	; 0x21
 80115d6:	2104      	movs	r1, #4
 80115d8:	4620      	mov	r0, r4
 80115da:	f000 fd8d 	bl	80120f8 <_calloc_r>
 80115de:	69e3      	ldr	r3, [r4, #28]
 80115e0:	60f0      	str	r0, [r6, #12]
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d1e4      	bne.n	80115b2 <_Balloc+0x2e>
 80115e8:	2000      	movs	r0, #0
 80115ea:	bd70      	pop	{r4, r5, r6, pc}
 80115ec:	6802      	ldr	r2, [r0, #0]
 80115ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80115f2:	2300      	movs	r3, #0
 80115f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80115f8:	e7f7      	b.n	80115ea <_Balloc+0x66>
 80115fa:	bf00      	nop
 80115fc:	08015176 	.word	0x08015176
 8011600:	08015267 	.word	0x08015267

08011604 <_Bfree>:
 8011604:	b570      	push	{r4, r5, r6, lr}
 8011606:	69c6      	ldr	r6, [r0, #28]
 8011608:	4605      	mov	r5, r0
 801160a:	460c      	mov	r4, r1
 801160c:	b976      	cbnz	r6, 801162c <_Bfree+0x28>
 801160e:	2010      	movs	r0, #16
 8011610:	f7ff fe44 	bl	801129c <malloc>
 8011614:	4602      	mov	r2, r0
 8011616:	61e8      	str	r0, [r5, #28]
 8011618:	b920      	cbnz	r0, 8011624 <_Bfree+0x20>
 801161a:	4b09      	ldr	r3, [pc, #36]	; (8011640 <_Bfree+0x3c>)
 801161c:	4809      	ldr	r0, [pc, #36]	; (8011644 <_Bfree+0x40>)
 801161e:	218f      	movs	r1, #143	; 0x8f
 8011620:	f000 fd4c 	bl	80120bc <__assert_func>
 8011624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011628:	6006      	str	r6, [r0, #0]
 801162a:	60c6      	str	r6, [r0, #12]
 801162c:	b13c      	cbz	r4, 801163e <_Bfree+0x3a>
 801162e:	69eb      	ldr	r3, [r5, #28]
 8011630:	6862      	ldr	r2, [r4, #4]
 8011632:	68db      	ldr	r3, [r3, #12]
 8011634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011638:	6021      	str	r1, [r4, #0]
 801163a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801163e:	bd70      	pop	{r4, r5, r6, pc}
 8011640:	08015176 	.word	0x08015176
 8011644:	08015267 	.word	0x08015267

08011648 <__multadd>:
 8011648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801164c:	690d      	ldr	r5, [r1, #16]
 801164e:	4607      	mov	r7, r0
 8011650:	460c      	mov	r4, r1
 8011652:	461e      	mov	r6, r3
 8011654:	f101 0c14 	add.w	ip, r1, #20
 8011658:	2000      	movs	r0, #0
 801165a:	f8dc 3000 	ldr.w	r3, [ip]
 801165e:	b299      	uxth	r1, r3
 8011660:	fb02 6101 	mla	r1, r2, r1, r6
 8011664:	0c1e      	lsrs	r6, r3, #16
 8011666:	0c0b      	lsrs	r3, r1, #16
 8011668:	fb02 3306 	mla	r3, r2, r6, r3
 801166c:	b289      	uxth	r1, r1
 801166e:	3001      	adds	r0, #1
 8011670:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011674:	4285      	cmp	r5, r0
 8011676:	f84c 1b04 	str.w	r1, [ip], #4
 801167a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801167e:	dcec      	bgt.n	801165a <__multadd+0x12>
 8011680:	b30e      	cbz	r6, 80116c6 <__multadd+0x7e>
 8011682:	68a3      	ldr	r3, [r4, #8]
 8011684:	42ab      	cmp	r3, r5
 8011686:	dc19      	bgt.n	80116bc <__multadd+0x74>
 8011688:	6861      	ldr	r1, [r4, #4]
 801168a:	4638      	mov	r0, r7
 801168c:	3101      	adds	r1, #1
 801168e:	f7ff ff79 	bl	8011584 <_Balloc>
 8011692:	4680      	mov	r8, r0
 8011694:	b928      	cbnz	r0, 80116a2 <__multadd+0x5a>
 8011696:	4602      	mov	r2, r0
 8011698:	4b0c      	ldr	r3, [pc, #48]	; (80116cc <__multadd+0x84>)
 801169a:	480d      	ldr	r0, [pc, #52]	; (80116d0 <__multadd+0x88>)
 801169c:	21ba      	movs	r1, #186	; 0xba
 801169e:	f000 fd0d 	bl	80120bc <__assert_func>
 80116a2:	6922      	ldr	r2, [r4, #16]
 80116a4:	3202      	adds	r2, #2
 80116a6:	f104 010c 	add.w	r1, r4, #12
 80116aa:	0092      	lsls	r2, r2, #2
 80116ac:	300c      	adds	r0, #12
 80116ae:	f7fe faab 	bl	800fc08 <memcpy>
 80116b2:	4621      	mov	r1, r4
 80116b4:	4638      	mov	r0, r7
 80116b6:	f7ff ffa5 	bl	8011604 <_Bfree>
 80116ba:	4644      	mov	r4, r8
 80116bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80116c0:	3501      	adds	r5, #1
 80116c2:	615e      	str	r6, [r3, #20]
 80116c4:	6125      	str	r5, [r4, #16]
 80116c6:	4620      	mov	r0, r4
 80116c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116cc:	080151e5 	.word	0x080151e5
 80116d0:	08015267 	.word	0x08015267

080116d4 <__s2b>:
 80116d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116d8:	460c      	mov	r4, r1
 80116da:	4615      	mov	r5, r2
 80116dc:	461f      	mov	r7, r3
 80116de:	2209      	movs	r2, #9
 80116e0:	3308      	adds	r3, #8
 80116e2:	4606      	mov	r6, r0
 80116e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80116e8:	2100      	movs	r1, #0
 80116ea:	2201      	movs	r2, #1
 80116ec:	429a      	cmp	r2, r3
 80116ee:	db09      	blt.n	8011704 <__s2b+0x30>
 80116f0:	4630      	mov	r0, r6
 80116f2:	f7ff ff47 	bl	8011584 <_Balloc>
 80116f6:	b940      	cbnz	r0, 801170a <__s2b+0x36>
 80116f8:	4602      	mov	r2, r0
 80116fa:	4b19      	ldr	r3, [pc, #100]	; (8011760 <__s2b+0x8c>)
 80116fc:	4819      	ldr	r0, [pc, #100]	; (8011764 <__s2b+0x90>)
 80116fe:	21d3      	movs	r1, #211	; 0xd3
 8011700:	f000 fcdc 	bl	80120bc <__assert_func>
 8011704:	0052      	lsls	r2, r2, #1
 8011706:	3101      	adds	r1, #1
 8011708:	e7f0      	b.n	80116ec <__s2b+0x18>
 801170a:	9b08      	ldr	r3, [sp, #32]
 801170c:	6143      	str	r3, [r0, #20]
 801170e:	2d09      	cmp	r5, #9
 8011710:	f04f 0301 	mov.w	r3, #1
 8011714:	6103      	str	r3, [r0, #16]
 8011716:	dd16      	ble.n	8011746 <__s2b+0x72>
 8011718:	f104 0909 	add.w	r9, r4, #9
 801171c:	46c8      	mov	r8, r9
 801171e:	442c      	add	r4, r5
 8011720:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011724:	4601      	mov	r1, r0
 8011726:	3b30      	subs	r3, #48	; 0x30
 8011728:	220a      	movs	r2, #10
 801172a:	4630      	mov	r0, r6
 801172c:	f7ff ff8c 	bl	8011648 <__multadd>
 8011730:	45a0      	cmp	r8, r4
 8011732:	d1f5      	bne.n	8011720 <__s2b+0x4c>
 8011734:	f1a5 0408 	sub.w	r4, r5, #8
 8011738:	444c      	add	r4, r9
 801173a:	1b2d      	subs	r5, r5, r4
 801173c:	1963      	adds	r3, r4, r5
 801173e:	42bb      	cmp	r3, r7
 8011740:	db04      	blt.n	801174c <__s2b+0x78>
 8011742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011746:	340a      	adds	r4, #10
 8011748:	2509      	movs	r5, #9
 801174a:	e7f6      	b.n	801173a <__s2b+0x66>
 801174c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011750:	4601      	mov	r1, r0
 8011752:	3b30      	subs	r3, #48	; 0x30
 8011754:	220a      	movs	r2, #10
 8011756:	4630      	mov	r0, r6
 8011758:	f7ff ff76 	bl	8011648 <__multadd>
 801175c:	e7ee      	b.n	801173c <__s2b+0x68>
 801175e:	bf00      	nop
 8011760:	080151e5 	.word	0x080151e5
 8011764:	08015267 	.word	0x08015267

08011768 <__hi0bits>:
 8011768:	0c03      	lsrs	r3, r0, #16
 801176a:	041b      	lsls	r3, r3, #16
 801176c:	b9d3      	cbnz	r3, 80117a4 <__hi0bits+0x3c>
 801176e:	0400      	lsls	r0, r0, #16
 8011770:	2310      	movs	r3, #16
 8011772:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011776:	bf04      	itt	eq
 8011778:	0200      	lsleq	r0, r0, #8
 801177a:	3308      	addeq	r3, #8
 801177c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011780:	bf04      	itt	eq
 8011782:	0100      	lsleq	r0, r0, #4
 8011784:	3304      	addeq	r3, #4
 8011786:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801178a:	bf04      	itt	eq
 801178c:	0080      	lsleq	r0, r0, #2
 801178e:	3302      	addeq	r3, #2
 8011790:	2800      	cmp	r0, #0
 8011792:	db05      	blt.n	80117a0 <__hi0bits+0x38>
 8011794:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011798:	f103 0301 	add.w	r3, r3, #1
 801179c:	bf08      	it	eq
 801179e:	2320      	moveq	r3, #32
 80117a0:	4618      	mov	r0, r3
 80117a2:	4770      	bx	lr
 80117a4:	2300      	movs	r3, #0
 80117a6:	e7e4      	b.n	8011772 <__hi0bits+0xa>

080117a8 <__lo0bits>:
 80117a8:	6803      	ldr	r3, [r0, #0]
 80117aa:	f013 0207 	ands.w	r2, r3, #7
 80117ae:	d00c      	beq.n	80117ca <__lo0bits+0x22>
 80117b0:	07d9      	lsls	r1, r3, #31
 80117b2:	d422      	bmi.n	80117fa <__lo0bits+0x52>
 80117b4:	079a      	lsls	r2, r3, #30
 80117b6:	bf49      	itett	mi
 80117b8:	085b      	lsrmi	r3, r3, #1
 80117ba:	089b      	lsrpl	r3, r3, #2
 80117bc:	6003      	strmi	r3, [r0, #0]
 80117be:	2201      	movmi	r2, #1
 80117c0:	bf5c      	itt	pl
 80117c2:	6003      	strpl	r3, [r0, #0]
 80117c4:	2202      	movpl	r2, #2
 80117c6:	4610      	mov	r0, r2
 80117c8:	4770      	bx	lr
 80117ca:	b299      	uxth	r1, r3
 80117cc:	b909      	cbnz	r1, 80117d2 <__lo0bits+0x2a>
 80117ce:	0c1b      	lsrs	r3, r3, #16
 80117d0:	2210      	movs	r2, #16
 80117d2:	b2d9      	uxtb	r1, r3
 80117d4:	b909      	cbnz	r1, 80117da <__lo0bits+0x32>
 80117d6:	3208      	adds	r2, #8
 80117d8:	0a1b      	lsrs	r3, r3, #8
 80117da:	0719      	lsls	r1, r3, #28
 80117dc:	bf04      	itt	eq
 80117de:	091b      	lsreq	r3, r3, #4
 80117e0:	3204      	addeq	r2, #4
 80117e2:	0799      	lsls	r1, r3, #30
 80117e4:	bf04      	itt	eq
 80117e6:	089b      	lsreq	r3, r3, #2
 80117e8:	3202      	addeq	r2, #2
 80117ea:	07d9      	lsls	r1, r3, #31
 80117ec:	d403      	bmi.n	80117f6 <__lo0bits+0x4e>
 80117ee:	085b      	lsrs	r3, r3, #1
 80117f0:	f102 0201 	add.w	r2, r2, #1
 80117f4:	d003      	beq.n	80117fe <__lo0bits+0x56>
 80117f6:	6003      	str	r3, [r0, #0]
 80117f8:	e7e5      	b.n	80117c6 <__lo0bits+0x1e>
 80117fa:	2200      	movs	r2, #0
 80117fc:	e7e3      	b.n	80117c6 <__lo0bits+0x1e>
 80117fe:	2220      	movs	r2, #32
 8011800:	e7e1      	b.n	80117c6 <__lo0bits+0x1e>
	...

08011804 <__i2b>:
 8011804:	b510      	push	{r4, lr}
 8011806:	460c      	mov	r4, r1
 8011808:	2101      	movs	r1, #1
 801180a:	f7ff febb 	bl	8011584 <_Balloc>
 801180e:	4602      	mov	r2, r0
 8011810:	b928      	cbnz	r0, 801181e <__i2b+0x1a>
 8011812:	4b05      	ldr	r3, [pc, #20]	; (8011828 <__i2b+0x24>)
 8011814:	4805      	ldr	r0, [pc, #20]	; (801182c <__i2b+0x28>)
 8011816:	f240 1145 	movw	r1, #325	; 0x145
 801181a:	f000 fc4f 	bl	80120bc <__assert_func>
 801181e:	2301      	movs	r3, #1
 8011820:	6144      	str	r4, [r0, #20]
 8011822:	6103      	str	r3, [r0, #16]
 8011824:	bd10      	pop	{r4, pc}
 8011826:	bf00      	nop
 8011828:	080151e5 	.word	0x080151e5
 801182c:	08015267 	.word	0x08015267

08011830 <__multiply>:
 8011830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011834:	4691      	mov	r9, r2
 8011836:	690a      	ldr	r2, [r1, #16]
 8011838:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801183c:	429a      	cmp	r2, r3
 801183e:	bfb8      	it	lt
 8011840:	460b      	movlt	r3, r1
 8011842:	460c      	mov	r4, r1
 8011844:	bfbc      	itt	lt
 8011846:	464c      	movlt	r4, r9
 8011848:	4699      	movlt	r9, r3
 801184a:	6927      	ldr	r7, [r4, #16]
 801184c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011850:	68a3      	ldr	r3, [r4, #8]
 8011852:	6861      	ldr	r1, [r4, #4]
 8011854:	eb07 060a 	add.w	r6, r7, sl
 8011858:	42b3      	cmp	r3, r6
 801185a:	b085      	sub	sp, #20
 801185c:	bfb8      	it	lt
 801185e:	3101      	addlt	r1, #1
 8011860:	f7ff fe90 	bl	8011584 <_Balloc>
 8011864:	b930      	cbnz	r0, 8011874 <__multiply+0x44>
 8011866:	4602      	mov	r2, r0
 8011868:	4b44      	ldr	r3, [pc, #272]	; (801197c <__multiply+0x14c>)
 801186a:	4845      	ldr	r0, [pc, #276]	; (8011980 <__multiply+0x150>)
 801186c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011870:	f000 fc24 	bl	80120bc <__assert_func>
 8011874:	f100 0514 	add.w	r5, r0, #20
 8011878:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801187c:	462b      	mov	r3, r5
 801187e:	2200      	movs	r2, #0
 8011880:	4543      	cmp	r3, r8
 8011882:	d321      	bcc.n	80118c8 <__multiply+0x98>
 8011884:	f104 0314 	add.w	r3, r4, #20
 8011888:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801188c:	f109 0314 	add.w	r3, r9, #20
 8011890:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011894:	9202      	str	r2, [sp, #8]
 8011896:	1b3a      	subs	r2, r7, r4
 8011898:	3a15      	subs	r2, #21
 801189a:	f022 0203 	bic.w	r2, r2, #3
 801189e:	3204      	adds	r2, #4
 80118a0:	f104 0115 	add.w	r1, r4, #21
 80118a4:	428f      	cmp	r7, r1
 80118a6:	bf38      	it	cc
 80118a8:	2204      	movcc	r2, #4
 80118aa:	9201      	str	r2, [sp, #4]
 80118ac:	9a02      	ldr	r2, [sp, #8]
 80118ae:	9303      	str	r3, [sp, #12]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d80c      	bhi.n	80118ce <__multiply+0x9e>
 80118b4:	2e00      	cmp	r6, #0
 80118b6:	dd03      	ble.n	80118c0 <__multiply+0x90>
 80118b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d05b      	beq.n	8011978 <__multiply+0x148>
 80118c0:	6106      	str	r6, [r0, #16]
 80118c2:	b005      	add	sp, #20
 80118c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c8:	f843 2b04 	str.w	r2, [r3], #4
 80118cc:	e7d8      	b.n	8011880 <__multiply+0x50>
 80118ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80118d2:	f1ba 0f00 	cmp.w	sl, #0
 80118d6:	d024      	beq.n	8011922 <__multiply+0xf2>
 80118d8:	f104 0e14 	add.w	lr, r4, #20
 80118dc:	46a9      	mov	r9, r5
 80118de:	f04f 0c00 	mov.w	ip, #0
 80118e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80118e6:	f8d9 1000 	ldr.w	r1, [r9]
 80118ea:	fa1f fb82 	uxth.w	fp, r2
 80118ee:	b289      	uxth	r1, r1
 80118f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80118f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80118f8:	f8d9 2000 	ldr.w	r2, [r9]
 80118fc:	4461      	add	r1, ip
 80118fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011902:	fb0a c20b 	mla	r2, sl, fp, ip
 8011906:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801190a:	b289      	uxth	r1, r1
 801190c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011910:	4577      	cmp	r7, lr
 8011912:	f849 1b04 	str.w	r1, [r9], #4
 8011916:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801191a:	d8e2      	bhi.n	80118e2 <__multiply+0xb2>
 801191c:	9a01      	ldr	r2, [sp, #4]
 801191e:	f845 c002 	str.w	ip, [r5, r2]
 8011922:	9a03      	ldr	r2, [sp, #12]
 8011924:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011928:	3304      	adds	r3, #4
 801192a:	f1b9 0f00 	cmp.w	r9, #0
 801192e:	d021      	beq.n	8011974 <__multiply+0x144>
 8011930:	6829      	ldr	r1, [r5, #0]
 8011932:	f104 0c14 	add.w	ip, r4, #20
 8011936:	46ae      	mov	lr, r5
 8011938:	f04f 0a00 	mov.w	sl, #0
 801193c:	f8bc b000 	ldrh.w	fp, [ip]
 8011940:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011944:	fb09 220b 	mla	r2, r9, fp, r2
 8011948:	4452      	add	r2, sl
 801194a:	b289      	uxth	r1, r1
 801194c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011950:	f84e 1b04 	str.w	r1, [lr], #4
 8011954:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011958:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801195c:	f8be 1000 	ldrh.w	r1, [lr]
 8011960:	fb09 110a 	mla	r1, r9, sl, r1
 8011964:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011968:	4567      	cmp	r7, ip
 801196a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801196e:	d8e5      	bhi.n	801193c <__multiply+0x10c>
 8011970:	9a01      	ldr	r2, [sp, #4]
 8011972:	50a9      	str	r1, [r5, r2]
 8011974:	3504      	adds	r5, #4
 8011976:	e799      	b.n	80118ac <__multiply+0x7c>
 8011978:	3e01      	subs	r6, #1
 801197a:	e79b      	b.n	80118b4 <__multiply+0x84>
 801197c:	080151e5 	.word	0x080151e5
 8011980:	08015267 	.word	0x08015267

08011984 <__pow5mult>:
 8011984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011988:	4615      	mov	r5, r2
 801198a:	f012 0203 	ands.w	r2, r2, #3
 801198e:	4606      	mov	r6, r0
 8011990:	460f      	mov	r7, r1
 8011992:	d007      	beq.n	80119a4 <__pow5mult+0x20>
 8011994:	4c25      	ldr	r4, [pc, #148]	; (8011a2c <__pow5mult+0xa8>)
 8011996:	3a01      	subs	r2, #1
 8011998:	2300      	movs	r3, #0
 801199a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801199e:	f7ff fe53 	bl	8011648 <__multadd>
 80119a2:	4607      	mov	r7, r0
 80119a4:	10ad      	asrs	r5, r5, #2
 80119a6:	d03d      	beq.n	8011a24 <__pow5mult+0xa0>
 80119a8:	69f4      	ldr	r4, [r6, #28]
 80119aa:	b97c      	cbnz	r4, 80119cc <__pow5mult+0x48>
 80119ac:	2010      	movs	r0, #16
 80119ae:	f7ff fc75 	bl	801129c <malloc>
 80119b2:	4602      	mov	r2, r0
 80119b4:	61f0      	str	r0, [r6, #28]
 80119b6:	b928      	cbnz	r0, 80119c4 <__pow5mult+0x40>
 80119b8:	4b1d      	ldr	r3, [pc, #116]	; (8011a30 <__pow5mult+0xac>)
 80119ba:	481e      	ldr	r0, [pc, #120]	; (8011a34 <__pow5mult+0xb0>)
 80119bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80119c0:	f000 fb7c 	bl	80120bc <__assert_func>
 80119c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80119c8:	6004      	str	r4, [r0, #0]
 80119ca:	60c4      	str	r4, [r0, #12]
 80119cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80119d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80119d4:	b94c      	cbnz	r4, 80119ea <__pow5mult+0x66>
 80119d6:	f240 2171 	movw	r1, #625	; 0x271
 80119da:	4630      	mov	r0, r6
 80119dc:	f7ff ff12 	bl	8011804 <__i2b>
 80119e0:	2300      	movs	r3, #0
 80119e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80119e6:	4604      	mov	r4, r0
 80119e8:	6003      	str	r3, [r0, #0]
 80119ea:	f04f 0900 	mov.w	r9, #0
 80119ee:	07eb      	lsls	r3, r5, #31
 80119f0:	d50a      	bpl.n	8011a08 <__pow5mult+0x84>
 80119f2:	4639      	mov	r1, r7
 80119f4:	4622      	mov	r2, r4
 80119f6:	4630      	mov	r0, r6
 80119f8:	f7ff ff1a 	bl	8011830 <__multiply>
 80119fc:	4639      	mov	r1, r7
 80119fe:	4680      	mov	r8, r0
 8011a00:	4630      	mov	r0, r6
 8011a02:	f7ff fdff 	bl	8011604 <_Bfree>
 8011a06:	4647      	mov	r7, r8
 8011a08:	106d      	asrs	r5, r5, #1
 8011a0a:	d00b      	beq.n	8011a24 <__pow5mult+0xa0>
 8011a0c:	6820      	ldr	r0, [r4, #0]
 8011a0e:	b938      	cbnz	r0, 8011a20 <__pow5mult+0x9c>
 8011a10:	4622      	mov	r2, r4
 8011a12:	4621      	mov	r1, r4
 8011a14:	4630      	mov	r0, r6
 8011a16:	f7ff ff0b 	bl	8011830 <__multiply>
 8011a1a:	6020      	str	r0, [r4, #0]
 8011a1c:	f8c0 9000 	str.w	r9, [r0]
 8011a20:	4604      	mov	r4, r0
 8011a22:	e7e4      	b.n	80119ee <__pow5mult+0x6a>
 8011a24:	4638      	mov	r0, r7
 8011a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a2a:	bf00      	nop
 8011a2c:	080153b0 	.word	0x080153b0
 8011a30:	08015176 	.word	0x08015176
 8011a34:	08015267 	.word	0x08015267

08011a38 <__lshift>:
 8011a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a3c:	460c      	mov	r4, r1
 8011a3e:	6849      	ldr	r1, [r1, #4]
 8011a40:	6923      	ldr	r3, [r4, #16]
 8011a42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011a46:	68a3      	ldr	r3, [r4, #8]
 8011a48:	4607      	mov	r7, r0
 8011a4a:	4691      	mov	r9, r2
 8011a4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011a50:	f108 0601 	add.w	r6, r8, #1
 8011a54:	42b3      	cmp	r3, r6
 8011a56:	db0b      	blt.n	8011a70 <__lshift+0x38>
 8011a58:	4638      	mov	r0, r7
 8011a5a:	f7ff fd93 	bl	8011584 <_Balloc>
 8011a5e:	4605      	mov	r5, r0
 8011a60:	b948      	cbnz	r0, 8011a76 <__lshift+0x3e>
 8011a62:	4602      	mov	r2, r0
 8011a64:	4b28      	ldr	r3, [pc, #160]	; (8011b08 <__lshift+0xd0>)
 8011a66:	4829      	ldr	r0, [pc, #164]	; (8011b0c <__lshift+0xd4>)
 8011a68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011a6c:	f000 fb26 	bl	80120bc <__assert_func>
 8011a70:	3101      	adds	r1, #1
 8011a72:	005b      	lsls	r3, r3, #1
 8011a74:	e7ee      	b.n	8011a54 <__lshift+0x1c>
 8011a76:	2300      	movs	r3, #0
 8011a78:	f100 0114 	add.w	r1, r0, #20
 8011a7c:	f100 0210 	add.w	r2, r0, #16
 8011a80:	4618      	mov	r0, r3
 8011a82:	4553      	cmp	r3, sl
 8011a84:	db33      	blt.n	8011aee <__lshift+0xb6>
 8011a86:	6920      	ldr	r0, [r4, #16]
 8011a88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a8c:	f104 0314 	add.w	r3, r4, #20
 8011a90:	f019 091f 	ands.w	r9, r9, #31
 8011a94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011a9c:	d02b      	beq.n	8011af6 <__lshift+0xbe>
 8011a9e:	f1c9 0e20 	rsb	lr, r9, #32
 8011aa2:	468a      	mov	sl, r1
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	6818      	ldr	r0, [r3, #0]
 8011aa8:	fa00 f009 	lsl.w	r0, r0, r9
 8011aac:	4310      	orrs	r0, r2
 8011aae:	f84a 0b04 	str.w	r0, [sl], #4
 8011ab2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ab6:	459c      	cmp	ip, r3
 8011ab8:	fa22 f20e 	lsr.w	r2, r2, lr
 8011abc:	d8f3      	bhi.n	8011aa6 <__lshift+0x6e>
 8011abe:	ebac 0304 	sub.w	r3, ip, r4
 8011ac2:	3b15      	subs	r3, #21
 8011ac4:	f023 0303 	bic.w	r3, r3, #3
 8011ac8:	3304      	adds	r3, #4
 8011aca:	f104 0015 	add.w	r0, r4, #21
 8011ace:	4584      	cmp	ip, r0
 8011ad0:	bf38      	it	cc
 8011ad2:	2304      	movcc	r3, #4
 8011ad4:	50ca      	str	r2, [r1, r3]
 8011ad6:	b10a      	cbz	r2, 8011adc <__lshift+0xa4>
 8011ad8:	f108 0602 	add.w	r6, r8, #2
 8011adc:	3e01      	subs	r6, #1
 8011ade:	4638      	mov	r0, r7
 8011ae0:	612e      	str	r6, [r5, #16]
 8011ae2:	4621      	mov	r1, r4
 8011ae4:	f7ff fd8e 	bl	8011604 <_Bfree>
 8011ae8:	4628      	mov	r0, r5
 8011aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aee:	f842 0f04 	str.w	r0, [r2, #4]!
 8011af2:	3301      	adds	r3, #1
 8011af4:	e7c5      	b.n	8011a82 <__lshift+0x4a>
 8011af6:	3904      	subs	r1, #4
 8011af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011afc:	f841 2f04 	str.w	r2, [r1, #4]!
 8011b00:	459c      	cmp	ip, r3
 8011b02:	d8f9      	bhi.n	8011af8 <__lshift+0xc0>
 8011b04:	e7ea      	b.n	8011adc <__lshift+0xa4>
 8011b06:	bf00      	nop
 8011b08:	080151e5 	.word	0x080151e5
 8011b0c:	08015267 	.word	0x08015267

08011b10 <__mcmp>:
 8011b10:	b530      	push	{r4, r5, lr}
 8011b12:	6902      	ldr	r2, [r0, #16]
 8011b14:	690c      	ldr	r4, [r1, #16]
 8011b16:	1b12      	subs	r2, r2, r4
 8011b18:	d10e      	bne.n	8011b38 <__mcmp+0x28>
 8011b1a:	f100 0314 	add.w	r3, r0, #20
 8011b1e:	3114      	adds	r1, #20
 8011b20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011b24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011b28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011b2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011b30:	42a5      	cmp	r5, r4
 8011b32:	d003      	beq.n	8011b3c <__mcmp+0x2c>
 8011b34:	d305      	bcc.n	8011b42 <__mcmp+0x32>
 8011b36:	2201      	movs	r2, #1
 8011b38:	4610      	mov	r0, r2
 8011b3a:	bd30      	pop	{r4, r5, pc}
 8011b3c:	4283      	cmp	r3, r0
 8011b3e:	d3f3      	bcc.n	8011b28 <__mcmp+0x18>
 8011b40:	e7fa      	b.n	8011b38 <__mcmp+0x28>
 8011b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b46:	e7f7      	b.n	8011b38 <__mcmp+0x28>

08011b48 <__mdiff>:
 8011b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b4c:	460c      	mov	r4, r1
 8011b4e:	4606      	mov	r6, r0
 8011b50:	4611      	mov	r1, r2
 8011b52:	4620      	mov	r0, r4
 8011b54:	4690      	mov	r8, r2
 8011b56:	f7ff ffdb 	bl	8011b10 <__mcmp>
 8011b5a:	1e05      	subs	r5, r0, #0
 8011b5c:	d110      	bne.n	8011b80 <__mdiff+0x38>
 8011b5e:	4629      	mov	r1, r5
 8011b60:	4630      	mov	r0, r6
 8011b62:	f7ff fd0f 	bl	8011584 <_Balloc>
 8011b66:	b930      	cbnz	r0, 8011b76 <__mdiff+0x2e>
 8011b68:	4b3a      	ldr	r3, [pc, #232]	; (8011c54 <__mdiff+0x10c>)
 8011b6a:	4602      	mov	r2, r0
 8011b6c:	f240 2137 	movw	r1, #567	; 0x237
 8011b70:	4839      	ldr	r0, [pc, #228]	; (8011c58 <__mdiff+0x110>)
 8011b72:	f000 faa3 	bl	80120bc <__assert_func>
 8011b76:	2301      	movs	r3, #1
 8011b78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011b7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b80:	bfa4      	itt	ge
 8011b82:	4643      	movge	r3, r8
 8011b84:	46a0      	movge	r8, r4
 8011b86:	4630      	mov	r0, r6
 8011b88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011b8c:	bfa6      	itte	ge
 8011b8e:	461c      	movge	r4, r3
 8011b90:	2500      	movge	r5, #0
 8011b92:	2501      	movlt	r5, #1
 8011b94:	f7ff fcf6 	bl	8011584 <_Balloc>
 8011b98:	b920      	cbnz	r0, 8011ba4 <__mdiff+0x5c>
 8011b9a:	4b2e      	ldr	r3, [pc, #184]	; (8011c54 <__mdiff+0x10c>)
 8011b9c:	4602      	mov	r2, r0
 8011b9e:	f240 2145 	movw	r1, #581	; 0x245
 8011ba2:	e7e5      	b.n	8011b70 <__mdiff+0x28>
 8011ba4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011ba8:	6926      	ldr	r6, [r4, #16]
 8011baa:	60c5      	str	r5, [r0, #12]
 8011bac:	f104 0914 	add.w	r9, r4, #20
 8011bb0:	f108 0514 	add.w	r5, r8, #20
 8011bb4:	f100 0e14 	add.w	lr, r0, #20
 8011bb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011bbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011bc0:	f108 0210 	add.w	r2, r8, #16
 8011bc4:	46f2      	mov	sl, lr
 8011bc6:	2100      	movs	r1, #0
 8011bc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8011bcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011bd0:	fa11 f88b 	uxtah	r8, r1, fp
 8011bd4:	b299      	uxth	r1, r3
 8011bd6:	0c1b      	lsrs	r3, r3, #16
 8011bd8:	eba8 0801 	sub.w	r8, r8, r1
 8011bdc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011be0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011be4:	fa1f f888 	uxth.w	r8, r8
 8011be8:	1419      	asrs	r1, r3, #16
 8011bea:	454e      	cmp	r6, r9
 8011bec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011bf0:	f84a 3b04 	str.w	r3, [sl], #4
 8011bf4:	d8e8      	bhi.n	8011bc8 <__mdiff+0x80>
 8011bf6:	1b33      	subs	r3, r6, r4
 8011bf8:	3b15      	subs	r3, #21
 8011bfa:	f023 0303 	bic.w	r3, r3, #3
 8011bfe:	3304      	adds	r3, #4
 8011c00:	3415      	adds	r4, #21
 8011c02:	42a6      	cmp	r6, r4
 8011c04:	bf38      	it	cc
 8011c06:	2304      	movcc	r3, #4
 8011c08:	441d      	add	r5, r3
 8011c0a:	4473      	add	r3, lr
 8011c0c:	469e      	mov	lr, r3
 8011c0e:	462e      	mov	r6, r5
 8011c10:	4566      	cmp	r6, ip
 8011c12:	d30e      	bcc.n	8011c32 <__mdiff+0xea>
 8011c14:	f10c 0203 	add.w	r2, ip, #3
 8011c18:	1b52      	subs	r2, r2, r5
 8011c1a:	f022 0203 	bic.w	r2, r2, #3
 8011c1e:	3d03      	subs	r5, #3
 8011c20:	45ac      	cmp	ip, r5
 8011c22:	bf38      	it	cc
 8011c24:	2200      	movcc	r2, #0
 8011c26:	4413      	add	r3, r2
 8011c28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011c2c:	b17a      	cbz	r2, 8011c4e <__mdiff+0x106>
 8011c2e:	6107      	str	r7, [r0, #16]
 8011c30:	e7a4      	b.n	8011b7c <__mdiff+0x34>
 8011c32:	f856 8b04 	ldr.w	r8, [r6], #4
 8011c36:	fa11 f288 	uxtah	r2, r1, r8
 8011c3a:	1414      	asrs	r4, r2, #16
 8011c3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011c40:	b292      	uxth	r2, r2
 8011c42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011c46:	f84e 2b04 	str.w	r2, [lr], #4
 8011c4a:	1421      	asrs	r1, r4, #16
 8011c4c:	e7e0      	b.n	8011c10 <__mdiff+0xc8>
 8011c4e:	3f01      	subs	r7, #1
 8011c50:	e7ea      	b.n	8011c28 <__mdiff+0xe0>
 8011c52:	bf00      	nop
 8011c54:	080151e5 	.word	0x080151e5
 8011c58:	08015267 	.word	0x08015267

08011c5c <__ulp>:
 8011c5c:	b082      	sub	sp, #8
 8011c5e:	ed8d 0b00 	vstr	d0, [sp]
 8011c62:	9a01      	ldr	r2, [sp, #4]
 8011c64:	4b0f      	ldr	r3, [pc, #60]	; (8011ca4 <__ulp+0x48>)
 8011c66:	4013      	ands	r3, r2
 8011c68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	dc08      	bgt.n	8011c82 <__ulp+0x26>
 8011c70:	425b      	negs	r3, r3
 8011c72:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8011c76:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011c7a:	da04      	bge.n	8011c86 <__ulp+0x2a>
 8011c7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011c80:	4113      	asrs	r3, r2
 8011c82:	2200      	movs	r2, #0
 8011c84:	e008      	b.n	8011c98 <__ulp+0x3c>
 8011c86:	f1a2 0314 	sub.w	r3, r2, #20
 8011c8a:	2b1e      	cmp	r3, #30
 8011c8c:	bfda      	itte	le
 8011c8e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8011c92:	40da      	lsrle	r2, r3
 8011c94:	2201      	movgt	r2, #1
 8011c96:	2300      	movs	r3, #0
 8011c98:	4619      	mov	r1, r3
 8011c9a:	4610      	mov	r0, r2
 8011c9c:	ec41 0b10 	vmov	d0, r0, r1
 8011ca0:	b002      	add	sp, #8
 8011ca2:	4770      	bx	lr
 8011ca4:	7ff00000 	.word	0x7ff00000

08011ca8 <__b2d>:
 8011ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cac:	6906      	ldr	r6, [r0, #16]
 8011cae:	f100 0814 	add.w	r8, r0, #20
 8011cb2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011cb6:	1f37      	subs	r7, r6, #4
 8011cb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011cbc:	4610      	mov	r0, r2
 8011cbe:	f7ff fd53 	bl	8011768 <__hi0bits>
 8011cc2:	f1c0 0320 	rsb	r3, r0, #32
 8011cc6:	280a      	cmp	r0, #10
 8011cc8:	600b      	str	r3, [r1, #0]
 8011cca:	491b      	ldr	r1, [pc, #108]	; (8011d38 <__b2d+0x90>)
 8011ccc:	dc15      	bgt.n	8011cfa <__b2d+0x52>
 8011cce:	f1c0 0c0b 	rsb	ip, r0, #11
 8011cd2:	fa22 f30c 	lsr.w	r3, r2, ip
 8011cd6:	45b8      	cmp	r8, r7
 8011cd8:	ea43 0501 	orr.w	r5, r3, r1
 8011cdc:	bf34      	ite	cc
 8011cde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011ce2:	2300      	movcs	r3, #0
 8011ce4:	3015      	adds	r0, #21
 8011ce6:	fa02 f000 	lsl.w	r0, r2, r0
 8011cea:	fa23 f30c 	lsr.w	r3, r3, ip
 8011cee:	4303      	orrs	r3, r0
 8011cf0:	461c      	mov	r4, r3
 8011cf2:	ec45 4b10 	vmov	d0, r4, r5
 8011cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cfa:	45b8      	cmp	r8, r7
 8011cfc:	bf3a      	itte	cc
 8011cfe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011d02:	f1a6 0708 	subcc.w	r7, r6, #8
 8011d06:	2300      	movcs	r3, #0
 8011d08:	380b      	subs	r0, #11
 8011d0a:	d012      	beq.n	8011d32 <__b2d+0x8a>
 8011d0c:	f1c0 0120 	rsb	r1, r0, #32
 8011d10:	fa23 f401 	lsr.w	r4, r3, r1
 8011d14:	4082      	lsls	r2, r0
 8011d16:	4322      	orrs	r2, r4
 8011d18:	4547      	cmp	r7, r8
 8011d1a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011d1e:	bf8c      	ite	hi
 8011d20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011d24:	2200      	movls	r2, #0
 8011d26:	4083      	lsls	r3, r0
 8011d28:	40ca      	lsrs	r2, r1
 8011d2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011d2e:	4313      	orrs	r3, r2
 8011d30:	e7de      	b.n	8011cf0 <__b2d+0x48>
 8011d32:	ea42 0501 	orr.w	r5, r2, r1
 8011d36:	e7db      	b.n	8011cf0 <__b2d+0x48>
 8011d38:	3ff00000 	.word	0x3ff00000

08011d3c <__d2b>:
 8011d3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d40:	460f      	mov	r7, r1
 8011d42:	2101      	movs	r1, #1
 8011d44:	ec59 8b10 	vmov	r8, r9, d0
 8011d48:	4616      	mov	r6, r2
 8011d4a:	f7ff fc1b 	bl	8011584 <_Balloc>
 8011d4e:	4604      	mov	r4, r0
 8011d50:	b930      	cbnz	r0, 8011d60 <__d2b+0x24>
 8011d52:	4602      	mov	r2, r0
 8011d54:	4b24      	ldr	r3, [pc, #144]	; (8011de8 <__d2b+0xac>)
 8011d56:	4825      	ldr	r0, [pc, #148]	; (8011dec <__d2b+0xb0>)
 8011d58:	f240 310f 	movw	r1, #783	; 0x30f
 8011d5c:	f000 f9ae 	bl	80120bc <__assert_func>
 8011d60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011d64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d68:	bb2d      	cbnz	r5, 8011db6 <__d2b+0x7a>
 8011d6a:	9301      	str	r3, [sp, #4]
 8011d6c:	f1b8 0300 	subs.w	r3, r8, #0
 8011d70:	d026      	beq.n	8011dc0 <__d2b+0x84>
 8011d72:	4668      	mov	r0, sp
 8011d74:	9300      	str	r3, [sp, #0]
 8011d76:	f7ff fd17 	bl	80117a8 <__lo0bits>
 8011d7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011d7e:	b1e8      	cbz	r0, 8011dbc <__d2b+0x80>
 8011d80:	f1c0 0320 	rsb	r3, r0, #32
 8011d84:	fa02 f303 	lsl.w	r3, r2, r3
 8011d88:	430b      	orrs	r3, r1
 8011d8a:	40c2      	lsrs	r2, r0
 8011d8c:	6163      	str	r3, [r4, #20]
 8011d8e:	9201      	str	r2, [sp, #4]
 8011d90:	9b01      	ldr	r3, [sp, #4]
 8011d92:	61a3      	str	r3, [r4, #24]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	bf14      	ite	ne
 8011d98:	2202      	movne	r2, #2
 8011d9a:	2201      	moveq	r2, #1
 8011d9c:	6122      	str	r2, [r4, #16]
 8011d9e:	b1bd      	cbz	r5, 8011dd0 <__d2b+0x94>
 8011da0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011da4:	4405      	add	r5, r0
 8011da6:	603d      	str	r5, [r7, #0]
 8011da8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011dac:	6030      	str	r0, [r6, #0]
 8011dae:	4620      	mov	r0, r4
 8011db0:	b003      	add	sp, #12
 8011db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011dba:	e7d6      	b.n	8011d6a <__d2b+0x2e>
 8011dbc:	6161      	str	r1, [r4, #20]
 8011dbe:	e7e7      	b.n	8011d90 <__d2b+0x54>
 8011dc0:	a801      	add	r0, sp, #4
 8011dc2:	f7ff fcf1 	bl	80117a8 <__lo0bits>
 8011dc6:	9b01      	ldr	r3, [sp, #4]
 8011dc8:	6163      	str	r3, [r4, #20]
 8011dca:	3020      	adds	r0, #32
 8011dcc:	2201      	movs	r2, #1
 8011dce:	e7e5      	b.n	8011d9c <__d2b+0x60>
 8011dd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011dd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011dd8:	6038      	str	r0, [r7, #0]
 8011dda:	6918      	ldr	r0, [r3, #16]
 8011ddc:	f7ff fcc4 	bl	8011768 <__hi0bits>
 8011de0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011de4:	e7e2      	b.n	8011dac <__d2b+0x70>
 8011de6:	bf00      	nop
 8011de8:	080151e5 	.word	0x080151e5
 8011dec:	08015267 	.word	0x08015267

08011df0 <__ratio>:
 8011df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df4:	4688      	mov	r8, r1
 8011df6:	4669      	mov	r1, sp
 8011df8:	4681      	mov	r9, r0
 8011dfa:	f7ff ff55 	bl	8011ca8 <__b2d>
 8011dfe:	a901      	add	r1, sp, #4
 8011e00:	4640      	mov	r0, r8
 8011e02:	ec55 4b10 	vmov	r4, r5, d0
 8011e06:	f7ff ff4f 	bl	8011ca8 <__b2d>
 8011e0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011e0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011e12:	eba3 0c02 	sub.w	ip, r3, r2
 8011e16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011e1a:	1a9b      	subs	r3, r3, r2
 8011e1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011e20:	ec51 0b10 	vmov	r0, r1, d0
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	bfd6      	itet	le
 8011e28:	460a      	movle	r2, r1
 8011e2a:	462a      	movgt	r2, r5
 8011e2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011e30:	468b      	mov	fp, r1
 8011e32:	462f      	mov	r7, r5
 8011e34:	bfd4      	ite	le
 8011e36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011e3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011e3e:	4620      	mov	r0, r4
 8011e40:	ee10 2a10 	vmov	r2, s0
 8011e44:	465b      	mov	r3, fp
 8011e46:	4639      	mov	r1, r7
 8011e48:	f7ee fd00 	bl	800084c <__aeabi_ddiv>
 8011e4c:	ec41 0b10 	vmov	d0, r0, r1
 8011e50:	b003      	add	sp, #12
 8011e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e56 <__copybits>:
 8011e56:	3901      	subs	r1, #1
 8011e58:	b570      	push	{r4, r5, r6, lr}
 8011e5a:	1149      	asrs	r1, r1, #5
 8011e5c:	6914      	ldr	r4, [r2, #16]
 8011e5e:	3101      	adds	r1, #1
 8011e60:	f102 0314 	add.w	r3, r2, #20
 8011e64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011e68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011e6c:	1f05      	subs	r5, r0, #4
 8011e6e:	42a3      	cmp	r3, r4
 8011e70:	d30c      	bcc.n	8011e8c <__copybits+0x36>
 8011e72:	1aa3      	subs	r3, r4, r2
 8011e74:	3b11      	subs	r3, #17
 8011e76:	f023 0303 	bic.w	r3, r3, #3
 8011e7a:	3211      	adds	r2, #17
 8011e7c:	42a2      	cmp	r2, r4
 8011e7e:	bf88      	it	hi
 8011e80:	2300      	movhi	r3, #0
 8011e82:	4418      	add	r0, r3
 8011e84:	2300      	movs	r3, #0
 8011e86:	4288      	cmp	r0, r1
 8011e88:	d305      	bcc.n	8011e96 <__copybits+0x40>
 8011e8a:	bd70      	pop	{r4, r5, r6, pc}
 8011e8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011e90:	f845 6f04 	str.w	r6, [r5, #4]!
 8011e94:	e7eb      	b.n	8011e6e <__copybits+0x18>
 8011e96:	f840 3b04 	str.w	r3, [r0], #4
 8011e9a:	e7f4      	b.n	8011e86 <__copybits+0x30>

08011e9c <__any_on>:
 8011e9c:	f100 0214 	add.w	r2, r0, #20
 8011ea0:	6900      	ldr	r0, [r0, #16]
 8011ea2:	114b      	asrs	r3, r1, #5
 8011ea4:	4298      	cmp	r0, r3
 8011ea6:	b510      	push	{r4, lr}
 8011ea8:	db11      	blt.n	8011ece <__any_on+0x32>
 8011eaa:	dd0a      	ble.n	8011ec2 <__any_on+0x26>
 8011eac:	f011 011f 	ands.w	r1, r1, #31
 8011eb0:	d007      	beq.n	8011ec2 <__any_on+0x26>
 8011eb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011eb6:	fa24 f001 	lsr.w	r0, r4, r1
 8011eba:	fa00 f101 	lsl.w	r1, r0, r1
 8011ebe:	428c      	cmp	r4, r1
 8011ec0:	d10b      	bne.n	8011eda <__any_on+0x3e>
 8011ec2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011ec6:	4293      	cmp	r3, r2
 8011ec8:	d803      	bhi.n	8011ed2 <__any_on+0x36>
 8011eca:	2000      	movs	r0, #0
 8011ecc:	bd10      	pop	{r4, pc}
 8011ece:	4603      	mov	r3, r0
 8011ed0:	e7f7      	b.n	8011ec2 <__any_on+0x26>
 8011ed2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011ed6:	2900      	cmp	r1, #0
 8011ed8:	d0f5      	beq.n	8011ec6 <__any_on+0x2a>
 8011eda:	2001      	movs	r0, #1
 8011edc:	e7f6      	b.n	8011ecc <__any_on+0x30>

08011ede <__sread>:
 8011ede:	b510      	push	{r4, lr}
 8011ee0:	460c      	mov	r4, r1
 8011ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ee6:	f000 f8b5 	bl	8012054 <_read_r>
 8011eea:	2800      	cmp	r0, #0
 8011eec:	bfab      	itete	ge
 8011eee:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ef0:	89a3      	ldrhlt	r3, [r4, #12]
 8011ef2:	181b      	addge	r3, r3, r0
 8011ef4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011ef8:	bfac      	ite	ge
 8011efa:	6563      	strge	r3, [r4, #84]	; 0x54
 8011efc:	81a3      	strhlt	r3, [r4, #12]
 8011efe:	bd10      	pop	{r4, pc}

08011f00 <__swrite>:
 8011f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f04:	461f      	mov	r7, r3
 8011f06:	898b      	ldrh	r3, [r1, #12]
 8011f08:	05db      	lsls	r3, r3, #23
 8011f0a:	4605      	mov	r5, r0
 8011f0c:	460c      	mov	r4, r1
 8011f0e:	4616      	mov	r6, r2
 8011f10:	d505      	bpl.n	8011f1e <__swrite+0x1e>
 8011f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f16:	2302      	movs	r3, #2
 8011f18:	2200      	movs	r2, #0
 8011f1a:	f000 f889 	bl	8012030 <_lseek_r>
 8011f1e:	89a3      	ldrh	r3, [r4, #12]
 8011f20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f28:	81a3      	strh	r3, [r4, #12]
 8011f2a:	4632      	mov	r2, r6
 8011f2c:	463b      	mov	r3, r7
 8011f2e:	4628      	mov	r0, r5
 8011f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f34:	f000 b8b0 	b.w	8012098 <_write_r>

08011f38 <__sseek>:
 8011f38:	b510      	push	{r4, lr}
 8011f3a:	460c      	mov	r4, r1
 8011f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f40:	f000 f876 	bl	8012030 <_lseek_r>
 8011f44:	1c43      	adds	r3, r0, #1
 8011f46:	89a3      	ldrh	r3, [r4, #12]
 8011f48:	bf15      	itete	ne
 8011f4a:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f4c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f50:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f54:	81a3      	strheq	r3, [r4, #12]
 8011f56:	bf18      	it	ne
 8011f58:	81a3      	strhne	r3, [r4, #12]
 8011f5a:	bd10      	pop	{r4, pc}

08011f5c <__sclose>:
 8011f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f60:	f000 b856 	b.w	8012010 <_close_r>

08011f64 <_realloc_r>:
 8011f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f68:	4680      	mov	r8, r0
 8011f6a:	4614      	mov	r4, r2
 8011f6c:	460e      	mov	r6, r1
 8011f6e:	b921      	cbnz	r1, 8011f7a <_realloc_r+0x16>
 8011f70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f74:	4611      	mov	r1, r2
 8011f76:	f7ff b9b9 	b.w	80112ec <_malloc_r>
 8011f7a:	b92a      	cbnz	r2, 8011f88 <_realloc_r+0x24>
 8011f7c:	f000 f8d2 	bl	8012124 <_free_r>
 8011f80:	4625      	mov	r5, r4
 8011f82:	4628      	mov	r0, r5
 8011f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f88:	f000 f918 	bl	80121bc <_malloc_usable_size_r>
 8011f8c:	4284      	cmp	r4, r0
 8011f8e:	4607      	mov	r7, r0
 8011f90:	d802      	bhi.n	8011f98 <_realloc_r+0x34>
 8011f92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011f96:	d812      	bhi.n	8011fbe <_realloc_r+0x5a>
 8011f98:	4621      	mov	r1, r4
 8011f9a:	4640      	mov	r0, r8
 8011f9c:	f7ff f9a6 	bl	80112ec <_malloc_r>
 8011fa0:	4605      	mov	r5, r0
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	d0ed      	beq.n	8011f82 <_realloc_r+0x1e>
 8011fa6:	42bc      	cmp	r4, r7
 8011fa8:	4622      	mov	r2, r4
 8011faa:	4631      	mov	r1, r6
 8011fac:	bf28      	it	cs
 8011fae:	463a      	movcs	r2, r7
 8011fb0:	f7fd fe2a 	bl	800fc08 <memcpy>
 8011fb4:	4631      	mov	r1, r6
 8011fb6:	4640      	mov	r0, r8
 8011fb8:	f000 f8b4 	bl	8012124 <_free_r>
 8011fbc:	e7e1      	b.n	8011f82 <_realloc_r+0x1e>
 8011fbe:	4635      	mov	r5, r6
 8011fc0:	e7df      	b.n	8011f82 <_realloc_r+0x1e>

08011fc2 <__ascii_wctomb>:
 8011fc2:	b149      	cbz	r1, 8011fd8 <__ascii_wctomb+0x16>
 8011fc4:	2aff      	cmp	r2, #255	; 0xff
 8011fc6:	bf85      	ittet	hi
 8011fc8:	238a      	movhi	r3, #138	; 0x8a
 8011fca:	6003      	strhi	r3, [r0, #0]
 8011fcc:	700a      	strbls	r2, [r1, #0]
 8011fce:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011fd2:	bf98      	it	ls
 8011fd4:	2001      	movls	r0, #1
 8011fd6:	4770      	bx	lr
 8011fd8:	4608      	mov	r0, r1
 8011fda:	4770      	bx	lr

08011fdc <memmove>:
 8011fdc:	4288      	cmp	r0, r1
 8011fde:	b510      	push	{r4, lr}
 8011fe0:	eb01 0402 	add.w	r4, r1, r2
 8011fe4:	d902      	bls.n	8011fec <memmove+0x10>
 8011fe6:	4284      	cmp	r4, r0
 8011fe8:	4623      	mov	r3, r4
 8011fea:	d807      	bhi.n	8011ffc <memmove+0x20>
 8011fec:	1e43      	subs	r3, r0, #1
 8011fee:	42a1      	cmp	r1, r4
 8011ff0:	d008      	beq.n	8012004 <memmove+0x28>
 8011ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ffa:	e7f8      	b.n	8011fee <memmove+0x12>
 8011ffc:	4402      	add	r2, r0
 8011ffe:	4601      	mov	r1, r0
 8012000:	428a      	cmp	r2, r1
 8012002:	d100      	bne.n	8012006 <memmove+0x2a>
 8012004:	bd10      	pop	{r4, pc}
 8012006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801200a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801200e:	e7f7      	b.n	8012000 <memmove+0x24>

08012010 <_close_r>:
 8012010:	b538      	push	{r3, r4, r5, lr}
 8012012:	4d06      	ldr	r5, [pc, #24]	; (801202c <_close_r+0x1c>)
 8012014:	2300      	movs	r3, #0
 8012016:	4604      	mov	r4, r0
 8012018:	4608      	mov	r0, r1
 801201a:	602b      	str	r3, [r5, #0]
 801201c:	f7f3 fee5 	bl	8005dea <_close>
 8012020:	1c43      	adds	r3, r0, #1
 8012022:	d102      	bne.n	801202a <_close_r+0x1a>
 8012024:	682b      	ldr	r3, [r5, #0]
 8012026:	b103      	cbz	r3, 801202a <_close_r+0x1a>
 8012028:	6023      	str	r3, [r4, #0]
 801202a:	bd38      	pop	{r3, r4, r5, pc}
 801202c:	2000314c 	.word	0x2000314c

08012030 <_lseek_r>:
 8012030:	b538      	push	{r3, r4, r5, lr}
 8012032:	4d07      	ldr	r5, [pc, #28]	; (8012050 <_lseek_r+0x20>)
 8012034:	4604      	mov	r4, r0
 8012036:	4608      	mov	r0, r1
 8012038:	4611      	mov	r1, r2
 801203a:	2200      	movs	r2, #0
 801203c:	602a      	str	r2, [r5, #0]
 801203e:	461a      	mov	r2, r3
 8012040:	f7f3 fefa 	bl	8005e38 <_lseek>
 8012044:	1c43      	adds	r3, r0, #1
 8012046:	d102      	bne.n	801204e <_lseek_r+0x1e>
 8012048:	682b      	ldr	r3, [r5, #0]
 801204a:	b103      	cbz	r3, 801204e <_lseek_r+0x1e>
 801204c:	6023      	str	r3, [r4, #0]
 801204e:	bd38      	pop	{r3, r4, r5, pc}
 8012050:	2000314c 	.word	0x2000314c

08012054 <_read_r>:
 8012054:	b538      	push	{r3, r4, r5, lr}
 8012056:	4d07      	ldr	r5, [pc, #28]	; (8012074 <_read_r+0x20>)
 8012058:	4604      	mov	r4, r0
 801205a:	4608      	mov	r0, r1
 801205c:	4611      	mov	r1, r2
 801205e:	2200      	movs	r2, #0
 8012060:	602a      	str	r2, [r5, #0]
 8012062:	461a      	mov	r2, r3
 8012064:	f7f3 fe88 	bl	8005d78 <_read>
 8012068:	1c43      	adds	r3, r0, #1
 801206a:	d102      	bne.n	8012072 <_read_r+0x1e>
 801206c:	682b      	ldr	r3, [r5, #0]
 801206e:	b103      	cbz	r3, 8012072 <_read_r+0x1e>
 8012070:	6023      	str	r3, [r4, #0]
 8012072:	bd38      	pop	{r3, r4, r5, pc}
 8012074:	2000314c 	.word	0x2000314c

08012078 <_sbrk_r>:
 8012078:	b538      	push	{r3, r4, r5, lr}
 801207a:	4d06      	ldr	r5, [pc, #24]	; (8012094 <_sbrk_r+0x1c>)
 801207c:	2300      	movs	r3, #0
 801207e:	4604      	mov	r4, r0
 8012080:	4608      	mov	r0, r1
 8012082:	602b      	str	r3, [r5, #0]
 8012084:	f7f3 fee6 	bl	8005e54 <_sbrk>
 8012088:	1c43      	adds	r3, r0, #1
 801208a:	d102      	bne.n	8012092 <_sbrk_r+0x1a>
 801208c:	682b      	ldr	r3, [r5, #0]
 801208e:	b103      	cbz	r3, 8012092 <_sbrk_r+0x1a>
 8012090:	6023      	str	r3, [r4, #0]
 8012092:	bd38      	pop	{r3, r4, r5, pc}
 8012094:	2000314c 	.word	0x2000314c

08012098 <_write_r>:
 8012098:	b538      	push	{r3, r4, r5, lr}
 801209a:	4d07      	ldr	r5, [pc, #28]	; (80120b8 <_write_r+0x20>)
 801209c:	4604      	mov	r4, r0
 801209e:	4608      	mov	r0, r1
 80120a0:	4611      	mov	r1, r2
 80120a2:	2200      	movs	r2, #0
 80120a4:	602a      	str	r2, [r5, #0]
 80120a6:	461a      	mov	r2, r3
 80120a8:	f7f3 fe83 	bl	8005db2 <_write>
 80120ac:	1c43      	adds	r3, r0, #1
 80120ae:	d102      	bne.n	80120b6 <_write_r+0x1e>
 80120b0:	682b      	ldr	r3, [r5, #0]
 80120b2:	b103      	cbz	r3, 80120b6 <_write_r+0x1e>
 80120b4:	6023      	str	r3, [r4, #0]
 80120b6:	bd38      	pop	{r3, r4, r5, pc}
 80120b8:	2000314c 	.word	0x2000314c

080120bc <__assert_func>:
 80120bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120be:	4614      	mov	r4, r2
 80120c0:	461a      	mov	r2, r3
 80120c2:	4b09      	ldr	r3, [pc, #36]	; (80120e8 <__assert_func+0x2c>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	4605      	mov	r5, r0
 80120c8:	68d8      	ldr	r0, [r3, #12]
 80120ca:	b14c      	cbz	r4, 80120e0 <__assert_func+0x24>
 80120cc:	4b07      	ldr	r3, [pc, #28]	; (80120ec <__assert_func+0x30>)
 80120ce:	9100      	str	r1, [sp, #0]
 80120d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80120d4:	4906      	ldr	r1, [pc, #24]	; (80120f0 <__assert_func+0x34>)
 80120d6:	462b      	mov	r3, r5
 80120d8:	f000 f878 	bl	80121cc <fiprintf>
 80120dc:	f000 f888 	bl	80121f0 <abort>
 80120e0:	4b04      	ldr	r3, [pc, #16]	; (80120f4 <__assert_func+0x38>)
 80120e2:	461c      	mov	r4, r3
 80120e4:	e7f3      	b.n	80120ce <__assert_func+0x12>
 80120e6:	bf00      	nop
 80120e8:	200001ec 	.word	0x200001ec
 80120ec:	080153bc 	.word	0x080153bc
 80120f0:	080153c9 	.word	0x080153c9
 80120f4:	080153f7 	.word	0x080153f7

080120f8 <_calloc_r>:
 80120f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120fa:	fba1 2402 	umull	r2, r4, r1, r2
 80120fe:	b94c      	cbnz	r4, 8012114 <_calloc_r+0x1c>
 8012100:	4611      	mov	r1, r2
 8012102:	9201      	str	r2, [sp, #4]
 8012104:	f7ff f8f2 	bl	80112ec <_malloc_r>
 8012108:	9a01      	ldr	r2, [sp, #4]
 801210a:	4605      	mov	r5, r0
 801210c:	b930      	cbnz	r0, 801211c <_calloc_r+0x24>
 801210e:	4628      	mov	r0, r5
 8012110:	b003      	add	sp, #12
 8012112:	bd30      	pop	{r4, r5, pc}
 8012114:	220c      	movs	r2, #12
 8012116:	6002      	str	r2, [r0, #0]
 8012118:	2500      	movs	r5, #0
 801211a:	e7f8      	b.n	801210e <_calloc_r+0x16>
 801211c:	4621      	mov	r1, r4
 801211e:	f7fd fd3b 	bl	800fb98 <memset>
 8012122:	e7f4      	b.n	801210e <_calloc_r+0x16>

08012124 <_free_r>:
 8012124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012126:	2900      	cmp	r1, #0
 8012128:	d044      	beq.n	80121b4 <_free_r+0x90>
 801212a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801212e:	9001      	str	r0, [sp, #4]
 8012130:	2b00      	cmp	r3, #0
 8012132:	f1a1 0404 	sub.w	r4, r1, #4
 8012136:	bfb8      	it	lt
 8012138:	18e4      	addlt	r4, r4, r3
 801213a:	f7ff fa17 	bl	801156c <__malloc_lock>
 801213e:	4a1e      	ldr	r2, [pc, #120]	; (80121b8 <_free_r+0x94>)
 8012140:	9801      	ldr	r0, [sp, #4]
 8012142:	6813      	ldr	r3, [r2, #0]
 8012144:	b933      	cbnz	r3, 8012154 <_free_r+0x30>
 8012146:	6063      	str	r3, [r4, #4]
 8012148:	6014      	str	r4, [r2, #0]
 801214a:	b003      	add	sp, #12
 801214c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012150:	f7ff ba12 	b.w	8011578 <__malloc_unlock>
 8012154:	42a3      	cmp	r3, r4
 8012156:	d908      	bls.n	801216a <_free_r+0x46>
 8012158:	6825      	ldr	r5, [r4, #0]
 801215a:	1961      	adds	r1, r4, r5
 801215c:	428b      	cmp	r3, r1
 801215e:	bf01      	itttt	eq
 8012160:	6819      	ldreq	r1, [r3, #0]
 8012162:	685b      	ldreq	r3, [r3, #4]
 8012164:	1949      	addeq	r1, r1, r5
 8012166:	6021      	streq	r1, [r4, #0]
 8012168:	e7ed      	b.n	8012146 <_free_r+0x22>
 801216a:	461a      	mov	r2, r3
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	b10b      	cbz	r3, 8012174 <_free_r+0x50>
 8012170:	42a3      	cmp	r3, r4
 8012172:	d9fa      	bls.n	801216a <_free_r+0x46>
 8012174:	6811      	ldr	r1, [r2, #0]
 8012176:	1855      	adds	r5, r2, r1
 8012178:	42a5      	cmp	r5, r4
 801217a:	d10b      	bne.n	8012194 <_free_r+0x70>
 801217c:	6824      	ldr	r4, [r4, #0]
 801217e:	4421      	add	r1, r4
 8012180:	1854      	adds	r4, r2, r1
 8012182:	42a3      	cmp	r3, r4
 8012184:	6011      	str	r1, [r2, #0]
 8012186:	d1e0      	bne.n	801214a <_free_r+0x26>
 8012188:	681c      	ldr	r4, [r3, #0]
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	6053      	str	r3, [r2, #4]
 801218e:	440c      	add	r4, r1
 8012190:	6014      	str	r4, [r2, #0]
 8012192:	e7da      	b.n	801214a <_free_r+0x26>
 8012194:	d902      	bls.n	801219c <_free_r+0x78>
 8012196:	230c      	movs	r3, #12
 8012198:	6003      	str	r3, [r0, #0]
 801219a:	e7d6      	b.n	801214a <_free_r+0x26>
 801219c:	6825      	ldr	r5, [r4, #0]
 801219e:	1961      	adds	r1, r4, r5
 80121a0:	428b      	cmp	r3, r1
 80121a2:	bf04      	itt	eq
 80121a4:	6819      	ldreq	r1, [r3, #0]
 80121a6:	685b      	ldreq	r3, [r3, #4]
 80121a8:	6063      	str	r3, [r4, #4]
 80121aa:	bf04      	itt	eq
 80121ac:	1949      	addeq	r1, r1, r5
 80121ae:	6021      	streq	r1, [r4, #0]
 80121b0:	6054      	str	r4, [r2, #4]
 80121b2:	e7ca      	b.n	801214a <_free_r+0x26>
 80121b4:	b003      	add	sp, #12
 80121b6:	bd30      	pop	{r4, r5, pc}
 80121b8:	20003144 	.word	0x20003144

080121bc <_malloc_usable_size_r>:
 80121bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121c0:	1f18      	subs	r0, r3, #4
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	bfbc      	itt	lt
 80121c6:	580b      	ldrlt	r3, [r1, r0]
 80121c8:	18c0      	addlt	r0, r0, r3
 80121ca:	4770      	bx	lr

080121cc <fiprintf>:
 80121cc:	b40e      	push	{r1, r2, r3}
 80121ce:	b503      	push	{r0, r1, lr}
 80121d0:	4601      	mov	r1, r0
 80121d2:	ab03      	add	r3, sp, #12
 80121d4:	4805      	ldr	r0, [pc, #20]	; (80121ec <fiprintf+0x20>)
 80121d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80121da:	6800      	ldr	r0, [r0, #0]
 80121dc:	9301      	str	r3, [sp, #4]
 80121de:	f000 f837 	bl	8012250 <_vfiprintf_r>
 80121e2:	b002      	add	sp, #8
 80121e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80121e8:	b003      	add	sp, #12
 80121ea:	4770      	bx	lr
 80121ec:	200001ec 	.word	0x200001ec

080121f0 <abort>:
 80121f0:	b508      	push	{r3, lr}
 80121f2:	2006      	movs	r0, #6
 80121f4:	f000 fa88 	bl	8012708 <raise>
 80121f8:	2001      	movs	r0, #1
 80121fa:	f7f3 fdb3 	bl	8005d64 <_exit>

080121fe <__sfputc_r>:
 80121fe:	6893      	ldr	r3, [r2, #8]
 8012200:	3b01      	subs	r3, #1
 8012202:	2b00      	cmp	r3, #0
 8012204:	b410      	push	{r4}
 8012206:	6093      	str	r3, [r2, #8]
 8012208:	da08      	bge.n	801221c <__sfputc_r+0x1e>
 801220a:	6994      	ldr	r4, [r2, #24]
 801220c:	42a3      	cmp	r3, r4
 801220e:	db01      	blt.n	8012214 <__sfputc_r+0x16>
 8012210:	290a      	cmp	r1, #10
 8012212:	d103      	bne.n	801221c <__sfputc_r+0x1e>
 8012214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012218:	f000 b934 	b.w	8012484 <__swbuf_r>
 801221c:	6813      	ldr	r3, [r2, #0]
 801221e:	1c58      	adds	r0, r3, #1
 8012220:	6010      	str	r0, [r2, #0]
 8012222:	7019      	strb	r1, [r3, #0]
 8012224:	4608      	mov	r0, r1
 8012226:	f85d 4b04 	ldr.w	r4, [sp], #4
 801222a:	4770      	bx	lr

0801222c <__sfputs_r>:
 801222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801222e:	4606      	mov	r6, r0
 8012230:	460f      	mov	r7, r1
 8012232:	4614      	mov	r4, r2
 8012234:	18d5      	adds	r5, r2, r3
 8012236:	42ac      	cmp	r4, r5
 8012238:	d101      	bne.n	801223e <__sfputs_r+0x12>
 801223a:	2000      	movs	r0, #0
 801223c:	e007      	b.n	801224e <__sfputs_r+0x22>
 801223e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012242:	463a      	mov	r2, r7
 8012244:	4630      	mov	r0, r6
 8012246:	f7ff ffda 	bl	80121fe <__sfputc_r>
 801224a:	1c43      	adds	r3, r0, #1
 801224c:	d1f3      	bne.n	8012236 <__sfputs_r+0xa>
 801224e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012250 <_vfiprintf_r>:
 8012250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012254:	460d      	mov	r5, r1
 8012256:	b09d      	sub	sp, #116	; 0x74
 8012258:	4614      	mov	r4, r2
 801225a:	4698      	mov	r8, r3
 801225c:	4606      	mov	r6, r0
 801225e:	b118      	cbz	r0, 8012268 <_vfiprintf_r+0x18>
 8012260:	6a03      	ldr	r3, [r0, #32]
 8012262:	b90b      	cbnz	r3, 8012268 <_vfiprintf_r+0x18>
 8012264:	f7fc fdae 	bl	800edc4 <__sinit>
 8012268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801226a:	07d9      	lsls	r1, r3, #31
 801226c:	d405      	bmi.n	801227a <_vfiprintf_r+0x2a>
 801226e:	89ab      	ldrh	r3, [r5, #12]
 8012270:	059a      	lsls	r2, r3, #22
 8012272:	d402      	bmi.n	801227a <_vfiprintf_r+0x2a>
 8012274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012276:	f7fd fcc5 	bl	800fc04 <__retarget_lock_acquire_recursive>
 801227a:	89ab      	ldrh	r3, [r5, #12]
 801227c:	071b      	lsls	r3, r3, #28
 801227e:	d501      	bpl.n	8012284 <_vfiprintf_r+0x34>
 8012280:	692b      	ldr	r3, [r5, #16]
 8012282:	b99b      	cbnz	r3, 80122ac <_vfiprintf_r+0x5c>
 8012284:	4629      	mov	r1, r5
 8012286:	4630      	mov	r0, r6
 8012288:	f000 f93a 	bl	8012500 <__swsetup_r>
 801228c:	b170      	cbz	r0, 80122ac <_vfiprintf_r+0x5c>
 801228e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012290:	07dc      	lsls	r4, r3, #31
 8012292:	d504      	bpl.n	801229e <_vfiprintf_r+0x4e>
 8012294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012298:	b01d      	add	sp, #116	; 0x74
 801229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801229e:	89ab      	ldrh	r3, [r5, #12]
 80122a0:	0598      	lsls	r0, r3, #22
 80122a2:	d4f7      	bmi.n	8012294 <_vfiprintf_r+0x44>
 80122a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122a6:	f7fd fcae 	bl	800fc06 <__retarget_lock_release_recursive>
 80122aa:	e7f3      	b.n	8012294 <_vfiprintf_r+0x44>
 80122ac:	2300      	movs	r3, #0
 80122ae:	9309      	str	r3, [sp, #36]	; 0x24
 80122b0:	2320      	movs	r3, #32
 80122b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80122ba:	2330      	movs	r3, #48	; 0x30
 80122bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012470 <_vfiprintf_r+0x220>
 80122c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122c4:	f04f 0901 	mov.w	r9, #1
 80122c8:	4623      	mov	r3, r4
 80122ca:	469a      	mov	sl, r3
 80122cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122d0:	b10a      	cbz	r2, 80122d6 <_vfiprintf_r+0x86>
 80122d2:	2a25      	cmp	r2, #37	; 0x25
 80122d4:	d1f9      	bne.n	80122ca <_vfiprintf_r+0x7a>
 80122d6:	ebba 0b04 	subs.w	fp, sl, r4
 80122da:	d00b      	beq.n	80122f4 <_vfiprintf_r+0xa4>
 80122dc:	465b      	mov	r3, fp
 80122de:	4622      	mov	r2, r4
 80122e0:	4629      	mov	r1, r5
 80122e2:	4630      	mov	r0, r6
 80122e4:	f7ff ffa2 	bl	801222c <__sfputs_r>
 80122e8:	3001      	adds	r0, #1
 80122ea:	f000 80a9 	beq.w	8012440 <_vfiprintf_r+0x1f0>
 80122ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122f0:	445a      	add	r2, fp
 80122f2:	9209      	str	r2, [sp, #36]	; 0x24
 80122f4:	f89a 3000 	ldrb.w	r3, [sl]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	f000 80a1 	beq.w	8012440 <_vfiprintf_r+0x1f0>
 80122fe:	2300      	movs	r3, #0
 8012300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012308:	f10a 0a01 	add.w	sl, sl, #1
 801230c:	9304      	str	r3, [sp, #16]
 801230e:	9307      	str	r3, [sp, #28]
 8012310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012314:	931a      	str	r3, [sp, #104]	; 0x68
 8012316:	4654      	mov	r4, sl
 8012318:	2205      	movs	r2, #5
 801231a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801231e:	4854      	ldr	r0, [pc, #336]	; (8012470 <_vfiprintf_r+0x220>)
 8012320:	f7ed ff56 	bl	80001d0 <memchr>
 8012324:	9a04      	ldr	r2, [sp, #16]
 8012326:	b9d8      	cbnz	r0, 8012360 <_vfiprintf_r+0x110>
 8012328:	06d1      	lsls	r1, r2, #27
 801232a:	bf44      	itt	mi
 801232c:	2320      	movmi	r3, #32
 801232e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012332:	0713      	lsls	r3, r2, #28
 8012334:	bf44      	itt	mi
 8012336:	232b      	movmi	r3, #43	; 0x2b
 8012338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801233c:	f89a 3000 	ldrb.w	r3, [sl]
 8012340:	2b2a      	cmp	r3, #42	; 0x2a
 8012342:	d015      	beq.n	8012370 <_vfiprintf_r+0x120>
 8012344:	9a07      	ldr	r2, [sp, #28]
 8012346:	4654      	mov	r4, sl
 8012348:	2000      	movs	r0, #0
 801234a:	f04f 0c0a 	mov.w	ip, #10
 801234e:	4621      	mov	r1, r4
 8012350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012354:	3b30      	subs	r3, #48	; 0x30
 8012356:	2b09      	cmp	r3, #9
 8012358:	d94d      	bls.n	80123f6 <_vfiprintf_r+0x1a6>
 801235a:	b1b0      	cbz	r0, 801238a <_vfiprintf_r+0x13a>
 801235c:	9207      	str	r2, [sp, #28]
 801235e:	e014      	b.n	801238a <_vfiprintf_r+0x13a>
 8012360:	eba0 0308 	sub.w	r3, r0, r8
 8012364:	fa09 f303 	lsl.w	r3, r9, r3
 8012368:	4313      	orrs	r3, r2
 801236a:	9304      	str	r3, [sp, #16]
 801236c:	46a2      	mov	sl, r4
 801236e:	e7d2      	b.n	8012316 <_vfiprintf_r+0xc6>
 8012370:	9b03      	ldr	r3, [sp, #12]
 8012372:	1d19      	adds	r1, r3, #4
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	9103      	str	r1, [sp, #12]
 8012378:	2b00      	cmp	r3, #0
 801237a:	bfbb      	ittet	lt
 801237c:	425b      	neglt	r3, r3
 801237e:	f042 0202 	orrlt.w	r2, r2, #2
 8012382:	9307      	strge	r3, [sp, #28]
 8012384:	9307      	strlt	r3, [sp, #28]
 8012386:	bfb8      	it	lt
 8012388:	9204      	strlt	r2, [sp, #16]
 801238a:	7823      	ldrb	r3, [r4, #0]
 801238c:	2b2e      	cmp	r3, #46	; 0x2e
 801238e:	d10c      	bne.n	80123aa <_vfiprintf_r+0x15a>
 8012390:	7863      	ldrb	r3, [r4, #1]
 8012392:	2b2a      	cmp	r3, #42	; 0x2a
 8012394:	d134      	bne.n	8012400 <_vfiprintf_r+0x1b0>
 8012396:	9b03      	ldr	r3, [sp, #12]
 8012398:	1d1a      	adds	r2, r3, #4
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	9203      	str	r2, [sp, #12]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	bfb8      	it	lt
 80123a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80123a6:	3402      	adds	r4, #2
 80123a8:	9305      	str	r3, [sp, #20]
 80123aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012480 <_vfiprintf_r+0x230>
 80123ae:	7821      	ldrb	r1, [r4, #0]
 80123b0:	2203      	movs	r2, #3
 80123b2:	4650      	mov	r0, sl
 80123b4:	f7ed ff0c 	bl	80001d0 <memchr>
 80123b8:	b138      	cbz	r0, 80123ca <_vfiprintf_r+0x17a>
 80123ba:	9b04      	ldr	r3, [sp, #16]
 80123bc:	eba0 000a 	sub.w	r0, r0, sl
 80123c0:	2240      	movs	r2, #64	; 0x40
 80123c2:	4082      	lsls	r2, r0
 80123c4:	4313      	orrs	r3, r2
 80123c6:	3401      	adds	r4, #1
 80123c8:	9304      	str	r3, [sp, #16]
 80123ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123ce:	4829      	ldr	r0, [pc, #164]	; (8012474 <_vfiprintf_r+0x224>)
 80123d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123d4:	2206      	movs	r2, #6
 80123d6:	f7ed fefb 	bl	80001d0 <memchr>
 80123da:	2800      	cmp	r0, #0
 80123dc:	d03f      	beq.n	801245e <_vfiprintf_r+0x20e>
 80123de:	4b26      	ldr	r3, [pc, #152]	; (8012478 <_vfiprintf_r+0x228>)
 80123e0:	bb1b      	cbnz	r3, 801242a <_vfiprintf_r+0x1da>
 80123e2:	9b03      	ldr	r3, [sp, #12]
 80123e4:	3307      	adds	r3, #7
 80123e6:	f023 0307 	bic.w	r3, r3, #7
 80123ea:	3308      	adds	r3, #8
 80123ec:	9303      	str	r3, [sp, #12]
 80123ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123f0:	443b      	add	r3, r7
 80123f2:	9309      	str	r3, [sp, #36]	; 0x24
 80123f4:	e768      	b.n	80122c8 <_vfiprintf_r+0x78>
 80123f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80123fa:	460c      	mov	r4, r1
 80123fc:	2001      	movs	r0, #1
 80123fe:	e7a6      	b.n	801234e <_vfiprintf_r+0xfe>
 8012400:	2300      	movs	r3, #0
 8012402:	3401      	adds	r4, #1
 8012404:	9305      	str	r3, [sp, #20]
 8012406:	4619      	mov	r1, r3
 8012408:	f04f 0c0a 	mov.w	ip, #10
 801240c:	4620      	mov	r0, r4
 801240e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012412:	3a30      	subs	r2, #48	; 0x30
 8012414:	2a09      	cmp	r2, #9
 8012416:	d903      	bls.n	8012420 <_vfiprintf_r+0x1d0>
 8012418:	2b00      	cmp	r3, #0
 801241a:	d0c6      	beq.n	80123aa <_vfiprintf_r+0x15a>
 801241c:	9105      	str	r1, [sp, #20]
 801241e:	e7c4      	b.n	80123aa <_vfiprintf_r+0x15a>
 8012420:	fb0c 2101 	mla	r1, ip, r1, r2
 8012424:	4604      	mov	r4, r0
 8012426:	2301      	movs	r3, #1
 8012428:	e7f0      	b.n	801240c <_vfiprintf_r+0x1bc>
 801242a:	ab03      	add	r3, sp, #12
 801242c:	9300      	str	r3, [sp, #0]
 801242e:	462a      	mov	r2, r5
 8012430:	4b12      	ldr	r3, [pc, #72]	; (801247c <_vfiprintf_r+0x22c>)
 8012432:	a904      	add	r1, sp, #16
 8012434:	4630      	mov	r0, r6
 8012436:	f7fb fe21 	bl	800e07c <_printf_float>
 801243a:	4607      	mov	r7, r0
 801243c:	1c78      	adds	r0, r7, #1
 801243e:	d1d6      	bne.n	80123ee <_vfiprintf_r+0x19e>
 8012440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012442:	07d9      	lsls	r1, r3, #31
 8012444:	d405      	bmi.n	8012452 <_vfiprintf_r+0x202>
 8012446:	89ab      	ldrh	r3, [r5, #12]
 8012448:	059a      	lsls	r2, r3, #22
 801244a:	d402      	bmi.n	8012452 <_vfiprintf_r+0x202>
 801244c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801244e:	f7fd fbda 	bl	800fc06 <__retarget_lock_release_recursive>
 8012452:	89ab      	ldrh	r3, [r5, #12]
 8012454:	065b      	lsls	r3, r3, #25
 8012456:	f53f af1d 	bmi.w	8012294 <_vfiprintf_r+0x44>
 801245a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801245c:	e71c      	b.n	8012298 <_vfiprintf_r+0x48>
 801245e:	ab03      	add	r3, sp, #12
 8012460:	9300      	str	r3, [sp, #0]
 8012462:	462a      	mov	r2, r5
 8012464:	4b05      	ldr	r3, [pc, #20]	; (801247c <_vfiprintf_r+0x22c>)
 8012466:	a904      	add	r1, sp, #16
 8012468:	4630      	mov	r0, r6
 801246a:	f7fc f8ab 	bl	800e5c4 <_printf_i>
 801246e:	e7e4      	b.n	801243a <_vfiprintf_r+0x1ea>
 8012470:	08015256 	.word	0x08015256
 8012474:	08015260 	.word	0x08015260
 8012478:	0800e07d 	.word	0x0800e07d
 801247c:	0801222d 	.word	0x0801222d
 8012480:	0801525c 	.word	0x0801525c

08012484 <__swbuf_r>:
 8012484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012486:	460e      	mov	r6, r1
 8012488:	4614      	mov	r4, r2
 801248a:	4605      	mov	r5, r0
 801248c:	b118      	cbz	r0, 8012496 <__swbuf_r+0x12>
 801248e:	6a03      	ldr	r3, [r0, #32]
 8012490:	b90b      	cbnz	r3, 8012496 <__swbuf_r+0x12>
 8012492:	f7fc fc97 	bl	800edc4 <__sinit>
 8012496:	69a3      	ldr	r3, [r4, #24]
 8012498:	60a3      	str	r3, [r4, #8]
 801249a:	89a3      	ldrh	r3, [r4, #12]
 801249c:	071a      	lsls	r2, r3, #28
 801249e:	d525      	bpl.n	80124ec <__swbuf_r+0x68>
 80124a0:	6923      	ldr	r3, [r4, #16]
 80124a2:	b31b      	cbz	r3, 80124ec <__swbuf_r+0x68>
 80124a4:	6823      	ldr	r3, [r4, #0]
 80124a6:	6922      	ldr	r2, [r4, #16]
 80124a8:	1a98      	subs	r0, r3, r2
 80124aa:	6963      	ldr	r3, [r4, #20]
 80124ac:	b2f6      	uxtb	r6, r6
 80124ae:	4283      	cmp	r3, r0
 80124b0:	4637      	mov	r7, r6
 80124b2:	dc04      	bgt.n	80124be <__swbuf_r+0x3a>
 80124b4:	4621      	mov	r1, r4
 80124b6:	4628      	mov	r0, r5
 80124b8:	f7ff f830 	bl	801151c <_fflush_r>
 80124bc:	b9e0      	cbnz	r0, 80124f8 <__swbuf_r+0x74>
 80124be:	68a3      	ldr	r3, [r4, #8]
 80124c0:	3b01      	subs	r3, #1
 80124c2:	60a3      	str	r3, [r4, #8]
 80124c4:	6823      	ldr	r3, [r4, #0]
 80124c6:	1c5a      	adds	r2, r3, #1
 80124c8:	6022      	str	r2, [r4, #0]
 80124ca:	701e      	strb	r6, [r3, #0]
 80124cc:	6962      	ldr	r2, [r4, #20]
 80124ce:	1c43      	adds	r3, r0, #1
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d004      	beq.n	80124de <__swbuf_r+0x5a>
 80124d4:	89a3      	ldrh	r3, [r4, #12]
 80124d6:	07db      	lsls	r3, r3, #31
 80124d8:	d506      	bpl.n	80124e8 <__swbuf_r+0x64>
 80124da:	2e0a      	cmp	r6, #10
 80124dc:	d104      	bne.n	80124e8 <__swbuf_r+0x64>
 80124de:	4621      	mov	r1, r4
 80124e0:	4628      	mov	r0, r5
 80124e2:	f7ff f81b 	bl	801151c <_fflush_r>
 80124e6:	b938      	cbnz	r0, 80124f8 <__swbuf_r+0x74>
 80124e8:	4638      	mov	r0, r7
 80124ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124ec:	4621      	mov	r1, r4
 80124ee:	4628      	mov	r0, r5
 80124f0:	f000 f806 	bl	8012500 <__swsetup_r>
 80124f4:	2800      	cmp	r0, #0
 80124f6:	d0d5      	beq.n	80124a4 <__swbuf_r+0x20>
 80124f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80124fc:	e7f4      	b.n	80124e8 <__swbuf_r+0x64>
	...

08012500 <__swsetup_r>:
 8012500:	b538      	push	{r3, r4, r5, lr}
 8012502:	4b2a      	ldr	r3, [pc, #168]	; (80125ac <__swsetup_r+0xac>)
 8012504:	4605      	mov	r5, r0
 8012506:	6818      	ldr	r0, [r3, #0]
 8012508:	460c      	mov	r4, r1
 801250a:	b118      	cbz	r0, 8012514 <__swsetup_r+0x14>
 801250c:	6a03      	ldr	r3, [r0, #32]
 801250e:	b90b      	cbnz	r3, 8012514 <__swsetup_r+0x14>
 8012510:	f7fc fc58 	bl	800edc4 <__sinit>
 8012514:	89a3      	ldrh	r3, [r4, #12]
 8012516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801251a:	0718      	lsls	r0, r3, #28
 801251c:	d422      	bmi.n	8012564 <__swsetup_r+0x64>
 801251e:	06d9      	lsls	r1, r3, #27
 8012520:	d407      	bmi.n	8012532 <__swsetup_r+0x32>
 8012522:	2309      	movs	r3, #9
 8012524:	602b      	str	r3, [r5, #0]
 8012526:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801252a:	81a3      	strh	r3, [r4, #12]
 801252c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012530:	e034      	b.n	801259c <__swsetup_r+0x9c>
 8012532:	0758      	lsls	r0, r3, #29
 8012534:	d512      	bpl.n	801255c <__swsetup_r+0x5c>
 8012536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012538:	b141      	cbz	r1, 801254c <__swsetup_r+0x4c>
 801253a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801253e:	4299      	cmp	r1, r3
 8012540:	d002      	beq.n	8012548 <__swsetup_r+0x48>
 8012542:	4628      	mov	r0, r5
 8012544:	f7ff fdee 	bl	8012124 <_free_r>
 8012548:	2300      	movs	r3, #0
 801254a:	6363      	str	r3, [r4, #52]	; 0x34
 801254c:	89a3      	ldrh	r3, [r4, #12]
 801254e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012552:	81a3      	strh	r3, [r4, #12]
 8012554:	2300      	movs	r3, #0
 8012556:	6063      	str	r3, [r4, #4]
 8012558:	6923      	ldr	r3, [r4, #16]
 801255a:	6023      	str	r3, [r4, #0]
 801255c:	89a3      	ldrh	r3, [r4, #12]
 801255e:	f043 0308 	orr.w	r3, r3, #8
 8012562:	81a3      	strh	r3, [r4, #12]
 8012564:	6923      	ldr	r3, [r4, #16]
 8012566:	b94b      	cbnz	r3, 801257c <__swsetup_r+0x7c>
 8012568:	89a3      	ldrh	r3, [r4, #12]
 801256a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801256e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012572:	d003      	beq.n	801257c <__swsetup_r+0x7c>
 8012574:	4621      	mov	r1, r4
 8012576:	4628      	mov	r0, r5
 8012578:	f000 f840 	bl	80125fc <__smakebuf_r>
 801257c:	89a0      	ldrh	r0, [r4, #12]
 801257e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012582:	f010 0301 	ands.w	r3, r0, #1
 8012586:	d00a      	beq.n	801259e <__swsetup_r+0x9e>
 8012588:	2300      	movs	r3, #0
 801258a:	60a3      	str	r3, [r4, #8]
 801258c:	6963      	ldr	r3, [r4, #20]
 801258e:	425b      	negs	r3, r3
 8012590:	61a3      	str	r3, [r4, #24]
 8012592:	6923      	ldr	r3, [r4, #16]
 8012594:	b943      	cbnz	r3, 80125a8 <__swsetup_r+0xa8>
 8012596:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801259a:	d1c4      	bne.n	8012526 <__swsetup_r+0x26>
 801259c:	bd38      	pop	{r3, r4, r5, pc}
 801259e:	0781      	lsls	r1, r0, #30
 80125a0:	bf58      	it	pl
 80125a2:	6963      	ldrpl	r3, [r4, #20]
 80125a4:	60a3      	str	r3, [r4, #8]
 80125a6:	e7f4      	b.n	8012592 <__swsetup_r+0x92>
 80125a8:	2000      	movs	r0, #0
 80125aa:	e7f7      	b.n	801259c <__swsetup_r+0x9c>
 80125ac:	200001ec 	.word	0x200001ec

080125b0 <__swhatbuf_r>:
 80125b0:	b570      	push	{r4, r5, r6, lr}
 80125b2:	460c      	mov	r4, r1
 80125b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125b8:	2900      	cmp	r1, #0
 80125ba:	b096      	sub	sp, #88	; 0x58
 80125bc:	4615      	mov	r5, r2
 80125be:	461e      	mov	r6, r3
 80125c0:	da0d      	bge.n	80125de <__swhatbuf_r+0x2e>
 80125c2:	89a3      	ldrh	r3, [r4, #12]
 80125c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80125c8:	f04f 0100 	mov.w	r1, #0
 80125cc:	bf0c      	ite	eq
 80125ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80125d2:	2340      	movne	r3, #64	; 0x40
 80125d4:	2000      	movs	r0, #0
 80125d6:	6031      	str	r1, [r6, #0]
 80125d8:	602b      	str	r3, [r5, #0]
 80125da:	b016      	add	sp, #88	; 0x58
 80125dc:	bd70      	pop	{r4, r5, r6, pc}
 80125de:	466a      	mov	r2, sp
 80125e0:	f000 f848 	bl	8012674 <_fstat_r>
 80125e4:	2800      	cmp	r0, #0
 80125e6:	dbec      	blt.n	80125c2 <__swhatbuf_r+0x12>
 80125e8:	9901      	ldr	r1, [sp, #4]
 80125ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80125ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80125f2:	4259      	negs	r1, r3
 80125f4:	4159      	adcs	r1, r3
 80125f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125fa:	e7eb      	b.n	80125d4 <__swhatbuf_r+0x24>

080125fc <__smakebuf_r>:
 80125fc:	898b      	ldrh	r3, [r1, #12]
 80125fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012600:	079d      	lsls	r5, r3, #30
 8012602:	4606      	mov	r6, r0
 8012604:	460c      	mov	r4, r1
 8012606:	d507      	bpl.n	8012618 <__smakebuf_r+0x1c>
 8012608:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801260c:	6023      	str	r3, [r4, #0]
 801260e:	6123      	str	r3, [r4, #16]
 8012610:	2301      	movs	r3, #1
 8012612:	6163      	str	r3, [r4, #20]
 8012614:	b002      	add	sp, #8
 8012616:	bd70      	pop	{r4, r5, r6, pc}
 8012618:	ab01      	add	r3, sp, #4
 801261a:	466a      	mov	r2, sp
 801261c:	f7ff ffc8 	bl	80125b0 <__swhatbuf_r>
 8012620:	9900      	ldr	r1, [sp, #0]
 8012622:	4605      	mov	r5, r0
 8012624:	4630      	mov	r0, r6
 8012626:	f7fe fe61 	bl	80112ec <_malloc_r>
 801262a:	b948      	cbnz	r0, 8012640 <__smakebuf_r+0x44>
 801262c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012630:	059a      	lsls	r2, r3, #22
 8012632:	d4ef      	bmi.n	8012614 <__smakebuf_r+0x18>
 8012634:	f023 0303 	bic.w	r3, r3, #3
 8012638:	f043 0302 	orr.w	r3, r3, #2
 801263c:	81a3      	strh	r3, [r4, #12]
 801263e:	e7e3      	b.n	8012608 <__smakebuf_r+0xc>
 8012640:	89a3      	ldrh	r3, [r4, #12]
 8012642:	6020      	str	r0, [r4, #0]
 8012644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012648:	81a3      	strh	r3, [r4, #12]
 801264a:	9b00      	ldr	r3, [sp, #0]
 801264c:	6163      	str	r3, [r4, #20]
 801264e:	9b01      	ldr	r3, [sp, #4]
 8012650:	6120      	str	r0, [r4, #16]
 8012652:	b15b      	cbz	r3, 801266c <__smakebuf_r+0x70>
 8012654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012658:	4630      	mov	r0, r6
 801265a:	f000 f81d 	bl	8012698 <_isatty_r>
 801265e:	b128      	cbz	r0, 801266c <__smakebuf_r+0x70>
 8012660:	89a3      	ldrh	r3, [r4, #12]
 8012662:	f023 0303 	bic.w	r3, r3, #3
 8012666:	f043 0301 	orr.w	r3, r3, #1
 801266a:	81a3      	strh	r3, [r4, #12]
 801266c:	89a3      	ldrh	r3, [r4, #12]
 801266e:	431d      	orrs	r5, r3
 8012670:	81a5      	strh	r5, [r4, #12]
 8012672:	e7cf      	b.n	8012614 <__smakebuf_r+0x18>

08012674 <_fstat_r>:
 8012674:	b538      	push	{r3, r4, r5, lr}
 8012676:	4d07      	ldr	r5, [pc, #28]	; (8012694 <_fstat_r+0x20>)
 8012678:	2300      	movs	r3, #0
 801267a:	4604      	mov	r4, r0
 801267c:	4608      	mov	r0, r1
 801267e:	4611      	mov	r1, r2
 8012680:	602b      	str	r3, [r5, #0]
 8012682:	f7f3 fbbe 	bl	8005e02 <_fstat>
 8012686:	1c43      	adds	r3, r0, #1
 8012688:	d102      	bne.n	8012690 <_fstat_r+0x1c>
 801268a:	682b      	ldr	r3, [r5, #0]
 801268c:	b103      	cbz	r3, 8012690 <_fstat_r+0x1c>
 801268e:	6023      	str	r3, [r4, #0]
 8012690:	bd38      	pop	{r3, r4, r5, pc}
 8012692:	bf00      	nop
 8012694:	2000314c 	.word	0x2000314c

08012698 <_isatty_r>:
 8012698:	b538      	push	{r3, r4, r5, lr}
 801269a:	4d06      	ldr	r5, [pc, #24]	; (80126b4 <_isatty_r+0x1c>)
 801269c:	2300      	movs	r3, #0
 801269e:	4604      	mov	r4, r0
 80126a0:	4608      	mov	r0, r1
 80126a2:	602b      	str	r3, [r5, #0]
 80126a4:	f7f3 fbbd 	bl	8005e22 <_isatty>
 80126a8:	1c43      	adds	r3, r0, #1
 80126aa:	d102      	bne.n	80126b2 <_isatty_r+0x1a>
 80126ac:	682b      	ldr	r3, [r5, #0]
 80126ae:	b103      	cbz	r3, 80126b2 <_isatty_r+0x1a>
 80126b0:	6023      	str	r3, [r4, #0]
 80126b2:	bd38      	pop	{r3, r4, r5, pc}
 80126b4:	2000314c 	.word	0x2000314c

080126b8 <_raise_r>:
 80126b8:	291f      	cmp	r1, #31
 80126ba:	b538      	push	{r3, r4, r5, lr}
 80126bc:	4604      	mov	r4, r0
 80126be:	460d      	mov	r5, r1
 80126c0:	d904      	bls.n	80126cc <_raise_r+0x14>
 80126c2:	2316      	movs	r3, #22
 80126c4:	6003      	str	r3, [r0, #0]
 80126c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126ca:	bd38      	pop	{r3, r4, r5, pc}
 80126cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80126ce:	b112      	cbz	r2, 80126d6 <_raise_r+0x1e>
 80126d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126d4:	b94b      	cbnz	r3, 80126ea <_raise_r+0x32>
 80126d6:	4620      	mov	r0, r4
 80126d8:	f000 f830 	bl	801273c <_getpid_r>
 80126dc:	462a      	mov	r2, r5
 80126de:	4601      	mov	r1, r0
 80126e0:	4620      	mov	r0, r4
 80126e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126e6:	f000 b817 	b.w	8012718 <_kill_r>
 80126ea:	2b01      	cmp	r3, #1
 80126ec:	d00a      	beq.n	8012704 <_raise_r+0x4c>
 80126ee:	1c59      	adds	r1, r3, #1
 80126f0:	d103      	bne.n	80126fa <_raise_r+0x42>
 80126f2:	2316      	movs	r3, #22
 80126f4:	6003      	str	r3, [r0, #0]
 80126f6:	2001      	movs	r0, #1
 80126f8:	e7e7      	b.n	80126ca <_raise_r+0x12>
 80126fa:	2400      	movs	r4, #0
 80126fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012700:	4628      	mov	r0, r5
 8012702:	4798      	blx	r3
 8012704:	2000      	movs	r0, #0
 8012706:	e7e0      	b.n	80126ca <_raise_r+0x12>

08012708 <raise>:
 8012708:	4b02      	ldr	r3, [pc, #8]	; (8012714 <raise+0xc>)
 801270a:	4601      	mov	r1, r0
 801270c:	6818      	ldr	r0, [r3, #0]
 801270e:	f7ff bfd3 	b.w	80126b8 <_raise_r>
 8012712:	bf00      	nop
 8012714:	200001ec 	.word	0x200001ec

08012718 <_kill_r>:
 8012718:	b538      	push	{r3, r4, r5, lr}
 801271a:	4d07      	ldr	r5, [pc, #28]	; (8012738 <_kill_r+0x20>)
 801271c:	2300      	movs	r3, #0
 801271e:	4604      	mov	r4, r0
 8012720:	4608      	mov	r0, r1
 8012722:	4611      	mov	r1, r2
 8012724:	602b      	str	r3, [r5, #0]
 8012726:	f7f3 fb0d 	bl	8005d44 <_kill>
 801272a:	1c43      	adds	r3, r0, #1
 801272c:	d102      	bne.n	8012734 <_kill_r+0x1c>
 801272e:	682b      	ldr	r3, [r5, #0]
 8012730:	b103      	cbz	r3, 8012734 <_kill_r+0x1c>
 8012732:	6023      	str	r3, [r4, #0]
 8012734:	bd38      	pop	{r3, r4, r5, pc}
 8012736:	bf00      	nop
 8012738:	2000314c 	.word	0x2000314c

0801273c <_getpid_r>:
 801273c:	f7f3 bafa 	b.w	8005d34 <_getpid>

08012740 <atan2f>:
 8012740:	f000 bb4e 	b.w	8012de0 <__ieee754_atan2f>

08012744 <atan2>:
 8012744:	f000 b800 	b.w	8012748 <__ieee754_atan2>

08012748 <__ieee754_atan2>:
 8012748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801274c:	ec57 6b11 	vmov	r6, r7, d1
 8012750:	4273      	negs	r3, r6
 8012752:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80128d0 <__ieee754_atan2+0x188>
 8012756:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801275a:	4333      	orrs	r3, r6
 801275c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012760:	4543      	cmp	r3, r8
 8012762:	ec51 0b10 	vmov	r0, r1, d0
 8012766:	ee11 5a10 	vmov	r5, s2
 801276a:	d80a      	bhi.n	8012782 <__ieee754_atan2+0x3a>
 801276c:	4244      	negs	r4, r0
 801276e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012772:	4304      	orrs	r4, r0
 8012774:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012778:	4544      	cmp	r4, r8
 801277a:	ee10 9a10 	vmov	r9, s0
 801277e:	468e      	mov	lr, r1
 8012780:	d907      	bls.n	8012792 <__ieee754_atan2+0x4a>
 8012782:	4632      	mov	r2, r6
 8012784:	463b      	mov	r3, r7
 8012786:	f7ed fd81 	bl	800028c <__adddf3>
 801278a:	ec41 0b10 	vmov	d0, r0, r1
 801278e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012792:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8012796:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801279a:	4334      	orrs	r4, r6
 801279c:	d103      	bne.n	80127a6 <__ieee754_atan2+0x5e>
 801279e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127a2:	f000 b8c5 	b.w	8012930 <atan>
 80127a6:	17bc      	asrs	r4, r7, #30
 80127a8:	f004 0402 	and.w	r4, r4, #2
 80127ac:	ea53 0909 	orrs.w	r9, r3, r9
 80127b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80127b4:	d107      	bne.n	80127c6 <__ieee754_atan2+0x7e>
 80127b6:	2c02      	cmp	r4, #2
 80127b8:	d05f      	beq.n	801287a <__ieee754_atan2+0x132>
 80127ba:	2c03      	cmp	r4, #3
 80127bc:	d1e5      	bne.n	801278a <__ieee754_atan2+0x42>
 80127be:	a140      	add	r1, pc, #256	; (adr r1, 80128c0 <__ieee754_atan2+0x178>)
 80127c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127c4:	e7e1      	b.n	801278a <__ieee754_atan2+0x42>
 80127c6:	4315      	orrs	r5, r2
 80127c8:	d106      	bne.n	80127d8 <__ieee754_atan2+0x90>
 80127ca:	f1be 0f00 	cmp.w	lr, #0
 80127ce:	da5f      	bge.n	8012890 <__ieee754_atan2+0x148>
 80127d0:	a13d      	add	r1, pc, #244	; (adr r1, 80128c8 <__ieee754_atan2+0x180>)
 80127d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127d6:	e7d8      	b.n	801278a <__ieee754_atan2+0x42>
 80127d8:	4542      	cmp	r2, r8
 80127da:	d10f      	bne.n	80127fc <__ieee754_atan2+0xb4>
 80127dc:	4293      	cmp	r3, r2
 80127de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80127e2:	d107      	bne.n	80127f4 <__ieee754_atan2+0xac>
 80127e4:	2c02      	cmp	r4, #2
 80127e6:	d84c      	bhi.n	8012882 <__ieee754_atan2+0x13a>
 80127e8:	4b33      	ldr	r3, [pc, #204]	; (80128b8 <__ieee754_atan2+0x170>)
 80127ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80127ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80127f2:	e7ca      	b.n	801278a <__ieee754_atan2+0x42>
 80127f4:	2c02      	cmp	r4, #2
 80127f6:	d848      	bhi.n	801288a <__ieee754_atan2+0x142>
 80127f8:	4b30      	ldr	r3, [pc, #192]	; (80128bc <__ieee754_atan2+0x174>)
 80127fa:	e7f6      	b.n	80127ea <__ieee754_atan2+0xa2>
 80127fc:	4543      	cmp	r3, r8
 80127fe:	d0e4      	beq.n	80127ca <__ieee754_atan2+0x82>
 8012800:	1a9b      	subs	r3, r3, r2
 8012802:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012806:	ea4f 5223 	mov.w	r2, r3, asr #20
 801280a:	da1e      	bge.n	801284a <__ieee754_atan2+0x102>
 801280c:	2f00      	cmp	r7, #0
 801280e:	da01      	bge.n	8012814 <__ieee754_atan2+0xcc>
 8012810:	323c      	adds	r2, #60	; 0x3c
 8012812:	db1e      	blt.n	8012852 <__ieee754_atan2+0x10a>
 8012814:	4632      	mov	r2, r6
 8012816:	463b      	mov	r3, r7
 8012818:	f7ee f818 	bl	800084c <__aeabi_ddiv>
 801281c:	ec41 0b10 	vmov	d0, r0, r1
 8012820:	f000 fa7a 	bl	8012d18 <fabs>
 8012824:	f000 f884 	bl	8012930 <atan>
 8012828:	ec51 0b10 	vmov	r0, r1, d0
 801282c:	2c01      	cmp	r4, #1
 801282e:	d013      	beq.n	8012858 <__ieee754_atan2+0x110>
 8012830:	2c02      	cmp	r4, #2
 8012832:	d015      	beq.n	8012860 <__ieee754_atan2+0x118>
 8012834:	2c00      	cmp	r4, #0
 8012836:	d0a8      	beq.n	801278a <__ieee754_atan2+0x42>
 8012838:	a317      	add	r3, pc, #92	; (adr r3, 8012898 <__ieee754_atan2+0x150>)
 801283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283e:	f7ed fd23 	bl	8000288 <__aeabi_dsub>
 8012842:	a317      	add	r3, pc, #92	; (adr r3, 80128a0 <__ieee754_atan2+0x158>)
 8012844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012848:	e014      	b.n	8012874 <__ieee754_atan2+0x12c>
 801284a:	a117      	add	r1, pc, #92	; (adr r1, 80128a8 <__ieee754_atan2+0x160>)
 801284c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012850:	e7ec      	b.n	801282c <__ieee754_atan2+0xe4>
 8012852:	2000      	movs	r0, #0
 8012854:	2100      	movs	r1, #0
 8012856:	e7e9      	b.n	801282c <__ieee754_atan2+0xe4>
 8012858:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801285c:	4619      	mov	r1, r3
 801285e:	e794      	b.n	801278a <__ieee754_atan2+0x42>
 8012860:	a30d      	add	r3, pc, #52	; (adr r3, 8012898 <__ieee754_atan2+0x150>)
 8012862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012866:	f7ed fd0f 	bl	8000288 <__aeabi_dsub>
 801286a:	4602      	mov	r2, r0
 801286c:	460b      	mov	r3, r1
 801286e:	a10c      	add	r1, pc, #48	; (adr r1, 80128a0 <__ieee754_atan2+0x158>)
 8012870:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012874:	f7ed fd08 	bl	8000288 <__aeabi_dsub>
 8012878:	e787      	b.n	801278a <__ieee754_atan2+0x42>
 801287a:	a109      	add	r1, pc, #36	; (adr r1, 80128a0 <__ieee754_atan2+0x158>)
 801287c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012880:	e783      	b.n	801278a <__ieee754_atan2+0x42>
 8012882:	a10b      	add	r1, pc, #44	; (adr r1, 80128b0 <__ieee754_atan2+0x168>)
 8012884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012888:	e77f      	b.n	801278a <__ieee754_atan2+0x42>
 801288a:	2000      	movs	r0, #0
 801288c:	2100      	movs	r1, #0
 801288e:	e77c      	b.n	801278a <__ieee754_atan2+0x42>
 8012890:	a105      	add	r1, pc, #20	; (adr r1, 80128a8 <__ieee754_atan2+0x160>)
 8012892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012896:	e778      	b.n	801278a <__ieee754_atan2+0x42>
 8012898:	33145c07 	.word	0x33145c07
 801289c:	3ca1a626 	.word	0x3ca1a626
 80128a0:	54442d18 	.word	0x54442d18
 80128a4:	400921fb 	.word	0x400921fb
 80128a8:	54442d18 	.word	0x54442d18
 80128ac:	3ff921fb 	.word	0x3ff921fb
 80128b0:	54442d18 	.word	0x54442d18
 80128b4:	3fe921fb 	.word	0x3fe921fb
 80128b8:	080153f8 	.word	0x080153f8
 80128bc:	08015410 	.word	0x08015410
 80128c0:	54442d18 	.word	0x54442d18
 80128c4:	c00921fb 	.word	0xc00921fb
 80128c8:	54442d18 	.word	0x54442d18
 80128cc:	bff921fb 	.word	0xbff921fb
 80128d0:	7ff00000 	.word	0x7ff00000

080128d4 <sqrt>:
 80128d4:	b538      	push	{r3, r4, r5, lr}
 80128d6:	ed2d 8b02 	vpush	{d8}
 80128da:	ec55 4b10 	vmov	r4, r5, d0
 80128de:	f000 fb1f 	bl	8012f20 <__ieee754_sqrt>
 80128e2:	4622      	mov	r2, r4
 80128e4:	462b      	mov	r3, r5
 80128e6:	4620      	mov	r0, r4
 80128e8:	4629      	mov	r1, r5
 80128ea:	eeb0 8a40 	vmov.f32	s16, s0
 80128ee:	eef0 8a60 	vmov.f32	s17, s1
 80128f2:	f7ee f91b 	bl	8000b2c <__aeabi_dcmpun>
 80128f6:	b990      	cbnz	r0, 801291e <sqrt+0x4a>
 80128f8:	2200      	movs	r2, #0
 80128fa:	2300      	movs	r3, #0
 80128fc:	4620      	mov	r0, r4
 80128fe:	4629      	mov	r1, r5
 8012900:	f7ee f8ec 	bl	8000adc <__aeabi_dcmplt>
 8012904:	b158      	cbz	r0, 801291e <sqrt+0x4a>
 8012906:	f7fd f953 	bl	800fbb0 <__errno>
 801290a:	2321      	movs	r3, #33	; 0x21
 801290c:	6003      	str	r3, [r0, #0]
 801290e:	2200      	movs	r2, #0
 8012910:	2300      	movs	r3, #0
 8012912:	4610      	mov	r0, r2
 8012914:	4619      	mov	r1, r3
 8012916:	f7ed ff99 	bl	800084c <__aeabi_ddiv>
 801291a:	ec41 0b18 	vmov	d8, r0, r1
 801291e:	eeb0 0a48 	vmov.f32	s0, s16
 8012922:	eef0 0a68 	vmov.f32	s1, s17
 8012926:	ecbd 8b02 	vpop	{d8}
 801292a:	bd38      	pop	{r3, r4, r5, pc}
 801292c:	0000      	movs	r0, r0
	...

08012930 <atan>:
 8012930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012934:	ec55 4b10 	vmov	r4, r5, d0
 8012938:	4bc3      	ldr	r3, [pc, #780]	; (8012c48 <atan+0x318>)
 801293a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801293e:	429e      	cmp	r6, r3
 8012940:	46ab      	mov	fp, r5
 8012942:	dd18      	ble.n	8012976 <atan+0x46>
 8012944:	4bc1      	ldr	r3, [pc, #772]	; (8012c4c <atan+0x31c>)
 8012946:	429e      	cmp	r6, r3
 8012948:	dc01      	bgt.n	801294e <atan+0x1e>
 801294a:	d109      	bne.n	8012960 <atan+0x30>
 801294c:	b144      	cbz	r4, 8012960 <atan+0x30>
 801294e:	4622      	mov	r2, r4
 8012950:	462b      	mov	r3, r5
 8012952:	4620      	mov	r0, r4
 8012954:	4629      	mov	r1, r5
 8012956:	f7ed fc99 	bl	800028c <__adddf3>
 801295a:	4604      	mov	r4, r0
 801295c:	460d      	mov	r5, r1
 801295e:	e006      	b.n	801296e <atan+0x3e>
 8012960:	f1bb 0f00 	cmp.w	fp, #0
 8012964:	f300 8131 	bgt.w	8012bca <atan+0x29a>
 8012968:	a59b      	add	r5, pc, #620	; (adr r5, 8012bd8 <atan+0x2a8>)
 801296a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801296e:	ec45 4b10 	vmov	d0, r4, r5
 8012972:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012976:	4bb6      	ldr	r3, [pc, #728]	; (8012c50 <atan+0x320>)
 8012978:	429e      	cmp	r6, r3
 801297a:	dc14      	bgt.n	80129a6 <atan+0x76>
 801297c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012980:	429e      	cmp	r6, r3
 8012982:	dc0d      	bgt.n	80129a0 <atan+0x70>
 8012984:	a396      	add	r3, pc, #600	; (adr r3, 8012be0 <atan+0x2b0>)
 8012986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801298a:	ee10 0a10 	vmov	r0, s0
 801298e:	4629      	mov	r1, r5
 8012990:	f7ed fc7c 	bl	800028c <__adddf3>
 8012994:	4baf      	ldr	r3, [pc, #700]	; (8012c54 <atan+0x324>)
 8012996:	2200      	movs	r2, #0
 8012998:	f7ee f8be 	bl	8000b18 <__aeabi_dcmpgt>
 801299c:	2800      	cmp	r0, #0
 801299e:	d1e6      	bne.n	801296e <atan+0x3e>
 80129a0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80129a4:	e02b      	b.n	80129fe <atan+0xce>
 80129a6:	f000 f9b7 	bl	8012d18 <fabs>
 80129aa:	4bab      	ldr	r3, [pc, #684]	; (8012c58 <atan+0x328>)
 80129ac:	429e      	cmp	r6, r3
 80129ae:	ec55 4b10 	vmov	r4, r5, d0
 80129b2:	f300 80bf 	bgt.w	8012b34 <atan+0x204>
 80129b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80129ba:	429e      	cmp	r6, r3
 80129bc:	f300 80a0 	bgt.w	8012b00 <atan+0x1d0>
 80129c0:	ee10 2a10 	vmov	r2, s0
 80129c4:	ee10 0a10 	vmov	r0, s0
 80129c8:	462b      	mov	r3, r5
 80129ca:	4629      	mov	r1, r5
 80129cc:	f7ed fc5e 	bl	800028c <__adddf3>
 80129d0:	4ba0      	ldr	r3, [pc, #640]	; (8012c54 <atan+0x324>)
 80129d2:	2200      	movs	r2, #0
 80129d4:	f7ed fc58 	bl	8000288 <__aeabi_dsub>
 80129d8:	2200      	movs	r2, #0
 80129da:	4606      	mov	r6, r0
 80129dc:	460f      	mov	r7, r1
 80129de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80129e2:	4620      	mov	r0, r4
 80129e4:	4629      	mov	r1, r5
 80129e6:	f7ed fc51 	bl	800028c <__adddf3>
 80129ea:	4602      	mov	r2, r0
 80129ec:	460b      	mov	r3, r1
 80129ee:	4630      	mov	r0, r6
 80129f0:	4639      	mov	r1, r7
 80129f2:	f7ed ff2b 	bl	800084c <__aeabi_ddiv>
 80129f6:	f04f 0a00 	mov.w	sl, #0
 80129fa:	4604      	mov	r4, r0
 80129fc:	460d      	mov	r5, r1
 80129fe:	4622      	mov	r2, r4
 8012a00:	462b      	mov	r3, r5
 8012a02:	4620      	mov	r0, r4
 8012a04:	4629      	mov	r1, r5
 8012a06:	f7ed fdf7 	bl	80005f8 <__aeabi_dmul>
 8012a0a:	4602      	mov	r2, r0
 8012a0c:	460b      	mov	r3, r1
 8012a0e:	4680      	mov	r8, r0
 8012a10:	4689      	mov	r9, r1
 8012a12:	f7ed fdf1 	bl	80005f8 <__aeabi_dmul>
 8012a16:	a374      	add	r3, pc, #464	; (adr r3, 8012be8 <atan+0x2b8>)
 8012a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1c:	4606      	mov	r6, r0
 8012a1e:	460f      	mov	r7, r1
 8012a20:	f7ed fdea 	bl	80005f8 <__aeabi_dmul>
 8012a24:	a372      	add	r3, pc, #456	; (adr r3, 8012bf0 <atan+0x2c0>)
 8012a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a2a:	f7ed fc2f 	bl	800028c <__adddf3>
 8012a2e:	4632      	mov	r2, r6
 8012a30:	463b      	mov	r3, r7
 8012a32:	f7ed fde1 	bl	80005f8 <__aeabi_dmul>
 8012a36:	a370      	add	r3, pc, #448	; (adr r3, 8012bf8 <atan+0x2c8>)
 8012a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3c:	f7ed fc26 	bl	800028c <__adddf3>
 8012a40:	4632      	mov	r2, r6
 8012a42:	463b      	mov	r3, r7
 8012a44:	f7ed fdd8 	bl	80005f8 <__aeabi_dmul>
 8012a48:	a36d      	add	r3, pc, #436	; (adr r3, 8012c00 <atan+0x2d0>)
 8012a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4e:	f7ed fc1d 	bl	800028c <__adddf3>
 8012a52:	4632      	mov	r2, r6
 8012a54:	463b      	mov	r3, r7
 8012a56:	f7ed fdcf 	bl	80005f8 <__aeabi_dmul>
 8012a5a:	a36b      	add	r3, pc, #428	; (adr r3, 8012c08 <atan+0x2d8>)
 8012a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a60:	f7ed fc14 	bl	800028c <__adddf3>
 8012a64:	4632      	mov	r2, r6
 8012a66:	463b      	mov	r3, r7
 8012a68:	f7ed fdc6 	bl	80005f8 <__aeabi_dmul>
 8012a6c:	a368      	add	r3, pc, #416	; (adr r3, 8012c10 <atan+0x2e0>)
 8012a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a72:	f7ed fc0b 	bl	800028c <__adddf3>
 8012a76:	4642      	mov	r2, r8
 8012a78:	464b      	mov	r3, r9
 8012a7a:	f7ed fdbd 	bl	80005f8 <__aeabi_dmul>
 8012a7e:	a366      	add	r3, pc, #408	; (adr r3, 8012c18 <atan+0x2e8>)
 8012a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a84:	4680      	mov	r8, r0
 8012a86:	4689      	mov	r9, r1
 8012a88:	4630      	mov	r0, r6
 8012a8a:	4639      	mov	r1, r7
 8012a8c:	f7ed fdb4 	bl	80005f8 <__aeabi_dmul>
 8012a90:	a363      	add	r3, pc, #396	; (adr r3, 8012c20 <atan+0x2f0>)
 8012a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a96:	f7ed fbf7 	bl	8000288 <__aeabi_dsub>
 8012a9a:	4632      	mov	r2, r6
 8012a9c:	463b      	mov	r3, r7
 8012a9e:	f7ed fdab 	bl	80005f8 <__aeabi_dmul>
 8012aa2:	a361      	add	r3, pc, #388	; (adr r3, 8012c28 <atan+0x2f8>)
 8012aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa8:	f7ed fbee 	bl	8000288 <__aeabi_dsub>
 8012aac:	4632      	mov	r2, r6
 8012aae:	463b      	mov	r3, r7
 8012ab0:	f7ed fda2 	bl	80005f8 <__aeabi_dmul>
 8012ab4:	a35e      	add	r3, pc, #376	; (adr r3, 8012c30 <atan+0x300>)
 8012ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aba:	f7ed fbe5 	bl	8000288 <__aeabi_dsub>
 8012abe:	4632      	mov	r2, r6
 8012ac0:	463b      	mov	r3, r7
 8012ac2:	f7ed fd99 	bl	80005f8 <__aeabi_dmul>
 8012ac6:	a35c      	add	r3, pc, #368	; (adr r3, 8012c38 <atan+0x308>)
 8012ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012acc:	f7ed fbdc 	bl	8000288 <__aeabi_dsub>
 8012ad0:	4632      	mov	r2, r6
 8012ad2:	463b      	mov	r3, r7
 8012ad4:	f7ed fd90 	bl	80005f8 <__aeabi_dmul>
 8012ad8:	4602      	mov	r2, r0
 8012ada:	460b      	mov	r3, r1
 8012adc:	4640      	mov	r0, r8
 8012ade:	4649      	mov	r1, r9
 8012ae0:	f7ed fbd4 	bl	800028c <__adddf3>
 8012ae4:	4622      	mov	r2, r4
 8012ae6:	462b      	mov	r3, r5
 8012ae8:	f7ed fd86 	bl	80005f8 <__aeabi_dmul>
 8012aec:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8012af0:	4602      	mov	r2, r0
 8012af2:	460b      	mov	r3, r1
 8012af4:	d14b      	bne.n	8012b8e <atan+0x25e>
 8012af6:	4620      	mov	r0, r4
 8012af8:	4629      	mov	r1, r5
 8012afa:	f7ed fbc5 	bl	8000288 <__aeabi_dsub>
 8012afe:	e72c      	b.n	801295a <atan+0x2a>
 8012b00:	ee10 0a10 	vmov	r0, s0
 8012b04:	4b53      	ldr	r3, [pc, #332]	; (8012c54 <atan+0x324>)
 8012b06:	2200      	movs	r2, #0
 8012b08:	4629      	mov	r1, r5
 8012b0a:	f7ed fbbd 	bl	8000288 <__aeabi_dsub>
 8012b0e:	4b51      	ldr	r3, [pc, #324]	; (8012c54 <atan+0x324>)
 8012b10:	4606      	mov	r6, r0
 8012b12:	460f      	mov	r7, r1
 8012b14:	2200      	movs	r2, #0
 8012b16:	4620      	mov	r0, r4
 8012b18:	4629      	mov	r1, r5
 8012b1a:	f7ed fbb7 	bl	800028c <__adddf3>
 8012b1e:	4602      	mov	r2, r0
 8012b20:	460b      	mov	r3, r1
 8012b22:	4630      	mov	r0, r6
 8012b24:	4639      	mov	r1, r7
 8012b26:	f7ed fe91 	bl	800084c <__aeabi_ddiv>
 8012b2a:	f04f 0a01 	mov.w	sl, #1
 8012b2e:	4604      	mov	r4, r0
 8012b30:	460d      	mov	r5, r1
 8012b32:	e764      	b.n	80129fe <atan+0xce>
 8012b34:	4b49      	ldr	r3, [pc, #292]	; (8012c5c <atan+0x32c>)
 8012b36:	429e      	cmp	r6, r3
 8012b38:	da1d      	bge.n	8012b76 <atan+0x246>
 8012b3a:	ee10 0a10 	vmov	r0, s0
 8012b3e:	4b48      	ldr	r3, [pc, #288]	; (8012c60 <atan+0x330>)
 8012b40:	2200      	movs	r2, #0
 8012b42:	4629      	mov	r1, r5
 8012b44:	f7ed fba0 	bl	8000288 <__aeabi_dsub>
 8012b48:	4b45      	ldr	r3, [pc, #276]	; (8012c60 <atan+0x330>)
 8012b4a:	4606      	mov	r6, r0
 8012b4c:	460f      	mov	r7, r1
 8012b4e:	2200      	movs	r2, #0
 8012b50:	4620      	mov	r0, r4
 8012b52:	4629      	mov	r1, r5
 8012b54:	f7ed fd50 	bl	80005f8 <__aeabi_dmul>
 8012b58:	4b3e      	ldr	r3, [pc, #248]	; (8012c54 <atan+0x324>)
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	f7ed fb96 	bl	800028c <__adddf3>
 8012b60:	4602      	mov	r2, r0
 8012b62:	460b      	mov	r3, r1
 8012b64:	4630      	mov	r0, r6
 8012b66:	4639      	mov	r1, r7
 8012b68:	f7ed fe70 	bl	800084c <__aeabi_ddiv>
 8012b6c:	f04f 0a02 	mov.w	sl, #2
 8012b70:	4604      	mov	r4, r0
 8012b72:	460d      	mov	r5, r1
 8012b74:	e743      	b.n	80129fe <atan+0xce>
 8012b76:	462b      	mov	r3, r5
 8012b78:	ee10 2a10 	vmov	r2, s0
 8012b7c:	4939      	ldr	r1, [pc, #228]	; (8012c64 <atan+0x334>)
 8012b7e:	2000      	movs	r0, #0
 8012b80:	f7ed fe64 	bl	800084c <__aeabi_ddiv>
 8012b84:	f04f 0a03 	mov.w	sl, #3
 8012b88:	4604      	mov	r4, r0
 8012b8a:	460d      	mov	r5, r1
 8012b8c:	e737      	b.n	80129fe <atan+0xce>
 8012b8e:	4b36      	ldr	r3, [pc, #216]	; (8012c68 <atan+0x338>)
 8012b90:	4e36      	ldr	r6, [pc, #216]	; (8012c6c <atan+0x33c>)
 8012b92:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9a:	f7ed fb75 	bl	8000288 <__aeabi_dsub>
 8012b9e:	4622      	mov	r2, r4
 8012ba0:	462b      	mov	r3, r5
 8012ba2:	f7ed fb71 	bl	8000288 <__aeabi_dsub>
 8012ba6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012baa:	4602      	mov	r2, r0
 8012bac:	460b      	mov	r3, r1
 8012bae:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012bb2:	f7ed fb69 	bl	8000288 <__aeabi_dsub>
 8012bb6:	f1bb 0f00 	cmp.w	fp, #0
 8012bba:	4604      	mov	r4, r0
 8012bbc:	460d      	mov	r5, r1
 8012bbe:	f6bf aed6 	bge.w	801296e <atan+0x3e>
 8012bc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012bc6:	461d      	mov	r5, r3
 8012bc8:	e6d1      	b.n	801296e <atan+0x3e>
 8012bca:	a51d      	add	r5, pc, #116	; (adr r5, 8012c40 <atan+0x310>)
 8012bcc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012bd0:	e6cd      	b.n	801296e <atan+0x3e>
 8012bd2:	bf00      	nop
 8012bd4:	f3af 8000 	nop.w
 8012bd8:	54442d18 	.word	0x54442d18
 8012bdc:	bff921fb 	.word	0xbff921fb
 8012be0:	8800759c 	.word	0x8800759c
 8012be4:	7e37e43c 	.word	0x7e37e43c
 8012be8:	e322da11 	.word	0xe322da11
 8012bec:	3f90ad3a 	.word	0x3f90ad3a
 8012bf0:	24760deb 	.word	0x24760deb
 8012bf4:	3fa97b4b 	.word	0x3fa97b4b
 8012bf8:	a0d03d51 	.word	0xa0d03d51
 8012bfc:	3fb10d66 	.word	0x3fb10d66
 8012c00:	c54c206e 	.word	0xc54c206e
 8012c04:	3fb745cd 	.word	0x3fb745cd
 8012c08:	920083ff 	.word	0x920083ff
 8012c0c:	3fc24924 	.word	0x3fc24924
 8012c10:	5555550d 	.word	0x5555550d
 8012c14:	3fd55555 	.word	0x3fd55555
 8012c18:	2c6a6c2f 	.word	0x2c6a6c2f
 8012c1c:	bfa2b444 	.word	0xbfa2b444
 8012c20:	52defd9a 	.word	0x52defd9a
 8012c24:	3fadde2d 	.word	0x3fadde2d
 8012c28:	af749a6d 	.word	0xaf749a6d
 8012c2c:	3fb3b0f2 	.word	0x3fb3b0f2
 8012c30:	fe231671 	.word	0xfe231671
 8012c34:	3fbc71c6 	.word	0x3fbc71c6
 8012c38:	9998ebc4 	.word	0x9998ebc4
 8012c3c:	3fc99999 	.word	0x3fc99999
 8012c40:	54442d18 	.word	0x54442d18
 8012c44:	3ff921fb 	.word	0x3ff921fb
 8012c48:	440fffff 	.word	0x440fffff
 8012c4c:	7ff00000 	.word	0x7ff00000
 8012c50:	3fdbffff 	.word	0x3fdbffff
 8012c54:	3ff00000 	.word	0x3ff00000
 8012c58:	3ff2ffff 	.word	0x3ff2ffff
 8012c5c:	40038000 	.word	0x40038000
 8012c60:	3ff80000 	.word	0x3ff80000
 8012c64:	bff00000 	.word	0xbff00000
 8012c68:	08015448 	.word	0x08015448
 8012c6c:	08015428 	.word	0x08015428

08012c70 <cos>:
 8012c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c72:	ec53 2b10 	vmov	r2, r3, d0
 8012c76:	4826      	ldr	r0, [pc, #152]	; (8012d10 <cos+0xa0>)
 8012c78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012c7c:	4281      	cmp	r1, r0
 8012c7e:	dc06      	bgt.n	8012c8e <cos+0x1e>
 8012c80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8012d08 <cos+0x98>
 8012c84:	b005      	add	sp, #20
 8012c86:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c8a:	f000 bf7d 	b.w	8013b88 <__kernel_cos>
 8012c8e:	4821      	ldr	r0, [pc, #132]	; (8012d14 <cos+0xa4>)
 8012c90:	4281      	cmp	r1, r0
 8012c92:	dd09      	ble.n	8012ca8 <cos+0x38>
 8012c94:	ee10 0a10 	vmov	r0, s0
 8012c98:	4619      	mov	r1, r3
 8012c9a:	f7ed faf5 	bl	8000288 <__aeabi_dsub>
 8012c9e:	ec41 0b10 	vmov	d0, r0, r1
 8012ca2:	b005      	add	sp, #20
 8012ca4:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ca8:	4668      	mov	r0, sp
 8012caa:	f000 fa15 	bl	80130d8 <__ieee754_rem_pio2>
 8012cae:	f000 0003 	and.w	r0, r0, #3
 8012cb2:	2801      	cmp	r0, #1
 8012cb4:	d00b      	beq.n	8012cce <cos+0x5e>
 8012cb6:	2802      	cmp	r0, #2
 8012cb8:	d016      	beq.n	8012ce8 <cos+0x78>
 8012cba:	b9e0      	cbnz	r0, 8012cf6 <cos+0x86>
 8012cbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012cc0:	ed9d 0b00 	vldr	d0, [sp]
 8012cc4:	f000 ff60 	bl	8013b88 <__kernel_cos>
 8012cc8:	ec51 0b10 	vmov	r0, r1, d0
 8012ccc:	e7e7      	b.n	8012c9e <cos+0x2e>
 8012cce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012cd2:	ed9d 0b00 	vldr	d0, [sp]
 8012cd6:	f001 f81f 	bl	8013d18 <__kernel_sin>
 8012cda:	ec53 2b10 	vmov	r2, r3, d0
 8012cde:	ee10 0a10 	vmov	r0, s0
 8012ce2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012ce6:	e7da      	b.n	8012c9e <cos+0x2e>
 8012ce8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012cec:	ed9d 0b00 	vldr	d0, [sp]
 8012cf0:	f000 ff4a 	bl	8013b88 <__kernel_cos>
 8012cf4:	e7f1      	b.n	8012cda <cos+0x6a>
 8012cf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012cfa:	ed9d 0b00 	vldr	d0, [sp]
 8012cfe:	2001      	movs	r0, #1
 8012d00:	f001 f80a 	bl	8013d18 <__kernel_sin>
 8012d04:	e7e0      	b.n	8012cc8 <cos+0x58>
 8012d06:	bf00      	nop
	...
 8012d10:	3fe921fb 	.word	0x3fe921fb
 8012d14:	7fefffff 	.word	0x7fefffff

08012d18 <fabs>:
 8012d18:	ec51 0b10 	vmov	r0, r1, d0
 8012d1c:	ee10 2a10 	vmov	r2, s0
 8012d20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012d24:	ec43 2b10 	vmov	d0, r2, r3
 8012d28:	4770      	bx	lr
 8012d2a:	0000      	movs	r0, r0
 8012d2c:	0000      	movs	r0, r0
	...

08012d30 <sin>:
 8012d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d32:	ec53 2b10 	vmov	r2, r3, d0
 8012d36:	4828      	ldr	r0, [pc, #160]	; (8012dd8 <sin+0xa8>)
 8012d38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012d3c:	4281      	cmp	r1, r0
 8012d3e:	dc07      	bgt.n	8012d50 <sin+0x20>
 8012d40:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8012dd0 <sin+0xa0>
 8012d44:	2000      	movs	r0, #0
 8012d46:	b005      	add	sp, #20
 8012d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d4c:	f000 bfe4 	b.w	8013d18 <__kernel_sin>
 8012d50:	4822      	ldr	r0, [pc, #136]	; (8012ddc <sin+0xac>)
 8012d52:	4281      	cmp	r1, r0
 8012d54:	dd09      	ble.n	8012d6a <sin+0x3a>
 8012d56:	ee10 0a10 	vmov	r0, s0
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	f7ed fa94 	bl	8000288 <__aeabi_dsub>
 8012d60:	ec41 0b10 	vmov	d0, r0, r1
 8012d64:	b005      	add	sp, #20
 8012d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d6a:	4668      	mov	r0, sp
 8012d6c:	f000 f9b4 	bl	80130d8 <__ieee754_rem_pio2>
 8012d70:	f000 0003 	and.w	r0, r0, #3
 8012d74:	2801      	cmp	r0, #1
 8012d76:	d00c      	beq.n	8012d92 <sin+0x62>
 8012d78:	2802      	cmp	r0, #2
 8012d7a:	d011      	beq.n	8012da0 <sin+0x70>
 8012d7c:	b9f0      	cbnz	r0, 8012dbc <sin+0x8c>
 8012d7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d82:	ed9d 0b00 	vldr	d0, [sp]
 8012d86:	2001      	movs	r0, #1
 8012d88:	f000 ffc6 	bl	8013d18 <__kernel_sin>
 8012d8c:	ec51 0b10 	vmov	r0, r1, d0
 8012d90:	e7e6      	b.n	8012d60 <sin+0x30>
 8012d92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d96:	ed9d 0b00 	vldr	d0, [sp]
 8012d9a:	f000 fef5 	bl	8013b88 <__kernel_cos>
 8012d9e:	e7f5      	b.n	8012d8c <sin+0x5c>
 8012da0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012da4:	ed9d 0b00 	vldr	d0, [sp]
 8012da8:	2001      	movs	r0, #1
 8012daa:	f000 ffb5 	bl	8013d18 <__kernel_sin>
 8012dae:	ec53 2b10 	vmov	r2, r3, d0
 8012db2:	ee10 0a10 	vmov	r0, s0
 8012db6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012dba:	e7d1      	b.n	8012d60 <sin+0x30>
 8012dbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012dc0:	ed9d 0b00 	vldr	d0, [sp]
 8012dc4:	f000 fee0 	bl	8013b88 <__kernel_cos>
 8012dc8:	e7f1      	b.n	8012dae <sin+0x7e>
 8012dca:	bf00      	nop
 8012dcc:	f3af 8000 	nop.w
	...
 8012dd8:	3fe921fb 	.word	0x3fe921fb
 8012ddc:	7fefffff 	.word	0x7fefffff

08012de0 <__ieee754_atan2f>:
 8012de0:	ee10 2a90 	vmov	r2, s1
 8012de4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012de8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012dec:	b510      	push	{r4, lr}
 8012dee:	eef0 7a40 	vmov.f32	s15, s0
 8012df2:	dc06      	bgt.n	8012e02 <__ieee754_atan2f+0x22>
 8012df4:	ee10 0a10 	vmov	r0, s0
 8012df8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012dfc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012e00:	dd04      	ble.n	8012e0c <__ieee754_atan2f+0x2c>
 8012e02:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012e06:	eeb0 0a67 	vmov.f32	s0, s15
 8012e0a:	bd10      	pop	{r4, pc}
 8012e0c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8012e10:	d103      	bne.n	8012e1a <__ieee754_atan2f+0x3a>
 8012e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e16:	f001 b83d 	b.w	8013e94 <atanf>
 8012e1a:	1794      	asrs	r4, r2, #30
 8012e1c:	f004 0402 	and.w	r4, r4, #2
 8012e20:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012e24:	b943      	cbnz	r3, 8012e38 <__ieee754_atan2f+0x58>
 8012e26:	2c02      	cmp	r4, #2
 8012e28:	d05e      	beq.n	8012ee8 <__ieee754_atan2f+0x108>
 8012e2a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012efc <__ieee754_atan2f+0x11c>
 8012e2e:	2c03      	cmp	r4, #3
 8012e30:	bf08      	it	eq
 8012e32:	eef0 7a47 	vmoveq.f32	s15, s14
 8012e36:	e7e6      	b.n	8012e06 <__ieee754_atan2f+0x26>
 8012e38:	b941      	cbnz	r1, 8012e4c <__ieee754_atan2f+0x6c>
 8012e3a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8012f00 <__ieee754_atan2f+0x120>
 8012e3e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8012f04 <__ieee754_atan2f+0x124>
 8012e42:	2800      	cmp	r0, #0
 8012e44:	bfb8      	it	lt
 8012e46:	eef0 7a47 	vmovlt.f32	s15, s14
 8012e4a:	e7dc      	b.n	8012e06 <__ieee754_atan2f+0x26>
 8012e4c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012e50:	d110      	bne.n	8012e74 <__ieee754_atan2f+0x94>
 8012e52:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012e56:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8012e5a:	d107      	bne.n	8012e6c <__ieee754_atan2f+0x8c>
 8012e5c:	2c02      	cmp	r4, #2
 8012e5e:	d846      	bhi.n	8012eee <__ieee754_atan2f+0x10e>
 8012e60:	4b29      	ldr	r3, [pc, #164]	; (8012f08 <__ieee754_atan2f+0x128>)
 8012e62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012e66:	edd3 7a00 	vldr	s15, [r3]
 8012e6a:	e7cc      	b.n	8012e06 <__ieee754_atan2f+0x26>
 8012e6c:	2c02      	cmp	r4, #2
 8012e6e:	d841      	bhi.n	8012ef4 <__ieee754_atan2f+0x114>
 8012e70:	4b26      	ldr	r3, [pc, #152]	; (8012f0c <__ieee754_atan2f+0x12c>)
 8012e72:	e7f6      	b.n	8012e62 <__ieee754_atan2f+0x82>
 8012e74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012e78:	d0df      	beq.n	8012e3a <__ieee754_atan2f+0x5a>
 8012e7a:	1a5b      	subs	r3, r3, r1
 8012e7c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8012e80:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012e84:	da1a      	bge.n	8012ebc <__ieee754_atan2f+0xdc>
 8012e86:	2a00      	cmp	r2, #0
 8012e88:	da01      	bge.n	8012e8e <__ieee754_atan2f+0xae>
 8012e8a:	313c      	adds	r1, #60	; 0x3c
 8012e8c:	db19      	blt.n	8012ec2 <__ieee754_atan2f+0xe2>
 8012e8e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012e92:	f001 f8d3 	bl	801403c <fabsf>
 8012e96:	f000 fffd 	bl	8013e94 <atanf>
 8012e9a:	eef0 7a40 	vmov.f32	s15, s0
 8012e9e:	2c01      	cmp	r4, #1
 8012ea0:	d012      	beq.n	8012ec8 <__ieee754_atan2f+0xe8>
 8012ea2:	2c02      	cmp	r4, #2
 8012ea4:	d017      	beq.n	8012ed6 <__ieee754_atan2f+0xf6>
 8012ea6:	2c00      	cmp	r4, #0
 8012ea8:	d0ad      	beq.n	8012e06 <__ieee754_atan2f+0x26>
 8012eaa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8012f10 <__ieee754_atan2f+0x130>
 8012eae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012eb2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8012f14 <__ieee754_atan2f+0x134>
 8012eb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012eba:	e7a4      	b.n	8012e06 <__ieee754_atan2f+0x26>
 8012ebc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012f00 <__ieee754_atan2f+0x120>
 8012ec0:	e7ed      	b.n	8012e9e <__ieee754_atan2f+0xbe>
 8012ec2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012f18 <__ieee754_atan2f+0x138>
 8012ec6:	e7ea      	b.n	8012e9e <__ieee754_atan2f+0xbe>
 8012ec8:	ee17 3a90 	vmov	r3, s15
 8012ecc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012ed0:	ee07 3a90 	vmov	s15, r3
 8012ed4:	e797      	b.n	8012e06 <__ieee754_atan2f+0x26>
 8012ed6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8012f10 <__ieee754_atan2f+0x130>
 8012eda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012ede:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8012f14 <__ieee754_atan2f+0x134>
 8012ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012ee6:	e78e      	b.n	8012e06 <__ieee754_atan2f+0x26>
 8012ee8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8012f14 <__ieee754_atan2f+0x134>
 8012eec:	e78b      	b.n	8012e06 <__ieee754_atan2f+0x26>
 8012eee:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012f1c <__ieee754_atan2f+0x13c>
 8012ef2:	e788      	b.n	8012e06 <__ieee754_atan2f+0x26>
 8012ef4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012f18 <__ieee754_atan2f+0x138>
 8012ef8:	e785      	b.n	8012e06 <__ieee754_atan2f+0x26>
 8012efa:	bf00      	nop
 8012efc:	c0490fdb 	.word	0xc0490fdb
 8012f00:	3fc90fdb 	.word	0x3fc90fdb
 8012f04:	bfc90fdb 	.word	0xbfc90fdb
 8012f08:	08015468 	.word	0x08015468
 8012f0c:	08015474 	.word	0x08015474
 8012f10:	33bbbd2e 	.word	0x33bbbd2e
 8012f14:	40490fdb 	.word	0x40490fdb
 8012f18:	00000000 	.word	0x00000000
 8012f1c:	3f490fdb 	.word	0x3f490fdb

08012f20 <__ieee754_sqrt>:
 8012f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f24:	ec55 4b10 	vmov	r4, r5, d0
 8012f28:	4e67      	ldr	r6, [pc, #412]	; (80130c8 <__ieee754_sqrt+0x1a8>)
 8012f2a:	43ae      	bics	r6, r5
 8012f2c:	ee10 0a10 	vmov	r0, s0
 8012f30:	ee10 2a10 	vmov	r2, s0
 8012f34:	4629      	mov	r1, r5
 8012f36:	462b      	mov	r3, r5
 8012f38:	d10d      	bne.n	8012f56 <__ieee754_sqrt+0x36>
 8012f3a:	f7ed fb5d 	bl	80005f8 <__aeabi_dmul>
 8012f3e:	4602      	mov	r2, r0
 8012f40:	460b      	mov	r3, r1
 8012f42:	4620      	mov	r0, r4
 8012f44:	4629      	mov	r1, r5
 8012f46:	f7ed f9a1 	bl	800028c <__adddf3>
 8012f4a:	4604      	mov	r4, r0
 8012f4c:	460d      	mov	r5, r1
 8012f4e:	ec45 4b10 	vmov	d0, r4, r5
 8012f52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f56:	2d00      	cmp	r5, #0
 8012f58:	dc0b      	bgt.n	8012f72 <__ieee754_sqrt+0x52>
 8012f5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012f5e:	4326      	orrs	r6, r4
 8012f60:	d0f5      	beq.n	8012f4e <__ieee754_sqrt+0x2e>
 8012f62:	b135      	cbz	r5, 8012f72 <__ieee754_sqrt+0x52>
 8012f64:	f7ed f990 	bl	8000288 <__aeabi_dsub>
 8012f68:	4602      	mov	r2, r0
 8012f6a:	460b      	mov	r3, r1
 8012f6c:	f7ed fc6e 	bl	800084c <__aeabi_ddiv>
 8012f70:	e7eb      	b.n	8012f4a <__ieee754_sqrt+0x2a>
 8012f72:	1509      	asrs	r1, r1, #20
 8012f74:	f000 808d 	beq.w	8013092 <__ieee754_sqrt+0x172>
 8012f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f7c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f84:	07c9      	lsls	r1, r1, #31
 8012f86:	bf5c      	itt	pl
 8012f88:	005b      	lslpl	r3, r3, #1
 8012f8a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8012f8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012f92:	bf58      	it	pl
 8012f94:	0052      	lslpl	r2, r2, #1
 8012f96:	2500      	movs	r5, #0
 8012f98:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012f9c:	1076      	asrs	r6, r6, #1
 8012f9e:	0052      	lsls	r2, r2, #1
 8012fa0:	f04f 0e16 	mov.w	lr, #22
 8012fa4:	46ac      	mov	ip, r5
 8012fa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012faa:	eb0c 0001 	add.w	r0, ip, r1
 8012fae:	4298      	cmp	r0, r3
 8012fb0:	bfde      	ittt	le
 8012fb2:	1a1b      	suble	r3, r3, r0
 8012fb4:	eb00 0c01 	addle.w	ip, r0, r1
 8012fb8:	186d      	addle	r5, r5, r1
 8012fba:	005b      	lsls	r3, r3, #1
 8012fbc:	f1be 0e01 	subs.w	lr, lr, #1
 8012fc0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012fc4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012fc8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012fcc:	d1ed      	bne.n	8012faa <__ieee754_sqrt+0x8a>
 8012fce:	4674      	mov	r4, lr
 8012fd0:	2720      	movs	r7, #32
 8012fd2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8012fd6:	4563      	cmp	r3, ip
 8012fd8:	eb01 000e 	add.w	r0, r1, lr
 8012fdc:	dc02      	bgt.n	8012fe4 <__ieee754_sqrt+0xc4>
 8012fde:	d113      	bne.n	8013008 <__ieee754_sqrt+0xe8>
 8012fe0:	4290      	cmp	r0, r2
 8012fe2:	d811      	bhi.n	8013008 <__ieee754_sqrt+0xe8>
 8012fe4:	2800      	cmp	r0, #0
 8012fe6:	eb00 0e01 	add.w	lr, r0, r1
 8012fea:	da57      	bge.n	801309c <__ieee754_sqrt+0x17c>
 8012fec:	f1be 0f00 	cmp.w	lr, #0
 8012ff0:	db54      	blt.n	801309c <__ieee754_sqrt+0x17c>
 8012ff2:	f10c 0801 	add.w	r8, ip, #1
 8012ff6:	eba3 030c 	sub.w	r3, r3, ip
 8012ffa:	4290      	cmp	r0, r2
 8012ffc:	bf88      	it	hi
 8012ffe:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8013002:	1a12      	subs	r2, r2, r0
 8013004:	440c      	add	r4, r1
 8013006:	46c4      	mov	ip, r8
 8013008:	005b      	lsls	r3, r3, #1
 801300a:	3f01      	subs	r7, #1
 801300c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8013010:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013014:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8013018:	d1dd      	bne.n	8012fd6 <__ieee754_sqrt+0xb6>
 801301a:	4313      	orrs	r3, r2
 801301c:	d01b      	beq.n	8013056 <__ieee754_sqrt+0x136>
 801301e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80130cc <__ieee754_sqrt+0x1ac>
 8013022:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80130d0 <__ieee754_sqrt+0x1b0>
 8013026:	e9da 0100 	ldrd	r0, r1, [sl]
 801302a:	e9db 2300 	ldrd	r2, r3, [fp]
 801302e:	f7ed f92b 	bl	8000288 <__aeabi_dsub>
 8013032:	e9da 8900 	ldrd	r8, r9, [sl]
 8013036:	4602      	mov	r2, r0
 8013038:	460b      	mov	r3, r1
 801303a:	4640      	mov	r0, r8
 801303c:	4649      	mov	r1, r9
 801303e:	f7ed fd57 	bl	8000af0 <__aeabi_dcmple>
 8013042:	b140      	cbz	r0, 8013056 <__ieee754_sqrt+0x136>
 8013044:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8013048:	e9da 0100 	ldrd	r0, r1, [sl]
 801304c:	e9db 2300 	ldrd	r2, r3, [fp]
 8013050:	d126      	bne.n	80130a0 <__ieee754_sqrt+0x180>
 8013052:	3501      	adds	r5, #1
 8013054:	463c      	mov	r4, r7
 8013056:	106a      	asrs	r2, r5, #1
 8013058:	0863      	lsrs	r3, r4, #1
 801305a:	07e9      	lsls	r1, r5, #31
 801305c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013060:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8013064:	bf48      	it	mi
 8013066:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801306a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801306e:	461c      	mov	r4, r3
 8013070:	e76d      	b.n	8012f4e <__ieee754_sqrt+0x2e>
 8013072:	0ad3      	lsrs	r3, r2, #11
 8013074:	3815      	subs	r0, #21
 8013076:	0552      	lsls	r2, r2, #21
 8013078:	2b00      	cmp	r3, #0
 801307a:	d0fa      	beq.n	8013072 <__ieee754_sqrt+0x152>
 801307c:	02dc      	lsls	r4, r3, #11
 801307e:	d50a      	bpl.n	8013096 <__ieee754_sqrt+0x176>
 8013080:	f1c1 0420 	rsb	r4, r1, #32
 8013084:	fa22 f404 	lsr.w	r4, r2, r4
 8013088:	1e4d      	subs	r5, r1, #1
 801308a:	408a      	lsls	r2, r1
 801308c:	4323      	orrs	r3, r4
 801308e:	1b41      	subs	r1, r0, r5
 8013090:	e772      	b.n	8012f78 <__ieee754_sqrt+0x58>
 8013092:	4608      	mov	r0, r1
 8013094:	e7f0      	b.n	8013078 <__ieee754_sqrt+0x158>
 8013096:	005b      	lsls	r3, r3, #1
 8013098:	3101      	adds	r1, #1
 801309a:	e7ef      	b.n	801307c <__ieee754_sqrt+0x15c>
 801309c:	46e0      	mov	r8, ip
 801309e:	e7aa      	b.n	8012ff6 <__ieee754_sqrt+0xd6>
 80130a0:	f7ed f8f4 	bl	800028c <__adddf3>
 80130a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80130a8:	4602      	mov	r2, r0
 80130aa:	460b      	mov	r3, r1
 80130ac:	4640      	mov	r0, r8
 80130ae:	4649      	mov	r1, r9
 80130b0:	f7ed fd14 	bl	8000adc <__aeabi_dcmplt>
 80130b4:	b120      	cbz	r0, 80130c0 <__ieee754_sqrt+0x1a0>
 80130b6:	1ca0      	adds	r0, r4, #2
 80130b8:	bf08      	it	eq
 80130ba:	3501      	addeq	r5, #1
 80130bc:	3402      	adds	r4, #2
 80130be:	e7ca      	b.n	8013056 <__ieee754_sqrt+0x136>
 80130c0:	3401      	adds	r4, #1
 80130c2:	f024 0401 	bic.w	r4, r4, #1
 80130c6:	e7c6      	b.n	8013056 <__ieee754_sqrt+0x136>
 80130c8:	7ff00000 	.word	0x7ff00000
 80130cc:	200001f0 	.word	0x200001f0
 80130d0:	200001f8 	.word	0x200001f8
 80130d4:	00000000 	.word	0x00000000

080130d8 <__ieee754_rem_pio2>:
 80130d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130dc:	ed2d 8b02 	vpush	{d8}
 80130e0:	ec55 4b10 	vmov	r4, r5, d0
 80130e4:	4bca      	ldr	r3, [pc, #808]	; (8013410 <__ieee754_rem_pio2+0x338>)
 80130e6:	b08b      	sub	sp, #44	; 0x2c
 80130e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80130ec:	4598      	cmp	r8, r3
 80130ee:	4682      	mov	sl, r0
 80130f0:	9502      	str	r5, [sp, #8]
 80130f2:	dc08      	bgt.n	8013106 <__ieee754_rem_pio2+0x2e>
 80130f4:	2200      	movs	r2, #0
 80130f6:	2300      	movs	r3, #0
 80130f8:	ed80 0b00 	vstr	d0, [r0]
 80130fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013100:	f04f 0b00 	mov.w	fp, #0
 8013104:	e028      	b.n	8013158 <__ieee754_rem_pio2+0x80>
 8013106:	4bc3      	ldr	r3, [pc, #780]	; (8013414 <__ieee754_rem_pio2+0x33c>)
 8013108:	4598      	cmp	r8, r3
 801310a:	dc78      	bgt.n	80131fe <__ieee754_rem_pio2+0x126>
 801310c:	9b02      	ldr	r3, [sp, #8]
 801310e:	4ec2      	ldr	r6, [pc, #776]	; (8013418 <__ieee754_rem_pio2+0x340>)
 8013110:	2b00      	cmp	r3, #0
 8013112:	ee10 0a10 	vmov	r0, s0
 8013116:	a3b0      	add	r3, pc, #704	; (adr r3, 80133d8 <__ieee754_rem_pio2+0x300>)
 8013118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801311c:	4629      	mov	r1, r5
 801311e:	dd39      	ble.n	8013194 <__ieee754_rem_pio2+0xbc>
 8013120:	f7ed f8b2 	bl	8000288 <__aeabi_dsub>
 8013124:	45b0      	cmp	r8, r6
 8013126:	4604      	mov	r4, r0
 8013128:	460d      	mov	r5, r1
 801312a:	d01b      	beq.n	8013164 <__ieee754_rem_pio2+0x8c>
 801312c:	a3ac      	add	r3, pc, #688	; (adr r3, 80133e0 <__ieee754_rem_pio2+0x308>)
 801312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013132:	f7ed f8a9 	bl	8000288 <__aeabi_dsub>
 8013136:	4602      	mov	r2, r0
 8013138:	460b      	mov	r3, r1
 801313a:	e9ca 2300 	strd	r2, r3, [sl]
 801313e:	4620      	mov	r0, r4
 8013140:	4629      	mov	r1, r5
 8013142:	f7ed f8a1 	bl	8000288 <__aeabi_dsub>
 8013146:	a3a6      	add	r3, pc, #664	; (adr r3, 80133e0 <__ieee754_rem_pio2+0x308>)
 8013148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801314c:	f7ed f89c 	bl	8000288 <__aeabi_dsub>
 8013150:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013154:	f04f 0b01 	mov.w	fp, #1
 8013158:	4658      	mov	r0, fp
 801315a:	b00b      	add	sp, #44	; 0x2c
 801315c:	ecbd 8b02 	vpop	{d8}
 8013160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013164:	a3a0      	add	r3, pc, #640	; (adr r3, 80133e8 <__ieee754_rem_pio2+0x310>)
 8013166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316a:	f7ed f88d 	bl	8000288 <__aeabi_dsub>
 801316e:	a3a0      	add	r3, pc, #640	; (adr r3, 80133f0 <__ieee754_rem_pio2+0x318>)
 8013170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013174:	4604      	mov	r4, r0
 8013176:	460d      	mov	r5, r1
 8013178:	f7ed f886 	bl	8000288 <__aeabi_dsub>
 801317c:	4602      	mov	r2, r0
 801317e:	460b      	mov	r3, r1
 8013180:	e9ca 2300 	strd	r2, r3, [sl]
 8013184:	4620      	mov	r0, r4
 8013186:	4629      	mov	r1, r5
 8013188:	f7ed f87e 	bl	8000288 <__aeabi_dsub>
 801318c:	a398      	add	r3, pc, #608	; (adr r3, 80133f0 <__ieee754_rem_pio2+0x318>)
 801318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013192:	e7db      	b.n	801314c <__ieee754_rem_pio2+0x74>
 8013194:	f7ed f87a 	bl	800028c <__adddf3>
 8013198:	45b0      	cmp	r8, r6
 801319a:	4604      	mov	r4, r0
 801319c:	460d      	mov	r5, r1
 801319e:	d016      	beq.n	80131ce <__ieee754_rem_pio2+0xf6>
 80131a0:	a38f      	add	r3, pc, #572	; (adr r3, 80133e0 <__ieee754_rem_pio2+0x308>)
 80131a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a6:	f7ed f871 	bl	800028c <__adddf3>
 80131aa:	4602      	mov	r2, r0
 80131ac:	460b      	mov	r3, r1
 80131ae:	e9ca 2300 	strd	r2, r3, [sl]
 80131b2:	4620      	mov	r0, r4
 80131b4:	4629      	mov	r1, r5
 80131b6:	f7ed f867 	bl	8000288 <__aeabi_dsub>
 80131ba:	a389      	add	r3, pc, #548	; (adr r3, 80133e0 <__ieee754_rem_pio2+0x308>)
 80131bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c0:	f7ed f864 	bl	800028c <__adddf3>
 80131c4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80131c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80131cc:	e7c4      	b.n	8013158 <__ieee754_rem_pio2+0x80>
 80131ce:	a386      	add	r3, pc, #536	; (adr r3, 80133e8 <__ieee754_rem_pio2+0x310>)
 80131d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d4:	f7ed f85a 	bl	800028c <__adddf3>
 80131d8:	a385      	add	r3, pc, #532	; (adr r3, 80133f0 <__ieee754_rem_pio2+0x318>)
 80131da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131de:	4604      	mov	r4, r0
 80131e0:	460d      	mov	r5, r1
 80131e2:	f7ed f853 	bl	800028c <__adddf3>
 80131e6:	4602      	mov	r2, r0
 80131e8:	460b      	mov	r3, r1
 80131ea:	e9ca 2300 	strd	r2, r3, [sl]
 80131ee:	4620      	mov	r0, r4
 80131f0:	4629      	mov	r1, r5
 80131f2:	f7ed f849 	bl	8000288 <__aeabi_dsub>
 80131f6:	a37e      	add	r3, pc, #504	; (adr r3, 80133f0 <__ieee754_rem_pio2+0x318>)
 80131f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131fc:	e7e0      	b.n	80131c0 <__ieee754_rem_pio2+0xe8>
 80131fe:	4b87      	ldr	r3, [pc, #540]	; (801341c <__ieee754_rem_pio2+0x344>)
 8013200:	4598      	cmp	r8, r3
 8013202:	f300 80d8 	bgt.w	80133b6 <__ieee754_rem_pio2+0x2de>
 8013206:	f7ff fd87 	bl	8012d18 <fabs>
 801320a:	ec55 4b10 	vmov	r4, r5, d0
 801320e:	ee10 0a10 	vmov	r0, s0
 8013212:	a379      	add	r3, pc, #484	; (adr r3, 80133f8 <__ieee754_rem_pio2+0x320>)
 8013214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013218:	4629      	mov	r1, r5
 801321a:	f7ed f9ed 	bl	80005f8 <__aeabi_dmul>
 801321e:	4b80      	ldr	r3, [pc, #512]	; (8013420 <__ieee754_rem_pio2+0x348>)
 8013220:	2200      	movs	r2, #0
 8013222:	f7ed f833 	bl	800028c <__adddf3>
 8013226:	f7ed fc97 	bl	8000b58 <__aeabi_d2iz>
 801322a:	4683      	mov	fp, r0
 801322c:	f7ed f97a 	bl	8000524 <__aeabi_i2d>
 8013230:	4602      	mov	r2, r0
 8013232:	460b      	mov	r3, r1
 8013234:	ec43 2b18 	vmov	d8, r2, r3
 8013238:	a367      	add	r3, pc, #412	; (adr r3, 80133d8 <__ieee754_rem_pio2+0x300>)
 801323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801323e:	f7ed f9db 	bl	80005f8 <__aeabi_dmul>
 8013242:	4602      	mov	r2, r0
 8013244:	460b      	mov	r3, r1
 8013246:	4620      	mov	r0, r4
 8013248:	4629      	mov	r1, r5
 801324a:	f7ed f81d 	bl	8000288 <__aeabi_dsub>
 801324e:	a364      	add	r3, pc, #400	; (adr r3, 80133e0 <__ieee754_rem_pio2+0x308>)
 8013250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013254:	4606      	mov	r6, r0
 8013256:	460f      	mov	r7, r1
 8013258:	ec51 0b18 	vmov	r0, r1, d8
 801325c:	f7ed f9cc 	bl	80005f8 <__aeabi_dmul>
 8013260:	f1bb 0f1f 	cmp.w	fp, #31
 8013264:	4604      	mov	r4, r0
 8013266:	460d      	mov	r5, r1
 8013268:	dc0d      	bgt.n	8013286 <__ieee754_rem_pio2+0x1ae>
 801326a:	4b6e      	ldr	r3, [pc, #440]	; (8013424 <__ieee754_rem_pio2+0x34c>)
 801326c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8013270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013274:	4543      	cmp	r3, r8
 8013276:	d006      	beq.n	8013286 <__ieee754_rem_pio2+0x1ae>
 8013278:	4622      	mov	r2, r4
 801327a:	462b      	mov	r3, r5
 801327c:	4630      	mov	r0, r6
 801327e:	4639      	mov	r1, r7
 8013280:	f7ed f802 	bl	8000288 <__aeabi_dsub>
 8013284:	e00e      	b.n	80132a4 <__ieee754_rem_pio2+0x1cc>
 8013286:	462b      	mov	r3, r5
 8013288:	4622      	mov	r2, r4
 801328a:	4630      	mov	r0, r6
 801328c:	4639      	mov	r1, r7
 801328e:	f7ec fffb 	bl	8000288 <__aeabi_dsub>
 8013292:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013296:	9303      	str	r3, [sp, #12]
 8013298:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801329c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80132a0:	2b10      	cmp	r3, #16
 80132a2:	dc02      	bgt.n	80132aa <__ieee754_rem_pio2+0x1d2>
 80132a4:	e9ca 0100 	strd	r0, r1, [sl]
 80132a8:	e039      	b.n	801331e <__ieee754_rem_pio2+0x246>
 80132aa:	a34f      	add	r3, pc, #316	; (adr r3, 80133e8 <__ieee754_rem_pio2+0x310>)
 80132ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b0:	ec51 0b18 	vmov	r0, r1, d8
 80132b4:	f7ed f9a0 	bl	80005f8 <__aeabi_dmul>
 80132b8:	4604      	mov	r4, r0
 80132ba:	460d      	mov	r5, r1
 80132bc:	4602      	mov	r2, r0
 80132be:	460b      	mov	r3, r1
 80132c0:	4630      	mov	r0, r6
 80132c2:	4639      	mov	r1, r7
 80132c4:	f7ec ffe0 	bl	8000288 <__aeabi_dsub>
 80132c8:	4602      	mov	r2, r0
 80132ca:	460b      	mov	r3, r1
 80132cc:	4680      	mov	r8, r0
 80132ce:	4689      	mov	r9, r1
 80132d0:	4630      	mov	r0, r6
 80132d2:	4639      	mov	r1, r7
 80132d4:	f7ec ffd8 	bl	8000288 <__aeabi_dsub>
 80132d8:	4622      	mov	r2, r4
 80132da:	462b      	mov	r3, r5
 80132dc:	f7ec ffd4 	bl	8000288 <__aeabi_dsub>
 80132e0:	a343      	add	r3, pc, #268	; (adr r3, 80133f0 <__ieee754_rem_pio2+0x318>)
 80132e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e6:	4604      	mov	r4, r0
 80132e8:	460d      	mov	r5, r1
 80132ea:	ec51 0b18 	vmov	r0, r1, d8
 80132ee:	f7ed f983 	bl	80005f8 <__aeabi_dmul>
 80132f2:	4622      	mov	r2, r4
 80132f4:	462b      	mov	r3, r5
 80132f6:	f7ec ffc7 	bl	8000288 <__aeabi_dsub>
 80132fa:	4602      	mov	r2, r0
 80132fc:	460b      	mov	r3, r1
 80132fe:	4604      	mov	r4, r0
 8013300:	460d      	mov	r5, r1
 8013302:	4640      	mov	r0, r8
 8013304:	4649      	mov	r1, r9
 8013306:	f7ec ffbf 	bl	8000288 <__aeabi_dsub>
 801330a:	9a03      	ldr	r2, [sp, #12]
 801330c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013310:	1ad3      	subs	r3, r2, r3
 8013312:	2b31      	cmp	r3, #49	; 0x31
 8013314:	dc24      	bgt.n	8013360 <__ieee754_rem_pio2+0x288>
 8013316:	e9ca 0100 	strd	r0, r1, [sl]
 801331a:	4646      	mov	r6, r8
 801331c:	464f      	mov	r7, r9
 801331e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013322:	4630      	mov	r0, r6
 8013324:	4642      	mov	r2, r8
 8013326:	464b      	mov	r3, r9
 8013328:	4639      	mov	r1, r7
 801332a:	f7ec ffad 	bl	8000288 <__aeabi_dsub>
 801332e:	462b      	mov	r3, r5
 8013330:	4622      	mov	r2, r4
 8013332:	f7ec ffa9 	bl	8000288 <__aeabi_dsub>
 8013336:	9b02      	ldr	r3, [sp, #8]
 8013338:	2b00      	cmp	r3, #0
 801333a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801333e:	f6bf af0b 	bge.w	8013158 <__ieee754_rem_pio2+0x80>
 8013342:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013346:	f8ca 3004 	str.w	r3, [sl, #4]
 801334a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801334e:	f8ca 8000 	str.w	r8, [sl]
 8013352:	f8ca 0008 	str.w	r0, [sl, #8]
 8013356:	f8ca 300c 	str.w	r3, [sl, #12]
 801335a:	f1cb 0b00 	rsb	fp, fp, #0
 801335e:	e6fb      	b.n	8013158 <__ieee754_rem_pio2+0x80>
 8013360:	a327      	add	r3, pc, #156	; (adr r3, 8013400 <__ieee754_rem_pio2+0x328>)
 8013362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013366:	ec51 0b18 	vmov	r0, r1, d8
 801336a:	f7ed f945 	bl	80005f8 <__aeabi_dmul>
 801336e:	4604      	mov	r4, r0
 8013370:	460d      	mov	r5, r1
 8013372:	4602      	mov	r2, r0
 8013374:	460b      	mov	r3, r1
 8013376:	4640      	mov	r0, r8
 8013378:	4649      	mov	r1, r9
 801337a:	f7ec ff85 	bl	8000288 <__aeabi_dsub>
 801337e:	4602      	mov	r2, r0
 8013380:	460b      	mov	r3, r1
 8013382:	4606      	mov	r6, r0
 8013384:	460f      	mov	r7, r1
 8013386:	4640      	mov	r0, r8
 8013388:	4649      	mov	r1, r9
 801338a:	f7ec ff7d 	bl	8000288 <__aeabi_dsub>
 801338e:	4622      	mov	r2, r4
 8013390:	462b      	mov	r3, r5
 8013392:	f7ec ff79 	bl	8000288 <__aeabi_dsub>
 8013396:	a31c      	add	r3, pc, #112	; (adr r3, 8013408 <__ieee754_rem_pio2+0x330>)
 8013398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801339c:	4604      	mov	r4, r0
 801339e:	460d      	mov	r5, r1
 80133a0:	ec51 0b18 	vmov	r0, r1, d8
 80133a4:	f7ed f928 	bl	80005f8 <__aeabi_dmul>
 80133a8:	4622      	mov	r2, r4
 80133aa:	462b      	mov	r3, r5
 80133ac:	f7ec ff6c 	bl	8000288 <__aeabi_dsub>
 80133b0:	4604      	mov	r4, r0
 80133b2:	460d      	mov	r5, r1
 80133b4:	e760      	b.n	8013278 <__ieee754_rem_pio2+0x1a0>
 80133b6:	4b1c      	ldr	r3, [pc, #112]	; (8013428 <__ieee754_rem_pio2+0x350>)
 80133b8:	4598      	cmp	r8, r3
 80133ba:	dd37      	ble.n	801342c <__ieee754_rem_pio2+0x354>
 80133bc:	ee10 2a10 	vmov	r2, s0
 80133c0:	462b      	mov	r3, r5
 80133c2:	4620      	mov	r0, r4
 80133c4:	4629      	mov	r1, r5
 80133c6:	f7ec ff5f 	bl	8000288 <__aeabi_dsub>
 80133ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80133ce:	e9ca 0100 	strd	r0, r1, [sl]
 80133d2:	e695      	b.n	8013100 <__ieee754_rem_pio2+0x28>
 80133d4:	f3af 8000 	nop.w
 80133d8:	54400000 	.word	0x54400000
 80133dc:	3ff921fb 	.word	0x3ff921fb
 80133e0:	1a626331 	.word	0x1a626331
 80133e4:	3dd0b461 	.word	0x3dd0b461
 80133e8:	1a600000 	.word	0x1a600000
 80133ec:	3dd0b461 	.word	0x3dd0b461
 80133f0:	2e037073 	.word	0x2e037073
 80133f4:	3ba3198a 	.word	0x3ba3198a
 80133f8:	6dc9c883 	.word	0x6dc9c883
 80133fc:	3fe45f30 	.word	0x3fe45f30
 8013400:	2e000000 	.word	0x2e000000
 8013404:	3ba3198a 	.word	0x3ba3198a
 8013408:	252049c1 	.word	0x252049c1
 801340c:	397b839a 	.word	0x397b839a
 8013410:	3fe921fb 	.word	0x3fe921fb
 8013414:	4002d97b 	.word	0x4002d97b
 8013418:	3ff921fb 	.word	0x3ff921fb
 801341c:	413921fb 	.word	0x413921fb
 8013420:	3fe00000 	.word	0x3fe00000
 8013424:	08015480 	.word	0x08015480
 8013428:	7fefffff 	.word	0x7fefffff
 801342c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8013430:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8013434:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8013438:	4620      	mov	r0, r4
 801343a:	460d      	mov	r5, r1
 801343c:	f7ed fb8c 	bl	8000b58 <__aeabi_d2iz>
 8013440:	f7ed f870 	bl	8000524 <__aeabi_i2d>
 8013444:	4602      	mov	r2, r0
 8013446:	460b      	mov	r3, r1
 8013448:	4620      	mov	r0, r4
 801344a:	4629      	mov	r1, r5
 801344c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013450:	f7ec ff1a 	bl	8000288 <__aeabi_dsub>
 8013454:	4b21      	ldr	r3, [pc, #132]	; (80134dc <__ieee754_rem_pio2+0x404>)
 8013456:	2200      	movs	r2, #0
 8013458:	f7ed f8ce 	bl	80005f8 <__aeabi_dmul>
 801345c:	460d      	mov	r5, r1
 801345e:	4604      	mov	r4, r0
 8013460:	f7ed fb7a 	bl	8000b58 <__aeabi_d2iz>
 8013464:	f7ed f85e 	bl	8000524 <__aeabi_i2d>
 8013468:	4602      	mov	r2, r0
 801346a:	460b      	mov	r3, r1
 801346c:	4620      	mov	r0, r4
 801346e:	4629      	mov	r1, r5
 8013470:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013474:	f7ec ff08 	bl	8000288 <__aeabi_dsub>
 8013478:	4b18      	ldr	r3, [pc, #96]	; (80134dc <__ieee754_rem_pio2+0x404>)
 801347a:	2200      	movs	r2, #0
 801347c:	f7ed f8bc 	bl	80005f8 <__aeabi_dmul>
 8013480:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013484:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8013488:	2703      	movs	r7, #3
 801348a:	2400      	movs	r4, #0
 801348c:	2500      	movs	r5, #0
 801348e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8013492:	4622      	mov	r2, r4
 8013494:	462b      	mov	r3, r5
 8013496:	46b9      	mov	r9, r7
 8013498:	3f01      	subs	r7, #1
 801349a:	f7ed fb15 	bl	8000ac8 <__aeabi_dcmpeq>
 801349e:	2800      	cmp	r0, #0
 80134a0:	d1f5      	bne.n	801348e <__ieee754_rem_pio2+0x3b6>
 80134a2:	4b0f      	ldr	r3, [pc, #60]	; (80134e0 <__ieee754_rem_pio2+0x408>)
 80134a4:	9301      	str	r3, [sp, #4]
 80134a6:	2302      	movs	r3, #2
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	4632      	mov	r2, r6
 80134ac:	464b      	mov	r3, r9
 80134ae:	4651      	mov	r1, sl
 80134b0:	a804      	add	r0, sp, #16
 80134b2:	f000 f819 	bl	80134e8 <__kernel_rem_pio2>
 80134b6:	9b02      	ldr	r3, [sp, #8]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	4683      	mov	fp, r0
 80134bc:	f6bf ae4c 	bge.w	8013158 <__ieee754_rem_pio2+0x80>
 80134c0:	e9da 2100 	ldrd	r2, r1, [sl]
 80134c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80134c8:	e9ca 2300 	strd	r2, r3, [sl]
 80134cc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80134d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80134d4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80134d8:	e73f      	b.n	801335a <__ieee754_rem_pio2+0x282>
 80134da:	bf00      	nop
 80134dc:	41700000 	.word	0x41700000
 80134e0:	08015500 	.word	0x08015500
 80134e4:	00000000 	.word	0x00000000

080134e8 <__kernel_rem_pio2>:
 80134e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ec:	ed2d 8b02 	vpush	{d8}
 80134f0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80134f4:	f112 0f14 	cmn.w	r2, #20
 80134f8:	9306      	str	r3, [sp, #24]
 80134fa:	9104      	str	r1, [sp, #16]
 80134fc:	4bc2      	ldr	r3, [pc, #776]	; (8013808 <__kernel_rem_pio2+0x320>)
 80134fe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8013500:	9009      	str	r0, [sp, #36]	; 0x24
 8013502:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013506:	9300      	str	r3, [sp, #0]
 8013508:	9b06      	ldr	r3, [sp, #24]
 801350a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801350e:	bfa8      	it	ge
 8013510:	1ed4      	subge	r4, r2, #3
 8013512:	9305      	str	r3, [sp, #20]
 8013514:	bfb2      	itee	lt
 8013516:	2400      	movlt	r4, #0
 8013518:	2318      	movge	r3, #24
 801351a:	fb94 f4f3 	sdivge	r4, r4, r3
 801351e:	f06f 0317 	mvn.w	r3, #23
 8013522:	fb04 3303 	mla	r3, r4, r3, r3
 8013526:	eb03 0a02 	add.w	sl, r3, r2
 801352a:	9b00      	ldr	r3, [sp, #0]
 801352c:	9a05      	ldr	r2, [sp, #20]
 801352e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80137f8 <__kernel_rem_pio2+0x310>
 8013532:	eb03 0802 	add.w	r8, r3, r2
 8013536:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8013538:	1aa7      	subs	r7, r4, r2
 801353a:	ae20      	add	r6, sp, #128	; 0x80
 801353c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013540:	2500      	movs	r5, #0
 8013542:	4545      	cmp	r5, r8
 8013544:	dd13      	ble.n	801356e <__kernel_rem_pio2+0x86>
 8013546:	9b06      	ldr	r3, [sp, #24]
 8013548:	aa20      	add	r2, sp, #128	; 0x80
 801354a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801354e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8013552:	f04f 0800 	mov.w	r8, #0
 8013556:	9b00      	ldr	r3, [sp, #0]
 8013558:	4598      	cmp	r8, r3
 801355a:	dc31      	bgt.n	80135c0 <__kernel_rem_pio2+0xd8>
 801355c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80137f8 <__kernel_rem_pio2+0x310>
 8013560:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013564:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013568:	462f      	mov	r7, r5
 801356a:	2600      	movs	r6, #0
 801356c:	e01b      	b.n	80135a6 <__kernel_rem_pio2+0xbe>
 801356e:	42ef      	cmn	r7, r5
 8013570:	d407      	bmi.n	8013582 <__kernel_rem_pio2+0x9a>
 8013572:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013576:	f7ec ffd5 	bl	8000524 <__aeabi_i2d>
 801357a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801357e:	3501      	adds	r5, #1
 8013580:	e7df      	b.n	8013542 <__kernel_rem_pio2+0x5a>
 8013582:	ec51 0b18 	vmov	r0, r1, d8
 8013586:	e7f8      	b.n	801357a <__kernel_rem_pio2+0x92>
 8013588:	e9d7 2300 	ldrd	r2, r3, [r7]
 801358c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013590:	f7ed f832 	bl	80005f8 <__aeabi_dmul>
 8013594:	4602      	mov	r2, r0
 8013596:	460b      	mov	r3, r1
 8013598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801359c:	f7ec fe76 	bl	800028c <__adddf3>
 80135a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80135a4:	3601      	adds	r6, #1
 80135a6:	9b05      	ldr	r3, [sp, #20]
 80135a8:	429e      	cmp	r6, r3
 80135aa:	f1a7 0708 	sub.w	r7, r7, #8
 80135ae:	ddeb      	ble.n	8013588 <__kernel_rem_pio2+0xa0>
 80135b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80135b4:	f108 0801 	add.w	r8, r8, #1
 80135b8:	ecab 7b02 	vstmia	fp!, {d7}
 80135bc:	3508      	adds	r5, #8
 80135be:	e7ca      	b.n	8013556 <__kernel_rem_pio2+0x6e>
 80135c0:	9b00      	ldr	r3, [sp, #0]
 80135c2:	aa0c      	add	r2, sp, #48	; 0x30
 80135c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80135c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80135ca:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80135cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80135d0:	9c00      	ldr	r4, [sp, #0]
 80135d2:	930a      	str	r3, [sp, #40]	; 0x28
 80135d4:	00e3      	lsls	r3, r4, #3
 80135d6:	9308      	str	r3, [sp, #32]
 80135d8:	ab98      	add	r3, sp, #608	; 0x260
 80135da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80135de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80135e2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80135e6:	ab70      	add	r3, sp, #448	; 0x1c0
 80135e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80135ec:	46c3      	mov	fp, r8
 80135ee:	46a1      	mov	r9, r4
 80135f0:	f1b9 0f00 	cmp.w	r9, #0
 80135f4:	f1a5 0508 	sub.w	r5, r5, #8
 80135f8:	dc77      	bgt.n	80136ea <__kernel_rem_pio2+0x202>
 80135fa:	ec47 6b10 	vmov	d0, r6, r7
 80135fe:	4650      	mov	r0, sl
 8013600:	f000 fd26 	bl	8014050 <scalbn>
 8013604:	ec57 6b10 	vmov	r6, r7, d0
 8013608:	2200      	movs	r2, #0
 801360a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801360e:	ee10 0a10 	vmov	r0, s0
 8013612:	4639      	mov	r1, r7
 8013614:	f7ec fff0 	bl	80005f8 <__aeabi_dmul>
 8013618:	ec41 0b10 	vmov	d0, r0, r1
 801361c:	f000 fd98 	bl	8014150 <floor>
 8013620:	4b7a      	ldr	r3, [pc, #488]	; (801380c <__kernel_rem_pio2+0x324>)
 8013622:	ec51 0b10 	vmov	r0, r1, d0
 8013626:	2200      	movs	r2, #0
 8013628:	f7ec ffe6 	bl	80005f8 <__aeabi_dmul>
 801362c:	4602      	mov	r2, r0
 801362e:	460b      	mov	r3, r1
 8013630:	4630      	mov	r0, r6
 8013632:	4639      	mov	r1, r7
 8013634:	f7ec fe28 	bl	8000288 <__aeabi_dsub>
 8013638:	460f      	mov	r7, r1
 801363a:	4606      	mov	r6, r0
 801363c:	f7ed fa8c 	bl	8000b58 <__aeabi_d2iz>
 8013640:	9002      	str	r0, [sp, #8]
 8013642:	f7ec ff6f 	bl	8000524 <__aeabi_i2d>
 8013646:	4602      	mov	r2, r0
 8013648:	460b      	mov	r3, r1
 801364a:	4630      	mov	r0, r6
 801364c:	4639      	mov	r1, r7
 801364e:	f7ec fe1b 	bl	8000288 <__aeabi_dsub>
 8013652:	f1ba 0f00 	cmp.w	sl, #0
 8013656:	4606      	mov	r6, r0
 8013658:	460f      	mov	r7, r1
 801365a:	dd6d      	ble.n	8013738 <__kernel_rem_pio2+0x250>
 801365c:	1e61      	subs	r1, r4, #1
 801365e:	ab0c      	add	r3, sp, #48	; 0x30
 8013660:	9d02      	ldr	r5, [sp, #8]
 8013662:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013666:	f1ca 0018 	rsb	r0, sl, #24
 801366a:	fa43 f200 	asr.w	r2, r3, r0
 801366e:	4415      	add	r5, r2
 8013670:	4082      	lsls	r2, r0
 8013672:	1a9b      	subs	r3, r3, r2
 8013674:	aa0c      	add	r2, sp, #48	; 0x30
 8013676:	9502      	str	r5, [sp, #8]
 8013678:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801367c:	f1ca 0217 	rsb	r2, sl, #23
 8013680:	fa43 fb02 	asr.w	fp, r3, r2
 8013684:	f1bb 0f00 	cmp.w	fp, #0
 8013688:	dd65      	ble.n	8013756 <__kernel_rem_pio2+0x26e>
 801368a:	9b02      	ldr	r3, [sp, #8]
 801368c:	2200      	movs	r2, #0
 801368e:	3301      	adds	r3, #1
 8013690:	9302      	str	r3, [sp, #8]
 8013692:	4615      	mov	r5, r2
 8013694:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013698:	4294      	cmp	r4, r2
 801369a:	f300 809f 	bgt.w	80137dc <__kernel_rem_pio2+0x2f4>
 801369e:	f1ba 0f00 	cmp.w	sl, #0
 80136a2:	dd07      	ble.n	80136b4 <__kernel_rem_pio2+0x1cc>
 80136a4:	f1ba 0f01 	cmp.w	sl, #1
 80136a8:	f000 80c1 	beq.w	801382e <__kernel_rem_pio2+0x346>
 80136ac:	f1ba 0f02 	cmp.w	sl, #2
 80136b0:	f000 80c7 	beq.w	8013842 <__kernel_rem_pio2+0x35a>
 80136b4:	f1bb 0f02 	cmp.w	fp, #2
 80136b8:	d14d      	bne.n	8013756 <__kernel_rem_pio2+0x26e>
 80136ba:	4632      	mov	r2, r6
 80136bc:	463b      	mov	r3, r7
 80136be:	4954      	ldr	r1, [pc, #336]	; (8013810 <__kernel_rem_pio2+0x328>)
 80136c0:	2000      	movs	r0, #0
 80136c2:	f7ec fde1 	bl	8000288 <__aeabi_dsub>
 80136c6:	4606      	mov	r6, r0
 80136c8:	460f      	mov	r7, r1
 80136ca:	2d00      	cmp	r5, #0
 80136cc:	d043      	beq.n	8013756 <__kernel_rem_pio2+0x26e>
 80136ce:	4650      	mov	r0, sl
 80136d0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8013800 <__kernel_rem_pio2+0x318>
 80136d4:	f000 fcbc 	bl	8014050 <scalbn>
 80136d8:	4630      	mov	r0, r6
 80136da:	4639      	mov	r1, r7
 80136dc:	ec53 2b10 	vmov	r2, r3, d0
 80136e0:	f7ec fdd2 	bl	8000288 <__aeabi_dsub>
 80136e4:	4606      	mov	r6, r0
 80136e6:	460f      	mov	r7, r1
 80136e8:	e035      	b.n	8013756 <__kernel_rem_pio2+0x26e>
 80136ea:	4b4a      	ldr	r3, [pc, #296]	; (8013814 <__kernel_rem_pio2+0x32c>)
 80136ec:	2200      	movs	r2, #0
 80136ee:	4630      	mov	r0, r6
 80136f0:	4639      	mov	r1, r7
 80136f2:	f7ec ff81 	bl	80005f8 <__aeabi_dmul>
 80136f6:	f7ed fa2f 	bl	8000b58 <__aeabi_d2iz>
 80136fa:	f7ec ff13 	bl	8000524 <__aeabi_i2d>
 80136fe:	4602      	mov	r2, r0
 8013700:	460b      	mov	r3, r1
 8013702:	ec43 2b18 	vmov	d8, r2, r3
 8013706:	4b44      	ldr	r3, [pc, #272]	; (8013818 <__kernel_rem_pio2+0x330>)
 8013708:	2200      	movs	r2, #0
 801370a:	f7ec ff75 	bl	80005f8 <__aeabi_dmul>
 801370e:	4602      	mov	r2, r0
 8013710:	460b      	mov	r3, r1
 8013712:	4630      	mov	r0, r6
 8013714:	4639      	mov	r1, r7
 8013716:	f7ec fdb7 	bl	8000288 <__aeabi_dsub>
 801371a:	f7ed fa1d 	bl	8000b58 <__aeabi_d2iz>
 801371e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013722:	f84b 0b04 	str.w	r0, [fp], #4
 8013726:	ec51 0b18 	vmov	r0, r1, d8
 801372a:	f7ec fdaf 	bl	800028c <__adddf3>
 801372e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8013732:	4606      	mov	r6, r0
 8013734:	460f      	mov	r7, r1
 8013736:	e75b      	b.n	80135f0 <__kernel_rem_pio2+0x108>
 8013738:	d106      	bne.n	8013748 <__kernel_rem_pio2+0x260>
 801373a:	1e63      	subs	r3, r4, #1
 801373c:	aa0c      	add	r2, sp, #48	; 0x30
 801373e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013742:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8013746:	e79d      	b.n	8013684 <__kernel_rem_pio2+0x19c>
 8013748:	4b34      	ldr	r3, [pc, #208]	; (801381c <__kernel_rem_pio2+0x334>)
 801374a:	2200      	movs	r2, #0
 801374c:	f7ed f9da 	bl	8000b04 <__aeabi_dcmpge>
 8013750:	2800      	cmp	r0, #0
 8013752:	d140      	bne.n	80137d6 <__kernel_rem_pio2+0x2ee>
 8013754:	4683      	mov	fp, r0
 8013756:	2200      	movs	r2, #0
 8013758:	2300      	movs	r3, #0
 801375a:	4630      	mov	r0, r6
 801375c:	4639      	mov	r1, r7
 801375e:	f7ed f9b3 	bl	8000ac8 <__aeabi_dcmpeq>
 8013762:	2800      	cmp	r0, #0
 8013764:	f000 80c1 	beq.w	80138ea <__kernel_rem_pio2+0x402>
 8013768:	1e65      	subs	r5, r4, #1
 801376a:	462b      	mov	r3, r5
 801376c:	2200      	movs	r2, #0
 801376e:	9900      	ldr	r1, [sp, #0]
 8013770:	428b      	cmp	r3, r1
 8013772:	da6d      	bge.n	8013850 <__kernel_rem_pio2+0x368>
 8013774:	2a00      	cmp	r2, #0
 8013776:	f000 808a 	beq.w	801388e <__kernel_rem_pio2+0x3a6>
 801377a:	ab0c      	add	r3, sp, #48	; 0x30
 801377c:	f1aa 0a18 	sub.w	sl, sl, #24
 8013780:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013784:	2b00      	cmp	r3, #0
 8013786:	f000 80ae 	beq.w	80138e6 <__kernel_rem_pio2+0x3fe>
 801378a:	4650      	mov	r0, sl
 801378c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8013800 <__kernel_rem_pio2+0x318>
 8013790:	f000 fc5e 	bl	8014050 <scalbn>
 8013794:	1c6b      	adds	r3, r5, #1
 8013796:	00da      	lsls	r2, r3, #3
 8013798:	9205      	str	r2, [sp, #20]
 801379a:	ec57 6b10 	vmov	r6, r7, d0
 801379e:	aa70      	add	r2, sp, #448	; 0x1c0
 80137a0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8013814 <__kernel_rem_pio2+0x32c>
 80137a4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80137a8:	462c      	mov	r4, r5
 80137aa:	f04f 0800 	mov.w	r8, #0
 80137ae:	2c00      	cmp	r4, #0
 80137b0:	f280 80d4 	bge.w	801395c <__kernel_rem_pio2+0x474>
 80137b4:	462c      	mov	r4, r5
 80137b6:	2c00      	cmp	r4, #0
 80137b8:	f2c0 8102 	blt.w	80139c0 <__kernel_rem_pio2+0x4d8>
 80137bc:	4b18      	ldr	r3, [pc, #96]	; (8013820 <__kernel_rem_pio2+0x338>)
 80137be:	461e      	mov	r6, r3
 80137c0:	ab70      	add	r3, sp, #448	; 0x1c0
 80137c2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80137c6:	1b2b      	subs	r3, r5, r4
 80137c8:	f04f 0900 	mov.w	r9, #0
 80137cc:	f04f 0a00 	mov.w	sl, #0
 80137d0:	2700      	movs	r7, #0
 80137d2:	9306      	str	r3, [sp, #24]
 80137d4:	e0e6      	b.n	80139a4 <__kernel_rem_pio2+0x4bc>
 80137d6:	f04f 0b02 	mov.w	fp, #2
 80137da:	e756      	b.n	801368a <__kernel_rem_pio2+0x1a2>
 80137dc:	f8d8 3000 	ldr.w	r3, [r8]
 80137e0:	bb05      	cbnz	r5, 8013824 <__kernel_rem_pio2+0x33c>
 80137e2:	b123      	cbz	r3, 80137ee <__kernel_rem_pio2+0x306>
 80137e4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80137e8:	f8c8 3000 	str.w	r3, [r8]
 80137ec:	2301      	movs	r3, #1
 80137ee:	3201      	adds	r2, #1
 80137f0:	f108 0804 	add.w	r8, r8, #4
 80137f4:	461d      	mov	r5, r3
 80137f6:	e74f      	b.n	8013698 <__kernel_rem_pio2+0x1b0>
	...
 8013804:	3ff00000 	.word	0x3ff00000
 8013808:	08015648 	.word	0x08015648
 801380c:	40200000 	.word	0x40200000
 8013810:	3ff00000 	.word	0x3ff00000
 8013814:	3e700000 	.word	0x3e700000
 8013818:	41700000 	.word	0x41700000
 801381c:	3fe00000 	.word	0x3fe00000
 8013820:	08015608 	.word	0x08015608
 8013824:	1acb      	subs	r3, r1, r3
 8013826:	f8c8 3000 	str.w	r3, [r8]
 801382a:	462b      	mov	r3, r5
 801382c:	e7df      	b.n	80137ee <__kernel_rem_pio2+0x306>
 801382e:	1e62      	subs	r2, r4, #1
 8013830:	ab0c      	add	r3, sp, #48	; 0x30
 8013832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013836:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801383a:	a90c      	add	r1, sp, #48	; 0x30
 801383c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013840:	e738      	b.n	80136b4 <__kernel_rem_pio2+0x1cc>
 8013842:	1e62      	subs	r2, r4, #1
 8013844:	ab0c      	add	r3, sp, #48	; 0x30
 8013846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801384a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801384e:	e7f4      	b.n	801383a <__kernel_rem_pio2+0x352>
 8013850:	a90c      	add	r1, sp, #48	; 0x30
 8013852:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013856:	3b01      	subs	r3, #1
 8013858:	430a      	orrs	r2, r1
 801385a:	e788      	b.n	801376e <__kernel_rem_pio2+0x286>
 801385c:	3301      	adds	r3, #1
 801385e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013862:	2900      	cmp	r1, #0
 8013864:	d0fa      	beq.n	801385c <__kernel_rem_pio2+0x374>
 8013866:	9a08      	ldr	r2, [sp, #32]
 8013868:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801386c:	446a      	add	r2, sp
 801386e:	3a98      	subs	r2, #152	; 0x98
 8013870:	9208      	str	r2, [sp, #32]
 8013872:	9a06      	ldr	r2, [sp, #24]
 8013874:	a920      	add	r1, sp, #128	; 0x80
 8013876:	18a2      	adds	r2, r4, r2
 8013878:	18e3      	adds	r3, r4, r3
 801387a:	f104 0801 	add.w	r8, r4, #1
 801387e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8013882:	9302      	str	r3, [sp, #8]
 8013884:	9b02      	ldr	r3, [sp, #8]
 8013886:	4543      	cmp	r3, r8
 8013888:	da04      	bge.n	8013894 <__kernel_rem_pio2+0x3ac>
 801388a:	461c      	mov	r4, r3
 801388c:	e6a2      	b.n	80135d4 <__kernel_rem_pio2+0xec>
 801388e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013890:	2301      	movs	r3, #1
 8013892:	e7e4      	b.n	801385e <__kernel_rem_pio2+0x376>
 8013894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013896:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801389a:	f7ec fe43 	bl	8000524 <__aeabi_i2d>
 801389e:	e8e5 0102 	strd	r0, r1, [r5], #8
 80138a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138a4:	46ab      	mov	fp, r5
 80138a6:	461c      	mov	r4, r3
 80138a8:	f04f 0900 	mov.w	r9, #0
 80138ac:	2600      	movs	r6, #0
 80138ae:	2700      	movs	r7, #0
 80138b0:	9b05      	ldr	r3, [sp, #20]
 80138b2:	4599      	cmp	r9, r3
 80138b4:	dd06      	ble.n	80138c4 <__kernel_rem_pio2+0x3dc>
 80138b6:	9b08      	ldr	r3, [sp, #32]
 80138b8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80138bc:	f108 0801 	add.w	r8, r8, #1
 80138c0:	9308      	str	r3, [sp, #32]
 80138c2:	e7df      	b.n	8013884 <__kernel_rem_pio2+0x39c>
 80138c4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80138c8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80138cc:	f7ec fe94 	bl	80005f8 <__aeabi_dmul>
 80138d0:	4602      	mov	r2, r0
 80138d2:	460b      	mov	r3, r1
 80138d4:	4630      	mov	r0, r6
 80138d6:	4639      	mov	r1, r7
 80138d8:	f7ec fcd8 	bl	800028c <__adddf3>
 80138dc:	f109 0901 	add.w	r9, r9, #1
 80138e0:	4606      	mov	r6, r0
 80138e2:	460f      	mov	r7, r1
 80138e4:	e7e4      	b.n	80138b0 <__kernel_rem_pio2+0x3c8>
 80138e6:	3d01      	subs	r5, #1
 80138e8:	e747      	b.n	801377a <__kernel_rem_pio2+0x292>
 80138ea:	ec47 6b10 	vmov	d0, r6, r7
 80138ee:	f1ca 0000 	rsb	r0, sl, #0
 80138f2:	f000 fbad 	bl	8014050 <scalbn>
 80138f6:	ec57 6b10 	vmov	r6, r7, d0
 80138fa:	4ba0      	ldr	r3, [pc, #640]	; (8013b7c <__kernel_rem_pio2+0x694>)
 80138fc:	ee10 0a10 	vmov	r0, s0
 8013900:	2200      	movs	r2, #0
 8013902:	4639      	mov	r1, r7
 8013904:	f7ed f8fe 	bl	8000b04 <__aeabi_dcmpge>
 8013908:	b1f8      	cbz	r0, 801394a <__kernel_rem_pio2+0x462>
 801390a:	4b9d      	ldr	r3, [pc, #628]	; (8013b80 <__kernel_rem_pio2+0x698>)
 801390c:	2200      	movs	r2, #0
 801390e:	4630      	mov	r0, r6
 8013910:	4639      	mov	r1, r7
 8013912:	f7ec fe71 	bl	80005f8 <__aeabi_dmul>
 8013916:	f7ed f91f 	bl	8000b58 <__aeabi_d2iz>
 801391a:	4680      	mov	r8, r0
 801391c:	f7ec fe02 	bl	8000524 <__aeabi_i2d>
 8013920:	4b96      	ldr	r3, [pc, #600]	; (8013b7c <__kernel_rem_pio2+0x694>)
 8013922:	2200      	movs	r2, #0
 8013924:	f7ec fe68 	bl	80005f8 <__aeabi_dmul>
 8013928:	460b      	mov	r3, r1
 801392a:	4602      	mov	r2, r0
 801392c:	4639      	mov	r1, r7
 801392e:	4630      	mov	r0, r6
 8013930:	f7ec fcaa 	bl	8000288 <__aeabi_dsub>
 8013934:	f7ed f910 	bl	8000b58 <__aeabi_d2iz>
 8013938:	1c65      	adds	r5, r4, #1
 801393a:	ab0c      	add	r3, sp, #48	; 0x30
 801393c:	f10a 0a18 	add.w	sl, sl, #24
 8013940:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013944:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013948:	e71f      	b.n	801378a <__kernel_rem_pio2+0x2a2>
 801394a:	4630      	mov	r0, r6
 801394c:	4639      	mov	r1, r7
 801394e:	f7ed f903 	bl	8000b58 <__aeabi_d2iz>
 8013952:	ab0c      	add	r3, sp, #48	; 0x30
 8013954:	4625      	mov	r5, r4
 8013956:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801395a:	e716      	b.n	801378a <__kernel_rem_pio2+0x2a2>
 801395c:	ab0c      	add	r3, sp, #48	; 0x30
 801395e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013962:	f7ec fddf 	bl	8000524 <__aeabi_i2d>
 8013966:	4632      	mov	r2, r6
 8013968:	463b      	mov	r3, r7
 801396a:	f7ec fe45 	bl	80005f8 <__aeabi_dmul>
 801396e:	4642      	mov	r2, r8
 8013970:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013974:	464b      	mov	r3, r9
 8013976:	4630      	mov	r0, r6
 8013978:	4639      	mov	r1, r7
 801397a:	f7ec fe3d 	bl	80005f8 <__aeabi_dmul>
 801397e:	3c01      	subs	r4, #1
 8013980:	4606      	mov	r6, r0
 8013982:	460f      	mov	r7, r1
 8013984:	e713      	b.n	80137ae <__kernel_rem_pio2+0x2c6>
 8013986:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801398a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801398e:	f7ec fe33 	bl	80005f8 <__aeabi_dmul>
 8013992:	4602      	mov	r2, r0
 8013994:	460b      	mov	r3, r1
 8013996:	4648      	mov	r0, r9
 8013998:	4651      	mov	r1, sl
 801399a:	f7ec fc77 	bl	800028c <__adddf3>
 801399e:	3701      	adds	r7, #1
 80139a0:	4681      	mov	r9, r0
 80139a2:	468a      	mov	sl, r1
 80139a4:	9b00      	ldr	r3, [sp, #0]
 80139a6:	429f      	cmp	r7, r3
 80139a8:	dc02      	bgt.n	80139b0 <__kernel_rem_pio2+0x4c8>
 80139aa:	9b06      	ldr	r3, [sp, #24]
 80139ac:	429f      	cmp	r7, r3
 80139ae:	ddea      	ble.n	8013986 <__kernel_rem_pio2+0x49e>
 80139b0:	9a06      	ldr	r2, [sp, #24]
 80139b2:	ab48      	add	r3, sp, #288	; 0x120
 80139b4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80139b8:	e9c6 9a00 	strd	r9, sl, [r6]
 80139bc:	3c01      	subs	r4, #1
 80139be:	e6fa      	b.n	80137b6 <__kernel_rem_pio2+0x2ce>
 80139c0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80139c2:	2b02      	cmp	r3, #2
 80139c4:	dc0b      	bgt.n	80139de <__kernel_rem_pio2+0x4f6>
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	dc39      	bgt.n	8013a3e <__kernel_rem_pio2+0x556>
 80139ca:	d05d      	beq.n	8013a88 <__kernel_rem_pio2+0x5a0>
 80139cc:	9b02      	ldr	r3, [sp, #8]
 80139ce:	f003 0007 	and.w	r0, r3, #7
 80139d2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80139d6:	ecbd 8b02 	vpop	{d8}
 80139da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139de:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80139e0:	2b03      	cmp	r3, #3
 80139e2:	d1f3      	bne.n	80139cc <__kernel_rem_pio2+0x4e4>
 80139e4:	9b05      	ldr	r3, [sp, #20]
 80139e6:	9500      	str	r5, [sp, #0]
 80139e8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80139ec:	eb0d 0403 	add.w	r4, sp, r3
 80139f0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80139f4:	46a2      	mov	sl, r4
 80139f6:	9b00      	ldr	r3, [sp, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	f1aa 0a08 	sub.w	sl, sl, #8
 80139fe:	dc69      	bgt.n	8013ad4 <__kernel_rem_pio2+0x5ec>
 8013a00:	46aa      	mov	sl, r5
 8013a02:	f1ba 0f01 	cmp.w	sl, #1
 8013a06:	f1a4 0408 	sub.w	r4, r4, #8
 8013a0a:	f300 8083 	bgt.w	8013b14 <__kernel_rem_pio2+0x62c>
 8013a0e:	9c05      	ldr	r4, [sp, #20]
 8013a10:	ab48      	add	r3, sp, #288	; 0x120
 8013a12:	441c      	add	r4, r3
 8013a14:	2000      	movs	r0, #0
 8013a16:	2100      	movs	r1, #0
 8013a18:	2d01      	cmp	r5, #1
 8013a1a:	f300 809a 	bgt.w	8013b52 <__kernel_rem_pio2+0x66a>
 8013a1e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8013a22:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013a26:	f1bb 0f00 	cmp.w	fp, #0
 8013a2a:	f040 8098 	bne.w	8013b5e <__kernel_rem_pio2+0x676>
 8013a2e:	9b04      	ldr	r3, [sp, #16]
 8013a30:	e9c3 7800 	strd	r7, r8, [r3]
 8013a34:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013a38:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013a3c:	e7c6      	b.n	80139cc <__kernel_rem_pio2+0x4e4>
 8013a3e:	9e05      	ldr	r6, [sp, #20]
 8013a40:	ab48      	add	r3, sp, #288	; 0x120
 8013a42:	441e      	add	r6, r3
 8013a44:	462c      	mov	r4, r5
 8013a46:	2000      	movs	r0, #0
 8013a48:	2100      	movs	r1, #0
 8013a4a:	2c00      	cmp	r4, #0
 8013a4c:	da33      	bge.n	8013ab6 <__kernel_rem_pio2+0x5ce>
 8013a4e:	f1bb 0f00 	cmp.w	fp, #0
 8013a52:	d036      	beq.n	8013ac2 <__kernel_rem_pio2+0x5da>
 8013a54:	4602      	mov	r2, r0
 8013a56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a5a:	9c04      	ldr	r4, [sp, #16]
 8013a5c:	e9c4 2300 	strd	r2, r3, [r4]
 8013a60:	4602      	mov	r2, r0
 8013a62:	460b      	mov	r3, r1
 8013a64:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8013a68:	f7ec fc0e 	bl	8000288 <__aeabi_dsub>
 8013a6c:	ae4a      	add	r6, sp, #296	; 0x128
 8013a6e:	2401      	movs	r4, #1
 8013a70:	42a5      	cmp	r5, r4
 8013a72:	da29      	bge.n	8013ac8 <__kernel_rem_pio2+0x5e0>
 8013a74:	f1bb 0f00 	cmp.w	fp, #0
 8013a78:	d002      	beq.n	8013a80 <__kernel_rem_pio2+0x598>
 8013a7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a7e:	4619      	mov	r1, r3
 8013a80:	9b04      	ldr	r3, [sp, #16]
 8013a82:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013a86:	e7a1      	b.n	80139cc <__kernel_rem_pio2+0x4e4>
 8013a88:	9c05      	ldr	r4, [sp, #20]
 8013a8a:	ab48      	add	r3, sp, #288	; 0x120
 8013a8c:	441c      	add	r4, r3
 8013a8e:	2000      	movs	r0, #0
 8013a90:	2100      	movs	r1, #0
 8013a92:	2d00      	cmp	r5, #0
 8013a94:	da09      	bge.n	8013aaa <__kernel_rem_pio2+0x5c2>
 8013a96:	f1bb 0f00 	cmp.w	fp, #0
 8013a9a:	d002      	beq.n	8013aa2 <__kernel_rem_pio2+0x5ba>
 8013a9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013aa0:	4619      	mov	r1, r3
 8013aa2:	9b04      	ldr	r3, [sp, #16]
 8013aa4:	e9c3 0100 	strd	r0, r1, [r3]
 8013aa8:	e790      	b.n	80139cc <__kernel_rem_pio2+0x4e4>
 8013aaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013aae:	f7ec fbed 	bl	800028c <__adddf3>
 8013ab2:	3d01      	subs	r5, #1
 8013ab4:	e7ed      	b.n	8013a92 <__kernel_rem_pio2+0x5aa>
 8013ab6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8013aba:	f7ec fbe7 	bl	800028c <__adddf3>
 8013abe:	3c01      	subs	r4, #1
 8013ac0:	e7c3      	b.n	8013a4a <__kernel_rem_pio2+0x562>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	460b      	mov	r3, r1
 8013ac6:	e7c8      	b.n	8013a5a <__kernel_rem_pio2+0x572>
 8013ac8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8013acc:	f7ec fbde 	bl	800028c <__adddf3>
 8013ad0:	3401      	adds	r4, #1
 8013ad2:	e7cd      	b.n	8013a70 <__kernel_rem_pio2+0x588>
 8013ad4:	e9da 8900 	ldrd	r8, r9, [sl]
 8013ad8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8013adc:	9b00      	ldr	r3, [sp, #0]
 8013ade:	3b01      	subs	r3, #1
 8013ae0:	9300      	str	r3, [sp, #0]
 8013ae2:	4632      	mov	r2, r6
 8013ae4:	463b      	mov	r3, r7
 8013ae6:	4640      	mov	r0, r8
 8013ae8:	4649      	mov	r1, r9
 8013aea:	f7ec fbcf 	bl	800028c <__adddf3>
 8013aee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013af2:	4602      	mov	r2, r0
 8013af4:	460b      	mov	r3, r1
 8013af6:	4640      	mov	r0, r8
 8013af8:	4649      	mov	r1, r9
 8013afa:	f7ec fbc5 	bl	8000288 <__aeabi_dsub>
 8013afe:	4632      	mov	r2, r6
 8013b00:	463b      	mov	r3, r7
 8013b02:	f7ec fbc3 	bl	800028c <__adddf3>
 8013b06:	ed9d 7b06 	vldr	d7, [sp, #24]
 8013b0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013b0e:	ed8a 7b00 	vstr	d7, [sl]
 8013b12:	e770      	b.n	80139f6 <__kernel_rem_pio2+0x50e>
 8013b14:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013b18:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013b1c:	4640      	mov	r0, r8
 8013b1e:	4632      	mov	r2, r6
 8013b20:	463b      	mov	r3, r7
 8013b22:	4649      	mov	r1, r9
 8013b24:	f7ec fbb2 	bl	800028c <__adddf3>
 8013b28:	e9cd 0100 	strd	r0, r1, [sp]
 8013b2c:	4602      	mov	r2, r0
 8013b2e:	460b      	mov	r3, r1
 8013b30:	4640      	mov	r0, r8
 8013b32:	4649      	mov	r1, r9
 8013b34:	f7ec fba8 	bl	8000288 <__aeabi_dsub>
 8013b38:	4632      	mov	r2, r6
 8013b3a:	463b      	mov	r3, r7
 8013b3c:	f7ec fba6 	bl	800028c <__adddf3>
 8013b40:	ed9d 7b00 	vldr	d7, [sp]
 8013b44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013b48:	ed84 7b00 	vstr	d7, [r4]
 8013b4c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013b50:	e757      	b.n	8013a02 <__kernel_rem_pio2+0x51a>
 8013b52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013b56:	f7ec fb99 	bl	800028c <__adddf3>
 8013b5a:	3d01      	subs	r5, #1
 8013b5c:	e75c      	b.n	8013a18 <__kernel_rem_pio2+0x530>
 8013b5e:	9b04      	ldr	r3, [sp, #16]
 8013b60:	9a04      	ldr	r2, [sp, #16]
 8013b62:	601f      	str	r7, [r3, #0]
 8013b64:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013b68:	605c      	str	r4, [r3, #4]
 8013b6a:	609d      	str	r5, [r3, #8]
 8013b6c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013b70:	60d3      	str	r3, [r2, #12]
 8013b72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b76:	6110      	str	r0, [r2, #16]
 8013b78:	6153      	str	r3, [r2, #20]
 8013b7a:	e727      	b.n	80139cc <__kernel_rem_pio2+0x4e4>
 8013b7c:	41700000 	.word	0x41700000
 8013b80:	3e700000 	.word	0x3e700000
 8013b84:	00000000 	.word	0x00000000

08013b88 <__kernel_cos>:
 8013b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b8c:	ec57 6b10 	vmov	r6, r7, d0
 8013b90:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013b94:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013b98:	ed8d 1b00 	vstr	d1, [sp]
 8013b9c:	da07      	bge.n	8013bae <__kernel_cos+0x26>
 8013b9e:	ee10 0a10 	vmov	r0, s0
 8013ba2:	4639      	mov	r1, r7
 8013ba4:	f7ec ffd8 	bl	8000b58 <__aeabi_d2iz>
 8013ba8:	2800      	cmp	r0, #0
 8013baa:	f000 8088 	beq.w	8013cbe <__kernel_cos+0x136>
 8013bae:	4632      	mov	r2, r6
 8013bb0:	463b      	mov	r3, r7
 8013bb2:	4630      	mov	r0, r6
 8013bb4:	4639      	mov	r1, r7
 8013bb6:	f7ec fd1f 	bl	80005f8 <__aeabi_dmul>
 8013bba:	4b51      	ldr	r3, [pc, #324]	; (8013d00 <__kernel_cos+0x178>)
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	4604      	mov	r4, r0
 8013bc0:	460d      	mov	r5, r1
 8013bc2:	f7ec fd19 	bl	80005f8 <__aeabi_dmul>
 8013bc6:	a340      	add	r3, pc, #256	; (adr r3, 8013cc8 <__kernel_cos+0x140>)
 8013bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bcc:	4682      	mov	sl, r0
 8013bce:	468b      	mov	fp, r1
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	4629      	mov	r1, r5
 8013bd4:	f7ec fd10 	bl	80005f8 <__aeabi_dmul>
 8013bd8:	a33d      	add	r3, pc, #244	; (adr r3, 8013cd0 <__kernel_cos+0x148>)
 8013bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bde:	f7ec fb55 	bl	800028c <__adddf3>
 8013be2:	4622      	mov	r2, r4
 8013be4:	462b      	mov	r3, r5
 8013be6:	f7ec fd07 	bl	80005f8 <__aeabi_dmul>
 8013bea:	a33b      	add	r3, pc, #236	; (adr r3, 8013cd8 <__kernel_cos+0x150>)
 8013bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf0:	f7ec fb4a 	bl	8000288 <__aeabi_dsub>
 8013bf4:	4622      	mov	r2, r4
 8013bf6:	462b      	mov	r3, r5
 8013bf8:	f7ec fcfe 	bl	80005f8 <__aeabi_dmul>
 8013bfc:	a338      	add	r3, pc, #224	; (adr r3, 8013ce0 <__kernel_cos+0x158>)
 8013bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c02:	f7ec fb43 	bl	800028c <__adddf3>
 8013c06:	4622      	mov	r2, r4
 8013c08:	462b      	mov	r3, r5
 8013c0a:	f7ec fcf5 	bl	80005f8 <__aeabi_dmul>
 8013c0e:	a336      	add	r3, pc, #216	; (adr r3, 8013ce8 <__kernel_cos+0x160>)
 8013c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c14:	f7ec fb38 	bl	8000288 <__aeabi_dsub>
 8013c18:	4622      	mov	r2, r4
 8013c1a:	462b      	mov	r3, r5
 8013c1c:	f7ec fcec 	bl	80005f8 <__aeabi_dmul>
 8013c20:	a333      	add	r3, pc, #204	; (adr r3, 8013cf0 <__kernel_cos+0x168>)
 8013c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c26:	f7ec fb31 	bl	800028c <__adddf3>
 8013c2a:	4622      	mov	r2, r4
 8013c2c:	462b      	mov	r3, r5
 8013c2e:	f7ec fce3 	bl	80005f8 <__aeabi_dmul>
 8013c32:	4622      	mov	r2, r4
 8013c34:	462b      	mov	r3, r5
 8013c36:	f7ec fcdf 	bl	80005f8 <__aeabi_dmul>
 8013c3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c3e:	4604      	mov	r4, r0
 8013c40:	460d      	mov	r5, r1
 8013c42:	4630      	mov	r0, r6
 8013c44:	4639      	mov	r1, r7
 8013c46:	f7ec fcd7 	bl	80005f8 <__aeabi_dmul>
 8013c4a:	460b      	mov	r3, r1
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	4629      	mov	r1, r5
 8013c50:	4620      	mov	r0, r4
 8013c52:	f7ec fb19 	bl	8000288 <__aeabi_dsub>
 8013c56:	4b2b      	ldr	r3, [pc, #172]	; (8013d04 <__kernel_cos+0x17c>)
 8013c58:	4598      	cmp	r8, r3
 8013c5a:	4606      	mov	r6, r0
 8013c5c:	460f      	mov	r7, r1
 8013c5e:	dc10      	bgt.n	8013c82 <__kernel_cos+0xfa>
 8013c60:	4602      	mov	r2, r0
 8013c62:	460b      	mov	r3, r1
 8013c64:	4650      	mov	r0, sl
 8013c66:	4659      	mov	r1, fp
 8013c68:	f7ec fb0e 	bl	8000288 <__aeabi_dsub>
 8013c6c:	460b      	mov	r3, r1
 8013c6e:	4926      	ldr	r1, [pc, #152]	; (8013d08 <__kernel_cos+0x180>)
 8013c70:	4602      	mov	r2, r0
 8013c72:	2000      	movs	r0, #0
 8013c74:	f7ec fb08 	bl	8000288 <__aeabi_dsub>
 8013c78:	ec41 0b10 	vmov	d0, r0, r1
 8013c7c:	b003      	add	sp, #12
 8013c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c82:	4b22      	ldr	r3, [pc, #136]	; (8013d0c <__kernel_cos+0x184>)
 8013c84:	4920      	ldr	r1, [pc, #128]	; (8013d08 <__kernel_cos+0x180>)
 8013c86:	4598      	cmp	r8, r3
 8013c88:	bfcc      	ite	gt
 8013c8a:	4d21      	ldrgt	r5, [pc, #132]	; (8013d10 <__kernel_cos+0x188>)
 8013c8c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8013c90:	2400      	movs	r4, #0
 8013c92:	4622      	mov	r2, r4
 8013c94:	462b      	mov	r3, r5
 8013c96:	2000      	movs	r0, #0
 8013c98:	f7ec faf6 	bl	8000288 <__aeabi_dsub>
 8013c9c:	4622      	mov	r2, r4
 8013c9e:	4680      	mov	r8, r0
 8013ca0:	4689      	mov	r9, r1
 8013ca2:	462b      	mov	r3, r5
 8013ca4:	4650      	mov	r0, sl
 8013ca6:	4659      	mov	r1, fp
 8013ca8:	f7ec faee 	bl	8000288 <__aeabi_dsub>
 8013cac:	4632      	mov	r2, r6
 8013cae:	463b      	mov	r3, r7
 8013cb0:	f7ec faea 	bl	8000288 <__aeabi_dsub>
 8013cb4:	4602      	mov	r2, r0
 8013cb6:	460b      	mov	r3, r1
 8013cb8:	4640      	mov	r0, r8
 8013cba:	4649      	mov	r1, r9
 8013cbc:	e7da      	b.n	8013c74 <__kernel_cos+0xec>
 8013cbe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8013cf8 <__kernel_cos+0x170>
 8013cc2:	e7db      	b.n	8013c7c <__kernel_cos+0xf4>
 8013cc4:	f3af 8000 	nop.w
 8013cc8:	be8838d4 	.word	0xbe8838d4
 8013ccc:	bda8fae9 	.word	0xbda8fae9
 8013cd0:	bdb4b1c4 	.word	0xbdb4b1c4
 8013cd4:	3e21ee9e 	.word	0x3e21ee9e
 8013cd8:	809c52ad 	.word	0x809c52ad
 8013cdc:	3e927e4f 	.word	0x3e927e4f
 8013ce0:	19cb1590 	.word	0x19cb1590
 8013ce4:	3efa01a0 	.word	0x3efa01a0
 8013ce8:	16c15177 	.word	0x16c15177
 8013cec:	3f56c16c 	.word	0x3f56c16c
 8013cf0:	5555554c 	.word	0x5555554c
 8013cf4:	3fa55555 	.word	0x3fa55555
 8013cf8:	00000000 	.word	0x00000000
 8013cfc:	3ff00000 	.word	0x3ff00000
 8013d00:	3fe00000 	.word	0x3fe00000
 8013d04:	3fd33332 	.word	0x3fd33332
 8013d08:	3ff00000 	.word	0x3ff00000
 8013d0c:	3fe90000 	.word	0x3fe90000
 8013d10:	3fd20000 	.word	0x3fd20000
 8013d14:	00000000 	.word	0x00000000

08013d18 <__kernel_sin>:
 8013d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d1c:	ed2d 8b04 	vpush	{d8-d9}
 8013d20:	eeb0 8a41 	vmov.f32	s16, s2
 8013d24:	eef0 8a61 	vmov.f32	s17, s3
 8013d28:	ec55 4b10 	vmov	r4, r5, d0
 8013d2c:	b083      	sub	sp, #12
 8013d2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013d32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013d36:	9001      	str	r0, [sp, #4]
 8013d38:	da06      	bge.n	8013d48 <__kernel_sin+0x30>
 8013d3a:	ee10 0a10 	vmov	r0, s0
 8013d3e:	4629      	mov	r1, r5
 8013d40:	f7ec ff0a 	bl	8000b58 <__aeabi_d2iz>
 8013d44:	2800      	cmp	r0, #0
 8013d46:	d051      	beq.n	8013dec <__kernel_sin+0xd4>
 8013d48:	4622      	mov	r2, r4
 8013d4a:	462b      	mov	r3, r5
 8013d4c:	4620      	mov	r0, r4
 8013d4e:	4629      	mov	r1, r5
 8013d50:	f7ec fc52 	bl	80005f8 <__aeabi_dmul>
 8013d54:	4682      	mov	sl, r0
 8013d56:	468b      	mov	fp, r1
 8013d58:	4602      	mov	r2, r0
 8013d5a:	460b      	mov	r3, r1
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	4629      	mov	r1, r5
 8013d60:	f7ec fc4a 	bl	80005f8 <__aeabi_dmul>
 8013d64:	a341      	add	r3, pc, #260	; (adr r3, 8013e6c <__kernel_sin+0x154>)
 8013d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6a:	4680      	mov	r8, r0
 8013d6c:	4689      	mov	r9, r1
 8013d6e:	4650      	mov	r0, sl
 8013d70:	4659      	mov	r1, fp
 8013d72:	f7ec fc41 	bl	80005f8 <__aeabi_dmul>
 8013d76:	a33f      	add	r3, pc, #252	; (adr r3, 8013e74 <__kernel_sin+0x15c>)
 8013d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7c:	f7ec fa84 	bl	8000288 <__aeabi_dsub>
 8013d80:	4652      	mov	r2, sl
 8013d82:	465b      	mov	r3, fp
 8013d84:	f7ec fc38 	bl	80005f8 <__aeabi_dmul>
 8013d88:	a33c      	add	r3, pc, #240	; (adr r3, 8013e7c <__kernel_sin+0x164>)
 8013d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d8e:	f7ec fa7d 	bl	800028c <__adddf3>
 8013d92:	4652      	mov	r2, sl
 8013d94:	465b      	mov	r3, fp
 8013d96:	f7ec fc2f 	bl	80005f8 <__aeabi_dmul>
 8013d9a:	a33a      	add	r3, pc, #232	; (adr r3, 8013e84 <__kernel_sin+0x16c>)
 8013d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da0:	f7ec fa72 	bl	8000288 <__aeabi_dsub>
 8013da4:	4652      	mov	r2, sl
 8013da6:	465b      	mov	r3, fp
 8013da8:	f7ec fc26 	bl	80005f8 <__aeabi_dmul>
 8013dac:	a337      	add	r3, pc, #220	; (adr r3, 8013e8c <__kernel_sin+0x174>)
 8013dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db2:	f7ec fa6b 	bl	800028c <__adddf3>
 8013db6:	9b01      	ldr	r3, [sp, #4]
 8013db8:	4606      	mov	r6, r0
 8013dba:	460f      	mov	r7, r1
 8013dbc:	b9eb      	cbnz	r3, 8013dfa <__kernel_sin+0xe2>
 8013dbe:	4602      	mov	r2, r0
 8013dc0:	460b      	mov	r3, r1
 8013dc2:	4650      	mov	r0, sl
 8013dc4:	4659      	mov	r1, fp
 8013dc6:	f7ec fc17 	bl	80005f8 <__aeabi_dmul>
 8013dca:	a325      	add	r3, pc, #148	; (adr r3, 8013e60 <__kernel_sin+0x148>)
 8013dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd0:	f7ec fa5a 	bl	8000288 <__aeabi_dsub>
 8013dd4:	4642      	mov	r2, r8
 8013dd6:	464b      	mov	r3, r9
 8013dd8:	f7ec fc0e 	bl	80005f8 <__aeabi_dmul>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	460b      	mov	r3, r1
 8013de0:	4620      	mov	r0, r4
 8013de2:	4629      	mov	r1, r5
 8013de4:	f7ec fa52 	bl	800028c <__adddf3>
 8013de8:	4604      	mov	r4, r0
 8013dea:	460d      	mov	r5, r1
 8013dec:	ec45 4b10 	vmov	d0, r4, r5
 8013df0:	b003      	add	sp, #12
 8013df2:	ecbd 8b04 	vpop	{d8-d9}
 8013df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dfa:	4b1b      	ldr	r3, [pc, #108]	; (8013e68 <__kernel_sin+0x150>)
 8013dfc:	ec51 0b18 	vmov	r0, r1, d8
 8013e00:	2200      	movs	r2, #0
 8013e02:	f7ec fbf9 	bl	80005f8 <__aeabi_dmul>
 8013e06:	4632      	mov	r2, r6
 8013e08:	ec41 0b19 	vmov	d9, r0, r1
 8013e0c:	463b      	mov	r3, r7
 8013e0e:	4640      	mov	r0, r8
 8013e10:	4649      	mov	r1, r9
 8013e12:	f7ec fbf1 	bl	80005f8 <__aeabi_dmul>
 8013e16:	4602      	mov	r2, r0
 8013e18:	460b      	mov	r3, r1
 8013e1a:	ec51 0b19 	vmov	r0, r1, d9
 8013e1e:	f7ec fa33 	bl	8000288 <__aeabi_dsub>
 8013e22:	4652      	mov	r2, sl
 8013e24:	465b      	mov	r3, fp
 8013e26:	f7ec fbe7 	bl	80005f8 <__aeabi_dmul>
 8013e2a:	ec53 2b18 	vmov	r2, r3, d8
 8013e2e:	f7ec fa2b 	bl	8000288 <__aeabi_dsub>
 8013e32:	a30b      	add	r3, pc, #44	; (adr r3, 8013e60 <__kernel_sin+0x148>)
 8013e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e38:	4606      	mov	r6, r0
 8013e3a:	460f      	mov	r7, r1
 8013e3c:	4640      	mov	r0, r8
 8013e3e:	4649      	mov	r1, r9
 8013e40:	f7ec fbda 	bl	80005f8 <__aeabi_dmul>
 8013e44:	4602      	mov	r2, r0
 8013e46:	460b      	mov	r3, r1
 8013e48:	4630      	mov	r0, r6
 8013e4a:	4639      	mov	r1, r7
 8013e4c:	f7ec fa1e 	bl	800028c <__adddf3>
 8013e50:	4602      	mov	r2, r0
 8013e52:	460b      	mov	r3, r1
 8013e54:	4620      	mov	r0, r4
 8013e56:	4629      	mov	r1, r5
 8013e58:	f7ec fa16 	bl	8000288 <__aeabi_dsub>
 8013e5c:	e7c4      	b.n	8013de8 <__kernel_sin+0xd0>
 8013e5e:	bf00      	nop
 8013e60:	55555549 	.word	0x55555549
 8013e64:	3fc55555 	.word	0x3fc55555
 8013e68:	3fe00000 	.word	0x3fe00000
 8013e6c:	5acfd57c 	.word	0x5acfd57c
 8013e70:	3de5d93a 	.word	0x3de5d93a
 8013e74:	8a2b9ceb 	.word	0x8a2b9ceb
 8013e78:	3e5ae5e6 	.word	0x3e5ae5e6
 8013e7c:	57b1fe7d 	.word	0x57b1fe7d
 8013e80:	3ec71de3 	.word	0x3ec71de3
 8013e84:	19c161d5 	.word	0x19c161d5
 8013e88:	3f2a01a0 	.word	0x3f2a01a0
 8013e8c:	1110f8a6 	.word	0x1110f8a6
 8013e90:	3f811111 	.word	0x3f811111

08013e94 <atanf>:
 8013e94:	b538      	push	{r3, r4, r5, lr}
 8013e96:	ee10 5a10 	vmov	r5, s0
 8013e9a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013e9e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013ea2:	eef0 7a40 	vmov.f32	s15, s0
 8013ea6:	db10      	blt.n	8013eca <atanf+0x36>
 8013ea8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013eac:	dd04      	ble.n	8013eb8 <atanf+0x24>
 8013eae:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8013eb6:	bd38      	pop	{r3, r4, r5, pc}
 8013eb8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8013ff0 <atanf+0x15c>
 8013ebc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8013ff4 <atanf+0x160>
 8013ec0:	2d00      	cmp	r5, #0
 8013ec2:	bfd8      	it	le
 8013ec4:	eef0 7a47 	vmovle.f32	s15, s14
 8013ec8:	e7f3      	b.n	8013eb2 <atanf+0x1e>
 8013eca:	4b4b      	ldr	r3, [pc, #300]	; (8013ff8 <atanf+0x164>)
 8013ecc:	429c      	cmp	r4, r3
 8013ece:	dc10      	bgt.n	8013ef2 <atanf+0x5e>
 8013ed0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013ed4:	da0a      	bge.n	8013eec <atanf+0x58>
 8013ed6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013ffc <atanf+0x168>
 8013eda:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013ee2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eea:	dce2      	bgt.n	8013eb2 <atanf+0x1e>
 8013eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013ef0:	e013      	b.n	8013f1a <atanf+0x86>
 8013ef2:	f000 f8a3 	bl	801403c <fabsf>
 8013ef6:	4b42      	ldr	r3, [pc, #264]	; (8014000 <atanf+0x16c>)
 8013ef8:	429c      	cmp	r4, r3
 8013efa:	dc4f      	bgt.n	8013f9c <atanf+0x108>
 8013efc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013f00:	429c      	cmp	r4, r3
 8013f02:	dc41      	bgt.n	8013f88 <atanf+0xf4>
 8013f04:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013f08:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013f0c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013f10:	2300      	movs	r3, #0
 8013f12:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013f1a:	1c5a      	adds	r2, r3, #1
 8013f1c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013f20:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014004 <atanf+0x170>
 8013f24:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014008 <atanf+0x174>
 8013f28:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801400c <atanf+0x178>
 8013f2c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013f30:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013f34:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014010 <atanf+0x17c>
 8013f38:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013f3c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014014 <atanf+0x180>
 8013f40:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013f44:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014018 <atanf+0x184>
 8013f48:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013f4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801401c <atanf+0x188>
 8013f50:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013f54:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014020 <atanf+0x18c>
 8013f58:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013f5c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014024 <atanf+0x190>
 8013f60:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013f64:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014028 <atanf+0x194>
 8013f68:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013f6c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801402c <atanf+0x198>
 8013f70:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013f74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013f78:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013f7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013f80:	d121      	bne.n	8013fc6 <atanf+0x132>
 8013f82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f86:	e794      	b.n	8013eb2 <atanf+0x1e>
 8013f88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013f8c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013f90:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f94:	2301      	movs	r3, #1
 8013f96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013f9a:	e7be      	b.n	8013f1a <atanf+0x86>
 8013f9c:	4b24      	ldr	r3, [pc, #144]	; (8014030 <atanf+0x19c>)
 8013f9e:	429c      	cmp	r4, r3
 8013fa0:	dc0b      	bgt.n	8013fba <atanf+0x126>
 8013fa2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013faa:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013fae:	2302      	movs	r3, #2
 8013fb0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fb8:	e7af      	b.n	8013f1a <atanf+0x86>
 8013fba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013fbe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013fc2:	2303      	movs	r3, #3
 8013fc4:	e7a9      	b.n	8013f1a <atanf+0x86>
 8013fc6:	4a1b      	ldr	r2, [pc, #108]	; (8014034 <atanf+0x1a0>)
 8013fc8:	491b      	ldr	r1, [pc, #108]	; (8014038 <atanf+0x1a4>)
 8013fca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013fce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013fd2:	edd3 6a00 	vldr	s13, [r3]
 8013fd6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013fda:	2d00      	cmp	r5, #0
 8013fdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013fe0:	edd2 7a00 	vldr	s15, [r2]
 8013fe4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013fe8:	bfb8      	it	lt
 8013fea:	eef1 7a67 	vneglt.f32	s15, s15
 8013fee:	e760      	b.n	8013eb2 <atanf+0x1e>
 8013ff0:	3fc90fdb 	.word	0x3fc90fdb
 8013ff4:	bfc90fdb 	.word	0xbfc90fdb
 8013ff8:	3edfffff 	.word	0x3edfffff
 8013ffc:	7149f2ca 	.word	0x7149f2ca
 8014000:	3f97ffff 	.word	0x3f97ffff
 8014004:	3c8569d7 	.word	0x3c8569d7
 8014008:	3d4bda59 	.word	0x3d4bda59
 801400c:	bd6ef16b 	.word	0xbd6ef16b
 8014010:	3d886b35 	.word	0x3d886b35
 8014014:	3dba2e6e 	.word	0x3dba2e6e
 8014018:	3e124925 	.word	0x3e124925
 801401c:	3eaaaaab 	.word	0x3eaaaaab
 8014020:	bd15a221 	.word	0xbd15a221
 8014024:	bd9d8795 	.word	0xbd9d8795
 8014028:	bde38e38 	.word	0xbde38e38
 801402c:	be4ccccd 	.word	0xbe4ccccd
 8014030:	401bffff 	.word	0x401bffff
 8014034:	08015658 	.word	0x08015658
 8014038:	08015668 	.word	0x08015668

0801403c <fabsf>:
 801403c:	ee10 3a10 	vmov	r3, s0
 8014040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014044:	ee00 3a10 	vmov	s0, r3
 8014048:	4770      	bx	lr
 801404a:	0000      	movs	r0, r0
 801404c:	0000      	movs	r0, r0
	...

08014050 <scalbn>:
 8014050:	b570      	push	{r4, r5, r6, lr}
 8014052:	ec55 4b10 	vmov	r4, r5, d0
 8014056:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801405a:	4606      	mov	r6, r0
 801405c:	462b      	mov	r3, r5
 801405e:	b999      	cbnz	r1, 8014088 <scalbn+0x38>
 8014060:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014064:	4323      	orrs	r3, r4
 8014066:	d03f      	beq.n	80140e8 <scalbn+0x98>
 8014068:	4b35      	ldr	r3, [pc, #212]	; (8014140 <scalbn+0xf0>)
 801406a:	4629      	mov	r1, r5
 801406c:	ee10 0a10 	vmov	r0, s0
 8014070:	2200      	movs	r2, #0
 8014072:	f7ec fac1 	bl	80005f8 <__aeabi_dmul>
 8014076:	4b33      	ldr	r3, [pc, #204]	; (8014144 <scalbn+0xf4>)
 8014078:	429e      	cmp	r6, r3
 801407a:	4604      	mov	r4, r0
 801407c:	460d      	mov	r5, r1
 801407e:	da10      	bge.n	80140a2 <scalbn+0x52>
 8014080:	a327      	add	r3, pc, #156	; (adr r3, 8014120 <scalbn+0xd0>)
 8014082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014086:	e01f      	b.n	80140c8 <scalbn+0x78>
 8014088:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801408c:	4291      	cmp	r1, r2
 801408e:	d10c      	bne.n	80140aa <scalbn+0x5a>
 8014090:	ee10 2a10 	vmov	r2, s0
 8014094:	4620      	mov	r0, r4
 8014096:	4629      	mov	r1, r5
 8014098:	f7ec f8f8 	bl	800028c <__adddf3>
 801409c:	4604      	mov	r4, r0
 801409e:	460d      	mov	r5, r1
 80140a0:	e022      	b.n	80140e8 <scalbn+0x98>
 80140a2:	460b      	mov	r3, r1
 80140a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80140a8:	3936      	subs	r1, #54	; 0x36
 80140aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80140ae:	4296      	cmp	r6, r2
 80140b0:	dd0d      	ble.n	80140ce <scalbn+0x7e>
 80140b2:	2d00      	cmp	r5, #0
 80140b4:	a11c      	add	r1, pc, #112	; (adr r1, 8014128 <scalbn+0xd8>)
 80140b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140ba:	da02      	bge.n	80140c2 <scalbn+0x72>
 80140bc:	a11c      	add	r1, pc, #112	; (adr r1, 8014130 <scalbn+0xe0>)
 80140be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140c2:	a319      	add	r3, pc, #100	; (adr r3, 8014128 <scalbn+0xd8>)
 80140c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c8:	f7ec fa96 	bl	80005f8 <__aeabi_dmul>
 80140cc:	e7e6      	b.n	801409c <scalbn+0x4c>
 80140ce:	1872      	adds	r2, r6, r1
 80140d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80140d4:	428a      	cmp	r2, r1
 80140d6:	dcec      	bgt.n	80140b2 <scalbn+0x62>
 80140d8:	2a00      	cmp	r2, #0
 80140da:	dd08      	ble.n	80140ee <scalbn+0x9e>
 80140dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80140e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80140e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80140e8:	ec45 4b10 	vmov	d0, r4, r5
 80140ec:	bd70      	pop	{r4, r5, r6, pc}
 80140ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80140f2:	da08      	bge.n	8014106 <scalbn+0xb6>
 80140f4:	2d00      	cmp	r5, #0
 80140f6:	a10a      	add	r1, pc, #40	; (adr r1, 8014120 <scalbn+0xd0>)
 80140f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140fc:	dac0      	bge.n	8014080 <scalbn+0x30>
 80140fe:	a10e      	add	r1, pc, #56	; (adr r1, 8014138 <scalbn+0xe8>)
 8014100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014104:	e7bc      	b.n	8014080 <scalbn+0x30>
 8014106:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801410a:	3236      	adds	r2, #54	; 0x36
 801410c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014110:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8014114:	4620      	mov	r0, r4
 8014116:	4b0c      	ldr	r3, [pc, #48]	; (8014148 <scalbn+0xf8>)
 8014118:	2200      	movs	r2, #0
 801411a:	e7d5      	b.n	80140c8 <scalbn+0x78>
 801411c:	f3af 8000 	nop.w
 8014120:	c2f8f359 	.word	0xc2f8f359
 8014124:	01a56e1f 	.word	0x01a56e1f
 8014128:	8800759c 	.word	0x8800759c
 801412c:	7e37e43c 	.word	0x7e37e43c
 8014130:	8800759c 	.word	0x8800759c
 8014134:	fe37e43c 	.word	0xfe37e43c
 8014138:	c2f8f359 	.word	0xc2f8f359
 801413c:	81a56e1f 	.word	0x81a56e1f
 8014140:	43500000 	.word	0x43500000
 8014144:	ffff3cb0 	.word	0xffff3cb0
 8014148:	3c900000 	.word	0x3c900000
 801414c:	00000000 	.word	0x00000000

08014150 <floor>:
 8014150:	ec51 0b10 	vmov	r0, r1, d0
 8014154:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801415c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8014160:	2e13      	cmp	r6, #19
 8014162:	ee10 5a10 	vmov	r5, s0
 8014166:	ee10 8a10 	vmov	r8, s0
 801416a:	460c      	mov	r4, r1
 801416c:	dc31      	bgt.n	80141d2 <floor+0x82>
 801416e:	2e00      	cmp	r6, #0
 8014170:	da14      	bge.n	801419c <floor+0x4c>
 8014172:	a333      	add	r3, pc, #204	; (adr r3, 8014240 <floor+0xf0>)
 8014174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014178:	f7ec f888 	bl	800028c <__adddf3>
 801417c:	2200      	movs	r2, #0
 801417e:	2300      	movs	r3, #0
 8014180:	f7ec fcca 	bl	8000b18 <__aeabi_dcmpgt>
 8014184:	b138      	cbz	r0, 8014196 <floor+0x46>
 8014186:	2c00      	cmp	r4, #0
 8014188:	da53      	bge.n	8014232 <floor+0xe2>
 801418a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801418e:	4325      	orrs	r5, r4
 8014190:	d052      	beq.n	8014238 <floor+0xe8>
 8014192:	4c2d      	ldr	r4, [pc, #180]	; (8014248 <floor+0xf8>)
 8014194:	2500      	movs	r5, #0
 8014196:	4621      	mov	r1, r4
 8014198:	4628      	mov	r0, r5
 801419a:	e024      	b.n	80141e6 <floor+0x96>
 801419c:	4f2b      	ldr	r7, [pc, #172]	; (801424c <floor+0xfc>)
 801419e:	4137      	asrs	r7, r6
 80141a0:	ea01 0307 	and.w	r3, r1, r7
 80141a4:	4303      	orrs	r3, r0
 80141a6:	d01e      	beq.n	80141e6 <floor+0x96>
 80141a8:	a325      	add	r3, pc, #148	; (adr r3, 8014240 <floor+0xf0>)
 80141aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ae:	f7ec f86d 	bl	800028c <__adddf3>
 80141b2:	2200      	movs	r2, #0
 80141b4:	2300      	movs	r3, #0
 80141b6:	f7ec fcaf 	bl	8000b18 <__aeabi_dcmpgt>
 80141ba:	2800      	cmp	r0, #0
 80141bc:	d0eb      	beq.n	8014196 <floor+0x46>
 80141be:	2c00      	cmp	r4, #0
 80141c0:	bfbe      	ittt	lt
 80141c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80141c6:	4133      	asrlt	r3, r6
 80141c8:	18e4      	addlt	r4, r4, r3
 80141ca:	ea24 0407 	bic.w	r4, r4, r7
 80141ce:	2500      	movs	r5, #0
 80141d0:	e7e1      	b.n	8014196 <floor+0x46>
 80141d2:	2e33      	cmp	r6, #51	; 0x33
 80141d4:	dd0b      	ble.n	80141ee <floor+0x9e>
 80141d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80141da:	d104      	bne.n	80141e6 <floor+0x96>
 80141dc:	ee10 2a10 	vmov	r2, s0
 80141e0:	460b      	mov	r3, r1
 80141e2:	f7ec f853 	bl	800028c <__adddf3>
 80141e6:	ec41 0b10 	vmov	d0, r0, r1
 80141ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80141f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80141f6:	40df      	lsrs	r7, r3
 80141f8:	4238      	tst	r0, r7
 80141fa:	d0f4      	beq.n	80141e6 <floor+0x96>
 80141fc:	a310      	add	r3, pc, #64	; (adr r3, 8014240 <floor+0xf0>)
 80141fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014202:	f7ec f843 	bl	800028c <__adddf3>
 8014206:	2200      	movs	r2, #0
 8014208:	2300      	movs	r3, #0
 801420a:	f7ec fc85 	bl	8000b18 <__aeabi_dcmpgt>
 801420e:	2800      	cmp	r0, #0
 8014210:	d0c1      	beq.n	8014196 <floor+0x46>
 8014212:	2c00      	cmp	r4, #0
 8014214:	da0a      	bge.n	801422c <floor+0xdc>
 8014216:	2e14      	cmp	r6, #20
 8014218:	d101      	bne.n	801421e <floor+0xce>
 801421a:	3401      	adds	r4, #1
 801421c:	e006      	b.n	801422c <floor+0xdc>
 801421e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014222:	2301      	movs	r3, #1
 8014224:	40b3      	lsls	r3, r6
 8014226:	441d      	add	r5, r3
 8014228:	45a8      	cmp	r8, r5
 801422a:	d8f6      	bhi.n	801421a <floor+0xca>
 801422c:	ea25 0507 	bic.w	r5, r5, r7
 8014230:	e7b1      	b.n	8014196 <floor+0x46>
 8014232:	2500      	movs	r5, #0
 8014234:	462c      	mov	r4, r5
 8014236:	e7ae      	b.n	8014196 <floor+0x46>
 8014238:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801423c:	e7ab      	b.n	8014196 <floor+0x46>
 801423e:	bf00      	nop
 8014240:	8800759c 	.word	0x8800759c
 8014244:	7e37e43c 	.word	0x7e37e43c
 8014248:	bff00000 	.word	0xbff00000
 801424c:	000fffff 	.word	0x000fffff

08014250 <_init>:
 8014250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014252:	bf00      	nop
 8014254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014256:	bc08      	pop	{r3}
 8014258:	469e      	mov	lr, r3
 801425a:	4770      	bx	lr

0801425c <_fini>:
 801425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801425e:	bf00      	nop
 8014260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014262:	bc08      	pop	{r3}
 8014264:	469e      	mov	lr, r3
 8014266:	4770      	bx	lr
