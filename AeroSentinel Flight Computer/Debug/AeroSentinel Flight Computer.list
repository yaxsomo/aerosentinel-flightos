
AeroSentinel Flight Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e47c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d98  0801e610  0801e610  0002e610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080203a8  080203a8  00040208  2**0
                  CONTENTS
  4 .ARM          00000008  080203a8  080203a8  000303a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080203b0  080203b0  00040208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080203b0  080203b0  000303b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080203b4  080203b4  000303b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080203b8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040208  2**0
                  CONTENTS
 10 .bss          0000930c  20000208  20000208  00040208  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20009514  20009514  00040208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040208  2**0
                  CONTENTS, READONLY
 13 .comment      00000093  00000000  00000000  00040238  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003370c  00000000  00000000  000402cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006852  00000000  00000000  000739d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002c40  00000000  00000000  0007a230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000224d  00000000  00000000  0007ce70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ab28  00000000  00000000  0007f0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000339bc  00000000  00000000  000a9be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ee3b3  00000000  00000000  000dd5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000d57c  00000000  00000000  001cb954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  001d8ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e5f4 	.word	0x0801e5f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0801e5f4 	.word	0x0801e5f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f000 b9a6 	b.w	8001000 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f83c 	bl	8000d38 <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_d2lz>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	f7ff ff0b 	bl	8000af0 <__aeabi_dcmplt>
 8000cda:	b928      	cbnz	r0, 8000ce8 <__aeabi_d2lz+0x1c>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce4:	f000 b80a 	b.w	8000cfc <__aeabi_d2ulz>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cee:	f000 f805 	bl	8000cfc <__aeabi_d2ulz>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop

08000cfc <__aeabi_d2ulz>:
 8000cfc:	b5d0      	push	{r4, r6, r7, lr}
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__aeabi_d2ulz+0x34>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	4606      	mov	r6, r0
 8000d04:	460f      	mov	r7, r1
 8000d06:	f7ff fc81 	bl	800060c <__aeabi_dmul>
 8000d0a:	f7ff ff57 	bl	8000bbc <__aeabi_d2uiz>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f7ff fc02 	bl	8000518 <__aeabi_ui2d>
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <__aeabi_d2ulz+0x38>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f7ff fc78 	bl	800060c <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4630      	mov	r0, r6
 8000d22:	4639      	mov	r1, r7
 8000d24:	f7ff faba 	bl	800029c <__aeabi_dsub>
 8000d28:	f7ff ff48 	bl	8000bbc <__aeabi_d2uiz>
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d30:	3df00000 	.word	0x3df00000
 8000d34:	41f00000 	.word	0x41f00000

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9e08      	ldr	r6, [sp, #32]
 8000d3e:	460d      	mov	r5, r1
 8000d40:	4604      	mov	r4, r0
 8000d42:	460f      	mov	r7, r1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d14a      	bne.n	8000dde <__udivmoddi4+0xa6>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4694      	mov	ip, r2
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0xe2>
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	b143      	cbz	r3, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d58:	f1c3 0220 	rsb	r2, r3, #32
 8000d5c:	409f      	lsls	r7, r3
 8000d5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d62:	4317      	orrs	r7, r2
 8000d64:	409c      	lsls	r4, r3
 8000d66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d6a:	fa1f f58c 	uxth.w	r5, ip
 8000d6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d72:	0c22      	lsrs	r2, r4, #16
 8000d74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d7c:	fb01 f005 	mul.w	r0, r1, r5
 8000d80:	4290      	cmp	r0, r2
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x62>
 8000d84:	eb1c 0202 	adds.w	r2, ip, r2
 8000d88:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d8c:	f080 811c 	bcs.w	8000fc8 <__udivmoddi4+0x290>
 8000d90:	4290      	cmp	r0, r2
 8000d92:	f240 8119 	bls.w	8000fc8 <__udivmoddi4+0x290>
 8000d96:	3902      	subs	r1, #2
 8000d98:	4462      	add	r2, ip
 8000d9a:	1a12      	subs	r2, r2, r0
 8000d9c:	b2a4      	uxth	r4, r4
 8000d9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000da2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000daa:	fb00 f505 	mul.w	r5, r0, r5
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x90>
 8000db2:	eb1c 0404 	adds.w	r4, ip, r4
 8000db6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dba:	f080 8107 	bcs.w	8000fcc <__udivmoddi4+0x294>
 8000dbe:	42a5      	cmp	r5, r4
 8000dc0:	f240 8104 	bls.w	8000fcc <__udivmoddi4+0x294>
 8000dc4:	4464      	add	r4, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dcc:	1b64      	subs	r4, r4, r5
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11e      	cbz	r6, 8000dda <__udivmoddi4+0xa2>
 8000dd2:	40dc      	lsrs	r4, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0xbc>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	f000 80ed 	beq.w	8000fc2 <__udivmoddi4+0x28a>
 8000de8:	2100      	movs	r1, #0
 8000dea:	e9c6 0500 	strd	r0, r5, [r6]
 8000dee:	4608      	mov	r0, r1
 8000df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df4:	fab3 f183 	clz	r1, r3
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	d149      	bne.n	8000e90 <__udivmoddi4+0x158>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	d302      	bcc.n	8000e06 <__udivmoddi4+0xce>
 8000e00:	4282      	cmp	r2, r0
 8000e02:	f200 80f8 	bhi.w	8000ff6 <__udivmoddi4+0x2be>
 8000e06:	1a84      	subs	r4, r0, r2
 8000e08:	eb65 0203 	sbc.w	r2, r5, r3
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	4617      	mov	r7, r2
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d0e2      	beq.n	8000dda <__udivmoddi4+0xa2>
 8000e14:	e9c6 4700 	strd	r4, r7, [r6]
 8000e18:	e7df      	b.n	8000dda <__udivmoddi4+0xa2>
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xe6>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f382 	clz	r3, r2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x210>
 8000e28:	1a8a      	subs	r2, r1, r2
 8000e2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2e:	fa1f fe8c 	uxth.w	lr, ip
 8000e32:	2101      	movs	r1, #1
 8000e34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e38:	fb07 2015 	mls	r0, r7, r5, r2
 8000e3c:	0c22      	lsrs	r2, r4, #16
 8000e3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e42:	fb0e f005 	mul.w	r0, lr, r5
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x124>
 8000e4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x122>
 8000e54:	4290      	cmp	r0, r2
 8000e56:	f200 80cb 	bhi.w	8000ff0 <__udivmoddi4+0x2b8>
 8000e5a:	4645      	mov	r5, r8
 8000e5c:	1a12      	subs	r2, r2, r0
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e64:	fb07 2210 	mls	r2, r7, r0, r2
 8000e68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e70:	45a6      	cmp	lr, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x14e>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e7c:	d202      	bcs.n	8000e84 <__udivmoddi4+0x14c>
 8000e7e:	45a6      	cmp	lr, r4
 8000e80:	f200 80bb 	bhi.w	8000ffa <__udivmoddi4+0x2c2>
 8000e84:	4610      	mov	r0, r2
 8000e86:	eba4 040e 	sub.w	r4, r4, lr
 8000e8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8e:	e79f      	b.n	8000dd0 <__udivmoddi4+0x98>
 8000e90:	f1c1 0720 	rsb	r7, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000ea2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea6:	40fd      	lsrs	r5, r7
 8000ea8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ec0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec4:	42a5      	cmp	r5, r4
 8000ec6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eca:	fa00 f001 	lsl.w	r0, r0, r1
 8000ece:	d90b      	bls.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed8:	f080 8088 	bcs.w	8000fec <__udivmoddi4+0x2b4>
 8000edc:	42a5      	cmp	r5, r4
 8000ede:	f240 8085 	bls.w	8000fec <__udivmoddi4+0x2b4>
 8000ee2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee6:	4464      	add	r4, ip
 8000ee8:	1b64      	subs	r4, r4, r5
 8000eea:	b29d      	uxth	r5, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1da>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f08:	d26c      	bcs.n	8000fe4 <__udivmoddi4+0x2ac>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	d96a      	bls.n	8000fe4 <__udivmoddi4+0x2ac>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	4464      	add	r4, ip
 8000f12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f16:	fba3 9502 	umull	r9, r5, r3, r2
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	42ac      	cmp	r4, r5
 8000f20:	46c8      	mov	r8, r9
 8000f22:	46ae      	mov	lr, r5
 8000f24:	d356      	bcc.n	8000fd4 <__udivmoddi4+0x29c>
 8000f26:	d053      	beq.n	8000fd0 <__udivmoddi4+0x298>
 8000f28:	b156      	cbz	r6, 8000f40 <__udivmoddi4+0x208>
 8000f2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f32:	fa04 f707 	lsl.w	r7, r4, r7
 8000f36:	40ca      	lsrs	r2, r1
 8000f38:	40cc      	lsrs	r4, r1
 8000f3a:	4317      	orrs	r7, r2
 8000f3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f40:	4618      	mov	r0, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f48:	f1c3 0120 	rsb	r1, r3, #32
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	fa20 f201 	lsr.w	r2, r0, r1
 8000f54:	fa25 f101 	lsr.w	r1, r5, r1
 8000f58:	409d      	lsls	r5, r3
 8000f5a:	432a      	orrs	r2, r5
 8000f5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f68:	fb07 1510 	mls	r5, r7, r0, r1
 8000f6c:	0c11      	lsrs	r1, r2, #16
 8000f6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f72:	fb00 f50e 	mul.w	r5, r0, lr
 8000f76:	428d      	cmp	r5, r1
 8000f78:	fa04 f403 	lsl.w	r4, r4, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x258>
 8000f7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f82:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f86:	d22f      	bcs.n	8000fe8 <__udivmoddi4+0x2b0>
 8000f88:	428d      	cmp	r5, r1
 8000f8a:	d92d      	bls.n	8000fe8 <__udivmoddi4+0x2b0>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1b49      	subs	r1, r1, r5
 8000f92:	b292      	uxth	r2, r2
 8000f94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f98:	fb07 1115 	mls	r1, r7, r5, r1
 8000f9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa4:	4291      	cmp	r1, r2
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x282>
 8000fa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fb0:	d216      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000fb2:	4291      	cmp	r1, r2
 8000fb4:	d914      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000fb6:	3d02      	subs	r5, #2
 8000fb8:	4462      	add	r2, ip
 8000fba:	1a52      	subs	r2, r2, r1
 8000fbc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fc0:	e738      	b.n	8000e34 <__udivmoddi4+0xfc>
 8000fc2:	4631      	mov	r1, r6
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	e708      	b.n	8000dda <__udivmoddi4+0xa2>
 8000fc8:	4639      	mov	r1, r7
 8000fca:	e6e6      	b.n	8000d9a <__udivmoddi4+0x62>
 8000fcc:	4610      	mov	r0, r2
 8000fce:	e6fb      	b.n	8000dc8 <__udivmoddi4+0x90>
 8000fd0:	4548      	cmp	r0, r9
 8000fd2:	d2a9      	bcs.n	8000f28 <__udivmoddi4+0x1f0>
 8000fd4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	e7a3      	b.n	8000f28 <__udivmoddi4+0x1f0>
 8000fe0:	4645      	mov	r5, r8
 8000fe2:	e7ea      	b.n	8000fba <__udivmoddi4+0x282>
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	e794      	b.n	8000f12 <__udivmoddi4+0x1da>
 8000fe8:	4640      	mov	r0, r8
 8000fea:	e7d1      	b.n	8000f90 <__udivmoddi4+0x258>
 8000fec:	46d0      	mov	r8, sl
 8000fee:	e77b      	b.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ff0:	3d02      	subs	r5, #2
 8000ff2:	4462      	add	r2, ip
 8000ff4:	e732      	b.n	8000e5c <__udivmoddi4+0x124>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e70a      	b.n	8000e10 <__udivmoddi4+0xd8>
 8000ffa:	4464      	add	r4, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e742      	b.n	8000e86 <__udivmoddi4+0x14e>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <UART_Transmit_Messages_BlackBox>:

extern UART_HandleTypeDef huart1;


void UART_Transmit_Messages_BlackBox(const char* str)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff f92f 	bl	8000270 <strlen>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <UART_Transmit_Messages_BlackBox+0x28>)
 800101e:	f008 fec2 	bl	8009da6 <HAL_UART_Transmit>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20004878 	.word	0x20004878

08001030 <file_exists>:



bool file_exists(const char* filename) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    FILINFO fno;
    FRESULT result = f_stat(filename, &fno);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4619      	mov	r1, r3
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f00c fa12 	bl	800d468 <f_stat>
 8001044:	4603      	mov	r3, r0
 8001046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    return result == FR_OK && !(fno.fattrib & AM_DIR);
 800104a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <file_exists+0x30>
 8001052:	7d3b      	ldrb	r3, [r7, #20]
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <file_exists+0x30>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <file_exists+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <buf_clear>:
	while(*buf++ != '\0') i++;
	return i;

}

void buf_clear(void){
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++ ){
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	e007      	b.n	800108c <buf_clear+0x1c>
		data_buffer[i] = '\0';
 800107c:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <buf_clear+0x34>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++ ){
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3301      	adds	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001092:	dbf3      	blt.n	800107c <buf_clear+0xc>
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20002aec 	.word	0x20002aec

080010a8 <mount_sd_card>:


void mount_sd_card(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "",0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	490a      	ldr	r1, [pc, #40]	; (80010d8 <mount_sd_card+0x30>)
 80010b0:	480a      	ldr	r0, [pc, #40]	; (80010dc <mount_sd_card+0x34>)
 80010b2:	f00b fd27 	bl	800cb04 <f_mount>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <mount_sd_card+0x38>)
 80010bc:	701a      	strb	r2, [r3, #0]
	//UART_Transmit_Messages_BlackBox(fresultStrings[fresult]);
	if(fresult != FR_OK)
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <mount_sd_card+0x38>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <mount_sd_card+0x26>
	{
		UART_Transmit_Messages_BlackBox("*               Error mounting the SD Card              *\r\n");
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <mount_sd_card+0x3c>)
 80010c8:	f7ff ff9c 	bl	8001004 <UART_Transmit_Messages_BlackBox>
	} else {
		UART_Transmit_Messages_BlackBox("*              SD Card mounted successfully!            *\r\n");
	}
}
 80010cc:	e002      	b.n	80010d4 <mount_sd_card+0x2c>
		UART_Transmit_Messages_BlackBox("*              SD Card mounted successfully!            *\r\n");
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <mount_sd_card+0x40>)
 80010d0:	f7ff ff98 	bl	8001004 <UART_Transmit_Messages_BlackBox>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	0801e74c 	.word	0x0801e74c
 80010dc:	20000a80 	.word	0x20000a80
 80010e0:	20002ae8 	.word	0x20002ae8
 80010e4:	0801e750 	.word	0x0801e750
 80010e8:	0801e78c 	.word	0x0801e78c

080010ec <check_free_space>:
}




void check_free_space() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
    f_getfree("", &fre_clust, &pfs);
 80010f2:	4a38      	ldr	r2, [pc, #224]	; (80011d4 <check_free_space+0xe8>)
 80010f4:	4938      	ldr	r1, [pc, #224]	; (80011d8 <check_free_space+0xec>)
 80010f6:	4839      	ldr	r0, [pc, #228]	; (80011dc <check_free_space+0xf0>)
 80010f8:	f00c f9f6 	bl	800d4e8 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80010fc:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <check_free_space+0xe8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	3b02      	subs	r3, #2
 8001104:	4a33      	ldr	r2, [pc, #204]	; (80011d4 <check_free_space+0xe8>)
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	8952      	ldrh	r2, [r2, #10]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa02 	bl	8000518 <__aeabi_ui2d>
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <check_free_space+0xf4>)
 800111a:	f7ff fa77 	bl	800060c <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fd49 	bl	8000bbc <__aeabi_d2uiz>
 800112a:	4603      	mov	r3, r0
 800112c:	4a2d      	ldr	r2, [pc, #180]	; (80011e4 <check_free_space+0xf8>)
 800112e:	6013      	str	r3, [r2, #0]
    float total_GB = (float)total / (1024.0 * 1024.0);
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <check_free_space+0xf8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800113c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80011e8 <check_free_space+0xfc>
 8001140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001144:	edc7 7a01 	vstr	s15, [r7, #4]
    sprintf(data_buffer, "*              SD CARD Total Size: \t%.2f GB        *\r\n", total_GB);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fa07 	bl	800055c <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4926      	ldr	r1, [pc, #152]	; (80011ec <check_free_space+0x100>)
 8001154:	4826      	ldr	r0, [pc, #152]	; (80011f0 <check_free_space+0x104>)
 8001156:	f017 ff11 	bl	8018f7c <siprintf>

    UART_Transmit_Messages_BlackBox(data_buffer);
 800115a:	4825      	ldr	r0, [pc, #148]	; (80011f0 <check_free_space+0x104>)
 800115c:	f7ff ff52 	bl	8001004 <UART_Transmit_Messages_BlackBox>
    buf_clear();
 8001160:	f7ff ff86 	bl	8001070 <buf_clear>

    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <check_free_space+0xe8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	895b      	ldrh	r3, [r3, #10]
 800116a:	461a      	mov	r2, r3
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <check_free_space+0xec>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9cf 	bl	8000518 <__aeabi_ui2d>
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <check_free_space+0xf4>)
 8001180:	f7ff fa44 	bl	800060c <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fd16 	bl	8000bbc <__aeabi_d2uiz>
 8001190:	4603      	mov	r3, r0
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <check_free_space+0x108>)
 8001194:	6013      	str	r3, [r2, #0]
    float free_space_GB = (float)free_space / (1024.0 * 1024.0);
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <check_free_space+0x108>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011a2:	eddf 6a11 	vldr	s13, [pc, #68]	; 80011e8 <check_free_space+0xfc>
 80011a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011aa:	edc7 7a00 	vstr	s15, [r7]
    sprintf(data_buffer, "*              SD CARD Free Space: \t%.2f GB        *\r\n", free_space_GB);
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f7ff f9d4 	bl	800055c <__aeabi_f2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	490f      	ldr	r1, [pc, #60]	; (80011f8 <check_free_space+0x10c>)
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <check_free_space+0x104>)
 80011bc:	f017 fede 	bl	8018f7c <siprintf>
    UART_Transmit_Messages_BlackBox(data_buffer);
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <check_free_space+0x104>)
 80011c2:	f7ff ff1f 	bl	8001004 <UART_Transmit_Messages_BlackBox>
	UART_Transmit_Messages_BlackBox("*********************************************************\r\n");
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <check_free_space+0x110>)
 80011c8:	f7ff ff1c 	bl	8001004 <UART_Transmit_Messages_BlackBox>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20002eec 	.word	0x20002eec
 80011d8:	20002ef0 	.word	0x20002ef0
 80011dc:	0801e74c 	.word	0x0801e74c
 80011e0:	3fe00000 	.word	0x3fe00000
 80011e4:	20002ef4 	.word	0x20002ef4
 80011e8:	49800000 	.word	0x49800000
 80011ec:	0801e838 	.word	0x0801e838
 80011f0:	20002aec 	.word	0x20002aec
 80011f4:	20002ef8 	.word	0x20002ef8
 80011f8:	0801e870 	.word	0x0801e870
 80011fc:	0801e8a8 	.word	0x0801e8a8

08001200 <create_file>:





void create_file(const char* filename) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b09c      	sub	sp, #112	; 0x70
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    // Open file to write OR create it if it does not exist
    fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001208:	220b      	movs	r2, #11
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4811      	ldr	r0, [pc, #68]	; (8001254 <create_file+0x54>)
 800120e:	f00b fcdd 	bl	800cbcc <f_open>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <create_file+0x58>)
 8001218:	701a      	strb	r2, [r3, #0]
    char err[100];

    if (fresult == FR_OK) {
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <create_file+0x58>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <create_file+0x30>
        UART_Transmit_Messages_BlackBox("File created successfully! \r\n");
 8001222:	480e      	ldr	r0, [pc, #56]	; (800125c <create_file+0x5c>)
 8001224:	f7ff feee 	bl	8001004 <UART_Transmit_Messages_BlackBox>
        f_close(&fil);
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <create_file+0x54>)
 800122a:	f00c f8ee 	bl	800d40a <f_close>
    } else {
    	sprintf(err,"Error creating the file:  %d \r\n", fresult);
        UART_Transmit_Messages_BlackBox(err);
    }
}
 800122e:	e00d      	b.n	800124c <create_file+0x4c>
    	sprintf(err,"Error creating the file:  %d \r\n", fresult);
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <create_file+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	4909      	ldr	r1, [pc, #36]	; (8001260 <create_file+0x60>)
 800123c:	4618      	mov	r0, r3
 800123e:	f017 fe9d 	bl	8018f7c <siprintf>
        UART_Transmit_Messages_BlackBox(err);
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fedc 	bl	8001004 <UART_Transmit_Messages_BlackBox>
}
 800124c:	bf00      	nop
 800124e:	3770      	adds	r7, #112	; 0x70
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20001ab8 	.word	0x20001ab8
 8001258:	20002ae8 	.word	0x20002ae8
 800125c:	0801e8e4 	.word	0x0801e8e4
 8001260:	0801e904 	.word	0x0801e904

08001264 <append_data_to_file>:

void append_data_to_file(const char* filename, const char* data) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
    if (file_exists(filename)) {
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fede 	bl	8001030 <file_exists>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d009      	beq.n	800128e <append_data_to_file+0x2a>
        // Open file to append data at the end
        fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800127a:	2233      	movs	r2, #51	; 0x33
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	482d      	ldr	r0, [pc, #180]	; (8001334 <append_data_to_file+0xd0>)
 8001280:	f00b fca4 	bl	800cbcc <f_open>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <append_data_to_file+0xd4>)
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	e00b      	b.n	80012a6 <append_data_to_file+0x42>
    } else {
    	create_file(filename);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffb6 	bl	8001200 <create_file>
        // Open file to write OR create it if it does not exist
        fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001294:	220b      	movs	r2, #11
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4826      	ldr	r0, [pc, #152]	; (8001334 <append_data_to_file+0xd0>)
 800129a:	f00b fc97 	bl	800cbcc <f_open>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <append_data_to_file+0xd4>)
 80012a4:	701a      	strb	r2, [r3, #0]
    }

    if (fresult == FR_OK) {
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <append_data_to_file+0xd4>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d13b      	bne.n	8001326 <append_data_to_file+0xc2>
        // Write data to the file
        UINT bytes_written;
        fresult = f_write(&fil, data, strlen(data), &bytes_written);
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f7fe ffde 	bl	8000270 <strlen>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	481d      	ldr	r0, [pc, #116]	; (8001334 <append_data_to_file+0xd0>)
 80012be:	f00b fe58 	bl	800cf72 <f_write>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <append_data_to_file+0xd4>)
 80012c8:	701a      	strb	r2, [r3, #0]

        if (fresult == FR_OK && bytes_written == strlen(data)) {
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <append_data_to_file+0xd4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10a      	bne.n	80012e8 <append_data_to_file+0x84>
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7fe ffcc 	bl	8000270 <strlen>
 80012d8:	4602      	mov	r2, r0
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d103      	bne.n	80012e8 <append_data_to_file+0x84>
            //UART_Transmit_Messages_BlackBox("Data written to the file successfully! \r\n");
            // Synchronize file information with the disk
            f_sync(&fil);
 80012e0:	4814      	ldr	r0, [pc, #80]	; (8001334 <append_data_to_file+0xd0>)
 80012e2:	f00c f809 	bl	800d2f8 <f_sync>
 80012e6:	e01a      	b.n	800131e <append_data_to_file+0xba>
        } else {
            if (fresult != FR_OK) {
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <append_data_to_file+0xd4>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00a      	beq.n	8001306 <append_data_to_file+0xa2>
                sprintf(data_buffer, "Error writing data to the file. Error code: %d \r\n", fresult);
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <append_data_to_file+0xd4>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4911      	ldr	r1, [pc, #68]	; (800133c <append_data_to_file+0xd8>)
 80012f8:	4811      	ldr	r0, [pc, #68]	; (8001340 <append_data_to_file+0xdc>)
 80012fa:	f017 fe3f 	bl	8018f7c <siprintf>
                UART_Transmit_Messages_BlackBox(data_buffer);
 80012fe:	4810      	ldr	r0, [pc, #64]	; (8001340 <append_data_to_file+0xdc>)
 8001300:	f7ff fe80 	bl	8001004 <UART_Transmit_Messages_BlackBox>
 8001304:	e00b      	b.n	800131e <append_data_to_file+0xba>
            } else {
                sprintf(data_buffer, "Error: Incorrect number of bytes written. Expected: %d, Actual: %d \r\n",
 8001306:	6838      	ldr	r0, [r7, #0]
 8001308:	f7fe ffb2 	bl	8000270 <strlen>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <append_data_to_file+0xe0>)
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <append_data_to_file+0xdc>)
 8001314:	f017 fe32 	bl	8018f7c <siprintf>
                        strlen(data), bytes_written);
                UART_Transmit_Messages_BlackBox(data_buffer);
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <append_data_to_file+0xdc>)
 800131a:	f7ff fe73 	bl	8001004 <UART_Transmit_Messages_BlackBox>
            }
        }

        // Close file
        f_close(&fil);
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <append_data_to_file+0xd0>)
 8001320:	f00c f873 	bl	800d40a <f_close>
    } else {
        UART_Transmit_Messages_BlackBox("Error opening the file for writing. \r\n");
    }
}
 8001324:	e002      	b.n	800132c <append_data_to_file+0xc8>
        UART_Transmit_Messages_BlackBox("Error opening the file for writing. \r\n");
 8001326:	4808      	ldr	r0, [pc, #32]	; (8001348 <append_data_to_file+0xe4>)
 8001328:	f7ff fe6c 	bl	8001004 <UART_Transmit_Messages_BlackBox>
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20001ab8 	.word	0x20001ab8
 8001338:	20002ae8 	.word	0x20002ae8
 800133c:	0801e924 	.word	0x0801e924
 8001340:	20002aec 	.word	0x20002aec
 8001344:	0801e958 	.word	0x0801e958
 8001348:	0801e9a0 	.word	0x0801e9a0

0800134c <QMC_init>:



//###############################################################################################################
uint32_t QMC_init(I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af04      	add	r7, sp, #16
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	uint8_t array[2];
	magneto_sensor.i2c=i2c;
 8001358:	4a33      	ldr	r2, [pc, #204]	; (8001428 <QMC_init+0xdc>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
	magneto_sensor.Control_Register=0x11;
 800135e:	4b32      	ldr	r3, [pc, #200]	; (8001428 <QMC_init+0xdc>)
 8001360:	2211      	movs	r2, #17
 8001362:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 8001364:	2301      	movs	r3, #1
 8001366:	733b      	strb	r3, [r7, #12]
	array[1]=magneto_sensor.Control_Register;
 8001368:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <QMC_init+0xdc>)
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	737b      	strb	r3, [r7, #13]

	if(Output_Data_Rate==200)magneto_sensor.Control_Register|=0b00001100;
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	2bc8      	cmp	r3, #200	; 0xc8
 8001372:	d107      	bne.n	8001384 <QMC_init+0x38>
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <QMC_init+0xdc>)
 8001376:	791b      	ldrb	r3, [r3, #4]
 8001378:	f043 030c 	orr.w	r3, r3, #12
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <QMC_init+0xdc>)
 8001380:	711a      	strb	r2, [r3, #4]
 8001382:	e024      	b.n	80013ce <QMC_init+0x82>
	else if(Output_Data_Rate==100)magneto_sensor.Control_Register|=0b00001000;
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d107      	bne.n	800139a <QMC_init+0x4e>
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <QMC_init+0xdc>)
 800138c:	791b      	ldrb	r3, [r3, #4]
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <QMC_init+0xdc>)
 8001396:	711a      	strb	r2, [r3, #4]
 8001398:	e019      	b.n	80013ce <QMC_init+0x82>
	else if(Output_Data_Rate==50)magneto_sensor.Control_Register|=0b00000100;
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	2b32      	cmp	r3, #50	; 0x32
 800139e:	d107      	bne.n	80013b0 <QMC_init+0x64>
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <QMC_init+0xdc>)
 80013a2:	791b      	ldrb	r3, [r3, #4]
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <QMC_init+0xdc>)
 80013ac:	711a      	strb	r2, [r3, #4]
 80013ae:	e00e      	b.n	80013ce <QMC_init+0x82>
	else if(Output_Data_Rate==10)magneto_sensor.Control_Register|=0b00000000;
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b0a      	cmp	r3, #10
 80013b4:	d104      	bne.n	80013c0 <QMC_init+0x74>
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <QMC_init+0xdc>)
 80013b8:	791a      	ldrb	r2, [r3, #4]
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <QMC_init+0xdc>)
 80013bc:	711a      	strb	r2, [r3, #4]
 80013be:	e006      	b.n	80013ce <QMC_init+0x82>
	else magneto_sensor.Control_Register|=0b00001100;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <QMC_init+0xdc>)
 80013c2:	791b      	ldrb	r3, [r3, #4]
 80013c4:	f043 030c 	orr.w	r3, r3, #12
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <QMC_init+0xdc>)
 80013cc:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <QMC_init+0xdc>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2364      	movs	r3, #100	; 0x64
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	220b      	movs	r2, #11
 80013e4:	211a      	movs	r1, #26
 80013e6:	f005 fcc7 	bl	8006d78 <HAL_I2C_Mem_Write>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <QMC_init+0xa8>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e014      	b.n	800141e <QMC_init+0xd2>
	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <QMC_init+0xdc>)
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	2364      	movs	r3, #100	; 0x64
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2301      	movs	r3, #1
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	3301      	adds	r3, #1
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	2209      	movs	r2, #9
 800140c:	211a      	movs	r1, #26
 800140e:	f005 fcb3 	bl	8006d78 <HAL_I2C_Mem_Write>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <QMC_init+0xd0>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <QMC_init+0xd2>

	return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20002efc 	.word	0x20002efc
 800142c:	00000000 	.word	0x00000000

08001430 <QMC_read>:

uint8_t QMC_read()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af04      	add	r7, sp, #16
	  magneto_sensor.datas[0]=0;
 8001436:	4b4c      	ldr	r3, [pc, #304]	; (8001568 <QMC_read+0x138>)
 8001438:	2200      	movs	r2, #0
 800143a:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x06, 1, magneto_sensor.datas, 1, 100);
 800143c:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <QMC_read+0x138>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	2364      	movs	r3, #100	; 0x64
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	4b48      	ldr	r3, [pc, #288]	; (800156c <QMC_read+0x13c>)
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	2206      	movs	r2, #6
 8001450:	211a      	movs	r1, #26
 8001452:	f005 fd8b 	bl	8006f6c <HAL_I2C_Mem_Read>

	  if((magneto_sensor.datas[0]&0x01)==1)
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <QMC_read+0x138>)
 8001458:	795b      	ldrb	r3, [r3, #5]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d075      	beq.n	800154e <QMC_read+0x11e>
	  {
		  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x00, 1, magneto_sensor.datas, 6, 100);
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <QMC_read+0x138>)
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	2364      	movs	r3, #100	; 0x64
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	2306      	movs	r3, #6
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <QMC_read+0x13c>)
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2301      	movs	r3, #1
 8001474:	2200      	movs	r2, #0
 8001476:	211a      	movs	r1, #26
 8001478:	f005 fd78 	bl	8006f6c <HAL_I2C_Mem_Read>
		  magneto_sensor.Xaxis= (magneto_sensor.datas[1]<<8) | magneto_sensor.datas[0];
 800147c:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <QMC_read+0x138>)
 800147e:	799b      	ldrb	r3, [r3, #6]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	b21a      	sxth	r2, r3
 8001484:	4b38      	ldr	r3, [pc, #224]	; (8001568 <QMC_read+0x138>)
 8001486:	795b      	ldrb	r3, [r3, #5]
 8001488:	b21b      	sxth	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <QMC_read+0x138>)
 8001490:	819a      	strh	r2, [r3, #12]
		  magneto_sensor.Yaxis= (magneto_sensor.datas[3]<<8) | magneto_sensor.datas[2];
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <QMC_read+0x138>)
 8001494:	7a1b      	ldrb	r3, [r3, #8]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <QMC_read+0x138>)
 800149c:	79db      	ldrb	r3, [r3, #7]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b30      	ldr	r3, [pc, #192]	; (8001568 <QMC_read+0x138>)
 80014a6:	81da      	strh	r2, [r3, #14]
		  magneto_sensor.Zaxis= (magneto_sensor.datas[5]<<8) | magneto_sensor.datas[4];
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <QMC_read+0x138>)
 80014aa:	7a9b      	ldrb	r3, [r3, #10]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <QMC_read+0x138>)
 80014b2:	7a5b      	ldrb	r3, [r3, #9]
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <QMC_read+0x138>)
 80014bc:	821a      	strh	r2, [r3, #16]

		  magneto_sensor.compas=atan2f(magneto_sensor.Yaxis,magneto_sensor.Xaxis)*180.00/M_PI;
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <QMC_read+0x138>)
 80014c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <QMC_read+0x138>)
 80014ce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014d2:	ee07 3a10 	vmov	s14, r3
 80014d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014da:	eef0 0a47 	vmov.f32	s1, s14
 80014de:	eeb0 0a67 	vmov.f32	s0, s15
 80014e2:	f01b fb21 	bl	801cb28 <atan2f>
 80014e6:	ee10 3a10 	vmov	r3, s0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f836 	bl	800055c <__aeabi_f2d>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <QMC_read+0x140>)
 80014f6:	f7ff f889 	bl	800060c <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a317      	add	r3, pc, #92	; (adr r3, 8001560 <QMC_read+0x130>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f9aa 	bl	8000860 <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb72 	bl	8000bfc <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <QMC_read+0x138>)
 800151c:	6193      	str	r3, [r2, #24]

		  if(magneto_sensor.compas>0)
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <QMC_read+0x138>)
 8001520:	edd3 7a06 	vldr	s15, [r3, #24]
 8001524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	dd04      	ble.n	8001538 <QMC_read+0x108>
		  {
			  magneto_sensor.heading= magneto_sensor.compas;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <QMC_read+0x138>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <QMC_read+0x138>)
 8001534:	6153      	str	r3, [r2, #20]
 8001536:	e00c      	b.n	8001552 <QMC_read+0x122>
		  }
		  else
		  {
			  magneto_sensor.heading=360+magneto_sensor.compas;
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <QMC_read+0x138>)
 800153a:	edd3 7a06 	vldr	s15, [r3, #24]
 800153e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001574 <QMC_read+0x144>
 8001542:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <QMC_read+0x138>)
 8001548:	edc3 7a05 	vstr	s15, [r3, #20]
 800154c:	e001      	b.n	8001552 <QMC_read+0x122>
		  }
	  }
	  else
	  {
		  return 1;
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <QMC_read+0x124>
	  }
return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	f3af 8000 	nop.w
 8001560:	54442d18 	.word	0x54442d18
 8001564:	400921fb 	.word	0x400921fb
 8001568:	20002efc 	.word	0x20002efc
 800156c:	20002f01 	.word	0x20002f01
 8001570:	40668000 	.word	0x40668000
 8001574:	43b40000 	.word	0x43b40000

08001578 <Transmit_Compass_Data>:
}




CompassData Transmit_Compass_Data(){
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]


		if(QMC_read() == 0)
 8001580:	f7ff ff56 	bl	8001430 <QMC_read>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 8082 	bne.w	8001690 <Transmit_Compass_Data+0x118>
		{
			float heading = magneto_sensor.heading;
 800158c:	4b4e      	ldr	r3, [pc, #312]	; (80016c8 <Transmit_Compass_Data+0x150>)
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	61fb      	str	r3, [r7, #28]


	        // Calculate magDecRad based on your requirements
			double calculatedMagDecRad = heading * (M_PI / 180.0);
 8001592:	69f8      	ldr	r0, [r7, #28]
 8001594:	f7fe ffe2 	bl	800055c <__aeabi_f2d>
 8001598:	a349      	add	r3, pc, #292	; (adr r3, 80016c0 <Transmit_Compass_Data+0x148>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7ff f835 	bl	800060c <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	e9c7 2304 	strd	r2, r3, [r7, #16]


			//Compas_Value=magneto_sensor.heading;
			//char mag_buffer[100];
			compass_data.mag_unit_x = (double)magneto_sensor.Xaxis;
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <Transmit_Compass_Data+0x150>)
 80015ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffc1 	bl	8000538 <__aeabi_i2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4944      	ldr	r1, [pc, #272]	; (80016cc <Transmit_Compass_Data+0x154>)
 80015bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
			compass_data.mag_unit_y = (double)magneto_sensor.Yaxis;
 80015c0:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <Transmit_Compass_Data+0x150>)
 80015c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffb6 	bl	8000538 <__aeabi_i2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	493e      	ldr	r1, [pc, #248]	; (80016cc <Transmit_Compass_Data+0x154>)
 80015d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
			compass_data.mag_unit_z = (double)magneto_sensor.Zaxis;
 80015d6:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <Transmit_Compass_Data+0x150>)
 80015d8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffab 	bl	8000538 <__aeabi_i2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4939      	ldr	r1, [pc, #228]	; (80016cc <Transmit_Compass_Data+0x154>)
 80015e8:	e9c1 2308 	strd	r2, r3, [r1, #32]
			//sprintf(mag_buffer, "X=%d, Y=%d, Z=%d \r\n", magneto_sensor.Xaxis, magneto_sensor.Yaxis, magneto_sensor.Zaxis);
			//sprintf(mag_heading_buffer, "HEADING : %.1f\r\n",magneto_sensor.heading);
			//UART_Transmit_Messages_Magnetometer(mag_buffer);
			//UART_Transmit_Messages_Magnetometer(mag_heading_buffer);

	        const int numDirections = sizeof(directions) / sizeof(directions[0]);
 80015ec:	2309      	movs	r3, #9
 80015ee:	60fb      	str	r3, [r7, #12]
	        const char* direction = "Unknown";
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <Transmit_Compass_Data+0x158>)
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24

	        for (int i = 0; i < numDirections; ++i) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
 80015f8:	e02e      	b.n	8001658 <Transmit_Compass_Data+0xe0>
	            if (heading >= directions[i].min && heading <= directions[i].max) {
 80015fa:	4936      	ldr	r1, [pc, #216]	; (80016d4 <Transmit_Compass_Data+0x15c>)
 80015fc:	6a3a      	ldr	r2, [r7, #32]
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	db1b      	blt.n	8001652 <Transmit_Compass_Data+0xda>
 800161a:	492e      	ldr	r1, [pc, #184]	; (80016d4 <Transmit_Compass_Data+0x15c>)
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3304      	adds	r3, #4
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	d80a      	bhi.n	8001652 <Transmit_Compass_Data+0xda>
	                direction = directions[i].direction;
 800163c:	4925      	ldr	r1, [pc, #148]	; (80016d4 <Transmit_Compass_Data+0x15c>)
 800163e:	6a3a      	ldr	r2, [r7, #32]
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	3308      	adds	r3, #8
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
	                break;
 8001650:	e006      	b.n	8001660 <Transmit_Compass_Data+0xe8>
	        for (int i = 0; i < numDirections; ++i) {
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	3301      	adds	r3, #1
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	6a3a      	ldr	r2, [r7, #32]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	dbcc      	blt.n	80015fa <Transmit_Compass_Data+0x82>
	            }
	        }

	        compass_data.heading = heading;
 8001660:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <Transmit_Compass_Data+0x154>)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	6013      	str	r3, [r2, #0]
	        compass_data.direction = direction;
 8001666:	4a19      	ldr	r2, [pc, #100]	; (80016cc <Transmit_Compass_Data+0x154>)
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	6293      	str	r3, [r2, #40]	; 0x28
	        compass_data.magDecRad = calculatedMagDecRad;
 800166c:	4917      	ldr	r1, [pc, #92]	; (80016cc <Transmit_Compass_Data+0x154>)
 800166e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001672:	e9c1 2302 	strd	r2, r3, [r1, #8]



	        return compass_data;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <Transmit_Compass_Data+0x154>)
 800167a:	461c      	mov	r4, r3
 800167c:	4615      	mov	r5, r2
 800167e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001686:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800168a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800168e:	e012      	b.n	80016b6 <Transmit_Compass_Data+0x13e>

		}
		else
		{
	        compass_data.heading = 0;
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <Transmit_Compass_Data+0x154>)
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
	        compass_data.direction = "ERR";
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <Transmit_Compass_Data+0x154>)
 800169a:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <Transmit_Compass_Data+0x160>)
 800169c:	629a      	str	r2, [r3, #40]	; 0x28

	        return compass_data;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <Transmit_Compass_Data+0x154>)
 80016a2:	461c      	mov	r4, r3
 80016a4:	4615      	mov	r5, r2
 80016a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}

}
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bdb0      	pop	{r4, r5, r7, pc}
 80016be:	bf00      	nop
 80016c0:	a2529d39 	.word	0xa2529d39
 80016c4:	3f91df46 	.word	0x3f91df46
 80016c8:	20002efc 	.word	0x20002efc
 80016cc:	20002f18 	.word	0x20002f18
 80016d0:	0801ea50 	.word	0x0801ea50
 80016d4:	0801f9a0 	.word	0x0801f9a0
 80016d8:	0801ea58 	.word	0x0801ea58

080016dc <UART_Transmit_String>:
	uint8_t all_reg_rx[8];
	struct LoRa_Handler LoraRX={0};
*/

void UART_Transmit_String(const char* str)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7fe fdc3 	bl	8000270 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <UART_Transmit_String+0x28>)
 80016f6:	f008 fb56 	bl	8009da6 <HAL_UART_Transmit>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20004878 	.word	0x20004878

08001708 <UART_Transmit_Logo>:


void UART_Transmit_Logo() {
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
    UART_Transmit_String("                                                                \r\n");
 800170c:	482d      	ldr	r0, [pc, #180]	; (80017c4 <UART_Transmit_Logo+0xbc>)
 800170e:	f7ff ffe5 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                                                                \r\n");
 8001712:	482c      	ldr	r0, [pc, #176]	; (80017c4 <UART_Transmit_Logo+0xbc>)
 8001714:	f7ff ffe2 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                            ,,								  \r\n");
 8001718:	482b      	ldr	r0, [pc, #172]	; (80017c8 <UART_Transmit_Logo+0xc0>)
 800171a:	f7ff ffdf 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                           ^B$~								  \r\n");
 800171e:	482b      	ldr	r0, [pc, #172]	; (80017cc <UART_Transmit_Logo+0xc4>)
 8001720:	f7ff ffdc 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                          '$$$$|								  \r\n");
 8001724:	482a      	ldr	r0, [pc, #168]	; (80017d0 <UART_Transmit_Logo+0xc8>)
 8001726:	f7ff ffd9 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                           ,$$$$/							      \r\n");
 800172a:	482a      	ldr	r0, [pc, #168]	; (80017d4 <UART_Transmit_Logo+0xcc>)
 800172c:	f7ff ffd6 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                            _$$$$j							  \r\n");
 8001730:	4829      	ldr	r0, [pc, #164]	; (80017d8 <UART_Transmit_Logo+0xd0>)
 8001732:	f7ff ffd3 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                             {$$$$v'							  \r\n");
 8001736:	4829      	ldr	r0, [pc, #164]	; (80017dc <UART_Transmit_Logo+0xd4>)
 8001738:	f7ff ffd0 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                              <$$$$8.						      \r\n");
 800173c:	4828      	ldr	r0, [pc, #160]	; (80017e0 <UART_Transmit_Logo+0xd8>)
 800173e:	f7ff ffcd 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                               i$$$$x						      \r\n");
 8001742:	4828      	ldr	r0, [pc, #160]	; (80017e4 <UART_Transmit_Logo+0xdc>)
 8001744:	f7ff ffca 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                    ,'          I$$$$'						  \r\n");
 8001748:	4827      	ldr	r0, [pc, #156]	; (80017e8 <UART_Transmit_Logo+0xe0>)
 800174a:	f7ff ffc7 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                   +$8`     |M`  %$$$n.						  \r\n");
 800174e:	4827      	ldr	r0, [pc, #156]	; (80017ec <UART_Transmit_Logo+0xe4>)
 8001750:	f7ff ffc4 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                  |$$$@.   1$$@`  'W$$$W'					      \r\n");
 8001754:	4826      	ldr	r0, [pc, #152]	; (80017f0 <UART_Transmit_Logo+0xe8>)
 8001756:	f7ff ffc1 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                 t$$$$:   '*}|[M   '&$$$8'				      \r\n");
 800175a:	4826      	ldr	r0, [pc, #152]	; (80017f4 <UART_Transmit_Logo+0xec>)
 800175c:	f7ff ffbe 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("               .u$$$$!    x8/fx$,   `@$$$%,					  \r\n");
 8001760:	4825      	ldr	r0, [pc, #148]	; (80017f8 <UART_Transmit_Logo+0xf0>)
 8001762:	f7ff ffbb 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("              '&$$$$+     $$$$$${    `%$$$$'					  \r\n");
 8001766:	4825      	ldr	r0, [pc, #148]	; (80017fc <UART_Transmit_Logo+0xf4>)
 8001768:	f7ff ffb8 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("             .8$$$$>      $$$$$$|     `8$$$&.				      \r\n");
 800176c:	4824      	ldr	r0, [pc, #144]	; (8001800 <UART_Transmit_Logo+0xf8>)
 800176e:	f7ff ffb5 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("             x$$$$l       $$$$$$}      '&$$$W'				  \r\n");
 8001772:	4824      	ldr	r0, [pc, #144]	; (8001804 <UART_Transmit_Logo+0xfc>)
 8001774:	f7ff ffb2 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("           .r$$$%'        #$$$$$:       .n$$$8^				  \r\n");
 8001778:	4823      	ldr	r0, [pc, #140]	; (8001808 <UART_Transmit_Logo+0x100>)
 800177a:	f7ff ffaf 	bl	80016dc <UART_Transmit_String>
 	UART_Transmit_String("          'M$$$&'       .t+$$$$@>].       /$$$$;				  \r\n");
 800177e:	4823      	ldr	r0, [pc, #140]	; (800180c <UART_Transmit_Logo+0x104>)
 8001780:	f7ff ffac 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("         '&$$$W'       ,$$,$$$$)f$W        x$$$$!			      \r\n");
 8001784:	4822      	ldr	r0, [pc, #136]	; (8001810 <UART_Transmit_Logo+0x108>)
 8001786:	f7ff ffa9 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("        '8$$$&.        !$$;t$$$`@$$        '8$$$$<			  \r\n");
 800178a:	4822      	ldr	r0, [pc, #136]	; (8001814 <UART_Transmit_Logo+0x10c>)
 800178c:	f7ff ffa6 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("       ,B$$$B`         !$$>.^;..$$$         'c$$$$1			  \r\n");
 8001790:	4821      	ldr	r0, [pc, #132]	; (8001818 <UART_Transmit_Logo+0x110>)
 8001792:	f7ff ffa3 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("      '$$$$%`          '+^. ^>  ':{           j$$$$-			  \r\n");
 8001796:	4821      	ldr	r0, [pc, #132]	; (800181c <UART_Transmit_Logo+0x114>)
 8001798:	f7ff ffa0 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("     .&$$$8'            .^' ^!  '`             t$$$$:		      \r\n");
 800179c:	4820      	ldr	r0, [pc, #128]	; (8001820 <UART_Transmit_Logo+0x118>)
 800179e:	f7ff ff9d 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("    'W$$$&'            '`   `;   .^             /$$$$I		  \r\n");
 80017a2:	4820      	ldr	r0, [pc, #128]	; (8001824 <UART_Transmit_Logo+0x11c>)
 80017a4:	f7ff ff9a 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("   ^8$$$n.                  `,                   +$$$$]		  \r\n");
 80017a8:	481f      	ldr	r0, [pc, #124]	; (8001828 <UART_Transmit_Logo+0x120>)
 80017aa:	f7ff ff97 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("  ;$$$$/                    .^                    ,$$$$j		  \r\n");
 80017ae:	481f      	ldr	r0, [pc, #124]	; (800182c <UART_Transmit_Logo+0x124>)
 80017b0:	f7ff ff94 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String(" !$$$$x                     .'                     _$$$$x.	  \r\n");
 80017b4:	481e      	ldr	r0, [pc, #120]	; (8001830 <UART_Transmit_Logo+0x128>)
 80017b6:	f7ff ff91 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String(" .....                       .                      .....	      \r\n");
 80017ba:	481e      	ldr	r0, [pc, #120]	; (8001834 <UART_Transmit_Logo+0x12c>)
 80017bc:	f7ff ff8e 	bl	80016dc <UART_Transmit_String>

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	0801ea5c 	.word	0x0801ea5c
 80017c8:	0801eaa0 	.word	0x0801eaa0
 80017cc:	0801eacc 	.word	0x0801eacc
 80017d0:	0801eaf8 	.word	0x0801eaf8
 80017d4:	0801eb28 	.word	0x0801eb28
 80017d8:	0801eb5c 	.word	0x0801eb5c
 80017dc:	0801eb8c 	.word	0x0801eb8c
 80017e0:	0801ebbc 	.word	0x0801ebbc
 80017e4:	0801ebf0 	.word	0x0801ebf0
 80017e8:	0801ec24 	.word	0x0801ec24
 80017ec:	0801ec58 	.word	0x0801ec58
 80017f0:	0801ec8c 	.word	0x0801ec8c
 80017f4:	0801ecc4 	.word	0x0801ecc4
 80017f8:	0801ecfc 	.word	0x0801ecfc
 80017fc:	0801ed34 	.word	0x0801ed34
 8001800:	0801ed6c 	.word	0x0801ed6c
 8001804:	0801eda8 	.word	0x0801eda8
 8001808:	0801ede0 	.word	0x0801ede0
 800180c:	0801ee18 	.word	0x0801ee18
 8001810:	0801ee54 	.word	0x0801ee54
 8001814:	0801ee94 	.word	0x0801ee94
 8001818:	0801eed0 	.word	0x0801eed0
 800181c:	0801ef0c 	.word	0x0801ef0c
 8001820:	0801ef48 	.word	0x0801ef48
 8001824:	0801ef88 	.word	0x0801ef88
 8001828:	0801efc8 	.word	0x0801efc8
 800182c:	0801f008 	.word	0x0801f008
 8001830:	0801f048 	.word	0x0801f048
 8001834:	0801f088 	.word	0x0801f088

08001838 <waitForStartCommand>:

//-------------------------   RTOS DEDICATED FUNCTIONS --------------------------------//


// Function to wait for the start command ('00$')
bool waitForStartCommand(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
    char inputBuffer[4] = {0}; // Buffer to store received command
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]

    // Read user input character by character until we encounter '$'
    for (int bufferIndex = 0; bufferIndex < 3; bufferIndex++) {
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	e00b      	b.n	8001860 <waitForStartCommand+0x28>
        HAL_UART_Receive(&huart1, (uint8_t *)&inputBuffer[bufferIndex], sizeof(char), HAL_MAX_DELAY);
 8001848:	463a      	mov	r2, r7
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	18d1      	adds	r1, r2, r3
 800184e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001852:	2201      	movs	r2, #1
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <waitForStartCommand+0x50>)
 8001856:	f008 fb38 	bl	8009eca <HAL_UART_Receive>
    for (int bufferIndex = 0; bufferIndex < 3; bufferIndex++) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3301      	adds	r3, #1
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	ddf0      	ble.n	8001848 <waitForStartCommand+0x10>
    }

    // Null-terminate the input buffer
    inputBuffer[3] = '\0';
 8001866:	2300      	movs	r3, #0
 8001868:	70fb      	strb	r3, [r7, #3]

    // Check if the received command is '00$'
    if (strcmp(inputBuffer, "00$") == 0) {
 800186a:	463b      	mov	r3, r7
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <waitForStartCommand+0x54>)
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fd06 	bl	8000280 <strcmp>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <waitForStartCommand+0x46>
        return true; // If '00$' is received, return true
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <waitForStartCommand+0x48>
    } else {
        return false; // If not received, return false
 800187e:	2300      	movs	r3, #0
    }
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20004878 	.word	0x20004878
 800188c:	0801f0cc 	.word	0x0801f0cc

08001890 <waitForUserInput>:



// Function to wait for user input
char waitForUserInput(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
    char userInput = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	71fb      	strb	r3, [r7, #7]

    // Wait for user input (single character)
    HAL_UART_Receive(&huart1, (uint8_t*)&userInput, 1, HAL_MAX_DELAY);
 800189a:	1df9      	adds	r1, r7, #7
 800189c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a0:	2201      	movs	r2, #1
 80018a2:	4804      	ldr	r0, [pc, #16]	; (80018b4 <waitForUserInput+0x24>)
 80018a4:	f008 fb11 	bl	8009eca <HAL_UART_Receive>

    // Return the received character
    return userInput;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20004878 	.word	0x20004878

080018b8 <printMenu>:



// Function to print the menu based on the current state
void printMenu(enum MenuState state) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b07      	cmp	r3, #7
 80018c6:	d84b      	bhi.n	8001960 <printMenu+0xa8>
 80018c8:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <printMenu+0x18>)
 80018ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ce:	bf00      	nop
 80018d0:	080018f1 	.word	0x080018f1
 80018d4:	08001929 	.word	0x08001929
 80018d8:	08001931 	.word	0x08001931
 80018dc:	08001939 	.word	0x08001939
 80018e0:	08001941 	.word	0x08001941
 80018e4:	08001949 	.word	0x08001949
 80018e8:	08001951 	.word	0x08001951
 80018ec:	08001959 	.word	0x08001959
        case MENU_MAIN:
        	UART_Transmit_String("\r\n");
 80018f0:	481e      	ldr	r0, [pc, #120]	; (800196c <printMenu+0xb4>)
 80018f2:	f7ff fef3 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("0 - Initialize Flight Computer\r\n");
 80018f6:	481e      	ldr	r0, [pc, #120]	; (8001970 <printMenu+0xb8>)
 80018f8:	f7ff fef0 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("1 - Read All Sensors\r\n");
 80018fc:	481d      	ldr	r0, [pc, #116]	; (8001974 <printMenu+0xbc>)
 80018fe:	f7ff feed 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("2 - LoRa Test (Sender)\r\n");
 8001902:	481d      	ldr	r0, [pc, #116]	; (8001978 <printMenu+0xc0>)
 8001904:	f7ff feea 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("3 - LoRa Test (Receiver)\r\n");
 8001908:	481c      	ldr	r0, [pc, #112]	; (800197c <printMenu+0xc4>)
 800190a:	f7ff fee7 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("4 - Execute Pyro Test (Ignition)\r\n");
 800190e:	481c      	ldr	r0, [pc, #112]	; (8001980 <printMenu+0xc8>)
 8001910:	f7ff fee4 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("5 - Execute Pyro Test (Parachute)\r\n");
 8001914:	481b      	ldr	r0, [pc, #108]	; (8001984 <printMenu+0xcc>)
 8001916:	f7ff fee1 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("6 - Launch Procedure\r\n");
 800191a:	481b      	ldr	r0, [pc, #108]	; (8001988 <printMenu+0xd0>)
 800191c:	f7ff fede 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("\r\n");
 8001920:	4812      	ldr	r0, [pc, #72]	; (800196c <printMenu+0xb4>)
 8001922:	f7ff fedb 	bl	80016dc <UART_Transmit_String>
            break;
 8001926:	e01c      	b.n	8001962 <printMenu+0xaa>
        case MENU_INIT:
            UART_Transmit_String("Initializing the Flight Controller...\r\n");
 8001928:	4818      	ldr	r0, [pc, #96]	; (800198c <printMenu+0xd4>)
 800192a:	f7ff fed7 	bl	80016dc <UART_Transmit_String>
            break;
 800192e:	e018      	b.n	8001962 <printMenu+0xaa>
        case MENU_SENSOR_READINGS:
            UART_Transmit_String("Reading Sensors...\r\n");
 8001930:	4817      	ldr	r0, [pc, #92]	; (8001990 <printMenu+0xd8>)
 8001932:	f7ff fed3 	bl	80016dc <UART_Transmit_String>
            break;
 8001936:	e014      	b.n	8001962 <printMenu+0xaa>
        case MENU_LORA_SEND:
            UART_Transmit_String("Running LoRa SENDING Test...\r\n");
 8001938:	4816      	ldr	r0, [pc, #88]	; (8001994 <printMenu+0xdc>)
 800193a:	f7ff fecf 	bl	80016dc <UART_Transmit_String>
            break;
 800193e:	e010      	b.n	8001962 <printMenu+0xaa>
        case MENU_LORA_RECEIVE:
            UART_Transmit_String("Running LoRa RECEIVING Test...\r\n");
 8001940:	4815      	ldr	r0, [pc, #84]	; (8001998 <printMenu+0xe0>)
 8001942:	f7ff fecb 	bl	80016dc <UART_Transmit_String>
            break;
 8001946:	e00c      	b.n	8001962 <printMenu+0xaa>
        case MENU_IGNITION:
            UART_Transmit_String("Starting Firing test (Ignition)...\r\n");
 8001948:	4814      	ldr	r0, [pc, #80]	; (800199c <printMenu+0xe4>)
 800194a:	f7ff fec7 	bl	80016dc <UART_Transmit_String>
            break;
 800194e:	e008      	b.n	8001962 <printMenu+0xaa>
        case MENU_PARACHUTE:
            UART_Transmit_String("Starting Firing test (Parachute)...\r\n");
 8001950:	4813      	ldr	r0, [pc, #76]	; (80019a0 <printMenu+0xe8>)
 8001952:	f7ff fec3 	bl	80016dc <UART_Transmit_String>
            break;
 8001956:	e004      	b.n	8001962 <printMenu+0xaa>
        case MENU_LAUNCH:
            UART_Transmit_String("Launching Procedure...\r\n");
 8001958:	4812      	ldr	r0, [pc, #72]	; (80019a4 <printMenu+0xec>)
 800195a:	f7ff febf 	bl	80016dc <UART_Transmit_String>
            break;
 800195e:	e000      	b.n	8001962 <printMenu+0xaa>
        default:
            break;
 8001960:	bf00      	nop
    }
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	0801f0d0 	.word	0x0801f0d0
 8001970:	0801f0d4 	.word	0x0801f0d4
 8001974:	0801f0f8 	.word	0x0801f0f8
 8001978:	0801f110 	.word	0x0801f110
 800197c:	0801f12c 	.word	0x0801f12c
 8001980:	0801f148 	.word	0x0801f148
 8001984:	0801f16c 	.word	0x0801f16c
 8001988:	0801f190 	.word	0x0801f190
 800198c:	0801f1a8 	.word	0x0801f1a8
 8001990:	0801f1d0 	.word	0x0801f1d0
 8001994:	0801f1e8 	.word	0x0801f1e8
 8001998:	0801f208 	.word	0x0801f208
 800199c:	0801f22c 	.word	0x0801f22c
 80019a0:	0801f254 	.word	0x0801f254
 80019a4:	0801f27c 	.word	0x0801f27c

080019a8 <handleUserInput>:



// Function to handle user input and change the current state
void handleUserInput(char command) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
    switch (command) {
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	3b30      	subs	r3, #48	; 0x30
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d82c      	bhi.n	8001a14 <handleUserInput+0x6c>
 80019ba:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <handleUserInput+0x18>)
 80019bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c0:	080019dd 	.word	0x080019dd
 80019c4:	080019e5 	.word	0x080019e5
 80019c8:	080019ed 	.word	0x080019ed
 80019cc:	080019f5 	.word	0x080019f5
 80019d0:	080019fd 	.word	0x080019fd
 80019d4:	08001a05 	.word	0x08001a05
 80019d8:	08001a0d 	.word	0x08001a0d
        case '0':
            currentMenuState = MENU_INIT;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <handleUserInput+0x7c>)
 80019de:	2201      	movs	r2, #1
 80019e0:	701a      	strb	r2, [r3, #0]
            break;
 80019e2:	e01b      	b.n	8001a1c <handleUserInput+0x74>
        case '1':
            currentMenuState = MENU_SENSOR_READINGS;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <handleUserInput+0x7c>)
 80019e6:	2202      	movs	r2, #2
 80019e8:	701a      	strb	r2, [r3, #0]
            break;
 80019ea:	e017      	b.n	8001a1c <handleUserInput+0x74>
        case '2':
            currentMenuState = MENU_LORA_SEND;
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <handleUserInput+0x7c>)
 80019ee:	2203      	movs	r2, #3
 80019f0:	701a      	strb	r2, [r3, #0]
            break;
 80019f2:	e013      	b.n	8001a1c <handleUserInput+0x74>
        case '3':
            currentMenuState = MENU_LORA_RECEIVE;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <handleUserInput+0x7c>)
 80019f6:	2204      	movs	r2, #4
 80019f8:	701a      	strb	r2, [r3, #0]
            break;
 80019fa:	e00f      	b.n	8001a1c <handleUserInput+0x74>
        case '4':
            currentMenuState = MENU_IGNITION;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <handleUserInput+0x7c>)
 80019fe:	2205      	movs	r2, #5
 8001a00:	701a      	strb	r2, [r3, #0]
            break;
 8001a02:	e00b      	b.n	8001a1c <handleUserInput+0x74>
        case '5':
            currentMenuState = MENU_PARACHUTE;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <handleUserInput+0x7c>)
 8001a06:	2206      	movs	r2, #6
 8001a08:	701a      	strb	r2, [r3, #0]
            break;
 8001a0a:	e007      	b.n	8001a1c <handleUserInput+0x74>
        case '6':
            currentMenuState = MENU_LAUNCH;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <handleUserInput+0x7c>)
 8001a0e:	2207      	movs	r2, #7
 8001a10:	701a      	strb	r2, [r3, #0]
            break;
 8001a12:	e003      	b.n	8001a1c <handleUserInput+0x74>
        default:
            UART_Transmit_String("Invalid command! Try again.\r\n");
 8001a14:	4804      	ldr	r0, [pc, #16]	; (8001a28 <handleUserInput+0x80>)
 8001a16:	f7ff fe61 	bl	80016dc <UART_Transmit_String>
            break;
 8001a1a:	bf00      	nop
    }
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20002f48 	.word	0x20002f48
 8001a28:	0801f298 	.word	0x0801f298

08001a2c <printIntroTitle>:
//-------------------------   END RTOS DEDICATED FUNCTIONS --------------------------------//



void printIntroTitle()
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	UART_Transmit_Logo();
 8001a30:	f7ff fe6a 	bl	8001708 <UART_Transmit_Logo>
    UART_Transmit_String("*********************************************************\r\n");
 8001a34:	4808      	ldr	r0, [pc, #32]	; (8001a58 <printIntroTitle+0x2c>)
 8001a36:	f7ff fe51 	bl	80016dc <UART_Transmit_String>
    UART_Transmit_String("*               AEROSENTINEL Flight OS                  *\r\n");
 8001a3a:	4808      	ldr	r0, [pc, #32]	; (8001a5c <printIntroTitle+0x30>)
 8001a3c:	f7ff fe4e 	bl	80016dc <UART_Transmit_String>
    UART_Transmit_String("*    A versatile flight control system for your rocket  *\r\n");
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <printIntroTitle+0x34>)
 8001a42:	f7ff fe4b 	bl	80016dc <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 8001a46:	4804      	ldr	r0, [pc, #16]	; (8001a58 <printIntroTitle+0x2c>)
 8001a48:	f7ff fe48 	bl	80016dc <UART_Transmit_String>
    mount_sd_card();
 8001a4c:	f7ff fb2c 	bl	80010a8 <mount_sd_card>
    check_free_space();
 8001a50:	f7ff fb4c 	bl	80010ec <check_free_space>


    //scanSingleUARTDevice(&huart1); // Checks for UART devices connected


}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	0801f2b8 	.word	0x0801f2b8
 8001a5c:	0801f2f4 	.word	0x0801f2f4
 8001a60:	0801f330 	.word	0x0801f330

08001a64 <main_lora_packet_receive>:

void main_lora_packet_receive(uint8_t* dataPacket, uint8_t size)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0be      	sub	sp, #248	; 0xf8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
	uint8_t loraPacket[MAX_DATA_PACKET_SIZE] = {0};
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	22ec      	movs	r2, #236	; 0xec
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f018 f9ff 	bl	8019e80 <memset>
	//Copy data to the main layer
	memcpy(&loraPacket, dataPacket, size);
 8001a82:	78fa      	ldrb	r2, [r7, #3]
 8001a84:	f107 0308 	add.w	r3, r7, #8
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f018 fa86 	bl	8019f9c <memcpy>
	// TODO: implement main layer packet handling
}
 8001a90:	bf00      	nop
 8001a92:	37f8      	adds	r7, #248	; 0xf8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_UART_TxCpltCallback>:
 * @brief 	UART data transmission complete callback over DMA
 *
 * @param 	huart	:	Pointer to the UART handler
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	//Change the TX line state to ready
	e22_lora_make_ready();
 8001aa0:	f001 fcca 	bl	8003438 <e22_lora_make_ready>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_UARTEx_RxEventCallback>:
 * @param 	huart	:	Pointer to the UART handler
 *
 * @param 	Size	:	Packet size received over UART
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
	e22_lora_reception_complete(Size);
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 fcc9 	bl	8003454 <e22_lora_reception_complete>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <main_e22_transceiverMode>:
 * @brief 	LoRa module transceiver mode selection.  when this mode is active, the module configuration can't be modified.
 *
 *
 */
void main_e22_transceiverMode(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	//M0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <main_e22_transceiverMode+0x20>)
 8001ad8:	f004 fca8 	bl	800642c <HAL_GPIO_WritePin>
	//M1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2102      	movs	r1, #2
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <main_e22_transceiverMode+0x20>)
 8001ae2:	f004 fca3 	bl	800642c <HAL_GPIO_WritePin>

}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40020000 	.word	0x40020000

08001af0 <main_e22_configurationMode>:
/**
 * @brief 	LoRa module config mode selection. when this mode is active, wireless communication is inactive.
 *
 */
void main_e22_configurationMode(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	//M0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <main_e22_configurationMode+0x20>)
 8001afc:	f004 fc96 	bl	800642c <HAL_GPIO_WritePin>
	//M1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001b00:	2201      	movs	r2, #1
 8001b02:	2102      	movs	r1, #2
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <main_e22_configurationMode+0x20>)
 8001b06:	f004 fc91 	bl	800642c <HAL_GPIO_WritePin>
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40020000 	.word	0x40020000

08001b14 <lora_transmit>:

void lora_transmit(){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0

	 const uint8_t packetSize = 4;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	72fb      	strb	r3, [r7, #11]

	 const uint8_t receiverAddress = 0x09;
 8001b1e:	2309      	movs	r3, #9
 8001b20:	72bb      	strb	r3, [r7, #10]

	 const uint8_t ComChannel = 0x12;
 8001b22:	2312      	movs	r3, #18
 8001b24:	727b      	strb	r3, [r7, #9]

	 uint8_t packet[5] = "ping";
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <lora_transmit+0x4c>)
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b2e:	6018      	str	r0, [r3, #0]
 8001b30:	3304      	adds	r3, #4
 8001b32:	7019      	strb	r1, [r3, #0]

	for(int i=0; i< 20; i++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	e00a      	b.n	8001b50 <lora_transmit+0x3c>
	{

		e22_lora_transnit(packet, packetSize, receiverAddress, ComChannel);
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	b299      	uxth	r1, r3
 8001b3e:	7abb      	ldrb	r3, [r7, #10]
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	7a7b      	ldrb	r3, [r7, #9]
 8001b44:	1d38      	adds	r0, r7, #4
 8001b46:	f001 fbe9 	bl	800331c <e22_lora_transnit>
	for(int i=0; i< 20; i++)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b13      	cmp	r3, #19
 8001b54:	ddf1      	ble.n	8001b3a <lora_transmit+0x26>

	}
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	0801f36c 	.word	0x0801f36c

08001b64 <initialization_procedure>:


int32_t initialization_procedure(){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b0d2      	sub	sp, #328	; 0x148
 8001b68:	af02      	add	r7, sp, #8


	  int32_t fc_initialization_state;


	  UART_Transmit_String("Starting initialization process.. \r\n");
 8001b6a:	482f      	ldr	r0, [pc, #188]	; (8001c28 <initialization_procedure+0xc4>)
 8001b6c:	f7ff fdb6 	bl	80016dc <UART_Transmit_String>
	  int32_t imu_init_state = IMU_Initialization();
 8001b70:	f000 fc08 	bl	8002384 <IMU_Initialization>
 8001b74:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	  char imu_buffer[100];

	  HAL_Delay(100);
 8001b78:	2064      	movs	r0, #100	; 0x64
 8001b7a:	f003 fe81 	bl	8005880 <HAL_Delay>

	  sprintf(imu_buffer, "IMU Initialization. Code : %ld  \r\n", imu_init_state);
 8001b7e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b82:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001b86:	4929      	ldr	r1, [pc, #164]	; (8001c2c <initialization_procedure+0xc8>)
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f017 f9f7 	bl	8018f7c <siprintf>
	  UART_Transmit_String(imu_buffer);
 8001b8e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fda2 	bl	80016dc <UART_Transmit_String>

	  HAL_Delay(100);
 8001b98:	2064      	movs	r0, #100	; 0x64
 8001b9a:	f003 fe71 	bl	8005880 <HAL_Delay>

	  int32_t pressure_init_state = Pressure_Init();
 8001b9e:	f000 fe13 	bl	80027c8 <Pressure_Init>
 8001ba2:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	  char pressure_buffer[100];
	  sprintf(pressure_buffer, "Pressure Initialization. Code : %ld  \r\n", pressure_init_state);
 8001ba6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001baa:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001bae:	4920      	ldr	r1, [pc, #128]	; (8001c30 <initialization_procedure+0xcc>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f017 f9e3 	bl	8018f7c <siprintf>
	  UART_Transmit_String(pressure_buffer);
 8001bb6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fd8e 	bl	80016dc <UART_Transmit_String>

	  HAL_Delay(100);
 8001bc0:	2064      	movs	r0, #100	; 0x64
 8001bc2:	f003 fe5d 	bl	8005880 <HAL_Delay>

	  int32_t magnetometer_init_state = QMC_init(&hi2c1, 200);
 8001bc6:	21c8      	movs	r1, #200	; 0xc8
 8001bc8:	481a      	ldr	r0, [pc, #104]	; (8001c34 <initialization_procedure+0xd0>)
 8001bca:	f7ff fbbf 	bl	800134c <QMC_init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  char magneto_buffer[100];
	  sprintf(magneto_buffer, "Magnetometer Initialization. Code : %ld  \r\n", magnetometer_init_state);
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001bda:	4917      	ldr	r1, [pc, #92]	; (8001c38 <initialization_procedure+0xd4>)
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f017 f9cd 	bl	8018f7c <siprintf>
	  UART_Transmit_String(magneto_buffer);
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fd79 	bl	80016dc <UART_Transmit_String>

	  HAL_Delay(100);
 8001bea:	2064      	movs	r0, #100	; 0x64
 8001bec:	f003 fe48 	bl	8005880 <HAL_Delay>


	  e22_lora_init(&huart6, HAL_UART_Transmit_DMA, HAL_UARTEx_ReceiveToIdle_DMA,main_lora_packet_receive,main_e22_configurationMode,main_e22_transceiverMode);
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <initialization_procedure+0xd8>)
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <initialization_procedure+0xdc>)
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <initialization_procedure+0xe0>)
 8001bfa:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <initialization_procedure+0xe4>)
 8001bfc:	4913      	ldr	r1, [pc, #76]	; (8001c4c <initialization_procedure+0xe8>)
 8001bfe:	4814      	ldr	r0, [pc, #80]	; (8001c50 <initialization_procedure+0xec>)
 8001c00:	f001 fb54 	bl	80032ac <e22_lora_init>





	  fc_initialization_state = imu_init_state + pressure_init_state + magnetometer_init_state;
 8001c04:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001c08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001c12:	4413      	add	r3, r2
 8001c14:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	  return fc_initialization_state;
 8001c18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	0801f374 	.word	0x0801f374
 8001c2c:	0801f39c 	.word	0x0801f39c
 8001c30:	0801f3c0 	.word	0x0801f3c0
 8001c34:	20004680 	.word	0x20004680
 8001c38:	0801f3e8 	.word	0x0801f3e8
 8001c3c:	08001acd 	.word	0x08001acd
 8001c40:	08001af1 	.word	0x08001af1
 8001c44:	08001a65 	.word	0x08001a65
 8001c48:	0800a10d 	.word	0x0800a10d
 8001c4c:	0800a011 	.word	0x0800a011
 8001c50:	20004944 	.word	0x20004944

08001c54 <sensors_readings>:


void sensors_readings() {
 8001c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c58:	b0d8      	sub	sp, #352	; 0x160
 8001c5a:	af0a      	add	r7, sp, #40	; 0x28
    // Call each sensor function and receive the data structures


    IMUData imu_data = IMU_Data_Read();
 8001c5c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 fc79 	bl	8002558 <IMU_Data_Read>
    TemperatureData temperature_data = Transmit_Temperature();
 8001c66:	f001 f9e7 	bl	8003038 <Transmit_Temperature>
 8001c6a:	eef0 7a40 	vmov.f32	s15, s0
 8001c6e:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
    PressureTempData pressure_temp_data = Transmit_Pressure_Temp_Data();
 8001c72:	f001 f91b 	bl	8002eac <Transmit_Pressure_Temp_Data>
 8001c76:	eeb0 7a40 	vmov.f32	s14, s0
 8001c7a:	eef0 7a60 	vmov.f32	s15, s1
 8001c7e:	ed87 7a42 	vstr	s14, [r7, #264]	; 0x108
 8001c82:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
    CompassData compass_data = Transmit_Compass_Data();
 8001c86:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fc74 	bl	8001578 <Transmit_Compass_Data>

    // Print the data for each sensor and append to the file
    char buffer[200];

    // Format IMU data into the buffer
    sprintf(buffer,"Roll=%.3f° | Pitch=%.3f° | Yaw=%.3f \r\n",imu_data.roll, imu_data.pitch, compass_data.heading);
 8001c90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc61 	bl	800055c <__aeabi_f2d>
 8001c9a:	4680      	mov	r8, r0
 8001c9c:	4689      	mov	r9, r1
 8001c9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc5a 	bl	800055c <__aeabi_f2d>
 8001ca8:	4604      	mov	r4, r0
 8001caa:	460d      	mov	r5, r1
 8001cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc53 	bl	800055c <__aeabi_f2d>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	f107 0010 	add.w	r0, r7, #16
 8001cbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cc2:	e9cd 4500 	strd	r4, r5, [sp]
 8001cc6:	4642      	mov	r2, r8
 8001cc8:	464b      	mov	r3, r9
 8001cca:	494d      	ldr	r1, [pc, #308]	; (8001e00 <sensors_readings+0x1ac>)
 8001ccc:	f017 f956 	bl	8018f7c <siprintf>
    UART_Transmit_String(buffer);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fd01 	bl	80016dc <UART_Transmit_String>

	sprintf(buffer, "IMU Data: \n"
		"Acceleration (X=%.3f g, Y=%.3f g, Z=%.3f g), \r\n"
		"Angular Rate (X=%4.2f dps, Y=%4.2f dps, Z=%4.2f dps), \r\n", // Note the '\r' to return to the beginning of the line
		imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
	sprintf(buffer, "IMU Data: \n"
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc3c 	bl	800055c <__aeabi_f2d>
 8001ce4:	e9c7 0102 	strd	r0, r1, [r7, #8]
		imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001ce8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
	sprintf(buffer, "IMU Data: \n"
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc35 	bl	800055c <__aeabi_f2d>
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	460d      	mov	r5, r1
		imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
	sprintf(buffer, "IMU Data: \n"
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc2e 	bl	800055c <__aeabi_f2d>
 8001d00:	4680      	mov	r8, r0
 8001d02:	4689      	mov	r9, r1
		imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z);
 8001d04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
	sprintf(buffer, "IMU Data: \n"
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc27 	bl	800055c <__aeabi_f2d>
 8001d0e:	4682      	mov	sl, r0
 8001d10:	468b      	mov	fp, r1
		imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z);
 8001d12:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
	sprintf(buffer, "IMU Data: \n"
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc20 	bl	800055c <__aeabi_f2d>
 8001d1c:	e9c7 0100 	strd	r0, r1, [r7]
		imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z);
 8001d20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
	sprintf(buffer, "IMU Data: \n"
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fc19 	bl	800055c <__aeabi_f2d>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	f107 0010 	add.w	r0, r7, #16
 8001d32:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d36:	ed97 7b00 	vldr	d7, [r7]
 8001d3a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001d3e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001d42:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d46:	e9cd 4500 	strd	r4, r5, [sp]
 8001d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d4e:	492d      	ldr	r1, [pc, #180]	; (8001e04 <sensors_readings+0x1b0>)
 8001d50:	f017 f914 	bl	8018f7c <siprintf>
    UART_Transmit_String(buffer);
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fcbf 	bl	80016dc <UART_Transmit_String>
    append_data_to_file("data.txt", buffer);
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	4619      	mov	r1, r3
 8001d64:	4828      	ldr	r0, [pc, #160]	; (8001e08 <sensors_readings+0x1b4>)
 8001d66:	f7ff fa7d 	bl	8001264 <append_data_to_file>

    // Concatenate temperature data to buffer
    sprintf(buffer, "Temperature: %.2f°C \r\n", temperature_data.temperature_celsius/100);
 8001d6a:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8001d6e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001e0c <sensors_readings+0x1b8>
 8001d72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d76:	ee16 0a90 	vmov	r0, s13
 8001d7a:	f7fe fbef 	bl	800055c <__aeabi_f2d>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	f107 0010 	add.w	r0, r7, #16
 8001d86:	4922      	ldr	r1, [pc, #136]	; (8001e10 <sensors_readings+0x1bc>)
 8001d88:	f017 f8f8 	bl	8018f7c <siprintf>
    UART_Transmit_String(buffer);
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fca3 	bl	80016dc <UART_Transmit_String>
    append_data_to_file("data.txt", buffer);
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	481a      	ldr	r0, [pc, #104]	; (8001e08 <sensors_readings+0x1b4>)
 8001d9e:	f7ff fa61 	bl	8001264 <append_data_to_file>

    // Concatenate pressure and temperature data to buffer
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
            pressure_temp_data.pressure_hpa, pressure_temp_data.temperature_celsius);
 8001da2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fbd8 	bl	800055c <__aeabi_f2d>
 8001dac:	4604      	mov	r4, r0
 8001dae:	460d      	mov	r5, r1
            pressure_temp_data.pressure_hpa, pressure_temp_data.temperature_celsius);
 8001db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbd1 	bl	800055c <__aeabi_f2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	f107 0010 	add.w	r0, r7, #16
 8001dc2:	e9cd 2300 	strd	r2, r3, [sp]
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	462b      	mov	r3, r5
 8001dca:	4912      	ldr	r1, [pc, #72]	; (8001e14 <sensors_readings+0x1c0>)
 8001dcc:	f017 f8d6 	bl	8018f7c <siprintf>
    UART_Transmit_String(buffer);
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fc81 	bl	80016dc <UART_Transmit_String>
    append_data_to_file("data.txt", buffer);
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	4619      	mov	r1, r3
 8001de0:	4809      	ldr	r0, [pc, #36]	; (8001e08 <sensors_readings+0x1b4>)
 8001de2:	f7ff fa3f 	bl	8001264 <append_data_to_file>
    // Concatenate compass data to buffer
    //sprintf(buffer, "HEADING (YAW): %.1f\r\n", compass_data.heading);
    //UART_Transmit_String(buffer);
    //append_data_to_file("data.txt", buffer);

    UART_Transmit_String("------------------------------------------------------ \r\n");
 8001de6:	480c      	ldr	r0, [pc, #48]	; (8001e18 <sensors_readings+0x1c4>)
 8001de8:	f7ff fc78 	bl	80016dc <UART_Transmit_String>
    // Append the separator to the file
    append_data_to_file("data.txt", "------------------------------------------------------ \r\n");
 8001dec:	490a      	ldr	r1, [pc, #40]	; (8001e18 <sensors_readings+0x1c4>)
 8001dee:	4806      	ldr	r0, [pc, #24]	; (8001e08 <sensors_readings+0x1b4>)
 8001df0:	f7ff fa38 	bl	8001264 <append_data_to_file>
}
 8001df4:	bf00      	nop
 8001df6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e00:	0801f414 	.word	0x0801f414
 8001e04:	0801f440 	.word	0x0801f440
 8001e08:	0801f4b4 	.word	0x0801f4b4
 8001e0c:	42c80000 	.word	0x42c80000
 8001e10:	0801f4c0 	.word	0x0801f4c0
 8001e14:	0801f4d8 	.word	0x0801f4d8
 8001e18:	0801f508 	.word	0x0801f508

08001e1c <send_data_to_gcs>:




// Send data to Ground Control System Software
void send_data_to_gcs(int datatype, float value) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0b6      	sub	sp, #216	; 0xd8
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	ed87 0a00 	vstr	s0, [r7]
	// Print the data for each sensor and append to the file
	char gcs_buffer[200];


    // Print data in the specified format
    sprintf(gcs_buffer, "%d, %.2f;\r\n",
 8001e28:	6838      	ldr	r0, [r7, #0]
 8001e2a:	f7fe fb97 	bl	800055c <__aeabi_f2d>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	f107 0008 	add.w	r0, r7, #8
 8001e36:	e9cd 2300 	strd	r2, r3, [sp]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4907      	ldr	r1, [pc, #28]	; (8001e5c <send_data_to_gcs+0x40>)
 8001e3e:	f017 f89d 	bl	8018f7c <siprintf>
            datatype, value);

    UART_Transmit_String(gcs_buffer);
 8001e42:	f107 0308 	add.w	r3, r7, #8
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fc48 	bl	80016dc <UART_Transmit_String>

    HAL_Delay(15);
 8001e4c:	200f      	movs	r0, #15
 8001e4e:	f003 fd17 	bl	8005880 <HAL_Delay>


}
 8001e52:	bf00      	nop
 8001e54:	37d0      	adds	r7, #208	; 0xd0
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	0801f544 	.word	0x0801f544

08001e60 <sensors_readings_graphs>:

void sensors_readings_graphs() {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b098      	sub	sp, #96	; 0x60
 8001e64:	af00      	add	r7, sp, #0
    // Call each sensor function and receive the data structures
    IMUData imu_data = IMU_Data_Read();
 8001e66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fb74 	bl	8002558 <IMU_Data_Read>
    TemperatureData temperature_data = Transmit_Temperature();
 8001e70:	f001 f8e2 	bl	8003038 <Transmit_Temperature>
 8001e74:	eef0 7a40 	vmov.f32	s15, s0
 8001e78:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    PressureTempData pressure_temp_data = Transmit_Pressure_Temp_Data();
 8001e7c:	f001 f816 	bl	8002eac <Transmit_Pressure_Temp_Data>
 8001e80:	eeb0 7a40 	vmov.f32	s14, s0
 8001e84:	eef0 7a60 	vmov.f32	s15, s1
 8001e88:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001e8c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    CompassData compass_data = Transmit_Compass_Data();
 8001e90:	463b      	mov	r3, r7
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fb70 	bl	8001578 <Transmit_Compass_Data>


    // Print IMU data
    send_data_to_gcs(1, imu_data.acceleration_x);
 8001e98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff ffbb 	bl	8001e1c <send_data_to_gcs>
    send_data_to_gcs(2, imu_data.acceleration_y);
 8001ea6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001eae:	2002      	movs	r0, #2
 8001eb0:	f7ff ffb4 	bl	8001e1c <send_data_to_gcs>
    send_data_to_gcs(3, imu_data.acceleration_z);
 8001eb4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f7ff ffad 	bl	8001e1c <send_data_to_gcs>
    send_data_to_gcs(4, imu_data.angular_rate_x);
 8001ec2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eca:	2004      	movs	r0, #4
 8001ecc:	f7ff ffa6 	bl	8001e1c <send_data_to_gcs>
    send_data_to_gcs(5, imu_data.angular_rate_y);
 8001ed0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed8:	2005      	movs	r0, #5
 8001eda:	f7ff ff9f 	bl	8001e1c <send_data_to_gcs>
    send_data_to_gcs(6, imu_data.angular_rate_z);
 8001ede:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee6:	2006      	movs	r0, #6
 8001ee8:	f7ff ff98 	bl	8001e1c <send_data_to_gcs>

    //Print Roll and Pitch data
    send_data_to_gcs(7, imu_data.roll);
 8001eec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	2007      	movs	r0, #7
 8001ef6:	f7ff ff91 	bl	8001e1c <send_data_to_gcs>
    send_data_to_gcs(8, imu_data.pitch);
 8001efa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001efe:	eeb0 0a67 	vmov.f32	s0, s15
 8001f02:	2008      	movs	r0, #8
 8001f04:	f7ff ff8a 	bl	8001e1c <send_data_to_gcs>

    // Print temperature data
    send_data_to_gcs(9, temperature_data.temperature_celsius / 100);
 8001f08:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f0c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001f50 <sensors_readings_graphs+0xf0>
 8001f10:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f14:	eeb0 0a47 	vmov.f32	s0, s14
 8001f18:	2009      	movs	r0, #9
 8001f1a:	f7ff ff7f 	bl	8001e1c <send_data_to_gcs>

    // Print pressure and temperature data
    send_data_to_gcs(10, pressure_temp_data.pressure_hpa);
 8001f1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f22:	eeb0 0a67 	vmov.f32	s0, s15
 8001f26:	200a      	movs	r0, #10
 8001f28:	f7ff ff78 	bl	8001e1c <send_data_to_gcs>
    send_data_to_gcs(11, pressure_temp_data.temperature_celsius);
 8001f2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f30:	eeb0 0a67 	vmov.f32	s0, s15
 8001f34:	200b      	movs	r0, #11
 8001f36:	f7ff ff71 	bl	8001e1c <send_data_to_gcs>

    // Print compass data
    send_data_to_gcs(12, compass_data.heading);
 8001f3a:	edd7 7a00 	vldr	s15, [r7]
 8001f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f42:	200c      	movs	r0, #12
 8001f44:	f7ff ff6a 	bl	8001e1c <send_data_to_gcs>
}
 8001f48:	bf00      	nop
 8001f4a:	3760      	adds	r7, #96	; 0x60
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	42c80000 	.word	0x42c80000

08001f54 <menu>:




// Modify the menu function to use the current state
void menu(char command) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
    int transmission_delay = 50; // In Milliseconds
 8001f5e:	2332      	movs	r3, #50	; 0x32
 8001f60:	613b      	str	r3, [r7, #16]
    handleUserInput(command);
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fd1f 	bl	80019a8 <handleUserInput>
    switch (currentMenuState) {
 8001f6a:	4b5a      	ldr	r3, [pc, #360]	; (80020d4 <menu+0x180>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b07      	cmp	r3, #7
 8001f70:	f200 8098 	bhi.w	80020a4 <menu+0x150>
 8001f74:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <menu+0x28>)
 8001f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7a:	bf00      	nop
 8001f7c:	080020a5 	.word	0x080020a5
 8001f80:	08001f9d 	.word	0x08001f9d
 8001f84:	08001fc5 	.word	0x08001fc5
 8001f88:	08001ffb 	.word	0x08001ffb
 8001f8c:	08002001 	.word	0x08002001
 8001f90:	08002007 	.word	0x08002007
 8001f94:	0800204b 	.word	0x0800204b
 8001f98:	0800208f 	.word	0x0800208f
        case MENU_MAIN:

            break;
        case MENU_INIT:
            if (currentMenuState == MENU_INIT) {
 8001f9c:	4b4d      	ldr	r3, [pc, #308]	; (80020d4 <menu+0x180>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	f040 8081 	bne.w	80020a8 <menu+0x154>
                uint32_t initialization_state = initialization_procedure();
 8001fa6:	f7ff fddd 	bl	8001b64 <initialization_procedure>
 8001faa:	4603      	mov	r3, r0
 8001fac:	60bb      	str	r3, [r7, #8]
                if (initialization_state != 0) {
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <menu+0x68>
                    UART_Transmit_String("Error initializing the Flight Controller.\r\n");
 8001fb4:	4848      	ldr	r0, [pc, #288]	; (80020d8 <menu+0x184>)
 8001fb6:	f7ff fb91 	bl	80016dc <UART_Transmit_String>
                } else {
                    UART_Transmit_String("Flight Controller Initialized successfully!\r\n");
                }
            }
            break;
 8001fba:	e075      	b.n	80020a8 <menu+0x154>
                    UART_Transmit_String("Flight Controller Initialized successfully!\r\n");
 8001fbc:	4847      	ldr	r0, [pc, #284]	; (80020dc <menu+0x188>)
 8001fbe:	f7ff fb8d 	bl	80016dc <UART_Transmit_String>
            break;
 8001fc2:	e071      	b.n	80020a8 <menu+0x154>
        case MENU_SENSOR_READINGS:
            if (currentMenuState == MENU_SENSOR_READINGS) {
 8001fc4:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <menu+0x180>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d16f      	bne.n	80020ac <menu+0x158>
                uint32_t numIterations = getNumberOfIterations();
 8001fcc:	f000 f894 	bl	80020f8 <getNumberOfIterations>
 8001fd0:	60f8      	str	r0, [r7, #12]
                UART_Transmit_String("\r\n");
 8001fd2:	4843      	ldr	r0, [pc, #268]	; (80020e0 <menu+0x18c>)
 8001fd4:	f7ff fb82 	bl	80016dc <UART_Transmit_String>
                for (uint32_t i = 0; i < numIterations; i++) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e008      	b.n	8001ff0 <menu+0x9c>
                    sensors_readings();
 8001fde:	f7ff fe39 	bl	8001c54 <sensors_readings>
                    HAL_Delay(transmission_delay);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 fc4b 	bl	8005880 <HAL_Delay>
                for (uint32_t i = 0; i < numIterations; i++) {
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d3f2      	bcc.n	8001fde <menu+0x8a>
                }
            }
            break;
 8001ff8:	e058      	b.n	80020ac <menu+0x158>
        case MENU_LORA_SEND:
            lora_transmit();
 8001ffa:	f7ff fd8b 	bl	8001b14 <lora_transmit>
            break;
 8001ffe:	e05c      	b.n	80020ba <menu+0x166>
        case MENU_LORA_RECEIVE:
            e22_lora_manager();
 8002000:	f001 f9d0 	bl	80033a4 <e22_lora_manager>
            break;
 8002004:	e059      	b.n	80020ba <menu+0x166>
        case MENU_IGNITION:
            if (currentMenuState == MENU_IGNITION) {
 8002006:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <menu+0x180>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b05      	cmp	r3, #5
 800200c:	d150      	bne.n	80020b0 <menu+0x15c>
                UART_Transmit_String("\r\n");
 800200e:	4834      	ldr	r0, [pc, #208]	; (80020e0 <menu+0x18c>)
 8002010:	f7ff fb64 	bl	80016dc <UART_Transmit_String>
                UART_Transmit_String("Starting Firing test (Ignition)\r\n");
 8002014:	4833      	ldr	r0, [pc, #204]	; (80020e4 <menu+0x190>)
 8002016:	f7ff fb61 	bl	80016dc <UART_Transmit_String>
                UART_Transmit_String("Arming the igniter...");
 800201a:	4833      	ldr	r0, [pc, #204]	; (80020e8 <menu+0x194>)
 800201c:	f7ff fb5e 	bl	80016dc <UART_Transmit_String>
                pyro_arm(1);
 8002020:	2001      	movs	r0, #1
 8002022:	f000 ffab 	bl	8002f7c <pyro_arm>
                UART_Transmit_String("Armed\r\n");
 8002026:	4831      	ldr	r0, [pc, #196]	; (80020ec <menu+0x198>)
 8002028:	f7ff fb58 	bl	80016dc <UART_Transmit_String>
                count_down_sequence_fire_test(5000);
 800202c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002030:	f000 f8f8 	bl	8002224 <count_down_sequence_fire_test>
                pyro_fire(1);
 8002034:	2001      	movs	r0, #1
 8002036:	f000 ffbf 	bl	8002fb8 <pyro_fire>
                UART_Transmit_String("Test Completed Successfully!\r\n");
 800203a:	482d      	ldr	r0, [pc, #180]	; (80020f0 <menu+0x19c>)
 800203c:	f7ff fb4e 	bl	80016dc <UART_Transmit_String>
                HAL_Delay(1000);
 8002040:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002044:	f003 fc1c 	bl	8005880 <HAL_Delay>
            }
            break;
 8002048:	e032      	b.n	80020b0 <menu+0x15c>
        case MENU_PARACHUTE:
            if (currentMenuState == MENU_PARACHUTE) {
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <menu+0x180>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b06      	cmp	r3, #6
 8002050:	d130      	bne.n	80020b4 <menu+0x160>
                UART_Transmit_String("\r\n");
 8002052:	4823      	ldr	r0, [pc, #140]	; (80020e0 <menu+0x18c>)
 8002054:	f7ff fb42 	bl	80016dc <UART_Transmit_String>
                UART_Transmit_String("Starting Firing test (Parachute)\r\n");
 8002058:	4826      	ldr	r0, [pc, #152]	; (80020f4 <menu+0x1a0>)
 800205a:	f7ff fb3f 	bl	80016dc <UART_Transmit_String>
                UART_Transmit_String("Arming the igniter...");
 800205e:	4822      	ldr	r0, [pc, #136]	; (80020e8 <menu+0x194>)
 8002060:	f7ff fb3c 	bl	80016dc <UART_Transmit_String>
                pyro_arm(2);
 8002064:	2002      	movs	r0, #2
 8002066:	f000 ff89 	bl	8002f7c <pyro_arm>
                UART_Transmit_String("Armed\r\n");
 800206a:	4820      	ldr	r0, [pc, #128]	; (80020ec <menu+0x198>)
 800206c:	f7ff fb36 	bl	80016dc <UART_Transmit_String>
                count_down_sequence_fire_test(5000);
 8002070:	f241 3088 	movw	r0, #5000	; 0x1388
 8002074:	f000 f8d6 	bl	8002224 <count_down_sequence_fire_test>
                pyro_fire(2);
 8002078:	2002      	movs	r0, #2
 800207a:	f000 ff9d 	bl	8002fb8 <pyro_fire>
                UART_Transmit_String("Test Completed Successfully!\r\n");
 800207e:	481c      	ldr	r0, [pc, #112]	; (80020f0 <menu+0x19c>)
 8002080:	f7ff fb2c 	bl	80016dc <UART_Transmit_String>
                HAL_Delay(1000);
 8002084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002088:	f003 fbfa 	bl	8005880 <HAL_Delay>
            }
            break;
 800208c:	e012      	b.n	80020b4 <menu+0x160>
        case MENU_LAUNCH:
            if (currentMenuState == MENU_LAUNCH) {
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <menu+0x180>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b07      	cmp	r3, #7
 8002094:	d110      	bne.n	80020b8 <menu+0x164>
                launch_procedure(10000);
 8002096:	f242 7010 	movw	r0, #10000	; 0x2710
 800209a:	f000 f85b 	bl	8002154 <launch_procedure>
                while (1) {
                    sensors_readings_graphs();
 800209e:	f7ff fedf 	bl	8001e60 <sensors_readings_graphs>
 80020a2:	e7fc      	b.n	800209e <menu+0x14a>
                }

            }
            break;
        default:
            break;
 80020a4:	bf00      	nop
 80020a6:	e008      	b.n	80020ba <menu+0x166>
            break;
 80020a8:	bf00      	nop
 80020aa:	e006      	b.n	80020ba <menu+0x166>
            break;
 80020ac:	bf00      	nop
 80020ae:	e004      	b.n	80020ba <menu+0x166>
            break;
 80020b0:	bf00      	nop
 80020b2:	e002      	b.n	80020ba <menu+0x166>
            break;
 80020b4:	bf00      	nop
 80020b6:	e000      	b.n	80020ba <menu+0x166>
            break;
 80020b8:	bf00      	nop
    }

    currentMenuState = MENU_MAIN; // Return to the main menu
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <menu+0x180>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
    printMenu(currentMenuState);
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <menu+0x180>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fbf7 	bl	80018b8 <printMenu>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20002f48 	.word	0x20002f48
 80020d8:	0801f550 	.word	0x0801f550
 80020dc:	0801f57c 	.word	0x0801f57c
 80020e0:	0801f0d0 	.word	0x0801f0d0
 80020e4:	0801f5ac 	.word	0x0801f5ac
 80020e8:	0801f5d0 	.word	0x0801f5d0
 80020ec:	0801f5e8 	.word	0x0801f5e8
 80020f0:	0801f5f0 	.word	0x0801f5f0
 80020f4:	0801f610 	.word	0x0801f610

080020f8 <getNumberOfIterations>:



// Function to get the number of iterations from the user
uint32_t getNumberOfIterations()
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
    char inputBuffer[10];
    char inputChar;
    int bufferIndex = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]

    // Ask for the number of iterations
    UART_Transmit_String("\r\nEnter the number of iterations[Finish the integer with '$']: ");
 8002102:	4812      	ldr	r0, [pc, #72]	; (800214c <getNumberOfIterations+0x54>)
 8002104:	f7ff faea 	bl	80016dc <UART_Transmit_String>

    // Read user input character by character until we encounter '\n'
    do
    {
        HAL_UART_Receive(&huart1, (uint8_t *)&inputChar, sizeof(inputChar), HAL_MAX_DELAY);
 8002108:	1cf9      	adds	r1, r7, #3
 800210a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800210e:	2201      	movs	r2, #1
 8002110:	480f      	ldr	r0, [pc, #60]	; (8002150 <getNumberOfIterations+0x58>)
 8002112:	f007 feda 	bl	8009eca <HAL_UART_Receive>
        inputBuffer[bufferIndex++] = inputChar;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	617a      	str	r2, [r7, #20]
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	3318      	adds	r3, #24
 8002120:	443b      	add	r3, r7
 8002122:	f803 2c14 	strb.w	r2, [r3, #-20]
    } while (inputChar != '$');
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	2b24      	cmp	r3, #36	; 0x24
 800212a:	d1ed      	bne.n	8002108 <getNumberOfIterations+0x10>

    // Null-terminate the input buffer
    inputBuffer[bufferIndex] = '\0';
 800212c:	1d3a      	adds	r2, r7, #4
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	4413      	add	r3, r2
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]

    // Convert the input string to an integer using atoi
    int userInput = atoi(inputBuffer);
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	4618      	mov	r0, r3
 800213a:	f016 f8a5 	bl	8018288 <atoi>
 800213e:	6138      	str	r0, [r7, #16]

    return userInput;
 8002140:	693b      	ldr	r3, [r7, #16]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	0801f634 	.word	0x0801f634
 8002150:	20004878 	.word	0x20004878

08002154 <launch_procedure>:


void launch_procedure(int countdown_duration_ms) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

	UART_Transmit_String("Launch procedure starting.... \r\n");
 800215c:	482d      	ldr	r0, [pc, #180]	; (8002214 <launch_procedure+0xc0>)
 800215e:	f7ff fabd 	bl	80016dc <UART_Transmit_String>

    int count_down_print = countdown_duration_ms / 1000;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2c      	ldr	r2, [pc, #176]	; (8002218 <launch_procedure+0xc4>)
 8002166:	fb82 1203 	smull	r1, r2, r2, r3
 800216a:	1192      	asrs	r2, r2, #6
 800216c:	17db      	asrs	r3, r3, #31
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	61fb      	str	r3, [r7, #28]

    // Calculate the number of SysTick ticks required for the countdown
    uint32_t ticks_start = HAL_GetTick();
 8002172:	f003 fb79 	bl	8005868 <HAL_GetTick>
 8002176:	61b8      	str	r0, [r7, #24]
    uint32_t ticks_end = ticks_start + countdown_duration_ms;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4413      	add	r3, r2
 800217e:	617b      	str	r3, [r7, #20]

    char count_down_str[5]; // Buffer to store the countdown value as a string

    // Loop until the countdown duration is over
    while (HAL_GetTick() < ticks_end) {
 8002180:	e029      	b.n	80021d6 <launch_procedure+0x82>
    	if(count_down_print <= (countdown_duration_ms / 1000)) {
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a24      	ldr	r2, [pc, #144]	; (8002218 <launch_procedure+0xc4>)
 8002186:	fb82 1203 	smull	r1, r2, r2, r3
 800218a:	1192      	asrs	r2, r2, #6
 800218c:	17db      	asrs	r3, r3, #31
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	429a      	cmp	r2, r3
 8002194:	dc1c      	bgt.n	80021d0 <launch_procedure+0x7c>
        // Toggle the buzzer (set the GPIO pin high and then low with a delay to produce sound)
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002196:	2201      	movs	r2, #1
 8002198:	2120      	movs	r1, #32
 800219a:	4820      	ldr	r0, [pc, #128]	; (800221c <launch_procedure+0xc8>)
 800219c:	f004 f946 	bl	800642c <HAL_GPIO_WritePin>

        // Convert the countdown value to a string
        sprintf(count_down_str, "%d...", count_down_print);
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	69fa      	ldr	r2, [r7, #28]
 80021a6:	491e      	ldr	r1, [pc, #120]	; (8002220 <launch_procedure+0xcc>)
 80021a8:	4618      	mov	r0, r3
 80021aa:	f016 fee7 	bl	8018f7c <siprintf>

        // Transmit the countdown value via UART
        UART_Transmit_String(count_down_str);
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fa92 	bl	80016dc <UART_Transmit_String>

        HAL_Delay(200); // Delay for 200 milliseconds (adjust the value as needed)
 80021b8:	20c8      	movs	r0, #200	; 0xc8
 80021ba:	f003 fb61 	bl	8005880 <HAL_Delay>

        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	2120      	movs	r1, #32
 80021c2:	4816      	ldr	r0, [pc, #88]	; (800221c <launch_procedure+0xc8>)
 80021c4:	f004 f932 	bl	800642c <HAL_GPIO_WritePin>
        HAL_Delay(800); // Delay for 800 milliseconds (adjust the value as needed)
 80021c8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80021cc:	f003 fb58 	bl	8005880 <HAL_Delay>
    	}
        count_down_print--;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	61fb      	str	r3, [r7, #28]
    while (HAL_GetTick() < ticks_end) {
 80021d6:	f003 fb47 	bl	8005868 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	4293      	cmp	r3, r2
 80021e0:	d8cf      	bhi.n	8002182 <launch_procedure+0x2e>
    }

    pyro_arm(1);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f000 feca 	bl	8002f7c <pyro_arm>
    // Enable the buzzer at the end of the countdown (Launching the test!!!)
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80021e8:	2201      	movs	r2, #1
 80021ea:	2120      	movs	r1, #32
 80021ec:	480b      	ldr	r0, [pc, #44]	; (800221c <launch_procedure+0xc8>)
 80021ee:	f004 f91d 	bl	800642c <HAL_GPIO_WritePin>
    pyro_fire(1);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f000 fee0 	bl	8002fb8 <pyro_fire>
    HAL_Delay(800);
 80021f8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80021fc:	f003 fb40 	bl	8005880 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	2120      	movs	r1, #32
 8002204:	4805      	ldr	r0, [pc, #20]	; (800221c <launch_procedure+0xc8>)
 8002206:	f004 f911 	bl	800642c <HAL_GPIO_WritePin>

}
 800220a:	bf00      	nop
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	0801f674 	.word	0x0801f674
 8002218:	10624dd3 	.word	0x10624dd3
 800221c:	40020800 	.word	0x40020800
 8002220:	0801f698 	.word	0x0801f698

08002224 <count_down_sequence_fire_test>:


void count_down_sequence_fire_test(int countdown_duration_ms) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

    int count_down_print = countdown_duration_ms / 1000;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a23      	ldr	r2, [pc, #140]	; (80022bc <count_down_sequence_fire_test+0x98>)
 8002230:	fb82 1203 	smull	r1, r2, r2, r3
 8002234:	1192      	asrs	r2, r2, #6
 8002236:	17db      	asrs	r3, r3, #31
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	61fb      	str	r3, [r7, #28]

    // Calculate the number of SysTick ticks required for the countdown
    uint32_t ticks_start = HAL_GetTick();
 800223c:	f003 fb14 	bl	8005868 <HAL_GetTick>
 8002240:	61b8      	str	r0, [r7, #24]
    uint32_t ticks_end = ticks_start + countdown_duration_ms;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4413      	add	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

    char count_down_str[5]; // Buffer to store the countdown value as a string

    // Loop until the countdown duration is over
    while (HAL_GetTick() < ticks_end) {
 800224a:	e01f      	b.n	800228c <count_down_sequence_fire_test+0x68>
        // Toggle the buzzer (set the GPIO pin high and then low with a delay to produce sound)
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800224c:	2201      	movs	r2, #1
 800224e:	2120      	movs	r1, #32
 8002250:	481b      	ldr	r0, [pc, #108]	; (80022c0 <count_down_sequence_fire_test+0x9c>)
 8002252:	f004 f8eb 	bl	800642c <HAL_GPIO_WritePin>

        // Convert the countdown value to a string
        sprintf(count_down_str, "%d...", count_down_print);
 8002256:	f107 030c 	add.w	r3, r7, #12
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	4919      	ldr	r1, [pc, #100]	; (80022c4 <count_down_sequence_fire_test+0xa0>)
 800225e:	4618      	mov	r0, r3
 8002260:	f016 fe8c 	bl	8018f7c <siprintf>

        // Transmit the countdown value via UART
        UART_Transmit_String(count_down_str);
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fa37 	bl	80016dc <UART_Transmit_String>

        HAL_Delay(200); // Delay for 200 milliseconds (adjust the value as needed)
 800226e:	20c8      	movs	r0, #200	; 0xc8
 8002270:	f003 fb06 	bl	8005880 <HAL_Delay>

        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	2120      	movs	r1, #32
 8002278:	4811      	ldr	r0, [pc, #68]	; (80022c0 <count_down_sequence_fire_test+0x9c>)
 800227a:	f004 f8d7 	bl	800642c <HAL_GPIO_WritePin>
        HAL_Delay(800); // Delay for 800 milliseconds (adjust the value as needed)
 800227e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002282:	f003 fafd 	bl	8005880 <HAL_Delay>
        count_down_print--;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b01      	subs	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
    while (HAL_GetTick() < ticks_end) {
 800228c:	f003 faec 	bl	8005868 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	4293      	cmp	r3, r2
 8002296:	d8d9      	bhi.n	800224c <count_down_sequence_fire_test+0x28>
    }

    // Enable the buzzer at the end of the countdown (Launching the test!!!)
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002298:	2201      	movs	r2, #1
 800229a:	2120      	movs	r1, #32
 800229c:	4808      	ldr	r0, [pc, #32]	; (80022c0 <count_down_sequence_fire_test+0x9c>)
 800229e:	f004 f8c5 	bl	800642c <HAL_GPIO_WritePin>
    HAL_Delay(800);
 80022a2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80022a6:	f003 faeb 	bl	8005880 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2120      	movs	r1, #32
 80022ae:	4804      	ldr	r0, [pc, #16]	; (80022c0 <count_down_sequence_fire_test+0x9c>)
 80022b0:	f004 f8bc 	bl	800642c <HAL_GPIO_WritePin>

}
 80022b4:	bf00      	nop
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	10624dd3 	.word	0x10624dd3
 80022c0:	40020800 	.word	0x40020800
 80022c4:	0801f698 	.word	0x0801f698

080022c8 <UART_Transmit_Messages_IMU>:
static uint8_t mfxstate[STATE_SIZE];


// TRASMIT MESSAGES VIA UART FUNCTION
void UART_Transmit_Messages_IMU(const char* str)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7fd ffcd 	bl	8000270 <strlen>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b29a      	uxth	r2, r3
 80022da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4803      	ldr	r0, [pc, #12]	; (80022f0 <UART_Transmit_Messages_IMU+0x28>)
 80022e2:	f007 fd60 	bl	8009da6 <HAL_UART_Transmit>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20004878 	.word	0x20004878

080022f4 <platform_read>:

// SENSOR READING FUNCTION DEFINITION
int32_t platform_read(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af04      	add	r7, sp, #16
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	461a      	mov	r2, r3
 8002300:	460b      	mov	r3, r1
 8002302:	72fb      	strb	r3, [r7, #11]
 8002304:	4613      	mov	r3, r2
 8002306:	813b      	strh	r3, [r7, #8]
  // Perform the I2C read operation using HAL_I2C_Mem_Read
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8002308:	7afb      	ldrb	r3, [r7, #11]
 800230a:	b29a      	uxth	r2, r3
 800230c:	2364      	movs	r3, #100	; 0x64
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	893b      	ldrh	r3, [r7, #8]
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2301      	movs	r3, #1
 800231a:	21d6      	movs	r1, #214	; 0xd6
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f004 fe25 	bl	8006f6c <HAL_I2C_Mem_Read>
 8002322:	4603      	mov	r3, r0
 8002324:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <platform_read+0x3c>
 800232c:	2300      	movs	r3, #0
 800232e:	e001      	b.n	8002334 <platform_read+0x40>
 8002330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <platform_write>:

// SENSOR WRITING FUNCTION DEFINITION
int32_t platform_write(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af04      	add	r7, sp, #16
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	461a      	mov	r2, r3
 8002348:	460b      	mov	r3, r1
 800234a:	72fb      	strb	r3, [r7, #11]
 800234c:	4613      	mov	r3, r2
 800234e:	813b      	strh	r3, [r7, #8]
  // Perform the I2C write operation using HAL_I2C_Mem_Write
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	b29a      	uxth	r2, r3
 8002354:	2364      	movs	r3, #100	; 0x64
 8002356:	9302      	str	r3, [sp, #8]
 8002358:	893b      	ldrh	r3, [r7, #8]
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2301      	movs	r3, #1
 8002362:	21d6      	movs	r1, #214	; 0xd6
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f004 fd07 	bl	8006d78 <HAL_I2C_Mem_Write>
 800236a:	4603      	mov	r3, r0
 800236c:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 800236e:	7dfb      	ldrb	r3, [r7, #23]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <platform_write+0x3c>
 8002374:	2300      	movs	r3, #0
 8002376:	e001      	b.n	800237c <platform_write+0x40>
 8002378:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <IMU_Initialization>:


// IMU INITIALIZATION FUNCTION
int32_t IMU_Initialization(){
 8002384:	b580      	push	{r7, lr}
 8002386:	b0a4      	sub	sp, #144	; 0x90
 8002388:	af00      	add	r7, sp, #0


	/* Initialize MEMS driver interface */
	device.write_reg = platform_write;
 800238a:	4b65      	ldr	r3, [pc, #404]	; (8002520 <IMU_Initialization+0x19c>)
 800238c:	4a65      	ldr	r2, [pc, #404]	; (8002524 <IMU_Initialization+0x1a0>)
 800238e:	601a      	str	r2, [r3, #0]
	device.read_reg = platform_read;
 8002390:	4b63      	ldr	r3, [pc, #396]	; (8002520 <IMU_Initialization+0x19c>)
 8002392:	4a65      	ldr	r2, [pc, #404]	; (8002528 <IMU_Initialization+0x1a4>)
 8002394:	605a      	str	r2, [r3, #4]
	device.handle = &hi2c1;
 8002396:	4b62      	ldr	r3, [pc, #392]	; (8002520 <IMU_Initialization+0x19c>)
 8002398:	4a64      	ldr	r2, [pc, #400]	; (800252c <IMU_Initialization+0x1a8>)
 800239a:	60da      	str	r2, [r3, #12]

	//char init_state_buffer[200];

	/* Check device ID */
	whoamI = 0;
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <IMU_Initialization+0x1ac>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
	lsm6ds3tr_c_device_id_get(&device, &whoamI);
 80023a2:	4963      	ldr	r1, [pc, #396]	; (8002530 <IMU_Initialization+0x1ac>)
 80023a4:	485e      	ldr	r0, [pc, #376]	; (8002520 <IMU_Initialization+0x19c>)
 80023a6:	f001 fef1 	bl	800418c <lsm6ds3tr_c_device_id_get>



	if ( whoamI != LSM6DS3TR_C_ID ) {
 80023aa:	4b61      	ldr	r3, [pc, #388]	; (8002530 <IMU_Initialization+0x1ac>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b6a      	cmp	r3, #106	; 0x6a
 80023b0:	d011      	beq.n	80023d6 <IMU_Initialization+0x52>
		char temp_buf[100];
		// Use sprintf to format the device ID into the buffer
		sprintf(temp_buf, "Device ID: 0x%02X | ", whoamI);
 80023b2:	4b5f      	ldr	r3, [pc, #380]	; (8002530 <IMU_Initialization+0x1ac>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	495e      	ldr	r1, [pc, #376]	; (8002534 <IMU_Initialization+0x1b0>)
 80023bc:	4618      	mov	r0, r3
 80023be:	f016 fddd 	bl	8018f7c <siprintf>
		UART_Transmit_Messages_IMU("ERROR: IMU MALFUNCTION | ");
 80023c2:	485d      	ldr	r0, [pc, #372]	; (8002538 <IMU_Initialization+0x1b4>)
 80023c4:	f7ff ff80 	bl	80022c8 <UART_Transmit_Messages_IMU>
		UART_Transmit_Messages_IMU(temp_buf);
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff7c 	bl	80022c8 <UART_Transmit_Messages_IMU>
		return -1;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d4:	e0a0      	b.n	8002518 <IMU_Initialization+0x194>
	}



	/* Restore default configuration */
	lsm6ds3tr_c_reset_set(&device, PROPERTY_ENABLE);
 80023d6:	2101      	movs	r1, #1
 80023d8:	4851      	ldr	r0, [pc, #324]	; (8002520 <IMU_Initialization+0x19c>)
 80023da:	f001 fee8 	bl	80041ae <lsm6ds3tr_c_reset_set>

	do {
    lsm6ds3tr_c_reset_get(&device, &rst);
 80023de:	4957      	ldr	r1, [pc, #348]	; (800253c <IMU_Initialization+0x1b8>)
 80023e0:	484f      	ldr	r0, [pc, #316]	; (8002520 <IMU_Initialization+0x19c>)
 80023e2:	f001 ff0a 	bl	80041fa <lsm6ds3tr_c_reset_get>
	} while (rst);
 80023e6:	4b55      	ldr	r3, [pc, #340]	; (800253c <IMU_Initialization+0x1b8>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f7      	bne.n	80023de <IMU_Initialization+0x5a>

	int32_t int_set,xl_fs,xl_dr,gy_fs,gy_dr,bdu,xl_fas,xl_lp,gy_bps,state;
	//int32_t dev_round_status,dev_round_mode;

	//Enabling I2C Communication
	int_set = lsm6ds3tr_c_i2c_interface_set(&device,LSM6DS3TR_C_I2C_ENABLE);
 80023ee:	2100      	movs	r1, #0
 80023f0:	484b      	ldr	r0, [pc, #300]	; (8002520 <IMU_Initialization+0x19c>)
 80023f2:	f001 ffe6 	bl	80043c2 <lsm6ds3tr_c_i2c_interface_set>
 80023f6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	  /* Enable Block Data Update */
	  bdu = lsm6ds3tr_c_block_data_update_set(&device, PROPERTY_ENABLE);
 80023fa:	2101      	movs	r1, #1
 80023fc:	4848      	ldr	r0, [pc, #288]	; (8002520 <IMU_Initialization+0x19c>)
 80023fe:	f001 fe09 	bl	8004014 <lsm6ds3tr_c_block_data_update_set>
 8002402:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  /* Set Output Data Rate */
	  xl_dr= lsm6ds3tr_c_xl_data_rate_set(&device, LSM6DS3TR_C_XL_ODR_833Hz);
 8002406:	2107      	movs	r1, #7
 8002408:	4845      	ldr	r0, [pc, #276]	; (8002520 <IMU_Initialization+0x19c>)
 800240a:	f001 fd91 	bl	8003f30 <lsm6ds3tr_c_xl_data_rate_set>
 800240e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  gy_dr= lsm6ds3tr_c_gy_data_rate_set(&device, LSM6DS3TR_C_GY_ODR_833Hz);
 8002412:	2107      	movs	r1, #7
 8002414:	4842      	ldr	r0, [pc, #264]	; (8002520 <IMU_Initialization+0x19c>)
 8002416:	f001 fdd7 	bl	8003fc8 <lsm6ds3tr_c_gy_data_rate_set>
 800241a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	  /* Set full scale */
	  xl_fs= lsm6ds3tr_c_xl_full_scale_set(&device, LSM6DS3TR_C_2g);
 800241e:	2100      	movs	r1, #0
 8002420:	483f      	ldr	r0, [pc, #252]	; (8002520 <IMU_Initialization+0x19c>)
 8002422:	f001 fd5f 	bl	8003ee4 <lsm6ds3tr_c_xl_full_scale_set>
 8002426:	67f8      	str	r0, [r7, #124]	; 0x7c
	  gy_fs= lsm6ds3tr_c_gy_full_scale_set(&device, LSM6DS3TR_C_500dps);
 8002428:	2102      	movs	r1, #2
 800242a:	483d      	ldr	r0, [pc, #244]	; (8002520 <IMU_Initialization+0x19c>)
 800242c:	f001 fda6 	bl	8003f7c <lsm6ds3tr_c_gy_full_scale_set>
 8002430:	67b8      	str	r0, [r7, #120]	; 0x78


	  /* Configure filtering chain(No aux interface) */
	  /* Accelerometer - analog filter */
	  xl_fas= lsm6ds3tr_c_xl_filter_analog_set(&device,
 8002432:	2101      	movs	r1, #1
 8002434:	483a      	ldr	r0, [pc, #232]	; (8002520 <IMU_Initialization+0x19c>)
 8002436:	f001 fef9 	bl	800422c <lsm6ds3tr_c_xl_filter_analog_set>
 800243a:	6778      	str	r0, [r7, #116]	; 0x74
	                                   LSM6DS3TR_C_XL_ANA_BW_400Hz);
	  /* Accelerometer - LPF1 path ( LPF2 not used )*/
	  //xl_lp = lsm6ds3tr_c_xl_lp1_bandwidth_set(&device, LSM6DS3TR_C_XL_LP1_ODR_DIV_4);
	  /* Accelerometer - LPF1 + LPF2 path */
	  xl_lp= lsm6ds3tr_c_xl_lp2_bandwidth_set(&device,LSM6DS3TR_C_XL_LOW_NOISE_LP_ODR_DIV_100);
 800243c:	2111      	movs	r1, #17
 800243e:	4838      	ldr	r0, [pc, #224]	; (8002520 <IMU_Initialization+0x19c>)
 8002440:	f001 ff1a 	bl	8004278 <lsm6ds3tr_c_xl_lp2_bandwidth_set>
 8002444:	6738      	str	r0, [r7, #112]	; 0x70
	  /* Accelerometer - High Pass / Slope path */
	  //lsm6ds3tr_c_xl_reference_mode_set(&device, PROPERTY_DISABLE);
	  //lsm6ds3tr_c_xl_hp_bandwidth_set(&device, LSM6DS3TR_C_XL_HP_ODR_DIV_100);
	  /* Gyroscope - filtering chain */
	  gy_bps= lsm6ds3tr_c_gy_band_pass_set(&device,
 8002446:	21a8      	movs	r1, #168	; 0xa8
 8002448:	4835      	ldr	r0, [pc, #212]	; (8002520 <IMU_Initialization+0x19c>)
 800244a:	f001 ff4c 	bl	80042e6 <lsm6ds3tr_c_gy_band_pass_set>
 800244e:	66f8      	str	r0, [r7, #108]	; 0x6c

	  //dev_round_status = lsm6ds3tr_c_rounding_on_status_set(&device,PROPERTY_ENABLE);
	  //dev_round_mode= lsm6ds3tr_c_rounding_mode_set(&device,LSM6DS3TR_C_ROUND_GY_XL);


		state = int_set + xl_fs + xl_dr + gy_fs + gy_dr + bdu + xl_fas + xl_lp + gy_bps;
 8002450:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002456:	441a      	add	r2, r3
 8002458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800245c:	441a      	add	r2, r3
 800245e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002460:	441a      	add	r2, r3
 8002462:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002466:	441a      	add	r2, r3
 8002468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800246c:	441a      	add	r2, r3
 800246e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002470:	441a      	add	r2, r3
 8002472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002474:	4413      	add	r3, r2
 8002476:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002478:	4413      	add	r3, r2
 800247a:	66bb      	str	r3, [r7, #104]	; 0x68

		//sprintf(init_state_buffer,"int_set: %ld | xl_fs: %ld | xl_dr: %ld | gy_fs: %ld | gy_dr: %ld | bdu: %ld | xl_fas: %ld | xl_lp: %ld | gy_bps: %ld \r\n",int_set,xl_fs, xl_dr, gy_fs, gy_dr, bdu, xl_fas, xl_lp, gy_bps);
		//UART_Transmit_Messages_IMU(init_state_buffer);

		UART_Transmit_Messages_IMU("Kalman Filter initialization..!");
 800247c:	4830      	ldr	r0, [pc, #192]	; (8002540 <IMU_Initialization+0x1bc>)
 800247e:	f7ff ff23 	bl	80022c8 <UART_Transmit_Messages_IMU>

		  MotionFX_initialize((MFXState_t *)mfxstate);
 8002482:	4830      	ldr	r0, [pc, #192]	; (8002544 <IMU_Initialization+0x1c0>)
 8002484:	f015 fc1c 	bl	8017cc0 <MotionFX_initialize>



		  MotionFX_getKnobs(mfxstate, ipKnobs);
 8002488:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <IMU_Initialization+0x1c4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	482d      	ldr	r0, [pc, #180]	; (8002544 <IMU_Initialization+0x1c0>)
 8002490:	f015 fd1c 	bl	8017ecc <MotionFX_getKnobs>



		  ipKnobs->acc_orientation[0] = 'u';
 8002494:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <IMU_Initialization+0x1c4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2275      	movs	r2, #117	; 0x75
 800249a:	775a      	strb	r2, [r3, #29]
		  ipKnobs->acc_orientation[1] = 'w';
 800249c:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <IMU_Initialization+0x1c4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2277      	movs	r2, #119	; 0x77
 80024a2:	779a      	strb	r2, [r3, #30]
		  ipKnobs->acc_orientation[2] = 'n';
 80024a4:	4b28      	ldr	r3, [pc, #160]	; (8002548 <IMU_Initialization+0x1c4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	226e      	movs	r2, #110	; 0x6e
 80024aa:	77da      	strb	r2, [r3, #31]
		  ipKnobs->gyro_orientation[0] = 'u';
 80024ac:	4b26      	ldr	r3, [pc, #152]	; (8002548 <IMU_Initialization+0x1c4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2275      	movs	r2, #117	; 0x75
 80024b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		  ipKnobs->gyro_orientation[1] = 'w';
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <IMU_Initialization+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2277      	movs	r2, #119	; 0x77
 80024bc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		  ipKnobs->gyro_orientation[2] = 'n';
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <IMU_Initialization+0x1c4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	226e      	movs	r2, #110	; 0x6e
 80024c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <IMU_Initialization+0x1c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1f      	ldr	r2, [pc, #124]	; (800254c <IMU_Initialization+0x1c8>)
 80024d0:	615a      	str	r2, [r3, #20]
		  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <IMU_Initialization+0x1c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1e      	ldr	r2, [pc, #120]	; (8002550 <IMU_Initialization+0x1cc>)
 80024d8:	619a      	str	r2, [r3, #24]

		  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <IMU_Initialization+0x1c4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		  ipKnobs->LMode = 1;
 80024e4:	4b18      	ldr	r3, [pc, #96]	; (8002548 <IMU_Initialization+0x1c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2201      	movs	r2, #1
 80024ea:	731a      	strb	r2, [r3, #12]
		  ipKnobs->modx = DECIMATION;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <IMU_Initialization+0x1c4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2201      	movs	r2, #1
 80024f2:	771a      	strb	r2, [r3, #28]

		  MotionFX_setKnobs(mfxstate, ipKnobs);
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <IMU_Initialization+0x1c4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	4812      	ldr	r0, [pc, #72]	; (8002544 <IMU_Initialization+0x1c0>)
 80024fc:	f015 fc9a 	bl	8017e34 <MotionFX_setKnobs>
		  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 8002500:	2101      	movs	r1, #1
 8002502:	4810      	ldr	r0, [pc, #64]	; (8002544 <IMU_Initialization+0x1c0>)
 8002504:	f015 fd20 	bl	8017f48 <MotionFX_enable_6X>
		  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002508:	2100      	movs	r1, #0
 800250a:	480e      	ldr	r0, [pc, #56]	; (8002544 <IMU_Initialization+0x1c0>)
 800250c:	f015 fd3c 	bl	8017f88 <MotionFX_enable_9X>

		  UART_Transmit_Messages_IMU("Done! \r\n");
 8002510:	4810      	ldr	r0, [pc, #64]	; (8002554 <IMU_Initialization+0x1d0>)
 8002512:	f7ff fed9 	bl	80022c8 <UART_Transmit_Messages_IMU>
		return state;
 8002516:	6ebb      	ldr	r3, [r7, #104]	; 0x68


}
 8002518:	4618      	mov	r0, r3
 800251a:	3790      	adds	r7, #144	; 0x90
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20002f5c 	.word	0x20002f5c
 8002524:	0800233d 	.word	0x0800233d
 8002528:	080022f5 	.word	0x080022f5
 800252c:	20004680 	.word	0x20004680
 8002530:	20002f5a 	.word	0x20002f5a
 8002534:	0801f780 	.word	0x0801f780
 8002538:	0801f798 	.word	0x0801f798
 800253c:	20002f5b 	.word	0x20002f5b
 8002540:	0801f7b4 	.word	0x0801f7b4
 8002544:	20002fc0 	.word	0x20002fc0
 8002548:	20000000 	.word	0x20000000
 800254c:	3ac88a48 	.word	0x3ac88a48
 8002550:	3b83126f 	.word	0x3b83126f
 8002554:	0801f7d4 	.word	0x0801f7d4

08002558 <IMU_Data_Read>:


//IMU DATA READING FUNCTION
IMUData IMU_Data_Read(){
 8002558:	b5b0      	push	{r4, r5, r7, lr}
 800255a:	b0a0      	sub	sp, #128	; 0x80
 800255c:	af02      	add	r7, sp, #8
 800255e:	6078      	str	r0, [r7, #4]

	int32_t reading_state, gyro_reading, acc_reading;
    MFX_input_t data_in;
    MFX_output_t data_out;
    float delta_time = TIME_ODR_104Hz;
 8002560:	4b6a      	ldr	r3, [pc, #424]	; (800270c <IMU_Data_Read+0x1b4>)
 8002562:	60bb      	str	r3, [r7, #8]
	//char test[100];


	//ACCELEROMETER RAW DATA READING
	acc_reading = lsm6ds3tr_c_acceleration_raw_get(&device,data_raw_acceleration);
 8002564:	496a      	ldr	r1, [pc, #424]	; (8002710 <IMU_Data_Read+0x1b8>)
 8002566:	486b      	ldr	r0, [pc, #428]	; (8002714 <IMU_Data_Read+0x1bc>)
 8002568:	f001 fdc5 	bl	80040f6 <lsm6ds3tr_c_acceleration_raw_get>
 800256c:	6778      	str	r0, [r7, #116]	; 0x74
	//GYROSCOPE
	gyro_reading = lsm6ds3tr_c_angular_rate_raw_get(&device,data_raw_angular_rate);
 800256e:	496a      	ldr	r1, [pc, #424]	; (8002718 <IMU_Data_Read+0x1c0>)
 8002570:	4868      	ldr	r0, [pc, #416]	; (8002714 <IMU_Data_Read+0x1bc>)
 8002572:	f001 fd75 	bl	8004060 <lsm6ds3tr_c_angular_rate_raw_get>
 8002576:	6738      	str	r0, [r7, #112]	; 0x70
	// COMPASS
    //CompassData compass_data = Transmit_Compass_Data();


	reading_state = gyro_reading + acc_reading; // If 0 -> Success | Otherwise error code
 8002578:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800257a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800257c:	4413      	add	r3, r2
 800257e:	66fb      	str	r3, [r7, #108]	; 0x6c



	  if (reading_state == 0){
 8002580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 8094 	bne.w	80026b0 <IMU_Data_Read+0x158>

			data_in.acc[0] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[0]) * FROM_MG_TO_G);
 8002588:	4b61      	ldr	r3, [pc, #388]	; (8002710 <IMU_Data_Read+0x1b8>)
 800258a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258e:	4618      	mov	r0, r3
 8002590:	f001 fc78 	bl	8003e84 <lsm6ds3tr_c_from_fs2g_to_mg>
 8002594:	eef0 7a40 	vmov.f32	s15, s0
 8002598:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800271c <IMU_Data_Read+0x1c4>
 800259c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			data_in.acc[1] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[1]) * FROM_MG_TO_G);
 80025a4:	4b5a      	ldr	r3, [pc, #360]	; (8002710 <IMU_Data_Read+0x1b8>)
 80025a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 fc6a 	bl	8003e84 <lsm6ds3tr_c_from_fs2g_to_mg>
 80025b0:	eef0 7a40 	vmov.f32	s15, s0
 80025b4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800271c <IMU_Data_Read+0x1c4>
 80025b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025bc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			data_in.acc[2] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[2]) * FROM_MG_TO_G);
 80025c0:	4b53      	ldr	r3, [pc, #332]	; (8002710 <IMU_Data_Read+0x1b8>)
 80025c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f001 fc5c 	bl	8003e84 <lsm6ds3tr_c_from_fs2g_to_mg>
 80025cc:	eef0 7a40 	vmov.f32	s15, s0
 80025d0:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800271c <IMU_Data_Read+0x1c4>
 80025d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025d8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c


			data_in.gyro[0] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[0]) * FROM_MDPS_TO_DPS) ;
 80025dc:	4b4e      	ldr	r3, [pc, #312]	; (8002718 <IMU_Data_Read+0x1c0>)
 80025de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 fc66 	bl	8003eb4 <lsm6ds3tr_c_from_fs500dps_to_mdps>
 80025e8:	eef0 7a40 	vmov.f32	s15, s0
 80025ec:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800271c <IMU_Data_Read+0x1c4>
 80025f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			data_in.gyro[1] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[1]) * FROM_MDPS_TO_DPS) ;
 80025f8:	4b47      	ldr	r3, [pc, #284]	; (8002718 <IMU_Data_Read+0x1c0>)
 80025fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025fe:	4618      	mov	r0, r3
 8002600:	f001 fc58 	bl	8003eb4 <lsm6ds3tr_c_from_fs500dps_to_mdps>
 8002604:	eef0 7a40 	vmov.f32	s15, s0
 8002608:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800271c <IMU_Data_Read+0x1c4>
 800260c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002610:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			data_in.gyro[2] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[2]) * FROM_MDPS_TO_DPS) ;
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <IMU_Data_Read+0x1c0>)
 8002616:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800261a:	4618      	mov	r0, r3
 800261c:	f001 fc4a 	bl	8003eb4 <lsm6ds3tr_c_from_fs500dps_to_mdps>
 8002620:	eef0 7a40 	vmov.f32	s15, s0
 8002624:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800271c <IMU_Data_Read+0x1c4>
 8002628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800262c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


		    /* Don't set mag values because we use only acc and gyro */
		    data_in.mag[0] = 0.0;
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	64bb      	str	r3, [r7, #72]	; 0x48
		    data_in.mag[1] = 0.0;
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	64fb      	str	r3, [r7, #76]	; 0x4c
		    data_in.mag[2] = 0.0;
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	653b      	str	r3, [r7, #80]	; 0x50



	      MotionFX_propagate(mfxstate, &data_out, &data_in, &delta_time);
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800264a:	f107 010c 	add.w	r1, r7, #12
 800264e:	4834      	ldr	r0, [pc, #208]	; (8002720 <IMU_Data_Read+0x1c8>)
 8002650:	f015 fcca 	bl	8017fe8 <MotionFX_propagate>
	      MotionFX_update(mfxstate, &data_out, &data_in, &delta_time, NULL);
 8002654:	f107 0308 	add.w	r3, r7, #8
 8002658:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800265c:	f107 010c 	add.w	r1, r7, #12
 8002660:	2000      	movs	r0, #0
 8002662:	9000      	str	r0, [sp, #0]
 8002664:	482e      	ldr	r0, [pc, #184]	; (8002720 <IMU_Data_Read+0x1c8>)
 8002666:	f015 fcaf 	bl	8017fc8 <MotionFX_update>

	        // Update imu_data
	        imu_data.acceleration_x = data_out.gravity[0];
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	4a2d      	ldr	r2, [pc, #180]	; (8002724 <IMU_Data_Read+0x1cc>)
 800266e:	6013      	str	r3, [r2, #0]
	        imu_data.acceleration_y = data_out.gravity[1];
 8002670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002672:	4a2c      	ldr	r2, [pc, #176]	; (8002724 <IMU_Data_Read+0x1cc>)
 8002674:	6053      	str	r3, [r2, #4]
	        imu_data.acceleration_z = data_out.gravity[2];
 8002676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002678:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <IMU_Data_Read+0x1cc>)
 800267a:	6093      	str	r3, [r2, #8]
	        imu_data.angular_rate_x = data_out.linear_acceleration[0];
 800267c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267e:	4a29      	ldr	r2, [pc, #164]	; (8002724 <IMU_Data_Read+0x1cc>)
 8002680:	60d3      	str	r3, [r2, #12]
	        imu_data.angular_rate_y = data_out.linear_acceleration[1];
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	4a27      	ldr	r2, [pc, #156]	; (8002724 <IMU_Data_Read+0x1cc>)
 8002686:	6113      	str	r3, [r2, #16]
	        imu_data.angular_rate_z = data_out.linear_acceleration[2];
 8002688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268a:	4a26      	ldr	r2, [pc, #152]	; (8002724 <IMU_Data_Read+0x1cc>)
 800268c:	6153      	str	r3, [r2, #20]
	        //imu_data.yaw = (float)compass_data.heading;
	        imu_data.pitch = data_out.rotation[1];
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4a24      	ldr	r2, [pc, #144]	; (8002724 <IMU_Data_Read+0x1cc>)
 8002692:	6213      	str	r3, [r2, #32]
	        imu_data.roll = data_out.rotation[2];
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	4a23      	ldr	r2, [pc, #140]	; (8002724 <IMU_Data_Read+0x1cc>)
 8002698:	61d3      	str	r3, [r2, #28]


	        return imu_data;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a21      	ldr	r2, [pc, #132]	; (8002724 <IMU_Data_Read+0x1cc>)
 800269e:	461c      	mov	r4, r3
 80026a0:	4615      	mov	r5, r2
 80026a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026aa:	682b      	ldr	r3, [r5, #0]
 80026ac:	6023      	str	r3, [r4, #0]
 80026ae:	e029      	b.n	8002704 <IMU_Data_Read+0x1ac>
	  }	else	{

		  //Error State
		  imu_data.acceleration_x = 0.0;
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <IMU_Data_Read+0x1cc>)
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
		  imu_data.acceleration_y = 0.0;
 80026b8:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <IMU_Data_Read+0x1cc>)
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	605a      	str	r2, [r3, #4]
		  imu_data.acceleration_z = 0.0;
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <IMU_Data_Read+0x1cc>)
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
		  imu_data.angular_rate_x = 0.0;
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <IMU_Data_Read+0x1cc>)
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	60da      	str	r2, [r3, #12]
		  imu_data.angular_rate_y = 0.0;
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <IMU_Data_Read+0x1cc>)
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
		  imu_data.angular_rate_z = 0.0;
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <IMU_Data_Read+0x1cc>)
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	615a      	str	r2, [r3, #20]
		  imu_data.pitch = 0.0;
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <IMU_Data_Read+0x1cc>)
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	621a      	str	r2, [r3, #32]
		  imu_data.roll = 0.0;
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <IMU_Data_Read+0x1cc>)
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	61da      	str	r2, [r3, #28]

	        return imu_data;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a0c      	ldr	r2, [pc, #48]	; (8002724 <IMU_Data_Read+0x1cc>)
 80026f4:	461c      	mov	r4, r3
 80026f6:	4615      	mov	r5, r2
 80026f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002700:	682b      	ldr	r3, [r5, #0]
 8002702:	6023      	str	r3, [r4, #0]
		}

}
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	3778      	adds	r7, #120	; 0x78
 8002708:	46bd      	mov	sp, r7
 800270a:	bdb0      	pop	{r4, r5, r7, pc}
 800270c:	3c1d4952 	.word	0x3c1d4952
 8002710:	20002f4c 	.word	0x20002f4c
 8002714:	20002f5c 	.word	0x20002f5c
 8002718:	20002f54 	.word	0x20002f54
 800271c:	3a83126f 	.word	0x3a83126f
 8002720:	20002fc0 	.word	0x20002fc0
 8002724:	20002f6c 	.word	0x20002f6c

08002728 <dps310_i2c_read>:
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}



int8_t dps310_i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af04      	add	r7, sp, #16
 800272e:	603a      	str	r2, [r7, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
 8002736:	460b      	mov	r3, r1
 8002738:	71bb      	strb	r3, [r7, #6]
 800273a:	4613      	mov	r3, r2
 800273c:	80bb      	strh	r3, [r7, #4]


	  // Perform the I2C read operation using HAL_I2C_Mem_Read
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	b299      	uxth	r1, r3
 8002742:	79bb      	ldrb	r3, [r7, #6]
 8002744:	b29a      	uxth	r2, r3
 8002746:	2364      	movs	r3, #100	; 0x64
 8002748:	9302      	str	r3, [sp, #8]
 800274a:	88bb      	ldrh	r3, [r7, #4]
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	2301      	movs	r3, #1
 8002754:	4807      	ldr	r0, [pc, #28]	; (8002774 <dps310_i2c_read+0x4c>)
 8002756:	f004 fc09 	bl	8006f6c <HAL_I2C_Mem_Read>
 800275a:	4603      	mov	r3, r0
 800275c:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <dps310_i2c_read+0x40>
 8002764:	2300      	movs	r3, #0
 8002766:	e001      	b.n	800276c <dps310_i2c_read+0x44>
 8002768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff


}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20004680 	.word	0x20004680

08002778 <dps310_i2c_write>:

int8_t dps310_i2c_write(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af04      	add	r7, sp, #16
 800277e:	603a      	str	r2, [r7, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	460b      	mov	r3, r1
 8002788:	71bb      	strb	r3, [r7, #6]
 800278a:	4613      	mov	r3, r2
 800278c:	80bb      	strh	r3, [r7, #4]

	  // Perform the I2C write operation using HAL_I2C_Mem_Write
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	b299      	uxth	r1, r3
 8002792:	79bb      	ldrb	r3, [r7, #6]
 8002794:	b29a      	uxth	r2, r3
 8002796:	2364      	movs	r3, #100	; 0x64
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	88bb      	ldrh	r3, [r7, #4]
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2301      	movs	r3, #1
 80027a4:	4807      	ldr	r0, [pc, #28]	; (80027c4 <dps310_i2c_write+0x4c>)
 80027a6:	f004 fae7 	bl	8006d78 <HAL_I2C_Mem_Write>
 80027aa:	4603      	mov	r3, r0
 80027ac:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <dps310_i2c_write+0x40>
 80027b4:	2300      	movs	r3, #0
 80027b6:	e001      	b.n	80027bc <dps310_i2c_write+0x44>
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20004680 	.word	0x20004680

080027c8 <Pressure_Init>:



int32_t Pressure_Init(){
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0

    int16_t ret;

    ret = product_id_check();
 80027ce:	f000 fb21 	bl	8002e14 <product_id_check>
 80027d2:	4603      	mov	r3, r0
 80027d4:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 80027d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <Pressure_Init+0x1c>
 80027de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e2:	e011      	b.n	8002808 <Pressure_Init+0x40>

    dps310_configure_temperature(
 80027e4:	2000      	movs	r0, #0
 80027e6:	f000 f8b1 	bl	800294c <dps310_configure_temperature>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_TMP_CFG_TMP_PRC_SINGLE);

    dps310_configure_pressure(
 80027ea:	2001      	movs	r0, #1
 80027ec:	f000 f8da 	bl	80029a4 <dps310_configure_pressure>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_PRS_CFG_PM_PRC_2_TIMES);

    ret = read_coefs();
 80027f0:	f000 f80e 	bl	8002810 <read_coefs>
 80027f4:	4603      	mov	r3, r0
 80027f6:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 80027f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <Pressure_Init+0x3e>
 8002800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002804:	e000      	b.n	8002808 <Pressure_Init+0x40>

    return 0;
 8002806:	2300      	movs	r3, #0

}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <read_coefs>:

int16_t dps310_reset() {
    return write_byte_to_reg(DPS310_RESET_REG, DPS310_RESET_SOFT_RST_VALUE);
}

int16_t read_coefs() {
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[18];

    ret = wait_for_reg_value(
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	2008      	movs	r0, #8
 800281c:	f000 fa3e 	bl	8002c9c <wait_for_reg_value>
 8002820:	4603      	mov	r3, r0
 8002822:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE);

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_COEF_REG, buff, 18);
 8002824:	1d3a      	adds	r2, r7, #4
 8002826:	2312      	movs	r3, #18
 8002828:	2110      	movs	r1, #16
 800282a:	20ee      	movs	r0, #238	; 0xee
 800282c:	f7ff ff7c 	bl	8002728 <dps310_i2c_read>
 8002830:	4603      	mov	r3, r0
 8002832:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002834:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <read_coefs+0x32>
 800283c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002840:	e07d      	b.n	800293e <read_coefs+0x12e>

    g_coefs.c0 = get_two_complement_of(
            ((uint16_t) buff[0] << 4u) | (((uint16_t) buff[1] >> 4u) & 0x0Fu),
 8002842:	793b      	ldrb	r3, [r7, #4]
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	461a      	mov	r2, r3
 8002848:	797b      	ldrb	r3, [r7, #5]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	4313      	orrs	r3, r2
    g_coefs.c0 = get_two_complement_of(
 8002854:	210c      	movs	r1, #12
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fab8 	bl	8002dcc <get_two_complement_of>
 800285c:	4603      	mov	r3, r0
 800285e:	b21a      	sxth	r2, r3
 8002860:	4b39      	ldr	r3, [pc, #228]	; (8002948 <read_coefs+0x138>)
 8002862:	801a      	strh	r2, [r3, #0]
            12);

    g_coefs.c1 = get_two_complement_of(
            ((((uint16_t) buff[1] & 0x0Fu) << 8u) | (uint16_t) buff[2]),
 8002864:	797b      	ldrb	r3, [r7, #5]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800286c:	79ba      	ldrb	r2, [r7, #6]
 800286e:	4313      	orrs	r3, r2
    g_coefs.c1 = get_two_complement_of(
 8002870:	210c      	movs	r1, #12
 8002872:	4618      	mov	r0, r3
 8002874:	f000 faaa 	bl	8002dcc <get_two_complement_of>
 8002878:	4603      	mov	r3, r0
 800287a:	b21a      	sxth	r2, r3
 800287c:	4b32      	ldr	r3, [pc, #200]	; (8002948 <read_coefs+0x138>)
 800287e:	805a      	strh	r2, [r3, #2]
            12);

    g_coefs.c00 = get_two_complement_of(
            ((uint32_t) buff[3] << 12u) | ((uint32_t) buff[4] << 4u) | (((uint32_t) buff[5] >> 4u) & 0x0Fu),
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	031a      	lsls	r2, r3, #12
 8002884:	7a3b      	ldrb	r3, [r7, #8]
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	431a      	orrs	r2, r3
 800288a:	7a7b      	ldrb	r3, [r7, #9]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f003 030f 	and.w	r3, r3, #15
    g_coefs.c00 = get_two_complement_of(
 8002894:	4313      	orrs	r3, r2
 8002896:	2114      	movs	r1, #20
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fa97 	bl	8002dcc <get_two_complement_of>
 800289e:	4603      	mov	r3, r0
 80028a0:	4a29      	ldr	r2, [pc, #164]	; (8002948 <read_coefs+0x138>)
 80028a2:	6053      	str	r3, [r2, #4]
            20);

    g_coefs.c10 = get_two_complement_of(
            (((uint32_t) buff[5] & 0x0Fu) << 16u) | ((uint32_t) buff[6] << 8u) | (uint32_t) buff[7],
 80028a4:	7a7b      	ldrb	r3, [r7, #9]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80028ac:	7abb      	ldrb	r3, [r7, #10]
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	4313      	orrs	r3, r2
 80028b2:	7afa      	ldrb	r2, [r7, #11]
    g_coefs.c10 = get_two_complement_of(
 80028b4:	4313      	orrs	r3, r2
 80028b6:	2114      	movs	r1, #20
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fa87 	bl	8002dcc <get_two_complement_of>
 80028be:	4603      	mov	r3, r0
 80028c0:	4a21      	ldr	r2, [pc, #132]	; (8002948 <read_coefs+0x138>)
 80028c2:	6093      	str	r3, [r2, #8]
            20);

    g_coefs.c01 = get_two_complement_of(
            ((uint16_t) buff[8] << 8u) | (uint16_t) buff[9],
 80028c4:	7b3b      	ldrb	r3, [r7, #12]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	7b7a      	ldrb	r2, [r7, #13]
 80028ca:	4313      	orrs	r3, r2
    g_coefs.c01 = get_two_complement_of(
 80028cc:	2110      	movs	r1, #16
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fa7c 	bl	8002dcc <get_two_complement_of>
 80028d4:	4603      	mov	r3, r0
 80028d6:	b21a      	sxth	r2, r3
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <read_coefs+0x138>)
 80028da:	819a      	strh	r2, [r3, #12]
            16);

    g_coefs.c11 = get_two_complement_of(
            ((uint16_t) buff[10] << 8u) | (uint16_t) buff[11],
 80028dc:	7bbb      	ldrb	r3, [r7, #14]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	4313      	orrs	r3, r2
    g_coefs.c11 = get_two_complement_of(
 80028e4:	2110      	movs	r1, #16
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fa70 	bl	8002dcc <get_two_complement_of>
 80028ec:	4603      	mov	r3, r0
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	4b15      	ldr	r3, [pc, #84]	; (8002948 <read_coefs+0x138>)
 80028f2:	81da      	strh	r2, [r3, #14]
            16);

    g_coefs.c20 = get_two_complement_of(
            ((uint16_t) buff[12] << 8u) | (uint16_t) buff[13],
 80028f4:	7c3b      	ldrb	r3, [r7, #16]
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	7c7a      	ldrb	r2, [r7, #17]
 80028fa:	4313      	orrs	r3, r2
    g_coefs.c20 = get_two_complement_of(
 80028fc:	2110      	movs	r1, #16
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fa64 	bl	8002dcc <get_two_complement_of>
 8002904:	4603      	mov	r3, r0
 8002906:	b21a      	sxth	r2, r3
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <read_coefs+0x138>)
 800290a:	821a      	strh	r2, [r3, #16]
            16);

    g_coefs.c21 = get_two_complement_of(
            ((uint16_t) buff[14] << 8u) | (uint16_t) buff[15],
 800290c:	7cbb      	ldrb	r3, [r7, #18]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	7cfa      	ldrb	r2, [r7, #19]
 8002912:	4313      	orrs	r3, r2
    g_coefs.c21 = get_two_complement_of(
 8002914:	2110      	movs	r1, #16
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fa58 	bl	8002dcc <get_two_complement_of>
 800291c:	4603      	mov	r3, r0
 800291e:	b21a      	sxth	r2, r3
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <read_coefs+0x138>)
 8002922:	825a      	strh	r2, [r3, #18]
            16);

    g_coefs.c30 = get_two_complement_of(
            ((uint16_t) buff[16] << 8u) | (uint16_t) buff[17],
 8002924:	7d3b      	ldrb	r3, [r7, #20]
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	7d7a      	ldrb	r2, [r7, #21]
 800292a:	4313      	orrs	r3, r2
    g_coefs.c30 = get_two_complement_of(
 800292c:	2110      	movs	r1, #16
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fa4c 	bl	8002dcc <get_two_complement_of>
 8002934:	4603      	mov	r3, r0
 8002936:	b21a      	sxth	r2, r3
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <read_coefs+0x138>)
 800293a:	829a      	strh	r2, [r3, #20]
            16);

    return DPS310_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20003940 	.word	0x20003940

0800294c <dps310_configure_temperature>:

int16_t dps310_configure_temperature(uint8_t data) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
    int16_t ret;
    uint8_t temperature_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 8002956:	2380      	movs	r3, #128	; 0x80
 8002958:	737b      	strb	r3, [r7, #13]

    ret = get_temperature_sensor(&temperature_sensor);
 800295a:	f107 030d 	add.w	r3, r7, #13
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fa7e 	bl	8002e60 <get_temperature_sensor>
 8002964:	4603      	mov	r3, r0
 8002966:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 8002968:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <dps310_configure_temperature+0x2a>
 8002970:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002974:	e00f      	b.n	8002996 <dps310_configure_temperature+0x4a>

    g_temperature_rate = DPS310_TMP_CFG_TMP_RATE_MASK & data;
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <dps310_configure_temperature+0x54>)
 8002980:	701a      	strb	r2, [r3, #0]
    data |= temperature_sensor;
 8002982:	7b7a      	ldrb	r2, [r7, #13]
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	4313      	orrs	r3, r2
 8002988:	71fb      	strb	r3, [r7, #7]

    return write_byte_to_reg(DPS310_TMP_CFG_REG, data);
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	4619      	mov	r1, r3
 800298e:	2007      	movs	r0, #7
 8002990:	f000 f820 	bl	80029d4 <write_byte_to_reg>
 8002994:	4603      	mov	r3, r0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20003959 	.word	0x20003959

080029a4 <dps310_configure_pressure>:

int16_t dps310_configure_pressure(uint8_t data) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
    g_pressure_rate = DPS310_PRS_CFG_PM_RATE_MASK & data;
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <dps310_configure_pressure+0x2c>)
 80029b8:	701a      	strb	r2, [r3, #0]
    return write_byte_to_reg(DPS310_PRS_CFG_REG, data);
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	4619      	mov	r1, r3
 80029be:	2006      	movs	r0, #6
 80029c0:	f000 f808 	bl	80029d4 <write_byte_to_reg>
 80029c4:	4603      	mov	r3, r0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20003958 	.word	0x20003958

080029d4 <write_byte_to_reg>:

int16_t write_byte_to_reg(uint8_t reg_addr, uint8_t data) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	460a      	mov	r2, r1
 80029de:	71fb      	strb	r3, [r7, #7]
 80029e0:	4613      	mov	r3, r2
 80029e2:	71bb      	strb	r3, [r7, #6]
    int16_t ret;
    uint8_t buff[1];

    buff[0] = data;
 80029e4:	79bb      	ldrb	r3, [r7, #6]
 80029e6:	733b      	strb	r3, [r7, #12]
    ret = dps310_i2c_write(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 80029e8:	f107 020c 	add.w	r2, r7, #12
 80029ec:	79f9      	ldrb	r1, [r7, #7]
 80029ee:	2301      	movs	r3, #1
 80029f0:	20ee      	movs	r0, #238	; 0xee
 80029f2:	f7ff fec1 	bl	8002778 <dps310_i2c_write>
 80029f6:	4603      	mov	r3, r0
 80029f8:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 80029fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <write_byte_to_reg+0x34>
 8002a02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a06:	e000      	b.n	8002a0a <write_byte_to_reg+0x36>

    return DPS310_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <read_temperature>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t read_temperature(float *p_temperature) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_TMP);
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	2008      	movs	r0, #8
 8002a20:	f7ff ffd8 	bl	80029d4 <write_byte_to_reg>
 8002a24:	4603      	mov	r3, r0
 8002a26:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002a28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <read_temperature+0x22>
 8002a30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a34:	e066      	b.n	8002b04 <read_temperature+0xf0>

    ret = wait_for_reg_value(
 8002a36:	2267      	movs	r2, #103	; 0x67
 8002a38:	2160      	movs	r1, #96	; 0x60
 8002a3a:	2008      	movs	r0, #8
 8002a3c:	f000 f92e 	bl	8002c9c <wait_for_reg_value>
 8002a40:	4603      	mov	r3, r0
 8002a42:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 8002a44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <read_temperature+0x3e>
 8002a4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a50:	e058      	b.n	8002b04 <read_temperature+0xf0>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_B2_REG, buff, 3);
 8002a52:	f107 020c 	add.w	r2, r7, #12
 8002a56:	2303      	movs	r3, #3
 8002a58:	2103      	movs	r1, #3
 8002a5a:	20ee      	movs	r0, #238	; 0xee
 8002a5c:	f7ff fe64 	bl	8002728 <dps310_i2c_read>
 8002a60:	4603      	mov	r3, r0
 8002a62:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002a64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <read_temperature+0x5e>
 8002a6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a70:	e048      	b.n	8002b04 <read_temperature+0xf0>

    int32_t temp_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 8002a72:	7b3b      	ldrb	r3, [r7, #12]
 8002a74:	041a      	lsls	r2, r3, #16
 8002a76:	7b7b      	ldrb	r3, [r7, #13]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	7bba      	ldrb	r2, [r7, #14]
    int32_t temp_raw = get_two_complement_of(
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	2118      	movs	r1, #24
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f9a2 	bl	8002dcc <get_two_complement_of>
 8002a88:	6138      	str	r0, [r7, #16]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_temperature_rate, &factor);
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <read_temperature+0xf8>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f107 0208 	add.w	r2, r7, #8
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f940 	bl	8002d1a <get_scale_factor_for>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002a9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <read_temperature+0x98>
 8002aa6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002aaa:	e02b      	b.n	8002b04 <read_temperature+0xf0>

    g_last_temp_raw_sc = (float) temp_raw / factor;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	ee07 3a90 	vmov	s15, r3
 8002abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <read_temperature+0xfc>)
 8002ac6:	edc3 7a00 	vstr	s15, [r3]
    *p_temperature = (float) g_coefs.c0 * 0.5f + (float) g_coefs.c1 * g_last_temp_raw_sc;
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <read_temperature+0x100>)
 8002acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad0:	ee07 3a90 	vmov	s15, r3
 8002ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002adc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <read_temperature+0x100>)
 8002ae2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <read_temperature+0xfc>)
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20003959 	.word	0x20003959
 8002b10:	2000395c 	.word	0x2000395c
 8002b14:	20003940 	.word	0x20003940

08002b18 <read_pressure>:

int16_t read_pressure(float *p_pressure) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_PRS);
 8002b20:	2101      	movs	r1, #1
 8002b22:	2008      	movs	r0, #8
 8002b24:	f7ff ff56 	bl	80029d4 <write_byte_to_reg>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8002b2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <read_pressure+0x22>
 8002b34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b38:	e0a4      	b.n	8002c84 <read_pressure+0x16c>

    ret = wait_for_reg_value(
 8002b3a:	2257      	movs	r2, #87	; 0x57
 8002b3c:	2150      	movs	r1, #80	; 0x50
 8002b3e:	2008      	movs	r0, #8
 8002b40:	f000 f8ac 	bl	8002c9c <wait_for_reg_value>
 8002b44:	4603      	mov	r3, r0
 8002b46:	83fb      	strh	r3, [r7, #30]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 8002b48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <read_pressure+0x3e>
 8002b50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b54:	e096      	b.n	8002c84 <read_pressure+0x16c>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PSR_B2_REG, buff, 3);
 8002b56:	f107 0210 	add.w	r2, r7, #16
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	20ee      	movs	r0, #238	; 0xee
 8002b60:	f7ff fde2 	bl	8002728 <dps310_i2c_read>
 8002b64:	4603      	mov	r3, r0
 8002b66:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8002b68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <read_pressure+0x5e>
 8002b70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b74:	e086      	b.n	8002c84 <read_pressure+0x16c>

    int32_t pressure_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 8002b76:	7c3b      	ldrb	r3, [r7, #16]
 8002b78:	041a      	lsls	r2, r3, #16
 8002b7a:	7c7b      	ldrb	r3, [r7, #17]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	7cba      	ldrb	r2, [r7, #18]
    int32_t pressure_raw = get_two_complement_of(
 8002b82:	4313      	orrs	r3, r2
 8002b84:	2118      	movs	r1, #24
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f920 	bl	8002dcc <get_two_complement_of>
 8002b8c:	61b8      	str	r0, [r7, #24]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_pressure_rate, &factor);
 8002b8e:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <read_pressure+0x174>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	f107 020c 	add.w	r2, r7, #12
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 f8be 	bl	8002d1a <get_scale_factor_for>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8002ba2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <read_pressure+0x98>
 8002baa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002bae:	e069      	b.n	8002c84 <read_pressure+0x16c>

    float pressure_raw_sc = (float) pressure_raw / factor;
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc8:	edc7 7a05 	vstr	s15, [r7, #20]

    // *0.01f -> Convert compensated pressure measurement from Pa to hPa
    *p_pressure = (g_coefs.c00 +
 8002bcc:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <read_pressure+0x178>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <read_pressure+0x178>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <read_pressure+0x178>)
 8002be6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002bf2:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <read_pressure+0x178>)
 8002bf4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002bf8:	ee07 3a90 	vmov	s15, r3
 8002bfc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002c00:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c08:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c14:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c18:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    *p_pressure = (g_coefs.c00 +
 8002c20:	ee37 7a27 	vadd.f32	s14, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 8002c24:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <read_pressure+0x178>)
 8002c26:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c32:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <read_pressure+0x178>)
 8002c34:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002c38:	ee07 3a90 	vmov	s15, r3
 8002c3c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002c40:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <read_pressure+0x178>)
 8002c42:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002c4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c52:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002c56:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c5e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c62:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <read_pressure+0x17c>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 8002c70:	ee77 7a27 	vadd.f32	s15, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 8002c74:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002c98 <read_pressure+0x180>
 8002c78:	ee67 7a87 	vmul.f32	s15, s15, s14
    *p_pressure = (g_coefs.c00 +
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20003958 	.word	0x20003958
 8002c90:	20003940 	.word	0x20003940
 8002c94:	2000395c 	.word	0x2000395c
 8002c98:	3c23d70a 	.word	0x3c23d70a

08002c9c <wait_for_reg_value>:

int16_t wait_for_reg_value(uint8_t reg_addr, uint8_t reg_value, uint8_t mask) {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	71bb      	strb	r3, [r7, #6]
 8002caa:	4613      	mov	r3, r2
 8002cac:	717b      	strb	r3, [r7, #5]
    int16_t ret;
    uint8_t buff[1];
    uint16_t attempts = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	81fb      	strh	r3, [r7, #14]

    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8002cb2:	e024      	b.n	8002cfe <wait_for_reg_value+0x62>
        attempts++;
 8002cb4:	89fb      	ldrh	r3, [r7, #14]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	81fb      	strh	r3, [r7, #14]

        ret = dps310_i2c_read(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 8002cba:	f107 0208 	add.w	r2, r7, #8
 8002cbe:	79f9      	ldrb	r1, [r7, #7]
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	20ee      	movs	r0, #238	; 0xee
 8002cc4:	f7ff fd30 	bl	8002728 <dps310_i2c_read>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	81bb      	strh	r3, [r7, #12]
        if (ret != DPS310_OK) return ret;
 8002ccc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <wait_for_reg_value+0x3e>
 8002cd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cd8:	e01b      	b.n	8002d12 <wait_for_reg_value+0x76>

        bool b_is_expected_value = ((buff[0] & mask) == reg_value);
 8002cda:	7a3a      	ldrb	r2, [r7, #8]
 8002cdc:	797b      	ldrb	r3, [r7, #5]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	79ba      	ldrb	r2, [r7, #6]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	72fb      	strb	r3, [r7, #11]
        if (b_is_expected_value) return DPS310_OK;
 8002cee:	7afb      	ldrb	r3, [r7, #11]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <wait_for_reg_value+0x5c>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e00c      	b.n	8002d12 <wait_for_reg_value+0x76>

        HAL_Delay(10);
 8002cf8:	200a      	movs	r0, #10
 8002cfa:	f002 fdc1 	bl	8005880 <HAL_Delay>
    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8002cfe:	89fb      	ldrh	r3, [r7, #14]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d9d7      	bls.n	8002cb4 <wait_for_reg_value+0x18>
    }

    if (attempts == DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8002d04:	89fb      	ldrh	r3, [r7, #14]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d102      	bne.n	8002d10 <wait_for_reg_value+0x74>
        return DPS310_WAIT_TIMEOUT_ERROR;
 8002d0a:	f06f 0303 	mvn.w	r3, #3
 8002d0e:	e000      	b.n	8002d12 <wait_for_reg_value+0x76>
    }

    return DPS310_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <get_scale_factor_for>:

int16_t get_scale_factor_for(uint8_t rate, uint32_t *p_factor) {
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	6039      	str	r1, [r7, #0]
 8002d24:	71fb      	strb	r3, [r7, #7]
    uint32_t ret = DPS310_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]

    switch (rate) {
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	2b70      	cmp	r3, #112	; 0x70
 8002d2e:	d03d      	beq.n	8002dac <get_scale_factor_for+0x92>
 8002d30:	2b70      	cmp	r3, #112	; 0x70
 8002d32:	dc40      	bgt.n	8002db6 <get_scale_factor_for+0x9c>
 8002d34:	2b60      	cmp	r3, #96	; 0x60
 8002d36:	d034      	beq.n	8002da2 <get_scale_factor_for+0x88>
 8002d38:	2b60      	cmp	r3, #96	; 0x60
 8002d3a:	dc3c      	bgt.n	8002db6 <get_scale_factor_for+0x9c>
 8002d3c:	2b50      	cmp	r3, #80	; 0x50
 8002d3e:	d02b      	beq.n	8002d98 <get_scale_factor_for+0x7e>
 8002d40:	2b50      	cmp	r3, #80	; 0x50
 8002d42:	dc38      	bgt.n	8002db6 <get_scale_factor_for+0x9c>
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d022      	beq.n	8002d8e <get_scale_factor_for+0x74>
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	dc34      	bgt.n	8002db6 <get_scale_factor_for+0x9c>
 8002d4c:	2b30      	cmp	r3, #48	; 0x30
 8002d4e:	d019      	beq.n	8002d84 <get_scale_factor_for+0x6a>
 8002d50:	2b30      	cmp	r3, #48	; 0x30
 8002d52:	dc30      	bgt.n	8002db6 <get_scale_factor_for+0x9c>
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d010      	beq.n	8002d7a <get_scale_factor_for+0x60>
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	dc2c      	bgt.n	8002db6 <get_scale_factor_for+0x9c>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <get_scale_factor_for+0x4c>
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d005      	beq.n	8002d70 <get_scale_factor_for+0x56>
 8002d64:	e027      	b.n	8002db6 <get_scale_factor_for+0x9c>
        case DPS310_CFG_RATE_1_MEAS:
            *p_factor = 524288;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d6c:	601a      	str	r2, [r3, #0]
            break;
 8002d6e:	e025      	b.n	8002dbc <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_2_MEAS:
            *p_factor = 1572864;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8002d76:	601a      	str	r2, [r3, #0]
            break;
 8002d78:	e020      	b.n	8002dbc <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_4_MEAS:
            *p_factor = 3670016;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8002d80:	601a      	str	r2, [r3, #0]
            break;
 8002d82:	e01b      	b.n	8002dbc <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_8_MEAS:
            *p_factor = 7864320;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002d8a:	601a      	str	r2, [r3, #0]
            break;
 8002d8c:	e016      	b.n	8002dbc <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_16_MEAS:
            *p_factor = 253952;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 8002d94:	601a      	str	r2, [r3, #0]
            break;
 8002d96:	e011      	b.n	8002dbc <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_32_MEAS:
            *p_factor = 516096;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 8002d9e:	601a      	str	r2, [r3, #0]
            break;
 8002da0:	e00c      	b.n	8002dbc <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_64_MEAS:
            *p_factor = 1040384;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 8002da8:	601a      	str	r2, [r3, #0]
            break;
 8002daa:	e007      	b.n	8002dbc <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_128_MEAS:
            *p_factor = 2088960;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8002db2:	601a      	str	r2, [r3, #0]
            break;
 8002db4:	e002      	b.n	8002dbc <get_scale_factor_for+0xa2>
        default:
            ret = DPS310_UNKNOWN_RATE_ERROR;
 8002db6:	f06f 0304 	mvn.w	r3, #4
 8002dba:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	b21b      	sxth	r3, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <get_two_complement_of>:

int32_t get_two_complement_of(uint32_t value, uint8_t length) {
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	70fb      	strb	r3, [r7, #3]
    int32_t ret = value;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	60fb      	str	r3, [r7, #12]
    bool b_is_negative = value & (1u << (length - 1u));
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	2201      	movs	r2, #1
 8002de2:	409a      	lsls	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	72fb      	strb	r3, [r7, #11]

    if (b_is_negative) {
 8002df2:	7afb      	ldrb	r3, [r7, #11]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d006      	beq.n	8002e06 <get_two_complement_of+0x3a>
        ret -= ((uint32_t) 1 << length);
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8002e06:	68fb      	ldr	r3, [r7, #12]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <product_id_check>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t product_id_check() {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PRODUCT_ID_REG, buff, 1);
 8002e1a:	1d3a      	adds	r2, r7, #4
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	210d      	movs	r1, #13
 8002e20:	20ee      	movs	r0, #238	; 0xee
 8002e22:	f7ff fc81 	bl	8002728 <dps310_i2c_read>
 8002e26:	4603      	mov	r3, r0
 8002e28:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 8002e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <product_id_check+0x24>
 8002e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e36:	e00f      	b.n	8002e58 <product_id_check+0x44>

    bool b_is_product_id_valid = buff[0] == DPS310_PRODUCT_ID_VALUE;
 8002e38:	793b      	ldrb	r3, [r7, #4]
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	bf0c      	ite	eq
 8002e3e:	2301      	moveq	r3, #1
 8002e40:	2300      	movne	r3, #0
 8002e42:	717b      	strb	r3, [r7, #5]
    if (!b_is_product_id_valid) return DPS310_PRODUCT_ID_ERROR;
 8002e44:	797b      	ldrb	r3, [r7, #5]
 8002e46:	f083 0301 	eor.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <product_id_check+0x42>
 8002e50:	f06f 0301 	mvn.w	r3, #1
 8002e54:	e000      	b.n	8002e58 <product_id_check+0x44>

    return DPS310_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <get_temperature_sensor>:

int16_t get_temperature_sensor(uint8_t *p_sensor) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
    uint16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_COEF_SRCE, buff, 1);
 8002e68:	f107 020c 	add.w	r2, r7, #12
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	2128      	movs	r1, #40	; 0x28
 8002e70:	20ee      	movs	r0, #238	; 0xee
 8002e72:	f7ff fc59 	bl	8002728 <dps310_i2c_read>
 8002e76:	4603      	mov	r3, r0
 8002e78:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 8002e7a:	89fb      	ldrh	r3, [r7, #14]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <get_temperature_sensor+0x26>
 8002e80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e84:	e00e      	b.n	8002ea4 <get_temperature_sensor+0x44>

    uint8_t value = buff[0] & DPS310_TMP_COEF_SRCE_MASK;
 8002e86:	7b3b      	ldrb	r3, [r7, #12]
 8002e88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002e8c:	737b      	strb	r3, [r7, #13]

    if (value) {
 8002e8e:	7b7b      	ldrb	r3, [r7, #13]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <get_temperature_sensor+0x3c>
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e002      	b.n	8002ea2 <get_temperature_sensor+0x42>
    } else {
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_INTERNAL;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
    }

    return DPS310_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <Transmit_Pressure_Temp_Data>:


PressureTempData Transmit_Pressure_Temp_Data(){
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0


	  pressure_read_state = read_pressure(&pressure_value);
 8002eb2:	4822      	ldr	r0, [pc, #136]	; (8002f3c <Transmit_Pressure_Temp_Data+0x90>)
 8002eb4:	f7ff fe30 	bl	8002b18 <read_pressure>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <Transmit_Pressure_Temp_Data+0x94>)
 8002ebe:	801a      	strh	r2, [r3, #0]
	  temperature_p_state = read_temperature(&temperature_p_value);
 8002ec0:	4820      	ldr	r0, [pc, #128]	; (8002f44 <Transmit_Pressure_Temp_Data+0x98>)
 8002ec2:	f7ff fda7 	bl	8002a14 <read_temperature>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <Transmit_Pressure_Temp_Data+0x9c>)
 8002ecc:	801a      	strh	r2, [r3, #0]

	  if(pressure_read_state == 0 && temperature_p_state == 0){
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <Transmit_Pressure_Temp_Data+0x94>)
 8002ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d114      	bne.n	8002f02 <Transmit_Pressure_Temp_Data+0x56>
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <Transmit_Pressure_Temp_Data+0x9c>)
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10f      	bne.n	8002f02 <Transmit_Pressure_Temp_Data+0x56>
		    pressure_temp_data.pressure_hpa = pressure_value;
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <Transmit_Pressure_Temp_Data+0x90>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <Transmit_Pressure_Temp_Data+0xa0>)
 8002ee8:	6013      	str	r3, [r2, #0]
		    pressure_temp_data.temperature_celsius = temperature_p_value;
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <Transmit_Pressure_Temp_Data+0x98>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <Transmit_Pressure_Temp_Data+0xa0>)
 8002ef0:	6053      	str	r3, [r2, #4]

		    return pressure_temp_data;
 8002ef2:	4a16      	ldr	r2, [pc, #88]	; (8002f4c <Transmit_Pressure_Temp_Data+0xa0>)
 8002ef4:	f107 0308 	add.w	r3, r7, #8
 8002ef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002efc:	e883 0003 	stmia.w	r3, {r0, r1}
 8002f00:	e00e      	b.n	8002f20 <Transmit_Pressure_Temp_Data+0x74>
	  } else {
		    pressure_temp_data.pressure_hpa = 0;
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <Transmit_Pressure_Temp_Data+0xa0>)
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
		    pressure_temp_data.temperature_celsius = 0;
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <Transmit_Pressure_Temp_Data+0xa0>)
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	605a      	str	r2, [r3, #4]

		    return pressure_temp_data;
 8002f12:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <Transmit_Pressure_Temp_Data+0xa0>)
 8002f14:	f107 0308 	add.w	r3, r7, #8
 8002f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f1c:	e883 0003 	stmia.w	r3, {r0, r1}
	  }


}
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	ee07 2a10 	vmov	s14, r2
 8002f28:	ee07 3a90 	vmov	s15, r3
 8002f2c:	eeb0 0a47 	vmov.f32	s0, s14
 8002f30:	eef0 0a67 	vmov.f32	s1, s15
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20003960 	.word	0x20003960
 8002f40:	20003968 	.word	0x20003968
 8002f44:	20003964 	.word	0x20003964
 8002f48:	2000396a 	.word	0x2000396a
 8002f4c:	2000396c 	.word	0x2000396c

08002f50 <UART_Transmit_Pyro>:
 */

#include "pyro.h"

void UART_Transmit_Pyro(const char* str)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7fd f989 	bl	8000270 <strlen>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4803      	ldr	r0, [pc, #12]	; (8002f78 <UART_Transmit_Pyro+0x28>)
 8002f6a:	f006 ff1c 	bl	8009da6 <HAL_UART_Transmit>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20004878 	.word	0x20004878

08002f7c <pyro_arm>:

// Function to arm the pyro charge
void pyro_arm(int pyroSlot) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
    if (pyroSlot == 1) {
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <pyro_arm+0x1a>
        // Arm Pyro 1 (set the GPIO pin low)
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_RESET);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2140      	movs	r1, #64	; 0x40
 8002f8e:	4808      	ldr	r0, [pc, #32]	; (8002fb0 <pyro_arm+0x34>)
 8002f90:	f003 fa4c 	bl	800642c <HAL_GPIO_WritePin>
    } else if (pyroSlot == 2) {
        // Arm Pyro 2 (set the GPIO pin low)
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
    }
}
 8002f94:	e007      	b.n	8002fa6 <pyro_arm+0x2a>
    } else if (pyroSlot == 2) {
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d104      	bne.n	8002fa6 <pyro_arm+0x2a>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <pyro_arm+0x38>)
 8002fa2:	f003 fa43 	bl	800642c <HAL_GPIO_WritePin>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40020400 	.word	0x40020400
 8002fb4:	40020000 	.word	0x40020000

08002fb8 <pyro_fire>:

// Function to fire the pyro charge
void pyro_fire(int pyroSlot) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
    if (pyroSlot == 1) {
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d114      	bne.n	8002ff0 <pyro_fire+0x38>
        // Fire Pyro 1 (set the GPIO pin high)
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_SET);
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	2140      	movs	r1, #64	; 0x40
 8002fca:	4817      	ldr	r0, [pc, #92]	; (8003028 <pyro_fire+0x70>)
 8002fcc:	f003 fa2e 	bl	800642c <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Ignition..");
 8002fd0:	4816      	ldr	r0, [pc, #88]	; (800302c <pyro_fire+0x74>)
 8002fd2:	f7ff ffbd 	bl	8002f50 <UART_Transmit_Pyro>
        HAL_Delay(PYRO_IGNITION_TIME);
 8002fd6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002fda:	f002 fc51 	bl	8005880 <HAL_Delay>
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_RESET);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2140      	movs	r1, #64	; 0x40
 8002fe2:	4811      	ldr	r0, [pc, #68]	; (8003028 <pyro_fire+0x70>)
 8002fe4:	f003 fa22 	bl	800642c <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Finished.\r\n");
 8002fe8:	4811      	ldr	r0, [pc, #68]	; (8003030 <pyro_fire+0x78>)
 8002fea:	f7ff ffb1 	bl	8002f50 <UART_Transmit_Pyro>
        UART_Transmit_Pyro("Ignition..");
        HAL_Delay(PYRO_IGNITION_TIME);
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
        UART_Transmit_Pyro("Finished.\r\n");
    }
}
 8002fee:	e016      	b.n	800301e <pyro_fire+0x66>
    } else if (pyroSlot == 2) {
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d113      	bne.n	800301e <pyro_fire+0x66>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_SET);
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	480e      	ldr	r0, [pc, #56]	; (8003034 <pyro_fire+0x7c>)
 8002ffc:	f003 fa16 	bl	800642c <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Ignition..");
 8003000:	480a      	ldr	r0, [pc, #40]	; (800302c <pyro_fire+0x74>)
 8003002:	f7ff ffa5 	bl	8002f50 <UART_Transmit_Pyro>
        HAL_Delay(PYRO_IGNITION_TIME);
 8003006:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800300a:	f002 fc39 	bl	8005880 <HAL_Delay>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
 800300e:	2200      	movs	r2, #0
 8003010:	2101      	movs	r1, #1
 8003012:	4808      	ldr	r0, [pc, #32]	; (8003034 <pyro_fire+0x7c>)
 8003014:	f003 fa0a 	bl	800642c <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Finished.\r\n");
 8003018:	4805      	ldr	r0, [pc, #20]	; (8003030 <pyro_fire+0x78>)
 800301a:	f7ff ff99 	bl	8002f50 <UART_Transmit_Pyro>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40020400 	.word	0x40020400
 800302c:	0801f7e0 	.word	0x0801f7e0
 8003030:	0801f7ec 	.word	0x0801f7ec
 8003034:	40020000 	.word	0x40020000

08003038 <Transmit_Temperature>:
{
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}


TemperatureData Transmit_Temperature(){
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af02      	add	r7, sp, #8


	buffer[0] = TEMP_READ_ADDRESS;
 800303e:	4b40      	ldr	r3, [pc, #256]	; (8003140 <Transmit_Temperature+0x108>)
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
	//UART_Transmit_String("Reading temperature..\r\n");
	ret = HAL_I2C_Master_Transmit(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,1,HAL_MAX_DELAY);
 8003044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	2301      	movs	r3, #1
 800304c:	4a3c      	ldr	r2, [pc, #240]	; (8003140 <Transmit_Temperature+0x108>)
 800304e:	2190      	movs	r1, #144	; 0x90
 8003050:	483c      	ldr	r0, [pc, #240]	; (8003144 <Transmit_Temperature+0x10c>)
 8003052:	f003 fb6d 	bl	8006730 <HAL_I2C_Master_Transmit>
 8003056:	4603      	mov	r3, r0
 8003058:	461a      	mov	r2, r3
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <Transmit_Temperature+0x110>)
 800305c:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK){
 800305e:	4b3a      	ldr	r3, [pc, #232]	; (8003148 <Transmit_Temperature+0x110>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d006      	beq.n	8003074 <Transmit_Temperature+0x3c>
		UART_Transmit_String("Error communicating with Temperature sensor");
 8003066:	4839      	ldr	r0, [pc, #228]	; (800314c <Transmit_Temperature+0x114>)
 8003068:	f7fe fb38 	bl	80016dc <UART_Transmit_String>
		UART_Transmit_String("\r\n");
 800306c:	4838      	ldr	r0, [pc, #224]	; (8003150 <Transmit_Temperature+0x118>)
 800306e:	f7fe fb35 	bl	80016dc <UART_Transmit_String>
 8003072:	e059      	b.n	8003128 <Transmit_Temperature+0xf0>
	} else{
		ret = HAL_I2C_Master_Receive(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,2,HAL_MAX_DELAY);
 8003074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	2302      	movs	r3, #2
 800307c:	4a30      	ldr	r2, [pc, #192]	; (8003140 <Transmit_Temperature+0x108>)
 800307e:	2190      	movs	r1, #144	; 0x90
 8003080:	4830      	ldr	r0, [pc, #192]	; (8003144 <Transmit_Temperature+0x10c>)
 8003082:	f003 fc53 	bl	800692c <HAL_I2C_Master_Receive>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	4b2f      	ldr	r3, [pc, #188]	; (8003148 <Transmit_Temperature+0x110>)
 800308c:	701a      	strb	r2, [r3, #0]
		if (ret != HAL_OK){
 800308e:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <Transmit_Temperature+0x110>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d006      	beq.n	80030a4 <Transmit_Temperature+0x6c>
			UART_Transmit_String("Error receiving data from Temperature sensor");
 8003096:	482f      	ldr	r0, [pc, #188]	; (8003154 <Transmit_Temperature+0x11c>)
 8003098:	f7fe fb20 	bl	80016dc <UART_Transmit_String>
			UART_Transmit_String("\r\n");
 800309c:	482c      	ldr	r0, [pc, #176]	; (8003150 <Transmit_Temperature+0x118>)
 800309e:	f7fe fb1d 	bl	80016dc <UART_Transmit_String>
 80030a2:	e041      	b.n	8003128 <Transmit_Temperature+0xf0>
		} else {
			//Combine the bytes
			val = ((int16_t)buffer[0] << 4) | (buffer[1] >> 4);
 80030a4:	4b26      	ldr	r3, [pc, #152]	; (8003140 <Transmit_Temperature+0x108>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	b21a      	sxth	r2, r3
 80030ac:	4b24      	ldr	r3, [pc, #144]	; (8003140 <Transmit_Temperature+0x108>)
 80030ae:	785b      	ldrb	r3, [r3, #1]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	4313      	orrs	r3, r2
 80030b8:	b21a      	sxth	r2, r3
 80030ba:	4b27      	ldr	r3, [pc, #156]	; (8003158 <Transmit_Temperature+0x120>)
 80030bc:	801a      	strh	r2, [r3, #0]

			//Convert to 2's complement (temperature can be negative)
			if(val > 0x7FF){
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <Transmit_Temperature+0x120>)
 80030c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c8:	db09      	blt.n	80030de <Transmit_Temperature+0xa6>
				val |= 0xF000;
 80030ca:	4b23      	ldr	r3, [pc, #140]	; (8003158 <Transmit_Temperature+0x120>)
 80030cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80030d4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80030d8:	b21a      	sxth	r2, r3
 80030da:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <Transmit_Temperature+0x120>)
 80030dc:	801a      	strh	r2, [r3, #0]
			}

			//Convert to float temperature value (Celsius)
			temp_c = val * 0.0625; // 0.0625 can be retreived into the datasheet
 80030de:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <Transmit_Temperature+0x120>)
 80030e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd fa27 	bl	8000538 <__aeabi_i2d>
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	4b1b      	ldr	r3, [pc, #108]	; (800315c <Transmit_Temperature+0x124>)
 80030f0:	f7fd fa8c 	bl	800060c <__aeabi_dmul>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	f7fd fd7e 	bl	8000bfc <__aeabi_d2f>
 8003100:	4603      	mov	r3, r0
 8003102:	4a17      	ldr	r2, [pc, #92]	; (8003160 <Transmit_Temperature+0x128>)
 8003104:	6013      	str	r3, [r2, #0]

			//Convert to temperature to decimal format
			temp_c *= 100;
 8003106:	4b16      	ldr	r3, [pc, #88]	; (8003160 <Transmit_Temperature+0x128>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003164 <Transmit_Temperature+0x12c>
 8003110:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <Transmit_Temperature+0x128>)
 8003116:	edc3 7a00 	vstr	s15, [r3]

			temperature_data.temperature_celsius = temp_c;
 800311a:	4b11      	ldr	r3, [pc, #68]	; (8003160 <Transmit_Temperature+0x128>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a12      	ldr	r2, [pc, #72]	; (8003168 <Transmit_Temperature+0x130>)
 8003120:	6013      	str	r3, [r2, #0]

			return temperature_data;
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <Transmit_Temperature+0x130>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	e004      	b.n	8003132 <Transmit_Temperature+0xfa>

		}
	}

	//Error State
	temperature_data.temperature_celsius = -100.00;
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <Transmit_Temperature+0x130>)
 800312a:	4a10      	ldr	r2, [pc, #64]	; (800316c <Transmit_Temperature+0x134>)
 800312c:	601a      	str	r2, [r3, #0]
	return temperature_data;
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <Transmit_Temperature+0x130>)
 8003130:	681b      	ldr	r3, [r3, #0]

}
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eeb0 0a67 	vmov.f32	s0, s15
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20003978 	.word	0x20003978
 8003144:	20004680 	.word	0x20004680
 8003148:	20003974 	.word	0x20003974
 800314c:	0801f7f8 	.word	0x0801f7f8
 8003150:	0801f824 	.word	0x0801f824
 8003154:	0801f828 	.word	0x0801f828
 8003158:	20003984 	.word	0x20003984
 800315c:	3fb00000 	.word	0x3fb00000
 8003160:	20003988 	.word	0x20003988
 8003164:	42c80000 	.word	0x42c80000
 8003168:	2000398c 	.word	0x2000398c
 800316c:	c2c80000 	.word	0xc2c80000

08003170 <circ_buffer_enqueue>:
 * @param 	data	: 	Array of bytes to add to the buffer
 *
 * @param 	size 	:	Size of the data array
 */
void circ_buffer_enqueue(circ_buffer_t *cb, uint8_t* data, uint8_t size)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	71fb      	strb	r3, [r7, #7]
	if ((cb->end + 1) % BUFFER_SIZE == cb->start)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 8003184:	1c59      	adds	r1, r3, #1
 8003186:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <circ_buffer_enqueue+0x90>)
 8003188:	fb83 2301 	smull	r2, r3, r3, r1
 800318c:	105a      	asrs	r2, r3, #1
 800318e:	17cb      	asrs	r3, r1, #31
 8003190:	1ad2      	subs	r2, r2, r3
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	1aca      	subs	r2, r1, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d029      	beq.n	80031f8 <circ_buffer_enqueue+0x88>
	{
		// Buffer is full, do not add new element
		return;
	}
	memcpy(cb->buffer[cb->end], data, size * sizeof(uint8_t));
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 80031aa:	461a      	mov	r2, r3
 80031ac:	23f5      	movs	r3, #245	; 0xf5
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4413      	add	r3, r2
 80031b6:	79fa      	ldrb	r2, [r7, #7]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f016 feee 	bl	8019f9c <memcpy>
	cb->elementSizes[cb->end] = size;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 80031c6:	461a      	mov	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	79fa      	ldrb	r2, [r7, #7]
 80031ce:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
	cb->end = (cb->end + 1) % BUFFER_SIZE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <circ_buffer_enqueue+0x90>)
 80031dc:	fb83 1302 	smull	r1, r3, r3, r2
 80031e0:	1059      	asrs	r1, r3, #1
 80031e2:	17d3      	asrs	r3, r2, #31
 80031e4:	1ac9      	subs	r1, r1, r3
 80031e6:	460b      	mov	r3, r1
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	1ad1      	subs	r1, r2, r3
 80031ee:	b2ca      	uxtb	r2, r1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 80031f6:	e000      	b.n	80031fa <circ_buffer_enqueue+0x8a>
		return;
 80031f8:	bf00      	nop
}
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	66666667 	.word	0x66666667

08003204 <circ_buffer_dequeue>:
 * @param 	size	:	Pointer to an integer to store the size of the returned array
 *
 * @return 	Pointer to the first element in the buffer
 */
uint8_t* circ_buffer_dequeue(circ_buffer_t *cb, uint8_t *size)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	uint8_t *element = cb->buffer[cb->start];
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 8003214:	461a      	mov	r2, r3
 8003216:	23f5      	movs	r3, #245	; 0xf5
 8003218:	fb02 f303 	mul.w	r3, r2, r3
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
	if (size)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <circ_buffer_dequeue+0x38>
	{
		*size = cb->elementSizes[cb->start];
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	f893 24cb 	ldrb.w	r2, [r3, #1227]	; 0x4cb
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	701a      	strb	r2, [r3, #0]
	}
	cb->start = (cb->start + 1) % BUFFER_SIZE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <circ_buffer_dequeue+0x6c>)
 8003246:	fb83 1302 	smull	r1, r3, r3, r2
 800324a:	1059      	asrs	r1, r3, #1
 800324c:	17d3      	asrs	r3, r2, #31
 800324e:	1ac9      	subs	r1, r1, r3
 8003250:	460b      	mov	r3, r1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	1ad1      	subs	r1, r2, r3
 8003258:	b2ca      	uxtb	r2, r1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
	return element;
 8003260:	68fb      	ldr	r3, [r7, #12]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	66666667 	.word	0x66666667

08003274 <circ_buffer_getNextSize>:
 * @param 	cb		: 	Pointer to the circular buffer
 *
 * @return 	Number	: 	of arrays in the buffer
 */
uint8_t circ_buffer_getNextSize(circ_buffer_t *cb)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	if (cb->start == cb->end)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 24c9 	ldrb.w	r2, [r3, #1225]	; 0x4c9
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
 8003288:	429a      	cmp	r2, r3
 800328a:	d101      	bne.n	8003290 <circ_buffer_getNextSize+0x1c>
	{
		return 0;
 800328c:	2300      	movs	r3, #0
 800328e:	e007      	b.n	80032a0 <circ_buffer_getNextSize+0x2c>
	}
	else
	{
		return cb->elementSizes[cb->start];
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 8003296:	461a      	mov	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4413      	add	r3, r2
 800329c:	f893 34cb 	ldrb.w	r3, [r3, #1227]	; 0x4cb
	}
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <e22_lora_init>:
					void* transmissionFunc,
					void* receptionFunc,
					void* receptionCallbackFunc,
					void* configModeFunc,
					void* TransceiverModeFunc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
 80032b8:	603b      	str	r3, [r7, #0]
	hE22.huart 						= huart;
 80032ba:	4a15      	ldr	r2, [pc, #84]	; (8003310 <e22_lora_init+0x64>)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6013      	str	r3, [r2, #0]
	hE22.loraTransmit 				= transmissionFunc;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4a13      	ldr	r2, [pc, #76]	; (8003310 <e22_lora_init+0x64>)
 80032c4:	6053      	str	r3, [r2, #4]
	hE22.loraStartReception 		= receptionFunc;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a11      	ldr	r2, [pc, #68]	; (8003310 <e22_lora_init+0x64>)
 80032ca:	6093      	str	r3, [r2, #8]
	hE22.loraReceive		 		= receptionCallbackFunc;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4a10      	ldr	r2, [pc, #64]	; (8003310 <e22_lora_init+0x64>)
 80032d0:	60d3      	str	r3, [r2, #12]
	hE22.loraConfigurationMode 		= configModeFunc;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	4a0e      	ldr	r2, [pc, #56]	; (8003310 <e22_lora_init+0x64>)
 80032d6:	6153      	str	r3, [r2, #20]
	hE22.loraTransceiverMode		= TransceiverModeFunc;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <e22_lora_init+0x64>)
 80032dc:	6113      	str	r3, [r2, #16]

	//Assign DMA buffer pointers.
	hE22.pRxDmaBuffer = rxDmaBuffer;
 80032de:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <e22_lora_init+0x64>)
 80032e0:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <e22_lora_init+0x68>)
 80032e2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
	hE22.pTxDmaBuffer = txDmaBuffer;
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <e22_lora_init+0x64>)
 80032e8:	4a0b      	ldr	r2, [pc, #44]	; (8003318 <e22_lora_init+0x6c>)
 80032ea:	f8c3 2ab4 	str.w	r2, [r3, #2740]	; 0xab4
	//transceiver mode as default
	hE22.loraTransceiverMode();
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <e22_lora_init+0x64>)
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	4798      	blx	r3

	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <e22_lora_init+0x64>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a05      	ldr	r2, [pc, #20]	; (8003310 <e22_lora_init+0x64>)
 80032fa:	6810      	ldr	r0, [r2, #0]
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <e22_lora_init+0x64>)
 80032fe:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	; 0xab0
 8003302:	22f0      	movs	r2, #240	; 0xf0
 8003304:	4798      	blx	r3
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20003990 	.word	0x20003990
 8003314:	20004448 	.word	0x20004448
 8003318:	20004538 	.word	0x20004538

0800331c <e22_lora_transnit>:
 *
 * @param channel	:	RF channel to send data over
 *
 */
void e22_lora_transnit(uint8_t *pData, uint16_t size, uint16_t address, uint8_t channel)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	4608      	mov	r0, r1
 8003326:	4611      	mov	r1, r2
 8003328:	461a      	mov	r2, r3
 800332a:	4603      	mov	r3, r0
 800332c:	817b      	strh	r3, [r7, #10]
 800332e:	460b      	mov	r3, r1
 8003330:	813b      	strh	r3, [r7, #8]
 8003332:	4613      	mov	r3, r2
 8003334:	71fb      	strb	r3, [r7, #7]
	const uint8_t overheadSize = 3;
 8003336:	2303      	movs	r3, #3
 8003338:	75fb      	strb	r3, [r7, #23]

	memset(&hE22.packet, 0, sizeof(e22_packet_t));
 800333a:	22f4      	movs	r2, #244	; 0xf4
 800333c:	2100      	movs	r1, #0
 800333e:	4815      	ldr	r0, [pc, #84]	; (8003394 <e22_lora_transnit+0x78>)
 8003340:	f016 fd9e 	bl	8019e80 <memset>
	//Address 2 bytes swap
	hE22.packet.address = (address >> 8) | (address << 8);
 8003344:	893b      	ldrh	r3, [r7, #8]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	b29b      	uxth	r3, r3
 800334a:	b21a      	sxth	r2, r3
 800334c:	893b      	ldrh	r3, [r7, #8]
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	b21b      	sxth	r3, r3
 8003352:	4313      	orrs	r3, r2
 8003354:	b21b      	sxth	r3, r3
 8003356:	b29a      	uxth	r2, r3
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <e22_lora_transnit+0x7c>)
 800335a:	831a      	strh	r2, [r3, #24]

	hE22.packet.chanel = channel;
 800335c:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <e22_lora_transnit+0x7c>)
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	7693      	strb	r3, [r2, #26]

	hE22.txPortReady = true;
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <e22_lora_transnit+0x7c>)
 8003364:	2201      	movs	r2, #1
 8003366:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

	memcpy(&hE22.packet.dataBuffer, pData, size);
 800336a:	897b      	ldrh	r3, [r7, #10]
 800336c:	461a      	mov	r2, r3
 800336e:	68f9      	ldr	r1, [r7, #12]
 8003370:	480a      	ldr	r0, [pc, #40]	; (800339c <e22_lora_transnit+0x80>)
 8003372:	f016 fe13 	bl	8019f9c <memcpy>

	circ_buffer_enqueue(&hE22.txBuffer, (uint8_t*)&hE22.packet, size + overheadSize);
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	4413      	add	r3, r2
 800337e:	b2db      	uxtb	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	4904      	ldr	r1, [pc, #16]	; (8003394 <e22_lora_transnit+0x78>)
 8003384:	4806      	ldr	r0, [pc, #24]	; (80033a0 <e22_lora_transnit+0x84>)
 8003386:	f7ff fef3 	bl	8003170 <circ_buffer_enqueue>
}
 800338a:	bf00      	nop
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200039a8 	.word	0x200039a8
 8003398:	20003990 	.word	0x20003990
 800339c:	200039ab 	.word	0x200039ab
 80033a0:	20003a9e 	.word	0x20003a9e

080033a4 <e22_lora_manager>:
 * 			This function manages the E22 LoRa module by checking for packets in the TX circular buffer, dequeuing them, and transmitting
 * 			them via the E22 module.
 *
 */
void e22_lora_manager(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
	uint8_t packetSize = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	70fb      	strb	r3, [r7, #3]
	uint8_t* pPacket = NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
	//check for packet in TX circular buffer
	if(circ_buffer_getNextSize(&hE22.txBuffer))
 80033b2:	481e      	ldr	r0, [pc, #120]	; (800342c <e22_lora_manager+0x88>)
 80033b4:	f7ff ff5e 	bl	8003274 <circ_buffer_getNextSize>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d020      	beq.n	8003400 <e22_lora_manager+0x5c>
	{
//		uint8_t packetSize = 0;
//		uint8_t* pPacket = NULL;
		if(hE22.txPortReady)
 80033be:	4b1c      	ldr	r3, [pc, #112]	; (8003430 <e22_lora_manager+0x8c>)
 80033c0:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01b      	beq.n	8003400 <e22_lora_manager+0x5c>
		{
			hE22.txPortReady = false;
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <e22_lora_manager+0x8c>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			// Dequeue packet from circular buffer
			pPacket = circ_buffer_dequeue(&hE22.txBuffer, &packetSize);
 80033d0:	1cfb      	adds	r3, r7, #3
 80033d2:	4619      	mov	r1, r3
 80033d4:	4815      	ldr	r0, [pc, #84]	; (800342c <e22_lora_manager+0x88>)
 80033d6:	f7ff ff15 	bl	8003204 <circ_buffer_dequeue>
 80033da:	6078      	str	r0, [r7, #4]
			// Copy packet to DMA buffer
			memcpy(hE22.pTxDmaBuffer ,pPacket, packetSize);
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <e22_lora_manager+0x8c>)
 80033de:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	; 0xab4
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f016 fdd8 	bl	8019f9c <memcpy>
			// Transmit packet via the E22 module
			hE22.loraTransmit(hE22.huart, hE22.pTxDmaBuffer, packetSize);
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <e22_lora_manager+0x8c>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a0f      	ldr	r2, [pc, #60]	; (8003430 <e22_lora_manager+0x8c>)
 80033f2:	6810      	ldr	r0, [r2, #0]
 80033f4:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <e22_lora_manager+0x8c>)
 80033f6:	f8d2 1ab4 	ldr.w	r1, [r2, #2740]	; 0xab4
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	b292      	uxth	r2, r2
 80033fe:	4798      	blx	r3
		}
	}
	//check for packet in RX circular buffer
	if(circ_buffer_getNextSize(&hE22.rxBuffer))
 8003400:	480c      	ldr	r0, [pc, #48]	; (8003434 <e22_lora_manager+0x90>)
 8003402:	f7ff ff37 	bl	8003274 <circ_buffer_getNextSize>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <e22_lora_manager+0x80>
	{
		pPacket = circ_buffer_dequeue(&hE22.rxBuffer, &packetSize);
 800340c:	1cfb      	adds	r3, r7, #3
 800340e:	4619      	mov	r1, r3
 8003410:	4808      	ldr	r0, [pc, #32]	; (8003434 <e22_lora_manager+0x90>)
 8003412:	f7ff fef7 	bl	8003204 <circ_buffer_dequeue>
 8003416:	6078      	str	r0, [r7, #4]
		hE22.loraReceive(pPacket, packetSize);
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <e22_lora_manager+0x8c>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	4611      	mov	r1, r2
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4798      	blx	r3
	}
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20003a9e 	.word	0x20003a9e
 8003430:	20003990 	.word	0x20003990
 8003434:	20003f6e 	.word	0x20003f6e

08003438 <e22_lora_make_ready>:
/**
 * @brief 	Make transmission line status ready at TX complete callback
 *
 */
void e22_lora_make_ready(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
	hE22.txPortReady = true;
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <e22_lora_make_ready+0x18>)
 800343e:	2201      	movs	r2, #1
 8003440:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20003990 	.word	0x20003990

08003454 <e22_lora_reception_complete>:
/**
 * @brief 	this function should be called at the UART RX complete callback.
 *
 */
void e22_lora_reception_complete(uint8_t size)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	71fb      	strb	r3, [r7, #7]
	circ_buffer_enqueue(&hE22.rxBuffer, (uint8_t*)hE22.pRxDmaBuffer, size);
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <e22_lora_reception_complete+0x34>)
 8003460:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8003464:	79fa      	ldrb	r2, [r7, #7]
 8003466:	4619      	mov	r1, r3
 8003468:	4808      	ldr	r0, [pc, #32]	; (800348c <e22_lora_reception_complete+0x38>)
 800346a:	f7ff fe81 	bl	8003170 <circ_buffer_enqueue>
	//Activate UART reception again
	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <e22_lora_reception_complete+0x34>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	4a05      	ldr	r2, [pc, #20]	; (8003488 <e22_lora_reception_complete+0x34>)
 8003474:	6810      	ldr	r0, [r2, #0]
 8003476:	4a04      	ldr	r2, [pc, #16]	; (8003488 <e22_lora_reception_complete+0x34>)
 8003478:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	; 0xab0
 800347c:	22f0      	movs	r2, #240	; 0xf0
 800347e:	4798      	blx	r3
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20003990 	.word	0x20003990
 800348c:	20003f6e 	.word	0x20003f6e

08003490 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003494:	2200      	movs	r2, #0
 8003496:	2110      	movs	r1, #16
 8003498:	4803      	ldr	r0, [pc, #12]	; (80034a8 <SELECT+0x18>)
 800349a:	f002 ffc7 	bl	800642c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800349e:	2001      	movs	r0, #1
 80034a0:	f002 f9ee 	bl	8005880 <HAL_Delay>
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40020000 	.word	0x40020000

080034ac <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80034b0:	2201      	movs	r2, #1
 80034b2:	2110      	movs	r1, #16
 80034b4:	4803      	ldr	r0, [pc, #12]	; (80034c4 <DESELECT+0x18>)
 80034b6:	f002 ffb9 	bl	800642c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80034ba:	2001      	movs	r0, #1
 80034bc:	f002 f9e0 	bl	8005880 <HAL_Delay>
}
 80034c0:	bf00      	nop
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40020000 	.word	0x40020000

080034c8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80034d2:	bf00      	nop
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <SPI_TxByte+0x30>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d1f8      	bne.n	80034d4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80034e2:	1df9      	adds	r1, r7, #7
 80034e4:	2364      	movs	r3, #100	; 0x64
 80034e6:	2201      	movs	r2, #1
 80034e8:	4803      	ldr	r0, [pc, #12]	; (80034f8 <SPI_TxByte+0x30>)
 80034ea:	f005 face 	bl	8008a8a <HAL_SPI_Transmit>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20004748 	.word	0x20004748

080034fc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003508:	bf00      	nop
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <SPI_TxBuffer+0x30>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	d1f8      	bne.n	800350a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8003518:	887a      	ldrh	r2, [r7, #2]
 800351a:	2364      	movs	r3, #100	; 0x64
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4803      	ldr	r0, [pc, #12]	; (800352c <SPI_TxBuffer+0x30>)
 8003520:	f005 fab3 	bl	8008a8a <HAL_SPI_Transmit>
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20004748 	.word	0x20004748

08003530 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8003536:	23ff      	movs	r3, #255	; 0xff
 8003538:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800353a:	bf00      	nop
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <SPI_RxByte+0x34>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b02      	cmp	r3, #2
 8003548:	d1f8      	bne.n	800353c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800354a:	1dba      	adds	r2, r7, #6
 800354c:	1df9      	adds	r1, r7, #7
 800354e:	2364      	movs	r3, #100	; 0x64
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	2301      	movs	r3, #1
 8003554:	4803      	ldr	r0, [pc, #12]	; (8003564 <SPI_RxByte+0x34>)
 8003556:	f005 fbd4 	bl	8008d02 <HAL_SPI_TransmitReceive>

	return data;
 800355a:	79bb      	ldrb	r3, [r7, #6]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20004748 	.word	0x20004748

08003568 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8003570:	f7ff ffde 	bl	8003530 <SPI_RxByte>
 8003574:	4603      	mov	r3, r0
 8003576:	461a      	mov	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	701a      	strb	r2, [r3, #0]
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <SD_ReadyWait+0x30>)
 800358c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003590:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8003592:	f7ff ffcd 	bl	8003530 <SPI_RxByte>
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	2bff      	cmp	r3, #255	; 0xff
 800359e:	d003      	beq.n	80035a8 <SD_ReadyWait+0x24>
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <SD_ReadyWait+0x30>)
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f4      	bne.n	8003592 <SD_ReadyWait+0xe>

	return res;
 80035a8:	79fb      	ldrb	r3, [r7, #7]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	2000462a 	.word	0x2000462a

080035b8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80035be:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80035c2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80035c4:	f7ff ff72 	bl	80034ac <DESELECT>
	for(int i = 0; i < 10; i++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	e005      	b.n	80035da <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80035ce:	20ff      	movs	r0, #255	; 0xff
 80035d0:	f7ff ff7a 	bl	80034c8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	3301      	adds	r3, #1
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b09      	cmp	r3, #9
 80035de:	ddf6      	ble.n	80035ce <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80035e0:	f7ff ff56 	bl	8003490 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80035e4:	2340      	movs	r3, #64	; 0x40
 80035e6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80035f8:	2395      	movs	r3, #149	; 0x95
 80035fa:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80035fc:	463b      	mov	r3, r7
 80035fe:	2106      	movs	r1, #6
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff7b 	bl	80034fc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003606:	e002      	b.n	800360e <SD_PowerOn+0x56>
	{
		cnt--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3b01      	subs	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800360e:	f7ff ff8f 	bl	8003530 <SPI_RxByte>
 8003612:	4603      	mov	r3, r0
 8003614:	2b01      	cmp	r3, #1
 8003616:	d002      	beq.n	800361e <SD_PowerOn+0x66>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f4      	bne.n	8003608 <SD_PowerOn+0x50>
	}

	DESELECT();
 800361e:	f7ff ff45 	bl	80034ac <DESELECT>
	SPI_TxByte(0XFF);
 8003622:	20ff      	movs	r0, #255	; 0xff
 8003624:	f7ff ff50 	bl	80034c8 <SPI_TxByte>

	PowerFlag = 1;
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <SD_PowerOn+0x80>)
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
}
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000462d 	.word	0x2000462d

0800363c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <SD_PowerOff+0x14>)
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
}
 8003646:	bf00      	nop
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	2000462d 	.word	0x2000462d

08003654 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003658:	4b03      	ldr	r3, [pc, #12]	; (8003668 <SD_CheckPower+0x14>)
 800365a:	781b      	ldrb	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	2000462d 	.word	0x2000462d

0800366c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <SD_RxDataBlock+0x58>)
 8003678:	22c8      	movs	r2, #200	; 0xc8
 800367a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800367c:	f7ff ff58 	bl	8003530 <SPI_RxByte>
 8003680:	4603      	mov	r3, r0
 8003682:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2bff      	cmp	r3, #255	; 0xff
 8003688:	d103      	bne.n	8003692 <SD_RxDataBlock+0x26>
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <SD_RxDataBlock+0x58>)
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f4      	bne.n	800367c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	2bfe      	cmp	r3, #254	; 0xfe
 8003696:	d001      	beq.n	800369c <SD_RxDataBlock+0x30>
 8003698:	2300      	movs	r3, #0
 800369a:	e00f      	b.n	80036bc <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff ff60 	bl	8003568 <SPI_RxBytePtr>
	} while(len--);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	1e5a      	subs	r2, r3, #1
 80036ac:	603a      	str	r2, [r7, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f4      	bne.n	800369c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80036b2:	f7ff ff3d 	bl	8003530 <SPI_RxByte>
	SPI_RxByte();
 80036b6:	f7ff ff3b 	bl	8003530 <SPI_RxByte>

	return TRUE;
 80036ba:	2301      	movs	r3, #1
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20004628 	.word	0x20004628

080036c8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80036d8:	f7ff ff54 	bl	8003584 <SD_ReadyWait>
 80036dc:	4603      	mov	r3, r0
 80036de:	2bff      	cmp	r3, #255	; 0xff
 80036e0:	d001      	beq.n	80036e6 <SD_TxDataBlock+0x1e>
 80036e2:	2300      	movs	r3, #0
 80036e4:	e02f      	b.n	8003746 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff feed 	bl	80034c8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	2bfd      	cmp	r3, #253	; 0xfd
 80036f2:	d020      	beq.n	8003736 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80036f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff feff 	bl	80034fc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80036fe:	f7ff ff17 	bl	8003530 <SPI_RxByte>
		SPI_RxByte();
 8003702:	f7ff ff15 	bl	8003530 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8003706:	e00b      	b.n	8003720 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8003708:	f7ff ff12 	bl	8003530 <SPI_RxByte>
 800370c:	4603      	mov	r3, r0
 800370e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2b05      	cmp	r3, #5
 8003718:	d006      	beq.n	8003728 <SD_TxDataBlock+0x60>
			i++;
 800371a:	7bbb      	ldrb	r3, [r7, #14]
 800371c:	3301      	adds	r3, #1
 800371e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8003720:	7bbb      	ldrb	r3, [r7, #14]
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d9f0      	bls.n	8003708 <SD_TxDataBlock+0x40>
 8003726:	e000      	b.n	800372a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8003728:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800372a:	bf00      	nop
 800372c:	f7ff ff00 	bl	8003530 <SPI_RxByte>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0fa      	beq.n	800372c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003736:	7bfb      	ldrb	r3, [r7, #15]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	2b05      	cmp	r3, #5
 800373e:	d101      	bne.n	8003744 <SD_TxDataBlock+0x7c>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <SD_TxDataBlock+0x7e>

	return FALSE;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	4603      	mov	r3, r0
 8003756:	6039      	str	r1, [r7, #0]
 8003758:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800375a:	f7ff ff13 	bl	8003584 <SD_ReadyWait>
 800375e:	4603      	mov	r3, r0
 8003760:	2bff      	cmp	r3, #255	; 0xff
 8003762:	d001      	beq.n	8003768 <SD_SendCmd+0x1a>
 8003764:	23ff      	movs	r3, #255	; 0xff
 8003766:	e042      	b.n	80037ee <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff feac 	bl	80034c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	0e1b      	lsrs	r3, r3, #24
 8003774:	b2db      	uxtb	r3, r3
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fea6 	bl	80034c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	0c1b      	lsrs	r3, r3, #16
 8003780:	b2db      	uxtb	r3, r3
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fea0 	bl	80034c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	b2db      	uxtb	r3, r3
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fe9a 	bl	80034c8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fe95 	bl	80034c8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d102      	bne.n	80037aa <SD_SendCmd+0x5c>
 80037a4:	2395      	movs	r3, #149	; 0x95
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	e007      	b.n	80037ba <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	2b48      	cmp	r3, #72	; 0x48
 80037ae:	d102      	bne.n	80037b6 <SD_SendCmd+0x68>
 80037b0:	2387      	movs	r3, #135	; 0x87
 80037b2:	73fb      	strb	r3, [r7, #15]
 80037b4:	e001      	b.n	80037ba <SD_SendCmd+0x6c>
	else crc = 1;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fe83 	bl	80034c8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2b4c      	cmp	r3, #76	; 0x4c
 80037c6:	d101      	bne.n	80037cc <SD_SendCmd+0x7e>
 80037c8:	f7ff feb2 	bl	8003530 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80037cc:	230a      	movs	r3, #10
 80037ce:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80037d0:	f7ff feae 	bl	8003530 <SPI_RxByte>
 80037d4:	4603      	mov	r3, r0
 80037d6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80037d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	da05      	bge.n	80037ec <SD_SendCmd+0x9e>
 80037e0:	7bbb      	ldrb	r3, [r7, #14]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	73bb      	strb	r3, [r7, #14]
 80037e6:	7bbb      	ldrb	r3, [r7, #14]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f1      	bne.n	80037d0 <SD_SendCmd+0x82>

	return res;
 80037ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <SD_disk_initialize+0x14>
 8003808:	2301      	movs	r3, #1
 800380a:	e0d1      	b.n	80039b0 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800380c:	4b6a      	ldr	r3, [pc, #424]	; (80039b8 <SD_disk_initialize+0x1c0>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <SD_disk_initialize+0x2a>
 800381a:	4b67      	ldr	r3, [pc, #412]	; (80039b8 <SD_disk_initialize+0x1c0>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	e0c6      	b.n	80039b0 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8003822:	f7ff fec9 	bl	80035b8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8003826:	f7ff fe33 	bl	8003490 <SELECT>

	/* check disk type */
	type = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800382e:	2100      	movs	r1, #0
 8003830:	2040      	movs	r0, #64	; 0x40
 8003832:	f7ff ff8c 	bl	800374e <SD_SendCmd>
 8003836:	4603      	mov	r3, r0
 8003838:	2b01      	cmp	r3, #1
 800383a:	f040 80a1 	bne.w	8003980 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800383e:	4b5f      	ldr	r3, [pc, #380]	; (80039bc <SD_disk_initialize+0x1c4>)
 8003840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003844:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003846:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800384a:	2048      	movs	r0, #72	; 0x48
 800384c:	f7ff ff7f 	bl	800374e <SD_SendCmd>
 8003850:	4603      	mov	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d155      	bne.n	8003902 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
 800385a:	e00c      	b.n	8003876 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800385c:	7bfc      	ldrb	r4, [r7, #15]
 800385e:	f7ff fe67 	bl	8003530 <SPI_RxByte>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	f104 0310 	add.w	r3, r4, #16
 800386a:	443b      	add	r3, r7
 800386c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	3301      	adds	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d9ef      	bls.n	800385c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800387c:	7abb      	ldrb	r3, [r7, #10]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d17e      	bne.n	8003980 <SD_disk_initialize+0x188>
 8003882:	7afb      	ldrb	r3, [r7, #11]
 8003884:	2baa      	cmp	r3, #170	; 0xaa
 8003886:	d17b      	bne.n	8003980 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003888:	2100      	movs	r1, #0
 800388a:	2077      	movs	r0, #119	; 0x77
 800388c:	f7ff ff5f 	bl	800374e <SD_SendCmd>
 8003890:	4603      	mov	r3, r0
 8003892:	2b01      	cmp	r3, #1
 8003894:	d807      	bhi.n	80038a6 <SD_disk_initialize+0xae>
 8003896:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800389a:	2069      	movs	r0, #105	; 0x69
 800389c:	f7ff ff57 	bl	800374e <SD_SendCmd>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80038a6:	4b45      	ldr	r3, [pc, #276]	; (80039bc <SD_disk_initialize+0x1c4>)
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ec      	bne.n	8003888 <SD_disk_initialize+0x90>
 80038ae:	e000      	b.n	80038b2 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80038b0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80038b2:	4b42      	ldr	r3, [pc, #264]	; (80039bc <SD_disk_initialize+0x1c4>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d062      	beq.n	8003980 <SD_disk_initialize+0x188>
 80038ba:	2100      	movs	r1, #0
 80038bc:	207a      	movs	r0, #122	; 0x7a
 80038be:	f7ff ff46 	bl	800374e <SD_SendCmd>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d15b      	bne.n	8003980 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	e00c      	b.n	80038e8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80038ce:	7bfc      	ldrb	r4, [r7, #15]
 80038d0:	f7ff fe2e 	bl	8003530 <SPI_RxByte>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	f104 0310 	add.w	r3, r4, #16
 80038dc:	443b      	add	r3, r7
 80038de:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	3301      	adds	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d9ef      	bls.n	80038ce <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80038ee:	7a3b      	ldrb	r3, [r7, #8]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <SD_disk_initialize+0x104>
 80038f8:	230c      	movs	r3, #12
 80038fa:	e000      	b.n	80038fe <SD_disk_initialize+0x106>
 80038fc:	2304      	movs	r3, #4
 80038fe:	73bb      	strb	r3, [r7, #14]
 8003900:	e03e      	b.n	8003980 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8003902:	2100      	movs	r1, #0
 8003904:	2077      	movs	r0, #119	; 0x77
 8003906:	f7ff ff22 	bl	800374e <SD_SendCmd>
 800390a:	4603      	mov	r3, r0
 800390c:	2b01      	cmp	r3, #1
 800390e:	d808      	bhi.n	8003922 <SD_disk_initialize+0x12a>
 8003910:	2100      	movs	r1, #0
 8003912:	2069      	movs	r0, #105	; 0x69
 8003914:	f7ff ff1b 	bl	800374e <SD_SendCmd>
 8003918:	4603      	mov	r3, r0
 800391a:	2b01      	cmp	r3, #1
 800391c:	d801      	bhi.n	8003922 <SD_disk_initialize+0x12a>
 800391e:	2302      	movs	r3, #2
 8003920:	e000      	b.n	8003924 <SD_disk_initialize+0x12c>
 8003922:	2301      	movs	r3, #1
 8003924:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8003926:	7bbb      	ldrb	r3, [r7, #14]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d10e      	bne.n	800394a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800392c:	2100      	movs	r1, #0
 800392e:	2077      	movs	r0, #119	; 0x77
 8003930:	f7ff ff0d 	bl	800374e <SD_SendCmd>
 8003934:	4603      	mov	r3, r0
 8003936:	2b01      	cmp	r3, #1
 8003938:	d80e      	bhi.n	8003958 <SD_disk_initialize+0x160>
 800393a:	2100      	movs	r1, #0
 800393c:	2069      	movs	r0, #105	; 0x69
 800393e:	f7ff ff06 	bl	800374e <SD_SendCmd>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d107      	bne.n	8003958 <SD_disk_initialize+0x160>
 8003948:	e00c      	b.n	8003964 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800394a:	2100      	movs	r1, #0
 800394c:	2041      	movs	r0, #65	; 0x41
 800394e:	f7ff fefe 	bl	800374e <SD_SendCmd>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d004      	beq.n	8003962 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8003958:	4b18      	ldr	r3, [pc, #96]	; (80039bc <SD_disk_initialize+0x1c4>)
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e2      	bne.n	8003926 <SD_disk_initialize+0x12e>
 8003960:	e000      	b.n	8003964 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003962:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003964:	4b15      	ldr	r3, [pc, #84]	; (80039bc <SD_disk_initialize+0x1c4>)
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <SD_disk_initialize+0x184>
 800396c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003970:	2050      	movs	r0, #80	; 0x50
 8003972:	f7ff feec 	bl	800374e <SD_SendCmd>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <SD_disk_initialize+0x188>
 800397c:	2300      	movs	r3, #0
 800397e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8003980:	4a0f      	ldr	r2, [pc, #60]	; (80039c0 <SD_disk_initialize+0x1c8>)
 8003982:	7bbb      	ldrb	r3, [r7, #14]
 8003984:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8003986:	f7ff fd91 	bl	80034ac <DESELECT>
	SPI_RxByte();
 800398a:	f7ff fdd1 	bl	8003530 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800398e:	7bbb      	ldrb	r3, [r7, #14]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8003994:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <SD_disk_initialize+0x1c0>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <SD_disk_initialize+0x1c0>)
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	e001      	b.n	80039aa <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80039a6:	f7ff fe49 	bl	800363c <SD_PowerOff>
	}

	return Stat;
 80039aa:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <SD_disk_initialize+0x1c0>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b2db      	uxtb	r3, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd90      	pop	{r4, r7, pc}
 80039b8:	20000004 	.word	0x20000004
 80039bc:	20004628 	.word	0x20004628
 80039c0:	2000462c 	.word	0x2000462c

080039c4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <SD_disk_status+0x14>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e002      	b.n	80039de <SD_disk_status+0x1a>
	return Stat;
 80039d8:	4b04      	ldr	r3, [pc, #16]	; (80039ec <SD_disk_status+0x28>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	b2db      	uxtb	r3, r3
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000004 	.word	0x20000004

080039f0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	4603      	mov	r3, r0
 80039fe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <SD_disk_read+0x1c>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <SD_disk_read+0x20>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	e051      	b.n	8003ab4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003a10:	4b2a      	ldr	r3, [pc, #168]	; (8003abc <SD_disk_read+0xcc>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <SD_disk_read+0x32>
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e048      	b.n	8003ab4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003a22:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <SD_disk_read+0xd0>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <SD_disk_read+0x44>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	025b      	lsls	r3, r3, #9
 8003a32:	607b      	str	r3, [r7, #4]

	SELECT();
 8003a34:	f7ff fd2c 	bl	8003490 <SELECT>

	if (count == 1)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d111      	bne.n	8003a62 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	2051      	movs	r0, #81	; 0x51
 8003a42:	f7ff fe84 	bl	800374e <SD_SendCmd>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d129      	bne.n	8003aa0 <SD_disk_read+0xb0>
 8003a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a50:	68b8      	ldr	r0, [r7, #8]
 8003a52:	f7ff fe0b 	bl	800366c <SD_RxDataBlock>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d021      	beq.n	8003aa0 <SD_disk_read+0xb0>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	e01e      	b.n	8003aa0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	2052      	movs	r0, #82	; 0x52
 8003a66:	f7ff fe72 	bl	800374e <SD_SendCmd>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d117      	bne.n	8003aa0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a74:	68b8      	ldr	r0, [r7, #8]
 8003a76:	f7ff fdf9 	bl	800366c <SD_RxDataBlock>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <SD_disk_read+0xa6>
				buff += 512;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003a86:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	603b      	str	r3, [r7, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1ed      	bne.n	8003a70 <SD_disk_read+0x80>
 8003a94:	e000      	b.n	8003a98 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8003a96:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003a98:	2100      	movs	r1, #0
 8003a9a:	204c      	movs	r0, #76	; 0x4c
 8003a9c:	f7ff fe57 	bl	800374e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8003aa0:	f7ff fd04 	bl	80034ac <DESELECT>
	SPI_RxByte();
 8003aa4:	f7ff fd44 	bl	8003530 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20000004 	.word	0x20000004
 8003ac0:	2000462c 	.word	0x2000462c

08003ac4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d102      	bne.n	8003ae0 <SD_disk_write+0x1c>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <SD_disk_write+0x20>
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	e06b      	b.n	8003bbc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003ae4:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <SD_disk_write+0x100>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <SD_disk_write+0x32>
 8003af2:	2303      	movs	r3, #3
 8003af4:	e062      	b.n	8003bbc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8003af6:	4b33      	ldr	r3, [pc, #204]	; (8003bc4 <SD_disk_write+0x100>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <SD_disk_write+0x44>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e059      	b.n	8003bbc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003b08:	4b2f      	ldr	r3, [pc, #188]	; (8003bc8 <SD_disk_write+0x104>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <SD_disk_write+0x56>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	025b      	lsls	r3, r3, #9
 8003b18:	607b      	str	r3, [r7, #4]

	SELECT();
 8003b1a:	f7ff fcb9 	bl	8003490 <SELECT>

	if (count == 1)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d110      	bne.n	8003b46 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	2058      	movs	r0, #88	; 0x58
 8003b28:	f7ff fe11 	bl	800374e <SD_SendCmd>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d13a      	bne.n	8003ba8 <SD_disk_write+0xe4>
 8003b32:	21fe      	movs	r1, #254	; 0xfe
 8003b34:	68b8      	ldr	r0, [r7, #8]
 8003b36:	f7ff fdc7 	bl	80036c8 <SD_TxDataBlock>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d033      	beq.n	8003ba8 <SD_disk_write+0xe4>
			count = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	e030      	b.n	8003ba8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <SD_disk_write+0x104>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8003b52:	2100      	movs	r1, #0
 8003b54:	2077      	movs	r0, #119	; 0x77
 8003b56:	f7ff fdfa 	bl	800374e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003b5a:	6839      	ldr	r1, [r7, #0]
 8003b5c:	2057      	movs	r0, #87	; 0x57
 8003b5e:	f7ff fdf6 	bl	800374e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	2059      	movs	r0, #89	; 0x59
 8003b66:	f7ff fdf2 	bl	800374e <SD_SendCmd>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11b      	bne.n	8003ba8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003b70:	21fc      	movs	r1, #252	; 0xfc
 8003b72:	68b8      	ldr	r0, [r7, #8]
 8003b74:	f7ff fda8 	bl	80036c8 <SD_TxDataBlock>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <SD_disk_write+0xd0>
				buff += 512;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003b84:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1ee      	bne.n	8003b70 <SD_disk_write+0xac>
 8003b92:	e000      	b.n	8003b96 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003b94:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8003b96:	21fd      	movs	r1, #253	; 0xfd
 8003b98:	2000      	movs	r0, #0
 8003b9a:	f7ff fd95 	bl	80036c8 <SD_TxDataBlock>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <SD_disk_write+0xe4>
			{
				count = 1;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8003ba8:	f7ff fc80 	bl	80034ac <DESELECT>
	SPI_RxByte();
 8003bac:	f7ff fcc0 	bl	8003530 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000004 	.word	0x20000004
 8003bc8:	2000462c 	.word	0x2000462c

08003bcc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b08b      	sub	sp, #44	; 0x2c
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	603a      	str	r2, [r7, #0]
 8003bd6:	71fb      	strb	r3, [r7, #7]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <SD_disk_ioctl+0x1e>
 8003be6:	2304      	movs	r3, #4
 8003be8:	e115      	b.n	8003e16 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8003bf0:	79bb      	ldrb	r3, [r7, #6]
 8003bf2:	2b05      	cmp	r3, #5
 8003bf4:	d124      	bne.n	8003c40 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d012      	beq.n	8003c24 <SD_disk_ioctl+0x58>
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	dc1a      	bgt.n	8003c38 <SD_disk_ioctl+0x6c>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <SD_disk_ioctl+0x40>
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d006      	beq.n	8003c18 <SD_disk_ioctl+0x4c>
 8003c0a:	e015      	b.n	8003c38 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8003c0c:	f7ff fd16 	bl	800363c <SD_PowerOff>
			res = RES_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003c16:	e0fc      	b.n	8003e12 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8003c18:	f7ff fcce 	bl	80035b8 <SD_PowerOn>
			res = RES_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003c22:	e0f6      	b.n	8003e12 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	1c5c      	adds	r4, r3, #1
 8003c28:	f7ff fd14 	bl	8003654 <SD_CheckPower>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003c30:	2300      	movs	r3, #0
 8003c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003c36:	e0ec      	b.n	8003e12 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8003c38:	2304      	movs	r3, #4
 8003c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c3e:	e0e8      	b.n	8003e12 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003c40:	4b77      	ldr	r3, [pc, #476]	; (8003e20 <SD_disk_ioctl+0x254>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <SD_disk_ioctl+0x86>
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e0e1      	b.n	8003e16 <SD_disk_ioctl+0x24a>

		SELECT();
 8003c52:	f7ff fc1d 	bl	8003490 <SELECT>

		switch (ctrl)
 8003c56:	79bb      	ldrb	r3, [r7, #6]
 8003c58:	2b0d      	cmp	r3, #13
 8003c5a:	f200 80cb 	bhi.w	8003df4 <SD_disk_ioctl+0x228>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <SD_disk_ioctl+0x98>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003d5f 	.word	0x08003d5f
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003d4f 	.word	0x08003d4f
 8003c70:	08003df5 	.word	0x08003df5
 8003c74:	08003df5 	.word	0x08003df5
 8003c78:	08003df5 	.word	0x08003df5
 8003c7c:	08003df5 	.word	0x08003df5
 8003c80:	08003df5 	.word	0x08003df5
 8003c84:	08003df5 	.word	0x08003df5
 8003c88:	08003df5 	.word	0x08003df5
 8003c8c:	08003df5 	.word	0x08003df5
 8003c90:	08003d71 	.word	0x08003d71
 8003c94:	08003d95 	.word	0x08003d95
 8003c98:	08003db9 	.word	0x08003db9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2049      	movs	r0, #73	; 0x49
 8003ca0:	f7ff fd55 	bl	800374e <SD_SendCmd>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 80a8 	bne.w	8003dfc <SD_disk_ioctl+0x230>
 8003cac:	f107 030c 	add.w	r3, r7, #12
 8003cb0:	2110      	movs	r1, #16
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff fcda 	bl	800366c <SD_RxDataBlock>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 809e 	beq.w	8003dfc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8003cc0:	7b3b      	ldrb	r3, [r7, #12]
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d10e      	bne.n	8003ce8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003cca:	7d7b      	ldrb	r3, [r7, #21]
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	7d3b      	ldrb	r3, [r7, #20]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8003cde:	8bfb      	ldrh	r3, [r7, #30]
 8003ce0:	029a      	lsls	r2, r3, #10
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e02e      	b.n	8003d46 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003ce8:	7c7b      	ldrb	r3, [r7, #17]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	7dbb      	ldrb	r3, [r7, #22]
 8003cf2:	09db      	lsrs	r3, r3, #7
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	7d7b      	ldrb	r3, [r7, #21]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f003 0306 	and.w	r3, r3, #6
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003d10:	7d3b      	ldrb	r3, [r7, #20]
 8003d12:	099b      	lsrs	r3, r3, #6
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	7cbb      	ldrb	r3, [r7, #18]
 8003d26:	029b      	lsls	r3, r3, #10
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003d38:	8bfa      	ldrh	r2, [r7, #30]
 8003d3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d3e:	3b09      	subs	r3, #9
 8003d40:	409a      	lsls	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8003d4c:	e056      	b.n	8003dfc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d54:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003d5c:	e055      	b.n	8003e0a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003d5e:	f7ff fc11 	bl	8003584 <SD_ReadyWait>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2bff      	cmp	r3, #255	; 0xff
 8003d66:	d14b      	bne.n	8003e00 <SD_disk_ioctl+0x234>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003d6e:	e047      	b.n	8003e00 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003d70:	2100      	movs	r1, #0
 8003d72:	2049      	movs	r0, #73	; 0x49
 8003d74:	f7ff fceb 	bl	800374e <SD_SendCmd>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d142      	bne.n	8003e04 <SD_disk_ioctl+0x238>
 8003d7e:	2110      	movs	r1, #16
 8003d80:	6a38      	ldr	r0, [r7, #32]
 8003d82:	f7ff fc73 	bl	800366c <SD_RxDataBlock>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d03b      	beq.n	8003e04 <SD_disk_ioctl+0x238>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003d92:	e037      	b.n	8003e04 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003d94:	2100      	movs	r1, #0
 8003d96:	204a      	movs	r0, #74	; 0x4a
 8003d98:	f7ff fcd9 	bl	800374e <SD_SendCmd>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d132      	bne.n	8003e08 <SD_disk_ioctl+0x23c>
 8003da2:	2110      	movs	r1, #16
 8003da4:	6a38      	ldr	r0, [r7, #32]
 8003da6:	f7ff fc61 	bl	800366c <SD_RxDataBlock>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d02b      	beq.n	8003e08 <SD_disk_ioctl+0x23c>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003db6:	e027      	b.n	8003e08 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8003db8:	2100      	movs	r1, #0
 8003dba:	207a      	movs	r0, #122	; 0x7a
 8003dbc:	f7ff fcc7 	bl	800374e <SD_SendCmd>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d116      	bne.n	8003df4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003dcc:	e00b      	b.n	8003de6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8003dce:	6a3c      	ldr	r4, [r7, #32]
 8003dd0:	1c63      	adds	r3, r4, #1
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	f7ff fbac 	bl	8003530 <SPI_RxByte>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003ddc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003de0:	3301      	adds	r3, #1
 8003de2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003de6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d9ef      	bls.n	8003dce <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8003df4:	2304      	movs	r3, #4
 8003df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003dfa:	e006      	b.n	8003e0a <SD_disk_ioctl+0x23e>
			break;
 8003dfc:	bf00      	nop
 8003dfe:	e004      	b.n	8003e0a <SD_disk_ioctl+0x23e>
			break;
 8003e00:	bf00      	nop
 8003e02:	e002      	b.n	8003e0a <SD_disk_ioctl+0x23e>
			break;
 8003e04:	bf00      	nop
 8003e06:	e000      	b.n	8003e0a <SD_disk_ioctl+0x23e>
			break;
 8003e08:	bf00      	nop
		}

		DESELECT();
 8003e0a:	f7ff fb4f 	bl	80034ac <DESELECT>
		SPI_RxByte();
 8003e0e:	f7ff fb8f 	bl	8003530 <SPI_RxByte>
	}

	return res;
 8003e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	372c      	adds	r7, #44	; 0x2c
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd90      	pop	{r4, r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000004 	.word	0x20000004

08003e24 <lsm6ds3tr_c_read_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8003e24:	b590      	push	{r4, r7, lr}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	607a      	str	r2, [r7, #4]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	460b      	mov	r3, r1
 8003e32:	72fb      	strb	r3, [r7, #11]
 8003e34:	4613      	mov	r3, r2
 8003e36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	685c      	ldr	r4, [r3, #4]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68d8      	ldr	r0, [r3, #12]
 8003e40:	893b      	ldrh	r3, [r7, #8]
 8003e42:	7af9      	ldrb	r1, [r7, #11]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	47a0      	blx	r4
 8003e48:	6178      	str	r0, [r7, #20]

  return ret;
 8003e4a:	697b      	ldr	r3, [r7, #20]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd90      	pop	{r4, r7, pc}

08003e54 <lsm6ds3tr_c_write_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	460b      	mov	r3, r1
 8003e62:	72fb      	strb	r3, [r7, #11]
 8003e64:	4613      	mov	r3, r2
 8003e66:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681c      	ldr	r4, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68d8      	ldr	r0, [r3, #12]
 8003e70:	893b      	ldrh	r3, [r7, #8]
 8003e72:	7af9      	ldrb	r1, [r7, #11]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	47a0      	blx	r4
 8003e78:	6178      	str	r0, [r7, #20]

  return ret;
 8003e7a:	697b      	ldr	r3, [r7, #20]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd90      	pop	{r4, r7, pc}

08003e84 <lsm6ds3tr_c_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6ds3tr_c_from_fs2g_to_mg(int16_t lsb)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8003e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e9a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003eb0 <lsm6ds3tr_c_from_fs2g_to_mg+0x2c>
 8003e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	3d79db23 	.word	0x3d79db23

08003eb4 <lsm6ds3tr_c_from_fs500dps_to_mdps>:
{
  return ((float_t)lsb * 8.750f);
}

float_t lsm6ds3tr_c_from_fs500dps_to_mdps(int16_t lsb)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	4603      	mov	r3, r0
 8003ebc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 17.50f);
 8003ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eca:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003ee0 <lsm6ds3tr_c_from_fs500dps_to_mdps+0x2c>
 8003ece:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	418c0000 	.word	0x418c0000

08003ee4 <lsm6ds3tr_c_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_xl_t val)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003ef0:	f107 0208 	add.w	r2, r7, #8
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	2110      	movs	r1, #16
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ff93 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 8003efe:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10f      	bne.n	8003f26 <lsm6ds3tr_c_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	7a3b      	ldrb	r3, [r7, #8]
 8003f10:	f362 0383 	bfi	r3, r2, #2, #2
 8003f14:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003f16:	f107 0208 	add.w	r2, r7, #8
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	2110      	movs	r1, #16
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ff98 	bl	8003e54 <lsm6ds3tr_c_write_reg>
 8003f24:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003f26:	68fb      	ldr	r3, [r7, #12]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <lsm6ds3tr_c_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_xl_t val)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003f3c:	f107 0208 	add.w	r2, r7, #8
 8003f40:	2301      	movs	r3, #1
 8003f42:	2110      	movs	r1, #16
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff ff6d 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 8003f4a:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10f      	bne.n	8003f72 <lsm6ds3tr_c_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	7a3b      	ldrb	r3, [r7, #8]
 8003f5c:	f362 1307 	bfi	r3, r2, #4, #4
 8003f60:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003f62:	f107 0208 	add.w	r2, r7, #8
 8003f66:	2301      	movs	r3, #1
 8003f68:	2110      	movs	r1, #16
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff ff72 	bl	8003e54 <lsm6ds3tr_c_write_reg>
 8003f70:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003f72:	68fb      	ldr	r3, [r7, #12]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <lsm6ds3tr_c_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_g_t val)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003f88:	f107 0208 	add.w	r2, r7, #8
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	2111      	movs	r1, #17
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ff47 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 8003f96:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <lsm6ds3tr_c_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	7a3b      	ldrb	r3, [r7, #8]
 8003fa8:	f362 0343 	bfi	r3, r2, #1, #3
 8003fac:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003fae:	f107 0208 	add.w	r2, r7, #8
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	2111      	movs	r1, #17
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff ff4c 	bl	8003e54 <lsm6ds3tr_c_write_reg>
 8003fbc:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <lsm6ds3tr_c_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_g_t val)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003fd4:	f107 0208 	add.w	r2, r7, #8
 8003fd8:	2301      	movs	r3, #1
 8003fda:	2111      	movs	r1, #17
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff ff21 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 8003fe2:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <lsm6ds3tr_c_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	7a3b      	ldrb	r3, [r7, #8]
 8003ff4:	f362 1307 	bfi	r3, r2, #4, #4
 8003ff8:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003ffa:	f107 0208 	add.w	r2, r7, #8
 8003ffe:	2301      	movs	r3, #1
 8004000:	2111      	movs	r1, #17
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff ff26 	bl	8003e54 <lsm6ds3tr_c_write_reg>
 8004008:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 800400a:	68fb      	ldr	r3, [r7, #12]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <lsm6ds3tr_c_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_block_data_update_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8004020:	f107 0208 	add.w	r2, r7, #8
 8004024:	2301      	movs	r3, #1
 8004026:	2112      	movs	r1, #18
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fefb 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 800402e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <lsm6ds3tr_c_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	b2da      	uxtb	r2, r3
 800403e:	7a3b      	ldrb	r3, [r7, #8]
 8004040:	f362 1386 	bfi	r3, r2, #6, #1
 8004044:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8004046:	f107 0208 	add.w	r2, r7, #8
 800404a:	2301      	movs	r3, #1
 800404c:	2112      	movs	r1, #18
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ff00 	bl	8003e54 <lsm6ds3tr_c_write_reg>
 8004054:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004056:	68fb      	ldr	r3, [r7, #12]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <lsm6ds3tr_c_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_G, buff, 6);
 800406a:	f107 020c 	add.w	r2, r7, #12
 800406e:	2306      	movs	r3, #6
 8004070:	2122      	movs	r1, #34	; 0x22
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fed6 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 8004078:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800407a:	7b7b      	ldrb	r3, [r7, #13]
 800407c:	b21a      	sxth	r2, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004088:	b29b      	uxth	r3, r3
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	b29a      	uxth	r2, r3
 800408e:	7b3b      	ldrb	r3, [r7, #12]
 8004090:	b29b      	uxth	r3, r3
 8004092:	4413      	add	r3, r2
 8004094:	b29b      	uxth	r3, r3
 8004096:	b21a      	sxth	r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	3302      	adds	r3, #2
 80040a2:	b212      	sxth	r2, r2
 80040a4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	3302      	adds	r3, #2
 80040aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	7bbb      	ldrb	r3, [r7, #14]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	3302      	adds	r3, #2
 80040c0:	b212      	sxth	r2, r2
 80040c2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80040c4:	7c7a      	ldrb	r2, [r7, #17]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	3304      	adds	r3, #4
 80040ca:	b212      	sxth	r2, r2
 80040cc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	3304      	adds	r3, #4
 80040d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	b29a      	uxth	r2, r3
 80040dc:	7c3b      	ldrb	r3, [r7, #16]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	3304      	adds	r3, #4
 80040e8:	b212      	sxth	r2, r2
 80040ea:	801a      	strh	r2, [r3, #0]

  return ret;
 80040ec:	697b      	ldr	r3, [r7, #20]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <lsm6ds3tr_c_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_acceleration_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b086      	sub	sp, #24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_XL, buff, 6);
 8004100:	f107 020c 	add.w	r2, r7, #12
 8004104:	2306      	movs	r3, #6
 8004106:	2128      	movs	r1, #40	; 0x28
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fe8b 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 800410e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004110:	7b7b      	ldrb	r3, [r7, #13]
 8004112:	b21a      	sxth	r2, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800411e:	b29b      	uxth	r3, r3
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	b29a      	uxth	r2, r3
 8004124:	7b3b      	ldrb	r3, [r7, #12]
 8004126:	b29b      	uxth	r3, r3
 8004128:	4413      	add	r3, r2
 800412a:	b29b      	uxth	r3, r3
 800412c:	b21a      	sxth	r2, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004132:	7bfa      	ldrb	r2, [r7, #15]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	3302      	adds	r3, #2
 8004138:	b212      	sxth	r2, r2
 800413a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	3302      	adds	r3, #2
 8004140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004144:	b29b      	uxth	r3, r3
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	b29a      	uxth	r2, r3
 800414a:	7bbb      	ldrb	r3, [r7, #14]
 800414c:	b29b      	uxth	r3, r3
 800414e:	4413      	add	r3, r2
 8004150:	b29a      	uxth	r2, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	3302      	adds	r3, #2
 8004156:	b212      	sxth	r2, r2
 8004158:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800415a:	7c7a      	ldrb	r2, [r7, #17]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	3304      	adds	r3, #4
 8004160:	b212      	sxth	r2, r2
 8004162:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	3304      	adds	r3, #4
 8004168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800416c:	b29b      	uxth	r3, r3
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	b29a      	uxth	r2, r3
 8004172:	7c3b      	ldrb	r3, [r7, #16]
 8004174:	b29b      	uxth	r3, r3
 8004176:	4413      	add	r3, r2
 8004178:	b29a      	uxth	r2, r3
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	3304      	adds	r3, #4
 800417e:	b212      	sxth	r2, r2
 8004180:	801a      	strh	r2, [r3, #0]

  return ret;
 8004182:	697b      	ldr	r3, [r7, #20]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <lsm6ds3tr_c_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_WHO_AM_I, buff, 1);
 8004196:	2301      	movs	r3, #1
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	210f      	movs	r1, #15
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fe41 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 80041a2:	60f8      	str	r0, [r7, #12]

  return ret;
 80041a4:	68fb      	ldr	r3, [r7, #12]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <lsm6ds3tr_c_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	460b      	mov	r3, r1
 80041b8:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 80041ba:	f107 0208 	add.w	r2, r7, #8
 80041be:	2301      	movs	r3, #1
 80041c0:	2112      	movs	r1, #18
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fe2e 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 80041c8:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10f      	bne.n	80041f0 <lsm6ds3tr_c_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	7a3b      	ldrb	r3, [r7, #8]
 80041da:	f362 0300 	bfi	r3, r2, #0, #1
 80041de:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 80041e0:	f107 0208 	add.w	r2, r7, #8
 80041e4:	2301      	movs	r3, #1
 80041e6:	2112      	movs	r1, #18
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff fe33 	bl	8003e54 <lsm6ds3tr_c_write_reg>
 80041ee:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80041f0:	68fb      	ldr	r3, [r7, #12]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <lsm6ds3tr_c_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	6039      	str	r1, [r7, #0]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8004204:	f107 0208 	add.w	r2, r7, #8
 8004208:	2301      	movs	r3, #1
 800420a:	2112      	movs	r1, #18
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff fe09 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 8004212:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 8004214:	7a3b      	ldrb	r3, [r7, #8]
 8004216:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	701a      	strb	r2, [r3, #0]

  return ret;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <lsm6ds3tr_c_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_bw0_xl_t val)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8004238:	f107 0208 	add.w	r2, r7, #8
 800423c:	2301      	movs	r3, #1
 800423e:	2110      	movs	r1, #16
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff fdef 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 8004246:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10f      	bne.n	800426e <lsm6ds3tr_c_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	b2da      	uxtb	r2, r3
 8004256:	7a3b      	ldrb	r3, [r7, #8]
 8004258:	f362 0300 	bfi	r3, r2, #0, #1
 800425c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 800425e:	f107 0208 	add.w	r2, r7, #8
 8004262:	2301      	movs	r3, #1
 8004264:	2110      	movs	r1, #16
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fdf4 	bl	8003e54 <lsm6ds3tr_c_write_reg>
 800426c:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800426e:	68fb      	ldr	r3, [r7, #12]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <lsm6ds3tr_c_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_input_composite_t val)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 8004284:	f107 0208 	add.w	r2, r7, #8
 8004288:	2301      	movs	r3, #1
 800428a:	2117      	movs	r1, #23
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff fdc9 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 8004292:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d120      	bne.n	80042dc <lsm6ds3tr_c_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	7a3b      	ldrb	r3, [r7, #8]
 80042a6:	f362 03c3 	bfi	r3, r2, #3, #1
 80042aa:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	7a3b      	ldrb	r3, [r7, #8]
 80042b6:	f362 1346 	bfi	r3, r2, #5, #2
 80042ba:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 80042bc:	7a3b      	ldrb	r3, [r7, #8]
 80042be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 80042c4:	7a3b      	ldrb	r3, [r7, #8]
 80042c6:	f36f 0382 	bfc	r3, #2, #1
 80042ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 80042cc:	f107 0208 	add.w	r2, r7, #8
 80042d0:	2301      	movs	r3, #1
 80042d2:	2117      	movs	r1, #23
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7ff fdbd 	bl	8003e54 <lsm6ds3tr_c_write_reg>
 80042da:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 80042dc:	68fb      	ldr	r3, [r7, #12]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <lsm6ds3tr_c_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_band_pass_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_lpf1_sel_g_t val)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	460b      	mov	r3, r1
 80042f0:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  lsm6ds3tr_c_ctrl6_c_t ctrl6_c;
  lsm6ds3tr_c_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 80042f2:	f107 0208 	add.w	r2, r7, #8
 80042f6:	2301      	movs	r3, #1
 80042f8:	2116      	movs	r1, #22
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff fd92 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 8004300:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl7_g, 1);

  if (ret == 0)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d157      	bne.n	80043b8 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	b2da      	uxtb	r2, r3
 8004312:	7a3b      	ldrb	r3, [r7, #8]
 8004314:	f362 1305 	bfi	r3, r2, #4, #2
 8004318:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	09db      	lsrs	r3, r3, #7
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	b2da      	uxtb	r2, r3
 8004326:	7a3b      	ldrb	r3, [r7, #8]
 8004328:	f362 1386 	bfi	r3, r2, #6, #1
 800432c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 800432e:	f107 0208 	add.w	r2, r7, #8
 8004332:	2301      	movs	r3, #1
 8004334:	2116      	movs	r1, #22
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fd8c 	bl	8003e54 <lsm6ds3tr_c_write_reg>
 800433c:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl7_g, 1);

    if (ret == 0)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d139      	bne.n	80043b8 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
    {
      ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 8004344:	f107 020c 	add.w	r2, r7, #12
 8004348:	2301      	movs	r3, #1
 800434a:	2115      	movs	r1, #21
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff fd69 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 8004352:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl6_c, 1);

      if (ret == 0)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d12e      	bne.n	80043b8 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	b2da      	uxtb	r2, r3
 8004362:	7b3b      	ldrb	r3, [r7, #12]
 8004364:	f362 0301 	bfi	r3, r2, #0, #2
 8004368:	733b      	strb	r3, [r7, #12]
        ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 800436a:	f107 020c 	add.w	r2, r7, #12
 800436e:	2301      	movs	r3, #1
 8004370:	2115      	movs	r1, #21
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fd6e 	bl	8003e54 <lsm6ds3tr_c_write_reg>
 8004378:	6178      	str	r0, [r7, #20]
                                    (uint8_t *)&ctrl6_c, 1);

        if (ret == 0)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d11b      	bne.n	80043b8 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
        {
          ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8004380:	f107 0210 	add.w	r2, r7, #16
 8004384:	2301      	movs	r3, #1
 8004386:	2113      	movs	r1, #19
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff fd4b 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 800438e:	6178      	str	r0, [r7, #20]
                                     (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d110      	bne.n	80043b8 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	08db      	lsrs	r3, r3, #3
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	7c3b      	ldrb	r3, [r7, #16]
 80043a2:	f362 0341 	bfi	r3, r2, #1, #1
 80043a6:	743b      	strb	r3, [r7, #16]
            ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 80043a8:	f107 0210 	add.w	r2, r7, #16
 80043ac:	2301      	movs	r3, #1
 80043ae:	2113      	movs	r1, #19
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff fd4f 	bl	8003e54 <lsm6ds3tr_c_write_reg>
 80043b6:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 80043b8:	697b      	ldr	r3, [r7, #20]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <lsm6ds3tr_c_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_i2c_interface_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_i2c_disable_t val)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	460b      	mov	r3, r1
 80043cc:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 80043ce:	f107 0208 	add.w	r2, r7, #8
 80043d2:	2301      	movs	r3, #1
 80043d4:	2113      	movs	r1, #19
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fd24 	bl	8003e24 <lsm6ds3tr_c_read_reg>
 80043dc:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl4_c, 1);

  if (ret == 0)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10f      	bne.n	8004404 <lsm6ds3tr_c_i2c_interface_set+0x42>
  {
    ctrl4_c.i2c_disable = (uint8_t)val;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	7a3b      	ldrb	r3, [r7, #8]
 80043ee:	f362 0382 	bfi	r3, r2, #2, #1
 80043f2:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 80043f4:	f107 0208 	add.w	r2, r7, #8
 80043f8:	2301      	movs	r3, #1
 80043fa:	2113      	movs	r1, #19
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff fd29 	bl	8003e54 <lsm6ds3tr_c_write_reg>
 8004402:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl4_c, 1);
  }

  return ret;
 8004404:	68fb      	ldr	r3, [r7, #12]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004416:	f001 f9c1 	bl	800579c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800441a:	f000 f881 	bl	8004520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800441e:	f000 fbe1 	bl	8004be4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8004422:	f000 f8eb 	bl	80045fc <MX_ADC3_Init>
  MX_I2C1_Init();
 8004426:	f000 f94f 	bl	80046c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800442a:	f000 f97b 	bl	8004724 <MX_I2C2_Init>
  MX_SPI1_Init();
 800442e:	f000 f9cd 	bl	80047cc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004432:	f000 fb27 	bl	8004a84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004436:	f000 fb4f 	bl	8004ad8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800443a:	f000 fb77 	bl	8004b2c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800443e:	f000 fb9f 	bl	8004b80 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8004442:	f000 fbc7 	bl	8004bd4 <MX_USB_OTG_FS_USB_Init>
  MX_TIM2_Init();
 8004446:	f000 f9f7 	bl	8004838 <MX_TIM2_Init>
  MX_TIM3_Init();
 800444a:	f000 fa41 	bl	80048d0 <MX_TIM3_Init>
  MX_TIM5_Init();
 800444e:	f000 facb 	bl	80049e8 <MX_TIM5_Init>
  MX_FATFS_Init();
 8004452:	f006 fc47 	bl	800ace4 <MX_FATFS_Init>
  MX_RTC_Init();
 8004456:	f000 f993 	bl	8004780 <MX_RTC_Init>
  MX_CRC_Init();
 800445a:	f000 f921 	bl	80046a0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin, GPIO_PIN_SET); // LED_ON Pin enabled
 800445e:	2201      	movs	r2, #1
 8004460:	2101      	movs	r1, #1
 8004462:	4821      	ldr	r0, [pc, #132]	; (80044e8 <main+0xd8>)
 8004464:	f001 ffe2 	bl	800642c <HAL_GPIO_WritePin>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004468:	f009 f9d0 	bl	800d80c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of menuSemaphore */
  menuSemaphoreHandle = osSemaphoreNew(1, 1, &menuSemaphore_attributes);
 800446c:	4a1f      	ldr	r2, [pc, #124]	; (80044ec <main+0xdc>)
 800446e:	2101      	movs	r1, #1
 8004470:	2001      	movs	r0, #1
 8004472:	f009 fbb1 	bl	800dbd8 <osSemaphoreNew>
 8004476:	4603      	mov	r3, r0
 8004478:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <main+0xe0>)
 800447a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartCommand */
  StartCommandHandle = osThreadNew(StartCommandWaitTask, NULL, &StartCommand_attributes);
 800447c:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <main+0xe4>)
 800447e:	2100      	movs	r1, #0
 8004480:	481d      	ldr	r0, [pc, #116]	; (80044f8 <main+0xe8>)
 8004482:	f009 fa0d 	bl	800d8a0 <osThreadNew>
 8004486:	4603      	mov	r3, r0
 8004488:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <main+0xec>)
 800448a:	6013      	str	r3, [r2, #0]

  /* creation of Menu */
  MenuHandle = osThreadNew(MenuTask, NULL, &Menu_attributes);
 800448c:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <main+0xf0>)
 800448e:	2100      	movs	r1, #0
 8004490:	481c      	ldr	r0, [pc, #112]	; (8004504 <main+0xf4>)
 8004492:	f009 fa05 	bl	800d8a0 <osThreadNew>
 8004496:	4603      	mov	r3, r0
 8004498:	4a1b      	ldr	r2, [pc, #108]	; (8004508 <main+0xf8>)
 800449a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of startCommandEvent */
  startCommandEventHandle = osEventFlagsNew(&startCommandEvent_attributes);
 800449c:	481b      	ldr	r0, [pc, #108]	; (800450c <main+0xfc>)
 800449e:	f009 fab2 	bl	800da06 <osEventFlagsNew>
 80044a2:	4603      	mov	r3, r0
 80044a4:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <main+0x100>)
 80044a6:	6013      	str	r3, [r2, #0]

  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80044a8:	f009 f9d4 	bl	800d854 <osKernelStart>
	  // Usage : screen /dev/tty.usbserial-1120 (OR tty.usbserial-1130)  115200
	  //MENU SECTOR ------------------------------------------------------------------------


	  char userInput;
	  UART_Transmit_String("\r\nChoice: ");
 80044ac:	4819      	ldr	r0, [pc, #100]	; (8004514 <main+0x104>)
 80044ae:	f7fd f915 	bl	80016dc <UART_Transmit_String>
	         HAL_UART_Receive(&huart1, (uint8_t *)&userInput, sizeof(userInput), HAL_MAX_DELAY);
 80044b2:	1df9      	adds	r1, r7, #7
 80044b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044b8:	2201      	movs	r2, #1
 80044ba:	4817      	ldr	r0, [pc, #92]	; (8004518 <main+0x108>)
 80044bc:	f005 fd05 	bl	8009eca <HAL_UART_Receive>

	         switch (userInput)
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	2b0a      	cmp	r3, #10
 80044c4:	d002      	beq.n	80044cc <main+0xbc>
 80044c6:	2b0d      	cmp	r3, #13
 80044c8:	d104      	bne.n	80044d4 <main+0xc4>
	         {
	         case '\r': // Ignore carriage return characters
	             break;
 80044ca:	e008      	b.n	80044de <main+0xce>
	         case '\n': // Process command on new line (Enter pressed)
	             UART_Transmit_String("\r\n"); // Move to a new line after the command
 80044cc:	4813      	ldr	r0, [pc, #76]	; (800451c <main+0x10c>)
 80044ce:	f7fd f905 	bl	80016dc <UART_Transmit_String>
	             break;
 80044d2:	e004      	b.n	80044de <main+0xce>
	         default:
	             menu(userInput);
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fd fd3c 	bl	8001f54 <menu>
	             break;
 80044dc:	bf00      	nop
	         }

	         HAL_Delay(100);
 80044de:	2064      	movs	r0, #100	; 0x64
 80044e0:	f001 f9ce 	bl	8005880 <HAL_Delay>
  {
 80044e4:	e7e2      	b.n	80044ac <main+0x9c>
 80044e6:	bf00      	nop
 80044e8:	40020400 	.word	0x40020400
 80044ec:	0801fa54 	.word	0x0801fa54
 80044f0:	20004990 	.word	0x20004990
 80044f4:	0801fa0c 	.word	0x0801fa0c
 80044f8:	08004dc9 	.word	0x08004dc9
 80044fc:	20004988 	.word	0x20004988
 8004500:	0801fa30 	.word	0x0801fa30
 8004504:	08004e01 	.word	0x08004e01
 8004508:	2000498c 	.word	0x2000498c
 800450c:	0801fa64 	.word	0x0801fa64
 8004510:	20004994 	.word	0x20004994
 8004514:	0801f8c0 	.word	0x0801f8c0
 8004518:	20004878 	.word	0x20004878
 800451c:	0801f8cc 	.word	0x0801f8cc

08004520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b094      	sub	sp, #80	; 0x50
 8004524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004526:	f107 0320 	add.w	r3, r7, #32
 800452a:	2230      	movs	r2, #48	; 0x30
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f015 fca6 	bl	8019e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004534:	f107 030c 	add.w	r3, r7, #12
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004544:	2300      	movs	r3, #0
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <SystemClock_Config+0xd4>)
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	4a29      	ldr	r2, [pc, #164]	; (80045f4 <SystemClock_Config+0xd4>)
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004552:	6413      	str	r3, [r2, #64]	; 0x40
 8004554:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <SystemClock_Config+0xd4>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004560:	2300      	movs	r3, #0
 8004562:	607b      	str	r3, [r7, #4]
 8004564:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <SystemClock_Config+0xd8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a23      	ldr	r2, [pc, #140]	; (80045f8 <SystemClock_Config+0xd8>)
 800456a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <SystemClock_Config+0xd8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800457c:	230b      	movs	r3, #11
 800457e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004586:	2301      	movs	r3, #1
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800458a:	2310      	movs	r3, #16
 800458c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800458e:	2301      	movs	r3, #1
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004592:	2302      	movs	r3, #2
 8004594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800459a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800459c:	230f      	movs	r3, #15
 800459e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80045a0:	2390      	movs	r3, #144	; 0x90
 80045a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045a4:	2302      	movs	r3, #2
 80045a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80045a8:	2305      	movs	r3, #5
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045ac:	f107 0320 	add.w	r3, r7, #32
 80045b0:	4618      	mov	r0, r3
 80045b2:	f003 fbad 	bl	8007d10 <HAL_RCC_OscConfig>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80045bc:	f000 fc40 	bl	8004e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045c0:	230f      	movs	r3, #15
 80045c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80045d4:	f107 030c 	add.w	r3, r7, #12
 80045d8:	2100      	movs	r1, #0
 80045da:	4618      	mov	r0, r3
 80045dc:	f003 fe10 	bl	8008200 <HAL_RCC_ClockConfig>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80045e6:	f000 fc2b 	bl	8004e40 <Error_Handler>
  }
}
 80045ea:	bf00      	nop
 80045ec:	3750      	adds	r7, #80	; 0x50
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000

080045fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004602:	463b      	mov	r3, r7
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	605a      	str	r2, [r3, #4]
 800460a:	609a      	str	r2, [r3, #8]
 800460c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800460e:	4b21      	ldr	r3, [pc, #132]	; (8004694 <MX_ADC3_Init+0x98>)
 8004610:	4a21      	ldr	r2, [pc, #132]	; (8004698 <MX_ADC3_Init+0x9c>)
 8004612:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004614:	4b1f      	ldr	r3, [pc, #124]	; (8004694 <MX_ADC3_Init+0x98>)
 8004616:	2200      	movs	r2, #0
 8004618:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800461a:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <MX_ADC3_Init+0x98>)
 800461c:	2200      	movs	r2, #0
 800461e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8004620:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <MX_ADC3_Init+0x98>)
 8004622:	2200      	movs	r2, #0
 8004624:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004626:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <MX_ADC3_Init+0x98>)
 8004628:	2200      	movs	r2, #0
 800462a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800462c:	4b19      	ldr	r3, [pc, #100]	; (8004694 <MX_ADC3_Init+0x98>)
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004634:	4b17      	ldr	r3, [pc, #92]	; (8004694 <MX_ADC3_Init+0x98>)
 8004636:	2200      	movs	r2, #0
 8004638:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800463a:	4b16      	ldr	r3, [pc, #88]	; (8004694 <MX_ADC3_Init+0x98>)
 800463c:	4a17      	ldr	r2, [pc, #92]	; (800469c <MX_ADC3_Init+0xa0>)
 800463e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004640:	4b14      	ldr	r3, [pc, #80]	; (8004694 <MX_ADC3_Init+0x98>)
 8004642:	2200      	movs	r2, #0
 8004644:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8004646:	4b13      	ldr	r3, [pc, #76]	; (8004694 <MX_ADC3_Init+0x98>)
 8004648:	2201      	movs	r2, #1
 800464a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <MX_ADC3_Init+0x98>)
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004654:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <MX_ADC3_Init+0x98>)
 8004656:	2201      	movs	r2, #1
 8004658:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800465a:	480e      	ldr	r0, [pc, #56]	; (8004694 <MX_ADC3_Init+0x98>)
 800465c:	f001 f934 	bl	80058c8 <HAL_ADC_Init>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8004666:	f000 fbeb 	bl	8004e40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800466a:	230c      	movs	r3, #12
 800466c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004676:	463b      	mov	r3, r7
 8004678:	4619      	mov	r1, r3
 800467a:	4806      	ldr	r0, [pc, #24]	; (8004694 <MX_ADC3_Init+0x98>)
 800467c:	f001 f968 	bl	8005950 <HAL_ADC_ConfigChannel>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8004686:	f000 fbdb 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20004630 	.word	0x20004630
 8004698:	40012200 	.word	0x40012200
 800469c:	0f000001 	.word	0x0f000001

080046a0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <MX_CRC_Init+0x20>)
 80046a6:	4a07      	ldr	r2, [pc, #28]	; (80046c4 <MX_CRC_Init+0x24>)
 80046a8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80046aa:	4805      	ldr	r0, [pc, #20]	; (80046c0 <MX_CRC_Init+0x20>)
 80046ac:	f001 fc7f 	bl	8005fae <HAL_CRC_Init>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80046b6:	f000 fbc3 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20004678 	.word	0x20004678
 80046c4:	40023000 	.word	0x40023000

080046c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80046cc:	4b12      	ldr	r3, [pc, #72]	; (8004718 <MX_I2C1_Init+0x50>)
 80046ce:	4a13      	ldr	r2, [pc, #76]	; (800471c <MX_I2C1_Init+0x54>)
 80046d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80046d2:	4b11      	ldr	r3, [pc, #68]	; (8004718 <MX_I2C1_Init+0x50>)
 80046d4:	4a12      	ldr	r2, [pc, #72]	; (8004720 <MX_I2C1_Init+0x58>)
 80046d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80046d8:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <MX_I2C1_Init+0x50>)
 80046da:	2200      	movs	r2, #0
 80046dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80046de:	4b0e      	ldr	r3, [pc, #56]	; (8004718 <MX_I2C1_Init+0x50>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <MX_I2C1_Init+0x50>)
 80046e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <MX_I2C1_Init+0x50>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80046f2:	4b09      	ldr	r3, [pc, #36]	; (8004718 <MX_I2C1_Init+0x50>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046f8:	4b07      	ldr	r3, [pc, #28]	; (8004718 <MX_I2C1_Init+0x50>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <MX_I2C1_Init+0x50>)
 8004700:	2200      	movs	r2, #0
 8004702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004704:	4804      	ldr	r0, [pc, #16]	; (8004718 <MX_I2C1_Init+0x50>)
 8004706:	f001 fecf 	bl	80064a8 <HAL_I2C_Init>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004710:	f000 fb96 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004714:	bf00      	nop
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20004680 	.word	0x20004680
 800471c:	40005400 	.word	0x40005400
 8004720:	000186a0 	.word	0x000186a0

08004724 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004728:	4b12      	ldr	r3, [pc, #72]	; (8004774 <MX_I2C2_Init+0x50>)
 800472a:	4a13      	ldr	r2, [pc, #76]	; (8004778 <MX_I2C2_Init+0x54>)
 800472c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <MX_I2C2_Init+0x50>)
 8004730:	4a12      	ldr	r2, [pc, #72]	; (800477c <MX_I2C2_Init+0x58>)
 8004732:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004734:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <MX_I2C2_Init+0x50>)
 8004736:	2200      	movs	r2, #0
 8004738:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800473a:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <MX_I2C2_Init+0x50>)
 800473c:	2200      	movs	r2, #0
 800473e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <MX_I2C2_Init+0x50>)
 8004742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004746:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <MX_I2C2_Init+0x50>)
 800474a:	2200      	movs	r2, #0
 800474c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <MX_I2C2_Init+0x50>)
 8004750:	2200      	movs	r2, #0
 8004752:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004754:	4b07      	ldr	r3, [pc, #28]	; (8004774 <MX_I2C2_Init+0x50>)
 8004756:	2200      	movs	r2, #0
 8004758:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <MX_I2C2_Init+0x50>)
 800475c:	2200      	movs	r2, #0
 800475e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004760:	4804      	ldr	r0, [pc, #16]	; (8004774 <MX_I2C2_Init+0x50>)
 8004762:	f001 fea1 	bl	80064a8 <HAL_I2C_Init>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800476c:	f000 fb68 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004770:	bf00      	nop
 8004772:	bd80      	pop	{r7, pc}
 8004774:	200046d4 	.word	0x200046d4
 8004778:	40005800 	.word	0x40005800
 800477c:	000186a0 	.word	0x000186a0

08004780 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <MX_RTC_Init+0x44>)
 8004786:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <MX_RTC_Init+0x48>)
 8004788:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800478a:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <MX_RTC_Init+0x44>)
 800478c:	2200      	movs	r2, #0
 800478e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <MX_RTC_Init+0x44>)
 8004792:	227f      	movs	r2, #127	; 0x7f
 8004794:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <MX_RTC_Init+0x44>)
 8004798:	22ff      	movs	r2, #255	; 0xff
 800479a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800479c:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <MX_RTC_Init+0x44>)
 800479e:	2200      	movs	r2, #0
 80047a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <MX_RTC_Init+0x44>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <MX_RTC_Init+0x44>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80047ae:	4805      	ldr	r0, [pc, #20]	; (80047c4 <MX_RTC_Init+0x44>)
 80047b0:	f003 ffe8 	bl	8008784 <HAL_RTC_Init>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80047ba:	f000 fb41 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20004728 	.word	0x20004728
 80047c8:	40002800 	.word	0x40002800

080047cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80047d0:	4b17      	ldr	r3, [pc, #92]	; (8004830 <MX_SPI1_Init+0x64>)
 80047d2:	4a18      	ldr	r2, [pc, #96]	; (8004834 <MX_SPI1_Init+0x68>)
 80047d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80047d6:	4b16      	ldr	r3, [pc, #88]	; (8004830 <MX_SPI1_Init+0x64>)
 80047d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80047dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80047de:	4b14      	ldr	r3, [pc, #80]	; (8004830 <MX_SPI1_Init+0x64>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80047e4:	4b12      	ldr	r3, [pc, #72]	; (8004830 <MX_SPI1_Init+0x64>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <MX_SPI1_Init+0x64>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <MX_SPI1_Init+0x64>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80047f6:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <MX_SPI1_Init+0x64>)
 80047f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80047fe:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <MX_SPI1_Init+0x64>)
 8004800:	2230      	movs	r2, #48	; 0x30
 8004802:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004804:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <MX_SPI1_Init+0x64>)
 8004806:	2200      	movs	r2, #0
 8004808:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800480a:	4b09      	ldr	r3, [pc, #36]	; (8004830 <MX_SPI1_Init+0x64>)
 800480c:	2200      	movs	r2, #0
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004810:	4b07      	ldr	r3, [pc, #28]	; (8004830 <MX_SPI1_Init+0x64>)
 8004812:	2200      	movs	r2, #0
 8004814:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <MX_SPI1_Init+0x64>)
 8004818:	220a      	movs	r2, #10
 800481a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800481c:	4804      	ldr	r0, [pc, #16]	; (8004830 <MX_SPI1_Init+0x64>)
 800481e:	f004 f8ab 	bl	8008978 <HAL_SPI_Init>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004828:	f000 fb0a 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800482c:	bf00      	nop
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20004748 	.word	0x20004748
 8004834:	40013000 	.word	0x40013000

08004838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800483e:	f107 0308 	add.w	r3, r7, #8
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	605a      	str	r2, [r3, #4]
 8004848:	609a      	str	r2, [r3, #8]
 800484a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800484c:	463b      	mov	r3, r7
 800484e:	2200      	movs	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <MX_TIM2_Init+0x94>)
 8004856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800485a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <MX_TIM2_Init+0x94>)
 800485e:	2200      	movs	r2, #0
 8004860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004862:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <MX_TIM2_Init+0x94>)
 8004864:	2200      	movs	r2, #0
 8004866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004868:	4b18      	ldr	r3, [pc, #96]	; (80048cc <MX_TIM2_Init+0x94>)
 800486a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800486e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004870:	4b16      	ldr	r3, [pc, #88]	; (80048cc <MX_TIM2_Init+0x94>)
 8004872:	2200      	movs	r2, #0
 8004874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <MX_TIM2_Init+0x94>)
 8004878:	2200      	movs	r2, #0
 800487a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800487c:	4813      	ldr	r0, [pc, #76]	; (80048cc <MX_TIM2_Init+0x94>)
 800487e:	f004 fcad 	bl	80091dc <HAL_TIM_Base_Init>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004888:	f000 fada 	bl	8004e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800488c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004892:	f107 0308 	add.w	r3, r7, #8
 8004896:	4619      	mov	r1, r3
 8004898:	480c      	ldr	r0, [pc, #48]	; (80048cc <MX_TIM2_Init+0x94>)
 800489a:	f004 fe09 	bl	80094b0 <HAL_TIM_ConfigClockSource>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80048a4:	f000 facc 	bl	8004e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048a8:	2300      	movs	r3, #0
 80048aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80048b0:	463b      	mov	r3, r7
 80048b2:	4619      	mov	r1, r3
 80048b4:	4805      	ldr	r0, [pc, #20]	; (80048cc <MX_TIM2_Init+0x94>)
 80048b6:	f005 f9ad 	bl	8009c14 <HAL_TIMEx_MasterConfigSynchronization>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80048c0:	f000 fabe 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80048c4:	bf00      	nop
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	200047a0 	.word	0x200047a0

080048d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08e      	sub	sp, #56	; 0x38
 80048d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	605a      	str	r2, [r3, #4]
 80048e0:	609a      	str	r2, [r3, #8]
 80048e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048e4:	f107 0320 	add.w	r3, r7, #32
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048ee:	1d3b      	adds	r3, r7, #4
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	611a      	str	r2, [r3, #16]
 80048fc:	615a      	str	r2, [r3, #20]
 80048fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004900:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <MX_TIM3_Init+0x110>)
 8004902:	4a38      	ldr	r2, [pc, #224]	; (80049e4 <MX_TIM3_Init+0x114>)
 8004904:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004906:	4b36      	ldr	r3, [pc, #216]	; (80049e0 <MX_TIM3_Init+0x110>)
 8004908:	2200      	movs	r2, #0
 800490a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800490c:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <MX_TIM3_Init+0x110>)
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004912:	4b33      	ldr	r3, [pc, #204]	; (80049e0 <MX_TIM3_Init+0x110>)
 8004914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004918:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800491a:	4b31      	ldr	r3, [pc, #196]	; (80049e0 <MX_TIM3_Init+0x110>)
 800491c:	2200      	movs	r2, #0
 800491e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004920:	4b2f      	ldr	r3, [pc, #188]	; (80049e0 <MX_TIM3_Init+0x110>)
 8004922:	2200      	movs	r2, #0
 8004924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004926:	482e      	ldr	r0, [pc, #184]	; (80049e0 <MX_TIM3_Init+0x110>)
 8004928:	f004 fc58 	bl	80091dc <HAL_TIM_Base_Init>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004932:	f000 fa85 	bl	8004e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800493c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004940:	4619      	mov	r1, r3
 8004942:	4827      	ldr	r0, [pc, #156]	; (80049e0 <MX_TIM3_Init+0x110>)
 8004944:	f004 fdb4 	bl	80094b0 <HAL_TIM_ConfigClockSource>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800494e:	f000 fa77 	bl	8004e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004952:	4823      	ldr	r0, [pc, #140]	; (80049e0 <MX_TIM3_Init+0x110>)
 8004954:	f004 fc91 	bl	800927a <HAL_TIM_PWM_Init>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800495e:	f000 fa6f 	bl	8004e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004962:	2300      	movs	r3, #0
 8004964:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004966:	2300      	movs	r3, #0
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800496a:	f107 0320 	add.w	r3, r7, #32
 800496e:	4619      	mov	r1, r3
 8004970:	481b      	ldr	r0, [pc, #108]	; (80049e0 <MX_TIM3_Init+0x110>)
 8004972:	f005 f94f 	bl	8009c14 <HAL_TIMEx_MasterConfigSynchronization>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800497c:	f000 fa60 	bl	8004e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004980:	2360      	movs	r3, #96	; 0x60
 8004982:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004990:	1d3b      	adds	r3, r7, #4
 8004992:	2204      	movs	r2, #4
 8004994:	4619      	mov	r1, r3
 8004996:	4812      	ldr	r0, [pc, #72]	; (80049e0 <MX_TIM3_Init+0x110>)
 8004998:	f004 fcc8 	bl	800932c <HAL_TIM_PWM_ConfigChannel>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80049a2:	f000 fa4d 	bl	8004e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80049a6:	1d3b      	adds	r3, r7, #4
 80049a8:	2208      	movs	r2, #8
 80049aa:	4619      	mov	r1, r3
 80049ac:	480c      	ldr	r0, [pc, #48]	; (80049e0 <MX_TIM3_Init+0x110>)
 80049ae:	f004 fcbd 	bl	800932c <HAL_TIM_PWM_ConfigChannel>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80049b8:	f000 fa42 	bl	8004e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80049bc:	1d3b      	adds	r3, r7, #4
 80049be:	220c      	movs	r2, #12
 80049c0:	4619      	mov	r1, r3
 80049c2:	4807      	ldr	r0, [pc, #28]	; (80049e0 <MX_TIM3_Init+0x110>)
 80049c4:	f004 fcb2 	bl	800932c <HAL_TIM_PWM_ConfigChannel>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80049ce:	f000 fa37 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80049d2:	4803      	ldr	r0, [pc, #12]	; (80049e0 <MX_TIM3_Init+0x110>)
 80049d4:	f000 fc08 	bl	80051e8 <HAL_TIM_MspPostInit>

}
 80049d8:	bf00      	nop
 80049da:	3738      	adds	r7, #56	; 0x38
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	200047e8 	.word	0x200047e8
 80049e4:	40000400 	.word	0x40000400

080049e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	605a      	str	r2, [r3, #4]
 80049f8:	609a      	str	r2, [r3, #8]
 80049fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049fc:	463b      	mov	r3, r7
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004a04:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <MX_TIM5_Init+0x94>)
 8004a06:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <MX_TIM5_Init+0x98>)
 8004a08:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004a0a:	4b1c      	ldr	r3, [pc, #112]	; (8004a7c <MX_TIM5_Init+0x94>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a10:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <MX_TIM5_Init+0x94>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004a16:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <MX_TIM5_Init+0x94>)
 8004a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a1c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a1e:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <MX_TIM5_Init+0x94>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a24:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <MX_TIM5_Init+0x94>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004a2a:	4814      	ldr	r0, [pc, #80]	; (8004a7c <MX_TIM5_Init+0x94>)
 8004a2c:	f004 fbd6 	bl	80091dc <HAL_TIM_Base_Init>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8004a36:	f000 fa03 	bl	8004e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004a40:	f107 0308 	add.w	r3, r7, #8
 8004a44:	4619      	mov	r1, r3
 8004a46:	480d      	ldr	r0, [pc, #52]	; (8004a7c <MX_TIM5_Init+0x94>)
 8004a48:	f004 fd32 	bl	80094b0 <HAL_TIM_ConfigClockSource>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004a52:	f000 f9f5 	bl	8004e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a56:	2300      	movs	r3, #0
 8004a58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004a5e:	463b      	mov	r3, r7
 8004a60:	4619      	mov	r1, r3
 8004a62:	4806      	ldr	r0, [pc, #24]	; (8004a7c <MX_TIM5_Init+0x94>)
 8004a64:	f005 f8d6 	bl	8009c14 <HAL_TIMEx_MasterConfigSynchronization>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8004a6e:	f000 f9e7 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004a72:	bf00      	nop
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20004830 	.word	0x20004830
 8004a80:	40000c00 	.word	0x40000c00

08004a84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <MX_USART1_UART_Init+0x4c>)
 8004a8a:	4a12      	ldr	r2, [pc, #72]	; (8004ad4 <MX_USART1_UART_Init+0x50>)
 8004a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <MX_USART1_UART_Init+0x4c>)
 8004a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a96:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <MX_USART1_UART_Init+0x4c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <MX_USART1_UART_Init+0x4c>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <MX_USART1_UART_Init+0x4c>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <MX_USART1_UART_Init+0x4c>)
 8004aaa:	220c      	movs	r2, #12
 8004aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aae:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <MX_USART1_UART_Init+0x4c>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ab4:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <MX_USART1_UART_Init+0x4c>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004aba:	4805      	ldr	r0, [pc, #20]	; (8004ad0 <MX_USART1_UART_Init+0x4c>)
 8004abc:	f005 f926 	bl	8009d0c <HAL_UART_Init>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004ac6:	f000 f9bb 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20004878 	.word	0x20004878
 8004ad4:	40011000 	.word	0x40011000

08004ad8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <MX_USART2_UART_Init+0x4c>)
 8004ade:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <MX_USART2_UART_Init+0x50>)
 8004ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <MX_USART2_UART_Init+0x4c>)
 8004ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004aea:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <MX_USART2_UART_Init+0x4c>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004af0:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <MX_USART2_UART_Init+0x4c>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <MX_USART2_UART_Init+0x4c>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <MX_USART2_UART_Init+0x4c>)
 8004afe:	220c      	movs	r2, #12
 8004b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <MX_USART2_UART_Init+0x4c>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <MX_USART2_UART_Init+0x4c>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004b0e:	4805      	ldr	r0, [pc, #20]	; (8004b24 <MX_USART2_UART_Init+0x4c>)
 8004b10:	f005 f8fc 	bl	8009d0c <HAL_UART_Init>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004b1a:	f000 f991 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	200048bc 	.word	0x200048bc
 8004b28:	40004400 	.word	0x40004400

08004b2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <MX_USART3_UART_Init+0x4c>)
 8004b32:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <MX_USART3_UART_Init+0x50>)
 8004b34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <MX_USART3_UART_Init+0x4c>)
 8004b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <MX_USART3_UART_Init+0x4c>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <MX_USART3_UART_Init+0x4c>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <MX_USART3_UART_Init+0x4c>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b50:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <MX_USART3_UART_Init+0x4c>)
 8004b52:	220c      	movs	r2, #12
 8004b54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b56:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <MX_USART3_UART_Init+0x4c>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b5c:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <MX_USART3_UART_Init+0x4c>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b62:	4805      	ldr	r0, [pc, #20]	; (8004b78 <MX_USART3_UART_Init+0x4c>)
 8004b64:	f005 f8d2 	bl	8009d0c <HAL_UART_Init>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004b6e:	f000 f967 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004b72:	bf00      	nop
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20004900 	.word	0x20004900
 8004b7c:	40004800 	.word	0x40004800

08004b80 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004b84:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <MX_USART6_UART_Init+0x4c>)
 8004b86:	4a12      	ldr	r2, [pc, #72]	; (8004bd0 <MX_USART6_UART_Init+0x50>)
 8004b88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004b8a:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <MX_USART6_UART_Init+0x4c>)
 8004b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004b92:	4b0e      	ldr	r3, [pc, #56]	; (8004bcc <MX_USART6_UART_Init+0x4c>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004b98:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <MX_USART6_UART_Init+0x4c>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <MX_USART6_UART_Init+0x4c>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004ba4:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <MX_USART6_UART_Init+0x4c>)
 8004ba6:	220c      	movs	r2, #12
 8004ba8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004baa:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <MX_USART6_UART_Init+0x4c>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <MX_USART6_UART_Init+0x4c>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004bb6:	4805      	ldr	r0, [pc, #20]	; (8004bcc <MX_USART6_UART_Init+0x4c>)
 8004bb8:	f005 f8a8 	bl	8009d0c <HAL_UART_Init>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004bc2:	f000 f93d 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004bc6:	bf00      	nop
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20004944 	.word	0x20004944
 8004bd0:	40011400 	.word	0x40011400

08004bd4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bea:	f107 0314 	add.w	r3, r7, #20
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	609a      	str	r2, [r3, #8]
 8004bf6:	60da      	str	r2, [r3, #12]
 8004bf8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	4b6e      	ldr	r3, [pc, #440]	; (8004db8 <MX_GPIO_Init+0x1d4>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	4a6d      	ldr	r2, [pc, #436]	; (8004db8 <MX_GPIO_Init+0x1d4>)
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0a:	4b6b      	ldr	r3, [pc, #428]	; (8004db8 <MX_GPIO_Init+0x1d4>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	4b67      	ldr	r3, [pc, #412]	; (8004db8 <MX_GPIO_Init+0x1d4>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	4a66      	ldr	r2, [pc, #408]	; (8004db8 <MX_GPIO_Init+0x1d4>)
 8004c20:	f043 0304 	orr.w	r3, r3, #4
 8004c24:	6313      	str	r3, [r2, #48]	; 0x30
 8004c26:	4b64      	ldr	r3, [pc, #400]	; (8004db8 <MX_GPIO_Init+0x1d4>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	4b60      	ldr	r3, [pc, #384]	; (8004db8 <MX_GPIO_Init+0x1d4>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	4a5f      	ldr	r2, [pc, #380]	; (8004db8 <MX_GPIO_Init+0x1d4>)
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	6313      	str	r3, [r2, #48]	; 0x30
 8004c42:	4b5d      	ldr	r3, [pc, #372]	; (8004db8 <MX_GPIO_Init+0x1d4>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	607b      	str	r3, [r7, #4]
 8004c52:	4b59      	ldr	r3, [pc, #356]	; (8004db8 <MX_GPIO_Init+0x1d4>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	4a58      	ldr	r2, [pc, #352]	; (8004db8 <MX_GPIO_Init+0x1d4>)
 8004c58:	f043 0302 	orr.w	r3, r3, #2
 8004c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5e:	4b56      	ldr	r3, [pc, #344]	; (8004db8 <MX_GPIO_Init+0x1d4>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	607b      	str	r3, [r7, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004c70:	4852      	ldr	r0, [pc, #328]	; (8004dbc <MX_GPIO_Init+0x1d8>)
 8004c72:	f001 fbdb 	bl	800642c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004c76:	2201      	movs	r2, #1
 8004c78:	2110      	movs	r1, #16
 8004c7a:	4850      	ldr	r0, [pc, #320]	; (8004dbc <MX_GPIO_Init+0x1d8>)
 8004c7c:	f001 fbd6 	bl	800642c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004c80:	2200      	movs	r2, #0
 8004c82:	2120      	movs	r1, #32
 8004c84:	484e      	ldr	r0, [pc, #312]	; (8004dc0 <MX_GPIO_Init+0x1dc>)
 8004c86:	f001 fbd1 	bl	800642c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2147      	movs	r1, #71	; 0x47
 8004c8e:	484d      	ldr	r0, [pc, #308]	; (8004dc4 <MX_GPIO_Init+0x1e0>)
 8004c90:	f001 fbcc 	bl	800642c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8004c94:	2313      	movs	r3, #19
 8004c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ca0:	f107 0314 	add.w	r3, r7, #20
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4846      	ldr	r0, [pc, #280]	; (8004dc0 <MX_GPIO_Init+0x1dc>)
 8004ca8:	f001 fa24 	bl	80060f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 8004cac:	f248 0303 	movw	r3, #32771	; 0x8003
 8004cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cbe:	f107 0314 	add.w	r3, r7, #20
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	483d      	ldr	r0, [pc, #244]	; (8004dbc <MX_GPIO_Init+0x1d8>)
 8004cc6:	f001 fa15 	bl	80060f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004cca:	2310      	movs	r3, #16
 8004ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cda:	f107 0314 	add.w	r3, r7, #20
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4836      	ldr	r0, [pc, #216]	; (8004dbc <MX_GPIO_Init+0x1d8>)
 8004ce2:	f001 fa07 	bl	80060f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8004ce6:	2320      	movs	r3, #32
 8004ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cea:	2301      	movs	r3, #1
 8004cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004cf6:	f107 0314 	add.w	r3, r7, #20
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4830      	ldr	r0, [pc, #192]	; (8004dc0 <MX_GPIO_Init+0x1dc>)
 8004cfe:	f001 f9f9 	bl	80060f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ON_Pin PB1 PB2 PB6 */
  GPIO_InitStruct.Pin = LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8004d02:	2347      	movs	r3, #71	; 0x47
 8004d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d06:	2301      	movs	r3, #1
 8004d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d12:	f107 0314 	add.w	r3, r7, #20
 8004d16:	4619      	mov	r1, r3
 8004d18:	482a      	ldr	r0, [pc, #168]	; (8004dc4 <MX_GPIO_Init+0x1e0>)
 8004d1a:	f001 f9eb 	bl	80060f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004d1e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d2e:	f107 0314 	add.w	r3, r7, #20
 8004d32:	4619      	mov	r1, r3
 8004d34:	4823      	ldr	r0, [pc, #140]	; (8004dc4 <MX_GPIO_Init+0x1e0>)
 8004d36:	f001 f9dd 	bl	80060f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d4a:	f107 0314 	add.w	r3, r7, #20
 8004d4e:	4619      	mov	r1, r3
 8004d50:	481a      	ldr	r0, [pc, #104]	; (8004dbc <MX_GPIO_Init+0x1d8>)
 8004d52:	f001 f9cf 	bl	80060f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004d56:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d64:	2303      	movs	r3, #3
 8004d66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004d68:	230a      	movs	r3, #10
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	4619      	mov	r1, r3
 8004d72:	4812      	ldr	r0, [pc, #72]	; (8004dbc <MX_GPIO_Init+0x1d8>)
 8004d74:	f001 f9be 	bl	80060f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d78:	2310      	movs	r3, #16
 8004d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d84:	f107 0314 	add.w	r3, r7, #20
 8004d88:	4619      	mov	r1, r3
 8004d8a:	480e      	ldr	r0, [pc, #56]	; (8004dc4 <MX_GPIO_Init+0x1e0>)
 8004d8c:	f001 f9b2 	bl	80060f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8004d90:	2200      	movs	r2, #0
 8004d92:	2105      	movs	r1, #5
 8004d94:	2017      	movs	r0, #23
 8004d96:	f001 f8d4 	bl	8005f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d9a:	2017      	movs	r0, #23
 8004d9c:	f001 f8ed 	bl	8005f7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004da0:	2200      	movs	r2, #0
 8004da2:	2105      	movs	r1, #5
 8004da4:	2028      	movs	r0, #40	; 0x28
 8004da6:	f001 f8cc 	bl	8005f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004daa:	2028      	movs	r0, #40	; 0x28
 8004dac:	f001 f8e5 	bl	8005f7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004db0:	bf00      	nop
 8004db2:	3728      	adds	r7, #40	; 0x28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	40020000 	.word	0x40020000
 8004dc0:	40020800 	.word	0x40020800
 8004dc4:	40020400 	.word	0x40020400

08004dc8 <StartCommandWaitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCommandWaitTask */
void StartCommandWaitTask(void *argument)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  if (waitForStartCommand()){
 8004dd0:	f7fc fd32 	bl	8001838 <waitForStartCommand>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <StartCommandWaitTask+0x1c>
		  break;
	  }
      osDelay(1000);
 8004dda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dde:	f008 fdf7 	bl	800d9d0 <osDelay>
	  if (waitForStartCommand()){
 8004de2:	e7f5      	b.n	8004dd0 <StartCommandWaitTask+0x8>
		  break;
 8004de4:	bf00      	nop
  }

  // Start your main program here
  printIntroTitle();
 8004de6:	f7fc fe21 	bl	8001a2c <printIntroTitle>

  // Set the event flag to signal that the start command has been received
  osEventFlagsSet(startCommandEventHandle, 0x0001U);
 8004dea:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <StartCommandWaitTask+0x34>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2101      	movs	r1, #1
 8004df0:	4618      	mov	r0, r3
 8004df2:	f008 fe47 	bl	800da84 <osEventFlagsSet>


  // Exit this task
  osThreadExit();
 8004df6:	f008 fde5 	bl	800d9c4 <osThreadExit>
 8004dfa:	bf00      	nop
 8004dfc:	20004994 	.word	0x20004994

08004e00 <MenuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MenuTask */
void MenuTask(void *argument)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MenuTask */
	  // Wait for the start command event to be set
	  osEventFlagsWait(startCommandEventHandle, 0x0001U, osFlagsWaitAny, osWaitForever);
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <MenuTask+0x38>)
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e10:	2200      	movs	r2, #0
 8004e12:	2101      	movs	r1, #1
 8004e14:	f008 fe7a 	bl	800db0c <osEventFlagsWait>

      // Print menu options and handle user input
      printMenu(MENU_MAIN);
 8004e18:	2000      	movs	r0, #0
 8004e1a:	f7fc fd4d 	bl	80018b8 <printMenu>


  /* Infinite loop */
  for(;;)
  {
	  UART_Transmit_String("Choose an option:\r\n");
 8004e1e:	4807      	ldr	r0, [pc, #28]	; (8004e3c <MenuTask+0x3c>)
 8004e20:	f7fc fc5c 	bl	80016dc <UART_Transmit_String>
      // Wait for user input and execute the corresponding command
      char userInput = waitForUserInput(); // Implement this function to get user input
 8004e24:	f7fc fd34 	bl	8001890 <waitForUserInput>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	73fb      	strb	r3, [r7, #15]
      menu(userInput);
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fd f890 	bl	8001f54 <menu>
  {
 8004e34:	e7f3      	b.n	8004e1e <MenuTask+0x1e>
 8004e36:	bf00      	nop
 8004e38:	20004994 	.word	0x20004994
 8004e3c:	0801f8d0 	.word	0x0801f8d0

08004e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e44:	b672      	cpsid	i
}
 8004e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e48:	e7fe      	b.n	8004e48 <Error_Handler+0x8>
	...

08004e4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_MspInit+0x54>)
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	4a11      	ldr	r2, [pc, #68]	; (8004ea0 <HAL_MspInit+0x54>)
 8004e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e60:	6453      	str	r3, [r2, #68]	; 0x44
 8004e62:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <HAL_MspInit+0x54>)
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e6a:	607b      	str	r3, [r7, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_MspInit+0x54>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	4a0a      	ldr	r2, [pc, #40]	; (8004ea0 <HAL_MspInit+0x54>)
 8004e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <HAL_MspInit+0x54>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	210f      	movs	r1, #15
 8004e8e:	f06f 0001 	mvn.w	r0, #1
 8004e92:	f001 f856 	bl	8005f42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e96:	bf00      	nop
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800

08004ea4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	; 0x28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eac:	f107 0314 	add.w	r3, r7, #20
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	605a      	str	r2, [r3, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <HAL_ADC_MspInit+0x7c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d127      	bne.n	8004f16 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <HAL_ADC_MspInit+0x80>)
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <HAL_ADC_MspInit+0x80>)
 8004ed0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ed6:	4b13      	ldr	r3, [pc, #76]	; (8004f24 <HAL_ADC_MspInit+0x80>)
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <HAL_ADC_MspInit+0x80>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	4a0e      	ldr	r2, [pc, #56]	; (8004f24 <HAL_ADC_MspInit+0x80>)
 8004eec:	f043 0304 	orr.w	r3, r3, #4
 8004ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef2:	4b0c      	ldr	r3, [pc, #48]	; (8004f24 <HAL_ADC_MspInit+0x80>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004efe:	230c      	movs	r3, #12
 8004f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f02:	2303      	movs	r3, #3
 8004f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f0a:	f107 0314 	add.w	r3, r7, #20
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4805      	ldr	r0, [pc, #20]	; (8004f28 <HAL_ADC_MspInit+0x84>)
 8004f12:	f001 f8ef 	bl	80060f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004f16:	bf00      	nop
 8004f18:	3728      	adds	r7, #40	; 0x28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40012200 	.word	0x40012200
 8004f24:	40023800 	.word	0x40023800
 8004f28:	40020800 	.word	0x40020800

08004f2c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a0b      	ldr	r2, [pc, #44]	; (8004f68 <HAL_CRC_MspInit+0x3c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d10d      	bne.n	8004f5a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <HAL_CRC_MspInit+0x40>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <HAL_CRC_MspInit+0x40>)
 8004f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <HAL_CRC_MspInit+0x40>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	40023000 	.word	0x40023000
 8004f6c:	40023800 	.word	0x40023800

08004f70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08c      	sub	sp, #48	; 0x30
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f78:	f107 031c 	add.w	r3, r7, #28
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	605a      	str	r2, [r3, #4]
 8004f82:	609a      	str	r2, [r3, #8]
 8004f84:	60da      	str	r2, [r3, #12]
 8004f86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a33      	ldr	r2, [pc, #204]	; (800505c <HAL_I2C_MspInit+0xec>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d12d      	bne.n	8004fee <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f92:	2300      	movs	r3, #0
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	4b32      	ldr	r3, [pc, #200]	; (8005060 <HAL_I2C_MspInit+0xf0>)
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	4a31      	ldr	r2, [pc, #196]	; (8005060 <HAL_I2C_MspInit+0xf0>)
 8004f9c:	f043 0302 	orr.w	r3, r3, #2
 8004fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa2:	4b2f      	ldr	r3, [pc, #188]	; (8005060 <HAL_I2C_MspInit+0xf0>)
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004fae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fb4:	2312      	movs	r3, #18
 8004fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fc4:	f107 031c 	add.w	r3, r7, #28
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4826      	ldr	r0, [pc, #152]	; (8005064 <HAL_I2C_MspInit+0xf4>)
 8004fcc:	f001 f892 	bl	80060f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	4b22      	ldr	r3, [pc, #136]	; (8005060 <HAL_I2C_MspInit+0xf0>)
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	4a21      	ldr	r2, [pc, #132]	; (8005060 <HAL_I2C_MspInit+0xf0>)
 8004fda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fde:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe0:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <HAL_I2C_MspInit+0xf0>)
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004fec:	e031      	b.n	8005052 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1d      	ldr	r2, [pc, #116]	; (8005068 <HAL_I2C_MspInit+0xf8>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d12c      	bne.n	8005052 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	4b18      	ldr	r3, [pc, #96]	; (8005060 <HAL_I2C_MspInit+0xf0>)
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	4a17      	ldr	r2, [pc, #92]	; (8005060 <HAL_I2C_MspInit+0xf0>)
 8005002:	f043 0302 	orr.w	r3, r3, #2
 8005006:	6313      	str	r3, [r2, #48]	; 0x30
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <HAL_I2C_MspInit+0xf0>)
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005014:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800501a:	2312      	movs	r3, #18
 800501c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501e:	2300      	movs	r3, #0
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005022:	2303      	movs	r3, #3
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005026:	2304      	movs	r3, #4
 8005028:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800502a:	f107 031c 	add.w	r3, r7, #28
 800502e:	4619      	mov	r1, r3
 8005030:	480c      	ldr	r0, [pc, #48]	; (8005064 <HAL_I2C_MspInit+0xf4>)
 8005032:	f001 f85f 	bl	80060f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_I2C_MspInit+0xf0>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	4a08      	ldr	r2, [pc, #32]	; (8005060 <HAL_I2C_MspInit+0xf0>)
 8005040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005044:	6413      	str	r3, [r2, #64]	; 0x40
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_I2C_MspInit+0xf0>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
}
 8005052:	bf00      	nop
 8005054:	3730      	adds	r7, #48	; 0x30
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40005400 	.word	0x40005400
 8005060:	40023800 	.word	0x40023800
 8005064:	40020400 	.word	0x40020400
 8005068:	40005800 	.word	0x40005800

0800506c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005074:	f107 0308 	add.w	r3, r7, #8
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <HAL_RTC_MspInit+0x4c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d111      	bne.n	80050b0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800508c:	2302      	movs	r3, #2
 800508e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005090:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005094:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005096:	f107 0308 	add.w	r3, r7, #8
 800509a:	4618      	mov	r0, r3
 800509c:	f003 fa90 	bl	80085c0 <HAL_RCCEx_PeriphCLKConfig>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80050a6:	f7ff fecb 	bl	8004e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80050aa:	4b04      	ldr	r3, [pc, #16]	; (80050bc <HAL_RTC_MspInit+0x50>)
 80050ac:	2201      	movs	r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80050b0:	bf00      	nop
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40002800 	.word	0x40002800
 80050bc:	42470e3c 	.word	0x42470e3c

080050c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c8:	f107 0314 	add.w	r3, r7, #20
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	60da      	str	r2, [r3, #12]
 80050d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a19      	ldr	r2, [pc, #100]	; (8005144 <HAL_SPI_MspInit+0x84>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d12b      	bne.n	800513a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	4b18      	ldr	r3, [pc, #96]	; (8005148 <HAL_SPI_MspInit+0x88>)
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	4a17      	ldr	r2, [pc, #92]	; (8005148 <HAL_SPI_MspInit+0x88>)
 80050ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050f0:	6453      	str	r3, [r2, #68]	; 0x44
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <HAL_SPI_MspInit+0x88>)
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	4b11      	ldr	r3, [pc, #68]	; (8005148 <HAL_SPI_MspInit+0x88>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	4a10      	ldr	r2, [pc, #64]	; (8005148 <HAL_SPI_MspInit+0x88>)
 8005108:	f043 0301 	orr.w	r3, r3, #1
 800510c:	6313      	str	r3, [r2, #48]	; 0x30
 800510e:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <HAL_SPI_MspInit+0x88>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800511a:	23e0      	movs	r3, #224	; 0xe0
 800511c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511e:	2302      	movs	r3, #2
 8005120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005126:	2303      	movs	r3, #3
 8005128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800512a:	2305      	movs	r3, #5
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800512e:	f107 0314 	add.w	r3, r7, #20
 8005132:	4619      	mov	r1, r3
 8005134:	4805      	ldr	r0, [pc, #20]	; (800514c <HAL_SPI_MspInit+0x8c>)
 8005136:	f000 ffdd 	bl	80060f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800513a:	bf00      	nop
 800513c:	3728      	adds	r7, #40	; 0x28
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40013000 	.word	0x40013000
 8005148:	40023800 	.word	0x40023800
 800514c:	40020000 	.word	0x40020000

08005150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005160:	d10e      	bne.n	8005180 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <HAL_TIM_Base_MspInit+0x8c>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <HAL_TIM_Base_MspInit+0x8c>)
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	6413      	str	r3, [r2, #64]	; 0x40
 8005172:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <HAL_TIM_Base_MspInit+0x8c>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800517e:	e026      	b.n	80051ce <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <HAL_TIM_Base_MspInit+0x90>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d10e      	bne.n	80051a8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <HAL_TIM_Base_MspInit+0x8c>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	4a12      	ldr	r2, [pc, #72]	; (80051dc <HAL_TIM_Base_MspInit+0x8c>)
 8005194:	f043 0302 	orr.w	r3, r3, #2
 8005198:	6413      	str	r3, [r2, #64]	; 0x40
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <HAL_TIM_Base_MspInit+0x8c>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	693b      	ldr	r3, [r7, #16]
}
 80051a6:	e012      	b.n	80051ce <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a0d      	ldr	r2, [pc, #52]	; (80051e4 <HAL_TIM_Base_MspInit+0x94>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10d      	bne.n	80051ce <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	4b09      	ldr	r3, [pc, #36]	; (80051dc <HAL_TIM_Base_MspInit+0x8c>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	4a08      	ldr	r2, [pc, #32]	; (80051dc <HAL_TIM_Base_MspInit+0x8c>)
 80051bc:	f043 0308 	orr.w	r3, r3, #8
 80051c0:	6413      	str	r3, [r2, #64]	; 0x40
 80051c2:	4b06      	ldr	r3, [pc, #24]	; (80051dc <HAL_TIM_Base_MspInit+0x8c>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
}
 80051ce:	bf00      	nop
 80051d0:	371c      	adds	r7, #28
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40023800 	.word	0x40023800
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000c00 	.word	0x40000c00

080051e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	; 0x28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f0:	f107 0314 	add.w	r3, r7, #20
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	605a      	str	r2, [r3, #4]
 80051fa:	609a      	str	r2, [r3, #8]
 80051fc:	60da      	str	r2, [r3, #12]
 80051fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a21      	ldr	r2, [pc, #132]	; (800528c <HAL_TIM_MspPostInit+0xa4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d13c      	bne.n	8005284 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800520a:	2300      	movs	r3, #0
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	4b20      	ldr	r3, [pc, #128]	; (8005290 <HAL_TIM_MspPostInit+0xa8>)
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <HAL_TIM_MspPostInit+0xa8>)
 8005214:	f043 0304 	orr.w	r3, r3, #4
 8005218:	6313      	str	r3, [r2, #48]	; 0x30
 800521a:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <HAL_TIM_MspPostInit+0xa8>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	4b19      	ldr	r3, [pc, #100]	; (8005290 <HAL_TIM_MspPostInit+0xa8>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	4a18      	ldr	r2, [pc, #96]	; (8005290 <HAL_TIM_MspPostInit+0xa8>)
 8005230:	f043 0302 	orr.w	r3, r3, #2
 8005234:	6313      	str	r3, [r2, #48]	; 0x30
 8005236:	4b16      	ldr	r3, [pc, #88]	; (8005290 <HAL_TIM_MspPostInit+0xa8>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005242:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005248:	2302      	movs	r3, #2
 800524a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	2300      	movs	r3, #0
 800524e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005250:	2300      	movs	r3, #0
 8005252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005254:	2302      	movs	r3, #2
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005258:	f107 0314 	add.w	r3, r7, #20
 800525c:	4619      	mov	r1, r3
 800525e:	480d      	ldr	r0, [pc, #52]	; (8005294 <HAL_TIM_MspPostInit+0xac>)
 8005260:	f000 ff48 	bl	80060f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005264:	2320      	movs	r3, #32
 8005266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005268:	2302      	movs	r3, #2
 800526a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005270:	2300      	movs	r3, #0
 8005272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005274:	2302      	movs	r3, #2
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005278:	f107 0314 	add.w	r3, r7, #20
 800527c:	4619      	mov	r1, r3
 800527e:	4806      	ldr	r0, [pc, #24]	; (8005298 <HAL_TIM_MspPostInit+0xb0>)
 8005280:	f000 ff38 	bl	80060f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005284:	bf00      	nop
 8005286:	3728      	adds	r7, #40	; 0x28
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40000400 	.word	0x40000400
 8005290:	40023800 	.word	0x40023800
 8005294:	40020800 	.word	0x40020800
 8005298:	40020400 	.word	0x40020400

0800529c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b090      	sub	sp, #64	; 0x40
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	605a      	str	r2, [r3, #4]
 80052ae:	609a      	str	r2, [r3, #8]
 80052b0:	60da      	str	r2, [r3, #12]
 80052b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a74      	ldr	r2, [pc, #464]	; (800548c <HAL_UART_MspInit+0x1f0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d14b      	bne.n	8005356 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80052be:	2300      	movs	r3, #0
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c2:	4b73      	ldr	r3, [pc, #460]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	4a72      	ldr	r2, [pc, #456]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80052c8:	f043 0310 	orr.w	r3, r3, #16
 80052cc:	6453      	str	r3, [r2, #68]	; 0x44
 80052ce:	4b70      	ldr	r3, [pc, #448]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	f003 0310 	and.w	r3, r3, #16
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
 80052de:	4b6c      	ldr	r3, [pc, #432]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	4a6b      	ldr	r2, [pc, #428]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ea:	4b69      	ldr	r3, [pc, #420]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	623b      	str	r3, [r7, #32]
 80052fa:	4b65      	ldr	r3, [pc, #404]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	4a64      	ldr	r2, [pc, #400]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 8005300:	f043 0302 	orr.w	r3, r3, #2
 8005304:	6313      	str	r3, [r2, #48]	; 0x30
 8005306:	4b62      	ldr	r3, [pc, #392]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	623b      	str	r3, [r7, #32]
 8005310:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005318:	2302      	movs	r3, #2
 800531a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531c:	2300      	movs	r3, #0
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005320:	2303      	movs	r3, #3
 8005322:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005324:	2307      	movs	r3, #7
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800532c:	4619      	mov	r1, r3
 800532e:	4859      	ldr	r0, [pc, #356]	; (8005494 <HAL_UART_MspInit+0x1f8>)
 8005330:	f000 fee0 	bl	80060f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005338:	2302      	movs	r3, #2
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533c:	2300      	movs	r3, #0
 800533e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005340:	2303      	movs	r3, #3
 8005342:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005344:	2307      	movs	r3, #7
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800534c:	4619      	mov	r1, r3
 800534e:	4852      	ldr	r0, [pc, #328]	; (8005498 <HAL_UART_MspInit+0x1fc>)
 8005350:	f000 fed0 	bl	80060f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005354:	e095      	b.n	8005482 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a50      	ldr	r2, [pc, #320]	; (800549c <HAL_UART_MspInit+0x200>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d12c      	bne.n	80053ba <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	4b4a      	ldr	r3, [pc, #296]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	4a49      	ldr	r2, [pc, #292]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 800536a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536e:	6413      	str	r3, [r2, #64]	; 0x40
 8005370:	4b47      	ldr	r3, [pc, #284]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005378:	61fb      	str	r3, [r7, #28]
 800537a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800537c:	2300      	movs	r3, #0
 800537e:	61bb      	str	r3, [r7, #24]
 8005380:	4b43      	ldr	r3, [pc, #268]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	4a42      	ldr	r2, [pc, #264]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	6313      	str	r3, [r2, #48]	; 0x30
 800538c:	4b40      	ldr	r3, [pc, #256]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005398:	230c      	movs	r3, #12
 800539a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539c:	2302      	movs	r3, #2
 800539e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a4:	2303      	movs	r3, #3
 80053a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053a8:	2307      	movs	r3, #7
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053b0:	4619      	mov	r1, r3
 80053b2:	4838      	ldr	r0, [pc, #224]	; (8005494 <HAL_UART_MspInit+0x1f8>)
 80053b4:	f000 fe9e 	bl	80060f4 <HAL_GPIO_Init>
}
 80053b8:	e063      	b.n	8005482 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART3)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a38      	ldr	r2, [pc, #224]	; (80054a0 <HAL_UART_MspInit+0x204>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d12d      	bne.n	8005420 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	4b31      	ldr	r3, [pc, #196]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80053ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053cc:	4a30      	ldr	r2, [pc, #192]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80053ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d2:	6413      	str	r3, [r2, #64]	; 0x40
 80053d4:	4b2e      	ldr	r3, [pc, #184]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	4b2a      	ldr	r3, [pc, #168]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	4a29      	ldr	r2, [pc, #164]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80053ea:	f043 0304 	orr.w	r3, r3, #4
 80053ee:	6313      	str	r3, [r2, #48]	; 0x30
 80053f0:	4b27      	ldr	r3, [pc, #156]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80053fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005402:	2302      	movs	r3, #2
 8005404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005406:	2300      	movs	r3, #0
 8005408:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800540a:	2303      	movs	r3, #3
 800540c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800540e:	2307      	movs	r3, #7
 8005410:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005416:	4619      	mov	r1, r3
 8005418:	4822      	ldr	r0, [pc, #136]	; (80054a4 <HAL_UART_MspInit+0x208>)
 800541a:	f000 fe6b 	bl	80060f4 <HAL_GPIO_Init>
}
 800541e:	e030      	b.n	8005482 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART6)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a20      	ldr	r2, [pc, #128]	; (80054a8 <HAL_UART_MspInit+0x20c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d12b      	bne.n	8005482 <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	4b18      	ldr	r3, [pc, #96]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	4a17      	ldr	r2, [pc, #92]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 8005434:	f043 0320 	orr.w	r3, r3, #32
 8005438:	6453      	str	r3, [r2, #68]	; 0x44
 800543a:	4b15      	ldr	r3, [pc, #84]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005446:	2300      	movs	r3, #0
 8005448:	60bb      	str	r3, [r7, #8]
 800544a:	4b11      	ldr	r3, [pc, #68]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	4a10      	ldr	r2, [pc, #64]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 8005450:	f043 0304 	orr.w	r3, r3, #4
 8005454:	6313      	str	r3, [r2, #48]	; 0x30
 8005456:	4b0e      	ldr	r3, [pc, #56]	; (8005490 <HAL_UART_MspInit+0x1f4>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	60bb      	str	r3, [r7, #8]
 8005460:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005462:	23c0      	movs	r3, #192	; 0xc0
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005466:	2302      	movs	r3, #2
 8005468:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546a:	2300      	movs	r3, #0
 800546c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800546e:	2303      	movs	r3, #3
 8005470:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005472:	2308      	movs	r3, #8
 8005474:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800547a:	4619      	mov	r1, r3
 800547c:	4809      	ldr	r0, [pc, #36]	; (80054a4 <HAL_UART_MspInit+0x208>)
 800547e:	f000 fe39 	bl	80060f4 <HAL_GPIO_Init>
}
 8005482:	bf00      	nop
 8005484:	3740      	adds	r7, #64	; 0x40
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40011000 	.word	0x40011000
 8005490:	40023800 	.word	0x40023800
 8005494:	40020000 	.word	0x40020000
 8005498:	40020400 	.word	0x40020400
 800549c:	40004400 	.word	0x40004400
 80054a0:	40004800 	.word	0x40004800
 80054a4:	40020800 	.word	0x40020800
 80054a8:	40011400 	.word	0x40011400

080054ac <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80054b0:	4b0e      	ldr	r3, [pc, #56]	; (80054ec <SDTimer_Handler+0x40>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d006      	beq.n	80054c8 <SDTimer_Handler+0x1c>
    Timer1--;
 80054ba:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <SDTimer_Handler+0x40>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	4b09      	ldr	r3, [pc, #36]	; (80054ec <SDTimer_Handler+0x40>)
 80054c6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <SDTimer_Handler+0x44>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d006      	beq.n	80054e0 <SDTimer_Handler+0x34>
    Timer2--;
 80054d2:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <SDTimer_Handler+0x44>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <SDTimer_Handler+0x44>)
 80054de:	701a      	strb	r2, [r3, #0]
}
 80054e0:	bf00      	nop
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	20004628 	.word	0x20004628
 80054f0:	2000462a 	.word	0x2000462a

080054f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80054f8:	e7fe      	b.n	80054f8 <NMI_Handler+0x4>

080054fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054fa:	b480      	push	{r7}
 80054fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054fe:	e7fe      	b.n	80054fe <HardFault_Handler+0x4>

08005500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005504:	e7fe      	b.n	8005504 <MemManage_Handler+0x4>

08005506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800550a:	e7fe      	b.n	800550a <BusFault_Handler+0x4>

0800550c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005510:	e7fe      	b.n	8005510 <UsageFault_Handler+0x4>

08005512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005512:	b480      	push	{r7}
 8005514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005516:	bf00      	nop
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8005524:	4b0d      	ldr	r3, [pc, #52]	; (800555c <SysTick_Handler+0x3c>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	3301      	adds	r3, #1
 800552c:	b2da      	uxtb	r2, r3
 800552e:	4b0b      	ldr	r3, [pc, #44]	; (800555c <SysTick_Handler+0x3c>)
 8005530:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <SysTick_Handler+0x3c>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b09      	cmp	r3, #9
 800553a:	d904      	bls.n	8005546 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 800553c:	4b07      	ldr	r3, [pc, #28]	; (800555c <SysTick_Handler+0x3c>)
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8005542:	f7ff ffb3 	bl	80054ac <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005546:	f000 f97b 	bl	8005840 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800554a:	f00a fec5 	bl	80102d8 <xTaskGetSchedulerState>
 800554e:	4603      	mov	r3, r0
 8005550:	2b01      	cmp	r3, #1
 8005552:	d001      	beq.n	8005558 <SysTick_Handler+0x38>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005554:	f00b fde0 	bl	8011118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005558:	bf00      	nop
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20004998 	.word	0x20004998

08005560 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005564:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005568:	f000 ff7a 	bl	8006460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800556c:	bf00      	nop
 800556e:	bd80      	pop	{r7, pc}

08005570 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005574:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005578:	f000 ff72 	bl	8006460 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800557c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005580:	f000 ff6e 	bl	8006460 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005584:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005588:	f000 ff6a 	bl	8006460 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800558c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005590:	f000 ff66 	bl	8006460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005594:	bf00      	nop
 8005596:	bd80      	pop	{r7, pc}

08005598 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return 1;
 800559c:	2301      	movs	r3, #1
}
 800559e:	4618      	mov	r0, r3
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <_kill>:

int _kill(int pid, int sig)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80055b2:	f014 fcc7 	bl	8019f44 <__errno>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2216      	movs	r2, #22
 80055ba:	601a      	str	r2, [r3, #0]
  return -1;
 80055bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <_exit>:

void _exit (int status)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80055d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff ffe7 	bl	80055a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80055da:	e7fe      	b.n	80055da <_exit+0x12>

080055dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	e00a      	b.n	8005604 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80055ee:	f3af 8000 	nop.w
 80055f2:	4601      	mov	r1, r0
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	60ba      	str	r2, [r7, #8]
 80055fa:	b2ca      	uxtb	r2, r1
 80055fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	3301      	adds	r3, #1
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	dbf0      	blt.n	80055ee <_read+0x12>
  }

  return len;
 800560c:	687b      	ldr	r3, [r7, #4]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b086      	sub	sp, #24
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e009      	b.n	800563c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	60ba      	str	r2, [r7, #8]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	3301      	adds	r3, #1
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	dbf1      	blt.n	8005628 <_write+0x12>
  }
  return len;
 8005644:	687b      	ldr	r3, [r7, #4]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_close>:

int _close(int file)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005676:	605a      	str	r2, [r3, #4]
  return 0;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <_isatty>:

int _isatty(int file)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800568e:	2301      	movs	r3, #1
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056c0:	4a14      	ldr	r2, [pc, #80]	; (8005714 <_sbrk+0x5c>)
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <_sbrk+0x60>)
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056cc:	4b13      	ldr	r3, [pc, #76]	; (800571c <_sbrk+0x64>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056d4:	4b11      	ldr	r3, [pc, #68]	; (800571c <_sbrk+0x64>)
 80056d6:	4a12      	ldr	r2, [pc, #72]	; (8005720 <_sbrk+0x68>)
 80056d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056da:	4b10      	ldr	r3, [pc, #64]	; (800571c <_sbrk+0x64>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4413      	add	r3, r2
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d207      	bcs.n	80056f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056e8:	f014 fc2c 	bl	8019f44 <__errno>
 80056ec:	4603      	mov	r3, r0
 80056ee:	220c      	movs	r2, #12
 80056f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056f6:	e009      	b.n	800570c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056f8:	4b08      	ldr	r3, [pc, #32]	; (800571c <_sbrk+0x64>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056fe:	4b07      	ldr	r3, [pc, #28]	; (800571c <_sbrk+0x64>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4413      	add	r3, r2
 8005706:	4a05      	ldr	r2, [pc, #20]	; (800571c <_sbrk+0x64>)
 8005708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800570a:	68fb      	ldr	r3, [r7, #12]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20020000 	.word	0x20020000
 8005718:	00000400 	.word	0x00000400
 800571c:	2000499c 	.word	0x2000499c
 8005720:	20009518 	.word	0x20009518

08005724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <SystemInit+0x20>)
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572e:	4a05      	ldr	r2, [pc, #20]	; (8005744 <SystemInit+0x20>)
 8005730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005738:	bf00      	nop
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	e000ed00 	.word	0xe000ed00

08005748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800574c:	480d      	ldr	r0, [pc, #52]	; (8005784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800574e:	490e      	ldr	r1, [pc, #56]	; (8005788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005750:	4a0e      	ldr	r2, [pc, #56]	; (800578c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005754:	e002      	b.n	800575c <LoopCopyDataInit>

08005756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800575a:	3304      	adds	r3, #4

0800575c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800575c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800575e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005760:	d3f9      	bcc.n	8005756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005762:	4a0b      	ldr	r2, [pc, #44]	; (8005790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005764:	4c0b      	ldr	r4, [pc, #44]	; (8005794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005768:	e001      	b.n	800576e <LoopFillZerobss>

0800576a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800576a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800576c:	3204      	adds	r2, #4

0800576e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800576e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005770:	d3fb      	bcc.n	800576a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005772:	f7ff ffd7 	bl	8005724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005776:	f014 fbeb 	bl	8019f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800577a:	f7fe fe49 	bl	8004410 <main>
  bx  lr    
 800577e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005788:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800578c:	080203b8 	.word	0x080203b8
  ldr r2, =_sbss
 8005790:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005794:	20009514 	.word	0x20009514

08005798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005798:	e7fe      	b.n	8005798 <ADC_IRQHandler>
	...

0800579c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057a0:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <HAL_Init+0x40>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a0d      	ldr	r2, [pc, #52]	; (80057dc <HAL_Init+0x40>)
 80057a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057ac:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <HAL_Init+0x40>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a0a      	ldr	r2, [pc, #40]	; (80057dc <HAL_Init+0x40>)
 80057b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057b8:	4b08      	ldr	r3, [pc, #32]	; (80057dc <HAL_Init+0x40>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a07      	ldr	r2, [pc, #28]	; (80057dc <HAL_Init+0x40>)
 80057be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057c4:	2003      	movs	r0, #3
 80057c6:	f000 fbb1 	bl	8005f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057ca:	200f      	movs	r0, #15
 80057cc:	f000 f808 	bl	80057e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057d0:	f7ff fb3c 	bl	8004e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40023c00 	.word	0x40023c00

080057e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057e8:	4b12      	ldr	r3, [pc, #72]	; (8005834 <HAL_InitTick+0x54>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b12      	ldr	r3, [pc, #72]	; (8005838 <HAL_InitTick+0x58>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	4619      	mov	r1, r3
 80057f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80057fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fbc9 	bl	8005f96 <HAL_SYSTICK_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e00e      	b.n	800582c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b0f      	cmp	r3, #15
 8005812:	d80a      	bhi.n	800582a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005814:	2200      	movs	r2, #0
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800581c:	f000 fb91 	bl	8005f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005820:	4a06      	ldr	r2, [pc, #24]	; (800583c <HAL_InitTick+0x5c>)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	e000      	b.n	800582c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000008 	.word	0x20000008
 8005838:	20000010 	.word	0x20000010
 800583c:	2000000c 	.word	0x2000000c

08005840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_IncTick+0x20>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	4b06      	ldr	r3, [pc, #24]	; (8005864 <HAL_IncTick+0x24>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4413      	add	r3, r2
 8005850:	4a04      	ldr	r2, [pc, #16]	; (8005864 <HAL_IncTick+0x24>)
 8005852:	6013      	str	r3, [r2, #0]
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	20000010 	.word	0x20000010
 8005864:	200049a0 	.word	0x200049a0

08005868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  return uwTick;
 800586c:	4b03      	ldr	r3, [pc, #12]	; (800587c <HAL_GetTick+0x14>)
 800586e:	681b      	ldr	r3, [r3, #0]
}
 8005870:	4618      	mov	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	200049a0 	.word	0x200049a0

08005880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005888:	f7ff ffee 	bl	8005868 <HAL_GetTick>
 800588c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005898:	d005      	beq.n	80058a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800589a:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <HAL_Delay+0x44>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058a6:	bf00      	nop
 80058a8:	f7ff ffde 	bl	8005868 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d8f7      	bhi.n	80058a8 <HAL_Delay+0x28>
  {
  }
}
 80058b8:	bf00      	nop
 80058ba:	bf00      	nop
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000010 	.word	0x20000010

080058c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e033      	b.n	8005946 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff fadc 	bl	8004ea4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fe:	f003 0310 	and.w	r3, r3, #16
 8005902:	2b00      	cmp	r3, #0
 8005904:	d118      	bne.n	8005938 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800590e:	f023 0302 	bic.w	r3, r3, #2
 8005912:	f043 0202 	orr.w	r2, r3, #2
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f93a 	bl	8005b94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f023 0303 	bic.w	r3, r3, #3
 800592e:	f043 0201 	orr.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	641a      	str	r2, [r3, #64]	; 0x40
 8005936:	e001      	b.n	800593c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_ADC_ConfigChannel+0x1c>
 8005968:	2302      	movs	r3, #2
 800596a:	e105      	b.n	8005b78 <HAL_ADC_ConfigChannel+0x228>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b09      	cmp	r3, #9
 800597a:	d925      	bls.n	80059c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68d9      	ldr	r1, [r3, #12]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	461a      	mov	r2, r3
 800598a:	4613      	mov	r3, r2
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	4413      	add	r3, r2
 8005990:	3b1e      	subs	r3, #30
 8005992:	2207      	movs	r2, #7
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	43da      	mvns	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	400a      	ands	r2, r1
 80059a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68d9      	ldr	r1, [r3, #12]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	4618      	mov	r0, r3
 80059b4:	4603      	mov	r3, r0
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	4403      	add	r3, r0
 80059ba:	3b1e      	subs	r3, #30
 80059bc:	409a      	lsls	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	e022      	b.n	8005a0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6919      	ldr	r1, [r3, #16]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	4613      	mov	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	2207      	movs	r2, #7
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	43da      	mvns	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	400a      	ands	r2, r1
 80059ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6919      	ldr	r1, [r3, #16]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	4618      	mov	r0, r3
 80059fe:	4603      	mov	r3, r0
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4403      	add	r3, r0
 8005a04:	409a      	lsls	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b06      	cmp	r3, #6
 8005a14:	d824      	bhi.n	8005a60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	3b05      	subs	r3, #5
 8005a28:	221f      	movs	r2, #31
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	43da      	mvns	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	400a      	ands	r2, r1
 8005a36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	4618      	mov	r0, r3
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	3b05      	subs	r3, #5
 8005a52:	fa00 f203 	lsl.w	r2, r0, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8005a5e:	e04c      	b.n	8005afa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b0c      	cmp	r3, #12
 8005a66:	d824      	bhi.n	8005ab2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	3b23      	subs	r3, #35	; 0x23
 8005a7a:	221f      	movs	r2, #31
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	43da      	mvns	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	400a      	ands	r2, r1
 8005a88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	4618      	mov	r0, r3
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3b23      	subs	r3, #35	; 0x23
 8005aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
 8005ab0:	e023      	b.n	8005afa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3b41      	subs	r3, #65	; 0x41
 8005ac4:	221f      	movs	r2, #31
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43da      	mvns	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	400a      	ands	r2, r1
 8005ad2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	3b41      	subs	r3, #65	; 0x41
 8005aee:	fa00 f203 	lsl.w	r2, r0, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005afa:	4b22      	ldr	r3, [pc, #136]	; (8005b84 <HAL_ADC_ConfigChannel+0x234>)
 8005afc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a21      	ldr	r2, [pc, #132]	; (8005b88 <HAL_ADC_ConfigChannel+0x238>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d109      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x1cc>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b12      	cmp	r3, #18
 8005b0e:	d105      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a19      	ldr	r2, [pc, #100]	; (8005b88 <HAL_ADC_ConfigChannel+0x238>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d123      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x21e>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b10      	cmp	r3, #16
 8005b2c:	d003      	beq.n	8005b36 <HAL_ADC_ConfigChannel+0x1e6>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b11      	cmp	r3, #17
 8005b34:	d11b      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b10      	cmp	r3, #16
 8005b48:	d111      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b4a:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <HAL_ADC_ConfigChannel+0x23c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a10      	ldr	r2, [pc, #64]	; (8005b90 <HAL_ADC_ConfigChannel+0x240>)
 8005b50:	fba2 2303 	umull	r2, r3, r2, r3
 8005b54:	0c9a      	lsrs	r2, r3, #18
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005b60:	e002      	b.n	8005b68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f9      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40012300 	.word	0x40012300
 8005b88:	40012000 	.word	0x40012000
 8005b8c:	20000008 	.word	0x20000008
 8005b90:	431bde83 	.word	0x431bde83

08005b94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b9c:	4b79      	ldr	r3, [pc, #484]	; (8005d84 <ADC_Init+0x1f0>)
 8005b9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6859      	ldr	r1, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	021a      	lsls	r2, r3, #8
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005bec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6859      	ldr	r1, [r3, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6899      	ldr	r1, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	4a58      	ldr	r2, [pc, #352]	; (8005d88 <ADC_Init+0x1f4>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d022      	beq.n	8005c72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6899      	ldr	r1, [r3, #8]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6899      	ldr	r1, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	609a      	str	r2, [r3, #8]
 8005c70:	e00f      	b.n	8005c92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0202 	bic.w	r2, r2, #2
 8005ca0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6899      	ldr	r1, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	7e1b      	ldrb	r3, [r3, #24]
 8005cac:	005a      	lsls	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01b      	beq.n	8005cf8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005cde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6859      	ldr	r1, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	3b01      	subs	r3, #1
 8005cec:	035a      	lsls	r2, r3, #13
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	e007      	b.n	8005d08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	051a      	lsls	r2, r3, #20
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6899      	ldr	r1, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d4a:	025a      	lsls	r2, r3, #9
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6899      	ldr	r1, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	029a      	lsls	r2, r3, #10
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	609a      	str	r2, [r3, #8]
}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	40012300 	.word	0x40012300
 8005d88:	0f000001 	.word	0x0f000001

08005d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d9c:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005da8:	4013      	ands	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dbe:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	60d3      	str	r3, [r2, #12]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	e000ed00 	.word	0xe000ed00

08005dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dd8:	4b04      	ldr	r3, [pc, #16]	; (8005dec <__NVIC_GetPriorityGrouping+0x18>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	0a1b      	lsrs	r3, r3, #8
 8005dde:	f003 0307 	and.w	r3, r3, #7
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	e000ed00 	.word	0xe000ed00

08005df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	db0b      	blt.n	8005e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	f003 021f 	and.w	r2, r3, #31
 8005e08:	4907      	ldr	r1, [pc, #28]	; (8005e28 <__NVIC_EnableIRQ+0x38>)
 8005e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	2001      	movs	r0, #1
 8005e12:	fa00 f202 	lsl.w	r2, r0, r2
 8005e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	e000e100 	.word	0xe000e100

08005e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	4603      	mov	r3, r0
 8005e34:	6039      	str	r1, [r7, #0]
 8005e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	db0a      	blt.n	8005e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	490c      	ldr	r1, [pc, #48]	; (8005e78 <__NVIC_SetPriority+0x4c>)
 8005e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4a:	0112      	lsls	r2, r2, #4
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	440b      	add	r3, r1
 8005e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e54:	e00a      	b.n	8005e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	4908      	ldr	r1, [pc, #32]	; (8005e7c <__NVIC_SetPriority+0x50>)
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	3b04      	subs	r3, #4
 8005e64:	0112      	lsls	r2, r2, #4
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	440b      	add	r3, r1
 8005e6a:	761a      	strb	r2, [r3, #24]
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	e000e100 	.word	0xe000e100
 8005e7c:	e000ed00 	.word	0xe000ed00

08005e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	; 0x24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f1c3 0307 	rsb	r3, r3, #7
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	bf28      	it	cs
 8005e9e:	2304      	movcs	r3, #4
 8005ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	2b06      	cmp	r3, #6
 8005ea8:	d902      	bls.n	8005eb0 <NVIC_EncodePriority+0x30>
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	3b03      	subs	r3, #3
 8005eae:	e000      	b.n	8005eb2 <NVIC_EncodePriority+0x32>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43da      	mvns	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	401a      	ands	r2, r3
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed2:	43d9      	mvns	r1, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ed8:	4313      	orrs	r3, r2
         );
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3724      	adds	r7, #36	; 0x24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ef8:	d301      	bcc.n	8005efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005efa:	2301      	movs	r3, #1
 8005efc:	e00f      	b.n	8005f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005efe:	4a0a      	ldr	r2, [pc, #40]	; (8005f28 <SysTick_Config+0x40>)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f06:	210f      	movs	r1, #15
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f0c:	f7ff ff8e 	bl	8005e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f10:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <SysTick_Config+0x40>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f16:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <SysTick_Config+0x40>)
 8005f18:	2207      	movs	r2, #7
 8005f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	e000e010 	.word	0xe000e010

08005f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7ff ff29 	bl	8005d8c <__NVIC_SetPriorityGrouping>
}
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b086      	sub	sp, #24
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	4603      	mov	r3, r0
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f54:	f7ff ff3e 	bl	8005dd4 <__NVIC_GetPriorityGrouping>
 8005f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	6978      	ldr	r0, [r7, #20]
 8005f60:	f7ff ff8e 	bl	8005e80 <NVIC_EncodePriority>
 8005f64:	4602      	mov	r2, r0
 8005f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff ff5d 	bl	8005e2c <__NVIC_SetPriority>
}
 8005f72:	bf00      	nop
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	4603      	mov	r3, r0
 8005f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff ff31 	bl	8005df0 <__NVIC_EnableIRQ>
}
 8005f8e:	bf00      	nop
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff ffa2 	bl	8005ee8 <SysTick_Config>
 8005fa4:	4603      	mov	r3, r0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e00e      	b.n	8005fde <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	795b      	ldrb	r3, [r3, #5]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d105      	bne.n	8005fd6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7fe ffab 	bl	8004f2c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_DMA_Start_IT+0x26>
 8006008:	2302      	movs	r3, #2
 800600a:	e040      	b.n	800608e <HAL_DMA_Start_IT+0xa8>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d12f      	bne.n	8006080 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f82e 	bl	8006096 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603e:	223f      	movs	r2, #63	; 0x3f
 8006040:	409a      	lsls	r2, r3
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0216 	orr.w	r2, r2, #22
 8006054:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0208 	orr.w	r2, r2, #8
 800606c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0201 	orr.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	e005      	b.n	800608c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006088:	2302      	movs	r3, #2
 800608a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800608c:	7dfb      	ldrb	r3, [r7, #23]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006096:	b480      	push	{r7}
 8006098:	b085      	sub	sp, #20
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060b2:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	d108      	bne.n	80060d6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060d4:	e007      	b.n	80060e6 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	60da      	str	r2, [r3, #12]
}
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b089      	sub	sp, #36	; 0x24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006102:	2300      	movs	r3, #0
 8006104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006106:	2300      	movs	r3, #0
 8006108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]
 800610e:	e16b      	b.n	80063e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006110:	2201      	movs	r2, #1
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	fa02 f303 	lsl.w	r3, r2, r3
 8006118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4013      	ands	r3, r2
 8006122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	429a      	cmp	r2, r3
 800612a:	f040 815a 	bne.w	80063e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b01      	cmp	r3, #1
 8006138:	d005      	beq.n	8006146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006142:	2b02      	cmp	r3, #2
 8006144:	d130      	bne.n	80061a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	2203      	movs	r2, #3
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	43db      	mvns	r3, r3
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	4013      	ands	r3, r2
 800615c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	fa02 f303 	lsl.w	r3, r2, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4313      	orrs	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800617c:	2201      	movs	r2, #1
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	43db      	mvns	r3, r3
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	4013      	ands	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	091b      	lsrs	r3, r3, #4
 8006192:	f003 0201 	and.w	r2, r3, #1
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4313      	orrs	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f003 0303 	and.w	r3, r3, #3
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d017      	beq.n	80061e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	2203      	movs	r2, #3
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	43db      	mvns	r3, r3
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	4013      	ands	r3, r2
 80061ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4313      	orrs	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f003 0303 	and.w	r3, r3, #3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d123      	bne.n	8006238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	08da      	lsrs	r2, r3, #3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3208      	adds	r2, #8
 80061f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	220f      	movs	r2, #15
 8006208:	fa02 f303 	lsl.w	r3, r2, r3
 800620c:	43db      	mvns	r3, r3
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	4013      	ands	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	691a      	ldr	r2, [r3, #16]
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	4313      	orrs	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	08da      	lsrs	r2, r3, #3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3208      	adds	r2, #8
 8006232:	69b9      	ldr	r1, [r7, #24]
 8006234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	2203      	movs	r2, #3
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	43db      	mvns	r3, r3
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	4013      	ands	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f003 0203 	and.w	r2, r3, #3
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4313      	orrs	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 80b4 	beq.w	80063e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	4b60      	ldr	r3, [pc, #384]	; (8006400 <HAL_GPIO_Init+0x30c>)
 8006280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006282:	4a5f      	ldr	r2, [pc, #380]	; (8006400 <HAL_GPIO_Init+0x30c>)
 8006284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006288:	6453      	str	r3, [r2, #68]	; 0x44
 800628a:	4b5d      	ldr	r3, [pc, #372]	; (8006400 <HAL_GPIO_Init+0x30c>)
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006296:	4a5b      	ldr	r2, [pc, #364]	; (8006404 <HAL_GPIO_Init+0x310>)
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	089b      	lsrs	r3, r3, #2
 800629c:	3302      	adds	r3, #2
 800629e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	220f      	movs	r2, #15
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43db      	mvns	r3, r3
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	4013      	ands	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a52      	ldr	r2, [pc, #328]	; (8006408 <HAL_GPIO_Init+0x314>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d02b      	beq.n	800631a <HAL_GPIO_Init+0x226>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a51      	ldr	r2, [pc, #324]	; (800640c <HAL_GPIO_Init+0x318>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d025      	beq.n	8006316 <HAL_GPIO_Init+0x222>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a50      	ldr	r2, [pc, #320]	; (8006410 <HAL_GPIO_Init+0x31c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d01f      	beq.n	8006312 <HAL_GPIO_Init+0x21e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a4f      	ldr	r2, [pc, #316]	; (8006414 <HAL_GPIO_Init+0x320>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d019      	beq.n	800630e <HAL_GPIO_Init+0x21a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a4e      	ldr	r2, [pc, #312]	; (8006418 <HAL_GPIO_Init+0x324>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <HAL_GPIO_Init+0x216>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a4d      	ldr	r2, [pc, #308]	; (800641c <HAL_GPIO_Init+0x328>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00d      	beq.n	8006306 <HAL_GPIO_Init+0x212>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a4c      	ldr	r2, [pc, #304]	; (8006420 <HAL_GPIO_Init+0x32c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d007      	beq.n	8006302 <HAL_GPIO_Init+0x20e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a4b      	ldr	r2, [pc, #300]	; (8006424 <HAL_GPIO_Init+0x330>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d101      	bne.n	80062fe <HAL_GPIO_Init+0x20a>
 80062fa:	2307      	movs	r3, #7
 80062fc:	e00e      	b.n	800631c <HAL_GPIO_Init+0x228>
 80062fe:	2308      	movs	r3, #8
 8006300:	e00c      	b.n	800631c <HAL_GPIO_Init+0x228>
 8006302:	2306      	movs	r3, #6
 8006304:	e00a      	b.n	800631c <HAL_GPIO_Init+0x228>
 8006306:	2305      	movs	r3, #5
 8006308:	e008      	b.n	800631c <HAL_GPIO_Init+0x228>
 800630a:	2304      	movs	r3, #4
 800630c:	e006      	b.n	800631c <HAL_GPIO_Init+0x228>
 800630e:	2303      	movs	r3, #3
 8006310:	e004      	b.n	800631c <HAL_GPIO_Init+0x228>
 8006312:	2302      	movs	r3, #2
 8006314:	e002      	b.n	800631c <HAL_GPIO_Init+0x228>
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <HAL_GPIO_Init+0x228>
 800631a:	2300      	movs	r3, #0
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	f002 0203 	and.w	r2, r2, #3
 8006322:	0092      	lsls	r2, r2, #2
 8006324:	4093      	lsls	r3, r2
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	4313      	orrs	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800632c:	4935      	ldr	r1, [pc, #212]	; (8006404 <HAL_GPIO_Init+0x310>)
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	089b      	lsrs	r3, r3, #2
 8006332:	3302      	adds	r3, #2
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800633a:	4b3b      	ldr	r3, [pc, #236]	; (8006428 <HAL_GPIO_Init+0x334>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	43db      	mvns	r3, r3
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	4013      	ands	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800635e:	4a32      	ldr	r2, [pc, #200]	; (8006428 <HAL_GPIO_Init+0x334>)
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006364:	4b30      	ldr	r3, [pc, #192]	; (8006428 <HAL_GPIO_Init+0x334>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	43db      	mvns	r3, r3
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	4013      	ands	r3, r2
 8006372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006388:	4a27      	ldr	r2, [pc, #156]	; (8006428 <HAL_GPIO_Init+0x334>)
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800638e:	4b26      	ldr	r3, [pc, #152]	; (8006428 <HAL_GPIO_Init+0x334>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	43db      	mvns	r3, r3
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	4013      	ands	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063b2:	4a1d      	ldr	r2, [pc, #116]	; (8006428 <HAL_GPIO_Init+0x334>)
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063b8:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <HAL_GPIO_Init+0x334>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	43db      	mvns	r3, r3
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	4013      	ands	r3, r2
 80063c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063dc:	4a12      	ldr	r2, [pc, #72]	; (8006428 <HAL_GPIO_Init+0x334>)
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	3301      	adds	r3, #1
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	2b0f      	cmp	r3, #15
 80063ec:	f67f ae90 	bls.w	8006110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80063f0:	bf00      	nop
 80063f2:	bf00      	nop
 80063f4:	3724      	adds	r7, #36	; 0x24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40023800 	.word	0x40023800
 8006404:	40013800 	.word	0x40013800
 8006408:	40020000 	.word	0x40020000
 800640c:	40020400 	.word	0x40020400
 8006410:	40020800 	.word	0x40020800
 8006414:	40020c00 	.word	0x40020c00
 8006418:	40021000 	.word	0x40021000
 800641c:	40021400 	.word	0x40021400
 8006420:	40021800 	.word	0x40021800
 8006424:	40021c00 	.word	0x40021c00
 8006428:	40013c00 	.word	0x40013c00

0800642c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	807b      	strh	r3, [r7, #2]
 8006438:	4613      	mov	r3, r2
 800643a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800643c:	787b      	ldrb	r3, [r7, #1]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006442:	887a      	ldrh	r2, [r7, #2]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006448:	e003      	b.n	8006452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800644a:	887b      	ldrh	r3, [r7, #2]
 800644c:	041a      	lsls	r2, r3, #16
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	619a      	str	r2, [r3, #24]
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	4603      	mov	r3, r0
 8006468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800646a:	4b08      	ldr	r3, [pc, #32]	; (800648c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800646c:	695a      	ldr	r2, [r3, #20]
 800646e:	88fb      	ldrh	r3, [r7, #6]
 8006470:	4013      	ands	r3, r2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d006      	beq.n	8006484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006476:	4a05      	ldr	r2, [pc, #20]	; (800648c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006478:	88fb      	ldrh	r3, [r7, #6]
 800647a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800647c:	88fb      	ldrh	r3, [r7, #6]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 f806 	bl	8006490 <HAL_GPIO_EXTI_Callback>
  }
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40013c00 	.word	0x40013c00

08006490 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e12b      	b.n	8006712 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fe fd4e 	bl	8004f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2224      	movs	r2, #36	; 0x24
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0201 	bic.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800650a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800650c:	f002 f830 	bl	8008570 <HAL_RCC_GetPCLK1Freq>
 8006510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	4a81      	ldr	r2, [pc, #516]	; (800671c <HAL_I2C_Init+0x274>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d807      	bhi.n	800652c <HAL_I2C_Init+0x84>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4a80      	ldr	r2, [pc, #512]	; (8006720 <HAL_I2C_Init+0x278>)
 8006520:	4293      	cmp	r3, r2
 8006522:	bf94      	ite	ls
 8006524:	2301      	movls	r3, #1
 8006526:	2300      	movhi	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	e006      	b.n	800653a <HAL_I2C_Init+0x92>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4a7d      	ldr	r2, [pc, #500]	; (8006724 <HAL_I2C_Init+0x27c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	bf94      	ite	ls
 8006534:	2301      	movls	r3, #1
 8006536:	2300      	movhi	r3, #0
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e0e7      	b.n	8006712 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4a78      	ldr	r2, [pc, #480]	; (8006728 <HAL_I2C_Init+0x280>)
 8006546:	fba2 2303 	umull	r2, r3, r2, r3
 800654a:	0c9b      	lsrs	r3, r3, #18
 800654c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	4a6a      	ldr	r2, [pc, #424]	; (800671c <HAL_I2C_Init+0x274>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d802      	bhi.n	800657c <HAL_I2C_Init+0xd4>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	3301      	adds	r3, #1
 800657a:	e009      	b.n	8006590 <HAL_I2C_Init+0xe8>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006582:	fb02 f303 	mul.w	r3, r2, r3
 8006586:	4a69      	ldr	r2, [pc, #420]	; (800672c <HAL_I2C_Init+0x284>)
 8006588:	fba2 2303 	umull	r2, r3, r2, r3
 800658c:	099b      	lsrs	r3, r3, #6
 800658e:	3301      	adds	r3, #1
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	430b      	orrs	r3, r1
 8006596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	495c      	ldr	r1, [pc, #368]	; (800671c <HAL_I2C_Init+0x274>)
 80065ac:	428b      	cmp	r3, r1
 80065ae:	d819      	bhi.n	80065e4 <HAL_I2C_Init+0x13c>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	1e59      	subs	r1, r3, #1
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80065be:	1c59      	adds	r1, r3, #1
 80065c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065c4:	400b      	ands	r3, r1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <HAL_I2C_Init+0x138>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1e59      	subs	r1, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80065d8:	3301      	adds	r3, #1
 80065da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065de:	e051      	b.n	8006684 <HAL_I2C_Init+0x1dc>
 80065e0:	2304      	movs	r3, #4
 80065e2:	e04f      	b.n	8006684 <HAL_I2C_Init+0x1dc>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d111      	bne.n	8006610 <HAL_I2C_Init+0x168>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	1e58      	subs	r0, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6859      	ldr	r1, [r3, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	440b      	add	r3, r1
 80065fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80065fe:	3301      	adds	r3, #1
 8006600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006604:	2b00      	cmp	r3, #0
 8006606:	bf0c      	ite	eq
 8006608:	2301      	moveq	r3, #1
 800660a:	2300      	movne	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	e012      	b.n	8006636 <HAL_I2C_Init+0x18e>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	1e58      	subs	r0, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6859      	ldr	r1, [r3, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	440b      	add	r3, r1
 800661e:	0099      	lsls	r1, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	fbb0 f3f3 	udiv	r3, r0, r3
 8006626:	3301      	adds	r3, #1
 8006628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800662c:	2b00      	cmp	r3, #0
 800662e:	bf0c      	ite	eq
 8006630:	2301      	moveq	r3, #1
 8006632:	2300      	movne	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_I2C_Init+0x196>
 800663a:	2301      	movs	r3, #1
 800663c:	e022      	b.n	8006684 <HAL_I2C_Init+0x1dc>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10e      	bne.n	8006664 <HAL_I2C_Init+0x1bc>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	1e58      	subs	r0, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6859      	ldr	r1, [r3, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	440b      	add	r3, r1
 8006654:	fbb0 f3f3 	udiv	r3, r0, r3
 8006658:	3301      	adds	r3, #1
 800665a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800665e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006662:	e00f      	b.n	8006684 <HAL_I2C_Init+0x1dc>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	1e58      	subs	r0, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6859      	ldr	r1, [r3, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	0099      	lsls	r1, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	fbb0 f3f3 	udiv	r3, r0, r3
 800667a:	3301      	adds	r3, #1
 800667c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	6809      	ldr	r1, [r1, #0]
 8006688:	4313      	orrs	r3, r2
 800668a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69da      	ldr	r2, [r3, #28]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6911      	ldr	r1, [r2, #16]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	68d2      	ldr	r2, [r2, #12]
 80066be:	4311      	orrs	r1, r2
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6812      	ldr	r2, [r2, #0]
 80066c4:	430b      	orrs	r3, r1
 80066c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	000186a0 	.word	0x000186a0
 8006720:	001e847f 	.word	0x001e847f
 8006724:	003d08ff 	.word	0x003d08ff
 8006728:	431bde83 	.word	0x431bde83
 800672c:	10624dd3 	.word	0x10624dd3

08006730 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af02      	add	r7, sp, #8
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	607a      	str	r2, [r7, #4]
 800673a:	461a      	mov	r2, r3
 800673c:	460b      	mov	r3, r1
 800673e:	817b      	strh	r3, [r7, #10]
 8006740:	4613      	mov	r3, r2
 8006742:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006744:	f7ff f890 	bl	8005868 <HAL_GetTick>
 8006748:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b20      	cmp	r3, #32
 8006754:	f040 80e0 	bne.w	8006918 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	2319      	movs	r3, #25
 800675e:	2201      	movs	r2, #1
 8006760:	4970      	ldr	r1, [pc, #448]	; (8006924 <HAL_I2C_Master_Transmit+0x1f4>)
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f001 f8f6 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800676e:	2302      	movs	r3, #2
 8006770:	e0d3      	b.n	800691a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_I2C_Master_Transmit+0x50>
 800677c:	2302      	movs	r3, #2
 800677e:	e0cc      	b.n	800691a <HAL_I2C_Master_Transmit+0x1ea>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b01      	cmp	r3, #1
 8006794:	d007      	beq.n	80067a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0201 	orr.w	r2, r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2221      	movs	r2, #33	; 0x21
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2210      	movs	r2, #16
 80067c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	893a      	ldrh	r2, [r7, #8]
 80067d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4a50      	ldr	r2, [pc, #320]	; (8006928 <HAL_I2C_Master_Transmit+0x1f8>)
 80067e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80067e8:	8979      	ldrh	r1, [r7, #10]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	6a3a      	ldr	r2, [r7, #32]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 fde2 	bl	80073b8 <I2C_MasterRequestWrite>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e08d      	b.n	800691a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067fe:	2300      	movs	r3, #0
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	613b      	str	r3, [r7, #16]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006814:	e066      	b.n	80068e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	6a39      	ldr	r1, [r7, #32]
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f001 f970 	bl	8007b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00d      	beq.n	8006842 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	2b04      	cmp	r3, #4
 800682c:	d107      	bne.n	800683e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800683c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e06b      	b.n	800691a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	781a      	ldrb	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b04      	cmp	r3, #4
 800687e:	d11b      	bne.n	80068b8 <HAL_I2C_Master_Transmit+0x188>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006884:	2b00      	cmp	r3, #0
 8006886:	d017      	beq.n	80068b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	6a39      	ldr	r1, [r7, #32]
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f001 f960 	bl	8007b82 <I2C_WaitOnBTFFlagUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00d      	beq.n	80068e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d107      	bne.n	80068e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e01a      	b.n	800691a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d194      	bne.n	8006816 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	e000      	b.n	800691a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006918:	2302      	movs	r3, #2
  }
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	00100002 	.word	0x00100002
 8006928:	ffff0000 	.word	0xffff0000

0800692c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08c      	sub	sp, #48	; 0x30
 8006930:	af02      	add	r7, sp, #8
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	461a      	mov	r2, r3
 8006938:	460b      	mov	r3, r1
 800693a:	817b      	strh	r3, [r7, #10]
 800693c:	4613      	mov	r3, r2
 800693e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006940:	f7fe ff92 	bl	8005868 <HAL_GetTick>
 8006944:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b20      	cmp	r3, #32
 8006950:	f040 820b 	bne.w	8006d6a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	2319      	movs	r3, #25
 800695a:	2201      	movs	r2, #1
 800695c:	497c      	ldr	r1, [pc, #496]	; (8006b50 <HAL_I2C_Master_Receive+0x224>)
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 fff8 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800696a:	2302      	movs	r3, #2
 800696c:	e1fe      	b.n	8006d6c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_I2C_Master_Receive+0x50>
 8006978:	2302      	movs	r3, #2
 800697a:	e1f7      	b.n	8006d6c <HAL_I2C_Master_Receive+0x440>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b01      	cmp	r3, #1
 8006990:	d007      	beq.n	80069a2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0201 	orr.w	r2, r2, #1
 80069a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2222      	movs	r2, #34	; 0x22
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2210      	movs	r2, #16
 80069be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	893a      	ldrh	r2, [r7, #8]
 80069d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a5c      	ldr	r2, [pc, #368]	; (8006b54 <HAL_I2C_Master_Receive+0x228>)
 80069e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80069e4:	8979      	ldrh	r1, [r7, #10]
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fd66 	bl	80074bc <I2C_MasterRequestRead>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e1b8      	b.n	8006d6c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d113      	bne.n	8006a2a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a02:	2300      	movs	r3, #0
 8006a04:	623b      	str	r3, [r7, #32]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	623b      	str	r3, [r7, #32]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	623b      	str	r3, [r7, #32]
 8006a16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	e18c      	b.n	8006d44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d11b      	bne.n	8006a6a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a42:	2300      	movs	r3, #0
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	e16c      	b.n	8006d44 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d11b      	bne.n	8006aaa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a92:	2300      	movs	r3, #0
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	e14c      	b.n	8006d44 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ad0:	e138      	b.n	8006d44 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	f200 80f1 	bhi.w	8006cbe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d123      	bne.n	8006b2c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f001 f88b 	bl	8007c04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e139      	b.n	8006d6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b2a:	e10b      	b.n	8006d44 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d14e      	bne.n	8006bd2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4906      	ldr	r1, [pc, #24]	; (8006b58 <HAL_I2C_Master_Receive+0x22c>)
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 ff08 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d008      	beq.n	8006b5c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e10e      	b.n	8006d6c <HAL_I2C_Master_Receive+0x440>
 8006b4e:	bf00      	nop
 8006b50:	00100002 	.word	0x00100002
 8006b54:	ffff0000 	.word	0xffff0000
 8006b58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bd0:	e0b8      	b.n	8006d44 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	2200      	movs	r2, #0
 8006bda:	4966      	ldr	r1, [pc, #408]	; (8006d74 <HAL_I2C_Master_Receive+0x448>)
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 feb9 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e0bf      	b.n	8006d6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3b01      	subs	r3, #1
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	2200      	movs	r2, #0
 8006c36:	494f      	ldr	r1, [pc, #316]	; (8006d74 <HAL_I2C_Master_Receive+0x448>)
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fe8b 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e091      	b.n	8006d6c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cbc:	e042      	b.n	8006d44 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 ff9e 	bl	8007c04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e04c      	b.n	8006d6c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d118      	bne.n	8006d44 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f47f aec2 	bne.w	8006ad2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e000      	b.n	8006d6c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d6a:	2302      	movs	r3, #2
  }
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3728      	adds	r7, #40	; 0x28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	00010004 	.word	0x00010004

08006d78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	4608      	mov	r0, r1
 8006d82:	4611      	mov	r1, r2
 8006d84:	461a      	mov	r2, r3
 8006d86:	4603      	mov	r3, r0
 8006d88:	817b      	strh	r3, [r7, #10]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	813b      	strh	r3, [r7, #8]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d92:	f7fe fd69 	bl	8005868 <HAL_GetTick>
 8006d96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	f040 80d9 	bne.w	8006f58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	2319      	movs	r3, #25
 8006dac:	2201      	movs	r2, #1
 8006dae:	496d      	ldr	r1, [pc, #436]	; (8006f64 <HAL_I2C_Mem_Write+0x1ec>)
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 fdcf 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e0cc      	b.n	8006f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_I2C_Mem_Write+0x56>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e0c5      	b.n	8006f5a <HAL_I2C_Mem_Write+0x1e2>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d007      	beq.n	8006df4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0201 	orr.w	r2, r2, #1
 8006df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2221      	movs	r2, #33	; 0x21
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2240      	movs	r2, #64	; 0x40
 8006e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a3a      	ldr	r2, [r7, #32]
 8006e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4a4d      	ldr	r2, [pc, #308]	; (8006f68 <HAL_I2C_Mem_Write+0x1f0>)
 8006e34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e36:	88f8      	ldrh	r0, [r7, #6]
 8006e38:	893a      	ldrh	r2, [r7, #8]
 8006e3a:	8979      	ldrh	r1, [r7, #10]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	9301      	str	r3, [sp, #4]
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	4603      	mov	r3, r0
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 fc06 	bl	8007658 <I2C_RequestMemoryWrite>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d052      	beq.n	8006ef8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e081      	b.n	8006f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fe50 	bl	8007b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00d      	beq.n	8006e82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d107      	bne.n	8006e7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e06b      	b.n	8006f5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	781a      	ldrb	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d11b      	bne.n	8006ef8 <HAL_I2C_Mem_Write+0x180>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d017      	beq.n	8006ef8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	781a      	ldrb	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1aa      	bne.n	8006e56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 fe3c 	bl	8007b82 <I2C_WaitOnBTFFlagUntilTimeout>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d107      	bne.n	8006f28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e016      	b.n	8006f5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	e000      	b.n	8006f5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006f58:	2302      	movs	r3, #2
  }
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	00100002 	.word	0x00100002
 8006f68:	ffff0000 	.word	0xffff0000

08006f6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08c      	sub	sp, #48	; 0x30
 8006f70:	af02      	add	r7, sp, #8
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	4608      	mov	r0, r1
 8006f76:	4611      	mov	r1, r2
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	817b      	strh	r3, [r7, #10]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	813b      	strh	r3, [r7, #8]
 8006f82:	4613      	mov	r3, r2
 8006f84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f86:	f7fe fc6f 	bl	8005868 <HAL_GetTick>
 8006f8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	f040 8208 	bne.w	80073aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	2319      	movs	r3, #25
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	497b      	ldr	r1, [pc, #492]	; (8007190 <HAL_I2C_Mem_Read+0x224>)
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fcd5 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	e1fb      	b.n	80073ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <HAL_I2C_Mem_Read+0x56>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e1f4      	b.n	80073ac <HAL_I2C_Mem_Read+0x440>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d007      	beq.n	8006fe8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ff6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2222      	movs	r2, #34	; 0x22
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2240      	movs	r2, #64	; 0x40
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007018:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4a5b      	ldr	r2, [pc, #364]	; (8007194 <HAL_I2C_Mem_Read+0x228>)
 8007028:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800702a:	88f8      	ldrh	r0, [r7, #6]
 800702c:	893a      	ldrh	r2, [r7, #8]
 800702e:	8979      	ldrh	r1, [r7, #10]
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	4603      	mov	r3, r0
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fba2 	bl	8007784 <I2C_RequestMemoryRead>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e1b0      	b.n	80073ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800704e:	2b00      	cmp	r3, #0
 8007050:	d113      	bne.n	800707a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007052:	2300      	movs	r3, #0
 8007054:	623b      	str	r3, [r7, #32]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	623b      	str	r3, [r7, #32]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	623b      	str	r3, [r7, #32]
 8007066:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	e184      	b.n	8007384 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800707e:	2b01      	cmp	r3, #1
 8007080:	d11b      	bne.n	80070ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007090:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007092:	2300      	movs	r3, #0
 8007094:	61fb      	str	r3, [r7, #28]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	61fb      	str	r3, [r7, #28]
 80070a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e164      	b.n	8007384 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d11b      	bne.n	80070fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070e2:	2300      	movs	r3, #0
 80070e4:	61bb      	str	r3, [r7, #24]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	695b      	ldr	r3, [r3, #20]
 80070ec:	61bb      	str	r3, [r7, #24]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	61bb      	str	r3, [r7, #24]
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	e144      	b.n	8007384 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070fa:	2300      	movs	r3, #0
 80070fc:	617b      	str	r3, [r7, #20]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	617b      	str	r3, [r7, #20]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007110:	e138      	b.n	8007384 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007116:	2b03      	cmp	r3, #3
 8007118:	f200 80f1 	bhi.w	80072fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007120:	2b01      	cmp	r3, #1
 8007122:	d123      	bne.n	800716c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fd6b 	bl	8007c04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e139      	b.n	80073ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007154:	3b01      	subs	r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007160:	b29b      	uxth	r3, r3
 8007162:	3b01      	subs	r3, #1
 8007164:	b29a      	uxth	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	855a      	strh	r2, [r3, #42]	; 0x2a
 800716a:	e10b      	b.n	8007384 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007170:	2b02      	cmp	r3, #2
 8007172:	d14e      	bne.n	8007212 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	2200      	movs	r2, #0
 800717c:	4906      	ldr	r1, [pc, #24]	; (8007198 <HAL_I2C_Mem_Read+0x22c>)
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 fbe8 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d008      	beq.n	800719c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e10e      	b.n	80073ac <HAL_I2C_Mem_Read+0x440>
 800718e:	bf00      	nop
 8007190:	00100002 	.word	0x00100002
 8007194:	ffff0000 	.word	0xffff0000
 8007198:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	691a      	ldr	r2, [r3, #16]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b29a      	uxth	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	b2d2      	uxtb	r2, r2
 80071ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fa:	3b01      	subs	r3, #1
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007206:	b29b      	uxth	r3, r3
 8007208:	3b01      	subs	r3, #1
 800720a:	b29a      	uxth	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007210:	e0b8      	b.n	8007384 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	2200      	movs	r2, #0
 800721a:	4966      	ldr	r1, [pc, #408]	; (80073b4 <HAL_I2C_Mem_Read+0x448>)
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 fb99 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0bf      	b.n	80073ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800723a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691a      	ldr	r2, [r3, #16]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007258:	3b01      	subs	r3, #1
 800725a:	b29a      	uxth	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	2200      	movs	r2, #0
 8007276:	494f      	ldr	r1, [pc, #316]	; (80073b4 <HAL_I2C_Mem_Read+0x448>)
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 fb6b 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e091      	b.n	80073ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691a      	ldr	r2, [r3, #16]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	b2d2      	uxtb	r2, r2
 80072a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	3b01      	subs	r3, #1
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80072fc:	e042      	b.n	8007384 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007300:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 fc7e 	bl	8007c04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e04c      	b.n	80073ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732e:	3b01      	subs	r3, #1
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	f003 0304 	and.w	r3, r3, #4
 800734e:	2b04      	cmp	r3, #4
 8007350:	d118      	bne.n	8007384 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	691a      	ldr	r2, [r3, #16]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800736e:	3b01      	subs	r3, #1
 8007370:	b29a      	uxth	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007388:	2b00      	cmp	r3, #0
 800738a:	f47f aec2 	bne.w	8007112 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2220      	movs	r2, #32
 8007392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	e000      	b.n	80073ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80073aa:	2302      	movs	r3, #2
  }
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3728      	adds	r7, #40	; 0x28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	00010004 	.word	0x00010004

080073b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af02      	add	r7, sp, #8
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	607a      	str	r2, [r7, #4]
 80073c2:	603b      	str	r3, [r7, #0]
 80073c4:	460b      	mov	r3, r1
 80073c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d006      	beq.n	80073e2 <I2C_MasterRequestWrite+0x2a>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d003      	beq.n	80073e2 <I2C_MasterRequestWrite+0x2a>
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073e0:	d108      	bne.n	80073f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	e00b      	b.n	800740c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	2b12      	cmp	r3, #18
 80073fa:	d107      	bne.n	800740c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800740a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 fa9b 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00d      	beq.n	8007440 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007432:	d103      	bne.n	800743c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800743a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e035      	b.n	80074ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007448:	d108      	bne.n	800745c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800744a:	897b      	ldrh	r3, [r7, #10]
 800744c:	b2db      	uxtb	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007458:	611a      	str	r2, [r3, #16]
 800745a:	e01b      	b.n	8007494 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800745c:	897b      	ldrh	r3, [r7, #10]
 800745e:	11db      	asrs	r3, r3, #7
 8007460:	b2db      	uxtb	r3, r3
 8007462:	f003 0306 	and.w	r3, r3, #6
 8007466:	b2db      	uxtb	r3, r3
 8007468:	f063 030f 	orn	r3, r3, #15
 800746c:	b2da      	uxtb	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	490e      	ldr	r1, [pc, #56]	; (80074b4 <I2C_MasterRequestWrite+0xfc>)
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fac1 	bl	8007a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e010      	b.n	80074ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800748a:	897b      	ldrh	r3, [r7, #10]
 800748c:	b2da      	uxtb	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	4907      	ldr	r1, [pc, #28]	; (80074b8 <I2C_MasterRequestWrite+0x100>)
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fab1 	bl	8007a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e000      	b.n	80074ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	00010008 	.word	0x00010008
 80074b8:	00010002 	.word	0x00010002

080074bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af02      	add	r7, sp, #8
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	607a      	str	r2, [r7, #4]
 80074c6:	603b      	str	r3, [r7, #0]
 80074c8:	460b      	mov	r3, r1
 80074ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d006      	beq.n	80074f6 <I2C_MasterRequestRead+0x3a>
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d003      	beq.n	80074f6 <I2C_MasterRequestRead+0x3a>
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074f4:	d108      	bne.n	8007508 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	e00b      	b.n	8007520 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	2b11      	cmp	r3, #17
 800750e:	d107      	bne.n	8007520 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800751e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 fa11 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00d      	beq.n	8007554 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007546:	d103      	bne.n	8007550 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800754e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e079      	b.n	8007648 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800755c:	d108      	bne.n	8007570 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800755e:	897b      	ldrh	r3, [r7, #10]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f043 0301 	orr.w	r3, r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	611a      	str	r2, [r3, #16]
 800756e:	e05f      	b.n	8007630 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007570:	897b      	ldrh	r3, [r7, #10]
 8007572:	11db      	asrs	r3, r3, #7
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f003 0306 	and.w	r3, r3, #6
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f063 030f 	orn	r3, r3, #15
 8007580:	b2da      	uxtb	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	4930      	ldr	r1, [pc, #192]	; (8007650 <I2C_MasterRequestRead+0x194>)
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 fa37 	bl	8007a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e054      	b.n	8007648 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800759e:	897b      	ldrh	r3, [r7, #10]
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	4929      	ldr	r1, [pc, #164]	; (8007654 <I2C_MasterRequestRead+0x198>)
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 fa27 	bl	8007a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e044      	b.n	8007648 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075be:	2300      	movs	r3, #0
 80075c0:	613b      	str	r3, [r7, #16]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	613b      	str	r3, [r7, #16]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	613b      	str	r3, [r7, #16]
 80075d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f9af 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00d      	beq.n	8007618 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800760a:	d103      	bne.n	8007614 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007612:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e017      	b.n	8007648 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007618:	897b      	ldrh	r3, [r7, #10]
 800761a:	11db      	asrs	r3, r3, #7
 800761c:	b2db      	uxtb	r3, r3
 800761e:	f003 0306 	and.w	r3, r3, #6
 8007622:	b2db      	uxtb	r3, r3
 8007624:	f063 030e 	orn	r3, r3, #14
 8007628:	b2da      	uxtb	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	4907      	ldr	r1, [pc, #28]	; (8007654 <I2C_MasterRequestRead+0x198>)
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 f9e3 	bl	8007a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	00010008 	.word	0x00010008
 8007654:	00010002 	.word	0x00010002

08007658 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af02      	add	r7, sp, #8
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	4608      	mov	r0, r1
 8007662:	4611      	mov	r1, r2
 8007664:	461a      	mov	r2, r3
 8007666:	4603      	mov	r3, r0
 8007668:	817b      	strh	r3, [r7, #10]
 800766a:	460b      	mov	r3, r1
 800766c:	813b      	strh	r3, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007680:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	2200      	movs	r2, #0
 800768a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 f960 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00d      	beq.n	80076b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a8:	d103      	bne.n	80076b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e05f      	b.n	8007776 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076b6:	897b      	ldrh	r3, [r7, #10]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	461a      	mov	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c8:	6a3a      	ldr	r2, [r7, #32]
 80076ca:	492d      	ldr	r1, [pc, #180]	; (8007780 <I2C_RequestMemoryWrite+0x128>)
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 f998 	bl	8007a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e04c      	b.n	8007776 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f4:	6a39      	ldr	r1, [r7, #32]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fa02 	bl	8007b00 <I2C_WaitOnTXEFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00d      	beq.n	800771e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	2b04      	cmp	r3, #4
 8007708:	d107      	bne.n	800771a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007718:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e02b      	b.n	8007776 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800771e:	88fb      	ldrh	r3, [r7, #6]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d105      	bne.n	8007730 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007724:	893b      	ldrh	r3, [r7, #8]
 8007726:	b2da      	uxtb	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	611a      	str	r2, [r3, #16]
 800772e:	e021      	b.n	8007774 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007730:	893b      	ldrh	r3, [r7, #8]
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	b29b      	uxth	r3, r3
 8007736:	b2da      	uxtb	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800773e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007740:	6a39      	ldr	r1, [r7, #32]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f9dc 	bl	8007b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00d      	beq.n	800776a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	2b04      	cmp	r3, #4
 8007754:	d107      	bne.n	8007766 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007764:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e005      	b.n	8007776 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800776a:	893b      	ldrh	r3, [r7, #8]
 800776c:	b2da      	uxtb	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	00010002 	.word	0x00010002

08007784 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af02      	add	r7, sp, #8
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	4608      	mov	r0, r1
 800778e:	4611      	mov	r1, r2
 8007790:	461a      	mov	r2, r3
 8007792:	4603      	mov	r3, r0
 8007794:	817b      	strh	r3, [r7, #10]
 8007796:	460b      	mov	r3, r1
 8007798:	813b      	strh	r3, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 f8c2 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00d      	beq.n	80077f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077e4:	d103      	bne.n	80077ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e0aa      	b.n	8007948 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077f2:	897b      	ldrh	r3, [r7, #10]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007800:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	6a3a      	ldr	r2, [r7, #32]
 8007806:	4952      	ldr	r1, [pc, #328]	; (8007950 <I2C_RequestMemoryRead+0x1cc>)
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 f8fa 	bl	8007a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e097      	b.n	8007948 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007818:	2300      	movs	r3, #0
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800782e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007830:	6a39      	ldr	r1, [r7, #32]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 f964 	bl	8007b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00d      	beq.n	800785a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	2b04      	cmp	r3, #4
 8007844:	d107      	bne.n	8007856 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007854:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e076      	b.n	8007948 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d105      	bne.n	800786c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007860:	893b      	ldrh	r3, [r7, #8]
 8007862:	b2da      	uxtb	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	611a      	str	r2, [r3, #16]
 800786a:	e021      	b.n	80078b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800786c:	893b      	ldrh	r3, [r7, #8]
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	b29b      	uxth	r3, r3
 8007872:	b2da      	uxtb	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800787a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787c:	6a39      	ldr	r1, [r7, #32]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f93e 	bl	8007b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00d      	beq.n	80078a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	2b04      	cmp	r3, #4
 8007890:	d107      	bne.n	80078a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e050      	b.n	8007948 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80078a6:	893b      	ldrh	r3, [r7, #8]
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b2:	6a39      	ldr	r1, [r7, #32]
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 f923 	bl	8007b00 <I2C_WaitOnTXEFlagUntilTimeout>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00d      	beq.n	80078dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d107      	bne.n	80078d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e035      	b.n	8007948 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 f82b 	bl	8007954 <I2C_WaitOnFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00d      	beq.n	8007920 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007912:	d103      	bne.n	800791c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800791a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e013      	b.n	8007948 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007920:	897b      	ldrh	r3, [r7, #10]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	f043 0301 	orr.w	r3, r3, #1
 8007928:	b2da      	uxtb	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	6a3a      	ldr	r2, [r7, #32]
 8007934:	4906      	ldr	r1, [pc, #24]	; (8007950 <I2C_RequestMemoryRead+0x1cc>)
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 f863 	bl	8007a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e000      	b.n	8007948 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	00010002 	.word	0x00010002

08007954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	603b      	str	r3, [r7, #0]
 8007960:	4613      	mov	r3, r2
 8007962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007964:	e025      	b.n	80079b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800796c:	d021      	beq.n	80079b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800796e:	f7fd ff7b 	bl	8005868 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	d302      	bcc.n	8007984 <I2C_WaitOnFlagUntilTimeout+0x30>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d116      	bne.n	80079b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2220      	movs	r2, #32
 800798e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f043 0220 	orr.w	r2, r3, #32
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e023      	b.n	80079fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	0c1b      	lsrs	r3, r3, #16
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d10d      	bne.n	80079d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	43da      	mvns	r2, r3
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4013      	ands	r3, r2
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bf0c      	ite	eq
 80079ce:	2301      	moveq	r3, #1
 80079d0:	2300      	movne	r3, #0
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	e00c      	b.n	80079f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	43da      	mvns	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4013      	ands	r3, r2
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bf0c      	ite	eq
 80079ea:	2301      	moveq	r3, #1
 80079ec:	2300      	movne	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d0b6      	beq.n	8007966 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	607a      	str	r2, [r7, #4]
 8007a0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a10:	e051      	b.n	8007ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a20:	d123      	bne.n	8007a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	f043 0204 	orr.w	r2, r3, #4
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e046      	b.n	8007af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a70:	d021      	beq.n	8007ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a72:	f7fd fef9 	bl	8005868 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d302      	bcc.n	8007a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d116      	bne.n	8007ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	f043 0220 	orr.w	r2, r3, #32
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e020      	b.n	8007af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	0c1b      	lsrs	r3, r3, #16
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d10c      	bne.n	8007ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	43da      	mvns	r2, r3
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	4013      	ands	r3, r2
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bf14      	ite	ne
 8007ad2:	2301      	movne	r3, #1
 8007ad4:	2300      	moveq	r3, #0
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	e00b      	b.n	8007af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	43da      	mvns	r2, r3
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bf14      	ite	ne
 8007aec:	2301      	movne	r3, #1
 8007aee:	2300      	moveq	r3, #0
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d18d      	bne.n	8007a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b0c:	e02d      	b.n	8007b6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 f8ce 	bl	8007cb0 <I2C_IsAcknowledgeFailed>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e02d      	b.n	8007b7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b24:	d021      	beq.n	8007b6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b26:	f7fd fe9f 	bl	8005868 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d302      	bcc.n	8007b3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d116      	bne.n	8007b6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	f043 0220 	orr.w	r2, r3, #32
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e007      	b.n	8007b7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b74:	2b80      	cmp	r3, #128	; 0x80
 8007b76:	d1ca      	bne.n	8007b0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b8e:	e02d      	b.n	8007bec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f88d 	bl	8007cb0 <I2C_IsAcknowledgeFailed>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e02d      	b.n	8007bfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba6:	d021      	beq.n	8007bec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba8:	f7fd fe5e 	bl	8005868 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d302      	bcc.n	8007bbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d116      	bne.n	8007bec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	f043 0220 	orr.w	r2, r3, #32
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e007      	b.n	8007bfc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	f003 0304 	and.w	r3, r3, #4
 8007bf6:	2b04      	cmp	r3, #4
 8007bf8:	d1ca      	bne.n	8007b90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c10:	e042      	b.n	8007c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	2b10      	cmp	r3, #16
 8007c1e:	d119      	bne.n	8007c54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f06f 0210 	mvn.w	r2, #16
 8007c28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e029      	b.n	8007ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c54:	f7fd fe08 	bl	8005868 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d302      	bcc.n	8007c6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d116      	bne.n	8007c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	f043 0220 	orr.w	r2, r3, #32
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e007      	b.n	8007ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	d1b5      	bne.n	8007c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc6:	d11b      	bne.n	8007d00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cec:	f043 0204 	orr.w	r2, r3, #4
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e000      	b.n	8007d02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e267      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d075      	beq.n	8007e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d2e:	4b88      	ldr	r3, [pc, #544]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 030c 	and.w	r3, r3, #12
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d00c      	beq.n	8007d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d3a:	4b85      	ldr	r3, [pc, #532]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007d42:	2b08      	cmp	r3, #8
 8007d44:	d112      	bne.n	8007d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d46:	4b82      	ldr	r3, [pc, #520]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d52:	d10b      	bne.n	8007d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d54:	4b7e      	ldr	r3, [pc, #504]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d05b      	beq.n	8007e18 <HAL_RCC_OscConfig+0x108>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d157      	bne.n	8007e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e242      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d74:	d106      	bne.n	8007d84 <HAL_RCC_OscConfig+0x74>
 8007d76:	4b76      	ldr	r3, [pc, #472]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a75      	ldr	r2, [pc, #468]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	e01d      	b.n	8007dc0 <HAL_RCC_OscConfig+0xb0>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d8c:	d10c      	bne.n	8007da8 <HAL_RCC_OscConfig+0x98>
 8007d8e:	4b70      	ldr	r3, [pc, #448]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a6f      	ldr	r2, [pc, #444]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	4b6d      	ldr	r3, [pc, #436]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a6c      	ldr	r2, [pc, #432]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007da4:	6013      	str	r3, [r2, #0]
 8007da6:	e00b      	b.n	8007dc0 <HAL_RCC_OscConfig+0xb0>
 8007da8:	4b69      	ldr	r3, [pc, #420]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a68      	ldr	r2, [pc, #416]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	4b66      	ldr	r3, [pc, #408]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a65      	ldr	r2, [pc, #404]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d013      	beq.n	8007df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dc8:	f7fd fd4e 	bl	8005868 <HAL_GetTick>
 8007dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dce:	e008      	b.n	8007de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dd0:	f7fd fd4a 	bl	8005868 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	2b64      	cmp	r3, #100	; 0x64
 8007ddc:	d901      	bls.n	8007de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e207      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007de2:	4b5b      	ldr	r3, [pc, #364]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0f0      	beq.n	8007dd0 <HAL_RCC_OscConfig+0xc0>
 8007dee:	e014      	b.n	8007e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007df0:	f7fd fd3a 	bl	8005868 <HAL_GetTick>
 8007df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007df6:	e008      	b.n	8007e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007df8:	f7fd fd36 	bl	8005868 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b64      	cmp	r3, #100	; 0x64
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e1f3      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e0a:	4b51      	ldr	r3, [pc, #324]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f0      	bne.n	8007df8 <HAL_RCC_OscConfig+0xe8>
 8007e16:	e000      	b.n	8007e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d063      	beq.n	8007eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e26:	4b4a      	ldr	r3, [pc, #296]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f003 030c 	and.w	r3, r3, #12
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00b      	beq.n	8007e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e32:	4b47      	ldr	r3, [pc, #284]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007e3a:	2b08      	cmp	r3, #8
 8007e3c:	d11c      	bne.n	8007e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e3e:	4b44      	ldr	r3, [pc, #272]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d116      	bne.n	8007e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e4a:	4b41      	ldr	r3, [pc, #260]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <HAL_RCC_OscConfig+0x152>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d001      	beq.n	8007e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e1c7      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e62:	4b3b      	ldr	r3, [pc, #236]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	4937      	ldr	r1, [pc, #220]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e76:	e03a      	b.n	8007eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d020      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e80:	4b34      	ldr	r3, [pc, #208]	; (8007f54 <HAL_RCC_OscConfig+0x244>)
 8007e82:	2201      	movs	r2, #1
 8007e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e86:	f7fd fcef 	bl	8005868 <HAL_GetTick>
 8007e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e8c:	e008      	b.n	8007ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e8e:	f7fd fceb 	bl	8005868 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d901      	bls.n	8007ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e1a8      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ea0:	4b2b      	ldr	r3, [pc, #172]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0f0      	beq.n	8007e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eac:	4b28      	ldr	r3, [pc, #160]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	4925      	ldr	r1, [pc, #148]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	600b      	str	r3, [r1, #0]
 8007ec0:	e015      	b.n	8007eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ec2:	4b24      	ldr	r3, [pc, #144]	; (8007f54 <HAL_RCC_OscConfig+0x244>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec8:	f7fd fcce 	bl	8005868 <HAL_GetTick>
 8007ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ed0:	f7fd fcca 	bl	8005868 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e187      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ee2:	4b1b      	ldr	r3, [pc, #108]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1f0      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d036      	beq.n	8007f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d016      	beq.n	8007f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f02:	4b15      	ldr	r3, [pc, #84]	; (8007f58 <HAL_RCC_OscConfig+0x248>)
 8007f04:	2201      	movs	r2, #1
 8007f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f08:	f7fd fcae 	bl	8005868 <HAL_GetTick>
 8007f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f0e:	e008      	b.n	8007f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f10:	f7fd fcaa 	bl	8005868 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e167      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f22:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <HAL_RCC_OscConfig+0x240>)
 8007f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0f0      	beq.n	8007f10 <HAL_RCC_OscConfig+0x200>
 8007f2e:	e01b      	b.n	8007f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f30:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <HAL_RCC_OscConfig+0x248>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f36:	f7fd fc97 	bl	8005868 <HAL_GetTick>
 8007f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f3c:	e00e      	b.n	8007f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f3e:	f7fd fc93 	bl	8005868 <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d907      	bls.n	8007f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e150      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
 8007f50:	40023800 	.word	0x40023800
 8007f54:	42470000 	.word	0x42470000
 8007f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f5c:	4b88      	ldr	r3, [pc, #544]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8007f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1ea      	bne.n	8007f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8097 	beq.w	80080a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f76:	2300      	movs	r3, #0
 8007f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f7a:	4b81      	ldr	r3, [pc, #516]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10f      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f86:	2300      	movs	r3, #0
 8007f88:	60bb      	str	r3, [r7, #8]
 8007f8a:	4b7d      	ldr	r3, [pc, #500]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	4a7c      	ldr	r2, [pc, #496]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8007f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f94:	6413      	str	r3, [r2, #64]	; 0x40
 8007f96:	4b7a      	ldr	r3, [pc, #488]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f9e:	60bb      	str	r3, [r7, #8]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fa6:	4b77      	ldr	r3, [pc, #476]	; (8008184 <HAL_RCC_OscConfig+0x474>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d118      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fb2:	4b74      	ldr	r3, [pc, #464]	; (8008184 <HAL_RCC_OscConfig+0x474>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a73      	ldr	r2, [pc, #460]	; (8008184 <HAL_RCC_OscConfig+0x474>)
 8007fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fbe:	f7fd fc53 	bl	8005868 <HAL_GetTick>
 8007fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fc4:	e008      	b.n	8007fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fc6:	f7fd fc4f 	bl	8005868 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d901      	bls.n	8007fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e10c      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fd8:	4b6a      	ldr	r3, [pc, #424]	; (8008184 <HAL_RCC_OscConfig+0x474>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d0f0      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d106      	bne.n	8007ffa <HAL_RCC_OscConfig+0x2ea>
 8007fec:	4b64      	ldr	r3, [pc, #400]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8007fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff0:	4a63      	ldr	r2, [pc, #396]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8007ff2:	f043 0301 	orr.w	r3, r3, #1
 8007ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ff8:	e01c      	b.n	8008034 <HAL_RCC_OscConfig+0x324>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	2b05      	cmp	r3, #5
 8008000:	d10c      	bne.n	800801c <HAL_RCC_OscConfig+0x30c>
 8008002:	4b5f      	ldr	r3, [pc, #380]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8008004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008006:	4a5e      	ldr	r2, [pc, #376]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8008008:	f043 0304 	orr.w	r3, r3, #4
 800800c:	6713      	str	r3, [r2, #112]	; 0x70
 800800e:	4b5c      	ldr	r3, [pc, #368]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8008010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008012:	4a5b      	ldr	r2, [pc, #364]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	6713      	str	r3, [r2, #112]	; 0x70
 800801a:	e00b      	b.n	8008034 <HAL_RCC_OscConfig+0x324>
 800801c:	4b58      	ldr	r3, [pc, #352]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 800801e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008020:	4a57      	ldr	r2, [pc, #348]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8008022:	f023 0301 	bic.w	r3, r3, #1
 8008026:	6713      	str	r3, [r2, #112]	; 0x70
 8008028:	4b55      	ldr	r3, [pc, #340]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 800802a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802c:	4a54      	ldr	r2, [pc, #336]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 800802e:	f023 0304 	bic.w	r3, r3, #4
 8008032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d015      	beq.n	8008068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800803c:	f7fd fc14 	bl	8005868 <HAL_GetTick>
 8008040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008042:	e00a      	b.n	800805a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008044:	f7fd fc10 	bl	8005868 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008052:	4293      	cmp	r3, r2
 8008054:	d901      	bls.n	800805a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e0cb      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800805a:	4b49      	ldr	r3, [pc, #292]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 800805c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805e:	f003 0302 	and.w	r3, r3, #2
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0ee      	beq.n	8008044 <HAL_RCC_OscConfig+0x334>
 8008066:	e014      	b.n	8008092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008068:	f7fd fbfe 	bl	8005868 <HAL_GetTick>
 800806c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800806e:	e00a      	b.n	8008086 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008070:	f7fd fbfa 	bl	8005868 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	f241 3288 	movw	r2, #5000	; 0x1388
 800807e:	4293      	cmp	r3, r2
 8008080:	d901      	bls.n	8008086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e0b5      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008086:	4b3e      	ldr	r3, [pc, #248]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8008088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1ee      	bne.n	8008070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d105      	bne.n	80080a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008098:	4b39      	ldr	r3, [pc, #228]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	4a38      	ldr	r2, [pc, #224]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 800809e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 80a1 	beq.w	80081f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080ae:	4b34      	ldr	r3, [pc, #208]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 030c 	and.w	r3, r3, #12
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d05c      	beq.n	8008174 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d141      	bne.n	8008146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080c2:	4b31      	ldr	r3, [pc, #196]	; (8008188 <HAL_RCC_OscConfig+0x478>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c8:	f7fd fbce 	bl	8005868 <HAL_GetTick>
 80080cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080d0:	f7fd fbca 	bl	8005868 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e087      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080e2:	4b27      	ldr	r3, [pc, #156]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1f0      	bne.n	80080d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69da      	ldr	r2, [r3, #28]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	431a      	orrs	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fc:	019b      	lsls	r3, r3, #6
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008104:	085b      	lsrs	r3, r3, #1
 8008106:	3b01      	subs	r3, #1
 8008108:	041b      	lsls	r3, r3, #16
 800810a:	431a      	orrs	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	061b      	lsls	r3, r3, #24
 8008112:	491b      	ldr	r1, [pc, #108]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8008114:	4313      	orrs	r3, r2
 8008116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008118:	4b1b      	ldr	r3, [pc, #108]	; (8008188 <HAL_RCC_OscConfig+0x478>)
 800811a:	2201      	movs	r2, #1
 800811c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800811e:	f7fd fba3 	bl	8005868 <HAL_GetTick>
 8008122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008124:	e008      	b.n	8008138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008126:	f7fd fb9f 	bl	8005868 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b02      	cmp	r3, #2
 8008132:	d901      	bls.n	8008138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e05c      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008138:	4b11      	ldr	r3, [pc, #68]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0f0      	beq.n	8008126 <HAL_RCC_OscConfig+0x416>
 8008144:	e054      	b.n	80081f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008146:	4b10      	ldr	r3, [pc, #64]	; (8008188 <HAL_RCC_OscConfig+0x478>)
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800814c:	f7fd fb8c 	bl	8005868 <HAL_GetTick>
 8008150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008152:	e008      	b.n	8008166 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008154:	f7fd fb88 	bl	8005868 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d901      	bls.n	8008166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e045      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008166:	4b06      	ldr	r3, [pc, #24]	; (8008180 <HAL_RCC_OscConfig+0x470>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1f0      	bne.n	8008154 <HAL_RCC_OscConfig+0x444>
 8008172:	e03d      	b.n	80081f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d107      	bne.n	800818c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e038      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
 8008180:	40023800 	.word	0x40023800
 8008184:	40007000 	.word	0x40007000
 8008188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800818c:	4b1b      	ldr	r3, [pc, #108]	; (80081fc <HAL_RCC_OscConfig+0x4ec>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	2b01      	cmp	r3, #1
 8008198:	d028      	beq.n	80081ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d121      	bne.n	80081ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d11a      	bne.n	80081ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081bc:	4013      	ands	r3, r2
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d111      	bne.n	80081ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d2:	085b      	lsrs	r3, r3, #1
 80081d4:	3b01      	subs	r3, #1
 80081d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081d8:	429a      	cmp	r2, r3
 80081da:	d107      	bne.n	80081ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d001      	beq.n	80081f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e000      	b.n	80081f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	40023800 	.word	0x40023800

08008200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e0cc      	b.n	80083ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008214:	4b68      	ldr	r3, [pc, #416]	; (80083b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d90c      	bls.n	800823c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008222:	4b65      	ldr	r3, [pc, #404]	; (80083b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800822a:	4b63      	ldr	r3, [pc, #396]	; (80083b8 <HAL_RCC_ClockConfig+0x1b8>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0307 	and.w	r3, r3, #7
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	429a      	cmp	r2, r3
 8008236:	d001      	beq.n	800823c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e0b8      	b.n	80083ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d020      	beq.n	800828a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0304 	and.w	r3, r3, #4
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008254:	4b59      	ldr	r3, [pc, #356]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	4a58      	ldr	r2, [pc, #352]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 800825a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800825e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0308 	and.w	r3, r3, #8
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800826c:	4b53      	ldr	r3, [pc, #332]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	4a52      	ldr	r2, [pc, #328]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 8008272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008278:	4b50      	ldr	r3, [pc, #320]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	494d      	ldr	r1, [pc, #308]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 8008286:	4313      	orrs	r3, r2
 8008288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d044      	beq.n	8008320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d107      	bne.n	80082ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800829e:	4b47      	ldr	r3, [pc, #284]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d119      	bne.n	80082de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e07f      	b.n	80083ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d003      	beq.n	80082be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d107      	bne.n	80082ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082be:	4b3f      	ldr	r3, [pc, #252]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d109      	bne.n	80082de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e06f      	b.n	80083ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082ce:	4b3b      	ldr	r3, [pc, #236]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e067      	b.n	80083ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082de:	4b37      	ldr	r3, [pc, #220]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f023 0203 	bic.w	r2, r3, #3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	4934      	ldr	r1, [pc, #208]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 80082ec:	4313      	orrs	r3, r2
 80082ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082f0:	f7fd faba 	bl	8005868 <HAL_GetTick>
 80082f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082f6:	e00a      	b.n	800830e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082f8:	f7fd fab6 	bl	8005868 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	f241 3288 	movw	r2, #5000	; 0x1388
 8008306:	4293      	cmp	r3, r2
 8008308:	d901      	bls.n	800830e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e04f      	b.n	80083ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800830e:	4b2b      	ldr	r3, [pc, #172]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f003 020c 	and.w	r2, r3, #12
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	429a      	cmp	r2, r3
 800831e:	d1eb      	bne.n	80082f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008320:	4b25      	ldr	r3, [pc, #148]	; (80083b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d20c      	bcs.n	8008348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800832e:	4b22      	ldr	r3, [pc, #136]	; (80083b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	b2d2      	uxtb	r2, r2
 8008334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008336:	4b20      	ldr	r3, [pc, #128]	; (80083b8 <HAL_RCC_ClockConfig+0x1b8>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0307 	and.w	r3, r3, #7
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	429a      	cmp	r2, r3
 8008342:	d001      	beq.n	8008348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e032      	b.n	80083ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0304 	and.w	r3, r3, #4
 8008350:	2b00      	cmp	r3, #0
 8008352:	d008      	beq.n	8008366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008354:	4b19      	ldr	r3, [pc, #100]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	4916      	ldr	r1, [pc, #88]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 8008362:	4313      	orrs	r3, r2
 8008364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0308 	and.w	r3, r3, #8
 800836e:	2b00      	cmp	r3, #0
 8008370:	d009      	beq.n	8008386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008372:	4b12      	ldr	r3, [pc, #72]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	490e      	ldr	r1, [pc, #56]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 8008382:	4313      	orrs	r3, r2
 8008384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008386:	f000 f821 	bl	80083cc <HAL_RCC_GetSysClockFreq>
 800838a:	4602      	mov	r2, r0
 800838c:	4b0b      	ldr	r3, [pc, #44]	; (80083bc <HAL_RCC_ClockConfig+0x1bc>)
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	091b      	lsrs	r3, r3, #4
 8008392:	f003 030f 	and.w	r3, r3, #15
 8008396:	490a      	ldr	r1, [pc, #40]	; (80083c0 <HAL_RCC_ClockConfig+0x1c0>)
 8008398:	5ccb      	ldrb	r3, [r1, r3]
 800839a:	fa22 f303 	lsr.w	r3, r2, r3
 800839e:	4a09      	ldr	r2, [pc, #36]	; (80083c4 <HAL_RCC_ClockConfig+0x1c4>)
 80083a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80083a2:	4b09      	ldr	r3, [pc, #36]	; (80083c8 <HAL_RCC_ClockConfig+0x1c8>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fd fa1a 	bl	80057e0 <HAL_InitTick>

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40023c00 	.word	0x40023c00
 80083bc:	40023800 	.word	0x40023800
 80083c0:	0801fa74 	.word	0x0801fa74
 80083c4:	20000008 	.word	0x20000008
 80083c8:	2000000c 	.word	0x2000000c

080083cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083d0:	b090      	sub	sp, #64	; 0x40
 80083d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	637b      	str	r3, [r7, #52]	; 0x34
 80083d8:	2300      	movs	r3, #0
 80083da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083dc:	2300      	movs	r3, #0
 80083de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083e4:	4b59      	ldr	r3, [pc, #356]	; (800854c <HAL_RCC_GetSysClockFreq+0x180>)
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f003 030c 	and.w	r3, r3, #12
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d00d      	beq.n	800840c <HAL_RCC_GetSysClockFreq+0x40>
 80083f0:	2b08      	cmp	r3, #8
 80083f2:	f200 80a1 	bhi.w	8008538 <HAL_RCC_GetSysClockFreq+0x16c>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <HAL_RCC_GetSysClockFreq+0x34>
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d003      	beq.n	8008406 <HAL_RCC_GetSysClockFreq+0x3a>
 80083fe:	e09b      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008400:	4b53      	ldr	r3, [pc, #332]	; (8008550 <HAL_RCC_GetSysClockFreq+0x184>)
 8008402:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008404:	e09b      	b.n	800853e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008406:	4b53      	ldr	r3, [pc, #332]	; (8008554 <HAL_RCC_GetSysClockFreq+0x188>)
 8008408:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800840a:	e098      	b.n	800853e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800840c:	4b4f      	ldr	r3, [pc, #316]	; (800854c <HAL_RCC_GetSysClockFreq+0x180>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008414:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008416:	4b4d      	ldr	r3, [pc, #308]	; (800854c <HAL_RCC_GetSysClockFreq+0x180>)
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d028      	beq.n	8008474 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008422:	4b4a      	ldr	r3, [pc, #296]	; (800854c <HAL_RCC_GetSysClockFreq+0x180>)
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	099b      	lsrs	r3, r3, #6
 8008428:	2200      	movs	r2, #0
 800842a:	623b      	str	r3, [r7, #32]
 800842c:	627a      	str	r2, [r7, #36]	; 0x24
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008434:	2100      	movs	r1, #0
 8008436:	4b47      	ldr	r3, [pc, #284]	; (8008554 <HAL_RCC_GetSysClockFreq+0x188>)
 8008438:	fb03 f201 	mul.w	r2, r3, r1
 800843c:	2300      	movs	r3, #0
 800843e:	fb00 f303 	mul.w	r3, r0, r3
 8008442:	4413      	add	r3, r2
 8008444:	4a43      	ldr	r2, [pc, #268]	; (8008554 <HAL_RCC_GetSysClockFreq+0x188>)
 8008446:	fba0 1202 	umull	r1, r2, r0, r2
 800844a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800844c:	460a      	mov	r2, r1
 800844e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008452:	4413      	add	r3, r2
 8008454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008458:	2200      	movs	r2, #0
 800845a:	61bb      	str	r3, [r7, #24]
 800845c:	61fa      	str	r2, [r7, #28]
 800845e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008462:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008466:	f7f8 fc19 	bl	8000c9c <__aeabi_uldivmod>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	4613      	mov	r3, r2
 8008470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008472:	e053      	b.n	800851c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008474:	4b35      	ldr	r3, [pc, #212]	; (800854c <HAL_RCC_GetSysClockFreq+0x180>)
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	099b      	lsrs	r3, r3, #6
 800847a:	2200      	movs	r2, #0
 800847c:	613b      	str	r3, [r7, #16]
 800847e:	617a      	str	r2, [r7, #20]
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008486:	f04f 0b00 	mov.w	fp, #0
 800848a:	4652      	mov	r2, sl
 800848c:	465b      	mov	r3, fp
 800848e:	f04f 0000 	mov.w	r0, #0
 8008492:	f04f 0100 	mov.w	r1, #0
 8008496:	0159      	lsls	r1, r3, #5
 8008498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800849c:	0150      	lsls	r0, r2, #5
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	ebb2 080a 	subs.w	r8, r2, sl
 80084a6:	eb63 090b 	sbc.w	r9, r3, fp
 80084aa:	f04f 0200 	mov.w	r2, #0
 80084ae:	f04f 0300 	mov.w	r3, #0
 80084b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80084b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80084ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80084be:	ebb2 0408 	subs.w	r4, r2, r8
 80084c2:	eb63 0509 	sbc.w	r5, r3, r9
 80084c6:	f04f 0200 	mov.w	r2, #0
 80084ca:	f04f 0300 	mov.w	r3, #0
 80084ce:	00eb      	lsls	r3, r5, #3
 80084d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084d4:	00e2      	lsls	r2, r4, #3
 80084d6:	4614      	mov	r4, r2
 80084d8:	461d      	mov	r5, r3
 80084da:	eb14 030a 	adds.w	r3, r4, sl
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	eb45 030b 	adc.w	r3, r5, fp
 80084e4:	607b      	str	r3, [r7, #4]
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	f04f 0300 	mov.w	r3, #0
 80084ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084f2:	4629      	mov	r1, r5
 80084f4:	028b      	lsls	r3, r1, #10
 80084f6:	4621      	mov	r1, r4
 80084f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80084fc:	4621      	mov	r1, r4
 80084fe:	028a      	lsls	r2, r1, #10
 8008500:	4610      	mov	r0, r2
 8008502:	4619      	mov	r1, r3
 8008504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008506:	2200      	movs	r2, #0
 8008508:	60bb      	str	r3, [r7, #8]
 800850a:	60fa      	str	r2, [r7, #12]
 800850c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008510:	f7f8 fbc4 	bl	8000c9c <__aeabi_uldivmod>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4613      	mov	r3, r2
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800851c:	4b0b      	ldr	r3, [pc, #44]	; (800854c <HAL_RCC_GetSysClockFreq+0x180>)
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	0c1b      	lsrs	r3, r3, #16
 8008522:	f003 0303 	and.w	r3, r3, #3
 8008526:	3301      	adds	r3, #1
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800852c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	fbb2 f3f3 	udiv	r3, r2, r3
 8008534:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008536:	e002      	b.n	800853e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008538:	4b05      	ldr	r3, [pc, #20]	; (8008550 <HAL_RCC_GetSysClockFreq+0x184>)
 800853a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800853c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008540:	4618      	mov	r0, r3
 8008542:	3740      	adds	r7, #64	; 0x40
 8008544:	46bd      	mov	sp, r7
 8008546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800854a:	bf00      	nop
 800854c:	40023800 	.word	0x40023800
 8008550:	00f42400 	.word	0x00f42400
 8008554:	017d7840 	.word	0x017d7840

08008558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008558:	b480      	push	{r7}
 800855a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800855c:	4b03      	ldr	r3, [pc, #12]	; (800856c <HAL_RCC_GetHCLKFreq+0x14>)
 800855e:	681b      	ldr	r3, [r3, #0]
}
 8008560:	4618      	mov	r0, r3
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	20000008 	.word	0x20000008

08008570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008574:	f7ff fff0 	bl	8008558 <HAL_RCC_GetHCLKFreq>
 8008578:	4602      	mov	r2, r0
 800857a:	4b05      	ldr	r3, [pc, #20]	; (8008590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	0a9b      	lsrs	r3, r3, #10
 8008580:	f003 0307 	and.w	r3, r3, #7
 8008584:	4903      	ldr	r1, [pc, #12]	; (8008594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008586:	5ccb      	ldrb	r3, [r1, r3]
 8008588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800858c:	4618      	mov	r0, r3
 800858e:	bd80      	pop	{r7, pc}
 8008590:	40023800 	.word	0x40023800
 8008594:	0801fa84 	.word	0x0801fa84

08008598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800859c:	f7ff ffdc 	bl	8008558 <HAL_RCC_GetHCLKFreq>
 80085a0:	4602      	mov	r2, r0
 80085a2:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	0b5b      	lsrs	r3, r3, #13
 80085a8:	f003 0307 	and.w	r3, r3, #7
 80085ac:	4903      	ldr	r1, [pc, #12]	; (80085bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80085ae:	5ccb      	ldrb	r3, [r1, r3]
 80085b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	40023800 	.word	0x40023800
 80085bc:	0801fa84 	.word	0x0801fa84

080085c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d105      	bne.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d035      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80085e8:	4b62      	ldr	r3, [pc, #392]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80085ee:	f7fd f93b 	bl	8005868 <HAL_GetTick>
 80085f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085f4:	e008      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80085f6:	f7fd f937 	bl	8005868 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b02      	cmp	r3, #2
 8008602:	d901      	bls.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e0b0      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008608:	4b5b      	ldr	r3, [pc, #364]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1f0      	bne.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	019a      	lsls	r2, r3, #6
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	071b      	lsls	r3, r3, #28
 8008620:	4955      	ldr	r1, [pc, #340]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008622:	4313      	orrs	r3, r2
 8008624:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008628:	4b52      	ldr	r3, [pc, #328]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800862a:	2201      	movs	r2, #1
 800862c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800862e:	f7fd f91b 	bl	8005868 <HAL_GetTick>
 8008632:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008634:	e008      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008636:	f7fd f917 	bl	8005868 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d901      	bls.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e090      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008648:	4b4b      	ldr	r3, [pc, #300]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0f0      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 8083 	beq.w	8008768 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]
 8008666:	4b44      	ldr	r3, [pc, #272]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	4a43      	ldr	r2, [pc, #268]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800866c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008670:	6413      	str	r3, [r2, #64]	; 0x40
 8008672:	4b41      	ldr	r3, [pc, #260]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800867e:	4b3f      	ldr	r3, [pc, #252]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a3e      	ldr	r2, [pc, #248]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008688:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800868a:	f7fd f8ed 	bl	8005868 <HAL_GetTick>
 800868e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008690:	e008      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008692:	f7fd f8e9 	bl	8005868 <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	2b02      	cmp	r3, #2
 800869e:	d901      	bls.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e062      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80086a4:	4b35      	ldr	r3, [pc, #212]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0f0      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086b0:	4b31      	ldr	r3, [pc, #196]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d02f      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d028      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086ce:	4b2a      	ldr	r3, [pc, #168]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086d8:	4b29      	ldr	r3, [pc, #164]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80086da:	2201      	movs	r2, #1
 80086dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086de:	4b28      	ldr	r3, [pc, #160]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80086e4:	4a24      	ldr	r2, [pc, #144]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086ea:	4b23      	ldr	r3, [pc, #140]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d114      	bne.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80086f6:	f7fd f8b7 	bl	8005868 <HAL_GetTick>
 80086fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086fc:	e00a      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086fe:	f7fd f8b3 	bl	8005868 <HAL_GetTick>
 8008702:	4602      	mov	r2, r0
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	f241 3288 	movw	r2, #5000	; 0x1388
 800870c:	4293      	cmp	r3, r2
 800870e:	d901      	bls.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e02a      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008714:	4b18      	ldr	r3, [pc, #96]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0ee      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800872c:	d10d      	bne.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800872e:	4b12      	ldr	r3, [pc, #72]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800873e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008742:	490d      	ldr	r1, [pc, #52]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008744:	4313      	orrs	r3, r2
 8008746:	608b      	str	r3, [r1, #8]
 8008748:	e005      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800874a:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	4a0a      	ldr	r2, [pc, #40]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008750:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008754:	6093      	str	r3, [r2, #8]
 8008756:	4b08      	ldr	r3, [pc, #32]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008758:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008762:	4905      	ldr	r1, [pc, #20]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008764:	4313      	orrs	r3, r2
 8008766:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	42470068 	.word	0x42470068
 8008778:	40023800 	.word	0x40023800
 800877c:	40007000 	.word	0x40007000
 8008780:	42470e40 	.word	0x42470e40

08008784 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e066      	b.n	8008868 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	7f5b      	ldrb	r3, [r3, #29]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d105      	bne.n	80087b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7fc fc5e 	bl	800506c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	22ca      	movs	r2, #202	; 0xca
 80087bc:	625a      	str	r2, [r3, #36]	; 0x24
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2253      	movs	r2, #83	; 0x53
 80087c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f87a 	bl	80088c0 <RTC_EnterInitMode>
 80087cc:	4603      	mov	r3, r0
 80087ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d12c      	bne.n	8008830 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6812      	ldr	r2, [r2, #0]
 80087e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	6899      	ldr	r1, [r3, #8]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	431a      	orrs	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	431a      	orrs	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	430a      	orrs	r2, r1
 8008806:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	68d2      	ldr	r2, [r2, #12]
 8008810:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6919      	ldr	r1, [r3, #16]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	041a      	lsls	r2, r3, #16
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f881 	bl	800892e <RTC_ExitInitMode>
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d113      	bne.n	800885e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008844:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	699a      	ldr	r2, [r3, #24]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	22ff      	movs	r2, #255	; 0xff
 8008864:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008866:	7bfb      	ldrb	r3, [r7, #15]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800888a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800888c:	f7fc ffec 	bl	8005868 <HAL_GetTick>
 8008890:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008892:	e009      	b.n	80088a8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008894:	f7fc ffe8 	bl	8005868 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088a2:	d901      	bls.n	80088a8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e007      	b.n	80088b8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0ee      	beq.n	8008894 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d122      	bne.n	8008924 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68da      	ldr	r2, [r3, #12]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088ee:	f7fc ffbb 	bl	8005868 <HAL_GetTick>
 80088f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80088f4:	e00c      	b.n	8008910 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80088f6:	f7fc ffb7 	bl	8005868 <HAL_GetTick>
 80088fa:	4602      	mov	r2, r0
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008904:	d904      	bls.n	8008910 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2204      	movs	r2, #4
 800890a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891a:	2b00      	cmp	r3, #0
 800891c:	d102      	bne.n	8008924 <RTC_EnterInitMode+0x64>
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d1e8      	bne.n	80088f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68da      	ldr	r2, [r3, #12]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008948:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f003 0320 	and.w	r3, r3, #32
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10a      	bne.n	800896e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff ff89 	bl	8008870 <HAL_RTC_WaitForSynchro>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d004      	beq.n	800896e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2204      	movs	r2, #4
 8008968:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e07b      	b.n	8008a82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	2b00      	cmp	r3, #0
 8008990:	d108      	bne.n	80089a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800899a:	d009      	beq.n	80089b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	61da      	str	r2, [r3, #28]
 80089a2:	e005      	b.n	80089b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d106      	bne.n	80089d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7fc fb78 	bl	80050c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089f8:	431a      	orrs	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a02:	431a      	orrs	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	431a      	orrs	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a20:	431a      	orrs	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a2a:	431a      	orrs	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a34:	ea42 0103 	orr.w	r1, r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	0c1b      	lsrs	r3, r3, #16
 8008a4e:	f003 0104 	and.w	r1, r3, #4
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	f003 0210 	and.w	r2, r3, #16
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69da      	ldr	r2, [r3, #28]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b088      	sub	sp, #32
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	603b      	str	r3, [r7, #0]
 8008a96:	4613      	mov	r3, r2
 8008a98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d101      	bne.n	8008aac <HAL_SPI_Transmit+0x22>
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e126      	b.n	8008cfa <HAL_SPI_Transmit+0x270>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ab4:	f7fc fed8 	bl	8005868 <HAL_GetTick>
 8008ab8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008aba:	88fb      	ldrh	r3, [r7, #6]
 8008abc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d002      	beq.n	8008ad0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008aca:	2302      	movs	r3, #2
 8008acc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ace:	e10b      	b.n	8008ce8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <HAL_SPI_Transmit+0x52>
 8008ad6:	88fb      	ldrh	r3, [r7, #6]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d102      	bne.n	8008ae2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ae0:	e102      	b.n	8008ce8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2203      	movs	r2, #3
 8008ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	88fa      	ldrh	r2, [r7, #6]
 8008afa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	88fa      	ldrh	r2, [r7, #6]
 8008b00:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b28:	d10f      	bne.n	8008b4a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b54:	2b40      	cmp	r3, #64	; 0x40
 8008b56:	d007      	beq.n	8008b68 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b70:	d14b      	bne.n	8008c0a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <HAL_SPI_Transmit+0xf6>
 8008b7a:	8afb      	ldrh	r3, [r7, #22]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d13e      	bne.n	8008bfe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b84:	881a      	ldrh	r2, [r3, #0]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b90:	1c9a      	adds	r2, r3, #2
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008ba4:	e02b      	b.n	8008bfe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d112      	bne.n	8008bda <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb8:	881a      	ldrh	r2, [r3, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc4:	1c9a      	adds	r2, r3, #2
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8008bd8:	e011      	b.n	8008bfe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bda:	f7fc fe45 	bl	8005868 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d803      	bhi.n	8008bf2 <HAL_SPI_Transmit+0x168>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bf0:	d102      	bne.n	8008bf8 <HAL_SPI_Transmit+0x16e>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d102      	bne.n	8008bfe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008bfc:	e074      	b.n	8008ce8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1ce      	bne.n	8008ba6 <HAL_SPI_Transmit+0x11c>
 8008c08:	e04c      	b.n	8008ca4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <HAL_SPI_Transmit+0x18e>
 8008c12:	8afb      	ldrh	r3, [r7, #22]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d140      	bne.n	8008c9a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	330c      	adds	r3, #12
 8008c22:	7812      	ldrb	r2, [r2, #0]
 8008c24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c3e:	e02c      	b.n	8008c9a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d113      	bne.n	8008c76 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	330c      	adds	r3, #12
 8008c58:	7812      	ldrb	r2, [r2, #0]
 8008c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c74:	e011      	b.n	8008c9a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c76:	f7fc fdf7 	bl	8005868 <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d803      	bhi.n	8008c8e <HAL_SPI_Transmit+0x204>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c8c:	d102      	bne.n	8008c94 <HAL_SPI_Transmit+0x20a>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d102      	bne.n	8008c9a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c98:	e026      	b.n	8008ce8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1cd      	bne.n	8008c40 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 fa55 	bl	8009158 <SPI_EndRxTxTransaction>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10a      	bne.n	8008cd8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	613b      	str	r3, [r7, #16]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	77fb      	strb	r3, [r7, #31]
 8008ce4:	e000      	b.n	8008ce8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008ce6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3720      	adds	r7, #32
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b08c      	sub	sp, #48	; 0x30
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	607a      	str	r2, [r7, #4]
 8008d0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d10:	2301      	movs	r3, #1
 8008d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d101      	bne.n	8008d28 <HAL_SPI_TransmitReceive+0x26>
 8008d24:	2302      	movs	r3, #2
 8008d26:	e18a      	b.n	800903e <HAL_SPI_TransmitReceive+0x33c>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d30:	f7fc fd9a 	bl	8005868 <HAL_GetTick>
 8008d34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d46:	887b      	ldrh	r3, [r7, #2]
 8008d48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d00f      	beq.n	8008d72 <HAL_SPI_TransmitReceive+0x70>
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d58:	d107      	bne.n	8008d6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d103      	bne.n	8008d6a <HAL_SPI_TransmitReceive+0x68>
 8008d62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	d003      	beq.n	8008d72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d70:	e15b      	b.n	800902a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <HAL_SPI_TransmitReceive+0x82>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <HAL_SPI_TransmitReceive+0x82>
 8008d7e:	887b      	ldrh	r3, [r7, #2]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d103      	bne.n	8008d8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d8a:	e14e      	b.n	800902a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d003      	beq.n	8008da0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2205      	movs	r2, #5
 8008d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	887a      	ldrh	r2, [r7, #2]
 8008db0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	887a      	ldrh	r2, [r7, #2]
 8008db6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	887a      	ldrh	r2, [r7, #2]
 8008dc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	887a      	ldrh	r2, [r7, #2]
 8008dc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de0:	2b40      	cmp	r3, #64	; 0x40
 8008de2:	d007      	beq.n	8008df4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dfc:	d178      	bne.n	8008ef0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <HAL_SPI_TransmitReceive+0x10a>
 8008e06:	8b7b      	ldrh	r3, [r7, #26]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d166      	bne.n	8008eda <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e10:	881a      	ldrh	r2, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	1c9a      	adds	r2, r3, #2
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e30:	e053      	b.n	8008eda <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d11b      	bne.n	8008e78 <HAL_SPI_TransmitReceive+0x176>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d016      	beq.n	8008e78 <HAL_SPI_TransmitReceive+0x176>
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d113      	bne.n	8008e78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e54:	881a      	ldrh	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e60:	1c9a      	adds	r2, r3, #2
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d119      	bne.n	8008eba <HAL_SPI_TransmitReceive+0x1b8>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d014      	beq.n	8008eba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68da      	ldr	r2, [r3, #12]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9a:	b292      	uxth	r2, r2
 8008e9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea2:	1c9a      	adds	r2, r3, #2
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	3b01      	subs	r3, #1
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008eba:	f7fc fcd5 	bl	8005868 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d807      	bhi.n	8008eda <HAL_SPI_TransmitReceive+0x1d8>
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ed0:	d003      	beq.n	8008eda <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ed8:	e0a7      	b.n	800902a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1a6      	bne.n	8008e32 <HAL_SPI_TransmitReceive+0x130>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1a1      	bne.n	8008e32 <HAL_SPI_TransmitReceive+0x130>
 8008eee:	e07c      	b.n	8008fea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <HAL_SPI_TransmitReceive+0x1fc>
 8008ef8:	8b7b      	ldrh	r3, [r7, #26]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d16b      	bne.n	8008fd6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	330c      	adds	r3, #12
 8008f08:	7812      	ldrb	r2, [r2, #0]
 8008f0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f24:	e057      	b.n	8008fd6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f003 0302 	and.w	r3, r3, #2
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d11c      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x26c>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d017      	beq.n	8008f6e <HAL_SPI_TransmitReceive+0x26c>
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d114      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	330c      	adds	r3, #12
 8008f4e:	7812      	ldrb	r2, [r2, #0]
 8008f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d119      	bne.n	8008fb0 <HAL_SPI_TransmitReceive+0x2ae>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d014      	beq.n	8008fb0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fac:	2301      	movs	r3, #1
 8008fae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008fb0:	f7fc fc5a 	bl	8005868 <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d803      	bhi.n	8008fc8 <HAL_SPI_TransmitReceive+0x2c6>
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fc6:	d102      	bne.n	8008fce <HAL_SPI_TransmitReceive+0x2cc>
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d103      	bne.n	8008fd6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008fd4:	e029      	b.n	800902a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1a2      	bne.n	8008f26 <HAL_SPI_TransmitReceive+0x224>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d19d      	bne.n	8008f26 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 f8b2 	bl	8009158 <SPI_EndRxTxTransaction>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d006      	beq.n	8009008 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2220      	movs	r2, #32
 8009004:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009006:	e010      	b.n	800902a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10b      	bne.n	8009028 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009010:	2300      	movs	r3, #0
 8009012:	617b      	str	r3, [r7, #20]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	617b      	str	r3, [r7, #20]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	617b      	str	r3, [r7, #20]
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	e000      	b.n	800902a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009028:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800903a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800903e:	4618      	mov	r0, r3
 8009040:	3730      	adds	r7, #48	; 0x30
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	4613      	mov	r3, r2
 8009056:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009058:	f7fc fc06 	bl	8005868 <HAL_GetTick>
 800905c:	4602      	mov	r2, r0
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	1a9b      	subs	r3, r3, r2
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	4413      	add	r3, r2
 8009066:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009068:	f7fc fbfe 	bl	8005868 <HAL_GetTick>
 800906c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800906e:	4b39      	ldr	r3, [pc, #228]	; (8009154 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	015b      	lsls	r3, r3, #5
 8009074:	0d1b      	lsrs	r3, r3, #20
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	fb02 f303 	mul.w	r3, r2, r3
 800907c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800907e:	e054      	b.n	800912a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009086:	d050      	beq.n	800912a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009088:	f7fc fbee 	bl	8005868 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	69fa      	ldr	r2, [r7, #28]
 8009094:	429a      	cmp	r2, r3
 8009096:	d902      	bls.n	800909e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d13d      	bne.n	800911a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090b6:	d111      	bne.n	80090dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090c0:	d004      	beq.n	80090cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ca:	d107      	bne.n	80090dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090e4:	d10f      	bne.n	8009106 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e017      	b.n	800914a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	3b01      	subs	r3, #1
 8009128:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	689a      	ldr	r2, [r3, #8]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	4013      	ands	r3, r2
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	429a      	cmp	r2, r3
 8009138:	bf0c      	ite	eq
 800913a:	2301      	moveq	r3, #1
 800913c:	2300      	movne	r3, #0
 800913e:	b2db      	uxtb	r3, r3
 8009140:	461a      	mov	r2, r3
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	429a      	cmp	r2, r3
 8009146:	d19b      	bne.n	8009080 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3720      	adds	r7, #32
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000008 	.word	0x20000008

08009158 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af02      	add	r7, sp, #8
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009164:	4b1b      	ldr	r3, [pc, #108]	; (80091d4 <SPI_EndRxTxTransaction+0x7c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a1b      	ldr	r2, [pc, #108]	; (80091d8 <SPI_EndRxTxTransaction+0x80>)
 800916a:	fba2 2303 	umull	r2, r3, r2, r3
 800916e:	0d5b      	lsrs	r3, r3, #21
 8009170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009174:	fb02 f303 	mul.w	r3, r2, r3
 8009178:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009182:	d112      	bne.n	80091aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2200      	movs	r2, #0
 800918c:	2180      	movs	r1, #128	; 0x80
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f7ff ff5a 	bl	8009048 <SPI_WaitFlagStateUntilTimeout>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d016      	beq.n	80091c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800919e:	f043 0220 	orr.w	r2, r3, #32
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e00f      	b.n	80091ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00a      	beq.n	80091c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c0:	2b80      	cmp	r3, #128	; 0x80
 80091c2:	d0f2      	beq.n	80091aa <SPI_EndRxTxTransaction+0x52>
 80091c4:	e000      	b.n	80091c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80091c6:	bf00      	nop
  }

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3718      	adds	r7, #24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20000008 	.word	0x20000008
 80091d8:	165e9f81 	.word	0x165e9f81

080091dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e041      	b.n	8009272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d106      	bne.n	8009208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7fb ffa4 	bl	8005150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2202      	movs	r2, #2
 800920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3304      	adds	r3, #4
 8009218:	4619      	mov	r1, r3
 800921a:	4610      	mov	r0, r2
 800921c:	f000 fa10 	bl	8009640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e041      	b.n	8009310 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b00      	cmp	r3, #0
 8009296:	d106      	bne.n	80092a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f839 	bl	8009318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2202      	movs	r2, #2
 80092aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	3304      	adds	r3, #4
 80092b6:	4619      	mov	r1, r3
 80092b8:	4610      	mov	r0, r2
 80092ba:	f000 f9c1 	bl	8009640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009342:	2b01      	cmp	r3, #1
 8009344:	d101      	bne.n	800934a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009346:	2302      	movs	r3, #2
 8009348:	e0ae      	b.n	80094a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b0c      	cmp	r3, #12
 8009356:	f200 809f 	bhi.w	8009498 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800935a:	a201      	add	r2, pc, #4	; (adr r2, 8009360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800935c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009360:	08009395 	.word	0x08009395
 8009364:	08009499 	.word	0x08009499
 8009368:	08009499 	.word	0x08009499
 800936c:	08009499 	.word	0x08009499
 8009370:	080093d5 	.word	0x080093d5
 8009374:	08009499 	.word	0x08009499
 8009378:	08009499 	.word	0x08009499
 800937c:	08009499 	.word	0x08009499
 8009380:	08009417 	.word	0x08009417
 8009384:	08009499 	.word	0x08009499
 8009388:	08009499 	.word	0x08009499
 800938c:	08009499 	.word	0x08009499
 8009390:	08009457 	.word	0x08009457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68b9      	ldr	r1, [r7, #8]
 800939a:	4618      	mov	r0, r3
 800939c:	f000 f9f0 	bl	8009780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f042 0208 	orr.w	r2, r2, #8
 80093ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699a      	ldr	r2, [r3, #24]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 0204 	bic.w	r2, r2, #4
 80093be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6999      	ldr	r1, [r3, #24]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	691a      	ldr	r2, [r3, #16]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	430a      	orrs	r2, r1
 80093d0:	619a      	str	r2, [r3, #24]
      break;
 80093d2:	e064      	b.n	800949e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68b9      	ldr	r1, [r7, #8]
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fa40 	bl	8009860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	699a      	ldr	r2, [r3, #24]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	699a      	ldr	r2, [r3, #24]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6999      	ldr	r1, [r3, #24]
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	021a      	lsls	r2, r3, #8
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	430a      	orrs	r2, r1
 8009412:	619a      	str	r2, [r3, #24]
      break;
 8009414:	e043      	b.n	800949e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68b9      	ldr	r1, [r7, #8]
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fa95 	bl	800994c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	69da      	ldr	r2, [r3, #28]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f042 0208 	orr.w	r2, r2, #8
 8009430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	69da      	ldr	r2, [r3, #28]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f022 0204 	bic.w	r2, r2, #4
 8009440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	69d9      	ldr	r1, [r3, #28]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	430a      	orrs	r2, r1
 8009452:	61da      	str	r2, [r3, #28]
      break;
 8009454:	e023      	b.n	800949e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68b9      	ldr	r1, [r7, #8]
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fae9 	bl	8009a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69da      	ldr	r2, [r3, #28]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	69da      	ldr	r2, [r3, #28]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69d9      	ldr	r1, [r3, #28]
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	021a      	lsls	r2, r3, #8
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	430a      	orrs	r2, r1
 8009494:	61da      	str	r2, [r3, #28]
      break;
 8009496:	e002      	b.n	800949e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	75fb      	strb	r3, [r7, #23]
      break;
 800949c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3718      	adds	r7, #24
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d101      	bne.n	80094cc <HAL_TIM_ConfigClockSource+0x1c>
 80094c8:	2302      	movs	r3, #2
 80094ca:	e0b4      	b.n	8009636 <HAL_TIM_ConfigClockSource+0x186>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2202      	movs	r2, #2
 80094d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80094ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009504:	d03e      	beq.n	8009584 <HAL_TIM_ConfigClockSource+0xd4>
 8009506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800950a:	f200 8087 	bhi.w	800961c <HAL_TIM_ConfigClockSource+0x16c>
 800950e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009512:	f000 8086 	beq.w	8009622 <HAL_TIM_ConfigClockSource+0x172>
 8009516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800951a:	d87f      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x16c>
 800951c:	2b70      	cmp	r3, #112	; 0x70
 800951e:	d01a      	beq.n	8009556 <HAL_TIM_ConfigClockSource+0xa6>
 8009520:	2b70      	cmp	r3, #112	; 0x70
 8009522:	d87b      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x16c>
 8009524:	2b60      	cmp	r3, #96	; 0x60
 8009526:	d050      	beq.n	80095ca <HAL_TIM_ConfigClockSource+0x11a>
 8009528:	2b60      	cmp	r3, #96	; 0x60
 800952a:	d877      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x16c>
 800952c:	2b50      	cmp	r3, #80	; 0x50
 800952e:	d03c      	beq.n	80095aa <HAL_TIM_ConfigClockSource+0xfa>
 8009530:	2b50      	cmp	r3, #80	; 0x50
 8009532:	d873      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x16c>
 8009534:	2b40      	cmp	r3, #64	; 0x40
 8009536:	d058      	beq.n	80095ea <HAL_TIM_ConfigClockSource+0x13a>
 8009538:	2b40      	cmp	r3, #64	; 0x40
 800953a:	d86f      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x16c>
 800953c:	2b30      	cmp	r3, #48	; 0x30
 800953e:	d064      	beq.n	800960a <HAL_TIM_ConfigClockSource+0x15a>
 8009540:	2b30      	cmp	r3, #48	; 0x30
 8009542:	d86b      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x16c>
 8009544:	2b20      	cmp	r3, #32
 8009546:	d060      	beq.n	800960a <HAL_TIM_ConfigClockSource+0x15a>
 8009548:	2b20      	cmp	r3, #32
 800954a:	d867      	bhi.n	800961c <HAL_TIM_ConfigClockSource+0x16c>
 800954c:	2b00      	cmp	r3, #0
 800954e:	d05c      	beq.n	800960a <HAL_TIM_ConfigClockSource+0x15a>
 8009550:	2b10      	cmp	r3, #16
 8009552:	d05a      	beq.n	800960a <HAL_TIM_ConfigClockSource+0x15a>
 8009554:	e062      	b.n	800961c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	6899      	ldr	r1, [r3, #8]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f000 fb35 	bl	8009bd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	609a      	str	r2, [r3, #8]
      break;
 8009582:	e04f      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6818      	ldr	r0, [r3, #0]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	6899      	ldr	r1, [r3, #8]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f000 fb1e 	bl	8009bd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	689a      	ldr	r2, [r3, #8]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095a6:	609a      	str	r2, [r3, #8]
      break;
 80095a8:	e03c      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6818      	ldr	r0, [r3, #0]
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	6859      	ldr	r1, [r3, #4]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	461a      	mov	r2, r3
 80095b8:	f000 fa92 	bl	8009ae0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2150      	movs	r1, #80	; 0x50
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 faeb 	bl	8009b9e <TIM_ITRx_SetConfig>
      break;
 80095c8:	e02c      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6818      	ldr	r0, [r3, #0]
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	6859      	ldr	r1, [r3, #4]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	461a      	mov	r2, r3
 80095d8:	f000 fab1 	bl	8009b3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2160      	movs	r1, #96	; 0x60
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fadb 	bl	8009b9e <TIM_ITRx_SetConfig>
      break;
 80095e8:	e01c      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	6859      	ldr	r1, [r3, #4]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	461a      	mov	r2, r3
 80095f8:	f000 fa72 	bl	8009ae0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2140      	movs	r1, #64	; 0x40
 8009602:	4618      	mov	r0, r3
 8009604:	f000 facb 	bl	8009b9e <TIM_ITRx_SetConfig>
      break;
 8009608:	e00c      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4619      	mov	r1, r3
 8009614:	4610      	mov	r0, r2
 8009616:	f000 fac2 	bl	8009b9e <TIM_ITRx_SetConfig>
      break;
 800961a:	e003      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
      break;
 8009620:	e000      	b.n	8009624 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a40      	ldr	r2, [pc, #256]	; (8009754 <TIM_Base_SetConfig+0x114>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d013      	beq.n	8009680 <TIM_Base_SetConfig+0x40>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965e:	d00f      	beq.n	8009680 <TIM_Base_SetConfig+0x40>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a3d      	ldr	r2, [pc, #244]	; (8009758 <TIM_Base_SetConfig+0x118>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d00b      	beq.n	8009680 <TIM_Base_SetConfig+0x40>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a3c      	ldr	r2, [pc, #240]	; (800975c <TIM_Base_SetConfig+0x11c>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d007      	beq.n	8009680 <TIM_Base_SetConfig+0x40>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a3b      	ldr	r2, [pc, #236]	; (8009760 <TIM_Base_SetConfig+0x120>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d003      	beq.n	8009680 <TIM_Base_SetConfig+0x40>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a3a      	ldr	r2, [pc, #232]	; (8009764 <TIM_Base_SetConfig+0x124>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d108      	bne.n	8009692 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	4313      	orrs	r3, r2
 8009690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a2f      	ldr	r2, [pc, #188]	; (8009754 <TIM_Base_SetConfig+0x114>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d02b      	beq.n	80096f2 <TIM_Base_SetConfig+0xb2>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a0:	d027      	beq.n	80096f2 <TIM_Base_SetConfig+0xb2>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a2c      	ldr	r2, [pc, #176]	; (8009758 <TIM_Base_SetConfig+0x118>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d023      	beq.n	80096f2 <TIM_Base_SetConfig+0xb2>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a2b      	ldr	r2, [pc, #172]	; (800975c <TIM_Base_SetConfig+0x11c>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d01f      	beq.n	80096f2 <TIM_Base_SetConfig+0xb2>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a2a      	ldr	r2, [pc, #168]	; (8009760 <TIM_Base_SetConfig+0x120>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d01b      	beq.n	80096f2 <TIM_Base_SetConfig+0xb2>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a29      	ldr	r2, [pc, #164]	; (8009764 <TIM_Base_SetConfig+0x124>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d017      	beq.n	80096f2 <TIM_Base_SetConfig+0xb2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a28      	ldr	r2, [pc, #160]	; (8009768 <TIM_Base_SetConfig+0x128>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d013      	beq.n	80096f2 <TIM_Base_SetConfig+0xb2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a27      	ldr	r2, [pc, #156]	; (800976c <TIM_Base_SetConfig+0x12c>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d00f      	beq.n	80096f2 <TIM_Base_SetConfig+0xb2>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a26      	ldr	r2, [pc, #152]	; (8009770 <TIM_Base_SetConfig+0x130>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d00b      	beq.n	80096f2 <TIM_Base_SetConfig+0xb2>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a25      	ldr	r2, [pc, #148]	; (8009774 <TIM_Base_SetConfig+0x134>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d007      	beq.n	80096f2 <TIM_Base_SetConfig+0xb2>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a24      	ldr	r2, [pc, #144]	; (8009778 <TIM_Base_SetConfig+0x138>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d003      	beq.n	80096f2 <TIM_Base_SetConfig+0xb2>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a23      	ldr	r2, [pc, #140]	; (800977c <TIM_Base_SetConfig+0x13c>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d108      	bne.n	8009704 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	4313      	orrs	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	695b      	ldr	r3, [r3, #20]
 800970e:	4313      	orrs	r3, r2
 8009710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a0a      	ldr	r2, [pc, #40]	; (8009754 <TIM_Base_SetConfig+0x114>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d003      	beq.n	8009738 <TIM_Base_SetConfig+0xf8>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a0c      	ldr	r2, [pc, #48]	; (8009764 <TIM_Base_SetConfig+0x124>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d103      	bne.n	8009740 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	615a      	str	r2, [r3, #20]
}
 8009746:	bf00      	nop
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	40010000 	.word	0x40010000
 8009758:	40000400 	.word	0x40000400
 800975c:	40000800 	.word	0x40000800
 8009760:	40000c00 	.word	0x40000c00
 8009764:	40010400 	.word	0x40010400
 8009768:	40014000 	.word	0x40014000
 800976c:	40014400 	.word	0x40014400
 8009770:	40014800 	.word	0x40014800
 8009774:	40001800 	.word	0x40001800
 8009778:	40001c00 	.word	0x40001c00
 800977c:	40002000 	.word	0x40002000

08009780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	f023 0201 	bic.w	r2, r3, #1
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f023 0303 	bic.w	r3, r3, #3
 80097b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	4313      	orrs	r3, r2
 80097c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f023 0302 	bic.w	r3, r3, #2
 80097c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a20      	ldr	r2, [pc, #128]	; (8009858 <TIM_OC1_SetConfig+0xd8>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d003      	beq.n	80097e4 <TIM_OC1_SetConfig+0x64>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a1f      	ldr	r2, [pc, #124]	; (800985c <TIM_OC1_SetConfig+0xdc>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d10c      	bne.n	80097fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f023 0308 	bic.w	r3, r3, #8
 80097ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f023 0304 	bic.w	r3, r3, #4
 80097fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a15      	ldr	r2, [pc, #84]	; (8009858 <TIM_OC1_SetConfig+0xd8>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d003      	beq.n	800980e <TIM_OC1_SetConfig+0x8e>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a14      	ldr	r2, [pc, #80]	; (800985c <TIM_OC1_SetConfig+0xdc>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d111      	bne.n	8009832 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800981c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	4313      	orrs	r3, r2
 8009826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	693a      	ldr	r2, [r7, #16]
 8009836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	621a      	str	r2, [r3, #32]
}
 800984c:	bf00      	nop
 800984e:	371c      	adds	r7, #28
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	40010000 	.word	0x40010000
 800985c:	40010400 	.word	0x40010400

08009860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	f023 0210 	bic.w	r2, r3, #16
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800988e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	021b      	lsls	r3, r3, #8
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f023 0320 	bic.w	r3, r3, #32
 80098aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	697a      	ldr	r2, [r7, #20]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a22      	ldr	r2, [pc, #136]	; (8009944 <TIM_OC2_SetConfig+0xe4>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d003      	beq.n	80098c8 <TIM_OC2_SetConfig+0x68>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a21      	ldr	r2, [pc, #132]	; (8009948 <TIM_OC2_SetConfig+0xe8>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d10d      	bne.n	80098e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	011b      	lsls	r3, r3, #4
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	4313      	orrs	r3, r2
 80098da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a17      	ldr	r2, [pc, #92]	; (8009944 <TIM_OC2_SetConfig+0xe4>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d003      	beq.n	80098f4 <TIM_OC2_SetConfig+0x94>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a16      	ldr	r2, [pc, #88]	; (8009948 <TIM_OC2_SetConfig+0xe8>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d113      	bne.n	800991c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009902:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	4313      	orrs	r3, r2
 800990e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	4313      	orrs	r3, r2
 800991a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	621a      	str	r2, [r3, #32]
}
 8009936:	bf00      	nop
 8009938:	371c      	adds	r7, #28
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	40010000 	.word	0x40010000
 8009948:	40010400 	.word	0x40010400

0800994c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800994c:	b480      	push	{r7}
 800994e:	b087      	sub	sp, #28
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800997a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f023 0303 	bic.w	r3, r3, #3
 8009982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	4313      	orrs	r3, r2
 800998c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	021b      	lsls	r3, r3, #8
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	4313      	orrs	r3, r2
 80099a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a21      	ldr	r2, [pc, #132]	; (8009a2c <TIM_OC3_SetConfig+0xe0>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d003      	beq.n	80099b2 <TIM_OC3_SetConfig+0x66>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a20      	ldr	r2, [pc, #128]	; (8009a30 <TIM_OC3_SetConfig+0xe4>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d10d      	bne.n	80099ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	021b      	lsls	r3, r3, #8
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a16      	ldr	r2, [pc, #88]	; (8009a2c <TIM_OC3_SetConfig+0xe0>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d003      	beq.n	80099de <TIM_OC3_SetConfig+0x92>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a15      	ldr	r2, [pc, #84]	; (8009a30 <TIM_OC3_SetConfig+0xe4>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d113      	bne.n	8009a06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	011b      	lsls	r3, r3, #4
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	011b      	lsls	r3, r3, #4
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	621a      	str	r2, [r3, #32]
}
 8009a20:	bf00      	nop
 8009a22:	371c      	adds	r7, #28
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	40010000 	.word	0x40010000
 8009a30:	40010400 	.word	0x40010400

08009a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	69db      	ldr	r3, [r3, #28]
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	021b      	lsls	r3, r3, #8
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	031b      	lsls	r3, r3, #12
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a12      	ldr	r2, [pc, #72]	; (8009ad8 <TIM_OC4_SetConfig+0xa4>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d003      	beq.n	8009a9c <TIM_OC4_SetConfig+0x68>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a11      	ldr	r2, [pc, #68]	; (8009adc <TIM_OC4_SetConfig+0xa8>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d109      	bne.n	8009ab0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009aa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	019b      	lsls	r3, r3, #6
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	621a      	str	r2, [r3, #32]
}
 8009aca:	bf00      	nop
 8009acc:	371c      	adds	r7, #28
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	40010000 	.word	0x40010000
 8009adc:	40010400 	.word	0x40010400

08009ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b087      	sub	sp, #28
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6a1b      	ldr	r3, [r3, #32]
 8009af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	f023 0201 	bic.w	r2, r3, #1
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	011b      	lsls	r3, r3, #4
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f023 030a 	bic.w	r3, r3, #10
 8009b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	697a      	ldr	r2, [r7, #20]
 8009b30:	621a      	str	r2, [r3, #32]
}
 8009b32:	bf00      	nop
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b087      	sub	sp, #28
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	f023 0210 	bic.w	r2, r3, #16
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6a1b      	ldr	r3, [r3, #32]
 8009b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	031b      	lsls	r3, r3, #12
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	011b      	lsls	r3, r3, #4
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	621a      	str	r2, [r3, #32]
}
 8009b92:	bf00      	nop
 8009b94:	371c      	adds	r7, #28
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b085      	sub	sp, #20
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	f043 0307 	orr.w	r3, r3, #7
 8009bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	609a      	str	r2, [r3, #8]
}
 8009bc8:	bf00      	nop
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	021a      	lsls	r2, r3, #8
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	609a      	str	r2, [r3, #8]
}
 8009c08:	bf00      	nop
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d101      	bne.n	8009c2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e05a      	b.n	8009ce2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2202      	movs	r2, #2
 8009c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a21      	ldr	r2, [pc, #132]	; (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d022      	beq.n	8009cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c78:	d01d      	beq.n	8009cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a1d      	ldr	r2, [pc, #116]	; (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d018      	beq.n	8009cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a1b      	ldr	r2, [pc, #108]	; (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d013      	beq.n	8009cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a1a      	ldr	r2, [pc, #104]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d00e      	beq.n	8009cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a18      	ldr	r2, [pc, #96]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d009      	beq.n	8009cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a17      	ldr	r2, [pc, #92]	; (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d004      	beq.n	8009cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a15      	ldr	r2, [pc, #84]	; (8009d08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d10c      	bne.n	8009cd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	40010000 	.word	0x40010000
 8009cf4:	40000400 	.word	0x40000400
 8009cf8:	40000800 	.word	0x40000800
 8009cfc:	40000c00 	.word	0x40000c00
 8009d00:	40010400 	.word	0x40010400
 8009d04:	40014000 	.word	0x40014000
 8009d08:	40001800 	.word	0x40001800

08009d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d101      	bne.n	8009d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e03f      	b.n	8009d9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d106      	bne.n	8009d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7fb fab2 	bl	800529c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2224      	movs	r2, #36	; 0x24
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68da      	ldr	r2, [r3, #12]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fd53 	bl	800a7fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	691a      	ldr	r2, [r3, #16]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	695a      	ldr	r2, [r3, #20]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68da      	ldr	r2, [r3, #12]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2220      	movs	r2, #32
 8009d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2220      	movs	r2, #32
 8009d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b08a      	sub	sp, #40	; 0x28
 8009daa:	af02      	add	r7, sp, #8
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	603b      	str	r3, [r7, #0]
 8009db2:	4613      	mov	r3, r2
 8009db4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009db6:	2300      	movs	r3, #0
 8009db8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b20      	cmp	r3, #32
 8009dc4:	d17c      	bne.n	8009ec0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <HAL_UART_Transmit+0x2c>
 8009dcc:	88fb      	ldrh	r3, [r7, #6]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d101      	bne.n	8009dd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e075      	b.n	8009ec2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d101      	bne.n	8009de4 <HAL_UART_Transmit+0x3e>
 8009de0:	2302      	movs	r3, #2
 8009de2:	e06e      	b.n	8009ec2 <HAL_UART_Transmit+0x11c>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2200      	movs	r2, #0
 8009df0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2221      	movs	r2, #33	; 0x21
 8009df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009dfa:	f7fb fd35 	bl	8005868 <HAL_GetTick>
 8009dfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	88fa      	ldrh	r2, [r7, #6]
 8009e04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	88fa      	ldrh	r2, [r7, #6]
 8009e0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e14:	d108      	bne.n	8009e28 <HAL_UART_Transmit+0x82>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d104      	bne.n	8009e28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	61bb      	str	r3, [r7, #24]
 8009e26:	e003      	b.n	8009e30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009e38:	e02a      	b.n	8009e90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	2200      	movs	r2, #0
 8009e42:	2180      	movs	r1, #128	; 0x80
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f000 fb41 	bl	800a4cc <UART_WaitOnFlagUntilTimeout>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e036      	b.n	8009ec2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10b      	bne.n	8009e72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	3302      	adds	r3, #2
 8009e6e:	61bb      	str	r3, [r7, #24]
 8009e70:	e007      	b.n	8009e82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	781a      	ldrb	r2, [r3, #0]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1cf      	bne.n	8009e3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	2140      	movs	r1, #64	; 0x40
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f000 fb11 	bl	800a4cc <UART_WaitOnFlagUntilTimeout>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e006      	b.n	8009ec2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	e000      	b.n	8009ec2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009ec0:	2302      	movs	r3, #2
  }
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3720      	adds	r7, #32
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b08a      	sub	sp, #40	; 0x28
 8009ece:	af02      	add	r7, sp, #8
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	603b      	str	r3, [r7, #0]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009eda:	2300      	movs	r3, #0
 8009edc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b20      	cmp	r3, #32
 8009ee8:	f040 808c 	bne.w	800a004 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <HAL_UART_Receive+0x2e>
 8009ef2:	88fb      	ldrh	r3, [r7, #6]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e084      	b.n	800a006 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d101      	bne.n	8009f0a <HAL_UART_Receive+0x40>
 8009f06:	2302      	movs	r3, #2
 8009f08:	e07d      	b.n	800a006 <HAL_UART_Receive+0x13c>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2222      	movs	r2, #34	; 0x22
 8009f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f26:	f7fb fc9f 	bl	8005868 <HAL_GetTick>
 8009f2a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	88fa      	ldrh	r2, [r7, #6]
 8009f30:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	88fa      	ldrh	r2, [r7, #6]
 8009f36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f40:	d108      	bne.n	8009f54 <HAL_UART_Receive+0x8a>
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d104      	bne.n	8009f54 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	61bb      	str	r3, [r7, #24]
 8009f52:	e003      	b.n	8009f5c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009f64:	e043      	b.n	8009fee <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	2120      	movs	r1, #32
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f000 faab 	bl	800a4cc <UART_WaitOnFlagUntilTimeout>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e042      	b.n	800a006 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10c      	bne.n	8009fa0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	3302      	adds	r3, #2
 8009f9c:	61bb      	str	r3, [r7, #24]
 8009f9e:	e01f      	b.n	8009fe0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fa8:	d007      	beq.n	8009fba <HAL_UART_Receive+0xf0>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10a      	bne.n	8009fc8 <HAL_UART_Receive+0xfe>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d106      	bne.n	8009fc8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	701a      	strb	r2, [r3, #0]
 8009fc6:	e008      	b.n	8009fda <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1b6      	bne.n	8009f66 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	e000      	b.n	800a006 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a004:	2302      	movs	r3, #2
  }
}
 800a006:	4618      	mov	r0, r3
 800a008:	3720      	adds	r7, #32
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
	...

0800a010 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b08c      	sub	sp, #48	; 0x30
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	4613      	mov	r3, r2
 800a01c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b20      	cmp	r3, #32
 800a028:	d165      	bne.n	800a0f6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d002      	beq.n	800a036 <HAL_UART_Transmit_DMA+0x26>
 800a030:	88fb      	ldrh	r3, [r7, #6]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d101      	bne.n	800a03a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e05e      	b.n	800a0f8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a040:	2b01      	cmp	r3, #1
 800a042:	d101      	bne.n	800a048 <HAL_UART_Transmit_DMA+0x38>
 800a044:	2302      	movs	r3, #2
 800a046:	e057      	b.n	800a0f8 <HAL_UART_Transmit_DMA+0xe8>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	88fa      	ldrh	r2, [r7, #6]
 800a05a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	88fa      	ldrh	r2, [r7, #6]
 800a060:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2221      	movs	r2, #33	; 0x21
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a074:	4a22      	ldr	r2, [pc, #136]	; (800a100 <HAL_UART_Transmit_DMA+0xf0>)
 800a076:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a07c:	4a21      	ldr	r2, [pc, #132]	; (800a104 <HAL_UART_Transmit_DMA+0xf4>)
 800a07e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a084:	4a20      	ldr	r2, [pc, #128]	; (800a108 <HAL_UART_Transmit_DMA+0xf8>)
 800a086:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a08c:	2200      	movs	r2, #0
 800a08e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a090:	f107 0308 	add.w	r3, r7, #8
 800a094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	6819      	ldr	r1, [r3, #0]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	88fb      	ldrh	r3, [r7, #6]
 800a0a8:	f7fb ff9d 	bl	8005fe6 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3314      	adds	r3, #20
 800a0c4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3314      	adds	r3, #20
 800a0dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0de:	627a      	str	r2, [r7, #36]	; 0x24
 800a0e0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e2:	6a39      	ldr	r1, [r7, #32]
 800a0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e6:	e841 2300 	strex	r3, r2, [r1]
 800a0ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1e5      	bne.n	800a0be <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	e000      	b.n	800a0f8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a0f6:	2302      	movs	r3, #2
  }
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3730      	adds	r7, #48	; 0x30
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	0800a227 	.word	0x0800a227
 800a104:	0800a2c1 	.word	0x0800a2c1
 800a108:	0800a439 	.word	0x0800a439

0800a10c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08c      	sub	sp, #48	; 0x30
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	4613      	mov	r3, r2
 800a118:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b20      	cmp	r3, #32
 800a124:	d152      	bne.n	800a1cc <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d002      	beq.n	800a132 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d101      	bne.n	800a136 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e04b      	b.n	800a1ce <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d101      	bne.n	800a144 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a140:	2302      	movs	r3, #2
 800a142:	e044      	b.n	800a1ce <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2201      	movs	r2, #1
 800a150:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a152:	88fb      	ldrh	r3, [r7, #6]
 800a154:	461a      	mov	r2, r3
 800a156:	68b9      	ldr	r1, [r7, #8]
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 fa25 	bl	800a5a8 <UART_Start_Receive_DMA>
 800a15e:	4603      	mov	r3, r0
 800a160:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d12c      	bne.n	800a1c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a170:	2b01      	cmp	r3, #1
 800a172:	d125      	bne.n	800a1c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a174:	2300      	movs	r3, #0
 800a176:	613b      	str	r3, [r7, #16]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	613b      	str	r3, [r7, #16]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	613b      	str	r3, [r7, #16]
 800a188:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	330c      	adds	r3, #12
 800a190:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	e853 3f00 	ldrex	r3, [r3]
 800a198:	617b      	str	r3, [r7, #20]
   return(result);
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f043 0310 	orr.w	r3, r3, #16
 800a1a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	330c      	adds	r3, #12
 800a1a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1aa:	627a      	str	r2, [r7, #36]	; 0x24
 800a1ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ae:	6a39      	ldr	r1, [r7, #32]
 800a1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b2:	e841 2300 	strex	r3, r2, [r1]
 800a1b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1e5      	bne.n	800a18a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a1be:	e002      	b.n	800a1c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a1c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1ca:	e000      	b.n	800a1ce <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a1cc:	2302      	movs	r3, #2
  }
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3730      	adds	r7, #48	; 0x30
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	b083      	sub	sp, #12
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a1de:	bf00      	nop
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b083      	sub	sp, #12
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a1f2:	bf00      	nop
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b083      	sub	sp, #12
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a206:	bf00      	nop
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a212:	b480      	push	{r7}
 800a214:	b083      	sub	sp, #12
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a21a:	bf00      	nop
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b090      	sub	sp, #64	; 0x40
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a232:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d137      	bne.n	800a2b2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a244:	2200      	movs	r2, #0
 800a246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3314      	adds	r3, #20
 800a24e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	e853 3f00 	ldrex	r3, [r3]
 800a256:	623b      	str	r3, [r7, #32]
   return(result);
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a25e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3314      	adds	r3, #20
 800a266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a268:	633a      	str	r2, [r7, #48]	; 0x30
 800a26a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a26e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a270:	e841 2300 	strex	r3, r2, [r1]
 800a274:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1e5      	bne.n	800a248 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	330c      	adds	r3, #12
 800a282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	e853 3f00 	ldrex	r3, [r3]
 800a28a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a292:	637b      	str	r3, [r7, #52]	; 0x34
 800a294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	330c      	adds	r3, #12
 800a29a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a29c:	61fa      	str	r2, [r7, #28]
 800a29e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a0:	69b9      	ldr	r1, [r7, #24]
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	e841 2300 	strex	r3, r2, [r1]
 800a2a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1e5      	bne.n	800a27c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2b0:	e002      	b.n	800a2b8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a2b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a2b4:	f7f7 fbf0 	bl	8001a98 <HAL_UART_TxCpltCallback>
}
 800a2b8:	bf00      	nop
 800a2ba:	3740      	adds	r7, #64	; 0x40
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f7ff ff81 	bl	800a1d6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2d4:	bf00      	nop
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b09c      	sub	sp, #112	; 0x70
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d172      	bne.n	800a3de <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a2f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	330c      	adds	r3, #12
 800a304:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a308:	e853 3f00 	ldrex	r3, [r3]
 800a30c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a30e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a314:	66bb      	str	r3, [r7, #104]	; 0x68
 800a316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	330c      	adds	r3, #12
 800a31c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a31e:	65ba      	str	r2, [r7, #88]	; 0x58
 800a320:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a322:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a324:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a326:	e841 2300 	strex	r3, r2, [r1]
 800a32a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a32c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1e5      	bne.n	800a2fe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3314      	adds	r3, #20
 800a338:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	e853 3f00 	ldrex	r3, [r3]
 800a340:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a344:	f023 0301 	bic.w	r3, r3, #1
 800a348:	667b      	str	r3, [r7, #100]	; 0x64
 800a34a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3314      	adds	r3, #20
 800a350:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a352:	647a      	str	r2, [r7, #68]	; 0x44
 800a354:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a356:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a35a:	e841 2300 	strex	r3, r2, [r1]
 800a35e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1e5      	bne.n	800a332 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3314      	adds	r3, #20
 800a36c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	e853 3f00 	ldrex	r3, [r3]
 800a374:	623b      	str	r3, [r7, #32]
   return(result);
 800a376:	6a3b      	ldr	r3, [r7, #32]
 800a378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a37c:	663b      	str	r3, [r7, #96]	; 0x60
 800a37e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3314      	adds	r3, #20
 800a384:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a386:	633a      	str	r2, [r7, #48]	; 0x30
 800a388:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a38c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38e:	e841 2300 	strex	r3, r2, [r1]
 800a392:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1e5      	bne.n	800a366 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a39c:	2220      	movs	r2, #32
 800a39e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d119      	bne.n	800a3de <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	330c      	adds	r3, #12
 800a3b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	e853 3f00 	ldrex	r3, [r3]
 800a3b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f023 0310 	bic.w	r3, r3, #16
 800a3c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	330c      	adds	r3, #12
 800a3c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3ca:	61fa      	str	r2, [r7, #28]
 800a3cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ce:	69b9      	ldr	r1, [r7, #24]
 800a3d0:	69fa      	ldr	r2, [r7, #28]
 800a3d2:	e841 2300 	strex	r3, r2, [r1]
 800a3d6:	617b      	str	r3, [r7, #20]
   return(result);
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1e5      	bne.n	800a3aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d106      	bne.n	800a3f4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3ee:	f7f7 fb5d 	bl	8001aac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3f2:	e002      	b.n	800a3fa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a3f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a3f6:	f7ff fef8 	bl	800a1ea <HAL_UART_RxCpltCallback>
}
 800a3fa:	bf00      	nop
 800a3fc:	3770      	adds	r7, #112	; 0x70
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b084      	sub	sp, #16
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a414:	2b01      	cmp	r3, #1
 800a416:	d108      	bne.n	800a42a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a41c:	085b      	lsrs	r3, r3, #1
 800a41e:	b29b      	uxth	r3, r3
 800a420:	4619      	mov	r1, r3
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f7f7 fb42 	bl	8001aac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a428:	e002      	b.n	800a430 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7ff fee7 	bl	800a1fe <HAL_UART_RxHalfCpltCallback>
}
 800a430:	bf00      	nop
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a440:	2300      	movs	r3, #0
 800a442:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a448:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	695b      	ldr	r3, [r3, #20]
 800a450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a454:	2b80      	cmp	r3, #128	; 0x80
 800a456:	bf0c      	ite	eq
 800a458:	2301      	moveq	r3, #1
 800a45a:	2300      	movne	r3, #0
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a466:	b2db      	uxtb	r3, r3
 800a468:	2b21      	cmp	r3, #33	; 0x21
 800a46a:	d108      	bne.n	800a47e <UART_DMAError+0x46>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d005      	beq.n	800a47e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2200      	movs	r2, #0
 800a476:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a478:	68b8      	ldr	r0, [r7, #8]
 800a47a:	f000 f933 	bl	800a6e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	695b      	ldr	r3, [r3, #20]
 800a484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a488:	2b40      	cmp	r3, #64	; 0x40
 800a48a:	bf0c      	ite	eq
 800a48c:	2301      	moveq	r3, #1
 800a48e:	2300      	movne	r3, #0
 800a490:	b2db      	uxtb	r3, r3
 800a492:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b22      	cmp	r3, #34	; 0x22
 800a49e:	d108      	bne.n	800a4b2 <UART_DMAError+0x7a>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d005      	beq.n	800a4b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a4ac:	68b8      	ldr	r0, [r7, #8]
 800a4ae:	f000 f941 	bl	800a734 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	f043 0210 	orr.w	r2, r3, #16
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4be:	68b8      	ldr	r0, [r7, #8]
 800a4c0:	f7ff fea7 	bl	800a212 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4c4:	bf00      	nop
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b090      	sub	sp, #64	; 0x40
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4dc:	e050      	b.n	800a580 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4e4:	d04c      	beq.n	800a580 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d007      	beq.n	800a4fc <UART_WaitOnFlagUntilTimeout+0x30>
 800a4ec:	f7fb f9bc 	bl	8005868 <HAL_GetTick>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d241      	bcs.n	800a580 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	330c      	adds	r3, #12
 800a502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a506:	e853 3f00 	ldrex	r3, [r3]
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	330c      	adds	r3, #12
 800a51a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a51c:	637a      	str	r2, [r7, #52]	; 0x34
 800a51e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a524:	e841 2300 	strex	r3, r2, [r1]
 800a528:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d1e5      	bne.n	800a4fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	3314      	adds	r3, #20
 800a536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	e853 3f00 	ldrex	r3, [r3]
 800a53e:	613b      	str	r3, [r7, #16]
   return(result);
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	f023 0301 	bic.w	r3, r3, #1
 800a546:	63bb      	str	r3, [r7, #56]	; 0x38
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	3314      	adds	r3, #20
 800a54e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a550:	623a      	str	r2, [r7, #32]
 800a552:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	69f9      	ldr	r1, [r7, #28]
 800a556:	6a3a      	ldr	r2, [r7, #32]
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e5      	bne.n	800a530 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2220      	movs	r2, #32
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2220      	movs	r2, #32
 800a570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e00f      	b.n	800a5a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	4013      	ands	r3, r2
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	bf0c      	ite	eq
 800a590:	2301      	moveq	r3, #1
 800a592:	2300      	movne	r3, #0
 800a594:	b2db      	uxtb	r3, r3
 800a596:	461a      	mov	r2, r3
 800a598:	79fb      	ldrb	r3, [r7, #7]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d09f      	beq.n	800a4de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3740      	adds	r7, #64	; 0x40
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b098      	sub	sp, #96	; 0x60
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	88fa      	ldrh	r2, [r7, #6]
 800a5c0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2222      	movs	r2, #34	; 0x22
 800a5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d4:	4a40      	ldr	r2, [pc, #256]	; (800a6d8 <UART_Start_Receive_DMA+0x130>)
 800a5d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5dc:	4a3f      	ldr	r2, [pc, #252]	; (800a6dc <UART_Start_Receive_DMA+0x134>)
 800a5de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e4:	4a3e      	ldr	r2, [pc, #248]	; (800a6e0 <UART_Start_Receive_DMA+0x138>)
 800a5e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a5f0:	f107 0308 	add.w	r3, r7, #8
 800a5f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	3304      	adds	r3, #4
 800a600:	4619      	mov	r1, r3
 800a602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	88fb      	ldrh	r3, [r7, #6]
 800a608:	f7fb fced 	bl	8005fe6 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a60c:	2300      	movs	r3, #0
 800a60e:	613b      	str	r3, [r7, #16]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	613b      	str	r3, [r7, #16]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	613b      	str	r3, [r7, #16]
 800a620:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d019      	beq.n	800a666 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	330c      	adds	r3, #12
 800a638:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a648:	65bb      	str	r3, [r7, #88]	; 0x58
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	330c      	adds	r3, #12
 800a650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a652:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a654:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a656:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a65a:	e841 2300 	strex	r3, r2, [r1]
 800a65e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e5      	bne.n	800a632 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3314      	adds	r3, #20
 800a66c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	e853 3f00 	ldrex	r3, [r3]
 800a674:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a678:	f043 0301 	orr.w	r3, r3, #1
 800a67c:	657b      	str	r3, [r7, #84]	; 0x54
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3314      	adds	r3, #20
 800a684:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a686:	63ba      	str	r2, [r7, #56]	; 0x38
 800a688:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a68c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a68e:	e841 2300 	strex	r3, r2, [r1]
 800a692:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1e5      	bne.n	800a666 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3314      	adds	r3, #20
 800a6a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	e853 3f00 	ldrex	r3, [r3]
 800a6a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6b0:	653b      	str	r3, [r7, #80]	; 0x50
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3314      	adds	r3, #20
 800a6b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6ba:	627a      	str	r2, [r7, #36]	; 0x24
 800a6bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6be:	6a39      	ldr	r1, [r7, #32]
 800a6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6c2:	e841 2300 	strex	r3, r2, [r1]
 800a6c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1e5      	bne.n	800a69a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3760      	adds	r7, #96	; 0x60
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	0800a2dd 	.word	0x0800a2dd
 800a6dc:	0800a403 	.word	0x0800a403
 800a6e0:	0800a439 	.word	0x0800a439

0800a6e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b089      	sub	sp, #36	; 0x24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	330c      	adds	r3, #12
 800a6f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	e853 3f00 	ldrex	r3, [r3]
 800a6fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a702:	61fb      	str	r3, [r7, #28]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	330c      	adds	r3, #12
 800a70a:	69fa      	ldr	r2, [r7, #28]
 800a70c:	61ba      	str	r2, [r7, #24]
 800a70e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a710:	6979      	ldr	r1, [r7, #20]
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	e841 2300 	strex	r3, r2, [r1]
 800a718:	613b      	str	r3, [r7, #16]
   return(result);
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1e5      	bne.n	800a6ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2220      	movs	r2, #32
 800a724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a728:	bf00      	nop
 800a72a:	3724      	adds	r7, #36	; 0x24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a734:	b480      	push	{r7}
 800a736:	b095      	sub	sp, #84	; 0x54
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	330c      	adds	r3, #12
 800a742:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a746:	e853 3f00 	ldrex	r3, [r3]
 800a74a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a752:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	330c      	adds	r3, #12
 800a75a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a75c:	643a      	str	r2, [r7, #64]	; 0x40
 800a75e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a760:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a762:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a764:	e841 2300 	strex	r3, r2, [r1]
 800a768:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1e5      	bne.n	800a73c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	3314      	adds	r3, #20
 800a776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	e853 3f00 	ldrex	r3, [r3]
 800a77e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	f023 0301 	bic.w	r3, r3, #1
 800a786:	64bb      	str	r3, [r7, #72]	; 0x48
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	3314      	adds	r3, #20
 800a78e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a790:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a798:	e841 2300 	strex	r3, r2, [r1]
 800a79c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1e5      	bne.n	800a770 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d119      	bne.n	800a7e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	330c      	adds	r3, #12
 800a7b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	e853 3f00 	ldrex	r3, [r3]
 800a7ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	f023 0310 	bic.w	r3, r3, #16
 800a7c2:	647b      	str	r3, [r7, #68]	; 0x44
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	330c      	adds	r3, #12
 800a7ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7cc:	61ba      	str	r2, [r7, #24]
 800a7ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d0:	6979      	ldr	r1, [r7, #20]
 800a7d2:	69ba      	ldr	r2, [r7, #24]
 800a7d4:	e841 2300 	strex	r3, r2, [r1]
 800a7d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1e5      	bne.n	800a7ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2220      	movs	r2, #32
 800a7e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a7ee:	bf00      	nop
 800a7f0:	3754      	adds	r7, #84	; 0x54
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
	...

0800a7fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a800:	b0c0      	sub	sp, #256	; 0x100
 800a802:	af00      	add	r7, sp, #0
 800a804:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a818:	68d9      	ldr	r1, [r3, #12]
 800a81a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	ea40 0301 	orr.w	r3, r0, r1
 800a824:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a82a:	689a      	ldr	r2, [r3, #8]
 800a82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	431a      	orrs	r2, r3
 800a834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	431a      	orrs	r2, r3
 800a83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a840:	69db      	ldr	r3, [r3, #28]
 800a842:	4313      	orrs	r3, r2
 800a844:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a854:	f021 010c 	bic.w	r1, r1, #12
 800a858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a862:	430b      	orrs	r3, r1
 800a864:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a876:	6999      	ldr	r1, [r3, #24]
 800a878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	ea40 0301 	orr.w	r3, r0, r1
 800a882:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	4b8f      	ldr	r3, [pc, #572]	; (800aac8 <UART_SetConfig+0x2cc>)
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d005      	beq.n	800a89c <UART_SetConfig+0xa0>
 800a890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	4b8d      	ldr	r3, [pc, #564]	; (800aacc <UART_SetConfig+0x2d0>)
 800a898:	429a      	cmp	r2, r3
 800a89a:	d104      	bne.n	800a8a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a89c:	f7fd fe7c 	bl	8008598 <HAL_RCC_GetPCLK2Freq>
 800a8a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a8a4:	e003      	b.n	800a8ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a8a6:	f7fd fe63 	bl	8008570 <HAL_RCC_GetPCLK1Freq>
 800a8aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8b2:	69db      	ldr	r3, [r3, #28]
 800a8b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8b8:	f040 810c 	bne.w	800aad4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a8bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a8c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a8ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	462b      	mov	r3, r5
 800a8d2:	1891      	adds	r1, r2, r2
 800a8d4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a8d6:	415b      	adcs	r3, r3
 800a8d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a8de:	4621      	mov	r1, r4
 800a8e0:	eb12 0801 	adds.w	r8, r2, r1
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	eb43 0901 	adc.w	r9, r3, r1
 800a8ea:	f04f 0200 	mov.w	r2, #0
 800a8ee:	f04f 0300 	mov.w	r3, #0
 800a8f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a8f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a8fe:	4690      	mov	r8, r2
 800a900:	4699      	mov	r9, r3
 800a902:	4623      	mov	r3, r4
 800a904:	eb18 0303 	adds.w	r3, r8, r3
 800a908:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a90c:	462b      	mov	r3, r5
 800a90e:	eb49 0303 	adc.w	r3, r9, r3
 800a912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a922:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a926:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a92a:	460b      	mov	r3, r1
 800a92c:	18db      	adds	r3, r3, r3
 800a92e:	653b      	str	r3, [r7, #80]	; 0x50
 800a930:	4613      	mov	r3, r2
 800a932:	eb42 0303 	adc.w	r3, r2, r3
 800a936:	657b      	str	r3, [r7, #84]	; 0x54
 800a938:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a93c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a940:	f7f6 f9ac 	bl	8000c9c <__aeabi_uldivmod>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	4b61      	ldr	r3, [pc, #388]	; (800aad0 <UART_SetConfig+0x2d4>)
 800a94a:	fba3 2302 	umull	r2, r3, r3, r2
 800a94e:	095b      	lsrs	r3, r3, #5
 800a950:	011c      	lsls	r4, r3, #4
 800a952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a956:	2200      	movs	r2, #0
 800a958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a95c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a960:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a964:	4642      	mov	r2, r8
 800a966:	464b      	mov	r3, r9
 800a968:	1891      	adds	r1, r2, r2
 800a96a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a96c:	415b      	adcs	r3, r3
 800a96e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a970:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a974:	4641      	mov	r1, r8
 800a976:	eb12 0a01 	adds.w	sl, r2, r1
 800a97a:	4649      	mov	r1, r9
 800a97c:	eb43 0b01 	adc.w	fp, r3, r1
 800a980:	f04f 0200 	mov.w	r2, #0
 800a984:	f04f 0300 	mov.w	r3, #0
 800a988:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a98c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a994:	4692      	mov	sl, r2
 800a996:	469b      	mov	fp, r3
 800a998:	4643      	mov	r3, r8
 800a99a:	eb1a 0303 	adds.w	r3, sl, r3
 800a99e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9a2:	464b      	mov	r3, r9
 800a9a4:	eb4b 0303 	adc.w	r3, fp, r3
 800a9a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a9b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a9bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	18db      	adds	r3, r3, r3
 800a9c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	eb42 0303 	adc.w	r3, r2, r3
 800a9cc:	647b      	str	r3, [r7, #68]	; 0x44
 800a9ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a9d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a9d6:	f7f6 f961 	bl	8000c9c <__aeabi_uldivmod>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	4611      	mov	r1, r2
 800a9e0:	4b3b      	ldr	r3, [pc, #236]	; (800aad0 <UART_SetConfig+0x2d4>)
 800a9e2:	fba3 2301 	umull	r2, r3, r3, r1
 800a9e6:	095b      	lsrs	r3, r3, #5
 800a9e8:	2264      	movs	r2, #100	; 0x64
 800a9ea:	fb02 f303 	mul.w	r3, r2, r3
 800a9ee:	1acb      	subs	r3, r1, r3
 800a9f0:	00db      	lsls	r3, r3, #3
 800a9f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a9f6:	4b36      	ldr	r3, [pc, #216]	; (800aad0 <UART_SetConfig+0x2d4>)
 800a9f8:	fba3 2302 	umull	r2, r3, r3, r2
 800a9fc:	095b      	lsrs	r3, r3, #5
 800a9fe:	005b      	lsls	r3, r3, #1
 800aa00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aa04:	441c      	add	r4, r3
 800aa06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aa14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aa18:	4642      	mov	r2, r8
 800aa1a:	464b      	mov	r3, r9
 800aa1c:	1891      	adds	r1, r2, r2
 800aa1e:	63b9      	str	r1, [r7, #56]	; 0x38
 800aa20:	415b      	adcs	r3, r3
 800aa22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aa28:	4641      	mov	r1, r8
 800aa2a:	1851      	adds	r1, r2, r1
 800aa2c:	6339      	str	r1, [r7, #48]	; 0x30
 800aa2e:	4649      	mov	r1, r9
 800aa30:	414b      	adcs	r3, r1
 800aa32:	637b      	str	r3, [r7, #52]	; 0x34
 800aa34:	f04f 0200 	mov.w	r2, #0
 800aa38:	f04f 0300 	mov.w	r3, #0
 800aa3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aa40:	4659      	mov	r1, fp
 800aa42:	00cb      	lsls	r3, r1, #3
 800aa44:	4651      	mov	r1, sl
 800aa46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa4a:	4651      	mov	r1, sl
 800aa4c:	00ca      	lsls	r2, r1, #3
 800aa4e:	4610      	mov	r0, r2
 800aa50:	4619      	mov	r1, r3
 800aa52:	4603      	mov	r3, r0
 800aa54:	4642      	mov	r2, r8
 800aa56:	189b      	adds	r3, r3, r2
 800aa58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa5c:	464b      	mov	r3, r9
 800aa5e:	460a      	mov	r2, r1
 800aa60:	eb42 0303 	adc.w	r3, r2, r3
 800aa64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aa78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	18db      	adds	r3, r3, r3
 800aa80:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa82:	4613      	mov	r3, r2
 800aa84:	eb42 0303 	adc.w	r3, r2, r3
 800aa88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa92:	f7f6 f903 	bl	8000c9c <__aeabi_uldivmod>
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	4b0d      	ldr	r3, [pc, #52]	; (800aad0 <UART_SetConfig+0x2d4>)
 800aa9c:	fba3 1302 	umull	r1, r3, r3, r2
 800aaa0:	095b      	lsrs	r3, r3, #5
 800aaa2:	2164      	movs	r1, #100	; 0x64
 800aaa4:	fb01 f303 	mul.w	r3, r1, r3
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	3332      	adds	r3, #50	; 0x32
 800aaae:	4a08      	ldr	r2, [pc, #32]	; (800aad0 <UART_SetConfig+0x2d4>)
 800aab0:	fba2 2303 	umull	r2, r3, r2, r3
 800aab4:	095b      	lsrs	r3, r3, #5
 800aab6:	f003 0207 	and.w	r2, r3, #7
 800aaba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4422      	add	r2, r4
 800aac2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aac4:	e106      	b.n	800acd4 <UART_SetConfig+0x4d8>
 800aac6:	bf00      	nop
 800aac8:	40011000 	.word	0x40011000
 800aacc:	40011400 	.word	0x40011400
 800aad0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aad8:	2200      	movs	r2, #0
 800aada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aade:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aae2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aae6:	4642      	mov	r2, r8
 800aae8:	464b      	mov	r3, r9
 800aaea:	1891      	adds	r1, r2, r2
 800aaec:	6239      	str	r1, [r7, #32]
 800aaee:	415b      	adcs	r3, r3
 800aaf0:	627b      	str	r3, [r7, #36]	; 0x24
 800aaf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aaf6:	4641      	mov	r1, r8
 800aaf8:	1854      	adds	r4, r2, r1
 800aafa:	4649      	mov	r1, r9
 800aafc:	eb43 0501 	adc.w	r5, r3, r1
 800ab00:	f04f 0200 	mov.w	r2, #0
 800ab04:	f04f 0300 	mov.w	r3, #0
 800ab08:	00eb      	lsls	r3, r5, #3
 800ab0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab0e:	00e2      	lsls	r2, r4, #3
 800ab10:	4614      	mov	r4, r2
 800ab12:	461d      	mov	r5, r3
 800ab14:	4643      	mov	r3, r8
 800ab16:	18e3      	adds	r3, r4, r3
 800ab18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ab1c:	464b      	mov	r3, r9
 800ab1e:	eb45 0303 	adc.w	r3, r5, r3
 800ab22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ab36:	f04f 0200 	mov.w	r2, #0
 800ab3a:	f04f 0300 	mov.w	r3, #0
 800ab3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ab42:	4629      	mov	r1, r5
 800ab44:	008b      	lsls	r3, r1, #2
 800ab46:	4621      	mov	r1, r4
 800ab48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	008a      	lsls	r2, r1, #2
 800ab50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ab54:	f7f6 f8a2 	bl	8000c9c <__aeabi_uldivmod>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4b60      	ldr	r3, [pc, #384]	; (800ace0 <UART_SetConfig+0x4e4>)
 800ab5e:	fba3 2302 	umull	r2, r3, r3, r2
 800ab62:	095b      	lsrs	r3, r3, #5
 800ab64:	011c      	lsls	r4, r3, #4
 800ab66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ab78:	4642      	mov	r2, r8
 800ab7a:	464b      	mov	r3, r9
 800ab7c:	1891      	adds	r1, r2, r2
 800ab7e:	61b9      	str	r1, [r7, #24]
 800ab80:	415b      	adcs	r3, r3
 800ab82:	61fb      	str	r3, [r7, #28]
 800ab84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab88:	4641      	mov	r1, r8
 800ab8a:	1851      	adds	r1, r2, r1
 800ab8c:	6139      	str	r1, [r7, #16]
 800ab8e:	4649      	mov	r1, r9
 800ab90:	414b      	adcs	r3, r1
 800ab92:	617b      	str	r3, [r7, #20]
 800ab94:	f04f 0200 	mov.w	r2, #0
 800ab98:	f04f 0300 	mov.w	r3, #0
 800ab9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aba0:	4659      	mov	r1, fp
 800aba2:	00cb      	lsls	r3, r1, #3
 800aba4:	4651      	mov	r1, sl
 800aba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abaa:	4651      	mov	r1, sl
 800abac:	00ca      	lsls	r2, r1, #3
 800abae:	4610      	mov	r0, r2
 800abb0:	4619      	mov	r1, r3
 800abb2:	4603      	mov	r3, r0
 800abb4:	4642      	mov	r2, r8
 800abb6:	189b      	adds	r3, r3, r2
 800abb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800abbc:	464b      	mov	r3, r9
 800abbe:	460a      	mov	r2, r1
 800abc0:	eb42 0303 	adc.w	r3, r2, r3
 800abc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800abc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	67bb      	str	r3, [r7, #120]	; 0x78
 800abd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800abd4:	f04f 0200 	mov.w	r2, #0
 800abd8:	f04f 0300 	mov.w	r3, #0
 800abdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800abe0:	4649      	mov	r1, r9
 800abe2:	008b      	lsls	r3, r1, #2
 800abe4:	4641      	mov	r1, r8
 800abe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abea:	4641      	mov	r1, r8
 800abec:	008a      	lsls	r2, r1, #2
 800abee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800abf2:	f7f6 f853 	bl	8000c9c <__aeabi_uldivmod>
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	4611      	mov	r1, r2
 800abfc:	4b38      	ldr	r3, [pc, #224]	; (800ace0 <UART_SetConfig+0x4e4>)
 800abfe:	fba3 2301 	umull	r2, r3, r3, r1
 800ac02:	095b      	lsrs	r3, r3, #5
 800ac04:	2264      	movs	r2, #100	; 0x64
 800ac06:	fb02 f303 	mul.w	r3, r2, r3
 800ac0a:	1acb      	subs	r3, r1, r3
 800ac0c:	011b      	lsls	r3, r3, #4
 800ac0e:	3332      	adds	r3, #50	; 0x32
 800ac10:	4a33      	ldr	r2, [pc, #204]	; (800ace0 <UART_SetConfig+0x4e4>)
 800ac12:	fba2 2303 	umull	r2, r3, r2, r3
 800ac16:	095b      	lsrs	r3, r3, #5
 800ac18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac1c:	441c      	add	r4, r3
 800ac1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac22:	2200      	movs	r2, #0
 800ac24:	673b      	str	r3, [r7, #112]	; 0x70
 800ac26:	677a      	str	r2, [r7, #116]	; 0x74
 800ac28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ac2c:	4642      	mov	r2, r8
 800ac2e:	464b      	mov	r3, r9
 800ac30:	1891      	adds	r1, r2, r2
 800ac32:	60b9      	str	r1, [r7, #8]
 800ac34:	415b      	adcs	r3, r3
 800ac36:	60fb      	str	r3, [r7, #12]
 800ac38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac3c:	4641      	mov	r1, r8
 800ac3e:	1851      	adds	r1, r2, r1
 800ac40:	6039      	str	r1, [r7, #0]
 800ac42:	4649      	mov	r1, r9
 800ac44:	414b      	adcs	r3, r1
 800ac46:	607b      	str	r3, [r7, #4]
 800ac48:	f04f 0200 	mov.w	r2, #0
 800ac4c:	f04f 0300 	mov.w	r3, #0
 800ac50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ac54:	4659      	mov	r1, fp
 800ac56:	00cb      	lsls	r3, r1, #3
 800ac58:	4651      	mov	r1, sl
 800ac5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac5e:	4651      	mov	r1, sl
 800ac60:	00ca      	lsls	r2, r1, #3
 800ac62:	4610      	mov	r0, r2
 800ac64:	4619      	mov	r1, r3
 800ac66:	4603      	mov	r3, r0
 800ac68:	4642      	mov	r2, r8
 800ac6a:	189b      	adds	r3, r3, r2
 800ac6c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac6e:	464b      	mov	r3, r9
 800ac70:	460a      	mov	r2, r1
 800ac72:	eb42 0303 	adc.w	r3, r2, r3
 800ac76:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	663b      	str	r3, [r7, #96]	; 0x60
 800ac82:	667a      	str	r2, [r7, #100]	; 0x64
 800ac84:	f04f 0200 	mov.w	r2, #0
 800ac88:	f04f 0300 	mov.w	r3, #0
 800ac8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ac90:	4649      	mov	r1, r9
 800ac92:	008b      	lsls	r3, r1, #2
 800ac94:	4641      	mov	r1, r8
 800ac96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac9a:	4641      	mov	r1, r8
 800ac9c:	008a      	lsls	r2, r1, #2
 800ac9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aca2:	f7f5 fffb 	bl	8000c9c <__aeabi_uldivmod>
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	4b0d      	ldr	r3, [pc, #52]	; (800ace0 <UART_SetConfig+0x4e4>)
 800acac:	fba3 1302 	umull	r1, r3, r3, r2
 800acb0:	095b      	lsrs	r3, r3, #5
 800acb2:	2164      	movs	r1, #100	; 0x64
 800acb4:	fb01 f303 	mul.w	r3, r1, r3
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	011b      	lsls	r3, r3, #4
 800acbc:	3332      	adds	r3, #50	; 0x32
 800acbe:	4a08      	ldr	r2, [pc, #32]	; (800ace0 <UART_SetConfig+0x4e4>)
 800acc0:	fba2 2303 	umull	r2, r3, r2, r3
 800acc4:	095b      	lsrs	r3, r3, #5
 800acc6:	f003 020f 	and.w	r2, r3, #15
 800acca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4422      	add	r2, r4
 800acd2:	609a      	str	r2, [r3, #8]
}
 800acd4:	bf00      	nop
 800acd6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800acda:	46bd      	mov	sp, r7
 800acdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ace0:	51eb851f 	.word	0x51eb851f

0800ace4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ace8:	4904      	ldr	r1, [pc, #16]	; (800acfc <MX_FATFS_Init+0x18>)
 800acea:	4805      	ldr	r0, [pc, #20]	; (800ad00 <MX_FATFS_Init+0x1c>)
 800acec:	f002 fd04 	bl	800d6f8 <FATFS_LinkDriver>
 800acf0:	4603      	mov	r3, r0
 800acf2:	461a      	mov	r2, r3
 800acf4:	4b03      	ldr	r3, [pc, #12]	; (800ad04 <MX_FATFS_Init+0x20>)
 800acf6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800acf8:	bf00      	nop
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	200049a8 	.word	0x200049a8
 800ad00:	20000014 	.word	0x20000014
 800ad04:	200049a4 	.word	0x200049a4

0800ad08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ad0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	4603      	mov	r3, r0
 800ad20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7f8 fd67 	bl	80037f8 <SD_disk_initialize>
 800ad2a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7f8 fe3f 	bl	80039c4 <SD_disk_status>
 800ad46:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60b9      	str	r1, [r7, #8]
 800ad58:	607a      	str	r2, [r7, #4]
 800ad5a:	603b      	str	r3, [r7, #0]
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800ad60:	7bf8      	ldrb	r0, [r7, #15]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	68b9      	ldr	r1, [r7, #8]
 800ad68:	f7f8 fe42 	bl	80039f0 <SD_disk_read>
 800ad6c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b084      	sub	sp, #16
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	603b      	str	r3, [r7, #0]
 800ad82:	4603      	mov	r3, r0
 800ad84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800ad86:	7bf8      	ldrb	r0, [r7, #15]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	68b9      	ldr	r1, [r7, #8]
 800ad8e:	f7f8 fe99 	bl	8003ac4 <SD_disk_write>
 800ad92:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	4603      	mov	r3, r0
 800ada4:	603a      	str	r2, [r7, #0]
 800ada6:	71fb      	strb	r3, [r7, #7]
 800ada8:	460b      	mov	r3, r1
 800adaa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800adac:	79b9      	ldrb	r1, [r7, #6]
 800adae:	79fb      	ldrb	r3, [r7, #7]
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7f8 ff0a 	bl	8003bcc <SD_disk_ioctl>
 800adb8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
	...

0800adc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800adce:	79fb      	ldrb	r3, [r7, #7]
 800add0:	4a08      	ldr	r2, [pc, #32]	; (800adf4 <disk_status+0x30>)
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4413      	add	r3, r2
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	79fa      	ldrb	r2, [r7, #7]
 800addc:	4905      	ldr	r1, [pc, #20]	; (800adf4 <disk_status+0x30>)
 800adde:	440a      	add	r2, r1
 800ade0:	7a12      	ldrb	r2, [r2, #8]
 800ade2:	4610      	mov	r0, r2
 800ade4:	4798      	blx	r3
 800ade6:	4603      	mov	r3, r0
 800ade8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800adea:	7bfb      	ldrb	r3, [r7, #15]
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	200049d4 	.word	0x200049d4

0800adf8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ae06:	79fb      	ldrb	r3, [r7, #7]
 800ae08:	4a0d      	ldr	r2, [pc, #52]	; (800ae40 <disk_initialize+0x48>)
 800ae0a:	5cd3      	ldrb	r3, [r2, r3]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d111      	bne.n	800ae34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ae10:	79fb      	ldrb	r3, [r7, #7]
 800ae12:	4a0b      	ldr	r2, [pc, #44]	; (800ae40 <disk_initialize+0x48>)
 800ae14:	2101      	movs	r1, #1
 800ae16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ae18:	79fb      	ldrb	r3, [r7, #7]
 800ae1a:	4a09      	ldr	r2, [pc, #36]	; (800ae40 <disk_initialize+0x48>)
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4413      	add	r3, r2
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	79fa      	ldrb	r2, [r7, #7]
 800ae26:	4906      	ldr	r1, [pc, #24]	; (800ae40 <disk_initialize+0x48>)
 800ae28:	440a      	add	r2, r1
 800ae2a:	7a12      	ldrb	r2, [r2, #8]
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	4798      	blx	r3
 800ae30:	4603      	mov	r3, r0
 800ae32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	200049d4 	.word	0x200049d4

0800ae44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ae44:	b590      	push	{r4, r7, lr}
 800ae46:	b087      	sub	sp, #28
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60b9      	str	r1, [r7, #8]
 800ae4c:	607a      	str	r2, [r7, #4]
 800ae4e:	603b      	str	r3, [r7, #0]
 800ae50:	4603      	mov	r3, r0
 800ae52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
 800ae56:	4a0a      	ldr	r2, [pc, #40]	; (800ae80 <disk_read+0x3c>)
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	689c      	ldr	r4, [r3, #8]
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	4a07      	ldr	r2, [pc, #28]	; (800ae80 <disk_read+0x3c>)
 800ae64:	4413      	add	r3, r2
 800ae66:	7a18      	ldrb	r0, [r3, #8]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	68b9      	ldr	r1, [r7, #8]
 800ae6e:	47a0      	blx	r4
 800ae70:	4603      	mov	r3, r0
 800ae72:	75fb      	strb	r3, [r7, #23]
  return res;
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	371c      	adds	r7, #28
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd90      	pop	{r4, r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	200049d4 	.word	0x200049d4

0800ae84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ae84:	b590      	push	{r4, r7, lr}
 800ae86:	b087      	sub	sp, #28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60b9      	str	r1, [r7, #8]
 800ae8c:	607a      	str	r2, [r7, #4]
 800ae8e:	603b      	str	r3, [r7, #0]
 800ae90:	4603      	mov	r3, r0
 800ae92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ae94:	7bfb      	ldrb	r3, [r7, #15]
 800ae96:	4a0a      	ldr	r2, [pc, #40]	; (800aec0 <disk_write+0x3c>)
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4413      	add	r3, r2
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	68dc      	ldr	r4, [r3, #12]
 800aea0:	7bfb      	ldrb	r3, [r7, #15]
 800aea2:	4a07      	ldr	r2, [pc, #28]	; (800aec0 <disk_write+0x3c>)
 800aea4:	4413      	add	r3, r2
 800aea6:	7a18      	ldrb	r0, [r3, #8]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	68b9      	ldr	r1, [r7, #8]
 800aeae:	47a0      	blx	r4
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	75fb      	strb	r3, [r7, #23]
  return res;
 800aeb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	371c      	adds	r7, #28
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd90      	pop	{r4, r7, pc}
 800aebe:	bf00      	nop
 800aec0:	200049d4 	.word	0x200049d4

0800aec4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	603a      	str	r2, [r7, #0]
 800aece:	71fb      	strb	r3, [r7, #7]
 800aed0:	460b      	mov	r3, r1
 800aed2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800aed4:	79fb      	ldrb	r3, [r7, #7]
 800aed6:	4a09      	ldr	r2, [pc, #36]	; (800aefc <disk_ioctl+0x38>)
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	79fa      	ldrb	r2, [r7, #7]
 800aee2:	4906      	ldr	r1, [pc, #24]	; (800aefc <disk_ioctl+0x38>)
 800aee4:	440a      	add	r2, r1
 800aee6:	7a10      	ldrb	r0, [r2, #8]
 800aee8:	79b9      	ldrb	r1, [r7, #6]
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	4798      	blx	r3
 800aeee:	4603      	mov	r3, r0
 800aef0:	73fb      	strb	r3, [r7, #15]
  return res;
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	200049d4 	.word	0x200049d4

0800af00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3301      	adds	r3, #1
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800af10:	89fb      	ldrh	r3, [r7, #14]
 800af12:	021b      	lsls	r3, r3, #8
 800af14:	b21a      	sxth	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	b21b      	sxth	r3, r3
 800af1c:	4313      	orrs	r3, r2
 800af1e:	b21b      	sxth	r3, r3
 800af20:	81fb      	strh	r3, [r7, #14]
	return rv;
 800af22:	89fb      	ldrh	r3, [r7, #14]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	3303      	adds	r3, #3
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	021b      	lsls	r3, r3, #8
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	3202      	adds	r2, #2
 800af48:	7812      	ldrb	r2, [r2, #0]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	021b      	lsls	r3, r3, #8
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	3201      	adds	r2, #1
 800af56:	7812      	ldrb	r2, [r2, #0]
 800af58:	4313      	orrs	r3, r2
 800af5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	021b      	lsls	r3, r3, #8
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	7812      	ldrb	r2, [r2, #0]
 800af64:	4313      	orrs	r3, r2
 800af66:	60fb      	str	r3, [r7, #12]
	return rv;
 800af68:	68fb      	ldr	r3, [r7, #12]
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800af76:	b480      	push	{r7}
 800af78:	b083      	sub	sp, #12
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	460b      	mov	r3, r1
 800af80:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	1c5a      	adds	r2, r3, #1
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	887a      	ldrh	r2, [r7, #2]
 800af8a:	b2d2      	uxtb	r2, r2
 800af8c:	701a      	strb	r2, [r3, #0]
 800af8e:	887b      	ldrh	r3, [r7, #2]
 800af90:	0a1b      	lsrs	r3, r3, #8
 800af92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	607a      	str	r2, [r7, #4]
 800af9a:	887a      	ldrh	r2, [r7, #2]
 800af9c:	b2d2      	uxtb	r2, r2
 800af9e:	701a      	strb	r2, [r3, #0]
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	1c5a      	adds	r2, r3, #1
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	b2d2      	uxtb	r2, r2
 800afc0:	701a      	strb	r2, [r3, #0]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	0a1b      	lsrs	r3, r3, #8
 800afc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	1c5a      	adds	r2, r3, #1
 800afcc:	607a      	str	r2, [r7, #4]
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	b2d2      	uxtb	r2, r2
 800afd2:	701a      	strb	r2, [r3, #0]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	0a1b      	lsrs	r3, r3, #8
 800afd8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	1c5a      	adds	r2, r3, #1
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	683a      	ldr	r2, [r7, #0]
 800afe2:	b2d2      	uxtb	r2, r2
 800afe4:	701a      	strb	r2, [r3, #0]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	0a1b      	lsrs	r3, r3, #8
 800afea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	607a      	str	r2, [r7, #4]
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	b2d2      	uxtb	r2, r2
 800aff6:	701a      	strb	r2, [r3, #0]
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b004:	b480      	push	{r7}
 800b006:	b087      	sub	sp, #28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00d      	beq.n	800b03a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	1c53      	adds	r3, r2, #1
 800b022:	613b      	str	r3, [r7, #16]
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	1c59      	adds	r1, r3, #1
 800b028:	6179      	str	r1, [r7, #20]
 800b02a:	7812      	ldrb	r2, [r2, #0]
 800b02c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	3b01      	subs	r3, #1
 800b032:	607b      	str	r3, [r7, #4]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1f1      	bne.n	800b01e <mem_cpy+0x1a>
	}
}
 800b03a:	bf00      	nop
 800b03c:	371c      	adds	r7, #28
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b046:	b480      	push	{r7}
 800b048:	b087      	sub	sp, #28
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	60f8      	str	r0, [r7, #12]
 800b04e:	60b9      	str	r1, [r7, #8]
 800b050:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	1c5a      	adds	r2, r3, #1
 800b05a:	617a      	str	r2, [r7, #20]
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	b2d2      	uxtb	r2, r2
 800b060:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3b01      	subs	r3, #1
 800b066:	607b      	str	r3, [r7, #4]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1f3      	bne.n	800b056 <mem_set+0x10>
}
 800b06e:	bf00      	nop
 800b070:	bf00      	nop
 800b072:	371c      	adds	r7, #28
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b07c:	b480      	push	{r7}
 800b07e:	b089      	sub	sp, #36	; 0x24
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	61fb      	str	r3, [r7, #28]
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b090:	2300      	movs	r3, #0
 800b092:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	1c5a      	adds	r2, r3, #1
 800b098:	61fa      	str	r2, [r7, #28]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	4619      	mov	r1, r3
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	61ba      	str	r2, [r7, #24]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	1acb      	subs	r3, r1, r3
 800b0a8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	607b      	str	r3, [r7, #4]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d002      	beq.n	800b0bc <mem_cmp+0x40>
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d0eb      	beq.n	800b094 <mem_cmp+0x18>

	return r;
 800b0bc:	697b      	ldr	r3, [r7, #20]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3724      	adds	r7, #36	; 0x24
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b0ca:	b480      	push	{r7}
 800b0cc:	b083      	sub	sp, #12
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b0d4:	e002      	b.n	800b0dc <chk_chr+0x12>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	607b      	str	r3, [r7, #4]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d005      	beq.n	800b0f0 <chk_chr+0x26>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d1f2      	bne.n	800b0d6 <chk_chr+0xc>
	return *str;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d009      	beq.n	800b122 <lock_fs+0x22>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	4618      	mov	r0, r3
 800b114:	f002 fb26 	bl	800d764 <ff_req_grant>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <lock_fs+0x22>
 800b11e:	2301      	movs	r3, #1
 800b120:	e000      	b.n	800b124 <lock_fs+0x24>
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00d      	beq.n	800b15a <unlock_fs+0x2e>
 800b13e:	78fb      	ldrb	r3, [r7, #3]
 800b140:	2b0c      	cmp	r3, #12
 800b142:	d00a      	beq.n	800b15a <unlock_fs+0x2e>
 800b144:	78fb      	ldrb	r3, [r7, #3]
 800b146:	2b0b      	cmp	r3, #11
 800b148:	d007      	beq.n	800b15a <unlock_fs+0x2e>
 800b14a:	78fb      	ldrb	r3, [r7, #3]
 800b14c:	2b0f      	cmp	r3, #15
 800b14e:	d004      	beq.n	800b15a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	4618      	mov	r0, r3
 800b156:	f002 fb1a 	bl	800d78e <ff_rel_grant>
	}
}
 800b15a:	bf00      	nop
 800b15c:	3708      	adds	r7, #8
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b16e:	2300      	movs	r3, #0
 800b170:	60bb      	str	r3, [r7, #8]
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	60fb      	str	r3, [r7, #12]
 800b176:	e029      	b.n	800b1cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b178:	4a27      	ldr	r2, [pc, #156]	; (800b218 <chk_lock+0xb4>)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	011b      	lsls	r3, r3, #4
 800b17e:	4413      	add	r3, r2
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d01d      	beq.n	800b1c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b186:	4a24      	ldr	r2, [pc, #144]	; (800b218 <chk_lock+0xb4>)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	011b      	lsls	r3, r3, #4
 800b18c:	4413      	add	r3, r2
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	429a      	cmp	r2, r3
 800b196:	d116      	bne.n	800b1c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b198:	4a1f      	ldr	r2, [pc, #124]	; (800b218 <chk_lock+0xb4>)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	011b      	lsls	r3, r3, #4
 800b19e:	4413      	add	r3, r2
 800b1a0:	3304      	adds	r3, #4
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d10c      	bne.n	800b1c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b1ac:	4a1a      	ldr	r2, [pc, #104]	; (800b218 <chk_lock+0xb4>)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	011b      	lsls	r3, r3, #4
 800b1b2:	4413      	add	r3, r2
 800b1b4:	3308      	adds	r3, #8
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d102      	bne.n	800b1c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b1c0:	e007      	b.n	800b1d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	60fb      	str	r3, [r7, #12]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d9d2      	bls.n	800b178 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d109      	bne.n	800b1ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d102      	bne.n	800b1e4 <chk_lock+0x80>
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d101      	bne.n	800b1e8 <chk_lock+0x84>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e010      	b.n	800b20a <chk_lock+0xa6>
 800b1e8:	2312      	movs	r3, #18
 800b1ea:	e00e      	b.n	800b20a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d108      	bne.n	800b204 <chk_lock+0xa0>
 800b1f2:	4a09      	ldr	r2, [pc, #36]	; (800b218 <chk_lock+0xb4>)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	011b      	lsls	r3, r3, #4
 800b1f8:	4413      	add	r3, r2
 800b1fa:	330c      	adds	r3, #12
 800b1fc:	881b      	ldrh	r3, [r3, #0]
 800b1fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b202:	d101      	bne.n	800b208 <chk_lock+0xa4>
 800b204:	2310      	movs	r3, #16
 800b206:	e000      	b.n	800b20a <chk_lock+0xa6>
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	200049b4 	.word	0x200049b4

0800b21c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b222:	2300      	movs	r3, #0
 800b224:	607b      	str	r3, [r7, #4]
 800b226:	e002      	b.n	800b22e <enq_lock+0x12>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	3301      	adds	r3, #1
 800b22c:	607b      	str	r3, [r7, #4]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d806      	bhi.n	800b242 <enq_lock+0x26>
 800b234:	4a09      	ldr	r2, [pc, #36]	; (800b25c <enq_lock+0x40>)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	011b      	lsls	r3, r3, #4
 800b23a:	4413      	add	r3, r2
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1f2      	bne.n	800b228 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b02      	cmp	r3, #2
 800b246:	bf14      	ite	ne
 800b248:	2301      	movne	r3, #1
 800b24a:	2300      	moveq	r3, #0
 800b24c:	b2db      	uxtb	r3, r3
}
 800b24e:	4618      	mov	r0, r3
 800b250:	370c      	adds	r7, #12
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	200049b4 	.word	0x200049b4

0800b260 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b26a:	2300      	movs	r3, #0
 800b26c:	60fb      	str	r3, [r7, #12]
 800b26e:	e01f      	b.n	800b2b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b270:	4a41      	ldr	r2, [pc, #260]	; (800b378 <inc_lock+0x118>)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	011b      	lsls	r3, r3, #4
 800b276:	4413      	add	r3, r2
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d113      	bne.n	800b2aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b282:	4a3d      	ldr	r2, [pc, #244]	; (800b378 <inc_lock+0x118>)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	011b      	lsls	r3, r3, #4
 800b288:	4413      	add	r3, r2
 800b28a:	3304      	adds	r3, #4
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b292:	429a      	cmp	r2, r3
 800b294:	d109      	bne.n	800b2aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b296:	4a38      	ldr	r2, [pc, #224]	; (800b378 <inc_lock+0x118>)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	011b      	lsls	r3, r3, #4
 800b29c:	4413      	add	r3, r2
 800b29e:	3308      	adds	r3, #8
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d006      	beq.n	800b2b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d9dc      	bls.n	800b270 <inc_lock+0x10>
 800b2b6:	e000      	b.n	800b2ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b2b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d132      	bne.n	800b326 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	e002      	b.n	800b2cc <inc_lock+0x6c>
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	60fb      	str	r3, [r7, #12]
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d806      	bhi.n	800b2e0 <inc_lock+0x80>
 800b2d2:	4a29      	ldr	r2, [pc, #164]	; (800b378 <inc_lock+0x118>)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	011b      	lsls	r3, r3, #4
 800b2d8:	4413      	add	r3, r2
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1f2      	bne.n	800b2c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d101      	bne.n	800b2ea <inc_lock+0x8a>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	e040      	b.n	800b36c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	4922      	ldr	r1, [pc, #136]	; (800b378 <inc_lock+0x118>)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	011b      	lsls	r3, r3, #4
 800b2f4:	440b      	add	r3, r1
 800b2f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	689a      	ldr	r2, [r3, #8]
 800b2fc:	491e      	ldr	r1, [pc, #120]	; (800b378 <inc_lock+0x118>)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	011b      	lsls	r3, r3, #4
 800b302:	440b      	add	r3, r1
 800b304:	3304      	adds	r3, #4
 800b306:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	695a      	ldr	r2, [r3, #20]
 800b30c:	491a      	ldr	r1, [pc, #104]	; (800b378 <inc_lock+0x118>)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	011b      	lsls	r3, r3, #4
 800b312:	440b      	add	r3, r1
 800b314:	3308      	adds	r3, #8
 800b316:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b318:	4a17      	ldr	r2, [pc, #92]	; (800b378 <inc_lock+0x118>)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	011b      	lsls	r3, r3, #4
 800b31e:	4413      	add	r3, r2
 800b320:	330c      	adds	r3, #12
 800b322:	2200      	movs	r2, #0
 800b324:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d009      	beq.n	800b340 <inc_lock+0xe0>
 800b32c:	4a12      	ldr	r2, [pc, #72]	; (800b378 <inc_lock+0x118>)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	011b      	lsls	r3, r3, #4
 800b332:	4413      	add	r3, r2
 800b334:	330c      	adds	r3, #12
 800b336:	881b      	ldrh	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <inc_lock+0xe0>
 800b33c:	2300      	movs	r3, #0
 800b33e:	e015      	b.n	800b36c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d108      	bne.n	800b358 <inc_lock+0xf8>
 800b346:	4a0c      	ldr	r2, [pc, #48]	; (800b378 <inc_lock+0x118>)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	011b      	lsls	r3, r3, #4
 800b34c:	4413      	add	r3, r2
 800b34e:	330c      	adds	r3, #12
 800b350:	881b      	ldrh	r3, [r3, #0]
 800b352:	3301      	adds	r3, #1
 800b354:	b29a      	uxth	r2, r3
 800b356:	e001      	b.n	800b35c <inc_lock+0xfc>
 800b358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b35c:	4906      	ldr	r1, [pc, #24]	; (800b378 <inc_lock+0x118>)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	011b      	lsls	r3, r3, #4
 800b362:	440b      	add	r3, r1
 800b364:	330c      	adds	r3, #12
 800b366:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	3301      	adds	r3, #1
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	200049b4 	.word	0x200049b4

0800b37c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	3b01      	subs	r3, #1
 800b388:	607b      	str	r3, [r7, #4]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d825      	bhi.n	800b3dc <dec_lock+0x60>
		n = Files[i].ctr;
 800b390:	4a17      	ldr	r2, [pc, #92]	; (800b3f0 <dec_lock+0x74>)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	011b      	lsls	r3, r3, #4
 800b396:	4413      	add	r3, r2
 800b398:	330c      	adds	r3, #12
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b39e:	89fb      	ldrh	r3, [r7, #14]
 800b3a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a4:	d101      	bne.n	800b3aa <dec_lock+0x2e>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b3aa:	89fb      	ldrh	r3, [r7, #14]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d002      	beq.n	800b3b6 <dec_lock+0x3a>
 800b3b0:	89fb      	ldrh	r3, [r7, #14]
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b3b6:	4a0e      	ldr	r2, [pc, #56]	; (800b3f0 <dec_lock+0x74>)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	011b      	lsls	r3, r3, #4
 800b3bc:	4413      	add	r3, r2
 800b3be:	330c      	adds	r3, #12
 800b3c0:	89fa      	ldrh	r2, [r7, #14]
 800b3c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b3c4:	89fb      	ldrh	r3, [r7, #14]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d105      	bne.n	800b3d6 <dec_lock+0x5a>
 800b3ca:	4a09      	ldr	r2, [pc, #36]	; (800b3f0 <dec_lock+0x74>)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	011b      	lsls	r3, r3, #4
 800b3d0:	4413      	add	r3, r2
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	737b      	strb	r3, [r7, #13]
 800b3da:	e001      	b.n	800b3e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b3dc:	2302      	movs	r3, #2
 800b3de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b3e0:	7b7b      	ldrb	r3, [r7, #13]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	200049b4 	.word	0x200049b4

0800b3f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	60fb      	str	r3, [r7, #12]
 800b400:	e010      	b.n	800b424 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b402:	4a0d      	ldr	r2, [pc, #52]	; (800b438 <clear_lock+0x44>)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	011b      	lsls	r3, r3, #4
 800b408:	4413      	add	r3, r2
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d105      	bne.n	800b41e <clear_lock+0x2a>
 800b412:	4a09      	ldr	r2, [pc, #36]	; (800b438 <clear_lock+0x44>)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	011b      	lsls	r3, r3, #4
 800b418:	4413      	add	r3, r2
 800b41a:	2200      	movs	r2, #0
 800b41c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	3301      	adds	r3, #1
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d9eb      	bls.n	800b402 <clear_lock+0xe>
	}
}
 800b42a:	bf00      	nop
 800b42c:	bf00      	nop
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	200049b4 	.word	0x200049b4

0800b43c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	78db      	ldrb	r3, [r3, #3]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d034      	beq.n	800b4ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b454:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	7858      	ldrb	r0, [r3, #1]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b460:	2301      	movs	r3, #1
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	f7ff fd0e 	bl	800ae84 <disk_write>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d002      	beq.n	800b474 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b46e:	2301      	movs	r3, #1
 800b470:	73fb      	strb	r3, [r7, #15]
 800b472:	e022      	b.n	800b4ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	1ad2      	subs	r2, r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	429a      	cmp	r2, r3
 800b488:	d217      	bcs.n	800b4ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	789b      	ldrb	r3, [r3, #2]
 800b48e:	613b      	str	r3, [r7, #16]
 800b490:	e010      	b.n	800b4b4 <sync_window+0x78>
					wsect += fs->fsize;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	4413      	add	r3, r2
 800b49a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	7858      	ldrb	r0, [r3, #1]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	697a      	ldr	r2, [r7, #20]
 800b4aa:	f7ff fceb 	bl	800ae84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	613b      	str	r3, [r7, #16]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d8eb      	bhi.n	800b492 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d01b      	beq.n	800b514 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f7ff ffad 	bl	800b43c <sync_window>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d113      	bne.n	800b514 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	7858      	ldrb	r0, [r3, #1]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	683a      	ldr	r2, [r7, #0]
 800b4fa:	f7ff fca3 	bl	800ae44 <disk_read>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d004      	beq.n	800b50e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b508:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b50a:	2301      	movs	r3, #1
 800b50c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	683a      	ldr	r2, [r7, #0]
 800b512:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b514:	7bfb      	ldrb	r3, [r7, #15]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
	...

0800b520 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7ff ff87 	bl	800b43c <sync_window>
 800b52e:	4603      	mov	r3, r0
 800b530:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b532:	7bfb      	ldrb	r3, [r7, #15]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d159      	bne.n	800b5ec <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	2b03      	cmp	r3, #3
 800b53e:	d149      	bne.n	800b5d4 <sync_fs+0xb4>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	791b      	ldrb	r3, [r3, #4]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d145      	bne.n	800b5d4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	899b      	ldrh	r3, [r3, #12]
 800b552:	461a      	mov	r2, r3
 800b554:	2100      	movs	r1, #0
 800b556:	f7ff fd76 	bl	800b046 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	3338      	adds	r3, #56	; 0x38
 800b55e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b562:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b566:	4618      	mov	r0, r3
 800b568:	f7ff fd05 	bl	800af76 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	3338      	adds	r3, #56	; 0x38
 800b570:	4921      	ldr	r1, [pc, #132]	; (800b5f8 <sync_fs+0xd8>)
 800b572:	4618      	mov	r0, r3
 800b574:	f7ff fd1a 	bl	800afac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3338      	adds	r3, #56	; 0x38
 800b57c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b580:	491e      	ldr	r1, [pc, #120]	; (800b5fc <sync_fs+0xdc>)
 800b582:	4618      	mov	r0, r3
 800b584:	f7ff fd12 	bl	800afac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	3338      	adds	r3, #56	; 0x38
 800b58c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	4619      	mov	r1, r3
 800b596:	4610      	mov	r0, r2
 800b598:	f7ff fd08 	bl	800afac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3338      	adds	r3, #56	; 0x38
 800b5a0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	695b      	ldr	r3, [r3, #20]
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	f7ff fcfe 	bl	800afac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b4:	1c5a      	adds	r2, r3, #1
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	7858      	ldrb	r0, [r3, #1]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	f7ff fc5b 	bl	800ae84 <disk_write>
			fs->fsi_flag = 0;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	785b      	ldrb	r3, [r3, #1]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	2100      	movs	r1, #0
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7ff fc71 	bl	800aec4 <disk_ioctl>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <sync_fs+0xcc>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	41615252 	.word	0x41615252
 800b5fc:	61417272 	.word	0x61417272

0800b600 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	3b02      	subs	r3, #2
 800b60e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	69db      	ldr	r3, [r3, #28]
 800b614:	3b02      	subs	r3, #2
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d301      	bcc.n	800b620 <clust2sect+0x20>
 800b61c:	2300      	movs	r3, #0
 800b61e:	e008      	b.n	800b632 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	895b      	ldrh	r3, [r3, #10]
 800b624:	461a      	mov	r2, r3
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	fb03 f202 	mul.w	r2, r3, r2
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b630:	4413      	add	r3, r2
}
 800b632:	4618      	mov	r0, r3
 800b634:	370c      	adds	r7, #12
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b086      	sub	sp, #24
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
 800b646:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2b01      	cmp	r3, #1
 800b652:	d904      	bls.n	800b65e <get_fat+0x20>
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	69db      	ldr	r3, [r3, #28]
 800b658:	683a      	ldr	r2, [r7, #0]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d302      	bcc.n	800b664 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b65e:	2301      	movs	r3, #1
 800b660:	617b      	str	r3, [r7, #20]
 800b662:	e0bb      	b.n	800b7dc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b668:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b03      	cmp	r3, #3
 800b670:	f000 8083 	beq.w	800b77a <get_fat+0x13c>
 800b674:	2b03      	cmp	r3, #3
 800b676:	f300 80a7 	bgt.w	800b7c8 <get_fat+0x18a>
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d002      	beq.n	800b684 <get_fat+0x46>
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d056      	beq.n	800b730 <get_fat+0xf2>
 800b682:	e0a1      	b.n	800b7c8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	60fb      	str	r3, [r7, #12]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	085b      	lsrs	r3, r3, #1
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	4413      	add	r3, r2
 800b690:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	899b      	ldrh	r3, [r3, #12]
 800b69a:	4619      	mov	r1, r3
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6a2:	4413      	add	r3, r2
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6938      	ldr	r0, [r7, #16]
 800b6a8:	f7ff ff0c 	bl	800b4c4 <move_window>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f040 808d 	bne.w	800b7ce <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	1c5a      	adds	r2, r3, #1
 800b6b8:	60fa      	str	r2, [r7, #12]
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	8992      	ldrh	r2, [r2, #12]
 800b6be:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6c2:	fb01 f202 	mul.w	r2, r1, r2
 800b6c6:	1a9b      	subs	r3, r3, r2
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b6d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	899b      	ldrh	r3, [r3, #12]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6e2:	4413      	add	r3, r2
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6938      	ldr	r0, [r7, #16]
 800b6e8:	f7ff feec 	bl	800b4c4 <move_window>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d16f      	bne.n	800b7d2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	899b      	ldrh	r3, [r3, #12]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6fe:	fb01 f202 	mul.w	r2, r1, r2
 800b702:	1a9b      	subs	r3, r3, r2
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	4413      	add	r3, r2
 800b708:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b70c:	021b      	lsls	r3, r3, #8
 800b70e:	461a      	mov	r2, r3
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	4313      	orrs	r3, r2
 800b714:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	f003 0301 	and.w	r3, r3, #1
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d002      	beq.n	800b726 <get_fat+0xe8>
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	091b      	lsrs	r3, r3, #4
 800b724:	e002      	b.n	800b72c <get_fat+0xee>
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b72c:	617b      	str	r3, [r7, #20]
			break;
 800b72e:	e055      	b.n	800b7dc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	899b      	ldrh	r3, [r3, #12]
 800b738:	085b      	lsrs	r3, r3, #1
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	4619      	mov	r1, r3
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	fbb3 f3f1 	udiv	r3, r3, r1
 800b744:	4413      	add	r3, r2
 800b746:	4619      	mov	r1, r3
 800b748:	6938      	ldr	r0, [r7, #16]
 800b74a:	f7ff febb 	bl	800b4c4 <move_window>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d140      	bne.n	800b7d6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	005b      	lsls	r3, r3, #1
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	8992      	ldrh	r2, [r2, #12]
 800b762:	fbb3 f0f2 	udiv	r0, r3, r2
 800b766:	fb00 f202 	mul.w	r2, r0, r2
 800b76a:	1a9b      	subs	r3, r3, r2
 800b76c:	440b      	add	r3, r1
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff fbc6 	bl	800af00 <ld_word>
 800b774:	4603      	mov	r3, r0
 800b776:	617b      	str	r3, [r7, #20]
			break;
 800b778:	e030      	b.n	800b7dc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	899b      	ldrh	r3, [r3, #12]
 800b782:	089b      	lsrs	r3, r3, #2
 800b784:	b29b      	uxth	r3, r3
 800b786:	4619      	mov	r1, r3
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b78e:	4413      	add	r3, r2
 800b790:	4619      	mov	r1, r3
 800b792:	6938      	ldr	r0, [r7, #16]
 800b794:	f7ff fe96 	bl	800b4c4 <move_window>
 800b798:	4603      	mov	r3, r0
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d11d      	bne.n	800b7da <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	8992      	ldrh	r2, [r2, #12]
 800b7ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800b7b0:	fb00 f202 	mul.w	r2, r0, r2
 800b7b4:	1a9b      	subs	r3, r3, r2
 800b7b6:	440b      	add	r3, r1
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7ff fbb9 	bl	800af30 <ld_dword>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b7c4:	617b      	str	r3, [r7, #20]
			break;
 800b7c6:	e009      	b.n	800b7dc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	e006      	b.n	800b7dc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7ce:	bf00      	nop
 800b7d0:	e004      	b.n	800b7dc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7d2:	bf00      	nop
 800b7d4:	e002      	b.n	800b7dc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b7d6:	bf00      	nop
 800b7d8:	e000      	b.n	800b7dc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b7da:	bf00      	nop
		}
	}

	return val;
 800b7dc:	697b      	ldr	r3, [r7, #20]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3718      	adds	r7, #24
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b7e6:	b590      	push	{r4, r7, lr}
 800b7e8:	b089      	sub	sp, #36	; 0x24
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	60f8      	str	r0, [r7, #12]
 800b7ee:	60b9      	str	r1, [r7, #8]
 800b7f0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b7f2:	2302      	movs	r3, #2
 800b7f4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	f240 8109 	bls.w	800ba10 <put_fat+0x22a>
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	69db      	ldr	r3, [r3, #28]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	429a      	cmp	r2, r3
 800b806:	f080 8103 	bcs.w	800ba10 <put_fat+0x22a>
		switch (fs->fs_type) {
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	2b03      	cmp	r3, #3
 800b810:	f000 80b6 	beq.w	800b980 <put_fat+0x19a>
 800b814:	2b03      	cmp	r3, #3
 800b816:	f300 80fb 	bgt.w	800ba10 <put_fat+0x22a>
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d003      	beq.n	800b826 <put_fat+0x40>
 800b81e:	2b02      	cmp	r3, #2
 800b820:	f000 8083 	beq.w	800b92a <put_fat+0x144>
 800b824:	e0f4      	b.n	800ba10 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	61bb      	str	r3, [r7, #24]
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	085b      	lsrs	r3, r3, #1
 800b82e:	69ba      	ldr	r2, [r7, #24]
 800b830:	4413      	add	r3, r2
 800b832:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	899b      	ldrh	r3, [r3, #12]
 800b83c:	4619      	mov	r1, r3
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	fbb3 f3f1 	udiv	r3, r3, r1
 800b844:	4413      	add	r3, r2
 800b846:	4619      	mov	r1, r3
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f7ff fe3b 	bl	800b4c4 <move_window>
 800b84e:	4603      	mov	r3, r0
 800b850:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b852:	7ffb      	ldrb	r3, [r7, #31]
 800b854:	2b00      	cmp	r3, #0
 800b856:	f040 80d4 	bne.w	800ba02 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	1c5a      	adds	r2, r3, #1
 800b864:	61ba      	str	r2, [r7, #24]
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	8992      	ldrh	r2, [r2, #12]
 800b86a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b86e:	fb00 f202 	mul.w	r2, r0, r2
 800b872:	1a9b      	subs	r3, r3, r2
 800b874:	440b      	add	r3, r1
 800b876:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	f003 0301 	and.w	r3, r3, #1
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00d      	beq.n	800b89e <put_fat+0xb8>
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	b25b      	sxtb	r3, r3
 800b888:	f003 030f 	and.w	r3, r3, #15
 800b88c:	b25a      	sxtb	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	b2db      	uxtb	r3, r3
 800b892:	011b      	lsls	r3, r3, #4
 800b894:	b25b      	sxtb	r3, r3
 800b896:	4313      	orrs	r3, r2
 800b898:	b25b      	sxtb	r3, r3
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	e001      	b.n	800b8a2 <put_fat+0xbc>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	899b      	ldrh	r3, [r3, #12]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8bc:	4413      	add	r3, r2
 800b8be:	4619      	mov	r1, r3
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f7ff fdff 	bl	800b4c4 <move_window>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b8ca:	7ffb      	ldrb	r3, [r7, #31]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f040 809a 	bne.w	800ba06 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	899b      	ldrh	r3, [r3, #12]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b8e4:	fb00 f202 	mul.w	r2, r0, r2
 800b8e8:	1a9b      	subs	r3, r3, r2
 800b8ea:	440b      	add	r3, r1
 800b8ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	f003 0301 	and.w	r3, r3, #1
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d003      	beq.n	800b900 <put_fat+0x11a>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	091b      	lsrs	r3, r3, #4
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	e00e      	b.n	800b91e <put_fat+0x138>
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	b25b      	sxtb	r3, r3
 800b906:	f023 030f 	bic.w	r3, r3, #15
 800b90a:	b25a      	sxtb	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	0a1b      	lsrs	r3, r3, #8
 800b910:	b25b      	sxtb	r3, r3
 800b912:	f003 030f 	and.w	r3, r3, #15
 800b916:	b25b      	sxtb	r3, r3
 800b918:	4313      	orrs	r3, r2
 800b91a:	b25b      	sxtb	r3, r3
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2201      	movs	r2, #1
 800b926:	70da      	strb	r2, [r3, #3]
			break;
 800b928:	e072      	b.n	800ba10 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	899b      	ldrh	r3, [r3, #12]
 800b932:	085b      	lsrs	r3, r3, #1
 800b934:	b29b      	uxth	r3, r3
 800b936:	4619      	mov	r1, r3
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b93e:	4413      	add	r3, r2
 800b940:	4619      	mov	r1, r3
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f7ff fdbe 	bl	800b4c4 <move_window>
 800b948:	4603      	mov	r3, r0
 800b94a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b94c:	7ffb      	ldrb	r3, [r7, #31]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d15b      	bne.n	800ba0a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	8992      	ldrh	r2, [r2, #12]
 800b960:	fbb3 f0f2 	udiv	r0, r3, r2
 800b964:	fb00 f202 	mul.w	r2, r0, r2
 800b968:	1a9b      	subs	r3, r3, r2
 800b96a:	440b      	add	r3, r1
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	b292      	uxth	r2, r2
 800b970:	4611      	mov	r1, r2
 800b972:	4618      	mov	r0, r3
 800b974:	f7ff faff 	bl	800af76 <st_word>
			fs->wflag = 1;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2201      	movs	r2, #1
 800b97c:	70da      	strb	r2, [r3, #3]
			break;
 800b97e:	e047      	b.n	800ba10 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	899b      	ldrh	r3, [r3, #12]
 800b988:	089b      	lsrs	r3, r3, #2
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	4619      	mov	r1, r3
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	fbb3 f3f1 	udiv	r3, r3, r1
 800b994:	4413      	add	r3, r2
 800b996:	4619      	mov	r1, r3
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f7ff fd93 	bl	800b4c4 <move_window>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9a2:	7ffb      	ldrb	r3, [r7, #31]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d132      	bne.n	800ba0e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	8992      	ldrh	r2, [r2, #12]
 800b9bc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9c0:	fb00 f202 	mul.w	r2, r0, r2
 800b9c4:	1a9b      	subs	r3, r3, r2
 800b9c6:	440b      	add	r3, r1
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7ff fab1 	bl	800af30 <ld_dword>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b9d4:	4323      	orrs	r3, r4
 800b9d6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	8992      	ldrh	r2, [r2, #12]
 800b9e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9ea:	fb00 f202 	mul.w	r2, r0, r2
 800b9ee:	1a9b      	subs	r3, r3, r2
 800b9f0:	440b      	add	r3, r1
 800b9f2:	6879      	ldr	r1, [r7, #4]
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff fad9 	bl	800afac <st_dword>
			fs->wflag = 1;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	70da      	strb	r2, [r3, #3]
			break;
 800ba00:	e006      	b.n	800ba10 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ba02:	bf00      	nop
 800ba04:	e004      	b.n	800ba10 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ba06:	bf00      	nop
 800ba08:	e002      	b.n	800ba10 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ba0a:	bf00      	nop
 800ba0c:	e000      	b.n	800ba10 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ba0e:	bf00      	nop
		}
	}
	return res;
 800ba10:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3724      	adds	r7, #36	; 0x24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd90      	pop	{r4, r7, pc}

0800ba1a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b088      	sub	sp, #32
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	60f8      	str	r0, [r7, #12]
 800ba22:	60b9      	str	r1, [r7, #8]
 800ba24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d904      	bls.n	800ba40 <remove_chain+0x26>
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	69db      	ldr	r3, [r3, #28]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d301      	bcc.n	800ba44 <remove_chain+0x2a>
 800ba40:	2302      	movs	r3, #2
 800ba42:	e04b      	b.n	800badc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00c      	beq.n	800ba64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ba4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	69b8      	ldr	r0, [r7, #24]
 800ba52:	f7ff fec8 	bl	800b7e6 <put_fat>
 800ba56:	4603      	mov	r3, r0
 800ba58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ba5a:	7ffb      	ldrb	r3, [r7, #31]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <remove_chain+0x4a>
 800ba60:	7ffb      	ldrb	r3, [r7, #31]
 800ba62:	e03b      	b.n	800badc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ba64:	68b9      	ldr	r1, [r7, #8]
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f7ff fde9 	bl	800b63e <get_fat>
 800ba6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d031      	beq.n	800bad8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d101      	bne.n	800ba7e <remove_chain+0x64>
 800ba7a:	2302      	movs	r3, #2
 800ba7c:	e02e      	b.n	800badc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba84:	d101      	bne.n	800ba8a <remove_chain+0x70>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e028      	b.n	800badc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	68b9      	ldr	r1, [r7, #8]
 800ba8e:	69b8      	ldr	r0, [r7, #24]
 800ba90:	f7ff fea9 	bl	800b7e6 <put_fat>
 800ba94:	4603      	mov	r3, r0
 800ba96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ba98:	7ffb      	ldrb	r3, [r7, #31]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d001      	beq.n	800baa2 <remove_chain+0x88>
 800ba9e:	7ffb      	ldrb	r3, [r7, #31]
 800baa0:	e01c      	b.n	800badc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	699a      	ldr	r2, [r3, #24]
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	69db      	ldr	r3, [r3, #28]
 800baaa:	3b02      	subs	r3, #2
 800baac:	429a      	cmp	r2, r3
 800baae:	d20b      	bcs.n	800bac8 <remove_chain+0xae>
			fs->free_clst++;
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	791b      	ldrb	r3, [r3, #4]
 800babe:	f043 0301 	orr.w	r3, r3, #1
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	69db      	ldr	r3, [r3, #28]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d3c6      	bcc.n	800ba64 <remove_chain+0x4a>
 800bad6:	e000      	b.n	800bada <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bad8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3720      	adds	r7, #32
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b088      	sub	sp, #32
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10d      	bne.n	800bb16 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	695b      	ldr	r3, [r3, #20]
 800bafe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d004      	beq.n	800bb10 <create_chain+0x2c>
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	69db      	ldr	r3, [r3, #28]
 800bb0a:	69ba      	ldr	r2, [r7, #24]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d31b      	bcc.n	800bb48 <create_chain+0x64>
 800bb10:	2301      	movs	r3, #1
 800bb12:	61bb      	str	r3, [r7, #24]
 800bb14:	e018      	b.n	800bb48 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bb16:	6839      	ldr	r1, [r7, #0]
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f7ff fd90 	bl	800b63e <get_fat>
 800bb1e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d801      	bhi.n	800bb2a <create_chain+0x46>
 800bb26:	2301      	movs	r3, #1
 800bb28:	e070      	b.n	800bc0c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb30:	d101      	bne.n	800bb36 <create_chain+0x52>
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	e06a      	b.n	800bc0c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	69db      	ldr	r3, [r3, #28]
 800bb3a:	68fa      	ldr	r2, [r7, #12]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d201      	bcs.n	800bb44 <create_chain+0x60>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	e063      	b.n	800bc0c <create_chain+0x128>
		scl = clst;
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	69db      	ldr	r3, [r3, #28]
 800bb56:	69fa      	ldr	r2, [r7, #28]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d307      	bcc.n	800bb6c <create_chain+0x88>
				ncl = 2;
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bb60:	69fa      	ldr	r2, [r7, #28]
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d901      	bls.n	800bb6c <create_chain+0x88>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	e04f      	b.n	800bc0c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bb6c:	69f9      	ldr	r1, [r7, #28]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f7ff fd65 	bl	800b63e <get_fat>
 800bb74:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00e      	beq.n	800bb9a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d003      	beq.n	800bb8a <create_chain+0xa6>
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb88:	d101      	bne.n	800bb8e <create_chain+0xaa>
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	e03e      	b.n	800bc0c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bb8e:	69fa      	ldr	r2, [r7, #28]
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d1da      	bne.n	800bb4c <create_chain+0x68>
 800bb96:	2300      	movs	r3, #0
 800bb98:	e038      	b.n	800bc0c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bb9a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bb9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bba0:	69f9      	ldr	r1, [r7, #28]
 800bba2:	6938      	ldr	r0, [r7, #16]
 800bba4:	f7ff fe1f 	bl	800b7e6 <put_fat>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bbac:	7dfb      	ldrb	r3, [r7, #23]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d109      	bne.n	800bbc6 <create_chain+0xe2>
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d006      	beq.n	800bbc6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bbb8:	69fa      	ldr	r2, [r7, #28]
 800bbba:	6839      	ldr	r1, [r7, #0]
 800bbbc:	6938      	ldr	r0, [r7, #16]
 800bbbe:	f7ff fe12 	bl	800b7e6 <put_fat>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bbc6:	7dfb      	ldrb	r3, [r7, #23]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d116      	bne.n	800bbfa <create_chain+0x116>
		fs->last_clst = ncl;
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	69fa      	ldr	r2, [r7, #28]
 800bbd0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	699a      	ldr	r2, [r3, #24]
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	69db      	ldr	r3, [r3, #28]
 800bbda:	3b02      	subs	r3, #2
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d804      	bhi.n	800bbea <create_chain+0x106>
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	1e5a      	subs	r2, r3, #1
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	791b      	ldrb	r3, [r3, #4]
 800bbee:	f043 0301 	orr.w	r3, r3, #1
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	711a      	strb	r2, [r3, #4]
 800bbf8:	e007      	b.n	800bc0a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bbfa:	7dfb      	ldrb	r3, [r7, #23]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d102      	bne.n	800bc06 <create_chain+0x122>
 800bc00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc04:	e000      	b.n	800bc08 <create_chain+0x124>
 800bc06:	2301      	movs	r3, #1
 800bc08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bc0a:	69fb      	ldr	r3, [r7, #28]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3720      	adds	r7, #32
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b087      	sub	sp, #28
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc28:	3304      	adds	r3, #4
 800bc2a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	899b      	ldrh	r3, [r3, #12]
 800bc30:	461a      	mov	r2, r3
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	8952      	ldrh	r2, [r2, #10]
 800bc3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	1d1a      	adds	r2, r3, #4
 800bc46:	613a      	str	r2, [r7, #16]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <clmt_clust+0x42>
 800bc52:	2300      	movs	r3, #0
 800bc54:	e010      	b.n	800bc78 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800bc56:	697a      	ldr	r2, [r7, #20]
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d307      	bcc.n	800bc6e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800bc5e:	697a      	ldr	r2, [r7, #20]
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	617b      	str	r3, [r7, #20]
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	3304      	adds	r3, #4
 800bc6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bc6c:	e7e9      	b.n	800bc42 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800bc6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	4413      	add	r3, r2
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	371c      	adds	r7, #28
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc9a:	d204      	bcs.n	800bca6 <dir_sdi+0x22>
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	f003 031f 	and.w	r3, r3, #31
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <dir_sdi+0x26>
		return FR_INT_ERR;
 800bca6:	2302      	movs	r3, #2
 800bca8:	e071      	b.n	800bd8e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d106      	bne.n	800bcca <dir_sdi+0x46>
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d902      	bls.n	800bcca <dir_sdi+0x46>
		clst = fs->dirbase;
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10c      	bne.n	800bcea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	095b      	lsrs	r3, r3, #5
 800bcd4:	693a      	ldr	r2, [r7, #16]
 800bcd6:	8912      	ldrh	r2, [r2, #8]
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d301      	bcc.n	800bce0 <dir_sdi+0x5c>
 800bcdc:	2302      	movs	r3, #2
 800bcde:	e056      	b.n	800bd8e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	61da      	str	r2, [r3, #28]
 800bce8:	e02d      	b.n	800bd46 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	895b      	ldrh	r3, [r3, #10]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	899b      	ldrh	r3, [r3, #12]
 800bcf4:	fb02 f303 	mul.w	r3, r2, r3
 800bcf8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bcfa:	e019      	b.n	800bd30 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6979      	ldr	r1, [r7, #20]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7ff fc9c 	bl	800b63e <get_fat>
 800bd06:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd0e:	d101      	bne.n	800bd14 <dir_sdi+0x90>
 800bd10:	2301      	movs	r3, #1
 800bd12:	e03c      	b.n	800bd8e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d904      	bls.n	800bd24 <dir_sdi+0xa0>
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	69db      	ldr	r3, [r3, #28]
 800bd1e:	697a      	ldr	r2, [r7, #20]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d301      	bcc.n	800bd28 <dir_sdi+0xa4>
 800bd24:	2302      	movs	r3, #2
 800bd26:	e032      	b.n	800bd8e <dir_sdi+0x10a>
			ofs -= csz;
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	1ad3      	subs	r3, r2, r3
 800bd2e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d2e1      	bcs.n	800bcfc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800bd38:	6979      	ldr	r1, [r7, #20]
 800bd3a:	6938      	ldr	r0, [r7, #16]
 800bd3c:	f7ff fc60 	bl	800b600 <clust2sect>
 800bd40:	4602      	mov	r2, r0
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	697a      	ldr	r2, [r7, #20]
 800bd4a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	69db      	ldr	r3, [r3, #28]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <dir_sdi+0xd4>
 800bd54:	2302      	movs	r3, #2
 800bd56:	e01a      	b.n	800bd8e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	69da      	ldr	r2, [r3, #28]
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	899b      	ldrh	r3, [r3, #12]
 800bd60:	4619      	mov	r1, r3
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd68:	441a      	add	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	899b      	ldrh	r3, [r3, #12]
 800bd78:	461a      	mov	r2, r3
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd80:	fb00 f202 	mul.w	r2, r0, r2
 800bd84:	1a9b      	subs	r3, r3, r2
 800bd86:	18ca      	adds	r2, r1, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b086      	sub	sp, #24
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	695b      	ldr	r3, [r3, #20]
 800bdaa:	3320      	adds	r3, #32
 800bdac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	69db      	ldr	r3, [r3, #28]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d003      	beq.n	800bdbe <dir_next+0x28>
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdbc:	d301      	bcc.n	800bdc2 <dir_next+0x2c>
 800bdbe:	2304      	movs	r3, #4
 800bdc0:	e0bb      	b.n	800bf3a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	899b      	ldrh	r3, [r3, #12]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdce:	fb01 f202 	mul.w	r2, r1, r2
 800bdd2:	1a9b      	subs	r3, r3, r2
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f040 809d 	bne.w	800bf14 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	1c5a      	adds	r2, r3, #1
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10b      	bne.n	800be04 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	095b      	lsrs	r3, r3, #5
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	8912      	ldrh	r2, [r2, #8]
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	f0c0 808d 	bcc.w	800bf14 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	61da      	str	r2, [r3, #28]
 800be00:	2304      	movs	r3, #4
 800be02:	e09a      	b.n	800bf3a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	899b      	ldrh	r3, [r3, #12]
 800be08:	461a      	mov	r2, r3
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	8952      	ldrh	r2, [r2, #10]
 800be14:	3a01      	subs	r2, #1
 800be16:	4013      	ands	r3, r2
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d17b      	bne.n	800bf14 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	4619      	mov	r1, r3
 800be24:	4610      	mov	r0, r2
 800be26:	f7ff fc0a 	bl	800b63e <get_fat>
 800be2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d801      	bhi.n	800be36 <dir_next+0xa0>
 800be32:	2302      	movs	r3, #2
 800be34:	e081      	b.n	800bf3a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be3c:	d101      	bne.n	800be42 <dir_next+0xac>
 800be3e:	2301      	movs	r3, #1
 800be40:	e07b      	b.n	800bf3a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	69db      	ldr	r3, [r3, #28]
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d359      	bcc.n	800bf00 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d104      	bne.n	800be5c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	61da      	str	r2, [r3, #28]
 800be58:	2304      	movs	r3, #4
 800be5a:	e06e      	b.n	800bf3a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	4619      	mov	r1, r3
 800be64:	4610      	mov	r0, r2
 800be66:	f7ff fe3d 	bl	800bae4 <create_chain>
 800be6a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d101      	bne.n	800be76 <dir_next+0xe0>
 800be72:	2307      	movs	r3, #7
 800be74:	e061      	b.n	800bf3a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d101      	bne.n	800be80 <dir_next+0xea>
 800be7c:	2302      	movs	r3, #2
 800be7e:	e05c      	b.n	800bf3a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be86:	d101      	bne.n	800be8c <dir_next+0xf6>
 800be88:	2301      	movs	r3, #1
 800be8a:	e056      	b.n	800bf3a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f7ff fad5 	bl	800b43c <sync_window>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d001      	beq.n	800be9c <dir_next+0x106>
 800be98:	2301      	movs	r3, #1
 800be9a:	e04e      	b.n	800bf3a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	899b      	ldrh	r3, [r3, #12]
 800bea6:	461a      	mov	r2, r3
 800bea8:	2100      	movs	r1, #0
 800beaa:	f7ff f8cc 	bl	800b046 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800beae:	2300      	movs	r3, #0
 800beb0:	613b      	str	r3, [r7, #16]
 800beb2:	6979      	ldr	r1, [r7, #20]
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f7ff fba3 	bl	800b600 <clust2sect>
 800beba:	4602      	mov	r2, r0
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	635a      	str	r2, [r3, #52]	; 0x34
 800bec0:	e012      	b.n	800bee8 <dir_next+0x152>
						fs->wflag = 1;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2201      	movs	r2, #1
 800bec6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f7ff fab7 	bl	800b43c <sync_window>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d001      	beq.n	800bed8 <dir_next+0x142>
 800bed4:	2301      	movs	r3, #1
 800bed6:	e030      	b.n	800bf3a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	3301      	adds	r3, #1
 800bedc:	613b      	str	r3, [r7, #16]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	635a      	str	r2, [r3, #52]	; 0x34
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	895b      	ldrh	r3, [r3, #10]
 800beec:	461a      	mov	r2, r3
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d3e6      	bcc.n	800bec2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	1ad2      	subs	r2, r2, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	697a      	ldr	r2, [r7, #20]
 800bf04:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bf06:	6979      	ldr	r1, [r7, #20]
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f7ff fb79 	bl	800b600 <clust2sect>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	68ba      	ldr	r2, [r7, #8]
 800bf18:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	899b      	ldrh	r3, [r3, #12]
 800bf24:	461a      	mov	r2, r3
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf2c:	fb00 f202 	mul.w	r2, r0, r2
 800bf30:	1a9b      	subs	r3, r3, r2
 800bf32:	18ca      	adds	r2, r1, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3718      	adds	r7, #24
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b086      	sub	sp, #24
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bf52:	2100      	movs	r1, #0
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7ff fe95 	bl	800bc84 <dir_sdi>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf5e:	7dfb      	ldrb	r3, [r7, #23]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d12b      	bne.n	800bfbc <dir_alloc+0x7a>
		n = 0;
 800bf64:	2300      	movs	r3, #0
 800bf66:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	69db      	ldr	r3, [r3, #28]
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f7ff faa8 	bl	800b4c4 <move_window>
 800bf74:	4603      	mov	r3, r0
 800bf76:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bf78:	7dfb      	ldrb	r3, [r7, #23]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d11d      	bne.n	800bfba <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a1b      	ldr	r3, [r3, #32]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	2be5      	cmp	r3, #229	; 0xe5
 800bf86:	d004      	beq.n	800bf92 <dir_alloc+0x50>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a1b      	ldr	r3, [r3, #32]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d107      	bne.n	800bfa2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	3301      	adds	r3, #1
 800bf96:	613b      	str	r3, [r7, #16]
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d102      	bne.n	800bfa6 <dir_alloc+0x64>
 800bfa0:	e00c      	b.n	800bfbc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bfa6:	2101      	movs	r1, #1
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7ff fef4 	bl	800bd96 <dir_next>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bfb2:	7dfb      	ldrb	r3, [r7, #23]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d0d7      	beq.n	800bf68 <dir_alloc+0x26>
 800bfb8:	e000      	b.n	800bfbc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bfba:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bfbc:	7dfb      	ldrb	r3, [r7, #23]
 800bfbe:	2b04      	cmp	r3, #4
 800bfc0:	d101      	bne.n	800bfc6 <dir_alloc+0x84>
 800bfc2:	2307      	movs	r3, #7
 800bfc4:	75fb      	strb	r3, [r7, #23]
	return res;
 800bfc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3718      	adds	r7, #24
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	331a      	adds	r3, #26
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe ff8e 	bl	800af00 <ld_word>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b03      	cmp	r3, #3
 800bfee:	d109      	bne.n	800c004 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	3314      	adds	r3, #20
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fe ff83 	bl	800af00 <ld_word>
 800bffa:	4603      	mov	r3, r0
 800bffc:	041b      	lsls	r3, r3, #16
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	4313      	orrs	r3, r2
 800c002:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c004:	68fb      	ldr	r3, [r7, #12]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b084      	sub	sp, #16
 800c012:	af00      	add	r7, sp, #0
 800c014:	60f8      	str	r0, [r7, #12]
 800c016:	60b9      	str	r1, [r7, #8]
 800c018:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	331a      	adds	r3, #26
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	b292      	uxth	r2, r2
 800c022:	4611      	mov	r1, r2
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe ffa6 	bl	800af76 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d109      	bne.n	800c046 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	f103 0214 	add.w	r2, r3, #20
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	0c1b      	lsrs	r3, r3, #16
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	4619      	mov	r1, r3
 800c040:	4610      	mov	r0, r2
 800c042:	f7fe ff98 	bl	800af76 <st_word>
	}
}
 800c046:	bf00      	nop
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b086      	sub	sp, #24
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c05c:	2100      	movs	r1, #0
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7ff fe10 	bl	800bc84 <dir_sdi>
 800c064:	4603      	mov	r3, r0
 800c066:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c068:	7dfb      	ldrb	r3, [r7, #23]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <dir_find+0x24>
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
 800c070:	e03e      	b.n	800c0f0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	69db      	ldr	r3, [r3, #28]
 800c076:	4619      	mov	r1, r3
 800c078:	6938      	ldr	r0, [r7, #16]
 800c07a:	f7ff fa23 	bl	800b4c4 <move_window>
 800c07e:	4603      	mov	r3, r0
 800c080:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c082:	7dfb      	ldrb	r3, [r7, #23]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d12f      	bne.n	800c0e8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c090:	7bfb      	ldrb	r3, [r7, #15]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d102      	bne.n	800c09c <dir_find+0x4e>
 800c096:	2304      	movs	r3, #4
 800c098:	75fb      	strb	r3, [r7, #23]
 800c09a:	e028      	b.n	800c0ee <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a1b      	ldr	r3, [r3, #32]
 800c0a0:	330b      	adds	r3, #11
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0a8:	b2da      	uxtb	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a1b      	ldr	r3, [r3, #32]
 800c0b2:	330b      	adds	r3, #11
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	f003 0308 	and.w	r3, r3, #8
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10a      	bne.n	800c0d4 <dir_find+0x86>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a18      	ldr	r0, [r3, #32]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	3324      	adds	r3, #36	; 0x24
 800c0c6:	220b      	movs	r2, #11
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	f7fe ffd7 	bl	800b07c <mem_cmp>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00b      	beq.n	800c0ec <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff fe5d 	bl	800bd96 <dir_next>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c0e0:	7dfb      	ldrb	r3, [r7, #23]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d0c5      	beq.n	800c072 <dir_find+0x24>
 800c0e6:	e002      	b.n	800c0ee <dir_find+0xa0>
		if (res != FR_OK) break;
 800c0e8:	bf00      	nop
 800c0ea:	e000      	b.n	800c0ee <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c0ec:	bf00      	nop

	return res;
 800c0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3718      	adds	r7, #24
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c106:	2101      	movs	r1, #1
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff ff1a 	bl	800bf42 <dir_alloc>
 800c10e:	4603      	mov	r3, r0
 800c110:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c112:	7bfb      	ldrb	r3, [r7, #15]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d11c      	bne.n	800c152 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	69db      	ldr	r3, [r3, #28]
 800c11c:	4619      	mov	r1, r3
 800c11e:	68b8      	ldr	r0, [r7, #8]
 800c120:	f7ff f9d0 	bl	800b4c4 <move_window>
 800c124:	4603      	mov	r3, r0
 800c126:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c128:	7bfb      	ldrb	r3, [r7, #15]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d111      	bne.n	800c152 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a1b      	ldr	r3, [r3, #32]
 800c132:	2220      	movs	r2, #32
 800c134:	2100      	movs	r1, #0
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe ff85 	bl	800b046 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6a18      	ldr	r0, [r3, #32]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	3324      	adds	r3, #36	; 0x24
 800c144:	220b      	movs	r2, #11
 800c146:	4619      	mov	r1, r3
 800c148:	f7fe ff5c 	bl	800b004 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	2201      	movs	r2, #1
 800c150:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c152:	7bfb      	ldrb	r3, [r7, #15]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	2200      	movs	r2, #0
 800c16a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	69db      	ldr	r3, [r3, #28]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d04e      	beq.n	800c212 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800c174:	2300      	movs	r3, #0
 800c176:	613b      	str	r3, [r7, #16]
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800c17c:	e021      	b.n	800c1c2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a1a      	ldr	r2, [r3, #32]
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	1c59      	adds	r1, r3, #1
 800c186:	6179      	str	r1, [r7, #20]
 800c188:	4413      	add	r3, r2
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c18e:	7bfb      	ldrb	r3, [r7, #15]
 800c190:	2b20      	cmp	r3, #32
 800c192:	d100      	bne.n	800c196 <get_fileinfo+0x3a>
 800c194:	e015      	b.n	800c1c2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c196:	7bfb      	ldrb	r3, [r7, #15]
 800c198:	2b05      	cmp	r3, #5
 800c19a:	d101      	bne.n	800c1a0 <get_fileinfo+0x44>
 800c19c:	23e5      	movs	r3, #229	; 0xe5
 800c19e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	2b09      	cmp	r3, #9
 800c1a4:	d106      	bne.n	800c1b4 <get_fileinfo+0x58>
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	1c5a      	adds	r2, r3, #1
 800c1aa:	613a      	str	r2, [r7, #16]
 800c1ac:	683a      	ldr	r2, [r7, #0]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	222e      	movs	r2, #46	; 0x2e
 800c1b2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	1c5a      	adds	r2, r3, #1
 800c1b8:	613a      	str	r2, [r7, #16]
 800c1ba:	683a      	ldr	r2, [r7, #0]
 800c1bc:	4413      	add	r3, r2
 800c1be:	7bfa      	ldrb	r2, [r7, #15]
 800c1c0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b0a      	cmp	r3, #10
 800c1c6:	d9da      	bls.n	800c17e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	3309      	adds	r3, #9
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a1b      	ldr	r3, [r3, #32]
 800c1d8:	7ada      	ldrb	r2, [r3, #11]
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a1b      	ldr	r3, [r3, #32]
 800c1e2:	331c      	adds	r3, #28
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fe fea3 	bl	800af30 <ld_dword>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a1b      	ldr	r3, [r3, #32]
 800c1f4:	3316      	adds	r3, #22
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fe fe9a 	bl	800af30 <ld_dword>
 800c1fc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	b29a      	uxth	r2, r3
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	80da      	strh	r2, [r3, #6]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	0c1b      	lsrs	r3, r3, #16
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	809a      	strh	r2, [r3, #4]
 800c210:	e000      	b.n	800c214 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c212:	bf00      	nop
}
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
	...

0800c21c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b088      	sub	sp, #32
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	60fb      	str	r3, [r7, #12]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	3324      	adds	r3, #36	; 0x24
 800c230:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c232:	220b      	movs	r2, #11
 800c234:	2120      	movs	r1, #32
 800c236:	68b8      	ldr	r0, [r7, #8]
 800c238:	f7fe ff05 	bl	800b046 <mem_set>
	si = i = 0; ni = 8;
 800c23c:	2300      	movs	r3, #0
 800c23e:	613b      	str	r3, [r7, #16]
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	61fb      	str	r3, [r7, #28]
 800c244:	2308      	movs	r3, #8
 800c246:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	61fa      	str	r2, [r7, #28]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	4413      	add	r3, r2
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c256:	7efb      	ldrb	r3, [r7, #27]
 800c258:	2b20      	cmp	r3, #32
 800c25a:	d94e      	bls.n	800c2fa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c25c:	7efb      	ldrb	r3, [r7, #27]
 800c25e:	2b2f      	cmp	r3, #47	; 0x2f
 800c260:	d006      	beq.n	800c270 <create_name+0x54>
 800c262:	7efb      	ldrb	r3, [r7, #27]
 800c264:	2b5c      	cmp	r3, #92	; 0x5c
 800c266:	d110      	bne.n	800c28a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c268:	e002      	b.n	800c270 <create_name+0x54>
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	3301      	adds	r3, #1
 800c26e:	61fb      	str	r3, [r7, #28]
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	4413      	add	r3, r2
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b2f      	cmp	r3, #47	; 0x2f
 800c27a:	d0f6      	beq.n	800c26a <create_name+0x4e>
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	4413      	add	r3, r2
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b5c      	cmp	r3, #92	; 0x5c
 800c286:	d0f0      	beq.n	800c26a <create_name+0x4e>
			break;
 800c288:	e038      	b.n	800c2fc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c28a:	7efb      	ldrb	r3, [r7, #27]
 800c28c:	2b2e      	cmp	r3, #46	; 0x2e
 800c28e:	d003      	beq.n	800c298 <create_name+0x7c>
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	429a      	cmp	r2, r3
 800c296:	d30c      	bcc.n	800c2b2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	2b0b      	cmp	r3, #11
 800c29c:	d002      	beq.n	800c2a4 <create_name+0x88>
 800c29e:	7efb      	ldrb	r3, [r7, #27]
 800c2a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c2a2:	d001      	beq.n	800c2a8 <create_name+0x8c>
 800c2a4:	2306      	movs	r3, #6
 800c2a6:	e044      	b.n	800c332 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c2a8:	2308      	movs	r3, #8
 800c2aa:	613b      	str	r3, [r7, #16]
 800c2ac:	230b      	movs	r3, #11
 800c2ae:	617b      	str	r3, [r7, #20]
			continue;
 800c2b0:	e022      	b.n	800c2f8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c2b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	da04      	bge.n	800c2c4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c2ba:	7efb      	ldrb	r3, [r7, #27]
 800c2bc:	3b80      	subs	r3, #128	; 0x80
 800c2be:	4a1f      	ldr	r2, [pc, #124]	; (800c33c <create_name+0x120>)
 800c2c0:	5cd3      	ldrb	r3, [r2, r3]
 800c2c2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c2c4:	7efb      	ldrb	r3, [r7, #27]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	481d      	ldr	r0, [pc, #116]	; (800c340 <create_name+0x124>)
 800c2ca:	f7fe fefe 	bl	800b0ca <chk_chr>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d001      	beq.n	800c2d8 <create_name+0xbc>
 800c2d4:	2306      	movs	r3, #6
 800c2d6:	e02c      	b.n	800c332 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c2d8:	7efb      	ldrb	r3, [r7, #27]
 800c2da:	2b60      	cmp	r3, #96	; 0x60
 800c2dc:	d905      	bls.n	800c2ea <create_name+0xce>
 800c2de:	7efb      	ldrb	r3, [r7, #27]
 800c2e0:	2b7a      	cmp	r3, #122	; 0x7a
 800c2e2:	d802      	bhi.n	800c2ea <create_name+0xce>
 800c2e4:	7efb      	ldrb	r3, [r7, #27]
 800c2e6:	3b20      	subs	r3, #32
 800c2e8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	1c5a      	adds	r2, r3, #1
 800c2ee:	613a      	str	r2, [r7, #16]
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	7efa      	ldrb	r2, [r7, #27]
 800c2f6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c2f8:	e7a6      	b.n	800c248 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c2fa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	441a      	add	r2, r3
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d101      	bne.n	800c310 <create_name+0xf4>
 800c30c:	2306      	movs	r3, #6
 800c30e:	e010      	b.n	800c332 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	2be5      	cmp	r3, #229	; 0xe5
 800c316:	d102      	bne.n	800c31e <create_name+0x102>
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	2205      	movs	r2, #5
 800c31c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c31e:	7efb      	ldrb	r3, [r7, #27]
 800c320:	2b20      	cmp	r3, #32
 800c322:	d801      	bhi.n	800c328 <create_name+0x10c>
 800c324:	2204      	movs	r2, #4
 800c326:	e000      	b.n	800c32a <create_name+0x10e>
 800c328:	2200      	movs	r2, #0
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	330b      	adds	r3, #11
 800c32e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c330:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c332:	4618      	mov	r0, r3
 800c334:	3720      	adds	r7, #32
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	0801fa8c 	.word	0x0801fa8c
 800c340:	0801f8e4 	.word	0x0801f8e4

0800c344 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b086      	sub	sp, #24
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c358:	e002      	b.n	800c360 <follow_path+0x1c>
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	3301      	adds	r3, #1
 800c35e:	603b      	str	r3, [r7, #0]
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	2b2f      	cmp	r3, #47	; 0x2f
 800c366:	d0f8      	beq.n	800c35a <follow_path+0x16>
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	2b5c      	cmp	r3, #92	; 0x5c
 800c36e:	d0f4      	beq.n	800c35a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	2200      	movs	r2, #0
 800c374:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	2b1f      	cmp	r3, #31
 800c37c:	d80a      	bhi.n	800c394 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2280      	movs	r2, #128	; 0x80
 800c382:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c386:	2100      	movs	r1, #0
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7ff fc7b 	bl	800bc84 <dir_sdi>
 800c38e:	4603      	mov	r3, r0
 800c390:	75fb      	strb	r3, [r7, #23]
 800c392:	e048      	b.n	800c426 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c394:	463b      	mov	r3, r7
 800c396:	4619      	mov	r1, r3
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f7ff ff3f 	bl	800c21c <create_name>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d139      	bne.n	800c41c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f7ff fe50 	bl	800c04e <dir_find>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c3b8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00a      	beq.n	800c3d6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c3c0:	7dfb      	ldrb	r3, [r7, #23]
 800c3c2:	2b04      	cmp	r3, #4
 800c3c4:	d12c      	bne.n	800c420 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c3c6:	7afb      	ldrb	r3, [r7, #11]
 800c3c8:	f003 0304 	and.w	r3, r3, #4
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d127      	bne.n	800c420 <follow_path+0xdc>
 800c3d0:	2305      	movs	r3, #5
 800c3d2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c3d4:	e024      	b.n	800c420 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c3d6:	7afb      	ldrb	r3, [r7, #11]
 800c3d8:	f003 0304 	and.w	r3, r3, #4
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d121      	bne.n	800c424 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	799b      	ldrb	r3, [r3, #6]
 800c3e4:	f003 0310 	and.w	r3, r3, #16
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c3ec:	2305      	movs	r3, #5
 800c3ee:	75fb      	strb	r3, [r7, #23]
 800c3f0:	e019      	b.n	800c426 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	695b      	ldr	r3, [r3, #20]
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	8992      	ldrh	r2, [r2, #12]
 800c400:	fbb3 f0f2 	udiv	r0, r3, r2
 800c404:	fb00 f202 	mul.w	r2, r0, r2
 800c408:	1a9b      	subs	r3, r3, r2
 800c40a:	440b      	add	r3, r1
 800c40c:	4619      	mov	r1, r3
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f7ff fdde 	bl	800bfd0 <ld_clust>
 800c414:	4602      	mov	r2, r0
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c41a:	e7bb      	b.n	800c394 <follow_path+0x50>
			if (res != FR_OK) break;
 800c41c:	bf00      	nop
 800c41e:	e002      	b.n	800c426 <follow_path+0xe2>
				break;
 800c420:	bf00      	nop
 800c422:	e000      	b.n	800c426 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c424:	bf00      	nop
			}
		}
	}

	return res;
 800c426:	7dfb      	ldrb	r3, [r7, #23]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3718      	adds	r7, #24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c430:	b480      	push	{r7}
 800c432:	b087      	sub	sp, #28
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c43c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d031      	beq.n	800c4aa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	617b      	str	r3, [r7, #20]
 800c44c:	e002      	b.n	800c454 <get_ldnumber+0x24>
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	3301      	adds	r3, #1
 800c452:	617b      	str	r3, [r7, #20]
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	2b20      	cmp	r3, #32
 800c45a:	d903      	bls.n	800c464 <get_ldnumber+0x34>
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	2b3a      	cmp	r3, #58	; 0x3a
 800c462:	d1f4      	bne.n	800c44e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	2b3a      	cmp	r3, #58	; 0x3a
 800c46a:	d11c      	bne.n	800c4a6 <get_ldnumber+0x76>
			tp = *path;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	1c5a      	adds	r2, r3, #1
 800c476:	60fa      	str	r2, [r7, #12]
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	3b30      	subs	r3, #48	; 0x30
 800c47c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	2b09      	cmp	r3, #9
 800c482:	d80e      	bhi.n	800c4a2 <get_ldnumber+0x72>
 800c484:	68fa      	ldr	r2, [r7, #12]
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d10a      	bne.n	800c4a2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d107      	bne.n	800c4a2 <get_ldnumber+0x72>
					vol = (int)i;
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	3301      	adds	r3, #1
 800c49a:	617b      	str	r3, [r7, #20]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	e002      	b.n	800c4ac <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c4aa:	693b      	ldr	r3, [r7, #16]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	371c      	adds	r7, #28
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	70da      	strb	r2, [r3, #3]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4ce:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c4d0:	6839      	ldr	r1, [r7, #0]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f7fe fff6 	bl	800b4c4 <move_window>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <check_fs+0x2a>
 800c4de:	2304      	movs	r3, #4
 800c4e0:	e038      	b.n	800c554 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	3338      	adds	r3, #56	; 0x38
 800c4e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe fd08 	bl	800af00 <ld_word>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d001      	beq.n	800c500 <check_fs+0x48>
 800c4fc:	2303      	movs	r3, #3
 800c4fe:	e029      	b.n	800c554 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c506:	2be9      	cmp	r3, #233	; 0xe9
 800c508:	d009      	beq.n	800c51e <check_fs+0x66>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c510:	2beb      	cmp	r3, #235	; 0xeb
 800c512:	d11e      	bne.n	800c552 <check_fs+0x9a>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c51a:	2b90      	cmp	r3, #144	; 0x90
 800c51c:	d119      	bne.n	800c552 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3338      	adds	r3, #56	; 0x38
 800c522:	3336      	adds	r3, #54	; 0x36
 800c524:	4618      	mov	r0, r3
 800c526:	f7fe fd03 	bl	800af30 <ld_dword>
 800c52a:	4603      	mov	r3, r0
 800c52c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c530:	4a0a      	ldr	r2, [pc, #40]	; (800c55c <check_fs+0xa4>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d101      	bne.n	800c53a <check_fs+0x82>
 800c536:	2300      	movs	r3, #0
 800c538:	e00c      	b.n	800c554 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	3338      	adds	r3, #56	; 0x38
 800c53e:	3352      	adds	r3, #82	; 0x52
 800c540:	4618      	mov	r0, r3
 800c542:	f7fe fcf5 	bl	800af30 <ld_dword>
 800c546:	4603      	mov	r3, r0
 800c548:	4a05      	ldr	r2, [pc, #20]	; (800c560 <check_fs+0xa8>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d101      	bne.n	800c552 <check_fs+0x9a>
 800c54e:	2300      	movs	r3, #0
 800c550:	e000      	b.n	800c554 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c552:	2302      	movs	r3, #2
}
 800c554:	4618      	mov	r0, r3
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	00544146 	.word	0x00544146
 800c560:	33544146 	.word	0x33544146

0800c564 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b096      	sub	sp, #88	; 0x58
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	4613      	mov	r3, r2
 800c570:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	2200      	movs	r2, #0
 800c576:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f7ff ff59 	bl	800c430 <get_ldnumber>
 800c57e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c582:	2b00      	cmp	r3, #0
 800c584:	da01      	bge.n	800c58a <find_volume+0x26>
 800c586:	230b      	movs	r3, #11
 800c588:	e26a      	b.n	800ca60 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c58a:	4aa3      	ldr	r2, [pc, #652]	; (800c818 <find_volume+0x2b4>)
 800c58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c592:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c596:	2b00      	cmp	r3, #0
 800c598:	d101      	bne.n	800c59e <find_volume+0x3a>
 800c59a:	230c      	movs	r3, #12
 800c59c:	e260      	b.n	800ca60 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800c59e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5a0:	f7fe fdae 	bl	800b100 <lock_fs>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <find_volume+0x4a>
 800c5aa:	230f      	movs	r3, #15
 800c5ac:	e258      	b.n	800ca60 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	f023 0301 	bic.w	r3, r3, #1
 800c5ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d01a      	beq.n	800c5fa <find_volume+0x96>
		stat = disk_status(fs->drv);
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	785b      	ldrb	r3, [r3, #1]
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fe fbfb 	bl	800adc4 <disk_status>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c5d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5d8:	f003 0301 	and.w	r3, r3, #1
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10c      	bne.n	800c5fa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c5e0:	79fb      	ldrb	r3, [r7, #7]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d007      	beq.n	800c5f6 <find_volume+0x92>
 800c5e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5ea:	f003 0304 	and.w	r3, r3, #4
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d001      	beq.n	800c5f6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800c5f2:	230a      	movs	r3, #10
 800c5f4:	e234      	b.n	800ca60 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e232      	b.n	800ca60 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c602:	b2da      	uxtb	r2, r3
 800c604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c606:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60a:	785b      	ldrb	r3, [r3, #1]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fe fbf3 	bl	800adf8 <disk_initialize>
 800c612:	4603      	mov	r3, r0
 800c614:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c61c:	f003 0301 	and.w	r3, r3, #1
 800c620:	2b00      	cmp	r3, #0
 800c622:	d001      	beq.n	800c628 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c624:	2303      	movs	r3, #3
 800c626:	e21b      	b.n	800ca60 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c628:	79fb      	ldrb	r3, [r7, #7]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d007      	beq.n	800c63e <find_volume+0xda>
 800c62e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c632:	f003 0304 	and.w	r3, r3, #4
 800c636:	2b00      	cmp	r3, #0
 800c638:	d001      	beq.n	800c63e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800c63a:	230a      	movs	r3, #10
 800c63c:	e210      	b.n	800ca60 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c640:	7858      	ldrb	r0, [r3, #1]
 800c642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c644:	330c      	adds	r3, #12
 800c646:	461a      	mov	r2, r3
 800c648:	2102      	movs	r1, #2
 800c64a:	f7fe fc3b 	bl	800aec4 <disk_ioctl>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d001      	beq.n	800c658 <find_volume+0xf4>
 800c654:	2301      	movs	r3, #1
 800c656:	e203      	b.n	800ca60 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65a:	899b      	ldrh	r3, [r3, #12]
 800c65c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c660:	d80d      	bhi.n	800c67e <find_volume+0x11a>
 800c662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c664:	899b      	ldrh	r3, [r3, #12]
 800c666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c66a:	d308      	bcc.n	800c67e <find_volume+0x11a>
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	899b      	ldrh	r3, [r3, #12]
 800c670:	461a      	mov	r2, r3
 800c672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c674:	899b      	ldrh	r3, [r3, #12]
 800c676:	3b01      	subs	r3, #1
 800c678:	4013      	ands	r3, r2
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d001      	beq.n	800c682 <find_volume+0x11e>
 800c67e:	2301      	movs	r3, #1
 800c680:	e1ee      	b.n	800ca60 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c682:	2300      	movs	r3, #0
 800c684:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c686:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c688:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c68a:	f7ff ff15 	bl	800c4b8 <check_fs>
 800c68e:	4603      	mov	r3, r0
 800c690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c694:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d149      	bne.n	800c730 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c69c:	2300      	movs	r3, #0
 800c69e:	643b      	str	r3, [r7, #64]	; 0x40
 800c6a0:	e01e      	b.n	800c6e0 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6aa:	011b      	lsls	r3, r3, #4
 800c6ac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c6b0:	4413      	add	r3, r2
 800c6b2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d006      	beq.n	800c6cc <find_volume+0x168>
 800c6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c0:	3308      	adds	r3, #8
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fe fc34 	bl	800af30 <ld_dword>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	e000      	b.n	800c6ce <find_volume+0x16a>
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	3358      	adds	r3, #88	; 0x58
 800c6d4:	443b      	add	r3, r7
 800c6d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6dc:	3301      	adds	r3, #1
 800c6de:	643b      	str	r3, [r7, #64]	; 0x40
 800c6e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6e2:	2b03      	cmp	r3, #3
 800c6e4:	d9dd      	bls.n	800c6a2 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c6ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d002      	beq.n	800c6f6 <find_volume+0x192>
 800c6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f2:	3b01      	subs	r3, #1
 800c6f4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	3358      	adds	r3, #88	; 0x58
 800c6fc:	443b      	add	r3, r7
 800c6fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c702:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c706:	2b00      	cmp	r3, #0
 800c708:	d005      	beq.n	800c716 <find_volume+0x1b2>
 800c70a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c70c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c70e:	f7ff fed3 	bl	800c4b8 <check_fs>
 800c712:	4603      	mov	r3, r0
 800c714:	e000      	b.n	800c718 <find_volume+0x1b4>
 800c716:	2303      	movs	r3, #3
 800c718:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c71c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c720:	2b01      	cmp	r3, #1
 800c722:	d905      	bls.n	800c730 <find_volume+0x1cc>
 800c724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c726:	3301      	adds	r3, #1
 800c728:	643b      	str	r3, [r7, #64]	; 0x40
 800c72a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c72c:	2b03      	cmp	r3, #3
 800c72e:	d9e2      	bls.n	800c6f6 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c730:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c734:	2b04      	cmp	r3, #4
 800c736:	d101      	bne.n	800c73c <find_volume+0x1d8>
 800c738:	2301      	movs	r3, #1
 800c73a:	e191      	b.n	800ca60 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c73c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c740:	2b01      	cmp	r3, #1
 800c742:	d901      	bls.n	800c748 <find_volume+0x1e4>
 800c744:	230d      	movs	r3, #13
 800c746:	e18b      	b.n	800ca60 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	3338      	adds	r3, #56	; 0x38
 800c74c:	330b      	adds	r3, #11
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fe fbd6 	bl	800af00 <ld_word>
 800c754:	4603      	mov	r3, r0
 800c756:	461a      	mov	r2, r3
 800c758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75a:	899b      	ldrh	r3, [r3, #12]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d001      	beq.n	800c764 <find_volume+0x200>
 800c760:	230d      	movs	r3, #13
 800c762:	e17d      	b.n	800ca60 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c766:	3338      	adds	r3, #56	; 0x38
 800c768:	3316      	adds	r3, #22
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7fe fbc8 	bl	800af00 <ld_word>
 800c770:	4603      	mov	r3, r0
 800c772:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c776:	2b00      	cmp	r3, #0
 800c778:	d106      	bne.n	800c788 <find_volume+0x224>
 800c77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77c:	3338      	adds	r3, #56	; 0x38
 800c77e:	3324      	adds	r3, #36	; 0x24
 800c780:	4618      	mov	r0, r3
 800c782:	f7fe fbd5 	bl	800af30 <ld_dword>
 800c786:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c78c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c790:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800c794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c796:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	789b      	ldrb	r3, [r3, #2]
 800c79c:	2b01      	cmp	r3, #1
 800c79e:	d005      	beq.n	800c7ac <find_volume+0x248>
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a2:	789b      	ldrb	r3, [r3, #2]
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d001      	beq.n	800c7ac <find_volume+0x248>
 800c7a8:	230d      	movs	r3, #13
 800c7aa:	e159      	b.n	800ca60 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ae:	789b      	ldrb	r3, [r3, #2]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7b4:	fb02 f303 	mul.w	r3, r2, r3
 800c7b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c8:	895b      	ldrh	r3, [r3, #10]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d008      	beq.n	800c7e0 <find_volume+0x27c>
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d0:	895b      	ldrh	r3, [r3, #10]
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	895b      	ldrh	r3, [r3, #10]
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	4013      	ands	r3, r2
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d001      	beq.n	800c7e4 <find_volume+0x280>
 800c7e0:	230d      	movs	r3, #13
 800c7e2:	e13d      	b.n	800ca60 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	3338      	adds	r3, #56	; 0x38
 800c7e8:	3311      	adds	r3, #17
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fe fb88 	bl	800af00 <ld_word>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	891b      	ldrh	r3, [r3, #8]
 800c7fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7fe:	8992      	ldrh	r2, [r2, #12]
 800c800:	0952      	lsrs	r2, r2, #5
 800c802:	b292      	uxth	r2, r2
 800c804:	fbb3 f1f2 	udiv	r1, r3, r2
 800c808:	fb01 f202 	mul.w	r2, r1, r2
 800c80c:	1a9b      	subs	r3, r3, r2
 800c80e:	b29b      	uxth	r3, r3
 800c810:	2b00      	cmp	r3, #0
 800c812:	d003      	beq.n	800c81c <find_volume+0x2b8>
 800c814:	230d      	movs	r3, #13
 800c816:	e123      	b.n	800ca60 <find_volume+0x4fc>
 800c818:	200049ac 	.word	0x200049ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81e:	3338      	adds	r3, #56	; 0x38
 800c820:	3313      	adds	r3, #19
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe fb6c 	bl	800af00 <ld_word>
 800c828:	4603      	mov	r3, r0
 800c82a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c82c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d106      	bne.n	800c840 <find_volume+0x2dc>
 800c832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c834:	3338      	adds	r3, #56	; 0x38
 800c836:	3320      	adds	r3, #32
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fe fb79 	bl	800af30 <ld_dword>
 800c83e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c842:	3338      	adds	r3, #56	; 0x38
 800c844:	330e      	adds	r3, #14
 800c846:	4618      	mov	r0, r3
 800c848:	f7fe fb5a 	bl	800af00 <ld_word>
 800c84c:	4603      	mov	r3, r0
 800c84e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c850:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c852:	2b00      	cmp	r3, #0
 800c854:	d101      	bne.n	800c85a <find_volume+0x2f6>
 800c856:	230d      	movs	r3, #13
 800c858:	e102      	b.n	800ca60 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c85a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c85c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c85e:	4413      	add	r3, r2
 800c860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c862:	8911      	ldrh	r1, [r2, #8]
 800c864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c866:	8992      	ldrh	r2, [r2, #12]
 800c868:	0952      	lsrs	r2, r2, #5
 800c86a:	b292      	uxth	r2, r2
 800c86c:	fbb1 f2f2 	udiv	r2, r1, r2
 800c870:	b292      	uxth	r2, r2
 800c872:	4413      	add	r3, r2
 800c874:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d201      	bcs.n	800c882 <find_volume+0x31e>
 800c87e:	230d      	movs	r3, #13
 800c880:	e0ee      	b.n	800ca60 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	1ad3      	subs	r3, r2, r3
 800c888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c88a:	8952      	ldrh	r2, [r2, #10]
 800c88c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c890:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <find_volume+0x338>
 800c898:	230d      	movs	r3, #13
 800c89a:	e0e1      	b.n	800ca60 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800c89c:	2303      	movs	r3, #3
 800c89e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d802      	bhi.n	800c8b2 <find_volume+0x34e>
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d802      	bhi.n	800c8c2 <find_volume+0x35e>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c4:	1c9a      	adds	r2, r3, #2
 800c8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8ce:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c8d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8d4:	441a      	add	r2, r3
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c8da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8de:	441a      	add	r2, r3
 800c8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c8e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c8e8:	2b03      	cmp	r3, #3
 800c8ea:	d11e      	bne.n	800c92a <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	3338      	adds	r3, #56	; 0x38
 800c8f0:	332a      	adds	r3, #42	; 0x2a
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe fb04 	bl	800af00 <ld_word>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <find_volume+0x39e>
 800c8fe:	230d      	movs	r3, #13
 800c900:	e0ae      	b.n	800ca60 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c904:	891b      	ldrh	r3, [r3, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d001      	beq.n	800c90e <find_volume+0x3aa>
 800c90a:	230d      	movs	r3, #13
 800c90c:	e0a8      	b.n	800ca60 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c910:	3338      	adds	r3, #56	; 0x38
 800c912:	332c      	adds	r3, #44	; 0x2c
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe fb0b 	bl	800af30 <ld_dword>
 800c91a:	4602      	mov	r2, r0
 800c91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c922:	69db      	ldr	r3, [r3, #28]
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	647b      	str	r3, [r7, #68]	; 0x44
 800c928:	e01f      	b.n	800c96a <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92c:	891b      	ldrh	r3, [r3, #8]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d101      	bne.n	800c936 <find_volume+0x3d2>
 800c932:	230d      	movs	r3, #13
 800c934:	e094      	b.n	800ca60 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c93a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c93c:	441a      	add	r2, r3
 800c93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c940:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c942:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c946:	2b02      	cmp	r3, #2
 800c948:	d103      	bne.n	800c952 <find_volume+0x3ee>
 800c94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94c:	69db      	ldr	r3, [r3, #28]
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	e00a      	b.n	800c968 <find_volume+0x404>
 800c952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c954:	69da      	ldr	r2, [r3, #28]
 800c956:	4613      	mov	r3, r2
 800c958:	005b      	lsls	r3, r3, #1
 800c95a:	4413      	add	r3, r2
 800c95c:	085a      	lsrs	r2, r3, #1
 800c95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c960:	69db      	ldr	r3, [r3, #28]
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c968:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	6a1a      	ldr	r2, [r3, #32]
 800c96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c970:	899b      	ldrh	r3, [r3, #12]
 800c972:	4619      	mov	r1, r3
 800c974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c976:	440b      	add	r3, r1
 800c978:	3b01      	subs	r3, #1
 800c97a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c97c:	8989      	ldrh	r1, [r1, #12]
 800c97e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c982:	429a      	cmp	r2, r3
 800c984:	d201      	bcs.n	800c98a <find_volume+0x426>
 800c986:	230d      	movs	r3, #13
 800c988:	e06a      	b.n	800ca60 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c990:	619a      	str	r2, [r3, #24]
 800c992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c994:	699a      	ldr	r2, [r3, #24]
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	2280      	movs	r2, #128	; 0x80
 800c99e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c9a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9a4:	2b03      	cmp	r3, #3
 800c9a6:	d149      	bne.n	800ca3c <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9aa:	3338      	adds	r3, #56	; 0x38
 800c9ac:	3330      	adds	r3, #48	; 0x30
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fe faa6 	bl	800af00 <ld_word>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d140      	bne.n	800ca3c <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c9ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9bc:	3301      	adds	r3, #1
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9c2:	f7fe fd7f 	bl	800b4c4 <move_window>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d137      	bne.n	800ca3c <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	3338      	adds	r3, #56	; 0x38
 800c9d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fe fa90 	bl	800af00 <ld_word>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d127      	bne.n	800ca3c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ee:	3338      	adds	r3, #56	; 0x38
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fe fa9d 	bl	800af30 <ld_dword>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	4a1b      	ldr	r2, [pc, #108]	; (800ca68 <find_volume+0x504>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d11e      	bne.n	800ca3c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca00:	3338      	adds	r3, #56	; 0x38
 800ca02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fe fa92 	bl	800af30 <ld_dword>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	4a17      	ldr	r2, [pc, #92]	; (800ca6c <find_volume+0x508>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d113      	bne.n	800ca3c <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ca14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca16:	3338      	adds	r3, #56	; 0x38
 800ca18:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7fe fa87 	bl	800af30 <ld_dword>
 800ca22:	4602      	mov	r2, r0
 800ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca26:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ca28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2a:	3338      	adds	r3, #56	; 0x38
 800ca2c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7fe fa7d 	bl	800af30 <ld_dword>
 800ca36:	4602      	mov	r2, r0
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ca42:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ca44:	4b0a      	ldr	r3, [pc, #40]	; (800ca70 <find_volume+0x50c>)
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	4b08      	ldr	r3, [pc, #32]	; (800ca70 <find_volume+0x50c>)
 800ca4e:	801a      	strh	r2, [r3, #0]
 800ca50:	4b07      	ldr	r3, [pc, #28]	; (800ca70 <find_volume+0x50c>)
 800ca52:	881a      	ldrh	r2, [r3, #0]
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ca58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca5a:	f7fe fccb 	bl	800b3f4 <clear_lock>
#endif
	return FR_OK;
 800ca5e:	2300      	movs	r3, #0
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3758      	adds	r7, #88	; 0x58
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}
 800ca68:	41615252 	.word	0x41615252
 800ca6c:	61417272 	.word	0x61417272
 800ca70:	200049b0 	.word	0x200049b0

0800ca74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ca7e:	2309      	movs	r3, #9
 800ca80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d02e      	beq.n	800cae6 <validate+0x72>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d02a      	beq.n	800cae6 <validate+0x72>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d025      	beq.n	800cae6 <validate+0x72>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	889a      	ldrh	r2, [r3, #4]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	88db      	ldrh	r3, [r3, #6]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d11e      	bne.n	800cae6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4618      	mov	r0, r3
 800caae:	f7fe fb27 	bl	800b100 <lock_fs>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d014      	beq.n	800cae2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	785b      	ldrb	r3, [r3, #1]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fe f980 	bl	800adc4 <disk_status>
 800cac4:	4603      	mov	r3, r0
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d102      	bne.n	800cad4 <validate+0x60>
				res = FR_OK;
 800cace:	2300      	movs	r3, #0
 800cad0:	73fb      	strb	r3, [r7, #15]
 800cad2:	e008      	b.n	800cae6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2100      	movs	r1, #0
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fe fb26 	bl	800b12c <unlock_fs>
 800cae0:	e001      	b.n	800cae6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800cae2:	230f      	movs	r3, #15
 800cae4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cae6:	7bfb      	ldrb	r3, [r7, #15]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d102      	bne.n	800caf2 <validate+0x7e>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	e000      	b.n	800caf4 <validate+0x80>
 800caf2:	2300      	movs	r3, #0
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	6013      	str	r3, [r2, #0]
	return res;
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
	...

0800cb04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cb16:	f107 0310 	add.w	r3, r7, #16
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7ff fc88 	bl	800c430 <get_ldnumber>
 800cb20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	da01      	bge.n	800cb2c <f_mount+0x28>
 800cb28:	230b      	movs	r3, #11
 800cb2a:	e048      	b.n	800cbbe <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cb2c:	4a26      	ldr	r2, [pc, #152]	; (800cbc8 <f_mount+0xc4>)
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb34:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00f      	beq.n	800cb5c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cb3c:	69b8      	ldr	r0, [r7, #24]
 800cb3e:	f7fe fc59 	bl	800b3f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f000 fe00 	bl	800d74c <ff_del_syncobj>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d101      	bne.n	800cb56 <f_mount+0x52>
 800cb52:	2302      	movs	r3, #2
 800cb54:	e033      	b.n	800cbbe <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00f      	beq.n	800cb82 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	3310      	adds	r3, #16
 800cb70:	4619      	mov	r1, r3
 800cb72:	4610      	mov	r0, r2
 800cb74:	f000 fdcf 	bl	800d716 <ff_cre_syncobj>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d101      	bne.n	800cb82 <f_mount+0x7e>
 800cb7e:	2302      	movs	r3, #2
 800cb80:	e01d      	b.n	800cbbe <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	4910      	ldr	r1, [pc, #64]	; (800cbc8 <f_mount+0xc4>)
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d002      	beq.n	800cb98 <f_mount+0x94>
 800cb92:	79fb      	ldrb	r3, [r7, #7]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d001      	beq.n	800cb9c <f_mount+0x98>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	e010      	b.n	800cbbe <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cb9c:	f107 010c 	add.w	r1, r7, #12
 800cba0:	f107 0308 	add.w	r3, r7, #8
 800cba4:	2200      	movs	r2, #0
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7ff fcdc 	bl	800c564 <find_volume>
 800cbac:	4603      	mov	r3, r0
 800cbae:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	7dfa      	ldrb	r2, [r7, #23]
 800cbb4:	4611      	mov	r1, r2
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7fe fab8 	bl	800b12c <unlock_fs>
 800cbbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3720      	adds	r7, #32
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	200049ac 	.word	0x200049ac

0800cbcc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b098      	sub	sp, #96	; 0x60
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d101      	bne.n	800cbe4 <f_open+0x18>
 800cbe0:	2309      	movs	r3, #9
 800cbe2:	e1c2      	b.n	800cf6a <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cbec:	79fa      	ldrb	r2, [r7, #7]
 800cbee:	f107 0110 	add.w	r1, r7, #16
 800cbf2:	f107 0308 	add.w	r3, r7, #8
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7ff fcb4 	bl	800c564 <find_volume>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800cc02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f040 819f 	bne.w	800cf4a <f_open+0x37e>
		dj.obj.fs = fs;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cc10:	68ba      	ldr	r2, [r7, #8]
 800cc12:	f107 0314 	add.w	r3, r7, #20
 800cc16:	4611      	mov	r1, r2
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7ff fb93 	bl	800c344 <follow_path>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cc24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d11a      	bne.n	800cc62 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cc2c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc30:	b25b      	sxtb	r3, r3
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	da03      	bge.n	800cc3e <f_open+0x72>
				res = FR_INVALID_NAME;
 800cc36:	2306      	movs	r3, #6
 800cc38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cc3c:	e011      	b.n	800cc62 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cc3e:	79fb      	ldrb	r3, [r7, #7]
 800cc40:	f023 0301 	bic.w	r3, r3, #1
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	bf14      	ite	ne
 800cc48:	2301      	movne	r3, #1
 800cc4a:	2300      	moveq	r3, #0
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	461a      	mov	r2, r3
 800cc50:	f107 0314 	add.w	r3, r7, #20
 800cc54:	4611      	mov	r1, r2
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fe fa84 	bl	800b164 <chk_lock>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cc62:	79fb      	ldrb	r3, [r7, #7]
 800cc64:	f003 031c 	and.w	r3, r3, #28
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d07f      	beq.n	800cd6c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cc6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d017      	beq.n	800cca4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cc74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	d10e      	bne.n	800cc9a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cc7c:	f7fe face 	bl	800b21c <enq_lock>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d006      	beq.n	800cc94 <f_open+0xc8>
 800cc86:	f107 0314 	add.w	r3, r7, #20
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7ff fa34 	bl	800c0f8 <dir_register>
 800cc90:	4603      	mov	r3, r0
 800cc92:	e000      	b.n	800cc96 <f_open+0xca>
 800cc94:	2312      	movs	r3, #18
 800cc96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cc9a:	79fb      	ldrb	r3, [r7, #7]
 800cc9c:	f043 0308 	orr.w	r3, r3, #8
 800cca0:	71fb      	strb	r3, [r7, #7]
 800cca2:	e010      	b.n	800ccc6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cca4:	7ebb      	ldrb	r3, [r7, #26]
 800cca6:	f003 0311 	and.w	r3, r3, #17
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d003      	beq.n	800ccb6 <f_open+0xea>
					res = FR_DENIED;
 800ccae:	2307      	movs	r3, #7
 800ccb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ccb4:	e007      	b.n	800ccc6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ccb6:	79fb      	ldrb	r3, [r7, #7]
 800ccb8:	f003 0304 	and.w	r3, r3, #4
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d002      	beq.n	800ccc6 <f_open+0xfa>
 800ccc0:	2308      	movs	r3, #8
 800ccc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ccc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d168      	bne.n	800cda0 <f_open+0x1d4>
 800ccce:	79fb      	ldrb	r3, [r7, #7]
 800ccd0:	f003 0308 	and.w	r3, r3, #8
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d063      	beq.n	800cda0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ccd8:	f7fe f816 	bl	800ad08 <get_fattime>
 800ccdc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ccde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce0:	330e      	adds	r3, #14
 800cce2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7fe f961 	bl	800afac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ccea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccec:	3316      	adds	r3, #22
 800ccee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7fe f95b 	bl	800afac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ccf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf8:	330b      	adds	r3, #11
 800ccfa:	2220      	movs	r2, #32
 800ccfc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd02:	4611      	mov	r1, r2
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7ff f963 	bl	800bfd0 <ld_clust>
 800cd0a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cd10:	2200      	movs	r2, #0
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7ff f97b 	bl	800c00e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd1a:	331c      	adds	r3, #28
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fe f944 	bl	800afac <st_dword>
					fs->wflag = 1;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	2201      	movs	r2, #1
 800cd28:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cd2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d037      	beq.n	800cda0 <f_open+0x1d4>
						dw = fs->winsect;
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd34:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cd36:	f107 0314 	add.w	r3, r7, #20
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fe fe6b 	bl	800ba1a <remove_chain>
 800cd44:	4603      	mov	r3, r0
 800cd46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800cd4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d126      	bne.n	800cda0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fe fbb4 	bl	800b4c4 <move_window>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd66:	3a01      	subs	r2, #1
 800cd68:	615a      	str	r2, [r3, #20]
 800cd6a:	e019      	b.n	800cda0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cd6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d115      	bne.n	800cda0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cd74:	7ebb      	ldrb	r3, [r7, #26]
 800cd76:	f003 0310 	and.w	r3, r3, #16
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d003      	beq.n	800cd86 <f_open+0x1ba>
					res = FR_NO_FILE;
 800cd7e:	2304      	movs	r3, #4
 800cd80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cd84:	e00c      	b.n	800cda0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cd86:	79fb      	ldrb	r3, [r7, #7]
 800cd88:	f003 0302 	and.w	r3, r3, #2
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d007      	beq.n	800cda0 <f_open+0x1d4>
 800cd90:	7ebb      	ldrb	r3, [r7, #26]
 800cd92:	f003 0301 	and.w	r3, r3, #1
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d002      	beq.n	800cda0 <f_open+0x1d4>
						res = FR_DENIED;
 800cd9a:	2307      	movs	r3, #7
 800cd9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cda0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d128      	bne.n	800cdfa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cda8:	79fb      	ldrb	r3, [r7, #7]
 800cdaa:	f003 0308 	and.w	r3, r3, #8
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d003      	beq.n	800cdba <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cdb2:	79fb      	ldrb	r3, [r7, #7]
 800cdb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdb8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cdc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cdc8:	79fb      	ldrb	r3, [r7, #7]
 800cdca:	f023 0301 	bic.w	r3, r3, #1
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	bf14      	ite	ne
 800cdd2:	2301      	movne	r3, #1
 800cdd4:	2300      	moveq	r3, #0
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	461a      	mov	r2, r3
 800cdda:	f107 0314 	add.w	r3, r7, #20
 800cdde:	4611      	mov	r1, r2
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fe fa3d 	bl	800b260 <inc_lock>
 800cde6:	4602      	mov	r2, r0
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	691b      	ldr	r3, [r3, #16]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d102      	bne.n	800cdfa <f_open+0x22e>
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cdfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	f040 80a3 	bne.w	800cf4a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce08:	4611      	mov	r1, r2
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7ff f8e0 	bl	800bfd0 <ld_clust>
 800ce10:	4602      	mov	r2, r0
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ce16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce18:	331c      	adds	r3, #28
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fe f888 	bl	800af30 <ld_dword>
 800ce20:	4602      	mov	r2, r0
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ce2c:	693a      	ldr	r2, [r7, #16]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	88da      	ldrh	r2, [r3, #6]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	79fa      	ldrb	r2, [r7, #7]
 800ce3e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2200      	movs	r2, #0
 800ce44:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	3330      	adds	r3, #48	; 0x30
 800ce56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fe f8f2 	bl	800b046 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ce62:	79fb      	ldrb	r3, [r7, #7]
 800ce64:	f003 0320 	and.w	r3, r3, #32
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d06e      	beq.n	800cf4a <f_open+0x37e>
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d06a      	beq.n	800cf4a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	68da      	ldr	r2, [r3, #12]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	895b      	ldrh	r3, [r3, #10]
 800ce80:	461a      	mov	r2, r3
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	899b      	ldrh	r3, [r3, #12]
 800ce86:	fb02 f303 	mul.w	r3, r2, r3
 800ce8a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	657b      	str	r3, [r7, #84]	; 0x54
 800ce98:	e016      	b.n	800cec8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fe fbcd 	bl	800b63e <get_fat>
 800cea4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d802      	bhi.n	800ceb2 <f_open+0x2e6>
 800ceac:	2302      	movs	r3, #2
 800ceae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ceb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ceb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ceb8:	d102      	bne.n	800cec0 <f_open+0x2f4>
 800ceba:	2301      	movs	r3, #1
 800cebc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cec0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cec4:	1ad3      	subs	r3, r2, r3
 800cec6:	657b      	str	r3, [r7, #84]	; 0x54
 800cec8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d103      	bne.n	800ced8 <f_open+0x30c>
 800ced0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ced2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d8e0      	bhi.n	800ce9a <f_open+0x2ce>
				}
				fp->clust = clst;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cedc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cede:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d131      	bne.n	800cf4a <f_open+0x37e>
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	899b      	ldrh	r3, [r3, #12]
 800ceea:	461a      	mov	r2, r3
 800ceec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceee:	fbb3 f1f2 	udiv	r1, r3, r2
 800cef2:	fb01 f202 	mul.w	r2, r1, r2
 800cef6:	1a9b      	subs	r3, r3, r2
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d026      	beq.n	800cf4a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fe fb7d 	bl	800b600 <clust2sect>
 800cf06:	6478      	str	r0, [r7, #68]	; 0x44
 800cf08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d103      	bne.n	800cf16 <f_open+0x34a>
						res = FR_INT_ERR;
 800cf0e:	2302      	movs	r3, #2
 800cf10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cf14:	e019      	b.n	800cf4a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	899b      	ldrh	r3, [r3, #12]
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf1e:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf24:	441a      	add	r2, r3
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	7858      	ldrb	r0, [r3, #1]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	6a1a      	ldr	r2, [r3, #32]
 800cf38:	2301      	movs	r3, #1
 800cf3a:	f7fd ff83 	bl	800ae44 <disk_read>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <f_open+0x37e>
 800cf44:	2301      	movs	r3, #1
 800cf46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cf4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d002      	beq.n	800cf58 <f_open+0x38c>
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2200      	movs	r2, #0
 800cf56:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800cf5e:	4611      	mov	r1, r2
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7fe f8e3 	bl	800b12c <unlock_fs>
 800cf66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3760      	adds	r7, #96	; 0x60
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b08c      	sub	sp, #48	; 0x30
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	60f8      	str	r0, [r7, #12]
 800cf7a:	60b9      	str	r1, [r7, #8]
 800cf7c:	607a      	str	r2, [r7, #4]
 800cf7e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	2200      	movs	r2, #0
 800cf88:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f107 0210 	add.w	r2, r7, #16
 800cf90:	4611      	mov	r1, r2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7ff fd6e 	bl	800ca74 <validate>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cf9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d107      	bne.n	800cfb6 <f_write+0x44>
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	7d5b      	ldrb	r3, [r3, #21]
 800cfaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cfae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d009      	beq.n	800cfca <f_write+0x58>
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cfbc:	4611      	mov	r1, r2
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fe f8b4 	bl	800b12c <unlock_fs>
 800cfc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfc8:	e192      	b.n	800d2f0 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	7d1b      	ldrb	r3, [r3, #20]
 800cfce:	f003 0302 	and.w	r3, r3, #2
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d106      	bne.n	800cfe4 <f_write+0x72>
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	2107      	movs	r1, #7
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fe f8a6 	bl	800b12c <unlock_fs>
 800cfe0:	2307      	movs	r3, #7
 800cfe2:	e185      	b.n	800d2f0 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	699a      	ldr	r2, [r3, #24]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	441a      	add	r2, r3
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	699b      	ldr	r3, [r3, #24]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	f080 816a 	bcs.w	800d2ca <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	699b      	ldr	r3, [r3, #24]
 800cffa:	43db      	mvns	r3, r3
 800cffc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cffe:	e164      	b.n	800d2ca <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	693a      	ldr	r2, [r7, #16]
 800d006:	8992      	ldrh	r2, [r2, #12]
 800d008:	fbb3 f1f2 	udiv	r1, r3, r2
 800d00c:	fb01 f202 	mul.w	r2, r1, r2
 800d010:	1a9b      	subs	r3, r3, r2
 800d012:	2b00      	cmp	r3, #0
 800d014:	f040 810f 	bne.w	800d236 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	699b      	ldr	r3, [r3, #24]
 800d01c:	693a      	ldr	r2, [r7, #16]
 800d01e:	8992      	ldrh	r2, [r2, #12]
 800d020:	fbb3 f3f2 	udiv	r3, r3, r2
 800d024:	693a      	ldr	r2, [r7, #16]
 800d026:	8952      	ldrh	r2, [r2, #10]
 800d028:	3a01      	subs	r2, #1
 800d02a:	4013      	ands	r3, r2
 800d02c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d14d      	bne.n	800d0d0 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	699b      	ldr	r3, [r3, #24]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10c      	bne.n	800d056 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d044:	2b00      	cmp	r3, #0
 800d046:	d11a      	bne.n	800d07e <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2100      	movs	r1, #0
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7fe fd49 	bl	800bae4 <create_chain>
 800d052:	62b8      	str	r0, [r7, #40]	; 0x28
 800d054:	e013      	b.n	800d07e <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d007      	beq.n	800d06e <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	699b      	ldr	r3, [r3, #24]
 800d062:	4619      	mov	r1, r3
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	f7fe fdd5 	bl	800bc14 <clmt_clust>
 800d06a:	62b8      	str	r0, [r7, #40]	; 0x28
 800d06c:	e007      	b.n	800d07e <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	69db      	ldr	r3, [r3, #28]
 800d074:	4619      	mov	r1, r3
 800d076:	4610      	mov	r0, r2
 800d078:	f7fe fd34 	bl	800bae4 <create_chain>
 800d07c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d080:	2b00      	cmp	r3, #0
 800d082:	f000 8127 	beq.w	800d2d4 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d109      	bne.n	800d0a0 <f_write+0x12e>
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2202      	movs	r2, #2
 800d090:	755a      	strb	r2, [r3, #21]
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	2102      	movs	r1, #2
 800d096:	4618      	mov	r0, r3
 800d098:	f7fe f848 	bl	800b12c <unlock_fs>
 800d09c:	2302      	movs	r3, #2
 800d09e:	e127      	b.n	800d2f0 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0a6:	d109      	bne.n	800d0bc <f_write+0x14a>
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	755a      	strb	r2, [r3, #21]
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	2101      	movs	r1, #1
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fe f83a 	bl	800b12c <unlock_fs>
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e119      	b.n	800d2f0 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0c0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	689b      	ldr	r3, [r3, #8]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d102      	bne.n	800d0d0 <f_write+0x15e>
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0ce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	7d1b      	ldrb	r3, [r3, #20]
 800d0d4:	b25b      	sxtb	r3, r3
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	da1d      	bge.n	800d116 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	7858      	ldrb	r0, [r3, #1]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	6a1a      	ldr	r2, [r3, #32]
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	f7fd fecb 	bl	800ae84 <disk_write>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d009      	beq.n	800d108 <f_write+0x196>
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	755a      	strb	r2, [r3, #21]
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	2101      	movs	r1, #1
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fe f814 	bl	800b12c <unlock_fs>
 800d104:	2301      	movs	r3, #1
 800d106:	e0f3      	b.n	800d2f0 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	7d1b      	ldrb	r3, [r3, #20]
 800d10c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d110:	b2da      	uxtb	r2, r3
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d116:	693a      	ldr	r2, [r7, #16]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	69db      	ldr	r3, [r3, #28]
 800d11c:	4619      	mov	r1, r3
 800d11e:	4610      	mov	r0, r2
 800d120:	f7fe fa6e 	bl	800b600 <clust2sect>
 800d124:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d109      	bne.n	800d140 <f_write+0x1ce>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2202      	movs	r2, #2
 800d130:	755a      	strb	r2, [r3, #21]
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	2102      	movs	r1, #2
 800d136:	4618      	mov	r0, r3
 800d138:	f7fd fff8 	bl	800b12c <unlock_fs>
 800d13c:	2302      	movs	r3, #2
 800d13e:	e0d7      	b.n	800d2f0 <f_write+0x37e>
			sect += csect;
 800d140:	697a      	ldr	r2, [r7, #20]
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	4413      	add	r3, r2
 800d146:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	899b      	ldrh	r3, [r3, #12]
 800d14c:	461a      	mov	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	fbb3 f3f2 	udiv	r3, r3, r2
 800d154:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d048      	beq.n	800d1ee <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d15c:	69ba      	ldr	r2, [r7, #24]
 800d15e:	6a3b      	ldr	r3, [r7, #32]
 800d160:	4413      	add	r3, r2
 800d162:	693a      	ldr	r2, [r7, #16]
 800d164:	8952      	ldrh	r2, [r2, #10]
 800d166:	4293      	cmp	r3, r2
 800d168:	d905      	bls.n	800d176 <f_write+0x204>
					cc = fs->csize - csect;
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	895b      	ldrh	r3, [r3, #10]
 800d16e:	461a      	mov	r2, r3
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	1ad3      	subs	r3, r2, r3
 800d174:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	7858      	ldrb	r0, [r3, #1]
 800d17a:	6a3b      	ldr	r3, [r7, #32]
 800d17c:	697a      	ldr	r2, [r7, #20]
 800d17e:	69f9      	ldr	r1, [r7, #28]
 800d180:	f7fd fe80 	bl	800ae84 <disk_write>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d009      	beq.n	800d19e <f_write+0x22c>
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2201      	movs	r2, #1
 800d18e:	755a      	strb	r2, [r3, #21]
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	2101      	movs	r1, #1
 800d194:	4618      	mov	r0, r3
 800d196:	f7fd ffc9 	bl	800b12c <unlock_fs>
 800d19a:	2301      	movs	r3, #1
 800d19c:	e0a8      	b.n	800d2f0 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6a1a      	ldr	r2, [r3, #32]
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	6a3a      	ldr	r2, [r7, #32]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d918      	bls.n	800d1de <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6a1a      	ldr	r2, [r3, #32]
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	693a      	ldr	r2, [r7, #16]
 800d1bc:	8992      	ldrh	r2, [r2, #12]
 800d1be:	fb02 f303 	mul.w	r3, r2, r3
 800d1c2:	69fa      	ldr	r2, [r7, #28]
 800d1c4:	18d1      	adds	r1, r2, r3
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	899b      	ldrh	r3, [r3, #12]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	f7fd ff1a 	bl	800b004 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	7d1b      	ldrb	r3, [r3, #20]
 800d1d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1d8:	b2da      	uxtb	r2, r3
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	899b      	ldrh	r3, [r3, #12]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	6a3b      	ldr	r3, [r7, #32]
 800d1e6:	fb02 f303 	mul.w	r3, r2, r3
 800d1ea:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d1ec:	e050      	b.n	800d290 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6a1b      	ldr	r3, [r3, #32]
 800d1f2:	697a      	ldr	r2, [r7, #20]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d01b      	beq.n	800d230 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	699a      	ldr	r2, [r3, #24]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d200:	429a      	cmp	r2, r3
 800d202:	d215      	bcs.n	800d230 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	7858      	ldrb	r0, [r3, #1]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d20e:	2301      	movs	r3, #1
 800d210:	697a      	ldr	r2, [r7, #20]
 800d212:	f7fd fe17 	bl	800ae44 <disk_read>
 800d216:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d009      	beq.n	800d230 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2201      	movs	r2, #1
 800d220:	755a      	strb	r2, [r3, #21]
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	2101      	movs	r1, #1
 800d226:	4618      	mov	r0, r3
 800d228:	f7fd ff80 	bl	800b12c <unlock_fs>
 800d22c:	2301      	movs	r3, #1
 800d22e:	e05f      	b.n	800d2f0 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	899b      	ldrh	r3, [r3, #12]
 800d23a:	4618      	mov	r0, r3
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	699b      	ldr	r3, [r3, #24]
 800d240:	693a      	ldr	r2, [r7, #16]
 800d242:	8992      	ldrh	r2, [r2, #12]
 800d244:	fbb3 f1f2 	udiv	r1, r3, r2
 800d248:	fb01 f202 	mul.w	r2, r1, r2
 800d24c:	1a9b      	subs	r3, r3, r2
 800d24e:	1ac3      	subs	r3, r0, r3
 800d250:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	429a      	cmp	r2, r3
 800d258:	d901      	bls.n	800d25e <f_write+0x2ec>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	699b      	ldr	r3, [r3, #24]
 800d268:	693a      	ldr	r2, [r7, #16]
 800d26a:	8992      	ldrh	r2, [r2, #12]
 800d26c:	fbb3 f0f2 	udiv	r0, r3, r2
 800d270:	fb00 f202 	mul.w	r2, r0, r2
 800d274:	1a9b      	subs	r3, r3, r2
 800d276:	440b      	add	r3, r1
 800d278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d27a:	69f9      	ldr	r1, [r7, #28]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fd fec1 	bl	800b004 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	7d1b      	ldrb	r3, [r3, #20]
 800d286:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d28a:	b2da      	uxtb	r2, r3
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d290:	69fa      	ldr	r2, [r7, #28]
 800d292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d294:	4413      	add	r3, r2
 800d296:	61fb      	str	r3, [r7, #28]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	699a      	ldr	r2, [r3, #24]
 800d29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29e:	441a      	add	r2, r3
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	619a      	str	r2, [r3, #24]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	68da      	ldr	r2, [r3, #12]
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	699b      	ldr	r3, [r3, #24]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	bf38      	it	cc
 800d2b0:	461a      	movcc	r2, r3
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	60da      	str	r2, [r3, #12]
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2bc:	441a      	add	r2, r3
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	601a      	str	r2, [r3, #0]
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	f47f ae97 	bne.w	800d000 <f_write+0x8e>
 800d2d2:	e000      	b.n	800d2d6 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d2d4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	7d1b      	ldrb	r3, [r3, #20]
 800d2da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7fd ff1f 	bl	800b12c <unlock_fs>
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3730      	adds	r7, #48	; 0x30
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f107 0208 	add.w	r2, r7, #8
 800d306:	4611      	mov	r1, r2
 800d308:	4618      	mov	r0, r3
 800d30a:	f7ff fbb3 	bl	800ca74 <validate>
 800d30e:	4603      	mov	r3, r0
 800d310:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d312:	7dfb      	ldrb	r3, [r7, #23]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d16d      	bne.n	800d3f4 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7d1b      	ldrb	r3, [r3, #20]
 800d31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d320:	2b00      	cmp	r3, #0
 800d322:	d067      	beq.n	800d3f4 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7d1b      	ldrb	r3, [r3, #20]
 800d328:	b25b      	sxtb	r3, r3
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	da1a      	bge.n	800d364 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	7858      	ldrb	r0, [r3, #1]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6a1a      	ldr	r2, [r3, #32]
 800d33c:	2301      	movs	r3, #1
 800d33e:	f7fd fda1 	bl	800ae84 <disk_write>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d006      	beq.n	800d356 <f_sync+0x5e>
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2101      	movs	r1, #1
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7fd feed 	bl	800b12c <unlock_fs>
 800d352:	2301      	movs	r3, #1
 800d354:	e055      	b.n	800d402 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	7d1b      	ldrb	r3, [r3, #20]
 800d35a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d364:	f7fd fcd0 	bl	800ad08 <get_fattime>
 800d368:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d36a:	68ba      	ldr	r2, [r7, #8]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d370:	4619      	mov	r1, r3
 800d372:	4610      	mov	r0, r2
 800d374:	f7fe f8a6 	bl	800b4c4 <move_window>
 800d378:	4603      	mov	r3, r0
 800d37a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d37c:	7dfb      	ldrb	r3, [r7, #23]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d138      	bne.n	800d3f4 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d386:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	330b      	adds	r3, #11
 800d38c:	781a      	ldrb	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	330b      	adds	r3, #11
 800d392:	f042 0220 	orr.w	r2, r2, #32
 800d396:	b2d2      	uxtb	r2, r2
 800d398:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6818      	ldr	r0, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	68f9      	ldr	r1, [r7, #12]
 800d3a6:	f7fe fe32 	bl	800c00e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f103 021c 	add.w	r2, r3, #28
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	4610      	mov	r0, r2
 800d3b8:	f7fd fdf8 	bl	800afac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	3316      	adds	r3, #22
 800d3c0:	6939      	ldr	r1, [r7, #16]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fd fdf2 	bl	800afac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	3312      	adds	r3, #18
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7fd fdd1 	bl	800af76 <st_word>
					fs->wflag = 1;
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fe f89f 	bl	800b520 <sync_fs>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	7d1b      	ldrb	r3, [r3, #20]
 800d3ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3ee:	b2da      	uxtb	r2, r3
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	7dfa      	ldrb	r2, [r7, #23]
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fd fe96 	bl	800b12c <unlock_fs>
 800d400:	7dfb      	ldrb	r3, [r7, #23]
}
 800d402:	4618      	mov	r0, r3
 800d404:	3718      	adds	r7, #24
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b084      	sub	sp, #16
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f7ff ff70 	bl	800d2f8 <f_sync>
 800d418:	4603      	mov	r3, r0
 800d41a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d41c:	7bfb      	ldrb	r3, [r7, #15]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d11d      	bne.n	800d45e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f107 0208 	add.w	r2, r7, #8
 800d428:	4611      	mov	r1, r2
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7ff fb22 	bl	800ca74 <validate>
 800d430:	4603      	mov	r3, r0
 800d432:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d434:	7bfb      	ldrb	r3, [r7, #15]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d111      	bne.n	800d45e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	4618      	mov	r0, r3
 800d440:	f7fd ff9c 	bl	800b37c <dec_lock>
 800d444:	4603      	mov	r3, r0
 800d446:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d448:	7bfb      	ldrb	r3, [r7, #15]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d102      	bne.n	800d454 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2200      	movs	r2, #0
 800d452:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	2100      	movs	r1, #0
 800d458:	4618      	mov	r0, r3
 800d45a:	f7fd fe67 	bl	800b12c <unlock_fs>
#endif
		}
	}
	return res;
 800d45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b090      	sub	sp, #64	; 0x40
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d472:	f107 010c 	add.w	r1, r7, #12
 800d476:	1d3b      	adds	r3, r7, #4
 800d478:	2200      	movs	r2, #0
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7ff f872 	bl	800c564 <find_volume>
 800d480:	4603      	mov	r3, r0
 800d482:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d486:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d11f      	bne.n	800d4ce <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	f107 030c 	add.w	r3, r7, #12
 800d494:	4611      	mov	r1, r2
 800d496:	4618      	mov	r0, r3
 800d498:	f7fe ff54 	bl	800c344 <follow_path>
 800d49c:	4603      	mov	r3, r0
 800d49e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d4a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d111      	bne.n	800d4ce <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d4aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d4ae:	b25b      	sxtb	r3, r3
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	da03      	bge.n	800d4bc <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d4b4:	2306      	movs	r3, #6
 800d4b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d4ba:	e008      	b.n	800d4ce <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d005      	beq.n	800d4ce <f_stat+0x66>
 800d4c2:	f107 030c 	add.w	r3, r7, #12
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f7fe fe47 	bl	800c15c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fd fe28 	bl	800b12c <unlock_fs>
 800d4dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3740      	adds	r7, #64	; 0x40
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b092      	sub	sp, #72	; 0x48
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d4f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d4f8:	f107 030c 	add.w	r3, r7, #12
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7ff f830 	bl	800c564 <find_volume>
 800d504:	4603      	mov	r3, r0
 800d506:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d50a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d50e:	2b00      	cmp	r3, #0
 800d510:	f040 8099 	bne.w	800d646 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51c:	699a      	ldr	r2, [r3, #24]
 800d51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d520:	69db      	ldr	r3, [r3, #28]
 800d522:	3b02      	subs	r3, #2
 800d524:	429a      	cmp	r2, r3
 800d526:	d804      	bhi.n	800d532 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52a:	699a      	ldr	r2, [r3, #24]
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	601a      	str	r2, [r3, #0]
 800d530:	e089      	b.n	800d646 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d532:	2300      	movs	r3, #0
 800d534:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d128      	bne.n	800d590 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d53e:	2302      	movs	r3, #2
 800d540:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d544:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d546:	f107 0314 	add.w	r3, r7, #20
 800d54a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7fe f876 	bl	800b63e <get_fat>
 800d552:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d55a:	d103      	bne.n	800d564 <f_getfree+0x7c>
 800d55c:	2301      	movs	r3, #1
 800d55e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d562:	e063      	b.n	800d62c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d566:	2b01      	cmp	r3, #1
 800d568:	d103      	bne.n	800d572 <f_getfree+0x8a>
 800d56a:	2302      	movs	r3, #2
 800d56c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d570:	e05c      	b.n	800d62c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	2b00      	cmp	r3, #0
 800d576:	d102      	bne.n	800d57e <f_getfree+0x96>
 800d578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d57a:	3301      	adds	r3, #1
 800d57c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d580:	3301      	adds	r3, #1
 800d582:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d586:	69db      	ldr	r3, [r3, #28]
 800d588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d58a:	429a      	cmp	r2, r3
 800d58c:	d3db      	bcc.n	800d546 <f_getfree+0x5e>
 800d58e:	e04d      	b.n	800d62c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d592:	69db      	ldr	r3, [r3, #28]
 800d594:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d59a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d59c:	2300      	movs	r3, #0
 800d59e:	637b      	str	r3, [r7, #52]	; 0x34
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d113      	bne.n	800d5d2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d5aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	63ba      	str	r2, [r7, #56]	; 0x38
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	f7fd ff86 	bl	800b4c4 <move_window>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d5be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d131      	bne.n	800d62a <f_getfree+0x142>
							p = fs->win;
 800d5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c8:	3338      	adds	r3, #56	; 0x38
 800d5ca:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ce:	899b      	ldrh	r3, [r3, #12]
 800d5d0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	d10f      	bne.n	800d5fa <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d5da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5dc:	f7fd fc90 	bl	800af00 <ld_word>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d102      	bne.n	800d5ec <f_getfree+0x104>
 800d5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e8:	3301      	adds	r3, #1
 800d5ea:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ee:	3302      	adds	r3, #2
 800d5f0:	633b      	str	r3, [r7, #48]	; 0x30
 800d5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f4:	3b02      	subs	r3, #2
 800d5f6:	637b      	str	r3, [r7, #52]	; 0x34
 800d5f8:	e010      	b.n	800d61c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d5fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5fc:	f7fd fc98 	bl	800af30 <ld_dword>
 800d600:	4603      	mov	r3, r0
 800d602:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d606:	2b00      	cmp	r3, #0
 800d608:	d102      	bne.n	800d610 <f_getfree+0x128>
 800d60a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d60c:	3301      	adds	r3, #1
 800d60e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d612:	3304      	adds	r3, #4
 800d614:	633b      	str	r3, [r7, #48]	; 0x30
 800d616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d618:	3b04      	subs	r3, #4
 800d61a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d61e:	3b01      	subs	r3, #1
 800d620:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1bd      	bne.n	800d5a4 <f_getfree+0xbc>
 800d628:	e000      	b.n	800d62c <f_getfree+0x144>
							if (res != FR_OK) break;
 800d62a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d630:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d636:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	791a      	ldrb	r2, [r3, #4]
 800d63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63e:	f042 0201 	orr.w	r2, r2, #1
 800d642:	b2d2      	uxtb	r2, r2
 800d644:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d648:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800d64c:	4611      	mov	r1, r2
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fd fd6c 	bl	800b12c <unlock_fs>
 800d654:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3748      	adds	r7, #72	; 0x48
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d660:	b480      	push	{r7}
 800d662:	b087      	sub	sp, #28
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	4613      	mov	r3, r2
 800d66c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d66e:	2301      	movs	r3, #1
 800d670:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d672:	2300      	movs	r3, #0
 800d674:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d676:	4b1f      	ldr	r3, [pc, #124]	; (800d6f4 <FATFS_LinkDriverEx+0x94>)
 800d678:	7a5b      	ldrb	r3, [r3, #9]
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d131      	bne.n	800d6e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d680:	4b1c      	ldr	r3, [pc, #112]	; (800d6f4 <FATFS_LinkDriverEx+0x94>)
 800d682:	7a5b      	ldrb	r3, [r3, #9]
 800d684:	b2db      	uxtb	r3, r3
 800d686:	461a      	mov	r2, r3
 800d688:	4b1a      	ldr	r3, [pc, #104]	; (800d6f4 <FATFS_LinkDriverEx+0x94>)
 800d68a:	2100      	movs	r1, #0
 800d68c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d68e:	4b19      	ldr	r3, [pc, #100]	; (800d6f4 <FATFS_LinkDriverEx+0x94>)
 800d690:	7a5b      	ldrb	r3, [r3, #9]
 800d692:	b2db      	uxtb	r3, r3
 800d694:	4a17      	ldr	r2, [pc, #92]	; (800d6f4 <FATFS_LinkDriverEx+0x94>)
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	4413      	add	r3, r2
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d69e:	4b15      	ldr	r3, [pc, #84]	; (800d6f4 <FATFS_LinkDriverEx+0x94>)
 800d6a0:	7a5b      	ldrb	r3, [r3, #9]
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	4b13      	ldr	r3, [pc, #76]	; (800d6f4 <FATFS_LinkDriverEx+0x94>)
 800d6a8:	4413      	add	r3, r2
 800d6aa:	79fa      	ldrb	r2, [r7, #7]
 800d6ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d6ae:	4b11      	ldr	r3, [pc, #68]	; (800d6f4 <FATFS_LinkDriverEx+0x94>)
 800d6b0:	7a5b      	ldrb	r3, [r3, #9]
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	1c5a      	adds	r2, r3, #1
 800d6b6:	b2d1      	uxtb	r1, r2
 800d6b8:	4a0e      	ldr	r2, [pc, #56]	; (800d6f4 <FATFS_LinkDriverEx+0x94>)
 800d6ba:	7251      	strb	r1, [r2, #9]
 800d6bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d6be:	7dbb      	ldrb	r3, [r7, #22]
 800d6c0:	3330      	adds	r3, #48	; 0x30
 800d6c2:	b2da      	uxtb	r2, r3
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	223a      	movs	r2, #58	; 0x3a
 800d6ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	3302      	adds	r3, #2
 800d6d4:	222f      	movs	r2, #47	; 0x2f
 800d6d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	3303      	adds	r3, #3
 800d6dc:	2200      	movs	r2, #0
 800d6de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	371c      	adds	r7, #28
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	200049d4 	.word	0x200049d4

0800d6f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d702:	2200      	movs	r2, #0
 800d704:	6839      	ldr	r1, [r7, #0]
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7ff ffaa 	bl	800d660 <FATFS_LinkDriverEx>
 800d70c:	4603      	mov	r3, r0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800d716:	b580      	push	{r7, lr}
 800d718:	b084      	sub	sp, #16
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	4603      	mov	r3, r0
 800d71e:	6039      	str	r1, [r7, #0]
 800d720:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800d722:	2200      	movs	r2, #0
 800d724:	2101      	movs	r1, #1
 800d726:	2001      	movs	r0, #1
 800d728:	f000 fa56 	bl	800dbd8 <osSemaphoreNew>
 800d72c:	4602      	mov	r2, r0
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	bf14      	ite	ne
 800d73a:	2301      	movne	r3, #1
 800d73c:	2300      	moveq	r3, #0
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	60fb      	str	r3, [r7, #12]

    return ret;
 800d742:	68fb      	ldr	r3, [r7, #12]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 fb5f 	bl	800de18 <osSemaphoreDelete>
#endif
    return 1;
 800d75a:	2301      	movs	r3, #1
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800d76c:	2300      	movs	r3, #0
 800d76e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800d770:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 fab9 	bl	800dcec <osSemaphoreAcquire>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d101      	bne.n	800d784 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800d780:	2301      	movs	r3, #1
 800d782:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800d784:	68fb      	ldr	r3, [r7, #12]
}
 800d786:	4618      	mov	r0, r3
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b082      	sub	sp, #8
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 fafa 	bl	800dd90 <osSemaphoreRelease>
#endif
}
 800d79c:	bf00      	nop
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <__NVIC_SetPriority>:
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	6039      	str	r1, [r7, #0]
 800d7ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d7b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	db0a      	blt.n	800d7ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	490c      	ldr	r1, [pc, #48]	; (800d7f0 <__NVIC_SetPriority+0x4c>)
 800d7be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7c2:	0112      	lsls	r2, r2, #4
 800d7c4:	b2d2      	uxtb	r2, r2
 800d7c6:	440b      	add	r3, r1
 800d7c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d7cc:	e00a      	b.n	800d7e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	4908      	ldr	r1, [pc, #32]	; (800d7f4 <__NVIC_SetPriority+0x50>)
 800d7d4:	79fb      	ldrb	r3, [r7, #7]
 800d7d6:	f003 030f 	and.w	r3, r3, #15
 800d7da:	3b04      	subs	r3, #4
 800d7dc:	0112      	lsls	r2, r2, #4
 800d7de:	b2d2      	uxtb	r2, r2
 800d7e0:	440b      	add	r3, r1
 800d7e2:	761a      	strb	r2, [r3, #24]
}
 800d7e4:	bf00      	nop
 800d7e6:	370c      	adds	r7, #12
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr
 800d7f0:	e000e100 	.word	0xe000e100
 800d7f4:	e000ed00 	.word	0xe000ed00

0800d7f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d7fc:	2100      	movs	r1, #0
 800d7fe:	f06f 0004 	mvn.w	r0, #4
 800d802:	f7ff ffcf 	bl	800d7a4 <__NVIC_SetPriority>
#endif
}
 800d806:	bf00      	nop
 800d808:	bd80      	pop	{r7, pc}
	...

0800d80c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d812:	f3ef 8305 	mrs	r3, IPSR
 800d816:	603b      	str	r3, [r7, #0]
  return(result);
 800d818:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d003      	beq.n	800d826 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d81e:	f06f 0305 	mvn.w	r3, #5
 800d822:	607b      	str	r3, [r7, #4]
 800d824:	e00c      	b.n	800d840 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d826:	4b0a      	ldr	r3, [pc, #40]	; (800d850 <osKernelInitialize+0x44>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d105      	bne.n	800d83a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d82e:	4b08      	ldr	r3, [pc, #32]	; (800d850 <osKernelInitialize+0x44>)
 800d830:	2201      	movs	r2, #1
 800d832:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d834:	2300      	movs	r3, #0
 800d836:	607b      	str	r3, [r7, #4]
 800d838:	e002      	b.n	800d840 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d83a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d83e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d840:	687b      	ldr	r3, [r7, #4]
}
 800d842:	4618      	mov	r0, r3
 800d844:	370c      	adds	r7, #12
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr
 800d84e:	bf00      	nop
 800d850:	200049e0 	.word	0x200049e0

0800d854 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d85a:	f3ef 8305 	mrs	r3, IPSR
 800d85e:	603b      	str	r3, [r7, #0]
  return(result);
 800d860:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d862:	2b00      	cmp	r3, #0
 800d864:	d003      	beq.n	800d86e <osKernelStart+0x1a>
    stat = osErrorISR;
 800d866:	f06f 0305 	mvn.w	r3, #5
 800d86a:	607b      	str	r3, [r7, #4]
 800d86c:	e010      	b.n	800d890 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d86e:	4b0b      	ldr	r3, [pc, #44]	; (800d89c <osKernelStart+0x48>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	2b01      	cmp	r3, #1
 800d874:	d109      	bne.n	800d88a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d876:	f7ff ffbf 	bl	800d7f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d87a:	4b08      	ldr	r3, [pc, #32]	; (800d89c <osKernelStart+0x48>)
 800d87c:	2202      	movs	r2, #2
 800d87e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d880:	f002 f830 	bl	800f8e4 <vTaskStartScheduler>
      stat = osOK;
 800d884:	2300      	movs	r3, #0
 800d886:	607b      	str	r3, [r7, #4]
 800d888:	e002      	b.n	800d890 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d88a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d88e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d890:	687b      	ldr	r3, [r7, #4]
}
 800d892:	4618      	mov	r0, r3
 800d894:	3708      	adds	r7, #8
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	200049e0 	.word	0x200049e0

0800d8a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b08e      	sub	sp, #56	; 0x38
 800d8a4:	af04      	add	r7, sp, #16
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8b0:	f3ef 8305 	mrs	r3, IPSR
 800d8b4:	617b      	str	r3, [r7, #20]
  return(result);
 800d8b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d17e      	bne.n	800d9ba <osThreadNew+0x11a>
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d07b      	beq.n	800d9ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d8c2:	2380      	movs	r3, #128	; 0x80
 800d8c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d8c6:	2318      	movs	r3, #24
 800d8c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d8ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d045      	beq.n	800d966 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d002      	beq.n	800d8e8 <osThreadNew+0x48>
        name = attr->name;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d002      	beq.n	800d8f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	699b      	ldr	r3, [r3, #24]
 800d8f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d008      	beq.n	800d90e <osThreadNew+0x6e>
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	2b38      	cmp	r3, #56	; 0x38
 800d900:	d805      	bhi.n	800d90e <osThreadNew+0x6e>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	f003 0301 	and.w	r3, r3, #1
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d001      	beq.n	800d912 <osThreadNew+0x72>
        return (NULL);
 800d90e:	2300      	movs	r3, #0
 800d910:	e054      	b.n	800d9bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	695b      	ldr	r3, [r3, #20]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d003      	beq.n	800d922 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	695b      	ldr	r3, [r3, #20]
 800d91e:	089b      	lsrs	r3, r3, #2
 800d920:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00e      	beq.n	800d948 <osThreadNew+0xa8>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	2ba7      	cmp	r3, #167	; 0xa7
 800d930:	d90a      	bls.n	800d948 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d936:	2b00      	cmp	r3, #0
 800d938:	d006      	beq.n	800d948 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d002      	beq.n	800d948 <osThreadNew+0xa8>
        mem = 1;
 800d942:	2301      	movs	r3, #1
 800d944:	61bb      	str	r3, [r7, #24]
 800d946:	e010      	b.n	800d96a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d10c      	bne.n	800d96a <osThreadNew+0xca>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d108      	bne.n	800d96a <osThreadNew+0xca>
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d104      	bne.n	800d96a <osThreadNew+0xca>
          mem = 0;
 800d960:	2300      	movs	r3, #0
 800d962:	61bb      	str	r3, [r7, #24]
 800d964:	e001      	b.n	800d96a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d966:	2300      	movs	r3, #0
 800d968:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d96a:	69bb      	ldr	r3, [r7, #24]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d110      	bne.n	800d992 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d978:	9202      	str	r2, [sp, #8]
 800d97a:	9301      	str	r3, [sp, #4]
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	9300      	str	r3, [sp, #0]
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	6a3a      	ldr	r2, [r7, #32]
 800d984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f001 fd4e 	bl	800f428 <xTaskCreateStatic>
 800d98c:	4603      	mov	r3, r0
 800d98e:	613b      	str	r3, [r7, #16]
 800d990:	e013      	b.n	800d9ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d110      	bne.n	800d9ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d998:	6a3b      	ldr	r3, [r7, #32]
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	f107 0310 	add.w	r3, r7, #16
 800d9a0:	9301      	str	r3, [sp, #4]
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9aa:	68f8      	ldr	r0, [r7, #12]
 800d9ac:	f001 fd99 	bl	800f4e2 <xTaskCreate>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d001      	beq.n	800d9ba <osThreadNew+0x11a>
            hTask = NULL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d9ba:	693b      	ldr	r3, [r7, #16]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3728      	adds	r7, #40	; 0x28
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	f001 fee5 	bl	800f798 <vTaskDelete>
#endif
  for (;;);
 800d9ce:	e7fe      	b.n	800d9ce <osThreadExit+0xa>

0800d9d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9d8:	f3ef 8305 	mrs	r3, IPSR
 800d9dc:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d003      	beq.n	800d9ec <osDelay+0x1c>
    stat = osErrorISR;
 800d9e4:	f06f 0305 	mvn.w	r3, #5
 800d9e8:	60fb      	str	r3, [r7, #12]
 800d9ea:	e007      	b.n	800d9fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d002      	beq.n	800d9fc <osDelay+0x2c>
      vTaskDelay(ticks);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f001 ff40 	bl	800f87c <vTaskDelay>
    }
  }

  return (stat);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3710      	adds	r7, #16
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800da06:	b580      	push	{r7, lr}
 800da08:	b086      	sub	sp, #24
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800da0e:	2300      	movs	r3, #0
 800da10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da12:	f3ef 8305 	mrs	r3, IPSR
 800da16:	60fb      	str	r3, [r7, #12]
  return(result);
 800da18:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d12d      	bne.n	800da7a <osEventFlagsNew+0x74>
    mem = -1;
 800da1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da22:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d015      	beq.n	800da56 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d006      	beq.n	800da40 <osEventFlagsNew+0x3a>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	2b1f      	cmp	r3, #31
 800da38:	d902      	bls.n	800da40 <osEventFlagsNew+0x3a>
        mem = 1;
 800da3a:	2301      	movs	r3, #1
 800da3c:	613b      	str	r3, [r7, #16]
 800da3e:	e00c      	b.n	800da5a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d108      	bne.n	800da5a <osEventFlagsNew+0x54>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d104      	bne.n	800da5a <osEventFlagsNew+0x54>
          mem = 0;
 800da50:	2300      	movs	r3, #0
 800da52:	613b      	str	r3, [r7, #16]
 800da54:	e001      	b.n	800da5a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800da56:	2300      	movs	r3, #0
 800da58:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	d106      	bne.n	800da6e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	4618      	mov	r0, r3
 800da66:	f000 fa2f 	bl	800dec8 <xEventGroupCreateStatic>
 800da6a:	6178      	str	r0, [r7, #20]
 800da6c:	e005      	b.n	800da7a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d102      	bne.n	800da7a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800da74:	f000 fa5f 	bl	800df36 <xEventGroupCreate>
 800da78:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800da7a:	697b      	ldr	r3, [r7, #20]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3718      	adds	r7, #24
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d004      	beq.n	800daa2 <osEventFlagsSet+0x1e>
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d003      	beq.n	800daaa <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800daa2:	f06f 0303 	mvn.w	r3, #3
 800daa6:	617b      	str	r3, [r7, #20]
 800daa8:	e028      	b.n	800dafc <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daaa:	f3ef 8305 	mrs	r3, IPSR
 800daae:	60fb      	str	r3, [r7, #12]
  return(result);
 800dab0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d01d      	beq.n	800daf2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800dab6:	2300      	movs	r3, #0
 800dab8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800daba:	f107 0308 	add.w	r3, r7, #8
 800dabe:	461a      	mov	r2, r3
 800dac0:	6839      	ldr	r1, [r7, #0]
 800dac2:	6938      	ldr	r0, [r7, #16]
 800dac4:	f000 fbda 	bl	800e27c <xEventGroupSetBitsFromISR>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d103      	bne.n	800dad6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800dace:	f06f 0302 	mvn.w	r3, #2
 800dad2:	617b      	str	r3, [r7, #20]
 800dad4:	e012      	b.n	800dafc <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00d      	beq.n	800dafc <osEventFlagsSet+0x78>
 800dae0:	4b09      	ldr	r3, [pc, #36]	; (800db08 <osEventFlagsSet+0x84>)
 800dae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	e004      	b.n	800dafc <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800daf2:	6839      	ldr	r1, [r7, #0]
 800daf4:	6938      	ldr	r0, [r7, #16]
 800daf6:	f000 fb07 	bl	800e108 <xEventGroupSetBits>
 800dafa:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800dafc:	697b      	ldr	r3, [r7, #20]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3718      	adds	r7, #24
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	e000ed04 	.word	0xe000ed04

0800db0c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08c      	sub	sp, #48	; 0x30
 800db10:	af02      	add	r7, sp, #8
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
 800db18:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d004      	beq.n	800db2e <osEventFlagsWait+0x22>
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d003      	beq.n	800db36 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800db2e:	f06f 0303 	mvn.w	r3, #3
 800db32:	61fb      	str	r3, [r7, #28]
 800db34:	e04b      	b.n	800dbce <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db36:	f3ef 8305 	mrs	r3, IPSR
 800db3a:	617b      	str	r3, [r7, #20]
  return(result);
 800db3c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d003      	beq.n	800db4a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800db42:	f06f 0305 	mvn.w	r3, #5
 800db46:	61fb      	str	r3, [r7, #28]
 800db48:	e041      	b.n	800dbce <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800db54:	2301      	movs	r3, #1
 800db56:	627b      	str	r3, [r7, #36]	; 0x24
 800db58:	e001      	b.n	800db5e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800db5a:	2300      	movs	r3, #0
 800db5c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f003 0302 	and.w	r3, r3, #2
 800db64:	2b00      	cmp	r3, #0
 800db66:	d002      	beq.n	800db6e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800db68:	2300      	movs	r3, #0
 800db6a:	623b      	str	r3, [r7, #32]
 800db6c:	e001      	b.n	800db72 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800db6e:	2301      	movs	r3, #1
 800db70:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db78:	6a3a      	ldr	r2, [r7, #32]
 800db7a:	68b9      	ldr	r1, [r7, #8]
 800db7c:	69b8      	ldr	r0, [r7, #24]
 800db7e:	f000 f9f5 	bl	800df6c <xEventGroupWaitBits>
 800db82:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f003 0301 	and.w	r3, r3, #1
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d010      	beq.n	800dbb0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800db8e:	68ba      	ldr	r2, [r7, #8]
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	4013      	ands	r3, r2
 800db94:	68ba      	ldr	r2, [r7, #8]
 800db96:	429a      	cmp	r2, r3
 800db98:	d019      	beq.n	800dbce <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d003      	beq.n	800dba8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800dba0:	f06f 0301 	mvn.w	r3, #1
 800dba4:	61fb      	str	r3, [r7, #28]
 800dba6:	e012      	b.n	800dbce <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800dba8:	f06f 0302 	mvn.w	r3, #2
 800dbac:	61fb      	str	r3, [r7, #28]
 800dbae:	e00e      	b.n	800dbce <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d109      	bne.n	800dbce <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d003      	beq.n	800dbc8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800dbc0:	f06f 0301 	mvn.w	r3, #1
 800dbc4:	61fb      	str	r3, [r7, #28]
 800dbc6:	e002      	b.n	800dbce <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800dbc8:	f06f 0302 	mvn.w	r3, #2
 800dbcc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800dbce:	69fb      	ldr	r3, [r7, #28]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3728      	adds	r7, #40	; 0x28
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b08a      	sub	sp, #40	; 0x28
 800dbdc:	af02      	add	r7, sp, #8
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbe8:	f3ef 8305 	mrs	r3, IPSR
 800dbec:	613b      	str	r3, [r7, #16]
  return(result);
 800dbee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d175      	bne.n	800dce0 <osSemaphoreNew+0x108>
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d072      	beq.n	800dce0 <osSemaphoreNew+0x108>
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d86e      	bhi.n	800dce0 <osSemaphoreNew+0x108>
    mem = -1;
 800dc02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d015      	beq.n	800dc3a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	689b      	ldr	r3, [r3, #8]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d006      	beq.n	800dc24 <osSemaphoreNew+0x4c>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	2b4f      	cmp	r3, #79	; 0x4f
 800dc1c:	d902      	bls.n	800dc24 <osSemaphoreNew+0x4c>
        mem = 1;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	61bb      	str	r3, [r7, #24]
 800dc22:	e00c      	b.n	800dc3e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d108      	bne.n	800dc3e <osSemaphoreNew+0x66>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d104      	bne.n	800dc3e <osSemaphoreNew+0x66>
          mem = 0;
 800dc34:	2300      	movs	r3, #0
 800dc36:	61bb      	str	r3, [r7, #24]
 800dc38:	e001      	b.n	800dc3e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc44:	d04c      	beq.n	800dce0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d128      	bne.n	800dc9e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d10a      	bne.n	800dc68 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	2203      	movs	r2, #3
 800dc58:	9200      	str	r2, [sp, #0]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	2001      	movs	r0, #1
 800dc60:	f000 fc3c 	bl	800e4dc <xQueueGenericCreateStatic>
 800dc64:	61f8      	str	r0, [r7, #28]
 800dc66:	e005      	b.n	800dc74 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800dc68:	2203      	movs	r2, #3
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	2001      	movs	r0, #1
 800dc6e:	f000 fcad 	bl	800e5cc <xQueueGenericCreate>
 800dc72:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d022      	beq.n	800dcc0 <osSemaphoreNew+0xe8>
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d01f      	beq.n	800dcc0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dc80:	2300      	movs	r3, #0
 800dc82:	2200      	movs	r2, #0
 800dc84:	2100      	movs	r1, #0
 800dc86:	69f8      	ldr	r0, [r7, #28]
 800dc88:	f000 fd68 	bl	800e75c <xQueueGenericSend>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d016      	beq.n	800dcc0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800dc92:	69f8      	ldr	r0, [r7, #28]
 800dc94:	f001 f9f4 	bl	800f080 <vQueueDelete>
            hSemaphore = NULL;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	61fb      	str	r3, [r7, #28]
 800dc9c:	e010      	b.n	800dcc0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d108      	bne.n	800dcb6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	689b      	ldr	r3, [r3, #8]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	68b9      	ldr	r1, [r7, #8]
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f000 fcea 	bl	800e686 <xQueueCreateCountingSemaphoreStatic>
 800dcb2:	61f8      	str	r0, [r7, #28]
 800dcb4:	e004      	b.n	800dcc0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800dcb6:	68b9      	ldr	r1, [r7, #8]
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f000 fd1b 	bl	800e6f4 <xQueueCreateCountingSemaphore>
 800dcbe:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00c      	beq.n	800dce0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d003      	beq.n	800dcd4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	617b      	str	r3, [r7, #20]
 800dcd2:	e001      	b.n	800dcd8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800dcd8:	6979      	ldr	r1, [r7, #20]
 800dcda:	69f8      	ldr	r0, [r7, #28]
 800dcdc:	f001 fb1c 	bl	800f318 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800dce0:	69fb      	ldr	r3, [r7, #28]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3720      	adds	r7, #32
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
	...

0800dcec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d103      	bne.n	800dd0c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800dd04:	f06f 0303 	mvn.w	r3, #3
 800dd08:	617b      	str	r3, [r7, #20]
 800dd0a:	e039      	b.n	800dd80 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd0c:	f3ef 8305 	mrs	r3, IPSR
 800dd10:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd12:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d022      	beq.n	800dd5e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d003      	beq.n	800dd26 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800dd1e:	f06f 0303 	mvn.w	r3, #3
 800dd22:	617b      	str	r3, [r7, #20]
 800dd24:	e02c      	b.n	800dd80 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800dd26:	2300      	movs	r3, #0
 800dd28:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dd2a:	f107 0308 	add.w	r3, r7, #8
 800dd2e:	461a      	mov	r2, r3
 800dd30:	2100      	movs	r1, #0
 800dd32:	6938      	ldr	r0, [r7, #16]
 800dd34:	f001 f924 	bl	800ef80 <xQueueReceiveFromISR>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d003      	beq.n	800dd46 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800dd3e:	f06f 0302 	mvn.w	r3, #2
 800dd42:	617b      	str	r3, [r7, #20]
 800dd44:	e01c      	b.n	800dd80 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d019      	beq.n	800dd80 <osSemaphoreAcquire+0x94>
 800dd4c:	4b0f      	ldr	r3, [pc, #60]	; (800dd8c <osSemaphoreAcquire+0xa0>)
 800dd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd52:	601a      	str	r2, [r3, #0]
 800dd54:	f3bf 8f4f 	dsb	sy
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	e010      	b.n	800dd80 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800dd5e:	6839      	ldr	r1, [r7, #0]
 800dd60:	6938      	ldr	r0, [r7, #16]
 800dd62:	f001 f801 	bl	800ed68 <xQueueSemaphoreTake>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d009      	beq.n	800dd80 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800dd72:	f06f 0301 	mvn.w	r3, #1
 800dd76:	617b      	str	r3, [r7, #20]
 800dd78:	e002      	b.n	800dd80 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800dd7a:	f06f 0302 	mvn.w	r3, #2
 800dd7e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800dd80:	697b      	ldr	r3, [r7, #20]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3718      	adds	r7, #24
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	e000ed04 	.word	0xe000ed04

0800dd90 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d103      	bne.n	800ddae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800dda6:	f06f 0303 	mvn.w	r3, #3
 800ddaa:	617b      	str	r3, [r7, #20]
 800ddac:	e02c      	b.n	800de08 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddae:	f3ef 8305 	mrs	r3, IPSR
 800ddb2:	60fb      	str	r3, [r7, #12]
  return(result);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d01a      	beq.n	800ddf0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ddbe:	f107 0308 	add.w	r3, r7, #8
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	6938      	ldr	r0, [r7, #16]
 800ddc6:	f000 fe62 	bl	800ea8e <xQueueGiveFromISR>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d003      	beq.n	800ddd8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ddd0:	f06f 0302 	mvn.w	r3, #2
 800ddd4:	617b      	str	r3, [r7, #20]
 800ddd6:	e017      	b.n	800de08 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d014      	beq.n	800de08 <osSemaphoreRelease+0x78>
 800ddde:	4b0d      	ldr	r3, [pc, #52]	; (800de14 <osSemaphoreRelease+0x84>)
 800dde0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dde4:	601a      	str	r2, [r3, #0]
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	f3bf 8f6f 	isb	sy
 800ddee:	e00b      	b.n	800de08 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	6938      	ldr	r0, [r7, #16]
 800ddf8:	f000 fcb0 	bl	800e75c <xQueueGenericSend>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d002      	beq.n	800de08 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800de02:	f06f 0302 	mvn.w	r3, #2
 800de06:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800de08:	697b      	ldr	r3, [r7, #20]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	e000ed04 	.word	0xe000ed04

0800de18 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de24:	f3ef 8305 	mrs	r3, IPSR
 800de28:	60fb      	str	r3, [r7, #12]
  return(result);
 800de2a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d003      	beq.n	800de38 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800de30:	f06f 0305 	mvn.w	r3, #5
 800de34:	617b      	str	r3, [r7, #20]
 800de36:	e00e      	b.n	800de56 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d103      	bne.n	800de46 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800de3e:	f06f 0303 	mvn.w	r3, #3
 800de42:	617b      	str	r3, [r7, #20]
 800de44:	e007      	b.n	800de56 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800de46:	6938      	ldr	r0, [r7, #16]
 800de48:	f001 fa90 	bl	800f36c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800de50:	6938      	ldr	r0, [r7, #16]
 800de52:	f001 f915 	bl	800f080 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800de56:	697b      	ldr	r3, [r7, #20]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3718      	adds	r7, #24
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de60:	b480      	push	{r7}
 800de62:	b085      	sub	sp, #20
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	4a07      	ldr	r2, [pc, #28]	; (800de8c <vApplicationGetIdleTaskMemory+0x2c>)
 800de70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	4a06      	ldr	r2, [pc, #24]	; (800de90 <vApplicationGetIdleTaskMemory+0x30>)
 800de76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2280      	movs	r2, #128	; 0x80
 800de7c:	601a      	str	r2, [r3, #0]
}
 800de7e:	bf00      	nop
 800de80:	3714      	adds	r7, #20
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	200049e4 	.word	0x200049e4
 800de90:	20004a8c 	.word	0x20004a8c

0800de94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de94:	b480      	push	{r7}
 800de96:	b085      	sub	sp, #20
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	4a07      	ldr	r2, [pc, #28]	; (800dec0 <vApplicationGetTimerTaskMemory+0x2c>)
 800dea4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	4a06      	ldr	r2, [pc, #24]	; (800dec4 <vApplicationGetTimerTaskMemory+0x30>)
 800deaa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800deb2:	601a      	str	r2, [r3, #0]
}
 800deb4:	bf00      	nop
 800deb6:	3714      	adds	r7, #20
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr
 800dec0:	20004c8c 	.word	0x20004c8c
 800dec4:	20004d34 	.word	0x20004d34

0800dec8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b086      	sub	sp, #24
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d10a      	bne.n	800deec <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ded6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deda:	f383 8811 	msr	BASEPRI, r3
 800dede:	f3bf 8f6f 	isb	sy
 800dee2:	f3bf 8f4f 	dsb	sy
 800dee6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dee8:	bf00      	nop
 800deea:	e7fe      	b.n	800deea <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800deec:	2320      	movs	r3, #32
 800deee:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	2b20      	cmp	r3, #32
 800def4:	d00a      	beq.n	800df0c <xEventGroupCreateStatic+0x44>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	60fb      	str	r3, [r7, #12]
}
 800df08:	bf00      	nop
 800df0a:	e7fe      	b.n	800df0a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00a      	beq.n	800df2c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	2200      	movs	r2, #0
 800df1a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	3304      	adds	r3, #4
 800df20:	4618      	mov	r0, r3
 800df22:	f000 f9bf 	bl	800e2a4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	2201      	movs	r2, #1
 800df2a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800df2c:	697b      	ldr	r3, [r7, #20]
	}
 800df2e:	4618      	mov	r0, r3
 800df30:	3718      	adds	r7, #24
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800df36:	b580      	push	{r7, lr}
 800df38:	b082      	sub	sp, #8
 800df3a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800df3c:	2020      	movs	r0, #32
 800df3e:	f003 f97b 	bl	8011238 <pvPortMalloc>
 800df42:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00a      	beq.n	800df60 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2200      	movs	r2, #0
 800df4e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	3304      	adds	r3, #4
 800df54:	4618      	mov	r0, r3
 800df56:	f000 f9a5 	bl	800e2a4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800df60:	687b      	ldr	r3, [r7, #4]
	}
 800df62:	4618      	mov	r0, r3
 800df64:	3708      	adds	r7, #8
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
	...

0800df6c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b090      	sub	sp, #64	; 0x40
 800df70:	af00      	add	r7, sp, #0
 800df72:	60f8      	str	r0, [r7, #12]
 800df74:	60b9      	str	r1, [r7, #8]
 800df76:	607a      	str	r2, [r7, #4]
 800df78:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800df7e:	2300      	movs	r3, #0
 800df80:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800df82:	2300      	movs	r3, #0
 800df84:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d10a      	bne.n	800dfa2 <xEventGroupWaitBits+0x36>
	__asm volatile
 800df8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df90:	f383 8811 	msr	BASEPRI, r3
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	623b      	str	r3, [r7, #32]
}
 800df9e:	bf00      	nop
 800dfa0:	e7fe      	b.n	800dfa0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00a      	beq.n	800dfc2 <xEventGroupWaitBits+0x56>
	__asm volatile
 800dfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb0:	f383 8811 	msr	BASEPRI, r3
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	61fb      	str	r3, [r7, #28]
}
 800dfbe:	bf00      	nop
 800dfc0:	e7fe      	b.n	800dfc0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d10a      	bne.n	800dfde <xEventGroupWaitBits+0x72>
	__asm volatile
 800dfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfcc:	f383 8811 	msr	BASEPRI, r3
 800dfd0:	f3bf 8f6f 	isb	sy
 800dfd4:	f3bf 8f4f 	dsb	sy
 800dfd8:	61bb      	str	r3, [r7, #24]
}
 800dfda:	bf00      	nop
 800dfdc:	e7fe      	b.n	800dfdc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dfde:	f002 f97b 	bl	80102d8 <xTaskGetSchedulerState>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d102      	bne.n	800dfee <xEventGroupWaitBits+0x82>
 800dfe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d101      	bne.n	800dff2 <xEventGroupWaitBits+0x86>
 800dfee:	2301      	movs	r3, #1
 800dff0:	e000      	b.n	800dff4 <xEventGroupWaitBits+0x88>
 800dff2:	2300      	movs	r3, #0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d10a      	bne.n	800e00e <xEventGroupWaitBits+0xa2>
	__asm volatile
 800dff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	617b      	str	r3, [r7, #20]
}
 800e00a:	bf00      	nop
 800e00c:	e7fe      	b.n	800e00c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800e00e:	f001 fcd9 	bl	800f9c4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800e012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800e018:	683a      	ldr	r2, [r7, #0]
 800e01a:	68b9      	ldr	r1, [r7, #8]
 800e01c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e01e:	f000 f90b 	bl	800e238 <prvTestWaitCondition>
 800e022:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800e024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00e      	beq.n	800e048 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800e02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800e02e:	2300      	movs	r3, #0
 800e030:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d028      	beq.n	800e08a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	43db      	mvns	r3, r3
 800e040:	401a      	ands	r2, r3
 800e042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e044:	601a      	str	r2, [r3, #0]
 800e046:	e020      	b.n	800e08a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800e048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d104      	bne.n	800e058 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800e04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e050:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800e052:	2301      	movs	r3, #1
 800e054:	633b      	str	r3, [r7, #48]	; 0x30
 800e056:	e018      	b.n	800e08a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d003      	beq.n	800e066 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800e05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e060:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e064:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d003      	beq.n	800e074 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800e06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e072:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800e074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e076:	1d18      	adds	r0, r3, #4
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07c:	4313      	orrs	r3, r2
 800e07e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e080:	4619      	mov	r1, r3
 800e082:	f001 fe9d 	bl	800fdc0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800e086:	2300      	movs	r3, #0
 800e088:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800e08a:	f001 fca9 	bl	800f9e0 <xTaskResumeAll>
 800e08e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800e090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e092:	2b00      	cmp	r3, #0
 800e094:	d031      	beq.n	800e0fa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800e096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d107      	bne.n	800e0ac <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800e09c:	4b19      	ldr	r3, [pc, #100]	; (800e104 <xEventGroupWaitBits+0x198>)
 800e09e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0a2:	601a      	str	r2, [r3, #0]
 800e0a4:	f3bf 8f4f 	dsb	sy
 800e0a8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800e0ac:	f002 fa8a 	bl	80105c4 <uxTaskResetEventItemValue>
 800e0b0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800e0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d11a      	bne.n	800e0f2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800e0bc:	f002 ff9a 	bl	8010ff4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800e0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800e0c6:	683a      	ldr	r2, [r7, #0]
 800e0c8:	68b9      	ldr	r1, [r7, #8]
 800e0ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e0cc:	f000 f8b4 	bl	800e238 <prvTestWaitCondition>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d009      	beq.n	800e0ea <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d006      	beq.n	800e0ea <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800e0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	43db      	mvns	r3, r3
 800e0e4:	401a      	ands	r2, r3
 800e0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0e8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800e0ee:	f002 ffb1 	bl	8011054 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800e0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3740      	adds	r7, #64	; 0x40
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	e000ed04 	.word	0xe000ed04

0800e108 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08e      	sub	sp, #56	; 0x38
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800e112:	2300      	movs	r3, #0
 800e114:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800e11a:	2300      	movs	r3, #0
 800e11c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10a      	bne.n	800e13a <xEventGroupSetBits+0x32>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	613b      	str	r3, [r7, #16]
}
 800e136:	bf00      	nop
 800e138:	e7fe      	b.n	800e138 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e140:	2b00      	cmp	r3, #0
 800e142:	d00a      	beq.n	800e15a <xEventGroupSetBits+0x52>
	__asm volatile
 800e144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	60fb      	str	r3, [r7, #12]
}
 800e156:	bf00      	nop
 800e158:	e7fe      	b.n	800e158 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800e15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15c:	3304      	adds	r3, #4
 800e15e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e162:	3308      	adds	r3, #8
 800e164:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800e166:	f001 fc2d 	bl	800f9c4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800e16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800e170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	431a      	orrs	r2, r3
 800e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800e17c:	e03c      	b.n	800e1f8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800e17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800e184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800e18a:	2300      	movs	r3, #0
 800e18c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e194:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e19c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d108      	bne.n	800e1ba <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800e1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	4013      	ands	r3, r2
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00b      	beq.n	800e1cc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1b8:	e008      	b.n	800e1cc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800e1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	4013      	ands	r3, r2
 800e1c2:	69ba      	ldr	r2, [r7, #24]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d101      	bne.n	800e1cc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800e1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d010      	beq.n	800e1f4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d003      	beq.n	800e1e4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800e1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800e1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e1f0:	f001 feb2 	bl	800ff58 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800e1f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1fa:	6a3b      	ldr	r3, [r7, #32]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d1be      	bne.n	800e17e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800e200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e206:	43db      	mvns	r3, r3
 800e208:	401a      	ands	r2, r3
 800e20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800e20e:	f001 fbe7 	bl	800f9e0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800e212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e214:	681b      	ldr	r3, [r3, #0]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3738      	adds	r7, #56	; 0x38
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800e21e:	b580      	push	{r7, lr}
 800e220:	b082      	sub	sp, #8
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
 800e226:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800e228:	6839      	ldr	r1, [r7, #0]
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7ff ff6c 	bl	800e108 <xEventGroupSetBits>
}
 800e230:	bf00      	nop
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800e238:	b480      	push	{r7}
 800e23a:	b087      	sub	sp, #28
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800e244:	2300      	movs	r3, #0
 800e246:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d107      	bne.n	800e25e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800e24e:	68fa      	ldr	r2, [r7, #12]
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	4013      	ands	r3, r2
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00a      	beq.n	800e26e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e258:	2301      	movs	r3, #1
 800e25a:	617b      	str	r3, [r7, #20]
 800e25c:	e007      	b.n	800e26e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800e25e:	68fa      	ldr	r2, [r7, #12]
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	4013      	ands	r3, r2
 800e264:	68ba      	ldr	r2, [r7, #8]
 800e266:	429a      	cmp	r2, r3
 800e268:	d101      	bne.n	800e26e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800e26a:	2301      	movs	r3, #1
 800e26c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800e26e:	697b      	ldr	r3, [r7, #20]
}
 800e270:	4618      	mov	r0, r3
 800e272:	371c      	adds	r7, #28
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b086      	sub	sp, #24
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	68ba      	ldr	r2, [r7, #8]
 800e28c:	68f9      	ldr	r1, [r7, #12]
 800e28e:	4804      	ldr	r0, [pc, #16]	; (800e2a0 <xEventGroupSetBitsFromISR+0x24>)
 800e290:	f002 fd66 	bl	8010d60 <xTimerPendFunctionCallFromISR>
 800e294:	6178      	str	r0, [r7, #20]

		return xReturn;
 800e296:	697b      	ldr	r3, [r7, #20]
	}
 800e298:	4618      	mov	r0, r3
 800e29a:	3718      	adds	r7, #24
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	0800e21f 	.word	0x0800e21f

0800e2a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b083      	sub	sp, #12
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f103 0208 	add.w	r2, r3, #8
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f103 0208 	add.w	r2, r3, #8
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f103 0208 	add.w	r2, r3, #8
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e2d8:	bf00      	nop
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr

0800e2e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e2f2:	bf00      	nop
 800e2f4:	370c      	adds	r7, #12
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr

0800e2fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e2fe:	b480      	push	{r7}
 800e300:	b085      	sub	sp, #20
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	68fa      	ldr	r2, [r7, #12]
 800e312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	689a      	ldr	r2, [r3, #8]
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	683a      	ldr	r2, [r7, #0]
 800e322:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	683a      	ldr	r2, [r7, #0]
 800e328:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	1c5a      	adds	r2, r3, #1
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	601a      	str	r2, [r3, #0]
}
 800e33a:	bf00      	nop
 800e33c:	3714      	adds	r7, #20
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr

0800e346 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e346:	b480      	push	{r7}
 800e348:	b085      	sub	sp, #20
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]
 800e34e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e35c:	d103      	bne.n	800e366 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	691b      	ldr	r3, [r3, #16]
 800e362:	60fb      	str	r3, [r7, #12]
 800e364:	e00c      	b.n	800e380 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	3308      	adds	r3, #8
 800e36a:	60fb      	str	r3, [r7, #12]
 800e36c:	e002      	b.n	800e374 <vListInsert+0x2e>
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	60fb      	str	r3, [r7, #12]
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68ba      	ldr	r2, [r7, #8]
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d2f6      	bcs.n	800e36e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	685a      	ldr	r2, [r3, #4]
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	683a      	ldr	r2, [r7, #0]
 800e38e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	68fa      	ldr	r2, [r7, #12]
 800e394:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	683a      	ldr	r2, [r7, #0]
 800e39a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	1c5a      	adds	r2, r3, #1
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	601a      	str	r2, [r3, #0]
}
 800e3ac:	bf00      	nop
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	6892      	ldr	r2, [r2, #8]
 800e3ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	6852      	ldr	r2, [r2, #4]
 800e3d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d103      	bne.n	800e3ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	689a      	ldr	r2, [r3, #8]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	1e5a      	subs	r2, r3, #1
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
}
 800e400:	4618      	mov	r0, r3
 800e402:	3714      	adds	r7, #20
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10a      	bne.n	800e436 <xQueueGenericReset+0x2a>
	__asm volatile
 800e420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e424:	f383 8811 	msr	BASEPRI, r3
 800e428:	f3bf 8f6f 	isb	sy
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	60bb      	str	r3, [r7, #8]
}
 800e432:	bf00      	nop
 800e434:	e7fe      	b.n	800e434 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e436:	f002 fddd 	bl	8010ff4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e442:	68f9      	ldr	r1, [r7, #12]
 800e444:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e446:	fb01 f303 	mul.w	r3, r1, r3
 800e44a:	441a      	add	r2, r3
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2200      	movs	r2, #0
 800e454:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e466:	3b01      	subs	r3, #1
 800e468:	68f9      	ldr	r1, [r7, #12]
 800e46a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e46c:	fb01 f303 	mul.w	r3, r1, r3
 800e470:	441a      	add	r2, r3
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	22ff      	movs	r2, #255	; 0xff
 800e47a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	22ff      	movs	r2, #255	; 0xff
 800e482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d114      	bne.n	800e4b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	691b      	ldr	r3, [r3, #16]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d01a      	beq.n	800e4ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	3310      	adds	r3, #16
 800e498:	4618      	mov	r0, r3
 800e49a:	f001 fcf9 	bl	800fe90 <xTaskRemoveFromEventList>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d012      	beq.n	800e4ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e4a4:	4b0c      	ldr	r3, [pc, #48]	; (800e4d8 <xQueueGenericReset+0xcc>)
 800e4a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4aa:	601a      	str	r2, [r3, #0]
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	f3bf 8f6f 	isb	sy
 800e4b4:	e009      	b.n	800e4ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	3310      	adds	r3, #16
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7ff fef2 	bl	800e2a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	3324      	adds	r3, #36	; 0x24
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7ff feed 	bl	800e2a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e4ca:	f002 fdc3 	bl	8011054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e4ce:	2301      	movs	r3, #1
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3710      	adds	r7, #16
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	e000ed04 	.word	0xe000ed04

0800e4dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b08e      	sub	sp, #56	; 0x38
 800e4e0:	af02      	add	r7, sp, #8
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	607a      	str	r2, [r7, #4]
 800e4e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d10a      	bne.n	800e506 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f4:	f383 8811 	msr	BASEPRI, r3
 800e4f8:	f3bf 8f6f 	isb	sy
 800e4fc:	f3bf 8f4f 	dsb	sy
 800e500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e502:	bf00      	nop
 800e504:	e7fe      	b.n	800e504 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d10a      	bne.n	800e522 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e510:	f383 8811 	msr	BASEPRI, r3
 800e514:	f3bf 8f6f 	isb	sy
 800e518:	f3bf 8f4f 	dsb	sy
 800e51c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e51e:	bf00      	nop
 800e520:	e7fe      	b.n	800e520 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d002      	beq.n	800e52e <xQueueGenericCreateStatic+0x52>
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d001      	beq.n	800e532 <xQueueGenericCreateStatic+0x56>
 800e52e:	2301      	movs	r3, #1
 800e530:	e000      	b.n	800e534 <xQueueGenericCreateStatic+0x58>
 800e532:	2300      	movs	r3, #0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d10a      	bne.n	800e54e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53c:	f383 8811 	msr	BASEPRI, r3
 800e540:	f3bf 8f6f 	isb	sy
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	623b      	str	r3, [r7, #32]
}
 800e54a:	bf00      	nop
 800e54c:	e7fe      	b.n	800e54c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d102      	bne.n	800e55a <xQueueGenericCreateStatic+0x7e>
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d101      	bne.n	800e55e <xQueueGenericCreateStatic+0x82>
 800e55a:	2301      	movs	r3, #1
 800e55c:	e000      	b.n	800e560 <xQueueGenericCreateStatic+0x84>
 800e55e:	2300      	movs	r3, #0
 800e560:	2b00      	cmp	r3, #0
 800e562:	d10a      	bne.n	800e57a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e568:	f383 8811 	msr	BASEPRI, r3
 800e56c:	f3bf 8f6f 	isb	sy
 800e570:	f3bf 8f4f 	dsb	sy
 800e574:	61fb      	str	r3, [r7, #28]
}
 800e576:	bf00      	nop
 800e578:	e7fe      	b.n	800e578 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e57a:	2350      	movs	r3, #80	; 0x50
 800e57c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	2b50      	cmp	r3, #80	; 0x50
 800e582:	d00a      	beq.n	800e59a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e588:	f383 8811 	msr	BASEPRI, r3
 800e58c:	f3bf 8f6f 	isb	sy
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	61bb      	str	r3, [r7, #24]
}
 800e596:	bf00      	nop
 800e598:	e7fe      	b.n	800e598 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e59a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00d      	beq.n	800e5c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e5ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	68b9      	ldr	r1, [r7, #8]
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f000 f83f 	bl	800e640 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3730      	adds	r7, #48	; 0x30
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b08a      	sub	sp, #40	; 0x28
 800e5d0:	af02      	add	r7, sp, #8
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d10a      	bne.n	800e5f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e4:	f383 8811 	msr	BASEPRI, r3
 800e5e8:	f3bf 8f6f 	isb	sy
 800e5ec:	f3bf 8f4f 	dsb	sy
 800e5f0:	613b      	str	r3, [r7, #16]
}
 800e5f2:	bf00      	nop
 800e5f4:	e7fe      	b.n	800e5f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	68ba      	ldr	r2, [r7, #8]
 800e5fa:	fb02 f303 	mul.w	r3, r2, r3
 800e5fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	3350      	adds	r3, #80	; 0x50
 800e604:	4618      	mov	r0, r3
 800e606:	f002 fe17 	bl	8011238 <pvPortMalloc>
 800e60a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d011      	beq.n	800e636 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	3350      	adds	r3, #80	; 0x50
 800e61a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e61c:	69bb      	ldr	r3, [r7, #24]
 800e61e:	2200      	movs	r2, #0
 800e620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e624:	79fa      	ldrb	r2, [r7, #7]
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	9300      	str	r3, [sp, #0]
 800e62a:	4613      	mov	r3, r2
 800e62c:	697a      	ldr	r2, [r7, #20]
 800e62e:	68b9      	ldr	r1, [r7, #8]
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f000 f805 	bl	800e640 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e636:	69bb      	ldr	r3, [r7, #24]
	}
 800e638:	4618      	mov	r0, r3
 800e63a:	3720      	adds	r7, #32
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
 800e64c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d103      	bne.n	800e65c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e654:	69bb      	ldr	r3, [r7, #24]
 800e656:	69ba      	ldr	r2, [r7, #24]
 800e658:	601a      	str	r2, [r3, #0]
 800e65a:	e002      	b.n	800e662 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e66e:	2101      	movs	r1, #1
 800e670:	69b8      	ldr	r0, [r7, #24]
 800e672:	f7ff fecb 	bl	800e40c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	78fa      	ldrb	r2, [r7, #3]
 800e67a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e67e:	bf00      	nop
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e686:	b580      	push	{r7, lr}
 800e688:	b08a      	sub	sp, #40	; 0x28
 800e68a:	af02      	add	r7, sp, #8
 800e68c:	60f8      	str	r0, [r7, #12]
 800e68e:	60b9      	str	r1, [r7, #8]
 800e690:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d10a      	bne.n	800e6ae <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69c:	f383 8811 	msr	BASEPRI, r3
 800e6a0:	f3bf 8f6f 	isb	sy
 800e6a4:	f3bf 8f4f 	dsb	sy
 800e6a8:	61bb      	str	r3, [r7, #24]
}
 800e6aa:	bf00      	nop
 800e6ac:	e7fe      	b.n	800e6ac <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e6ae:	68ba      	ldr	r2, [r7, #8]
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d90a      	bls.n	800e6cc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ba:	f383 8811 	msr	BASEPRI, r3
 800e6be:	f3bf 8f6f 	isb	sy
 800e6c2:	f3bf 8f4f 	dsb	sy
 800e6c6:	617b      	str	r3, [r7, #20]
}
 800e6c8:	bf00      	nop
 800e6ca:	e7fe      	b.n	800e6ca <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e6cc:	2302      	movs	r3, #2
 800e6ce:	9300      	str	r3, [sp, #0]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	68f8      	ldr	r0, [r7, #12]
 800e6d8:	f7ff ff00 	bl	800e4dc <xQueueGenericCreateStatic>
 800e6dc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d002      	beq.n	800e6ea <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e6ea:	69fb      	ldr	r3, [r7, #28]
	}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3720      	adds	r7, #32
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10a      	bne.n	800e71a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e708:	f383 8811 	msr	BASEPRI, r3
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f3bf 8f4f 	dsb	sy
 800e714:	613b      	str	r3, [r7, #16]
}
 800e716:	bf00      	nop
 800e718:	e7fe      	b.n	800e718 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e71a:	683a      	ldr	r2, [r7, #0]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d90a      	bls.n	800e738 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e726:	f383 8811 	msr	BASEPRI, r3
 800e72a:	f3bf 8f6f 	isb	sy
 800e72e:	f3bf 8f4f 	dsb	sy
 800e732:	60fb      	str	r3, [r7, #12]
}
 800e734:	bf00      	nop
 800e736:	e7fe      	b.n	800e736 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e738:	2202      	movs	r2, #2
 800e73a:	2100      	movs	r1, #0
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7ff ff45 	bl	800e5cc <xQueueGenericCreate>
 800e742:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d002      	beq.n	800e750 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	683a      	ldr	r2, [r7, #0]
 800e74e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e750:	697b      	ldr	r3, [r7, #20]
	}
 800e752:	4618      	mov	r0, r3
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
	...

0800e75c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b08e      	sub	sp, #56	; 0x38
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	607a      	str	r2, [r7, #4]
 800e768:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e76a:	2300      	movs	r3, #0
 800e76c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e774:	2b00      	cmp	r3, #0
 800e776:	d10a      	bne.n	800e78e <xQueueGenericSend+0x32>
	__asm volatile
 800e778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77c:	f383 8811 	msr	BASEPRI, r3
 800e780:	f3bf 8f6f 	isb	sy
 800e784:	f3bf 8f4f 	dsb	sy
 800e788:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e78a:	bf00      	nop
 800e78c:	e7fe      	b.n	800e78c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d103      	bne.n	800e79c <xQueueGenericSend+0x40>
 800e794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d101      	bne.n	800e7a0 <xQueueGenericSend+0x44>
 800e79c:	2301      	movs	r3, #1
 800e79e:	e000      	b.n	800e7a2 <xQueueGenericSend+0x46>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d10a      	bne.n	800e7bc <xQueueGenericSend+0x60>
	__asm volatile
 800e7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7aa:	f383 8811 	msr	BASEPRI, r3
 800e7ae:	f3bf 8f6f 	isb	sy
 800e7b2:	f3bf 8f4f 	dsb	sy
 800e7b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e7b8:	bf00      	nop
 800e7ba:	e7fe      	b.n	800e7ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	2b02      	cmp	r3, #2
 800e7c0:	d103      	bne.n	800e7ca <xQueueGenericSend+0x6e>
 800e7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d101      	bne.n	800e7ce <xQueueGenericSend+0x72>
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e000      	b.n	800e7d0 <xQueueGenericSend+0x74>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d10a      	bne.n	800e7ea <xQueueGenericSend+0x8e>
	__asm volatile
 800e7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d8:	f383 8811 	msr	BASEPRI, r3
 800e7dc:	f3bf 8f6f 	isb	sy
 800e7e0:	f3bf 8f4f 	dsb	sy
 800e7e4:	623b      	str	r3, [r7, #32]
}
 800e7e6:	bf00      	nop
 800e7e8:	e7fe      	b.n	800e7e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e7ea:	f001 fd75 	bl	80102d8 <xTaskGetSchedulerState>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d102      	bne.n	800e7fa <xQueueGenericSend+0x9e>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d101      	bne.n	800e7fe <xQueueGenericSend+0xa2>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e000      	b.n	800e800 <xQueueGenericSend+0xa4>
 800e7fe:	2300      	movs	r3, #0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10a      	bne.n	800e81a <xQueueGenericSend+0xbe>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	61fb      	str	r3, [r7, #28]
}
 800e816:	bf00      	nop
 800e818:	e7fe      	b.n	800e818 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e81a:	f002 fbeb 	bl	8010ff4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e826:	429a      	cmp	r2, r3
 800e828:	d302      	bcc.n	800e830 <xQueueGenericSend+0xd4>
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	2b02      	cmp	r3, #2
 800e82e:	d129      	bne.n	800e884 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e830:	683a      	ldr	r2, [r7, #0]
 800e832:	68b9      	ldr	r1, [r7, #8]
 800e834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e836:	f000 fc5e 	bl	800f0f6 <prvCopyDataToQueue>
 800e83a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e840:	2b00      	cmp	r3, #0
 800e842:	d010      	beq.n	800e866 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e846:	3324      	adds	r3, #36	; 0x24
 800e848:	4618      	mov	r0, r3
 800e84a:	f001 fb21 	bl	800fe90 <xTaskRemoveFromEventList>
 800e84e:	4603      	mov	r3, r0
 800e850:	2b00      	cmp	r3, #0
 800e852:	d013      	beq.n	800e87c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e854:	4b3f      	ldr	r3, [pc, #252]	; (800e954 <xQueueGenericSend+0x1f8>)
 800e856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e85a:	601a      	str	r2, [r3, #0]
 800e85c:	f3bf 8f4f 	dsb	sy
 800e860:	f3bf 8f6f 	isb	sy
 800e864:	e00a      	b.n	800e87c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d007      	beq.n	800e87c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e86c:	4b39      	ldr	r3, [pc, #228]	; (800e954 <xQueueGenericSend+0x1f8>)
 800e86e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e872:	601a      	str	r2, [r3, #0]
 800e874:	f3bf 8f4f 	dsb	sy
 800e878:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e87c:	f002 fbea 	bl	8011054 <vPortExitCritical>
				return pdPASS;
 800e880:	2301      	movs	r3, #1
 800e882:	e063      	b.n	800e94c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d103      	bne.n	800e892 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e88a:	f002 fbe3 	bl	8011054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e88e:	2300      	movs	r3, #0
 800e890:	e05c      	b.n	800e94c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e894:	2b00      	cmp	r3, #0
 800e896:	d106      	bne.n	800e8a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e898:	f107 0314 	add.w	r3, r7, #20
 800e89c:	4618      	mov	r0, r3
 800e89e:	f001 fbbd 	bl	801001c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e8a6:	f002 fbd5 	bl	8011054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e8aa:	f001 f88b 	bl	800f9c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8ae:	f002 fba1 	bl	8010ff4 <vPortEnterCritical>
 800e8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8b8:	b25b      	sxtb	r3, r3
 800e8ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8be:	d103      	bne.n	800e8c8 <xQueueGenericSend+0x16c>
 800e8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8ce:	b25b      	sxtb	r3, r3
 800e8d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8d4:	d103      	bne.n	800e8de <xQueueGenericSend+0x182>
 800e8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8de:	f002 fbb9 	bl	8011054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e8e2:	1d3a      	adds	r2, r7, #4
 800e8e4:	f107 0314 	add.w	r3, r7, #20
 800e8e8:	4611      	mov	r1, r2
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f001 fbac 	bl	8010048 <xTaskCheckForTimeOut>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d124      	bne.n	800e940 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e8f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8f8:	f000 fcf5 	bl	800f2e6 <prvIsQueueFull>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d018      	beq.n	800e934 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e904:	3310      	adds	r3, #16
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	4611      	mov	r1, r2
 800e90a:	4618      	mov	r0, r3
 800e90c:	f001 fa34 	bl	800fd78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e912:	f000 fc80 	bl	800f216 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e916:	f001 f863 	bl	800f9e0 <xTaskResumeAll>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f47f af7c 	bne.w	800e81a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e922:	4b0c      	ldr	r3, [pc, #48]	; (800e954 <xQueueGenericSend+0x1f8>)
 800e924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e928:	601a      	str	r2, [r3, #0]
 800e92a:	f3bf 8f4f 	dsb	sy
 800e92e:	f3bf 8f6f 	isb	sy
 800e932:	e772      	b.n	800e81a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e936:	f000 fc6e 	bl	800f216 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e93a:	f001 f851 	bl	800f9e0 <xTaskResumeAll>
 800e93e:	e76c      	b.n	800e81a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e942:	f000 fc68 	bl	800f216 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e946:	f001 f84b 	bl	800f9e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e94a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3738      	adds	r7, #56	; 0x38
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	e000ed04 	.word	0xe000ed04

0800e958 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b090      	sub	sp, #64	; 0x40
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
 800e964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d10a      	bne.n	800e986 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e974:	f383 8811 	msr	BASEPRI, r3
 800e978:	f3bf 8f6f 	isb	sy
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e982:	bf00      	nop
 800e984:	e7fe      	b.n	800e984 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d103      	bne.n	800e994 <xQueueGenericSendFromISR+0x3c>
 800e98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e990:	2b00      	cmp	r3, #0
 800e992:	d101      	bne.n	800e998 <xQueueGenericSendFromISR+0x40>
 800e994:	2301      	movs	r3, #1
 800e996:	e000      	b.n	800e99a <xQueueGenericSendFromISR+0x42>
 800e998:	2300      	movs	r3, #0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d10a      	bne.n	800e9b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e9b0:	bf00      	nop
 800e9b2:	e7fe      	b.n	800e9b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	2b02      	cmp	r3, #2
 800e9b8:	d103      	bne.n	800e9c2 <xQueueGenericSendFromISR+0x6a>
 800e9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d101      	bne.n	800e9c6 <xQueueGenericSendFromISR+0x6e>
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e000      	b.n	800e9c8 <xQueueGenericSendFromISR+0x70>
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d10a      	bne.n	800e9e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d0:	f383 8811 	msr	BASEPRI, r3
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	623b      	str	r3, [r7, #32]
}
 800e9de:	bf00      	nop
 800e9e0:	e7fe      	b.n	800e9e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e9e2:	f002 fbe9 	bl	80111b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e9e6:	f3ef 8211 	mrs	r2, BASEPRI
 800e9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ee:	f383 8811 	msr	BASEPRI, r3
 800e9f2:	f3bf 8f6f 	isb	sy
 800e9f6:	f3bf 8f4f 	dsb	sy
 800e9fa:	61fa      	str	r2, [r7, #28]
 800e9fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e9fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d302      	bcc.n	800ea14 <xQueueGenericSendFromISR+0xbc>
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	2b02      	cmp	r3, #2
 800ea12:	d12f      	bne.n	800ea74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ea14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea24:	683a      	ldr	r2, [r7, #0]
 800ea26:	68b9      	ldr	r1, [r7, #8]
 800ea28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea2a:	f000 fb64 	bl	800f0f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ea2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ea32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea36:	d112      	bne.n	800ea5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d016      	beq.n	800ea6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea42:	3324      	adds	r3, #36	; 0x24
 800ea44:	4618      	mov	r0, r3
 800ea46:	f001 fa23 	bl	800fe90 <xTaskRemoveFromEventList>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d00e      	beq.n	800ea6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d00b      	beq.n	800ea6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	601a      	str	r2, [r3, #0]
 800ea5c:	e007      	b.n	800ea6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ea5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ea62:	3301      	adds	r3, #1
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	b25a      	sxtb	r2, r3
 800ea68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ea72:	e001      	b.n	800ea78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ea74:	2300      	movs	r3, #0
 800ea76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea7a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ea82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3740      	adds	r7, #64	; 0x40
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}

0800ea8e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ea8e:	b580      	push	{r7, lr}
 800ea90:	b08e      	sub	sp, #56	; 0x38
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
 800ea96:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ea9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d10a      	bne.n	800eab8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800eaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaa6:	f383 8811 	msr	BASEPRI, r3
 800eaaa:	f3bf 8f6f 	isb	sy
 800eaae:	f3bf 8f4f 	dsb	sy
 800eab2:	623b      	str	r3, [r7, #32]
}
 800eab4:	bf00      	nop
 800eab6:	e7fe      	b.n	800eab6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00a      	beq.n	800ead6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800eac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac4:	f383 8811 	msr	BASEPRI, r3
 800eac8:	f3bf 8f6f 	isb	sy
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	61fb      	str	r3, [r7, #28]
}
 800ead2:	bf00      	nop
 800ead4:	e7fe      	b.n	800ead4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ead6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d103      	bne.n	800eae6 <xQueueGiveFromISR+0x58>
 800eade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d101      	bne.n	800eaea <xQueueGiveFromISR+0x5c>
 800eae6:	2301      	movs	r3, #1
 800eae8:	e000      	b.n	800eaec <xQueueGiveFromISR+0x5e>
 800eaea:	2300      	movs	r3, #0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d10a      	bne.n	800eb06 <xQueueGiveFromISR+0x78>
	__asm volatile
 800eaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf4:	f383 8811 	msr	BASEPRI, r3
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	f3bf 8f4f 	dsb	sy
 800eb00:	61bb      	str	r3, [r7, #24]
}
 800eb02:	bf00      	nop
 800eb04:	e7fe      	b.n	800eb04 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb06:	f002 fb57 	bl	80111b8 <vPortValidateInterruptPriority>
	__asm volatile
 800eb0a:	f3ef 8211 	mrs	r2, BASEPRI
 800eb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb12:	f383 8811 	msr	BASEPRI, r3
 800eb16:	f3bf 8f6f 	isb	sy
 800eb1a:	f3bf 8f4f 	dsb	sy
 800eb1e:	617a      	str	r2, [r7, #20]
 800eb20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800eb22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800eb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d22b      	bcs.n	800eb8e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800eb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb42:	1c5a      	adds	r2, r3, #1
 800eb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb46:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800eb48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb50:	d112      	bne.n	800eb78 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d016      	beq.n	800eb88 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5c:	3324      	adds	r3, #36	; 0x24
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f001 f996 	bl	800fe90 <xTaskRemoveFromEventList>
 800eb64:	4603      	mov	r3, r0
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00e      	beq.n	800eb88 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00b      	beq.n	800eb88 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2201      	movs	r2, #1
 800eb74:	601a      	str	r2, [r3, #0]
 800eb76:	e007      	b.n	800eb88 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800eb78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	b25a      	sxtb	r2, r3
 800eb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	637b      	str	r3, [r7, #52]	; 0x34
 800eb8c:	e001      	b.n	800eb92 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	637b      	str	r3, [r7, #52]	; 0x34
 800eb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb94:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	f383 8811 	msr	BASEPRI, r3
}
 800eb9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eb9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3738      	adds	r7, #56	; 0x38
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b08c      	sub	sp, #48	; 0x30
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ebbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d10a      	bne.n	800ebd8 <xQueueReceive+0x30>
	__asm volatile
 800ebc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc6:	f383 8811 	msr	BASEPRI, r3
 800ebca:	f3bf 8f6f 	isb	sy
 800ebce:	f3bf 8f4f 	dsb	sy
 800ebd2:	623b      	str	r3, [r7, #32]
}
 800ebd4:	bf00      	nop
 800ebd6:	e7fe      	b.n	800ebd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d103      	bne.n	800ebe6 <xQueueReceive+0x3e>
 800ebde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d101      	bne.n	800ebea <xQueueReceive+0x42>
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	e000      	b.n	800ebec <xQueueReceive+0x44>
 800ebea:	2300      	movs	r3, #0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d10a      	bne.n	800ec06 <xQueueReceive+0x5e>
	__asm volatile
 800ebf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf4:	f383 8811 	msr	BASEPRI, r3
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	61fb      	str	r3, [r7, #28]
}
 800ec02:	bf00      	nop
 800ec04:	e7fe      	b.n	800ec04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ec06:	f001 fb67 	bl	80102d8 <xTaskGetSchedulerState>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d102      	bne.n	800ec16 <xQueueReceive+0x6e>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d101      	bne.n	800ec1a <xQueueReceive+0x72>
 800ec16:	2301      	movs	r3, #1
 800ec18:	e000      	b.n	800ec1c <xQueueReceive+0x74>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d10a      	bne.n	800ec36 <xQueueReceive+0x8e>
	__asm volatile
 800ec20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec24:	f383 8811 	msr	BASEPRI, r3
 800ec28:	f3bf 8f6f 	isb	sy
 800ec2c:	f3bf 8f4f 	dsb	sy
 800ec30:	61bb      	str	r3, [r7, #24]
}
 800ec32:	bf00      	nop
 800ec34:	e7fe      	b.n	800ec34 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec36:	f002 f9dd 	bl	8010ff4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d01f      	beq.n	800ec86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ec46:	68b9      	ldr	r1, [r7, #8]
 800ec48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec4a:	f000 fabe 	bl	800f1ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ec4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec50:	1e5a      	subs	r2, r3, #1
 800ec52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec58:	691b      	ldr	r3, [r3, #16]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00f      	beq.n	800ec7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec60:	3310      	adds	r3, #16
 800ec62:	4618      	mov	r0, r3
 800ec64:	f001 f914 	bl	800fe90 <xTaskRemoveFromEventList>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d007      	beq.n	800ec7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ec6e:	4b3d      	ldr	r3, [pc, #244]	; (800ed64 <xQueueReceive+0x1bc>)
 800ec70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec74:	601a      	str	r2, [r3, #0]
 800ec76:	f3bf 8f4f 	dsb	sy
 800ec7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ec7e:	f002 f9e9 	bl	8011054 <vPortExitCritical>
				return pdPASS;
 800ec82:	2301      	movs	r3, #1
 800ec84:	e069      	b.n	800ed5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d103      	bne.n	800ec94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ec8c:	f002 f9e2 	bl	8011054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ec90:	2300      	movs	r3, #0
 800ec92:	e062      	b.n	800ed5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d106      	bne.n	800eca8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec9a:	f107 0310 	add.w	r3, r7, #16
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f001 f9bc 	bl	801001c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eca4:	2301      	movs	r3, #1
 800eca6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eca8:	f002 f9d4 	bl	8011054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ecac:	f000 fe8a 	bl	800f9c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ecb0:	f002 f9a0 	bl	8010ff4 <vPortEnterCritical>
 800ecb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecba:	b25b      	sxtb	r3, r3
 800ecbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecc0:	d103      	bne.n	800ecca <xQueueReceive+0x122>
 800ecc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecd0:	b25b      	sxtb	r3, r3
 800ecd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecd6:	d103      	bne.n	800ece0 <xQueueReceive+0x138>
 800ecd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ece0:	f002 f9b8 	bl	8011054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ece4:	1d3a      	adds	r2, r7, #4
 800ece6:	f107 0310 	add.w	r3, r7, #16
 800ecea:	4611      	mov	r1, r2
 800ecec:	4618      	mov	r0, r3
 800ecee:	f001 f9ab 	bl	8010048 <xTaskCheckForTimeOut>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d123      	bne.n	800ed40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ecf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecfa:	f000 fade 	bl	800f2ba <prvIsQueueEmpty>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d017      	beq.n	800ed34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ed04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed06:	3324      	adds	r3, #36	; 0x24
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	4611      	mov	r1, r2
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f001 f833 	bl	800fd78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ed12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed14:	f000 fa7f 	bl	800f216 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ed18:	f000 fe62 	bl	800f9e0 <xTaskResumeAll>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d189      	bne.n	800ec36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ed22:	4b10      	ldr	r3, [pc, #64]	; (800ed64 <xQueueReceive+0x1bc>)
 800ed24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	f3bf 8f4f 	dsb	sy
 800ed2e:	f3bf 8f6f 	isb	sy
 800ed32:	e780      	b.n	800ec36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ed34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed36:	f000 fa6e 	bl	800f216 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed3a:	f000 fe51 	bl	800f9e0 <xTaskResumeAll>
 800ed3e:	e77a      	b.n	800ec36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ed40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed42:	f000 fa68 	bl	800f216 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed46:	f000 fe4b 	bl	800f9e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed4c:	f000 fab5 	bl	800f2ba <prvIsQueueEmpty>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f43f af6f 	beq.w	800ec36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ed58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3730      	adds	r7, #48	; 0x30
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	e000ed04 	.word	0xe000ed04

0800ed68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b08e      	sub	sp, #56	; 0x38
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ed72:	2300      	movs	r3, #0
 800ed74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ed7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d10a      	bne.n	800ed9a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ed84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed88:	f383 8811 	msr	BASEPRI, r3
 800ed8c:	f3bf 8f6f 	isb	sy
 800ed90:	f3bf 8f4f 	dsb	sy
 800ed94:	623b      	str	r3, [r7, #32]
}
 800ed96:	bf00      	nop
 800ed98:	e7fe      	b.n	800ed98 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ed9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d00a      	beq.n	800edb8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800eda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda6:	f383 8811 	msr	BASEPRI, r3
 800edaa:	f3bf 8f6f 	isb	sy
 800edae:	f3bf 8f4f 	dsb	sy
 800edb2:	61fb      	str	r3, [r7, #28]
}
 800edb4:	bf00      	nop
 800edb6:	e7fe      	b.n	800edb6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800edb8:	f001 fa8e 	bl	80102d8 <xTaskGetSchedulerState>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d102      	bne.n	800edc8 <xQueueSemaphoreTake+0x60>
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d101      	bne.n	800edcc <xQueueSemaphoreTake+0x64>
 800edc8:	2301      	movs	r3, #1
 800edca:	e000      	b.n	800edce <xQueueSemaphoreTake+0x66>
 800edcc:	2300      	movs	r3, #0
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d10a      	bne.n	800ede8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800edd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd6:	f383 8811 	msr	BASEPRI, r3
 800edda:	f3bf 8f6f 	isb	sy
 800edde:	f3bf 8f4f 	dsb	sy
 800ede2:	61bb      	str	r3, [r7, #24]
}
 800ede4:	bf00      	nop
 800ede6:	e7fe      	b.n	800ede6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ede8:	f002 f904 	bl	8010ff4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800edec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800edf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d024      	beq.n	800ee42 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800edf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfa:	1e5a      	subs	r2, r3, #1
 800edfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d104      	bne.n	800ee12 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ee08:	f001 fbf4 	bl	80105f4 <pvTaskIncrementMutexHeldCount>
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee10:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee14:	691b      	ldr	r3, [r3, #16]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00f      	beq.n	800ee3a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1c:	3310      	adds	r3, #16
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f001 f836 	bl	800fe90 <xTaskRemoveFromEventList>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d007      	beq.n	800ee3a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ee2a:	4b54      	ldr	r3, [pc, #336]	; (800ef7c <xQueueSemaphoreTake+0x214>)
 800ee2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee30:	601a      	str	r2, [r3, #0]
 800ee32:	f3bf 8f4f 	dsb	sy
 800ee36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ee3a:	f002 f90b 	bl	8011054 <vPortExitCritical>
				return pdPASS;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	e097      	b.n	800ef72 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d111      	bne.n	800ee6c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ee48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00a      	beq.n	800ee64 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ee4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	617b      	str	r3, [r7, #20]
}
 800ee60:	bf00      	nop
 800ee62:	e7fe      	b.n	800ee62 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ee64:	f002 f8f6 	bl	8011054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	e082      	b.n	800ef72 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d106      	bne.n	800ee80 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee72:	f107 030c 	add.w	r3, r7, #12
 800ee76:	4618      	mov	r0, r3
 800ee78:	f001 f8d0 	bl	801001c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee80:	f002 f8e8 	bl	8011054 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee84:	f000 fd9e 	bl	800f9c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee88:	f002 f8b4 	bl	8010ff4 <vPortEnterCritical>
 800ee8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee92:	b25b      	sxtb	r3, r3
 800ee94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee98:	d103      	bne.n	800eea2 <xQueueSemaphoreTake+0x13a>
 800ee9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eea8:	b25b      	sxtb	r3, r3
 800eeaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eeae:	d103      	bne.n	800eeb8 <xQueueSemaphoreTake+0x150>
 800eeb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eeb8:	f002 f8cc 	bl	8011054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eebc:	463a      	mov	r2, r7
 800eebe:	f107 030c 	add.w	r3, r7, #12
 800eec2:	4611      	mov	r1, r2
 800eec4:	4618      	mov	r0, r3
 800eec6:	f001 f8bf 	bl	8010048 <xTaskCheckForTimeOut>
 800eeca:	4603      	mov	r3, r0
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d132      	bne.n	800ef36 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eed2:	f000 f9f2 	bl	800f2ba <prvIsQueueEmpty>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d026      	beq.n	800ef2a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d109      	bne.n	800eef8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800eee4:	f002 f886 	bl	8010ff4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f001 fa11 	bl	8010314 <xTaskPriorityInherit>
 800eef2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800eef4:	f002 f8ae 	bl	8011054 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefa:	3324      	adds	r3, #36	; 0x24
 800eefc:	683a      	ldr	r2, [r7, #0]
 800eefe:	4611      	mov	r1, r2
 800ef00:	4618      	mov	r0, r3
 800ef02:	f000 ff39 	bl	800fd78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef08:	f000 f985 	bl	800f216 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef0c:	f000 fd68 	bl	800f9e0 <xTaskResumeAll>
 800ef10:	4603      	mov	r3, r0
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	f47f af68 	bne.w	800ede8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ef18:	4b18      	ldr	r3, [pc, #96]	; (800ef7c <xQueueSemaphoreTake+0x214>)
 800ef1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef1e:	601a      	str	r2, [r3, #0]
 800ef20:	f3bf 8f4f 	dsb	sy
 800ef24:	f3bf 8f6f 	isb	sy
 800ef28:	e75e      	b.n	800ede8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ef2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef2c:	f000 f973 	bl	800f216 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef30:	f000 fd56 	bl	800f9e0 <xTaskResumeAll>
 800ef34:	e758      	b.n	800ede8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ef36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef38:	f000 f96d 	bl	800f216 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef3c:	f000 fd50 	bl	800f9e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef42:	f000 f9ba 	bl	800f2ba <prvIsQueueEmpty>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	f43f af4d 	beq.w	800ede8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d00d      	beq.n	800ef70 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ef54:	f002 f84e 	bl	8010ff4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ef58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef5a:	f000 f8b4 	bl	800f0c6 <prvGetDisinheritPriorityAfterTimeout>
 800ef5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ef60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef62:	689b      	ldr	r3, [r3, #8]
 800ef64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef66:	4618      	mov	r0, r3
 800ef68:	f001 faaa 	bl	80104c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ef6c:	f002 f872 	bl	8011054 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ef70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3738      	adds	r7, #56	; 0x38
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	e000ed04 	.word	0xe000ed04

0800ef80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b08e      	sub	sp, #56	; 0x38
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d10a      	bne.n	800efac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ef96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef9a:	f383 8811 	msr	BASEPRI, r3
 800ef9e:	f3bf 8f6f 	isb	sy
 800efa2:	f3bf 8f4f 	dsb	sy
 800efa6:	623b      	str	r3, [r7, #32]
}
 800efa8:	bf00      	nop
 800efaa:	e7fe      	b.n	800efaa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d103      	bne.n	800efba <xQueueReceiveFromISR+0x3a>
 800efb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d101      	bne.n	800efbe <xQueueReceiveFromISR+0x3e>
 800efba:	2301      	movs	r3, #1
 800efbc:	e000      	b.n	800efc0 <xQueueReceiveFromISR+0x40>
 800efbe:	2300      	movs	r3, #0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d10a      	bne.n	800efda <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800efc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc8:	f383 8811 	msr	BASEPRI, r3
 800efcc:	f3bf 8f6f 	isb	sy
 800efd0:	f3bf 8f4f 	dsb	sy
 800efd4:	61fb      	str	r3, [r7, #28]
}
 800efd6:	bf00      	nop
 800efd8:	e7fe      	b.n	800efd8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800efda:	f002 f8ed 	bl	80111b8 <vPortValidateInterruptPriority>
	__asm volatile
 800efde:	f3ef 8211 	mrs	r2, BASEPRI
 800efe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe6:	f383 8811 	msr	BASEPRI, r3
 800efea:	f3bf 8f6f 	isb	sy
 800efee:	f3bf 8f4f 	dsb	sy
 800eff2:	61ba      	str	r2, [r7, #24]
 800eff4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eff6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eff8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800effa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800effe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f002:	2b00      	cmp	r3, #0
 800f004:	d02f      	beq.n	800f066 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f00c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f010:	68b9      	ldr	r1, [r7, #8]
 800f012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f014:	f000 f8d9 	bl	800f1ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01a:	1e5a      	subs	r2, r3, #1
 800f01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f01e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f020:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f028:	d112      	bne.n	800f050 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02c:	691b      	ldr	r3, [r3, #16]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d016      	beq.n	800f060 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f034:	3310      	adds	r3, #16
 800f036:	4618      	mov	r0, r3
 800f038:	f000 ff2a 	bl	800fe90 <xTaskRemoveFromEventList>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00e      	beq.n	800f060 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00b      	beq.n	800f060 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2201      	movs	r2, #1
 800f04c:	601a      	str	r2, [r3, #0]
 800f04e:	e007      	b.n	800f060 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f054:	3301      	adds	r3, #1
 800f056:	b2db      	uxtb	r3, r3
 800f058:	b25a      	sxtb	r2, r3
 800f05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f060:	2301      	movs	r3, #1
 800f062:	637b      	str	r3, [r7, #52]	; 0x34
 800f064:	e001      	b.n	800f06a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f066:	2300      	movs	r3, #0
 800f068:	637b      	str	r3, [r7, #52]	; 0x34
 800f06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	f383 8811 	msr	BASEPRI, r3
}
 800f074:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3738      	adds	r7, #56	; 0x38
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b084      	sub	sp, #16
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d10a      	bne.n	800f0a8 <vQueueDelete+0x28>
	__asm volatile
 800f092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f096:	f383 8811 	msr	BASEPRI, r3
 800f09a:	f3bf 8f6f 	isb	sy
 800f09e:	f3bf 8f4f 	dsb	sy
 800f0a2:	60bb      	str	r3, [r7, #8]
}
 800f0a4:	bf00      	nop
 800f0a6:	e7fe      	b.n	800f0a6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f0a8:	68f8      	ldr	r0, [r7, #12]
 800f0aa:	f000 f95f 	bl	800f36c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d102      	bne.n	800f0be <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f002 f989 	bl	80113d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f0be:	bf00      	nop
 800f0c0:	3710      	adds	r7, #16
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f0c6:	b480      	push	{r7}
 800f0c8:	b085      	sub	sp, #20
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d006      	beq.n	800f0e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f0e0:	60fb      	str	r3, [r7, #12]
 800f0e2:	e001      	b.n	800f0e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
	}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3714      	adds	r7, #20
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr

0800f0f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b086      	sub	sp, #24
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	60f8      	str	r0, [r7, #12]
 800f0fe:	60b9      	str	r1, [r7, #8]
 800f100:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f102:	2300      	movs	r3, #0
 800f104:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f10a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f110:	2b00      	cmp	r3, #0
 800f112:	d10d      	bne.n	800f130 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d14d      	bne.n	800f1b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	689b      	ldr	r3, [r3, #8]
 800f120:	4618      	mov	r0, r3
 800f122:	f001 f95f 	bl	80103e4 <xTaskPriorityDisinherit>
 800f126:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2200      	movs	r2, #0
 800f12c:	609a      	str	r2, [r3, #8]
 800f12e:	e043      	b.n	800f1b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d119      	bne.n	800f16a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	6858      	ldr	r0, [r3, #4]
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f13e:	461a      	mov	r2, r3
 800f140:	68b9      	ldr	r1, [r7, #8]
 800f142:	f00a ff2b 	bl	8019f9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	685a      	ldr	r2, [r3, #4]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f14e:	441a      	add	r2, r3
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	685a      	ldr	r2, [r3, #4]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	689b      	ldr	r3, [r3, #8]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d32b      	bcc.n	800f1b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	605a      	str	r2, [r3, #4]
 800f168:	e026      	b.n	800f1b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	68d8      	ldr	r0, [r3, #12]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f172:	461a      	mov	r2, r3
 800f174:	68b9      	ldr	r1, [r7, #8]
 800f176:	f00a ff11 	bl	8019f9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	68da      	ldr	r2, [r3, #12]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f182:	425b      	negs	r3, r3
 800f184:	441a      	add	r2, r3
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	68da      	ldr	r2, [r3, #12]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	429a      	cmp	r2, r3
 800f194:	d207      	bcs.n	800f1a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	689a      	ldr	r2, [r3, #8]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f19e:	425b      	negs	r3, r3
 800f1a0:	441a      	add	r2, r3
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2b02      	cmp	r3, #2
 800f1aa:	d105      	bne.n	800f1b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d002      	beq.n	800f1b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	3b01      	subs	r3, #1
 800f1b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	1c5a      	adds	r2, r3, #1
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f1c0:	697b      	ldr	r3, [r7, #20]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3718      	adds	r7, #24
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}

0800f1ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b082      	sub	sp, #8
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]
 800f1d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d018      	beq.n	800f20e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	68da      	ldr	r2, [r3, #12]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e4:	441a      	add	r2, r3
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	68da      	ldr	r2, [r3, #12]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d303      	bcc.n	800f1fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	68d9      	ldr	r1, [r3, #12]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f206:	461a      	mov	r2, r3
 800f208:	6838      	ldr	r0, [r7, #0]
 800f20a:	f00a fec7 	bl	8019f9c <memcpy>
	}
}
 800f20e:	bf00      	nop
 800f210:	3708      	adds	r7, #8
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b084      	sub	sp, #16
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f21e:	f001 fee9 	bl	8010ff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f228:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f22a:	e011      	b.n	800f250 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f230:	2b00      	cmp	r3, #0
 800f232:	d012      	beq.n	800f25a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	3324      	adds	r3, #36	; 0x24
 800f238:	4618      	mov	r0, r3
 800f23a:	f000 fe29 	bl	800fe90 <xTaskRemoveFromEventList>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	d001      	beq.n	800f248 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f244:	f000 ff62 	bl	801010c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f248:	7bfb      	ldrb	r3, [r7, #15]
 800f24a:	3b01      	subs	r3, #1
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f254:	2b00      	cmp	r3, #0
 800f256:	dce9      	bgt.n	800f22c <prvUnlockQueue+0x16>
 800f258:	e000      	b.n	800f25c <prvUnlockQueue+0x46>
					break;
 800f25a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	22ff      	movs	r2, #255	; 0xff
 800f260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f264:	f001 fef6 	bl	8011054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f268:	f001 fec4 	bl	8010ff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f272:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f274:	e011      	b.n	800f29a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	691b      	ldr	r3, [r3, #16]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d012      	beq.n	800f2a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	3310      	adds	r3, #16
 800f282:	4618      	mov	r0, r3
 800f284:	f000 fe04 	bl	800fe90 <xTaskRemoveFromEventList>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d001      	beq.n	800f292 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f28e:	f000 ff3d 	bl	801010c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f292:	7bbb      	ldrb	r3, [r7, #14]
 800f294:	3b01      	subs	r3, #1
 800f296:	b2db      	uxtb	r3, r3
 800f298:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f29a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	dce9      	bgt.n	800f276 <prvUnlockQueue+0x60>
 800f2a2:	e000      	b.n	800f2a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f2a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	22ff      	movs	r2, #255	; 0xff
 800f2aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f2ae:	f001 fed1 	bl	8011054 <vPortExitCritical>
}
 800f2b2:	bf00      	nop
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}

0800f2ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b084      	sub	sp, #16
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f2c2:	f001 fe97 	bl	8010ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d102      	bne.n	800f2d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	60fb      	str	r3, [r7, #12]
 800f2d2:	e001      	b.n	800f2d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f2d8:	f001 febc 	bl	8011054 <vPortExitCritical>

	return xReturn;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b084      	sub	sp, #16
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f2ee:	f001 fe81 	bl	8010ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d102      	bne.n	800f304 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f2fe:	2301      	movs	r3, #1
 800f300:	60fb      	str	r3, [r7, #12]
 800f302:	e001      	b.n	800f308 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f304:	2300      	movs	r3, #0
 800f306:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f308:	f001 fea4 	bl	8011054 <vPortExitCritical>

	return xReturn;
 800f30c:	68fb      	ldr	r3, [r7, #12]
}
 800f30e:	4618      	mov	r0, r3
 800f310:	3710      	adds	r7, #16
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
	...

0800f318 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f322:	2300      	movs	r3, #0
 800f324:	60fb      	str	r3, [r7, #12]
 800f326:	e014      	b.n	800f352 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f328:	4a0f      	ldr	r2, [pc, #60]	; (800f368 <vQueueAddToRegistry+0x50>)
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d10b      	bne.n	800f34c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f334:	490c      	ldr	r1, [pc, #48]	; (800f368 <vQueueAddToRegistry+0x50>)
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	683a      	ldr	r2, [r7, #0]
 800f33a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f33e:	4a0a      	ldr	r2, [pc, #40]	; (800f368 <vQueueAddToRegistry+0x50>)
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	00db      	lsls	r3, r3, #3
 800f344:	4413      	add	r3, r2
 800f346:	687a      	ldr	r2, [r7, #4]
 800f348:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f34a:	e006      	b.n	800f35a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	3301      	adds	r3, #1
 800f350:	60fb      	str	r3, [r7, #12]
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2b07      	cmp	r3, #7
 800f356:	d9e7      	bls.n	800f328 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f358:	bf00      	nop
 800f35a:	bf00      	nop
 800f35c:	3714      	adds	r7, #20
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop
 800f368:	20005134 	.word	0x20005134

0800f36c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f36c:	b480      	push	{r7}
 800f36e:	b085      	sub	sp, #20
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f374:	2300      	movs	r3, #0
 800f376:	60fb      	str	r3, [r7, #12]
 800f378:	e016      	b.n	800f3a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f37a:	4a10      	ldr	r2, [pc, #64]	; (800f3bc <vQueueUnregisterQueue+0x50>)
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	00db      	lsls	r3, r3, #3
 800f380:	4413      	add	r3, r2
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	687a      	ldr	r2, [r7, #4]
 800f386:	429a      	cmp	r2, r3
 800f388:	d10b      	bne.n	800f3a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f38a:	4a0c      	ldr	r2, [pc, #48]	; (800f3bc <vQueueUnregisterQueue+0x50>)
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2100      	movs	r1, #0
 800f390:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f394:	4a09      	ldr	r2, [pc, #36]	; (800f3bc <vQueueUnregisterQueue+0x50>)
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	00db      	lsls	r3, r3, #3
 800f39a:	4413      	add	r3, r2
 800f39c:	2200      	movs	r2, #0
 800f39e:	605a      	str	r2, [r3, #4]
				break;
 800f3a0:	e006      	b.n	800f3b0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	60fb      	str	r3, [r7, #12]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2b07      	cmp	r3, #7
 800f3ac:	d9e5      	bls.n	800f37a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f3ae:	bf00      	nop
 800f3b0:	bf00      	nop
 800f3b2:	3714      	adds	r7, #20
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr
 800f3bc:	20005134 	.word	0x20005134

0800f3c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b086      	sub	sp, #24
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f3d0:	f001 fe10 	bl	8010ff4 <vPortEnterCritical>
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3da:	b25b      	sxtb	r3, r3
 800f3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3e0:	d103      	bne.n	800f3ea <vQueueWaitForMessageRestricted+0x2a>
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3f0:	b25b      	sxtb	r3, r3
 800f3f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3f6:	d103      	bne.n	800f400 <vQueueWaitForMessageRestricted+0x40>
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f400:	f001 fe28 	bl	8011054 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d106      	bne.n	800f41a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	3324      	adds	r3, #36	; 0x24
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	68b9      	ldr	r1, [r7, #8]
 800f414:	4618      	mov	r0, r3
 800f416:	f000 fd0f 	bl	800fe38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f41a:	6978      	ldr	r0, [r7, #20]
 800f41c:	f7ff fefb 	bl	800f216 <prvUnlockQueue>
	}
 800f420:	bf00      	nop
 800f422:	3718      	adds	r7, #24
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b08e      	sub	sp, #56	; 0x38
 800f42c:	af04      	add	r7, sp, #16
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
 800f434:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d10a      	bne.n	800f452 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f440:	f383 8811 	msr	BASEPRI, r3
 800f444:	f3bf 8f6f 	isb	sy
 800f448:	f3bf 8f4f 	dsb	sy
 800f44c:	623b      	str	r3, [r7, #32]
}
 800f44e:	bf00      	nop
 800f450:	e7fe      	b.n	800f450 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f454:	2b00      	cmp	r3, #0
 800f456:	d10a      	bne.n	800f46e <xTaskCreateStatic+0x46>
	__asm volatile
 800f458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f45c:	f383 8811 	msr	BASEPRI, r3
 800f460:	f3bf 8f6f 	isb	sy
 800f464:	f3bf 8f4f 	dsb	sy
 800f468:	61fb      	str	r3, [r7, #28]
}
 800f46a:	bf00      	nop
 800f46c:	e7fe      	b.n	800f46c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f46e:	23a8      	movs	r3, #168	; 0xa8
 800f470:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	2ba8      	cmp	r3, #168	; 0xa8
 800f476:	d00a      	beq.n	800f48e <xTaskCreateStatic+0x66>
	__asm volatile
 800f478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f47c:	f383 8811 	msr	BASEPRI, r3
 800f480:	f3bf 8f6f 	isb	sy
 800f484:	f3bf 8f4f 	dsb	sy
 800f488:	61bb      	str	r3, [r7, #24]
}
 800f48a:	bf00      	nop
 800f48c:	e7fe      	b.n	800f48c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f48e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f492:	2b00      	cmp	r3, #0
 800f494:	d01e      	beq.n	800f4d4 <xTaskCreateStatic+0xac>
 800f496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d01b      	beq.n	800f4d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a8:	2202      	movs	r2, #2
 800f4aa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	9303      	str	r3, [sp, #12]
 800f4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b4:	9302      	str	r3, [sp, #8]
 800f4b6:	f107 0314 	add.w	r3, r7, #20
 800f4ba:	9301      	str	r3, [sp, #4]
 800f4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4be:	9300      	str	r3, [sp, #0]
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	68b9      	ldr	r1, [r7, #8]
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f000 f850 	bl	800f56c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f4cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4ce:	f000 f8f3 	bl	800f6b8 <prvAddNewTaskToReadyList>
 800f4d2:	e001      	b.n	800f4d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f4d8:	697b      	ldr	r3, [r7, #20]
	}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3728      	adds	r7, #40	; 0x28
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b08c      	sub	sp, #48	; 0x30
 800f4e6:	af04      	add	r7, sp, #16
 800f4e8:	60f8      	str	r0, [r7, #12]
 800f4ea:	60b9      	str	r1, [r7, #8]
 800f4ec:	603b      	str	r3, [r7, #0]
 800f4ee:	4613      	mov	r3, r2
 800f4f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f4f2:	88fb      	ldrh	r3, [r7, #6]
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f001 fe9e 	bl	8011238 <pvPortMalloc>
 800f4fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d00e      	beq.n	800f522 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f504:	20a8      	movs	r0, #168	; 0xa8
 800f506:	f001 fe97 	bl	8011238 <pvPortMalloc>
 800f50a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d003      	beq.n	800f51a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	697a      	ldr	r2, [r7, #20]
 800f516:	631a      	str	r2, [r3, #48]	; 0x30
 800f518:	e005      	b.n	800f526 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f51a:	6978      	ldr	r0, [r7, #20]
 800f51c:	f001 ff58 	bl	80113d0 <vPortFree>
 800f520:	e001      	b.n	800f526 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f522:	2300      	movs	r3, #0
 800f524:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f526:	69fb      	ldr	r3, [r7, #28]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d017      	beq.n	800f55c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	2200      	movs	r2, #0
 800f530:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f534:	88fa      	ldrh	r2, [r7, #6]
 800f536:	2300      	movs	r3, #0
 800f538:	9303      	str	r3, [sp, #12]
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	9302      	str	r3, [sp, #8]
 800f53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f540:	9301      	str	r3, [sp, #4]
 800f542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f544:	9300      	str	r3, [sp, #0]
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	68b9      	ldr	r1, [r7, #8]
 800f54a:	68f8      	ldr	r0, [r7, #12]
 800f54c:	f000 f80e 	bl	800f56c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f550:	69f8      	ldr	r0, [r7, #28]
 800f552:	f000 f8b1 	bl	800f6b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f556:	2301      	movs	r3, #1
 800f558:	61bb      	str	r3, [r7, #24]
 800f55a:	e002      	b.n	800f562 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f55c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f560:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f562:	69bb      	ldr	r3, [r7, #24]
	}
 800f564:	4618      	mov	r0, r3
 800f566:	3720      	adds	r7, #32
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}

0800f56c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b088      	sub	sp, #32
 800f570:	af00      	add	r7, sp, #0
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	60b9      	str	r1, [r7, #8]
 800f576:	607a      	str	r2, [r7, #4]
 800f578:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	009b      	lsls	r3, r3, #2
 800f582:	461a      	mov	r2, r3
 800f584:	21a5      	movs	r1, #165	; 0xa5
 800f586:	f00a fc7b 	bl	8019e80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f594:	3b01      	subs	r3, #1
 800f596:	009b      	lsls	r3, r3, #2
 800f598:	4413      	add	r3, r2
 800f59a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	f023 0307 	bic.w	r3, r3, #7
 800f5a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f5a4:	69bb      	ldr	r3, [r7, #24]
 800f5a6:	f003 0307 	and.w	r3, r3, #7
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00a      	beq.n	800f5c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b2:	f383 8811 	msr	BASEPRI, r3
 800f5b6:	f3bf 8f6f 	isb	sy
 800f5ba:	f3bf 8f4f 	dsb	sy
 800f5be:	617b      	str	r3, [r7, #20]
}
 800f5c0:	bf00      	nop
 800f5c2:	e7fe      	b.n	800f5c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d01f      	beq.n	800f60a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	61fb      	str	r3, [r7, #28]
 800f5ce:	e012      	b.n	800f5f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f5d0:	68ba      	ldr	r2, [r7, #8]
 800f5d2:	69fb      	ldr	r3, [r7, #28]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	7819      	ldrb	r1, [r3, #0]
 800f5d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	4413      	add	r3, r2
 800f5de:	3334      	adds	r3, #52	; 0x34
 800f5e0:	460a      	mov	r2, r1
 800f5e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	69fb      	ldr	r3, [r7, #28]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d006      	beq.n	800f5fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	61fb      	str	r3, [r7, #28]
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	2b0f      	cmp	r3, #15
 800f5fa:	d9e9      	bls.n	800f5d0 <prvInitialiseNewTask+0x64>
 800f5fc:	e000      	b.n	800f600 <prvInitialiseNewTask+0x94>
			{
				break;
 800f5fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f602:	2200      	movs	r2, #0
 800f604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f608:	e003      	b.n	800f612 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60c:	2200      	movs	r2, #0
 800f60e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f614:	2b37      	cmp	r3, #55	; 0x37
 800f616:	d901      	bls.n	800f61c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f618:	2337      	movs	r3, #55	; 0x37
 800f61a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f620:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f626:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62a:	2200      	movs	r2, #0
 800f62c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f630:	3304      	adds	r3, #4
 800f632:	4618      	mov	r0, r3
 800f634:	f7fe fe56 	bl	800e2e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63a:	3318      	adds	r3, #24
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fe fe51 	bl	800e2e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f646:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f64a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f650:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f656:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65a:	2200      	movs	r2, #0
 800f65c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f662:	2200      	movs	r2, #0
 800f664:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66a:	3354      	adds	r3, #84	; 0x54
 800f66c:	224c      	movs	r2, #76	; 0x4c
 800f66e:	2100      	movs	r1, #0
 800f670:	4618      	mov	r0, r3
 800f672:	f00a fc05 	bl	8019e80 <memset>
 800f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f678:	4a0c      	ldr	r2, [pc, #48]	; (800f6ac <prvInitialiseNewTask+0x140>)
 800f67a:	659a      	str	r2, [r3, #88]	; 0x58
 800f67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67e:	4a0c      	ldr	r2, [pc, #48]	; (800f6b0 <prvInitialiseNewTask+0x144>)
 800f680:	65da      	str	r2, [r3, #92]	; 0x5c
 800f682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f684:	4a0b      	ldr	r2, [pc, #44]	; (800f6b4 <prvInitialiseNewTask+0x148>)
 800f686:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f688:	683a      	ldr	r2, [r7, #0]
 800f68a:	68f9      	ldr	r1, [r7, #12]
 800f68c:	69b8      	ldr	r0, [r7, #24]
 800f68e:	f001 fb87 	bl	8010da0 <pxPortInitialiseStack>
 800f692:	4602      	mov	r2, r0
 800f694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f696:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d002      	beq.n	800f6a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6a4:	bf00      	nop
 800f6a6:	3720      	adds	r7, #32
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	200093c8 	.word	0x200093c8
 800f6b0:	20009430 	.word	0x20009430
 800f6b4:	20009498 	.word	0x20009498

0800f6b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f6c0:	f001 fc98 	bl	8010ff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f6c4:	4b2d      	ldr	r3, [pc, #180]	; (800f77c <prvAddNewTaskToReadyList+0xc4>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	4a2c      	ldr	r2, [pc, #176]	; (800f77c <prvAddNewTaskToReadyList+0xc4>)
 800f6cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f6ce:	4b2c      	ldr	r3, [pc, #176]	; (800f780 <prvAddNewTaskToReadyList+0xc8>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d109      	bne.n	800f6ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f6d6:	4a2a      	ldr	r2, [pc, #168]	; (800f780 <prvAddNewTaskToReadyList+0xc8>)
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f6dc:	4b27      	ldr	r3, [pc, #156]	; (800f77c <prvAddNewTaskToReadyList+0xc4>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	d110      	bne.n	800f706 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f6e4:	f000 fd36 	bl	8010154 <prvInitialiseTaskLists>
 800f6e8:	e00d      	b.n	800f706 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f6ea:	4b26      	ldr	r3, [pc, #152]	; (800f784 <prvAddNewTaskToReadyList+0xcc>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d109      	bne.n	800f706 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f6f2:	4b23      	ldr	r3, [pc, #140]	; (800f780 <prvAddNewTaskToReadyList+0xc8>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d802      	bhi.n	800f706 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f700:	4a1f      	ldr	r2, [pc, #124]	; (800f780 <prvAddNewTaskToReadyList+0xc8>)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f706:	4b20      	ldr	r3, [pc, #128]	; (800f788 <prvAddNewTaskToReadyList+0xd0>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	3301      	adds	r3, #1
 800f70c:	4a1e      	ldr	r2, [pc, #120]	; (800f788 <prvAddNewTaskToReadyList+0xd0>)
 800f70e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f710:	4b1d      	ldr	r3, [pc, #116]	; (800f788 <prvAddNewTaskToReadyList+0xd0>)
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f71c:	4b1b      	ldr	r3, [pc, #108]	; (800f78c <prvAddNewTaskToReadyList+0xd4>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	429a      	cmp	r2, r3
 800f722:	d903      	bls.n	800f72c <prvAddNewTaskToReadyList+0x74>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f728:	4a18      	ldr	r2, [pc, #96]	; (800f78c <prvAddNewTaskToReadyList+0xd4>)
 800f72a:	6013      	str	r3, [r2, #0]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f730:	4613      	mov	r3, r2
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	4413      	add	r3, r2
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	4a15      	ldr	r2, [pc, #84]	; (800f790 <prvAddNewTaskToReadyList+0xd8>)
 800f73a:	441a      	add	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	3304      	adds	r3, #4
 800f740:	4619      	mov	r1, r3
 800f742:	4610      	mov	r0, r2
 800f744:	f7fe fddb 	bl	800e2fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f748:	f001 fc84 	bl	8011054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f74c:	4b0d      	ldr	r3, [pc, #52]	; (800f784 <prvAddNewTaskToReadyList+0xcc>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d00e      	beq.n	800f772 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f754:	4b0a      	ldr	r3, [pc, #40]	; (800f780 <prvAddNewTaskToReadyList+0xc8>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f75e:	429a      	cmp	r2, r3
 800f760:	d207      	bcs.n	800f772 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f762:	4b0c      	ldr	r3, [pc, #48]	; (800f794 <prvAddNewTaskToReadyList+0xdc>)
 800f764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f768:	601a      	str	r2, [r3, #0]
 800f76a:	f3bf 8f4f 	dsb	sy
 800f76e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f772:	bf00      	nop
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	20005648 	.word	0x20005648
 800f780:	20005174 	.word	0x20005174
 800f784:	20005654 	.word	0x20005654
 800f788:	20005664 	.word	0x20005664
 800f78c:	20005650 	.word	0x20005650
 800f790:	20005178 	.word	0x20005178
 800f794:	e000ed04 	.word	0xe000ed04

0800f798 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f7a0:	f001 fc28 	bl	8010ff4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d102      	bne.n	800f7b0 <vTaskDelete+0x18>
 800f7aa:	4b2c      	ldr	r3, [pc, #176]	; (800f85c <vTaskDelete+0xc4>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	e000      	b.n	800f7b2 <vTaskDelete+0x1a>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	3304      	adds	r3, #4
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fe fdfd 	bl	800e3b8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d004      	beq.n	800f7d0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	3318      	adds	r3, #24
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fe fdf4 	bl	800e3b8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800f7d0:	4b23      	ldr	r3, [pc, #140]	; (800f860 <vTaskDelete+0xc8>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	4a22      	ldr	r2, [pc, #136]	; (800f860 <vTaskDelete+0xc8>)
 800f7d8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800f7da:	4b20      	ldr	r3, [pc, #128]	; (800f85c <vTaskDelete+0xc4>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	68fa      	ldr	r2, [r7, #12]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d10b      	bne.n	800f7fc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	3304      	adds	r3, #4
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	481e      	ldr	r0, [pc, #120]	; (800f864 <vTaskDelete+0xcc>)
 800f7ec:	f7fe fd87 	bl	800e2fe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800f7f0:	4b1d      	ldr	r3, [pc, #116]	; (800f868 <vTaskDelete+0xd0>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	4a1c      	ldr	r2, [pc, #112]	; (800f868 <vTaskDelete+0xd0>)
 800f7f8:	6013      	str	r3, [r2, #0]
 800f7fa:	e009      	b.n	800f810 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800f7fc:	4b1b      	ldr	r3, [pc, #108]	; (800f86c <vTaskDelete+0xd4>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	3b01      	subs	r3, #1
 800f802:	4a1a      	ldr	r2, [pc, #104]	; (800f86c <vTaskDelete+0xd4>)
 800f804:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800f806:	68f8      	ldr	r0, [r7, #12]
 800f808:	f000 fd12 	bl	8010230 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800f80c:	f000 fd44 	bl	8010298 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800f810:	f001 fc20 	bl	8011054 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800f814:	4b16      	ldr	r3, [pc, #88]	; (800f870 <vTaskDelete+0xd8>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d01b      	beq.n	800f854 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800f81c:	4b0f      	ldr	r3, [pc, #60]	; (800f85c <vTaskDelete+0xc4>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	68fa      	ldr	r2, [r7, #12]
 800f822:	429a      	cmp	r2, r3
 800f824:	d116      	bne.n	800f854 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800f826:	4b13      	ldr	r3, [pc, #76]	; (800f874 <vTaskDelete+0xdc>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00a      	beq.n	800f844 <vTaskDelete+0xac>
	__asm volatile
 800f82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f832:	f383 8811 	msr	BASEPRI, r3
 800f836:	f3bf 8f6f 	isb	sy
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	60bb      	str	r3, [r7, #8]
}
 800f840:	bf00      	nop
 800f842:	e7fe      	b.n	800f842 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800f844:	4b0c      	ldr	r3, [pc, #48]	; (800f878 <vTaskDelete+0xe0>)
 800f846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f84a:	601a      	str	r2, [r3, #0]
 800f84c:	f3bf 8f4f 	dsb	sy
 800f850:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f854:	bf00      	nop
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	20005174 	.word	0x20005174
 800f860:	20005664 	.word	0x20005664
 800f864:	2000561c 	.word	0x2000561c
 800f868:	20005630 	.word	0x20005630
 800f86c:	20005648 	.word	0x20005648
 800f870:	20005654 	.word	0x20005654
 800f874:	20005670 	.word	0x20005670
 800f878:	e000ed04 	.word	0xe000ed04

0800f87c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f884:	2300      	movs	r3, #0
 800f886:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d017      	beq.n	800f8be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f88e:	4b13      	ldr	r3, [pc, #76]	; (800f8dc <vTaskDelay+0x60>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00a      	beq.n	800f8ac <vTaskDelay+0x30>
	__asm volatile
 800f896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89a:	f383 8811 	msr	BASEPRI, r3
 800f89e:	f3bf 8f6f 	isb	sy
 800f8a2:	f3bf 8f4f 	dsb	sy
 800f8a6:	60bb      	str	r3, [r7, #8]
}
 800f8a8:	bf00      	nop
 800f8aa:	e7fe      	b.n	800f8aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f8ac:	f000 f88a 	bl	800f9c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 feb2 	bl	801061c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f8b8:	f000 f892 	bl	800f9e0 <xTaskResumeAll>
 800f8bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d107      	bne.n	800f8d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f8c4:	4b06      	ldr	r3, [pc, #24]	; (800f8e0 <vTaskDelay+0x64>)
 800f8c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8ca:	601a      	str	r2, [r3, #0]
 800f8cc:	f3bf 8f4f 	dsb	sy
 800f8d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8d4:	bf00      	nop
 800f8d6:	3710      	adds	r7, #16
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	20005670 	.word	0x20005670
 800f8e0:	e000ed04 	.word	0xe000ed04

0800f8e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b08a      	sub	sp, #40	; 0x28
 800f8e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f8f2:	463a      	mov	r2, r7
 800f8f4:	1d39      	adds	r1, r7, #4
 800f8f6:	f107 0308 	add.w	r3, r7, #8
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fe fab0 	bl	800de60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f900:	6839      	ldr	r1, [r7, #0]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	68ba      	ldr	r2, [r7, #8]
 800f906:	9202      	str	r2, [sp, #8]
 800f908:	9301      	str	r3, [sp, #4]
 800f90a:	2300      	movs	r3, #0
 800f90c:	9300      	str	r3, [sp, #0]
 800f90e:	2300      	movs	r3, #0
 800f910:	460a      	mov	r2, r1
 800f912:	4924      	ldr	r1, [pc, #144]	; (800f9a4 <vTaskStartScheduler+0xc0>)
 800f914:	4824      	ldr	r0, [pc, #144]	; (800f9a8 <vTaskStartScheduler+0xc4>)
 800f916:	f7ff fd87 	bl	800f428 <xTaskCreateStatic>
 800f91a:	4603      	mov	r3, r0
 800f91c:	4a23      	ldr	r2, [pc, #140]	; (800f9ac <vTaskStartScheduler+0xc8>)
 800f91e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f920:	4b22      	ldr	r3, [pc, #136]	; (800f9ac <vTaskStartScheduler+0xc8>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d002      	beq.n	800f92e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f928:	2301      	movs	r3, #1
 800f92a:	617b      	str	r3, [r7, #20]
 800f92c:	e001      	b.n	800f932 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f92e:	2300      	movs	r3, #0
 800f930:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	2b01      	cmp	r3, #1
 800f936:	d102      	bne.n	800f93e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f938:	f000 fec4 	bl	80106c4 <xTimerCreateTimerTask>
 800f93c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	2b01      	cmp	r3, #1
 800f942:	d11b      	bne.n	800f97c <vTaskStartScheduler+0x98>
	__asm volatile
 800f944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f948:	f383 8811 	msr	BASEPRI, r3
 800f94c:	f3bf 8f6f 	isb	sy
 800f950:	f3bf 8f4f 	dsb	sy
 800f954:	613b      	str	r3, [r7, #16]
}
 800f956:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f958:	4b15      	ldr	r3, [pc, #84]	; (800f9b0 <vTaskStartScheduler+0xcc>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	3354      	adds	r3, #84	; 0x54
 800f95e:	4a15      	ldr	r2, [pc, #84]	; (800f9b4 <vTaskStartScheduler+0xd0>)
 800f960:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f962:	4b15      	ldr	r3, [pc, #84]	; (800f9b8 <vTaskStartScheduler+0xd4>)
 800f964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f968:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f96a:	4b14      	ldr	r3, [pc, #80]	; (800f9bc <vTaskStartScheduler+0xd8>)
 800f96c:	2201      	movs	r2, #1
 800f96e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f970:	4b13      	ldr	r3, [pc, #76]	; (800f9c0 <vTaskStartScheduler+0xdc>)
 800f972:	2200      	movs	r2, #0
 800f974:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f976:	f001 fa9b 	bl	8010eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f97a:	e00e      	b.n	800f99a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f982:	d10a      	bne.n	800f99a <vTaskStartScheduler+0xb6>
	__asm volatile
 800f984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f988:	f383 8811 	msr	BASEPRI, r3
 800f98c:	f3bf 8f6f 	isb	sy
 800f990:	f3bf 8f4f 	dsb	sy
 800f994:	60fb      	str	r3, [r7, #12]
}
 800f996:	bf00      	nop
 800f998:	e7fe      	b.n	800f998 <vTaskStartScheduler+0xb4>
}
 800f99a:	bf00      	nop
 800f99c:	3718      	adds	r7, #24
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	0801f928 	.word	0x0801f928
 800f9a8:	08010125 	.word	0x08010125
 800f9ac:	2000566c 	.word	0x2000566c
 800f9b0:	20005174 	.word	0x20005174
 800f9b4:	200001f0 	.word	0x200001f0
 800f9b8:	20005668 	.word	0x20005668
 800f9bc:	20005654 	.word	0x20005654
 800f9c0:	2000564c 	.word	0x2000564c

0800f9c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f9c8:	4b04      	ldr	r3, [pc, #16]	; (800f9dc <vTaskSuspendAll+0x18>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	4a03      	ldr	r2, [pc, #12]	; (800f9dc <vTaskSuspendAll+0x18>)
 800f9d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f9d2:	bf00      	nop
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr
 800f9dc:	20005670 	.word	0x20005670

0800f9e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f9ee:	4b42      	ldr	r3, [pc, #264]	; (800faf8 <xTaskResumeAll+0x118>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d10a      	bne.n	800fa0c <xTaskResumeAll+0x2c>
	__asm volatile
 800f9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9fa:	f383 8811 	msr	BASEPRI, r3
 800f9fe:	f3bf 8f6f 	isb	sy
 800fa02:	f3bf 8f4f 	dsb	sy
 800fa06:	603b      	str	r3, [r7, #0]
}
 800fa08:	bf00      	nop
 800fa0a:	e7fe      	b.n	800fa0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fa0c:	f001 faf2 	bl	8010ff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fa10:	4b39      	ldr	r3, [pc, #228]	; (800faf8 <xTaskResumeAll+0x118>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	3b01      	subs	r3, #1
 800fa16:	4a38      	ldr	r2, [pc, #224]	; (800faf8 <xTaskResumeAll+0x118>)
 800fa18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa1a:	4b37      	ldr	r3, [pc, #220]	; (800faf8 <xTaskResumeAll+0x118>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d162      	bne.n	800fae8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fa22:	4b36      	ldr	r3, [pc, #216]	; (800fafc <xTaskResumeAll+0x11c>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d05e      	beq.n	800fae8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa2a:	e02f      	b.n	800fa8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa2c:	4b34      	ldr	r3, [pc, #208]	; (800fb00 <xTaskResumeAll+0x120>)
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	3318      	adds	r3, #24
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fe fcbd 	bl	800e3b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	3304      	adds	r3, #4
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7fe fcb8 	bl	800e3b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa4c:	4b2d      	ldr	r3, [pc, #180]	; (800fb04 <xTaskResumeAll+0x124>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d903      	bls.n	800fa5c <xTaskResumeAll+0x7c>
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa58:	4a2a      	ldr	r2, [pc, #168]	; (800fb04 <xTaskResumeAll+0x124>)
 800fa5a:	6013      	str	r3, [r2, #0]
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa60:	4613      	mov	r3, r2
 800fa62:	009b      	lsls	r3, r3, #2
 800fa64:	4413      	add	r3, r2
 800fa66:	009b      	lsls	r3, r3, #2
 800fa68:	4a27      	ldr	r2, [pc, #156]	; (800fb08 <xTaskResumeAll+0x128>)
 800fa6a:	441a      	add	r2, r3
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	3304      	adds	r3, #4
 800fa70:	4619      	mov	r1, r3
 800fa72:	4610      	mov	r0, r2
 800fa74:	f7fe fc43 	bl	800e2fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa7c:	4b23      	ldr	r3, [pc, #140]	; (800fb0c <xTaskResumeAll+0x12c>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d302      	bcc.n	800fa8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fa86:	4b22      	ldr	r3, [pc, #136]	; (800fb10 <xTaskResumeAll+0x130>)
 800fa88:	2201      	movs	r2, #1
 800fa8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa8c:	4b1c      	ldr	r3, [pc, #112]	; (800fb00 <xTaskResumeAll+0x120>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d1cb      	bne.n	800fa2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d001      	beq.n	800fa9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fa9a:	f000 fbfd 	bl	8010298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fa9e:	4b1d      	ldr	r3, [pc, #116]	; (800fb14 <xTaskResumeAll+0x134>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d010      	beq.n	800facc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800faaa:	f000 f847 	bl	800fb3c <xTaskIncrementTick>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d002      	beq.n	800faba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fab4:	4b16      	ldr	r3, [pc, #88]	; (800fb10 <xTaskResumeAll+0x130>)
 800fab6:	2201      	movs	r2, #1
 800fab8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	3b01      	subs	r3, #1
 800fabe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d1f1      	bne.n	800faaa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fac6:	4b13      	ldr	r3, [pc, #76]	; (800fb14 <xTaskResumeAll+0x134>)
 800fac8:	2200      	movs	r2, #0
 800faca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800facc:	4b10      	ldr	r3, [pc, #64]	; (800fb10 <xTaskResumeAll+0x130>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d009      	beq.n	800fae8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fad4:	2301      	movs	r3, #1
 800fad6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fad8:	4b0f      	ldr	r3, [pc, #60]	; (800fb18 <xTaskResumeAll+0x138>)
 800fada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fade:	601a      	str	r2, [r3, #0]
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fae8:	f001 fab4 	bl	8011054 <vPortExitCritical>

	return xAlreadyYielded;
 800faec:	68bb      	ldr	r3, [r7, #8]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3710      	adds	r7, #16
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	20005670 	.word	0x20005670
 800fafc:	20005648 	.word	0x20005648
 800fb00:	20005608 	.word	0x20005608
 800fb04:	20005650 	.word	0x20005650
 800fb08:	20005178 	.word	0x20005178
 800fb0c:	20005174 	.word	0x20005174
 800fb10:	2000565c 	.word	0x2000565c
 800fb14:	20005658 	.word	0x20005658
 800fb18:	e000ed04 	.word	0xe000ed04

0800fb1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b083      	sub	sp, #12
 800fb20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fb22:	4b05      	ldr	r3, [pc, #20]	; (800fb38 <xTaskGetTickCount+0x1c>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fb28:	687b      	ldr	r3, [r7, #4]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	370c      	adds	r7, #12
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop
 800fb38:	2000564c 	.word	0x2000564c

0800fb3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b086      	sub	sp, #24
 800fb40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fb42:	2300      	movs	r3, #0
 800fb44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb46:	4b4f      	ldr	r3, [pc, #316]	; (800fc84 <xTaskIncrementTick+0x148>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f040 808f 	bne.w	800fc6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fb50:	4b4d      	ldr	r3, [pc, #308]	; (800fc88 <xTaskIncrementTick+0x14c>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	3301      	adds	r3, #1
 800fb56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fb58:	4a4b      	ldr	r2, [pc, #300]	; (800fc88 <xTaskIncrementTick+0x14c>)
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d120      	bne.n	800fba6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fb64:	4b49      	ldr	r3, [pc, #292]	; (800fc8c <xTaskIncrementTick+0x150>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d00a      	beq.n	800fb84 <xTaskIncrementTick+0x48>
	__asm volatile
 800fb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb72:	f383 8811 	msr	BASEPRI, r3
 800fb76:	f3bf 8f6f 	isb	sy
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	603b      	str	r3, [r7, #0]
}
 800fb80:	bf00      	nop
 800fb82:	e7fe      	b.n	800fb82 <xTaskIncrementTick+0x46>
 800fb84:	4b41      	ldr	r3, [pc, #260]	; (800fc8c <xTaskIncrementTick+0x150>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	60fb      	str	r3, [r7, #12]
 800fb8a:	4b41      	ldr	r3, [pc, #260]	; (800fc90 <xTaskIncrementTick+0x154>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	4a3f      	ldr	r2, [pc, #252]	; (800fc8c <xTaskIncrementTick+0x150>)
 800fb90:	6013      	str	r3, [r2, #0]
 800fb92:	4a3f      	ldr	r2, [pc, #252]	; (800fc90 <xTaskIncrementTick+0x154>)
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	6013      	str	r3, [r2, #0]
 800fb98:	4b3e      	ldr	r3, [pc, #248]	; (800fc94 <xTaskIncrementTick+0x158>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	4a3d      	ldr	r2, [pc, #244]	; (800fc94 <xTaskIncrementTick+0x158>)
 800fba0:	6013      	str	r3, [r2, #0]
 800fba2:	f000 fb79 	bl	8010298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fba6:	4b3c      	ldr	r3, [pc, #240]	; (800fc98 <xTaskIncrementTick+0x15c>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	693a      	ldr	r2, [r7, #16]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d349      	bcc.n	800fc44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fbb0:	4b36      	ldr	r3, [pc, #216]	; (800fc8c <xTaskIncrementTick+0x150>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d104      	bne.n	800fbc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbba:	4b37      	ldr	r3, [pc, #220]	; (800fc98 <xTaskIncrementTick+0x15c>)
 800fbbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbc0:	601a      	str	r2, [r3, #0]
					break;
 800fbc2:	e03f      	b.n	800fc44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbc4:	4b31      	ldr	r3, [pc, #196]	; (800fc8c <xTaskIncrementTick+0x150>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	68db      	ldr	r3, [r3, #12]
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d203      	bcs.n	800fbe4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fbdc:	4a2e      	ldr	r2, [pc, #184]	; (800fc98 <xTaskIncrementTick+0x15c>)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fbe2:	e02f      	b.n	800fc44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	3304      	adds	r3, #4
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7fe fbe5 	bl	800e3b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d004      	beq.n	800fc00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	3318      	adds	r3, #24
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fe fbdc 	bl	800e3b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc04:	4b25      	ldr	r3, [pc, #148]	; (800fc9c <xTaskIncrementTick+0x160>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d903      	bls.n	800fc14 <xTaskIncrementTick+0xd8>
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc10:	4a22      	ldr	r2, [pc, #136]	; (800fc9c <xTaskIncrementTick+0x160>)
 800fc12:	6013      	str	r3, [r2, #0]
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc18:	4613      	mov	r3, r2
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	4413      	add	r3, r2
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	4a1f      	ldr	r2, [pc, #124]	; (800fca0 <xTaskIncrementTick+0x164>)
 800fc22:	441a      	add	r2, r3
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	3304      	adds	r3, #4
 800fc28:	4619      	mov	r1, r3
 800fc2a:	4610      	mov	r0, r2
 800fc2c:	f7fe fb67 	bl	800e2fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc34:	4b1b      	ldr	r3, [pc, #108]	; (800fca4 <xTaskIncrementTick+0x168>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d3b8      	bcc.n	800fbb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc42:	e7b5      	b.n	800fbb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fc44:	4b17      	ldr	r3, [pc, #92]	; (800fca4 <xTaskIncrementTick+0x168>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc4a:	4915      	ldr	r1, [pc, #84]	; (800fca0 <xTaskIncrementTick+0x164>)
 800fc4c:	4613      	mov	r3, r2
 800fc4e:	009b      	lsls	r3, r3, #2
 800fc50:	4413      	add	r3, r2
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	440b      	add	r3, r1
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d901      	bls.n	800fc60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fc60:	4b11      	ldr	r3, [pc, #68]	; (800fca8 <xTaskIncrementTick+0x16c>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d007      	beq.n	800fc78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	617b      	str	r3, [r7, #20]
 800fc6c:	e004      	b.n	800fc78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fc6e:	4b0f      	ldr	r3, [pc, #60]	; (800fcac <xTaskIncrementTick+0x170>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	3301      	adds	r3, #1
 800fc74:	4a0d      	ldr	r2, [pc, #52]	; (800fcac <xTaskIncrementTick+0x170>)
 800fc76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fc78:	697b      	ldr	r3, [r7, #20]
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3718      	adds	r7, #24
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	20005670 	.word	0x20005670
 800fc88:	2000564c 	.word	0x2000564c
 800fc8c:	20005600 	.word	0x20005600
 800fc90:	20005604 	.word	0x20005604
 800fc94:	20005660 	.word	0x20005660
 800fc98:	20005668 	.word	0x20005668
 800fc9c:	20005650 	.word	0x20005650
 800fca0:	20005178 	.word	0x20005178
 800fca4:	20005174 	.word	0x20005174
 800fca8:	2000565c 	.word	0x2000565c
 800fcac:	20005658 	.word	0x20005658

0800fcb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b085      	sub	sp, #20
 800fcb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fcb6:	4b2a      	ldr	r3, [pc, #168]	; (800fd60 <vTaskSwitchContext+0xb0>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d003      	beq.n	800fcc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fcbe:	4b29      	ldr	r3, [pc, #164]	; (800fd64 <vTaskSwitchContext+0xb4>)
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fcc4:	e046      	b.n	800fd54 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800fcc6:	4b27      	ldr	r3, [pc, #156]	; (800fd64 <vTaskSwitchContext+0xb4>)
 800fcc8:	2200      	movs	r2, #0
 800fcca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fccc:	4b26      	ldr	r3, [pc, #152]	; (800fd68 <vTaskSwitchContext+0xb8>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	60fb      	str	r3, [r7, #12]
 800fcd2:	e010      	b.n	800fcf6 <vTaskSwitchContext+0x46>
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d10a      	bne.n	800fcf0 <vTaskSwitchContext+0x40>
	__asm volatile
 800fcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcde:	f383 8811 	msr	BASEPRI, r3
 800fce2:	f3bf 8f6f 	isb	sy
 800fce6:	f3bf 8f4f 	dsb	sy
 800fcea:	607b      	str	r3, [r7, #4]
}
 800fcec:	bf00      	nop
 800fcee:	e7fe      	b.n	800fcee <vTaskSwitchContext+0x3e>
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	3b01      	subs	r3, #1
 800fcf4:	60fb      	str	r3, [r7, #12]
 800fcf6:	491d      	ldr	r1, [pc, #116]	; (800fd6c <vTaskSwitchContext+0xbc>)
 800fcf8:	68fa      	ldr	r2, [r7, #12]
 800fcfa:	4613      	mov	r3, r2
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	4413      	add	r3, r2
 800fd00:	009b      	lsls	r3, r3, #2
 800fd02:	440b      	add	r3, r1
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d0e4      	beq.n	800fcd4 <vTaskSwitchContext+0x24>
 800fd0a:	68fa      	ldr	r2, [r7, #12]
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	009b      	lsls	r3, r3, #2
 800fd10:	4413      	add	r3, r2
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	4a15      	ldr	r2, [pc, #84]	; (800fd6c <vTaskSwitchContext+0xbc>)
 800fd16:	4413      	add	r3, r2
 800fd18:	60bb      	str	r3, [r7, #8]
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	685a      	ldr	r2, [r3, #4]
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	605a      	str	r2, [r3, #4]
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	685a      	ldr	r2, [r3, #4]
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	3308      	adds	r3, #8
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d104      	bne.n	800fd3a <vTaskSwitchContext+0x8a>
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	685a      	ldr	r2, [r3, #4]
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	605a      	str	r2, [r3, #4]
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	4a0b      	ldr	r2, [pc, #44]	; (800fd70 <vTaskSwitchContext+0xc0>)
 800fd42:	6013      	str	r3, [r2, #0]
 800fd44:	4a08      	ldr	r2, [pc, #32]	; (800fd68 <vTaskSwitchContext+0xb8>)
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fd4a:	4b09      	ldr	r3, [pc, #36]	; (800fd70 <vTaskSwitchContext+0xc0>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	3354      	adds	r3, #84	; 0x54
 800fd50:	4a08      	ldr	r2, [pc, #32]	; (800fd74 <vTaskSwitchContext+0xc4>)
 800fd52:	6013      	str	r3, [r2, #0]
}
 800fd54:	bf00      	nop
 800fd56:	3714      	adds	r7, #20
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr
 800fd60:	20005670 	.word	0x20005670
 800fd64:	2000565c 	.word	0x2000565c
 800fd68:	20005650 	.word	0x20005650
 800fd6c:	20005178 	.word	0x20005178
 800fd70:	20005174 	.word	0x20005174
 800fd74:	200001f0 	.word	0x200001f0

0800fd78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d10a      	bne.n	800fd9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8c:	f383 8811 	msr	BASEPRI, r3
 800fd90:	f3bf 8f6f 	isb	sy
 800fd94:	f3bf 8f4f 	dsb	sy
 800fd98:	60fb      	str	r3, [r7, #12]
}
 800fd9a:	bf00      	nop
 800fd9c:	e7fe      	b.n	800fd9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd9e:	4b07      	ldr	r3, [pc, #28]	; (800fdbc <vTaskPlaceOnEventList+0x44>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	3318      	adds	r3, #24
 800fda4:	4619      	mov	r1, r3
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7fe facd 	bl	800e346 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fdac:	2101      	movs	r1, #1
 800fdae:	6838      	ldr	r0, [r7, #0]
 800fdb0:	f000 fc34 	bl	801061c <prvAddCurrentTaskToDelayedList>
}
 800fdb4:	bf00      	nop
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	20005174 	.word	0x20005174

0800fdc0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b086      	sub	sp, #24
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d10a      	bne.n	800fde8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800fdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd6:	f383 8811 	msr	BASEPRI, r3
 800fdda:	f3bf 8f6f 	isb	sy
 800fdde:	f3bf 8f4f 	dsb	sy
 800fde2:	617b      	str	r3, [r7, #20]
}
 800fde4:	bf00      	nop
 800fde6:	e7fe      	b.n	800fde6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800fde8:	4b11      	ldr	r3, [pc, #68]	; (800fe30 <vTaskPlaceOnUnorderedEventList+0x70>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d10a      	bne.n	800fe06 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800fdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf4:	f383 8811 	msr	BASEPRI, r3
 800fdf8:	f3bf 8f6f 	isb	sy
 800fdfc:	f3bf 8f4f 	dsb	sy
 800fe00:	613b      	str	r3, [r7, #16]
}
 800fe02:	bf00      	nop
 800fe04:	e7fe      	b.n	800fe04 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800fe06:	4b0b      	ldr	r3, [pc, #44]	; (800fe34 <vTaskPlaceOnUnorderedEventList+0x74>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	68ba      	ldr	r2, [r7, #8]
 800fe0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800fe10:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe12:	4b08      	ldr	r3, [pc, #32]	; (800fe34 <vTaskPlaceOnUnorderedEventList+0x74>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	3318      	adds	r3, #24
 800fe18:	4619      	mov	r1, r3
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f7fe fa6f 	bl	800e2fe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe20:	2101      	movs	r1, #1
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f000 fbfa 	bl	801061c <prvAddCurrentTaskToDelayedList>
}
 800fe28:	bf00      	nop
 800fe2a:	3718      	adds	r7, #24
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}
 800fe30:	20005670 	.word	0x20005670
 800fe34:	20005174 	.word	0x20005174

0800fe38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b086      	sub	sp, #24
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d10a      	bne.n	800fe60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fe4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe4e:	f383 8811 	msr	BASEPRI, r3
 800fe52:	f3bf 8f6f 	isb	sy
 800fe56:	f3bf 8f4f 	dsb	sy
 800fe5a:	617b      	str	r3, [r7, #20]
}
 800fe5c:	bf00      	nop
 800fe5e:	e7fe      	b.n	800fe5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe60:	4b0a      	ldr	r3, [pc, #40]	; (800fe8c <vTaskPlaceOnEventListRestricted+0x54>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	3318      	adds	r3, #24
 800fe66:	4619      	mov	r1, r3
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f7fe fa48 	bl	800e2fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d002      	beq.n	800fe7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fe74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fe7a:	6879      	ldr	r1, [r7, #4]
 800fe7c:	68b8      	ldr	r0, [r7, #8]
 800fe7e:	f000 fbcd 	bl	801061c <prvAddCurrentTaskToDelayedList>
	}
 800fe82:	bf00      	nop
 800fe84:	3718      	adds	r7, #24
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	20005174 	.word	0x20005174

0800fe90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	68db      	ldr	r3, [r3, #12]
 800fe9c:	68db      	ldr	r3, [r3, #12]
 800fe9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d10a      	bne.n	800febc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feaa:	f383 8811 	msr	BASEPRI, r3
 800feae:	f3bf 8f6f 	isb	sy
 800feb2:	f3bf 8f4f 	dsb	sy
 800feb6:	60fb      	str	r3, [r7, #12]
}
 800feb8:	bf00      	nop
 800feba:	e7fe      	b.n	800feba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	3318      	adds	r3, #24
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7fe fa79 	bl	800e3b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fec6:	4b1e      	ldr	r3, [pc, #120]	; (800ff40 <xTaskRemoveFromEventList+0xb0>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d11d      	bne.n	800ff0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	3304      	adds	r3, #4
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fe fa70 	bl	800e3b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fedc:	4b19      	ldr	r3, [pc, #100]	; (800ff44 <xTaskRemoveFromEventList+0xb4>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d903      	bls.n	800feec <xTaskRemoveFromEventList+0x5c>
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fee8:	4a16      	ldr	r2, [pc, #88]	; (800ff44 <xTaskRemoveFromEventList+0xb4>)
 800feea:	6013      	str	r3, [r2, #0]
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fef0:	4613      	mov	r3, r2
 800fef2:	009b      	lsls	r3, r3, #2
 800fef4:	4413      	add	r3, r2
 800fef6:	009b      	lsls	r3, r3, #2
 800fef8:	4a13      	ldr	r2, [pc, #76]	; (800ff48 <xTaskRemoveFromEventList+0xb8>)
 800fefa:	441a      	add	r2, r3
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	3304      	adds	r3, #4
 800ff00:	4619      	mov	r1, r3
 800ff02:	4610      	mov	r0, r2
 800ff04:	f7fe f9fb 	bl	800e2fe <vListInsertEnd>
 800ff08:	e005      	b.n	800ff16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	3318      	adds	r3, #24
 800ff0e:	4619      	mov	r1, r3
 800ff10:	480e      	ldr	r0, [pc, #56]	; (800ff4c <xTaskRemoveFromEventList+0xbc>)
 800ff12:	f7fe f9f4 	bl	800e2fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff1a:	4b0d      	ldr	r3, [pc, #52]	; (800ff50 <xTaskRemoveFromEventList+0xc0>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d905      	bls.n	800ff30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff24:	2301      	movs	r3, #1
 800ff26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff28:	4b0a      	ldr	r3, [pc, #40]	; (800ff54 <xTaskRemoveFromEventList+0xc4>)
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	601a      	str	r2, [r3, #0]
 800ff2e:	e001      	b.n	800ff34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ff30:	2300      	movs	r3, #0
 800ff32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ff34:	697b      	ldr	r3, [r7, #20]
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3718      	adds	r7, #24
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	20005670 	.word	0x20005670
 800ff44:	20005650 	.word	0x20005650
 800ff48:	20005178 	.word	0x20005178
 800ff4c:	20005608 	.word	0x20005608
 800ff50:	20005174 	.word	0x20005174
 800ff54:	2000565c 	.word	0x2000565c

0800ff58 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b086      	sub	sp, #24
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800ff62:	4b29      	ldr	r3, [pc, #164]	; (8010008 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10a      	bne.n	800ff80 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800ff6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6e:	f383 8811 	msr	BASEPRI, r3
 800ff72:	f3bf 8f6f 	isb	sy
 800ff76:	f3bf 8f4f 	dsb	sy
 800ff7a:	613b      	str	r3, [r7, #16]
}
 800ff7c:	bf00      	nop
 800ff7e:	e7fe      	b.n	800ff7e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d10a      	bne.n	800ffac <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800ff96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9a:	f383 8811 	msr	BASEPRI, r3
 800ff9e:	f3bf 8f6f 	isb	sy
 800ffa2:	f3bf 8f4f 	dsb	sy
 800ffa6:	60fb      	str	r3, [r7, #12]
}
 800ffa8:	bf00      	nop
 800ffaa:	e7fe      	b.n	800ffaa <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f7fe fa03 	bl	800e3b8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	3304      	adds	r3, #4
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fe f9fe 	bl	800e3b8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffc0:	4b12      	ldr	r3, [pc, #72]	; (801000c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d903      	bls.n	800ffd0 <vTaskRemoveFromUnorderedEventList+0x78>
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffcc:	4a0f      	ldr	r2, [pc, #60]	; (801000c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ffce:	6013      	str	r3, [r2, #0]
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd4:	4613      	mov	r3, r2
 800ffd6:	009b      	lsls	r3, r3, #2
 800ffd8:	4413      	add	r3, r2
 800ffda:	009b      	lsls	r3, r3, #2
 800ffdc:	4a0c      	ldr	r2, [pc, #48]	; (8010010 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800ffde:	441a      	add	r2, r3
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	3304      	adds	r3, #4
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	4610      	mov	r0, r2
 800ffe8:	f7fe f989 	bl	800e2fe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fff0:	4b08      	ldr	r3, [pc, #32]	; (8010014 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d902      	bls.n	8010000 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800fffa:	4b07      	ldr	r3, [pc, #28]	; (8010018 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800fffc:	2201      	movs	r2, #1
 800fffe:	601a      	str	r2, [r3, #0]
	}
}
 8010000:	bf00      	nop
 8010002:	3718      	adds	r7, #24
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	20005670 	.word	0x20005670
 801000c:	20005650 	.word	0x20005650
 8010010:	20005178 	.word	0x20005178
 8010014:	20005174 	.word	0x20005174
 8010018:	2000565c 	.word	0x2000565c

0801001c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801001c:	b480      	push	{r7}
 801001e:	b083      	sub	sp, #12
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010024:	4b06      	ldr	r3, [pc, #24]	; (8010040 <vTaskInternalSetTimeOutState+0x24>)
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801002c:	4b05      	ldr	r3, [pc, #20]	; (8010044 <vTaskInternalSetTimeOutState+0x28>)
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	605a      	str	r2, [r3, #4]
}
 8010034:	bf00      	nop
 8010036:	370c      	adds	r7, #12
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr
 8010040:	20005660 	.word	0x20005660
 8010044:	2000564c 	.word	0x2000564c

08010048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b088      	sub	sp, #32
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d10a      	bne.n	801006e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005c:	f383 8811 	msr	BASEPRI, r3
 8010060:	f3bf 8f6f 	isb	sy
 8010064:	f3bf 8f4f 	dsb	sy
 8010068:	613b      	str	r3, [r7, #16]
}
 801006a:	bf00      	nop
 801006c:	e7fe      	b.n	801006c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d10a      	bne.n	801008a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010078:	f383 8811 	msr	BASEPRI, r3
 801007c:	f3bf 8f6f 	isb	sy
 8010080:	f3bf 8f4f 	dsb	sy
 8010084:	60fb      	str	r3, [r7, #12]
}
 8010086:	bf00      	nop
 8010088:	e7fe      	b.n	8010088 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801008a:	f000 ffb3 	bl	8010ff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801008e:	4b1d      	ldr	r3, [pc, #116]	; (8010104 <xTaskCheckForTimeOut+0xbc>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	69ba      	ldr	r2, [r7, #24]
 801009a:	1ad3      	subs	r3, r2, r3
 801009c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100a6:	d102      	bne.n	80100ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100a8:	2300      	movs	r3, #0
 80100aa:	61fb      	str	r3, [r7, #28]
 80100ac:	e023      	b.n	80100f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	4b15      	ldr	r3, [pc, #84]	; (8010108 <xTaskCheckForTimeOut+0xc0>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d007      	beq.n	80100ca <xTaskCheckForTimeOut+0x82>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	69ba      	ldr	r2, [r7, #24]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d302      	bcc.n	80100ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100c4:	2301      	movs	r3, #1
 80100c6:	61fb      	str	r3, [r7, #28]
 80100c8:	e015      	b.n	80100f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	697a      	ldr	r2, [r7, #20]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d20b      	bcs.n	80100ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	1ad2      	subs	r2, r2, r3
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7ff ff9b 	bl	801001c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80100e6:	2300      	movs	r3, #0
 80100e8:	61fb      	str	r3, [r7, #28]
 80100ea:	e004      	b.n	80100f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	2200      	movs	r2, #0
 80100f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80100f2:	2301      	movs	r3, #1
 80100f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80100f6:	f000 ffad 	bl	8011054 <vPortExitCritical>

	return xReturn;
 80100fa:	69fb      	ldr	r3, [r7, #28]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3720      	adds	r7, #32
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	2000564c 	.word	0x2000564c
 8010108:	20005660 	.word	0x20005660

0801010c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801010c:	b480      	push	{r7}
 801010e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010110:	4b03      	ldr	r3, [pc, #12]	; (8010120 <vTaskMissedYield+0x14>)
 8010112:	2201      	movs	r2, #1
 8010114:	601a      	str	r2, [r3, #0]
}
 8010116:	bf00      	nop
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr
 8010120:	2000565c 	.word	0x2000565c

08010124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801012c:	f000 f852 	bl	80101d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010130:	4b06      	ldr	r3, [pc, #24]	; (801014c <prvIdleTask+0x28>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b01      	cmp	r3, #1
 8010136:	d9f9      	bls.n	801012c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010138:	4b05      	ldr	r3, [pc, #20]	; (8010150 <prvIdleTask+0x2c>)
 801013a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801013e:	601a      	str	r2, [r3, #0]
 8010140:	f3bf 8f4f 	dsb	sy
 8010144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010148:	e7f0      	b.n	801012c <prvIdleTask+0x8>
 801014a:	bf00      	nop
 801014c:	20005178 	.word	0x20005178
 8010150:	e000ed04 	.word	0xe000ed04

08010154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801015a:	2300      	movs	r3, #0
 801015c:	607b      	str	r3, [r7, #4]
 801015e:	e00c      	b.n	801017a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	4613      	mov	r3, r2
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	4413      	add	r3, r2
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	4a12      	ldr	r2, [pc, #72]	; (80101b4 <prvInitialiseTaskLists+0x60>)
 801016c:	4413      	add	r3, r2
 801016e:	4618      	mov	r0, r3
 8010170:	f7fe f898 	bl	800e2a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	3301      	adds	r3, #1
 8010178:	607b      	str	r3, [r7, #4]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2b37      	cmp	r3, #55	; 0x37
 801017e:	d9ef      	bls.n	8010160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010180:	480d      	ldr	r0, [pc, #52]	; (80101b8 <prvInitialiseTaskLists+0x64>)
 8010182:	f7fe f88f 	bl	800e2a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010186:	480d      	ldr	r0, [pc, #52]	; (80101bc <prvInitialiseTaskLists+0x68>)
 8010188:	f7fe f88c 	bl	800e2a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801018c:	480c      	ldr	r0, [pc, #48]	; (80101c0 <prvInitialiseTaskLists+0x6c>)
 801018e:	f7fe f889 	bl	800e2a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010192:	480c      	ldr	r0, [pc, #48]	; (80101c4 <prvInitialiseTaskLists+0x70>)
 8010194:	f7fe f886 	bl	800e2a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010198:	480b      	ldr	r0, [pc, #44]	; (80101c8 <prvInitialiseTaskLists+0x74>)
 801019a:	f7fe f883 	bl	800e2a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801019e:	4b0b      	ldr	r3, [pc, #44]	; (80101cc <prvInitialiseTaskLists+0x78>)
 80101a0:	4a05      	ldr	r2, [pc, #20]	; (80101b8 <prvInitialiseTaskLists+0x64>)
 80101a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101a4:	4b0a      	ldr	r3, [pc, #40]	; (80101d0 <prvInitialiseTaskLists+0x7c>)
 80101a6:	4a05      	ldr	r2, [pc, #20]	; (80101bc <prvInitialiseTaskLists+0x68>)
 80101a8:	601a      	str	r2, [r3, #0]
}
 80101aa:	bf00      	nop
 80101ac:	3708      	adds	r7, #8
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	20005178 	.word	0x20005178
 80101b8:	200055d8 	.word	0x200055d8
 80101bc:	200055ec 	.word	0x200055ec
 80101c0:	20005608 	.word	0x20005608
 80101c4:	2000561c 	.word	0x2000561c
 80101c8:	20005634 	.word	0x20005634
 80101cc:	20005600 	.word	0x20005600
 80101d0:	20005604 	.word	0x20005604

080101d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b082      	sub	sp, #8
 80101d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101da:	e019      	b.n	8010210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80101dc:	f000 ff0a 	bl	8010ff4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101e0:	4b10      	ldr	r3, [pc, #64]	; (8010224 <prvCheckTasksWaitingTermination+0x50>)
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	3304      	adds	r3, #4
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fe f8e3 	bl	800e3b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80101f2:	4b0d      	ldr	r3, [pc, #52]	; (8010228 <prvCheckTasksWaitingTermination+0x54>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	3b01      	subs	r3, #1
 80101f8:	4a0b      	ldr	r2, [pc, #44]	; (8010228 <prvCheckTasksWaitingTermination+0x54>)
 80101fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80101fc:	4b0b      	ldr	r3, [pc, #44]	; (801022c <prvCheckTasksWaitingTermination+0x58>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	3b01      	subs	r3, #1
 8010202:	4a0a      	ldr	r2, [pc, #40]	; (801022c <prvCheckTasksWaitingTermination+0x58>)
 8010204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010206:	f000 ff25 	bl	8011054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 f810 	bl	8010230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010210:	4b06      	ldr	r3, [pc, #24]	; (801022c <prvCheckTasksWaitingTermination+0x58>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d1e1      	bne.n	80101dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010218:	bf00      	nop
 801021a:	bf00      	nop
 801021c:	3708      	adds	r7, #8
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	2000561c 	.word	0x2000561c
 8010228:	20005648 	.word	0x20005648
 801022c:	20005630 	.word	0x20005630

08010230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	3354      	adds	r3, #84	; 0x54
 801023c:	4618      	mov	r0, r3
 801023e:	f009 fe2b 	bl	8019e98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8010248:	2b00      	cmp	r3, #0
 801024a:	d108      	bne.n	801025e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010250:	4618      	mov	r0, r3
 8010252:	f001 f8bd 	bl	80113d0 <vPortFree>
				vPortFree( pxTCB );
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f001 f8ba 	bl	80113d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801025c:	e018      	b.n	8010290 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8010264:	2b01      	cmp	r3, #1
 8010266:	d103      	bne.n	8010270 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f001 f8b1 	bl	80113d0 <vPortFree>
	}
 801026e:	e00f      	b.n	8010290 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8010276:	2b02      	cmp	r3, #2
 8010278:	d00a      	beq.n	8010290 <prvDeleteTCB+0x60>
	__asm volatile
 801027a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027e:	f383 8811 	msr	BASEPRI, r3
 8010282:	f3bf 8f6f 	isb	sy
 8010286:	f3bf 8f4f 	dsb	sy
 801028a:	60fb      	str	r3, [r7, #12]
}
 801028c:	bf00      	nop
 801028e:	e7fe      	b.n	801028e <prvDeleteTCB+0x5e>
	}
 8010290:	bf00      	nop
 8010292:	3710      	adds	r7, #16
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}

08010298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010298:	b480      	push	{r7}
 801029a:	b083      	sub	sp, #12
 801029c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801029e:	4b0c      	ldr	r3, [pc, #48]	; (80102d0 <prvResetNextTaskUnblockTime+0x38>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d104      	bne.n	80102b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102a8:	4b0a      	ldr	r3, [pc, #40]	; (80102d4 <prvResetNextTaskUnblockTime+0x3c>)
 80102aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80102ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80102b0:	e008      	b.n	80102c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102b2:	4b07      	ldr	r3, [pc, #28]	; (80102d0 <prvResetNextTaskUnblockTime+0x38>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	685b      	ldr	r3, [r3, #4]
 80102c0:	4a04      	ldr	r2, [pc, #16]	; (80102d4 <prvResetNextTaskUnblockTime+0x3c>)
 80102c2:	6013      	str	r3, [r2, #0]
}
 80102c4:	bf00      	nop
 80102c6:	370c      	adds	r7, #12
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr
 80102d0:	20005600 	.word	0x20005600
 80102d4:	20005668 	.word	0x20005668

080102d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80102d8:	b480      	push	{r7}
 80102da:	b083      	sub	sp, #12
 80102dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80102de:	4b0b      	ldr	r3, [pc, #44]	; (801030c <xTaskGetSchedulerState+0x34>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d102      	bne.n	80102ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80102e6:	2301      	movs	r3, #1
 80102e8:	607b      	str	r3, [r7, #4]
 80102ea:	e008      	b.n	80102fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102ec:	4b08      	ldr	r3, [pc, #32]	; (8010310 <xTaskGetSchedulerState+0x38>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d102      	bne.n	80102fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80102f4:	2302      	movs	r3, #2
 80102f6:	607b      	str	r3, [r7, #4]
 80102f8:	e001      	b.n	80102fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80102fa:	2300      	movs	r3, #0
 80102fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80102fe:	687b      	ldr	r3, [r7, #4]
	}
 8010300:	4618      	mov	r0, r3
 8010302:	370c      	adds	r7, #12
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr
 801030c:	20005654 	.word	0x20005654
 8010310:	20005670 	.word	0x20005670

08010314 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010320:	2300      	movs	r3, #0
 8010322:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d051      	beq.n	80103ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801032e:	4b2a      	ldr	r3, [pc, #168]	; (80103d8 <xTaskPriorityInherit+0xc4>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010334:	429a      	cmp	r2, r3
 8010336:	d241      	bcs.n	80103bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	699b      	ldr	r3, [r3, #24]
 801033c:	2b00      	cmp	r3, #0
 801033e:	db06      	blt.n	801034e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010340:	4b25      	ldr	r3, [pc, #148]	; (80103d8 <xTaskPriorityInherit+0xc4>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	6959      	ldr	r1, [r3, #20]
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010356:	4613      	mov	r3, r2
 8010358:	009b      	lsls	r3, r3, #2
 801035a:	4413      	add	r3, r2
 801035c:	009b      	lsls	r3, r3, #2
 801035e:	4a1f      	ldr	r2, [pc, #124]	; (80103dc <xTaskPriorityInherit+0xc8>)
 8010360:	4413      	add	r3, r2
 8010362:	4299      	cmp	r1, r3
 8010364:	d122      	bne.n	80103ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	3304      	adds	r3, #4
 801036a:	4618      	mov	r0, r3
 801036c:	f7fe f824 	bl	800e3b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010370:	4b19      	ldr	r3, [pc, #100]	; (80103d8 <xTaskPriorityInherit+0xc4>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801037e:	4b18      	ldr	r3, [pc, #96]	; (80103e0 <xTaskPriorityInherit+0xcc>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	429a      	cmp	r2, r3
 8010384:	d903      	bls.n	801038e <xTaskPriorityInherit+0x7a>
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801038a:	4a15      	ldr	r2, [pc, #84]	; (80103e0 <xTaskPriorityInherit+0xcc>)
 801038c:	6013      	str	r3, [r2, #0]
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010392:	4613      	mov	r3, r2
 8010394:	009b      	lsls	r3, r3, #2
 8010396:	4413      	add	r3, r2
 8010398:	009b      	lsls	r3, r3, #2
 801039a:	4a10      	ldr	r2, [pc, #64]	; (80103dc <xTaskPriorityInherit+0xc8>)
 801039c:	441a      	add	r2, r3
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	3304      	adds	r3, #4
 80103a2:	4619      	mov	r1, r3
 80103a4:	4610      	mov	r0, r2
 80103a6:	f7fd ffaa 	bl	800e2fe <vListInsertEnd>
 80103aa:	e004      	b.n	80103b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103ac:	4b0a      	ldr	r3, [pc, #40]	; (80103d8 <xTaskPriorityInherit+0xc4>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80103b6:	2301      	movs	r3, #1
 80103b8:	60fb      	str	r3, [r7, #12]
 80103ba:	e008      	b.n	80103ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103c0:	4b05      	ldr	r3, [pc, #20]	; (80103d8 <xTaskPriorityInherit+0xc4>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d201      	bcs.n	80103ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80103ca:	2301      	movs	r3, #1
 80103cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103ce:	68fb      	ldr	r3, [r7, #12]
	}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3710      	adds	r7, #16
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	20005174 	.word	0x20005174
 80103dc:	20005178 	.word	0x20005178
 80103e0:	20005650 	.word	0x20005650

080103e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b086      	sub	sp, #24
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80103f0:	2300      	movs	r3, #0
 80103f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d056      	beq.n	80104a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80103fa:	4b2e      	ldr	r3, [pc, #184]	; (80104b4 <xTaskPriorityDisinherit+0xd0>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	693a      	ldr	r2, [r7, #16]
 8010400:	429a      	cmp	r2, r3
 8010402:	d00a      	beq.n	801041a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010408:	f383 8811 	msr	BASEPRI, r3
 801040c:	f3bf 8f6f 	isb	sy
 8010410:	f3bf 8f4f 	dsb	sy
 8010414:	60fb      	str	r3, [r7, #12]
}
 8010416:	bf00      	nop
 8010418:	e7fe      	b.n	8010418 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801041e:	2b00      	cmp	r3, #0
 8010420:	d10a      	bne.n	8010438 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010426:	f383 8811 	msr	BASEPRI, r3
 801042a:	f3bf 8f6f 	isb	sy
 801042e:	f3bf 8f4f 	dsb	sy
 8010432:	60bb      	str	r3, [r7, #8]
}
 8010434:	bf00      	nop
 8010436:	e7fe      	b.n	8010436 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801043c:	1e5a      	subs	r2, r3, #1
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801044a:	429a      	cmp	r2, r3
 801044c:	d02c      	beq.n	80104a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010452:	2b00      	cmp	r3, #0
 8010454:	d128      	bne.n	80104a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	3304      	adds	r3, #4
 801045a:	4618      	mov	r0, r3
 801045c:	f7fd ffac 	bl	800e3b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801046c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010474:	693b      	ldr	r3, [r7, #16]
 8010476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010478:	4b0f      	ldr	r3, [pc, #60]	; (80104b8 <xTaskPriorityDisinherit+0xd4>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	429a      	cmp	r2, r3
 801047e:	d903      	bls.n	8010488 <xTaskPriorityDisinherit+0xa4>
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010484:	4a0c      	ldr	r2, [pc, #48]	; (80104b8 <xTaskPriorityDisinherit+0xd4>)
 8010486:	6013      	str	r3, [r2, #0]
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801048c:	4613      	mov	r3, r2
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	4413      	add	r3, r2
 8010492:	009b      	lsls	r3, r3, #2
 8010494:	4a09      	ldr	r2, [pc, #36]	; (80104bc <xTaskPriorityDisinherit+0xd8>)
 8010496:	441a      	add	r2, r3
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	3304      	adds	r3, #4
 801049c:	4619      	mov	r1, r3
 801049e:	4610      	mov	r0, r2
 80104a0:	f7fd ff2d 	bl	800e2fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80104a4:	2301      	movs	r3, #1
 80104a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104a8:	697b      	ldr	r3, [r7, #20]
	}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3718      	adds	r7, #24
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
 80104b2:	bf00      	nop
 80104b4:	20005174 	.word	0x20005174
 80104b8:	20005650 	.word	0x20005650
 80104bc:	20005178 	.word	0x20005178

080104c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b088      	sub	sp, #32
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80104ce:	2301      	movs	r3, #1
 80104d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d06a      	beq.n	80105ae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d10a      	bne.n	80104f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80104e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e4:	f383 8811 	msr	BASEPRI, r3
 80104e8:	f3bf 8f6f 	isb	sy
 80104ec:	f3bf 8f4f 	dsb	sy
 80104f0:	60fb      	str	r3, [r7, #12]
}
 80104f2:	bf00      	nop
 80104f4:	e7fe      	b.n	80104f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104fa:	683a      	ldr	r2, [r7, #0]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d902      	bls.n	8010506 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	61fb      	str	r3, [r7, #28]
 8010504:	e002      	b.n	801050c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010506:	69bb      	ldr	r3, [r7, #24]
 8010508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801050a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010510:	69fa      	ldr	r2, [r7, #28]
 8010512:	429a      	cmp	r2, r3
 8010514:	d04b      	beq.n	80105ae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801051a:	697a      	ldr	r2, [r7, #20]
 801051c:	429a      	cmp	r2, r3
 801051e:	d146      	bne.n	80105ae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010520:	4b25      	ldr	r3, [pc, #148]	; (80105b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	69ba      	ldr	r2, [r7, #24]
 8010526:	429a      	cmp	r2, r3
 8010528:	d10a      	bne.n	8010540 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801052a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801052e:	f383 8811 	msr	BASEPRI, r3
 8010532:	f3bf 8f6f 	isb	sy
 8010536:	f3bf 8f4f 	dsb	sy
 801053a:	60bb      	str	r3, [r7, #8]
}
 801053c:	bf00      	nop
 801053e:	e7fe      	b.n	801053e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010544:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	69fa      	ldr	r2, [r7, #28]
 801054a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801054c:	69bb      	ldr	r3, [r7, #24]
 801054e:	699b      	ldr	r3, [r3, #24]
 8010550:	2b00      	cmp	r3, #0
 8010552:	db04      	blt.n	801055e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	6959      	ldr	r1, [r3, #20]
 8010562:	693a      	ldr	r2, [r7, #16]
 8010564:	4613      	mov	r3, r2
 8010566:	009b      	lsls	r3, r3, #2
 8010568:	4413      	add	r3, r2
 801056a:	009b      	lsls	r3, r3, #2
 801056c:	4a13      	ldr	r2, [pc, #76]	; (80105bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801056e:	4413      	add	r3, r2
 8010570:	4299      	cmp	r1, r3
 8010572:	d11c      	bne.n	80105ae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	3304      	adds	r3, #4
 8010578:	4618      	mov	r0, r3
 801057a:	f7fd ff1d 	bl	800e3b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010582:	4b0f      	ldr	r3, [pc, #60]	; (80105c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	429a      	cmp	r2, r3
 8010588:	d903      	bls.n	8010592 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801058e:	4a0c      	ldr	r2, [pc, #48]	; (80105c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010590:	6013      	str	r3, [r2, #0]
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010596:	4613      	mov	r3, r2
 8010598:	009b      	lsls	r3, r3, #2
 801059a:	4413      	add	r3, r2
 801059c:	009b      	lsls	r3, r3, #2
 801059e:	4a07      	ldr	r2, [pc, #28]	; (80105bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80105a0:	441a      	add	r2, r3
 80105a2:	69bb      	ldr	r3, [r7, #24]
 80105a4:	3304      	adds	r3, #4
 80105a6:	4619      	mov	r1, r3
 80105a8:	4610      	mov	r0, r2
 80105aa:	f7fd fea8 	bl	800e2fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105ae:	bf00      	nop
 80105b0:	3720      	adds	r7, #32
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	20005174 	.word	0x20005174
 80105bc:	20005178 	.word	0x20005178
 80105c0:	20005650 	.word	0x20005650

080105c4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80105c4:	b480      	push	{r7}
 80105c6:	b083      	sub	sp, #12
 80105c8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80105ca:	4b09      	ldr	r3, [pc, #36]	; (80105f0 <uxTaskResetEventItemValue+0x2c>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	699b      	ldr	r3, [r3, #24]
 80105d0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105d2:	4b07      	ldr	r3, [pc, #28]	; (80105f0 <uxTaskResetEventItemValue+0x2c>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105d8:	4b05      	ldr	r3, [pc, #20]	; (80105f0 <uxTaskResetEventItemValue+0x2c>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80105e0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80105e2:	687b      	ldr	r3, [r7, #4]
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	370c      	adds	r7, #12
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr
 80105f0:	20005174 	.word	0x20005174

080105f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80105f4:	b480      	push	{r7}
 80105f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80105f8:	4b07      	ldr	r3, [pc, #28]	; (8010618 <pvTaskIncrementMutexHeldCount+0x24>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d004      	beq.n	801060a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010600:	4b05      	ldr	r3, [pc, #20]	; (8010618 <pvTaskIncrementMutexHeldCount+0x24>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010606:	3201      	adds	r2, #1
 8010608:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801060a:	4b03      	ldr	r3, [pc, #12]	; (8010618 <pvTaskIncrementMutexHeldCount+0x24>)
 801060c:	681b      	ldr	r3, [r3, #0]
	}
 801060e:	4618      	mov	r0, r3
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr
 8010618:	20005174 	.word	0x20005174

0801061c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010626:	4b21      	ldr	r3, [pc, #132]	; (80106ac <prvAddCurrentTaskToDelayedList+0x90>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801062c:	4b20      	ldr	r3, [pc, #128]	; (80106b0 <prvAddCurrentTaskToDelayedList+0x94>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	3304      	adds	r3, #4
 8010632:	4618      	mov	r0, r3
 8010634:	f7fd fec0 	bl	800e3b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801063e:	d10a      	bne.n	8010656 <prvAddCurrentTaskToDelayedList+0x3a>
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d007      	beq.n	8010656 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010646:	4b1a      	ldr	r3, [pc, #104]	; (80106b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	3304      	adds	r3, #4
 801064c:	4619      	mov	r1, r3
 801064e:	4819      	ldr	r0, [pc, #100]	; (80106b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8010650:	f7fd fe55 	bl	800e2fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010654:	e026      	b.n	80106a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010656:	68fa      	ldr	r2, [r7, #12]
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	4413      	add	r3, r2
 801065c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801065e:	4b14      	ldr	r3, [pc, #80]	; (80106b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	68ba      	ldr	r2, [r7, #8]
 8010664:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010666:	68ba      	ldr	r2, [r7, #8]
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	429a      	cmp	r2, r3
 801066c:	d209      	bcs.n	8010682 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801066e:	4b12      	ldr	r3, [pc, #72]	; (80106b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	4b0f      	ldr	r3, [pc, #60]	; (80106b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	3304      	adds	r3, #4
 8010678:	4619      	mov	r1, r3
 801067a:	4610      	mov	r0, r2
 801067c:	f7fd fe63 	bl	800e346 <vListInsert>
}
 8010680:	e010      	b.n	80106a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010682:	4b0e      	ldr	r3, [pc, #56]	; (80106bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	4b0a      	ldr	r3, [pc, #40]	; (80106b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	3304      	adds	r3, #4
 801068c:	4619      	mov	r1, r3
 801068e:	4610      	mov	r0, r2
 8010690:	f7fd fe59 	bl	800e346 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010694:	4b0a      	ldr	r3, [pc, #40]	; (80106c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	68ba      	ldr	r2, [r7, #8]
 801069a:	429a      	cmp	r2, r3
 801069c:	d202      	bcs.n	80106a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801069e:	4a08      	ldr	r2, [pc, #32]	; (80106c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	6013      	str	r3, [r2, #0]
}
 80106a4:	bf00      	nop
 80106a6:	3710      	adds	r7, #16
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	2000564c 	.word	0x2000564c
 80106b0:	20005174 	.word	0x20005174
 80106b4:	20005634 	.word	0x20005634
 80106b8:	20005604 	.word	0x20005604
 80106bc:	20005600 	.word	0x20005600
 80106c0:	20005668 	.word	0x20005668

080106c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b08a      	sub	sp, #40	; 0x28
 80106c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80106ca:	2300      	movs	r3, #0
 80106cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80106ce:	f000 fb07 	bl	8010ce0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80106d2:	4b1c      	ldr	r3, [pc, #112]	; (8010744 <xTimerCreateTimerTask+0x80>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d021      	beq.n	801071e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80106da:	2300      	movs	r3, #0
 80106dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80106de:	2300      	movs	r3, #0
 80106e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80106e2:	1d3a      	adds	r2, r7, #4
 80106e4:	f107 0108 	add.w	r1, r7, #8
 80106e8:	f107 030c 	add.w	r3, r7, #12
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7fd fbd1 	bl	800de94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80106f2:	6879      	ldr	r1, [r7, #4]
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	68fa      	ldr	r2, [r7, #12]
 80106f8:	9202      	str	r2, [sp, #8]
 80106fa:	9301      	str	r3, [sp, #4]
 80106fc:	2302      	movs	r3, #2
 80106fe:	9300      	str	r3, [sp, #0]
 8010700:	2300      	movs	r3, #0
 8010702:	460a      	mov	r2, r1
 8010704:	4910      	ldr	r1, [pc, #64]	; (8010748 <xTimerCreateTimerTask+0x84>)
 8010706:	4811      	ldr	r0, [pc, #68]	; (801074c <xTimerCreateTimerTask+0x88>)
 8010708:	f7fe fe8e 	bl	800f428 <xTaskCreateStatic>
 801070c:	4603      	mov	r3, r0
 801070e:	4a10      	ldr	r2, [pc, #64]	; (8010750 <xTimerCreateTimerTask+0x8c>)
 8010710:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010712:	4b0f      	ldr	r3, [pc, #60]	; (8010750 <xTimerCreateTimerTask+0x8c>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d001      	beq.n	801071e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801071a:	2301      	movs	r3, #1
 801071c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d10a      	bne.n	801073a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010728:	f383 8811 	msr	BASEPRI, r3
 801072c:	f3bf 8f6f 	isb	sy
 8010730:	f3bf 8f4f 	dsb	sy
 8010734:	613b      	str	r3, [r7, #16]
}
 8010736:	bf00      	nop
 8010738:	e7fe      	b.n	8010738 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801073a:	697b      	ldr	r3, [r7, #20]
}
 801073c:	4618      	mov	r0, r3
 801073e:	3718      	adds	r7, #24
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	200056a4 	.word	0x200056a4
 8010748:	0801f930 	.word	0x0801f930
 801074c:	08010889 	.word	0x08010889
 8010750:	200056a8 	.word	0x200056a8

08010754 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b08a      	sub	sp, #40	; 0x28
 8010758:	af00      	add	r7, sp, #0
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	60b9      	str	r1, [r7, #8]
 801075e:	607a      	str	r2, [r7, #4]
 8010760:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010762:	2300      	movs	r3, #0
 8010764:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d10a      	bne.n	8010782 <xTimerGenericCommand+0x2e>
	__asm volatile
 801076c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010770:	f383 8811 	msr	BASEPRI, r3
 8010774:	f3bf 8f6f 	isb	sy
 8010778:	f3bf 8f4f 	dsb	sy
 801077c:	623b      	str	r3, [r7, #32]
}
 801077e:	bf00      	nop
 8010780:	e7fe      	b.n	8010780 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010782:	4b1a      	ldr	r3, [pc, #104]	; (80107ec <xTimerGenericCommand+0x98>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d02a      	beq.n	80107e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	2b05      	cmp	r3, #5
 801079a:	dc18      	bgt.n	80107ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801079c:	f7ff fd9c 	bl	80102d8 <xTaskGetSchedulerState>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	d109      	bne.n	80107ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80107a6:	4b11      	ldr	r3, [pc, #68]	; (80107ec <xTimerGenericCommand+0x98>)
 80107a8:	6818      	ldr	r0, [r3, #0]
 80107aa:	f107 0110 	add.w	r1, r7, #16
 80107ae:	2300      	movs	r3, #0
 80107b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107b2:	f7fd ffd3 	bl	800e75c <xQueueGenericSend>
 80107b6:	6278      	str	r0, [r7, #36]	; 0x24
 80107b8:	e012      	b.n	80107e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80107ba:	4b0c      	ldr	r3, [pc, #48]	; (80107ec <xTimerGenericCommand+0x98>)
 80107bc:	6818      	ldr	r0, [r3, #0]
 80107be:	f107 0110 	add.w	r1, r7, #16
 80107c2:	2300      	movs	r3, #0
 80107c4:	2200      	movs	r2, #0
 80107c6:	f7fd ffc9 	bl	800e75c <xQueueGenericSend>
 80107ca:	6278      	str	r0, [r7, #36]	; 0x24
 80107cc:	e008      	b.n	80107e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80107ce:	4b07      	ldr	r3, [pc, #28]	; (80107ec <xTimerGenericCommand+0x98>)
 80107d0:	6818      	ldr	r0, [r3, #0]
 80107d2:	f107 0110 	add.w	r1, r7, #16
 80107d6:	2300      	movs	r3, #0
 80107d8:	683a      	ldr	r2, [r7, #0]
 80107da:	f7fe f8bd 	bl	800e958 <xQueueGenericSendFromISR>
 80107de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80107e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3728      	adds	r7, #40	; 0x28
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}
 80107ea:	bf00      	nop
 80107ec:	200056a4 	.word	0x200056a4

080107f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b088      	sub	sp, #32
 80107f4:	af02      	add	r7, sp, #8
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107fa:	4b22      	ldr	r3, [pc, #136]	; (8010884 <prvProcessExpiredTimer+0x94>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	3304      	adds	r3, #4
 8010808:	4618      	mov	r0, r3
 801080a:	f7fd fdd5 	bl	800e3b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010814:	f003 0304 	and.w	r3, r3, #4
 8010818:	2b00      	cmp	r3, #0
 801081a:	d022      	beq.n	8010862 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	699a      	ldr	r2, [r3, #24]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	18d1      	adds	r1, r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	683a      	ldr	r2, [r7, #0]
 8010828:	6978      	ldr	r0, [r7, #20]
 801082a:	f000 f8d1 	bl	80109d0 <prvInsertTimerInActiveList>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d01f      	beq.n	8010874 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010834:	2300      	movs	r3, #0
 8010836:	9300      	str	r3, [sp, #0]
 8010838:	2300      	movs	r3, #0
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	2100      	movs	r1, #0
 801083e:	6978      	ldr	r0, [r7, #20]
 8010840:	f7ff ff88 	bl	8010754 <xTimerGenericCommand>
 8010844:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d113      	bne.n	8010874 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801084c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010850:	f383 8811 	msr	BASEPRI, r3
 8010854:	f3bf 8f6f 	isb	sy
 8010858:	f3bf 8f4f 	dsb	sy
 801085c:	60fb      	str	r3, [r7, #12]
}
 801085e:	bf00      	nop
 8010860:	e7fe      	b.n	8010860 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010868:	f023 0301 	bic.w	r3, r3, #1
 801086c:	b2da      	uxtb	r2, r3
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	6a1b      	ldr	r3, [r3, #32]
 8010878:	6978      	ldr	r0, [r7, #20]
 801087a:	4798      	blx	r3
}
 801087c:	bf00      	nop
 801087e:	3718      	adds	r7, #24
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	2000569c 	.word	0x2000569c

08010888 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010890:	f107 0308 	add.w	r3, r7, #8
 8010894:	4618      	mov	r0, r3
 8010896:	f000 f857 	bl	8010948 <prvGetNextExpireTime>
 801089a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	4619      	mov	r1, r3
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f000 f803 	bl	80108ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80108a6:	f000 f8d5 	bl	8010a54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80108aa:	e7f1      	b.n	8010890 <prvTimerTask+0x8>

080108ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b084      	sub	sp, #16
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80108b6:	f7ff f885 	bl	800f9c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80108ba:	f107 0308 	add.w	r3, r7, #8
 80108be:	4618      	mov	r0, r3
 80108c0:	f000 f866 	bl	8010990 <prvSampleTimeNow>
 80108c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d130      	bne.n	801092e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d10a      	bne.n	80108e8 <prvProcessTimerOrBlockTask+0x3c>
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d806      	bhi.n	80108e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80108da:	f7ff f881 	bl	800f9e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80108de:	68f9      	ldr	r1, [r7, #12]
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f7ff ff85 	bl	80107f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80108e6:	e024      	b.n	8010932 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d008      	beq.n	8010900 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80108ee:	4b13      	ldr	r3, [pc, #76]	; (801093c <prvProcessTimerOrBlockTask+0x90>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d101      	bne.n	80108fc <prvProcessTimerOrBlockTask+0x50>
 80108f8:	2301      	movs	r3, #1
 80108fa:	e000      	b.n	80108fe <prvProcessTimerOrBlockTask+0x52>
 80108fc:	2300      	movs	r3, #0
 80108fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010900:	4b0f      	ldr	r3, [pc, #60]	; (8010940 <prvProcessTimerOrBlockTask+0x94>)
 8010902:	6818      	ldr	r0, [r3, #0]
 8010904:	687a      	ldr	r2, [r7, #4]
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	1ad3      	subs	r3, r2, r3
 801090a:	683a      	ldr	r2, [r7, #0]
 801090c:	4619      	mov	r1, r3
 801090e:	f7fe fd57 	bl	800f3c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010912:	f7ff f865 	bl	800f9e0 <xTaskResumeAll>
 8010916:	4603      	mov	r3, r0
 8010918:	2b00      	cmp	r3, #0
 801091a:	d10a      	bne.n	8010932 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801091c:	4b09      	ldr	r3, [pc, #36]	; (8010944 <prvProcessTimerOrBlockTask+0x98>)
 801091e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010922:	601a      	str	r2, [r3, #0]
 8010924:	f3bf 8f4f 	dsb	sy
 8010928:	f3bf 8f6f 	isb	sy
}
 801092c:	e001      	b.n	8010932 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801092e:	f7ff f857 	bl	800f9e0 <xTaskResumeAll>
}
 8010932:	bf00      	nop
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	200056a0 	.word	0x200056a0
 8010940:	200056a4 	.word	0x200056a4
 8010944:	e000ed04 	.word	0xe000ed04

08010948 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010948:	b480      	push	{r7}
 801094a:	b085      	sub	sp, #20
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010950:	4b0e      	ldr	r3, [pc, #56]	; (801098c <prvGetNextExpireTime+0x44>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d101      	bne.n	801095e <prvGetNextExpireTime+0x16>
 801095a:	2201      	movs	r2, #1
 801095c:	e000      	b.n	8010960 <prvGetNextExpireTime+0x18>
 801095e:	2200      	movs	r2, #0
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d105      	bne.n	8010978 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801096c:	4b07      	ldr	r3, [pc, #28]	; (801098c <prvGetNextExpireTime+0x44>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	68db      	ldr	r3, [r3, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	60fb      	str	r3, [r7, #12]
 8010976:	e001      	b.n	801097c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010978:	2300      	movs	r3, #0
 801097a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801097c:	68fb      	ldr	r3, [r7, #12]
}
 801097e:	4618      	mov	r0, r3
 8010980:	3714      	adds	r7, #20
 8010982:	46bd      	mov	sp, r7
 8010984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010988:	4770      	bx	lr
 801098a:	bf00      	nop
 801098c:	2000569c 	.word	0x2000569c

08010990 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010998:	f7ff f8c0 	bl	800fb1c <xTaskGetTickCount>
 801099c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801099e:	4b0b      	ldr	r3, [pc, #44]	; (80109cc <prvSampleTimeNow+0x3c>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	68fa      	ldr	r2, [r7, #12]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d205      	bcs.n	80109b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80109a8:	f000 f936 	bl	8010c18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2201      	movs	r2, #1
 80109b0:	601a      	str	r2, [r3, #0]
 80109b2:	e002      	b.n	80109ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2200      	movs	r2, #0
 80109b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80109ba:	4a04      	ldr	r2, [pc, #16]	; (80109cc <prvSampleTimeNow+0x3c>)
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80109c0:	68fb      	ldr	r3, [r7, #12]
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3710      	adds	r7, #16
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
 80109ca:	bf00      	nop
 80109cc:	200056ac 	.word	0x200056ac

080109d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b086      	sub	sp, #24
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	607a      	str	r2, [r7, #4]
 80109dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80109de:	2300      	movs	r3, #0
 80109e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	68ba      	ldr	r2, [r7, #8]
 80109e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	68fa      	ldr	r2, [r7, #12]
 80109ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80109ee:	68ba      	ldr	r2, [r7, #8]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d812      	bhi.n	8010a1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	1ad2      	subs	r2, r2, r3
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	699b      	ldr	r3, [r3, #24]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d302      	bcc.n	8010a0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010a04:	2301      	movs	r3, #1
 8010a06:	617b      	str	r3, [r7, #20]
 8010a08:	e01b      	b.n	8010a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010a0a:	4b10      	ldr	r3, [pc, #64]	; (8010a4c <prvInsertTimerInActiveList+0x7c>)
 8010a0c:	681a      	ldr	r2, [r3, #0]
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	3304      	adds	r3, #4
 8010a12:	4619      	mov	r1, r3
 8010a14:	4610      	mov	r0, r2
 8010a16:	f7fd fc96 	bl	800e346 <vListInsert>
 8010a1a:	e012      	b.n	8010a42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d206      	bcs.n	8010a32 <prvInsertTimerInActiveList+0x62>
 8010a24:	68ba      	ldr	r2, [r7, #8]
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d302      	bcc.n	8010a32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	617b      	str	r3, [r7, #20]
 8010a30:	e007      	b.n	8010a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a32:	4b07      	ldr	r3, [pc, #28]	; (8010a50 <prvInsertTimerInActiveList+0x80>)
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	3304      	adds	r3, #4
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	4610      	mov	r0, r2
 8010a3e:	f7fd fc82 	bl	800e346 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010a42:	697b      	ldr	r3, [r7, #20]
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3718      	adds	r7, #24
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	200056a0 	.word	0x200056a0
 8010a50:	2000569c 	.word	0x2000569c

08010a54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b08e      	sub	sp, #56	; 0x38
 8010a58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010a5a:	e0ca      	b.n	8010bf2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	da18      	bge.n	8010a94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010a62:	1d3b      	adds	r3, r7, #4
 8010a64:	3304      	adds	r3, #4
 8010a66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d10a      	bne.n	8010a84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a72:	f383 8811 	msr	BASEPRI, r3
 8010a76:	f3bf 8f6f 	isb	sy
 8010a7a:	f3bf 8f4f 	dsb	sy
 8010a7e:	61fb      	str	r3, [r7, #28]
}
 8010a80:	bf00      	nop
 8010a82:	e7fe      	b.n	8010a82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a8a:	6850      	ldr	r0, [r2, #4]
 8010a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a8e:	6892      	ldr	r2, [r2, #8]
 8010a90:	4611      	mov	r1, r2
 8010a92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	f2c0 80ab 	blt.w	8010bf2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa2:	695b      	ldr	r3, [r3, #20]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d004      	beq.n	8010ab2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aaa:	3304      	adds	r3, #4
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fd fc83 	bl	800e3b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010ab2:	463b      	mov	r3, r7
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7ff ff6b 	bl	8010990 <prvSampleTimeNow>
 8010aba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2b09      	cmp	r3, #9
 8010ac0:	f200 8096 	bhi.w	8010bf0 <prvProcessReceivedCommands+0x19c>
 8010ac4:	a201      	add	r2, pc, #4	; (adr r2, 8010acc <prvProcessReceivedCommands+0x78>)
 8010ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aca:	bf00      	nop
 8010acc:	08010af5 	.word	0x08010af5
 8010ad0:	08010af5 	.word	0x08010af5
 8010ad4:	08010af5 	.word	0x08010af5
 8010ad8:	08010b69 	.word	0x08010b69
 8010adc:	08010b7d 	.word	0x08010b7d
 8010ae0:	08010bc7 	.word	0x08010bc7
 8010ae4:	08010af5 	.word	0x08010af5
 8010ae8:	08010af5 	.word	0x08010af5
 8010aec:	08010b69 	.word	0x08010b69
 8010af0:	08010b7d 	.word	0x08010b7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010afa:	f043 0301 	orr.w	r3, r3, #1
 8010afe:	b2da      	uxtb	r2, r3
 8010b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010b06:	68ba      	ldr	r2, [r7, #8]
 8010b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0a:	699b      	ldr	r3, [r3, #24]
 8010b0c:	18d1      	adds	r1, r2, r3
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b14:	f7ff ff5c 	bl	80109d0 <prvInsertTimerInActiveList>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d069      	beq.n	8010bf2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b20:	6a1b      	ldr	r3, [r3, #32]
 8010b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b2c:	f003 0304 	and.w	r3, r3, #4
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d05e      	beq.n	8010bf2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010b34:	68ba      	ldr	r2, [r7, #8]
 8010b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b38:	699b      	ldr	r3, [r3, #24]
 8010b3a:	441a      	add	r2, r3
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	9300      	str	r3, [sp, #0]
 8010b40:	2300      	movs	r3, #0
 8010b42:	2100      	movs	r1, #0
 8010b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b46:	f7ff fe05 	bl	8010754 <xTimerGenericCommand>
 8010b4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010b4c:	6a3b      	ldr	r3, [r7, #32]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d14f      	bne.n	8010bf2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b56:	f383 8811 	msr	BASEPRI, r3
 8010b5a:	f3bf 8f6f 	isb	sy
 8010b5e:	f3bf 8f4f 	dsb	sy
 8010b62:	61bb      	str	r3, [r7, #24]
}
 8010b64:	bf00      	nop
 8010b66:	e7fe      	b.n	8010b66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b6e:	f023 0301 	bic.w	r3, r3, #1
 8010b72:	b2da      	uxtb	r2, r3
 8010b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010b7a:	e03a      	b.n	8010bf2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b82:	f043 0301 	orr.w	r3, r3, #1
 8010b86:	b2da      	uxtb	r2, r3
 8010b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010b8e:	68ba      	ldr	r2, [r7, #8]
 8010b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b96:	699b      	ldr	r3, [r3, #24]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d10a      	bne.n	8010bb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba0:	f383 8811 	msr	BASEPRI, r3
 8010ba4:	f3bf 8f6f 	isb	sy
 8010ba8:	f3bf 8f4f 	dsb	sy
 8010bac:	617b      	str	r3, [r7, #20]
}
 8010bae:	bf00      	nop
 8010bb0:	e7fe      	b.n	8010bb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb4:	699a      	ldr	r2, [r3, #24]
 8010bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb8:	18d1      	adds	r1, r2, r3
 8010bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bc0:	f7ff ff06 	bl	80109d0 <prvInsertTimerInActiveList>
					break;
 8010bc4:	e015      	b.n	8010bf2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bcc:	f003 0302 	and.w	r3, r3, #2
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d103      	bne.n	8010bdc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bd6:	f000 fbfb 	bl	80113d0 <vPortFree>
 8010bda:	e00a      	b.n	8010bf2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010be2:	f023 0301 	bic.w	r3, r3, #1
 8010be6:	b2da      	uxtb	r2, r3
 8010be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010bee:	e000      	b.n	8010bf2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8010bf0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010bf2:	4b08      	ldr	r3, [pc, #32]	; (8010c14 <prvProcessReceivedCommands+0x1c0>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	1d39      	adds	r1, r7, #4
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7fd ffd4 	bl	800eba8 <xQueueReceive>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	f47f af2a 	bne.w	8010a5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010c08:	bf00      	nop
 8010c0a:	bf00      	nop
 8010c0c:	3730      	adds	r7, #48	; 0x30
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}
 8010c12:	bf00      	nop
 8010c14:	200056a4 	.word	0x200056a4

08010c18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b088      	sub	sp, #32
 8010c1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c1e:	e048      	b.n	8010cb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c20:	4b2d      	ldr	r3, [pc, #180]	; (8010cd8 <prvSwitchTimerLists+0xc0>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	68db      	ldr	r3, [r3, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c2a:	4b2b      	ldr	r3, [pc, #172]	; (8010cd8 <prvSwitchTimerLists+0xc0>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	3304      	adds	r3, #4
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7fd fbbd 	bl	800e3b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	6a1b      	ldr	r3, [r3, #32]
 8010c42:	68f8      	ldr	r0, [r7, #12]
 8010c44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c4c:	f003 0304 	and.w	r3, r3, #4
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d02e      	beq.n	8010cb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	699b      	ldr	r3, [r3, #24]
 8010c58:	693a      	ldr	r2, [r7, #16]
 8010c5a:	4413      	add	r3, r2
 8010c5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010c5e:	68ba      	ldr	r2, [r7, #8]
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	429a      	cmp	r2, r3
 8010c64:	d90e      	bls.n	8010c84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	68ba      	ldr	r2, [r7, #8]
 8010c6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	68fa      	ldr	r2, [r7, #12]
 8010c70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c72:	4b19      	ldr	r3, [pc, #100]	; (8010cd8 <prvSwitchTimerLists+0xc0>)
 8010c74:	681a      	ldr	r2, [r3, #0]
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	3304      	adds	r3, #4
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	4610      	mov	r0, r2
 8010c7e:	f7fd fb62 	bl	800e346 <vListInsert>
 8010c82:	e016      	b.n	8010cb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c84:	2300      	movs	r3, #0
 8010c86:	9300      	str	r3, [sp, #0]
 8010c88:	2300      	movs	r3, #0
 8010c8a:	693a      	ldr	r2, [r7, #16]
 8010c8c:	2100      	movs	r1, #0
 8010c8e:	68f8      	ldr	r0, [r7, #12]
 8010c90:	f7ff fd60 	bl	8010754 <xTimerGenericCommand>
 8010c94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d10a      	bne.n	8010cb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca0:	f383 8811 	msr	BASEPRI, r3
 8010ca4:	f3bf 8f6f 	isb	sy
 8010ca8:	f3bf 8f4f 	dsb	sy
 8010cac:	603b      	str	r3, [r7, #0]
}
 8010cae:	bf00      	nop
 8010cb0:	e7fe      	b.n	8010cb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010cb2:	4b09      	ldr	r3, [pc, #36]	; (8010cd8 <prvSwitchTimerLists+0xc0>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d1b1      	bne.n	8010c20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010cbc:	4b06      	ldr	r3, [pc, #24]	; (8010cd8 <prvSwitchTimerLists+0xc0>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010cc2:	4b06      	ldr	r3, [pc, #24]	; (8010cdc <prvSwitchTimerLists+0xc4>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	4a04      	ldr	r2, [pc, #16]	; (8010cd8 <prvSwitchTimerLists+0xc0>)
 8010cc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010cca:	4a04      	ldr	r2, [pc, #16]	; (8010cdc <prvSwitchTimerLists+0xc4>)
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	6013      	str	r3, [r2, #0]
}
 8010cd0:	bf00      	nop
 8010cd2:	3718      	adds	r7, #24
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	2000569c 	.word	0x2000569c
 8010cdc:	200056a0 	.word	0x200056a0

08010ce0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010ce6:	f000 f985 	bl	8010ff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010cea:	4b15      	ldr	r3, [pc, #84]	; (8010d40 <prvCheckForValidListAndQueue+0x60>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d120      	bne.n	8010d34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010cf2:	4814      	ldr	r0, [pc, #80]	; (8010d44 <prvCheckForValidListAndQueue+0x64>)
 8010cf4:	f7fd fad6 	bl	800e2a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010cf8:	4813      	ldr	r0, [pc, #76]	; (8010d48 <prvCheckForValidListAndQueue+0x68>)
 8010cfa:	f7fd fad3 	bl	800e2a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010cfe:	4b13      	ldr	r3, [pc, #76]	; (8010d4c <prvCheckForValidListAndQueue+0x6c>)
 8010d00:	4a10      	ldr	r2, [pc, #64]	; (8010d44 <prvCheckForValidListAndQueue+0x64>)
 8010d02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010d04:	4b12      	ldr	r3, [pc, #72]	; (8010d50 <prvCheckForValidListAndQueue+0x70>)
 8010d06:	4a10      	ldr	r2, [pc, #64]	; (8010d48 <prvCheckForValidListAndQueue+0x68>)
 8010d08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	9300      	str	r3, [sp, #0]
 8010d0e:	4b11      	ldr	r3, [pc, #68]	; (8010d54 <prvCheckForValidListAndQueue+0x74>)
 8010d10:	4a11      	ldr	r2, [pc, #68]	; (8010d58 <prvCheckForValidListAndQueue+0x78>)
 8010d12:	2110      	movs	r1, #16
 8010d14:	200a      	movs	r0, #10
 8010d16:	f7fd fbe1 	bl	800e4dc <xQueueGenericCreateStatic>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	4a08      	ldr	r2, [pc, #32]	; (8010d40 <prvCheckForValidListAndQueue+0x60>)
 8010d1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010d20:	4b07      	ldr	r3, [pc, #28]	; (8010d40 <prvCheckForValidListAndQueue+0x60>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d005      	beq.n	8010d34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010d28:	4b05      	ldr	r3, [pc, #20]	; (8010d40 <prvCheckForValidListAndQueue+0x60>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	490b      	ldr	r1, [pc, #44]	; (8010d5c <prvCheckForValidListAndQueue+0x7c>)
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7fe faf2 	bl	800f318 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d34:	f000 f98e 	bl	8011054 <vPortExitCritical>
}
 8010d38:	bf00      	nop
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	200056a4 	.word	0x200056a4
 8010d44:	20005674 	.word	0x20005674
 8010d48:	20005688 	.word	0x20005688
 8010d4c:	2000569c 	.word	0x2000569c
 8010d50:	200056a0 	.word	0x200056a0
 8010d54:	20005750 	.word	0x20005750
 8010d58:	200056b0 	.word	0x200056b0
 8010d5c:	0801f938 	.word	0x0801f938

08010d60 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b08a      	sub	sp, #40	; 0x28
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	60f8      	str	r0, [r7, #12]
 8010d68:	60b9      	str	r1, [r7, #8]
 8010d6a:	607a      	str	r2, [r7, #4]
 8010d6c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010d6e:	f06f 0301 	mvn.w	r3, #1
 8010d72:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010d80:	4b06      	ldr	r3, [pc, #24]	; (8010d9c <xTimerPendFunctionCallFromISR+0x3c>)
 8010d82:	6818      	ldr	r0, [r3, #0]
 8010d84:	f107 0114 	add.w	r1, r7, #20
 8010d88:	2300      	movs	r3, #0
 8010d8a:	683a      	ldr	r2, [r7, #0]
 8010d8c:	f7fd fde4 	bl	800e958 <xQueueGenericSendFromISR>
 8010d90:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010d94:	4618      	mov	r0, r3
 8010d96:	3728      	adds	r7, #40	; 0x28
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}
 8010d9c:	200056a4 	.word	0x200056a4

08010da0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010da0:	b480      	push	{r7}
 8010da2:	b085      	sub	sp, #20
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	60f8      	str	r0, [r7, #12]
 8010da8:	60b9      	str	r1, [r7, #8]
 8010daa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	3b04      	subs	r3, #4
 8010db0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	3b04      	subs	r3, #4
 8010dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	f023 0201 	bic.w	r2, r3, #1
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	3b04      	subs	r3, #4
 8010dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010dd0:	4a0c      	ldr	r2, [pc, #48]	; (8010e04 <pxPortInitialiseStack+0x64>)
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	3b14      	subs	r3, #20
 8010dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	3b04      	subs	r3, #4
 8010de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	f06f 0202 	mvn.w	r2, #2
 8010dee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	3b20      	subs	r3, #32
 8010df4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010df6:	68fb      	ldr	r3, [r7, #12]
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3714      	adds	r7, #20
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e02:	4770      	bx	lr
 8010e04:	08010e09 	.word	0x08010e09

08010e08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b085      	sub	sp, #20
 8010e0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010e12:	4b12      	ldr	r3, [pc, #72]	; (8010e5c <prvTaskExitError+0x54>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e1a:	d00a      	beq.n	8010e32 <prvTaskExitError+0x2a>
	__asm volatile
 8010e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e20:	f383 8811 	msr	BASEPRI, r3
 8010e24:	f3bf 8f6f 	isb	sy
 8010e28:	f3bf 8f4f 	dsb	sy
 8010e2c:	60fb      	str	r3, [r7, #12]
}
 8010e2e:	bf00      	nop
 8010e30:	e7fe      	b.n	8010e30 <prvTaskExitError+0x28>
	__asm volatile
 8010e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e36:	f383 8811 	msr	BASEPRI, r3
 8010e3a:	f3bf 8f6f 	isb	sy
 8010e3e:	f3bf 8f4f 	dsb	sy
 8010e42:	60bb      	str	r3, [r7, #8]
}
 8010e44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010e46:	bf00      	nop
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d0fc      	beq.n	8010e48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010e4e:	bf00      	nop
 8010e50:	bf00      	nop
 8010e52:	3714      	adds	r7, #20
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr
 8010e5c:	20000028 	.word	0x20000028

08010e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010e60:	4b07      	ldr	r3, [pc, #28]	; (8010e80 <pxCurrentTCBConst2>)
 8010e62:	6819      	ldr	r1, [r3, #0]
 8010e64:	6808      	ldr	r0, [r1, #0]
 8010e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6a:	f380 8809 	msr	PSP, r0
 8010e6e:	f3bf 8f6f 	isb	sy
 8010e72:	f04f 0000 	mov.w	r0, #0
 8010e76:	f380 8811 	msr	BASEPRI, r0
 8010e7a:	4770      	bx	lr
 8010e7c:	f3af 8000 	nop.w

08010e80 <pxCurrentTCBConst2>:
 8010e80:	20005174 	.word	0x20005174
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010e84:	bf00      	nop
 8010e86:	bf00      	nop

08010e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010e88:	4808      	ldr	r0, [pc, #32]	; (8010eac <prvPortStartFirstTask+0x24>)
 8010e8a:	6800      	ldr	r0, [r0, #0]
 8010e8c:	6800      	ldr	r0, [r0, #0]
 8010e8e:	f380 8808 	msr	MSP, r0
 8010e92:	f04f 0000 	mov.w	r0, #0
 8010e96:	f380 8814 	msr	CONTROL, r0
 8010e9a:	b662      	cpsie	i
 8010e9c:	b661      	cpsie	f
 8010e9e:	f3bf 8f4f 	dsb	sy
 8010ea2:	f3bf 8f6f 	isb	sy
 8010ea6:	df00      	svc	0
 8010ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010eaa:	bf00      	nop
 8010eac:	e000ed08 	.word	0xe000ed08

08010eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b086      	sub	sp, #24
 8010eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010eb6:	4b46      	ldr	r3, [pc, #280]	; (8010fd0 <xPortStartScheduler+0x120>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	4a46      	ldr	r2, [pc, #280]	; (8010fd4 <xPortStartScheduler+0x124>)
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d10a      	bne.n	8010ed6 <xPortStartScheduler+0x26>
	__asm volatile
 8010ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec4:	f383 8811 	msr	BASEPRI, r3
 8010ec8:	f3bf 8f6f 	isb	sy
 8010ecc:	f3bf 8f4f 	dsb	sy
 8010ed0:	613b      	str	r3, [r7, #16]
}
 8010ed2:	bf00      	nop
 8010ed4:	e7fe      	b.n	8010ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010ed6:	4b3e      	ldr	r3, [pc, #248]	; (8010fd0 <xPortStartScheduler+0x120>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	4a3f      	ldr	r2, [pc, #252]	; (8010fd8 <xPortStartScheduler+0x128>)
 8010edc:	4293      	cmp	r3, r2
 8010ede:	d10a      	bne.n	8010ef6 <xPortStartScheduler+0x46>
	__asm volatile
 8010ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee4:	f383 8811 	msr	BASEPRI, r3
 8010ee8:	f3bf 8f6f 	isb	sy
 8010eec:	f3bf 8f4f 	dsb	sy
 8010ef0:	60fb      	str	r3, [r7, #12]
}
 8010ef2:	bf00      	nop
 8010ef4:	e7fe      	b.n	8010ef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010ef6:	4b39      	ldr	r3, [pc, #228]	; (8010fdc <xPortStartScheduler+0x12c>)
 8010ef8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	22ff      	movs	r2, #255	; 0xff
 8010f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	b2db      	uxtb	r3, r3
 8010f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010f10:	78fb      	ldrb	r3, [r7, #3]
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010f18:	b2da      	uxtb	r2, r3
 8010f1a:	4b31      	ldr	r3, [pc, #196]	; (8010fe0 <xPortStartScheduler+0x130>)
 8010f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010f1e:	4b31      	ldr	r3, [pc, #196]	; (8010fe4 <xPortStartScheduler+0x134>)
 8010f20:	2207      	movs	r2, #7
 8010f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f24:	e009      	b.n	8010f3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010f26:	4b2f      	ldr	r3, [pc, #188]	; (8010fe4 <xPortStartScheduler+0x134>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	3b01      	subs	r3, #1
 8010f2c:	4a2d      	ldr	r2, [pc, #180]	; (8010fe4 <xPortStartScheduler+0x134>)
 8010f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010f30:	78fb      	ldrb	r3, [r7, #3]
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	005b      	lsls	r3, r3, #1
 8010f36:	b2db      	uxtb	r3, r3
 8010f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010f3a:	78fb      	ldrb	r3, [r7, #3]
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f42:	2b80      	cmp	r3, #128	; 0x80
 8010f44:	d0ef      	beq.n	8010f26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010f46:	4b27      	ldr	r3, [pc, #156]	; (8010fe4 <xPortStartScheduler+0x134>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	f1c3 0307 	rsb	r3, r3, #7
 8010f4e:	2b04      	cmp	r3, #4
 8010f50:	d00a      	beq.n	8010f68 <xPortStartScheduler+0xb8>
	__asm volatile
 8010f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f56:	f383 8811 	msr	BASEPRI, r3
 8010f5a:	f3bf 8f6f 	isb	sy
 8010f5e:	f3bf 8f4f 	dsb	sy
 8010f62:	60bb      	str	r3, [r7, #8]
}
 8010f64:	bf00      	nop
 8010f66:	e7fe      	b.n	8010f66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010f68:	4b1e      	ldr	r3, [pc, #120]	; (8010fe4 <xPortStartScheduler+0x134>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	021b      	lsls	r3, r3, #8
 8010f6e:	4a1d      	ldr	r2, [pc, #116]	; (8010fe4 <xPortStartScheduler+0x134>)
 8010f70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010f72:	4b1c      	ldr	r3, [pc, #112]	; (8010fe4 <xPortStartScheduler+0x134>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010f7a:	4a1a      	ldr	r2, [pc, #104]	; (8010fe4 <xPortStartScheduler+0x134>)
 8010f7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	b2da      	uxtb	r2, r3
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010f86:	4b18      	ldr	r3, [pc, #96]	; (8010fe8 <xPortStartScheduler+0x138>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	4a17      	ldr	r2, [pc, #92]	; (8010fe8 <xPortStartScheduler+0x138>)
 8010f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010f90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010f92:	4b15      	ldr	r3, [pc, #84]	; (8010fe8 <xPortStartScheduler+0x138>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	4a14      	ldr	r2, [pc, #80]	; (8010fe8 <xPortStartScheduler+0x138>)
 8010f98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010f9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010f9e:	f000 f8dd 	bl	801115c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010fa2:	4b12      	ldr	r3, [pc, #72]	; (8010fec <xPortStartScheduler+0x13c>)
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010fa8:	f000 f8fc 	bl	80111a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010fac:	4b10      	ldr	r3, [pc, #64]	; (8010ff0 <xPortStartScheduler+0x140>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	4a0f      	ldr	r2, [pc, #60]	; (8010ff0 <xPortStartScheduler+0x140>)
 8010fb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010fb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010fb8:	f7ff ff66 	bl	8010e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010fbc:	f7fe fe78 	bl	800fcb0 <vTaskSwitchContext>
	prvTaskExitError();
 8010fc0:	f7ff ff22 	bl	8010e08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010fc4:	2300      	movs	r3, #0
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3718      	adds	r7, #24
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	e000ed00 	.word	0xe000ed00
 8010fd4:	410fc271 	.word	0x410fc271
 8010fd8:	410fc270 	.word	0x410fc270
 8010fdc:	e000e400 	.word	0xe000e400
 8010fe0:	200057a0 	.word	0x200057a0
 8010fe4:	200057a4 	.word	0x200057a4
 8010fe8:	e000ed20 	.word	0xe000ed20
 8010fec:	20000028 	.word	0x20000028
 8010ff0:	e000ef34 	.word	0xe000ef34

08010ff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b083      	sub	sp, #12
 8010ff8:	af00      	add	r7, sp, #0
	__asm volatile
 8010ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffe:	f383 8811 	msr	BASEPRI, r3
 8011002:	f3bf 8f6f 	isb	sy
 8011006:	f3bf 8f4f 	dsb	sy
 801100a:	607b      	str	r3, [r7, #4]
}
 801100c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801100e:	4b0f      	ldr	r3, [pc, #60]	; (801104c <vPortEnterCritical+0x58>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	3301      	adds	r3, #1
 8011014:	4a0d      	ldr	r2, [pc, #52]	; (801104c <vPortEnterCritical+0x58>)
 8011016:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011018:	4b0c      	ldr	r3, [pc, #48]	; (801104c <vPortEnterCritical+0x58>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	2b01      	cmp	r3, #1
 801101e:	d10f      	bne.n	8011040 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011020:	4b0b      	ldr	r3, [pc, #44]	; (8011050 <vPortEnterCritical+0x5c>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	b2db      	uxtb	r3, r3
 8011026:	2b00      	cmp	r3, #0
 8011028:	d00a      	beq.n	8011040 <vPortEnterCritical+0x4c>
	__asm volatile
 801102a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801102e:	f383 8811 	msr	BASEPRI, r3
 8011032:	f3bf 8f6f 	isb	sy
 8011036:	f3bf 8f4f 	dsb	sy
 801103a:	603b      	str	r3, [r7, #0]
}
 801103c:	bf00      	nop
 801103e:	e7fe      	b.n	801103e <vPortEnterCritical+0x4a>
	}
}
 8011040:	bf00      	nop
 8011042:	370c      	adds	r7, #12
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr
 801104c:	20000028 	.word	0x20000028
 8011050:	e000ed04 	.word	0xe000ed04

08011054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011054:	b480      	push	{r7}
 8011056:	b083      	sub	sp, #12
 8011058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801105a:	4b12      	ldr	r3, [pc, #72]	; (80110a4 <vPortExitCritical+0x50>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d10a      	bne.n	8011078 <vPortExitCritical+0x24>
	__asm volatile
 8011062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011066:	f383 8811 	msr	BASEPRI, r3
 801106a:	f3bf 8f6f 	isb	sy
 801106e:	f3bf 8f4f 	dsb	sy
 8011072:	607b      	str	r3, [r7, #4]
}
 8011074:	bf00      	nop
 8011076:	e7fe      	b.n	8011076 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011078:	4b0a      	ldr	r3, [pc, #40]	; (80110a4 <vPortExitCritical+0x50>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	3b01      	subs	r3, #1
 801107e:	4a09      	ldr	r2, [pc, #36]	; (80110a4 <vPortExitCritical+0x50>)
 8011080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011082:	4b08      	ldr	r3, [pc, #32]	; (80110a4 <vPortExitCritical+0x50>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d105      	bne.n	8011096 <vPortExitCritical+0x42>
 801108a:	2300      	movs	r3, #0
 801108c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	f383 8811 	msr	BASEPRI, r3
}
 8011094:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011096:	bf00      	nop
 8011098:	370c      	adds	r7, #12
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr
 80110a2:	bf00      	nop
 80110a4:	20000028 	.word	0x20000028
	...

080110b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80110b0:	f3ef 8009 	mrs	r0, PSP
 80110b4:	f3bf 8f6f 	isb	sy
 80110b8:	4b15      	ldr	r3, [pc, #84]	; (8011110 <pxCurrentTCBConst>)
 80110ba:	681a      	ldr	r2, [r3, #0]
 80110bc:	f01e 0f10 	tst.w	lr, #16
 80110c0:	bf08      	it	eq
 80110c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80110c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ca:	6010      	str	r0, [r2, #0]
 80110cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80110d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80110d4:	f380 8811 	msr	BASEPRI, r0
 80110d8:	f3bf 8f4f 	dsb	sy
 80110dc:	f3bf 8f6f 	isb	sy
 80110e0:	f7fe fde6 	bl	800fcb0 <vTaskSwitchContext>
 80110e4:	f04f 0000 	mov.w	r0, #0
 80110e8:	f380 8811 	msr	BASEPRI, r0
 80110ec:	bc09      	pop	{r0, r3}
 80110ee:	6819      	ldr	r1, [r3, #0]
 80110f0:	6808      	ldr	r0, [r1, #0]
 80110f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f6:	f01e 0f10 	tst.w	lr, #16
 80110fa:	bf08      	it	eq
 80110fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011100:	f380 8809 	msr	PSP, r0
 8011104:	f3bf 8f6f 	isb	sy
 8011108:	4770      	bx	lr
 801110a:	bf00      	nop
 801110c:	f3af 8000 	nop.w

08011110 <pxCurrentTCBConst>:
 8011110:	20005174 	.word	0x20005174
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011114:	bf00      	nop
 8011116:	bf00      	nop

08011118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
	__asm volatile
 801111e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011122:	f383 8811 	msr	BASEPRI, r3
 8011126:	f3bf 8f6f 	isb	sy
 801112a:	f3bf 8f4f 	dsb	sy
 801112e:	607b      	str	r3, [r7, #4]
}
 8011130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011132:	f7fe fd03 	bl	800fb3c <xTaskIncrementTick>
 8011136:	4603      	mov	r3, r0
 8011138:	2b00      	cmp	r3, #0
 801113a:	d003      	beq.n	8011144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801113c:	4b06      	ldr	r3, [pc, #24]	; (8011158 <xPortSysTickHandler+0x40>)
 801113e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011142:	601a      	str	r2, [r3, #0]
 8011144:	2300      	movs	r3, #0
 8011146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	f383 8811 	msr	BASEPRI, r3
}
 801114e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011150:	bf00      	nop
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	e000ed04 	.word	0xe000ed04

0801115c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801115c:	b480      	push	{r7}
 801115e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011160:	4b0b      	ldr	r3, [pc, #44]	; (8011190 <vPortSetupTimerInterrupt+0x34>)
 8011162:	2200      	movs	r2, #0
 8011164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011166:	4b0b      	ldr	r3, [pc, #44]	; (8011194 <vPortSetupTimerInterrupt+0x38>)
 8011168:	2200      	movs	r2, #0
 801116a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801116c:	4b0a      	ldr	r3, [pc, #40]	; (8011198 <vPortSetupTimerInterrupt+0x3c>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	4a0a      	ldr	r2, [pc, #40]	; (801119c <vPortSetupTimerInterrupt+0x40>)
 8011172:	fba2 2303 	umull	r2, r3, r2, r3
 8011176:	099b      	lsrs	r3, r3, #6
 8011178:	4a09      	ldr	r2, [pc, #36]	; (80111a0 <vPortSetupTimerInterrupt+0x44>)
 801117a:	3b01      	subs	r3, #1
 801117c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801117e:	4b04      	ldr	r3, [pc, #16]	; (8011190 <vPortSetupTimerInterrupt+0x34>)
 8011180:	2207      	movs	r2, #7
 8011182:	601a      	str	r2, [r3, #0]
}
 8011184:	bf00      	nop
 8011186:	46bd      	mov	sp, r7
 8011188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118c:	4770      	bx	lr
 801118e:	bf00      	nop
 8011190:	e000e010 	.word	0xe000e010
 8011194:	e000e018 	.word	0xe000e018
 8011198:	20000008 	.word	0x20000008
 801119c:	10624dd3 	.word	0x10624dd3
 80111a0:	e000e014 	.word	0xe000e014

080111a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80111a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80111b4 <vPortEnableVFP+0x10>
 80111a8:	6801      	ldr	r1, [r0, #0]
 80111aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80111ae:	6001      	str	r1, [r0, #0]
 80111b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80111b2:	bf00      	nop
 80111b4:	e000ed88 	.word	0xe000ed88

080111b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80111b8:	b480      	push	{r7}
 80111ba:	b085      	sub	sp, #20
 80111bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80111be:	f3ef 8305 	mrs	r3, IPSR
 80111c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2b0f      	cmp	r3, #15
 80111c8:	d914      	bls.n	80111f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80111ca:	4a17      	ldr	r2, [pc, #92]	; (8011228 <vPortValidateInterruptPriority+0x70>)
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	4413      	add	r3, r2
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80111d4:	4b15      	ldr	r3, [pc, #84]	; (801122c <vPortValidateInterruptPriority+0x74>)
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	7afa      	ldrb	r2, [r7, #11]
 80111da:	429a      	cmp	r2, r3
 80111dc:	d20a      	bcs.n	80111f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80111de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111e2:	f383 8811 	msr	BASEPRI, r3
 80111e6:	f3bf 8f6f 	isb	sy
 80111ea:	f3bf 8f4f 	dsb	sy
 80111ee:	607b      	str	r3, [r7, #4]
}
 80111f0:	bf00      	nop
 80111f2:	e7fe      	b.n	80111f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80111f4:	4b0e      	ldr	r3, [pc, #56]	; (8011230 <vPortValidateInterruptPriority+0x78>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80111fc:	4b0d      	ldr	r3, [pc, #52]	; (8011234 <vPortValidateInterruptPriority+0x7c>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	429a      	cmp	r2, r3
 8011202:	d90a      	bls.n	801121a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011208:	f383 8811 	msr	BASEPRI, r3
 801120c:	f3bf 8f6f 	isb	sy
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	603b      	str	r3, [r7, #0]
}
 8011216:	bf00      	nop
 8011218:	e7fe      	b.n	8011218 <vPortValidateInterruptPriority+0x60>
	}
 801121a:	bf00      	nop
 801121c:	3714      	adds	r7, #20
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr
 8011226:	bf00      	nop
 8011228:	e000e3f0 	.word	0xe000e3f0
 801122c:	200057a0 	.word	0x200057a0
 8011230:	e000ed0c 	.word	0xe000ed0c
 8011234:	200057a4 	.word	0x200057a4

08011238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b08a      	sub	sp, #40	; 0x28
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011240:	2300      	movs	r3, #0
 8011242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011244:	f7fe fbbe 	bl	800f9c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011248:	4b5b      	ldr	r3, [pc, #364]	; (80113b8 <pvPortMalloc+0x180>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d101      	bne.n	8011254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011250:	f000 f920 	bl	8011494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011254:	4b59      	ldr	r3, [pc, #356]	; (80113bc <pvPortMalloc+0x184>)
 8011256:	681a      	ldr	r2, [r3, #0]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	4013      	ands	r3, r2
 801125c:	2b00      	cmp	r3, #0
 801125e:	f040 8093 	bne.w	8011388 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d01d      	beq.n	80112a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011268:	2208      	movs	r2, #8
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	4413      	add	r3, r2
 801126e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f003 0307 	and.w	r3, r3, #7
 8011276:	2b00      	cmp	r3, #0
 8011278:	d014      	beq.n	80112a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f023 0307 	bic.w	r3, r3, #7
 8011280:	3308      	adds	r3, #8
 8011282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f003 0307 	and.w	r3, r3, #7
 801128a:	2b00      	cmp	r3, #0
 801128c:	d00a      	beq.n	80112a4 <pvPortMalloc+0x6c>
	__asm volatile
 801128e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011292:	f383 8811 	msr	BASEPRI, r3
 8011296:	f3bf 8f6f 	isb	sy
 801129a:	f3bf 8f4f 	dsb	sy
 801129e:	617b      	str	r3, [r7, #20]
}
 80112a0:	bf00      	nop
 80112a2:	e7fe      	b.n	80112a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d06e      	beq.n	8011388 <pvPortMalloc+0x150>
 80112aa:	4b45      	ldr	r3, [pc, #276]	; (80113c0 <pvPortMalloc+0x188>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d869      	bhi.n	8011388 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80112b4:	4b43      	ldr	r3, [pc, #268]	; (80113c4 <pvPortMalloc+0x18c>)
 80112b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80112b8:	4b42      	ldr	r3, [pc, #264]	; (80113c4 <pvPortMalloc+0x18c>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80112be:	e004      	b.n	80112ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80112c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80112c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80112ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112cc:	685b      	ldr	r3, [r3, #4]
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d903      	bls.n	80112dc <pvPortMalloc+0xa4>
 80112d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d1f1      	bne.n	80112c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80112dc:	4b36      	ldr	r3, [pc, #216]	; (80113b8 <pvPortMalloc+0x180>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d050      	beq.n	8011388 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80112e6:	6a3b      	ldr	r3, [r7, #32]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	2208      	movs	r2, #8
 80112ec:	4413      	add	r3, r2
 80112ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80112f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f2:	681a      	ldr	r2, [r3, #0]
 80112f4:	6a3b      	ldr	r3, [r7, #32]
 80112f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80112f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fa:	685a      	ldr	r2, [r3, #4]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	1ad2      	subs	r2, r2, r3
 8011300:	2308      	movs	r3, #8
 8011302:	005b      	lsls	r3, r3, #1
 8011304:	429a      	cmp	r2, r3
 8011306:	d91f      	bls.n	8011348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	4413      	add	r3, r2
 801130e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011310:	69bb      	ldr	r3, [r7, #24]
 8011312:	f003 0307 	and.w	r3, r3, #7
 8011316:	2b00      	cmp	r3, #0
 8011318:	d00a      	beq.n	8011330 <pvPortMalloc+0xf8>
	__asm volatile
 801131a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801131e:	f383 8811 	msr	BASEPRI, r3
 8011322:	f3bf 8f6f 	isb	sy
 8011326:	f3bf 8f4f 	dsb	sy
 801132a:	613b      	str	r3, [r7, #16]
}
 801132c:	bf00      	nop
 801132e:	e7fe      	b.n	801132e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011332:	685a      	ldr	r2, [r3, #4]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	1ad2      	subs	r2, r2, r3
 8011338:	69bb      	ldr	r3, [r7, #24]
 801133a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011342:	69b8      	ldr	r0, [r7, #24]
 8011344:	f000 f908 	bl	8011558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011348:	4b1d      	ldr	r3, [pc, #116]	; (80113c0 <pvPortMalloc+0x188>)
 801134a:	681a      	ldr	r2, [r3, #0]
 801134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	1ad3      	subs	r3, r2, r3
 8011352:	4a1b      	ldr	r2, [pc, #108]	; (80113c0 <pvPortMalloc+0x188>)
 8011354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011356:	4b1a      	ldr	r3, [pc, #104]	; (80113c0 <pvPortMalloc+0x188>)
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	4b1b      	ldr	r3, [pc, #108]	; (80113c8 <pvPortMalloc+0x190>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	429a      	cmp	r2, r3
 8011360:	d203      	bcs.n	801136a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011362:	4b17      	ldr	r3, [pc, #92]	; (80113c0 <pvPortMalloc+0x188>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	4a18      	ldr	r2, [pc, #96]	; (80113c8 <pvPortMalloc+0x190>)
 8011368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136c:	685a      	ldr	r2, [r3, #4]
 801136e:	4b13      	ldr	r3, [pc, #76]	; (80113bc <pvPortMalloc+0x184>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	431a      	orrs	r2, r3
 8011374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137a:	2200      	movs	r2, #0
 801137c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801137e:	4b13      	ldr	r3, [pc, #76]	; (80113cc <pvPortMalloc+0x194>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	3301      	adds	r3, #1
 8011384:	4a11      	ldr	r2, [pc, #68]	; (80113cc <pvPortMalloc+0x194>)
 8011386:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011388:	f7fe fb2a 	bl	800f9e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	f003 0307 	and.w	r3, r3, #7
 8011392:	2b00      	cmp	r3, #0
 8011394:	d00a      	beq.n	80113ac <pvPortMalloc+0x174>
	__asm volatile
 8011396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801139a:	f383 8811 	msr	BASEPRI, r3
 801139e:	f3bf 8f6f 	isb	sy
 80113a2:	f3bf 8f4f 	dsb	sy
 80113a6:	60fb      	str	r3, [r7, #12]
}
 80113a8:	bf00      	nop
 80113aa:	e7fe      	b.n	80113aa <pvPortMalloc+0x172>
	return pvReturn;
 80113ac:	69fb      	ldr	r3, [r7, #28]
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3728      	adds	r7, #40	; 0x28
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	200093b0 	.word	0x200093b0
 80113bc:	200093c4 	.word	0x200093c4
 80113c0:	200093b4 	.word	0x200093b4
 80113c4:	200093a8 	.word	0x200093a8
 80113c8:	200093b8 	.word	0x200093b8
 80113cc:	200093bc 	.word	0x200093bc

080113d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b086      	sub	sp, #24
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d04d      	beq.n	801147e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80113e2:	2308      	movs	r3, #8
 80113e4:	425b      	negs	r3, r3
 80113e6:	697a      	ldr	r2, [r7, #20]
 80113e8:	4413      	add	r3, r2
 80113ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	685a      	ldr	r2, [r3, #4]
 80113f4:	4b24      	ldr	r3, [pc, #144]	; (8011488 <vPortFree+0xb8>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	4013      	ands	r3, r2
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d10a      	bne.n	8011414 <vPortFree+0x44>
	__asm volatile
 80113fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011402:	f383 8811 	msr	BASEPRI, r3
 8011406:	f3bf 8f6f 	isb	sy
 801140a:	f3bf 8f4f 	dsb	sy
 801140e:	60fb      	str	r3, [r7, #12]
}
 8011410:	bf00      	nop
 8011412:	e7fe      	b.n	8011412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d00a      	beq.n	8011432 <vPortFree+0x62>
	__asm volatile
 801141c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011420:	f383 8811 	msr	BASEPRI, r3
 8011424:	f3bf 8f6f 	isb	sy
 8011428:	f3bf 8f4f 	dsb	sy
 801142c:	60bb      	str	r3, [r7, #8]
}
 801142e:	bf00      	nop
 8011430:	e7fe      	b.n	8011430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	685a      	ldr	r2, [r3, #4]
 8011436:	4b14      	ldr	r3, [pc, #80]	; (8011488 <vPortFree+0xb8>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	4013      	ands	r3, r2
 801143c:	2b00      	cmp	r3, #0
 801143e:	d01e      	beq.n	801147e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d11a      	bne.n	801147e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	685a      	ldr	r2, [r3, #4]
 801144c:	4b0e      	ldr	r3, [pc, #56]	; (8011488 <vPortFree+0xb8>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	43db      	mvns	r3, r3
 8011452:	401a      	ands	r2, r3
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011458:	f7fe fab4 	bl	800f9c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	685a      	ldr	r2, [r3, #4]
 8011460:	4b0a      	ldr	r3, [pc, #40]	; (801148c <vPortFree+0xbc>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	4413      	add	r3, r2
 8011466:	4a09      	ldr	r2, [pc, #36]	; (801148c <vPortFree+0xbc>)
 8011468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801146a:	6938      	ldr	r0, [r7, #16]
 801146c:	f000 f874 	bl	8011558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011470:	4b07      	ldr	r3, [pc, #28]	; (8011490 <vPortFree+0xc0>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	3301      	adds	r3, #1
 8011476:	4a06      	ldr	r2, [pc, #24]	; (8011490 <vPortFree+0xc0>)
 8011478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801147a:	f7fe fab1 	bl	800f9e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801147e:	bf00      	nop
 8011480:	3718      	adds	r7, #24
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	bf00      	nop
 8011488:	200093c4 	.word	0x200093c4
 801148c:	200093b4 	.word	0x200093b4
 8011490:	200093c0 	.word	0x200093c0

08011494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011494:	b480      	push	{r7}
 8011496:	b085      	sub	sp, #20
 8011498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801149a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801149e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80114a0:	4b27      	ldr	r3, [pc, #156]	; (8011540 <prvHeapInit+0xac>)
 80114a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	f003 0307 	and.w	r3, r3, #7
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d00c      	beq.n	80114c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	3307      	adds	r3, #7
 80114b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	f023 0307 	bic.w	r3, r3, #7
 80114ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	4a1f      	ldr	r2, [pc, #124]	; (8011540 <prvHeapInit+0xac>)
 80114c4:	4413      	add	r3, r2
 80114c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80114cc:	4a1d      	ldr	r2, [pc, #116]	; (8011544 <prvHeapInit+0xb0>)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80114d2:	4b1c      	ldr	r3, [pc, #112]	; (8011544 <prvHeapInit+0xb0>)
 80114d4:	2200      	movs	r2, #0
 80114d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	68ba      	ldr	r2, [r7, #8]
 80114dc:	4413      	add	r3, r2
 80114de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80114e0:	2208      	movs	r2, #8
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	1a9b      	subs	r3, r3, r2
 80114e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f023 0307 	bic.w	r3, r3, #7
 80114ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	4a15      	ldr	r2, [pc, #84]	; (8011548 <prvHeapInit+0xb4>)
 80114f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80114f6:	4b14      	ldr	r3, [pc, #80]	; (8011548 <prvHeapInit+0xb4>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2200      	movs	r2, #0
 80114fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80114fe:	4b12      	ldr	r3, [pc, #72]	; (8011548 <prvHeapInit+0xb4>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	2200      	movs	r2, #0
 8011504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	68fa      	ldr	r2, [r7, #12]
 801150e:	1ad2      	subs	r2, r2, r3
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011514:	4b0c      	ldr	r3, [pc, #48]	; (8011548 <prvHeapInit+0xb4>)
 8011516:	681a      	ldr	r2, [r3, #0]
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	4a0a      	ldr	r2, [pc, #40]	; (801154c <prvHeapInit+0xb8>)
 8011522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	4a09      	ldr	r2, [pc, #36]	; (8011550 <prvHeapInit+0xbc>)
 801152a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801152c:	4b09      	ldr	r3, [pc, #36]	; (8011554 <prvHeapInit+0xc0>)
 801152e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011532:	601a      	str	r2, [r3, #0]
}
 8011534:	bf00      	nop
 8011536:	3714      	adds	r7, #20
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr
 8011540:	200057a8 	.word	0x200057a8
 8011544:	200093a8 	.word	0x200093a8
 8011548:	200093b0 	.word	0x200093b0
 801154c:	200093b8 	.word	0x200093b8
 8011550:	200093b4 	.word	0x200093b4
 8011554:	200093c4 	.word	0x200093c4

08011558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011558:	b480      	push	{r7}
 801155a:	b085      	sub	sp, #20
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011560:	4b28      	ldr	r3, [pc, #160]	; (8011604 <prvInsertBlockIntoFreeList+0xac>)
 8011562:	60fb      	str	r3, [r7, #12]
 8011564:	e002      	b.n	801156c <prvInsertBlockIntoFreeList+0x14>
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	60fb      	str	r3, [r7, #12]
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	687a      	ldr	r2, [r7, #4]
 8011572:	429a      	cmp	r2, r3
 8011574:	d8f7      	bhi.n	8011566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	68ba      	ldr	r2, [r7, #8]
 8011580:	4413      	add	r3, r2
 8011582:	687a      	ldr	r2, [r7, #4]
 8011584:	429a      	cmp	r2, r3
 8011586:	d108      	bne.n	801159a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	685a      	ldr	r2, [r3, #4]
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	685b      	ldr	r3, [r3, #4]
 8011590:	441a      	add	r2, r3
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	68ba      	ldr	r2, [r7, #8]
 80115a4:	441a      	add	r2, r3
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d118      	bne.n	80115e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	681a      	ldr	r2, [r3, #0]
 80115b2:	4b15      	ldr	r3, [pc, #84]	; (8011608 <prvInsertBlockIntoFreeList+0xb0>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d00d      	beq.n	80115d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	685a      	ldr	r2, [r3, #4]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	441a      	add	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	681a      	ldr	r2, [r3, #0]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	601a      	str	r2, [r3, #0]
 80115d4:	e008      	b.n	80115e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80115d6:	4b0c      	ldr	r3, [pc, #48]	; (8011608 <prvInsertBlockIntoFreeList+0xb0>)
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	601a      	str	r2, [r3, #0]
 80115de:	e003      	b.n	80115e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80115e8:	68fa      	ldr	r2, [r7, #12]
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d002      	beq.n	80115f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	687a      	ldr	r2, [r7, #4]
 80115f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80115f6:	bf00      	nop
 80115f8:	3714      	adds	r7, #20
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr
 8011602:	bf00      	nop
 8011604:	200093a8 	.word	0x200093a8
 8011608:	200093b0 	.word	0x200093b0

0801160c <DataHist_parameters>:
 801160c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011610:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011612:	f8dd c018 	ldr.w	ip, [sp, #24]
 8011616:	7020      	strb	r0, [r4, #0]
 8011618:	6808      	ldr	r0, [r1, #0]
 801161a:	6060      	str	r0, [r4, #4]
 801161c:	6848      	ldr	r0, [r1, #4]
 801161e:	60a0      	str	r0, [r4, #8]
 8011620:	6888      	ldr	r0, [r1, #8]
 8011622:	60e0      	str	r0, [r4, #12]
 8011624:	68c8      	ldr	r0, [r1, #12]
 8011626:	6120      	str	r0, [r4, #16]
 8011628:	6908      	ldr	r0, [r1, #16]
 801162a:	6160      	str	r0, [r4, #20]
 801162c:	6948      	ldr	r0, [r1, #20]
 801162e:	61a0      	str	r0, [r4, #24]
 8011630:	6988      	ldr	r0, [r1, #24]
 8011632:	61e0      	str	r0, [r4, #28]
 8011634:	69c8      	ldr	r0, [r1, #28]
 8011636:	6220      	str	r0, [r4, #32]
 8011638:	6a09      	ldr	r1, [r1, #32]
 801163a:	6261      	str	r1, [r4, #36]	; 0x24
 801163c:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 8011640:	8811      	ldrh	r1, [r2, #0]
 8011642:	edd2 7a01 	vldr	s15, [r2, #4]
 8011646:	8521      	strh	r1, [r4, #40]	; 0x28
 8011648:	f102 0e80 	add.w	lr, r2, #128	; 0x80
 801164c:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8011650:	2700      	movs	r7, #0
 8011652:	f1ae 0278 	sub.w	r2, lr, #120	; 0x78
 8011656:	4641      	mov	r1, r8
 8011658:	f852 0b04 	ldr.w	r0, [r2], #4
 801165c:	f841 0b04 	str.w	r0, [r1], #4
 8011660:	4572      	cmp	r2, lr
 8011662:	d1f9      	bne.n	8011658 <DataHist_parameters+0x4c>
 8011664:	371e      	adds	r7, #30
 8011666:	2f5a      	cmp	r7, #90	; 0x5a
 8011668:	f108 0878 	add.w	r8, r8, #120	; 0x78
 801166c:	f102 0e78 	add.w	lr, r2, #120	; 0x78
 8011670:	d1ef      	bne.n	8011652 <DataHist_parameters+0x46>
 8011672:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
 8011676:	881a      	ldrh	r2, [r3, #0]
 8011678:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801167c:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 8011680:	f103 0e80 	add.w	lr, r3, #128	; 0x80
 8011684:	f504 77d0 	add.w	r7, r4, #416	; 0x1a0
 8011688:	2000      	movs	r0, #0
 801168a:	f1ae 0378 	sub.w	r3, lr, #120	; 0x78
 801168e:	463a      	mov	r2, r7
 8011690:	f853 1b04 	ldr.w	r1, [r3], #4
 8011694:	f842 1b04 	str.w	r1, [r2], #4
 8011698:	4573      	cmp	r3, lr
 801169a:	d1f9      	bne.n	8011690 <DataHist_parameters+0x84>
 801169c:	301e      	adds	r0, #30
 801169e:	285a      	cmp	r0, #90	; 0x5a
 80116a0:	f107 0778 	add.w	r7, r7, #120	; 0x78
 80116a4:	f103 0e78 	add.w	lr, r3, #120	; 0x78
 80116a8:	d1ef      	bne.n	801168a <DataHist_parameters+0x7e>
 80116aa:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 80116ae:	f8bc 3000 	ldrh.w	r3, [ip]
 80116b2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80116b6:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 80116ba:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 80116be:	f504 7e44 	add.w	lr, r4, #784	; 0x310
 80116c2:	2000      	movs	r0, #0
 80116c4:	f1ac 0378 	sub.w	r3, ip, #120	; 0x78
 80116c8:	4672      	mov	r2, lr
 80116ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80116ce:	f842 1b04 	str.w	r1, [r2], #4
 80116d2:	4563      	cmp	r3, ip
 80116d4:	d1f9      	bne.n	80116ca <DataHist_parameters+0xbe>
 80116d6:	301e      	adds	r0, #30
 80116d8:	285a      	cmp	r0, #90	; 0x5a
 80116da:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 80116de:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 80116e2:	d1ef      	bne.n	80116c4 <DataHist_parameters+0xb8>
 80116e4:	f8c4 730c 	str.w	r7, [r4, #780]	; 0x30c
 80116e8:	8833      	ldrh	r3, [r6, #0]
 80116ea:	6877      	ldr	r7, [r6, #4]
 80116ec:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 80116f0:	f106 0080 	add.w	r0, r6, #128	; 0x80
 80116f4:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 80116f8:	2600      	movs	r6, #0
 80116fa:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 80116fe:	4662      	mov	r2, ip
 8011700:	f853 1b04 	ldr.w	r1, [r3], #4
 8011704:	f842 1b04 	str.w	r1, [r2], #4
 8011708:	4283      	cmp	r3, r0
 801170a:	d1f9      	bne.n	8011700 <DataHist_parameters+0xf4>
 801170c:	361e      	adds	r6, #30
 801170e:	2e5a      	cmp	r6, #90	; 0x5a
 8011710:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 8011714:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8011718:	d1ef      	bne.n	80116fa <DataHist_parameters+0xee>
 801171a:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 801171e:	69aa      	ldr	r2, [r5, #24]
 8011720:	605f      	str	r7, [r3, #4]
 8011722:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 8011726:	7829      	ldrb	r1, [r5, #0]
 8011728:	f884 15e8 	strb.w	r1, [r4, #1512]	; 0x5e8
 801172c:	619a      	str	r2, [r3, #24]
 801172e:	6869      	ldr	r1, [r5, #4]
 8011730:	6059      	str	r1, [r3, #4]
 8011732:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 8011736:	68a9      	ldr	r1, [r5, #8]
 8011738:	6011      	str	r1, [r2, #0]
 801173a:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 801173e:	68e9      	ldr	r1, [r5, #12]
 8011740:	6011      	str	r1, [r2, #0]
 8011742:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 8011746:	6929      	ldr	r1, [r5, #16]
 8011748:	6011      	str	r1, [r2, #0]
 801174a:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 801174e:	6969      	ldr	r1, [r5, #20]
 8011750:	6011      	str	r1, [r2, #0]
 8011752:	69e9      	ldr	r1, [r5, #28]
 8011754:	61d9      	str	r1, [r3, #28]
 8011756:	f504 62c1 	add.w	r2, r4, #1544	; 0x608
 801175a:	6a2b      	ldr	r3, [r5, #32]
 801175c:	6013      	str	r3, [r2, #0]
 801175e:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 8011762:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8011764:	601a      	str	r2, [r3, #0]
 8011766:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 801176a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801176c:	601a      	str	r2, [r3, #0]
 801176e:	f204 6414 	addw	r4, r4, #1556	; 0x614
 8011772:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8011774:	6023      	str	r3, [r4, #0]
 8011776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801177a:	bf00      	nop

0801177c <rotVect>:
 801177c:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8011780:	ed92 7a01 	vldr	s14, [r2, #4]
 8011784:	ed92 6a00 	vldr	s12, [r2]
 8011788:	ee07 3a90 	vmov	s15, r3
 801178c:	f991 3000 	ldrsb.w	r3, [r1]
 8011790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011794:	ee06 3a90 	vmov	s13, r3
 8011798:	ee67 7a87 	vmul.f32	s15, s15, s14
 801179c:	f991 3002 	ldrsb.w	r3, [r1, #2]
 80117a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80117a4:	ee07 3a10 	vmov	s14, r3
 80117a8:	eee6 7a86 	vfma.f32	s15, s13, s12
 80117ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80117b0:	edd2 6a02 	vldr	s13, [r2, #8]
 80117b4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80117b8:	edc0 7a00 	vstr	s15, [r0]
 80117bc:	f991 3004 	ldrsb.w	r3, [r1, #4]
 80117c0:	ed92 7a01 	vldr	s14, [r2, #4]
 80117c4:	ed92 6a00 	vldr	s12, [r2]
 80117c8:	ee07 3a90 	vmov	s15, r3
 80117cc:	f991 3003 	ldrsb.w	r3, [r1, #3]
 80117d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80117d4:	ee06 3a90 	vmov	s13, r3
 80117d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80117dc:	f991 3005 	ldrsb.w	r3, [r1, #5]
 80117e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80117e4:	ee07 3a10 	vmov	s14, r3
 80117e8:	eee6 7a86 	vfma.f32	s15, s13, s12
 80117ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80117f0:	edd2 6a02 	vldr	s13, [r2, #8]
 80117f4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80117f8:	edc0 7a01 	vstr	s15, [r0, #4]
 80117fc:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8011800:	ed92 7a01 	vldr	s14, [r2, #4]
 8011804:	ed92 6a00 	vldr	s12, [r2]
 8011808:	ee07 3a90 	vmov	s15, r3
 801180c:	f991 3006 	ldrsb.w	r3, [r1, #6]
 8011810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011814:	ee06 3a90 	vmov	s13, r3
 8011818:	ee67 7a87 	vmul.f32	s15, s15, s14
 801181c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011820:	f991 3008 	ldrsb.w	r3, [r1, #8]
 8011824:	eee6 7a86 	vfma.f32	s15, s13, s12
 8011828:	ee07 3a10 	vmov	s14, r3
 801182c:	edd2 6a02 	vldr	s13, [r2, #8]
 8011830:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011834:	eee7 7a26 	vfma.f32	s15, s14, s13
 8011838:	edc0 7a02 	vstr	s15, [r0, #8]
 801183c:	4770      	bx	lr
 801183e:	bf00      	nop

08011840 <findAxis>:
 8011840:	f990 3000 	ldrsb.w	r3, [r0]
 8011844:	2b01      	cmp	r3, #1
 8011846:	d027      	beq.n	8011898 <findAxis+0x58>
 8011848:	3301      	adds	r3, #1
 801184a:	d00e      	beq.n	801186a <findAxis+0x2a>
 801184c:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8011850:	2b01      	cmp	r3, #1
 8011852:	d053      	beq.n	80118fc <findAxis+0xbc>
 8011854:	3301      	adds	r3, #1
 8011856:	d048      	beq.n	80118ea <findAxis+0xaa>
 8011858:	f990 3006 	ldrsb.w	r3, [r0, #6]
 801185c:	2b01      	cmp	r3, #1
 801185e:	d053      	beq.n	8011908 <findAxis+0xc8>
 8011860:	3301      	adds	r3, #1
 8011862:	d104      	bne.n	801186e <findAxis+0x2e>
 8011864:	2364      	movs	r3, #100	; 0x64
 8011866:	700b      	strb	r3, [r1, #0]
 8011868:	e001      	b.n	801186e <findAxis+0x2e>
 801186a:	2377      	movs	r3, #119	; 0x77
 801186c:	700b      	strb	r3, [r1, #0]
 801186e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011872:	2b01      	cmp	r3, #1
 8011874:	d016      	beq.n	80118a4 <findAxis+0x64>
 8011876:	3301      	adds	r3, #1
 8011878:	d02e      	beq.n	80118d8 <findAxis+0x98>
 801187a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 801187e:	2b01      	cmp	r3, #1
 8011880:	d039      	beq.n	80118f6 <findAxis+0xb6>
 8011882:	3301      	adds	r3, #1
 8011884:	d034      	beq.n	80118f0 <findAxis+0xb0>
 8011886:	f990 3007 	ldrsb.w	r3, [r0, #7]
 801188a:	2b01      	cmp	r3, #1
 801188c:	d03f      	beq.n	801190e <findAxis+0xce>
 801188e:	3301      	adds	r3, #1
 8011890:	d10a      	bne.n	80118a8 <findAxis+0x68>
 8011892:	2364      	movs	r3, #100	; 0x64
 8011894:	704b      	strb	r3, [r1, #1]
 8011896:	e007      	b.n	80118a8 <findAxis+0x68>
 8011898:	2365      	movs	r3, #101	; 0x65
 801189a:	700b      	strb	r3, [r1, #0]
 801189c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d1e8      	bne.n	8011876 <findAxis+0x36>
 80118a4:	2365      	movs	r3, #101	; 0x65
 80118a6:	704b      	strb	r3, [r1, #1]
 80118a8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	d010      	beq.n	80118d2 <findAxis+0x92>
 80118b0:	3301      	adds	r3, #1
 80118b2:	d014      	beq.n	80118de <findAxis+0x9e>
 80118b4:	f990 3005 	ldrsb.w	r3, [r0, #5]
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	d022      	beq.n	8011902 <findAxis+0xc2>
 80118bc:	3301      	adds	r3, #1
 80118be:	d011      	beq.n	80118e4 <findAxis+0xa4>
 80118c0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d025      	beq.n	8011914 <findAxis+0xd4>
 80118c8:	3301      	adds	r3, #1
 80118ca:	bf04      	itt	eq
 80118cc:	2364      	moveq	r3, #100	; 0x64
 80118ce:	708b      	strbeq	r3, [r1, #2]
 80118d0:	4770      	bx	lr
 80118d2:	2365      	movs	r3, #101	; 0x65
 80118d4:	708b      	strb	r3, [r1, #2]
 80118d6:	4770      	bx	lr
 80118d8:	2377      	movs	r3, #119	; 0x77
 80118da:	704b      	strb	r3, [r1, #1]
 80118dc:	e7e4      	b.n	80118a8 <findAxis+0x68>
 80118de:	2377      	movs	r3, #119	; 0x77
 80118e0:	708b      	strb	r3, [r1, #2]
 80118e2:	4770      	bx	lr
 80118e4:	2373      	movs	r3, #115	; 0x73
 80118e6:	708b      	strb	r3, [r1, #2]
 80118e8:	4770      	bx	lr
 80118ea:	2373      	movs	r3, #115	; 0x73
 80118ec:	700b      	strb	r3, [r1, #0]
 80118ee:	e7be      	b.n	801186e <findAxis+0x2e>
 80118f0:	2373      	movs	r3, #115	; 0x73
 80118f2:	704b      	strb	r3, [r1, #1]
 80118f4:	e7d8      	b.n	80118a8 <findAxis+0x68>
 80118f6:	236e      	movs	r3, #110	; 0x6e
 80118f8:	704b      	strb	r3, [r1, #1]
 80118fa:	e7d5      	b.n	80118a8 <findAxis+0x68>
 80118fc:	236e      	movs	r3, #110	; 0x6e
 80118fe:	700b      	strb	r3, [r1, #0]
 8011900:	e7b5      	b.n	801186e <findAxis+0x2e>
 8011902:	236e      	movs	r3, #110	; 0x6e
 8011904:	708b      	strb	r3, [r1, #2]
 8011906:	4770      	bx	lr
 8011908:	2375      	movs	r3, #117	; 0x75
 801190a:	700b      	strb	r3, [r1, #0]
 801190c:	e7af      	b.n	801186e <findAxis+0x2e>
 801190e:	2375      	movs	r3, #117	; 0x75
 8011910:	704b      	strb	r3, [r1, #1]
 8011912:	e7c9      	b.n	80118a8 <findAxis+0x68>
 8011914:	2375      	movs	r3, #117	; 0x75
 8011916:	708b      	strb	r3, [r1, #2]
 8011918:	4770      	bx	lr
 801191a:	bf00      	nop
 801191c:	0000      	movs	r0, r0
	...

08011920 <findDirection>:
 8011920:	b5d0      	push	{r4, r6, r7, lr}
 8011922:	ed2d 8b04 	vpush	{d8-d9}
 8011926:	eef0 8ac0 	vabs.f32	s17, s0
 801192a:	eeb0 8ae0 	vabs.f32	s16, s1
 801192e:	eef4 8ac8 	vcmpe.f32	s17, s16
 8011932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011936:	4604      	mov	r4, r0
 8011938:	eeb0 9ac1 	vabs.f32	s18, s2
 801193c:	dd36      	ble.n	80119ac <findDirection+0x8c>
 801193e:	eef4 8ac9 	vcmpe.f32	s17, s18
 8011942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011946:	dd31      	ble.n	80119ac <findDirection+0x8c>
 8011948:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011950:	ee18 0a90 	vmov	r0, s17
 8011954:	f340 8094 	ble.w	8011a80 <findDirection+0x160>
 8011958:	f7ee fe00 	bl	800055c <__aeabi_f2d>
 801195c:	4606      	mov	r6, r0
 801195e:	ee18 0a10 	vmov	r0, s16
 8011962:	460f      	mov	r7, r1
 8011964:	f7ee fdfa 	bl	800055c <__aeabi_f2d>
 8011968:	a387      	add	r3, pc, #540	; (adr r3, 8011b88 <findDirection+0x268>)
 801196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196e:	f7ee fe4d 	bl	800060c <__aeabi_dmul>
 8011972:	4602      	mov	r2, r0
 8011974:	460b      	mov	r3, r1
 8011976:	4630      	mov	r0, r6
 8011978:	4639      	mov	r1, r7
 801197a:	f7ef f8d7 	bl	8000b2c <__aeabi_dcmpgt>
 801197e:	b188      	cbz	r0, 80119a4 <findDirection+0x84>
 8011980:	ee19 0a10 	vmov	r0, s18
 8011984:	f7ee fdea 	bl	800055c <__aeabi_f2d>
 8011988:	a37f      	add	r3, pc, #508	; (adr r3, 8011b88 <findDirection+0x268>)
 801198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198e:	f7ee fe3d 	bl	800060c <__aeabi_dmul>
 8011992:	4602      	mov	r2, r0
 8011994:	460b      	mov	r3, r1
 8011996:	4630      	mov	r0, r6
 8011998:	4639      	mov	r1, r7
 801199a:	f7ef f8c7 	bl	8000b2c <__aeabi_dcmpgt>
 801199e:	2800      	cmp	r0, #0
 80119a0:	bf18      	it	ne
 80119a2:	2404      	movne	r4, #4
 80119a4:	ecbd 8b04 	vpop	{d8-d9}
 80119a8:	4620      	mov	r0, r4
 80119aa:	bdd0      	pop	{r4, r6, r7, pc}
 80119ac:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80119b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b4:	dd32      	ble.n	8011a1c <findDirection+0xfc>
 80119b6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80119ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119be:	ee18 0a10 	vmov	r0, s16
 80119c2:	f340 8086 	ble.w	8011ad2 <findDirection+0x1b2>
 80119c6:	f7ee fdc9 	bl	800055c <__aeabi_f2d>
 80119ca:	4606      	mov	r6, r0
 80119cc:	ee18 0a90 	vmov	r0, s17
 80119d0:	460f      	mov	r7, r1
 80119d2:	f7ee fdc3 	bl	800055c <__aeabi_f2d>
 80119d6:	a36c      	add	r3, pc, #432	; (adr r3, 8011b88 <findDirection+0x268>)
 80119d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119dc:	f7ee fe16 	bl	800060c <__aeabi_dmul>
 80119e0:	4602      	mov	r2, r0
 80119e2:	460b      	mov	r3, r1
 80119e4:	4630      	mov	r0, r6
 80119e6:	4639      	mov	r1, r7
 80119e8:	f7ef f8a0 	bl	8000b2c <__aeabi_dcmpgt>
 80119ec:	2800      	cmp	r0, #0
 80119ee:	d0d9      	beq.n	80119a4 <findDirection+0x84>
 80119f0:	ee19 0a10 	vmov	r0, s18
 80119f4:	f7ee fdb2 	bl	800055c <__aeabi_f2d>
 80119f8:	a363      	add	r3, pc, #396	; (adr r3, 8011b88 <findDirection+0x268>)
 80119fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fe:	f7ee fe05 	bl	800060c <__aeabi_dmul>
 8011a02:	4602      	mov	r2, r0
 8011a04:	460b      	mov	r3, r1
 8011a06:	4630      	mov	r0, r6
 8011a08:	4639      	mov	r1, r7
 8011a0a:	f7ef f88f 	bl	8000b2c <__aeabi_dcmpgt>
 8011a0e:	ecbd 8b04 	vpop	{d8-d9}
 8011a12:	2800      	cmp	r0, #0
 8011a14:	bf18      	it	ne
 8011a16:	2401      	movne	r4, #1
 8011a18:	4620      	mov	r0, r4
 8011a1a:	bdd0      	pop	{r4, r6, r7, pc}
 8011a1c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8011a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a24:	ee19 0a10 	vmov	r0, s18
 8011a28:	dd7f      	ble.n	8011b2a <findDirection+0x20a>
 8011a2a:	f7ee fd97 	bl	800055c <__aeabi_f2d>
 8011a2e:	4606      	mov	r6, r0
 8011a30:	ee18 0a10 	vmov	r0, s16
 8011a34:	460f      	mov	r7, r1
 8011a36:	f7ee fd91 	bl	800055c <__aeabi_f2d>
 8011a3a:	a353      	add	r3, pc, #332	; (adr r3, 8011b88 <findDirection+0x268>)
 8011a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a40:	f7ee fde4 	bl	800060c <__aeabi_dmul>
 8011a44:	4602      	mov	r2, r0
 8011a46:	460b      	mov	r3, r1
 8011a48:	4630      	mov	r0, r6
 8011a4a:	4639      	mov	r1, r7
 8011a4c:	f7ef f86e 	bl	8000b2c <__aeabi_dcmpgt>
 8011a50:	2800      	cmp	r0, #0
 8011a52:	d0a7      	beq.n	80119a4 <findDirection+0x84>
 8011a54:	ee18 0a90 	vmov	r0, s17
 8011a58:	f7ee fd80 	bl	800055c <__aeabi_f2d>
 8011a5c:	a34a      	add	r3, pc, #296	; (adr r3, 8011b88 <findDirection+0x268>)
 8011a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a62:	f7ee fdd3 	bl	800060c <__aeabi_dmul>
 8011a66:	4602      	mov	r2, r0
 8011a68:	460b      	mov	r3, r1
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	4639      	mov	r1, r7
 8011a6e:	f7ef f85d 	bl	8000b2c <__aeabi_dcmpgt>
 8011a72:	ecbd 8b04 	vpop	{d8-d9}
 8011a76:	2800      	cmp	r0, #0
 8011a78:	bf18      	it	ne
 8011a7a:	2400      	movne	r4, #0
 8011a7c:	4620      	mov	r0, r4
 8011a7e:	bdd0      	pop	{r4, r6, r7, pc}
 8011a80:	f7ee fd6c 	bl	800055c <__aeabi_f2d>
 8011a84:	4606      	mov	r6, r0
 8011a86:	ee18 0a10 	vmov	r0, s16
 8011a8a:	460f      	mov	r7, r1
 8011a8c:	f7ee fd66 	bl	800055c <__aeabi_f2d>
 8011a90:	a33d      	add	r3, pc, #244	; (adr r3, 8011b88 <findDirection+0x268>)
 8011a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a96:	f7ee fdb9 	bl	800060c <__aeabi_dmul>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	4639      	mov	r1, r7
 8011aa2:	f7ef f843 	bl	8000b2c <__aeabi_dcmpgt>
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	f43f af7c 	beq.w	80119a4 <findDirection+0x84>
 8011aac:	ee19 0a10 	vmov	r0, s18
 8011ab0:	f7ee fd54 	bl	800055c <__aeabi_f2d>
 8011ab4:	a334      	add	r3, pc, #208	; (adr r3, 8011b88 <findDirection+0x268>)
 8011ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aba:	f7ee fda7 	bl	800060c <__aeabi_dmul>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	4630      	mov	r0, r6
 8011ac4:	4639      	mov	r1, r7
 8011ac6:	f7ef f831 	bl	8000b2c <__aeabi_dcmpgt>
 8011aca:	2800      	cmp	r0, #0
 8011acc:	bf18      	it	ne
 8011ace:	2405      	movne	r4, #5
 8011ad0:	e768      	b.n	80119a4 <findDirection+0x84>
 8011ad2:	f7ee fd43 	bl	800055c <__aeabi_f2d>
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	ee18 0a90 	vmov	r0, s17
 8011adc:	460f      	mov	r7, r1
 8011ade:	f7ee fd3d 	bl	800055c <__aeabi_f2d>
 8011ae2:	a329      	add	r3, pc, #164	; (adr r3, 8011b88 <findDirection+0x268>)
 8011ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae8:	f7ee fd90 	bl	800060c <__aeabi_dmul>
 8011aec:	4602      	mov	r2, r0
 8011aee:	460b      	mov	r3, r1
 8011af0:	4630      	mov	r0, r6
 8011af2:	4639      	mov	r1, r7
 8011af4:	f7ef f81a 	bl	8000b2c <__aeabi_dcmpgt>
 8011af8:	2800      	cmp	r0, #0
 8011afa:	f43f af53 	beq.w	80119a4 <findDirection+0x84>
 8011afe:	ee19 0a10 	vmov	r0, s18
 8011b02:	f7ee fd2b 	bl	800055c <__aeabi_f2d>
 8011b06:	a320      	add	r3, pc, #128	; (adr r3, 8011b88 <findDirection+0x268>)
 8011b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0c:	f7ee fd7e 	bl	800060c <__aeabi_dmul>
 8011b10:	4602      	mov	r2, r0
 8011b12:	460b      	mov	r3, r1
 8011b14:	4630      	mov	r0, r6
 8011b16:	4639      	mov	r1, r7
 8011b18:	f7ef f808 	bl	8000b2c <__aeabi_dcmpgt>
 8011b1c:	ecbd 8b04 	vpop	{d8-d9}
 8011b20:	2800      	cmp	r0, #0
 8011b22:	bf18      	it	ne
 8011b24:	2403      	movne	r4, #3
 8011b26:	4620      	mov	r0, r4
 8011b28:	bdd0      	pop	{r4, r6, r7, pc}
 8011b2a:	f7ee fd17 	bl	800055c <__aeabi_f2d>
 8011b2e:	4606      	mov	r6, r0
 8011b30:	ee18 0a10 	vmov	r0, s16
 8011b34:	460f      	mov	r7, r1
 8011b36:	f7ee fd11 	bl	800055c <__aeabi_f2d>
 8011b3a:	a313      	add	r3, pc, #76	; (adr r3, 8011b88 <findDirection+0x268>)
 8011b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b40:	f7ee fd64 	bl	800060c <__aeabi_dmul>
 8011b44:	4602      	mov	r2, r0
 8011b46:	460b      	mov	r3, r1
 8011b48:	4630      	mov	r0, r6
 8011b4a:	4639      	mov	r1, r7
 8011b4c:	f7ee ffee 	bl	8000b2c <__aeabi_dcmpgt>
 8011b50:	2800      	cmp	r0, #0
 8011b52:	f43f af27 	beq.w	80119a4 <findDirection+0x84>
 8011b56:	ee18 0a90 	vmov	r0, s17
 8011b5a:	f7ee fcff 	bl	800055c <__aeabi_f2d>
 8011b5e:	a30a      	add	r3, pc, #40	; (adr r3, 8011b88 <findDirection+0x268>)
 8011b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b64:	f7ee fd52 	bl	800060c <__aeabi_dmul>
 8011b68:	4602      	mov	r2, r0
 8011b6a:	460b      	mov	r3, r1
 8011b6c:	4630      	mov	r0, r6
 8011b6e:	4639      	mov	r1, r7
 8011b70:	f7ee ffdc 	bl	8000b2c <__aeabi_dcmpgt>
 8011b74:	ecbd 8b04 	vpop	{d8-d9}
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	bf18      	it	ne
 8011b7c:	2402      	movne	r4, #2
 8011b7e:	4620      	mov	r0, r4
 8011b80:	bdd0      	pop	{r4, r6, r7, pc}
 8011b82:	bf00      	nop
 8011b84:	f3af 8000 	nop.w
 8011b88:	e0000000 	.word	0xe0000000
 8011b8c:	3ff6b851 	.word	0x3ff6b851

08011b90 <updateOrientation>:
 8011b90:	2300      	movs	r3, #0
 8011b92:	6003      	str	r3, [r0, #0]
 8011b94:	6043      	str	r3, [r0, #4]
 8011b96:	7203      	strb	r3, [r0, #8]
 8011b98:	f891 c000 	ldrb.w	ip, [r1]
 8011b9c:	784a      	ldrb	r2, [r1, #1]
 8011b9e:	f1ac 0342 	sub.w	r3, ip, #66	; 0x42
 8011ba2:	2b17      	cmp	r3, #23
 8011ba4:	bf98      	it	ls
 8011ba6:	f10c 0c20 	addls.w	ip, ip, #32
 8011baa:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 8011bae:	bf98      	it	ls
 8011bb0:	fa5f fc8c 	uxtbls.w	ip, ip
 8011bb4:	2b17      	cmp	r3, #23
 8011bb6:	788b      	ldrb	r3, [r1, #2]
 8011bb8:	bf98      	it	ls
 8011bba:	3220      	addls	r2, #32
 8011bbc:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 8011bc0:	bf98      	it	ls
 8011bc2:	b2d2      	uxtbls	r2, r2
 8011bc4:	2917      	cmp	r1, #23
 8011bc6:	bf98      	it	ls
 8011bc8:	3320      	addls	r3, #32
 8011bca:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 8011bce:	bf98      	it	ls
 8011bd0:	b2db      	uxtbls	r3, r3
 8011bd2:	f1bc 0f13 	cmp.w	ip, #19
 8011bd6:	d80d      	bhi.n	8011bf4 <updateOrientation+0x64>
 8011bd8:	e8df f00c 	tbb	[pc, ip]
 8011bdc:	0c0c0a32 	.word	0x0c0c0a32
 8011be0:	0c0c0c0c 	.word	0x0c0c0c0c
 8011be4:	0c350c0c 	.word	0x0c350c0c
 8011be8:	380c0c0c 	.word	0x380c0c0c
 8011bec:	3e0c3b0c 	.word	0x3e0c3b0c
 8011bf0:	2101      	movs	r1, #1
 8011bf2:	7001      	strb	r1, [r0, #0]
 8011bf4:	3a64      	subs	r2, #100	; 0x64
 8011bf6:	2a13      	cmp	r2, #19
 8011bf8:	d80d      	bhi.n	8011c16 <updateOrientation+0x86>
 8011bfa:	e8df f002 	tbb	[pc, r2]
 8011bfe:	0a30      	.short	0x0a30
 8011c00:	0c0c0c0c 	.word	0x0c0c0c0c
 8011c04:	0c0c0c0c 	.word	0x0c0c0c0c
 8011c08:	0c0c0c33 	.word	0x0c0c0c33
 8011c0c:	390c360c 	.word	0x390c360c
 8011c10:	3c0c      	.short	0x3c0c
 8011c12:	2201      	movs	r2, #1
 8011c14:	7042      	strb	r2, [r0, #1]
 8011c16:	3b64      	subs	r3, #100	; 0x64
 8011c18:	2b13      	cmp	r3, #19
 8011c1a:	d80d      	bhi.n	8011c38 <updateOrientation+0xa8>
 8011c1c:	e8df f003 	tbb	[pc, r3]
 8011c20:	0c0c2e0a 	.word	0x0c0c2e0a
 8011c24:	0c0c0c0c 	.word	0x0c0c0c0c
 8011c28:	0c310c0c 	.word	0x0c310c0c
 8011c2c:	340c0c0c 	.word	0x340c0c0c
 8011c30:	0d0c370c 	.word	0x0d0c370c
 8011c34:	23ff      	movs	r3, #255	; 0xff
 8011c36:	7203      	strb	r3, [r0, #8]
 8011c38:	4770      	bx	lr
 8011c3a:	23ff      	movs	r3, #255	; 0xff
 8011c3c:	7083      	strb	r3, [r0, #2]
 8011c3e:	4770      	bx	lr
 8011c40:	21ff      	movs	r1, #255	; 0xff
 8011c42:	7181      	strb	r1, [r0, #6]
 8011c44:	e7d6      	b.n	8011bf4 <updateOrientation+0x64>
 8011c46:	2101      	movs	r1, #1
 8011c48:	70c1      	strb	r1, [r0, #3]
 8011c4a:	e7d3      	b.n	8011bf4 <updateOrientation+0x64>
 8011c4c:	21ff      	movs	r1, #255	; 0xff
 8011c4e:	70c1      	strb	r1, [r0, #3]
 8011c50:	e7d0      	b.n	8011bf4 <updateOrientation+0x64>
 8011c52:	2101      	movs	r1, #1
 8011c54:	7181      	strb	r1, [r0, #6]
 8011c56:	e7cd      	b.n	8011bf4 <updateOrientation+0x64>
 8011c58:	21ff      	movs	r1, #255	; 0xff
 8011c5a:	7001      	strb	r1, [r0, #0]
 8011c5c:	e7ca      	b.n	8011bf4 <updateOrientation+0x64>
 8011c5e:	22ff      	movs	r2, #255	; 0xff
 8011c60:	71c2      	strb	r2, [r0, #7]
 8011c62:	e7d8      	b.n	8011c16 <updateOrientation+0x86>
 8011c64:	2201      	movs	r2, #1
 8011c66:	7102      	strb	r2, [r0, #4]
 8011c68:	e7d5      	b.n	8011c16 <updateOrientation+0x86>
 8011c6a:	22ff      	movs	r2, #255	; 0xff
 8011c6c:	7102      	strb	r2, [r0, #4]
 8011c6e:	e7d2      	b.n	8011c16 <updateOrientation+0x86>
 8011c70:	2201      	movs	r2, #1
 8011c72:	71c2      	strb	r2, [r0, #7]
 8011c74:	e7cf      	b.n	8011c16 <updateOrientation+0x86>
 8011c76:	22ff      	movs	r2, #255	; 0xff
 8011c78:	7042      	strb	r2, [r0, #1]
 8011c7a:	e7cc      	b.n	8011c16 <updateOrientation+0x86>
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	7083      	strb	r3, [r0, #2]
 8011c80:	4770      	bx	lr
 8011c82:	2301      	movs	r3, #1
 8011c84:	7143      	strb	r3, [r0, #5]
 8011c86:	4770      	bx	lr
 8011c88:	23ff      	movs	r3, #255	; 0xff
 8011c8a:	7143      	strb	r3, [r0, #5]
 8011c8c:	4770      	bx	lr
 8011c8e:	2301      	movs	r3, #1
 8011c90:	7203      	strb	r3, [r0, #8]
 8011c92:	4770      	bx	lr

08011c94 <qmult>:
 8011c94:	ed91 2a03 	vldr	s4, [r1, #12]
 8011c98:	ed90 3a01 	vldr	s6, [r0, #4]
 8011c9c:	edd0 5a02 	vldr	s11, [r0, #8]
 8011ca0:	edd1 4a01 	vldr	s9, [r1, #4]
 8011ca4:	ed90 4a00 	vldr	s8, [r0]
 8011ca8:	ed91 5a02 	vldr	s10, [r1, #8]
 8011cac:	edd1 3a00 	vldr	s7, [r1]
 8011cb0:	edd0 2a03 	vldr	s5, [r0, #12]
 8011cb4:	ee25 6aa4 	vmul.f32	s12, s11, s9
 8011cb8:	ee62 6a03 	vmul.f32	s13, s4, s6
 8011cbc:	ee22 7a25 	vmul.f32	s14, s4, s11
 8011cc0:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 8011cc4:	eea4 6a02 	vfma.f32	s12, s8, s4
 8011cc8:	eee4 6a05 	vfma.f32	s13, s8, s10
 8011ccc:	eea3 7a23 	vfma.f32	s14, s6, s7
 8011cd0:	eee4 7a63 	vfms.f32	s15, s8, s7
 8011cd4:	eea2 6aa3 	vfma.f32	s12, s5, s7
 8011cd8:	eee4 6aa2 	vfma.f32	s13, s9, s5
 8011cdc:	eea5 7a22 	vfma.f32	s14, s10, s5
 8011ce0:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011ce4:	eea3 6a45 	vfms.f32	s12, s6, s10
 8011ce8:	eee5 6ae3 	vfms.f32	s13, s11, s7
 8011cec:	eea4 7a64 	vfms.f32	s14, s8, s9
 8011cf0:	eee5 7a65 	vfms.f32	s15, s10, s11
 8011cf4:	ed82 6a00 	vstr	s12, [r2]
 8011cf8:	edc2 6a01 	vstr	s13, [r2, #4]
 8011cfc:	ed82 7a02 	vstr	s14, [r2, #8]
 8011d00:	edc2 7a03 	vstr	s15, [r2, #12]
 8011d04:	4770      	bx	lr
 8011d06:	bf00      	nop

08011d08 <dataDerivative5>:
 8011d08:	ed90 7a01 	vldr	s14, [r0, #4]
 8011d0c:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8011d10:	edd0 6a04 	vldr	s13, [r0, #16]
 8011d14:	ed90 6a00 	vldr	s12, [r0]
 8011d18:	ed90 4a02 	vldr	s8, [r0, #8]
 8011d1c:	edd0 4a09 	vldr	s9, [r0, #36]	; 0x24
 8011d20:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
 8011d24:	eee7 7a05 	vfma.f32	s15, s14, s10
 8011d28:	ed90 7a03 	vldr	s14, [r0, #12]
 8011d2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011d30:	edd0 6a0b 	vldr	s13, [r0, #44]	; 0x2c
 8011d34:	ee96 7a05 	vfnms.f32	s14, s12, s10
 8011d38:	eee4 6a05 	vfma.f32	s13, s8, s10
 8011d3c:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 8011d40:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
 8011d44:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8011d48:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011d4c:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011d50:	eeb0 6a66 	vmov.f32	s12, s13
 8011d54:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8011d90 <dataDerivative5+0x88>
 8011d58:	eea5 7a25 	vfma.f32	s14, s10, s11
 8011d5c:	ee60 6a26 	vmul.f32	s13, s0, s13
 8011d60:	ed90 5a05 	vldr	s10, [r0, #20]
 8011d64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011d68:	ee36 6a45 	vsub.f32	s12, s12, s10
 8011d6c:	ed90 5a0e 	vldr	s10, [r0, #56]	; 0x38
 8011d70:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011d74:	eea5 6a25 	vfma.f32	s12, s10, s11
 8011d78:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8011d7c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011d80:	eea7 0a07 	vfma.f32	s0, s14, s14
 8011d84:	eea6 0aa6 	vfma.f32	s0, s13, s13
 8011d88:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011d8c:	4770      	bx	lr
 8011d8e:	bf00      	nop
 8011d90:	3dcccccd 	.word	0x3dcccccd

08011d94 <b_dcm2q>:
 8011d94:	ed90 5a08 	vldr	s10, [r0, #32]
 8011d98:	edd0 7a00 	vldr	s15, [r0]
 8011d9c:	edd0 6a04 	vldr	s13, [r0, #16]
 8011da0:	ee37 7a85 	vadd.f32	s14, s15, s10
 8011da4:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8011da8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011dac:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 8011db0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8011db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011db8:	bfc5      	ittet	gt
 8011dba:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 8011dbe:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 8011dc2:	eddf 5a43 	vldrle	s11, [pc, #268]	; 8011ed0 <b_dcm2q+0x13c>
 8011dc6:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 8011dca:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8011dce:	ee35 6a47 	vsub.f32	s12, s10, s14
 8011dd2:	ee35 7a07 	vadd.f32	s14, s10, s14
 8011dd6:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8011dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dde:	bfc5      	ittet	gt
 8011de0:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 8011de4:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 8011de8:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 8011ed0 <b_dcm2q+0x13c>
 8011dec:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 8011df0:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 8011df4:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8011df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dfc:	dd5b      	ble.n	8011eb6 <b_dcm2q+0x122>
 8011dfe:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8011e02:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011e06:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8011e0a:	eef1 4ac7 	vsqrt.f32	s9, s14
 8011e0e:	ee64 4a84 	vmul.f32	s9, s9, s8
 8011e12:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011e16:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011e1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011e1e:	edd0 6a07 	vldr	s13, [r0, #28]
 8011e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e2a:	bf85      	ittet	hi
 8011e2c:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 8011e30:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 8011e34:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 8011ed0 <b_dcm2q+0x13c>
 8011e38:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 8011e3c:	edd0 7a05 	vldr	s15, [r0, #20]
 8011e40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011e44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e4c:	d43c      	bmi.n	8011ec8 <b_dcm2q+0x134>
 8011e4e:	bfd8      	it	le
 8011e50:	ee27 7a27 	vmulle.f32	s14, s14, s15
 8011e54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011e5c:	ed81 7a00 	vstr	s14, [r1]
 8011e60:	edd0 7a06 	vldr	s15, [r0, #24]
 8011e64:	ed90 7a02 	vldr	s14, [r0, #8]
 8011e68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e74:	d425      	bmi.n	8011ec2 <b_dcm2q+0x12e>
 8011e76:	bfd8      	it	le
 8011e78:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 8011e7c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011e80:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8011e84:	edc1 5a01 	vstr	s11, [r1, #4]
 8011e88:	edd0 7a01 	vldr	s15, [r0, #4]
 8011e8c:	ed90 7a03 	vldr	s14, [r0, #12]
 8011e90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9c:	d40e      	bmi.n	8011ebc <b_dcm2q+0x128>
 8011e9e:	bfd8      	it	le
 8011ea0:	ee26 6a27 	vmulle.f32	s12, s12, s15
 8011ea4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011ea8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011eac:	edc1 4a03 	vstr	s9, [r1, #12]
 8011eb0:	ed81 6a02 	vstr	s12, [r1, #8]
 8011eb4:	4770      	bx	lr
 8011eb6:	eddf 4a06 	vldr	s9, [pc, #24]	; 8011ed0 <b_dcm2q+0x13c>
 8011eba:	e7aa      	b.n	8011e12 <b_dcm2q+0x7e>
 8011ebc:	eeb1 6a46 	vneg.f32	s12, s12
 8011ec0:	e7f0      	b.n	8011ea4 <b_dcm2q+0x110>
 8011ec2:	eef1 5a65 	vneg.f32	s11, s11
 8011ec6:	e7d9      	b.n	8011e7c <b_dcm2q+0xe8>
 8011ec8:	eeb1 7a47 	vneg.f32	s14, s14
 8011ecc:	e7c2      	b.n	8011e54 <b_dcm2q+0xc0>
 8011ece:	bf00      	nop
 8011ed0:	00000000 	.word	0x00000000

08011ed4 <getRotationMatrix>:
 8011ed4:	b538      	push	{r3, r4, r5, lr}
 8011ed6:	4613      	mov	r3, r2
 8011ed8:	4605      	mov	r5, r0
 8011eda:	460c      	mov	r4, r1
 8011edc:	4618      	mov	r0, r3
 8011ede:	2224      	movs	r2, #36	; 0x24
 8011ee0:	2100      	movs	r1, #0
 8011ee2:	f007 ffcd 	bl	8019e80 <memset>
 8011ee6:	edd5 5a00 	vldr	s11, [r5]
 8011eea:	ed9f 3a49 	vldr	s6, [pc, #292]	; 8012010 <getRotationMatrix+0x13c>
 8011eee:	edc0 5a02 	vstr	s11, [r0, #8]
 8011ef2:	edd5 4a01 	vldr	s9, [r5, #4]
 8011ef6:	edc0 4a05 	vstr	s9, [r0, #20]
 8011efa:	ed95 5a02 	vldr	s10, [r5, #8]
 8011efe:	ed80 5a08 	vstr	s10, [r0, #32]
 8011f02:	ed94 4a02 	vldr	s8, [r4, #8]
 8011f06:	edd4 3a01 	vldr	s7, [r4, #4]
 8011f0a:	ed94 6a00 	vldr	s12, [r4]
 8011f0e:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 8011f12:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 8011f16:	eee3 6a85 	vfma.f32	s13, s7, s10
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	eee6 7a24 	vfma.f32	s15, s12, s9
 8011f20:	ee25 7a46 	vnmul.f32	s14, s10, s12
 8011f24:	eeb0 6ae6 	vabs.f32	s12, s13
 8011f28:	eeb4 6ac3 	vcmpe.f32	s12, s6
 8011f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f30:	eea4 7a25 	vfma.f32	s14, s8, s11
 8011f34:	bfdc      	itt	le
 8011f36:	ee86 4a83 	vdivle.f32	s8, s13, s6
 8011f3a:	eeb0 6a43 	vmovle.f32	s12, s6
 8011f3e:	eef0 3ac7 	vabs.f32	s7, s14
 8011f42:	eeb4 6ae3 	vcmpe.f32	s12, s7
 8011f46:	bfd4      	ite	le
 8011f48:	ee24 4a04 	vmulle.f32	s8, s8, s8
 8011f4c:	eeb7 4a00 	vmovgt.f32	s8, #112	; 0x3f800000  1.0
 8011f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f54:	ed80 7a03 	vstr	s14, [r0, #12]
 8011f58:	edc0 7a06 	vstr	s15, [r0, #24]
 8011f5c:	d43f      	bmi.n	8011fde <getRotationMatrix+0x10a>
 8011f5e:	eec7 3a06 	vdiv.f32	s7, s14, s12
 8011f62:	eea3 4aa3 	vfma.f32	s8, s7, s7
 8011f66:	eeb0 3a44 	vmov.f32	s6, s8
 8011f6a:	eeb0 4ae7 	vabs.f32	s8, s15
 8011f6e:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8011f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f76:	d543      	bpl.n	8012000 <getRotationMatrix+0x12c>
 8011f78:	eec6 2a04 	vdiv.f32	s5, s12, s8
 8011f7c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8011f80:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8011f84:	eeb0 6a44 	vmov.f32	s12, s8
 8011f88:	eee3 3a22 	vfma.f32	s7, s6, s5
 8011f8c:	eeb1 4ae3 	vsqrt.f32	s8, s7
 8011f90:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8011f94:	ee24 6a06 	vmul.f32	s12, s8, s12
 8011f98:	ee83 4a86 	vdiv.f32	s8, s7, s12
 8011f9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011fa0:	ee67 7a84 	vmul.f32	s15, s15, s8
 8011fa4:	ee66 6a84 	vmul.f32	s13, s13, s8
 8011fa8:	ee65 3a47 	vnmul.f32	s7, s10, s14
 8011fac:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 8011fb0:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 8011fb4:	eee7 3aa4 	vfma.f32	s7, s15, s9
 8011fb8:	eef0 4a44 	vmov.f32	s9, s8
 8011fbc:	eee6 4a85 	vfma.f32	s9, s13, s10
 8011fc0:	eea7 6a25 	vfma.f32	s12, s14, s11
 8011fc4:	edc3 6a00 	vstr	s13, [r3]
 8011fc8:	ed83 7a03 	vstr	s14, [r3, #12]
 8011fcc:	edc3 7a06 	vstr	s15, [r3, #24]
 8011fd0:	edc3 3a01 	vstr	s7, [r3, #4]
 8011fd4:	edc3 4a04 	vstr	s9, [r3, #16]
 8011fd8:	ed83 6a07 	vstr	s12, [r3, #28]
 8011fdc:	bd38      	pop	{r3, r4, r5, pc}
 8011fde:	eec6 2a23 	vdiv.f32	s5, s12, s7
 8011fe2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8011fe6:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8011fea:	eeb0 6a63 	vmov.f32	s12, s7
 8011fee:	eea4 3a22 	vfma.f32	s6, s8, s5
 8011ff2:	eeb0 4ae7 	vabs.f32	s8, s15
 8011ff6:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8011ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ffe:	d4bb      	bmi.n	8011f78 <getRotationMatrix+0xa4>
 8012000:	ee87 4a86 	vdiv.f32	s8, s15, s12
 8012004:	eef0 3a43 	vmov.f32	s7, s6
 8012008:	eee4 3a04 	vfma.f32	s7, s8, s8
 801200c:	e7be      	b.n	8011f8c <getRotationMatrix+0xb8>
 801200e:	bf00      	nop
 8012010:	00000000 	.word	0x00000000

08012014 <kf_update>:
 8012014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012018:	ed2d 8b10 	vpush	{d8-d15}
 801201c:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 8012020:	3901      	subs	r1, #1
 8012022:	f8dd 4490 	ldr.w	r4, [sp, #1168]	; 0x490
 8012026:	9303      	str	r3, [sp, #12]
 8012028:	ed94 2a00 	vldr	s4, [r4]
 801202c:	edd4 2a01 	vldr	s5, [r4, #4]
 8012030:	ed94 3a02 	vldr	s6, [r4, #8]
 8012034:	edd4 3a03 	vldr	s7, [r4, #12]
 8012038:	ed94 4a04 	vldr	s8, [r4, #16]
 801203c:	edd4 4a05 	vldr	s9, [r4, #20]
 8012040:	ed94 5a06 	vldr	s10, [r4, #24]
 8012044:	edd4 5a07 	vldr	s11, [r4, #28]
 8012048:	ed94 6a08 	vldr	s12, [r4, #32]
 801204c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8012050:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8012054:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012058:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 80120cc <kf_update+0xb8>
 801205c:	9104      	str	r1, [sp, #16]
 801205e:	ab0b      	add	r3, sp, #44	; 0x2c
 8012060:	ee22 2a02 	vmul.f32	s4, s4, s4
 8012064:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8012068:	ee23 3a03 	vmul.f32	s6, s6, s6
 801206c:	ee63 3aa3 	vmul.f32	s7, s7, s7
 8012070:	ee24 4a04 	vmul.f32	s8, s8, s8
 8012074:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8012078:	ee25 5a05 	vmul.f32	s10, s10, s10
 801207c:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8012080:	ee26 6a06 	vmul.f32	s12, s12, s12
 8012084:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012088:	ee27 7a07 	vmul.f32	s14, s14, s14
 801208c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012090:	9302      	str	r3, [sp, #8]
 8012092:	2300      	movs	r3, #0
 8012094:	4606      	mov	r6, r0
 8012096:	9200      	str	r2, [sp, #0]
 8012098:	ed8d 2a0b 	vstr	s4, [sp, #44]	; 0x2c
 801209c:	edcd 2a0c 	vstr	s5, [sp, #48]	; 0x30
 80120a0:	ed8d 3a0d 	vstr	s6, [sp, #52]	; 0x34
 80120a4:	edcd 3a0e 	vstr	s7, [sp, #56]	; 0x38
 80120a8:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 80120ac:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
 80120b0:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
 80120b4:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 80120b8:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 80120bc:	edcd 6a14 	vstr	s13, [sp, #80]	; 0x50
 80120c0:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 80120c4:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 80120c8:	9301      	str	r3, [sp, #4]
 80120ca:	e010      	b.n	80120ee <kf_update+0xda>
 80120cc:	00000000 	.word	0x00000000
 80120d0:	9a00      	ldr	r2, [sp, #0]
 80120d2:	9b01      	ldr	r3, [sp, #4]
 80120d4:	3204      	adds	r2, #4
 80120d6:	9200      	str	r2, [sp, #0]
 80120d8:	9a02      	ldr	r2, [sp, #8]
 80120da:	3204      	adds	r2, #4
 80120dc:	9202      	str	r2, [sp, #8]
 80120de:	9a03      	ldr	r2, [sp, #12]
 80120e0:	3301      	adds	r3, #1
 80120e2:	3204      	adds	r2, #4
 80120e4:	2b0c      	cmp	r3, #12
 80120e6:	9301      	str	r3, [sp, #4]
 80120e8:	9203      	str	r2, [sp, #12]
 80120ea:	f000 857b 	beq.w	8012be4 <kf_update+0xbd0>
 80120ee:	9a04      	ldr	r2, [sp, #16]
 80120f0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80120f4:	9204      	str	r2, [sp, #16]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d0ea      	beq.n	80120d0 <kf_update+0xbc>
 80120fa:	9a03      	ldr	r2, [sp, #12]
 80120fc:	ed8d 8a17 	vstr	s16, [sp, #92]	; 0x5c
 8012100:	f106 0328 	add.w	r3, r6, #40	; 0x28
 8012104:	ac17      	add	r4, sp, #92	; 0x5c
 8012106:	edd2 da00 	vldr	s27, [r2]
 801210a:	ed92 ea0c 	vldr	s28, [r2, #48]	; 0x30
 801210e:	edd2 ea18 	vldr	s29, [r2, #96]	; 0x60
 8012112:	ed92 fa24 	vldr	s30, [r2, #144]	; 0x90
 8012116:	edd2 fa30 	vldr	s31, [r2, #192]	; 0xc0
 801211a:	edd2 6a3c 	vldr	s13, [r2, #240]	; 0xf0
 801211e:	ed92 6a48 	vldr	s12, [r2, #288]	; 0x120
 8012122:	edd2 5a54 	vldr	s11, [r2, #336]	; 0x150
 8012126:	ed92 5a60 	vldr	s10, [r2, #384]	; 0x180
 801212a:	9305      	str	r3, [sp, #20]
 801212c:	ed8d 8a18 	vstr	s16, [sp, #96]	; 0x60
 8012130:	ed8d 8a19 	vstr	s16, [sp, #100]	; 0x64
 8012134:	ed8d 8a1a 	vstr	s16, [sp, #104]	; 0x68
 8012138:	ed8d 8a1b 	vstr	s16, [sp, #108]	; 0x6c
 801213c:	ed8d 8a1c 	vstr	s16, [sp, #112]	; 0x70
 8012140:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
 8012144:	ed8d 8a1e 	vstr	s16, [sp, #120]	; 0x78
 8012148:	ed8d 8a1f 	vstr	s16, [sp, #124]	; 0x7c
 801214c:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8012150:	4622      	mov	r2, r4
 8012152:	ecb3 7a01 	vldmia	r3!, {s14}
 8012156:	ecf2 7a01 	vldmia	r2!, {s15}
 801215a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012162:	d006      	beq.n	8012172 <kf_update+0x15e>
 8012164:	eef5 da40 	vcmp.f32	s27, #0.0
 8012168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801216c:	bf18      	it	ne
 801216e:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 8012172:	ed93 7a08 	vldr	s14, [r3, #32]
 8012176:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801217e:	d006      	beq.n	801218e <kf_update+0x17a>
 8012180:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012188:	bf18      	it	ne
 801218a:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 801218e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8012192:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801219a:	d006      	beq.n	80121aa <kf_update+0x196>
 801219c:	eef5 ea40 	vcmp.f32	s29, #0.0
 80121a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121a4:	bf18      	it	ne
 80121a6:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 80121aa:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80121ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80121b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b6:	d006      	beq.n	80121c6 <kf_update+0x1b2>
 80121b8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80121bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c0:	bf18      	it	ne
 80121c2:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 80121c6:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80121ca:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80121ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d2:	d006      	beq.n	80121e2 <kf_update+0x1ce>
 80121d4:	eef5 fa40 	vcmp.f32	s31, #0.0
 80121d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121dc:	bf18      	it	ne
 80121de:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 80121e2:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80121e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80121ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ee:	d006      	beq.n	80121fe <kf_update+0x1ea>
 80121f0:	eef5 6a40 	vcmp.f32	s13, #0.0
 80121f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f8:	bf18      	it	ne
 80121fa:	eee7 7a26 	vfmane.f32	s15, s14, s13
 80121fe:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8012202:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801220a:	d006      	beq.n	801221a <kf_update+0x206>
 801220c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012214:	bf18      	it	ne
 8012216:	eee7 7a06 	vfmane.f32	s15, s14, s12
 801221a:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 801221e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012226:	d006      	beq.n	8012236 <kf_update+0x222>
 8012228:	eef5 5a40 	vcmp.f32	s11, #0.0
 801222c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012230:	bf18      	it	ne
 8012232:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8012236:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 801223a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801223e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012242:	d006      	beq.n	8012252 <kf_update+0x23e>
 8012244:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801224c:	bf18      	it	ne
 801224e:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8012252:	4299      	cmp	r1, r3
 8012254:	ed42 7a01 	vstr	s15, [r2, #-4]
 8012258:	f47f af7b 	bne.w	8012152 <kf_update+0x13e>
 801225c:	eef5 da40 	vcmp.f32	s27, #0.0
 8012260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012264:	eddd ba17 	vldr	s23, [sp, #92]	; 0x5c
 8012268:	f040 8492 	bne.w	8012b90 <kf_update+0xb7c>
 801226c:	eef0 7a6d 	vmov.f32	s15, s27
 8012270:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012278:	ed9d ca18 	vldr	s24, [sp, #96]	; 0x60
 801227c:	d006      	beq.n	801228c <kf_update+0x278>
 801227e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012286:	bf18      	it	ne
 8012288:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 801228c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012294:	ed9d aa19 	vldr	s20, [sp, #100]	; 0x64
 8012298:	d006      	beq.n	80122a8 <kf_update+0x294>
 801229a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a2:	bf18      	it	ne
 80122a4:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 80122a8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80122ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122b0:	ed9d da1a 	vldr	s26, [sp, #104]	; 0x68
 80122b4:	d006      	beq.n	80122c4 <kf_update+0x2b0>
 80122b6:	eeb5 da40 	vcmp.f32	s26, #0.0
 80122ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122be:	bf18      	it	ne
 80122c0:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 80122c4:	eef5 fa40 	vcmp.f32	s31, #0.0
 80122c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122cc:	eddd ca1b 	vldr	s25, [sp, #108]	; 0x6c
 80122d0:	d006      	beq.n	80122e0 <kf_update+0x2cc>
 80122d2:	eef5 ca40 	vcmp.f32	s25, #0.0
 80122d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122da:	bf18      	it	ne
 80122dc:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 80122e0:	eef5 6a40 	vcmp.f32	s13, #0.0
 80122e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e8:	ed9d ba1c 	vldr	s22, [sp, #112]	; 0x70
 80122ec:	d006      	beq.n	80122fc <kf_update+0x2e8>
 80122ee:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80122f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122f6:	bf18      	it	ne
 80122f8:	eeeb 7a26 	vfmane.f32	s15, s22, s13
 80122fc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012304:	eddd aa1d 	vldr	s21, [sp, #116]	; 0x74
 8012308:	d006      	beq.n	8012318 <kf_update+0x304>
 801230a:	eef5 aa40 	vcmp.f32	s21, #0.0
 801230e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012312:	bf18      	it	ne
 8012314:	eeea 7a86 	vfmane.f32	s15, s21, s12
 8012318:	eef5 5a40 	vcmp.f32	s11, #0.0
 801231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012320:	eddd 9a1e 	vldr	s19, [sp, #120]	; 0x78
 8012324:	d006      	beq.n	8012334 <kf_update+0x320>
 8012326:	eef5 9a40 	vcmp.f32	s19, #0.0
 801232a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801232e:	bf18      	it	ne
 8012330:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 8012334:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801233c:	ed9d 9a1f 	vldr	s18, [sp, #124]	; 0x7c
 8012340:	d006      	beq.n	8012350 <kf_update+0x33c>
 8012342:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801234a:	bf18      	it	ne
 801234c:	eee9 7a05 	vfmane.f32	s15, s18, s10
 8012350:	9b02      	ldr	r3, [sp, #8]
 8012352:	ed93 7a00 	vldr	s14, [r3]
 8012356:	9b01      	ldr	r3, [sp, #4]
 8012358:	ee77 7a87 	vadd.f32	s15, s15, s14
 801235c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8012360:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8012364:	2b05      	cmp	r3, #5
 8012366:	ee6b ba87 	vmul.f32	s23, s23, s14
 801236a:	ee2c ca07 	vmul.f32	s24, s24, s14
 801236e:	ee2a aa07 	vmul.f32	s20, s20, s14
 8012372:	ee2d da07 	vmul.f32	s26, s26, s14
 8012376:	ee67 ca2c 	vmul.f32	s25, s14, s25
 801237a:	ee27 ba0b 	vmul.f32	s22, s14, s22
 801237e:	ee67 aa2a 	vmul.f32	s21, s14, s21
 8012382:	ee69 9a87 	vmul.f32	s19, s19, s14
 8012386:	ee29 9a07 	vmul.f32	s18, s18, s14
 801238a:	edcd ba17 	vstr	s23, [sp, #92]	; 0x5c
 801238e:	ed8d ca18 	vstr	s24, [sp, #96]	; 0x60
 8012392:	ed8d aa19 	vstr	s20, [sp, #100]	; 0x64
 8012396:	ed8d da1a 	vstr	s26, [sp, #104]	; 0x68
 801239a:	edcd ca1b 	vstr	s25, [sp, #108]	; 0x6c
 801239e:	ed8d ba1c 	vstr	s22, [sp, #112]	; 0x70
 80123a2:	edcd aa1d 	vstr	s21, [sp, #116]	; 0x74
 80123a6:	edcd 9a1e 	vstr	s19, [sp, #120]	; 0x78
 80123aa:	ed8d 9a1f 	vstr	s18, [sp, #124]	; 0x7c
 80123ae:	f340 83eb 	ble.w	8012b88 <kf_update+0xb74>
 80123b2:	eef5 da40 	vcmp.f32	s27, #0.0
 80123b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ba:	f000 8456 	beq.w	8012c6a <kf_update+0xc56>
 80123be:	edd6 7a01 	vldr	s15, [r6, #4]
 80123c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80123c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ca:	f040 8477 	bne.w	8012cbc <kf_update+0xca8>
 80123ce:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80123d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123d6:	d008      	beq.n	80123ea <kf_update+0x3d6>
 80123d8:	ed96 7a02 	vldr	s14, [r6, #8]
 80123dc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e4:	bf18      	it	ne
 80123e6:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 80123ea:	eef5 ea40 	vcmp.f32	s29, #0.0
 80123ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123f2:	d008      	beq.n	8012406 <kf_update+0x3f2>
 80123f4:	ed96 7a03 	vldr	s14, [r6, #12]
 80123f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80123fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012400:	bf18      	it	ne
 8012402:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8012406:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801240e:	d008      	beq.n	8012422 <kf_update+0x40e>
 8012410:	ed96 7a04 	vldr	s14, [r6, #16]
 8012414:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801241c:	bf18      	it	ne
 801241e:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8012422:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801242a:	d008      	beq.n	801243e <kf_update+0x42a>
 801242c:	ed96 7a05 	vldr	s14, [r6, #20]
 8012430:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012438:	bf18      	it	ne
 801243a:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 801243e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012446:	d008      	beq.n	801245a <kf_update+0x446>
 8012448:	ed96 7a06 	vldr	s14, [r6, #24]
 801244c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012454:	bf18      	it	ne
 8012456:	eee7 7a26 	vfmane.f32	s15, s14, s13
 801245a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012462:	d008      	beq.n	8012476 <kf_update+0x462>
 8012464:	ed96 7a07 	vldr	s14, [r6, #28]
 8012468:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012470:	bf18      	it	ne
 8012472:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8012476:	eef5 5a40 	vcmp.f32	s11, #0.0
 801247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247e:	d008      	beq.n	8012492 <kf_update+0x47e>
 8012480:	ed96 7a08 	vldr	s14, [r6, #32]
 8012484:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801248c:	bf18      	it	ne
 801248e:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8012492:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801249a:	d008      	beq.n	80124ae <kf_update+0x49a>
 801249c:	ed96 7a09 	vldr	s14, [r6, #36]	; 0x24
 80124a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80124a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124a8:	bf18      	it	ne
 80124aa:	eee7 7a05 	vfmane.f32	s15, s14, s10
 80124ae:	9b00      	ldr	r3, [sp, #0]
 80124b0:	edd3 8a00 	vldr	s17, [r3]
 80124b4:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80124b8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80124bc:	2100      	movs	r1, #0
 80124be:	a868      	add	r0, sp, #416	; 0x1a0
 80124c0:	ed8d 5a09 	vstr	s10, [sp, #36]	; 0x24
 80124c4:	edcd 5a08 	vstr	s11, [sp, #32]
 80124c8:	ed8d 6a07 	vstr	s12, [sp, #28]
 80124cc:	edcd 6a06 	vstr	s13, [sp, #24]
 80124d0:	f007 fcd6 	bl	8019e80 <memset>
 80124d4:	ab68      	add	r3, sp, #416	; 0x1a0
 80124d6:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
 80124da:	eddd 5a08 	vldr	s11, [sp, #32]
 80124de:	ed9d 6a07 	vldr	s12, [sp, #28]
 80124e2:	eddd 6a06 	vldr	s13, [sp, #24]
 80124e6:	a971      	add	r1, sp, #452	; 0x1c4
 80124e8:	461a      	mov	r2, r3
 80124ea:	ecf4 7a01 	vldmia	r4!, {s15}
 80124ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80124f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f6:	d062      	beq.n	80125be <kf_update+0x5aa>
 80124f8:	eef5 da40 	vcmp.f32	s27, #0.0
 80124fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012500:	d005      	beq.n	801250e <kf_update+0x4fa>
 8012502:	ed92 7a00 	vldr	s14, [r2]
 8012506:	eea7 7aad 	vfma.f32	s14, s15, s27
 801250a:	ed82 7a00 	vstr	s14, [r2]
 801250e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012516:	d005      	beq.n	8012524 <kf_update+0x510>
 8012518:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 801251c:	eea7 7a8e 	vfma.f32	s14, s15, s28
 8012520:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 8012524:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252c:	d005      	beq.n	801253a <kf_update+0x526>
 801252e:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 8012532:	eea7 7aae 	vfma.f32	s14, s15, s29
 8012536:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 801253a:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012542:	d005      	beq.n	8012550 <kf_update+0x53c>
 8012544:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 8012548:	eea7 7a8f 	vfma.f32	s14, s15, s30
 801254c:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 8012550:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012558:	d005      	beq.n	8012566 <kf_update+0x552>
 801255a:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 801255e:	eea7 7aaf 	vfma.f32	s14, s15, s31
 8012562:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 8012566:	eef5 6a40 	vcmp.f32	s13, #0.0
 801256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256e:	d005      	beq.n	801257c <kf_update+0x568>
 8012570:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 8012574:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012578:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 801257c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012584:	d005      	beq.n	8012592 <kf_update+0x57e>
 8012586:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 801258a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801258e:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 8012592:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259a:	d005      	beq.n	80125a8 <kf_update+0x594>
 801259c:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 80125a0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80125a4:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 80125a8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80125ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b0:	d005      	beq.n	80125be <kf_update+0x5aa>
 80125b2:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 80125b6:	eea7 7a85 	vfma.f32	s14, s15, s10
 80125ba:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 80125be:	3204      	adds	r2, #4
 80125c0:	4291      	cmp	r1, r2
 80125c2:	d192      	bne.n	80124ea <kf_update+0x4d6>
 80125c4:	afb9      	add	r7, sp, #740	; 0x2e4
 80125c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80125ca:	a868      	add	r0, sp, #416	; 0x1a0
 80125cc:	463a      	mov	r2, r7
 80125ce:	f04f 0b02 	mov.w	fp, #2
 80125d2:	f04f 0e03 	mov.w	lr, #3
 80125d6:	f04f 0c04 	mov.w	ip, #4
 80125da:	f04f 0a05 	mov.w	sl, #5
 80125de:	f04f 0906 	mov.w	r9, #6
 80125e2:	f04f 0807 	mov.w	r8, #7
 80125e6:	2408      	movs	r4, #8
 80125e8:	2100      	movs	r1, #0
 80125ea:	9306      	str	r3, [sp, #24]
 80125ec:	e07b      	b.n	80126e6 <kf_update+0x6d2>
 80125ee:	edd0 7a00 	vldr	s15, [r0]
 80125f2:	ed82 8a01 	vstr	s16, [r2, #4]
 80125f6:	eef1 7a67 	vneg.f32	s15, s15
 80125fa:	2901      	cmp	r1, #1
 80125fc:	edc0 7a00 	vstr	s15, [r0]
 8012600:	f1a4 0507 	sub.w	r5, r4, #7
 8012604:	f000 8110 	beq.w	8012828 <kf_update+0x814>
 8012608:	ab68      	add	r3, sp, #416	; 0x1a0
 801260a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801260e:	edd5 7a00 	vldr	s15, [r5]
 8012612:	ed82 8a02 	vstr	s16, [r2, #8]
 8012616:	eef1 7a67 	vneg.f32	s15, s15
 801261a:	2902      	cmp	r1, #2
 801261c:	edc5 7a00 	vstr	s15, [r5]
 8012620:	f000 80ef 	beq.w	8012802 <kf_update+0x7ee>
 8012624:	ab68      	add	r3, sp, #416	; 0x1a0
 8012626:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 801262a:	edd5 7a00 	vldr	s15, [r5]
 801262e:	ed82 8a03 	vstr	s16, [r2, #12]
 8012632:	eef1 7a67 	vneg.f32	s15, s15
 8012636:	2903      	cmp	r1, #3
 8012638:	edc5 7a00 	vstr	s15, [r5]
 801263c:	d176      	bne.n	801272c <kf_update+0x718>
 801263e:	edd0 7a03 	vldr	s15, [r0, #12]
 8012642:	ed82 8a04 	vstr	s16, [r2, #16]
 8012646:	ee77 7a67 	vsub.f32	s15, s14, s15
 801264a:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 801264e:	edc0 7a03 	vstr	s15, [r0, #12]
 8012652:	edd5 7a00 	vldr	s15, [r5]
 8012656:	ed82 8a05 	vstr	s16, [r2, #20]
 801265a:	eef1 7a67 	vneg.f32	s15, s15
 801265e:	edc5 7a00 	vstr	s15, [r5]
 8012662:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8012666:	edd5 7a00 	vldr	s15, [r5]
 801266a:	ed82 8a06 	vstr	s16, [r2, #24]
 801266e:	eef1 7a67 	vneg.f32	s15, s15
 8012672:	edc5 7a00 	vstr	s15, [r5]
 8012676:	ab68      	add	r3, sp, #416	; 0x1a0
 8012678:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 801267c:	edd5 7a00 	vldr	s15, [r5]
 8012680:	ed82 8a07 	vstr	s16, [r2, #28]
 8012684:	eef1 7a67 	vneg.f32	s15, s15
 8012688:	2907      	cmp	r1, #7
 801268a:	edc5 7a00 	vstr	s15, [r5]
 801268e:	f040 80a4 	bne.w	80127da <kf_update+0x7c6>
 8012692:	edd0 7a07 	vldr	s15, [r0, #28]
 8012696:	ed82 8a08 	vstr	s16, [r2, #32]
 801269a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801269e:	edc0 7a07 	vstr	s15, [r0, #28]
 80126a2:	ab68      	add	r3, sp, #416	; 0x1a0
 80126a4:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 80126a8:	edd5 7a00 	vldr	s15, [r5]
 80126ac:	00a5      	lsls	r5, r4, #2
 80126ae:	eef1 7a67 	vneg.f32	s15, s15
 80126b2:	ab68      	add	r3, sp, #416	; 0x1a0
 80126b4:	3101      	adds	r1, #1
 80126b6:	441d      	add	r5, r3
 80126b8:	2909      	cmp	r1, #9
 80126ba:	edc5 7a00 	vstr	s15, [r5]
 80126be:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80126c2:	f104 0409 	add.w	r4, r4, #9
 80126c6:	f100 0024 	add.w	r0, r0, #36	; 0x24
 80126ca:	f108 0809 	add.w	r8, r8, #9
 80126ce:	f109 0909 	add.w	r9, r9, #9
 80126d2:	f10a 0a09 	add.w	sl, sl, #9
 80126d6:	f10c 0c09 	add.w	ip, ip, #9
 80126da:	f10e 0e09 	add.w	lr, lr, #9
 80126de:	f10b 0b09 	add.w	fp, fp, #9
 80126e2:	f000 80d2 	beq.w	801288a <kf_update+0x876>
 80126e6:	ed82 8a00 	vstr	s16, [r2]
 80126ea:	2900      	cmp	r1, #0
 80126ec:	f47f af7f 	bne.w	80125ee <kf_update+0x5da>
 80126f0:	eddd 7a68 	vldr	s15, [sp, #416]	; 0x1a0
 80126f4:	ed82 8a01 	vstr	s16, [r2, #4]
 80126f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126fc:	ab68      	add	r3, sp, #416	; 0x1a0
 80126fe:	1fe5      	subs	r5, r4, #7
 8012700:	edc0 7a00 	vstr	s15, [r0]
 8012704:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8012708:	edd5 7a00 	vldr	s15, [r5]
 801270c:	ed82 8a02 	vstr	s16, [r2, #8]
 8012710:	eef1 7a67 	vneg.f32	s15, s15
 8012714:	edc5 7a00 	vstr	s15, [r5]
 8012718:	ed82 8a03 	vstr	s16, [r2, #12]
 801271c:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8012720:	edd5 7a00 	vldr	s15, [r5]
 8012724:	eef1 7a67 	vneg.f32	s15, s15
 8012728:	edc5 7a00 	vstr	s15, [r5]
 801272c:	ab68      	add	r3, sp, #416	; 0x1a0
 801272e:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8012732:	edd5 7a00 	vldr	s15, [r5]
 8012736:	ed82 8a04 	vstr	s16, [r2, #16]
 801273a:	eef1 7a67 	vneg.f32	s15, s15
 801273e:	2904      	cmp	r1, #4
 8012740:	edc5 7a00 	vstr	s15, [r5]
 8012744:	d02d      	beq.n	80127a2 <kf_update+0x78e>
 8012746:	ab68      	add	r3, sp, #416	; 0x1a0
 8012748:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 801274c:	edd5 7a00 	vldr	s15, [r5]
 8012750:	ed82 8a05 	vstr	s16, [r2, #20]
 8012754:	eef1 7a67 	vneg.f32	s15, s15
 8012758:	2905      	cmp	r1, #5
 801275a:	edc5 7a00 	vstr	s15, [r5]
 801275e:	d077      	beq.n	8012850 <kf_update+0x83c>
 8012760:	ab68      	add	r3, sp, #416	; 0x1a0
 8012762:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8012766:	edd5 7a00 	vldr	s15, [r5]
 801276a:	ed82 8a06 	vstr	s16, [r2, #24]
 801276e:	eef1 7a67 	vneg.f32	s15, s15
 8012772:	2906      	cmp	r1, #6
 8012774:	edc5 7a00 	vstr	s15, [r5]
 8012778:	f47f af7d 	bne.w	8012676 <kf_update+0x662>
 801277c:	edd0 7a06 	vldr	s15, [r0, #24]
 8012780:	ed82 8a07 	vstr	s16, [r2, #28]
 8012784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012788:	ed82 8a08 	vstr	s16, [r2, #32]
 801278c:	edc0 7a06 	vstr	s15, [r0, #24]
 8012790:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8012794:	edd5 7a00 	vldr	s15, [r5]
 8012798:	eef1 7a67 	vneg.f32	s15, s15
 801279c:	edc5 7a00 	vstr	s15, [r5]
 80127a0:	e77f      	b.n	80126a2 <kf_update+0x68e>
 80127a2:	edd0 7a04 	vldr	s15, [r0, #16]
 80127a6:	ed82 8a05 	vstr	s16, [r2, #20]
 80127aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80127ae:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 80127b2:	edc0 7a04 	vstr	s15, [r0, #16]
 80127b6:	edd5 7a00 	vldr	s15, [r5]
 80127ba:	ed82 8a06 	vstr	s16, [r2, #24]
 80127be:	eef1 7a67 	vneg.f32	s15, s15
 80127c2:	edc5 7a00 	vstr	s15, [r5]
 80127c6:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 80127ca:	edd5 7a00 	vldr	s15, [r5]
 80127ce:	ed82 8a07 	vstr	s16, [r2, #28]
 80127d2:	eef1 7a67 	vneg.f32	s15, s15
 80127d6:	edc5 7a00 	vstr	s15, [r5]
 80127da:	ab68      	add	r3, sp, #416	; 0x1a0
 80127dc:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 80127e0:	edd5 7a00 	vldr	s15, [r5]
 80127e4:	ed82 8a08 	vstr	s16, [r2, #32]
 80127e8:	eef1 7a67 	vneg.f32	s15, s15
 80127ec:	2908      	cmp	r1, #8
 80127ee:	edc5 7a00 	vstr	s15, [r5]
 80127f2:	f47f af56 	bne.w	80126a2 <kf_update+0x68e>
 80127f6:	edd0 7a08 	vldr	s15, [r0, #32]
 80127fa:	00a5      	lsls	r5, r4, #2
 80127fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012800:	e757      	b.n	80126b2 <kf_update+0x69e>
 8012802:	edd0 7a02 	vldr	s15, [r0, #8]
 8012806:	ed82 8a03 	vstr	s16, [r2, #12]
 801280a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801280e:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8012812:	edc0 7a02 	vstr	s15, [r0, #8]
 8012816:	edd5 7a00 	vldr	s15, [r5]
 801281a:	ed82 8a04 	vstr	s16, [r2, #16]
 801281e:	eef1 7a67 	vneg.f32	s15, s15
 8012822:	edc5 7a00 	vstr	s15, [r5]
 8012826:	e78e      	b.n	8012746 <kf_update+0x732>
 8012828:	edd0 7a01 	vldr	s15, [r0, #4]
 801282c:	ed82 8a02 	vstr	s16, [r2, #8]
 8012830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012834:	ab68      	add	r3, sp, #416	; 0x1a0
 8012836:	ed82 8a03 	vstr	s16, [r2, #12]
 801283a:	edc0 7a01 	vstr	s15, [r0, #4]
 801283e:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8012842:	edd5 7a00 	vldr	s15, [r5]
 8012846:	eef1 7a67 	vneg.f32	s15, s15
 801284a:	edc5 7a00 	vstr	s15, [r5]
 801284e:	e76d      	b.n	801272c <kf_update+0x718>
 8012850:	edd0 7a05 	vldr	s15, [r0, #20]
 8012854:	ed82 8a06 	vstr	s16, [r2, #24]
 8012858:	ee77 7a67 	vsub.f32	s15, s14, s15
 801285c:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8012860:	edc0 7a05 	vstr	s15, [r0, #20]
 8012864:	edd5 7a00 	vldr	s15, [r5]
 8012868:	ed82 8a07 	vstr	s16, [r2, #28]
 801286c:	eef1 7a67 	vneg.f32	s15, s15
 8012870:	edc5 7a00 	vstr	s15, [r5]
 8012874:	ed82 8a08 	vstr	s16, [r2, #32]
 8012878:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 801287c:	edd5 7a00 	vldr	s15, [r5]
 8012880:	eef1 7a67 	vneg.f32	s15, s15
 8012884:	edc5 7a00 	vstr	s15, [r5]
 8012888:	e70b      	b.n	80126a2 <kf_update+0x68e>
 801288a:	9b06      	ldr	r3, [sp, #24]
 801288c:	2400      	movs	r4, #0
 801288e:	f506 70a2 	add.w	r0, r6, #324	; 0x144
 8012892:	ecf3 3a01 	vldmia	r3!, {s7}
 8012896:	ed93 4a08 	vldr	s8, [r3, #32]
 801289a:	edd3 4a11 	vldr	s9, [r3, #68]	; 0x44
 801289e:	ed93 5a1a 	vldr	s10, [r3, #104]	; 0x68
 80128a2:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 80128a6:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 80128aa:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 80128ae:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 80128b2:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 80128b6:	4632      	mov	r2, r6
 80128b8:	4639      	mov	r1, r7
 80128ba:	eef5 3a40 	vcmp.f32	s7, #0.0
 80128be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c2:	d00c      	beq.n	80128de <kf_update+0x8ca>
 80128c4:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
 80128c8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80128cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128d0:	d005      	beq.n	80128de <kf_update+0x8ca>
 80128d2:	edd1 2a00 	vldr	s5, [r1]
 80128d6:	eee3 2a83 	vfma.f32	s5, s7, s6
 80128da:	edc1 2a00 	vstr	s5, [r1]
 80128de:	eeb5 4a40 	vcmp.f32	s8, #0.0
 80128e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e6:	d00c      	beq.n	8012902 <kf_update+0x8ee>
 80128e8:	ed92 3a0b 	vldr	s6, [r2, #44]	; 0x2c
 80128ec:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80128f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f4:	d005      	beq.n	8012902 <kf_update+0x8ee>
 80128f6:	edd1 2a00 	vldr	s5, [r1]
 80128fa:	eee4 2a03 	vfma.f32	s5, s8, s6
 80128fe:	edc1 2a00 	vstr	s5, [r1]
 8012902:	eef5 4a40 	vcmp.f32	s9, #0.0
 8012906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801290a:	d00c      	beq.n	8012926 <kf_update+0x912>
 801290c:	ed92 3a0c 	vldr	s6, [r2, #48]	; 0x30
 8012910:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8012914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012918:	d005      	beq.n	8012926 <kf_update+0x912>
 801291a:	edd1 2a00 	vldr	s5, [r1]
 801291e:	eee4 2a83 	vfma.f32	s5, s9, s6
 8012922:	edc1 2a00 	vstr	s5, [r1]
 8012926:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801292a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801292e:	d00c      	beq.n	801294a <kf_update+0x936>
 8012930:	ed92 3a0d 	vldr	s6, [r2, #52]	; 0x34
 8012934:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8012938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801293c:	d005      	beq.n	801294a <kf_update+0x936>
 801293e:	edd1 2a00 	vldr	s5, [r1]
 8012942:	eee5 2a03 	vfma.f32	s5, s10, s6
 8012946:	edc1 2a00 	vstr	s5, [r1]
 801294a:	eef5 5a40 	vcmp.f32	s11, #0.0
 801294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012952:	d00c      	beq.n	801296e <kf_update+0x95a>
 8012954:	ed92 3a0e 	vldr	s6, [r2, #56]	; 0x38
 8012958:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012960:	d005      	beq.n	801296e <kf_update+0x95a>
 8012962:	edd1 2a00 	vldr	s5, [r1]
 8012966:	eee5 2a83 	vfma.f32	s5, s11, s6
 801296a:	edc1 2a00 	vstr	s5, [r1]
 801296e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012976:	d00c      	beq.n	8012992 <kf_update+0x97e>
 8012978:	ed92 3a0f 	vldr	s6, [r2, #60]	; 0x3c
 801297c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8012980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012984:	d005      	beq.n	8012992 <kf_update+0x97e>
 8012986:	edd1 2a00 	vldr	s5, [r1]
 801298a:	eee6 2a03 	vfma.f32	s5, s12, s6
 801298e:	edc1 2a00 	vstr	s5, [r1]
 8012992:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801299a:	d00c      	beq.n	80129b6 <kf_update+0x9a2>
 801299c:	ed92 3a10 	vldr	s6, [r2, #64]	; 0x40
 80129a0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80129a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a8:	d005      	beq.n	80129b6 <kf_update+0x9a2>
 80129aa:	edd1 2a00 	vldr	s5, [r1]
 80129ae:	eee6 2a83 	vfma.f32	s5, s13, s6
 80129b2:	edc1 2a00 	vstr	s5, [r1]
 80129b6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80129ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129be:	d00c      	beq.n	80129da <kf_update+0x9c6>
 80129c0:	ed92 3a11 	vldr	s6, [r2, #68]	; 0x44
 80129c4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80129c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129cc:	d005      	beq.n	80129da <kf_update+0x9c6>
 80129ce:	edd1 2a00 	vldr	s5, [r1]
 80129d2:	eee7 2a03 	vfma.f32	s5, s14, s6
 80129d6:	edc1 2a00 	vstr	s5, [r1]
 80129da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80129de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e2:	d00c      	beq.n	80129fe <kf_update+0x9ea>
 80129e4:	ed92 3a12 	vldr	s6, [r2, #72]	; 0x48
 80129e8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80129ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f0:	d005      	beq.n	80129fe <kf_update+0x9ea>
 80129f2:	edd1 2a00 	vldr	s5, [r1]
 80129f6:	eee7 2a83 	vfma.f32	s5, s15, s6
 80129fa:	edc1 2a00 	vstr	s5, [r1]
 80129fe:	3224      	adds	r2, #36	; 0x24
 8012a00:	4282      	cmp	r2, r0
 8012a02:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8012a06:	f47f af58 	bne.w	80128ba <kf_update+0x8a6>
 8012a0a:	3401      	adds	r4, #1
 8012a0c:	2c09      	cmp	r4, #9
 8012a0e:	f107 0704 	add.w	r7, r7, #4
 8012a12:	f47f af3e 	bne.w	8012892 <kf_update+0x87e>
 8012a16:	9805      	ldr	r0, [sp, #20]
 8012a18:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012a1c:	a9b9      	add	r1, sp, #740	; 0x2e4
 8012a1e:	f007 fabd 	bl	8019f9c <memcpy>
 8012a22:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a2a:	d05f      	beq.n	8012aec <kf_update+0xad8>
 8012a2c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a34:	d05a      	beq.n	8012aec <kf_update+0xad8>
 8012a36:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a3e:	ee68 baab 	vmul.f32	s23, s17, s23
 8012a42:	f000 812c 	beq.w	8012c9e <kf_update+0xc8a>
 8012a46:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a4e:	ee2c ca28 	vmul.f32	s24, s24, s17
 8012a52:	f000 8121 	beq.w	8012c98 <kf_update+0xc84>
 8012a56:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a5e:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8012a62:	f000 8114 	beq.w	8012c8e <kf_update+0xc7a>
 8012a66:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a6e:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8012a72:	eeb0 aa4c 	vmov.f32	s20, s24
 8012a76:	f040 812f 	bne.w	8012cd8 <kf_update+0xcc4>
 8012a7a:	eef0 ca47 	vmov.f32	s25, s14
 8012a7e:	eeb0 da67 	vmov.f32	s26, s15
 8012a82:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a8a:	d065      	beq.n	8012b58 <kf_update+0xb44>
 8012a8c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a94:	f000 80f0 	beq.w	8012c78 <kf_update+0xc64>
 8012a98:	eef0 7a48 	vmov.f32	s15, s16
 8012a9c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa4:	ee28 7a8b 	vmul.f32	s14, s17, s22
 8012aa8:	d17d      	bne.n	8012ba6 <kf_update+0xb92>
 8012aaa:	eef0 aa47 	vmov.f32	s21, s14
 8012aae:	eeb0 ba67 	vmov.f32	s22, s15
 8012ab2:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aba:	f000 8082 	beq.w	8012bc2 <kf_update+0xbae>
 8012abe:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac6:	f000 80da 	beq.w	8012c7e <kf_update+0xc6a>
 8012aca:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad2:	ee28 7aa9 	vmul.f32	s14, s17, s19
 8012ad6:	eef0 7a48 	vmov.f32	s15, s16
 8012ada:	f040 812a 	bne.w	8012d32 <kf_update+0xd1e>
 8012ade:	eef0 8a49 	vmov.f32	s17, s18
 8012ae2:	eef0 9a67 	vmov.f32	s19, s15
 8012ae6:	eeb0 9a47 	vmov.f32	s18, s14
 8012aea:	e086      	b.n	8012bfa <kf_update+0xbe6>
 8012aec:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af4:	d005      	beq.n	8012b02 <kf_update+0xaee>
 8012af6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012afe:	f040 80f9 	bne.w	8012cf4 <kf_update+0xce0>
 8012b02:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b0a:	d071      	beq.n	8012bf0 <kf_update+0xbdc>
 8012b0c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b14:	f040 8116 	bne.w	8012d44 <kf_update+0xd30>
 8012b18:	eeb0 aa68 	vmov.f32	s20, s17
 8012b1c:	eef0 ba68 	vmov.f32	s23, s17
 8012b20:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b28:	d007      	beq.n	8012b3a <kf_update+0xb26>
 8012b2a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b32:	f040 80c7 	bne.w	8012cc4 <kf_update+0xcb0>
 8012b36:	eeb0 da68 	vmov.f32	s26, s17
 8012b3a:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b42:	d09e      	beq.n	8012a82 <kf_update+0xa6e>
 8012b44:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b4c:	f040 80f7 	bne.w	8012d3e <kf_update+0xd2a>
 8012b50:	eeb0 ba68 	vmov.f32	s22, s17
 8012b54:	eef0 ca68 	vmov.f32	s25, s17
 8012b58:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b60:	d0a7      	beq.n	8012ab2 <kf_update+0xa9e>
 8012b62:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b6a:	f040 80ce 	bne.w	8012d0a <kf_update+0xcf6>
 8012b6e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b76:	f000 8087 	beq.w	8012c88 <kf_update+0xc74>
 8012b7a:	eeb0 9a68 	vmov.f32	s18, s17
 8012b7e:	eef0 9a68 	vmov.f32	s19, s17
 8012b82:	eef0 aa68 	vmov.f32	s21, s17
 8012b86:	e038      	b.n	8012bfa <kf_update+0xbe6>
 8012b88:	9b00      	ldr	r3, [sp, #0]
 8012b8a:	edd3 8a00 	vldr	s17, [r3]
 8012b8e:	e493      	b.n	80124b8 <kf_update+0x4a4>
 8012b90:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b98:	bf14      	ite	ne
 8012b9a:	ee6b 7aad 	vmulne.f32	s15, s23, s27
 8012b9e:	eef0 7a6b 	vmoveq.f32	s15, s23
 8012ba2:	f7ff bb65 	b.w	8012270 <kf_update+0x25c>
 8012ba6:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bae:	eeb0 ba67 	vmov.f32	s22, s15
 8012bb2:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8012bb6:	f040 80b2 	bne.w	8012d1e <kf_update+0xd0a>
 8012bba:	eef0 9a67 	vmov.f32	s19, s15
 8012bbe:	eef0 aa47 	vmov.f32	s21, s14
 8012bc2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bca:	d014      	beq.n	8012bf6 <kf_update+0xbe2>
 8012bcc:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd4:	d04d      	beq.n	8012c72 <kf_update+0xc5e>
 8012bd6:	eeb0 7a48 	vmov.f32	s14, s16
 8012bda:	ee68 8a89 	vmul.f32	s17, s17, s18
 8012bde:	eeb0 9a47 	vmov.f32	s18, s14
 8012be2:	e00a      	b.n	8012bfa <kf_update+0xbe6>
 8012be4:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
 8012be8:	ecbd 8b10 	vpop	{d8-d15}
 8012bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bf0:	eef0 ba4a 	vmov.f32	s23, s20
 8012bf4:	e794      	b.n	8012b20 <kf_update+0xb0c>
 8012bf6:	eef0 8a49 	vmov.f32	s17, s18
 8012bfa:	edd6 3a01 	vldr	s7, [r6, #4]
 8012bfe:	ed96 4a02 	vldr	s8, [r6, #8]
 8012c02:	edd6 4a03 	vldr	s9, [r6, #12]
 8012c06:	ed96 5a04 	vldr	s10, [r6, #16]
 8012c0a:	edd6 5a05 	vldr	s11, [r6, #20]
 8012c0e:	ed96 6a06 	vldr	s12, [r6, #24]
 8012c12:	edd6 6a07 	vldr	s13, [r6, #28]
 8012c16:	ed96 7a08 	vldr	s14, [r6, #32]
 8012c1a:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
 8012c1e:	ee73 baab 	vadd.f32	s23, s7, s23
 8012c22:	ee34 aa0a 	vadd.f32	s20, s8, s20
 8012c26:	ee34 da8d 	vadd.f32	s26, s9, s26
 8012c2a:	ee75 ca2c 	vadd.f32	s25, s10, s25
 8012c2e:	ee35 ba8b 	vadd.f32	s22, s11, s22
 8012c32:	ee76 aa2a 	vadd.f32	s21, s12, s21
 8012c36:	ee76 9aa9 	vadd.f32	s19, s13, s19
 8012c3a:	ee37 9a09 	vadd.f32	s18, s14, s18
 8012c3e:	ee77 8aa8 	vadd.f32	s17, s15, s17
 8012c42:	edc6 ba01 	vstr	s23, [r6, #4]
 8012c46:	ed86 aa02 	vstr	s20, [r6, #8]
 8012c4a:	ed86 da03 	vstr	s26, [r6, #12]
 8012c4e:	edc6 ca04 	vstr	s25, [r6, #16]
 8012c52:	ed86 ba05 	vstr	s22, [r6, #20]
 8012c56:	edc6 aa06 	vstr	s21, [r6, #24]
 8012c5a:	edc6 9a07 	vstr	s19, [r6, #28]
 8012c5e:	ed86 9a08 	vstr	s18, [r6, #32]
 8012c62:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
 8012c66:	f7ff ba33 	b.w	80120d0 <kf_update+0xbc>
 8012c6a:	eef0 7a6d 	vmov.f32	s15, s27
 8012c6e:	f7ff bbae 	b.w	80123ce <kf_update+0x3ba>
 8012c72:	eeb0 9a68 	vmov.f32	s18, s17
 8012c76:	e7c0      	b.n	8012bfa <kf_update+0xbe6>
 8012c78:	eeb0 ba68 	vmov.f32	s22, s17
 8012c7c:	e76c      	b.n	8012b58 <kf_update+0xb44>
 8012c7e:	eeb0 9a68 	vmov.f32	s18, s17
 8012c82:	eef0 9a68 	vmov.f32	s19, s17
 8012c86:	e7b8      	b.n	8012bfa <kf_update+0xbe6>
 8012c88:	eef0 aa69 	vmov.f32	s21, s19
 8012c8c:	e799      	b.n	8012bc2 <kf_update+0xbae>
 8012c8e:	eeb0 da67 	vmov.f32	s26, s15
 8012c92:	eeb0 aa4c 	vmov.f32	s20, s24
 8012c96:	e750      	b.n	8012b3a <kf_update+0xb26>
 8012c98:	eeb0 aa4c 	vmov.f32	s20, s24
 8012c9c:	e740      	b.n	8012b20 <kf_update+0xb0c>
 8012c9e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca6:	f43f af3b 	beq.w	8012b20 <kf_update+0xb0c>
 8012caa:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb2:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8012cb6:	f47f aed6 	bne.w	8012a66 <kf_update+0xa52>
 8012cba:	e7e8      	b.n	8012c8e <kf_update+0xc7a>
 8012cbc:	ee67 7aad 	vmul.f32	s15, s15, s27
 8012cc0:	f7ff bb85 	b.w	80123ce <kf_update+0x3ba>
 8012cc4:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ccc:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8012cd0:	eef0 7a48 	vmov.f32	s15, s16
 8012cd4:	f43f aed1 	beq.w	8012a7a <kf_update+0xa66>
 8012cd8:	eeb0 da67 	vmov.f32	s26, s15
 8012cdc:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce4:	ee68 7aac 	vmul.f32	s15, s17, s25
 8012ce8:	d126      	bne.n	8012d38 <kf_update+0xd24>
 8012cea:	eeb0 ba67 	vmov.f32	s22, s15
 8012cee:	eef0 ca47 	vmov.f32	s25, s14
 8012cf2:	e731      	b.n	8012b58 <kf_update+0xb44>
 8012cf4:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cfc:	ee2c ca28 	vmul.f32	s24, s24, s17
 8012d00:	eef0 ba48 	vmov.f32	s23, s16
 8012d04:	f47f aea7 	bne.w	8012a56 <kf_update+0xa42>
 8012d08:	e7c6      	b.n	8012c98 <kf_update+0xc84>
 8012d0a:	eef5 9a40 	vcmp.f32	s19, #0.0
 8012d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d12:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8012d16:	eeb0 7a48 	vmov.f32	s14, s16
 8012d1a:	f43f af4e 	beq.w	8012bba <kf_update+0xba6>
 8012d1e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d26:	eef0 aa47 	vmov.f32	s21, s14
 8012d2a:	ee28 7aa9 	vmul.f32	s14, s17, s19
 8012d2e:	f43f aed6 	beq.w	8012ade <kf_update+0xaca>
 8012d32:	eef0 9a67 	vmov.f32	s19, s15
 8012d36:	e750      	b.n	8012bda <kf_update+0xbc6>
 8012d38:	eef0 ca47 	vmov.f32	s25, s14
 8012d3c:	e6ae      	b.n	8012a9c <kf_update+0xa88>
 8012d3e:	eeb0 7a48 	vmov.f32	s14, s16
 8012d42:	e7cb      	b.n	8012cdc <kf_update+0xcc8>
 8012d44:	ed9f ca06 	vldr	s24, [pc, #24]	; 8012d60 <kf_update+0xd4c>
 8012d48:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d50:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8012d54:	eef0 ba4c 	vmov.f32	s23, s24
 8012d58:	f47f ae85 	bne.w	8012a66 <kf_update+0xa52>
 8012d5c:	e797      	b.n	8012c8e <kf_update+0xc7a>
 8012d5e:	bf00      	nop
 8012d60:	00000000 	.word	0x00000000

08012d64 <q2hpr>:
 8012d64:	b510      	push	{r4, lr}
 8012d66:	ed90 7a00 	vldr	s14, [r0]
 8012d6a:	edd0 6a01 	vldr	s13, [r0, #4]
 8012d6e:	edd0 7a02 	vldr	s15, [r0, #8]
 8012d72:	edd0 4a03 	vldr	s9, [r0, #12]
 8012d76:	ed2d 8b0a 	vpush	{d8-d12}
 8012d7a:	ee27 0a26 	vmul.f32	s0, s14, s13
 8012d7e:	ee27 5a27 	vmul.f32	s10, s14, s15
 8012d82:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8012d86:	ee67 0a07 	vmul.f32	s1, s14, s14
 8012d8a:	ee26 aaa6 	vmul.f32	s20, s13, s13
 8012d8e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012d92:	ee27 7a24 	vmul.f32	s14, s14, s9
 8012d96:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8012d9a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012d9e:	ee70 9aa0 	vadd.f32	s19, s1, s1
 8012da2:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8012da6:	ee36 ba06 	vadd.f32	s22, s12, s12
 8012daa:	ee70 aa00 	vadd.f32	s21, s0, s0
 8012dae:	ee35 ca05 	vadd.f32	s24, s10, s10
 8012db2:	ee77 8a07 	vadd.f32	s17, s14, s14
 8012db6:	ee75 baa5 	vadd.f32	s23, s11, s11
 8012dba:	ee36 9aa6 	vadd.f32	s18, s13, s13
 8012dbe:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8012dc2:	460c      	mov	r4, r1
 8012dc4:	bb8a      	cbnz	r2, 8012e2a <q2hpr+0xc6>
 8012dc6:	ee79 0a8b 	vadd.f32	s1, s19, s22
 8012dca:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8012dce:	ee7b 0a60 	vsub.f32	s1, s22, s1
 8012dd2:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 8012dd6:	f009 fea7 	bl	801cb28 <atan2f>
 8012dda:	eeb0 8a40 	vmov.f32	s16, s0
 8012dde:	ed84 8a00 	vstr	s16, [r4]
 8012de2:	ee38 0aab 	vadd.f32	s0, s17, s23
 8012de6:	f009 fe73 	bl	801cad0 <asinf>
 8012dea:	ee79 0a8a 	vadd.f32	s1, s19, s20
 8012dee:	eef0 8a40 	vmov.f32	s17, s0
 8012df2:	ee7b 0a60 	vsub.f32	s1, s22, s1
 8012df6:	ee3c 0a49 	vsub.f32	s0, s24, s18
 8012dfa:	f009 fe95 	bl	801cb28 <atan2f>
 8012dfe:	eef1 8a68 	vneg.f32	s17, s17
 8012e02:	eeb0 9a40 	vmov.f32	s18, s0
 8012e06:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e0e:	ed84 9a02 	vstr	s18, [r4, #8]
 8012e12:	edc4 8a01 	vstr	s17, [r4, #4]
 8012e16:	d505      	bpl.n	8012e24 <q2hpr+0xc0>
 8012e18:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8012e70 <q2hpr+0x10c>
 8012e1c:	ee38 8a00 	vadd.f32	s16, s16, s0
 8012e20:	ed84 8a00 	vstr	s16, [r4]
 8012e24:	ecbd 8b0a 	vpop	{d8-d12}
 8012e28:	bd10      	pop	{r4, pc}
 8012e2a:	ee3c 0a49 	vsub.f32	s0, s24, s18
 8012e2e:	f009 fe4f 	bl	801cad0 <asinf>
 8012e32:	ee79 0a8a 	vadd.f32	s1, s19, s20
 8012e36:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8012e3a:	ee79 0ae0 	vsub.f32	s1, s19, s1
 8012e3e:	eeb0 9a40 	vmov.f32	s18, s0
 8012e42:	ee38 0aab 	vadd.f32	s0, s17, s23
 8012e46:	f009 fe6f 	bl	801cb28 <atan2f>
 8012e4a:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 8012e4e:	eef0 8a40 	vmov.f32	s17, s0
 8012e52:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8012e56:	ee79 0ae0 	vsub.f32	s1, s19, s1
 8012e5a:	eeb1 0a40 	vneg.f32	s0, s0
 8012e5e:	f009 fe63 	bl	801cb28 <atan2f>
 8012e62:	eef1 8a68 	vneg.f32	s17, s17
 8012e66:	eeb0 8a40 	vmov.f32	s16, s0
 8012e6a:	ed84 0a00 	vstr	s0, [r4]
 8012e6e:	e7ca      	b.n	8012e06 <q2hpr+0xa2>
 8012e70:	40c90fdb 	.word	0x40c90fdb

08012e74 <output_update>:
 8012e74:	edd0 7a01 	vldr	s15, [r0, #4]
 8012e78:	edd0 5a00 	vldr	s11, [r0]
 8012e7c:	edd0 6a02 	vldr	s13, [r0, #8]
 8012e80:	ed90 5a03 	vldr	s10, [r0, #12]
 8012e84:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e8c:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8012e90:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8012e94:	4615      	mov	r5, r2
 8012e96:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8012e9a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012e9e:	eea5 7a85 	vfma.f32	s14, s11, s10
 8012ea2:	460f      	mov	r7, r1
 8012ea4:	461e      	mov	r6, r3
 8012ea6:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8012eaa:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012eae:	ee36 6a06 	vadd.f32	s12, s12, s12
 8012eb2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012eb6:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8012eba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012ebe:	ee37 7a07 	vadd.f32	s14, s14, s14
 8012ec2:	ee35 5ac6 	vsub.f32	s10, s11, s12
 8012ec6:	2a00      	cmp	r2, #0
 8012ec8:	d145      	bne.n	8012f56 <output_update+0xe2>
 8012eca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012ece:	eeb1 7a47 	vneg.f32	s14, s14
 8012ed2:	ed83 7a00 	vstr	s14, [r3]
 8012ed6:	edc3 7a01 	vstr	s15, [r3, #4]
 8012eda:	ed83 5a02 	vstr	s10, [r3, #8]
 8012ede:	4629      	mov	r1, r5
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	f7ff ff3f 	bl	8012d64 <q2hpr>
 8012ee6:	ed95 7a01 	vldr	s14, [r5, #4]
 8012eea:	edd5 7a02 	vldr	s15, [r5, #8]
 8012eee:	edd5 6a00 	vldr	s13, [r5]
 8012ef2:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8013000 <output_update+0x18c>
 8012ef6:	ee27 7a46 	vnmul.f32	s14, s14, s12
 8012efa:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 8012efe:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012f02:	ed85 7a01 	vstr	s14, [r5, #4]
 8012f06:	edc5 6a00 	vstr	s13, [r5]
 8012f0a:	edc5 7a02 	vstr	s15, [r5, #8]
 8012f0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8012f12:	edd6 7a00 	vldr	s15, [r6]
 8012f16:	6823      	ldr	r3, [r4, #0]
 8012f18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012f1c:	edc8 7a00 	vstr	s15, [r8]
 8012f20:	ed97 7a00 	vldr	s14, [r7]
 8012f24:	edd6 7a01 	vldr	s15, [r6, #4]
 8012f28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012f2c:	edc8 7a01 	vstr	s15, [r8, #4]
 8012f30:	edd6 7a02 	vldr	s15, [r6, #8]
 8012f34:	ed97 7a02 	vldr	s14, [r7, #8]
 8012f38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012f3c:	edc8 7a02 	vstr	s15, [r8, #8]
 8012f40:	edd4 7a02 	vldr	s15, [r4, #8]
 8012f44:	6862      	ldr	r2, [r4, #4]
 8012f46:	6022      	str	r2, [r4, #0]
 8012f48:	eef1 7a67 	vneg.f32	s15, s15
 8012f4c:	6063      	str	r3, [r4, #4]
 8012f4e:	edc4 7a02 	vstr	s15, [r4, #8]
 8012f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f56:	2a01      	cmp	r2, #1
 8012f58:	d015      	beq.n	8012f86 <output_update+0x112>
 8012f5a:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8013000 <output_update+0x18c>
 8012f5e:	edd5 6a00 	vldr	s13, [r5]
 8012f62:	ed95 7a01 	vldr	s14, [r5, #4]
 8012f66:	edd5 7a02 	vldr	s15, [r5, #8]
 8012f6a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012f6e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012f72:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012f76:	edc5 6a00 	vstr	s13, [r5]
 8012f7a:	ed85 7a01 	vstr	s14, [r5, #4]
 8012f7e:	edc5 7a02 	vstr	s15, [r5, #8]
 8012f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012f8a:	ee36 6a65 	vsub.f32	s12, s12, s11
 8012f8e:	eeb1 7a47 	vneg.f32	s14, s14
 8012f92:	edc3 7a00 	vstr	s15, [r3]
 8012f96:	ed83 7a01 	vstr	s14, [r3, #4]
 8012f9a:	ed83 6a02 	vstr	s12, [r3, #8]
 8012f9e:	4629      	mov	r1, r5
 8012fa0:	f7ff fee0 	bl	8012d64 <q2hpr>
 8012fa4:	edd5 6a00 	vldr	s13, [r5]
 8012fa8:	ed95 7a01 	vldr	s14, [r5, #4]
 8012fac:	edd5 7a02 	vldr	s15, [r5, #8]
 8012fb0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013000 <output_update+0x18c>
 8012fb4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012fb8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012fbc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012fc0:	ed85 7a01 	vstr	s14, [r5, #4]
 8012fc4:	edc5 6a00 	vstr	s13, [r5]
 8012fc8:	edc5 7a02 	vstr	s15, [r5, #8]
 8012fcc:	ed97 7a00 	vldr	s14, [r7]
 8012fd0:	edd6 7a00 	vldr	s15, [r6]
 8012fd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012fd8:	edc8 7a00 	vstr	s15, [r8]
 8012fdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8012fe0:	edd6 7a01 	vldr	s15, [r6, #4]
 8012fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012fe8:	edc8 7a01 	vstr	s15, [r8, #4]
 8012fec:	edd6 7a02 	vldr	s15, [r6, #8]
 8012ff0:	ed97 7a02 	vldr	s14, [r7, #8]
 8012ff4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012ff8:	edc8 7a02 	vstr	s15, [r8, #8]
 8012ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013000:	42652ee1 	.word	0x42652ee1
 8013004:	00000000 	.word	0x00000000

08013008 <MFX_emptyAttitude>:
 8013008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801300c:	ed2d 8b02 	vpush	{d8}
 8013010:	4fe9      	ldr	r7, [pc, #932]	; (80133b8 <MFX_emptyAttitude+0x3b0>)
 8013012:	eddf 8aea 	vldr	s17, [pc, #936]	; 80133bc <MFX_emptyAttitude+0x3b4>
 8013016:	f6ad 4dd4 	subw	sp, sp, #3284	; 0xcd4
 801301a:	f50d 64d7 	add.w	r4, sp, #1720	; 0x6b8
 801301e:	f04f 0800 	mov.w	r8, #0
 8013022:	46bc      	mov	ip, r7
 8013024:	e9c4 8800 	strd	r8, r8, [r4]
 8013028:	f83c 3b04 	ldrh.w	r3, [ip], #4
 801302c:	f8c4 8008 	str.w	r8, [r4, #8]
 8013030:	f88d 854a 	strb.w	r8, [sp, #1354]	; 0x54a
 8013034:	f8ad 3548 	strh.w	r3, [sp, #1352]	; 0x548
 8013038:	4681      	mov	r9, r0
 801303a:	f8dd 3548 	ldr.w	r3, [sp, #1352]	; 0x548
 801303e:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8013042:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013046:	0c1b      	lsrs	r3, r3, #16
 8013048:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 801304c:	ab2b      	add	r3, sp, #172	; 0xac
 801304e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013052:	ab2e      	add	r3, sp, #184	; 0xb8
 8013054:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013058:	ab31      	add	r3, sp, #196	; 0xc4
 801305a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801305e:	ab34      	add	r3, sp, #208	; 0xd0
 8013060:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013068:	ab37      	add	r3, sp, #220	; 0xdc
 801306a:	edcd 8a08 	vstr	s17, [sp, #32]
 801306e:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8013072:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8013076:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 801307a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801307e:	ab3a      	add	r3, sp, #232	; 0xe8
 8013080:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013084:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013088:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 801308c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013090:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013094:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013098:	f44f 75b4 	mov.w	r5, #360	; 0x168
 801309c:	f8dc 3000 	ldr.w	r3, [ip]
 80130a0:	f8ce 3000 	str.w	r3, [lr]
 80130a4:	462a      	mov	r2, r5
 80130a6:	4641      	mov	r1, r8
 80130a8:	4620      	mov	r0, r4
 80130aa:	f006 fee9 	bl	8019e80 <memset>
 80130ae:	f44f 56f0 	mov.w	r6, #7680	; 0x1e00
 80130b2:	462a      	mov	r2, r5
 80130b4:	4621      	mov	r1, r4
 80130b6:	a840      	add	r0, sp, #256	; 0x100
 80130b8:	f8ad 60f8 	strh.w	r6, [sp, #248]	; 0xf8
 80130bc:	f006 ff6e 	bl	8019f9c <memcpy>
 80130c0:	462a      	mov	r2, r5
 80130c2:	4641      	mov	r1, r8
 80130c4:	4620      	mov	r0, r4
 80130c6:	ed8d 8a3f 	vstr	s16, [sp, #252]	; 0xfc
 80130ca:	f006 fed9 	bl	8019e80 <memset>
 80130ce:	462a      	mov	r2, r5
 80130d0:	4621      	mov	r1, r4
 80130d2:	a89c      	add	r0, sp, #624	; 0x270
 80130d4:	f8ad 6268 	strh.w	r6, [sp, #616]	; 0x268
 80130d8:	f006 ff60 	bl	8019f9c <memcpy>
 80130dc:	462a      	mov	r2, r5
 80130de:	4641      	mov	r1, r8
 80130e0:	4620      	mov	r0, r4
 80130e2:	ed8d 8a9b 	vstr	s16, [sp, #620]	; 0x26c
 80130e6:	f006 fecb 	bl	8019e80 <memset>
 80130ea:	462a      	mov	r2, r5
 80130ec:	4621      	mov	r1, r4
 80130ee:	a8f8      	add	r0, sp, #992	; 0x3e0
 80130f0:	f8ad 63d8 	strh.w	r6, [sp, #984]	; 0x3d8
 80130f4:	f006 ff52 	bl	8019f9c <memcpy>
 80130f8:	462a      	mov	r2, r5
 80130fa:	4641      	mov	r1, r8
 80130fc:	4620      	mov	r0, r4
 80130fe:	ed8d 8af7 	vstr	s16, [sp, #988]	; 0x3dc
 8013102:	f006 febd 	bl	8019e80 <memset>
 8013106:	462a      	mov	r2, r5
 8013108:	4621      	mov	r1, r4
 801310a:	f50d 60aa 	add.w	r0, sp, #1360	; 0x550
 801310e:	f8ad 6548 	strh.w	r6, [sp, #1352]	; 0x548
 8013112:	f006 ff43 	bl	8019f9c <memcpy>
 8013116:	f04f 0301 	mov.w	r3, #1
 801311a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 801311e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8013122:	4ba7      	ldr	r3, [pc, #668]	; (80133c0 <MFX_emptyAttitude+0x3b8>)
 8013124:	9320      	str	r3, [sp, #128]	; 0x80
 8013126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013128:	ae0c      	add	r6, sp, #48	; 0x30
 801312a:	46b3      	mov	fp, r6
 801312c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801312e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013132:	e9c4 8800 	strd	r8, r8, [r4]
 8013136:	e9c4 8802 	strd	r8, r8, [r4, #8]
 801313a:	f8c4 8010 	str.w	r8, [r4, #16]
 801313e:	f10d 0c6c 	add.w	ip, sp, #108	; 0x6c
 8013142:	46a6      	mov	lr, r4
 8013144:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013148:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801314c:	f50d 6aa9 	add.w	sl, sp, #1352	; 0x548
 8013150:	682d      	ldr	r5, [r5, #0]
 8013152:	f8cc 5000 	str.w	r5, [ip]
 8013156:	af21      	add	r7, sp, #132	; 0x84
 8013158:	ed8a 8a01 	vstr	s16, [sl, #4]
 801315c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801315e:	ab1a      	add	r3, sp, #104	; 0x68
 8013160:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013164:	abf6      	add	r3, sp, #984	; 0x3d8
 8013166:	9300      	str	r3, [sp, #0]
 8013168:	aa3e      	add	r2, sp, #248	; 0xf8
 801316a:	f8c7 8000 	str.w	r8, [r7]
 801316e:	ab9a      	add	r3, sp, #616	; 0x268
 8013170:	a911      	add	r1, sp, #68	; 0x44
 8013172:	9403      	str	r4, [sp, #12]
 8013174:	2001      	movs	r0, #1
 8013176:	f7fe fa49 	bl	801160c <DataHist_parameters>
 801317a:	4b92      	ldr	r3, [pc, #584]	; (80133c4 <MFX_emptyAttitude+0x3bc>)
 801317c:	f8c9 3018 	str.w	r3, [r9, #24]
 8013180:	4b91      	ldr	r3, [pc, #580]	; (80133c8 <MFX_emptyAttitude+0x3c0>)
 8013182:	f8c9 301c 	str.w	r3, [r9, #28]
 8013186:	4b91      	ldr	r3, [pc, #580]	; (80133cc <MFX_emptyAttitude+0x3c4>)
 8013188:	f8c9 3020 	str.w	r3, [r9, #32]
 801318c:	4b90      	ldr	r3, [pc, #576]	; (80133d0 <MFX_emptyAttitude+0x3c8>)
 801318e:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 8013192:	ae2b      	add	r6, sp, #172	; 0xac
 8013194:	4b8f      	ldr	r3, [pc, #572]	; (80133d4 <MFX_emptyAttitude+0x3cc>)
 8013196:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 801319a:	ce07      	ldmia	r6!, {r0, r1, r2}
 801319c:	4b8e      	ldr	r3, [pc, #568]	; (80133d8 <MFX_emptyAttitude+0x3d0>)
 801319e:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
 80131a2:	4b8e      	ldr	r3, [pc, #568]	; (80133dc <MFX_emptyAttitude+0x3d4>)
 80131a4:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 80131a8:	4b8d      	ldr	r3, [pc, #564]	; (80133e0 <MFX_emptyAttitude+0x3d8>)
 80131aa:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 80131ae:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 80131b2:	f8a9 3070 	strh.w	r3, [r9, #112]	; 0x70
 80131b6:	ad2e      	add	r5, sp, #184	; 0xb8
 80131b8:	f89d 30aa 	ldrb.w	r3, [sp, #170]	; 0xaa
 80131bc:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 80131c0:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
 80131c4:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
 80131c8:	cd07      	ldmia	r5!, {r0, r1, r2}
 80131ca:	f889 3072 	strb.w	r3, [r9, #114]	; 0x72
 80131ce:	f240 1301 	movw	r3, #257	; 0x101
 80131d2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80133b0 <MFX_emptyAttitude+0x3a8>
 80131d6:	f8a9 3000 	strh.w	r3, [r9]
 80131da:	f8a9 3004 	strh.w	r3, [r9, #4]
 80131de:	4b81      	ldr	r3, [pc, #516]	; (80133e4 <MFX_emptyAttitude+0x3dc>)
 80131e0:	f8c9 300c 	str.w	r3, [r9, #12]
 80131e4:	4b80      	ldr	r3, [pc, #512]	; (80133e8 <MFX_emptyAttitude+0x3e0>)
 80131e6:	f8c9 3014 	str.w	r3, [r9, #20]
 80131ea:	f509 7346 	add.w	r3, r9, #792	; 0x318
 80131ee:	9304      	str	r3, [sp, #16]
 80131f0:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
 80131f4:	ed89 6b16 	vstr	d6, [r9, #88]	; 0x58
 80131f8:	ed89 6b18 	vstr	d6, [r9, #96]	; 0x60
 80131fc:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8013200:	f8a9 8002 	strh.w	r8, [r9, #2]
 8013204:	ed89 8a02 	vstr	s16, [r9, #8]
 8013208:	ed89 8a04 	vstr	s16, [r9, #16]
 801320c:	ed89 6b1a 	vstr	d6, [r9, #104]	; 0x68
 8013210:	f8c9 1084 	str.w	r1, [r9, #132]	; 0x84
 8013214:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
 8013218:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 801321c:	f10d 0bd0 	add.w	fp, sp, #208	; 0xd0
 8013220:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
 8013224:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
 8013228:	f8c9 2094 	str.w	r2, [r9, #148]	; 0x94
 801322c:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 8013230:	af37      	add	r7, sp, #220	; 0xdc
 8013232:	f8c9 0098 	str.w	r0, [r9, #152]	; 0x98
 8013236:	f8c9 109c 	str.w	r1, [r9, #156]	; 0x9c
 801323a:	f8c9 20a0 	str.w	r2, [r9, #160]	; 0xa0
 801323e:	cf07      	ldmia	r7!, {r0, r1, r2}
 8013240:	f10d 0ee8 	add.w	lr, sp, #232	; 0xe8
 8013244:	f8c9 00a4 	str.w	r0, [r9, #164]	; 0xa4
 8013248:	f8c9 10a8 	str.w	r1, [r9, #168]	; 0xa8
 801324c:	f8c9 20ac 	str.w	r2, [r9, #172]	; 0xac
 8013250:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 8013254:	eddf 7a65 	vldr	s15, [pc, #404]	; 80133ec <MFX_emptyAttitude+0x3e4>
 8013258:	ed9f 5a65 	vldr	s10, [pc, #404]	; 80133f0 <MFX_emptyAttitude+0x3e8>
 801325c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80133f4 <MFX_emptyAttitude+0x3ec>
 8013260:	f8c9 00b0 	str.w	r0, [r9, #176]	; 0xb0
 8013264:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 8013268:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801326c:	f8c9 10b4 	str.w	r1, [r9, #180]	; 0xb4
 8013270:	ed89 5a65 	vstr	s10, [r9, #404]	; 0x194
 8013274:	edc9 5a66 	vstr	s11, [r9, #408]	; 0x198
 8013278:	ed89 7a67 	vstr	s14, [r9, #412]	; 0x19c
 801327c:	edc9 8a64 	vstr	s17, [r9, #400]	; 0x190
 8013280:	edc9 8a30 	vstr	s17, [r9, #192]	; 0xc0
 8013284:	edc9 8a4a 	vstr	s17, [r9, #296]	; 0x128
 8013288:	edc9 8a31 	vstr	s17, [r9, #196]	; 0xc4
 801328c:	f04f 0101 	mov.w	r1, #1
 8013290:	f8c9 20b8 	str.w	r2, [r9, #184]	; 0xb8
 8013294:	edc9 8a4b 	vstr	s17, [r9, #300]	; 0x12c
 8013298:	edc9 8a32 	vstr	s17, [r9, #200]	; 0xc8
 801329c:	edc9 8a4c 	vstr	s17, [r9, #304]	; 0x130
 80132a0:	edc9 8a33 	vstr	s17, [r9, #204]	; 0xcc
 80132a4:	edc9 8a4d 	vstr	s17, [r9, #308]	; 0x134
 80132a8:	edc9 8a34 	vstr	s17, [r9, #208]	; 0xd0
 80132ac:	edc9 8a4e 	vstr	s17, [r9, #312]	; 0x138
 80132b0:	edc9 8a35 	vstr	s17, [r9, #212]	; 0xd4
 80132b4:	edc9 8a4f 	vstr	s17, [r9, #316]	; 0x13c
 80132b8:	edc9 8a36 	vstr	s17, [r9, #216]	; 0xd8
 80132bc:	edc9 8a50 	vstr	s17, [r9, #320]	; 0x140
 80132c0:	edc9 8a37 	vstr	s17, [r9, #220]	; 0xdc
 80132c4:	edc9 8a51 	vstr	s17, [r9, #324]	; 0x144
 80132c8:	edc9 8a38 	vstr	s17, [r9, #224]	; 0xe0
 80132cc:	edc9 8a52 	vstr	s17, [r9, #328]	; 0x148
 80132d0:	edc9 8a39 	vstr	s17, [r9, #228]	; 0xe4
 80132d4:	edc9 8a53 	vstr	s17, [r9, #332]	; 0x14c
 80132d8:	edc9 8a3a 	vstr	s17, [r9, #232]	; 0xe8
 80132dc:	edc9 8a54 	vstr	s17, [r9, #336]	; 0x150
 80132e0:	edc9 8a3b 	vstr	s17, [r9, #236]	; 0xec
 80132e4:	edc9 8a55 	vstr	s17, [r9, #340]	; 0x154
 80132e8:	edc9 8a3c 	vstr	s17, [r9, #240]	; 0xf0
 80132ec:	edc9 8a56 	vstr	s17, [r9, #344]	; 0x158
 80132f0:	edc9 8a3d 	vstr	s17, [r9, #244]	; 0xf4
 80132f4:	edc9 8a57 	vstr	s17, [r9, #348]	; 0x15c
 80132f8:	edc9 8a3e 	vstr	s17, [r9, #248]	; 0xf8
 80132fc:	edc9 8a58 	vstr	s17, [r9, #352]	; 0x160
 8013300:	edc9 8a3f 	vstr	s17, [r9, #252]	; 0xfc
 8013304:	edc9 8a59 	vstr	s17, [r9, #356]	; 0x164
 8013308:	edc9 8a40 	vstr	s17, [r9, #256]	; 0x100
 801330c:	edc9 8a5a 	vstr	s17, [r9, #360]	; 0x168
 8013310:	edc9 8a41 	vstr	s17, [r9, #260]	; 0x104
 8013314:	edc9 8a5b 	vstr	s17, [r9, #364]	; 0x16c
 8013318:	f8c9 c1a0 	str.w	ip, [r9, #416]	; 0x1a0
 801331c:	edc9 7a75 	vstr	s15, [r9, #468]	; 0x1d4
 8013320:	edc9 7a7f 	vstr	s15, [r9, #508]	; 0x1fc
 8013324:	edc9 8a42 	vstr	s17, [r9, #264]	; 0x108
 8013328:	edc9 8a5c 	vstr	s17, [r9, #368]	; 0x170
 801332c:	edc9 8a43 	vstr	s17, [r9, #268]	; 0x10c
 8013330:	edc9 8a5d 	vstr	s17, [r9, #372]	; 0x174
 8013334:	edc9 8a44 	vstr	s17, [r9, #272]	; 0x110
 8013338:	edc9 8a5e 	vstr	s17, [r9, #376]	; 0x178
 801333c:	edc9 8a45 	vstr	s17, [r9, #276]	; 0x114
 8013340:	edc9 8a5f 	vstr	s17, [r9, #380]	; 0x17c
 8013344:	edc9 8a46 	vstr	s17, [r9, #280]	; 0x118
 8013348:	edc9 8a60 	vstr	s17, [r9, #384]	; 0x180
 801334c:	edc9 8a47 	vstr	s17, [r9, #284]	; 0x11c
 8013350:	edc9 8a61 	vstr	s17, [r9, #388]	; 0x184
 8013354:	edc9 8a48 	vstr	s17, [r9, #288]	; 0x120
 8013358:	edc9 8a62 	vstr	s17, [r9, #392]	; 0x188
 801335c:	edc9 8a49 	vstr	s17, [r9, #292]	; 0x124
 8013360:	edc9 8a63 	vstr	s17, [r9, #396]	; 0x18c
 8013364:	f889 81a4 	strb.w	r8, [r9, #420]	; 0x1a4
 8013368:	f8c9 81a6 	str.w	r8, [r9, #422]	; 0x1a6
 801336c:	edc9 8a6c 	vstr	s17, [r9, #432]	; 0x1b0
 8013370:	edc9 8a76 	vstr	s17, [r9, #472]	; 0x1d8
 8013374:	edc9 8a77 	vstr	s17, [r9, #476]	; 0x1dc
 8013378:	edc9 8a78 	vstr	s17, [r9, #480]	; 0x1e0
 801337c:	edc9 8a79 	vstr	s17, [r9, #484]	; 0x1e4
 8013380:	edc9 8a7a 	vstr	s17, [r9, #488]	; 0x1e8
 8013384:	edc9 8a7b 	vstr	s17, [r9, #492]	; 0x1ec
 8013388:	edc9 8a7c 	vstr	s17, [r9, #496]	; 0x1f0
 801338c:	edc9 8a7d 	vstr	s17, [r9, #500]	; 0x1f4
 8013390:	edc9 8a6d 	vstr	s17, [r9, #436]	; 0x1b4
 8013394:	edc9 8a7e 	vstr	s17, [r9, #504]	; 0x1f8
 8013398:	edc9 8a80 	vstr	s17, [r9, #512]	; 0x200
 801339c:	edc9 7a89 	vstr	s15, [r9, #548]	; 0x224
 80133a0:	edc9 7a93 	vstr	s15, [r9, #588]	; 0x24c
 80133a4:	edc9 7a9d 	vstr	s15, [r9, #628]	; 0x274
 80133a8:	e026      	b.n	80133f8 <MFX_emptyAttitude+0x3f0>
 80133aa:	bf00      	nop
 80133ac:	f3af 8000 	nop.w
	...
 80133b8:	0801f940 	.word	0x0801f940
 80133bc:	00000000 	.word	0x00000000
 80133c0:	40a00000 	.word	0x40a00000
 80133c4:	3a9d4952 	.word	0x3a9d4952
 80133c8:	3ac49ba6 	.word	0x3ac49ba6
 80133cc:	3b03126f 	.word	0x3b03126f
 80133d0:	3a83126f 	.word	0x3a83126f
 80133d4:	3f639581 	.word	0x3f639581
 80133d8:	402ab021 	.word	0x402ab021
 80133dc:	3f13f7cf 	.word	0x3f13f7cf
 80133e0:	3f2ac083 	.word	0x3f2ac083
 80133e4:	01010100 	.word	0x01010100
 80133e8:	41200000 	.word	0x41200000
 80133ec:	447a0000 	.word	0x447a0000
 80133f0:	3f4ccccd 	.word	0x3f4ccccd
 80133f4:	3f333333 	.word	0x3f333333
 80133f8:	edc9 8a81 	vstr	s17, [r9, #516]	; 0x204
 80133fc:	edc9 8a82 	vstr	s17, [r9, #520]	; 0x208
 8013400:	edc9 8a83 	vstr	s17, [r9, #524]	; 0x20c
 8013404:	edc9 8a84 	vstr	s17, [r9, #528]	; 0x210
 8013408:	edc9 8a85 	vstr	s17, [r9, #532]	; 0x214
 801340c:	edc9 8a86 	vstr	s17, [r9, #536]	; 0x218
 8013410:	edc9 8a6e 	vstr	s17, [r9, #440]	; 0x1b8
 8013414:	edc9 8a87 	vstr	s17, [r9, #540]	; 0x21c
 8013418:	edc9 8a88 	vstr	s17, [r9, #544]	; 0x220
 801341c:	edc9 8a8a 	vstr	s17, [r9, #552]	; 0x228
 8013420:	edc9 8a8b 	vstr	s17, [r9, #556]	; 0x22c
 8013424:	edc9 8a8c 	vstr	s17, [r9, #560]	; 0x230
 8013428:	edc9 8a8d 	vstr	s17, [r9, #564]	; 0x234
 801342c:	edc9 8a8e 	vstr	s17, [r9, #568]	; 0x238
 8013430:	edc9 8a8f 	vstr	s17, [r9, #572]	; 0x23c
 8013434:	edc9 8a6f 	vstr	s17, [r9, #444]	; 0x1bc
 8013438:	edc9 8a90 	vstr	s17, [r9, #576]	; 0x240
 801343c:	edc9 8a91 	vstr	s17, [r9, #580]	; 0x244
 8013440:	edc9 8a92 	vstr	s17, [r9, #584]	; 0x248
 8013444:	edc9 8a94 	vstr	s17, [r9, #592]	; 0x250
 8013448:	edc9 8a95 	vstr	s17, [r9, #596]	; 0x254
 801344c:	edc9 8a96 	vstr	s17, [r9, #600]	; 0x258
 8013450:	edc9 8a97 	vstr	s17, [r9, #604]	; 0x25c
 8013454:	edc9 8a98 	vstr	s17, [r9, #608]	; 0x260
 8013458:	edc9 8a70 	vstr	s17, [r9, #448]	; 0x1c0
 801345c:	edc9 8a99 	vstr	s17, [r9, #612]	; 0x264
 8013460:	edc9 8a9a 	vstr	s17, [r9, #616]	; 0x268
 8013464:	edc9 8a9b 	vstr	s17, [r9, #620]	; 0x26c
 8013468:	edc9 8a9c 	vstr	s17, [r9, #624]	; 0x270
 801346c:	edc9 8a9e 	vstr	s17, [r9, #632]	; 0x278
 8013470:	edc9 7aa7 	vstr	s15, [r9, #668]	; 0x29c
 8013474:	edc9 7ab1 	vstr	s15, [r9, #708]	; 0x2c4
 8013478:	edc9 7abb 	vstr	s15, [r9, #748]	; 0x2ec
 801347c:	edc9 8a9f 	vstr	s17, [r9, #636]	; 0x27c
 8013480:	edc9 8aa0 	vstr	s17, [r9, #640]	; 0x280
 8013484:	edc9 8aa1 	vstr	s17, [r9, #644]	; 0x284
 8013488:	edc9 8a71 	vstr	s17, [r9, #452]	; 0x1c4
 801348c:	edc9 8aa2 	vstr	s17, [r9, #648]	; 0x288
 8013490:	edc9 8aa3 	vstr	s17, [r9, #652]	; 0x28c
 8013494:	edc9 8aa4 	vstr	s17, [r9, #656]	; 0x290
 8013498:	edc9 8aa5 	vstr	s17, [r9, #660]	; 0x294
 801349c:	edc9 8aa6 	vstr	s17, [r9, #664]	; 0x298
 80134a0:	edc9 8aa8 	vstr	s17, [r9, #672]	; 0x2a0
 80134a4:	edc9 8aa9 	vstr	s17, [r9, #676]	; 0x2a4
 80134a8:	edc9 8aaa 	vstr	s17, [r9, #680]	; 0x2a8
 80134ac:	edc9 8a72 	vstr	s17, [r9, #456]	; 0x1c8
 80134b0:	edc9 8aab 	vstr	s17, [r9, #684]	; 0x2ac
 80134b4:	edc9 8aac 	vstr	s17, [r9, #688]	; 0x2b0
 80134b8:	edc9 8aad 	vstr	s17, [r9, #692]	; 0x2b4
 80134bc:	edc9 8aae 	vstr	s17, [r9, #696]	; 0x2b8
 80134c0:	edc9 8aaf 	vstr	s17, [r9, #700]	; 0x2bc
 80134c4:	edc9 8ab0 	vstr	s17, [r9, #704]	; 0x2c0
 80134c8:	edc9 8ab2 	vstr	s17, [r9, #712]	; 0x2c8
 80134cc:	edc9 8ab3 	vstr	s17, [r9, #716]	; 0x2cc
 80134d0:	edc9 8a73 	vstr	s17, [r9, #460]	; 0x1cc
 80134d4:	edc9 8ab4 	vstr	s17, [r9, #720]	; 0x2d0
 80134d8:	edc9 8ab5 	vstr	s17, [r9, #724]	; 0x2d4
 80134dc:	edc9 8ab6 	vstr	s17, [r9, #728]	; 0x2d8
 80134e0:	edc9 8ab7 	vstr	s17, [r9, #732]	; 0x2dc
 80134e4:	edc9 8ab8 	vstr	s17, [r9, #736]	; 0x2e0
 80134e8:	edc9 8ab9 	vstr	s17, [r9, #740]	; 0x2e4
 80134ec:	edc9 8aba 	vstr	s17, [r9, #744]	; 0x2e8
 80134f0:	edc9 8abc 	vstr	s17, [r9, #752]	; 0x2f0
 80134f4:	9a04      	ldr	r2, [sp, #16]
 80134f6:	f889 11ac 	strb.w	r1, [r9, #428]	; 0x1ac
 80134fa:	edc9 8a74 	vstr	s17, [r9, #464]	; 0x1d0
 80134fe:	edc9 7ac5 	vstr	s15, [r9, #788]	; 0x314
 8013502:	9203      	str	r2, [sp, #12]
 8013504:	f50d 624a 	add.w	r2, sp, #3232	; 0xca0
 8013508:	9202      	str	r2, [sp, #8]
 801350a:	f50d 6233 	add.w	r2, sp, #2864	; 0xb30
 801350e:	9201      	str	r2, [sp, #4]
 8013510:	f50d 621c 	add.w	r2, sp, #2496	; 0x9c0
 8013514:	9200      	str	r2, [sp, #0]
 8013516:	7820      	ldrb	r0, [r4, #0]
 8013518:	edc9 8abd 	vstr	s17, [r9, #756]	; 0x2f4
 801351c:	f50d 6305 	add.w	r3, sp, #2128	; 0x850
 8013520:	f50d 62dc 	add.w	r2, sp, #1760	; 0x6e0
 8013524:	f20d 61bc 	addw	r1, sp, #1724	; 0x6bc
 8013528:	edc9 8abe 	vstr	s17, [r9, #760]	; 0x2f8
 801352c:	edc9 8abf 	vstr	s17, [r9, #764]	; 0x2fc
 8013530:	edc9 8ac0 	vstr	s17, [r9, #768]	; 0x300
 8013534:	edc9 8ac1 	vstr	s17, [r9, #772]	; 0x304
 8013538:	edc9 8ac2 	vstr	s17, [r9, #776]	; 0x308
 801353c:	edc9 8ac3 	vstr	s17, [r9, #780]	; 0x30c
 8013540:	edc9 8ac4 	vstr	s17, [r9, #784]	; 0x310
 8013544:	f7fe f862 	bl	801160c <DataHist_parameters>
 8013548:	f609 1344 	addw	r3, r9, #2372	; 0x944
 801354c:	f509 6216 	add.w	r2, r9, #2400	; 0x960
 8013550:	f609 1168 	addw	r1, r9, #2408	; 0x968
 8013554:	f509 6017 	add.w	r0, r9, #2416	; 0x970
 8013558:	f10d 0c20 	add.w	ip, sp, #32
 801355c:	9304      	str	r3, [sp, #16]
 801355e:	9205      	str	r2, [sp, #20]
 8013560:	9106      	str	r1, [sp, #24]
 8013562:	9007      	str	r0, [sp, #28]
 8013564:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013568:	f8c9 393c 	str.w	r3, [r9, #2364]	; 0x93c
 801356c:	9b04      	ldr	r3, [sp, #16]
 801356e:	f8c9 0930 	str.w	r0, [r9, #2352]	; 0x930
 8013572:	f8c9 1934 	str.w	r1, [r9, #2356]	; 0x934
 8013576:	f8c9 2938 	str.w	r2, [r9, #2360]	; 0x938
 801357a:	9906      	ldr	r1, [sp, #24]
 801357c:	9a05      	ldr	r2, [sp, #20]
 801357e:	9807      	ldr	r0, [sp, #28]
 8013580:	f509 6b14 	add.w	fp, r9, #2368	; 0x940
 8013584:	f609 1a5c 	addw	sl, r9, #2396	; 0x95c
 8013588:	edcb 8a00 	vstr	s17, [fp]
 801358c:	f609 1748 	addw	r7, r9, #2376	; 0x948
 8013590:	edca 8a00 	vstr	s17, [sl]
 8013594:	f609 1664 	addw	r6, r9, #2404	; 0x964
 8013598:	edc3 8a00 	vstr	s17, [r3]
 801359c:	f609 1554 	addw	r5, r9, #2388	; 0x954
 80135a0:	f609 1458 	addw	r4, r9, #2392	; 0x958
 80135a4:	f609 1e6c 	addw	lr, r9, #2412	; 0x96c
 80135a8:	230a      	movs	r3, #10
 80135aa:	edc2 8a00 	vstr	s17, [r2]
 80135ae:	edc7 8a00 	vstr	s17, [r7]
 80135b2:	edc6 8a00 	vstr	s17, [r6]
 80135b6:	f8c9 894c 	str.w	r8, [r9, #2380]	; 0x94c
 80135ba:	f8a9 8950 	strh.w	r8, [r9, #2384]	; 0x950
 80135be:	edc5 8a00 	vstr	s17, [r5]
 80135c2:	ed84 8a00 	vstr	s16, [r4]
 80135c6:	edc1 8a00 	vstr	s17, [r1]
 80135ca:	edc0 8a00 	vstr	s17, [r0]
 80135ce:	edce 8a00 	vstr	s17, [lr]
 80135d2:	f8c9 3974 	str.w	r3, [r9, #2420]	; 0x974
 80135d6:	f889 8978 	strb.w	r8, [r9, #2424]	; 0x978
 80135da:	f60d 4dd4 	addw	sp, sp, #3284	; 0xcd4
 80135de:	ecbd 8b02 	vpop	{d8}
 80135e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135e6:	bf00      	nop

080135e8 <iNemoEngine_API_Update>:
 80135e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ec:	ed2d 8b10 	vpush	{d8-d15}
 80135f0:	f2ad 5d94 	subw	sp, sp, #1428	; 0x594
 80135f4:	eeb0 8a40 	vmov.f32	s16, s0
 80135f8:	9006      	str	r0, [sp, #24]
 80135fa:	9114      	str	r1, [sp, #80]	; 0x50
 80135fc:	4614      	mov	r4, r2
 80135fe:	9324      	str	r3, [sp, #144]	; 0x90
 8013600:	2b00      	cmp	r3, #0
 8013602:	f000 8222 	beq.w	8013a4a <iNemoEngine_API_Update+0x462>
 8013606:	68e0      	ldr	r0, [r4, #12]
 8013608:	6921      	ldr	r1, [r4, #16]
 801360a:	6962      	ldr	r2, [r4, #20]
 801360c:	9d06      	ldr	r5, [sp, #24]
 801360e:	aba1      	add	r3, sp, #644	; 0x284
 8013610:	c307      	stmia	r3!, {r0, r1, r2}
 8013612:	6820      	ldr	r0, [r4, #0]
 8013614:	6861      	ldr	r1, [r4, #4]
 8013616:	68a2      	ldr	r2, [r4, #8]
 8013618:	ab9e      	add	r3, sp, #632	; 0x278
 801361a:	c307      	stmia	r3!, {r0, r1, r2}
 801361c:	69a0      	ldr	r0, [r4, #24]
 801361e:	69e1      	ldr	r1, [r4, #28]
 8013620:	6a22      	ldr	r2, [r4, #32]
 8013622:	f895 4978 	ldrb.w	r4, [r5, #2424]	; 0x978
 8013626:	aba4      	add	r3, sp, #656	; 0x290
 8013628:	c307      	stmia	r3!, {r0, r1, r2}
 801362a:	b12c      	cbz	r4, 8013638 <iNemoEngine_API_Update+0x50>
 801362c:	f8b5 2950 	ldrh.w	r2, [r5, #2384]	; 0x950
 8013630:	792b      	ldrb	r3, [r5, #4]
 8013632:	429a      	cmp	r2, r3
 8013634:	f082 82a5 	bcs.w	8015b82 <iNemoEngine_API_Update+0x259a>
 8013638:	9c06      	ldr	r4, [sp, #24]
 801363a:	ae31      	add	r6, sp, #196	; 0xc4
 801363c:	f104 033a 	add.w	r3, r4, #58	; 0x3a
 8013640:	4619      	mov	r1, r3
 8013642:	4630      	mov	r0, r6
 8013644:	aaa1      	add	r2, sp, #644	; 0x284
 8013646:	9320      	str	r3, [sp, #128]	; 0x80
 8013648:	ad37      	add	r5, sp, #220	; 0xdc
 801364a:	f7fe f897 	bl	801177c <rotVect>
 801364e:	aaa4      	add	r2, sp, #656	; 0x290
 8013650:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8013654:	a834      	add	r0, sp, #208	; 0xd0
 8013656:	f7fe f891 	bl	801177c <rotVect>
 801365a:	aa9e      	add	r2, sp, #632	; 0x278
 801365c:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8013660:	4628      	mov	r0, r5
 8013662:	f7fe f88b 	bl	801177c <rotVect>
 8013666:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801366a:	b923      	cbnz	r3, 8013676 <iNemoEngine_API_Update+0x8e>
 801366c:	4b9d      	ldr	r3, [pc, #628]	; (80138e4 <iNemoEngine_API_Update+0x2fc>)
 801366e:	606b      	str	r3, [r5, #4]
 8013670:	60ab      	str	r3, [r5, #8]
 8013672:	2300      	movs	r3, #0
 8013674:	602b      	str	r3, [r5, #0]
 8013676:	9b06      	ldr	r3, [sp, #24]
 8013678:	f8d3 794c 	ldr.w	r7, [r3, #2380]	; 0x94c
 801367c:	2f09      	cmp	r7, #9
 801367e:	d851      	bhi.n	8013724 <iNemoEngine_API_Update+0x13c>
 8013680:	edd6 aa01 	vldr	s21, [r6, #4]
 8013684:	ed96 ba00 	vldr	s22, [r6]
 8013688:	ed96 aa02 	vldr	s20, [r6, #8]
 801368c:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 8013690:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8013694:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8013698:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801369c:	ee17 0a90 	vmov	r0, s15
 80136a0:	f7ec ff5c 	bl	800055c <__aeabi_f2d>
 80136a4:	ec41 0b10 	vmov	d0, r0, r1
 80136a8:	f009 fb4c 	bl	801cd44 <sqrt>
 80136ac:	ec51 0b10 	vmov	r0, r1, d0
 80136b0:	f7ed faa4 	bl	8000bfc <__aeabi_d2f>
 80136b4:	ee07 0a90 	vmov	s15, r0
 80136b8:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 80136bc:	ed95 9a01 	vldr	s18, [r5, #4]
 80136c0:	edd5 9a00 	vldr	s19, [r5]
 80136c4:	edd5 8a02 	vldr	s17, [r5, #8]
 80136c8:	ee69 7a09 	vmul.f32	s15, s18, s18
 80136cc:	ee2b ba07 	vmul.f32	s22, s22, s14
 80136d0:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80136d4:	ee6a aa87 	vmul.f32	s21, s21, s14
 80136d8:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80136dc:	ee2a aa07 	vmul.f32	s20, s20, s14
 80136e0:	ee17 0a90 	vmov	r0, s15
 80136e4:	ed86 ba00 	vstr	s22, [r6]
 80136e8:	edc6 aa01 	vstr	s21, [r6, #4]
 80136ec:	ed86 aa02 	vstr	s20, [r6, #8]
 80136f0:	f7ec ff34 	bl	800055c <__aeabi_f2d>
 80136f4:	ec41 0b10 	vmov	d0, r0, r1
 80136f8:	f009 fb24 	bl	801cd44 <sqrt>
 80136fc:	ec51 0b10 	vmov	r0, r1, d0
 8013700:	f7ed fa7c 	bl	8000bfc <__aeabi_d2f>
 8013704:	ee07 0a90 	vmov	s15, r0
 8013708:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 801370c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8013710:	ee29 9a27 	vmul.f32	s18, s18, s15
 8013714:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013718:	edc5 9a00 	vstr	s19, [r5]
 801371c:	ed85 9a01 	vstr	s18, [r5, #4]
 8013720:	edc5 8a02 	vstr	s17, [r5, #8]
 8013724:	9906      	ldr	r1, [sp, #24]
 8013726:	790b      	ldrb	r3, [r1, #4]
 8013728:	f8b1 2950 	ldrh.w	r2, [r1, #2384]	; 0x950
 801372c:	429a      	cmp	r2, r3
 801372e:	f080 80f5 	bcs.w	801391c <iNemoEngine_API_Update+0x334>
 8013732:	abf8      	add	r3, sp, #992	; 0x3e0
 8013734:	9319      	str	r3, [sp, #100]	; 0x64
 8013736:	f501 6313 	add.w	r3, r1, #2352	; 0x930
 801373a:	931c      	str	r3, [sp, #112]	; 0x70
 801373c:	f601 1334 	addw	r3, r1, #2356	; 0x934
 8013740:	931d      	str	r3, [sp, #116]	; 0x74
 8013742:	f601 1338 	addw	r3, r1, #2360	; 0x938
 8013746:	931e      	str	r3, [sp, #120]	; 0x78
 8013748:	eddd 9af5 	vldr	s19, [sp, #980]	; 0x3d4
 801374c:	f601 133c 	addw	r3, r1, #2364	; 0x93c
 8013750:	accc      	add	r4, sp, #816	; 0x330
 8013752:	931f      	str	r3, [sp, #124]	; 0x7c
 8013754:	460d      	mov	r5, r1
 8013756:	3701      	adds	r7, #1
 8013758:	9819      	ldr	r0, [sp, #100]	; 0x64
 801375a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801375c:	f8c5 794c 	str.w	r7, [r5, #2380]	; 0x94c
 8013760:	aaa1      	add	r2, sp, #644	; 0x284
 8013762:	f7fe f80b 	bl	801177c <rotVect>
 8013766:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013768:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	60d3      	str	r3, [r2, #12]
 801376e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	6113      	str	r3, [r2, #16]
 8013774:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	6153      	str	r3, [r2, #20]
 801377a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	6193      	str	r3, [r2, #24]
 8013780:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8013784:	9301      	str	r3, [sp, #4]
 8013786:	4601      	mov	r1, r0
 8013788:	f102 0328 	add.w	r3, r2, #40	; 0x28
 801378c:	4610      	mov	r0, r2
 801378e:	4615      	mov	r5, r2
 8013790:	300c      	adds	r0, #12
 8013792:	9300      	str	r3, [sp, #0]
 8013794:	f102 031c 	add.w	r3, r2, #28
 8013798:	f7ff fb6c 	bl	8012e74 <output_update>
 801379c:	ed95 8a00 	vldr	s16, [r5]
 80137a0:	ed95 aa01 	vldr	s20, [r5, #4]
 80137a4:	eeb0 0a48 	vmov.f32	s0, s16
 80137a8:	f009 fca2 	bl	801d0f0 <sinf>
 80137ac:	eeb0 9a40 	vmov.f32	s18, s0
 80137b0:	eeb0 0a48 	vmov.f32	s0, s16
 80137b4:	f009 fa82 	bl	801ccbc <cosf>
 80137b8:	edd4 7a33 	vldr	s15, [r4, #204]	; 0xcc
 80137bc:	edd4 6a3d 	vldr	s13, [r4, #244]	; 0xf4
 80137c0:	ee60 8a00 	vmul.f32	s17, s0, s0
 80137c4:	eeb0 7aca 	vabs.f32	s14, s20
 80137c8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80137cc:	eddf 7a46 	vldr	s15, [pc, #280]	; 80138e8 <iNemoEngine_API_Update+0x300>
 80137d0:	ee29 9a09 	vmul.f32	s18, s18, s18
 80137d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80137d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137dc:	eee9 8a26 	vfma.f32	s17, s18, s13
 80137e0:	d579      	bpl.n	80138d6 <iNemoEngine_API_Update+0x2ee>
 80137e2:	eeb0 0a4a 	vmov.f32	s0, s20
 80137e6:	f009 fcd3 	bl	801d190 <tanf>
 80137ea:	ee20 0a00 	vmul.f32	s0, s0, s0
 80137ee:	eeb0 7a69 	vmov.f32	s14, s19
 80137f2:	eea0 7a28 	vfma.f32	s14, s0, s17
 80137f6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80137f8:	9b06      	ldr	r3, [sp, #24]
 80137fa:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80138ec <iNemoEngine_API_Update+0x304>
 80137fe:	4c3c      	ldr	r4, [pc, #240]	; (80138f0 <iNemoEngine_API_Update+0x308>)
 8013800:	eef1 7ac7 	vsqrt.f32	s15, s14
 8013804:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8013910 <iNemoEngine_API_Update+0x328>
 8013808:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801380c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013814:	bf88      	it	hi
 8013816:	eef0 7a66 	vmovhi.f32	s15, s13
 801381a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013822:	bfb8      	it	lt
 8013824:	eef0 7a47 	vmovlt.f32	s15, s14
 8013828:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 801382c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013830:	bbd3      	cbnz	r3, 80138a8 <iNemoEngine_API_Update+0x2c0>
 8013832:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8013836:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 801383a:	edd5 0a08 	vldr	s1, [r5, #32]
 801383e:	ed95 0a07 	vldr	s0, [r5, #28]
 8013842:	f7fe f86d 	bl	8011920 <findDirection>
 8013846:	ed95 7a03 	vldr	s14, [r5, #12]
 801384a:	edd5 6a04 	vldr	s13, [r5, #16]
 801384e:	edd5 8a05 	vldr	s17, [r5, #20]
 8013852:	edd5 7a06 	vldr	s15, [r5, #24]
 8013856:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0
 801385a:	2805      	cmp	r0, #5
 801385c:	f204 822c 	bhi.w	8017cb8 <iNemoEngine_API_Update+0x46d0>
 8013860:	e8df f010 	tbh	[pc, r0, lsl #1]
 8013864:	11d0000a 	.word	0x11d0000a
 8013868:	11990006 	.word	0x11990006
 801386c:	000a0006 	.word	0x000a0006
 8013870:	eddf 7a20 	vldr	s15, [pc, #128]	; 80138f4 <iNemoEngine_API_Update+0x30c>
 8013874:	ee38 8a27 	vadd.f32	s16, s16, s15
 8013878:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80138f8 <iNemoEngine_API_Update+0x310>
 801387c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013884:	bfa8      	it	ge
 8013886:	ee38 8a67 	vsubge.f32	s16, s16, s15
 801388a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013892:	f100 80d5 	bmi.w	8013a40 <iNemoEngine_API_Update+0x458>
 8013896:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013898:	ed83 8a0d 	vstr	s16, [r3, #52]	; 0x34
 801389c:	f20d 5d94 	addw	sp, sp, #1428	; 0x594
 80138a0:	ecbd 8b10 	vpop	{d8-d15}
 80138a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a8:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 80138ac:	edd5 8a05 	vldr	s17, [r5, #20]
 80138b0:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 80138b4:	edd5 0a07 	vldr	s1, [r5, #28]
 80138b8:	ed95 0a08 	vldr	s0, [r5, #32]
 80138bc:	eeb1 1a41 	vneg.f32	s2, s2
 80138c0:	f7fe f82e 	bl	8011920 <findDirection>
 80138c4:	eef1 8a68 	vneg.f32	s17, s17
 80138c8:	ed95 7a04 	vldr	s14, [r5, #16]
 80138cc:	edd5 6a03 	vldr	s13, [r5, #12]
 80138d0:	edd5 7a06 	vldr	s15, [r5, #24]
 80138d4:	e7bf      	b.n	8013856 <iNemoEngine_API_Update+0x26e>
 80138d6:	eddf 7a09 	vldr	s15, [pc, #36]	; 80138fc <iNemoEngine_API_Update+0x314>
 80138da:	eeb0 7a69 	vmov.f32	s14, s19
 80138de:	eea8 7aa7 	vfma.f32	s14, s17, s15
 80138e2:	e788      	b.n	80137f6 <iNemoEngine_API_Update+0x20e>
 80138e4:	3f333333 	.word	0x3f333333
 80138e8:	3fbc430e 	.word	0x3fbc430e
 80138ec:	40490fdb 	.word	0x40490fdb
 80138f0:	20000224 	.word	0x20000224
 80138f4:	43340000 	.word	0x43340000
 80138f8:	43b40000 	.word	0x43b40000
 80138fc:	42c6ab07 	.word	0x42c6ab07
 8013900:	3c03126f 	.word	0x3c03126f
 8013904:	3b656042 	.word	0x3b656042
 8013908:	3e4ccccd 	.word	0x3e4ccccd
 801390c:	3fb50481 	.word	0x3fb50481
 8013910:	3c8efa35 	.word	0x3c8efa35
 8013914:	3ed93dd9 	.word	0x3ed93dd9
 8013918:	42c80000 	.word	0x42c80000
 801391c:	ee07 3a90 	vmov	s15, r3
 8013920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013924:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8013900 <iNemoEngine_API_Update+0x318>
 8013928:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 8013904 <iNemoEngine_API_Update+0x31c>
 801392c:	ed5f ba08 	vldr	s23, [pc, #-32]	; 8013910 <iNemoEngine_API_Update+0x328>
 8013930:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 801390c <iNemoEngine_API_Update+0x324>
 8013934:	ed5f 4a0c 	vldr	s9, [pc, #-48]	; 8013908 <iNemoEngine_API_Update+0x320>
 8013938:	ee67 7a88 	vmul.f32	s15, s15, s16
 801393c:	4608      	mov	r0, r1
 801393e:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8013942:	f601 125c 	addw	r2, r1, #2396	; 0x95c
 8013946:	2300      	movs	r3, #0
 8013948:	2100      	movs	r1, #0
 801394a:	f50d 7cb2 	add.w	ip, sp, #356	; 0x164
 801394e:	ac56      	add	r4, sp, #344	; 0x158
 8013950:	edcd 7a07 	vstr	s15, [sp, #28]
 8013954:	eef1 7ae5 	vsqrt.f32	s15, s11
 8013958:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 8013914 <iNemoEngine_API_Update+0x32c>
 801395c:	ee86 4aa7 	vdiv.f32	s8, s13, s15
 8013960:	ee67 6a87 	vmul.f32	s13, s15, s14
 8013964:	ed92 7a00 	vldr	s14, [r2]
 8013968:	f8a0 1950 	strh.w	r1, [r0, #2384]	; 0x950
 801396c:	6013      	str	r3, [r2, #0]
 801396e:	f500 6216 	add.w	r2, r0, #2400	; 0x960
 8013972:	ee27 ea2b 	vmul.f32	s28, s14, s23
 8013976:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
 801397a:	ed92 7a00 	vldr	s14, [r2]
 801397e:	6013      	str	r3, [r2, #0]
 8013980:	f600 1264 	addw	r2, r0, #2404	; 0x964
 8013984:	ee67 ea2b 	vmul.f32	s29, s14, s23
 8013988:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
 801398c:	ed92 7a00 	vldr	s14, [r2]
 8013990:	6013      	str	r3, [r2, #0]
 8013992:	7947      	ldrb	r7, [r0, #5]
 8013994:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 8013998:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801399c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80139a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80139a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80139a8:	9a06      	ldr	r2, [sp, #24]
 80139aa:	f8d2 01c8 	ldr.w	r0, [r2, #456]	; 0x1c8
 80139ae:	f8d2 11cc 	ldr.w	r1, [r2, #460]	; 0x1cc
 80139b2:	f8d2 21d0 	ldr.w	r2, [r2, #464]	; 0x1d0
 80139b6:	abd9      	add	r3, sp, #868	; 0x364
 80139b8:	2f01      	cmp	r7, #1
 80139ba:	c307      	stmia	r3!, {r0, r1, r2}
 80139bc:	ee27 6a86 	vmul.f32	s12, s15, s12
 80139c0:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80139c4:	ee67 ba2b 	vmul.f32	s23, s14, s23
 80139c8:	f002 844a 	beq.w	8016260 <iNemoEngine_API_Update+0x2c78>
 80139cc:	2f02      	cmp	r7, #2
 80139ce:	f002 843c 	beq.w	801624a <iNemoEngine_API_Update+0x2c62>
 80139d2:	2f00      	cmp	r7, #0
 80139d4:	f002 814d 	beq.w	8015c72 <iNemoEngine_API_Update+0x268a>
 80139d8:	9b06      	ldr	r3, [sp, #24]
 80139da:	ed5f 5a31 	vldr	s11, [pc, #-196]	; 8013918 <iNemoEngine_API_Update+0x330>
 80139de:	ed93 ba05 	vldr	s22, [r3, #20]
 80139e2:	491b      	ldr	r1, [pc, #108]	; (8013a50 <iNemoEngine_API_Update+0x468>)
 80139e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80139e8:	ee2b ba25 	vmul.f32	s22, s22, s11
 80139ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80139f0:	4618      	mov	r0, r3
 80139f2:	8842      	ldrh	r2, [r0, #2]
 80139f4:	1e53      	subs	r3, r2, #1
 80139f6:	2b12      	cmp	r3, #18
 80139f8:	d834      	bhi.n	8013a64 <iNemoEngine_API_Update+0x47c>
 80139fa:	3201      	adds	r2, #1
 80139fc:	b213      	sxth	r3, r2
 80139fe:	b292      	uxth	r2, r2
 8013a00:	2a03      	cmp	r2, #3
 8013a02:	8043      	strh	r3, [r0, #2]
 8013a04:	f242 8401 	bls.w	801620a <iNemoEngine_API_Update+0x2c22>
 8013a08:	ee07 3a10 	vmov	s14, r3
 8013a0c:	eddf 5a11 	vldr	s11, [pc, #68]	; 8013a54 <iNemoEngine_API_Update+0x46c>
 8013a10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013a14:	4603      	mov	r3, r0
 8013a16:	ee27 7a25 	vmul.f32	s14, s14, s11
 8013a1a:	ee84 4a07 	vdiv.f32	s8, s8, s14
 8013a1e:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
 8013a22:	ed8d 4a22 	vstr	s8, [sp, #136]	; 0x88
 8013a26:	ee66 5a87 	vmul.f32	s11, s13, s14
 8013a2a:	ee66 6a05 	vmul.f32	s13, s12, s10
 8013a2e:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8013a60 <iNemoEngine_API_Update+0x478>
 8013a32:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013a36:	ee24 6a86 	vmul.f32	s12, s9, s12
 8013a3a:	eeb0 7a65 	vmov.f32	s14, s11
 8013a3e:	e02d      	b.n	8013a9c <iNemoEngine_API_Update+0x4b4>
 8013a40:	eddf 7a05 	vldr	s15, [pc, #20]	; 8013a58 <iNemoEngine_API_Update+0x470>
 8013a44:	ee38 8a27 	vadd.f32	s16, s16, s15
 8013a48:	e725      	b.n	8013896 <iNemoEngine_API_Update+0x2ae>
 8013a4a:	ab46      	add	r3, sp, #280	; 0x118
 8013a4c:	9324      	str	r3, [sp, #144]	; 0x90
 8013a4e:	e5da      	b.n	8013606 <iNemoEngine_API_Update+0x1e>
 8013a50:	3a83126f 	.word	0x3a83126f
 8013a54:	3d4ccccd 	.word	0x3d4ccccd
 8013a58:	43b40000 	.word	0x43b40000
 8013a5c:	358637bd 	.word	0x358637bd
 8013a60:	3f333333 	.word	0x3f333333
 8013a64:	ed1f 5a03 	vldr	s10, [pc, #-12]	; 8013a5c <iNemoEngine_API_Update+0x474>
 8013a68:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8013a6c:	edd0 5a0b 	vldr	s11, [r0, #44]	; 0x2c
 8013a70:	ee37 7a05 	vadd.f32	s14, s14, s10
 8013a74:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
 8013a78:	ee84 7a07 	vdiv.f32	s14, s8, s14
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	8043      	strh	r3, [r0, #2]
 8013a80:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8013a84:	ed8d 7a22 	vstr	s14, [sp, #136]	; 0x88
 8013a88:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8013a8c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8013a90:	ee66 6a05 	vmul.f32	s13, s12, s10
 8013a94:	ed1f 6a0e 	vldr	s12, [pc, #-56]	; 8013a60 <iNemoEngine_API_Update+0x478>
 8013a98:	ee24 6a86 	vmul.f32	s12, s9, s12
 8013a9c:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
 8013aa0:	ee25 5a24 	vmul.f32	s10, s10, s9
 8013aa4:	edcd 7a89 	vstr	s15, [sp, #548]	; 0x224
 8013aa8:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 8013aac:	edcd 7a8b 	vstr	s15, [sp, #556]	; 0x22c
 8013ab0:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 8013ab4:	4bdd      	ldr	r3, [pc, #884]	; (8013e2c <iNemoEngine_API_Update+0x844>)
 8013ab6:	9162      	str	r1, [sp, #392]	; 0x188
 8013ab8:	a8f8      	add	r0, sp, #992	; 0x3e0
 8013aba:	9163      	str	r1, [sp, #396]	; 0x18c
 8013abc:	9164      	str	r1, [sp, #400]	; 0x190
 8013abe:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8013ac2:	2100      	movs	r1, #0
 8013ac4:	4605      	mov	r5, r0
 8013ac6:	9367      	str	r3, [sp, #412]	; 0x19c
 8013ac8:	9019      	str	r0, [sp, #100]	; 0x64
 8013aca:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 8013ace:	edcd 5a84 	vstr	s11, [sp, #528]	; 0x210
 8013ad2:	edcd 5a85 	vstr	s11, [sp, #532]	; 0x214
 8013ad6:	ed8d 7a86 	vstr	s14, [sp, #536]	; 0x218
 8013ada:	ed8d 7a87 	vstr	s14, [sp, #540]	; 0x21c
 8013ade:	ed8d 7a88 	vstr	s14, [sp, #544]	; 0x220
 8013ae2:	edcd 6a8c 	vstr	s13, [sp, #560]	; 0x230
 8013ae6:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 8013aea:	ed8d 5a8e 	vstr	s10, [sp, #568]	; 0x238
 8013aee:	edcd 7a5f 	vstr	s15, [sp, #380]	; 0x17c
 8013af2:	edcd 7a60 	vstr	s15, [sp, #384]	; 0x180
 8013af6:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 8013afa:	f006 f9c1 	bl	8019e80 <memset>
 8013afe:	9b06      	ldr	r3, [sp, #24]
 8013b00:	7b5a      	ldrb	r2, [r3, #13]
 8013b02:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013b06:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 8013b0a:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
 8013b0e:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 8013b12:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
 8013b16:	f8c5 3178 	str.w	r3, [r5, #376]	; 0x178
 8013b1a:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
 8013b1e:	2a00      	cmp	r2, #0
 8013b20:	f001 8124 	beq.w	8014d6c <iNemoEngine_API_Update+0x1784>
 8013b24:	ed94 8a01 	vldr	s16, [r4, #4]
 8013b28:	edd4 8a00 	vldr	s17, [r4]
 8013b2c:	ed94 ca02 	vldr	s24, [r4, #8]
 8013b30:	ee28 9a08 	vmul.f32	s18, s16, s16
 8013b34:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8013b38:	eea8 9aa8 	vfma.f32	s18, s17, s17
 8013b3c:	ee68 5a27 	vmul.f32	s11, s16, s15
 8013b40:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8013b44:	ee6c 6a27 	vmul.f32	s13, s24, s15
 8013b48:	eef1 cac9 	vsqrt.f32	s25, s18
 8013b4c:	ee3c 5a0c 	vadd.f32	s10, s24, s24
 8013b50:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8013b54:	ee38 6aa8 	vadd.f32	s12, s17, s17
 8013b58:	ee38 7a08 	vadd.f32	s14, s16, s16
 8013b5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013b5e:	ed94 aa04 	vldr	s20, [r4, #16]
 8013b62:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8013b66:	eef1 7a4a 	vneg.f32	s15, s20
 8013b6a:	edd4 9a05 	vldr	s19, [r4, #20]
 8013b6e:	edd4 aa03 	vldr	s21, [r4, #12]
 8013b72:	ed83 5a01 	vstr	s10, [r3, #4]
 8013b76:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013b7a:	edc3 5a02 	vstr	s11, [r3, #8]
 8013b7e:	edc3 7a05 	vstr	s15, [r3, #20]
 8013b82:	eef1 7a69 	vneg.f32	s15, s19
 8013b86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013b8a:	edc3 6a0c 	vstr	s13, [r3, #48]	; 0x30
 8013b8e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8013b92:	eef1 7a6a 	vneg.f32	s15, s21
 8013b96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013b9a:	ed83 6a0e 	vstr	s12, [r3, #56]	; 0x38
 8013b9e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8013ba2:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8013ba6:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60
 8013baa:	edc3 7a04 	vstr	s15, [r3, #16]
 8013bae:	ee7a 7aaa 	vadd.f32	s15, s21, s21
 8013bb2:	2230      	movs	r2, #48	; 0x30
 8013bb4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8013bb8:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 8013bbc:	2100      	movs	r1, #0
 8013bbe:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8013bc2:	a88f      	add	r0, sp, #572	; 0x23c
 8013bc4:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8013bc8:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
 8013bcc:	933c      	str	r3, [sp, #240]	; 0xf0
 8013bce:	f006 f957 	bl	8019e80 <memset>
 8013bd2:	9a06      	ldr	r2, [sp, #24]
 8013bd4:	edd2 7a07 	vldr	s15, [r2, #28]
 8013bd8:	ed92 da06 	vldr	s26, [r2, #24]
 8013bdc:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
 8013be0:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8013be4:	ee2b da0d 	vmul.f32	s26, s22, s26
 8013be8:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 8013bec:	edd2 7a08 	vldr	s15, [r2, #32]
 8013bf0:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8013bf4:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	f043 8025 	bne.w	8016c48 <iNemoEngine_API_Update+0x3660>
 8013bfe:	4613      	mov	r3, r2
 8013c00:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 8013c04:	9225      	str	r2, [sp, #148]	; 0x94
 8013c06:	f603 1244 	addw	r2, r3, #2372	; 0x944
 8013c0a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8013c0e:	9226      	str	r2, [sp, #152]	; 0x98
 8013c10:	9327      	str	r3, [sp, #156]	; 0x9c
 8013c12:	9a06      	ldr	r2, [sp, #24]
 8013c14:	f892 3318 	ldrb.w	r3, [r2, #792]	; 0x318
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	f042 84db 	bne.w	80165d4 <iNemoEngine_API_Update+0x2fec>
 8013c1e:	4613      	mov	r3, r2
 8013c20:	f502 6597 	add.w	r5, r2, #1208	; 0x4b8
 8013c24:	f202 47b4 	addw	r7, r2, #1204	; 0x4b4
 8013c28:	f502 66c5 	add.w	r6, r2, #1576	; 0x628
 8013c2c:	f202 6824 	addw	r8, r2, #1572	; 0x624
 8013c30:	f203 7394 	addw	r3, r3, #1940	; 0x794
 8013c34:	f502 62f3 	add.w	r2, r2, #1944	; 0x798
 8013c38:	9215      	str	r2, [sp, #84]	; 0x54
 8013c3a:	931b      	str	r3, [sp, #108]	; 0x6c
 8013c3c:	9b06      	ldr	r3, [sp, #24]
 8013c3e:	f503 6213 	add.w	r2, r3, #2352	; 0x930
 8013c42:	ed92 6a00 	vldr	s12, [r2]
 8013c46:	921c      	str	r2, [sp, #112]	; 0x70
 8013c48:	f603 1134 	addw	r1, r3, #2356	; 0x934
 8013c4c:	f603 1038 	addw	r0, r3, #2360	; 0x938
 8013c50:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 8013c54:	edd3 7a00 	vldr	s15, [r3]
 8013c58:	edd1 6a00 	vldr	s13, [r1]
 8013c5c:	ed90 7a00 	vldr	s14, [r0]
 8013c60:	931f      	str	r3, [sp, #124]	; 0x7c
 8013c62:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c6a:	911d      	str	r1, [sp, #116]	; 0x74
 8013c6c:	901e      	str	r0, [sp, #120]	; 0x78
 8013c6e:	ed8d 6a4e 	vstr	s12, [sp, #312]	; 0x138
 8013c72:	edcd 6a4f 	vstr	s13, [sp, #316]	; 0x13c
 8013c76:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 8013c7a:	edcd 7a51 	vstr	s15, [sp, #324]	; 0x144
 8013c7e:	f04f 0300 	mov.w	r3, #0
 8013c82:	d13a      	bne.n	8013cfa <iNemoEngine_API_Update+0x712>
 8013c84:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c8c:	d135      	bne.n	8013cfa <iNemoEngine_API_Update+0x712>
 8013c8e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c96:	d130      	bne.n	8013cfa <iNemoEngine_API_Update+0x712>
 8013c98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca0:	d12b      	bne.n	8013cfa <iNemoEngine_API_Update+0x712>
 8013ca2:	9a06      	ldr	r2, [sp, #24]
 8013ca4:	934e      	str	r3, [sp, #312]	; 0x138
 8013ca6:	934f      	str	r3, [sp, #316]	; 0x13c
 8013ca8:	9350      	str	r3, [sp, #320]	; 0x140
 8013caa:	4b61      	ldr	r3, [pc, #388]	; (8013e30 <iNemoEngine_API_Update+0x848>)
 8013cac:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 8013cb0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013cb4:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 8013cb8:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 8013cbc:	9351      	str	r3, [sp, #324]	; 0x144
 8013cbe:	2100      	movs	r1, #0
 8013cc0:	4613      	mov	r3, r2
 8013cc2:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 8013cc6:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
 8013cca:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013cce:	f006 f8d7 	bl	8019e80 <memset>
 8013cd2:	9a06      	ldr	r2, [sp, #24]
 8013cd4:	4b57      	ldr	r3, [pc, #348]	; (8013e34 <iNemoEngine_API_Update+0x84c>)
 8013cd6:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
 8013cda:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 8013cde:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
 8013ce2:	f8c2 324c 	str.w	r3, [r2, #588]	; 0x24c
 8013ce6:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
 8013cea:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 8013cee:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
 8013cf2:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
 8013cf6:	f8c2 3314 	str.w	r3, [r2, #788]	; 0x314
 8013cfa:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8013e38 <iNemoEngine_API_Update+0x850>
 8013cfe:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d06:	f100 87e0 	bmi.w	8014cca <iNemoEngine_API_Update+0x16e2>
 8013d0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013d0e:	ee7c 6ac7 	vsub.f32	s13, s25, s14
 8013d12:	eec7 7a2c 	vdiv.f32	s15, s14, s25
 8013d16:	eeb0 7ae6 	vabs.f32	s14, s13
 8013d1a:	eef0 6a47 	vmov.f32	s13, s14
 8013d1e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8013d22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013d26:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013d2a:	ed8d 7a21 	vstr	s14, [sp, #132]	; 0x84
 8013d2e:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 8013d32:	edd4 6a00 	vldr	s13, [r4]
 8013d36:	ed94 6a01 	vldr	s12, [r4, #4]
 8013d3a:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 8013d3e:	eeaa 7aaa 	vfma.f32	s14, s21, s21
 8013d42:	4628      	mov	r0, r5
 8013d44:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8013d48:	eea9 7aa9 	vfma.f32	s14, s19, s19
 8013d4c:	ee67 6a86 	vmul.f32	s13, s15, s12
 8013d50:	ed8d 6a2d 	vstr	s12, [sp, #180]	; 0xb4
 8013d54:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8013e38 <iNemoEngine_API_Update+0x850>
 8013d58:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 8013d5c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d64:	bf54      	ite	pl
 8013d66:	eeb1 9ac7 	vsqrtpl.f32	s18, s14
 8013d6a:	ed9f 9a34 	vldrmi	s18, [pc, #208]	; 8013e3c <iNemoEngine_API_Update+0x854>
 8013d6e:	ed94 5a02 	vldr	s10, [r4, #8]
 8013d72:	edd7 3a00 	vldr	s7, [r7]
 8013d76:	ed8d 5a2a 	vstr	s10, [sp, #168]	; 0xa8
 8013d7a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8013d7e:	ee83 7a09 	vdiv.f32	s14, s6, s18
 8013d82:	ee65 7a27 	vmul.f32	s15, s10, s15
 8013d86:	ee2a 6a07 	vmul.f32	s12, s20, s14
 8013d8a:	eeb0 0a63 	vmov.f32	s0, s7
 8013d8e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8013d92:	ed8d 6a41 	vstr	s12, [sp, #260]	; 0x104
 8013d96:	ee2a 6a87 	vmul.f32	s12, s21, s14
 8013d9a:	ee29 7a87 	vmul.f32	s14, s19, s14
 8013d9e:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013da2:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8013da6:	eee7 6a87 	vfma.f32	s13, s15, s14
 8013daa:	ed8d 7a42 	vstr	s14, [sp, #264]	; 0x108
 8013dae:	edcd 5a3d 	vstr	s11, [sp, #244]	; 0xf4
 8013db2:	ed8d 6a40 	vstr	s12, [sp, #256]	; 0x100
 8013db6:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 8013dba:	f7fd ffa5 	bl	8011d08 <dataDerivative5>
 8013dbe:	edd8 fa00 	vldr	s31, [r8]
 8013dc2:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
 8013dc6:	4630      	mov	r0, r6
 8013dc8:	eeb0 0a6f 	vmov.f32	s0, s31
 8013dcc:	f7fd ff9c 	bl	8011d08 <dataDerivative5>
 8013dd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dd2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013dd4:	ed93 fa00 	vldr	s30, [r3]
 8013dd8:	eeb0 ba40 	vmov.f32	s22, s0
 8013ddc:	eeb0 0a4f 	vmov.f32	s0, s30
 8013de0:	f7fd ff92 	bl	8011d08 <dataDerivative5>
 8013de4:	eec3 7a23 	vdiv.f32	s15, s6, s7
 8013de8:	eef0 da40 	vmov.f32	s27, s0
 8013dec:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013df0:	ee27 8a88 	vmul.f32	s16, s15, s16
 8013df4:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8013df8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8013e40 <iNemoEngine_API_Update+0x858>
 8013dfc:	eeb0 7ae8 	vabs.f32	s14, s17
 8013e00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e08:	d52c      	bpl.n	8013e64 <iNemoEngine_API_Update+0x87c>
 8013e0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013e0e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e16:	f281 8756 	bge.w	8015cc6 <iNemoEngine_API_Update+0x26de>
 8013e1a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8013e1e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8013e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e26:	f303 80bc 	bgt.w	8016fa2 <iNemoEngine_API_Update+0x39ba>
 8013e2a:	e00b      	b.n	8013e44 <iNemoEngine_API_Update+0x85c>
 8013e2c:	3a9d4952 	.word	0x3a9d4952
 8013e30:	bf666666 	.word	0xbf666666
 8013e34:	40a00000 	.word	0x40a00000
 8013e38:	3c23d70a 	.word	0x3c23d70a
 8013e3c:	3dcccccd 	.word	0x3dcccccd
 8013e40:	4b000000 	.word	0x4b000000
 8013e44:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8013e48:	ee17 0a90 	vmov	r0, s15
 8013e4c:	f7ec fb86 	bl	800055c <__aeabi_f2d>
 8013e50:	ec41 0b10 	vmov	d0, r0, r1
 8013e54:	f009 fdb4 	bl	801d9c0 <ceil>
 8013e58:	ec51 0b10 	vmov	r0, r1, d0
 8013e5c:	f7ec fece 	bl	8000bfc <__aeabi_d2f>
 8013e60:	ee08 0a90 	vmov	s17, r0
 8013e64:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 8013e40 <iNemoEngine_API_Update+0x858>
 8013e68:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 8013e6c:	eeb0 7ac8 	vabs.f32	s14, s16
 8013e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e78:	d51f      	bpl.n	8013eba <iNemoEngine_API_Update+0x8d2>
 8013e7a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013e7e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e86:	f281 870c 	bge.w	8015ca2 <iNemoEngine_API_Update+0x26ba>
 8013e8a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8013e8e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e96:	f303 8080 	bgt.w	8016f9a <iNemoEngine_API_Update+0x39b2>
 8013e9a:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013e9e:	ee17 0a90 	vmov	r0, s15
 8013ea2:	f7ec fb5b 	bl	800055c <__aeabi_f2d>
 8013ea6:	ec41 0b10 	vmov	d0, r0, r1
 8013eaa:	f009 fd89 	bl	801d9c0 <ceil>
 8013eae:	ec51 0b10 	vmov	r0, r1, d0
 8013eb2:	f7ec fea3 	bl	8000bfc <__aeabi_d2f>
 8013eb6:	ee08 0a10 	vmov	s16, r0
 8013eba:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 8013e40 <iNemoEngine_API_Update+0x858>
 8013ebe:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
 8013ec2:	eeb0 7acc 	vabs.f32	s14, s24
 8013ec6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ece:	d51f      	bpl.n	8013f10 <iNemoEngine_API_Update+0x928>
 8013ed0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013ed4:	eeb4 cae7 	vcmpe.f32	s24, s15
 8013ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013edc:	f281 86cf 	bge.w	8015c7e <iNemoEngine_API_Update+0x2696>
 8013ee0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8013ee4:	eeb4 cac7 	vcmpe.f32	s24, s14
 8013ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eec:	f303 8065 	bgt.w	8016fba <iNemoEngine_API_Update+0x39d2>
 8013ef0:	ee7c 7a67 	vsub.f32	s15, s24, s15
 8013ef4:	ee17 0a90 	vmov	r0, s15
 8013ef8:	f7ec fb30 	bl	800055c <__aeabi_f2d>
 8013efc:	ec41 0b10 	vmov	d0, r0, r1
 8013f00:	f009 fd5e 	bl	801d9c0 <ceil>
 8013f04:	ec51 0b10 	vmov	r0, r1, d0
 8013f08:	f7ec fe78 	bl	8000bfc <__aeabi_d2f>
 8013f0c:	ee0c 0a10 	vmov	s24, r0
 8013f10:	9b06      	ldr	r3, [sp, #24]
 8013f12:	ed8d ca45 	vstr	s24, [sp, #276]	; 0x114
 8013f16:	f893 04b1 	ldrb.w	r0, [r3, #1201]	; 0x4b1
 8013f1a:	1e43      	subs	r3, r0, #1
 8013f1c:	b25b      	sxtb	r3, r3
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	dd18      	ble.n	8013f54 <iNemoEngine_API_Update+0x96c>
 8013f22:	9c06      	ldr	r4, [sp, #24]
 8013f24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013f28:	1e81      	subs	r1, r0, #2
 8013f2a:	009b      	lsls	r3, r3, #2
 8013f2c:	b2c9      	uxtb	r1, r1
 8013f2e:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
 8013f32:	441a      	add	r2, r3
 8013f34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013f38:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 8013f3c:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 8013f40:	4423      	add	r3, r4
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	60da      	str	r2, [r3, #12]
 8013f46:	685a      	ldr	r2, [r3, #4]
 8013f48:	611a      	str	r2, [r3, #16]
 8013f4a:	689a      	ldr	r2, [r3, #8]
 8013f4c:	615a      	str	r2, [r3, #20]
 8013f4e:	3b0c      	subs	r3, #12
 8013f50:	428b      	cmp	r3, r1
 8013f52:	d1f6      	bne.n	8013f42 <iNemoEngine_API_Update+0x95a>
 8013f54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013f58:	edc5 8a00 	vstr	s17, [r5]
 8013f5c:	eec7 8aaf 	vdiv.f32	s17, s15, s31
 8013f60:	9a06      	ldr	r2, [sp, #24]
 8013f62:	f202 43bc 	addw	r3, r2, #1212	; 0x4bc
 8013f66:	ed83 8a00 	vstr	s16, [r3]
 8013f6a:	f502 6398 	add.w	r3, r2, #1216	; 0x4c0
 8013f6e:	ed83 ca00 	vstr	s24, [r3]
 8013f72:	f892 34b0 	ldrb.w	r3, [r2, #1200]	; 0x4b0
 8013f76:	ed5f 7a4e 	vldr	s15, [pc, #-312]	; 8013e40 <iNemoEngine_API_Update+0x858>
 8013f7a:	ee2a 8aa8 	vmul.f32	s16, s21, s17
 8013f7e:	3301      	adds	r3, #1
 8013f80:	b2db      	uxtb	r3, r3
 8013f82:	eeb0 7ac8 	vabs.f32	s14, s16
 8013f86:	4298      	cmp	r0, r3
 8013f88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f8c:	bf28      	it	cs
 8013f8e:	4618      	movcs	r0, r3
 8013f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f94:	ee2a ca28 	vmul.f32	s24, s20, s17
 8013f98:	f882 04b0 	strb.w	r0, [r2, #1200]	; 0x4b0
 8013f9c:	ee69 8aa8 	vmul.f32	s17, s19, s17
 8013fa0:	d51f      	bpl.n	8013fe2 <iNemoEngine_API_Update+0x9fa>
 8013fa2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013fa6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fae:	f281 87cb 	bge.w	8015f48 <iNemoEngine_API_Update+0x2960>
 8013fb2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8013fb6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fbe:	f303 8000 	bgt.w	8016fc2 <iNemoEngine_API_Update+0x39da>
 8013fc2:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013fc6:	ee17 0a90 	vmov	r0, s15
 8013fca:	f7ec fac7 	bl	800055c <__aeabi_f2d>
 8013fce:	ec41 0b10 	vmov	d0, r0, r1
 8013fd2:	f009 fcf5 	bl	801d9c0 <ceil>
 8013fd6:	ec51 0b10 	vmov	r0, r1, d0
 8013fda:	f7ec fe0f 	bl	8000bfc <__aeabi_d2f>
 8013fde:	ee08 0a10 	vmov	s16, r0
 8013fe2:	ed5f 7a69 	vldr	s15, [pc, #-420]	; 8013e40 <iNemoEngine_API_Update+0x858>
 8013fe6:	ed8d 8a43 	vstr	s16, [sp, #268]	; 0x10c
 8013fea:	eeb0 7acc 	vabs.f32	s14, s24
 8013fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff6:	d51f      	bpl.n	8014038 <iNemoEngine_API_Update+0xa50>
 8013ff8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013ffc:	eeb4 cae7 	vcmpe.f32	s24, s15
 8014000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014004:	f281 878e 	bge.w	8015f24 <iNemoEngine_API_Update+0x293c>
 8014008:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801400c:	eeb4 cac7 	vcmpe.f32	s24, s14
 8014010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014014:	f302 87cd 	bgt.w	8016fb2 <iNemoEngine_API_Update+0x39ca>
 8014018:	ee7c 7a67 	vsub.f32	s15, s24, s15
 801401c:	ee17 0a90 	vmov	r0, s15
 8014020:	f7ec fa9c 	bl	800055c <__aeabi_f2d>
 8014024:	ec41 0b10 	vmov	d0, r0, r1
 8014028:	f009 fcca 	bl	801d9c0 <ceil>
 801402c:	ec51 0b10 	vmov	r0, r1, d0
 8014030:	f7ec fde4 	bl	8000bfc <__aeabi_d2f>
 8014034:	ee0c 0a10 	vmov	s24, r0
 8014038:	ed5f 7a7f 	vldr	s15, [pc, #-508]	; 8013e40 <iNemoEngine_API_Update+0x858>
 801403c:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 8014040:	eeb0 7ae8 	vabs.f32	s14, s17
 8014044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801404c:	d51f      	bpl.n	801408e <iNemoEngine_API_Update+0xaa6>
 801404e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014052:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801405a:	f281 8751 	bge.w	8015f00 <iNemoEngine_API_Update+0x2918>
 801405e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8014062:	eef4 8ac7 	vcmpe.f32	s17, s14
 8014066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801406a:	f302 878e 	bgt.w	8016f8a <iNemoEngine_API_Update+0x39a2>
 801406e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014072:	ee17 0a90 	vmov	r0, s15
 8014076:	f7ec fa71 	bl	800055c <__aeabi_f2d>
 801407a:	ec41 0b10 	vmov	d0, r0, r1
 801407e:	f009 fc9f 	bl	801d9c0 <ceil>
 8014082:	ec51 0b10 	vmov	r0, r1, d0
 8014086:	f7ec fdb9 	bl	8000bfc <__aeabi_d2f>
 801408a:	ee08 0a90 	vmov	s17, r0
 801408e:	9b06      	ldr	r3, [sp, #24]
 8014090:	edcd 8a45 	vstr	s17, [sp, #276]	; 0x114
 8014094:	f893 0621 	ldrb.w	r0, [r3, #1569]	; 0x621
 8014098:	1e43      	subs	r3, r0, #1
 801409a:	b25b      	sxtb	r3, r3
 801409c:	2b00      	cmp	r3, #0
 801409e:	dd18      	ble.n	80140d2 <iNemoEngine_API_Update+0xaea>
 80140a0:	9c06      	ldr	r4, [sp, #24]
 80140a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80140a6:	1e81      	subs	r1, r0, #2
 80140a8:	009b      	lsls	r3, r3, #2
 80140aa:	b2c9      	uxtb	r1, r1
 80140ac:	f504 62c2 	add.w	r2, r4, #1552	; 0x610
 80140b0:	441a      	add	r2, r3
 80140b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80140b6:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80140ba:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 80140be:	4423      	add	r3, r4
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	60da      	str	r2, [r3, #12]
 80140c4:	685a      	ldr	r2, [r3, #4]
 80140c6:	611a      	str	r2, [r3, #16]
 80140c8:	689a      	ldr	r2, [r3, #8]
 80140ca:	615a      	str	r2, [r3, #20]
 80140cc:	3b0c      	subs	r3, #12
 80140ce:	4299      	cmp	r1, r3
 80140d0:	d1f6      	bne.n	80140c0 <iNemoEngine_API_Update+0xad8>
 80140d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80140d6:	ed86 8a00 	vstr	s16, [r6]
 80140da:	ee87 8a8f 	vdiv.f32	s16, s15, s30
 80140de:	9a06      	ldr	r2, [sp, #24]
 80140e0:	f202 632c 	addw	r3, r2, #1580	; 0x62c
 80140e4:	ed83 ca00 	vstr	s24, [r3]
 80140e8:	f502 63c6 	add.w	r3, r2, #1584	; 0x630
 80140ec:	edc3 8a00 	vstr	s17, [r3]
 80140f0:	f892 3620 	ldrb.w	r3, [r2, #1568]	; 0x620
 80140f4:	ed5f 7aae 	vldr	s15, [pc, #-696]	; 8013e40 <iNemoEngine_API_Update+0x858>
 80140f8:	ee68 8a0e 	vmul.f32	s17, s16, s28
 80140fc:	3301      	adds	r3, #1
 80140fe:	b2db      	uxtb	r3, r3
 8014100:	eeb0 7ae8 	vabs.f32	s14, s17
 8014104:	4298      	cmp	r0, r3
 8014106:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801410a:	bf28      	it	cs
 801410c:	4618      	movcs	r0, r3
 801410e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014112:	ee28 ca2e 	vmul.f32	s24, s16, s29
 8014116:	f882 0620 	strb.w	r0, [r2, #1568]	; 0x620
 801411a:	ee28 8a2b 	vmul.f32	s16, s16, s23
 801411e:	d51f      	bpl.n	8014160 <iNemoEngine_API_Update+0xb78>
 8014120:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014124:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801412c:	f281 86d6 	bge.w	8015edc <iNemoEngine_API_Update+0x28f4>
 8014130:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8014134:	eef4 8ac7 	vcmpe.f32	s17, s14
 8014138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801413c:	f302 8745 	bgt.w	8016fca <iNemoEngine_API_Update+0x39e2>
 8014140:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014144:	ee17 0a90 	vmov	r0, s15
 8014148:	f7ec fa08 	bl	800055c <__aeabi_f2d>
 801414c:	ec41 0b10 	vmov	d0, r0, r1
 8014150:	f009 fc36 	bl	801d9c0 <ceil>
 8014154:	ec51 0b10 	vmov	r0, r1, d0
 8014158:	f7ec fd50 	bl	8000bfc <__aeabi_d2f>
 801415c:	ee08 0a90 	vmov	s17, r0
 8014160:	ed5f 7ac9 	vldr	s15, [pc, #-804]	; 8013e40 <iNemoEngine_API_Update+0x858>
 8014164:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 8014168:	eeb0 7acc 	vabs.f32	s14, s24
 801416c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014174:	d51f      	bpl.n	80141b6 <iNemoEngine_API_Update+0xbce>
 8014176:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801417a:	eeb4 cae7 	vcmpe.f32	s24, s15
 801417e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014182:	f281 871d 	bge.w	8015fc0 <iNemoEngine_API_Update+0x29d8>
 8014186:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801418a:	eeb4 cac7 	vcmpe.f32	s24, s14
 801418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014192:	f302 86fe 	bgt.w	8016f92 <iNemoEngine_API_Update+0x39aa>
 8014196:	ee7c 7a67 	vsub.f32	s15, s24, s15
 801419a:	ee17 0a90 	vmov	r0, s15
 801419e:	f7ec f9dd 	bl	800055c <__aeabi_f2d>
 80141a2:	ec41 0b10 	vmov	d0, r0, r1
 80141a6:	f009 fc0b 	bl	801d9c0 <ceil>
 80141aa:	ec51 0b10 	vmov	r0, r1, d0
 80141ae:	f7ec fd25 	bl	8000bfc <__aeabi_d2f>
 80141b2:	ee0c 0a10 	vmov	s24, r0
 80141b6:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 8013e40 <iNemoEngine_API_Update+0x858>
 80141ba:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 80141be:	eeb0 7ac8 	vabs.f32	s14, s16
 80141c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ca:	d51f      	bpl.n	801420c <iNemoEngine_API_Update+0xc24>
 80141cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80141d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80141d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d8:	f281 86c8 	bge.w	8015f6c <iNemoEngine_API_Update+0x2984>
 80141dc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80141e0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80141e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e8:	f302 86df 	bgt.w	8016faa <iNemoEngine_API_Update+0x39c2>
 80141ec:	ee78 7a67 	vsub.f32	s15, s16, s15
 80141f0:	ee17 0a90 	vmov	r0, s15
 80141f4:	f7ec f9b2 	bl	800055c <__aeabi_f2d>
 80141f8:	ec41 0b10 	vmov	d0, r0, r1
 80141fc:	f009 fbe0 	bl	801d9c0 <ceil>
 8014200:	ec51 0b10 	vmov	r0, r1, d0
 8014204:	f7ec fcfa 	bl	8000bfc <__aeabi_d2f>
 8014208:	ee08 0a10 	vmov	s16, r0
 801420c:	9b06      	ldr	r3, [sp, #24]
 801420e:	ed8d 8a45 	vstr	s16, [sp, #276]	; 0x114
 8014212:	f893 0791 	ldrb.w	r0, [r3, #1937]	; 0x791
 8014216:	1e43      	subs	r3, r0, #1
 8014218:	b25b      	sxtb	r3, r3
 801421a:	2b00      	cmp	r3, #0
 801421c:	dd18      	ble.n	8014250 <iNemoEngine_API_Update+0xc68>
 801421e:	9c06      	ldr	r4, [sp, #24]
 8014220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014224:	1e81      	subs	r1, r0, #2
 8014226:	009b      	lsls	r3, r3, #2
 8014228:	b2c9      	uxtb	r1, r1
 801422a:	f504 62f0 	add.w	r2, r4, #1920	; 0x780
 801422e:	441a      	add	r2, r3
 8014230:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014234:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 8014238:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 801423c:	4423      	add	r3, r4
 801423e:	681a      	ldr	r2, [r3, #0]
 8014240:	60da      	str	r2, [r3, #12]
 8014242:	685a      	ldr	r2, [r3, #4]
 8014244:	611a      	str	r2, [r3, #16]
 8014246:	689a      	ldr	r2, [r3, #8]
 8014248:	615a      	str	r2, [r3, #20]
 801424a:	3b0c      	subs	r3, #12
 801424c:	428b      	cmp	r3, r1
 801424e:	d1f6      	bne.n	801423e <iNemoEngine_API_Update+0xc56>
 8014250:	9c06      	ldr	r4, [sp, #24]
 8014252:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014254:	f204 729c 	addw	r2, r4, #1948	; 0x79c
 8014258:	edc3 8a00 	vstr	s17, [r3]
 801425c:	922e      	str	r2, [sp, #184]	; 0xb8
 801425e:	ed82 ca00 	vstr	s24, [r2]
 8014262:	f504 62f4 	add.w	r2, r4, #1952	; 0x7a0
 8014266:	ed82 8a00 	vstr	s16, [r2]
 801426a:	f894 3790 	ldrb.w	r3, [r4, #1936]	; 0x790
 801426e:	922f      	str	r2, [sp, #188]	; 0xbc
 8014270:	3301      	adds	r3, #1
 8014272:	b2db      	uxtb	r3, r3
 8014274:	4298      	cmp	r0, r3
 8014276:	bf28      	it	cs
 8014278:	4618      	movcs	r0, r3
 801427a:	f884 0790 	strb.w	r0, [r4, #1936]	; 0x790
 801427e:	aa68      	add	r2, sp, #416	; 0x1a0
 8014280:	a93d      	add	r1, sp, #244	; 0xf4
 8014282:	a840      	add	r0, sp, #256	; 0x100
 8014284:	f7fd fe26 	bl	8011ed4 <getRotationMatrix>
 8014288:	4623      	mov	r3, r4
 801428a:	f504 7247 	add.w	r2, r4, #796	; 0x31c
 801428e:	9229      	str	r2, [sp, #164]	; 0xa4
 8014290:	4614      	mov	r4, r2
 8014292:	aeae      	add	r6, sp, #696	; 0x2b8
 8014294:	f503 774f 	add.w	r7, r3, #828	; 0x33c
 8014298:	6820      	ldr	r0, [r4, #0]
 801429a:	6861      	ldr	r1, [r4, #4]
 801429c:	68a2      	ldr	r2, [r4, #8]
 801429e:	68e3      	ldr	r3, [r4, #12]
 80142a0:	4635      	mov	r5, r6
 80142a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80142a4:	3410      	adds	r4, #16
 80142a6:	42bc      	cmp	r4, r7
 80142a8:	462e      	mov	r6, r5
 80142aa:	d1f5      	bne.n	8014298 <iNemoEngine_API_Update+0xcb0>
 80142ac:	6820      	ldr	r0, [r4, #0]
 80142ae:	6028      	str	r0, [r5, #0]
 80142b0:	9b06      	ldr	r3, [sp, #24]
 80142b2:	edd3 7ac7 	vldr	s15, [r3, #796]	; 0x31c
 80142b6:	ed93 7ac8 	vldr	s14, [r3, #800]	; 0x320
 80142ba:	eef0 7ae7 	vabs.f32	s15, s15
 80142be:	eeb0 7ac7 	vabs.f32	s14, s14
 80142c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80142c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ca:	f140 8543 	bpl.w	8014d54 <iNemoEngine_API_Update+0x176c>
 80142ce:	2604      	movs	r6, #4
 80142d0:	2400      	movs	r4, #0
 80142d2:	eef0 7a47 	vmov.f32	s15, s14
 80142d6:	f04f 0c07 	mov.w	ip, #7
 80142da:	f04f 0e06 	mov.w	lr, #6
 80142de:	2103      	movs	r1, #3
 80142e0:	4630      	mov	r0, r6
 80142e2:	4623      	mov	r3, r4
 80142e4:	2701      	movs	r7, #1
 80142e6:	9a06      	ldr	r2, [sp, #24]
 80142e8:	ed92 7ac9 	vldr	s14, [r2, #804]	; 0x324
 80142ec:	eeb0 7ac7 	vabs.f32	s14, s14
 80142f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f8:	f340 8525 	ble.w	8014d46 <iNemoEngine_API_Update+0x175e>
 80142fc:	f04f 0c08 	mov.w	ip, #8
 8014300:	2104      	movs	r1, #4
 8014302:	f04f 0906 	mov.w	r9, #6
 8014306:	f04f 0e07 	mov.w	lr, #7
 801430a:	f04f 0803 	mov.w	r8, #3
 801430e:	2605      	movs	r6, #5
 8014310:	4660      	mov	r0, ip
 8014312:	460c      	mov	r4, r1
 8014314:	2200      	movs	r2, #0
 8014316:	2301      	movs	r3, #1
 8014318:	2702      	movs	r7, #2
 801431a:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801431c:	442c      	add	r4, r5
 801431e:	4428      	add	r0, r5
 8014320:	ed90 7a00 	vldr	s14, [r0]
 8014324:	edd4 6a00 	vldr	s13, [r4]
 8014328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801432c:	a8ae      	add	r0, sp, #696	; 0x2b8
 801432e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014332:	acae      	add	r4, sp, #696	; 0x2b8
 8014334:	adae      	add	r5, sp, #696	; 0x2b8
 8014336:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801433a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 801433e:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8014342:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8014346:	edc0 7a00 	vstr	s15, [r0]
 801434a:	edd5 7a00 	vldr	s15, [r5]
 801434e:	ed94 7a00 	vldr	s14, [r4]
 8014352:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014356:	edc4 6a00 	vstr	s13, [r4]
 801435a:	ed90 6a00 	vldr	s12, [r0]
 801435e:	a8ae      	add	r0, sp, #696	; 0x2b8
 8014360:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8014364:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8014368:	ed90 7a00 	vldr	s14, [r0]
 801436c:	edd5 7a00 	vldr	s15, [r5]
 8014370:	eee6 7a47 	vfms.f32	s15, s12, s14
 8014374:	00b4      	lsls	r4, r6, #2
 8014376:	9403      	str	r4, [sp, #12]
 8014378:	ea4f 048c 	mov.w	r4, ip, lsl #2
 801437c:	edc5 7a00 	vstr	s15, [r5]
 8014380:	ed90 7a00 	vldr	s14, [r0]
 8014384:	a8ae      	add	r0, sp, #696	; 0x2b8
 8014386:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801438a:	edd0 7a00 	vldr	s15, [r0]
 801438e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8014392:	4626      	mov	r6, r4
 8014394:	acae      	add	r4, sp, #696	; 0x2b8
 8014396:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 801439a:	edc0 7a00 	vstr	s15, [r0]
 801439e:	a8ae      	add	r0, sp, #696	; 0x2b8
 80143a0:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80143a4:	edd0 5a00 	vldr	s11, [r0]
 80143a8:	ed94 7a00 	vldr	s14, [r4]
 80143ac:	eea6 7a65 	vfms.f32	s14, s12, s11
 80143b0:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80143b4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80143b8:	eef0 7ae7 	vabs.f32	s15, s15
 80143bc:	ed84 7a00 	vstr	s14, [r4]
 80143c0:	ed90 6a00 	vldr	s12, [r0]
 80143c4:	a8ae      	add	r0, sp, #696	; 0x2b8
 80143c6:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 80143ca:	ed90 7a00 	vldr	s14, [r0]
 80143ce:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80143d2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80143d6:	ea4f 048e 	mov.w	r4, lr, lsl #2
 80143da:	ed80 7a00 	vstr	s14, [r0]
 80143de:	ed95 7a00 	vldr	s14, [r5]
 80143e2:	eeb0 7ac7 	vabs.f32	s14, s14
 80143e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80143ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ee:	ea4f 0581 	mov.w	r5, r1, lsl #2
 80143f2:	dd0b      	ble.n	801440c <iNemoEngine_API_Update+0xe24>
 80143f4:	4618      	mov	r0, r3
 80143f6:	4645      	mov	r5, r8
 80143f8:	4613      	mov	r3, r2
 80143fa:	464c      	mov	r4, r9
 80143fc:	46d4      	mov	ip, sl
 80143fe:	4602      	mov	r2, r0
 8014400:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8014404:	ea4f 098e 	mov.w	r9, lr, lsl #2
 8014408:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 801440c:	a9ae      	add	r1, sp, #696	; 0x2b8
 801440e:	eb01 0008 	add.w	r0, r1, r8
 8014412:	440d      	add	r5, r1
 8014414:	ed90 7a00 	vldr	s14, [r0]
 8014418:	edd5 7a00 	vldr	s15, [r5]
 801441c:	ee87 4a27 	vdiv.f32	s8, s14, s15
 8014420:	440c      	add	r4, r1
 8014422:	eb01 0809 	add.w	r8, r1, r9
 8014426:	440e      	add	r6, r1
 8014428:	46b6      	mov	lr, r6
 801442a:	460e      	mov	r6, r1
 801442c:	9903      	ldr	r1, [sp, #12]
 801442e:	4431      	add	r1, r6
 8014430:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8014434:	ed80 4a00 	vstr	s8, [r0]
 8014438:	ed94 7a00 	vldr	s14, [r4]
 801443c:	edd8 7a00 	vldr	s15, [r8]
 8014440:	eee4 7a47 	vfms.f32	s15, s8, s14
 8014444:	a8ae      	add	r0, sp, #696	; 0x2b8
 8014446:	edc8 7a00 	vstr	s15, [r8]
 801444a:	edd1 2a00 	vldr	s5, [r1]
 801444e:	ed95 7a00 	vldr	s14, [r5]
 8014452:	ed94 1a00 	vldr	s2, [r4]
 8014456:	edde 1a00 	vldr	s3, [lr]
 801445a:	f50b 61b2 	add.w	r1, fp, #1424	; 0x590
 801445e:	4469      	add	r1, sp
 8014460:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8014464:	ee83 2a87 	vdiv.f32	s4, s7, s14
 8014468:	ed91 7a00 	vldr	s14, [r1]
 801446c:	a9ae      	add	r1, sp, #696	; 0x2b8
 801446e:	448b      	add	fp, r1
 8014470:	f50c 61b2 	add.w	r1, ip, #1424	; 0x590
 8014474:	eec3 0aa7 	vdiv.f32	s1, s7, s15
 8014478:	4469      	add	r1, sp
 801447a:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 801447e:	4484      	add	ip, r0
 8014480:	4450      	add	r0, sl
 8014482:	edd1 6a00 	vldr	s13, [r1]
 8014486:	eddb 7a00 	vldr	s15, [fp]
 801448a:	ed90 0a00 	vldr	s0, [r0]
 801448e:	f50a 61b2 	add.w	r1, sl, #1424	; 0x590
 8014492:	4469      	add	r1, sp
 8014494:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8014498:	ee83 3aa7 	vdiv.f32	s6, s7, s15
 801449c:	edd1 4a00 	vldr	s9, [r1]
 80144a0:	eddc 7a00 	vldr	s15, [ip]
 80144a4:	eee0 4a47 	vfms.f32	s9, s0, s14
 80144a8:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 80144ac:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 80144b0:	eee7 6ac7 	vfms.f32	s13, s15, s14
 80144b4:	4601      	mov	r1, r0
 80144b6:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 80144ba:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 80144be:	eee4 4a66 	vfms.f32	s9, s8, s13
 80144c2:	ed90 5a00 	vldr	s10, [r0]
 80144c6:	ee60 4aa4 	vmul.f32	s9, s1, s9
 80144ca:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 80144ce:	eee1 6a64 	vfms.f32	s13, s2, s9
 80144d2:	eea1 7ae4 	vfms.f32	s14, s3, s9
 80144d6:	ee62 8a26 	vmul.f32	s17, s4, s13
 80144da:	edd1 6a00 	vldr	s13, [r1]
 80144de:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 80144e2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80144e6:	460b      	mov	r3, r1
 80144e8:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80144ec:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 80144f0:	edd1 5a00 	vldr	s11, [r1]
 80144f4:	ed93 8a00 	vldr	s16, [r3]
 80144f8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80144fc:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 8014500:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 8014504:	eee7 5ac5 	vfms.f32	s11, s15, s10
 8014508:	eea6 8ae7 	vfms.f32	s16, s13, s15
 801450c:	ed92 6a00 	vldr	s12, [r2]
 8014510:	edd3 7a00 	vldr	s15, [r3]
 8014514:	eea0 6a45 	vfms.f32	s12, s0, s10
 8014518:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801451c:	eea4 6a65 	vfms.f32	s12, s8, s11
 8014520:	eee4 7a48 	vfms.f32	s15, s8, s16
 8014524:	ee20 6a86 	vmul.f32	s12, s1, s12
 8014528:	ee67 7aa0 	vmul.f32	s15, s15, s1
 801452c:	eee1 5a46 	vfms.f32	s11, s2, s12
 8014530:	eea7 8ac1 	vfms.f32	s16, s15, s2
 8014534:	eea1 5ac6 	vfms.f32	s10, s3, s12
 8014538:	eee7 6ae1 	vfms.f32	s13, s15, s3
 801453c:	ee62 5a25 	vmul.f32	s11, s4, s11
 8014540:	ee28 2a02 	vmul.f32	s4, s16, s4
 8014544:	eea2 7ae8 	vfms.f32	s14, s5, s17
 8014548:	eee2 6a62 	vfms.f32	s13, s4, s5
 801454c:	eea2 5ae5 	vfms.f32	s10, s5, s11
 8014550:	ee23 7a07 	vmul.f32	s14, s6, s14
 8014554:	ee23 5a05 	vmul.f32	s10, s6, s10
 8014558:	ee26 3a83 	vmul.f32	s6, s13, s6
 801455c:	ee77 6aa5 	vadd.f32	s13, s15, s11
 8014560:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 8014564:	ee77 6a66 	vsub.f32	s13, s14, s13
 8014568:	ee36 6a42 	vsub.f32	s12, s12, s4
 801456c:	eef4 6ac4 	vcmpe.f32	s13, s8
 8014570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014574:	bfc8      	it	gt
 8014576:	ee76 6aa3 	vaddgt.f32	s13, s13, s7
 801457a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801457e:	bfcc      	ite	gt
 8014580:	eeb1 4ae6 	vsqrtgt.f32	s8, s13
 8014584:	ed9f 4ad7 	vldrle	s8, [pc, #860]	; 80148e4 <iNemoEngine_API_Update+0x12fc>
 8014588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801458c:	f100 8411 	bmi.w	8014db2 <iNemoEngine_API_Update+0x17ca>
 8014590:	bfd8      	it	le
 8014592:	ee24 4a06 	vmulle.f32	s8, s8, s12
 8014596:	ee77 6a87 	vadd.f32	s13, s15, s14
 801459a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801459e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80145a2:	ee24 6a06 	vmul.f32	s12, s8, s12
 80145a6:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 80145aa:	eef4 6ac4 	vcmpe.f32	s13, s8
 80145ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145b2:	bf88      	it	hi
 80145b4:	eeb7 4a00 	vmovhi.f32	s8, #112	; 0x3f800000  1.0
 80145b8:	ee33 3a64 	vsub.f32	s6, s6, s9
 80145bc:	bf88      	it	hi
 80145be:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 80145c2:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 80145c6:	bf8c      	ite	hi
 80145c8:	eef1 6ac4 	vsqrthi.f32	s13, s8
 80145cc:	eddf 6ac5 	vldrls	s13, [pc, #788]	; 80148e4 <iNemoEngine_API_Update+0x12fc>
 80145d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145d4:	f100 83ea 	bmi.w	8014dac <iNemoEngine_API_Update+0x17c4>
 80145d8:	bfd8      	it	le
 80145da:	ee66 6a83 	vmulle.f32	s13, s13, s6
 80145de:	ee37 7a25 	vadd.f32	s14, s14, s11
 80145e2:	ee38 5ac5 	vsub.f32	s10, s17, s10
 80145e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80145ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80145ee:	ee66 6a87 	vmul.f32	s13, s13, s14
 80145f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80145f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80145fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145fe:	bf84      	itt	hi
 8014600:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 8014604:	ee37 7a87 	vaddhi.f32	s14, s15, s14
 8014608:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801460c:	bf8c      	ite	hi
 801460e:	eef1 7ac7 	vsqrthi.f32	s15, s14
 8014612:	eddf 7ab4 	vldrls	s15, [pc, #720]	; 80148e4 <iNemoEngine_API_Update+0x12fc>
 8014616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801461a:	f100 83ce 	bmi.w	8014dba <iNemoEngine_API_Update+0x17d2>
 801461e:	bfd8      	it	le
 8014620:	ee67 7a85 	vmulle.f32	s15, s15, s10
 8014624:	9b06      	ldr	r3, [sp, #24]
 8014626:	f893 2341 	ldrb.w	r2, [r3, #833]	; 0x341
 801462a:	1e53      	subs	r3, r2, #1
 801462c:	b25b      	sxtb	r3, r3
 801462e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014632:	2b00      	cmp	r3, #0
 8014634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014638:	dd1d      	ble.n	8014676 <iNemoEngine_API_Update+0x108e>
 801463a:	9806      	ldr	r0, [sp, #24]
 801463c:	3a02      	subs	r2, #2
 801463e:	b2d1      	uxtb	r1, r2
 8014640:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014644:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8014648:	f1a0 010c 	sub.w	r1, r0, #12
 801464c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014650:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8014654:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8014658:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 801465c:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 8014660:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8014664:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 8014668:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 801466c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 8014670:	3b0c      	subs	r3, #12
 8014672:	428b      	cmp	r3, r1
 8014674:	d1f0      	bne.n	8014658 <iNemoEngine_API_Update+0x1070>
 8014676:	ed9d 7a07 	vldr	s14, [sp, #28]
 801467a:	9b06      	ldr	r3, [sp, #24]
 801467c:	9310      	str	r3, [sp, #64]	; 0x40
 801467e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014682:	ee85 7a87 	vdiv.f32	s14, s11, s14
 8014686:	aa3d      	add	r2, sp, #244	; 0xf4
 8014688:	922b      	str	r2, [sp, #172]	; 0xac
 801468a:	9212      	str	r2, [sp, #72]	; 0x48
 801468c:	f50d 7be2 	add.w	fp, sp, #452	; 0x1c4
 8014690:	f50d 7af4 	add.w	sl, sp, #488	; 0x1e8
 8014694:	ee36 6a06 	vadd.f32	s12, s12, s12
 8014698:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801469c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80146a0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80146a4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80146a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80146ac:	ed83 6ad2 	vstr	s12, [r3, #840]	; 0x348
 80146b0:	edc3 6ad3 	vstr	s13, [r3, #844]	; 0x34c
 80146b4:	edc3 7ad4 	vstr	s15, [r3, #848]	; 0x350
 80146b8:	2300      	movs	r3, #0
 80146ba:	930e      	str	r3, [sp, #56]	; 0x38
 80146bc:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 80146c0:	f1c3 0301 	rsb	r3, r3, #1
 80146c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80146c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80146ca:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80146cc:	3301      	adds	r3, #1
 80146ce:	930e      	str	r3, [sp, #56]	; 0x38
 80146d0:	a9ae      	add	r1, sp, #696	; 0x2b8
 80146d2:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 80146d6:	18e0      	adds	r0, r4, r3
 80146d8:	f803 0f01 	strb.w	r0, [r3, #1]!
 80146dc:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 80146e0:	f841 0b04 	str.w	r0, [r1], #4
 80146e4:	f20d 10e1 	addw	r0, sp, #481	; 0x1e1
 80146e8:	4283      	cmp	r3, r0
 80146ea:	f102 020c 	add.w	r2, r2, #12
 80146ee:	d1f2      	bne.n	80146d6 <iNemoEngine_API_Update+0x10ee>
 80146f0:	ed9d 7aae 	vldr	s14, [sp, #696]	; 0x2b8
 80146f4:	eddd 7aaf 	vldr	s15, [sp, #700]	; 0x2bc
 80146f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80146fc:	ed9d 7ab0 	vldr	s14, [sp, #704]	; 0x2c0
 8014700:	eddd 7ab1 	vldr	s15, [sp, #708]	; 0x2c4
 8014704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014708:	bf88      	it	hi
 801470a:	f44f 7381 	movhi.w	r3, #258	; 0x102
 801470e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014712:	ed9d 7ab2 	vldr	s14, [sp, #712]	; 0x2c8
 8014716:	eddd 7ab3 	vldr	s15, [sp, #716]	; 0x2cc
 801471a:	bf88      	it	hi
 801471c:	f8ab 3000 	strhhi.w	r3, [fp]
 8014720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014724:	bf88      	it	hi
 8014726:	f44f 7341 	movhi.w	r3, #772	; 0x304
 801472a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801472e:	ed9d 7ab4 	vldr	s14, [sp, #720]	; 0x2d0
 8014732:	eddd 7ab5 	vldr	s15, [sp, #724]	; 0x2d4
 8014736:	bf88      	it	hi
 8014738:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 801473c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014740:	bf88      	it	hi
 8014742:	f240 5306 	movwhi	r3, #1286	; 0x506
 8014746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801474a:	ed9d 7ab6 	vldr	s14, [sp, #728]	; 0x2d8
 801474e:	eddd 7ab7 	vldr	s15, [sp, #732]	; 0x2dc
 8014752:	bf88      	it	hi
 8014754:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 8014758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801475c:	bf88      	it	hi
 801475e:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 8014762:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014766:	ed9d 7ab8 	vldr	s14, [sp, #736]	; 0x2e0
 801476a:	eddd 7ab9 	vldr	s15, [sp, #740]	; 0x2e4
 801476e:	bf88      	it	hi
 8014770:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 8014774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014778:	bf88      	it	hi
 801477a:	f640 130a 	movwhi	r3, #2314	; 0x90a
 801477e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014782:	ed9d 7aba 	vldr	s14, [sp, #744]	; 0x2e8
 8014786:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 801478a:	bf88      	it	hi
 801478c:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 8014790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014794:	bf88      	it	hi
 8014796:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 801479a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801479e:	ed9d 7abc 	vldr	s14, [sp, #752]	; 0x2f0
 80147a2:	eddd 7abd 	vldr	s15, [sp, #756]	; 0x2f4
 80147a6:	bf88      	it	hi
 80147a8:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 80147ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147b0:	bf88      	it	hi
 80147b2:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 80147b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147ba:	ed9d 7abe 	vldr	s14, [sp, #760]	; 0x2f8
 80147be:	eddd 7abf 	vldr	s15, [sp, #764]	; 0x2fc
 80147c2:	bf88      	it	hi
 80147c4:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 80147c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147cc:	bf88      	it	hi
 80147ce:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 80147d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147d6:	ed9d 7ac0 	vldr	s14, [sp, #768]	; 0x300
 80147da:	eddd 7ac1 	vldr	s15, [sp, #772]	; 0x304
 80147de:	bf88      	it	hi
 80147e0:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 80147e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147e8:	bf88      	it	hi
 80147ea:	f241 1312 	movwhi	r3, #4370	; 0x1112
 80147ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147f2:	ed9d 7ac2 	vldr	s14, [sp, #776]	; 0x308
 80147f6:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 80147fa:	bf88      	it	hi
 80147fc:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8014800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014804:	bf88      	it	hi
 8014806:	f241 3314 	movwhi	r3, #4884	; 0x1314
 801480a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801480e:	bf88      	it	hi
 8014810:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 8014814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014818:	bf84      	itt	hi
 801481a:	f241 5316 	movwhi	r3, #5398	; 0x1516
 801481e:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 8014822:	ed9d 7ac4 	vldr	s14, [sp, #784]	; 0x310
 8014826:	eddd 7ac5 	vldr	s15, [sp, #788]	; 0x314
 801482a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801482e:	ed9d 7ac6 	vldr	s14, [sp, #792]	; 0x318
 8014832:	eddd 7ac7 	vldr	s15, [sp, #796]	; 0x31c
 8014836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801483a:	bf88      	it	hi
 801483c:	f241 7318 	movwhi	r3, #5912	; 0x1718
 8014840:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014844:	ed9d 7ac8 	vldr	s14, [sp, #800]	; 0x320
 8014848:	eddd 7ac9 	vldr	s15, [sp, #804]	; 0x324
 801484c:	bf88      	it	hi
 801484e:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 8014852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014856:	bf88      	it	hi
 8014858:	f641 131a 	movwhi	r3, #6426	; 0x191a
 801485c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014860:	ed9d 7aca 	vldr	s14, [sp, #808]	; 0x328
 8014864:	eddd 7acb 	vldr	s15, [sp, #812]	; 0x32c
 8014868:	bf88      	it	hi
 801486a:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 801486e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014872:	bf88      	it	hi
 8014874:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8014878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801487c:	bf88      	it	hi
 801487e:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 8014882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014886:	bf84      	itt	hi
 8014888:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 801488c:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 8014890:	221e      	movs	r2, #30
 8014892:	2101      	movs	r1, #1
 8014894:	4650      	mov	r0, sl
 8014896:	f005 faf3 	bl	8019e80 <memset>
 801489a:	2304      	movs	r3, #4
 801489c:	930c      	str	r3, [sp, #48]	; 0x30
 801489e:	2302      	movs	r3, #2
 80148a0:	9307      	str	r3, [sp, #28]
 80148a2:	9a07      	ldr	r2, [sp, #28]
 80148a4:	920a      	str	r2, [sp, #40]	; 0x28
 80148a6:	4613      	mov	r3, r2
 80148a8:	0052      	lsls	r2, r2, #1
 80148aa:	9207      	str	r2, [sp, #28]
 80148ac:	f103 0901 	add.w	r9, r3, #1
 80148b0:	f04f 0801 	mov.w	r8, #1
 80148b4:	9b07      	ldr	r3, [sp, #28]
 80148b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80148ba:	4443      	add	r3, r8
 80148bc:	2b1f      	cmp	r3, #31
 80148be:	bfa8      	it	ge
 80148c0:	231f      	movge	r3, #31
 80148c2:	4642      	mov	r2, r8
 80148c4:	1a9f      	subs	r7, r3, r2
 80148c6:	2f00      	cmp	r7, #0
 80148c8:	4698      	mov	r8, r3
 80148ca:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 80148ce:	dd54      	ble.n	801497a <iNemoEngine_API_Update+0x1392>
 80148d0:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80148d4:	9304      	str	r3, [sp, #16]
 80148d6:	f1a8 0302 	sub.w	r3, r8, #2
 80148da:	4616      	mov	r6, r2
 80148dc:	2400      	movs	r4, #0
 80148de:	9305      	str	r3, [sp, #20]
 80148e0:	e00f      	b.n	8014902 <iNemoEngine_API_Update+0x131a>
 80148e2:	bf00      	nop
 80148e4:	00000000 	.word	0x00000000
 80148e8:	3f333333 	.word	0x3f333333
 80148ec:	3f4ccccd 	.word	0x3f4ccccd
 80148f0:	45f0      	cmp	r8, lr
 80148f2:	f80a 2004 	strb.w	r2, [sl, r4]
 80148f6:	f000 81f6 	beq.w	8014ce6 <iNemoEngine_API_Update+0x16fe>
 80148fa:	4665      	mov	r5, ip
 80148fc:	3401      	adds	r4, #1
 80148fe:	42a7      	cmp	r7, r4
 8014900:	dd34      	ble.n	801496c <iNemoEngine_API_Update+0x1384>
 8014902:	1e71      	subs	r1, r6, #1
 8014904:	a8ae      	add	r0, sp, #696	; 0x2b8
 8014906:	f91b 3001 	ldrsb.w	r3, [fp, r1]
 801490a:	f91b 2005 	ldrsb.w	r2, [fp, r5]
 801490e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014912:	ed10 7a01 	vldr	s14, [r0, #-4]
 8014916:	a8ae      	add	r0, sp, #696	; 0x2b8
 8014918:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801491c:	ed50 7a01 	vldr	s15, [r0, #-4]
 8014920:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014928:	f105 0e02 	add.w	lr, r5, #2
 801492c:	f105 0c01 	add.w	ip, r5, #1
 8014930:	d8de      	bhi.n	80148f0 <iNemoEngine_API_Update+0x1308>
 8014932:	3601      	adds	r6, #1
 8014934:	454e      	cmp	r6, r9
 8014936:	f80a 3004 	strb.w	r3, [sl, r4]
 801493a:	d1df      	bne.n	80148fc <iNemoEngine_API_Update+0x1314>
 801493c:	1c6b      	adds	r3, r5, #1
 801493e:	9a04      	ldr	r2, [sp, #16]
 8014940:	9308      	str	r3, [sp, #32]
 8014942:	1c60      	adds	r0, r4, #1
 8014944:	4598      	cmp	r8, r3
 8014946:	eba2 0205 	sub.w	r2, r2, r5
 801494a:	4450      	add	r0, sl
 801494c:	ddd6      	ble.n	80148fc <iNemoEngine_API_Update+0x1314>
 801494e:	eb0b 0105 	add.w	r1, fp, r5
 8014952:	f005 fb23 	bl	8019f9c <memcpy>
 8014956:	9a04      	ldr	r2, [sp, #16]
 8014958:	9b05      	ldr	r3, [sp, #20]
 801495a:	4414      	add	r4, r2
 801495c:	1b64      	subs	r4, r4, r5
 801495e:	1b5a      	subs	r2, r3, r5
 8014960:	3401      	adds	r4, #1
 8014962:	9b08      	ldr	r3, [sp, #32]
 8014964:	42a7      	cmp	r7, r4
 8014966:	eb02 0503 	add.w	r5, r2, r3
 801496a:	dcca      	bgt.n	8014902 <iNemoEngine_API_Update+0x131a>
 801496c:	9b03      	ldr	r3, [sp, #12]
 801496e:	1e58      	subs	r0, r3, #1
 8014970:	463a      	mov	r2, r7
 8014972:	4458      	add	r0, fp
 8014974:	4651      	mov	r1, sl
 8014976:	f005 fb11 	bl	8019f9c <memcpy>
 801497a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801497c:	eb08 0903 	add.w	r9, r8, r3
 8014980:	f1b9 0f1e 	cmp.w	r9, #30
 8014984:	dd96      	ble.n	80148b4 <iNemoEngine_API_Update+0x12cc>
 8014986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014988:	3b01      	subs	r3, #1
 801498a:	930c      	str	r3, [sp, #48]	; 0x30
 801498c:	d189      	bne.n	80148a2 <iNemoEngine_API_Update+0x12ba>
 801498e:	f99b 300e 	ldrsb.w	r3, [fp, #14]
 8014992:	aaae      	add	r2, sp, #696	; 0x2b8
 8014994:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014998:	ed53 7a01 	vldr	s15, [r3, #-4]
 801499c:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 80149a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80149a4:	ed13 7a01 	vldr	s14, [r3, #-4]
 80149a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80149ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80149b4:	bf4c      	ite	mi
 80149b6:	2201      	movmi	r2, #1
 80149b8:	2200      	movpl	r2, #0
 80149ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149be:	bf4c      	ite	mi
 80149c0:	2301      	movmi	r3, #1
 80149c2:	2300      	movpl	r3, #0
 80149c4:	429a      	cmp	r2, r3
 80149c6:	f000 819d 	beq.w	8014d04 <iNemoEngine_API_Update+0x171c>
 80149ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80149ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80149d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80149d8:	ece3 7a01 	vstmia	r3!, {s15}
 80149dc:	9312      	str	r3, [sp, #72]	; 0x48
 80149de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80149e0:	3304      	adds	r3, #4
 80149e2:	9310      	str	r3, [sp, #64]	; 0x40
 80149e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80149e6:	2b03      	cmp	r3, #3
 80149e8:	f47f ae6d 	bne.w	80146c6 <iNemoEngine_API_Update+0x10de>
 80149ec:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 80149f0:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 80149f4:	eddd 6a16 	vldr	s13, [sp, #88]	; 0x58
 80149f8:	ed1f 1a45 	vldr	s2, [pc, #-276]	; 80148e8 <iNemoEngine_API_Update+0x1300>
 80149fc:	9a06      	ldr	r2, [sp, #24]
 80149fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014a02:	ee2d 1a81 	vmul.f32	s2, s27, s2
 8014a06:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014a0a:	f892 3900 	ldrb.w	r3, [r2, #2304]	; 0x900
 8014a0e:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 8014a12:	eeb0 8a67 	vmov.f32	s16, s15
 8014a16:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 8014a1a:	eea7 8aa7 	vfma.f32	s16, s15, s15
 8014a1e:	f502 6810 	add.w	r8, r2, #2304	; 0x900
 8014a22:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014a2a:	eeb1 6ac8 	vsqrt.f32	s12, s16
 8014a2e:	eec7 5a0d 	vdiv.f32	s11, s14, s26
 8014a32:	ee2b 7a27 	vmul.f32	s14, s22, s15
 8014a36:	ee6d 7aa7 	vmul.f32	s15, s27, s15
 8014a3a:	eec7 6a26 	vdiv.f32	s13, s14, s13
 8014a3e:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 8014a42:	edcd 5a52 	vstr	s11, [sp, #328]	; 0x148
 8014a46:	ee87 5a87 	vdiv.f32	s10, s15, s14
 8014a4a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014a4e:	eeb0 7a41 	vmov.f32	s14, s2
 8014a52:	eeab 7a27 	vfma.f32	s14, s22, s15
 8014a56:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014a5a:	ed5f 7a5c 	vldr	s15, [pc, #-368]	; 80148ec <iNemoEngine_API_Update+0x1304>
 8014a5e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a66:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 8014a6a:	ed8d 5a54 	vstr	s10, [sp, #336]	; 0x150
 8014a6e:	ed8d 6a55 	vstr	s12, [sp, #340]	; 0x154
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	f040 8159 	bne.w	8014d2a <iNemoEngine_API_Update+0x1742>
 8014a78:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8014a7c:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8014a80:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8014a84:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8014a88:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8014a8c:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 8014a90:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8014a94:	f8c8 3020 	str.w	r3, [r8, #32]
 8014a98:	edc8 7a07 	vstr	s15, [r8, #28]
 8014a9c:	f602 130c 	addw	r3, r2, #2316	; 0x90c
 8014aa0:	edd3 8a00 	vldr	s17, [r3]
 8014aa4:	edd2 2a02 	vldr	s5, [r2, #8]
 8014aa8:	f602 1324 	addw	r3, r2, #2340	; 0x924
 8014aac:	edd3 7a00 	vldr	s15, [r3]
 8014ab0:	f602 1308 	addw	r3, r2, #2312	; 0x908
 8014ab4:	ed93 7a00 	vldr	s14, [r3]
 8014ab8:	f502 6312 	add.w	r3, r2, #2336	; 0x920
 8014abc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014ac0:	edd3 7a00 	vldr	s15, [r3]
 8014ac4:	f502 6311 	add.w	r3, r2, #2320	; 0x910
 8014ac8:	eee7 8a27 	vfma.f32	s17, s14, s15
 8014acc:	ed93 7a00 	vldr	s14, [r3]
 8014ad0:	f602 1328 	addw	r3, r2, #2344	; 0x928
 8014ad4:	edd3 7a00 	vldr	s15, [r3]
 8014ad8:	f602 1314 	addw	r3, r2, #2324	; 0x914
 8014adc:	eee7 8a27 	vfma.f32	s17, s14, s15
 8014ae0:	ed93 7a00 	vldr	s14, [r3]
 8014ae4:	f602 132c 	addw	r3, r2, #2348	; 0x92c
 8014ae8:	edd3 7a00 	vldr	s15, [r3]
 8014aec:	f602 1304 	addw	r3, r2, #2308	; 0x904
 8014af0:	eee7 8a27 	vfma.f32	s17, s14, s15
 8014af4:	ed93 7a00 	vldr	s14, [r3]
 8014af8:	f602 131c 	addw	r3, r2, #2332	; 0x91c
 8014afc:	edd3 7a00 	vldr	s15, [r3]
 8014b00:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8014b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b08:	eee7 8a27 	vfma.f32	s17, s14, s15
 8014b0c:	f340 8158 	ble.w	8014dc0 <iNemoEngine_API_Update+0x17d8>
 8014b10:	edd2 7a30 	vldr	s15, [r2, #192]	; 0xc0
 8014b14:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b1c:	f101 8112 	bmi.w	8015d44 <iNemoEngine_API_Update+0x275c>
 8014b20:	ed92 fa31 	vldr	s30, [r2, #196]	; 0xc4
 8014b24:	4613      	mov	r3, r2
 8014b26:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 8014b2a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b32:	f142 8186 	bpl.w	8016e42 <iNemoEngine_API_Update+0x385a>
 8014b36:	edd3 4a62 	vldr	s9, [r3, #392]	; 0x188
 8014b3a:	eef4 4ae8 	vcmpe.f32	s9, s17
 8014b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b42:	f342 821e 	ble.w	8016f82 <iNemoEngine_API_Update+0x399a>
 8014b46:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 8014b4a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8014b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b52:	f302 8555 	bgt.w	8017600 <iNemoEngine_API_Update+0x4018>
 8014b56:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8014b5a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b62:	f142 8565 	bpl.w	8017630 <iNemoEngine_API_Update+0x4048>
 8014b66:	edd3 3a4d 	vldr	s7, [r3, #308]	; 0x134
 8014b6a:	ed93 4a4f 	vldr	s8, [r3, #316]	; 0x13c
 8014b6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014b72:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014b76:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8014b7a:	ee24 7a07 	vmul.f32	s14, s8, s14
 8014b7e:	ee87 ca27 	vdiv.f32	s24, s14, s15
 8014b82:	ee3c ca23 	vadd.f32	s24, s24, s7
 8014b86:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8014b8a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b92:	f2c2 8566 	blt.w	8017662 <iNemoEngine_API_Update+0x407a>
 8014b96:	9b06      	ldr	r3, [sp, #24]
 8014b98:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8014b9c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8014ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba4:	f142 87a3 	bpl.w	8017aee <iNemoEngine_API_Update+0x4506>
 8014ba8:	edd3 3a51 	vldr	s7, [r3, #324]	; 0x144
 8014bac:	ed93 4a53 	vldr	s8, [r3, #332]	; 0x14c
 8014bb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014bb4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014bb8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014bbc:	ee64 7a27 	vmul.f32	s15, s8, s15
 8014bc0:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8014bc4:	ee3c ca23 	vadd.f32	s24, s24, s7
 8014bc8:	9b06      	ldr	r3, [sp, #24]
 8014bca:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8014bce:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd6:	f2c2 8566 	blt.w	80176a6 <iNemoEngine_API_Update+0x40be>
 8014bda:	9b06      	ldr	r3, [sp, #24]
 8014bdc:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8014be0:	eef4 8ac7 	vcmpe.f32	s17, s14
 8014be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014be8:	f142 87dc 	bpl.w	8017ba4 <iNemoEngine_API_Update+0x45bc>
 8014bec:	edd3 3a55 	vldr	s7, [r3, #340]	; 0x154
 8014bf0:	ed93 4a57 	vldr	s8, [r3, #348]	; 0x15c
 8014bf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014bf8:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014bfc:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014c00:	ee64 7a27 	vmul.f32	s15, s8, s15
 8014c04:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8014c08:	ee3c ca23 	vadd.f32	s24, s24, s7
 8014c0c:	9b06      	ldr	r3, [sp, #24]
 8014c0e:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8014c12:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c1a:	f2c2 8566 	blt.w	80176ea <iNemoEngine_API_Update+0x4102>
 8014c1e:	9b06      	ldr	r3, [sp, #24]
 8014c20:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8014c24:	eef4 8ac7 	vcmpe.f32	s17, s14
 8014c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c2c:	f142 87c5 	bpl.w	8017bba <iNemoEngine_API_Update+0x45d2>
 8014c30:	edd3 3a59 	vldr	s7, [r3, #356]	; 0x164
 8014c34:	ed93 4a5b 	vldr	s8, [r3, #364]	; 0x16c
 8014c38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014c3c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014c40:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014c44:	ee64 7a27 	vmul.f32	s15, s8, s15
 8014c48:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8014c4c:	ee3c ca23 	vadd.f32	s24, s24, s7
 8014c50:	9b06      	ldr	r3, [sp, #24]
 8014c52:	edd3 7a5c 	vldr	s15, [r3, #368]	; 0x170
 8014c56:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c5e:	f2c2 8566 	blt.w	801772e <iNemoEngine_API_Update+0x4146>
 8014c62:	9b06      	ldr	r3, [sp, #24]
 8014c64:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 8014c68:	eef4 8ac7 	vcmpe.f32	s17, s14
 8014c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c70:	f142 8795 	bpl.w	8017b9e <iNemoEngine_API_Update+0x45b6>
 8014c74:	edd3 3a5d 	vldr	s7, [r3, #372]	; 0x174
 8014c78:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 8014c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014c80:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014c84:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014c88:	ee64 7a27 	vmul.f32	s15, s8, s15
 8014c8c:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8014c90:	ee3c ca23 	vadd.f32	s24, s24, s7
 8014c94:	9b06      	ldr	r3, [sp, #24]
 8014c96:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 8014c9a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ca2:	f2c0 8092 	blt.w	8014dca <iNemoEngine_API_Update+0x17e2>
 8014ca6:	9b06      	ldr	r3, [sp, #24]
 8014ca8:	ed93 4a61 	vldr	s8, [r3, #388]	; 0x184
 8014cac:	ed93 7a63 	vldr	s14, [r3, #396]	; 0x18c
 8014cb0:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8014cb4:	ee37 7a44 	vsub.f32	s14, s14, s8
 8014cb8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014cc0:	ee87 caa4 	vdiv.f32	s24, s15, s9
 8014cc4:	ee3c ca04 	vadd.f32	s24, s24, s8
 8014cc8:	e07f      	b.n	8014dca <iNemoEngine_API_Update+0x17e2>
 8014cca:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8015014 <iNemoEngine_API_Update+0x1a2c>
 8014cce:	eddf cad2 	vldr	s25, [pc, #840]	; 8015018 <iNemoEngine_API_Update+0x1a30>
 8014cd2:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8014cd6:	eddf 7ad1 	vldr	s15, [pc, #836]	; 801501c <iNemoEngine_API_Update+0x1a34>
 8014cda:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 8014cde:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014ce2:	f7ff b824 	b.w	8013d2e <iNemoEngine_API_Update+0x746>
 8014ce6:	1c60      	adds	r0, r4, #1
 8014ce8:	454e      	cmp	r6, r9
 8014cea:	4459      	add	r1, fp
 8014cec:	4450      	add	r0, sl
 8014cee:	4665      	mov	r5, ip
 8014cf0:	f6bf ae04 	bge.w	80148fc <iNemoEngine_API_Update+0x1314>
 8014cf4:	eba9 0206 	sub.w	r2, r9, r6
 8014cf8:	444c      	add	r4, r9
 8014cfa:	1ba4      	subs	r4, r4, r6
 8014cfc:	f005 f94e 	bl	8019f9c <memcpy>
 8014d00:	464e      	mov	r6, r9
 8014d02:	e5fb      	b.n	80148fc <iNemoEngine_API_Update+0x1314>
 8014d04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d0c:	f43f ae5d 	beq.w	80149ca <iNemoEngine_API_Update+0x13e2>
 8014d10:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d18:	f43f ae57 	beq.w	80149ca <iNemoEngine_API_Update+0x13e2>
 8014d1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014d20:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014d24:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014d28:	e655      	b.n	80149d6 <iNemoEngine_API_Update+0x13ee>
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	f882 3900 	strb.w	r3, [r2, #2304]	; 0x900
 8014d30:	edc8 7a07 	vstr	s15, [r8, #28]
 8014d34:	edc8 7a08 	vstr	s15, [r8, #32]
 8014d38:	edc8 7a09 	vstr	s15, [r8, #36]	; 0x24
 8014d3c:	edc8 7a0a 	vstr	s15, [r8, #40]	; 0x28
 8014d40:	edc8 7a0b 	vstr	s15, [r8, #44]	; 0x2c
 8014d44:	e6aa      	b.n	8014a9c <iNemoEngine_API_Update+0x14b4>
 8014d46:	f04f 0908 	mov.w	r9, #8
 8014d4a:	f04f 0805 	mov.w	r8, #5
 8014d4e:	2202      	movs	r2, #2
 8014d50:	f7ff bae3 	b.w	801431a <iNemoEngine_API_Update+0xd32>
 8014d54:	2104      	movs	r1, #4
 8014d56:	2000      	movs	r0, #0
 8014d58:	f04f 0c06 	mov.w	ip, #6
 8014d5c:	f04f 0e07 	mov.w	lr, #7
 8014d60:	2603      	movs	r6, #3
 8014d62:	460c      	mov	r4, r1
 8014d64:	2301      	movs	r3, #1
 8014d66:	4607      	mov	r7, r0
 8014d68:	f7ff babd 	b.w	80142e6 <iNemoEngine_API_Update+0xcfe>
 8014d6c:	ed9f 5aac 	vldr	s10, [pc, #688]	; 8015020 <iNemoEngine_API_Update+0x1a38>
 8014d70:	ed9f 8aac 	vldr	s16, [pc, #688]	; 8015024 <iNemoEngine_API_Update+0x1a3c>
 8014d74:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8015054 <iNemoEngine_API_Update+0x1a6c>
 8014d78:	eddf 6aab 	vldr	s13, [pc, #684]	; 8015028 <iNemoEngine_API_Update+0x1a40>
 8014d7c:	ed84 5a00 	vstr	s10, [r4]
 8014d80:	eef0 7a45 	vmov.f32	s15, s10
 8014d84:	eeb0 6a45 	vmov.f32	s12, s10
 8014d88:	eddf caa8 	vldr	s25, [pc, #672]	; 801502c <iNemoEngine_API_Update+0x1a44>
 8014d8c:	ed9f 9aa8 	vldr	s18, [pc, #672]	; 8015030 <iNemoEngine_API_Update+0x1a48>
 8014d90:	ed84 8a01 	vstr	s16, [r4, #4]
 8014d94:	eef0 5a66 	vmov.f32	s11, s13
 8014d98:	ed84 8a02 	vstr	s16, [r4, #8]
 8014d9c:	eeb0 5a47 	vmov.f32	s10, s14
 8014da0:	eef0 8a67 	vmov.f32	s17, s15
 8014da4:	eeb0 ca48 	vmov.f32	s24, s16
 8014da8:	f7fe bed8 	b.w	8013b5c <iNemoEngine_API_Update+0x574>
 8014dac:	eef1 6a66 	vneg.f32	s13, s13
 8014db0:	e415      	b.n	80145de <iNemoEngine_API_Update+0xff6>
 8014db2:	eeb1 4a44 	vneg.f32	s8, s8
 8014db6:	f7ff bbee 	b.w	8014596 <iNemoEngine_API_Update+0xfae>
 8014dba:	eef1 7a67 	vneg.f32	s15, s15
 8014dbe:	e431      	b.n	8014624 <iNemoEngine_API_Update+0x103c>
 8014dc0:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8014dc4:	eeb0 fa4c 	vmov.f32	s30, s24
 8014dc8:	4613      	mov	r3, r2
 8014dca:	edd3 fa74 	vldr	s31, [r3, #464]	; 0x1d0
 8014dce:	ed93 7a72 	vldr	s14, [r3, #456]	; 0x1c8
 8014dd2:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8014dd6:	eddf 4a90 	vldr	s9, [pc, #576]	; 8015018 <iNemoEngine_API_Update+0x1a30>
 8014dda:	ee7c faef 	vsub.f32	s31, s25, s31
 8014dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014de2:	eef0 faef 	vabs.f32	s31, s31
 8014de6:	eef0 7ae7 	vabs.f32	s15, s15
 8014dea:	ee77 7aaf 	vadd.f32	s15, s15, s31
 8014dee:	eef4 7ae4 	vcmpe.f32	s15, s9
 8014df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df6:	dd0a      	ble.n	8014e0e <iNemoEngine_API_Update+0x1826>
 8014df8:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 8015034 <iNemoEngine_API_Update+0x1a4c>
 8014dfc:	eef4 7ac4 	vcmpe.f32	s15, s8
 8014e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e04:	f340 8790 	ble.w	8015d28 <iNemoEngine_API_Update+0x2740>
 8014e08:	eef1 4a04 	vmov.f32	s9, #20	; 0x40a00000  5.0
 8014e0c:	e001      	b.n	8014e12 <iNemoEngine_API_Update+0x182a>
 8014e0e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8014e12:	eddd 7a21 	vldr	s15, [sp, #132]	; 0x84
 8014e16:	781c      	ldrb	r4, [r3, #0]
 8014e18:	eef4 4ae7 	vcmpe.f32	s9, s15
 8014e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e20:	bfa8      	it	ge
 8014e22:	eef0 7a64 	vmovge.f32	s15, s9
 8014e26:	edcd 7a04 	vstr	s15, [sp, #16]
 8014e2a:	b1cc      	cbz	r4, 8014e60 <iNemoEngine_API_Update+0x1878>
 8014e2c:	785c      	ldrb	r4, [r3, #1]
 8014e2e:	2c00      	cmp	r4, #0
 8014e30:	f040 8774 	bne.w	8015d1c <iNemoEngine_API_Update+0x2734>
 8014e34:	ee75 7aa6 	vadd.f32	s15, s11, s13
 8014e38:	edd3 6a05 	vldr	s13, [r3, #20]
 8014e3c:	ee75 7a27 	vadd.f32	s15, s10, s15
 8014e40:	ee76 7a27 	vadd.f32	s15, s12, s15
 8014e44:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 8014e48:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014e4c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014e50:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014e54:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e5c:	f102 848b 	bmi.w	8017776 <iNemoEngine_API_Update+0x418e>
 8014e60:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8014e64:	461a      	mov	r2, r3
 8014e66:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 8014e6a:	ed9d 6a50 	vldr	s12, [sp, #320]	; 0x140
 8014e6e:	edcd 6a98 	vstr	s13, [sp, #608]	; 0x260
 8014e72:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014e76:	eef0 6a65 	vmov.f32	s13, s11
 8014e7a:	eee7 6a47 	vfms.f32	s13, s14, s14
 8014e7e:	2300      	movs	r3, #0
 8014e80:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
 8014e84:	ed9d 5a4e 	vldr	s10, [sp, #312]	; 0x138
 8014e88:	eddd 4a4f 	vldr	s9, [sp, #316]	; 0x13c
 8014e8c:	eddd 0a51 	vldr	s1, [sp, #324]	; 0x144
 8014e90:	ed8d 7a45 	vstr	s14, [sp, #276]	; 0x114
 8014e94:	ee26 4a06 	vmul.f32	s8, s12, s12
 8014e98:	ee25 2a05 	vmul.f32	s4, s10, s10
 8014e9c:	ee34 4a04 	vadd.f32	s8, s8, s8
 8014ea0:	eeb1 3ae6 	vsqrt.f32	s6, s13
 8014ea4:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 8014ea8:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
 8014eac:	9343      	str	r3, [sp, #268]	; 0x10c
 8014eae:	ee64 3a86 	vmul.f32	s7, s9, s12
 8014eb2:	ee25 0a24 	vmul.f32	s0, s10, s9
 8014eb6:	ee64 1aa4 	vmul.f32	s3, s9, s9
 8014eba:	ee64 6aa0 	vmul.f32	s13, s9, s1
 8014ebe:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8014ec2:	eea2 4a24 	vfma.f32	s8, s4, s9
 8014ec6:	ee73 3aa3 	vadd.f32	s7, s7, s7
 8014eca:	ee35 1ac4 	vsub.f32	s2, s11, s8
 8014ece:	ee25 4a06 	vmul.f32	s8, s10, s12
 8014ed2:	ee26 6a20 	vmul.f32	s12, s12, s1
 8014ed6:	ee71 1aa1 	vadd.f32	s3, s3, s3
 8014eda:	ee30 6a06 	vadd.f32	s12, s0, s12
 8014ede:	ee25 5a20 	vmul.f32	s10, s10, s1
 8014ee2:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8014ee6:	eee2 1a24 	vfma.f32	s3, s4, s9
 8014eea:	ee36 2a06 	vadd.f32	s4, s12, s12
 8014eee:	eeb0 6a63 	vmov.f32	s12, s7
 8014ef2:	eea5 6a24 	vfma.f32	s12, s10, s9
 8014ef6:	eee5 3a64 	vfms.f32	s7, s10, s9
 8014efa:	eeb0 5a66 	vmov.f32	s10, s13
 8014efe:	ee7a 6aa6 	vadd.f32	s13, s21, s13
 8014f02:	ee94 5a24 	vfnms.f32	s10, s8, s9
 8014f06:	eee4 6a64 	vfms.f32	s13, s8, s9
 8014f0a:	ee25 5a07 	vmul.f32	s10, s10, s14
 8014f0e:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 8014f12:	edcd 6a92 	vstr	s13, [sp, #584]	; 0x248
 8014f16:	ee75 6ae1 	vsub.f32	s13, s11, s3
 8014f1a:	ee79 5ae5 	vsub.f32	s11, s19, s11
 8014f1e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014f22:	ee75 1aa1 	vadd.f32	s3, s11, s3
 8014f26:	eee3 6a23 	vfma.f32	s13, s6, s7
 8014f2a:	ee26 7a07 	vmul.f32	s14, s12, s14
 8014f2e:	eddd 5a2a 	vldr	s11, [sp, #168]	; 0xa8
 8014f32:	eddd 4a2c 	vldr	s9, [sp, #176]	; 0xb0
 8014f36:	ed8d 9a99 	vstr	s18, [sp, #612]	; 0x264
 8014f3a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8014f3e:	eea3 7a01 	vfma.f32	s14, s6, s2
 8014f42:	edcd 6a91 	vstr	s13, [sp, #580]	; 0x244
 8014f46:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8014f4a:	edcd ca9a 	vstr	s25, [sp, #616]	; 0x268
 8014f4e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014f52:	eea3 5a02 	vfma.f32	s10, s6, s4
 8014f56:	ed8d 7a90 	vstr	s14, [sp, #576]	; 0x240
 8014f5a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8015068 <iNemoEngine_API_Update+0x1a80>
 8014f5e:	ed8d 3a44 	vstr	s6, [sp, #272]	; 0x110
 8014f62:	ee3a 6a46 	vsub.f32	s12, s20, s12
 8014f66:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8014f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f72:	ed8d 5a8f 	vstr	s10, [sp, #572]	; 0x23c
 8014f76:	edcd 1a3f 	vstr	s3, [sp, #252]	; 0xfc
 8014f7a:	edcd 1a94 	vstr	s3, [sp, #592]	; 0x250
 8014f7e:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8014f82:	ed8d 6a93 	vstr	s12, [sp, #588]	; 0x24c
 8014f86:	d541      	bpl.n	801500c <iNemoEngine_API_Update+0x1a24>
 8014f88:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8015038 <iNemoEngine_API_Update+0x1a50>
 8014f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f94:	dd3a      	ble.n	801500c <iNemoEngine_API_Update+0x1a24>
 8014f96:	ee79 7a67 	vsub.f32	s15, s18, s15
 8014f9a:	eef0 7ae7 	vabs.f32	s15, s15
 8014f9e:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8014fa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014faa:	dd5f      	ble.n	801506c <iNemoEngine_API_Update+0x1a84>
 8014fac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fb8:	f140 86a4 	bpl.w	8015d04 <iNemoEngine_API_Update+0x271c>
 8014fbc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801503c <iNemoEngine_API_Update+0x1a54>
 8014fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fc8:	f141 8185 	bpl.w	80162d6 <iNemoEngine_API_Update+0x2cee>
 8014fcc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801504c <iNemoEngine_API_Update+0x1a64>
 8014fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fd8:	f2c1 8185 	blt.w	80162e6 <iNemoEngine_API_Update+0x2cfe>
 8014fdc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8015040 <iNemoEngine_API_Update+0x1a58>
 8014fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fe8:	f141 824e 	bpl.w	8016488 <iNemoEngine_API_Update+0x2ea0>
 8014fec:	eddf 6a17 	vldr	s13, [pc, #92]	; 801504c <iNemoEngine_API_Update+0x1a64>
 8014ff0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8015044 <iNemoEngine_API_Update+0x1a5c>
 8014ff4:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8015048 <iNemoEngine_API_Update+0x1a60>
 8014ff8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014ffc:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015004:	eea6 7a86 	vfma.f32	s14, s13, s12
 8015008:	f001 b977 	b.w	80162fa <iNemoEngine_API_Update+0x2d12>
 801500c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015010:	e7c1      	b.n	8014f96 <iNemoEngine_API_Update+0x19ae>
 8015012:	bf00      	nop
 8015014:	3ecccccc 	.word	0x3ecccccc
 8015018:	3dcccccd 	.word	0x3dcccccd
 801501c:	3f666666 	.word	0x3f666666
 8015020:	00000000 	.word	0x00000000
 8015024:	3f333333 	.word	0x3f333333
 8015028:	bfb33333 	.word	0xbfb33333
 801502c:	3f7d6d54 	.word	0x3f7d6d54
 8015030:	3f7ae147 	.word	0x3f7ae147
 8015034:	3fb77778 	.word	0x3fb77778
 8015038:	3f4ccccd 	.word	0x3f4ccccd
 801503c:	3ba3d70a 	.word	0x3ba3d70a
 8015040:	3c75c28f 	.word	0x3c75c28f
 8015044:	3f19999a 	.word	0x3f19999a
 8015048:	43480000 	.word	0x43480000
 801504c:	3c23d70a 	.word	0x3c23d70a
 8015050:	3b449ba6 	.word	0x3b449ba6
 8015054:	3fb33333 	.word	0x3fb33333
 8015058:	3ecccccd 	.word	0x3ecccccd
 801505c:	3f8f5c29 	.word	0x3f8f5c29
 8015060:	3f59999a 	.word	0x3f59999a
 8015064:	3e4ccccd 	.word	0x3e4ccccd
 8015068:	3f99999a 	.word	0x3f99999a
 801506c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015070:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 801504c <iNemoEngine_API_Update+0x1a64>
 8015074:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 8015050 <iNemoEngine_API_Update+0x1a68>
 8015078:	eeb0 7a65 	vmov.f32	s14, s11
 801507c:	eef0 6a65 	vmov.f32	s13, s11
 8015080:	ed8d 6a65 	vstr	s12, [sp, #404]	; 0x194
 8015084:	ed9d 6a04 	vldr	s12, [sp, #16]
 8015088:	ed9d 3a84 	vldr	s6, [sp, #528]	; 0x210
 801508c:	ed9d 5a83 	vldr	s10, [sp, #524]	; 0x20c
 8015090:	ed9d 2a88 	vldr	s4, [sp, #544]	; 0x220
 8015094:	eddd 4a8c 	vldr	s9, [sp, #560]	; 0x230
 8015098:	9a06      	ldr	r2, [sp, #24]
 801509a:	ed8d 4a66 	vstr	s8, [sp, #408]	; 0x198
 801509e:	ee66 3a0f 	vmul.f32	s7, s12, s30
 80150a2:	ed9d 6a8d 	vldr	s12, [sp, #564]	; 0x234
 80150a6:	7b13      	ldrb	r3, [r2, #12]
 80150a8:	ee23 3a23 	vmul.f32	s6, s6, s7
 80150ac:	ee23 5a85 	vmul.f32	s10, s7, s10
 80150b0:	ed8d 3a84 	vstr	s6, [sp, #528]	; 0x210
 80150b4:	ed9d 3a85 	vldr	s6, [sp, #532]	; 0x214
 80150b8:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 80150bc:	ee63 3a23 	vmul.f32	s7, s6, s7
 80150c0:	ed9d 3a86 	vldr	s6, [sp, #536]	; 0x218
 80150c4:	edcd 3a85 	vstr	s7, [sp, #532]	; 0x214
 80150c8:	eddd 3a87 	vldr	s7, [sp, #540]	; 0x21c
 80150cc:	ee2c 3a03 	vmul.f32	s6, s24, s6
 80150d0:	ee6c 3a23 	vmul.f32	s7, s24, s7
 80150d4:	ee74 4aa4 	vadd.f32	s9, s9, s9
 80150d8:	ee2c ca02 	vmul.f32	s24, s24, s4
 80150dc:	ee36 6a06 	vadd.f32	s12, s12, s12
 80150e0:	ed9d 2a8e 	vldr	s4, [sp, #568]	; 0x238
 80150e4:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 80150e8:	ee64 4a87 	vmul.f32	s9, s9, s14
 80150ec:	ee26 6a07 	vmul.f32	s12, s12, s14
 80150f0:	ee2f fa02 	vmul.f32	s30, s30, s4
 80150f4:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 80150f8:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 80150fc:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 8015100:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 8015104:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 8015108:	2b00      	cmp	r3, #0
 801510a:	f000 8525 	beq.w	8015b58 <iNemoEngine_API_Update+0x2570>
 801510e:	ee27 3a03 	vmul.f32	s6, s14, s6
 8015112:	ee67 3a23 	vmul.f32	s7, s14, s7
 8015116:	ee27 ca0c 	vmul.f32	s24, s14, s24
 801511a:	ed9d 2a22 	vldr	s4, [sp, #136]	; 0x88
 801511e:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 8015122:	ee37 7a07 	vadd.f32	s14, s14, s14
 8015126:	4613      	mov	r3, r2
 8015128:	ee25 2a82 	vmul.f32	s4, s11, s4
 801512c:	7b92      	ldrb	r2, [r2, #14]
 801512e:	7b5b      	ldrb	r3, [r3, #13]
 8015130:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 8015134:	ee64 5a25 	vmul.f32	s11, s8, s11
 8015138:	ee26 6a07 	vmul.f32	s12, s12, s14
 801513c:	edcd 5a66 	vstr	s11, [sp, #408]	; 0x198
 8015140:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 8015144:	ed8d 2a5f 	vstr	s4, [sp, #380]	; 0x17c
 8015148:	ed8d 2a60 	vstr	s4, [sp, #384]	; 0x180
 801514c:	ed8d 2a61 	vstr	s4, [sp, #388]	; 0x184
 8015150:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 8015154:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 8015158:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 801515c:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 8015160:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 8015164:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 8015168:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 801516c:	b15a      	cbz	r2, 8015186 <iNemoEngine_API_Update+0x1b9e>
 801516e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801517a:	dd04      	ble.n	8015186 <iNemoEngine_API_Update+0x1b9e>
 801517c:	2100      	movs	r1, #0
 801517e:	f8ad 10eb 	strh.w	r1, [sp, #235]	; 0xeb
 8015182:	f88d 10ed 	strb.w	r1, [sp, #237]	; 0xed
 8015186:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 801518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801518e:	dd08      	ble.n	80151a2 <iNemoEngine_API_Update+0x1bba>
 8015190:	9906      	ldr	r1, [sp, #24]
 8015192:	edd1 7a64 	vldr	s15, [r1, #400]	; 0x190
 8015196:	eef4 7ae8 	vcmpe.f32	s15, s17
 801519a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801519e:	f280 85a4 	bge.w	8015cea <iNemoEngine_API_Update+0x2702>
 80151a2:	b133      	cbz	r3, 80151b2 <iNemoEngine_API_Update+0x1bca>
 80151a4:	f240 1101 	movw	r1, #257	; 0x101
 80151a8:	f8ad 10e8 	strh.w	r1, [sp, #232]	; 0xe8
 80151ac:	2101      	movs	r1, #1
 80151ae:	f88d 10ea 	strb.w	r1, [sp, #234]	; 0xea
 80151b2:	2401      	movs	r4, #1
 80151b4:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 80151b8:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 80151bc:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 8015054 <iNemoEngine_API_Update+0x1a6c>
 80151c0:	eef4 cae7 	vcmpe.f32	s25, s15
 80151c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151c8:	dc07      	bgt.n	80151da <iNemoEngine_API_Update+0x1bf2>
 80151ca:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 8015058 <iNemoEngine_API_Update+0x1a70>
 80151ce:	eef4 cae7 	vcmpe.f32	s25, s15
 80151d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151d6:	f141 801d 	bpl.w	8016214 <iNemoEngine_API_Update+0x2c2c>
 80151da:	2300      	movs	r3, #0
 80151dc:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 80151e0:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 80151e4:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 80151e8:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 80151ec:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 801505c <iNemoEngine_API_Update+0x1a74>
 80151f0:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80151f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151f8:	dc07      	bgt.n	801520a <iNemoEngine_API_Update+0x1c22>
 80151fa:	ed5f 7a67 	vldr	s15, [pc, #-412]	; 8015060 <iNemoEngine_API_Update+0x1a78>
 80151fe:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8015202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015206:	f140 86ed 	bpl.w	8015fe4 <iNemoEngine_API_Update+0x29fc>
 801520a:	2300      	movs	r3, #0
 801520c:	f8ad 30eb 	strh.w	r3, [sp, #235]	; 0xeb
 8015210:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
 8015214:	f8ad 30f1 	strh.w	r3, [sp, #241]	; 0xf1
 8015218:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801521c:	eef4 fae7 	vcmpe.f32	s31, s15
 8015220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015224:	f340 8486 	ble.w	8015b34 <iNemoEngine_API_Update+0x254c>
 8015228:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801522c:	ee7f 7aa7 	vadd.f32	s15, s31, s15
 8015230:	9a06      	ldr	r2, [sp, #24]
 8015232:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015236:	2300      	movs	r3, #0
 8015238:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801523c:	ee27 fa8f 	vmul.f32	s30, s15, s30
 8015240:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8015244:	eef4 fae7 	vcmpe.f32	s31, s15
 8015248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801524c:	bfc4      	itt	gt
 801524e:	f88d 30f1 	strbgt.w	r3, [sp, #241]	; 0xf1
 8015252:	f88d 30f3 	strbgt.w	r3, [sp, #243]	; 0xf3
 8015256:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 801525a:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 801525e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8015260:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 8015264:	2b0e      	cmp	r3, #14
 8015266:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 801526a:	f340 8567 	ble.w	8015d3c <iNemoEngine_API_Update+0x2754>
 801526e:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8015272:	eeb4 dae7 	vcmpe.f32	s26, s15
 8015276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801527a:	f340 82ed 	ble.w	8015858 <iNemoEngine_API_Update+0x2270>
 801527e:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8015282:	eef4 7acb 	vcmpe.f32	s15, s22
 8015286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801528a:	f340 82e5 	ble.w	8015858 <iNemoEngine_API_Update+0x2270>
 801528e:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 8015292:	eef4 7aed 	vcmpe.f32	s15, s27
 8015296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801529a:	f340 82dd 	ble.w	8015858 <iNemoEngine_API_Update+0x2270>
 801529e:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8015064 <iNemoEngine_API_Update+0x1a7c>
 80152a2:	eeb0 7ace 	vabs.f32	s14, s28
 80152a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ae:	f140 82d3 	bpl.w	8015858 <iNemoEngine_API_Update+0x2270>
 80152b2:	eeb0 7aee 	vabs.f32	s14, s29
 80152b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152be:	f140 82cb 	bpl.w	8015858 <iNemoEngine_API_Update+0x2270>
 80152c2:	eeb0 7aeb 	vabs.f32	s14, s23
 80152c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ce:	f140 82c3 	bpl.w	8015858 <iNemoEngine_API_Update+0x2270>
 80152d2:	ed5f 7a9b 	vldr	s15, [pc, #-620]	; 8015068 <iNemoEngine_API_Update+0x1a80>
 80152d6:	eef0 aaea 	vabs.f32	s21, s21
 80152da:	eef4 aae7 	vcmpe.f32	s21, s15
 80152de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152e2:	f140 82b9 	bpl.w	8015858 <iNemoEngine_API_Update+0x2270>
 80152e6:	eeb0 aaca 	vabs.f32	s20, s20
 80152ea:	eeb4 aae7 	vcmpe.f32	s20, s15
 80152ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f2:	f140 82b1 	bpl.w	8015858 <iNemoEngine_API_Update+0x2270>
 80152f6:	eef0 9ae9 	vabs.f32	s19, s19
 80152fa:	eef4 9ae7 	vcmpe.f32	s19, s15
 80152fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015302:	f140 82a9 	bpl.w	8015858 <iNemoEngine_API_Update+0x2270>
 8015306:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015308:	9806      	ldr	r0, [sp, #24]
 801530a:	ed93 6a00 	vldr	s12, [r3]
 801530e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015310:	f890 11a0 	ldrb.w	r1, [r0, #416]	; 0x1a0
 8015314:	ed93 7a00 	vldr	s14, [r3]
 8015318:	f200 73a4 	addw	r3, r0, #1956	; 0x7a4
 801531c:	edd3 4a00 	vldr	s9, [r3]
 8015320:	2909      	cmp	r1, #9
 8015322:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8015326:	f500 63f6 	add.w	r3, r0, #1968	; 0x7b0
 801532a:	ed93 5a00 	vldr	s10, [r3]
 801532e:	bf8c      	ite	hi
 8015330:	220a      	movhi	r2, #10
 8015332:	2205      	movls	r2, #5
 8015334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015338:	bfb4      	ite	lt
 801533a:	eef0 7a64 	vmovlt.f32	s15, s9
 801533e:	eef0 7a46 	vmovge.f32	s15, s12
 8015342:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015346:	bf8c      	ite	hi
 8015348:	eef0 5a64 	vmovhi.f32	s11, s9
 801534c:	eef0 5a46 	vmovls.f32	s11, s12
 8015350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015354:	ee36 6a24 	vadd.f32	s12, s12, s9
 8015358:	eef4 5ac5 	vcmpe.f32	s11, s10
 801535c:	bfb8      	it	lt
 801535e:	eef0 7a45 	vmovlt.f32	s15, s10
 8015362:	f200 73bc 	addw	r3, r0, #1980	; 0x7bc
 8015366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801536a:	bf88      	it	hi
 801536c:	eef0 5a45 	vmovhi.f32	s11, s10
 8015370:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015374:	ed93 5a00 	vldr	s10, [r3]
 8015378:	eef4 7ac5 	vcmpe.f32	s15, s10
 801537c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015380:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015384:	bfb8      	it	lt
 8015386:	eef0 7a45 	vmovlt.f32	s15, s10
 801538a:	f500 63f9 	add.w	r3, r0, #1992	; 0x7c8
 801538e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015392:	bf88      	it	hi
 8015394:	eef0 5a45 	vmovhi.f32	s11, s10
 8015398:	ee36 6a05 	vadd.f32	s12, s12, s10
 801539c:	ed93 5a00 	vldr	s10, [r3]
 80153a0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80153a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a8:	eef4 5ac5 	vcmpe.f32	s11, s10
 80153ac:	bfb8      	it	lt
 80153ae:	eef0 7a45 	vmovlt.f32	s15, s10
 80153b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153b6:	bf88      	it	hi
 80153b8:	eef0 5a45 	vmovhi.f32	s11, s10
 80153bc:	2a05      	cmp	r2, #5
 80153be:	ee36 6a05 	vadd.f32	s12, s12, s10
 80153c2:	d065      	beq.n	8015490 <iNemoEngine_API_Update+0x1ea8>
 80153c4:	f200 73d4 	addw	r3, r0, #2004	; 0x7d4
 80153c8:	ed93 5a00 	vldr	s10, [r3]
 80153cc:	eef4 7ac5 	vcmpe.f32	s15, s10
 80153d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d4:	eef4 5ac5 	vcmpe.f32	s11, s10
 80153d8:	bfb8      	it	lt
 80153da:	eef0 7a45 	vmovlt.f32	s15, s10
 80153de:	f500 63fc 	add.w	r3, r0, #2016	; 0x7e0
 80153e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e6:	bf88      	it	hi
 80153e8:	eef0 5a45 	vmovhi.f32	s11, s10
 80153ec:	ee36 6a05 	vadd.f32	s12, s12, s10
 80153f0:	ed93 5a00 	vldr	s10, [r3]
 80153f4:	eef4 7ac5 	vcmpe.f32	s15, s10
 80153f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153fc:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015400:	bfb8      	it	lt
 8015402:	eef0 7a45 	vmovlt.f32	s15, s10
 8015406:	f200 73ec 	addw	r3, r0, #2028	; 0x7ec
 801540a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801540e:	bf88      	it	hi
 8015410:	eef0 5a45 	vmovhi.f32	s11, s10
 8015414:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015418:	ed93 5a00 	vldr	s10, [r3]
 801541c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015424:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015428:	bfb8      	it	lt
 801542a:	eef0 7a45 	vmovlt.f32	s15, s10
 801542e:	f500 63ff 	add.w	r3, r0, #2040	; 0x7f8
 8015432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015436:	bf88      	it	hi
 8015438:	eef0 5a45 	vmovhi.f32	s11, s10
 801543c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015440:	ed93 5a00 	vldr	s10, [r3]
 8015444:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801544c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015450:	bfb8      	it	lt
 8015452:	eef0 7a45 	vmovlt.f32	s15, s10
 8015456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801545a:	bf88      	it	hi
 801545c:	eef0 5a45 	vmovhi.f32	s11, s10
 8015460:	2a0a      	cmp	r2, #10
 8015462:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015466:	d113      	bne.n	8015490 <iNemoEngine_API_Update+0x1ea8>
 8015468:	f600 0304 	addw	r3, r0, #2052	; 0x804
 801546c:	ed93 5a00 	vldr	s10, [r3]
 8015470:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015478:	eef4 5ac5 	vcmpe.f32	s11, s10
 801547c:	bfb8      	it	lt
 801547e:	eef0 7a45 	vmovlt.f32	s15, s10
 8015482:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801548a:	bf88      	it	hi
 801548c:	eef0 5a45 	vmovhi.f32	s11, s10
 8015490:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8015494:	eddf 5aeb 	vldr	s11, [pc, #940]	; 8015844 <iNemoEngine_API_Update+0x225c>
 8015498:	ed9f 5aeb 	vldr	s10, [pc, #940]	; 8015848 <iNemoEngine_API_Update+0x2260>
 801549c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80154a0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80154a4:	eef4 7ae5 	vcmpe.f32	s15, s11
 80154a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ac:	f300 81d4 	bgt.w	8015858 <iNemoEngine_API_Update+0x2270>
 80154b0:	eef0 7ac6 	vabs.f32	s15, s12
 80154b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80154b8:	ed9f 6ae4 	vldr	s12, [pc, #912]	; 801584c <iNemoEngine_API_Update+0x2264>
 80154bc:	eef4 7ac6 	vcmpe.f32	s15, s12
 80154c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154c4:	f300 81c8 	bgt.w	8015858 <iNemoEngine_API_Update+0x2270>
 80154c8:	9806      	ldr	r0, [sp, #24]
 80154ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80154cc:	ed93 6a00 	vldr	s12, [r3]
 80154d0:	f500 63f5 	add.w	r3, r0, #1960	; 0x7a8
 80154d4:	edd3 4a00 	vldr	s9, [r3]
 80154d8:	f200 73b4 	addw	r3, r0, #1972	; 0x7b4
 80154dc:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80154e0:	ed93 5a00 	vldr	s10, [r3]
 80154e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154e8:	bfb4      	ite	lt
 80154ea:	eef0 7a64 	vmovlt.f32	s15, s9
 80154ee:	eef0 7a46 	vmovge.f32	s15, s12
 80154f2:	eef4 7ac5 	vcmpe.f32	s15, s10
 80154f6:	bf8c      	ite	hi
 80154f8:	eef0 5a64 	vmovhi.f32	s11, s9
 80154fc:	eef0 5a46 	vmovls.f32	s11, s12
 8015500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015504:	ee36 6a24 	vadd.f32	s12, s12, s9
 8015508:	eef4 5ac5 	vcmpe.f32	s11, s10
 801550c:	bfb8      	it	lt
 801550e:	eef0 7a45 	vmovlt.f32	s15, s10
 8015512:	f500 63f8 	add.w	r3, r0, #1984	; 0x7c0
 8015516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801551a:	bf88      	it	hi
 801551c:	eef0 5a45 	vmovhi.f32	s11, s10
 8015520:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015524:	ed93 5a00 	vldr	s10, [r3]
 8015528:	eef4 7ac5 	vcmpe.f32	s15, s10
 801552c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015530:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015534:	bfb8      	it	lt
 8015536:	eef0 7a45 	vmovlt.f32	s15, s10
 801553a:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
 801553e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015542:	bf88      	it	hi
 8015544:	eef0 5a45 	vmovhi.f32	s11, s10
 8015548:	ee36 6a05 	vadd.f32	s12, s12, s10
 801554c:	ed93 5a00 	vldr	s10, [r3]
 8015550:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015558:	eef4 5ac5 	vcmpe.f32	s11, s10
 801555c:	bfb8      	it	lt
 801555e:	eef0 7a45 	vmovlt.f32	s15, s10
 8015562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015566:	bf88      	it	hi
 8015568:	eef0 5a45 	vmovhi.f32	s11, s10
 801556c:	2a05      	cmp	r2, #5
 801556e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015572:	d065      	beq.n	8015640 <iNemoEngine_API_Update+0x2058>
 8015574:	f500 63fb 	add.w	r3, r0, #2008	; 0x7d8
 8015578:	ed93 5a00 	vldr	s10, [r3]
 801557c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015584:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015588:	bfb8      	it	lt
 801558a:	eef0 7a45 	vmovlt.f32	s15, s10
 801558e:	f200 73e4 	addw	r3, r0, #2020	; 0x7e4
 8015592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015596:	bf88      	it	hi
 8015598:	eef0 5a45 	vmovhi.f32	s11, s10
 801559c:	ee36 6a05 	vadd.f32	s12, s12, s10
 80155a0:	ed93 5a00 	vldr	s10, [r3]
 80155a4:	eef4 7ac5 	vcmpe.f32	s15, s10
 80155a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ac:	eef4 5ac5 	vcmpe.f32	s11, s10
 80155b0:	bfb8      	it	lt
 80155b2:	eef0 7a45 	vmovlt.f32	s15, s10
 80155b6:	f500 63fe 	add.w	r3, r0, #2032	; 0x7f0
 80155ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155be:	bf88      	it	hi
 80155c0:	eef0 5a45 	vmovhi.f32	s11, s10
 80155c4:	ee36 6a05 	vadd.f32	s12, s12, s10
 80155c8:	ed93 5a00 	vldr	s10, [r3]
 80155cc:	eef4 7ac5 	vcmpe.f32	s15, s10
 80155d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155d4:	eef4 5ac5 	vcmpe.f32	s11, s10
 80155d8:	bfb8      	it	lt
 80155da:	eef0 7a45 	vmovlt.f32	s15, s10
 80155de:	f200 73fc 	addw	r3, r0, #2044	; 0x7fc
 80155e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155e6:	bf88      	it	hi
 80155e8:	eef0 5a45 	vmovhi.f32	s11, s10
 80155ec:	ee36 6a05 	vadd.f32	s12, s12, s10
 80155f0:	ed93 5a00 	vldr	s10, [r3]
 80155f4:	eef4 7ac5 	vcmpe.f32	s15, s10
 80155f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155fc:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015600:	bfb8      	it	lt
 8015602:	eef0 7a45 	vmovlt.f32	s15, s10
 8015606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801560a:	bf88      	it	hi
 801560c:	eef0 5a45 	vmovhi.f32	s11, s10
 8015610:	2a0a      	cmp	r2, #10
 8015612:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015616:	d113      	bne.n	8015640 <iNemoEngine_API_Update+0x2058>
 8015618:	f600 0308 	addw	r3, r0, #2056	; 0x808
 801561c:	ed93 5a00 	vldr	s10, [r3]
 8015620:	eef4 7ac5 	vcmpe.f32	s15, s10
 8015624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015628:	eef4 5ac5 	vcmpe.f32	s11, s10
 801562c:	bfb8      	it	lt
 801562e:	eef0 7a45 	vmovlt.f32	s15, s10
 8015632:	ee36 6a05 	vadd.f32	s12, s12, s10
 8015636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801563a:	bf88      	it	hi
 801563c:	eef0 5a45 	vmovhi.f32	s11, s10
 8015640:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8015644:	eddf 5a7f 	vldr	s11, [pc, #508]	; 8015844 <iNemoEngine_API_Update+0x225c>
 8015648:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 8015848 <iNemoEngine_API_Update+0x2260>
 801564c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015650:	ee26 6a05 	vmul.f32	s12, s12, s10
 8015654:	eef4 7ae5 	vcmpe.f32	s15, s11
 8015658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801565c:	f300 80fc 	bgt.w	8015858 <iNemoEngine_API_Update+0x2270>
 8015660:	eef0 7ac6 	vabs.f32	s15, s12
 8015664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015668:	ed9f 6a78 	vldr	s12, [pc, #480]	; 801584c <iNemoEngine_API_Update+0x2264>
 801566c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8015670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015674:	f300 80f0 	bgt.w	8015858 <iNemoEngine_API_Update+0x2270>
 8015678:	9806      	ldr	r0, [sp, #24]
 801567a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801567c:	ed93 5a00 	vldr	s10, [r3]
 8015680:	f200 73ac 	addw	r3, r0, #1964	; 0x7ac
 8015684:	edd3 4a00 	vldr	s9, [r3]
 8015688:	f500 63f7 	add.w	r3, r0, #1976	; 0x7b8
 801568c:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8015690:	ed93 6a00 	vldr	s12, [r3]
 8015694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015698:	bfb4      	ite	lt
 801569a:	eef0 7a64 	vmovlt.f32	s15, s9
 801569e:	eef0 7a45 	vmovge.f32	s15, s10
 80156a2:	bf8c      	ite	hi
 80156a4:	eef0 5a64 	vmovhi.f32	s11, s9
 80156a8:	eef0 5a45 	vmovls.f32	s11, s10
 80156ac:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80156b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156b4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80156b8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80156bc:	bfa8      	it	ge
 80156be:	eef0 7a46 	vmovge.f32	s15, s12
 80156c2:	f200 73c4 	addw	r3, r0, #1988	; 0x7c4
 80156c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ca:	bf98      	it	ls
 80156cc:	eef0 5a46 	vmovls.f32	s11, s12
 80156d0:	ee76 4a05 	vadd.f32	s9, s12, s10
 80156d4:	ed93 6a00 	vldr	s12, [r3]
 80156d8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80156dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156e0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80156e4:	bfa8      	it	ge
 80156e6:	eef0 7a46 	vmovge.f32	s15, s12
 80156ea:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
 80156ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156f2:	bf8c      	ite	hi
 80156f4:	eeb0 5a65 	vmovhi.f32	s10, s11
 80156f8:	eeb0 5a46 	vmovls.f32	s10, s12
 80156fc:	edd3 5a00 	vldr	s11, [r3]
 8015700:	eef4 5ae7 	vcmpe.f32	s11, s15
 8015704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015708:	ee36 6a24 	vadd.f32	s12, s12, s9
 801570c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8015710:	bfa8      	it	ge
 8015712:	eef0 7a65 	vmovge.f32	s15, s11
 8015716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801571a:	ee35 6a86 	vadd.f32	s12, s11, s12
 801571e:	bf88      	it	hi
 8015720:	eef0 5a45 	vmovhi.f32	s11, s10
 8015724:	2a05      	cmp	r2, #5
 8015726:	d065      	beq.n	80157f4 <iNemoEngine_API_Update+0x220c>
 8015728:	f200 73dc 	addw	r3, r0, #2012	; 0x7dc
 801572c:	ed93 5a00 	vldr	s10, [r3]
 8015730:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8015734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015738:	eeb4 5ae5 	vcmpe.f32	s10, s11
 801573c:	bfa8      	it	ge
 801573e:	eef0 7a45 	vmovge.f32	s15, s10
 8015742:	f500 63fd 	add.w	r3, r0, #2024	; 0x7e8
 8015746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801574a:	bf98      	it	ls
 801574c:	eef0 5a45 	vmovls.f32	s11, s10
 8015750:	ee35 5a06 	vadd.f32	s10, s10, s12
 8015754:	ed93 6a00 	vldr	s12, [r3]
 8015758:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801575c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015760:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8015764:	bfa8      	it	ge
 8015766:	eef0 7a46 	vmovge.f32	s15, s12
 801576a:	f200 73f4 	addw	r3, r0, #2036	; 0x7f4
 801576e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015772:	bf98      	it	ls
 8015774:	eef0 5a46 	vmovls.f32	s11, s12
 8015778:	ee36 5a05 	vadd.f32	s10, s12, s10
 801577c:	ed93 6a00 	vldr	s12, [r3]
 8015780:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8015784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015788:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801578c:	bfa8      	it	ge
 801578e:	eef0 7a46 	vmovge.f32	s15, s12
 8015792:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8015796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801579a:	bf98      	it	ls
 801579c:	eef0 5a46 	vmovls.f32	s11, s12
 80157a0:	ee36 6a05 	vadd.f32	s12, s12, s10
 80157a4:	ed93 5a00 	vldr	s10, [r3]
 80157a8:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80157ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157b0:	eeb4 5ae5 	vcmpe.f32	s10, s11
 80157b4:	bfa8      	it	ge
 80157b6:	eef0 7a45 	vmovge.f32	s15, s10
 80157ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157be:	bf98      	it	ls
 80157c0:	eef0 5a45 	vmovls.f32	s11, s10
 80157c4:	2a0a      	cmp	r2, #10
 80157c6:	ee35 6a06 	vadd.f32	s12, s10, s12
 80157ca:	d113      	bne.n	80157f4 <iNemoEngine_API_Update+0x220c>
 80157cc:	f600 030c 	addw	r3, r0, #2060	; 0x80c
 80157d0:	ed93 5a00 	vldr	s10, [r3]
 80157d4:	eef4 7ac5 	vcmpe.f32	s15, s10
 80157d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157dc:	eef4 5ac5 	vcmpe.f32	s11, s10
 80157e0:	bfb8      	it	lt
 80157e2:	eef0 7a45 	vmovlt.f32	s15, s10
 80157e6:	ee36 6a05 	vadd.f32	s12, s12, s10
 80157ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ee:	bf88      	it	hi
 80157f0:	eef0 5a45 	vmovhi.f32	s11, s10
 80157f4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80157f8:	eddf 5a12 	vldr	s11, [pc, #72]	; 8015844 <iNemoEngine_API_Update+0x225c>
 80157fc:	ed9f 5a12 	vldr	s10, [pc, #72]	; 8015848 <iNemoEngine_API_Update+0x2260>
 8015800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015804:	ee26 6a05 	vmul.f32	s12, s12, s10
 8015808:	eef4 7ae5 	vcmpe.f32	s15, s11
 801580c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015810:	dc22      	bgt.n	8015858 <iNemoEngine_API_Update+0x2270>
 8015812:	eef0 7ac6 	vabs.f32	s15, s12
 8015816:	ee27 7a87 	vmul.f32	s14, s15, s14
 801581a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801584c <iNemoEngine_API_Update+0x2264>
 801581e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015826:	dc17      	bgt.n	8015858 <iNemoEngine_API_Update+0x2270>
 8015828:	9b06      	ldr	r3, [sp, #24]
 801582a:	795b      	ldrb	r3, [r3, #5]
 801582c:	2b00      	cmp	r3, #0
 801582e:	f002 8117 	beq.w	8017a60 <iNemoEngine_API_Update+0x4478>
 8015832:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8015836:	2a01      	cmp	r2, #1
 8015838:	f001 87d1 	beq.w	80177de <iNemoEngine_API_Update+0x41f6>
 801583c:	f04f 0901 	mov.w	r9, #1
 8015840:	f000 bc0b 	b.w	801605a <iNemoEngine_API_Update+0x2a72>
 8015844:	3be56041 	.word	0x3be56041
 8015848:	3dcccccd 	.word	0x3dcccccd
 801584c:	3e333333 	.word	0x3e333333
 8015850:	42480000 	.word	0x42480000
 8015854:	00000000 	.word	0x00000000
 8015858:	9b06      	ldr	r3, [sp, #24]
 801585a:	795b      	ldrb	r3, [r3, #5]
 801585c:	f04f 0900 	mov.w	r9, #0
 8015860:	f8ad 90ee 	strh.w	r9, [sp, #238]	; 0xee
 8015864:	f88d 90f0 	strb.w	r9, [sp, #240]	; 0xf0
 8015868:	2b00      	cmp	r3, #0
 801586a:	f040 83f1 	bne.w	8016050 <iNemoEngine_API_Update+0x2a68>
 801586e:	9906      	ldr	r1, [sp, #24]
 8015870:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 8015874:	9295      	str	r2, [sp, #596]	; 0x254
 8015876:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 801587a:	9296      	str	r2, [sp, #600]	; 0x258
 801587c:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 8015880:	9297      	str	r2, [sp, #604]	; 0x25c
 8015882:	2200      	movs	r2, #0
 8015884:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8015888:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 801588c:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8015890:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8015894:	704a      	strb	r2, [r1, #1]
 8015896:	ed5f 7a12 	vldr	s15, [pc, #-72]	; 8015850 <iNemoEngine_API_Update+0x2268>
 801589a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801589e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158a2:	f2c0 8138 	blt.w	8015b16 <iNemoEngine_API_Update+0x252e>
 80158a6:	9906      	ldr	r1, [sp, #24]
 80158a8:	2200      	movs	r2, #0
 80158aa:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 80158ae:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 80158b2:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 80158b6:	2b01      	cmp	r3, #1
 80158b8:	d125      	bne.n	8015906 <iNemoEngine_API_Update+0x231e>
 80158ba:	eddd 4a86 	vldr	s9, [sp, #536]	; 0x218
 80158be:	ed9d 6a5f 	vldr	s12, [sp, #380]	; 0x17c
 80158c2:	ed9d 5a87 	vldr	s10, [sp, #540]	; 0x21c
 80158c6:	ed9d 7a60 	vldr	s14, [sp, #384]	; 0x180
 80158ca:	eddd 5a88 	vldr	s11, [sp, #544]	; 0x220
 80158ce:	eddd 7a61 	vldr	s15, [sp, #388]	; 0x184
 80158d2:	eeb6 4a08 	vmov.f32	s8, #104	; 0x3f400000  0.750
 80158d6:	ee64 4a84 	vmul.f32	s9, s9, s8
 80158da:	ee36 6a06 	vadd.f32	s12, s12, s12
 80158de:	ee25 5a04 	vmul.f32	s10, s10, s8
 80158e2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80158e6:	ee65 5a84 	vmul.f32	s11, s11, s8
 80158ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80158ee:	edcd 4a86 	vstr	s9, [sp, #536]	; 0x218
 80158f2:	ed8d 6a5f 	vstr	s12, [sp, #380]	; 0x17c
 80158f6:	ed8d 5a87 	vstr	s10, [sp, #540]	; 0x21c
 80158fa:	ed8d 7a60 	vstr	s14, [sp, #384]	; 0x180
 80158fe:	edcd 5a88 	vstr	s11, [sp, #544]	; 0x220
 8015902:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 8015906:	9c06      	ldr	r4, [sp, #24]
 8015908:	ed9d 6a60 	vldr	s12, [sp, #384]	; 0x180
 801590c:	ed94 2a7f 	vldr	s4, [r4, #508]	; 0x1fc
 8015910:	edd4 1a75 	vldr	s3, [r4, #468]	; 0x1d4
 8015914:	edd4 2a89 	vldr	s5, [r4, #548]	; 0x224
 8015918:	edd4 3a93 	vldr	s7, [r4, #588]	; 0x24c
 801591c:	eddd 0a5f 	vldr	s1, [sp, #380]	; 0x17c
 8015920:	ed9d 1a61 	vldr	s2, [sp, #388]	; 0x184
 8015924:	ed94 4a9d 	vldr	s8, [r4, #628]	; 0x274
 8015928:	edd4 4aa7 	vldr	s9, [r4, #668]	; 0x29c
 801592c:	ed94 5ab1 	vldr	s10, [r4, #708]	; 0x2c4
 8015930:	ed9d 3a8b 	vldr	s6, [sp, #556]	; 0x22c
 8015934:	ed9d 7a89 	vldr	s14, [sp, #548]	; 0x224
 8015938:	eddd 7a8a 	vldr	s15, [sp, #552]	; 0x228
 801593c:	edd4 5abb 	vldr	s11, [r4, #748]	; 0x2ec
 8015940:	eea6 2a06 	vfma.f32	s4, s12, s12
 8015944:	ab83      	add	r3, sp, #524	; 0x20c
 8015946:	aa8f      	add	r2, sp, #572	; 0x23c
 8015948:	ed9d 6a62 	vldr	s12, [sp, #392]	; 0x188
 801594c:	ed84 2a7f 	vstr	s4, [r4, #508]	; 0x1fc
 8015950:	eee0 1aa0 	vfma.f32	s3, s1, s1
 8015954:	a93a      	add	r1, sp, #232	; 0xe8
 8015956:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
 801595a:	eee1 2a01 	vfma.f32	s5, s2, s2
 801595e:	eee6 3a06 	vfma.f32	s7, s12, s12
 8015962:	eddd 0a63 	vldr	s1, [sp, #396]	; 0x18c
 8015966:	ed9d 1a64 	vldr	s2, [sp, #400]	; 0x190
 801596a:	ed9d 6a65 	vldr	s12, [sp, #404]	; 0x194
 801596e:	edc4 1a75 	vstr	s3, [r4, #468]	; 0x1d4
 8015972:	eea0 4aa0 	vfma.f32	s8, s1, s1
 8015976:	eee1 4a01 	vfma.f32	s9, s2, s2
 801597a:	eea6 5a06 	vfma.f32	s10, s12, s12
 801597e:	eddd 0a66 	vldr	s1, [sp, #408]	; 0x198
 8015982:	ed9d 1a67 	vldr	s2, [sp, #412]	; 0x19c
 8015986:	ed94 6ac5 	vldr	s12, [r4, #788]	; 0x314
 801598a:	edc4 2a89 	vstr	s5, [r4, #548]	; 0x224
 801598e:	eee0 5aa0 	vfma.f32	s11, s1, s1
 8015992:	eea1 6a01 	vfma.f32	s12, s2, s2
 8015996:	ee26 7a87 	vmul.f32	s14, s13, s14
 801599a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801599e:	ee66 6a83 	vmul.f32	s13, s13, s6
 80159a2:	ee27 7a28 	vmul.f32	s14, s14, s17
 80159a6:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80159aa:	ee66 8aa8 	vmul.f32	s17, s13, s17
 80159ae:	ed8d 7a89 	vstr	s14, [sp, #548]	; 0x224
 80159b2:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 80159b6:	edc4 3a93 	vstr	s7, [r4, #588]	; 0x24c
 80159ba:	ed84 4a9d 	vstr	s8, [r4, #628]	; 0x274
 80159be:	edc4 4aa7 	vstr	s9, [r4, #668]	; 0x29c
 80159c2:	ed84 5ab1 	vstr	s10, [r4, #708]	; 0x2c4
 80159c6:	edcd 8a8b 	vstr	s17, [sp, #556]	; 0x22c
 80159ca:	edc4 5abb 	vstr	s11, [r4, #748]	; 0x2ec
 80159ce:	ed84 6ac5 	vstr	s12, [r4, #788]	; 0x314
 80159d2:	9300      	str	r3, [sp, #0]
 80159d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80159d6:	f7fc fb1d 	bl	8012014 <kf_update>
 80159da:	edd4 6a6d 	vldr	s13, [r4, #436]	; 0x1b4
 80159de:	ed94 6a6c 	vldr	s12, [r4, #432]	; 0x1b0
 80159e2:	ed94 7a6e 	vldr	s14, [r4, #440]	; 0x1b8
 80159e6:	ee66 7aa6 	vmul.f32	s15, s13, s13
 80159ea:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80159ee:	eee6 7a06 	vfma.f32	s15, s12, s12
 80159f2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80159f6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80159fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159fe:	f100 80bb 	bmi.w	8015b78 <iNemoEngine_API_Update+0x2590>
 8015a02:	ed5f 5a6c 	vldr	s11, [pc, #-432]	; 8015854 <iNemoEngine_API_Update+0x226c>
 8015a06:	ed8d 6a52 	vstr	s12, [sp, #328]	; 0x148
 8015a0a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8015a0e:	aa4e      	add	r2, sp, #312	; 0x138
 8015a10:	a8ae      	add	r0, sp, #696	; 0x2b8
 8015a12:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8015a16:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8015a1a:	4611      	mov	r1, r2
 8015a1c:	ae68      	add	r6, sp, #416	; 0x1a0
 8015a1e:	af70      	add	r7, sp, #448	; 0x1c0
 8015a20:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 8015a24:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8015a28:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 8015a2c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8015a30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015a34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015a38:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015a3c:	edcd 5a55 	vstr	s11, [sp, #340]	; 0x154
 8015a40:	ed8d 6aae 	vstr	s12, [sp, #696]	; 0x2b8
 8015a44:	edcd 6aaf 	vstr	s13, [sp, #700]	; 0x2bc
 8015a48:	ed8d 7ab0 	vstr	s14, [sp, #704]	; 0x2c0
 8015a4c:	edcd 7ab1 	vstr	s15, [sp, #708]	; 0x2c4
 8015a50:	f7fc f920 	bl	8011c94 <qmult>
 8015a54:	ed92 6a01 	vldr	s12, [r2, #4]
 8015a58:	edd2 5a00 	vldr	s11, [r2]
 8015a5c:	edd2 6a02 	vldr	s13, [r2, #8]
 8015a60:	ed92 7a03 	vldr	s14, [r2, #12]
 8015a64:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8015a66:	ee66 7a06 	vmul.f32	s15, s12, s12
 8015a6a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8015a6e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8015a72:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8015a76:	eee7 7a07 	vfma.f32	s15, s14, s14
 8015a7a:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8015a7e:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8015a82:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8015a86:	ee26 6a27 	vmul.f32	s12, s12, s15
 8015a8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015a92:	edcd 5a4a 	vstr	s11, [sp, #296]	; 0x128
 8015a96:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 8015a9a:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 8015a9e:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
 8015aa2:	4634      	mov	r4, r6
 8015aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015aa6:	42bc      	cmp	r4, r7
 8015aa8:	f105 0510 	add.w	r5, r5, #16
 8015aac:	f106 0610 	add.w	r6, r6, #16
 8015ab0:	f845 0c10 	str.w	r0, [r5, #-16]
 8015ab4:	f845 1c0c 	str.w	r1, [r5, #-12]
 8015ab8:	f845 2c08 	str.w	r2, [r5, #-8]
 8015abc:	f845 3c04 	str.w	r3, [r5, #-4]
 8015ac0:	d1ef      	bne.n	8015aa2 <iNemoEngine_API_Update+0x24ba>
 8015ac2:	6830      	ldr	r0, [r6, #0]
 8015ac4:	6028      	str	r0, [r5, #0]
 8015ac6:	9e06      	ldr	r6, [sp, #24]
 8015ac8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8015aca:	f8d6 31bc 	ldr.w	r3, [r6, #444]	; 0x1bc
 8015ace:	6013      	str	r3, [r2, #0]
 8015ad0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015ad2:	f8d6 31c0 	ldr.w	r3, [r6, #448]	; 0x1c0
 8015ad6:	6013      	str	r3, [r2, #0]
 8015ad8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8015ada:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8015ade:	6013      	str	r3, [r2, #0]
 8015ae0:	ad4a      	add	r5, sp, #296	; 0x128
 8015ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015ae4:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8015ae6:	60eb      	str	r3, [r5, #12]
 8015ae8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015aea:	6028      	str	r0, [r5, #0]
 8015aec:	6069      	str	r1, [r5, #4]
 8015aee:	60aa      	str	r2, [r5, #8]
 8015af0:	edd6 9a75 	vldr	s19, [r6, #468]	; 0x1d4
 8015af4:	edc3 5a00 	vstr	s11, [r3]
 8015af8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015afa:	f8d6 794c 	ldr.w	r7, [r6, #2380]	; 0x94c
 8015afe:	ed83 6a00 	vstr	s12, [r3]
 8015b02:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015b04:	edc3 6a00 	vstr	s13, [r3]
 8015b08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015b0a:	accc      	add	r4, sp, #816	; 0x330
 8015b0c:	ed83 7a00 	vstr	s14, [r3]
 8015b10:	4635      	mov	r5, r6
 8015b12:	f7fd be20 	b.w	8013756 <iNemoEngine_API_Update+0x16e>
 8015b16:	9906      	ldr	r1, [sp, #24]
 8015b18:	f891 21a2 	ldrb.w	r2, [r1, #418]	; 0x1a2
 8015b1c:	2a31      	cmp	r2, #49	; 0x31
 8015b1e:	f63f aeca 	bhi.w	80158b6 <iNemoEngine_API_Update+0x22ce>
 8015b22:	3201      	adds	r2, #1
 8015b24:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 8015b28:	2200      	movs	r2, #0
 8015b2a:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8015b2e:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8015b32:	e6c0      	b.n	80158b6 <iNemoEngine_API_Update+0x22ce>
 8015b34:	9a06      	ldr	r2, [sp, #24]
 8015b36:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	f340 8398 	ble.w	801626e <iNemoEngine_API_Update+0x2c86>
 8015b3e:	3b01      	subs	r3, #1
 8015b40:	6593      	str	r3, [r2, #88]	; 0x58
 8015b42:	2300      	movs	r3, #0
 8015b44:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 8015b48:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8015b4c:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8015b50:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8015b54:	f7ff bb8b 	b.w	801526e <iNemoEngine_API_Update+0x1c86>
 8015b58:	7b53      	ldrb	r3, [r2, #13]
 8015b5a:	7b92      	ldrb	r2, [r2, #14]
 8015b5c:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 8015b60:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 8015b64:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8015b68:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 8015b6c:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 8015b70:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 8015b74:	f7ff bb07 	b.w	8015186 <iNemoEngine_API_Update+0x1b9e>
 8015b78:	ee35 5ae7 	vsub.f32	s10, s11, s15
 8015b7c:	eef1 5ac5 	vsqrt.f32	s11, s10
 8015b80:	e741      	b.n	8015a06 <iNemoEngine_API_Update+0x241e>
 8015b82:	f9b5 3974 	ldrsh.w	r3, [r5, #2420]	; 0x974
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	f341 8173 	ble.w	8016e72 <iNemoEngine_API_Update+0x388a>
 8015b8c:	3b01      	subs	r3, #1
 8015b8e:	f8a5 3974 	strh.w	r3, [r5, #2420]	; 0x974
 8015b92:	f7fd bd51 	b.w	8013638 <iNemoEngine_API_Update+0x50>
 8015b96:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015b9a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015b9e:	eea7 6a07 	vfma.f32	s12, s14, s14
 8015ba2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015ba6:	eeb0 8a67 	vmov.f32	s16, s15
 8015baa:	eef0 7a46 	vmov.f32	s15, s12
 8015bae:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8015bb2:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8015bb6:	ee17 0a90 	vmov	r0, s15
 8015bba:	f7ea fccf 	bl	800055c <__aeabi_f2d>
 8015bbe:	ee78 7a08 	vadd.f32	s15, s16, s16
 8015bc2:	4602      	mov	r2, r0
 8015bc4:	460b      	mov	r3, r1
 8015bc6:	ee17 0a90 	vmov	r0, s15
 8015bca:	ec43 2b18 	vmov	d8, r2, r3
 8015bce:	f7ea fcc5 	bl	800055c <__aeabi_f2d>
 8015bd2:	eeb0 1a48 	vmov.f32	s2, s16
 8015bd6:	eef0 1a68 	vmov.f32	s3, s17
 8015bda:	ec41 0b10 	vmov	d0, r0, r1
 8015bde:	f006 ffa5 	bl	801cb2c <atan2>
 8015be2:	a3eb      	add	r3, pc, #940	; (adr r3, 8015f90 <iNemoEngine_API_Update+0x29a8>)
 8015be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015be8:	ec51 0b10 	vmov	r0, r1, d0
 8015bec:	f7ea fd0e 	bl	800060c <__aeabi_dmul>
 8015bf0:	4be9      	ldr	r3, [pc, #932]	; (8015f98 <iNemoEngine_API_Update+0x29b0>)
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	f7ea fb54 	bl	80002a0 <__adddf3>
 8015bf8:	f7eb f800 	bl	8000bfc <__aeabi_d2f>
 8015bfc:	ee08 0a10 	vmov	s16, r0
 8015c00:	f7fd be3a 	b.w	8013878 <iNemoEngine_API_Update+0x290>
 8015c04:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8015c08:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015c0c:	eea7 6a07 	vfma.f32	s12, s14, s14
 8015c10:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015c14:	eeb0 8a67 	vmov.f32	s16, s15
 8015c18:	eef0 7a46 	vmov.f32	s15, s12
 8015c1c:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8015c20:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8015c24:	ee17 0a90 	vmov	r0, s15
 8015c28:	f7ea fc98 	bl	800055c <__aeabi_f2d>
 8015c2c:	ee78 7a08 	vadd.f32	s15, s16, s16
 8015c30:	4602      	mov	r2, r0
 8015c32:	460b      	mov	r3, r1
 8015c34:	ee17 0a90 	vmov	r0, s15
 8015c38:	ec43 2b18 	vmov	d8, r2, r3
 8015c3c:	f7ea fc8e 	bl	800055c <__aeabi_f2d>
 8015c40:	eeb0 1a48 	vmov.f32	s2, s16
 8015c44:	eef0 1a68 	vmov.f32	s3, s17
 8015c48:	ec41 0b10 	vmov	d0, r0, r1
 8015c4c:	f006 ff6e 	bl	801cb2c <atan2>
 8015c50:	a3cf      	add	r3, pc, #828	; (adr r3, 8015f90 <iNemoEngine_API_Update+0x29a8>)
 8015c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c56:	ec51 0b10 	vmov	r0, r1, d0
 8015c5a:	f7ea fcd7 	bl	800060c <__aeabi_dmul>
 8015c5e:	4bce      	ldr	r3, [pc, #824]	; (8015f98 <iNemoEngine_API_Update+0x29b0>)
 8015c60:	2200      	movs	r2, #0
 8015c62:	f7ea fb1b 	bl	800029c <__aeabi_dsub>
 8015c66:	f7ea ffc9 	bl	8000bfc <__aeabi_d2f>
 8015c6a:	ee08 0a10 	vmov	s16, r0
 8015c6e:	f7fd be03 	b.w	8013878 <iNemoEngine_API_Update+0x290>
 8015c72:	ed9f baca 	vldr	s22, [pc, #808]	; 8015f9c <iNemoEngine_API_Update+0x29b4>
 8015c76:	49ca      	ldr	r1, [pc, #808]	; (8015fa0 <iNemoEngine_API_Update+0x29b8>)
 8015c78:	9806      	ldr	r0, [sp, #24]
 8015c7a:	f7fd beba 	b.w	80139f2 <iNemoEngine_API_Update+0x40a>
 8015c7e:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8015c82:	ee17 0a90 	vmov	r0, s15
 8015c86:	f7ea fc69 	bl	800055c <__aeabi_f2d>
 8015c8a:	ec41 0b10 	vmov	d0, r0, r1
 8015c8e:	f007 ff17 	bl	801dac0 <floor>
 8015c92:	ec51 0b10 	vmov	r0, r1, d0
 8015c96:	f7ea ffb1 	bl	8000bfc <__aeabi_d2f>
 8015c9a:	ee0c 0a10 	vmov	s24, r0
 8015c9e:	f7fe b937 	b.w	8013f10 <iNemoEngine_API_Update+0x928>
 8015ca2:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015ca6:	ee17 0a90 	vmov	r0, s15
 8015caa:	f7ea fc57 	bl	800055c <__aeabi_f2d>
 8015cae:	ec41 0b10 	vmov	d0, r0, r1
 8015cb2:	f007 ff05 	bl	801dac0 <floor>
 8015cb6:	ec51 0b10 	vmov	r0, r1, d0
 8015cba:	f7ea ff9f 	bl	8000bfc <__aeabi_d2f>
 8015cbe:	ee08 0a10 	vmov	s16, r0
 8015cc2:	f7fe b8fa 	b.w	8013eba <iNemoEngine_API_Update+0x8d2>
 8015cc6:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8015cca:	ee17 0a90 	vmov	r0, s15
 8015cce:	f7ea fc45 	bl	800055c <__aeabi_f2d>
 8015cd2:	ec41 0b10 	vmov	d0, r0, r1
 8015cd6:	f007 fef3 	bl	801dac0 <floor>
 8015cda:	ec51 0b10 	vmov	r0, r1, d0
 8015cde:	f7ea ff8d 	bl	8000bfc <__aeabi_d2f>
 8015ce2:	ee08 0a90 	vmov	s17, r0
 8015ce6:	f7fe b8bd 	b.w	8013e64 <iNemoEngine_API_Update+0x87c>
 8015cea:	2c00      	cmp	r4, #0
 8015cec:	f47f aa59 	bne.w	80151a2 <iNemoEngine_API_Update+0x1bba>
 8015cf0:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
 8015cf4:	f88d 40ea 	strb.w	r4, [sp, #234]	; 0xea
 8015cf8:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 8015cfc:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 8015d00:	f7ff ba5c 	b.w	80151bc <iNemoEngine_API_Update+0x1bd4>
 8015d04:	eddf 5aa7 	vldr	s11, [pc, #668]	; 8015fa4 <iNemoEngine_API_Update+0x29bc>
 8015d08:	ed9f 4aa7 	vldr	s8, [pc, #668]	; 8015fa8 <iNemoEngine_API_Update+0x29c0>
 8015d0c:	ed9f 6aa7 	vldr	s12, [pc, #668]	; 8015fac <iNemoEngine_API_Update+0x29c4>
 8015d10:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8015fb0 <iNemoEngine_API_Update+0x29c8>
 8015d14:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8015fb4 <iNemoEngine_API_Update+0x29cc>
 8015d18:	f7ff b9b2 	b.w	8015080 <iNemoEngine_API_Update+0x1a98>
 8015d1c:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8015d20:	2400      	movs	r4, #0
 8015d22:	461a      	mov	r2, r3
 8015d24:	f7ff b89f 	b.w	8014e66 <iNemoEngine_API_Update+0x187e>
 8015d28:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8015d2c:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 8015d30:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8015d34:	eee7 4a84 	vfma.f32	s9, s15, s8
 8015d38:	f7ff b86b 	b.w	8014e12 <iNemoEngine_API_Update+0x182a>
 8015d3c:	3305      	adds	r3, #5
 8015d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8015d40:	f7ff ba95 	b.w	801526e <iNemoEngine_API_Update+0x1c86>
 8015d44:	edd2 4a48 	vldr	s9, [r2, #288]	; 0x120
 8015d48:	eef4 4ae8 	vcmpe.f32	s9, s17
 8015d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d50:	f341 8112 	ble.w	8016f78 <iNemoEngine_API_Update+0x3990>
 8015d54:	ed92 7a32 	vldr	s14, [r2, #200]	; 0xc8
 8015d58:	eef4 8ac7 	vcmpe.f32	s17, s14
 8015d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d60:	4613      	mov	r3, r2
 8015d62:	f101 8392 	bmi.w	801748a <iNemoEngine_API_Update+0x3ea2>
 8015d66:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 8015d6a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d72:	f141 83a2 	bpl.w	80174ba <iNemoEngine_API_Update+0x3ed2>
 8015d76:	edd3 3a33 	vldr	s7, [r3, #204]	; 0xcc
 8015d7a:	ed93 4a35 	vldr	s8, [r3, #212]	; 0xd4
 8015d7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d82:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015d86:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8015d8a:	ee24 7a07 	vmul.f32	s14, s8, s14
 8015d8e:	ee87 fa27 	vdiv.f32	s30, s14, s15
 8015d92:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015d96:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8015d9a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015da2:	f2c1 83a3 	blt.w	80174ec <iNemoEngine_API_Update+0x3f04>
 8015da6:	9b06      	ldr	r3, [sp, #24]
 8015da8:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8015dac:	eef4 8ac7 	vcmpe.f32	s17, s14
 8015db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015db4:	f141 86ad 	bpl.w	8017b12 <iNemoEngine_API_Update+0x452a>
 8015db8:	edd3 3a37 	vldr	s7, [r3, #220]	; 0xdc
 8015dbc:	ed93 4a39 	vldr	s8, [r3, #228]	; 0xe4
 8015dc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015dc4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015dc8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015dcc:	ee64 7a27 	vmul.f32	s15, s8, s15
 8015dd0:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8015dd4:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015dd8:	9b06      	ldr	r3, [sp, #24]
 8015dda:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8015dde:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015de6:	f2c1 83a3 	blt.w	8017530 <iNemoEngine_API_Update+0x3f48>
 8015dea:	9b06      	ldr	r3, [sp, #24]
 8015dec:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8015df0:	eef4 8ac7 	vcmpe.f32	s17, s14
 8015df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015df8:	f141 86ca 	bpl.w	8017b90 <iNemoEngine_API_Update+0x45a8>
 8015dfc:	edd3 3a3b 	vldr	s7, [r3, #236]	; 0xec
 8015e00:	ed93 4a3d 	vldr	s8, [r3, #244]	; 0xf4
 8015e04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015e08:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015e0c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015e10:	ee64 7a27 	vmul.f32	s15, s8, s15
 8015e14:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8015e18:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015e1c:	9b06      	ldr	r3, [sp, #24]
 8015e1e:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 8015e22:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e2a:	f2c1 83a3 	blt.w	8017574 <iNemoEngine_API_Update+0x3f8c>
 8015e2e:	9b06      	ldr	r3, [sp, #24]
 8015e30:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 8015e34:	eef4 8ac7 	vcmpe.f32	s17, s14
 8015e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e3c:	f141 866c 	bpl.w	8017b18 <iNemoEngine_API_Update+0x4530>
 8015e40:	edd3 3a3f 	vldr	s7, [r3, #252]	; 0xfc
 8015e44:	ed93 4a41 	vldr	s8, [r3, #260]	; 0x104
 8015e48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015e4c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015e50:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015e54:	ee64 7a27 	vmul.f32	s15, s8, s15
 8015e58:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8015e5c:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015e60:	9b06      	ldr	r3, [sp, #24]
 8015e62:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8015e66:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e6e:	f2c1 83a3 	blt.w	80175b8 <iNemoEngine_API_Update+0x3fd0>
 8015e72:	9b06      	ldr	r3, [sp, #24]
 8015e74:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 8015e78:	eef4 8ac7 	vcmpe.f32	s17, s14
 8015e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e80:	f141 863c 	bpl.w	8017afc <iNemoEngine_API_Update+0x4514>
 8015e84:	edd3 3a43 	vldr	s7, [r3, #268]	; 0x10c
 8015e88:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 8015e8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015e90:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015e94:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015e98:	ee64 7a27 	vmul.f32	s15, s8, s15
 8015e9c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8015ea0:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015ea4:	9b06      	ldr	r3, [sp, #24]
 8015ea6:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 8015eaa:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eb2:	f6fe ae38 	blt.w	8014b26 <iNemoEngine_API_Update+0x153e>
 8015eb6:	9b06      	ldr	r3, [sp, #24]
 8015eb8:	ed93 4a47 	vldr	s8, [r3, #284]	; 0x11c
 8015ebc:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8015ec0:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8015ec4:	ee37 7a44 	vsub.f32	s14, s14, s8
 8015ec8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ed0:	ee87 faa4 	vdiv.f32	s30, s15, s9
 8015ed4:	ee3f fa04 	vadd.f32	s30, s30, s8
 8015ed8:	f7fe be25 	b.w	8014b26 <iNemoEngine_API_Update+0x153e>
 8015edc:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8015ee0:	ee17 0a90 	vmov	r0, s15
 8015ee4:	f7ea fb3a 	bl	800055c <__aeabi_f2d>
 8015ee8:	ec41 0b10 	vmov	d0, r0, r1
 8015eec:	f007 fde8 	bl	801dac0 <floor>
 8015ef0:	ec51 0b10 	vmov	r0, r1, d0
 8015ef4:	f7ea fe82 	bl	8000bfc <__aeabi_d2f>
 8015ef8:	ee08 0a90 	vmov	s17, r0
 8015efc:	f7fe b930 	b.w	8014160 <iNemoEngine_API_Update+0xb78>
 8015f00:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8015f04:	ee17 0a90 	vmov	r0, s15
 8015f08:	f7ea fb28 	bl	800055c <__aeabi_f2d>
 8015f0c:	ec41 0b10 	vmov	d0, r0, r1
 8015f10:	f007 fdd6 	bl	801dac0 <floor>
 8015f14:	ec51 0b10 	vmov	r0, r1, d0
 8015f18:	f7ea fe70 	bl	8000bfc <__aeabi_d2f>
 8015f1c:	ee08 0a90 	vmov	s17, r0
 8015f20:	f7fe b8b5 	b.w	801408e <iNemoEngine_API_Update+0xaa6>
 8015f24:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8015f28:	ee17 0a90 	vmov	r0, s15
 8015f2c:	f7ea fb16 	bl	800055c <__aeabi_f2d>
 8015f30:	ec41 0b10 	vmov	d0, r0, r1
 8015f34:	f007 fdc4 	bl	801dac0 <floor>
 8015f38:	ec51 0b10 	vmov	r0, r1, d0
 8015f3c:	f7ea fe5e 	bl	8000bfc <__aeabi_d2f>
 8015f40:	ee0c 0a10 	vmov	s24, r0
 8015f44:	f7fe b878 	b.w	8014038 <iNemoEngine_API_Update+0xa50>
 8015f48:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015f4c:	ee17 0a90 	vmov	r0, s15
 8015f50:	f7ea fb04 	bl	800055c <__aeabi_f2d>
 8015f54:	ec41 0b10 	vmov	d0, r0, r1
 8015f58:	f007 fdb2 	bl	801dac0 <floor>
 8015f5c:	ec51 0b10 	vmov	r0, r1, d0
 8015f60:	f7ea fe4c 	bl	8000bfc <__aeabi_d2f>
 8015f64:	ee08 0a10 	vmov	s16, r0
 8015f68:	f7fe b83b 	b.w	8013fe2 <iNemoEngine_API_Update+0x9fa>
 8015f6c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015f70:	ee17 0a90 	vmov	r0, s15
 8015f74:	f7ea faf2 	bl	800055c <__aeabi_f2d>
 8015f78:	ec41 0b10 	vmov	d0, r0, r1
 8015f7c:	f007 fda0 	bl	801dac0 <floor>
 8015f80:	ec51 0b10 	vmov	r0, r1, d0
 8015f84:	f7ea fe3a 	bl	8000bfc <__aeabi_d2f>
 8015f88:	ee08 0a10 	vmov	s16, r0
 8015f8c:	f7fe b93e 	b.w	801420c <iNemoEngine_API_Update+0xc24>
 8015f90:	20000000 	.word	0x20000000
 8015f94:	404ca5dc 	.word	0x404ca5dc
 8015f98:	40568000 	.word	0x40568000
 8015f9c:	3dcccccd 	.word	0x3dcccccd
 8015fa0:	3a83126f 	.word	0x3a83126f
 8015fa4:	3c75c28f 	.word	0x3c75c28f
 8015fa8:	391d4951 	.word	0x391d4951
 8015fac:	383cbe62 	.word	0x383cbe62
 8015fb0:	469c3e00 	.word	0x469c3e00
 8015fb4:	43168000 	.word	0x43168000
 8015fb8:	3d088889 	.word	0x3d088889
 8015fbc:	3e4ccccd 	.word	0x3e4ccccd
 8015fc0:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8015fc4:	ee17 0a90 	vmov	r0, s15
 8015fc8:	f7ea fac8 	bl	800055c <__aeabi_f2d>
 8015fcc:	ec41 0b10 	vmov	d0, r0, r1
 8015fd0:	f007 fd76 	bl	801dac0 <floor>
 8015fd4:	ec51 0b10 	vmov	r0, r1, d0
 8015fd8:	f7ea fe10 	bl	8000bfc <__aeabi_d2f>
 8015fdc:	ee0c 0a10 	vmov	s24, r0
 8015fe0:	f7fe b8e9 	b.w	80141b6 <iNemoEngine_API_Update+0xbce>
 8015fe4:	2a00      	cmp	r2, #0
 8015fe6:	f43f a910 	beq.w	801520a <iNemoEngine_API_Update+0x1c22>
 8015fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015fee:	ee39 9a47 	vsub.f32	s18, s18, s14
 8015ff2:	eef0 7ac9 	vabs.f32	s15, s18
 8015ff6:	ee29 9a09 	vmul.f32	s18, s18, s18
 8015ffa:	eef4 7ac6 	vcmpe.f32	s15, s12
 8015ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016002:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8016006:	bfb8      	it	lt
 8016008:	eef0 7a46 	vmovlt.f32	s15, s12
 801600c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016010:	edcd 7a8d 	vstr	s15, [sp, #564]	; 0x234
 8016014:	f77f a900 	ble.w	8015218 <iNemoEngine_API_Update+0x1c30>
 8016018:	eddd 7a86 	vldr	s15, [sp, #536]	; 0x218
 801601c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8016020:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8016024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016028:	f77f a8f6 	ble.w	8015218 <iNemoEngine_API_Update+0x1c30>
 801602c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8016030:	edcd 7a86 	vstr	s15, [sp, #536]	; 0x218
 8016034:	eddd 7a87 	vldr	s15, [sp, #540]	; 0x21c
 8016038:	ee67 7a89 	vmul.f32	s15, s15, s18
 801603c:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 8016040:	eddd 7a88 	vldr	s15, [sp, #544]	; 0x220
 8016044:	ee27 9a89 	vmul.f32	s18, s15, s18
 8016048:	ed8d 9a88 	vstr	s18, [sp, #544]	; 0x220
 801604c:	f7ff b8e4 	b.w	8015218 <iNemoEngine_API_Update+0x1c30>
 8016050:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8016054:	2a01      	cmp	r2, #1
 8016056:	f000 877b 	beq.w	8016f50 <iNemoEngine_API_Update+0x3968>
 801605a:	2b02      	cmp	r3, #2
 801605c:	f040 8778 	bne.w	8016f50 <iNemoEngine_API_Update+0x3968>
 8016060:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8016064:	9a06      	ldr	r2, [sp, #24]
 8016066:	ee87 7a8d 	vdiv.f32	s14, s15, s26
 801606a:	f240 1301 	movw	r3, #257	; 0x101
 801606e:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
 8016072:	2301      	movs	r3, #1
 8016074:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 8016078:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 801607c:	ed92 6a64 	vldr	s12, [r2, #400]	; 0x190
 8016080:	ed8d 7a3d 	vstr	s14, [sp, #244]	; 0xf4
 8016084:	eecb 5a27 	vdiv.f32	s11, s22, s15
 8016088:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 801608c:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 8016090:	eecd 7aa7 	vdiv.f32	s15, s27, s15
 8016094:	eeb4 5a00 	vmov.f32	s10, #64	; 0x3e000000  0.125
 8016098:	ee26 6a05 	vmul.f32	s12, s12, s10
 801609c:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 80160a0:	eeb4 6ae8 	vcmpe.f32	s12, s17
 80160a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160a8:	f280 87d8 	bge.w	801705c <iNemoEngine_API_Update+0x3a74>
 80160ac:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
 80160b0:	eeb4 dac6 	vcmpe.f32	s26, s12
 80160b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160b8:	f341 83a4 	ble.w	8017804 <iNemoEngine_API_Update+0x421c>
 80160bc:	ed9d 6a16 	vldr	s12, [sp, #88]	; 0x58
 80160c0:	eeb4 6acb 	vcmpe.f32	s12, s22
 80160c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c8:	f341 839c 	ble.w	8017804 <iNemoEngine_API_Update+0x421c>
 80160cc:	ed9d 6a17 	vldr	s12, [sp, #92]	; 0x5c
 80160d0:	eeb4 6aed 	vcmpe.f32	s12, s27
 80160d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160d8:	f341 8394 	ble.w	8017804 <iNemoEngine_API_Update+0x421c>
 80160dc:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 80160e0:	eeb4 8ac6 	vcmpe.f32	s16, s12
 80160e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160e8:	f141 838c 	bpl.w	8017804 <iNemoEngine_API_Update+0x421c>
 80160ec:	ee37 7a25 	vadd.f32	s14, s14, s11
 80160f0:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 80160f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80160f8:	eef4 7ac6 	vcmpe.f32	s15, s12
 80160fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016100:	f141 8380 	bpl.w	8017804 <iNemoEngine_API_Update+0x421c>
 8016104:	2300      	movs	r3, #0
 8016106:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 801610a:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 801610e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8016112:	2a00      	cmp	r2, #0
 8016114:	f040 87c7 	bne.w	80170a6 <iNemoEngine_API_Update+0x3abe>
 8016118:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801611a:	a840      	add	r0, sp, #256	; 0x100
 801611c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016120:	4613      	mov	r3, r2
 8016122:	edd2 7a00 	vldr	s15, [r2]
 8016126:	3101      	adds	r1, #1
 8016128:	330c      	adds	r3, #12
 801612a:	3204      	adds	r2, #4
 801612c:	461c      	mov	r4, r3
 801612e:	ed94 7a00 	vldr	s14, [r4]
 8016132:	330c      	adds	r3, #12
 8016134:	4598      	cmp	r8, r3
 8016136:	ee77 7a87 	vadd.f32	s15, s15, s14
 801613a:	d1f7      	bne.n	801612c <iNemoEngine_API_Update+0x2b44>
 801613c:	2902      	cmp	r1, #2
 801613e:	ece0 7a01 	vstmia	r0!, {s15}
 8016142:	f108 0804 	add.w	r8, r8, #4
 8016146:	d1eb      	bne.n	8016120 <iNemoEngine_API_Update+0x2b38>
 8016148:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 8015fb8 <iNemoEngine_API_Update+0x29d0>
 801614c:	9b06      	ldr	r3, [sp, #24]
 801614e:	eddd 4a40 	vldr	s9, [sp, #256]	; 0x100
 8016152:	ed9d 5a41 	vldr	s10, [sp, #260]	; 0x104
 8016156:	eddd 5a42 	vldr	s11, [sp, #264]	; 0x108
 801615a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 801615c:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 8016160:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8016164:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016168:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801616c:	f503 71b2 	add.w	r1, r3, #356	; 0x164
 8016170:	4602      	mov	r2, r0
 8016172:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 8016176:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 801617a:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 801617e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016186:	f103 030c 	add.w	r3, r3, #12
 801618a:	bf88      	it	hi
 801618c:	eef0 7a47 	vmovhi.f32	s15, s14
 8016190:	4293      	cmp	r3, r2
 8016192:	d1f2      	bne.n	801617a <iNemoEngine_API_Update+0x2b92>
 8016194:	1d1a      	adds	r2, r3, #4
 8016196:	4291      	cmp	r1, r2
 8016198:	ece4 7a01 	vstmia	r4!, {s15}
 801619c:	d1e9      	bne.n	8016172 <iNemoEngine_API_Update+0x2b8a>
 801619e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161a0:	ed9d 4a3d 	vldr	s8, [sp, #244]	; 0xf4
 80161a4:	edd3 7a00 	vldr	s15, [r3]
 80161a8:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 80161ac:	ed9d 6a3f 	vldr	s12, [sp, #252]	; 0xfc
 80161b0:	9b06      	ldr	r3, [sp, #24]
 80161b2:	ee97 4aa4 	vfnms.f32	s8, s15, s9
 80161b6:	785b      	ldrb	r3, [r3, #1]
 80161b8:	ee97 7a85 	vfnms.f32	s14, s15, s10
 80161bc:	ee97 6aa5 	vfnms.f32	s12, s15, s11
 80161c0:	eef0 4a47 	vmov.f32	s9, s14
 80161c4:	ed8d 4a40 	vstr	s8, [sp, #256]	; 0x100
 80161c8:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 80161cc:	ed8d 6a42 	vstr	s12, [sp, #264]	; 0x108
 80161d0:	b13b      	cbz	r3, 80161e2 <iNemoEngine_API_Update+0x2bfa>
 80161d2:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80161d6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80161da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161de:	f101 83e1 	bmi.w	80179a4 <iNemoEngine_API_Update+0x43bc>
 80161e2:	9b06      	ldr	r3, [sp, #24]
 80161e4:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
 80161e8:	2a1e      	cmp	r2, #30
 80161ea:	f001 843c 	beq.w	8017a66 <iNemoEngine_API_Update+0x447e>
 80161ee:	1c53      	adds	r3, r2, #1
 80161f0:	2aff      	cmp	r2, #255	; 0xff
 80161f2:	9906      	ldr	r1, [sp, #24]
 80161f4:	bf14      	ite	ne
 80161f6:	b2db      	uxtbne	r3, r3
 80161f8:	23ff      	moveq	r3, #255	; 0xff
 80161fa:	2200      	movs	r2, #0
 80161fc:	f881 31a1 	strb.w	r3, [r1, #417]	; 0x1a1
 8016200:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8016204:	464b      	mov	r3, r9
 8016206:	f7ff bb46 	b.w	8015896 <iNemoEngine_API_Update+0x22ae>
 801620a:	ed1f 7a94 	vldr	s14, [pc, #-592]	; 8015fbc <iNemoEngine_API_Update+0x29d4>
 801620e:	4603      	mov	r3, r0
 8016210:	f7fd bc03 	b.w	8013a1a <iNemoEngine_API_Update+0x432>
 8016214:	2b00      	cmp	r3, #0
 8016216:	f43e afe0 	beq.w	80151da <iNemoEngine_API_Update+0x1bf2>
 801621a:	f89d 30e8 	ldrb.w	r3, [sp, #232]	; 0xe8
 801621e:	2b01      	cmp	r3, #1
 8016220:	d002      	beq.n	8016228 <iNemoEngine_API_Update+0x2c40>
 8016222:	2c01      	cmp	r4, #1
 8016224:	f47e afe2 	bne.w	80151ec <iNemoEngine_API_Update+0x1c04>
 8016228:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 801622c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8016230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016234:	bfb8      	it	lt
 8016236:	eeb0 5a67 	vmovlt.f32	s10, s15
 801623a:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 801623e:	ed8d 5a84 	vstr	s10, [sp, #528]	; 0x210
 8016242:	ed8d 5a85 	vstr	s10, [sp, #532]	; 0x214
 8016246:	f7fe bfd1 	b.w	80151ec <iNemoEngine_API_Update+0x1c04>
 801624a:	9b06      	ldr	r3, [sp, #24]
 801624c:	49c6      	ldr	r1, [pc, #792]	; (8016568 <iNemoEngine_API_Update+0x2f80>)
 801624e:	ed93 ba05 	vldr	s22, [r3, #20]
 8016252:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8016256:	ee67 7a87 	vmul.f32	s15, s15, s14
 801625a:	4618      	mov	r0, r3
 801625c:	f7fd bbc9 	b.w	80139f2 <iNemoEngine_API_Update+0x40a>
 8016260:	9b06      	ldr	r3, [sp, #24]
 8016262:	49c2      	ldr	r1, [pc, #776]	; (801656c <iNemoEngine_API_Update+0x2f84>)
 8016264:	ed93 ba05 	vldr	s22, [r3, #20]
 8016268:	4618      	mov	r0, r3
 801626a:	f7fd bbc2 	b.w	80139f2 <iNemoEngine_API_Update+0x40a>
 801626e:	4611      	mov	r1, r2
 8016270:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8016272:	2a00      	cmp	r2, #0
 8016274:	dd0c      	ble.n	8016290 <iNemoEngine_API_Update+0x2ca8>
 8016276:	ed9d 7a03 	vldr	s14, [sp, #12]
 801627a:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 801627e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016286:	dd03      	ble.n	8016290 <iNemoEngine_API_Update+0x2ca8>
 8016288:	3a01      	subs	r2, #1
 801628a:	65ca      	str	r2, [r1, #92]	; 0x5c
 801628c:	f7fe bfef 	b.w	801526e <iNemoEngine_API_Update+0x1c86>
 8016290:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8016294:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8016298:	ee27 7a27 	vmul.f32	s14, s14, s15
 801629c:	eeb4 bac7 	vcmpe.f32	s22, s14
 80162a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162a4:	f57e afe3 	bpl.w	801526e <iNemoEngine_API_Update+0x1c86>
 80162a8:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 80162ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80162b0:	eef4 dae7 	vcmpe.f32	s27, s15
 80162b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162b8:	f57e afd9 	bpl.w	801526e <iNemoEngine_API_Update+0x1c86>
 80162bc:	ee7d 7a0d 	vadd.f32	s15, s26, s26
 80162c0:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 80162c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80162c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162cc:	f341 8492 	ble.w	8017bf4 <iNemoEngine_API_Update+0x460c>
 80162d0:	9a06      	ldr	r2, [sp, #24]
 80162d2:	3303      	adds	r3, #3
 80162d4:	e434      	b.n	8015b40 <iNemoEngine_API_Update+0x2558>
 80162d6:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8016570 <iNemoEngine_API_Update+0x2f88>
 80162da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80162de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162e2:	f57e ae7b 	bpl.w	8014fdc <iNemoEngine_API_Update+0x19f4>
 80162e6:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8016574 <iNemoEngine_API_Update+0x2f8c>
 80162ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80162ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162f2:	f280 80c9 	bge.w	8016488 <iNemoEngine_API_Update+0x2ea0>
 80162f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80162fa:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8016578 <iNemoEngine_API_Update+0x2f90>
 80162fe:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016306:	f280 80d5 	bge.w	80164b4 <iNemoEngine_API_Update+0x2ecc>
 801630a:	eddf 6a9c 	vldr	s13, [pc, #624]	; 801657c <iNemoEngine_API_Update+0x2f94>
 801630e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016316:	f280 80e3 	bge.w	80164e0 <iNemoEngine_API_Update+0x2ef8>
 801631a:	eddf 6a99 	vldr	s13, [pc, #612]	; 8016580 <iNemoEngine_API_Update+0x2f98>
 801631e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016326:	f280 80f1 	bge.w	801650c <iNemoEngine_API_Update+0x2f24>
 801632a:	eddf 6a96 	vldr	s13, [pc, #600]	; 8016584 <iNemoEngine_API_Update+0x2f9c>
 801632e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016336:	f280 80ff 	bge.w	8016538 <iNemoEngine_API_Update+0x2f50>
 801633a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801633e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016346:	db0d      	blt.n	8016364 <iNemoEngine_API_Update+0x2d7c>
 8016348:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801634c:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8016588 <iNemoEngine_API_Update+0x2fa0>
 8016350:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8016354:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8016358:	ee66 6a87 	vmul.f32	s13, s13, s14
 801635c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801658c <iNemoEngine_API_Update+0x2fa4>
 8016360:	eea6 7a86 	vfma.f32	s14, s13, s12
 8016364:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8016590 <iNemoEngine_API_Update+0x2fa8>
 8016368:	eef4 7ae6 	vcmpe.f32	s15, s13
 801636c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016370:	f141 82fa 	bpl.w	8017968 <iNemoEngine_API_Update+0x4380>
 8016374:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8016570 <iNemoEngine_API_Update+0x2f88>
 8016378:	eef4 7ae6 	vcmpe.f32	s15, s13
 801637c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016380:	f2c1 82fa 	blt.w	8017978 <iNemoEngine_API_Update+0x4390>
 8016384:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8016574 <iNemoEngine_API_Update+0x2f8c>
 8016388:	eef4 7ae6 	vcmpe.f32	s15, s13
 801638c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016390:	f141 8296 	bpl.w	80178c0 <iNemoEngine_API_Update+0x42d8>
 8016394:	ed9f 6a76 	vldr	s12, [pc, #472]	; 8016570 <iNemoEngine_API_Update+0x2f88>
 8016398:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8016594 <iNemoEngine_API_Update+0x2fac>
 801639c:	eddf 5a7e 	vldr	s11, [pc, #504]	; 8016598 <iNemoEngine_API_Update+0x2fb0>
 80163a0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80163a4:	ee26 6a26 	vmul.f32	s12, s12, s13
 80163a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80163ac:	eee6 6a25 	vfma.f32	s13, s12, s11
 80163b0:	ed9f 6a71 	vldr	s12, [pc, #452]	; 8016578 <iNemoEngine_API_Update+0x2f90>
 80163b4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80163b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163bc:	f2c1 8296 	blt.w	80178ec <iNemoEngine_API_Update+0x4304>
 80163c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801657c <iNemoEngine_API_Update+0x2f94>
 80163c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80163c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163cc:	f141 8296 	bpl.w	80178fc <iNemoEngine_API_Update+0x4314>
 80163d0:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8016578 <iNemoEngine_API_Update+0x2f90>
 80163d4:	eddf 6a71 	vldr	s13, [pc, #452]	; 801659c <iNemoEngine_API_Update+0x2fb4>
 80163d8:	eddf 5a71 	vldr	s11, [pc, #452]	; 80165a0 <iNemoEngine_API_Update+0x2fb8>
 80163dc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80163e0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80163e4:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80165a4 <iNemoEngine_API_Update+0x2fbc>
 80163e8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80163ec:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8016580 <iNemoEngine_API_Update+0x2f98>
 80163f0:	eef4 7ac6 	vcmpe.f32	s15, s12
 80163f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163f8:	f2c1 8296 	blt.w	8017928 <iNemoEngine_API_Update+0x4340>
 80163fc:	eddf 6a61 	vldr	s13, [pc, #388]	; 8016584 <iNemoEngine_API_Update+0x2f9c>
 8016400:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016408:	f141 8296 	bpl.w	8017938 <iNemoEngine_API_Update+0x4350>
 801640c:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8016580 <iNemoEngine_API_Update+0x2f98>
 8016410:	eddf 6a65 	vldr	s13, [pc, #404]	; 80165a8 <iNemoEngine_API_Update+0x2fc0>
 8016414:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8016418:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 801641c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8016420:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 8016424:	eee6 6a25 	vfma.f32	s13, s12, s11
 8016428:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801642c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016434:	db0d      	blt.n	8016452 <iNemoEngine_API_Update+0x2e6a>
 8016436:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801643a:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80165ac <iNemoEngine_API_Update+0x2fc4>
 801643e:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8016442:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016446:	ee26 6a26 	vmul.f32	s12, s12, s13
 801644a:	eddf 6a59 	vldr	s13, [pc, #356]	; 80165b0 <iNemoEngine_API_Update+0x2fc8>
 801644e:	eee6 6a25 	vfma.f32	s13, s12, s11
 8016452:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016456:	ee37 6a06 	vadd.f32	s12, s14, s12
 801645a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 801645e:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8016462:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8016574 <iNemoEngine_API_Update+0x2f8c>
 8016466:	ed9f 4a42 	vldr	s8, [pc, #264]	; 8016570 <iNemoEngine_API_Update+0x2f88>
 801646a:	eef4 5ac6 	vcmpe.f32	s11, s12
 801646e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016472:	bfb8      	it	lt
 8016474:	eef0 5a46 	vmovlt.f32	s11, s12
 8016478:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80165b4 <iNemoEngine_API_Update+0x2fcc>
 801647c:	ee25 4a84 	vmul.f32	s8, s11, s8
 8016480:	ee25 6a86 	vmul.f32	s12, s11, s12
 8016484:	f7fe bdfc 	b.w	8015080 <iNemoEngine_API_Update+0x1a98>
 8016488:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8016578 <iNemoEngine_API_Update+0x2f90>
 801648c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016494:	d50e      	bpl.n	80164b4 <iNemoEngine_API_Update+0x2ecc>
 8016496:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016574 <iNemoEngine_API_Update+0x2f8c>
 801649a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80165b8 <iNemoEngine_API_Update+0x2fd0>
 801649e:	ed9f 6a47 	vldr	s12, [pc, #284]	; 80165bc <iNemoEngine_API_Update+0x2fd4>
 80164a2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80164a6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80164aa:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80165c0 <iNemoEngine_API_Update+0x2fd8>
 80164ae:	eea6 7a86 	vfma.f32	s14, s13, s12
 80164b2:	e72a      	b.n	801630a <iNemoEngine_API_Update+0x2d22>
 80164b4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801657c <iNemoEngine_API_Update+0x2f94>
 80164b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80164bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164c0:	d50e      	bpl.n	80164e0 <iNemoEngine_API_Update+0x2ef8>
 80164c2:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8016578 <iNemoEngine_API_Update+0x2f90>
 80164c6:	ed9f 6a36 	vldr	s12, [pc, #216]	; 80165a0 <iNemoEngine_API_Update+0x2fb8>
 80164ca:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80164ce:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80164d2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80164d6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80164da:	eea6 7a86 	vfma.f32	s14, s13, s12
 80164de:	e71c      	b.n	801631a <iNemoEngine_API_Update+0x2d32>
 80164e0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8016580 <iNemoEngine_API_Update+0x2f98>
 80164e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80164e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164ec:	d50e      	bpl.n	801650c <iNemoEngine_API_Update+0x2f24>
 80164ee:	eddf 6a23 	vldr	s13, [pc, #140]	; 801657c <iNemoEngine_API_Update+0x2f94>
 80164f2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80164f6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80164fa:	ee66 6a87 	vmul.f32	s13, s13, s14
 80164fe:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8016502:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8016506:	eea6 7a86 	vfma.f32	s14, s13, s12
 801650a:	e70e      	b.n	801632a <iNemoEngine_API_Update+0x2d42>
 801650c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8016584 <iNemoEngine_API_Update+0x2f9c>
 8016510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016518:	d50e      	bpl.n	8016538 <iNemoEngine_API_Update+0x2f50>
 801651a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8016580 <iNemoEngine_API_Update+0x2f98>
 801651e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80165c4 <iNemoEngine_API_Update+0x2fdc>
 8016522:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8016526:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 801652a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801652e:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8016532:	eea6 7a86 	vfma.f32	s14, s13, s12
 8016536:	e700      	b.n	801633a <iNemoEngine_API_Update+0x2d52>
 8016538:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801653c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016544:	f57f af00 	bpl.w	8016348 <iNemoEngine_API_Update+0x2d60>
 8016548:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8016584 <iNemoEngine_API_Update+0x2f9c>
 801654c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80165c8 <iNemoEngine_API_Update+0x2fe0>
 8016550:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80165cc <iNemoEngine_API_Update+0x2fe4>
 8016554:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8016558:	ee66 6a87 	vmul.f32	s13, s13, s14
 801655c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80165d0 <iNemoEngine_API_Update+0x2fe8>
 8016560:	eea6 7a86 	vfma.f32	s14, s13, s12
 8016564:	e6fe      	b.n	8016364 <iNemoEngine_API_Update+0x2d7c>
 8016566:	bf00      	nop
 8016568:	3727c5ac 	.word	0x3727c5ac
 801656c:	3ac49ba6 	.word	0x3ac49ba6
 8016570:	3c23d70a 	.word	0x3c23d70a
 8016574:	3c75c28f 	.word	0x3c75c28f
 8016578:	3cf5c28f 	.word	0x3cf5c28f
 801657c:	3d4ccccd 	.word	0x3d4ccccd
 8016580:	3dcccccd 	.word	0x3dcccccd
 8016584:	3e4ccccd 	.word	0x3e4ccccd
 8016588:	46979000 	.word	0x46979000
 801658c:	4415c000 	.word	0x4415c000
 8016590:	3ba3d70a 	.word	0x3ba3d70a
 8016594:	3d4cccc0 	.word	0x3d4cccc0
 8016598:	43480000 	.word	0x43480000
 801659c:	3eb33334 	.word	0x3eb33334
 80165a0:	4247ffff 	.word	0x4247ffff
 80165a4:	3f933333 	.word	0x3f933333
 80165a8:	410c0000 	.word	0x410c0000
 80165ac:	42c80000 	.word	0x42c80000
 80165b0:	424a0000 	.word	0x424a0000
 80165b4:	3b449ba6 	.word	0x3b449ba6
 80165b8:	3ecccccc 	.word	0x3ecccccc
 80165bc:	42855556 	.word	0x42855556
 80165c0:	3fcccccd 	.word	0x3fcccccd
 80165c4:	42d40000 	.word	0x42d40000
 80165c8:	43f00000 	.word	0x43f00000
 80165cc:	40555555 	.word	0x40555555
 80165d0:	42ee0000 	.word	0x42ee0000
 80165d4:	4615      	mov	r5, r2
 80165d6:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 80165da:	49d7      	ldr	r1, [pc, #860]	; (8016938 <iNemoEngine_API_Update+0x3350>)
 80165dc:	4ad7      	ldr	r2, [pc, #860]	; (801693c <iNemoEngine_API_Update+0x3354>)
 80165de:	4bd8      	ldr	r3, [pc, #864]	; (8016940 <iNemoEngine_API_Update+0x3358>)
 80165e0:	2000      	movs	r0, #0
 80165e2:	f885 0318 	strb.w	r0, [r5, #792]	; 0x318
 80165e6:	f205 6824 	addw	r8, r5, #1572	; 0x624
 80165ea:	6039      	str	r1, [r7, #0]
 80165ec:	f205 7194 	addw	r1, r5, #1940	; 0x794
 80165f0:	f8c8 2000 	str.w	r2, [r8]
 80165f4:	600b      	str	r3, [r1, #0]
 80165f6:	f895 64b1 	ldrb.w	r6, [r5, #1201]	; 0x4b1
 80165fa:	911b      	str	r1, [sp, #108]	; 0x6c
 80165fc:	2e00      	cmp	r6, #0
 80165fe:	f001 8297 	beq.w	8017b30 <iNemoEngine_API_Update+0x4548>
 8016602:	eddf 7ad0 	vldr	s15, [pc, #832]	; 8016944 <iNemoEngine_API_Update+0x335c>
 8016606:	ee68 faa7 	vmul.f32	s31, s17, s15
 801660a:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 801660e:	ee28 fa27 	vmul.f32	s30, s16, s15
 8016612:	ee6c da27 	vmul.f32	s27, s24, s15
 8016616:	ee7f 7acb 	vsub.f32	s15, s31, s22
 801661a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 801661e:	ee17 0a90 	vmov	r0, s15
 8016622:	f7e9 ff9b 	bl	800055c <__aeabi_f2d>
 8016626:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 801662a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801662e:	ee17 0a90 	vmov	r0, s15
 8016632:	f7e9 ff93 	bl	800055c <__aeabi_f2d>
 8016636:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 801663a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801663e:	ee17 0a90 	vmov	r0, s15
 8016642:	f7e9 ff8b 	bl	800055c <__aeabi_f2d>
 8016646:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 801664a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801664e:	ee17 0a90 	vmov	r0, s15
 8016652:	f7e9 ff83 	bl	800055c <__aeabi_f2d>
 8016656:	ee7d 7acb 	vsub.f32	s15, s27, s22
 801665a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801665e:	ee17 0a90 	vmov	r0, s15
 8016662:	f7e9 ff7b 	bl	800055c <__aeabi_f2d>
 8016666:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 801666a:	4602      	mov	r2, r0
 801666c:	460b      	mov	r3, r1
 801666e:	ee17 0a90 	vmov	r0, s15
 8016672:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8016676:	f7e9 ff71 	bl	800055c <__aeabi_f2d>
 801667a:	9b06      	ldr	r3, [sp, #24]
 801667c:	ed9f bab8 	vldr	s22, [pc, #736]	; 8016960 <iNemoEngine_API_Update+0x3378>
 8016680:	eef0 7aef 	vabs.f32	s15, s31
 8016684:	edcd 7a03 	vstr	s15, [sp, #12]
 8016688:	eef0 7acf 	vabs.f32	s15, s30
 801668c:	f503 6597 	add.w	r5, r3, #1208	; 0x4b8
 8016690:	edcd 7a04 	vstr	s15, [sp, #16]
 8016694:	230c      	movs	r3, #12
 8016696:	eef0 7aed 	vabs.f32	s15, s27
 801669a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 801669e:	fb13 5606 	smlabb	r6, r3, r6, r5
 80166a2:	edcd 7a05 	vstr	s15, [sp, #20]
 80166a6:	46aa      	mov	sl, r5
 80166a8:	e060      	b.n	801676c <iNemoEngine_API_Update+0x3184>
 80166aa:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8016948 <iNemoEngine_API_Update+0x3360>
 80166ae:	eef4 8ae7 	vcmpe.f32	s17, s15
 80166b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166b6:	f280 8162 	bge.w	801697e <iNemoEngine_API_Update+0x3396>
 80166ba:	eddf 7aa4 	vldr	s15, [pc, #656]	; 801694c <iNemoEngine_API_Update+0x3364>
 80166be:	eef4 8ae7 	vcmpe.f32	s17, s15
 80166c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166c6:	f300 816c 	bgt.w	80169a2 <iNemoEngine_API_Update+0x33ba>
 80166ca:	ed9d 0b08 	vldr	d0, [sp, #32]
 80166ce:	f007 f977 	bl	801d9c0 <ceil>
 80166d2:	ec51 0b10 	vmov	r0, r1, d0
 80166d6:	f7ea fa91 	bl	8000bfc <__aeabi_d2f>
 80166da:	eddd 7a04 	vldr	s15, [sp, #16]
 80166de:	f8ca 0000 	str.w	r0, [sl]
 80166e2:	eef4 7acb 	vcmpe.f32	s15, s22
 80166e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ea:	f140 8121 	bpl.w	8016930 <iNemoEngine_API_Update+0x3348>
 80166ee:	eddf 7a96 	vldr	s15, [pc, #600]	; 8016948 <iNemoEngine_API_Update+0x3360>
 80166f2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80166f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166fa:	f280 8137 	bge.w	801696c <iNemoEngine_API_Update+0x3384>
 80166fe:	eddf 7a93 	vldr	s15, [pc, #588]	; 801694c <iNemoEngine_API_Update+0x3364>
 8016702:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801670a:	f300 8257 	bgt.w	8016bbc <iNemoEngine_API_Update+0x35d4>
 801670e:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 8016712:	f007 f955 	bl	801d9c0 <ceil>
 8016716:	ec51 0b10 	vmov	r0, r1, d0
 801671a:	f7ea fa6f 	bl	8000bfc <__aeabi_d2f>
 801671e:	eddd 7a05 	vldr	s15, [sp, #20]
 8016722:	f8ca 0004 	str.w	r0, [sl, #4]
 8016726:	eef4 7acb 	vcmpe.f32	s15, s22
 801672a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801672e:	d527      	bpl.n	8016780 <iNemoEngine_API_Update+0x3198>
 8016730:	eddf 7a85 	vldr	s15, [pc, #532]	; 8016948 <iNemoEngine_API_Update+0x3360>
 8016734:	eeb4 cae7 	vcmpe.f32	s24, s15
 8016738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801673c:	f280 8128 	bge.w	8016990 <iNemoEngine_API_Update+0x33a8>
 8016740:	eddf 7a82 	vldr	s15, [pc, #520]	; 801694c <iNemoEngine_API_Update+0x3364>
 8016744:	eeb4 cae7 	vcmpe.f32	s24, s15
 8016748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801674c:	f300 812b 	bgt.w	80169a6 <iNemoEngine_API_Update+0x33be>
 8016750:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8016754:	f007 f934 	bl	801d9c0 <ceil>
 8016758:	ec51 0b10 	vmov	r0, r1, d0
 801675c:	f7ea fa4e 	bl	8000bfc <__aeabi_d2f>
 8016760:	f8ca 0008 	str.w	r0, [sl, #8]
 8016764:	f10a 0a0c 	add.w	sl, sl, #12
 8016768:	45b2      	cmp	sl, r6
 801676a:	d011      	beq.n	8016790 <iNemoEngine_API_Update+0x31a8>
 801676c:	eddd 7a03 	vldr	s15, [sp, #12]
 8016770:	eef4 7acb 	vcmpe.f32	s15, s22
 8016774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016778:	d497      	bmi.n	80166aa <iNemoEngine_API_Update+0x30c2>
 801677a:	ee1f 0a90 	vmov	r0, s31
 801677e:	e7ac      	b.n	80166da <iNemoEngine_API_Update+0x30f2>
 8016780:	ee1d 0a90 	vmov	r0, s27
 8016784:	f10a 0a0c 	add.w	sl, sl, #12
 8016788:	f84a 0c04 	str.w	r0, [sl, #-4]
 801678c:	45b2      	cmp	sl, r6
 801678e:	d1ed      	bne.n	801676c <iNemoEngine_API_Update+0x3184>
 8016790:	9b06      	ldr	r3, [sp, #24]
 8016792:	f893 9621 	ldrb.w	r9, [r3, #1569]	; 0x621
 8016796:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 801679a:	f1b9 0f00 	cmp.w	r9, #0
 801679e:	f000 8114 	beq.w	80169ca <iNemoEngine_API_Update+0x33e2>
 80167a2:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8016950 <iNemoEngine_API_Update+0x3368>
 80167a6:	ee6a faa7 	vmul.f32	s31, s21, s15
 80167aa:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 80167ae:	ee2a fa27 	vmul.f32	s30, s20, s15
 80167b2:	ee69 daa7 	vmul.f32	s27, s19, s15
 80167b6:	ee7f 7acb 	vsub.f32	s15, s31, s22
 80167ba:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 80167be:	ee17 0a90 	vmov	r0, s15
 80167c2:	f7e9 fecb 	bl	800055c <__aeabi_f2d>
 80167c6:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 80167ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80167ce:	ee17 0a90 	vmov	r0, s15
 80167d2:	f7e9 fec3 	bl	800055c <__aeabi_f2d>
 80167d6:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 80167da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80167de:	ee17 0a90 	vmov	r0, s15
 80167e2:	f7e9 febb 	bl	800055c <__aeabi_f2d>
 80167e6:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 80167ea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80167ee:	ee17 0a90 	vmov	r0, s15
 80167f2:	f7e9 feb3 	bl	800055c <__aeabi_f2d>
 80167f6:	ee7d 7acb 	vsub.f32	s15, s27, s22
 80167fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80167fe:	ee17 0a90 	vmov	r0, s15
 8016802:	f7e9 feab 	bl	800055c <__aeabi_f2d>
 8016806:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 801680a:	4602      	mov	r2, r0
 801680c:	460b      	mov	r3, r1
 801680e:	ee17 0a90 	vmov	r0, s15
 8016812:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8016816:	f7e9 fea1 	bl	800055c <__aeabi_f2d>
 801681a:	eef0 7aef 	vabs.f32	s15, s31
 801681e:	9b06      	ldr	r3, [sp, #24]
 8016820:	edcd 7a03 	vstr	s15, [sp, #12]
 8016824:	eef0 7acf 	vabs.f32	s15, s30
 8016828:	edcd 7a04 	vstr	s15, [sp, #16]
 801682c:	eef0 7aed 	vabs.f32	s15, s27
 8016830:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 8016834:	edcd 7a05 	vstr	s15, [sp, #20]
 8016838:	230c      	movs	r3, #12
 801683a:	eef0 7a6c 	vmov.f32	s15, s25
 801683e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8016842:	eef0 ca48 	vmov.f32	s25, s16
 8016846:	ed9f ba46 	vldr	s22, [pc, #280]	; 8016960 <iNemoEngine_API_Update+0x3378>
 801684a:	eeb0 8a4d 	vmov.f32	s16, s26
 801684e:	fb13 6909 	smlabb	r9, r3, r9, r6
 8016852:	46b3      	mov	fp, r6
 8016854:	eeb0 da67 	vmov.f32	s26, s15
 8016858:	e060      	b.n	801691c <iNemoEngine_API_Update+0x3334>
 801685a:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8016954 <iNemoEngine_API_Update+0x336c>
 801685e:	eef4 aae7 	vcmpe.f32	s21, s15
 8016862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016866:	f280 8197 	bge.w	8016b98 <iNemoEngine_API_Update+0x35b0>
 801686a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8016958 <iNemoEngine_API_Update+0x3370>
 801686e:	eef4 aae7 	vcmpe.f32	s21, s15
 8016872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016876:	f300 81a3 	bgt.w	8016bc0 <iNemoEngine_API_Update+0x35d8>
 801687a:	ed9d 0b08 	vldr	d0, [sp, #32]
 801687e:	f007 f89f 	bl	801d9c0 <ceil>
 8016882:	ec51 0b10 	vmov	r0, r1, d0
 8016886:	f7ea f9b9 	bl	8000bfc <__aeabi_d2f>
 801688a:	eddd 7a04 	vldr	s15, [sp, #16]
 801688e:	f8cb 0000 	str.w	r0, [fp]
 8016892:	eef4 7acb 	vcmpe.f32	s15, s22
 8016896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801689a:	f140 8171 	bpl.w	8016b80 <iNemoEngine_API_Update+0x3598>
 801689e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8016954 <iNemoEngine_API_Update+0x336c>
 80168a2:	eeb4 aae7 	vcmpe.f32	s20, s15
 80168a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168aa:	f280 816c 	bge.w	8016b86 <iNemoEngine_API_Update+0x359e>
 80168ae:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8016958 <iNemoEngine_API_Update+0x3370>
 80168b2:	eeb4 aae7 	vcmpe.f32	s20, s15
 80168b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ba:	f300 81bd 	bgt.w	8016c38 <iNemoEngine_API_Update+0x3650>
 80168be:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 80168c2:	f007 f87d 	bl	801d9c0 <ceil>
 80168c6:	ec51 0b10 	vmov	r0, r1, d0
 80168ca:	f7ea f997 	bl	8000bfc <__aeabi_d2f>
 80168ce:	eddd 7a05 	vldr	s15, [sp, #20]
 80168d2:	f8cb 0004 	str.w	r0, [fp, #4]
 80168d6:	eef4 7acb 	vcmpe.f32	s15, s22
 80168da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168de:	d564      	bpl.n	80169aa <iNemoEngine_API_Update+0x33c2>
 80168e0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8016954 <iNemoEngine_API_Update+0x336c>
 80168e4:	eef4 9ae7 	vcmpe.f32	s19, s15
 80168e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ec:	f280 815d 	bge.w	8016baa <iNemoEngine_API_Update+0x35c2>
 80168f0:	eddf 7a19 	vldr	s15, [pc, #100]	; 8016958 <iNemoEngine_API_Update+0x3370>
 80168f4:	eef4 9ae7 	vcmpe.f32	s19, s15
 80168f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168fc:	f300 8162 	bgt.w	8016bc4 <iNemoEngine_API_Update+0x35dc>
 8016900:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8016904:	f007 f85c 	bl	801d9c0 <ceil>
 8016908:	ec51 0b10 	vmov	r0, r1, d0
 801690c:	f7ea f976 	bl	8000bfc <__aeabi_d2f>
 8016910:	f8cb 0008 	str.w	r0, [fp, #8]
 8016914:	f10b 0b0c 	add.w	fp, fp, #12
 8016918:	45cb      	cmp	fp, r9
 801691a:	d04e      	beq.n	80169ba <iNemoEngine_API_Update+0x33d2>
 801691c:	eddd 7a03 	vldr	s15, [sp, #12]
 8016920:	eef4 7acb 	vcmpe.f32	s15, s22
 8016924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016928:	d497      	bmi.n	801685a <iNemoEngine_API_Update+0x3272>
 801692a:	ee1f 0a90 	vmov	r0, s31
 801692e:	e7ac      	b.n	801688a <iNemoEngine_API_Update+0x32a2>
 8016930:	ee1f 0a10 	vmov	r0, s30
 8016934:	e6f3      	b.n	801671e <iNemoEngine_API_Update+0x3136>
 8016936:	bf00      	nop
 8016938:	3a7001e0 	.word	0x3a7001e0
 801693c:	3a000100 	.word	0x3a000100
 8016940:	3a8c0118 	.word	0x3a8c0118
 8016944:	44888777 	.word	0x44888777
 8016948:	39f001e1 	.word	0x39f001e1
 801694c:	b9f001e1 	.word	0xb9f001e1
 8016950:	44fffe00 	.word	0x44fffe00
 8016954:	39800100 	.word	0x39800100
 8016958:	b9800100 	.word	0xb9800100
 801695c:	446a0ccd 	.word	0x446a0ccd
 8016960:	4b000000 	.word	0x4b000000
 8016964:	3cfaad3b 	.word	0x3cfaad3b
 8016968:	bcfaad3b 	.word	0xbcfaad3b
 801696c:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8016970:	f007 f8a6 	bl	801dac0 <floor>
 8016974:	ec51 0b10 	vmov	r0, r1, d0
 8016978:	f7ea f940 	bl	8000bfc <__aeabi_d2f>
 801697c:	e6cf      	b.n	801671e <iNemoEngine_API_Update+0x3136>
 801697e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016982:	f007 f89d 	bl	801dac0 <floor>
 8016986:	ec51 0b10 	vmov	r0, r1, d0
 801698a:	f7ea f937 	bl	8000bfc <__aeabi_d2f>
 801698e:	e6a4      	b.n	80166da <iNemoEngine_API_Update+0x30f2>
 8016990:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8016994:	f007 f894 	bl	801dac0 <floor>
 8016998:	ec51 0b10 	vmov	r0, r1, d0
 801699c:	f7ea f92e 	bl	8000bfc <__aeabi_d2f>
 80169a0:	e6de      	b.n	8016760 <iNemoEngine_API_Update+0x3178>
 80169a2:	4648      	mov	r0, r9
 80169a4:	e699      	b.n	80166da <iNemoEngine_API_Update+0x30f2>
 80169a6:	4648      	mov	r0, r9
 80169a8:	e6da      	b.n	8016760 <iNemoEngine_API_Update+0x3178>
 80169aa:	ee1d 0a90 	vmov	r0, s27
 80169ae:	f10b 0b0c 	add.w	fp, fp, #12
 80169b2:	f84b 0c04 	str.w	r0, [fp, #-4]
 80169b6:	45cb      	cmp	fp, r9
 80169b8:	d1b0      	bne.n	801691c <iNemoEngine_API_Update+0x3334>
 80169ba:	eef0 7a4d 	vmov.f32	s15, s26
 80169be:	eeb0 da48 	vmov.f32	s26, s16
 80169c2:	eeb0 8a6c 	vmov.f32	s16, s25
 80169c6:	eef0 ca67 	vmov.f32	s25, s15
 80169ca:	9b06      	ldr	r3, [sp, #24]
 80169cc:	f893 9791 	ldrb.w	r9, [r3, #1937]	; 0x791
 80169d0:	f1b9 0f00 	cmp.w	r9, #0
 80169d4:	f001 80a7 	beq.w	8017b26 <iNemoEngine_API_Update+0x453e>
 80169d8:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 801695c <iNemoEngine_API_Update+0x3374>
 80169dc:	ee6e fa27 	vmul.f32	s31, s28, s15
 80169e0:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 80169e4:	ee2e faa7 	vmul.f32	s30, s29, s15
 80169e8:	ee6b daa7 	vmul.f32	s27, s23, s15
 80169ec:	ee7f 7acb 	vsub.f32	s15, s31, s22
 80169f0:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 80169f4:	ee17 0a90 	vmov	r0, s15
 80169f8:	f7e9 fdb0 	bl	800055c <__aeabi_f2d>
 80169fc:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 8016a00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016a04:	ee17 0a90 	vmov	r0, s15
 8016a08:	f7e9 fda8 	bl	800055c <__aeabi_f2d>
 8016a0c:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 8016a10:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016a14:	ee17 0a90 	vmov	r0, s15
 8016a18:	f7e9 fda0 	bl	800055c <__aeabi_f2d>
 8016a1c:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 8016a20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016a24:	ee17 0a90 	vmov	r0, s15
 8016a28:	f7e9 fd98 	bl	800055c <__aeabi_f2d>
 8016a2c:	ee7d 7acb 	vsub.f32	s15, s27, s22
 8016a30:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016a34:	ee17 0a90 	vmov	r0, s15
 8016a38:	f7e9 fd90 	bl	800055c <__aeabi_f2d>
 8016a3c:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 8016a40:	4602      	mov	r2, r0
 8016a42:	460b      	mov	r3, r1
 8016a44:	ee17 0a90 	vmov	r0, s15
 8016a48:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8016a4c:	f7e9 fd86 	bl	800055c <__aeabi_f2d>
 8016a50:	eef0 7aef 	vabs.f32	s15, s31
 8016a54:	9b06      	ldr	r3, [sp, #24]
 8016a56:	edcd 7a03 	vstr	s15, [sp, #12]
 8016a5a:	eef0 7acf 	vabs.f32	s15, s30
 8016a5e:	edcd 7a04 	vstr	s15, [sp, #16]
 8016a62:	eef0 7aed 	vabs.f32	s15, s27
 8016a66:	f503 62f3 	add.w	r2, r3, #1944	; 0x798
 8016a6a:	eeb0 7a48 	vmov.f32	s14, s16
 8016a6e:	230c      	movs	r3, #12
 8016a70:	edcd 7a05 	vstr	s15, [sp, #20]
 8016a74:	eef0 7a6c 	vmov.f32	s15, s25
 8016a78:	eeb0 8a4d 	vmov.f32	s16, s26
 8016a7c:	eef0 ca4a 	vmov.f32	s25, s20
 8016a80:	eeb0 da6a 	vmov.f32	s26, s21
 8016a84:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8016a88:	eef0 aa69 	vmov.f32	s21, s19
 8016a8c:	ed1f ba4c 	vldr	s22, [pc, #-304]	; 8016960 <iNemoEngine_API_Update+0x3378>
 8016a90:	9215      	str	r2, [sp, #84]	; 0x54
 8016a92:	fb13 2909 	smlabb	r9, r3, r9, r2
 8016a96:	4693      	mov	fp, r2
 8016a98:	eeb0 aa67 	vmov.f32	s20, s15
 8016a9c:	eef0 9a47 	vmov.f32	s19, s14
 8016aa0:	e064      	b.n	8016b6c <iNemoEngine_API_Update+0x3584>
 8016aa2:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8016aa6:	ed1f 7a51 	vldr	s14, [pc, #-324]	; 8016964 <iNemoEngine_API_Update+0x337c>
 8016aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ab2:	f280 80af 	bge.w	8016c14 <iNemoEngine_API_Update+0x362c>
 8016ab6:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8016968 <iNemoEngine_API_Update+0x3380>
 8016aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ac2:	f300 80bb 	bgt.w	8016c3c <iNemoEngine_API_Update+0x3654>
 8016ac6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016aca:	f006 ff79 	bl	801d9c0 <ceil>
 8016ace:	ec51 0b10 	vmov	r0, r1, d0
 8016ad2:	f7ea f893 	bl	8000bfc <__aeabi_d2f>
 8016ad6:	eddd 7a04 	vldr	s15, [sp, #16]
 8016ada:	f8cb 0000 	str.w	r0, [fp]
 8016ade:	eef4 7acb 	vcmpe.f32	s15, s22
 8016ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ae6:	f140 8089 	bpl.w	8016bfc <iNemoEngine_API_Update+0x3614>
 8016aea:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8016aee:	ed1f 7a63 	vldr	s14, [pc, #-396]	; 8016964 <iNemoEngine_API_Update+0x337c>
 8016af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016afa:	f280 8082 	bge.w	8016c02 <iNemoEngine_API_Update+0x361a>
 8016afe:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 8016968 <iNemoEngine_API_Update+0x3380>
 8016b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b0a:	f300 809b 	bgt.w	8016c44 <iNemoEngine_API_Update+0x365c>
 8016b0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 8016b12:	f006 ff55 	bl	801d9c0 <ceil>
 8016b16:	ec51 0b10 	vmov	r0, r1, d0
 8016b1a:	f7ea f86f 	bl	8000bfc <__aeabi_d2f>
 8016b1e:	eddd 7a05 	vldr	s15, [sp, #20]
 8016b22:	f8cb 0004 	str.w	r0, [fp, #4]
 8016b26:	eef4 7acb 	vcmpe.f32	s15, s22
 8016b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b2e:	d54b      	bpl.n	8016bc8 <iNemoEngine_API_Update+0x35e0>
 8016b30:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8016b34:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 8016964 <iNemoEngine_API_Update+0x337c>
 8016b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b40:	da71      	bge.n	8016c26 <iNemoEngine_API_Update+0x363e>
 8016b42:	ed1f 7a77 	vldr	s14, [pc, #-476]	; 8016968 <iNemoEngine_API_Update+0x3380>
 8016b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b4e:	dc77      	bgt.n	8016c40 <iNemoEngine_API_Update+0x3658>
 8016b50:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8016b54:	f006 ff34 	bl	801d9c0 <ceil>
 8016b58:	ec51 0b10 	vmov	r0, r1, d0
 8016b5c:	f7ea f84e 	bl	8000bfc <__aeabi_d2f>
 8016b60:	f8cb 0008 	str.w	r0, [fp, #8]
 8016b64:	f10b 0b0c 	add.w	fp, fp, #12
 8016b68:	45cb      	cmp	fp, r9
 8016b6a:	d035      	beq.n	8016bd8 <iNemoEngine_API_Update+0x35f0>
 8016b6c:	eddd 7a03 	vldr	s15, [sp, #12]
 8016b70:	eef4 7acb 	vcmpe.f32	s15, s22
 8016b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b78:	d493      	bmi.n	8016aa2 <iNemoEngine_API_Update+0x34ba>
 8016b7a:	ee1f 0a90 	vmov	r0, s31
 8016b7e:	e7aa      	b.n	8016ad6 <iNemoEngine_API_Update+0x34ee>
 8016b80:	ee1f 0a10 	vmov	r0, s30
 8016b84:	e6a3      	b.n	80168ce <iNemoEngine_API_Update+0x32e6>
 8016b86:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8016b8a:	f006 ff99 	bl	801dac0 <floor>
 8016b8e:	ec51 0b10 	vmov	r0, r1, d0
 8016b92:	f7ea f833 	bl	8000bfc <__aeabi_d2f>
 8016b96:	e69a      	b.n	80168ce <iNemoEngine_API_Update+0x32e6>
 8016b98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016b9c:	f006 ff90 	bl	801dac0 <floor>
 8016ba0:	ec51 0b10 	vmov	r0, r1, d0
 8016ba4:	f7ea f82a 	bl	8000bfc <__aeabi_d2f>
 8016ba8:	e66f      	b.n	801688a <iNemoEngine_API_Update+0x32a2>
 8016baa:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8016bae:	f006 ff87 	bl	801dac0 <floor>
 8016bb2:	ec51 0b10 	vmov	r0, r1, d0
 8016bb6:	f7ea f821 	bl	8000bfc <__aeabi_d2f>
 8016bba:	e6a9      	b.n	8016910 <iNemoEngine_API_Update+0x3328>
 8016bbc:	4648      	mov	r0, r9
 8016bbe:	e5ae      	b.n	801671e <iNemoEngine_API_Update+0x3136>
 8016bc0:	4650      	mov	r0, sl
 8016bc2:	e662      	b.n	801688a <iNemoEngine_API_Update+0x32a2>
 8016bc4:	4650      	mov	r0, sl
 8016bc6:	e6a3      	b.n	8016910 <iNemoEngine_API_Update+0x3328>
 8016bc8:	ee1d 0a90 	vmov	r0, s27
 8016bcc:	f10b 0b0c 	add.w	fp, fp, #12
 8016bd0:	f84b 0c04 	str.w	r0, [fp, #-4]
 8016bd4:	45cb      	cmp	fp, r9
 8016bd6:	d1c9      	bne.n	8016b6c <iNemoEngine_API_Update+0x3584>
 8016bd8:	eeb0 7a69 	vmov.f32	s14, s19
 8016bdc:	eef0 7a4a 	vmov.f32	s15, s20
 8016be0:	eef0 9a6a 	vmov.f32	s19, s21
 8016be4:	eeb0 aa6c 	vmov.f32	s20, s25
 8016be8:	eef0 aa4d 	vmov.f32	s21, s26
 8016bec:	eef0 ca67 	vmov.f32	s25, s15
 8016bf0:	eeb0 da48 	vmov.f32	s26, s16
 8016bf4:	eeb0 8a47 	vmov.f32	s16, s14
 8016bf8:	f7fd b820 	b.w	8013c3c <iNemoEngine_API_Update+0x654>
 8016bfc:	ee1f 0a10 	vmov	r0, s30
 8016c00:	e78d      	b.n	8016b1e <iNemoEngine_API_Update+0x3536>
 8016c02:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8016c06:	f006 ff5b 	bl	801dac0 <floor>
 8016c0a:	ec51 0b10 	vmov	r0, r1, d0
 8016c0e:	f7e9 fff5 	bl	8000bfc <__aeabi_d2f>
 8016c12:	e784      	b.n	8016b1e <iNemoEngine_API_Update+0x3536>
 8016c14:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016c18:	f006 ff52 	bl	801dac0 <floor>
 8016c1c:	ec51 0b10 	vmov	r0, r1, d0
 8016c20:	f7e9 ffec 	bl	8000bfc <__aeabi_d2f>
 8016c24:	e757      	b.n	8016ad6 <iNemoEngine_API_Update+0x34ee>
 8016c26:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8016c2a:	f006 ff49 	bl	801dac0 <floor>
 8016c2e:	ec51 0b10 	vmov	r0, r1, d0
 8016c32:	f7e9 ffe3 	bl	8000bfc <__aeabi_d2f>
 8016c36:	e793      	b.n	8016b60 <iNemoEngine_API_Update+0x3578>
 8016c38:	4650      	mov	r0, sl
 8016c3a:	e648      	b.n	80168ce <iNemoEngine_API_Update+0x32e6>
 8016c3c:	4650      	mov	r0, sl
 8016c3e:	e74a      	b.n	8016ad6 <iNemoEngine_API_Update+0x34ee>
 8016c40:	4650      	mov	r0, sl
 8016c42:	e78d      	b.n	8016b60 <iNemoEngine_API_Update+0x3578>
 8016c44:	4650      	mov	r0, sl
 8016c46:	e76a      	b.n	8016b1e <iNemoEngine_API_Update+0x3536>
 8016c48:	4616      	mov	r6, r2
 8016c4a:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8016c4e:	4be1      	ldr	r3, [pc, #900]	; (8016fd4 <iNemoEngine_API_Update+0x39ec>)
 8016c50:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 8016c54:	2100      	movs	r1, #0
 8016c56:	f8c2 51cc 	str.w	r5, [r2, #460]	; 0x1cc
 8016c5a:	f8c2 51d0 	str.w	r5, [r2, #464]	; 0x1d0
 8016c5e:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 8016c62:	f506 70ea 	add.w	r0, r6, #468	; 0x1d4
 8016c66:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016c6a:	f003 f909 	bl	8019e80 <memset>
 8016c6e:	ed96 6a02 	vldr	s12, [r6, #8]
 8016c72:	eddf 7ad9 	vldr	s15, [pc, #868]	; 8016fd8 <iNemoEngine_API_Update+0x39f0>
 8016c76:	eddf 5ad9 	vldr	s11, [pc, #868]	; 8016fdc <iNemoEngine_API_Update+0x39f4>
 8016c7a:	ed9f 5ad9 	vldr	s10, [pc, #868]	; 8016fe0 <iNemoEngine_API_Update+0x39f8>
 8016c7e:	f8c6 50c4 	str.w	r5, [r6, #196]	; 0xc4
 8016c82:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016c86:	2300      	movs	r3, #0
 8016c88:	edc6 7a34 	vstr	s15, [r6, #208]	; 0xd0
 8016c8c:	eddf 7ad5 	vldr	s15, [pc, #852]	; 8016fe4 <iNemoEngine_API_Update+0x39fc>
 8016c90:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 8016c94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016c98:	f8c6 3128 	str.w	r3, [r6, #296]	; 0x128
 8016c9c:	edc6 7a4e 	vstr	s15, [r6, #312]	; 0x138
 8016ca0:	eddf 7ad1 	vldr	s15, [pc, #836]	; 8016fe8 <iNemoEngine_API_Update+0x3a00>
 8016ca4:	4bd1      	ldr	r3, [pc, #836]	; (8016fec <iNemoEngine_API_Update+0x3a04>)
 8016ca6:	f8c6 30dc 	str.w	r3, [r6, #220]	; 0xdc
 8016caa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016cae:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
 8016cb2:	edc6 7a50 	vstr	s15, [r6, #320]	; 0x140
 8016cb6:	eddf 7ace 	vldr	s15, [pc, #824]	; 8016ff0 <iNemoEngine_API_Update+0x3a08>
 8016cba:	4bce      	ldr	r3, [pc, #824]	; (8016ff4 <iNemoEngine_API_Update+0x3a0c>)
 8016cbc:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8016cc0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016cc4:	4bcc      	ldr	r3, [pc, #816]	; (8016ff8 <iNemoEngine_API_Update+0x3a10>)
 8016cc6:	edc6 7a38 	vstr	s15, [r6, #224]	; 0xe0
 8016cca:	eddf 7acc 	vldr	s15, [pc, #816]	; 8016ffc <iNemoEngine_API_Update+0x3a14>
 8016cce:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
 8016cd2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016cd6:	4bca      	ldr	r3, [pc, #808]	; (8017000 <iNemoEngine_API_Update+0x3a18>)
 8016cd8:	edc6 7a52 	vstr	s15, [r6, #328]	; 0x148
 8016cdc:	eddf 7ac9 	vldr	s15, [pc, #804]	; 8017004 <iNemoEngine_API_Update+0x3a1c>
 8016ce0:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
 8016ce4:	4bc8      	ldr	r3, [pc, #800]	; (8017008 <iNemoEngine_API_Update+0x3a20>)
 8016ce6:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
 8016cea:	4631      	mov	r1, r6
 8016cec:	ee66 5a25 	vmul.f32	s11, s12, s11
 8016cf0:	ee26 5a05 	vmul.f32	s10, s12, s10
 8016cf4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016cf8:	4bc4      	ldr	r3, [pc, #784]	; (801700c <iNemoEngine_API_Update+0x3a24>)
 8016cfa:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 8016cfe:	4bc4      	ldr	r3, [pc, #784]	; (8017010 <iNemoEngine_API_Update+0x3a28>)
 8016d00:	f8c6 512c 	str.w	r5, [r6, #300]	; 0x12c
 8016d04:	f8c6 50cc 	str.w	r5, [r6, #204]	; 0xcc
 8016d08:	f8c6 5134 	str.w	r5, [r6, #308]	; 0x134
 8016d0c:	edc6 7a3a 	vstr	s15, [r6, #232]	; 0xe8
 8016d10:	edc6 5a32 	vstr	s11, [r6, #200]	; 0xc8
 8016d14:	edc6 5a4c 	vstr	s11, [r6, #304]	; 0x130
 8016d18:	ed86 5a36 	vstr	s10, [r6, #216]	; 0xd8
 8016d1c:	f8c1 31d4 	str.w	r3, [r1, #468]	; 0x1d4
 8016d20:	f8c1 31fc 	str.w	r3, [r1, #508]	; 0x1fc
 8016d24:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
 8016d28:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 8016d2c:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 8016d30:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 8016d34:	f8c1 32c4 	str.w	r3, [r1, #708]	; 0x2c4
 8016d38:	f8c1 32ec 	str.w	r3, [r1, #748]	; 0x2ec
 8016d3c:	f8c1 3314 	str.w	r3, [r1, #788]	; 0x314
 8016d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016d44:	ed81 5a54 	vstr	s10, [r1, #336]	; 0x150
 8016d48:	eddf 3ab2 	vldr	s7, [pc, #712]	; 8017014 <iNemoEngine_API_Update+0x3a2c>
 8016d4c:	ed9f 4ab2 	vldr	s8, [pc, #712]	; 8017018 <iNemoEngine_API_Update+0x3a30>
 8016d50:	f8c1 317c 	str.w	r3, [r1, #380]	; 0x17c
 8016d54:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
 8016d58:	f8c1 3124 	str.w	r3, [r1, #292]	; 0x124
 8016d5c:	eddf 6aaf 	vldr	s13, [pc, #700]	; 801701c <iNemoEngine_API_Update+0x3a34>
 8016d60:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8017020 <iNemoEngine_API_Update+0x3a38>
 8016d64:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8017024 <iNemoEngine_API_Update+0x3a3c>
 8016d68:	eddf 4aaf 	vldr	s9, [pc, #700]	; 8017028 <iNemoEngine_API_Update+0x3a40>
 8016d6c:	4aaf      	ldr	r2, [pc, #700]	; (801702c <iNemoEngine_API_Update+0x3a44>)
 8016d6e:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 801704c <iNemoEngine_API_Update+0x3a64>
 8016d72:	4faf      	ldr	r7, [pc, #700]	; (8017030 <iNemoEngine_API_Update+0x3a48>)
 8016d74:	4eaf      	ldr	r6, [pc, #700]	; (8017034 <iNemoEngine_API_Update+0x3a4c>)
 8016d76:	4db0      	ldr	r5, [pc, #704]	; (8017038 <iNemoEngine_API_Update+0x3a50>)
 8016d78:	48b0      	ldr	r0, [pc, #704]	; (801703c <iNemoEngine_API_Update+0x3a54>)
 8016d7a:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 8017050 <iNemoEngine_API_Update+0x3a68>
 8016d7e:	edc1 3a3d 	vstr	s7, [r1, #244]	; 0xf4
 8016d82:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8016d86:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 8016d8a:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
 8016d8e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016d92:	ee66 6a26 	vmul.f32	s13, s12, s13
 8016d96:	ee26 7a07 	vmul.f32	s14, s12, s14
 8016d9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016d9e:	ee66 2a23 	vmul.f32	s5, s12, s7
 8016da2:	ee26 3a02 	vmul.f32	s6, s12, s4
 8016da6:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
 8016daa:	ee66 4a24 	vmul.f32	s9, s12, s9
 8016dae:	4ba4      	ldr	r3, [pc, #656]	; (8017040 <iNemoEngine_API_Update+0x3a58>)
 8016db0:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184
 8016db4:	ee66 1a04 	vmul.f32	s3, s12, s8
 8016db8:	4ba2      	ldr	r3, [pc, #648]	; (8017044 <iNemoEngine_API_Update+0x3a5c>)
 8016dba:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
 8016dbe:	f8c1 c15c 	str.w	ip, [r1, #348]	; 0x15c
 8016dc2:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
 8016dc6:	f8c1 6164 	str.w	r6, [r1, #356]	; 0x164
 8016dca:	f8c1 516c 	str.w	r5, [r1, #364]	; 0x16c
 8016dce:	f8c1 0174 	str.w	r0, [r1, #372]	; 0x174
 8016dd2:	edc1 1a46 	vstr	s3, [r1, #280]	; 0x118
 8016dd6:	edc1 4a60 	vstr	s9, [r1, #384]	; 0x180
 8016dda:	f8c1 e19c 	str.w	lr, [r1, #412]	; 0x19c
 8016dde:	ed81 2a66 	vstr	s4, [r1, #408]	; 0x198
 8016de2:	ed81 4a65 	vstr	s8, [r1, #404]	; 0x194
 8016de6:	f8c1 2154 	str.w	r2, [r1, #340]	; 0x154
 8016dea:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
 8016dee:	edc1 6a3c 	vstr	s13, [r1, #240]	; 0xf0
 8016df2:	edc1 6a56 	vstr	s13, [r1, #344]	; 0x158
 8016df6:	ed81 7a3e 	vstr	s14, [r1, #248]	; 0xf8
 8016dfa:	ed81 7a58 	vstr	s14, [r1, #352]	; 0x160
 8016dfe:	edc1 7a40 	vstr	s15, [r1, #256]	; 0x100
 8016e02:	edc1 7a5a 	vstr	s15, [r1, #360]	; 0x168
 8016e06:	edc1 2a42 	vstr	s5, [r1, #264]	; 0x108
 8016e0a:	edc1 2a5c 	vstr	s5, [r1, #368]	; 0x170
 8016e0e:	ed81 3a44 	vstr	s6, [r1, #272]	; 0x110
 8016e12:	ed81 3a5e 	vstr	s6, [r1, #376]	; 0x178
 8016e16:	ed81 6a48 	vstr	s12, [r1, #288]	; 0x120
 8016e1a:	ed81 6a62 	vstr	s12, [r1, #392]	; 0x188
 8016e1e:	edc1 5a64 	vstr	s11, [r1, #400]	; 0x190
 8016e22:	784b      	ldrb	r3, [r1, #1]
 8016e24:	b18b      	cbz	r3, 8016e4a <iNemoEngine_API_Update+0x3862>
 8016e26:	f501 6214 	add.w	r2, r1, #2368	; 0x940
 8016e2a:	9225      	str	r2, [sp, #148]	; 0x94
 8016e2c:	f601 1348 	addw	r3, r1, #2376	; 0x948
 8016e30:	f601 1244 	addw	r2, r1, #2372	; 0x944
 8016e34:	9226      	str	r2, [sp, #152]	; 0x98
 8016e36:	9327      	str	r3, [sp, #156]	; 0x9c
 8016e38:	9a06      	ldr	r2, [sp, #24]
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	7053      	strb	r3, [r2, #1]
 8016e3e:	f7fc bee8 	b.w	8013c12 <iNemoEngine_API_Update+0x62a>
 8016e42:	ed93 ca4b 	vldr	s24, [r3, #300]	; 0x12c
 8016e46:	f7fd bfc0 	b.w	8014dca <iNemoEngine_API_Update+0x17e2>
 8016e4a:	9a06      	ldr	r2, [sp, #24]
 8016e4c:	f502 6314 	add.w	r3, r2, #2368	; 0x940
 8016e50:	f602 1144 	addw	r1, r2, #2372	; 0x944
 8016e54:	f602 1048 	addw	r0, r2, #2376	; 0x948
 8016e58:	9325      	str	r3, [sp, #148]	; 0x94
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
 8016e60:	680b      	ldr	r3, [r1, #0]
 8016e62:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
 8016e66:	6803      	ldr	r3, [r0, #0]
 8016e68:	9126      	str	r1, [sp, #152]	; 0x98
 8016e6a:	9027      	str	r0, [sp, #156]	; 0x9c
 8016e6c:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
 8016e70:	e7e2      	b.n	8016e38 <iNemoEngine_API_Update+0x3850>
 8016e72:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 8016e76:	ed97 0a00 	vldr	s0, [r7]
 8016e7a:	f505 6097 	add.w	r0, r5, #1208	; 0x4b8
 8016e7e:	f7fa ff43 	bl	8011d08 <dataDerivative5>
 8016e82:	f205 6824 	addw	r8, r5, #1572	; 0x624
 8016e86:	eef0 3a40 	vmov.f32	s7, s0
 8016e8a:	f505 60c5 	add.w	r0, r5, #1576	; 0x628
 8016e8e:	ed98 0a00 	vldr	s0, [r8]
 8016e92:	f7fa ff39 	bl	8011d08 <dataDerivative5>
 8016e96:	f205 7394 	addw	r3, r5, #1940	; 0x794
 8016e9a:	eeb0 3a40 	vmov.f32	s6, s0
 8016e9e:	f505 60f3 	add.w	r0, r5, #1944	; 0x798
 8016ea2:	ed93 0a00 	vldr	s0, [r3]
 8016ea6:	f7fa ff2f 	bl	8011d08 <dataDerivative5>
 8016eaa:	f9b5 3976 	ldrsh.w	r3, [r5, #2422]	; 0x976
 8016eae:	ee07 3a90 	vmov	s15, r3
 8016eb2:	3301      	adds	r3, #1
 8016eb4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8016eb8:	ee07 3a90 	vmov	s15, r3
 8016ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016ec4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8016ec8:	f605 106c 	addw	r0, r5, #2412	; 0x96c
 8016ecc:	f605 1168 	addw	r1, r5, #2408	; 0x968
 8016ed0:	f505 6217 	add.w	r2, r5, #2416	; 0x970
 8016ed4:	b21b      	sxth	r3, r3
 8016ed6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8016eda:	ed90 7a00 	vldr	s14, [r0]
 8016ede:	ed91 5a00 	vldr	s10, [r1]
 8016ee2:	eef0 7a63 	vmov.f32	s15, s7
 8016ee6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016eea:	eeb0 7a43 	vmov.f32	s14, s6
 8016eee:	eea5 7a85 	vfma.f32	s14, s11, s10
 8016ef2:	ed92 5a00 	vldr	s10, [r2]
 8016ef6:	eef0 6a40 	vmov.f32	s13, s0
 8016efa:	eee5 6a85 	vfma.f32	s13, s11, s10
 8016efe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016f02:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016f06:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016f0a:	edc0 7a00 	vstr	s15, [r0]
 8016f0e:	ed81 7a00 	vstr	s14, [r1]
 8016f12:	edc2 6a00 	vstr	s13, [r2]
 8016f16:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 8016f1a:	f47c ab8d 	bne.w	8013638 <iNemoEngine_API_Update+0x50>
 8016f1e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016f22:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016f26:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016f2a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016f2e:	2300      	movs	r3, #0
 8016f30:	ed85 7a07 	vstr	s14, [r5, #28]
 8016f34:	edc5 6a08 	vstr	s13, [r5, #32]
 8016f38:	edc5 7a06 	vstr	s15, [r5, #24]
 8016f3c:	6003      	str	r3, [r0, #0]
 8016f3e:	600b      	str	r3, [r1, #0]
 8016f40:	6013      	str	r3, [r2, #0]
 8016f42:	2300      	movs	r3, #0
 8016f44:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 8016f48:	f885 3978 	strb.w	r3, [r5, #2424]	; 0x978
 8016f4c:	f7fc bb74 	b.w	8013638 <iNemoEngine_API_Update+0x50>
 8016f50:	9906      	ldr	r1, [sp, #24]
 8016f52:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 8016f56:	9295      	str	r2, [sp, #596]	; 0x254
 8016f58:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 8016f5c:	9296      	str	r2, [sp, #600]	; 0x258
 8016f5e:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 8016f62:	9297      	str	r2, [sp, #604]	; 0x25c
 8016f64:	2200      	movs	r2, #0
 8016f66:	464b      	mov	r3, r9
 8016f68:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8016f6c:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 8016f70:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8016f74:	f7fe bc8f 	b.w	8015896 <iNemoEngine_API_Update+0x22ae>
 8016f78:	ed92 fa49 	vldr	s30, [r2, #292]	; 0x124
 8016f7c:	4613      	mov	r3, r2
 8016f7e:	f7fd bdd2 	b.w	8014b26 <iNemoEngine_API_Update+0x153e>
 8016f82:	ed93 ca63 	vldr	s24, [r3, #396]	; 0x18c
 8016f86:	f7fd bf20 	b.w	8014dca <iNemoEngine_API_Update+0x17e2>
 8016f8a:	eddf 8a2f 	vldr	s17, [pc, #188]	; 8017048 <iNemoEngine_API_Update+0x3a60>
 8016f8e:	f7fd b87e 	b.w	801408e <iNemoEngine_API_Update+0xaa6>
 8016f92:	ed9f ca2d 	vldr	s24, [pc, #180]	; 8017048 <iNemoEngine_API_Update+0x3a60>
 8016f96:	f7fd b90e 	b.w	80141b6 <iNemoEngine_API_Update+0xbce>
 8016f9a:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8017048 <iNemoEngine_API_Update+0x3a60>
 8016f9e:	f7fc bf8c 	b.w	8013eba <iNemoEngine_API_Update+0x8d2>
 8016fa2:	eddf 8a29 	vldr	s17, [pc, #164]	; 8017048 <iNemoEngine_API_Update+0x3a60>
 8016fa6:	f7fc bf5d 	b.w	8013e64 <iNemoEngine_API_Update+0x87c>
 8016faa:	ed9f 8a27 	vldr	s16, [pc, #156]	; 8017048 <iNemoEngine_API_Update+0x3a60>
 8016fae:	f7fd b92d 	b.w	801420c <iNemoEngine_API_Update+0xc24>
 8016fb2:	ed9f ca25 	vldr	s24, [pc, #148]	; 8017048 <iNemoEngine_API_Update+0x3a60>
 8016fb6:	f7fd b83f 	b.w	8014038 <iNemoEngine_API_Update+0xa50>
 8016fba:	ed9f ca23 	vldr	s24, [pc, #140]	; 8017048 <iNemoEngine_API_Update+0x3a60>
 8016fbe:	f7fc bfa7 	b.w	8013f10 <iNemoEngine_API_Update+0x928>
 8016fc2:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8017048 <iNemoEngine_API_Update+0x3a60>
 8016fc6:	f7fd b80c 	b.w	8013fe2 <iNemoEngine_API_Update+0x9fa>
 8016fca:	eddf 8a1f 	vldr	s17, [pc, #124]	; 8017048 <iNemoEngine_API_Update+0x3a60>
 8016fce:	f7fd b8c7 	b.w	8014160 <iNemoEngine_API_Update+0xb78>
 8016fd2:	bf00      	nop
 8016fd4:	bf666666 	.word	0xbf666666
 8016fd8:	3d072b02 	.word	0x3d072b02
 8016fdc:	3ca3d70a 	.word	0x3ca3d70a
 8016fe0:	3d4ccccd 	.word	0x3d4ccccd
 8016fe4:	3cb43958 	.word	0x3cb43958
 8016fe8:	3cf5c28f 	.word	0x3cf5c28f
 8016fec:	3eb33333 	.word	0x3eb33333
 8016ff0:	3d75c28f 	.word	0x3d75c28f
 8016ff4:	3ee66666 	.word	0x3ee66666
 8016ff8:	3f866666 	.word	0x3f866666
 8016ffc:	3d23d70a 	.word	0x3d23d70a
 8017000:	3f8ccccd 	.word	0x3f8ccccd
 8017004:	3d8f5c29 	.word	0x3d8f5c29
 8017008:	3f933333 	.word	0x3f933333
 801700c:	3ebd70a4 	.word	0x3ebd70a4
 8017010:	40a00000 	.word	0x40a00000
 8017014:	3ecccccd 	.word	0x3ecccccd
 8017018:	3f4ccccd 	.word	0x3f4ccccd
 801701c:	3dcccccd 	.word	0x3dcccccd
 8017020:	3e4ccccd 	.word	0x3e4ccccd
 8017024:	3e99999a 	.word	0x3e99999a
 8017028:	3f666666 	.word	0x3f666666
 801702c:	3f99999a 	.word	0x3f99999a
 8017030:	3f19999a 	.word	0x3f19999a
 8017034:	3fb9999a 	.word	0x3fb9999a
 8017038:	3fcccccd 	.word	0x3fcccccd
 801703c:	3fe66666 	.word	0x3fe66666
 8017040:	40200000 	.word	0x40200000
 8017044:	40400000 	.word	0x40400000
 8017048:	80000000 	.word	0x80000000
 801704c:	3fa66666 	.word	0x3fa66666
 8017050:	3f333333 	.word	0x3f333333
 8017054:	3e4cccce 	.word	0x3e4cccce
 8017058:	3eaaaaab 	.word	0x3eaaaaab
 801705c:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 8017060:	2a00      	cmp	r2, #0
 8017062:	f040 85bc 	bne.w	8017bde <iNemoEngine_API_Update+0x45f6>
 8017066:	9906      	ldr	r1, [sp, #24]
 8017068:	ed5f 8a06 	vldr	s17, [pc, #-24]	; 8017054 <iNemoEngine_API_Update+0x3a6c>
 801706c:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 8017070:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 8017058 <iNemoEngine_API_Update+0x3a70>
 8017074:	3301      	adds	r3, #1
 8017076:	b29b      	uxth	r3, r3
 8017078:	2b31      	cmp	r3, #49	; 0x31
 801707a:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 801707e:	bf98      	it	ls
 8017080:	eef0 8a67 	vmovls.f32	s17, s15
 8017084:	460b      	mov	r3, r1
 8017086:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801708a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801708e:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8017092:	f000 8599 	beq.w	8017bc8 <iNemoEngine_API_Update+0x45e0>
 8017096:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 801709a:	f47f a83a 	bne.w	8016112 <iNemoEngine_API_Update+0x2b2a>
 801709e:	9a06      	ldr	r2, [sp, #24]
 80170a0:	2301      	movs	r3, #1
 80170a2:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
 80170a6:	9a06      	ldr	r2, [sp, #24]
 80170a8:	edcd 6a03 	vstr	s13, [sp, #12]
 80170ac:	f502 63c3 	add.w	r3, r2, #1560	; 0x618
 80170b0:	ed93 5a00 	vldr	s10, [r3]
 80170b4:	f502 63f1 	add.w	r3, r2, #1928	; 0x788
 80170b8:	ed93 7a00 	vldr	s14, [r3]
 80170bc:	f202 6314 	addw	r3, r2, #1556	; 0x614
 80170c0:	edd3 4a00 	vldr	s9, [r3]
 80170c4:	ee25 4a05 	vmul.f32	s8, s10, s10
 80170c8:	f202 7384 	addw	r3, r2, #1924	; 0x784
 80170cc:	eea4 4aa4 	vfma.f32	s8, s9, s9
 80170d0:	a93d      	add	r1, sp, #244	; 0xf4
 80170d2:	a843      	add	r0, sp, #268	; 0x10c
 80170d4:	ed93 6a00 	vldr	s12, [r3]
 80170d8:	f202 631c 	addw	r3, r2, #1564	; 0x61c
 80170dc:	edd3 7a00 	vldr	s15, [r3]
 80170e0:	eea7 4aa7 	vfma.f32	s8, s15, s15
 80170e4:	f202 738c 	addw	r3, r2, #1932	; 0x78c
 80170e8:	465e      	mov	r6, fp
 80170ea:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80170ee:	eeb1 3ac4 	vsqrt.f32	s6, s8
 80170f2:	465a      	mov	r2, fp
 80170f4:	4655      	mov	r5, sl
 80170f6:	4657      	mov	r7, sl
 80170f8:	acae      	add	r4, sp, #696	; 0x2b8
 80170fa:	ee67 5a07 	vmul.f32	s11, s14, s14
 80170fe:	ee83 4a83 	vdiv.f32	s8, s7, s6
 8017102:	eee6 5a06 	vfma.f32	s11, s12, s12
 8017106:	ee67 7a84 	vmul.f32	s15, s15, s8
 801710a:	ee25 5a04 	vmul.f32	s10, s10, s8
 801710e:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8017112:	edd3 7a00 	vldr	s15, [r3]
 8017116:	ed8d 5a3e 	vstr	s10, [sp, #248]	; 0xf8
 801711a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 801711e:	ee64 4a84 	vmul.f32	s9, s9, s8
 8017122:	eeb1 5ae5 	vsqrt.f32	s10, s11
 8017126:	edcd 4a3d 	vstr	s9, [sp, #244]	; 0xf4
 801712a:	eec3 5a85 	vdiv.f32	s11, s7, s10
 801712e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8017132:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017136:	ee26 6a25 	vmul.f32	s12, s12, s11
 801713a:	ed8d 7a44 	vstr	s14, [sp, #272]	; 0x110
 801713e:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
 8017142:	ed8d 6a43 	vstr	s12, [sp, #268]	; 0x10c
 8017146:	f7fa fec5 	bl	8011ed4 <getRotationMatrix>
 801714a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801714c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801714e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017152:	6836      	ldr	r6, [r6, #0]
 8017154:	602e      	str	r6, [r5, #0]
 8017156:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801715a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801715c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801715e:	edda 7a00 	vldr	s15, [sl]
 8017162:	ed9a 7a01 	vldr	s14, [sl, #4]
 8017166:	eddd 6a03 	vldr	s13, [sp, #12]
 801716a:	6026      	str	r6, [r4, #0]
 801716c:	eef0 7ae7 	vabs.f32	s15, s15
 8017170:	eeb0 7ac7 	vabs.f32	s14, s14
 8017174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801717c:	f140 8407 	bpl.w	801798e <iNemoEngine_API_Update+0x43a6>
 8017180:	2304      	movs	r3, #4
 8017182:	2000      	movs	r0, #0
 8017184:	930c      	str	r3, [sp, #48]	; 0x30
 8017186:	469e      	mov	lr, r3
 8017188:	eef0 7a47 	vmov.f32	s15, s14
 801718c:	2103      	movs	r1, #3
 801718e:	2707      	movs	r7, #7
 8017190:	f04f 0c06 	mov.w	ip, #6
 8017194:	4603      	mov	r3, r0
 8017196:	2601      	movs	r6, #1
 8017198:	ed9a 7a02 	vldr	s14, [sl, #8]
 801719c:	eeb0 7ac7 	vabs.f32	s14, s14
 80171a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80171a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171a8:	f340 8453 	ble.w	8017a52 <iNemoEngine_API_Update+0x446a>
 80171ac:	2306      	movs	r3, #6
 80171ae:	2708      	movs	r7, #8
 80171b0:	2104      	movs	r1, #4
 80171b2:	9303      	str	r3, [sp, #12]
 80171b4:	f04f 0c07 	mov.w	ip, #7
 80171b8:	f04f 0e05 	mov.w	lr, #5
 80171bc:	970c      	str	r7, [sp, #48]	; 0x30
 80171be:	4608      	mov	r0, r1
 80171c0:	2200      	movs	r2, #0
 80171c2:	2301      	movs	r3, #1
 80171c4:	2602      	movs	r6, #2
 80171c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80171c8:	4450      	add	r0, sl
 80171ca:	4454      	add	r4, sl
 80171cc:	ed90 6a00 	vldr	s12, [r0]
 80171d0:	ed94 7a00 	vldr	s14, [r4]
 80171d4:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80171d8:	a8ae      	add	r0, sp, #696	; 0x2b8
 80171da:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80171de:	acae      	add	r4, sp, #696	; 0x2b8
 80171e0:	adae      	add	r5, sp, #696	; 0x2b8
 80171e2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80171e6:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 80171ea:	edc0 7a00 	vstr	s15, [r0]
 80171ee:	ed94 7a00 	vldr	s14, [r4]
 80171f2:	edd5 7a00 	vldr	s15, [r5]
 80171f6:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80171fa:	ed84 6a00 	vstr	s12, [r4]
 80171fe:	edd0 5a00 	vldr	s11, [r0]
 8017202:	a8ae      	add	r0, sp, #696	; 0x2b8
 8017204:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8017208:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 801720c:	ed90 7a00 	vldr	s14, [r0]
 8017210:	edd5 7a00 	vldr	s15, [r5]
 8017214:	eee5 7ac7 	vfms.f32	s15, s11, s14
 8017218:	ea4f 048e 	mov.w	r4, lr, lsl #2
 801721c:	9404      	str	r4, [sp, #16]
 801721e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017220:	edc5 7a00 	vstr	s15, [r5]
 8017224:	ed90 7a00 	vldr	s14, [r0]
 8017228:	a8ae      	add	r0, sp, #696	; 0x2b8
 801722a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801722e:	edd0 7a00 	vldr	s15, [r0]
 8017232:	eee6 7a47 	vfms.f32	s15, s12, s14
 8017236:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801723a:	00bc      	lsls	r4, r7, #2
 801723c:	9405      	str	r4, [sp, #20]
 801723e:	edc0 7a00 	vstr	s15, [r0]
 8017242:	acae      	add	r4, sp, #696	; 0x2b8
 8017244:	a8ae      	add	r0, sp, #696	; 0x2b8
 8017246:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 801724a:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 801724e:	ed90 5a00 	vldr	s10, [r0]
 8017252:	ed94 7a00 	vldr	s14, [r4]
 8017256:	eea5 7ac5 	vfms.f32	s14, s11, s10
 801725a:	0097      	lsls	r7, r2, #2
 801725c:	eef0 7ae7 	vabs.f32	s15, s15
 8017260:	ed84 7a00 	vstr	s14, [r4]
 8017264:	9c03      	ldr	r4, [sp, #12]
 8017266:	edd0 5a00 	vldr	s11, [r0]
 801726a:	a8ae      	add	r0, sp, #696	; 0x2b8
 801726c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8017270:	ed90 7a00 	vldr	s14, [r0]
 8017274:	eea6 7a65 	vfms.f32	s14, s12, s11
 8017278:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801727c:	008c      	lsls	r4, r1, #2
 801727e:	ed80 7a00 	vstr	s14, [r0]
 8017282:	ed95 7a00 	vldr	s14, [r5]
 8017286:	eeb0 7ac7 	vabs.f32	s14, s14
 801728a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801728e:	00b0      	lsls	r0, r6, #2
 8017290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017294:	9003      	str	r0, [sp, #12]
 8017296:	ea4f 0583 	mov.w	r5, r3, lsl #2
 801729a:	ea4f 008c 	mov.w	r0, ip, lsl #2
 801729e:	dd0a      	ble.n	80172b6 <iNemoEngine_API_Update+0x3cce>
 80172a0:	4618      	mov	r0, r3
 80172a2:	4613      	mov	r3, r2
 80172a4:	4602      	mov	r2, r0
 80172a6:	4674      	mov	r4, lr
 80172a8:	4650      	mov	r0, sl
 80172aa:	463d      	mov	r5, r7
 80172ac:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 80172b0:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80172b4:	0097      	lsls	r7, r2, #2
 80172b6:	a9ae      	add	r1, sp, #696	; 0x2b8
 80172b8:	448e      	add	lr, r1
 80172ba:	440c      	add	r4, r1
 80172bc:	ed9e 7a00 	vldr	s14, [lr]
 80172c0:	edd4 7a00 	vldr	s15, [r4]
 80172c4:	edcd 6a03 	vstr	s13, [sp, #12]
 80172c8:	ee87 2a27 	vdiv.f32	s4, s14, s15
 80172cc:	4408      	add	r0, r1
 80172ce:	4451      	add	r1, sl
 80172d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80172d4:	ed8e 2a00 	vstr	s4, [lr]
 80172d8:	ed90 6a00 	vldr	s12, [r0]
 80172dc:	edd1 7a00 	vldr	s15, [r1]
 80172e0:	eee2 7a46 	vfms.f32	s15, s4, s12
 80172e4:	edc1 7a00 	vstr	s15, [r1]
 80172e8:	9905      	ldr	r1, [sp, #20]
 80172ea:	ed90 3a00 	vldr	s6, [r0]
 80172ee:	ed94 6a00 	vldr	s12, [r4]
 80172f2:	a8ae      	add	r0, sp, #696	; 0x2b8
 80172f4:	4401      	add	r1, r0
 80172f6:	edd1 3a00 	vldr	s7, [r1]
 80172fa:	9904      	ldr	r1, [sp, #16]
 80172fc:	4401      	add	r1, r0
 80172fe:	00b0      	lsls	r0, r6, #2
 8017300:	edd1 4a00 	vldr	s9, [r1]
 8017304:	f500 61b2 	add.w	r1, r0, #1424	; 0x590
 8017308:	4469      	add	r1, sp
 801730a:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 801730e:	eec7 2a27 	vdiv.f32	s5, s14, s15
 8017312:	edd1 7a00 	vldr	s15, [r1]
 8017316:	a9ae      	add	r1, sp, #696	; 0x2b8
 8017318:	4401      	add	r1, r0
 801731a:	ee87 4a06 	vdiv.f32	s8, s14, s12
 801731e:	a8ae      	add	r0, sp, #696	; 0x2b8
 8017320:	ed91 6a00 	vldr	s12, [r1]
 8017324:	f505 61b2 	add.w	r1, r5, #1424	; 0x590
 8017328:	4469      	add	r1, sp
 801732a:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 801732e:	ee87 5a06 	vdiv.f32	s10, s14, s12
 8017332:	4405      	add	r5, r0
 8017334:	ed91 7a00 	vldr	s14, [r1]
 8017338:	edd5 5a00 	vldr	s11, [r5]
 801733c:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8017340:	4469      	add	r1, sp
 8017342:	4407      	add	r7, r0
 8017344:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8017348:	edd7 1a00 	vldr	s3, [r7]
 801734c:	ed91 6a00 	vldr	s12, [r1]
 8017350:	eea5 7ae7 	vfms.f32	s14, s11, s15
 8017354:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8017358:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 801735c:	eea1 6ae7 	vfms.f32	s12, s3, s15
 8017360:	4601      	mov	r1, r0
 8017362:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 8017366:	ed91 1a00 	vldr	s2, [r1]
 801736a:	eea2 6a47 	vfms.f32	s12, s4, s14
 801736e:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8017372:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 8017376:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801737a:	ee22 6a86 	vmul.f32	s12, s5, s12
 801737e:	460b      	mov	r3, r1
 8017380:	eea3 7a46 	vfms.f32	s14, s6, s12
 8017384:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 8017388:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801738c:	eee3 7ac6 	vfms.f32	s15, s7, s12
 8017390:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017394:	ed8b 6a02 	vstr	s12, [fp, #8]
 8017398:	eee4 7ac7 	vfms.f32	s15, s9, s14
 801739c:	ed8b 7a01 	vstr	s14, [fp, #4]
 80173a0:	ee65 7a27 	vmul.f32	s15, s10, s15
 80173a4:	ed90 7a00 	vldr	s14, [r0]
 80173a8:	ed91 6a00 	vldr	s12, [r1]
 80173ac:	edcb 7a00 	vstr	s15, [fp]
 80173b0:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 80173b4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80173b8:	edd3 7a00 	vldr	s15, [r3]
 80173bc:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 80173c0:	edd3 0a00 	vldr	s1, [r3]
 80173c4:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 80173c8:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80173cc:	4658      	mov	r0, fp
 80173ce:	a952      	add	r1, sp, #328	; 0x148
 80173d0:	eee1 7a65 	vfms.f32	s15, s2, s11
 80173d4:	edd2 5a00 	vldr	s11, [r2]
 80173d8:	eee1 0a61 	vfms.f32	s1, s2, s3
 80173dc:	eee1 5ac7 	vfms.f32	s11, s3, s14
 80173e0:	eef0 1a60 	vmov.f32	s3, s1
 80173e4:	eee2 5a46 	vfms.f32	s11, s4, s12
 80173e8:	eee2 1a67 	vfms.f32	s3, s4, s15
 80173ec:	ee62 5aa5 	vmul.f32	s11, s5, s11
 80173f0:	ee62 2aa1 	vmul.f32	s5, s5, s3
 80173f4:	eea3 6a65 	vfms.f32	s12, s6, s11
 80173f8:	eee2 7ac3 	vfms.f32	s15, s5, s6
 80173fc:	eea2 1ae3 	vfms.f32	s2, s5, s7
 8017400:	eea3 7ae5 	vfms.f32	s14, s7, s11
 8017404:	ee26 6a04 	vmul.f32	s12, s12, s8
 8017408:	ee67 7a84 	vmul.f32	s15, s15, s8
 801740c:	edcb 5a05 	vstr	s11, [fp, #20]
 8017410:	eef0 5a41 	vmov.f32	s11, s2
 8017414:	eea4 7ac6 	vfms.f32	s14, s9, s12
 8017418:	eee7 5ae4 	vfms.f32	s11, s15, s9
 801741c:	ee25 7a07 	vmul.f32	s14, s10, s14
 8017420:	ee65 5a25 	vmul.f32	s11, s10, s11
 8017424:	ed8b 6a04 	vstr	s12, [fp, #16]
 8017428:	ed8b 7a03 	vstr	s14, [fp, #12]
 801742c:	edcb 2a08 	vstr	s5, [fp, #32]
 8017430:	edcb 7a07 	vstr	s15, [fp, #28]
 8017434:	edcb 5a06 	vstr	s11, [fp, #24]
 8017438:	f7fa fcac 	bl	8011d94 <b_dcm2q>
 801743c:	ed9d 7a53 	vldr	s14, [sp, #332]	; 0x14c
 8017440:	eddd 7a54 	vldr	s15, [sp, #336]	; 0x150
 8017444:	ed9d 6a52 	vldr	s12, [sp, #328]	; 0x148
 8017448:	9b06      	ldr	r3, [sp, #24]
 801744a:	eddd 6a03 	vldr	s13, [sp, #12]
 801744e:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8017452:	ee37 7a07 	vadd.f32	s14, s14, s14
 8017456:	ee36 6a06 	vadd.f32	s12, s12, s12
 801745a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801745e:	ed8d 6a3d 	vstr	s12, [sp, #244]	; 0xf4
 8017462:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8017466:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 801746a:	2b00      	cmp	r3, #0
 801746c:	f43e ae54 	beq.w	8016118 <iNemoEngine_API_Update+0x2b30>
 8017470:	9906      	ldr	r1, [sp, #24]
 8017472:	2200      	movs	r2, #0
 8017474:	464b      	mov	r3, r9
 8017476:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 801747a:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 801747e:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8017482:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8017486:	f7fe ba06 	b.w	8015896 <iNemoEngine_API_Update+0x22ae>
 801748a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801748e:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8017492:	edd2 3a31 	vldr	s7, [r2, #196]	; 0xc4
 8017496:	edd2 7a33 	vldr	s15, [r2, #204]	; 0xcc
 801749a:	ee77 7ae3 	vsub.f32	s15, s15, s7
 801749e:	ee67 7a84 	vmul.f32	s15, s15, s8
 80174a2:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80174a6:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 80174aa:	eef4 8ae7 	vcmpe.f32	s17, s15
 80174ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174b2:	ee3f fa23 	vadd.f32	s30, s30, s7
 80174b6:	f6fe ac6e 	blt.w	8015d96 <iNemoEngine_API_Update+0x27ae>
 80174ba:	9b06      	ldr	r3, [sp, #24]
 80174bc:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 80174c0:	eef4 8ac7 	vcmpe.f32	s17, s14
 80174c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174c8:	f140 837a 	bpl.w	8017bc0 <iNemoEngine_API_Update+0x45d8>
 80174cc:	edd3 3a35 	vldr	s7, [r3, #212]	; 0xd4
 80174d0:	ed93 4a37 	vldr	s8, [r3, #220]	; 0xdc
 80174d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80174d8:	ee34 4a63 	vsub.f32	s8, s8, s7
 80174dc:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80174e0:	ee64 7a27 	vmul.f32	s15, s8, s15
 80174e4:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80174e8:	ee3f fa23 	vadd.f32	s30, s30, s7
 80174ec:	9b06      	ldr	r3, [sp, #24]
 80174ee:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 80174f2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80174f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174fa:	f6fe ac6d 	blt.w	8015dd8 <iNemoEngine_API_Update+0x27f0>
 80174fe:	9b06      	ldr	r3, [sp, #24]
 8017500:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 8017504:	eef4 8ac7 	vcmpe.f32	s17, s14
 8017508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801750c:	f140 82fd 	bpl.w	8017b0a <iNemoEngine_API_Update+0x4522>
 8017510:	edd3 3a39 	vldr	s7, [r3, #228]	; 0xe4
 8017514:	ed93 4a3b 	vldr	s8, [r3, #236]	; 0xec
 8017518:	ee37 7a67 	vsub.f32	s14, s14, s15
 801751c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8017520:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017524:	ee64 7a27 	vmul.f32	s15, s8, s15
 8017528:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801752c:	ee3f fa23 	vadd.f32	s30, s30, s7
 8017530:	9b06      	ldr	r3, [sp, #24]
 8017532:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8017536:	eef4 8ae7 	vcmpe.f32	s17, s15
 801753a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801753e:	f6fe ac6d 	blt.w	8015e1c <iNemoEngine_API_Update+0x2834>
 8017542:	9b06      	ldr	r3, [sp, #24]
 8017544:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8017548:	eef4 8ac7 	vcmpe.f32	s17, s14
 801754c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017550:	f140 831a 	bpl.w	8017b88 <iNemoEngine_API_Update+0x45a0>
 8017554:	edd3 3a3d 	vldr	s7, [r3, #244]	; 0xf4
 8017558:	ed93 4a3f 	vldr	s8, [r3, #252]	; 0xfc
 801755c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017560:	ee34 4a63 	vsub.f32	s8, s8, s7
 8017564:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017568:	ee64 7a27 	vmul.f32	s15, s8, s15
 801756c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8017570:	ee3f fa23 	vadd.f32	s30, s30, s7
 8017574:	9b06      	ldr	r3, [sp, #24]
 8017576:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 801757a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801757e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017582:	f6fe ac6d 	blt.w	8015e60 <iNemoEngine_API_Update+0x2878>
 8017586:	9b06      	ldr	r3, [sp, #24]
 8017588:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 801758c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8017590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017594:	f140 82c3 	bpl.w	8017b1e <iNemoEngine_API_Update+0x4536>
 8017598:	edd3 3a41 	vldr	s7, [r3, #260]	; 0x104
 801759c:	ed93 4a43 	vldr	s8, [r3, #268]	; 0x10c
 80175a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80175a4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80175a8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80175ac:	ee64 7a27 	vmul.f32	s15, s8, s15
 80175b0:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80175b4:	ee3f fa23 	vadd.f32	s30, s30, s7
 80175b8:	9b06      	ldr	r3, [sp, #24]
 80175ba:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 80175be:	eef4 8ae7 	vcmpe.f32	s17, s15
 80175c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175c6:	f6fe ac6d 	blt.w	8015ea4 <iNemoEngine_API_Update+0x28bc>
 80175ca:	9b06      	ldr	r3, [sp, #24]
 80175cc:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
 80175d0:	eef4 8ac7 	vcmpe.f32	s17, s14
 80175d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d8:	f140 82d2 	bpl.w	8017b80 <iNemoEngine_API_Update+0x4598>
 80175dc:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 80175e0:	edd3 4a47 	vldr	s9, [r3, #284]	; 0x11c
 80175e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80175e8:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80175ec:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80175f0:	ee64 7aa7 	vmul.f32	s15, s9, s15
 80175f4:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80175f8:	ee3f fa04 	vadd.f32	s30, s30, s8
 80175fc:	f7fd ba93 	b.w	8014b26 <iNemoEngine_API_Update+0x153e>
 8017600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017604:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8017608:	edd3 3a4b 	vldr	s7, [r3, #300]	; 0x12c
 801760c:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8017610:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8017614:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017618:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801761c:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8017620:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017628:	ee3c ca23 	vadd.f32	s24, s24, s7
 801762c:	f6fd aaab 	blt.w	8014b86 <iNemoEngine_API_Update+0x159e>
 8017630:	9b06      	ldr	r3, [sp, #24]
 8017632:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 8017636:	eef4 8ac7 	vcmpe.f32	s17, s14
 801763a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801763e:	f140 8260 	bpl.w	8017b02 <iNemoEngine_API_Update+0x451a>
 8017642:	edd3 3a4f 	vldr	s7, [r3, #316]	; 0x13c
 8017646:	ed93 4a51 	vldr	s8, [r3, #324]	; 0x144
 801764a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801764e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8017652:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017656:	ee64 7a27 	vmul.f32	s15, s8, s15
 801765a:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801765e:	ee3c ca23 	vadd.f32	s24, s24, s7
 8017662:	9b06      	ldr	r3, [sp, #24]
 8017664:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8017668:	eef4 8ae7 	vcmpe.f32	s17, s15
 801766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017670:	f6fd aaaa 	blt.w	8014bc8 <iNemoEngine_API_Update+0x15e0>
 8017674:	9b06      	ldr	r3, [sp, #24]
 8017676:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 801767a:	eef4 8ac7 	vcmpe.f32	s17, s14
 801767e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017682:	f140 8237 	bpl.w	8017af4 <iNemoEngine_API_Update+0x450c>
 8017686:	edd3 3a53 	vldr	s7, [r3, #332]	; 0x14c
 801768a:	ed93 4a55 	vldr	s8, [r3, #340]	; 0x154
 801768e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017692:	ee34 4a63 	vsub.f32	s8, s8, s7
 8017696:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801769a:	ee64 7a27 	vmul.f32	s15, s8, s15
 801769e:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80176a2:	ee3c ca23 	vadd.f32	s24, s24, s7
 80176a6:	9b06      	ldr	r3, [sp, #24]
 80176a8:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 80176ac:	eef4 8ae7 	vcmpe.f32	s17, s15
 80176b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176b4:	f6fd aaaa 	blt.w	8014c0c <iNemoEngine_API_Update+0x1624>
 80176b8:	9b06      	ldr	r3, [sp, #24]
 80176ba:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 80176be:	eef4 8ac7 	vcmpe.f32	s17, s14
 80176c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176c6:	f140 8270 	bpl.w	8017baa <iNemoEngine_API_Update+0x45c2>
 80176ca:	edd3 3a57 	vldr	s7, [r3, #348]	; 0x15c
 80176ce:	ed93 4a59 	vldr	s8, [r3, #356]	; 0x164
 80176d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80176d6:	ee34 4a63 	vsub.f32	s8, s8, s7
 80176da:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80176de:	ee64 7a27 	vmul.f32	s15, s8, s15
 80176e2:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80176e6:	ee3c ca23 	vadd.f32	s24, s24, s7
 80176ea:	9b06      	ldr	r3, [sp, #24]
 80176ec:	edd3 7a5a 	vldr	s15, [r3, #360]	; 0x168
 80176f0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80176f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176f8:	f6fd aaaa 	blt.w	8014c50 <iNemoEngine_API_Update+0x1668>
 80176fc:	9b06      	ldr	r3, [sp, #24]
 80176fe:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 8017702:	eef4 8ac7 	vcmpe.f32	s17, s14
 8017706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801770a:	f140 8252 	bpl.w	8017bb2 <iNemoEngine_API_Update+0x45ca>
 801770e:	edd3 3a5b 	vldr	s7, [r3, #364]	; 0x16c
 8017712:	ed93 4a5d 	vldr	s8, [r3, #372]	; 0x174
 8017716:	ee37 7a67 	vsub.f32	s14, s14, s15
 801771a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801771e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017722:	ee64 7a27 	vmul.f32	s15, s8, s15
 8017726:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801772a:	ee3c ca23 	vadd.f32	s24, s24, s7
 801772e:	9b06      	ldr	r3, [sp, #24]
 8017730:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8017734:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801773c:	f6fd aaaa 	blt.w	8014c94 <iNemoEngine_API_Update+0x16ac>
 8017740:	9b06      	ldr	r3, [sp, #24]
 8017742:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 8017746:	eef4 8ac7 	vcmpe.f32	s17, s14
 801774a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801774e:	f140 8222 	bpl.w	8017b96 <iNemoEngine_API_Update+0x45ae>
 8017752:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 8017756:	edd3 4a61 	vldr	s9, [r3, #388]	; 0x184
 801775a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801775e:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8017762:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017766:	ee64 7aa7 	vmul.f32	s15, s9, s15
 801776a:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801776e:	ee3c ca04 	vadd.f32	s24, s24, s8
 8017772:	f7fd bb2a 	b.w	8014dca <iNemoEngine_API_Update+0x17e2>
 8017776:	a94e      	add	r1, sp, #312	; 0x138
 8017778:	a868      	add	r0, sp, #416	; 0x1a0
 801777a:	f7fa fb0b 	bl	8011d94 <b_dcm2q>
 801777e:	9d06      	ldr	r5, [sp, #24]
 8017780:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8017784:	edc5 7a72 	vstr	s15, [r5, #456]	; 0x1c8
 8017788:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801778c:	edc5 7a73 	vstr	s15, [r5, #460]	; 0x1cc
 8017790:	4621      	mov	r1, r4
 8017792:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8017796:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
 801779a:	edcd 7a05 	vstr	s15, [sp, #20]
 801779e:	f002 fb6f 	bl	8019e80 <memset>
 80177a2:	4be5      	ldr	r3, [pc, #916]	; (8017b38 <iNemoEngine_API_Update+0x4550>)
 80177a4:	702c      	strb	r4, [r5, #0]
 80177a6:	eddd 7a05 	vldr	s15, [sp, #20]
 80177aa:	edd5 2a02 	vldr	s5, [r5, #8]
 80177ae:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 80177b2:	9a06      	ldr	r2, [sp, #24]
 80177b4:	f8c5 31d4 	str.w	r3, [r5, #468]	; 0x1d4
 80177b8:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
 80177bc:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
 80177c0:	f8c5 324c 	str.w	r3, [r5, #588]	; 0x24c
 80177c4:	f8c5 3274 	str.w	r3, [r5, #628]	; 0x274
 80177c8:	f8c5 329c 	str.w	r3, [r5, #668]	; 0x29c
 80177cc:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
 80177d0:	f8c5 32ec 	str.w	r3, [r5, #748]	; 0x2ec
 80177d4:	f8c5 3314 	str.w	r3, [r5, #788]	; 0x314
 80177d8:	2401      	movs	r4, #1
 80177da:	f7fd bb44 	b.w	8014e66 <iNemoEngine_API_Update+0x187e>
 80177de:	290a      	cmp	r1, #10
 80177e0:	f000 815d 	beq.w	8017a9e <iNemoEngine_API_Update+0x44b6>
 80177e4:	1c4b      	adds	r3, r1, #1
 80177e6:	9906      	ldr	r1, [sp, #24]
 80177e8:	f881 31a0 	strb.w	r3, [r1, #416]	; 0x1a0
 80177ec:	4613      	mov	r3, r2
 80177ee:	2200      	movs	r2, #0
 80177f0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80177f4:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 80177f8:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 80177fc:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8017800:	f7fe b849 	b.w	8015896 <iNemoEngine_API_Update+0x22ae>
 8017804:	ed9d 7a55 	vldr	s14, [sp, #340]	; 0x154
 8017808:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801780c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017810:	f340 824f 	ble.w	8017cb2 <iNemoEngine_API_Update+0x46ca>
 8017814:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801781c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017820:	f140 8244 	bpl.w	8017cac <iNemoEngine_API_Update+0x46c4>
 8017824:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801782c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017830:	f140 81f9 	bpl.w	8017c26 <iNemoEngine_API_Update+0x463e>
 8017834:	eddf 7ace 	vldr	s15, [pc, #824]	; 8017b70 <iNemoEngine_API_Update+0x4588>
 8017838:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801783c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017840:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8017844:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8017848:	eef0 8a46 	vmov.f32	s17, s12
 801784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017850:	eee7 8aa5 	vfma.f32	s17, s15, s11
 8017854:	f2c0 81fb 	blt.w	8017c4e <iNemoEngine_API_Update+0x4666>
 8017858:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801785c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017864:	f140 81fb 	bpl.w	8017c5e <iNemoEngine_API_Update+0x4676>
 8017868:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801786c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017870:	ed9f 6ab2 	vldr	s12, [pc, #712]	; 8017b3c <iNemoEngine_API_Update+0x4554>
 8017874:	eddf 8ab2 	vldr	s17, [pc, #712]	; 8017b40 <iNemoEngine_API_Update+0x4558>
 8017878:	eee7 8a86 	vfma.f32	s17, s15, s12
 801787c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8017880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017888:	f2c0 81fb 	blt.w	8017c82 <iNemoEngine_API_Update+0x469a>
 801788c:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8017890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017898:	f140 81fb 	bpl.w	8017c92 <iNemoEngine_API_Update+0x46aa>
 801789c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80178a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80178a4:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 80178a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80178ac:	eee7 8a87 	vfma.f32	s17, s15, s14
 80178b0:	9a06      	ldr	r2, [sp, #24]
 80178b2:	2300      	movs	r3, #0
 80178b4:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 80178b8:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 80178bc:	f7fe bc29 	b.w	8016112 <iNemoEngine_API_Update+0x2b2a>
 80178c0:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8017b44 <iNemoEngine_API_Update+0x455c>
 80178c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80178c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178cc:	f57e ad78 	bpl.w	80163c0 <iNemoEngine_API_Update+0x2dd8>
 80178d0:	ed9f 6a9d 	vldr	s12, [pc, #628]	; 8017b48 <iNemoEngine_API_Update+0x4560>
 80178d4:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8017b70 <iNemoEngine_API_Update+0x4588>
 80178d8:	eddf 5a9c 	vldr	s11, [pc, #624]	; 8017b4c <iNemoEngine_API_Update+0x4564>
 80178dc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80178e0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80178e4:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8017b50 <iNemoEngine_API_Update+0x4568>
 80178e8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80178ec:	ed9f 6a99 	vldr	s12, [pc, #612]	; 8017b54 <iNemoEngine_API_Update+0x456c>
 80178f0:	eef4 7ac6 	vcmpe.f32	s15, s12
 80178f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178f8:	f6fe ad78 	blt.w	80163ec <iNemoEngine_API_Update+0x2e04>
 80178fc:	eddf 6a96 	vldr	s13, [pc, #600]	; 8017b58 <iNemoEngine_API_Update+0x4570>
 8017900:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017908:	f57e ad78 	bpl.w	80163fc <iNemoEngine_API_Update+0x2e14>
 801790c:	ed9f 6a91 	vldr	s12, [pc, #580]	; 8017b54 <iNemoEngine_API_Update+0x456c>
 8017910:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8017914:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8017918:	ee26 6a26 	vmul.f32	s12, s12, s13
 801791c:	eef3 5a04 	vmov.f32	s11, #52	; 0x41a00000  20.0
 8017920:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8017924:	eee6 6a25 	vfma.f32	s13, s12, s11
 8017928:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8017b78 <iNemoEngine_API_Update+0x4590>
 801792c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017934:	f6fe ad78 	blt.w	8016428 <iNemoEngine_API_Update+0x2e40>
 8017938:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801793c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017944:	f57e ad77 	bpl.w	8016436 <iNemoEngine_API_Update+0x2e4e>
 8017948:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8017b78 <iNemoEngine_API_Update+0x4590>
 801794c:	eddf 6a83 	vldr	s13, [pc, #524]	; 8017b5c <iNemoEngine_API_Update+0x4574>
 8017950:	eddf 5a83 	vldr	s11, [pc, #524]	; 8017b60 <iNemoEngine_API_Update+0x4578>
 8017954:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8017958:	ee26 6a26 	vmul.f32	s12, s12, s13
 801795c:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8017960:	eee6 6a25 	vfma.f32	s13, s12, s11
 8017964:	f7fe bd75 	b.w	8016452 <iNemoEngine_API_Update+0x2e6a>
 8017968:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8017b64 <iNemoEngine_API_Update+0x457c>
 801796c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017974:	f57e ad06 	bpl.w	8016384 <iNemoEngine_API_Update+0x2d9c>
 8017978:	eddf 6a73 	vldr	s13, [pc, #460]	; 8017b48 <iNemoEngine_API_Update+0x4560>
 801797c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017984:	da9c      	bge.n	80178c0 <iNemoEngine_API_Update+0x42d8>
 8017986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801798a:	f7fe bd11 	b.w	80163b0 <iNemoEngine_API_Update+0x2dc8>
 801798e:	2104      	movs	r1, #4
 8017990:	f04f 0e03 	mov.w	lr, #3
 8017994:	2706      	movs	r7, #6
 8017996:	f04f 0c07 	mov.w	ip, #7
 801799a:	4608      	mov	r0, r1
 801799c:	2301      	movs	r3, #1
 801799e:	2600      	movs	r6, #0
 80179a0:	f7ff bbfa 	b.w	8017198 <iNemoEngine_API_Update+0x3bb0>
 80179a4:	eddf 3a70 	vldr	s7, [pc, #448]	; 8017b68 <iNemoEngine_API_Update+0x4580>
 80179a8:	ed9f 5a70 	vldr	s10, [pc, #448]	; 8017b6c <iNemoEngine_API_Update+0x4584>
 80179ac:	ac43      	add	r4, sp, #268	; 0x10c
 80179ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80179b2:	edd0 7a7c 	vldr	s15, [r0, #496]	; 0x1f0
 80179b6:	f5a0 73ae 	sub.w	r3, r0, #348	; 0x15c
 80179ba:	3101      	adds	r1, #1
 80179bc:	eeb0 7a67 	vmov.f32	s14, s15
 80179c0:	461a      	mov	r2, r3
 80179c2:	edd2 5ad6 	vldr	s11, [r2, #856]	; 0x358
 80179c6:	320c      	adds	r2, #12
 80179c8:	4290      	cmp	r0, r2
 80179ca:	ee37 7a25 	vadd.f32	s14, s14, s11
 80179ce:	d1f8      	bne.n	80179c2 <iNemoEngine_API_Update+0x43da>
 80179d0:	ee27 7a23 	vmul.f32	s14, s14, s7
 80179d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80179d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80179dc:	edd3 5ad6 	vldr	s11, [r3, #856]	; 0x358
 80179e0:	330c      	adds	r3, #12
 80179e2:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80179e6:	4298      	cmp	r0, r3
 80179e8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80179ec:	d1f6      	bne.n	80179dc <iNemoEngine_API_Update+0x43f4>
 80179ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 80179f2:	2902      	cmp	r1, #2
 80179f4:	f100 0004 	add.w	r0, r0, #4
 80179f8:	ece4 7a01 	vstmia	r4!, {s15}
 80179fc:	d1d9      	bne.n	80179b2 <iNemoEngine_API_Update+0x43ca>
 80179fe:	eddd 5a43 	vldr	s11, [sp, #268]	; 0x10c
 8017a02:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 8017a06:	ed9d 7a45 	vldr	s14, [sp, #276]	; 0x114
 8017a0a:	eeb1 3ae5 	vsqrt.f32	s6, s11
 8017a0e:	eef1 3ae7 	vsqrt.f32	s7, s15
 8017a12:	eeb1 5ac7 	vsqrt.f32	s10, s14
 8017a16:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8017a1a:	eef3 5a00 	vmov.f32	s11, #48	; 0x41800000  16.0
 8017a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017a22:	ed8d 3a43 	vstr	s6, [sp, #268]	; 0x10c
 8017a26:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a2e:	edcd 3a44 	vstr	s7, [sp, #272]	; 0x110
 8017a32:	ed8d 5a45 	vstr	s10, [sp, #276]	; 0x114
 8017a36:	f57e abd4 	bpl.w	80161e2 <iNemoEngine_API_Update+0x2bfa>
 8017a3a:	9906      	ldr	r1, [sp, #24]
 8017a3c:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 8017a40:	2200      	movs	r2, #0
 8017a42:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 8017a46:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8017a4a:	464b      	mov	r3, r9
 8017a4c:	704a      	strb	r2, [r1, #1]
 8017a4e:	f7fd bf22 	b.w	8015896 <iNemoEngine_API_Update+0x22ae>
 8017a52:	2208      	movs	r2, #8
 8017a54:	9203      	str	r2, [sp, #12]
 8017a56:	2205      	movs	r2, #5
 8017a58:	920e      	str	r2, [sp, #56]	; 0x38
 8017a5a:	2202      	movs	r2, #2
 8017a5c:	f7ff bbb3 	b.w	80171c6 <iNemoEngine_API_Update+0x3bde>
 8017a60:	2301      	movs	r3, #1
 8017a62:	f7fd bf04 	b.w	801586e <iNemoEngine_API_Update+0x2286>
 8017a66:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8017a6a:	2b27      	cmp	r3, #39	; 0x27
 8017a6c:	d838      	bhi.n	8017ae0 <iNemoEngine_API_Update+0x44f8>
 8017a6e:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 8017a72:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 8017a76:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8017a7a:	9906      	ldr	r1, [sp, #24]
 8017a7c:	f8b1 31a8 	ldrh.w	r3, [r1, #424]	; 0x1a8
 8017a80:	3301      	adds	r3, #1
 8017a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017a86:	bf14      	ite	ne
 8017a88:	b29b      	uxthne	r3, r3
 8017a8a:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8017a8e:	2201      	movs	r2, #1
 8017a90:	f8a1 31a8 	strh.w	r3, [r1, #424]	; 0x1a8
 8017a94:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8017a98:	464b      	mov	r3, r9
 8017a9a:	f7fd befc 	b.w	8015896 <iNemoEngine_API_Update+0x22ae>
 8017a9e:	9906      	ldr	r1, [sp, #24]
 8017aa0:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8017aa4:	f891 31a3 	ldrb.w	r3, [r1, #419]	; 0x1a3
 8017aa8:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 8017aac:	3301      	adds	r3, #1
 8017aae:	f881 31a3 	strb.w	r3, [r1, #419]	; 0x1a3
 8017ab2:	784b      	ldrb	r3, [r1, #1]
 8017ab4:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8017ab8:	f240 1201 	movw	r2, #257	; 0x101
 8017abc:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8017ac0:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8017ac4:	b13b      	cbz	r3, 8017ad6 <iNemoEngine_API_Update+0x44ee>
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	ed81 ea6f 	vstr	s28, [r1, #444]	; 0x1bc
 8017acc:	edc1 ea70 	vstr	s29, [r1, #448]	; 0x1c0
 8017ad0:	edc1 ba71 	vstr	s23, [r1, #452]	; 0x1c4
 8017ad4:	704b      	strb	r3, [r1, #1]
 8017ad6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017ada:	2301      	movs	r3, #1
 8017adc:	f7fd bedb 	b.w	8015896 <iNemoEngine_API_Update+0x22ae>
 8017ae0:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 8017ae4:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8017ae8:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8017aec:	e7c5      	b.n	8017a7a <iNemoEngine_API_Update+0x4492>
 8017aee:	eef0 7a47 	vmov.f32	s15, s14
 8017af2:	e5bf      	b.n	8017674 <iNemoEngine_API_Update+0x408c>
 8017af4:	eef0 7a47 	vmov.f32	s15, s14
 8017af8:	f7fd b86f 	b.w	8014bda <iNemoEngine_API_Update+0x15f2>
 8017afc:	eef0 7a47 	vmov.f32	s15, s14
 8017b00:	e563      	b.n	80175ca <iNemoEngine_API_Update+0x3fe2>
 8017b02:	eef0 7a47 	vmov.f32	s15, s14
 8017b06:	f7fd b846 	b.w	8014b96 <iNemoEngine_API_Update+0x15ae>
 8017b0a:	eef0 7a47 	vmov.f32	s15, s14
 8017b0e:	f7fe b96c 	b.w	8015dea <iNemoEngine_API_Update+0x2802>
 8017b12:	eef0 7a47 	vmov.f32	s15, s14
 8017b16:	e4f2      	b.n	80174fe <iNemoEngine_API_Update+0x3f16>
 8017b18:	eef0 7a47 	vmov.f32	s15, s14
 8017b1c:	e533      	b.n	8017586 <iNemoEngine_API_Update+0x3f9e>
 8017b1e:	eef0 7a47 	vmov.f32	s15, s14
 8017b22:	f7fe b9a6 	b.w	8015e72 <iNemoEngine_API_Update+0x288a>
 8017b26:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8017b2a:	9315      	str	r3, [sp, #84]	; 0x54
 8017b2c:	f7fc b886 	b.w	8013c3c <iNemoEngine_API_Update+0x654>
 8017b30:	f505 6597 	add.w	r5, r5, #1208	; 0x4b8
 8017b34:	f7fe be2c 	b.w	8016790 <iNemoEngine_API_Update+0x31a8>
 8017b38:	40a00000 	.word	0x40a00000
 8017b3c:	3e999998 	.word	0x3e999998
 8017b40:	3f99999a 	.word	0x3f99999a
 8017b44:	3cf5c28f 	.word	0x3cf5c28f
 8017b48:	3c75c28f 	.word	0x3c75c28f
 8017b4c:	42855556 	.word	0x42855556
 8017b50:	3f866666 	.word	0x3f866666
 8017b54:	3d4ccccd 	.word	0x3d4ccccd
 8017b58:	3dcccccd 	.word	0x3dcccccd
 8017b5c:	42200000 	.word	0x42200000
 8017b60:	40555555 	.word	0x40555555
 8017b64:	3c23d70a 	.word	0x3c23d70a
 8017b68:	3d088889 	.word	0x3d088889
 8017b6c:	3d0d3dcb 	.word	0x3d0d3dcb
 8017b70:	3dccccd0 	.word	0x3dccccd0
 8017b74:	3f8ccccd 	.word	0x3f8ccccd
 8017b78:	3e4ccccd 	.word	0x3e4ccccd
 8017b7c:	00000000 	.word	0x00000000
 8017b80:	eef0 7a47 	vmov.f32	s15, s14
 8017b84:	f7fe b997 	b.w	8015eb6 <iNemoEngine_API_Update+0x28ce>
 8017b88:	eef0 7a47 	vmov.f32	s15, s14
 8017b8c:	f7fe b94f 	b.w	8015e2e <iNemoEngine_API_Update+0x2846>
 8017b90:	eef0 7a47 	vmov.f32	s15, s14
 8017b94:	e4d5      	b.n	8017542 <iNemoEngine_API_Update+0x3f5a>
 8017b96:	eef0 7a47 	vmov.f32	s15, s14
 8017b9a:	f7fd b884 	b.w	8014ca6 <iNemoEngine_API_Update+0x16be>
 8017b9e:	eef0 7a47 	vmov.f32	s15, s14
 8017ba2:	e5cd      	b.n	8017740 <iNemoEngine_API_Update+0x4158>
 8017ba4:	eef0 7a47 	vmov.f32	s15, s14
 8017ba8:	e586      	b.n	80176b8 <iNemoEngine_API_Update+0x40d0>
 8017baa:	eef0 7a47 	vmov.f32	s15, s14
 8017bae:	f7fd b836 	b.w	8014c1e <iNemoEngine_API_Update+0x1636>
 8017bb2:	eef0 7a47 	vmov.f32	s15, s14
 8017bb6:	f7fd b854 	b.w	8014c62 <iNemoEngine_API_Update+0x167a>
 8017bba:	eef0 7a47 	vmov.f32	s15, s14
 8017bbe:	e59d      	b.n	80176fc <iNemoEngine_API_Update+0x4114>
 8017bc0:	eef0 7a47 	vmov.f32	s15, s14
 8017bc4:	f7fe b8ef 	b.w	8015da6 <iNemoEngine_API_Update+0x27be>
 8017bc8:	9906      	ldr	r1, [sp, #24]
 8017bca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017bce:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 8017bd2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 8017bd6:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 8017bda:	f7fe ba9a 	b.w	8016112 <iNemoEngine_API_Update+0x2b2a>
 8017bde:	9906      	ldr	r1, [sp, #24]
 8017be0:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 8017be4:	3301      	adds	r3, #1
 8017be6:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 8017bea:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8017bee:	460b      	mov	r3, r1
 8017bf0:	f7ff ba49 	b.w	8017086 <iNemoEngine_API_Update+0x3a9e>
 8017bf4:	2a00      	cmp	r2, #0
 8017bf6:	f73d afa4 	bgt.w	8015b42 <iNemoEngine_API_Update+0x255a>
 8017bfa:	eddd 5a83 	vldr	s11, [sp, #524]	; 0x20c
 8017bfe:	ed9d 7a84 	vldr	s14, [sp, #528]	; 0x210
 8017c02:	eddd 7a85 	vldr	s15, [sp, #532]	; 0x214
 8017c06:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8017c0a:	ee65 5a86 	vmul.f32	s11, s11, s12
 8017c0e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017c12:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017c16:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 8017c1a:	ed8d 7a84 	vstr	s14, [sp, #528]	; 0x210
 8017c1e:	edcd 7a85 	vstr	s15, [sp, #532]	; 0x214
 8017c22:	f7fd bb24 	b.w	801526e <iNemoEngine_API_Update+0x1c86>
 8017c26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017c2a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8017c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c32:	f57f ae11 	bpl.w	8017858 <iNemoEngine_API_Update+0x4270>
 8017c36:	ed1f 6a32 	vldr	s12, [pc, #-200]	; 8017b70 <iNemoEngine_API_Update+0x4588>
 8017c3a:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 8017b74 <iNemoEngine_API_Update+0x458c>
 8017c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017c42:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017c46:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8017c4a:	eee7 8a86 	vfma.f32	s17, s15, s12
 8017c4e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c5a:	f6ff ae0f 	blt.w	801787c <iNemoEngine_API_Update+0x4294>
 8017c5e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8017c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c6a:	f57f ae0f 	bpl.w	801788c <iNemoEngine_API_Update+0x42a4>
 8017c6e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017c76:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8017c7a:	eef7 8a08 	vmov.f32	s17, #120	; 0x3fc00000  1.5
 8017c7e:	eee7 8a86 	vfma.f32	s17, s15, s12
 8017c82:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8017c86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c8e:	f6ff ae0f 	blt.w	80178b0 <iNemoEngine_API_Update+0x42c8>
 8017c92:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8017c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017c9a:	ed1f 7a49 	vldr	s14, [pc, #-292]	; 8017b78 <iNemoEngine_API_Update+0x4590>
 8017c9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017ca2:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
 8017ca6:	eee7 8a87 	vfma.f32	s17, s15, s14
 8017caa:	e601      	b.n	80178b0 <iNemoEngine_API_Update+0x42c8>
 8017cac:	eef1 8a04 	vmov.f32	s17, #20	; 0x40a00000  5.0
 8017cb0:	e5fe      	b.n	80178b0 <iNemoEngine_API_Update+0x42c8>
 8017cb2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017cb6:	e5fb      	b.n	80178b0 <iNemoEngine_API_Update+0x42c8>
 8017cb8:	ed1f 8a50 	vldr	s16, [pc, #-320]	; 8017b7c <iNemoEngine_API_Update+0x4594>
 8017cbc:	f7fb bdeb 	b.w	8013896 <iNemoEngine_API_Update+0x2ae>

08017cc0 <MotionFX_initialize>:
 8017cc0:	4a4c      	ldr	r2, [pc, #304]	; (8017df4 <MotionFX_initialize+0x134>)
 8017cc2:	6813      	ldr	r3, [r2, #0]
 8017cc4:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
 8017cc8:	f023 0301 	bic.w	r3, r3, #1
 8017ccc:	b530      	push	{r4, r5, lr}
 8017cce:	6013      	str	r3, [r2, #0]
 8017cd0:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 8017cd4:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8017cd8:	400b      	ands	r3, r1
 8017cda:	f24c 2240 	movw	r2, #49728	; 0xc240
 8017cde:	4293      	cmp	r3, r2
 8017ce0:	b085      	sub	sp, #20
 8017ce2:	4604      	mov	r4, r0
 8017ce4:	d013      	beq.n	8017d0e <MotionFX_initialize+0x4e>
 8017ce6:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 8017cea:	f24c 2270 	movw	r2, #49776	; 0xc270
 8017cee:	4019      	ands	r1, r3
 8017cf0:	4291      	cmp	r1, r2
 8017cf2:	d00c      	beq.n	8017d0e <MotionFX_initialize+0x4e>
 8017cf4:	4a40      	ldr	r2, [pc, #256]	; (8017df8 <MotionFX_initialize+0x138>)
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	6093      	str	r3, [r2, #8]
 8017cfa:	6893      	ldr	r3, [r2, #8]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d1fc      	bne.n	8017cfa <MotionFX_initialize+0x3a>
 8017d00:	4b3e      	ldr	r3, [pc, #248]	; (8017dfc <MotionFX_initialize+0x13c>)
 8017d02:	6013      	str	r3, [r2, #0]
 8017d04:	6812      	ldr	r2, [r2, #0]
 8017d06:	4b3e      	ldr	r3, [pc, #248]	; (8017e00 <MotionFX_initialize+0x140>)
 8017d08:	429a      	cmp	r2, r3
 8017d0a:	d02c      	beq.n	8017d66 <MotionFX_initialize+0xa6>
 8017d0c:	e7fe      	b.n	8017d0c <MotionFX_initialize+0x4c>
 8017d0e:	4b3d      	ldr	r3, [pc, #244]	; (8017e04 <MotionFX_initialize+0x144>)
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d1ee      	bne.n	8017cf4 <MotionFX_initialize+0x34>
 8017d16:	4a3c      	ldr	r2, [pc, #240]	; (8017e08 <MotionFX_initialize+0x148>)
 8017d18:	6813      	ldr	r3, [r2, #0]
 8017d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d1e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8017d22:	d056      	beq.n	8017dd2 <MotionFX_initialize+0x112>
 8017d24:	6813      	ldr	r3, [r2, #0]
 8017d26:	f240 4183 	movw	r1, #1155	; 0x483
 8017d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d2e:	428b      	cmp	r3, r1
 8017d30:	d04f      	beq.n	8017dd2 <MotionFX_initialize+0x112>
 8017d32:	6813      	ldr	r3, [r2, #0]
 8017d34:	f240 4285 	movw	r2, #1157	; 0x485
 8017d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d3c:	4293      	cmp	r3, r2
 8017d3e:	d048      	beq.n	8017dd2 <MotionFX_initialize+0x112>
 8017d40:	4b32      	ldr	r3, [pc, #200]	; (8017e0c <MotionFX_initialize+0x14c>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017d48:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8017d4c:	d1d2      	bne.n	8017cf4 <MotionFX_initialize+0x34>
 8017d4e:	4a30      	ldr	r2, [pc, #192]	; (8017e10 <MotionFX_initialize+0x150>)
 8017d50:	2301      	movs	r3, #1
 8017d52:	6093      	str	r3, [r2, #8]
 8017d54:	6893      	ldr	r3, [r2, #8]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d1fc      	bne.n	8017d54 <MotionFX_initialize+0x94>
 8017d5a:	4b28      	ldr	r3, [pc, #160]	; (8017dfc <MotionFX_initialize+0x13c>)
 8017d5c:	6013      	str	r3, [r2, #0]
 8017d5e:	6812      	ldr	r2, [r2, #0]
 8017d60:	4b27      	ldr	r3, [pc, #156]	; (8017e00 <MotionFX_initialize+0x140>)
 8017d62:	429a      	cmp	r2, r3
 8017d64:	d1d2      	bne.n	8017d0c <MotionFX_initialize+0x4c>
 8017d66:	4b2b      	ldr	r3, [pc, #172]	; (8017e14 <MotionFX_initialize+0x154>)
 8017d68:	4a2b      	ldr	r2, [pc, #172]	; (8017e18 <MotionFX_initialize+0x158>)
 8017d6a:	9303      	str	r3, [sp, #12]
 8017d6c:	2501      	movs	r5, #1
 8017d6e:	4620      	mov	r0, r4
 8017d70:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8017d74:	f882 53c4 	strb.w	r5, [r2, #964]	; 0x3c4
 8017d78:	f7fb f946 	bl	8013008 <MFX_emptyAttitude>
 8017d7c:	a901      	add	r1, sp, #4
 8017d7e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017d82:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8017d86:	f7f9 ff03 	bl	8011b90 <updateOrientation>
 8017d8a:	a903      	add	r1, sp, #12
 8017d8c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017d90:	f7f9 fefe 	bl	8011b90 <updateOrientation>
 8017d94:	a902      	add	r1, sp, #8
 8017d96:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017d9a:	f7f9 fef9 	bl	8011b90 <updateOrientation>
 8017d9e:	4b1f      	ldr	r3, [pc, #124]	; (8017e1c <MotionFX_initialize+0x15c>)
 8017da0:	491f      	ldr	r1, [pc, #124]	; (8017e20 <MotionFX_initialize+0x160>)
 8017da2:	6363      	str	r3, [r4, #52]	; 0x34
 8017da4:	4b1f      	ldr	r3, [pc, #124]	; (8017e24 <MotionFX_initialize+0x164>)
 8017da6:	4a20      	ldr	r2, [pc, #128]	; (8017e28 <MotionFX_initialize+0x168>)
 8017da8:	62a1      	str	r1, [r4, #40]	; 0x28
 8017daa:	61e3      	str	r3, [r4, #28]
 8017dac:	491f      	ldr	r1, [pc, #124]	; (8017e2c <MotionFX_initialize+0x16c>)
 8017dae:	61a2      	str	r2, [r4, #24]
 8017db0:	2300      	movs	r3, #0
 8017db2:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8017db6:	f44f 7281 	mov.w	r2, #258	; 0x102
 8017dba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8017dbe:	f240 1301 	movw	r3, #257	; 0x101
 8017dc2:	62e0      	str	r0, [r4, #44]	; 0x2c
 8017dc4:	6221      	str	r1, [r4, #32]
 8017dc6:	80a2      	strh	r2, [r4, #4]
 8017dc8:	f8a4 300d 	strh.w	r3, [r4, #13]
 8017dcc:	73e5      	strb	r5, [r4, #15]
 8017dce:	b005      	add	sp, #20
 8017dd0:	bd30      	pop	{r4, r5, pc}
 8017dd2:	4a17      	ldr	r2, [pc, #92]	; (8017e30 <MotionFX_initialize+0x170>)
 8017dd4:	2301      	movs	r3, #1
 8017dd6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8017dda:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d1fb      	bne.n	8017dda <MotionFX_initialize+0x11a>
 8017de2:	4b06      	ldr	r3, [pc, #24]	; (8017dfc <MotionFX_initialize+0x13c>)
 8017de4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8017de8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8017dec:	4b04      	ldr	r3, [pc, #16]	; (8017e00 <MotionFX_initialize+0x140>)
 8017dee:	429a      	cmp	r2, r3
 8017df0:	d0b9      	beq.n	8017d66 <MotionFX_initialize+0xa6>
 8017df2:	e78b      	b.n	8017d0c <MotionFX_initialize+0x4c>
 8017df4:	e0002000 	.word	0xe0002000
 8017df8:	40023000 	.word	0x40023000
 8017dfc:	f407a5c2 	.word	0xf407a5c2
 8017e00:	b5e8b5cd 	.word	0xb5e8b5cd
 8017e04:	e0042000 	.word	0xe0042000
 8017e08:	5c001000 	.word	0x5c001000
 8017e0c:	50081000 	.word	0x50081000
 8017e10:	4c004000 	.word	0x4c004000
 8017e14:	00756e65 	.word	0x00756e65
 8017e18:	20000224 	.word	0x20000224
 8017e1c:	3f2ac083 	.word	0x3f2ac083
 8017e20:	3f666666 	.word	0x3f666666
 8017e24:	3a378034 	.word	0x3a378034
 8017e28:	3a51b717 	.word	0x3a51b717
 8017e2c:	3b378034 	.word	0x3b378034
 8017e30:	58024000 	.word	0x58024000

08017e34 <MotionFX_setKnobs>:
 8017e34:	4b24      	ldr	r3, [pc, #144]	; (8017ec8 <MotionFX_setKnobs+0x94>)
 8017e36:	f893 23c4 	ldrb.w	r2, [r3, #964]	; 0x3c4
 8017e3a:	b902      	cbnz	r2, 8017e3e <MotionFX_setKnobs+0xa>
 8017e3c:	4770      	bx	lr
 8017e3e:	460b      	mov	r3, r1
 8017e40:	2900      	cmp	r1, #0
 8017e42:	d0fb      	beq.n	8017e3c <MotionFX_setKnobs+0x8>
 8017e44:	b510      	push	{r4, lr}
 8017e46:	4604      	mov	r4, r0
 8017e48:	689a      	ldr	r2, [r3, #8]
 8017e4a:	6808      	ldr	r0, [r1, #0]
 8017e4c:	6849      	ldr	r1, [r1, #4]
 8017e4e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8017e50:	62a0      	str	r0, [r4, #40]	; 0x28
 8017e52:	6362      	str	r2, [r4, #52]	; 0x34
 8017e54:	7b1a      	ldrb	r2, [r3, #12]
 8017e56:	7162      	strb	r2, [r4, #5]
 8017e58:	6918      	ldr	r0, [r3, #16]
 8017e5a:	6959      	ldr	r1, [r3, #20]
 8017e5c:	699a      	ldr	r2, [r3, #24]
 8017e5e:	6222      	str	r2, [r4, #32]
 8017e60:	61a0      	str	r0, [r4, #24]
 8017e62:	61e1      	str	r1, [r4, #28]
 8017e64:	7f1a      	ldrb	r2, [r3, #28]
 8017e66:	7122      	strb	r2, [r4, #4]
 8017e68:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8017e6c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 8017e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e72:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8017e76:	b084      	sub	sp, #16
 8017e78:	f8b3 101d 	ldrh.w	r1, [r3, #29]
 8017e7c:	7fda      	ldrb	r2, [r3, #31]
 8017e7e:	f88d 2006 	strb.w	r2, [sp, #6]
 8017e82:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017e86:	f8b3 2021 	ldrh.w	r2, [r3, #33]	; 0x21
 8017e8a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8017e8e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017e92:	f88d 200a 	strb.w	r2, [sp, #10]
 8017e96:	f8b3 2025 	ldrh.w	r2, [r3, #37]	; 0x25
 8017e9a:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017e9e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8017ea2:	f88d 300e 	strb.w	r3, [sp, #14]
 8017ea6:	a901      	add	r1, sp, #4
 8017ea8:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017eac:	f7f9 fe70 	bl	8011b90 <updateOrientation>
 8017eb0:	a903      	add	r1, sp, #12
 8017eb2:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017eb6:	f7f9 fe6b 	bl	8011b90 <updateOrientation>
 8017eba:	a902      	add	r1, sp, #8
 8017ebc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017ec0:	f7f9 fe66 	bl	8011b90 <updateOrientation>
 8017ec4:	b004      	add	sp, #16
 8017ec6:	bd10      	pop	{r4, pc}
 8017ec8:	20000224 	.word	0x20000224

08017ecc <MotionFX_getKnobs>:
 8017ecc:	4b1d      	ldr	r3, [pc, #116]	; (8017f44 <MotionFX_getKnobs+0x78>)
 8017ece:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8017ed2:	b903      	cbnz	r3, 8017ed6 <MotionFX_getKnobs+0xa>
 8017ed4:	4770      	bx	lr
 8017ed6:	460a      	mov	r2, r1
 8017ed8:	2900      	cmp	r1, #0
 8017eda:	d0fb      	beq.n	8017ed4 <MotionFX_getKnobs+0x8>
 8017edc:	b510      	push	{r4, lr}
 8017ede:	4604      	mov	r4, r0
 8017ee0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017ee2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017ee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ee6:	6093      	str	r3, [r2, #8]
 8017ee8:	6010      	str	r0, [r2, #0]
 8017eea:	6051      	str	r1, [r2, #4]
 8017eec:	7963      	ldrb	r3, [r4, #5]
 8017eee:	7313      	strb	r3, [r2, #12]
 8017ef0:	69a0      	ldr	r0, [r4, #24]
 8017ef2:	69e1      	ldr	r1, [r4, #28]
 8017ef4:	6a23      	ldr	r3, [r4, #32]
 8017ef6:	6193      	str	r3, [r2, #24]
 8017ef8:	6110      	str	r0, [r2, #16]
 8017efa:	6151      	str	r1, [r2, #20]
 8017efc:	7923      	ldrb	r3, [r4, #4]
 8017efe:	7713      	strb	r3, [r2, #28]
 8017f00:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017f04:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8017f08:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8017f0c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8017f0e:	f102 011d 	add.w	r1, r2, #29
 8017f12:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017f16:	f7f9 fc93 	bl	8011840 <findAxis>
 8017f1a:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8017f1e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017f22:	f7f9 fc8d 	bl	8011840 <findAxis>
 8017f26:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8017f2a:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017f2e:	f7f9 fc87 	bl	8011840 <findAxis>
 8017f32:	2300      	movs	r3, #0
 8017f34:	f882 3020 	strb.w	r3, [r2, #32]
 8017f38:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8017f3c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8017f40:	bd10      	pop	{r4, pc}
 8017f42:	bf00      	nop
 8017f44:	20000224 	.word	0x20000224

08017f48 <MotionFX_enable_6X>:
 8017f48:	4b0e      	ldr	r3, [pc, #56]	; (8017f84 <MotionFX_enable_6X+0x3c>)
 8017f4a:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8017f4e:	b903      	cbnz	r3, 8017f52 <MotionFX_enable_6X+0xa>
 8017f50:	4770      	bx	lr
 8017f52:	2900      	cmp	r1, #0
 8017f54:	d0fc      	beq.n	8017f50 <MotionFX_enable_6X+0x8>
 8017f56:	b530      	push	{r4, r5, lr}
 8017f58:	1d05      	adds	r5, r0, #4
 8017f5a:	b099      	sub	sp, #100	; 0x64
 8017f5c:	4604      	mov	r4, r0
 8017f5e:	4629      	mov	r1, r5
 8017f60:	225c      	movs	r2, #92	; 0x5c
 8017f62:	a801      	add	r0, sp, #4
 8017f64:	f002 f81a 	bl	8019f9c <memcpy>
 8017f68:	4620      	mov	r0, r4
 8017f6a:	f7fb f84d 	bl	8013008 <MFX_emptyAttitude>
 8017f6e:	225c      	movs	r2, #92	; 0x5c
 8017f70:	a901      	add	r1, sp, #4
 8017f72:	4628      	mov	r0, r5
 8017f74:	f002 f812 	bl	8019f9c <memcpy>
 8017f78:	2300      	movs	r3, #0
 8017f7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8017f7e:	7363      	strb	r3, [r4, #13]
 8017f80:	b019      	add	sp, #100	; 0x64
 8017f82:	bd30      	pop	{r4, r5, pc}
 8017f84:	20000224 	.word	0x20000224

08017f88 <MotionFX_enable_9X>:
 8017f88:	4b0e      	ldr	r3, [pc, #56]	; (8017fc4 <MotionFX_enable_9X+0x3c>)
 8017f8a:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8017f8e:	b903      	cbnz	r3, 8017f92 <MotionFX_enable_9X+0xa>
 8017f90:	4770      	bx	lr
 8017f92:	2900      	cmp	r1, #0
 8017f94:	d0fc      	beq.n	8017f90 <MotionFX_enable_9X+0x8>
 8017f96:	b530      	push	{r4, r5, lr}
 8017f98:	1d05      	adds	r5, r0, #4
 8017f9a:	b099      	sub	sp, #100	; 0x64
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	4629      	mov	r1, r5
 8017fa0:	225c      	movs	r2, #92	; 0x5c
 8017fa2:	a801      	add	r0, sp, #4
 8017fa4:	f001 fffa 	bl	8019f9c <memcpy>
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f7fb f82d 	bl	8013008 <MFX_emptyAttitude>
 8017fae:	225c      	movs	r2, #92	; 0x5c
 8017fb0:	a901      	add	r1, sp, #4
 8017fb2:	4628      	mov	r0, r5
 8017fb4:	f001 fff2 	bl	8019f9c <memcpy>
 8017fb8:	2301      	movs	r3, #1
 8017fba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8017fbe:	7363      	strb	r3, [r4, #13]
 8017fc0:	b019      	add	sp, #100	; 0x64
 8017fc2:	bd30      	pop	{r4, r5, pc}
 8017fc4:	20000224 	.word	0x20000224

08017fc8 <MotionFX_update>:
 8017fc8:	b430      	push	{r4, r5}
 8017fca:	4c06      	ldr	r4, [pc, #24]	; (8017fe4 <MotionFX_update+0x1c>)
 8017fcc:	9d02      	ldr	r5, [sp, #8]
 8017fce:	f894 43c4 	ldrb.w	r4, [r4, #964]	; 0x3c4
 8017fd2:	b90c      	cbnz	r4, 8017fd8 <MotionFX_update+0x10>
 8017fd4:	bc30      	pop	{r4, r5}
 8017fd6:	4770      	bx	lr
 8017fd8:	ed93 0a00 	vldr	s0, [r3]
 8017fdc:	462b      	mov	r3, r5
 8017fde:	bc30      	pop	{r4, r5}
 8017fe0:	f7fb bb02 	b.w	80135e8 <iNemoEngine_API_Update>
 8017fe4:	20000224 	.word	0x20000224

08017fe8 <MotionFX_propagate>:
 8017fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fec:	ed2d 8b06 	vpush	{d8-d10}
 8017ff0:	4ca2      	ldr	r4, [pc, #648]	; (801827c <MotionFX_propagate+0x294>)
 8017ff2:	f894 63c4 	ldrb.w	r6, [r4, #964]	; 0x3c4
 8017ff6:	b0a1      	sub	sp, #132	; 0x84
 8017ff8:	b926      	cbnz	r6, 8018004 <MotionFX_propagate+0x1c>
 8017ffa:	b021      	add	sp, #132	; 0x84
 8017ffc:	ecbd 8b06 	vpop	{d8-d10}
 8018000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018004:	4694      	mov	ip, r2
 8018006:	4604      	mov	r4, r0
 8018008:	460d      	mov	r5, r1
 801800a:	68d0      	ldr	r0, [r2, #12]
 801800c:	6911      	ldr	r1, [r2, #16]
 801800e:	6952      	ldr	r2, [r2, #20]
 8018010:	edd3 9a00 	vldr	s19, [r3]
 8018014:	ab13      	add	r3, sp, #76	; 0x4c
 8018016:	c307      	stmia	r3!, {r0, r1, r2}
 8018018:	f8dc 0000 	ldr.w	r0, [ip]
 801801c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8018020:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018024:	ab10      	add	r3, sp, #64	; 0x40
 8018026:	c307      	stmia	r3!, {r0, r1, r2}
 8018028:	f8dc 0018 	ldr.w	r0, [ip, #24]
 801802c:	f8dc 101c 	ldr.w	r1, [ip, #28]
 8018030:	f8dc 2020 	ldr.w	r2, [ip, #32]
 8018034:	ab16      	add	r3, sp, #88	; 0x58
 8018036:	f104 073a 	add.w	r7, r4, #58	; 0x3a
 801803a:	c307      	stmia	r3!, {r0, r1, r2}
 801803c:	4639      	mov	r1, r7
 801803e:	a803      	add	r0, sp, #12
 8018040:	aa13      	add	r2, sp, #76	; 0x4c
 8018042:	f7f9 fb9b 	bl	801177c <rotVect>
 8018046:	aa16      	add	r2, sp, #88	; 0x58
 8018048:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801804c:	a806      	add	r0, sp, #24
 801804e:	f7f9 fb95 	bl	801177c <rotVect>
 8018052:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8018056:	2b09      	cmp	r3, #9
 8018058:	d829      	bhi.n	80180ae <MotionFX_propagate+0xc6>
 801805a:	eddd 8a04 	vldr	s17, [sp, #16]
 801805e:	ed9d 9a03 	vldr	s18, [sp, #12]
 8018062:	ed9d 8a05 	vldr	s16, [sp, #20]
 8018066:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801806a:	eee9 7a09 	vfma.f32	s15, s18, s18
 801806e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8018072:	ee17 0a90 	vmov	r0, s15
 8018076:	f7e8 fa71 	bl	800055c <__aeabi_f2d>
 801807a:	ec41 0b10 	vmov	d0, r0, r1
 801807e:	f004 fe61 	bl	801cd44 <sqrt>
 8018082:	ec51 0b10 	vmov	r0, r1, d0
 8018086:	f7e8 fdb9 	bl	8000bfc <__aeabi_d2f>
 801808a:	ee07 0a90 	vmov	s15, r0
 801808e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018092:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8018096:	ee29 9a27 	vmul.f32	s18, s18, s15
 801809a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801809e:	ee28 8a27 	vmul.f32	s16, s16, s15
 80180a2:	ed8d 9a03 	vstr	s18, [sp, #12]
 80180a6:	edcd 8a04 	vstr	s17, [sp, #16]
 80180aa:	ed8d 8a05 	vstr	s16, [sp, #20]
 80180ae:	7923      	ldrb	r3, [r4, #4]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	f000 80ce 	beq.w	8018252 <MotionFX_propagate+0x26a>
 80180b6:	ee07 3a90 	vmov	s15, r3
 80180ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80180be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80180c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80180c6:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 80180ca:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 80180ce:	edd3 7a00 	vldr	s15, [r3]
 80180d2:	eddd 8a06 	vldr	s17, [sp, #24]
 80180d6:	ed9d 6a07 	vldr	s12, [sp, #28]
 80180da:	eddd 6a08 	vldr	s13, [sp, #32]
 80180de:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8018280 <MotionFX_propagate+0x298>
 80180e2:	eddf 5a68 	vldr	s11, [pc, #416]	; 8018284 <MotionFX_propagate+0x29c>
 80180e6:	eee7 7a28 	vfma.f32	s15, s14, s17
 80180ea:	ee26 9a08 	vmul.f32	s18, s12, s16
 80180ee:	edc3 7a00 	vstr	s15, [r3]
 80180f2:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 80180f6:	edd3 7a00 	vldr	s15, [r3]
 80180fa:	ed8d 9a07 	vstr	s18, [sp, #28]
 80180fe:	eee7 7a06 	vfma.f32	s15, s14, s12
 8018102:	ee68 8a88 	vmul.f32	s17, s17, s16
 8018106:	edc3 7a00 	vstr	s15, [r3]
 801810a:	f604 1364 	addw	r3, r4, #2404	; 0x964
 801810e:	edd3 7a00 	vldr	s15, [r3]
 8018112:	edcd 8a06 	vstr	s17, [sp, #24]
 8018116:	eee7 7a26 	vfma.f32	s15, s14, s13
 801811a:	ee26 8a88 	vmul.f32	s16, s13, s16
 801811e:	edc3 7a00 	vstr	s15, [r3]
 8018122:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8018126:	edd3 7a00 	vldr	s15, [r3]
 801812a:	ed8d 8a08 	vstr	s16, [sp, #32]
 801812e:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8018132:	ed93 7a00 	vldr	s14, [r3]
 8018136:	ee39 9a67 	vsub.f32	s18, s18, s15
 801813a:	ee78 8ac7 	vsub.f32	s17, s17, s14
 801813e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8018142:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8018146:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801814a:	ed93 7a00 	vldr	s14, [r3]
 801814e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8018152:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8018156:	eee8 7a08 	vfma.f32	s15, s16, s16
 801815a:	ee29 0a80 	vmul.f32	s0, s19, s0
 801815e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8018162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018166:	dd79      	ble.n	801825c <MotionFX_propagate+0x274>
 8018168:	eeb1 aae7 	vsqrt.f32	s20, s15
 801816c:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8018170:	eeb0 0a69 	vmov.f32	s0, s19
 8018174:	f004 ffbc 	bl	801d0f0 <sinf>
 8018178:	eeb0 7a40 	vmov.f32	s14, s0
 801817c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018180:	eeb0 0a69 	vmov.f32	s0, s19
 8018184:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8018188:	ee29 9a27 	vmul.f32	s18, s18, s15
 801818c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018190:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8018194:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8018198:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 801819c:	f004 fd8e 	bl	801ccbc <cosf>
 80181a0:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 80181a4:	a809      	add	r0, sp, #36	; 0x24
 80181a6:	f604 1838 	addw	r8, r4, #2360	; 0x938
 80181aa:	4632      	mov	r2, r6
 80181ac:	4631      	mov	r1, r6
 80181ae:	f7f9 fd71 	bl	8011c94 <qmult>
 80181b2:	edd8 6a00 	vldr	s13, [r8]
 80181b6:	edd6 5a00 	vldr	s11, [r6]
 80181ba:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 80181be:	f604 1934 	addw	r9, r4, #2356	; 0x934
 80181c2:	ed99 6a00 	vldr	s12, [r9]
 80181c6:	ee66 7aa6 	vmul.f32	s15, s13, s13
 80181ca:	4639      	mov	r1, r7
 80181cc:	eee6 7a06 	vfma.f32	s15, s12, s12
 80181d0:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 80181d4:	3301      	adds	r3, #1
 80181d6:	ed97 7a00 	vldr	s14, [r7]
 80181da:	eee7 7a07 	vfma.f32	s15, s14, s14
 80181de:	aa13      	add	r2, sp, #76	; 0x4c
 80181e0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80181e4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80181e8:	eeb1 5ae7 	vsqrt.f32	s10, s15
 80181ec:	eec4 7a85 	vdiv.f32	s15, s9, s10
 80181f0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80181f4:	ee27 6a86 	vmul.f32	s12, s15, s12
 80181f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80181fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018200:	edc6 5a00 	vstr	s11, [r6]
 8018204:	ed89 6a00 	vstr	s12, [r9]
 8018208:	edc8 6a00 	vstr	s13, [r8]
 801820c:	ed87 7a00 	vstr	s14, [r7]
 8018210:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8018214:	f7f9 fab2 	bl	801177c <rotVect>
 8018218:	6833      	ldr	r3, [r6, #0]
 801821a:	60eb      	str	r3, [r5, #12]
 801821c:	f8d9 3000 	ldr.w	r3, [r9]
 8018220:	f8d8 2000 	ldr.w	r2, [r8]
 8018224:	612b      	str	r3, [r5, #16]
 8018226:	683b      	ldr	r3, [r7, #0]
 8018228:	61ab      	str	r3, [r5, #24]
 801822a:	616a      	str	r2, [r5, #20]
 801822c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8018230:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8018234:	e9cd 3200 	strd	r3, r2, [sp]
 8018238:	4601      	mov	r1, r0
 801823a:	f105 031c 	add.w	r3, r5, #28
 801823e:	462a      	mov	r2, r5
 8018240:	f105 000c 	add.w	r0, r5, #12
 8018244:	f7fa fe16 	bl	8012e74 <output_update>
 8018248:	b021      	add	sp, #132	; 0x84
 801824a:	ecbd 8b06 	vpop	{d8-d10}
 801824e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018252:	2301      	movs	r3, #1
 8018254:	7123      	strb	r3, [r4, #4]
 8018256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801825a:	e734      	b.n	80180c6 <MotionFX_propagate+0xde>
 801825c:	ee68 8a80 	vmul.f32	s17, s17, s0
 8018260:	ee29 9a00 	vmul.f32	s18, s18, s0
 8018264:	ee28 8a00 	vmul.f32	s16, s16, s0
 8018268:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801826c:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8018270:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8018274:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8018278:	930c      	str	r3, [sp, #48]	; 0x30
 801827a:	e793      	b.n	80181a4 <MotionFX_propagate+0x1bc>
 801827c:	20000224 	.word	0x20000224
 8018280:	3c8efa35 	.word	0x3c8efa35
 8018284:	38d1b718 	.word	0x38d1b718

08018288 <atoi>:
 8018288:	220a      	movs	r2, #10
 801828a:	2100      	movs	r1, #0
 801828c:	f001 bdbe 	b.w	8019e0c <strtol>

08018290 <__cvt>:
 8018290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018294:	ec55 4b10 	vmov	r4, r5, d0
 8018298:	2d00      	cmp	r5, #0
 801829a:	460e      	mov	r6, r1
 801829c:	4619      	mov	r1, r3
 801829e:	462b      	mov	r3, r5
 80182a0:	bfbb      	ittet	lt
 80182a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80182a6:	461d      	movlt	r5, r3
 80182a8:	2300      	movge	r3, #0
 80182aa:	232d      	movlt	r3, #45	; 0x2d
 80182ac:	700b      	strb	r3, [r1, #0]
 80182ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80182b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80182b4:	4691      	mov	r9, r2
 80182b6:	f023 0820 	bic.w	r8, r3, #32
 80182ba:	bfbc      	itt	lt
 80182bc:	4622      	movlt	r2, r4
 80182be:	4614      	movlt	r4, r2
 80182c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80182c4:	d005      	beq.n	80182d2 <__cvt+0x42>
 80182c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80182ca:	d100      	bne.n	80182ce <__cvt+0x3e>
 80182cc:	3601      	adds	r6, #1
 80182ce:	2102      	movs	r1, #2
 80182d0:	e000      	b.n	80182d4 <__cvt+0x44>
 80182d2:	2103      	movs	r1, #3
 80182d4:	ab03      	add	r3, sp, #12
 80182d6:	9301      	str	r3, [sp, #4]
 80182d8:	ab02      	add	r3, sp, #8
 80182da:	9300      	str	r3, [sp, #0]
 80182dc:	ec45 4b10 	vmov	d0, r4, r5
 80182e0:	4653      	mov	r3, sl
 80182e2:	4632      	mov	r2, r6
 80182e4:	f001 ff00 	bl	801a0e8 <_dtoa_r>
 80182e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80182ec:	4607      	mov	r7, r0
 80182ee:	d102      	bne.n	80182f6 <__cvt+0x66>
 80182f0:	f019 0f01 	tst.w	r9, #1
 80182f4:	d022      	beq.n	801833c <__cvt+0xac>
 80182f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80182fa:	eb07 0906 	add.w	r9, r7, r6
 80182fe:	d110      	bne.n	8018322 <__cvt+0x92>
 8018300:	783b      	ldrb	r3, [r7, #0]
 8018302:	2b30      	cmp	r3, #48	; 0x30
 8018304:	d10a      	bne.n	801831c <__cvt+0x8c>
 8018306:	2200      	movs	r2, #0
 8018308:	2300      	movs	r3, #0
 801830a:	4620      	mov	r0, r4
 801830c:	4629      	mov	r1, r5
 801830e:	f7e8 fbe5 	bl	8000adc <__aeabi_dcmpeq>
 8018312:	b918      	cbnz	r0, 801831c <__cvt+0x8c>
 8018314:	f1c6 0601 	rsb	r6, r6, #1
 8018318:	f8ca 6000 	str.w	r6, [sl]
 801831c:	f8da 3000 	ldr.w	r3, [sl]
 8018320:	4499      	add	r9, r3
 8018322:	2200      	movs	r2, #0
 8018324:	2300      	movs	r3, #0
 8018326:	4620      	mov	r0, r4
 8018328:	4629      	mov	r1, r5
 801832a:	f7e8 fbd7 	bl	8000adc <__aeabi_dcmpeq>
 801832e:	b108      	cbz	r0, 8018334 <__cvt+0xa4>
 8018330:	f8cd 900c 	str.w	r9, [sp, #12]
 8018334:	2230      	movs	r2, #48	; 0x30
 8018336:	9b03      	ldr	r3, [sp, #12]
 8018338:	454b      	cmp	r3, r9
 801833a:	d307      	bcc.n	801834c <__cvt+0xbc>
 801833c:	9b03      	ldr	r3, [sp, #12]
 801833e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018340:	1bdb      	subs	r3, r3, r7
 8018342:	4638      	mov	r0, r7
 8018344:	6013      	str	r3, [r2, #0]
 8018346:	b004      	add	sp, #16
 8018348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801834c:	1c59      	adds	r1, r3, #1
 801834e:	9103      	str	r1, [sp, #12]
 8018350:	701a      	strb	r2, [r3, #0]
 8018352:	e7f0      	b.n	8018336 <__cvt+0xa6>

08018354 <__exponent>:
 8018354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018356:	4603      	mov	r3, r0
 8018358:	2900      	cmp	r1, #0
 801835a:	bfb8      	it	lt
 801835c:	4249      	neglt	r1, r1
 801835e:	f803 2b02 	strb.w	r2, [r3], #2
 8018362:	bfb4      	ite	lt
 8018364:	222d      	movlt	r2, #45	; 0x2d
 8018366:	222b      	movge	r2, #43	; 0x2b
 8018368:	2909      	cmp	r1, #9
 801836a:	7042      	strb	r2, [r0, #1]
 801836c:	dd2a      	ble.n	80183c4 <__exponent+0x70>
 801836e:	f10d 0207 	add.w	r2, sp, #7
 8018372:	4617      	mov	r7, r2
 8018374:	260a      	movs	r6, #10
 8018376:	4694      	mov	ip, r2
 8018378:	fb91 f5f6 	sdiv	r5, r1, r6
 801837c:	fb06 1415 	mls	r4, r6, r5, r1
 8018380:	3430      	adds	r4, #48	; 0x30
 8018382:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8018386:	460c      	mov	r4, r1
 8018388:	2c63      	cmp	r4, #99	; 0x63
 801838a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801838e:	4629      	mov	r1, r5
 8018390:	dcf1      	bgt.n	8018376 <__exponent+0x22>
 8018392:	3130      	adds	r1, #48	; 0x30
 8018394:	f1ac 0402 	sub.w	r4, ip, #2
 8018398:	f802 1c01 	strb.w	r1, [r2, #-1]
 801839c:	1c41      	adds	r1, r0, #1
 801839e:	4622      	mov	r2, r4
 80183a0:	42ba      	cmp	r2, r7
 80183a2:	d30a      	bcc.n	80183ba <__exponent+0x66>
 80183a4:	f10d 0209 	add.w	r2, sp, #9
 80183a8:	eba2 020c 	sub.w	r2, r2, ip
 80183ac:	42bc      	cmp	r4, r7
 80183ae:	bf88      	it	hi
 80183b0:	2200      	movhi	r2, #0
 80183b2:	4413      	add	r3, r2
 80183b4:	1a18      	subs	r0, r3, r0
 80183b6:	b003      	add	sp, #12
 80183b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80183be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80183c2:	e7ed      	b.n	80183a0 <__exponent+0x4c>
 80183c4:	2330      	movs	r3, #48	; 0x30
 80183c6:	3130      	adds	r1, #48	; 0x30
 80183c8:	7083      	strb	r3, [r0, #2]
 80183ca:	70c1      	strb	r1, [r0, #3]
 80183cc:	1d03      	adds	r3, r0, #4
 80183ce:	e7f1      	b.n	80183b4 <__exponent+0x60>

080183d0 <_printf_float>:
 80183d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183d4:	ed2d 8b02 	vpush	{d8}
 80183d8:	b08d      	sub	sp, #52	; 0x34
 80183da:	460c      	mov	r4, r1
 80183dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80183e0:	4616      	mov	r6, r2
 80183e2:	461f      	mov	r7, r3
 80183e4:	4605      	mov	r5, r0
 80183e6:	f001 fd53 	bl	8019e90 <_localeconv_r>
 80183ea:	f8d0 a000 	ldr.w	sl, [r0]
 80183ee:	4650      	mov	r0, sl
 80183f0:	f7e7 ff3e 	bl	8000270 <strlen>
 80183f4:	2300      	movs	r3, #0
 80183f6:	930a      	str	r3, [sp, #40]	; 0x28
 80183f8:	6823      	ldr	r3, [r4, #0]
 80183fa:	9305      	str	r3, [sp, #20]
 80183fc:	f8d8 3000 	ldr.w	r3, [r8]
 8018400:	f894 b018 	ldrb.w	fp, [r4, #24]
 8018404:	3307      	adds	r3, #7
 8018406:	f023 0307 	bic.w	r3, r3, #7
 801840a:	f103 0208 	add.w	r2, r3, #8
 801840e:	f8c8 2000 	str.w	r2, [r8]
 8018412:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018416:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801841a:	9307      	str	r3, [sp, #28]
 801841c:	f8cd 8018 	str.w	r8, [sp, #24]
 8018420:	ee08 0a10 	vmov	s16, r0
 8018424:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8018428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801842c:	4b9e      	ldr	r3, [pc, #632]	; (80186a8 <_printf_float+0x2d8>)
 801842e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018432:	f7e8 fb85 	bl	8000b40 <__aeabi_dcmpun>
 8018436:	bb88      	cbnz	r0, 801849c <_printf_float+0xcc>
 8018438:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801843c:	4b9a      	ldr	r3, [pc, #616]	; (80186a8 <_printf_float+0x2d8>)
 801843e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018442:	f7e8 fb5f 	bl	8000b04 <__aeabi_dcmple>
 8018446:	bb48      	cbnz	r0, 801849c <_printf_float+0xcc>
 8018448:	2200      	movs	r2, #0
 801844a:	2300      	movs	r3, #0
 801844c:	4640      	mov	r0, r8
 801844e:	4649      	mov	r1, r9
 8018450:	f7e8 fb4e 	bl	8000af0 <__aeabi_dcmplt>
 8018454:	b110      	cbz	r0, 801845c <_printf_float+0x8c>
 8018456:	232d      	movs	r3, #45	; 0x2d
 8018458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801845c:	4a93      	ldr	r2, [pc, #588]	; (80186ac <_printf_float+0x2dc>)
 801845e:	4b94      	ldr	r3, [pc, #592]	; (80186b0 <_printf_float+0x2e0>)
 8018460:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8018464:	bf94      	ite	ls
 8018466:	4690      	movls	r8, r2
 8018468:	4698      	movhi	r8, r3
 801846a:	2303      	movs	r3, #3
 801846c:	6123      	str	r3, [r4, #16]
 801846e:	9b05      	ldr	r3, [sp, #20]
 8018470:	f023 0304 	bic.w	r3, r3, #4
 8018474:	6023      	str	r3, [r4, #0]
 8018476:	f04f 0900 	mov.w	r9, #0
 801847a:	9700      	str	r7, [sp, #0]
 801847c:	4633      	mov	r3, r6
 801847e:	aa0b      	add	r2, sp, #44	; 0x2c
 8018480:	4621      	mov	r1, r4
 8018482:	4628      	mov	r0, r5
 8018484:	f000 f9da 	bl	801883c <_printf_common>
 8018488:	3001      	adds	r0, #1
 801848a:	f040 8090 	bne.w	80185ae <_printf_float+0x1de>
 801848e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018492:	b00d      	add	sp, #52	; 0x34
 8018494:	ecbd 8b02 	vpop	{d8}
 8018498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801849c:	4642      	mov	r2, r8
 801849e:	464b      	mov	r3, r9
 80184a0:	4640      	mov	r0, r8
 80184a2:	4649      	mov	r1, r9
 80184a4:	f7e8 fb4c 	bl	8000b40 <__aeabi_dcmpun>
 80184a8:	b140      	cbz	r0, 80184bc <_printf_float+0xec>
 80184aa:	464b      	mov	r3, r9
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	bfbc      	itt	lt
 80184b0:	232d      	movlt	r3, #45	; 0x2d
 80184b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80184b6:	4a7f      	ldr	r2, [pc, #508]	; (80186b4 <_printf_float+0x2e4>)
 80184b8:	4b7f      	ldr	r3, [pc, #508]	; (80186b8 <_printf_float+0x2e8>)
 80184ba:	e7d1      	b.n	8018460 <_printf_float+0x90>
 80184bc:	6863      	ldr	r3, [r4, #4]
 80184be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80184c2:	9206      	str	r2, [sp, #24]
 80184c4:	1c5a      	adds	r2, r3, #1
 80184c6:	d13f      	bne.n	8018548 <_printf_float+0x178>
 80184c8:	2306      	movs	r3, #6
 80184ca:	6063      	str	r3, [r4, #4]
 80184cc:	9b05      	ldr	r3, [sp, #20]
 80184ce:	6861      	ldr	r1, [r4, #4]
 80184d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80184d4:	2300      	movs	r3, #0
 80184d6:	9303      	str	r3, [sp, #12]
 80184d8:	ab0a      	add	r3, sp, #40	; 0x28
 80184da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80184de:	ab09      	add	r3, sp, #36	; 0x24
 80184e0:	ec49 8b10 	vmov	d0, r8, r9
 80184e4:	9300      	str	r3, [sp, #0]
 80184e6:	6022      	str	r2, [r4, #0]
 80184e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80184ec:	4628      	mov	r0, r5
 80184ee:	f7ff fecf 	bl	8018290 <__cvt>
 80184f2:	9b06      	ldr	r3, [sp, #24]
 80184f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80184f6:	2b47      	cmp	r3, #71	; 0x47
 80184f8:	4680      	mov	r8, r0
 80184fa:	d108      	bne.n	801850e <_printf_float+0x13e>
 80184fc:	1cc8      	adds	r0, r1, #3
 80184fe:	db02      	blt.n	8018506 <_printf_float+0x136>
 8018500:	6863      	ldr	r3, [r4, #4]
 8018502:	4299      	cmp	r1, r3
 8018504:	dd41      	ble.n	801858a <_printf_float+0x1ba>
 8018506:	f1ab 0302 	sub.w	r3, fp, #2
 801850a:	fa5f fb83 	uxtb.w	fp, r3
 801850e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018512:	d820      	bhi.n	8018556 <_printf_float+0x186>
 8018514:	3901      	subs	r1, #1
 8018516:	465a      	mov	r2, fp
 8018518:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801851c:	9109      	str	r1, [sp, #36]	; 0x24
 801851e:	f7ff ff19 	bl	8018354 <__exponent>
 8018522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018524:	1813      	adds	r3, r2, r0
 8018526:	2a01      	cmp	r2, #1
 8018528:	4681      	mov	r9, r0
 801852a:	6123      	str	r3, [r4, #16]
 801852c:	dc02      	bgt.n	8018534 <_printf_float+0x164>
 801852e:	6822      	ldr	r2, [r4, #0]
 8018530:	07d2      	lsls	r2, r2, #31
 8018532:	d501      	bpl.n	8018538 <_printf_float+0x168>
 8018534:	3301      	adds	r3, #1
 8018536:	6123      	str	r3, [r4, #16]
 8018538:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801853c:	2b00      	cmp	r3, #0
 801853e:	d09c      	beq.n	801847a <_printf_float+0xaa>
 8018540:	232d      	movs	r3, #45	; 0x2d
 8018542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018546:	e798      	b.n	801847a <_printf_float+0xaa>
 8018548:	9a06      	ldr	r2, [sp, #24]
 801854a:	2a47      	cmp	r2, #71	; 0x47
 801854c:	d1be      	bne.n	80184cc <_printf_float+0xfc>
 801854e:	2b00      	cmp	r3, #0
 8018550:	d1bc      	bne.n	80184cc <_printf_float+0xfc>
 8018552:	2301      	movs	r3, #1
 8018554:	e7b9      	b.n	80184ca <_printf_float+0xfa>
 8018556:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801855a:	d118      	bne.n	801858e <_printf_float+0x1be>
 801855c:	2900      	cmp	r1, #0
 801855e:	6863      	ldr	r3, [r4, #4]
 8018560:	dd0b      	ble.n	801857a <_printf_float+0x1aa>
 8018562:	6121      	str	r1, [r4, #16]
 8018564:	b913      	cbnz	r3, 801856c <_printf_float+0x19c>
 8018566:	6822      	ldr	r2, [r4, #0]
 8018568:	07d0      	lsls	r0, r2, #31
 801856a:	d502      	bpl.n	8018572 <_printf_float+0x1a2>
 801856c:	3301      	adds	r3, #1
 801856e:	440b      	add	r3, r1
 8018570:	6123      	str	r3, [r4, #16]
 8018572:	65a1      	str	r1, [r4, #88]	; 0x58
 8018574:	f04f 0900 	mov.w	r9, #0
 8018578:	e7de      	b.n	8018538 <_printf_float+0x168>
 801857a:	b913      	cbnz	r3, 8018582 <_printf_float+0x1b2>
 801857c:	6822      	ldr	r2, [r4, #0]
 801857e:	07d2      	lsls	r2, r2, #31
 8018580:	d501      	bpl.n	8018586 <_printf_float+0x1b6>
 8018582:	3302      	adds	r3, #2
 8018584:	e7f4      	b.n	8018570 <_printf_float+0x1a0>
 8018586:	2301      	movs	r3, #1
 8018588:	e7f2      	b.n	8018570 <_printf_float+0x1a0>
 801858a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801858e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018590:	4299      	cmp	r1, r3
 8018592:	db05      	blt.n	80185a0 <_printf_float+0x1d0>
 8018594:	6823      	ldr	r3, [r4, #0]
 8018596:	6121      	str	r1, [r4, #16]
 8018598:	07d8      	lsls	r0, r3, #31
 801859a:	d5ea      	bpl.n	8018572 <_printf_float+0x1a2>
 801859c:	1c4b      	adds	r3, r1, #1
 801859e:	e7e7      	b.n	8018570 <_printf_float+0x1a0>
 80185a0:	2900      	cmp	r1, #0
 80185a2:	bfd4      	ite	le
 80185a4:	f1c1 0202 	rsble	r2, r1, #2
 80185a8:	2201      	movgt	r2, #1
 80185aa:	4413      	add	r3, r2
 80185ac:	e7e0      	b.n	8018570 <_printf_float+0x1a0>
 80185ae:	6823      	ldr	r3, [r4, #0]
 80185b0:	055a      	lsls	r2, r3, #21
 80185b2:	d407      	bmi.n	80185c4 <_printf_float+0x1f4>
 80185b4:	6923      	ldr	r3, [r4, #16]
 80185b6:	4642      	mov	r2, r8
 80185b8:	4631      	mov	r1, r6
 80185ba:	4628      	mov	r0, r5
 80185bc:	47b8      	blx	r7
 80185be:	3001      	adds	r0, #1
 80185c0:	d12c      	bne.n	801861c <_printf_float+0x24c>
 80185c2:	e764      	b.n	801848e <_printf_float+0xbe>
 80185c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80185c8:	f240 80e0 	bls.w	801878c <_printf_float+0x3bc>
 80185cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80185d0:	2200      	movs	r2, #0
 80185d2:	2300      	movs	r3, #0
 80185d4:	f7e8 fa82 	bl	8000adc <__aeabi_dcmpeq>
 80185d8:	2800      	cmp	r0, #0
 80185da:	d034      	beq.n	8018646 <_printf_float+0x276>
 80185dc:	4a37      	ldr	r2, [pc, #220]	; (80186bc <_printf_float+0x2ec>)
 80185de:	2301      	movs	r3, #1
 80185e0:	4631      	mov	r1, r6
 80185e2:	4628      	mov	r0, r5
 80185e4:	47b8      	blx	r7
 80185e6:	3001      	adds	r0, #1
 80185e8:	f43f af51 	beq.w	801848e <_printf_float+0xbe>
 80185ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80185f0:	429a      	cmp	r2, r3
 80185f2:	db02      	blt.n	80185fa <_printf_float+0x22a>
 80185f4:	6823      	ldr	r3, [r4, #0]
 80185f6:	07d8      	lsls	r0, r3, #31
 80185f8:	d510      	bpl.n	801861c <_printf_float+0x24c>
 80185fa:	ee18 3a10 	vmov	r3, s16
 80185fe:	4652      	mov	r2, sl
 8018600:	4631      	mov	r1, r6
 8018602:	4628      	mov	r0, r5
 8018604:	47b8      	blx	r7
 8018606:	3001      	adds	r0, #1
 8018608:	f43f af41 	beq.w	801848e <_printf_float+0xbe>
 801860c:	f04f 0800 	mov.w	r8, #0
 8018610:	f104 091a 	add.w	r9, r4, #26
 8018614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018616:	3b01      	subs	r3, #1
 8018618:	4543      	cmp	r3, r8
 801861a:	dc09      	bgt.n	8018630 <_printf_float+0x260>
 801861c:	6823      	ldr	r3, [r4, #0]
 801861e:	079b      	lsls	r3, r3, #30
 8018620:	f100 8107 	bmi.w	8018832 <_printf_float+0x462>
 8018624:	68e0      	ldr	r0, [r4, #12]
 8018626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018628:	4298      	cmp	r0, r3
 801862a:	bfb8      	it	lt
 801862c:	4618      	movlt	r0, r3
 801862e:	e730      	b.n	8018492 <_printf_float+0xc2>
 8018630:	2301      	movs	r3, #1
 8018632:	464a      	mov	r2, r9
 8018634:	4631      	mov	r1, r6
 8018636:	4628      	mov	r0, r5
 8018638:	47b8      	blx	r7
 801863a:	3001      	adds	r0, #1
 801863c:	f43f af27 	beq.w	801848e <_printf_float+0xbe>
 8018640:	f108 0801 	add.w	r8, r8, #1
 8018644:	e7e6      	b.n	8018614 <_printf_float+0x244>
 8018646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018648:	2b00      	cmp	r3, #0
 801864a:	dc39      	bgt.n	80186c0 <_printf_float+0x2f0>
 801864c:	4a1b      	ldr	r2, [pc, #108]	; (80186bc <_printf_float+0x2ec>)
 801864e:	2301      	movs	r3, #1
 8018650:	4631      	mov	r1, r6
 8018652:	4628      	mov	r0, r5
 8018654:	47b8      	blx	r7
 8018656:	3001      	adds	r0, #1
 8018658:	f43f af19 	beq.w	801848e <_printf_float+0xbe>
 801865c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8018660:	4313      	orrs	r3, r2
 8018662:	d102      	bne.n	801866a <_printf_float+0x29a>
 8018664:	6823      	ldr	r3, [r4, #0]
 8018666:	07d9      	lsls	r1, r3, #31
 8018668:	d5d8      	bpl.n	801861c <_printf_float+0x24c>
 801866a:	ee18 3a10 	vmov	r3, s16
 801866e:	4652      	mov	r2, sl
 8018670:	4631      	mov	r1, r6
 8018672:	4628      	mov	r0, r5
 8018674:	47b8      	blx	r7
 8018676:	3001      	adds	r0, #1
 8018678:	f43f af09 	beq.w	801848e <_printf_float+0xbe>
 801867c:	f04f 0900 	mov.w	r9, #0
 8018680:	f104 0a1a 	add.w	sl, r4, #26
 8018684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018686:	425b      	negs	r3, r3
 8018688:	454b      	cmp	r3, r9
 801868a:	dc01      	bgt.n	8018690 <_printf_float+0x2c0>
 801868c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801868e:	e792      	b.n	80185b6 <_printf_float+0x1e6>
 8018690:	2301      	movs	r3, #1
 8018692:	4652      	mov	r2, sl
 8018694:	4631      	mov	r1, r6
 8018696:	4628      	mov	r0, r5
 8018698:	47b8      	blx	r7
 801869a:	3001      	adds	r0, #1
 801869c:	f43f aef7 	beq.w	801848e <_printf_float+0xbe>
 80186a0:	f109 0901 	add.w	r9, r9, #1
 80186a4:	e7ee      	b.n	8018684 <_printf_float+0x2b4>
 80186a6:	bf00      	nop
 80186a8:	7fefffff 	.word	0x7fefffff
 80186ac:	0801fb0c 	.word	0x0801fb0c
 80186b0:	0801fb10 	.word	0x0801fb10
 80186b4:	0801fb14 	.word	0x0801fb14
 80186b8:	0801fb18 	.word	0x0801fb18
 80186bc:	0801fb1c 	.word	0x0801fb1c
 80186c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80186c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80186c4:	429a      	cmp	r2, r3
 80186c6:	bfa8      	it	ge
 80186c8:	461a      	movge	r2, r3
 80186ca:	2a00      	cmp	r2, #0
 80186cc:	4691      	mov	r9, r2
 80186ce:	dc37      	bgt.n	8018740 <_printf_float+0x370>
 80186d0:	f04f 0b00 	mov.w	fp, #0
 80186d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80186d8:	f104 021a 	add.w	r2, r4, #26
 80186dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80186de:	9305      	str	r3, [sp, #20]
 80186e0:	eba3 0309 	sub.w	r3, r3, r9
 80186e4:	455b      	cmp	r3, fp
 80186e6:	dc33      	bgt.n	8018750 <_printf_float+0x380>
 80186e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80186ec:	429a      	cmp	r2, r3
 80186ee:	db3b      	blt.n	8018768 <_printf_float+0x398>
 80186f0:	6823      	ldr	r3, [r4, #0]
 80186f2:	07da      	lsls	r2, r3, #31
 80186f4:	d438      	bmi.n	8018768 <_printf_float+0x398>
 80186f6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80186fa:	eba2 0903 	sub.w	r9, r2, r3
 80186fe:	9b05      	ldr	r3, [sp, #20]
 8018700:	1ad2      	subs	r2, r2, r3
 8018702:	4591      	cmp	r9, r2
 8018704:	bfa8      	it	ge
 8018706:	4691      	movge	r9, r2
 8018708:	f1b9 0f00 	cmp.w	r9, #0
 801870c:	dc35      	bgt.n	801877a <_printf_float+0x3aa>
 801870e:	f04f 0800 	mov.w	r8, #0
 8018712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018716:	f104 0a1a 	add.w	sl, r4, #26
 801871a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801871e:	1a9b      	subs	r3, r3, r2
 8018720:	eba3 0309 	sub.w	r3, r3, r9
 8018724:	4543      	cmp	r3, r8
 8018726:	f77f af79 	ble.w	801861c <_printf_float+0x24c>
 801872a:	2301      	movs	r3, #1
 801872c:	4652      	mov	r2, sl
 801872e:	4631      	mov	r1, r6
 8018730:	4628      	mov	r0, r5
 8018732:	47b8      	blx	r7
 8018734:	3001      	adds	r0, #1
 8018736:	f43f aeaa 	beq.w	801848e <_printf_float+0xbe>
 801873a:	f108 0801 	add.w	r8, r8, #1
 801873e:	e7ec      	b.n	801871a <_printf_float+0x34a>
 8018740:	4613      	mov	r3, r2
 8018742:	4631      	mov	r1, r6
 8018744:	4642      	mov	r2, r8
 8018746:	4628      	mov	r0, r5
 8018748:	47b8      	blx	r7
 801874a:	3001      	adds	r0, #1
 801874c:	d1c0      	bne.n	80186d0 <_printf_float+0x300>
 801874e:	e69e      	b.n	801848e <_printf_float+0xbe>
 8018750:	2301      	movs	r3, #1
 8018752:	4631      	mov	r1, r6
 8018754:	4628      	mov	r0, r5
 8018756:	9205      	str	r2, [sp, #20]
 8018758:	47b8      	blx	r7
 801875a:	3001      	adds	r0, #1
 801875c:	f43f ae97 	beq.w	801848e <_printf_float+0xbe>
 8018760:	9a05      	ldr	r2, [sp, #20]
 8018762:	f10b 0b01 	add.w	fp, fp, #1
 8018766:	e7b9      	b.n	80186dc <_printf_float+0x30c>
 8018768:	ee18 3a10 	vmov	r3, s16
 801876c:	4652      	mov	r2, sl
 801876e:	4631      	mov	r1, r6
 8018770:	4628      	mov	r0, r5
 8018772:	47b8      	blx	r7
 8018774:	3001      	adds	r0, #1
 8018776:	d1be      	bne.n	80186f6 <_printf_float+0x326>
 8018778:	e689      	b.n	801848e <_printf_float+0xbe>
 801877a:	9a05      	ldr	r2, [sp, #20]
 801877c:	464b      	mov	r3, r9
 801877e:	4442      	add	r2, r8
 8018780:	4631      	mov	r1, r6
 8018782:	4628      	mov	r0, r5
 8018784:	47b8      	blx	r7
 8018786:	3001      	adds	r0, #1
 8018788:	d1c1      	bne.n	801870e <_printf_float+0x33e>
 801878a:	e680      	b.n	801848e <_printf_float+0xbe>
 801878c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801878e:	2a01      	cmp	r2, #1
 8018790:	dc01      	bgt.n	8018796 <_printf_float+0x3c6>
 8018792:	07db      	lsls	r3, r3, #31
 8018794:	d53a      	bpl.n	801880c <_printf_float+0x43c>
 8018796:	2301      	movs	r3, #1
 8018798:	4642      	mov	r2, r8
 801879a:	4631      	mov	r1, r6
 801879c:	4628      	mov	r0, r5
 801879e:	47b8      	blx	r7
 80187a0:	3001      	adds	r0, #1
 80187a2:	f43f ae74 	beq.w	801848e <_printf_float+0xbe>
 80187a6:	ee18 3a10 	vmov	r3, s16
 80187aa:	4652      	mov	r2, sl
 80187ac:	4631      	mov	r1, r6
 80187ae:	4628      	mov	r0, r5
 80187b0:	47b8      	blx	r7
 80187b2:	3001      	adds	r0, #1
 80187b4:	f43f ae6b 	beq.w	801848e <_printf_float+0xbe>
 80187b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80187bc:	2200      	movs	r2, #0
 80187be:	2300      	movs	r3, #0
 80187c0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80187c4:	f7e8 f98a 	bl	8000adc <__aeabi_dcmpeq>
 80187c8:	b9d8      	cbnz	r0, 8018802 <_printf_float+0x432>
 80187ca:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80187ce:	f108 0201 	add.w	r2, r8, #1
 80187d2:	4631      	mov	r1, r6
 80187d4:	4628      	mov	r0, r5
 80187d6:	47b8      	blx	r7
 80187d8:	3001      	adds	r0, #1
 80187da:	d10e      	bne.n	80187fa <_printf_float+0x42a>
 80187dc:	e657      	b.n	801848e <_printf_float+0xbe>
 80187de:	2301      	movs	r3, #1
 80187e0:	4652      	mov	r2, sl
 80187e2:	4631      	mov	r1, r6
 80187e4:	4628      	mov	r0, r5
 80187e6:	47b8      	blx	r7
 80187e8:	3001      	adds	r0, #1
 80187ea:	f43f ae50 	beq.w	801848e <_printf_float+0xbe>
 80187ee:	f108 0801 	add.w	r8, r8, #1
 80187f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80187f4:	3b01      	subs	r3, #1
 80187f6:	4543      	cmp	r3, r8
 80187f8:	dcf1      	bgt.n	80187de <_printf_float+0x40e>
 80187fa:	464b      	mov	r3, r9
 80187fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018800:	e6da      	b.n	80185b8 <_printf_float+0x1e8>
 8018802:	f04f 0800 	mov.w	r8, #0
 8018806:	f104 0a1a 	add.w	sl, r4, #26
 801880a:	e7f2      	b.n	80187f2 <_printf_float+0x422>
 801880c:	2301      	movs	r3, #1
 801880e:	4642      	mov	r2, r8
 8018810:	e7df      	b.n	80187d2 <_printf_float+0x402>
 8018812:	2301      	movs	r3, #1
 8018814:	464a      	mov	r2, r9
 8018816:	4631      	mov	r1, r6
 8018818:	4628      	mov	r0, r5
 801881a:	47b8      	blx	r7
 801881c:	3001      	adds	r0, #1
 801881e:	f43f ae36 	beq.w	801848e <_printf_float+0xbe>
 8018822:	f108 0801 	add.w	r8, r8, #1
 8018826:	68e3      	ldr	r3, [r4, #12]
 8018828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801882a:	1a5b      	subs	r3, r3, r1
 801882c:	4543      	cmp	r3, r8
 801882e:	dcf0      	bgt.n	8018812 <_printf_float+0x442>
 8018830:	e6f8      	b.n	8018624 <_printf_float+0x254>
 8018832:	f04f 0800 	mov.w	r8, #0
 8018836:	f104 0919 	add.w	r9, r4, #25
 801883a:	e7f4      	b.n	8018826 <_printf_float+0x456>

0801883c <_printf_common>:
 801883c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018840:	4616      	mov	r6, r2
 8018842:	4699      	mov	r9, r3
 8018844:	688a      	ldr	r2, [r1, #8]
 8018846:	690b      	ldr	r3, [r1, #16]
 8018848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801884c:	4293      	cmp	r3, r2
 801884e:	bfb8      	it	lt
 8018850:	4613      	movlt	r3, r2
 8018852:	6033      	str	r3, [r6, #0]
 8018854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018858:	4607      	mov	r7, r0
 801885a:	460c      	mov	r4, r1
 801885c:	b10a      	cbz	r2, 8018862 <_printf_common+0x26>
 801885e:	3301      	adds	r3, #1
 8018860:	6033      	str	r3, [r6, #0]
 8018862:	6823      	ldr	r3, [r4, #0]
 8018864:	0699      	lsls	r1, r3, #26
 8018866:	bf42      	ittt	mi
 8018868:	6833      	ldrmi	r3, [r6, #0]
 801886a:	3302      	addmi	r3, #2
 801886c:	6033      	strmi	r3, [r6, #0]
 801886e:	6825      	ldr	r5, [r4, #0]
 8018870:	f015 0506 	ands.w	r5, r5, #6
 8018874:	d106      	bne.n	8018884 <_printf_common+0x48>
 8018876:	f104 0a19 	add.w	sl, r4, #25
 801887a:	68e3      	ldr	r3, [r4, #12]
 801887c:	6832      	ldr	r2, [r6, #0]
 801887e:	1a9b      	subs	r3, r3, r2
 8018880:	42ab      	cmp	r3, r5
 8018882:	dc26      	bgt.n	80188d2 <_printf_common+0x96>
 8018884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018888:	1e13      	subs	r3, r2, #0
 801888a:	6822      	ldr	r2, [r4, #0]
 801888c:	bf18      	it	ne
 801888e:	2301      	movne	r3, #1
 8018890:	0692      	lsls	r2, r2, #26
 8018892:	d42b      	bmi.n	80188ec <_printf_common+0xb0>
 8018894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018898:	4649      	mov	r1, r9
 801889a:	4638      	mov	r0, r7
 801889c:	47c0      	blx	r8
 801889e:	3001      	adds	r0, #1
 80188a0:	d01e      	beq.n	80188e0 <_printf_common+0xa4>
 80188a2:	6823      	ldr	r3, [r4, #0]
 80188a4:	6922      	ldr	r2, [r4, #16]
 80188a6:	f003 0306 	and.w	r3, r3, #6
 80188aa:	2b04      	cmp	r3, #4
 80188ac:	bf02      	ittt	eq
 80188ae:	68e5      	ldreq	r5, [r4, #12]
 80188b0:	6833      	ldreq	r3, [r6, #0]
 80188b2:	1aed      	subeq	r5, r5, r3
 80188b4:	68a3      	ldr	r3, [r4, #8]
 80188b6:	bf0c      	ite	eq
 80188b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80188bc:	2500      	movne	r5, #0
 80188be:	4293      	cmp	r3, r2
 80188c0:	bfc4      	itt	gt
 80188c2:	1a9b      	subgt	r3, r3, r2
 80188c4:	18ed      	addgt	r5, r5, r3
 80188c6:	2600      	movs	r6, #0
 80188c8:	341a      	adds	r4, #26
 80188ca:	42b5      	cmp	r5, r6
 80188cc:	d11a      	bne.n	8018904 <_printf_common+0xc8>
 80188ce:	2000      	movs	r0, #0
 80188d0:	e008      	b.n	80188e4 <_printf_common+0xa8>
 80188d2:	2301      	movs	r3, #1
 80188d4:	4652      	mov	r2, sl
 80188d6:	4649      	mov	r1, r9
 80188d8:	4638      	mov	r0, r7
 80188da:	47c0      	blx	r8
 80188dc:	3001      	adds	r0, #1
 80188de:	d103      	bne.n	80188e8 <_printf_common+0xac>
 80188e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80188e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188e8:	3501      	adds	r5, #1
 80188ea:	e7c6      	b.n	801887a <_printf_common+0x3e>
 80188ec:	18e1      	adds	r1, r4, r3
 80188ee:	1c5a      	adds	r2, r3, #1
 80188f0:	2030      	movs	r0, #48	; 0x30
 80188f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80188f6:	4422      	add	r2, r4
 80188f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80188fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018900:	3302      	adds	r3, #2
 8018902:	e7c7      	b.n	8018894 <_printf_common+0x58>
 8018904:	2301      	movs	r3, #1
 8018906:	4622      	mov	r2, r4
 8018908:	4649      	mov	r1, r9
 801890a:	4638      	mov	r0, r7
 801890c:	47c0      	blx	r8
 801890e:	3001      	adds	r0, #1
 8018910:	d0e6      	beq.n	80188e0 <_printf_common+0xa4>
 8018912:	3601      	adds	r6, #1
 8018914:	e7d9      	b.n	80188ca <_printf_common+0x8e>
	...

08018918 <_printf_i>:
 8018918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801891c:	7e0f      	ldrb	r7, [r1, #24]
 801891e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018920:	2f78      	cmp	r7, #120	; 0x78
 8018922:	4691      	mov	r9, r2
 8018924:	4680      	mov	r8, r0
 8018926:	460c      	mov	r4, r1
 8018928:	469a      	mov	sl, r3
 801892a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801892e:	d807      	bhi.n	8018940 <_printf_i+0x28>
 8018930:	2f62      	cmp	r7, #98	; 0x62
 8018932:	d80a      	bhi.n	801894a <_printf_i+0x32>
 8018934:	2f00      	cmp	r7, #0
 8018936:	f000 80d4 	beq.w	8018ae2 <_printf_i+0x1ca>
 801893a:	2f58      	cmp	r7, #88	; 0x58
 801893c:	f000 80c0 	beq.w	8018ac0 <_printf_i+0x1a8>
 8018940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018948:	e03a      	b.n	80189c0 <_printf_i+0xa8>
 801894a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801894e:	2b15      	cmp	r3, #21
 8018950:	d8f6      	bhi.n	8018940 <_printf_i+0x28>
 8018952:	a101      	add	r1, pc, #4	; (adr r1, 8018958 <_printf_i+0x40>)
 8018954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018958:	080189b1 	.word	0x080189b1
 801895c:	080189c5 	.word	0x080189c5
 8018960:	08018941 	.word	0x08018941
 8018964:	08018941 	.word	0x08018941
 8018968:	08018941 	.word	0x08018941
 801896c:	08018941 	.word	0x08018941
 8018970:	080189c5 	.word	0x080189c5
 8018974:	08018941 	.word	0x08018941
 8018978:	08018941 	.word	0x08018941
 801897c:	08018941 	.word	0x08018941
 8018980:	08018941 	.word	0x08018941
 8018984:	08018ac9 	.word	0x08018ac9
 8018988:	080189f1 	.word	0x080189f1
 801898c:	08018a83 	.word	0x08018a83
 8018990:	08018941 	.word	0x08018941
 8018994:	08018941 	.word	0x08018941
 8018998:	08018aeb 	.word	0x08018aeb
 801899c:	08018941 	.word	0x08018941
 80189a0:	080189f1 	.word	0x080189f1
 80189a4:	08018941 	.word	0x08018941
 80189a8:	08018941 	.word	0x08018941
 80189ac:	08018a8b 	.word	0x08018a8b
 80189b0:	682b      	ldr	r3, [r5, #0]
 80189b2:	1d1a      	adds	r2, r3, #4
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	602a      	str	r2, [r5, #0]
 80189b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80189bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80189c0:	2301      	movs	r3, #1
 80189c2:	e09f      	b.n	8018b04 <_printf_i+0x1ec>
 80189c4:	6820      	ldr	r0, [r4, #0]
 80189c6:	682b      	ldr	r3, [r5, #0]
 80189c8:	0607      	lsls	r7, r0, #24
 80189ca:	f103 0104 	add.w	r1, r3, #4
 80189ce:	6029      	str	r1, [r5, #0]
 80189d0:	d501      	bpl.n	80189d6 <_printf_i+0xbe>
 80189d2:	681e      	ldr	r6, [r3, #0]
 80189d4:	e003      	b.n	80189de <_printf_i+0xc6>
 80189d6:	0646      	lsls	r6, r0, #25
 80189d8:	d5fb      	bpl.n	80189d2 <_printf_i+0xba>
 80189da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80189de:	2e00      	cmp	r6, #0
 80189e0:	da03      	bge.n	80189ea <_printf_i+0xd2>
 80189e2:	232d      	movs	r3, #45	; 0x2d
 80189e4:	4276      	negs	r6, r6
 80189e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80189ea:	485a      	ldr	r0, [pc, #360]	; (8018b54 <_printf_i+0x23c>)
 80189ec:	230a      	movs	r3, #10
 80189ee:	e012      	b.n	8018a16 <_printf_i+0xfe>
 80189f0:	682b      	ldr	r3, [r5, #0]
 80189f2:	6820      	ldr	r0, [r4, #0]
 80189f4:	1d19      	adds	r1, r3, #4
 80189f6:	6029      	str	r1, [r5, #0]
 80189f8:	0605      	lsls	r5, r0, #24
 80189fa:	d501      	bpl.n	8018a00 <_printf_i+0xe8>
 80189fc:	681e      	ldr	r6, [r3, #0]
 80189fe:	e002      	b.n	8018a06 <_printf_i+0xee>
 8018a00:	0641      	lsls	r1, r0, #25
 8018a02:	d5fb      	bpl.n	80189fc <_printf_i+0xe4>
 8018a04:	881e      	ldrh	r6, [r3, #0]
 8018a06:	4853      	ldr	r0, [pc, #332]	; (8018b54 <_printf_i+0x23c>)
 8018a08:	2f6f      	cmp	r7, #111	; 0x6f
 8018a0a:	bf0c      	ite	eq
 8018a0c:	2308      	moveq	r3, #8
 8018a0e:	230a      	movne	r3, #10
 8018a10:	2100      	movs	r1, #0
 8018a12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018a16:	6865      	ldr	r5, [r4, #4]
 8018a18:	60a5      	str	r5, [r4, #8]
 8018a1a:	2d00      	cmp	r5, #0
 8018a1c:	bfa2      	ittt	ge
 8018a1e:	6821      	ldrge	r1, [r4, #0]
 8018a20:	f021 0104 	bicge.w	r1, r1, #4
 8018a24:	6021      	strge	r1, [r4, #0]
 8018a26:	b90e      	cbnz	r6, 8018a2c <_printf_i+0x114>
 8018a28:	2d00      	cmp	r5, #0
 8018a2a:	d04b      	beq.n	8018ac4 <_printf_i+0x1ac>
 8018a2c:	4615      	mov	r5, r2
 8018a2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8018a32:	fb03 6711 	mls	r7, r3, r1, r6
 8018a36:	5dc7      	ldrb	r7, [r0, r7]
 8018a38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018a3c:	4637      	mov	r7, r6
 8018a3e:	42bb      	cmp	r3, r7
 8018a40:	460e      	mov	r6, r1
 8018a42:	d9f4      	bls.n	8018a2e <_printf_i+0x116>
 8018a44:	2b08      	cmp	r3, #8
 8018a46:	d10b      	bne.n	8018a60 <_printf_i+0x148>
 8018a48:	6823      	ldr	r3, [r4, #0]
 8018a4a:	07de      	lsls	r6, r3, #31
 8018a4c:	d508      	bpl.n	8018a60 <_printf_i+0x148>
 8018a4e:	6923      	ldr	r3, [r4, #16]
 8018a50:	6861      	ldr	r1, [r4, #4]
 8018a52:	4299      	cmp	r1, r3
 8018a54:	bfde      	ittt	le
 8018a56:	2330      	movle	r3, #48	; 0x30
 8018a58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018a5c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018a60:	1b52      	subs	r2, r2, r5
 8018a62:	6122      	str	r2, [r4, #16]
 8018a64:	f8cd a000 	str.w	sl, [sp]
 8018a68:	464b      	mov	r3, r9
 8018a6a:	aa03      	add	r2, sp, #12
 8018a6c:	4621      	mov	r1, r4
 8018a6e:	4640      	mov	r0, r8
 8018a70:	f7ff fee4 	bl	801883c <_printf_common>
 8018a74:	3001      	adds	r0, #1
 8018a76:	d14a      	bne.n	8018b0e <_printf_i+0x1f6>
 8018a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a7c:	b004      	add	sp, #16
 8018a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a82:	6823      	ldr	r3, [r4, #0]
 8018a84:	f043 0320 	orr.w	r3, r3, #32
 8018a88:	6023      	str	r3, [r4, #0]
 8018a8a:	4833      	ldr	r0, [pc, #204]	; (8018b58 <_printf_i+0x240>)
 8018a8c:	2778      	movs	r7, #120	; 0x78
 8018a8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018a92:	6823      	ldr	r3, [r4, #0]
 8018a94:	6829      	ldr	r1, [r5, #0]
 8018a96:	061f      	lsls	r7, r3, #24
 8018a98:	f851 6b04 	ldr.w	r6, [r1], #4
 8018a9c:	d402      	bmi.n	8018aa4 <_printf_i+0x18c>
 8018a9e:	065f      	lsls	r7, r3, #25
 8018aa0:	bf48      	it	mi
 8018aa2:	b2b6      	uxthmi	r6, r6
 8018aa4:	07df      	lsls	r7, r3, #31
 8018aa6:	bf48      	it	mi
 8018aa8:	f043 0320 	orrmi.w	r3, r3, #32
 8018aac:	6029      	str	r1, [r5, #0]
 8018aae:	bf48      	it	mi
 8018ab0:	6023      	strmi	r3, [r4, #0]
 8018ab2:	b91e      	cbnz	r6, 8018abc <_printf_i+0x1a4>
 8018ab4:	6823      	ldr	r3, [r4, #0]
 8018ab6:	f023 0320 	bic.w	r3, r3, #32
 8018aba:	6023      	str	r3, [r4, #0]
 8018abc:	2310      	movs	r3, #16
 8018abe:	e7a7      	b.n	8018a10 <_printf_i+0xf8>
 8018ac0:	4824      	ldr	r0, [pc, #144]	; (8018b54 <_printf_i+0x23c>)
 8018ac2:	e7e4      	b.n	8018a8e <_printf_i+0x176>
 8018ac4:	4615      	mov	r5, r2
 8018ac6:	e7bd      	b.n	8018a44 <_printf_i+0x12c>
 8018ac8:	682b      	ldr	r3, [r5, #0]
 8018aca:	6826      	ldr	r6, [r4, #0]
 8018acc:	6961      	ldr	r1, [r4, #20]
 8018ace:	1d18      	adds	r0, r3, #4
 8018ad0:	6028      	str	r0, [r5, #0]
 8018ad2:	0635      	lsls	r5, r6, #24
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	d501      	bpl.n	8018adc <_printf_i+0x1c4>
 8018ad8:	6019      	str	r1, [r3, #0]
 8018ada:	e002      	b.n	8018ae2 <_printf_i+0x1ca>
 8018adc:	0670      	lsls	r0, r6, #25
 8018ade:	d5fb      	bpl.n	8018ad8 <_printf_i+0x1c0>
 8018ae0:	8019      	strh	r1, [r3, #0]
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	6123      	str	r3, [r4, #16]
 8018ae6:	4615      	mov	r5, r2
 8018ae8:	e7bc      	b.n	8018a64 <_printf_i+0x14c>
 8018aea:	682b      	ldr	r3, [r5, #0]
 8018aec:	1d1a      	adds	r2, r3, #4
 8018aee:	602a      	str	r2, [r5, #0]
 8018af0:	681d      	ldr	r5, [r3, #0]
 8018af2:	6862      	ldr	r2, [r4, #4]
 8018af4:	2100      	movs	r1, #0
 8018af6:	4628      	mov	r0, r5
 8018af8:	f7e7 fb6a 	bl	80001d0 <memchr>
 8018afc:	b108      	cbz	r0, 8018b02 <_printf_i+0x1ea>
 8018afe:	1b40      	subs	r0, r0, r5
 8018b00:	6060      	str	r0, [r4, #4]
 8018b02:	6863      	ldr	r3, [r4, #4]
 8018b04:	6123      	str	r3, [r4, #16]
 8018b06:	2300      	movs	r3, #0
 8018b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018b0c:	e7aa      	b.n	8018a64 <_printf_i+0x14c>
 8018b0e:	6923      	ldr	r3, [r4, #16]
 8018b10:	462a      	mov	r2, r5
 8018b12:	4649      	mov	r1, r9
 8018b14:	4640      	mov	r0, r8
 8018b16:	47d0      	blx	sl
 8018b18:	3001      	adds	r0, #1
 8018b1a:	d0ad      	beq.n	8018a78 <_printf_i+0x160>
 8018b1c:	6823      	ldr	r3, [r4, #0]
 8018b1e:	079b      	lsls	r3, r3, #30
 8018b20:	d413      	bmi.n	8018b4a <_printf_i+0x232>
 8018b22:	68e0      	ldr	r0, [r4, #12]
 8018b24:	9b03      	ldr	r3, [sp, #12]
 8018b26:	4298      	cmp	r0, r3
 8018b28:	bfb8      	it	lt
 8018b2a:	4618      	movlt	r0, r3
 8018b2c:	e7a6      	b.n	8018a7c <_printf_i+0x164>
 8018b2e:	2301      	movs	r3, #1
 8018b30:	4632      	mov	r2, r6
 8018b32:	4649      	mov	r1, r9
 8018b34:	4640      	mov	r0, r8
 8018b36:	47d0      	blx	sl
 8018b38:	3001      	adds	r0, #1
 8018b3a:	d09d      	beq.n	8018a78 <_printf_i+0x160>
 8018b3c:	3501      	adds	r5, #1
 8018b3e:	68e3      	ldr	r3, [r4, #12]
 8018b40:	9903      	ldr	r1, [sp, #12]
 8018b42:	1a5b      	subs	r3, r3, r1
 8018b44:	42ab      	cmp	r3, r5
 8018b46:	dcf2      	bgt.n	8018b2e <_printf_i+0x216>
 8018b48:	e7eb      	b.n	8018b22 <_printf_i+0x20a>
 8018b4a:	2500      	movs	r5, #0
 8018b4c:	f104 0619 	add.w	r6, r4, #25
 8018b50:	e7f5      	b.n	8018b3e <_printf_i+0x226>
 8018b52:	bf00      	nop
 8018b54:	0801fb1e 	.word	0x0801fb1e
 8018b58:	0801fb2f 	.word	0x0801fb2f

08018b5c <_scanf_float>:
 8018b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b60:	b087      	sub	sp, #28
 8018b62:	4617      	mov	r7, r2
 8018b64:	9303      	str	r3, [sp, #12]
 8018b66:	688b      	ldr	r3, [r1, #8]
 8018b68:	1e5a      	subs	r2, r3, #1
 8018b6a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018b6e:	bf83      	ittte	hi
 8018b70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018b74:	195b      	addhi	r3, r3, r5
 8018b76:	9302      	strhi	r3, [sp, #8]
 8018b78:	2300      	movls	r3, #0
 8018b7a:	bf86      	itte	hi
 8018b7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018b80:	608b      	strhi	r3, [r1, #8]
 8018b82:	9302      	strls	r3, [sp, #8]
 8018b84:	680b      	ldr	r3, [r1, #0]
 8018b86:	468b      	mov	fp, r1
 8018b88:	2500      	movs	r5, #0
 8018b8a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8018b8e:	f84b 3b1c 	str.w	r3, [fp], #28
 8018b92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018b96:	4680      	mov	r8, r0
 8018b98:	460c      	mov	r4, r1
 8018b9a:	465e      	mov	r6, fp
 8018b9c:	46aa      	mov	sl, r5
 8018b9e:	46a9      	mov	r9, r5
 8018ba0:	9501      	str	r5, [sp, #4]
 8018ba2:	68a2      	ldr	r2, [r4, #8]
 8018ba4:	b152      	cbz	r2, 8018bbc <_scanf_float+0x60>
 8018ba6:	683b      	ldr	r3, [r7, #0]
 8018ba8:	781b      	ldrb	r3, [r3, #0]
 8018baa:	2b4e      	cmp	r3, #78	; 0x4e
 8018bac:	d864      	bhi.n	8018c78 <_scanf_float+0x11c>
 8018bae:	2b40      	cmp	r3, #64	; 0x40
 8018bb0:	d83c      	bhi.n	8018c2c <_scanf_float+0xd0>
 8018bb2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8018bb6:	b2c8      	uxtb	r0, r1
 8018bb8:	280e      	cmp	r0, #14
 8018bba:	d93a      	bls.n	8018c32 <_scanf_float+0xd6>
 8018bbc:	f1b9 0f00 	cmp.w	r9, #0
 8018bc0:	d003      	beq.n	8018bca <_scanf_float+0x6e>
 8018bc2:	6823      	ldr	r3, [r4, #0]
 8018bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018bc8:	6023      	str	r3, [r4, #0]
 8018bca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018bce:	f1ba 0f01 	cmp.w	sl, #1
 8018bd2:	f200 8113 	bhi.w	8018dfc <_scanf_float+0x2a0>
 8018bd6:	455e      	cmp	r6, fp
 8018bd8:	f200 8105 	bhi.w	8018de6 <_scanf_float+0x28a>
 8018bdc:	2501      	movs	r5, #1
 8018bde:	4628      	mov	r0, r5
 8018be0:	b007      	add	sp, #28
 8018be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018be6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8018bea:	2a0d      	cmp	r2, #13
 8018bec:	d8e6      	bhi.n	8018bbc <_scanf_float+0x60>
 8018bee:	a101      	add	r1, pc, #4	; (adr r1, 8018bf4 <_scanf_float+0x98>)
 8018bf0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018bf4:	08018d33 	.word	0x08018d33
 8018bf8:	08018bbd 	.word	0x08018bbd
 8018bfc:	08018bbd 	.word	0x08018bbd
 8018c00:	08018bbd 	.word	0x08018bbd
 8018c04:	08018d93 	.word	0x08018d93
 8018c08:	08018d6b 	.word	0x08018d6b
 8018c0c:	08018bbd 	.word	0x08018bbd
 8018c10:	08018bbd 	.word	0x08018bbd
 8018c14:	08018d41 	.word	0x08018d41
 8018c18:	08018bbd 	.word	0x08018bbd
 8018c1c:	08018bbd 	.word	0x08018bbd
 8018c20:	08018bbd 	.word	0x08018bbd
 8018c24:	08018bbd 	.word	0x08018bbd
 8018c28:	08018cf9 	.word	0x08018cf9
 8018c2c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8018c30:	e7db      	b.n	8018bea <_scanf_float+0x8e>
 8018c32:	290e      	cmp	r1, #14
 8018c34:	d8c2      	bhi.n	8018bbc <_scanf_float+0x60>
 8018c36:	a001      	add	r0, pc, #4	; (adr r0, 8018c3c <_scanf_float+0xe0>)
 8018c38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8018c3c:	08018ceb 	.word	0x08018ceb
 8018c40:	08018bbd 	.word	0x08018bbd
 8018c44:	08018ceb 	.word	0x08018ceb
 8018c48:	08018d7f 	.word	0x08018d7f
 8018c4c:	08018bbd 	.word	0x08018bbd
 8018c50:	08018c99 	.word	0x08018c99
 8018c54:	08018cd5 	.word	0x08018cd5
 8018c58:	08018cd5 	.word	0x08018cd5
 8018c5c:	08018cd5 	.word	0x08018cd5
 8018c60:	08018cd5 	.word	0x08018cd5
 8018c64:	08018cd5 	.word	0x08018cd5
 8018c68:	08018cd5 	.word	0x08018cd5
 8018c6c:	08018cd5 	.word	0x08018cd5
 8018c70:	08018cd5 	.word	0x08018cd5
 8018c74:	08018cd5 	.word	0x08018cd5
 8018c78:	2b6e      	cmp	r3, #110	; 0x6e
 8018c7a:	d809      	bhi.n	8018c90 <_scanf_float+0x134>
 8018c7c:	2b60      	cmp	r3, #96	; 0x60
 8018c7e:	d8b2      	bhi.n	8018be6 <_scanf_float+0x8a>
 8018c80:	2b54      	cmp	r3, #84	; 0x54
 8018c82:	d077      	beq.n	8018d74 <_scanf_float+0x218>
 8018c84:	2b59      	cmp	r3, #89	; 0x59
 8018c86:	d199      	bne.n	8018bbc <_scanf_float+0x60>
 8018c88:	2d07      	cmp	r5, #7
 8018c8a:	d197      	bne.n	8018bbc <_scanf_float+0x60>
 8018c8c:	2508      	movs	r5, #8
 8018c8e:	e029      	b.n	8018ce4 <_scanf_float+0x188>
 8018c90:	2b74      	cmp	r3, #116	; 0x74
 8018c92:	d06f      	beq.n	8018d74 <_scanf_float+0x218>
 8018c94:	2b79      	cmp	r3, #121	; 0x79
 8018c96:	e7f6      	b.n	8018c86 <_scanf_float+0x12a>
 8018c98:	6821      	ldr	r1, [r4, #0]
 8018c9a:	05c8      	lsls	r0, r1, #23
 8018c9c:	d51a      	bpl.n	8018cd4 <_scanf_float+0x178>
 8018c9e:	9b02      	ldr	r3, [sp, #8]
 8018ca0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8018ca4:	6021      	str	r1, [r4, #0]
 8018ca6:	f109 0901 	add.w	r9, r9, #1
 8018caa:	b11b      	cbz	r3, 8018cb4 <_scanf_float+0x158>
 8018cac:	3b01      	subs	r3, #1
 8018cae:	3201      	adds	r2, #1
 8018cb0:	9302      	str	r3, [sp, #8]
 8018cb2:	60a2      	str	r2, [r4, #8]
 8018cb4:	68a3      	ldr	r3, [r4, #8]
 8018cb6:	3b01      	subs	r3, #1
 8018cb8:	60a3      	str	r3, [r4, #8]
 8018cba:	6923      	ldr	r3, [r4, #16]
 8018cbc:	3301      	adds	r3, #1
 8018cbe:	6123      	str	r3, [r4, #16]
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	3b01      	subs	r3, #1
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	607b      	str	r3, [r7, #4]
 8018cc8:	f340 8084 	ble.w	8018dd4 <_scanf_float+0x278>
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	3301      	adds	r3, #1
 8018cd0:	603b      	str	r3, [r7, #0]
 8018cd2:	e766      	b.n	8018ba2 <_scanf_float+0x46>
 8018cd4:	eb1a 0f05 	cmn.w	sl, r5
 8018cd8:	f47f af70 	bne.w	8018bbc <_scanf_float+0x60>
 8018cdc:	6822      	ldr	r2, [r4, #0]
 8018cde:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8018ce2:	6022      	str	r2, [r4, #0]
 8018ce4:	f806 3b01 	strb.w	r3, [r6], #1
 8018ce8:	e7e4      	b.n	8018cb4 <_scanf_float+0x158>
 8018cea:	6822      	ldr	r2, [r4, #0]
 8018cec:	0610      	lsls	r0, r2, #24
 8018cee:	f57f af65 	bpl.w	8018bbc <_scanf_float+0x60>
 8018cf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018cf6:	e7f4      	b.n	8018ce2 <_scanf_float+0x186>
 8018cf8:	f1ba 0f00 	cmp.w	sl, #0
 8018cfc:	d10e      	bne.n	8018d1c <_scanf_float+0x1c0>
 8018cfe:	f1b9 0f00 	cmp.w	r9, #0
 8018d02:	d10e      	bne.n	8018d22 <_scanf_float+0x1c6>
 8018d04:	6822      	ldr	r2, [r4, #0]
 8018d06:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8018d0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018d0e:	d108      	bne.n	8018d22 <_scanf_float+0x1c6>
 8018d10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018d14:	6022      	str	r2, [r4, #0]
 8018d16:	f04f 0a01 	mov.w	sl, #1
 8018d1a:	e7e3      	b.n	8018ce4 <_scanf_float+0x188>
 8018d1c:	f1ba 0f02 	cmp.w	sl, #2
 8018d20:	d055      	beq.n	8018dce <_scanf_float+0x272>
 8018d22:	2d01      	cmp	r5, #1
 8018d24:	d002      	beq.n	8018d2c <_scanf_float+0x1d0>
 8018d26:	2d04      	cmp	r5, #4
 8018d28:	f47f af48 	bne.w	8018bbc <_scanf_float+0x60>
 8018d2c:	3501      	adds	r5, #1
 8018d2e:	b2ed      	uxtb	r5, r5
 8018d30:	e7d8      	b.n	8018ce4 <_scanf_float+0x188>
 8018d32:	f1ba 0f01 	cmp.w	sl, #1
 8018d36:	f47f af41 	bne.w	8018bbc <_scanf_float+0x60>
 8018d3a:	f04f 0a02 	mov.w	sl, #2
 8018d3e:	e7d1      	b.n	8018ce4 <_scanf_float+0x188>
 8018d40:	b97d      	cbnz	r5, 8018d62 <_scanf_float+0x206>
 8018d42:	f1b9 0f00 	cmp.w	r9, #0
 8018d46:	f47f af3c 	bne.w	8018bc2 <_scanf_float+0x66>
 8018d4a:	6822      	ldr	r2, [r4, #0]
 8018d4c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8018d50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8018d54:	f47f af39 	bne.w	8018bca <_scanf_float+0x6e>
 8018d58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018d5c:	6022      	str	r2, [r4, #0]
 8018d5e:	2501      	movs	r5, #1
 8018d60:	e7c0      	b.n	8018ce4 <_scanf_float+0x188>
 8018d62:	2d03      	cmp	r5, #3
 8018d64:	d0e2      	beq.n	8018d2c <_scanf_float+0x1d0>
 8018d66:	2d05      	cmp	r5, #5
 8018d68:	e7de      	b.n	8018d28 <_scanf_float+0x1cc>
 8018d6a:	2d02      	cmp	r5, #2
 8018d6c:	f47f af26 	bne.w	8018bbc <_scanf_float+0x60>
 8018d70:	2503      	movs	r5, #3
 8018d72:	e7b7      	b.n	8018ce4 <_scanf_float+0x188>
 8018d74:	2d06      	cmp	r5, #6
 8018d76:	f47f af21 	bne.w	8018bbc <_scanf_float+0x60>
 8018d7a:	2507      	movs	r5, #7
 8018d7c:	e7b2      	b.n	8018ce4 <_scanf_float+0x188>
 8018d7e:	6822      	ldr	r2, [r4, #0]
 8018d80:	0591      	lsls	r1, r2, #22
 8018d82:	f57f af1b 	bpl.w	8018bbc <_scanf_float+0x60>
 8018d86:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8018d8a:	6022      	str	r2, [r4, #0]
 8018d8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018d90:	e7a8      	b.n	8018ce4 <_scanf_float+0x188>
 8018d92:	6822      	ldr	r2, [r4, #0]
 8018d94:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8018d98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8018d9c:	d006      	beq.n	8018dac <_scanf_float+0x250>
 8018d9e:	0550      	lsls	r0, r2, #21
 8018da0:	f57f af0c 	bpl.w	8018bbc <_scanf_float+0x60>
 8018da4:	f1b9 0f00 	cmp.w	r9, #0
 8018da8:	f43f af0f 	beq.w	8018bca <_scanf_float+0x6e>
 8018dac:	0591      	lsls	r1, r2, #22
 8018dae:	bf58      	it	pl
 8018db0:	9901      	ldrpl	r1, [sp, #4]
 8018db2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018db6:	bf58      	it	pl
 8018db8:	eba9 0101 	subpl.w	r1, r9, r1
 8018dbc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8018dc0:	bf58      	it	pl
 8018dc2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8018dc6:	6022      	str	r2, [r4, #0]
 8018dc8:	f04f 0900 	mov.w	r9, #0
 8018dcc:	e78a      	b.n	8018ce4 <_scanf_float+0x188>
 8018dce:	f04f 0a03 	mov.w	sl, #3
 8018dd2:	e787      	b.n	8018ce4 <_scanf_float+0x188>
 8018dd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018dd8:	4639      	mov	r1, r7
 8018dda:	4640      	mov	r0, r8
 8018ddc:	4798      	blx	r3
 8018dde:	2800      	cmp	r0, #0
 8018de0:	f43f aedf 	beq.w	8018ba2 <_scanf_float+0x46>
 8018de4:	e6ea      	b.n	8018bbc <_scanf_float+0x60>
 8018de6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018dea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018dee:	463a      	mov	r2, r7
 8018df0:	4640      	mov	r0, r8
 8018df2:	4798      	blx	r3
 8018df4:	6923      	ldr	r3, [r4, #16]
 8018df6:	3b01      	subs	r3, #1
 8018df8:	6123      	str	r3, [r4, #16]
 8018dfa:	e6ec      	b.n	8018bd6 <_scanf_float+0x7a>
 8018dfc:	1e6b      	subs	r3, r5, #1
 8018dfe:	2b06      	cmp	r3, #6
 8018e00:	d825      	bhi.n	8018e4e <_scanf_float+0x2f2>
 8018e02:	2d02      	cmp	r5, #2
 8018e04:	d836      	bhi.n	8018e74 <_scanf_float+0x318>
 8018e06:	455e      	cmp	r6, fp
 8018e08:	f67f aee8 	bls.w	8018bdc <_scanf_float+0x80>
 8018e0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018e10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018e14:	463a      	mov	r2, r7
 8018e16:	4640      	mov	r0, r8
 8018e18:	4798      	blx	r3
 8018e1a:	6923      	ldr	r3, [r4, #16]
 8018e1c:	3b01      	subs	r3, #1
 8018e1e:	6123      	str	r3, [r4, #16]
 8018e20:	e7f1      	b.n	8018e06 <_scanf_float+0x2aa>
 8018e22:	9802      	ldr	r0, [sp, #8]
 8018e24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018e28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8018e2c:	9002      	str	r0, [sp, #8]
 8018e2e:	463a      	mov	r2, r7
 8018e30:	4640      	mov	r0, r8
 8018e32:	4798      	blx	r3
 8018e34:	6923      	ldr	r3, [r4, #16]
 8018e36:	3b01      	subs	r3, #1
 8018e38:	6123      	str	r3, [r4, #16]
 8018e3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018e3e:	fa5f fa8a 	uxtb.w	sl, sl
 8018e42:	f1ba 0f02 	cmp.w	sl, #2
 8018e46:	d1ec      	bne.n	8018e22 <_scanf_float+0x2c6>
 8018e48:	3d03      	subs	r5, #3
 8018e4a:	b2ed      	uxtb	r5, r5
 8018e4c:	1b76      	subs	r6, r6, r5
 8018e4e:	6823      	ldr	r3, [r4, #0]
 8018e50:	05da      	lsls	r2, r3, #23
 8018e52:	d52f      	bpl.n	8018eb4 <_scanf_float+0x358>
 8018e54:	055b      	lsls	r3, r3, #21
 8018e56:	d510      	bpl.n	8018e7a <_scanf_float+0x31e>
 8018e58:	455e      	cmp	r6, fp
 8018e5a:	f67f aebf 	bls.w	8018bdc <_scanf_float+0x80>
 8018e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018e62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8018e66:	463a      	mov	r2, r7
 8018e68:	4640      	mov	r0, r8
 8018e6a:	4798      	blx	r3
 8018e6c:	6923      	ldr	r3, [r4, #16]
 8018e6e:	3b01      	subs	r3, #1
 8018e70:	6123      	str	r3, [r4, #16]
 8018e72:	e7f1      	b.n	8018e58 <_scanf_float+0x2fc>
 8018e74:	46aa      	mov	sl, r5
 8018e76:	9602      	str	r6, [sp, #8]
 8018e78:	e7df      	b.n	8018e3a <_scanf_float+0x2de>
 8018e7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8018e7e:	6923      	ldr	r3, [r4, #16]
 8018e80:	2965      	cmp	r1, #101	; 0x65
 8018e82:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8018e86:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8018e8a:	6123      	str	r3, [r4, #16]
 8018e8c:	d00c      	beq.n	8018ea8 <_scanf_float+0x34c>
 8018e8e:	2945      	cmp	r1, #69	; 0x45
 8018e90:	d00a      	beq.n	8018ea8 <_scanf_float+0x34c>
 8018e92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018e96:	463a      	mov	r2, r7
 8018e98:	4640      	mov	r0, r8
 8018e9a:	4798      	blx	r3
 8018e9c:	6923      	ldr	r3, [r4, #16]
 8018e9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8018ea2:	3b01      	subs	r3, #1
 8018ea4:	1eb5      	subs	r5, r6, #2
 8018ea6:	6123      	str	r3, [r4, #16]
 8018ea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018eac:	463a      	mov	r2, r7
 8018eae:	4640      	mov	r0, r8
 8018eb0:	4798      	blx	r3
 8018eb2:	462e      	mov	r6, r5
 8018eb4:	6825      	ldr	r5, [r4, #0]
 8018eb6:	f015 0510 	ands.w	r5, r5, #16
 8018eba:	d158      	bne.n	8018f6e <_scanf_float+0x412>
 8018ebc:	7035      	strb	r5, [r6, #0]
 8018ebe:	6823      	ldr	r3, [r4, #0]
 8018ec0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8018ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018ec8:	d11c      	bne.n	8018f04 <_scanf_float+0x3a8>
 8018eca:	9b01      	ldr	r3, [sp, #4]
 8018ecc:	454b      	cmp	r3, r9
 8018ece:	eba3 0209 	sub.w	r2, r3, r9
 8018ed2:	d124      	bne.n	8018f1e <_scanf_float+0x3c2>
 8018ed4:	2200      	movs	r2, #0
 8018ed6:	4659      	mov	r1, fp
 8018ed8:	4640      	mov	r0, r8
 8018eda:	f000 ff0d 	bl	8019cf8 <_strtod_r>
 8018ede:	9b03      	ldr	r3, [sp, #12]
 8018ee0:	6821      	ldr	r1, [r4, #0]
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	f011 0f02 	tst.w	r1, #2
 8018ee8:	ec57 6b10 	vmov	r6, r7, d0
 8018eec:	f103 0204 	add.w	r2, r3, #4
 8018ef0:	d020      	beq.n	8018f34 <_scanf_float+0x3d8>
 8018ef2:	9903      	ldr	r1, [sp, #12]
 8018ef4:	600a      	str	r2, [r1, #0]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	e9c3 6700 	strd	r6, r7, [r3]
 8018efc:	68e3      	ldr	r3, [r4, #12]
 8018efe:	3301      	adds	r3, #1
 8018f00:	60e3      	str	r3, [r4, #12]
 8018f02:	e66c      	b.n	8018bde <_scanf_float+0x82>
 8018f04:	9b04      	ldr	r3, [sp, #16]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d0e4      	beq.n	8018ed4 <_scanf_float+0x378>
 8018f0a:	9905      	ldr	r1, [sp, #20]
 8018f0c:	230a      	movs	r3, #10
 8018f0e:	462a      	mov	r2, r5
 8018f10:	3101      	adds	r1, #1
 8018f12:	4640      	mov	r0, r8
 8018f14:	f000 ff78 	bl	8019e08 <_strtol_r>
 8018f18:	9b04      	ldr	r3, [sp, #16]
 8018f1a:	9e05      	ldr	r6, [sp, #20]
 8018f1c:	1ac2      	subs	r2, r0, r3
 8018f1e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8018f22:	429e      	cmp	r6, r3
 8018f24:	bf28      	it	cs
 8018f26:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8018f2a:	4912      	ldr	r1, [pc, #72]	; (8018f74 <_scanf_float+0x418>)
 8018f2c:	4630      	mov	r0, r6
 8018f2e:	f000 f825 	bl	8018f7c <siprintf>
 8018f32:	e7cf      	b.n	8018ed4 <_scanf_float+0x378>
 8018f34:	f011 0f04 	tst.w	r1, #4
 8018f38:	9903      	ldr	r1, [sp, #12]
 8018f3a:	600a      	str	r2, [r1, #0]
 8018f3c:	d1db      	bne.n	8018ef6 <_scanf_float+0x39a>
 8018f3e:	f8d3 8000 	ldr.w	r8, [r3]
 8018f42:	ee10 2a10 	vmov	r2, s0
 8018f46:	ee10 0a10 	vmov	r0, s0
 8018f4a:	463b      	mov	r3, r7
 8018f4c:	4639      	mov	r1, r7
 8018f4e:	f7e7 fdf7 	bl	8000b40 <__aeabi_dcmpun>
 8018f52:	b128      	cbz	r0, 8018f60 <_scanf_float+0x404>
 8018f54:	4808      	ldr	r0, [pc, #32]	; (8018f78 <_scanf_float+0x41c>)
 8018f56:	f001 f837 	bl	8019fc8 <nanf>
 8018f5a:	ed88 0a00 	vstr	s0, [r8]
 8018f5e:	e7cd      	b.n	8018efc <_scanf_float+0x3a0>
 8018f60:	4630      	mov	r0, r6
 8018f62:	4639      	mov	r1, r7
 8018f64:	f7e7 fe4a 	bl	8000bfc <__aeabi_d2f>
 8018f68:	f8c8 0000 	str.w	r0, [r8]
 8018f6c:	e7c6      	b.n	8018efc <_scanf_float+0x3a0>
 8018f6e:	2500      	movs	r5, #0
 8018f70:	e635      	b.n	8018bde <_scanf_float+0x82>
 8018f72:	bf00      	nop
 8018f74:	0801fb40 	.word	0x0801fb40
 8018f78:	0801ff2f 	.word	0x0801ff2f

08018f7c <siprintf>:
 8018f7c:	b40e      	push	{r1, r2, r3}
 8018f7e:	b500      	push	{lr}
 8018f80:	b09c      	sub	sp, #112	; 0x70
 8018f82:	ab1d      	add	r3, sp, #116	; 0x74
 8018f84:	9002      	str	r0, [sp, #8]
 8018f86:	9006      	str	r0, [sp, #24]
 8018f88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018f8c:	4809      	ldr	r0, [pc, #36]	; (8018fb4 <siprintf+0x38>)
 8018f8e:	9107      	str	r1, [sp, #28]
 8018f90:	9104      	str	r1, [sp, #16]
 8018f92:	4909      	ldr	r1, [pc, #36]	; (8018fb8 <siprintf+0x3c>)
 8018f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f98:	9105      	str	r1, [sp, #20]
 8018f9a:	6800      	ldr	r0, [r0, #0]
 8018f9c:	9301      	str	r3, [sp, #4]
 8018f9e:	a902      	add	r1, sp, #8
 8018fa0:	f002 fa92 	bl	801b4c8 <_svfiprintf_r>
 8018fa4:	9b02      	ldr	r3, [sp, #8]
 8018fa6:	2200      	movs	r2, #0
 8018fa8:	701a      	strb	r2, [r3, #0]
 8018faa:	b01c      	add	sp, #112	; 0x70
 8018fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8018fb0:	b003      	add	sp, #12
 8018fb2:	4770      	bx	lr
 8018fb4:	200001f0 	.word	0x200001f0
 8018fb8:	ffff0208 	.word	0xffff0208

08018fbc <std>:
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	b510      	push	{r4, lr}
 8018fc0:	4604      	mov	r4, r0
 8018fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8018fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018fca:	6083      	str	r3, [r0, #8]
 8018fcc:	8181      	strh	r1, [r0, #12]
 8018fce:	6643      	str	r3, [r0, #100]	; 0x64
 8018fd0:	81c2      	strh	r2, [r0, #14]
 8018fd2:	6183      	str	r3, [r0, #24]
 8018fd4:	4619      	mov	r1, r3
 8018fd6:	2208      	movs	r2, #8
 8018fd8:	305c      	adds	r0, #92	; 0x5c
 8018fda:	f000 ff51 	bl	8019e80 <memset>
 8018fde:	4b05      	ldr	r3, [pc, #20]	; (8018ff4 <std+0x38>)
 8018fe0:	6263      	str	r3, [r4, #36]	; 0x24
 8018fe2:	4b05      	ldr	r3, [pc, #20]	; (8018ff8 <std+0x3c>)
 8018fe4:	62a3      	str	r3, [r4, #40]	; 0x28
 8018fe6:	4b05      	ldr	r3, [pc, #20]	; (8018ffc <std+0x40>)
 8018fe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018fea:	4b05      	ldr	r3, [pc, #20]	; (8019000 <std+0x44>)
 8018fec:	6224      	str	r4, [r4, #32]
 8018fee:	6323      	str	r3, [r4, #48]	; 0x30
 8018ff0:	bd10      	pop	{r4, pc}
 8018ff2:	bf00      	nop
 8018ff4:	0801c307 	.word	0x0801c307
 8018ff8:	0801c329 	.word	0x0801c329
 8018ffc:	0801c361 	.word	0x0801c361
 8019000:	0801c385 	.word	0x0801c385

08019004 <stdio_exit_handler>:
 8019004:	4a02      	ldr	r2, [pc, #8]	; (8019010 <stdio_exit_handler+0xc>)
 8019006:	4903      	ldr	r1, [pc, #12]	; (8019014 <stdio_exit_handler+0x10>)
 8019008:	4803      	ldr	r0, [pc, #12]	; (8019018 <stdio_exit_handler+0x14>)
 801900a:	f000 bf09 	b.w	8019e20 <_fwalk_sglue>
 801900e:	bf00      	nop
 8019010:	2000002c 	.word	0x2000002c
 8019014:	0801b945 	.word	0x0801b945
 8019018:	200001a4 	.word	0x200001a4

0801901c <cleanup_stdio>:
 801901c:	6841      	ldr	r1, [r0, #4]
 801901e:	4b0c      	ldr	r3, [pc, #48]	; (8019050 <cleanup_stdio+0x34>)
 8019020:	4299      	cmp	r1, r3
 8019022:	b510      	push	{r4, lr}
 8019024:	4604      	mov	r4, r0
 8019026:	d001      	beq.n	801902c <cleanup_stdio+0x10>
 8019028:	f002 fc8c 	bl	801b944 <_fflush_r>
 801902c:	68a1      	ldr	r1, [r4, #8]
 801902e:	4b09      	ldr	r3, [pc, #36]	; (8019054 <cleanup_stdio+0x38>)
 8019030:	4299      	cmp	r1, r3
 8019032:	d002      	beq.n	801903a <cleanup_stdio+0x1e>
 8019034:	4620      	mov	r0, r4
 8019036:	f002 fc85 	bl	801b944 <_fflush_r>
 801903a:	68e1      	ldr	r1, [r4, #12]
 801903c:	4b06      	ldr	r3, [pc, #24]	; (8019058 <cleanup_stdio+0x3c>)
 801903e:	4299      	cmp	r1, r3
 8019040:	d004      	beq.n	801904c <cleanup_stdio+0x30>
 8019042:	4620      	mov	r0, r4
 8019044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019048:	f002 bc7c 	b.w	801b944 <_fflush_r>
 801904c:	bd10      	pop	{r4, pc}
 801904e:	bf00      	nop
 8019050:	200093c8 	.word	0x200093c8
 8019054:	20009430 	.word	0x20009430
 8019058:	20009498 	.word	0x20009498

0801905c <global_stdio_init.part.0>:
 801905c:	b510      	push	{r4, lr}
 801905e:	4b0b      	ldr	r3, [pc, #44]	; (801908c <global_stdio_init.part.0+0x30>)
 8019060:	4c0b      	ldr	r4, [pc, #44]	; (8019090 <global_stdio_init.part.0+0x34>)
 8019062:	4a0c      	ldr	r2, [pc, #48]	; (8019094 <global_stdio_init.part.0+0x38>)
 8019064:	601a      	str	r2, [r3, #0]
 8019066:	4620      	mov	r0, r4
 8019068:	2200      	movs	r2, #0
 801906a:	2104      	movs	r1, #4
 801906c:	f7ff ffa6 	bl	8018fbc <std>
 8019070:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019074:	2201      	movs	r2, #1
 8019076:	2109      	movs	r1, #9
 8019078:	f7ff ffa0 	bl	8018fbc <std>
 801907c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019080:	2202      	movs	r2, #2
 8019082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019086:	2112      	movs	r1, #18
 8019088:	f7ff bf98 	b.w	8018fbc <std>
 801908c:	20009500 	.word	0x20009500
 8019090:	200093c8 	.word	0x200093c8
 8019094:	08019005 	.word	0x08019005

08019098 <__sfp_lock_acquire>:
 8019098:	4801      	ldr	r0, [pc, #4]	; (80190a0 <__sfp_lock_acquire+0x8>)
 801909a:	f000 bf7d 	b.w	8019f98 <__retarget_lock_acquire_recursive>
 801909e:	bf00      	nop
 80190a0:	20009509 	.word	0x20009509

080190a4 <__sfp_lock_release>:
 80190a4:	4801      	ldr	r0, [pc, #4]	; (80190ac <__sfp_lock_release+0x8>)
 80190a6:	f000 bf78 	b.w	8019f9a <__retarget_lock_release_recursive>
 80190aa:	bf00      	nop
 80190ac:	20009509 	.word	0x20009509

080190b0 <__sinit>:
 80190b0:	b510      	push	{r4, lr}
 80190b2:	4604      	mov	r4, r0
 80190b4:	f7ff fff0 	bl	8019098 <__sfp_lock_acquire>
 80190b8:	6a23      	ldr	r3, [r4, #32]
 80190ba:	b11b      	cbz	r3, 80190c4 <__sinit+0x14>
 80190bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190c0:	f7ff bff0 	b.w	80190a4 <__sfp_lock_release>
 80190c4:	4b04      	ldr	r3, [pc, #16]	; (80190d8 <__sinit+0x28>)
 80190c6:	6223      	str	r3, [r4, #32]
 80190c8:	4b04      	ldr	r3, [pc, #16]	; (80190dc <__sinit+0x2c>)
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d1f5      	bne.n	80190bc <__sinit+0xc>
 80190d0:	f7ff ffc4 	bl	801905c <global_stdio_init.part.0>
 80190d4:	e7f2      	b.n	80190bc <__sinit+0xc>
 80190d6:	bf00      	nop
 80190d8:	0801901d 	.word	0x0801901d
 80190dc:	20009500 	.word	0x20009500

080190e0 <sulp>:
 80190e0:	b570      	push	{r4, r5, r6, lr}
 80190e2:	4604      	mov	r4, r0
 80190e4:	460d      	mov	r5, r1
 80190e6:	ec45 4b10 	vmov	d0, r4, r5
 80190ea:	4616      	mov	r6, r2
 80190ec:	f002 ffca 	bl	801c084 <__ulp>
 80190f0:	ec51 0b10 	vmov	r0, r1, d0
 80190f4:	b17e      	cbz	r6, 8019116 <sulp+0x36>
 80190f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80190fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80190fe:	2b00      	cmp	r3, #0
 8019100:	dd09      	ble.n	8019116 <sulp+0x36>
 8019102:	051b      	lsls	r3, r3, #20
 8019104:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019108:	2400      	movs	r4, #0
 801910a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801910e:	4622      	mov	r2, r4
 8019110:	462b      	mov	r3, r5
 8019112:	f7e7 fa7b 	bl	800060c <__aeabi_dmul>
 8019116:	bd70      	pop	{r4, r5, r6, pc}

08019118 <_strtod_l>:
 8019118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801911c:	ed2d 8b02 	vpush	{d8}
 8019120:	b09b      	sub	sp, #108	; 0x6c
 8019122:	4604      	mov	r4, r0
 8019124:	9213      	str	r2, [sp, #76]	; 0x4c
 8019126:	2200      	movs	r2, #0
 8019128:	9216      	str	r2, [sp, #88]	; 0x58
 801912a:	460d      	mov	r5, r1
 801912c:	f04f 0800 	mov.w	r8, #0
 8019130:	f04f 0900 	mov.w	r9, #0
 8019134:	460a      	mov	r2, r1
 8019136:	9215      	str	r2, [sp, #84]	; 0x54
 8019138:	7811      	ldrb	r1, [r2, #0]
 801913a:	292b      	cmp	r1, #43	; 0x2b
 801913c:	d04c      	beq.n	80191d8 <_strtod_l+0xc0>
 801913e:	d83a      	bhi.n	80191b6 <_strtod_l+0x9e>
 8019140:	290d      	cmp	r1, #13
 8019142:	d834      	bhi.n	80191ae <_strtod_l+0x96>
 8019144:	2908      	cmp	r1, #8
 8019146:	d834      	bhi.n	80191b2 <_strtod_l+0x9a>
 8019148:	2900      	cmp	r1, #0
 801914a:	d03d      	beq.n	80191c8 <_strtod_l+0xb0>
 801914c:	2200      	movs	r2, #0
 801914e:	920a      	str	r2, [sp, #40]	; 0x28
 8019150:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8019152:	7832      	ldrb	r2, [r6, #0]
 8019154:	2a30      	cmp	r2, #48	; 0x30
 8019156:	f040 80b4 	bne.w	80192c2 <_strtod_l+0x1aa>
 801915a:	7872      	ldrb	r2, [r6, #1]
 801915c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8019160:	2a58      	cmp	r2, #88	; 0x58
 8019162:	d170      	bne.n	8019246 <_strtod_l+0x12e>
 8019164:	9302      	str	r3, [sp, #8]
 8019166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019168:	9301      	str	r3, [sp, #4]
 801916a:	ab16      	add	r3, sp, #88	; 0x58
 801916c:	9300      	str	r3, [sp, #0]
 801916e:	4a8e      	ldr	r2, [pc, #568]	; (80193a8 <_strtod_l+0x290>)
 8019170:	ab17      	add	r3, sp, #92	; 0x5c
 8019172:	a915      	add	r1, sp, #84	; 0x54
 8019174:	4620      	mov	r0, r4
 8019176:	f001 fe5d 	bl	801ae34 <__gethex>
 801917a:	f010 070f 	ands.w	r7, r0, #15
 801917e:	4605      	mov	r5, r0
 8019180:	d005      	beq.n	801918e <_strtod_l+0x76>
 8019182:	2f06      	cmp	r7, #6
 8019184:	d12a      	bne.n	80191dc <_strtod_l+0xc4>
 8019186:	3601      	adds	r6, #1
 8019188:	2300      	movs	r3, #0
 801918a:	9615      	str	r6, [sp, #84]	; 0x54
 801918c:	930a      	str	r3, [sp, #40]	; 0x28
 801918e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019190:	2b00      	cmp	r3, #0
 8019192:	f040 857f 	bne.w	8019c94 <_strtod_l+0xb7c>
 8019196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019198:	b1db      	cbz	r3, 80191d2 <_strtod_l+0xba>
 801919a:	4642      	mov	r2, r8
 801919c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80191a0:	ec43 2b10 	vmov	d0, r2, r3
 80191a4:	b01b      	add	sp, #108	; 0x6c
 80191a6:	ecbd 8b02 	vpop	{d8}
 80191aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ae:	2920      	cmp	r1, #32
 80191b0:	d1cc      	bne.n	801914c <_strtod_l+0x34>
 80191b2:	3201      	adds	r2, #1
 80191b4:	e7bf      	b.n	8019136 <_strtod_l+0x1e>
 80191b6:	292d      	cmp	r1, #45	; 0x2d
 80191b8:	d1c8      	bne.n	801914c <_strtod_l+0x34>
 80191ba:	2101      	movs	r1, #1
 80191bc:	910a      	str	r1, [sp, #40]	; 0x28
 80191be:	1c51      	adds	r1, r2, #1
 80191c0:	9115      	str	r1, [sp, #84]	; 0x54
 80191c2:	7852      	ldrb	r2, [r2, #1]
 80191c4:	2a00      	cmp	r2, #0
 80191c6:	d1c3      	bne.n	8019150 <_strtod_l+0x38>
 80191c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80191ca:	9515      	str	r5, [sp, #84]	; 0x54
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	f040 855f 	bne.w	8019c90 <_strtod_l+0xb78>
 80191d2:	4642      	mov	r2, r8
 80191d4:	464b      	mov	r3, r9
 80191d6:	e7e3      	b.n	80191a0 <_strtod_l+0x88>
 80191d8:	2100      	movs	r1, #0
 80191da:	e7ef      	b.n	80191bc <_strtod_l+0xa4>
 80191dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80191de:	b13a      	cbz	r2, 80191f0 <_strtod_l+0xd8>
 80191e0:	2135      	movs	r1, #53	; 0x35
 80191e2:	a818      	add	r0, sp, #96	; 0x60
 80191e4:	f003 f84b 	bl	801c27e <__copybits>
 80191e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80191ea:	4620      	mov	r0, r4
 80191ec:	f002 fc1e 	bl	801ba2c <_Bfree>
 80191f0:	3f01      	subs	r7, #1
 80191f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80191f4:	2f04      	cmp	r7, #4
 80191f6:	d806      	bhi.n	8019206 <_strtod_l+0xee>
 80191f8:	e8df f007 	tbb	[pc, r7]
 80191fc:	201d0314 	.word	0x201d0314
 8019200:	14          	.byte	0x14
 8019201:	00          	.byte	0x00
 8019202:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8019206:	05e9      	lsls	r1, r5, #23
 8019208:	bf48      	it	mi
 801920a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801920e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019212:	0d1b      	lsrs	r3, r3, #20
 8019214:	051b      	lsls	r3, r3, #20
 8019216:	2b00      	cmp	r3, #0
 8019218:	d1b9      	bne.n	801918e <_strtod_l+0x76>
 801921a:	f000 fe93 	bl	8019f44 <__errno>
 801921e:	2322      	movs	r3, #34	; 0x22
 8019220:	6003      	str	r3, [r0, #0]
 8019222:	e7b4      	b.n	801918e <_strtod_l+0x76>
 8019224:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8019228:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801922c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019230:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8019234:	e7e7      	b.n	8019206 <_strtod_l+0xee>
 8019236:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80193b0 <_strtod_l+0x298>
 801923a:	e7e4      	b.n	8019206 <_strtod_l+0xee>
 801923c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019240:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019244:	e7df      	b.n	8019206 <_strtod_l+0xee>
 8019246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019248:	1c5a      	adds	r2, r3, #1
 801924a:	9215      	str	r2, [sp, #84]	; 0x54
 801924c:	785b      	ldrb	r3, [r3, #1]
 801924e:	2b30      	cmp	r3, #48	; 0x30
 8019250:	d0f9      	beq.n	8019246 <_strtod_l+0x12e>
 8019252:	2b00      	cmp	r3, #0
 8019254:	d09b      	beq.n	801918e <_strtod_l+0x76>
 8019256:	2301      	movs	r3, #1
 8019258:	f04f 0a00 	mov.w	sl, #0
 801925c:	9304      	str	r3, [sp, #16]
 801925e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019260:	930b      	str	r3, [sp, #44]	; 0x2c
 8019262:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8019266:	46d3      	mov	fp, sl
 8019268:	220a      	movs	r2, #10
 801926a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801926c:	7806      	ldrb	r6, [r0, #0]
 801926e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8019272:	b2d9      	uxtb	r1, r3
 8019274:	2909      	cmp	r1, #9
 8019276:	d926      	bls.n	80192c6 <_strtod_l+0x1ae>
 8019278:	494c      	ldr	r1, [pc, #304]	; (80193ac <_strtod_l+0x294>)
 801927a:	2201      	movs	r2, #1
 801927c:	f000 fdee 	bl	8019e5c <strncmp>
 8019280:	2800      	cmp	r0, #0
 8019282:	d030      	beq.n	80192e6 <_strtod_l+0x1ce>
 8019284:	2000      	movs	r0, #0
 8019286:	4632      	mov	r2, r6
 8019288:	9005      	str	r0, [sp, #20]
 801928a:	465e      	mov	r6, fp
 801928c:	4603      	mov	r3, r0
 801928e:	2a65      	cmp	r2, #101	; 0x65
 8019290:	d001      	beq.n	8019296 <_strtod_l+0x17e>
 8019292:	2a45      	cmp	r2, #69	; 0x45
 8019294:	d113      	bne.n	80192be <_strtod_l+0x1a6>
 8019296:	b91e      	cbnz	r6, 80192a0 <_strtod_l+0x188>
 8019298:	9a04      	ldr	r2, [sp, #16]
 801929a:	4302      	orrs	r2, r0
 801929c:	d094      	beq.n	80191c8 <_strtod_l+0xb0>
 801929e:	2600      	movs	r6, #0
 80192a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80192a2:	1c6a      	adds	r2, r5, #1
 80192a4:	9215      	str	r2, [sp, #84]	; 0x54
 80192a6:	786a      	ldrb	r2, [r5, #1]
 80192a8:	2a2b      	cmp	r2, #43	; 0x2b
 80192aa:	d074      	beq.n	8019396 <_strtod_l+0x27e>
 80192ac:	2a2d      	cmp	r2, #45	; 0x2d
 80192ae:	d078      	beq.n	80193a2 <_strtod_l+0x28a>
 80192b0:	f04f 0c00 	mov.w	ip, #0
 80192b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80192b8:	2909      	cmp	r1, #9
 80192ba:	d97f      	bls.n	80193bc <_strtod_l+0x2a4>
 80192bc:	9515      	str	r5, [sp, #84]	; 0x54
 80192be:	2700      	movs	r7, #0
 80192c0:	e09e      	b.n	8019400 <_strtod_l+0x2e8>
 80192c2:	2300      	movs	r3, #0
 80192c4:	e7c8      	b.n	8019258 <_strtod_l+0x140>
 80192c6:	f1bb 0f08 	cmp.w	fp, #8
 80192ca:	bfd8      	it	le
 80192cc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80192ce:	f100 0001 	add.w	r0, r0, #1
 80192d2:	bfda      	itte	le
 80192d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80192d8:	9309      	strle	r3, [sp, #36]	; 0x24
 80192da:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80192de:	f10b 0b01 	add.w	fp, fp, #1
 80192e2:	9015      	str	r0, [sp, #84]	; 0x54
 80192e4:	e7c1      	b.n	801926a <_strtod_l+0x152>
 80192e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80192e8:	1c5a      	adds	r2, r3, #1
 80192ea:	9215      	str	r2, [sp, #84]	; 0x54
 80192ec:	785a      	ldrb	r2, [r3, #1]
 80192ee:	f1bb 0f00 	cmp.w	fp, #0
 80192f2:	d037      	beq.n	8019364 <_strtod_l+0x24c>
 80192f4:	9005      	str	r0, [sp, #20]
 80192f6:	465e      	mov	r6, fp
 80192f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80192fc:	2b09      	cmp	r3, #9
 80192fe:	d912      	bls.n	8019326 <_strtod_l+0x20e>
 8019300:	2301      	movs	r3, #1
 8019302:	e7c4      	b.n	801928e <_strtod_l+0x176>
 8019304:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019306:	1c5a      	adds	r2, r3, #1
 8019308:	9215      	str	r2, [sp, #84]	; 0x54
 801930a:	785a      	ldrb	r2, [r3, #1]
 801930c:	3001      	adds	r0, #1
 801930e:	2a30      	cmp	r2, #48	; 0x30
 8019310:	d0f8      	beq.n	8019304 <_strtod_l+0x1ec>
 8019312:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019316:	2b08      	cmp	r3, #8
 8019318:	f200 84c1 	bhi.w	8019c9e <_strtod_l+0xb86>
 801931c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801931e:	9005      	str	r0, [sp, #20]
 8019320:	2000      	movs	r0, #0
 8019322:	930b      	str	r3, [sp, #44]	; 0x2c
 8019324:	4606      	mov	r6, r0
 8019326:	3a30      	subs	r2, #48	; 0x30
 8019328:	f100 0301 	add.w	r3, r0, #1
 801932c:	d014      	beq.n	8019358 <_strtod_l+0x240>
 801932e:	9905      	ldr	r1, [sp, #20]
 8019330:	4419      	add	r1, r3
 8019332:	9105      	str	r1, [sp, #20]
 8019334:	4633      	mov	r3, r6
 8019336:	eb00 0c06 	add.w	ip, r0, r6
 801933a:	210a      	movs	r1, #10
 801933c:	4563      	cmp	r3, ip
 801933e:	d113      	bne.n	8019368 <_strtod_l+0x250>
 8019340:	1833      	adds	r3, r6, r0
 8019342:	2b08      	cmp	r3, #8
 8019344:	f106 0601 	add.w	r6, r6, #1
 8019348:	4406      	add	r6, r0
 801934a:	dc1a      	bgt.n	8019382 <_strtod_l+0x26a>
 801934c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801934e:	230a      	movs	r3, #10
 8019350:	fb03 2301 	mla	r3, r3, r1, r2
 8019354:	9309      	str	r3, [sp, #36]	; 0x24
 8019356:	2300      	movs	r3, #0
 8019358:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801935a:	1c51      	adds	r1, r2, #1
 801935c:	9115      	str	r1, [sp, #84]	; 0x54
 801935e:	7852      	ldrb	r2, [r2, #1]
 8019360:	4618      	mov	r0, r3
 8019362:	e7c9      	b.n	80192f8 <_strtod_l+0x1e0>
 8019364:	4658      	mov	r0, fp
 8019366:	e7d2      	b.n	801930e <_strtod_l+0x1f6>
 8019368:	2b08      	cmp	r3, #8
 801936a:	f103 0301 	add.w	r3, r3, #1
 801936e:	dc03      	bgt.n	8019378 <_strtod_l+0x260>
 8019370:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019372:	434f      	muls	r7, r1
 8019374:	9709      	str	r7, [sp, #36]	; 0x24
 8019376:	e7e1      	b.n	801933c <_strtod_l+0x224>
 8019378:	2b10      	cmp	r3, #16
 801937a:	bfd8      	it	le
 801937c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8019380:	e7dc      	b.n	801933c <_strtod_l+0x224>
 8019382:	2e10      	cmp	r6, #16
 8019384:	bfdc      	itt	le
 8019386:	230a      	movle	r3, #10
 8019388:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801938c:	e7e3      	b.n	8019356 <_strtod_l+0x23e>
 801938e:	2300      	movs	r3, #0
 8019390:	9305      	str	r3, [sp, #20]
 8019392:	2301      	movs	r3, #1
 8019394:	e780      	b.n	8019298 <_strtod_l+0x180>
 8019396:	f04f 0c00 	mov.w	ip, #0
 801939a:	1caa      	adds	r2, r5, #2
 801939c:	9215      	str	r2, [sp, #84]	; 0x54
 801939e:	78aa      	ldrb	r2, [r5, #2]
 80193a0:	e788      	b.n	80192b4 <_strtod_l+0x19c>
 80193a2:	f04f 0c01 	mov.w	ip, #1
 80193a6:	e7f8      	b.n	801939a <_strtod_l+0x282>
 80193a8:	0801fb48 	.word	0x0801fb48
 80193ac:	0801fb45 	.word	0x0801fb45
 80193b0:	7ff00000 	.word	0x7ff00000
 80193b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80193b6:	1c51      	adds	r1, r2, #1
 80193b8:	9115      	str	r1, [sp, #84]	; 0x54
 80193ba:	7852      	ldrb	r2, [r2, #1]
 80193bc:	2a30      	cmp	r2, #48	; 0x30
 80193be:	d0f9      	beq.n	80193b4 <_strtod_l+0x29c>
 80193c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80193c4:	2908      	cmp	r1, #8
 80193c6:	f63f af7a 	bhi.w	80192be <_strtod_l+0x1a6>
 80193ca:	3a30      	subs	r2, #48	; 0x30
 80193cc:	9208      	str	r2, [sp, #32]
 80193ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80193d0:	920c      	str	r2, [sp, #48]	; 0x30
 80193d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80193d4:	1c57      	adds	r7, r2, #1
 80193d6:	9715      	str	r7, [sp, #84]	; 0x54
 80193d8:	7852      	ldrb	r2, [r2, #1]
 80193da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80193de:	f1be 0f09 	cmp.w	lr, #9
 80193e2:	d938      	bls.n	8019456 <_strtod_l+0x33e>
 80193e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80193e6:	1a7f      	subs	r7, r7, r1
 80193e8:	2f08      	cmp	r7, #8
 80193ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80193ee:	dc03      	bgt.n	80193f8 <_strtod_l+0x2e0>
 80193f0:	9908      	ldr	r1, [sp, #32]
 80193f2:	428f      	cmp	r7, r1
 80193f4:	bfa8      	it	ge
 80193f6:	460f      	movge	r7, r1
 80193f8:	f1bc 0f00 	cmp.w	ip, #0
 80193fc:	d000      	beq.n	8019400 <_strtod_l+0x2e8>
 80193fe:	427f      	negs	r7, r7
 8019400:	2e00      	cmp	r6, #0
 8019402:	d14f      	bne.n	80194a4 <_strtod_l+0x38c>
 8019404:	9904      	ldr	r1, [sp, #16]
 8019406:	4301      	orrs	r1, r0
 8019408:	f47f aec1 	bne.w	801918e <_strtod_l+0x76>
 801940c:	2b00      	cmp	r3, #0
 801940e:	f47f aedb 	bne.w	80191c8 <_strtod_l+0xb0>
 8019412:	2a69      	cmp	r2, #105	; 0x69
 8019414:	d029      	beq.n	801946a <_strtod_l+0x352>
 8019416:	dc26      	bgt.n	8019466 <_strtod_l+0x34e>
 8019418:	2a49      	cmp	r2, #73	; 0x49
 801941a:	d026      	beq.n	801946a <_strtod_l+0x352>
 801941c:	2a4e      	cmp	r2, #78	; 0x4e
 801941e:	f47f aed3 	bne.w	80191c8 <_strtod_l+0xb0>
 8019422:	499b      	ldr	r1, [pc, #620]	; (8019690 <_strtod_l+0x578>)
 8019424:	a815      	add	r0, sp, #84	; 0x54
 8019426:	f001 ff45 	bl	801b2b4 <__match>
 801942a:	2800      	cmp	r0, #0
 801942c:	f43f aecc 	beq.w	80191c8 <_strtod_l+0xb0>
 8019430:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019432:	781b      	ldrb	r3, [r3, #0]
 8019434:	2b28      	cmp	r3, #40	; 0x28
 8019436:	d12f      	bne.n	8019498 <_strtod_l+0x380>
 8019438:	4996      	ldr	r1, [pc, #600]	; (8019694 <_strtod_l+0x57c>)
 801943a:	aa18      	add	r2, sp, #96	; 0x60
 801943c:	a815      	add	r0, sp, #84	; 0x54
 801943e:	f001 ff4d 	bl	801b2dc <__hexnan>
 8019442:	2805      	cmp	r0, #5
 8019444:	d128      	bne.n	8019498 <_strtod_l+0x380>
 8019446:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019448:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801944c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019450:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019454:	e69b      	b.n	801918e <_strtod_l+0x76>
 8019456:	9f08      	ldr	r7, [sp, #32]
 8019458:	210a      	movs	r1, #10
 801945a:	fb01 2107 	mla	r1, r1, r7, r2
 801945e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019462:	9208      	str	r2, [sp, #32]
 8019464:	e7b5      	b.n	80193d2 <_strtod_l+0x2ba>
 8019466:	2a6e      	cmp	r2, #110	; 0x6e
 8019468:	e7d9      	b.n	801941e <_strtod_l+0x306>
 801946a:	498b      	ldr	r1, [pc, #556]	; (8019698 <_strtod_l+0x580>)
 801946c:	a815      	add	r0, sp, #84	; 0x54
 801946e:	f001 ff21 	bl	801b2b4 <__match>
 8019472:	2800      	cmp	r0, #0
 8019474:	f43f aea8 	beq.w	80191c8 <_strtod_l+0xb0>
 8019478:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801947a:	4988      	ldr	r1, [pc, #544]	; (801969c <_strtod_l+0x584>)
 801947c:	3b01      	subs	r3, #1
 801947e:	a815      	add	r0, sp, #84	; 0x54
 8019480:	9315      	str	r3, [sp, #84]	; 0x54
 8019482:	f001 ff17 	bl	801b2b4 <__match>
 8019486:	b910      	cbnz	r0, 801948e <_strtod_l+0x376>
 8019488:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801948a:	3301      	adds	r3, #1
 801948c:	9315      	str	r3, [sp, #84]	; 0x54
 801948e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80196ac <_strtod_l+0x594>
 8019492:	f04f 0800 	mov.w	r8, #0
 8019496:	e67a      	b.n	801918e <_strtod_l+0x76>
 8019498:	4881      	ldr	r0, [pc, #516]	; (80196a0 <_strtod_l+0x588>)
 801949a:	f000 fd8d 	bl	8019fb8 <nan>
 801949e:	ec59 8b10 	vmov	r8, r9, d0
 80194a2:	e674      	b.n	801918e <_strtod_l+0x76>
 80194a4:	9b05      	ldr	r3, [sp, #20]
 80194a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80194a8:	1afb      	subs	r3, r7, r3
 80194aa:	f1bb 0f00 	cmp.w	fp, #0
 80194ae:	bf08      	it	eq
 80194b0:	46b3      	moveq	fp, r6
 80194b2:	2e10      	cmp	r6, #16
 80194b4:	9308      	str	r3, [sp, #32]
 80194b6:	4635      	mov	r5, r6
 80194b8:	bfa8      	it	ge
 80194ba:	2510      	movge	r5, #16
 80194bc:	f7e7 f82c 	bl	8000518 <__aeabi_ui2d>
 80194c0:	2e09      	cmp	r6, #9
 80194c2:	4680      	mov	r8, r0
 80194c4:	4689      	mov	r9, r1
 80194c6:	dd13      	ble.n	80194f0 <_strtod_l+0x3d8>
 80194c8:	4b76      	ldr	r3, [pc, #472]	; (80196a4 <_strtod_l+0x58c>)
 80194ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80194ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80194d2:	f7e7 f89b 	bl	800060c <__aeabi_dmul>
 80194d6:	4680      	mov	r8, r0
 80194d8:	4650      	mov	r0, sl
 80194da:	4689      	mov	r9, r1
 80194dc:	f7e7 f81c 	bl	8000518 <__aeabi_ui2d>
 80194e0:	4602      	mov	r2, r0
 80194e2:	460b      	mov	r3, r1
 80194e4:	4640      	mov	r0, r8
 80194e6:	4649      	mov	r1, r9
 80194e8:	f7e6 feda 	bl	80002a0 <__adddf3>
 80194ec:	4680      	mov	r8, r0
 80194ee:	4689      	mov	r9, r1
 80194f0:	2e0f      	cmp	r6, #15
 80194f2:	dc38      	bgt.n	8019566 <_strtod_l+0x44e>
 80194f4:	9b08      	ldr	r3, [sp, #32]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	f43f ae49 	beq.w	801918e <_strtod_l+0x76>
 80194fc:	dd24      	ble.n	8019548 <_strtod_l+0x430>
 80194fe:	2b16      	cmp	r3, #22
 8019500:	dc0b      	bgt.n	801951a <_strtod_l+0x402>
 8019502:	4968      	ldr	r1, [pc, #416]	; (80196a4 <_strtod_l+0x58c>)
 8019504:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019508:	e9d1 0100 	ldrd	r0, r1, [r1]
 801950c:	4642      	mov	r2, r8
 801950e:	464b      	mov	r3, r9
 8019510:	f7e7 f87c 	bl	800060c <__aeabi_dmul>
 8019514:	4680      	mov	r8, r0
 8019516:	4689      	mov	r9, r1
 8019518:	e639      	b.n	801918e <_strtod_l+0x76>
 801951a:	9a08      	ldr	r2, [sp, #32]
 801951c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8019520:	4293      	cmp	r3, r2
 8019522:	db20      	blt.n	8019566 <_strtod_l+0x44e>
 8019524:	4c5f      	ldr	r4, [pc, #380]	; (80196a4 <_strtod_l+0x58c>)
 8019526:	f1c6 060f 	rsb	r6, r6, #15
 801952a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801952e:	4642      	mov	r2, r8
 8019530:	464b      	mov	r3, r9
 8019532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019536:	f7e7 f869 	bl	800060c <__aeabi_dmul>
 801953a:	9b08      	ldr	r3, [sp, #32]
 801953c:	1b9e      	subs	r6, r3, r6
 801953e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8019542:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019546:	e7e3      	b.n	8019510 <_strtod_l+0x3f8>
 8019548:	9b08      	ldr	r3, [sp, #32]
 801954a:	3316      	adds	r3, #22
 801954c:	db0b      	blt.n	8019566 <_strtod_l+0x44e>
 801954e:	9b05      	ldr	r3, [sp, #20]
 8019550:	1bdf      	subs	r7, r3, r7
 8019552:	4b54      	ldr	r3, [pc, #336]	; (80196a4 <_strtod_l+0x58c>)
 8019554:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8019558:	e9d7 2300 	ldrd	r2, r3, [r7]
 801955c:	4640      	mov	r0, r8
 801955e:	4649      	mov	r1, r9
 8019560:	f7e7 f97e 	bl	8000860 <__aeabi_ddiv>
 8019564:	e7d6      	b.n	8019514 <_strtod_l+0x3fc>
 8019566:	9b08      	ldr	r3, [sp, #32]
 8019568:	1b75      	subs	r5, r6, r5
 801956a:	441d      	add	r5, r3
 801956c:	2d00      	cmp	r5, #0
 801956e:	dd70      	ble.n	8019652 <_strtod_l+0x53a>
 8019570:	f015 030f 	ands.w	r3, r5, #15
 8019574:	d00a      	beq.n	801958c <_strtod_l+0x474>
 8019576:	494b      	ldr	r1, [pc, #300]	; (80196a4 <_strtod_l+0x58c>)
 8019578:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801957c:	4642      	mov	r2, r8
 801957e:	464b      	mov	r3, r9
 8019580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019584:	f7e7 f842 	bl	800060c <__aeabi_dmul>
 8019588:	4680      	mov	r8, r0
 801958a:	4689      	mov	r9, r1
 801958c:	f035 050f 	bics.w	r5, r5, #15
 8019590:	d04d      	beq.n	801962e <_strtod_l+0x516>
 8019592:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8019596:	dd22      	ble.n	80195de <_strtod_l+0x4c6>
 8019598:	2500      	movs	r5, #0
 801959a:	46ab      	mov	fp, r5
 801959c:	9509      	str	r5, [sp, #36]	; 0x24
 801959e:	9505      	str	r5, [sp, #20]
 80195a0:	2322      	movs	r3, #34	; 0x22
 80195a2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80196ac <_strtod_l+0x594>
 80195a6:	6023      	str	r3, [r4, #0]
 80195a8:	f04f 0800 	mov.w	r8, #0
 80195ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	f43f aded 	beq.w	801918e <_strtod_l+0x76>
 80195b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80195b6:	4620      	mov	r0, r4
 80195b8:	f002 fa38 	bl	801ba2c <_Bfree>
 80195bc:	9905      	ldr	r1, [sp, #20]
 80195be:	4620      	mov	r0, r4
 80195c0:	f002 fa34 	bl	801ba2c <_Bfree>
 80195c4:	4659      	mov	r1, fp
 80195c6:	4620      	mov	r0, r4
 80195c8:	f002 fa30 	bl	801ba2c <_Bfree>
 80195cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80195ce:	4620      	mov	r0, r4
 80195d0:	f002 fa2c 	bl	801ba2c <_Bfree>
 80195d4:	4629      	mov	r1, r5
 80195d6:	4620      	mov	r0, r4
 80195d8:	f002 fa28 	bl	801ba2c <_Bfree>
 80195dc:	e5d7      	b.n	801918e <_strtod_l+0x76>
 80195de:	4b32      	ldr	r3, [pc, #200]	; (80196a8 <_strtod_l+0x590>)
 80195e0:	9304      	str	r3, [sp, #16]
 80195e2:	2300      	movs	r3, #0
 80195e4:	112d      	asrs	r5, r5, #4
 80195e6:	4640      	mov	r0, r8
 80195e8:	4649      	mov	r1, r9
 80195ea:	469a      	mov	sl, r3
 80195ec:	2d01      	cmp	r5, #1
 80195ee:	dc21      	bgt.n	8019634 <_strtod_l+0x51c>
 80195f0:	b10b      	cbz	r3, 80195f6 <_strtod_l+0x4de>
 80195f2:	4680      	mov	r8, r0
 80195f4:	4689      	mov	r9, r1
 80195f6:	492c      	ldr	r1, [pc, #176]	; (80196a8 <_strtod_l+0x590>)
 80195f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80195fc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8019600:	4642      	mov	r2, r8
 8019602:	464b      	mov	r3, r9
 8019604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019608:	f7e7 f800 	bl	800060c <__aeabi_dmul>
 801960c:	4b27      	ldr	r3, [pc, #156]	; (80196ac <_strtod_l+0x594>)
 801960e:	460a      	mov	r2, r1
 8019610:	400b      	ands	r3, r1
 8019612:	4927      	ldr	r1, [pc, #156]	; (80196b0 <_strtod_l+0x598>)
 8019614:	428b      	cmp	r3, r1
 8019616:	4680      	mov	r8, r0
 8019618:	d8be      	bhi.n	8019598 <_strtod_l+0x480>
 801961a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801961e:	428b      	cmp	r3, r1
 8019620:	bf86      	itte	hi
 8019622:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80196b4 <_strtod_l+0x59c>
 8019626:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 801962a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801962e:	2300      	movs	r3, #0
 8019630:	9304      	str	r3, [sp, #16]
 8019632:	e07b      	b.n	801972c <_strtod_l+0x614>
 8019634:	07ea      	lsls	r2, r5, #31
 8019636:	d505      	bpl.n	8019644 <_strtod_l+0x52c>
 8019638:	9b04      	ldr	r3, [sp, #16]
 801963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801963e:	f7e6 ffe5 	bl	800060c <__aeabi_dmul>
 8019642:	2301      	movs	r3, #1
 8019644:	9a04      	ldr	r2, [sp, #16]
 8019646:	3208      	adds	r2, #8
 8019648:	f10a 0a01 	add.w	sl, sl, #1
 801964c:	106d      	asrs	r5, r5, #1
 801964e:	9204      	str	r2, [sp, #16]
 8019650:	e7cc      	b.n	80195ec <_strtod_l+0x4d4>
 8019652:	d0ec      	beq.n	801962e <_strtod_l+0x516>
 8019654:	426d      	negs	r5, r5
 8019656:	f015 020f 	ands.w	r2, r5, #15
 801965a:	d00a      	beq.n	8019672 <_strtod_l+0x55a>
 801965c:	4b11      	ldr	r3, [pc, #68]	; (80196a4 <_strtod_l+0x58c>)
 801965e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019662:	4640      	mov	r0, r8
 8019664:	4649      	mov	r1, r9
 8019666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801966a:	f7e7 f8f9 	bl	8000860 <__aeabi_ddiv>
 801966e:	4680      	mov	r8, r0
 8019670:	4689      	mov	r9, r1
 8019672:	112d      	asrs	r5, r5, #4
 8019674:	d0db      	beq.n	801962e <_strtod_l+0x516>
 8019676:	2d1f      	cmp	r5, #31
 8019678:	dd1e      	ble.n	80196b8 <_strtod_l+0x5a0>
 801967a:	2500      	movs	r5, #0
 801967c:	46ab      	mov	fp, r5
 801967e:	9509      	str	r5, [sp, #36]	; 0x24
 8019680:	9505      	str	r5, [sp, #20]
 8019682:	2322      	movs	r3, #34	; 0x22
 8019684:	f04f 0800 	mov.w	r8, #0
 8019688:	f04f 0900 	mov.w	r9, #0
 801968c:	6023      	str	r3, [r4, #0]
 801968e:	e78d      	b.n	80195ac <_strtod_l+0x494>
 8019690:	0801fb19 	.word	0x0801fb19
 8019694:	0801fb5c 	.word	0x0801fb5c
 8019698:	0801fb11 	.word	0x0801fb11
 801969c:	0801fca4 	.word	0x0801fca4
 80196a0:	0801ff2f 	.word	0x0801ff2f
 80196a4:	0801fe20 	.word	0x0801fe20
 80196a8:	0801fdf8 	.word	0x0801fdf8
 80196ac:	7ff00000 	.word	0x7ff00000
 80196b0:	7ca00000 	.word	0x7ca00000
 80196b4:	7fefffff 	.word	0x7fefffff
 80196b8:	f015 0310 	ands.w	r3, r5, #16
 80196bc:	bf18      	it	ne
 80196be:	236a      	movne	r3, #106	; 0x6a
 80196c0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8019a64 <_strtod_l+0x94c>
 80196c4:	9304      	str	r3, [sp, #16]
 80196c6:	4640      	mov	r0, r8
 80196c8:	4649      	mov	r1, r9
 80196ca:	2300      	movs	r3, #0
 80196cc:	07ea      	lsls	r2, r5, #31
 80196ce:	d504      	bpl.n	80196da <_strtod_l+0x5c2>
 80196d0:	e9da 2300 	ldrd	r2, r3, [sl]
 80196d4:	f7e6 ff9a 	bl	800060c <__aeabi_dmul>
 80196d8:	2301      	movs	r3, #1
 80196da:	106d      	asrs	r5, r5, #1
 80196dc:	f10a 0a08 	add.w	sl, sl, #8
 80196e0:	d1f4      	bne.n	80196cc <_strtod_l+0x5b4>
 80196e2:	b10b      	cbz	r3, 80196e8 <_strtod_l+0x5d0>
 80196e4:	4680      	mov	r8, r0
 80196e6:	4689      	mov	r9, r1
 80196e8:	9b04      	ldr	r3, [sp, #16]
 80196ea:	b1bb      	cbz	r3, 801971c <_strtod_l+0x604>
 80196ec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80196f0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	4649      	mov	r1, r9
 80196f8:	dd10      	ble.n	801971c <_strtod_l+0x604>
 80196fa:	2b1f      	cmp	r3, #31
 80196fc:	f340 811e 	ble.w	801993c <_strtod_l+0x824>
 8019700:	2b34      	cmp	r3, #52	; 0x34
 8019702:	bfde      	ittt	le
 8019704:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8019708:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801970c:	4093      	lslle	r3, r2
 801970e:	f04f 0800 	mov.w	r8, #0
 8019712:	bfcc      	ite	gt
 8019714:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8019718:	ea03 0901 	andle.w	r9, r3, r1
 801971c:	2200      	movs	r2, #0
 801971e:	2300      	movs	r3, #0
 8019720:	4640      	mov	r0, r8
 8019722:	4649      	mov	r1, r9
 8019724:	f7e7 f9da 	bl	8000adc <__aeabi_dcmpeq>
 8019728:	2800      	cmp	r0, #0
 801972a:	d1a6      	bne.n	801967a <_strtod_l+0x562>
 801972c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801972e:	9300      	str	r3, [sp, #0]
 8019730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019732:	4633      	mov	r3, r6
 8019734:	465a      	mov	r2, fp
 8019736:	4620      	mov	r0, r4
 8019738:	f002 f9e0 	bl	801bafc <__s2b>
 801973c:	9009      	str	r0, [sp, #36]	; 0x24
 801973e:	2800      	cmp	r0, #0
 8019740:	f43f af2a 	beq.w	8019598 <_strtod_l+0x480>
 8019744:	9a08      	ldr	r2, [sp, #32]
 8019746:	9b05      	ldr	r3, [sp, #20]
 8019748:	2a00      	cmp	r2, #0
 801974a:	eba3 0307 	sub.w	r3, r3, r7
 801974e:	bfa8      	it	ge
 8019750:	2300      	movge	r3, #0
 8019752:	930c      	str	r3, [sp, #48]	; 0x30
 8019754:	2500      	movs	r5, #0
 8019756:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801975a:	9312      	str	r3, [sp, #72]	; 0x48
 801975c:	46ab      	mov	fp, r5
 801975e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019760:	4620      	mov	r0, r4
 8019762:	6859      	ldr	r1, [r3, #4]
 8019764:	f002 f922 	bl	801b9ac <_Balloc>
 8019768:	9005      	str	r0, [sp, #20]
 801976a:	2800      	cmp	r0, #0
 801976c:	f43f af18 	beq.w	80195a0 <_strtod_l+0x488>
 8019770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019772:	691a      	ldr	r2, [r3, #16]
 8019774:	3202      	adds	r2, #2
 8019776:	f103 010c 	add.w	r1, r3, #12
 801977a:	0092      	lsls	r2, r2, #2
 801977c:	300c      	adds	r0, #12
 801977e:	f000 fc0d 	bl	8019f9c <memcpy>
 8019782:	ec49 8b10 	vmov	d0, r8, r9
 8019786:	aa18      	add	r2, sp, #96	; 0x60
 8019788:	a917      	add	r1, sp, #92	; 0x5c
 801978a:	4620      	mov	r0, r4
 801978c:	f002 fcea 	bl	801c164 <__d2b>
 8019790:	ec49 8b18 	vmov	d8, r8, r9
 8019794:	9016      	str	r0, [sp, #88]	; 0x58
 8019796:	2800      	cmp	r0, #0
 8019798:	f43f af02 	beq.w	80195a0 <_strtod_l+0x488>
 801979c:	2101      	movs	r1, #1
 801979e:	4620      	mov	r0, r4
 80197a0:	f002 fa44 	bl	801bc2c <__i2b>
 80197a4:	4683      	mov	fp, r0
 80197a6:	2800      	cmp	r0, #0
 80197a8:	f43f aefa 	beq.w	80195a0 <_strtod_l+0x488>
 80197ac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80197ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80197b0:	2e00      	cmp	r6, #0
 80197b2:	bfab      	itete	ge
 80197b4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80197b6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80197b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80197ba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80197be:	bfac      	ite	ge
 80197c0:	eb06 0a03 	addge.w	sl, r6, r3
 80197c4:	1b9f      	sublt	r7, r3, r6
 80197c6:	9b04      	ldr	r3, [sp, #16]
 80197c8:	1af6      	subs	r6, r6, r3
 80197ca:	4416      	add	r6, r2
 80197cc:	4ba0      	ldr	r3, [pc, #640]	; (8019a50 <_strtod_l+0x938>)
 80197ce:	3e01      	subs	r6, #1
 80197d0:	429e      	cmp	r6, r3
 80197d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80197d6:	f280 80c4 	bge.w	8019962 <_strtod_l+0x84a>
 80197da:	1b9b      	subs	r3, r3, r6
 80197dc:	2b1f      	cmp	r3, #31
 80197de:	eba2 0203 	sub.w	r2, r2, r3
 80197e2:	f04f 0101 	mov.w	r1, #1
 80197e6:	f300 80b0 	bgt.w	801994a <_strtod_l+0x832>
 80197ea:	fa01 f303 	lsl.w	r3, r1, r3
 80197ee:	930e      	str	r3, [sp, #56]	; 0x38
 80197f0:	2300      	movs	r3, #0
 80197f2:	930d      	str	r3, [sp, #52]	; 0x34
 80197f4:	eb0a 0602 	add.w	r6, sl, r2
 80197f8:	9b04      	ldr	r3, [sp, #16]
 80197fa:	45b2      	cmp	sl, r6
 80197fc:	4417      	add	r7, r2
 80197fe:	441f      	add	r7, r3
 8019800:	4653      	mov	r3, sl
 8019802:	bfa8      	it	ge
 8019804:	4633      	movge	r3, r6
 8019806:	42bb      	cmp	r3, r7
 8019808:	bfa8      	it	ge
 801980a:	463b      	movge	r3, r7
 801980c:	2b00      	cmp	r3, #0
 801980e:	bfc2      	ittt	gt
 8019810:	1af6      	subgt	r6, r6, r3
 8019812:	1aff      	subgt	r7, r7, r3
 8019814:	ebaa 0a03 	subgt.w	sl, sl, r3
 8019818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801981a:	2b00      	cmp	r3, #0
 801981c:	dd17      	ble.n	801984e <_strtod_l+0x736>
 801981e:	4659      	mov	r1, fp
 8019820:	461a      	mov	r2, r3
 8019822:	4620      	mov	r0, r4
 8019824:	f002 fac2 	bl	801bdac <__pow5mult>
 8019828:	4683      	mov	fp, r0
 801982a:	2800      	cmp	r0, #0
 801982c:	f43f aeb8 	beq.w	80195a0 <_strtod_l+0x488>
 8019830:	4601      	mov	r1, r0
 8019832:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019834:	4620      	mov	r0, r4
 8019836:	f002 fa0f 	bl	801bc58 <__multiply>
 801983a:	900b      	str	r0, [sp, #44]	; 0x2c
 801983c:	2800      	cmp	r0, #0
 801983e:	f43f aeaf 	beq.w	80195a0 <_strtod_l+0x488>
 8019842:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019844:	4620      	mov	r0, r4
 8019846:	f002 f8f1 	bl	801ba2c <_Bfree>
 801984a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801984c:	9316      	str	r3, [sp, #88]	; 0x58
 801984e:	2e00      	cmp	r6, #0
 8019850:	f300 808c 	bgt.w	801996c <_strtod_l+0x854>
 8019854:	9b08      	ldr	r3, [sp, #32]
 8019856:	2b00      	cmp	r3, #0
 8019858:	dd08      	ble.n	801986c <_strtod_l+0x754>
 801985a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801985c:	9905      	ldr	r1, [sp, #20]
 801985e:	4620      	mov	r0, r4
 8019860:	f002 faa4 	bl	801bdac <__pow5mult>
 8019864:	9005      	str	r0, [sp, #20]
 8019866:	2800      	cmp	r0, #0
 8019868:	f43f ae9a 	beq.w	80195a0 <_strtod_l+0x488>
 801986c:	2f00      	cmp	r7, #0
 801986e:	dd08      	ble.n	8019882 <_strtod_l+0x76a>
 8019870:	9905      	ldr	r1, [sp, #20]
 8019872:	463a      	mov	r2, r7
 8019874:	4620      	mov	r0, r4
 8019876:	f002 faf3 	bl	801be60 <__lshift>
 801987a:	9005      	str	r0, [sp, #20]
 801987c:	2800      	cmp	r0, #0
 801987e:	f43f ae8f 	beq.w	80195a0 <_strtod_l+0x488>
 8019882:	f1ba 0f00 	cmp.w	sl, #0
 8019886:	dd08      	ble.n	801989a <_strtod_l+0x782>
 8019888:	4659      	mov	r1, fp
 801988a:	4652      	mov	r2, sl
 801988c:	4620      	mov	r0, r4
 801988e:	f002 fae7 	bl	801be60 <__lshift>
 8019892:	4683      	mov	fp, r0
 8019894:	2800      	cmp	r0, #0
 8019896:	f43f ae83 	beq.w	80195a0 <_strtod_l+0x488>
 801989a:	9a05      	ldr	r2, [sp, #20]
 801989c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801989e:	4620      	mov	r0, r4
 80198a0:	f002 fb66 	bl	801bf70 <__mdiff>
 80198a4:	4605      	mov	r5, r0
 80198a6:	2800      	cmp	r0, #0
 80198a8:	f43f ae7a 	beq.w	80195a0 <_strtod_l+0x488>
 80198ac:	68c3      	ldr	r3, [r0, #12]
 80198ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80198b0:	2300      	movs	r3, #0
 80198b2:	60c3      	str	r3, [r0, #12]
 80198b4:	4659      	mov	r1, fp
 80198b6:	f002 fb3f 	bl	801bf38 <__mcmp>
 80198ba:	2800      	cmp	r0, #0
 80198bc:	da60      	bge.n	8019980 <_strtod_l+0x868>
 80198be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198c0:	ea53 0308 	orrs.w	r3, r3, r8
 80198c4:	f040 8084 	bne.w	80199d0 <_strtod_l+0x8b8>
 80198c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d17f      	bne.n	80199d0 <_strtod_l+0x8b8>
 80198d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80198d4:	0d1b      	lsrs	r3, r3, #20
 80198d6:	051b      	lsls	r3, r3, #20
 80198d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80198dc:	d978      	bls.n	80199d0 <_strtod_l+0x8b8>
 80198de:	696b      	ldr	r3, [r5, #20]
 80198e0:	b913      	cbnz	r3, 80198e8 <_strtod_l+0x7d0>
 80198e2:	692b      	ldr	r3, [r5, #16]
 80198e4:	2b01      	cmp	r3, #1
 80198e6:	dd73      	ble.n	80199d0 <_strtod_l+0x8b8>
 80198e8:	4629      	mov	r1, r5
 80198ea:	2201      	movs	r2, #1
 80198ec:	4620      	mov	r0, r4
 80198ee:	f002 fab7 	bl	801be60 <__lshift>
 80198f2:	4659      	mov	r1, fp
 80198f4:	4605      	mov	r5, r0
 80198f6:	f002 fb1f 	bl	801bf38 <__mcmp>
 80198fa:	2800      	cmp	r0, #0
 80198fc:	dd68      	ble.n	80199d0 <_strtod_l+0x8b8>
 80198fe:	9904      	ldr	r1, [sp, #16]
 8019900:	4a54      	ldr	r2, [pc, #336]	; (8019a54 <_strtod_l+0x93c>)
 8019902:	464b      	mov	r3, r9
 8019904:	2900      	cmp	r1, #0
 8019906:	f000 8084 	beq.w	8019a12 <_strtod_l+0x8fa>
 801990a:	ea02 0109 	and.w	r1, r2, r9
 801990e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8019912:	dc7e      	bgt.n	8019a12 <_strtod_l+0x8fa>
 8019914:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8019918:	f77f aeb3 	ble.w	8019682 <_strtod_l+0x56a>
 801991c:	4b4e      	ldr	r3, [pc, #312]	; (8019a58 <_strtod_l+0x940>)
 801991e:	4640      	mov	r0, r8
 8019920:	4649      	mov	r1, r9
 8019922:	2200      	movs	r2, #0
 8019924:	f7e6 fe72 	bl	800060c <__aeabi_dmul>
 8019928:	4b4a      	ldr	r3, [pc, #296]	; (8019a54 <_strtod_l+0x93c>)
 801992a:	400b      	ands	r3, r1
 801992c:	4680      	mov	r8, r0
 801992e:	4689      	mov	r9, r1
 8019930:	2b00      	cmp	r3, #0
 8019932:	f47f ae3f 	bne.w	80195b4 <_strtod_l+0x49c>
 8019936:	2322      	movs	r3, #34	; 0x22
 8019938:	6023      	str	r3, [r4, #0]
 801993a:	e63b      	b.n	80195b4 <_strtod_l+0x49c>
 801993c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019940:	fa02 f303 	lsl.w	r3, r2, r3
 8019944:	ea03 0808 	and.w	r8, r3, r8
 8019948:	e6e8      	b.n	801971c <_strtod_l+0x604>
 801994a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801994e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8019952:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8019956:	36e2      	adds	r6, #226	; 0xe2
 8019958:	fa01 f306 	lsl.w	r3, r1, r6
 801995c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8019960:	e748      	b.n	80197f4 <_strtod_l+0x6dc>
 8019962:	2100      	movs	r1, #0
 8019964:	2301      	movs	r3, #1
 8019966:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801996a:	e743      	b.n	80197f4 <_strtod_l+0x6dc>
 801996c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801996e:	4632      	mov	r2, r6
 8019970:	4620      	mov	r0, r4
 8019972:	f002 fa75 	bl	801be60 <__lshift>
 8019976:	9016      	str	r0, [sp, #88]	; 0x58
 8019978:	2800      	cmp	r0, #0
 801997a:	f47f af6b 	bne.w	8019854 <_strtod_l+0x73c>
 801997e:	e60f      	b.n	80195a0 <_strtod_l+0x488>
 8019980:	46ca      	mov	sl, r9
 8019982:	d171      	bne.n	8019a68 <_strtod_l+0x950>
 8019984:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019986:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801998a:	b352      	cbz	r2, 80199e2 <_strtod_l+0x8ca>
 801998c:	4a33      	ldr	r2, [pc, #204]	; (8019a5c <_strtod_l+0x944>)
 801998e:	4293      	cmp	r3, r2
 8019990:	d12a      	bne.n	80199e8 <_strtod_l+0x8d0>
 8019992:	9b04      	ldr	r3, [sp, #16]
 8019994:	4641      	mov	r1, r8
 8019996:	b1fb      	cbz	r3, 80199d8 <_strtod_l+0x8c0>
 8019998:	4b2e      	ldr	r3, [pc, #184]	; (8019a54 <_strtod_l+0x93c>)
 801999a:	ea09 0303 	and.w	r3, r9, r3
 801999e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80199a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80199a6:	d81a      	bhi.n	80199de <_strtod_l+0x8c6>
 80199a8:	0d1b      	lsrs	r3, r3, #20
 80199aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80199ae:	fa02 f303 	lsl.w	r3, r2, r3
 80199b2:	4299      	cmp	r1, r3
 80199b4:	d118      	bne.n	80199e8 <_strtod_l+0x8d0>
 80199b6:	4b2a      	ldr	r3, [pc, #168]	; (8019a60 <_strtod_l+0x948>)
 80199b8:	459a      	cmp	sl, r3
 80199ba:	d102      	bne.n	80199c2 <_strtod_l+0x8aa>
 80199bc:	3101      	adds	r1, #1
 80199be:	f43f adef 	beq.w	80195a0 <_strtod_l+0x488>
 80199c2:	4b24      	ldr	r3, [pc, #144]	; (8019a54 <_strtod_l+0x93c>)
 80199c4:	ea0a 0303 	and.w	r3, sl, r3
 80199c8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80199cc:	f04f 0800 	mov.w	r8, #0
 80199d0:	9b04      	ldr	r3, [sp, #16]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d1a2      	bne.n	801991c <_strtod_l+0x804>
 80199d6:	e5ed      	b.n	80195b4 <_strtod_l+0x49c>
 80199d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80199dc:	e7e9      	b.n	80199b2 <_strtod_l+0x89a>
 80199de:	4613      	mov	r3, r2
 80199e0:	e7e7      	b.n	80199b2 <_strtod_l+0x89a>
 80199e2:	ea53 0308 	orrs.w	r3, r3, r8
 80199e6:	d08a      	beq.n	80198fe <_strtod_l+0x7e6>
 80199e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80199ea:	b1e3      	cbz	r3, 8019a26 <_strtod_l+0x90e>
 80199ec:	ea13 0f0a 	tst.w	r3, sl
 80199f0:	d0ee      	beq.n	80199d0 <_strtod_l+0x8b8>
 80199f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199f4:	9a04      	ldr	r2, [sp, #16]
 80199f6:	4640      	mov	r0, r8
 80199f8:	4649      	mov	r1, r9
 80199fa:	b1c3      	cbz	r3, 8019a2e <_strtod_l+0x916>
 80199fc:	f7ff fb70 	bl	80190e0 <sulp>
 8019a00:	4602      	mov	r2, r0
 8019a02:	460b      	mov	r3, r1
 8019a04:	ec51 0b18 	vmov	r0, r1, d8
 8019a08:	f7e6 fc4a 	bl	80002a0 <__adddf3>
 8019a0c:	4680      	mov	r8, r0
 8019a0e:	4689      	mov	r9, r1
 8019a10:	e7de      	b.n	80199d0 <_strtod_l+0x8b8>
 8019a12:	4013      	ands	r3, r2
 8019a14:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8019a18:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8019a1c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8019a20:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019a24:	e7d4      	b.n	80199d0 <_strtod_l+0x8b8>
 8019a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019a28:	ea13 0f08 	tst.w	r3, r8
 8019a2c:	e7e0      	b.n	80199f0 <_strtod_l+0x8d8>
 8019a2e:	f7ff fb57 	bl	80190e0 <sulp>
 8019a32:	4602      	mov	r2, r0
 8019a34:	460b      	mov	r3, r1
 8019a36:	ec51 0b18 	vmov	r0, r1, d8
 8019a3a:	f7e6 fc2f 	bl	800029c <__aeabi_dsub>
 8019a3e:	2200      	movs	r2, #0
 8019a40:	2300      	movs	r3, #0
 8019a42:	4680      	mov	r8, r0
 8019a44:	4689      	mov	r9, r1
 8019a46:	f7e7 f849 	bl	8000adc <__aeabi_dcmpeq>
 8019a4a:	2800      	cmp	r0, #0
 8019a4c:	d0c0      	beq.n	80199d0 <_strtod_l+0x8b8>
 8019a4e:	e618      	b.n	8019682 <_strtod_l+0x56a>
 8019a50:	fffffc02 	.word	0xfffffc02
 8019a54:	7ff00000 	.word	0x7ff00000
 8019a58:	39500000 	.word	0x39500000
 8019a5c:	000fffff 	.word	0x000fffff
 8019a60:	7fefffff 	.word	0x7fefffff
 8019a64:	0801fb70 	.word	0x0801fb70
 8019a68:	4659      	mov	r1, fp
 8019a6a:	4628      	mov	r0, r5
 8019a6c:	f002 fbd4 	bl	801c218 <__ratio>
 8019a70:	ec57 6b10 	vmov	r6, r7, d0
 8019a74:	ee10 0a10 	vmov	r0, s0
 8019a78:	2200      	movs	r2, #0
 8019a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019a7e:	4639      	mov	r1, r7
 8019a80:	f7e7 f840 	bl	8000b04 <__aeabi_dcmple>
 8019a84:	2800      	cmp	r0, #0
 8019a86:	d071      	beq.n	8019b6c <_strtod_l+0xa54>
 8019a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d17c      	bne.n	8019b88 <_strtod_l+0xa70>
 8019a8e:	f1b8 0f00 	cmp.w	r8, #0
 8019a92:	d15a      	bne.n	8019b4a <_strtod_l+0xa32>
 8019a94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d15d      	bne.n	8019b58 <_strtod_l+0xa40>
 8019a9c:	4b90      	ldr	r3, [pc, #576]	; (8019ce0 <_strtod_l+0xbc8>)
 8019a9e:	2200      	movs	r2, #0
 8019aa0:	4630      	mov	r0, r6
 8019aa2:	4639      	mov	r1, r7
 8019aa4:	f7e7 f824 	bl	8000af0 <__aeabi_dcmplt>
 8019aa8:	2800      	cmp	r0, #0
 8019aaa:	d15c      	bne.n	8019b66 <_strtod_l+0xa4e>
 8019aac:	4630      	mov	r0, r6
 8019aae:	4639      	mov	r1, r7
 8019ab0:	4b8c      	ldr	r3, [pc, #560]	; (8019ce4 <_strtod_l+0xbcc>)
 8019ab2:	2200      	movs	r2, #0
 8019ab4:	f7e6 fdaa 	bl	800060c <__aeabi_dmul>
 8019ab8:	4606      	mov	r6, r0
 8019aba:	460f      	mov	r7, r1
 8019abc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8019ac0:	9606      	str	r6, [sp, #24]
 8019ac2:	9307      	str	r3, [sp, #28]
 8019ac4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019ac8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019acc:	4b86      	ldr	r3, [pc, #536]	; (8019ce8 <_strtod_l+0xbd0>)
 8019ace:	ea0a 0303 	and.w	r3, sl, r3
 8019ad2:	930d      	str	r3, [sp, #52]	; 0x34
 8019ad4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019ad6:	4b85      	ldr	r3, [pc, #532]	; (8019cec <_strtod_l+0xbd4>)
 8019ad8:	429a      	cmp	r2, r3
 8019ada:	f040 8090 	bne.w	8019bfe <_strtod_l+0xae6>
 8019ade:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8019ae2:	ec49 8b10 	vmov	d0, r8, r9
 8019ae6:	f002 facd 	bl	801c084 <__ulp>
 8019aea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019aee:	ec51 0b10 	vmov	r0, r1, d0
 8019af2:	f7e6 fd8b 	bl	800060c <__aeabi_dmul>
 8019af6:	4642      	mov	r2, r8
 8019af8:	464b      	mov	r3, r9
 8019afa:	f7e6 fbd1 	bl	80002a0 <__adddf3>
 8019afe:	460b      	mov	r3, r1
 8019b00:	4979      	ldr	r1, [pc, #484]	; (8019ce8 <_strtod_l+0xbd0>)
 8019b02:	4a7b      	ldr	r2, [pc, #492]	; (8019cf0 <_strtod_l+0xbd8>)
 8019b04:	4019      	ands	r1, r3
 8019b06:	4291      	cmp	r1, r2
 8019b08:	4680      	mov	r8, r0
 8019b0a:	d944      	bls.n	8019b96 <_strtod_l+0xa7e>
 8019b0c:	ee18 2a90 	vmov	r2, s17
 8019b10:	4b78      	ldr	r3, [pc, #480]	; (8019cf4 <_strtod_l+0xbdc>)
 8019b12:	429a      	cmp	r2, r3
 8019b14:	d104      	bne.n	8019b20 <_strtod_l+0xa08>
 8019b16:	ee18 3a10 	vmov	r3, s16
 8019b1a:	3301      	adds	r3, #1
 8019b1c:	f43f ad40 	beq.w	80195a0 <_strtod_l+0x488>
 8019b20:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8019cf4 <_strtod_l+0xbdc>
 8019b24:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019b28:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019b2a:	4620      	mov	r0, r4
 8019b2c:	f001 ff7e 	bl	801ba2c <_Bfree>
 8019b30:	9905      	ldr	r1, [sp, #20]
 8019b32:	4620      	mov	r0, r4
 8019b34:	f001 ff7a 	bl	801ba2c <_Bfree>
 8019b38:	4659      	mov	r1, fp
 8019b3a:	4620      	mov	r0, r4
 8019b3c:	f001 ff76 	bl	801ba2c <_Bfree>
 8019b40:	4629      	mov	r1, r5
 8019b42:	4620      	mov	r0, r4
 8019b44:	f001 ff72 	bl	801ba2c <_Bfree>
 8019b48:	e609      	b.n	801975e <_strtod_l+0x646>
 8019b4a:	f1b8 0f01 	cmp.w	r8, #1
 8019b4e:	d103      	bne.n	8019b58 <_strtod_l+0xa40>
 8019b50:	f1b9 0f00 	cmp.w	r9, #0
 8019b54:	f43f ad95 	beq.w	8019682 <_strtod_l+0x56a>
 8019b58:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8019cb0 <_strtod_l+0xb98>
 8019b5c:	4f60      	ldr	r7, [pc, #384]	; (8019ce0 <_strtod_l+0xbc8>)
 8019b5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019b62:	2600      	movs	r6, #0
 8019b64:	e7ae      	b.n	8019ac4 <_strtod_l+0x9ac>
 8019b66:	4f5f      	ldr	r7, [pc, #380]	; (8019ce4 <_strtod_l+0xbcc>)
 8019b68:	2600      	movs	r6, #0
 8019b6a:	e7a7      	b.n	8019abc <_strtod_l+0x9a4>
 8019b6c:	4b5d      	ldr	r3, [pc, #372]	; (8019ce4 <_strtod_l+0xbcc>)
 8019b6e:	4630      	mov	r0, r6
 8019b70:	4639      	mov	r1, r7
 8019b72:	2200      	movs	r2, #0
 8019b74:	f7e6 fd4a 	bl	800060c <__aeabi_dmul>
 8019b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b7a:	4606      	mov	r6, r0
 8019b7c:	460f      	mov	r7, r1
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d09c      	beq.n	8019abc <_strtod_l+0x9a4>
 8019b82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8019b86:	e79d      	b.n	8019ac4 <_strtod_l+0x9ac>
 8019b88:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8019cb8 <_strtod_l+0xba0>
 8019b8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019b90:	ec57 6b17 	vmov	r6, r7, d7
 8019b94:	e796      	b.n	8019ac4 <_strtod_l+0x9ac>
 8019b96:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8019b9a:	9b04      	ldr	r3, [sp, #16]
 8019b9c:	46ca      	mov	sl, r9
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d1c2      	bne.n	8019b28 <_strtod_l+0xa10>
 8019ba2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019ba6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019ba8:	0d1b      	lsrs	r3, r3, #20
 8019baa:	051b      	lsls	r3, r3, #20
 8019bac:	429a      	cmp	r2, r3
 8019bae:	d1bb      	bne.n	8019b28 <_strtod_l+0xa10>
 8019bb0:	4630      	mov	r0, r6
 8019bb2:	4639      	mov	r1, r7
 8019bb4:	f7e7 f88a 	bl	8000ccc <__aeabi_d2lz>
 8019bb8:	f7e6 fcfa 	bl	80005b0 <__aeabi_l2d>
 8019bbc:	4602      	mov	r2, r0
 8019bbe:	460b      	mov	r3, r1
 8019bc0:	4630      	mov	r0, r6
 8019bc2:	4639      	mov	r1, r7
 8019bc4:	f7e6 fb6a 	bl	800029c <__aeabi_dsub>
 8019bc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019bca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019bce:	ea43 0308 	orr.w	r3, r3, r8
 8019bd2:	4313      	orrs	r3, r2
 8019bd4:	4606      	mov	r6, r0
 8019bd6:	460f      	mov	r7, r1
 8019bd8:	d054      	beq.n	8019c84 <_strtod_l+0xb6c>
 8019bda:	a339      	add	r3, pc, #228	; (adr r3, 8019cc0 <_strtod_l+0xba8>)
 8019bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019be0:	f7e6 ff86 	bl	8000af0 <__aeabi_dcmplt>
 8019be4:	2800      	cmp	r0, #0
 8019be6:	f47f ace5 	bne.w	80195b4 <_strtod_l+0x49c>
 8019bea:	a337      	add	r3, pc, #220	; (adr r3, 8019cc8 <_strtod_l+0xbb0>)
 8019bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bf0:	4630      	mov	r0, r6
 8019bf2:	4639      	mov	r1, r7
 8019bf4:	f7e6 ff9a 	bl	8000b2c <__aeabi_dcmpgt>
 8019bf8:	2800      	cmp	r0, #0
 8019bfa:	d095      	beq.n	8019b28 <_strtod_l+0xa10>
 8019bfc:	e4da      	b.n	80195b4 <_strtod_l+0x49c>
 8019bfe:	9b04      	ldr	r3, [sp, #16]
 8019c00:	b333      	cbz	r3, 8019c50 <_strtod_l+0xb38>
 8019c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8019c08:	d822      	bhi.n	8019c50 <_strtod_l+0xb38>
 8019c0a:	a331      	add	r3, pc, #196	; (adr r3, 8019cd0 <_strtod_l+0xbb8>)
 8019c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c10:	4630      	mov	r0, r6
 8019c12:	4639      	mov	r1, r7
 8019c14:	f7e6 ff76 	bl	8000b04 <__aeabi_dcmple>
 8019c18:	b1a0      	cbz	r0, 8019c44 <_strtod_l+0xb2c>
 8019c1a:	4639      	mov	r1, r7
 8019c1c:	4630      	mov	r0, r6
 8019c1e:	f7e6 ffcd 	bl	8000bbc <__aeabi_d2uiz>
 8019c22:	2801      	cmp	r0, #1
 8019c24:	bf38      	it	cc
 8019c26:	2001      	movcc	r0, #1
 8019c28:	f7e6 fc76 	bl	8000518 <__aeabi_ui2d>
 8019c2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c2e:	4606      	mov	r6, r0
 8019c30:	460f      	mov	r7, r1
 8019c32:	bb23      	cbnz	r3, 8019c7e <_strtod_l+0xb66>
 8019c34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019c38:	9010      	str	r0, [sp, #64]	; 0x40
 8019c3a:	9311      	str	r3, [sp, #68]	; 0x44
 8019c3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8019c40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8019c44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019c48:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8019c4c:	1a9b      	subs	r3, r3, r2
 8019c4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019c50:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019c54:	eeb0 0a48 	vmov.f32	s0, s16
 8019c58:	eef0 0a68 	vmov.f32	s1, s17
 8019c5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019c60:	f002 fa10 	bl	801c084 <__ulp>
 8019c64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8019c68:	ec53 2b10 	vmov	r2, r3, d0
 8019c6c:	f7e6 fcce 	bl	800060c <__aeabi_dmul>
 8019c70:	ec53 2b18 	vmov	r2, r3, d8
 8019c74:	f7e6 fb14 	bl	80002a0 <__adddf3>
 8019c78:	4680      	mov	r8, r0
 8019c7a:	4689      	mov	r9, r1
 8019c7c:	e78d      	b.n	8019b9a <_strtod_l+0xa82>
 8019c7e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8019c82:	e7db      	b.n	8019c3c <_strtod_l+0xb24>
 8019c84:	a314      	add	r3, pc, #80	; (adr r3, 8019cd8 <_strtod_l+0xbc0>)
 8019c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c8a:	f7e6 ff31 	bl	8000af0 <__aeabi_dcmplt>
 8019c8e:	e7b3      	b.n	8019bf8 <_strtod_l+0xae0>
 8019c90:	2300      	movs	r3, #0
 8019c92:	930a      	str	r3, [sp, #40]	; 0x28
 8019c94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019c96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019c98:	6013      	str	r3, [r2, #0]
 8019c9a:	f7ff ba7c 	b.w	8019196 <_strtod_l+0x7e>
 8019c9e:	2a65      	cmp	r2, #101	; 0x65
 8019ca0:	f43f ab75 	beq.w	801938e <_strtod_l+0x276>
 8019ca4:	2a45      	cmp	r2, #69	; 0x45
 8019ca6:	f43f ab72 	beq.w	801938e <_strtod_l+0x276>
 8019caa:	2301      	movs	r3, #1
 8019cac:	f7ff bbaa 	b.w	8019404 <_strtod_l+0x2ec>
 8019cb0:	00000000 	.word	0x00000000
 8019cb4:	bff00000 	.word	0xbff00000
 8019cb8:	00000000 	.word	0x00000000
 8019cbc:	3ff00000 	.word	0x3ff00000
 8019cc0:	94a03595 	.word	0x94a03595
 8019cc4:	3fdfffff 	.word	0x3fdfffff
 8019cc8:	35afe535 	.word	0x35afe535
 8019ccc:	3fe00000 	.word	0x3fe00000
 8019cd0:	ffc00000 	.word	0xffc00000
 8019cd4:	41dfffff 	.word	0x41dfffff
 8019cd8:	94a03595 	.word	0x94a03595
 8019cdc:	3fcfffff 	.word	0x3fcfffff
 8019ce0:	3ff00000 	.word	0x3ff00000
 8019ce4:	3fe00000 	.word	0x3fe00000
 8019ce8:	7ff00000 	.word	0x7ff00000
 8019cec:	7fe00000 	.word	0x7fe00000
 8019cf0:	7c9fffff 	.word	0x7c9fffff
 8019cf4:	7fefffff 	.word	0x7fefffff

08019cf8 <_strtod_r>:
 8019cf8:	4b01      	ldr	r3, [pc, #4]	; (8019d00 <_strtod_r+0x8>)
 8019cfa:	f7ff ba0d 	b.w	8019118 <_strtod_l>
 8019cfe:	bf00      	nop
 8019d00:	20000038 	.word	0x20000038

08019d04 <_strtol_l.constprop.0>:
 8019d04:	2b01      	cmp	r3, #1
 8019d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d0a:	d001      	beq.n	8019d10 <_strtol_l.constprop.0+0xc>
 8019d0c:	2b24      	cmp	r3, #36	; 0x24
 8019d0e:	d906      	bls.n	8019d1e <_strtol_l.constprop.0+0x1a>
 8019d10:	f000 f918 	bl	8019f44 <__errno>
 8019d14:	2316      	movs	r3, #22
 8019d16:	6003      	str	r3, [r0, #0]
 8019d18:	2000      	movs	r0, #0
 8019d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8019e04 <_strtol_l.constprop.0+0x100>
 8019d22:	460d      	mov	r5, r1
 8019d24:	462e      	mov	r6, r5
 8019d26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019d2a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8019d2e:	f017 0708 	ands.w	r7, r7, #8
 8019d32:	d1f7      	bne.n	8019d24 <_strtol_l.constprop.0+0x20>
 8019d34:	2c2d      	cmp	r4, #45	; 0x2d
 8019d36:	d132      	bne.n	8019d9e <_strtol_l.constprop.0+0x9a>
 8019d38:	782c      	ldrb	r4, [r5, #0]
 8019d3a:	2701      	movs	r7, #1
 8019d3c:	1cb5      	adds	r5, r6, #2
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d05b      	beq.n	8019dfa <_strtol_l.constprop.0+0xf6>
 8019d42:	2b10      	cmp	r3, #16
 8019d44:	d109      	bne.n	8019d5a <_strtol_l.constprop.0+0x56>
 8019d46:	2c30      	cmp	r4, #48	; 0x30
 8019d48:	d107      	bne.n	8019d5a <_strtol_l.constprop.0+0x56>
 8019d4a:	782c      	ldrb	r4, [r5, #0]
 8019d4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019d50:	2c58      	cmp	r4, #88	; 0x58
 8019d52:	d14d      	bne.n	8019df0 <_strtol_l.constprop.0+0xec>
 8019d54:	786c      	ldrb	r4, [r5, #1]
 8019d56:	2310      	movs	r3, #16
 8019d58:	3502      	adds	r5, #2
 8019d5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019d5e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8019d62:	f04f 0e00 	mov.w	lr, #0
 8019d66:	fbb8 f9f3 	udiv	r9, r8, r3
 8019d6a:	4676      	mov	r6, lr
 8019d6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8019d70:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019d74:	f1bc 0f09 	cmp.w	ip, #9
 8019d78:	d816      	bhi.n	8019da8 <_strtol_l.constprop.0+0xa4>
 8019d7a:	4664      	mov	r4, ip
 8019d7c:	42a3      	cmp	r3, r4
 8019d7e:	dd24      	ble.n	8019dca <_strtol_l.constprop.0+0xc6>
 8019d80:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8019d84:	d008      	beq.n	8019d98 <_strtol_l.constprop.0+0x94>
 8019d86:	45b1      	cmp	r9, r6
 8019d88:	d31c      	bcc.n	8019dc4 <_strtol_l.constprop.0+0xc0>
 8019d8a:	d101      	bne.n	8019d90 <_strtol_l.constprop.0+0x8c>
 8019d8c:	45a2      	cmp	sl, r4
 8019d8e:	db19      	blt.n	8019dc4 <_strtol_l.constprop.0+0xc0>
 8019d90:	fb06 4603 	mla	r6, r6, r3, r4
 8019d94:	f04f 0e01 	mov.w	lr, #1
 8019d98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019d9c:	e7e8      	b.n	8019d70 <_strtol_l.constprop.0+0x6c>
 8019d9e:	2c2b      	cmp	r4, #43	; 0x2b
 8019da0:	bf04      	itt	eq
 8019da2:	782c      	ldrbeq	r4, [r5, #0]
 8019da4:	1cb5      	addeq	r5, r6, #2
 8019da6:	e7ca      	b.n	8019d3e <_strtol_l.constprop.0+0x3a>
 8019da8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019dac:	f1bc 0f19 	cmp.w	ip, #25
 8019db0:	d801      	bhi.n	8019db6 <_strtol_l.constprop.0+0xb2>
 8019db2:	3c37      	subs	r4, #55	; 0x37
 8019db4:	e7e2      	b.n	8019d7c <_strtol_l.constprop.0+0x78>
 8019db6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8019dba:	f1bc 0f19 	cmp.w	ip, #25
 8019dbe:	d804      	bhi.n	8019dca <_strtol_l.constprop.0+0xc6>
 8019dc0:	3c57      	subs	r4, #87	; 0x57
 8019dc2:	e7db      	b.n	8019d7c <_strtol_l.constprop.0+0x78>
 8019dc4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8019dc8:	e7e6      	b.n	8019d98 <_strtol_l.constprop.0+0x94>
 8019dca:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8019dce:	d105      	bne.n	8019ddc <_strtol_l.constprop.0+0xd8>
 8019dd0:	2322      	movs	r3, #34	; 0x22
 8019dd2:	6003      	str	r3, [r0, #0]
 8019dd4:	4646      	mov	r6, r8
 8019dd6:	b942      	cbnz	r2, 8019dea <_strtol_l.constprop.0+0xe6>
 8019dd8:	4630      	mov	r0, r6
 8019dda:	e79e      	b.n	8019d1a <_strtol_l.constprop.0+0x16>
 8019ddc:	b107      	cbz	r7, 8019de0 <_strtol_l.constprop.0+0xdc>
 8019dde:	4276      	negs	r6, r6
 8019de0:	2a00      	cmp	r2, #0
 8019de2:	d0f9      	beq.n	8019dd8 <_strtol_l.constprop.0+0xd4>
 8019de4:	f1be 0f00 	cmp.w	lr, #0
 8019de8:	d000      	beq.n	8019dec <_strtol_l.constprop.0+0xe8>
 8019dea:	1e69      	subs	r1, r5, #1
 8019dec:	6011      	str	r1, [r2, #0]
 8019dee:	e7f3      	b.n	8019dd8 <_strtol_l.constprop.0+0xd4>
 8019df0:	2430      	movs	r4, #48	; 0x30
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d1b1      	bne.n	8019d5a <_strtol_l.constprop.0+0x56>
 8019df6:	2308      	movs	r3, #8
 8019df8:	e7af      	b.n	8019d5a <_strtol_l.constprop.0+0x56>
 8019dfa:	2c30      	cmp	r4, #48	; 0x30
 8019dfc:	d0a5      	beq.n	8019d4a <_strtol_l.constprop.0+0x46>
 8019dfe:	230a      	movs	r3, #10
 8019e00:	e7ab      	b.n	8019d5a <_strtol_l.constprop.0+0x56>
 8019e02:	bf00      	nop
 8019e04:	0801fba1 	.word	0x0801fba1

08019e08 <_strtol_r>:
 8019e08:	f7ff bf7c 	b.w	8019d04 <_strtol_l.constprop.0>

08019e0c <strtol>:
 8019e0c:	4613      	mov	r3, r2
 8019e0e:	460a      	mov	r2, r1
 8019e10:	4601      	mov	r1, r0
 8019e12:	4802      	ldr	r0, [pc, #8]	; (8019e1c <strtol+0x10>)
 8019e14:	6800      	ldr	r0, [r0, #0]
 8019e16:	f7ff bf75 	b.w	8019d04 <_strtol_l.constprop.0>
 8019e1a:	bf00      	nop
 8019e1c:	200001f0 	.word	0x200001f0

08019e20 <_fwalk_sglue>:
 8019e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e24:	4607      	mov	r7, r0
 8019e26:	4688      	mov	r8, r1
 8019e28:	4614      	mov	r4, r2
 8019e2a:	2600      	movs	r6, #0
 8019e2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019e30:	f1b9 0901 	subs.w	r9, r9, #1
 8019e34:	d505      	bpl.n	8019e42 <_fwalk_sglue+0x22>
 8019e36:	6824      	ldr	r4, [r4, #0]
 8019e38:	2c00      	cmp	r4, #0
 8019e3a:	d1f7      	bne.n	8019e2c <_fwalk_sglue+0xc>
 8019e3c:	4630      	mov	r0, r6
 8019e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e42:	89ab      	ldrh	r3, [r5, #12]
 8019e44:	2b01      	cmp	r3, #1
 8019e46:	d907      	bls.n	8019e58 <_fwalk_sglue+0x38>
 8019e48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019e4c:	3301      	adds	r3, #1
 8019e4e:	d003      	beq.n	8019e58 <_fwalk_sglue+0x38>
 8019e50:	4629      	mov	r1, r5
 8019e52:	4638      	mov	r0, r7
 8019e54:	47c0      	blx	r8
 8019e56:	4306      	orrs	r6, r0
 8019e58:	3568      	adds	r5, #104	; 0x68
 8019e5a:	e7e9      	b.n	8019e30 <_fwalk_sglue+0x10>

08019e5c <strncmp>:
 8019e5c:	b510      	push	{r4, lr}
 8019e5e:	b16a      	cbz	r2, 8019e7c <strncmp+0x20>
 8019e60:	3901      	subs	r1, #1
 8019e62:	1884      	adds	r4, r0, r2
 8019e64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e68:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019e6c:	429a      	cmp	r2, r3
 8019e6e:	d103      	bne.n	8019e78 <strncmp+0x1c>
 8019e70:	42a0      	cmp	r0, r4
 8019e72:	d001      	beq.n	8019e78 <strncmp+0x1c>
 8019e74:	2a00      	cmp	r2, #0
 8019e76:	d1f5      	bne.n	8019e64 <strncmp+0x8>
 8019e78:	1ad0      	subs	r0, r2, r3
 8019e7a:	bd10      	pop	{r4, pc}
 8019e7c:	4610      	mov	r0, r2
 8019e7e:	e7fc      	b.n	8019e7a <strncmp+0x1e>

08019e80 <memset>:
 8019e80:	4402      	add	r2, r0
 8019e82:	4603      	mov	r3, r0
 8019e84:	4293      	cmp	r3, r2
 8019e86:	d100      	bne.n	8019e8a <memset+0xa>
 8019e88:	4770      	bx	lr
 8019e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8019e8e:	e7f9      	b.n	8019e84 <memset+0x4>

08019e90 <_localeconv_r>:
 8019e90:	4800      	ldr	r0, [pc, #0]	; (8019e94 <_localeconv_r+0x4>)
 8019e92:	4770      	bx	lr
 8019e94:	20000128 	.word	0x20000128

08019e98 <_reclaim_reent>:
 8019e98:	4b29      	ldr	r3, [pc, #164]	; (8019f40 <_reclaim_reent+0xa8>)
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	4283      	cmp	r3, r0
 8019e9e:	b570      	push	{r4, r5, r6, lr}
 8019ea0:	4604      	mov	r4, r0
 8019ea2:	d04b      	beq.n	8019f3c <_reclaim_reent+0xa4>
 8019ea4:	69c3      	ldr	r3, [r0, #28]
 8019ea6:	b143      	cbz	r3, 8019eba <_reclaim_reent+0x22>
 8019ea8:	68db      	ldr	r3, [r3, #12]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d144      	bne.n	8019f38 <_reclaim_reent+0xa0>
 8019eae:	69e3      	ldr	r3, [r4, #28]
 8019eb0:	6819      	ldr	r1, [r3, #0]
 8019eb2:	b111      	cbz	r1, 8019eba <_reclaim_reent+0x22>
 8019eb4:	4620      	mov	r0, r4
 8019eb6:	f000 ff09 	bl	801accc <_free_r>
 8019eba:	6961      	ldr	r1, [r4, #20]
 8019ebc:	b111      	cbz	r1, 8019ec4 <_reclaim_reent+0x2c>
 8019ebe:	4620      	mov	r0, r4
 8019ec0:	f000 ff04 	bl	801accc <_free_r>
 8019ec4:	69e1      	ldr	r1, [r4, #28]
 8019ec6:	b111      	cbz	r1, 8019ece <_reclaim_reent+0x36>
 8019ec8:	4620      	mov	r0, r4
 8019eca:	f000 feff 	bl	801accc <_free_r>
 8019ece:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019ed0:	b111      	cbz	r1, 8019ed8 <_reclaim_reent+0x40>
 8019ed2:	4620      	mov	r0, r4
 8019ed4:	f000 fefa 	bl	801accc <_free_r>
 8019ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019eda:	b111      	cbz	r1, 8019ee2 <_reclaim_reent+0x4a>
 8019edc:	4620      	mov	r0, r4
 8019ede:	f000 fef5 	bl	801accc <_free_r>
 8019ee2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019ee4:	b111      	cbz	r1, 8019eec <_reclaim_reent+0x54>
 8019ee6:	4620      	mov	r0, r4
 8019ee8:	f000 fef0 	bl	801accc <_free_r>
 8019eec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019eee:	b111      	cbz	r1, 8019ef6 <_reclaim_reent+0x5e>
 8019ef0:	4620      	mov	r0, r4
 8019ef2:	f000 feeb 	bl	801accc <_free_r>
 8019ef6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019ef8:	b111      	cbz	r1, 8019f00 <_reclaim_reent+0x68>
 8019efa:	4620      	mov	r0, r4
 8019efc:	f000 fee6 	bl	801accc <_free_r>
 8019f00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8019f02:	b111      	cbz	r1, 8019f0a <_reclaim_reent+0x72>
 8019f04:	4620      	mov	r0, r4
 8019f06:	f000 fee1 	bl	801accc <_free_r>
 8019f0a:	6a23      	ldr	r3, [r4, #32]
 8019f0c:	b1b3      	cbz	r3, 8019f3c <_reclaim_reent+0xa4>
 8019f0e:	4620      	mov	r0, r4
 8019f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f14:	4718      	bx	r3
 8019f16:	5949      	ldr	r1, [r1, r5]
 8019f18:	b941      	cbnz	r1, 8019f2c <_reclaim_reent+0x94>
 8019f1a:	3504      	adds	r5, #4
 8019f1c:	69e3      	ldr	r3, [r4, #28]
 8019f1e:	2d80      	cmp	r5, #128	; 0x80
 8019f20:	68d9      	ldr	r1, [r3, #12]
 8019f22:	d1f8      	bne.n	8019f16 <_reclaim_reent+0x7e>
 8019f24:	4620      	mov	r0, r4
 8019f26:	f000 fed1 	bl	801accc <_free_r>
 8019f2a:	e7c0      	b.n	8019eae <_reclaim_reent+0x16>
 8019f2c:	680e      	ldr	r6, [r1, #0]
 8019f2e:	4620      	mov	r0, r4
 8019f30:	f000 fecc 	bl	801accc <_free_r>
 8019f34:	4631      	mov	r1, r6
 8019f36:	e7ef      	b.n	8019f18 <_reclaim_reent+0x80>
 8019f38:	2500      	movs	r5, #0
 8019f3a:	e7ef      	b.n	8019f1c <_reclaim_reent+0x84>
 8019f3c:	bd70      	pop	{r4, r5, r6, pc}
 8019f3e:	bf00      	nop
 8019f40:	200001f0 	.word	0x200001f0

08019f44 <__errno>:
 8019f44:	4b01      	ldr	r3, [pc, #4]	; (8019f4c <__errno+0x8>)
 8019f46:	6818      	ldr	r0, [r3, #0]
 8019f48:	4770      	bx	lr
 8019f4a:	bf00      	nop
 8019f4c:	200001f0 	.word	0x200001f0

08019f50 <__libc_init_array>:
 8019f50:	b570      	push	{r4, r5, r6, lr}
 8019f52:	4d0d      	ldr	r5, [pc, #52]	; (8019f88 <__libc_init_array+0x38>)
 8019f54:	4c0d      	ldr	r4, [pc, #52]	; (8019f8c <__libc_init_array+0x3c>)
 8019f56:	1b64      	subs	r4, r4, r5
 8019f58:	10a4      	asrs	r4, r4, #2
 8019f5a:	2600      	movs	r6, #0
 8019f5c:	42a6      	cmp	r6, r4
 8019f5e:	d109      	bne.n	8019f74 <__libc_init_array+0x24>
 8019f60:	4d0b      	ldr	r5, [pc, #44]	; (8019f90 <__libc_init_array+0x40>)
 8019f62:	4c0c      	ldr	r4, [pc, #48]	; (8019f94 <__libc_init_array+0x44>)
 8019f64:	f004 fb46 	bl	801e5f4 <_init>
 8019f68:	1b64      	subs	r4, r4, r5
 8019f6a:	10a4      	asrs	r4, r4, #2
 8019f6c:	2600      	movs	r6, #0
 8019f6e:	42a6      	cmp	r6, r4
 8019f70:	d105      	bne.n	8019f7e <__libc_init_array+0x2e>
 8019f72:	bd70      	pop	{r4, r5, r6, pc}
 8019f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f78:	4798      	blx	r3
 8019f7a:	3601      	adds	r6, #1
 8019f7c:	e7ee      	b.n	8019f5c <__libc_init_array+0xc>
 8019f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019f82:	4798      	blx	r3
 8019f84:	3601      	adds	r6, #1
 8019f86:	e7f2      	b.n	8019f6e <__libc_init_array+0x1e>
 8019f88:	080203b0 	.word	0x080203b0
 8019f8c:	080203b0 	.word	0x080203b0
 8019f90:	080203b0 	.word	0x080203b0
 8019f94:	080203b4 	.word	0x080203b4

08019f98 <__retarget_lock_acquire_recursive>:
 8019f98:	4770      	bx	lr

08019f9a <__retarget_lock_release_recursive>:
 8019f9a:	4770      	bx	lr

08019f9c <memcpy>:
 8019f9c:	440a      	add	r2, r1
 8019f9e:	4291      	cmp	r1, r2
 8019fa0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019fa4:	d100      	bne.n	8019fa8 <memcpy+0xc>
 8019fa6:	4770      	bx	lr
 8019fa8:	b510      	push	{r4, lr}
 8019faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019fb2:	4291      	cmp	r1, r2
 8019fb4:	d1f9      	bne.n	8019faa <memcpy+0xe>
 8019fb6:	bd10      	pop	{r4, pc}

08019fb8 <nan>:
 8019fb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019fc0 <nan+0x8>
 8019fbc:	4770      	bx	lr
 8019fbe:	bf00      	nop
 8019fc0:	00000000 	.word	0x00000000
 8019fc4:	7ff80000 	.word	0x7ff80000

08019fc8 <nanf>:
 8019fc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019fd0 <nanf+0x8>
 8019fcc:	4770      	bx	lr
 8019fce:	bf00      	nop
 8019fd0:	7fc00000 	.word	0x7fc00000

08019fd4 <quorem>:
 8019fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fd8:	6903      	ldr	r3, [r0, #16]
 8019fda:	690c      	ldr	r4, [r1, #16]
 8019fdc:	42a3      	cmp	r3, r4
 8019fde:	4607      	mov	r7, r0
 8019fe0:	db7e      	blt.n	801a0e0 <quorem+0x10c>
 8019fe2:	3c01      	subs	r4, #1
 8019fe4:	f101 0814 	add.w	r8, r1, #20
 8019fe8:	f100 0514 	add.w	r5, r0, #20
 8019fec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019ff0:	9301      	str	r3, [sp, #4]
 8019ff2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019ffa:	3301      	adds	r3, #1
 8019ffc:	429a      	cmp	r2, r3
 8019ffe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a002:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a006:	fbb2 f6f3 	udiv	r6, r2, r3
 801a00a:	d331      	bcc.n	801a070 <quorem+0x9c>
 801a00c:	f04f 0e00 	mov.w	lr, #0
 801a010:	4640      	mov	r0, r8
 801a012:	46ac      	mov	ip, r5
 801a014:	46f2      	mov	sl, lr
 801a016:	f850 2b04 	ldr.w	r2, [r0], #4
 801a01a:	b293      	uxth	r3, r2
 801a01c:	fb06 e303 	mla	r3, r6, r3, lr
 801a020:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a024:	0c1a      	lsrs	r2, r3, #16
 801a026:	b29b      	uxth	r3, r3
 801a028:	ebaa 0303 	sub.w	r3, sl, r3
 801a02c:	f8dc a000 	ldr.w	sl, [ip]
 801a030:	fa13 f38a 	uxtah	r3, r3, sl
 801a034:	fb06 220e 	mla	r2, r6, lr, r2
 801a038:	9300      	str	r3, [sp, #0]
 801a03a:	9b00      	ldr	r3, [sp, #0]
 801a03c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a040:	b292      	uxth	r2, r2
 801a042:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a04a:	f8bd 3000 	ldrh.w	r3, [sp]
 801a04e:	4581      	cmp	r9, r0
 801a050:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a054:	f84c 3b04 	str.w	r3, [ip], #4
 801a058:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a05c:	d2db      	bcs.n	801a016 <quorem+0x42>
 801a05e:	f855 300b 	ldr.w	r3, [r5, fp]
 801a062:	b92b      	cbnz	r3, 801a070 <quorem+0x9c>
 801a064:	9b01      	ldr	r3, [sp, #4]
 801a066:	3b04      	subs	r3, #4
 801a068:	429d      	cmp	r5, r3
 801a06a:	461a      	mov	r2, r3
 801a06c:	d32c      	bcc.n	801a0c8 <quorem+0xf4>
 801a06e:	613c      	str	r4, [r7, #16]
 801a070:	4638      	mov	r0, r7
 801a072:	f001 ff61 	bl	801bf38 <__mcmp>
 801a076:	2800      	cmp	r0, #0
 801a078:	db22      	blt.n	801a0c0 <quorem+0xec>
 801a07a:	3601      	adds	r6, #1
 801a07c:	4629      	mov	r1, r5
 801a07e:	2000      	movs	r0, #0
 801a080:	f858 2b04 	ldr.w	r2, [r8], #4
 801a084:	f8d1 c000 	ldr.w	ip, [r1]
 801a088:	b293      	uxth	r3, r2
 801a08a:	1ac3      	subs	r3, r0, r3
 801a08c:	0c12      	lsrs	r2, r2, #16
 801a08e:	fa13 f38c 	uxtah	r3, r3, ip
 801a092:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a096:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a09a:	b29b      	uxth	r3, r3
 801a09c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a0a0:	45c1      	cmp	r9, r8
 801a0a2:	f841 3b04 	str.w	r3, [r1], #4
 801a0a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a0aa:	d2e9      	bcs.n	801a080 <quorem+0xac>
 801a0ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a0b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a0b4:	b922      	cbnz	r2, 801a0c0 <quorem+0xec>
 801a0b6:	3b04      	subs	r3, #4
 801a0b8:	429d      	cmp	r5, r3
 801a0ba:	461a      	mov	r2, r3
 801a0bc:	d30a      	bcc.n	801a0d4 <quorem+0x100>
 801a0be:	613c      	str	r4, [r7, #16]
 801a0c0:	4630      	mov	r0, r6
 801a0c2:	b003      	add	sp, #12
 801a0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0c8:	6812      	ldr	r2, [r2, #0]
 801a0ca:	3b04      	subs	r3, #4
 801a0cc:	2a00      	cmp	r2, #0
 801a0ce:	d1ce      	bne.n	801a06e <quorem+0x9a>
 801a0d0:	3c01      	subs	r4, #1
 801a0d2:	e7c9      	b.n	801a068 <quorem+0x94>
 801a0d4:	6812      	ldr	r2, [r2, #0]
 801a0d6:	3b04      	subs	r3, #4
 801a0d8:	2a00      	cmp	r2, #0
 801a0da:	d1f0      	bne.n	801a0be <quorem+0xea>
 801a0dc:	3c01      	subs	r4, #1
 801a0de:	e7eb      	b.n	801a0b8 <quorem+0xe4>
 801a0e0:	2000      	movs	r0, #0
 801a0e2:	e7ee      	b.n	801a0c2 <quorem+0xee>
 801a0e4:	0000      	movs	r0, r0
	...

0801a0e8 <_dtoa_r>:
 801a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0ec:	ed2d 8b04 	vpush	{d8-d9}
 801a0f0:	69c5      	ldr	r5, [r0, #28]
 801a0f2:	b093      	sub	sp, #76	; 0x4c
 801a0f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a0f8:	ec57 6b10 	vmov	r6, r7, d0
 801a0fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801a100:	9107      	str	r1, [sp, #28]
 801a102:	4604      	mov	r4, r0
 801a104:	920a      	str	r2, [sp, #40]	; 0x28
 801a106:	930d      	str	r3, [sp, #52]	; 0x34
 801a108:	b975      	cbnz	r5, 801a128 <_dtoa_r+0x40>
 801a10a:	2010      	movs	r0, #16
 801a10c:	f001 fada 	bl	801b6c4 <malloc>
 801a110:	4602      	mov	r2, r0
 801a112:	61e0      	str	r0, [r4, #28]
 801a114:	b920      	cbnz	r0, 801a120 <_dtoa_r+0x38>
 801a116:	4bae      	ldr	r3, [pc, #696]	; (801a3d0 <_dtoa_r+0x2e8>)
 801a118:	21ef      	movs	r1, #239	; 0xef
 801a11a:	48ae      	ldr	r0, [pc, #696]	; (801a3d4 <_dtoa_r+0x2ec>)
 801a11c:	f002 f9e2 	bl	801c4e4 <__assert_func>
 801a120:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a124:	6005      	str	r5, [r0, #0]
 801a126:	60c5      	str	r5, [r0, #12]
 801a128:	69e3      	ldr	r3, [r4, #28]
 801a12a:	6819      	ldr	r1, [r3, #0]
 801a12c:	b151      	cbz	r1, 801a144 <_dtoa_r+0x5c>
 801a12e:	685a      	ldr	r2, [r3, #4]
 801a130:	604a      	str	r2, [r1, #4]
 801a132:	2301      	movs	r3, #1
 801a134:	4093      	lsls	r3, r2
 801a136:	608b      	str	r3, [r1, #8]
 801a138:	4620      	mov	r0, r4
 801a13a:	f001 fc77 	bl	801ba2c <_Bfree>
 801a13e:	69e3      	ldr	r3, [r4, #28]
 801a140:	2200      	movs	r2, #0
 801a142:	601a      	str	r2, [r3, #0]
 801a144:	1e3b      	subs	r3, r7, #0
 801a146:	bfbb      	ittet	lt
 801a148:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a14c:	9303      	strlt	r3, [sp, #12]
 801a14e:	2300      	movge	r3, #0
 801a150:	2201      	movlt	r2, #1
 801a152:	bfac      	ite	ge
 801a154:	f8c8 3000 	strge.w	r3, [r8]
 801a158:	f8c8 2000 	strlt.w	r2, [r8]
 801a15c:	4b9e      	ldr	r3, [pc, #632]	; (801a3d8 <_dtoa_r+0x2f0>)
 801a15e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801a162:	ea33 0308 	bics.w	r3, r3, r8
 801a166:	d11b      	bne.n	801a1a0 <_dtoa_r+0xb8>
 801a168:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a16a:	f242 730f 	movw	r3, #9999	; 0x270f
 801a16e:	6013      	str	r3, [r2, #0]
 801a170:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801a174:	4333      	orrs	r3, r6
 801a176:	f000 8593 	beq.w	801aca0 <_dtoa_r+0xbb8>
 801a17a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a17c:	b963      	cbnz	r3, 801a198 <_dtoa_r+0xb0>
 801a17e:	4b97      	ldr	r3, [pc, #604]	; (801a3dc <_dtoa_r+0x2f4>)
 801a180:	e027      	b.n	801a1d2 <_dtoa_r+0xea>
 801a182:	4b97      	ldr	r3, [pc, #604]	; (801a3e0 <_dtoa_r+0x2f8>)
 801a184:	9300      	str	r3, [sp, #0]
 801a186:	3308      	adds	r3, #8
 801a188:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a18a:	6013      	str	r3, [r2, #0]
 801a18c:	9800      	ldr	r0, [sp, #0]
 801a18e:	b013      	add	sp, #76	; 0x4c
 801a190:	ecbd 8b04 	vpop	{d8-d9}
 801a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a198:	4b90      	ldr	r3, [pc, #576]	; (801a3dc <_dtoa_r+0x2f4>)
 801a19a:	9300      	str	r3, [sp, #0]
 801a19c:	3303      	adds	r3, #3
 801a19e:	e7f3      	b.n	801a188 <_dtoa_r+0xa0>
 801a1a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	ec51 0b17 	vmov	r0, r1, d7
 801a1aa:	eeb0 8a47 	vmov.f32	s16, s14
 801a1ae:	eef0 8a67 	vmov.f32	s17, s15
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	f7e6 fc92 	bl	8000adc <__aeabi_dcmpeq>
 801a1b8:	4681      	mov	r9, r0
 801a1ba:	b160      	cbz	r0, 801a1d6 <_dtoa_r+0xee>
 801a1bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a1be:	2301      	movs	r3, #1
 801a1c0:	6013      	str	r3, [r2, #0]
 801a1c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	f000 8568 	beq.w	801ac9a <_dtoa_r+0xbb2>
 801a1ca:	4b86      	ldr	r3, [pc, #536]	; (801a3e4 <_dtoa_r+0x2fc>)
 801a1cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a1ce:	6013      	str	r3, [r2, #0]
 801a1d0:	3b01      	subs	r3, #1
 801a1d2:	9300      	str	r3, [sp, #0]
 801a1d4:	e7da      	b.n	801a18c <_dtoa_r+0xa4>
 801a1d6:	aa10      	add	r2, sp, #64	; 0x40
 801a1d8:	a911      	add	r1, sp, #68	; 0x44
 801a1da:	4620      	mov	r0, r4
 801a1dc:	eeb0 0a48 	vmov.f32	s0, s16
 801a1e0:	eef0 0a68 	vmov.f32	s1, s17
 801a1e4:	f001 ffbe 	bl	801c164 <__d2b>
 801a1e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801a1ec:	4682      	mov	sl, r0
 801a1ee:	2d00      	cmp	r5, #0
 801a1f0:	d07f      	beq.n	801a2f2 <_dtoa_r+0x20a>
 801a1f2:	ee18 3a90 	vmov	r3, s17
 801a1f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a1fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801a1fe:	ec51 0b18 	vmov	r0, r1, d8
 801a202:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801a20a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801a20e:	4619      	mov	r1, r3
 801a210:	2200      	movs	r2, #0
 801a212:	4b75      	ldr	r3, [pc, #468]	; (801a3e8 <_dtoa_r+0x300>)
 801a214:	f7e6 f842 	bl	800029c <__aeabi_dsub>
 801a218:	a367      	add	r3, pc, #412	; (adr r3, 801a3b8 <_dtoa_r+0x2d0>)
 801a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a21e:	f7e6 f9f5 	bl	800060c <__aeabi_dmul>
 801a222:	a367      	add	r3, pc, #412	; (adr r3, 801a3c0 <_dtoa_r+0x2d8>)
 801a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a228:	f7e6 f83a 	bl	80002a0 <__adddf3>
 801a22c:	4606      	mov	r6, r0
 801a22e:	4628      	mov	r0, r5
 801a230:	460f      	mov	r7, r1
 801a232:	f7e6 f981 	bl	8000538 <__aeabi_i2d>
 801a236:	a364      	add	r3, pc, #400	; (adr r3, 801a3c8 <_dtoa_r+0x2e0>)
 801a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a23c:	f7e6 f9e6 	bl	800060c <__aeabi_dmul>
 801a240:	4602      	mov	r2, r0
 801a242:	460b      	mov	r3, r1
 801a244:	4630      	mov	r0, r6
 801a246:	4639      	mov	r1, r7
 801a248:	f7e6 f82a 	bl	80002a0 <__adddf3>
 801a24c:	4606      	mov	r6, r0
 801a24e:	460f      	mov	r7, r1
 801a250:	f7e6 fc8c 	bl	8000b6c <__aeabi_d2iz>
 801a254:	2200      	movs	r2, #0
 801a256:	4683      	mov	fp, r0
 801a258:	2300      	movs	r3, #0
 801a25a:	4630      	mov	r0, r6
 801a25c:	4639      	mov	r1, r7
 801a25e:	f7e6 fc47 	bl	8000af0 <__aeabi_dcmplt>
 801a262:	b148      	cbz	r0, 801a278 <_dtoa_r+0x190>
 801a264:	4658      	mov	r0, fp
 801a266:	f7e6 f967 	bl	8000538 <__aeabi_i2d>
 801a26a:	4632      	mov	r2, r6
 801a26c:	463b      	mov	r3, r7
 801a26e:	f7e6 fc35 	bl	8000adc <__aeabi_dcmpeq>
 801a272:	b908      	cbnz	r0, 801a278 <_dtoa_r+0x190>
 801a274:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a278:	f1bb 0f16 	cmp.w	fp, #22
 801a27c:	d857      	bhi.n	801a32e <_dtoa_r+0x246>
 801a27e:	4b5b      	ldr	r3, [pc, #364]	; (801a3ec <_dtoa_r+0x304>)
 801a280:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a288:	ec51 0b18 	vmov	r0, r1, d8
 801a28c:	f7e6 fc30 	bl	8000af0 <__aeabi_dcmplt>
 801a290:	2800      	cmp	r0, #0
 801a292:	d04e      	beq.n	801a332 <_dtoa_r+0x24a>
 801a294:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a298:	2300      	movs	r3, #0
 801a29a:	930c      	str	r3, [sp, #48]	; 0x30
 801a29c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a29e:	1b5b      	subs	r3, r3, r5
 801a2a0:	1e5a      	subs	r2, r3, #1
 801a2a2:	bf45      	ittet	mi
 801a2a4:	f1c3 0301 	rsbmi	r3, r3, #1
 801a2a8:	9305      	strmi	r3, [sp, #20]
 801a2aa:	2300      	movpl	r3, #0
 801a2ac:	2300      	movmi	r3, #0
 801a2ae:	9206      	str	r2, [sp, #24]
 801a2b0:	bf54      	ite	pl
 801a2b2:	9305      	strpl	r3, [sp, #20]
 801a2b4:	9306      	strmi	r3, [sp, #24]
 801a2b6:	f1bb 0f00 	cmp.w	fp, #0
 801a2ba:	db3c      	blt.n	801a336 <_dtoa_r+0x24e>
 801a2bc:	9b06      	ldr	r3, [sp, #24]
 801a2be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801a2c2:	445b      	add	r3, fp
 801a2c4:	9306      	str	r3, [sp, #24]
 801a2c6:	2300      	movs	r3, #0
 801a2c8:	9308      	str	r3, [sp, #32]
 801a2ca:	9b07      	ldr	r3, [sp, #28]
 801a2cc:	2b09      	cmp	r3, #9
 801a2ce:	d868      	bhi.n	801a3a2 <_dtoa_r+0x2ba>
 801a2d0:	2b05      	cmp	r3, #5
 801a2d2:	bfc4      	itt	gt
 801a2d4:	3b04      	subgt	r3, #4
 801a2d6:	9307      	strgt	r3, [sp, #28]
 801a2d8:	9b07      	ldr	r3, [sp, #28]
 801a2da:	f1a3 0302 	sub.w	r3, r3, #2
 801a2de:	bfcc      	ite	gt
 801a2e0:	2500      	movgt	r5, #0
 801a2e2:	2501      	movle	r5, #1
 801a2e4:	2b03      	cmp	r3, #3
 801a2e6:	f200 8085 	bhi.w	801a3f4 <_dtoa_r+0x30c>
 801a2ea:	e8df f003 	tbb	[pc, r3]
 801a2ee:	3b2e      	.short	0x3b2e
 801a2f0:	5839      	.short	0x5839
 801a2f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801a2f6:	441d      	add	r5, r3
 801a2f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801a2fc:	2b20      	cmp	r3, #32
 801a2fe:	bfc1      	itttt	gt
 801a300:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a304:	fa08 f803 	lslgt.w	r8, r8, r3
 801a308:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801a30c:	fa26 f303 	lsrgt.w	r3, r6, r3
 801a310:	bfd6      	itet	le
 801a312:	f1c3 0320 	rsble	r3, r3, #32
 801a316:	ea48 0003 	orrgt.w	r0, r8, r3
 801a31a:	fa06 f003 	lslle.w	r0, r6, r3
 801a31e:	f7e6 f8fb 	bl	8000518 <__aeabi_ui2d>
 801a322:	2201      	movs	r2, #1
 801a324:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801a328:	3d01      	subs	r5, #1
 801a32a:	920e      	str	r2, [sp, #56]	; 0x38
 801a32c:	e76f      	b.n	801a20e <_dtoa_r+0x126>
 801a32e:	2301      	movs	r3, #1
 801a330:	e7b3      	b.n	801a29a <_dtoa_r+0x1b2>
 801a332:	900c      	str	r0, [sp, #48]	; 0x30
 801a334:	e7b2      	b.n	801a29c <_dtoa_r+0x1b4>
 801a336:	9b05      	ldr	r3, [sp, #20]
 801a338:	eba3 030b 	sub.w	r3, r3, fp
 801a33c:	9305      	str	r3, [sp, #20]
 801a33e:	f1cb 0300 	rsb	r3, fp, #0
 801a342:	9308      	str	r3, [sp, #32]
 801a344:	2300      	movs	r3, #0
 801a346:	930b      	str	r3, [sp, #44]	; 0x2c
 801a348:	e7bf      	b.n	801a2ca <_dtoa_r+0x1e2>
 801a34a:	2300      	movs	r3, #0
 801a34c:	9309      	str	r3, [sp, #36]	; 0x24
 801a34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a350:	2b00      	cmp	r3, #0
 801a352:	dc52      	bgt.n	801a3fa <_dtoa_r+0x312>
 801a354:	2301      	movs	r3, #1
 801a356:	9301      	str	r3, [sp, #4]
 801a358:	9304      	str	r3, [sp, #16]
 801a35a:	461a      	mov	r2, r3
 801a35c:	920a      	str	r2, [sp, #40]	; 0x28
 801a35e:	e00b      	b.n	801a378 <_dtoa_r+0x290>
 801a360:	2301      	movs	r3, #1
 801a362:	e7f3      	b.n	801a34c <_dtoa_r+0x264>
 801a364:	2300      	movs	r3, #0
 801a366:	9309      	str	r3, [sp, #36]	; 0x24
 801a368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a36a:	445b      	add	r3, fp
 801a36c:	9301      	str	r3, [sp, #4]
 801a36e:	3301      	adds	r3, #1
 801a370:	2b01      	cmp	r3, #1
 801a372:	9304      	str	r3, [sp, #16]
 801a374:	bfb8      	it	lt
 801a376:	2301      	movlt	r3, #1
 801a378:	69e0      	ldr	r0, [r4, #28]
 801a37a:	2100      	movs	r1, #0
 801a37c:	2204      	movs	r2, #4
 801a37e:	f102 0614 	add.w	r6, r2, #20
 801a382:	429e      	cmp	r6, r3
 801a384:	d93d      	bls.n	801a402 <_dtoa_r+0x31a>
 801a386:	6041      	str	r1, [r0, #4]
 801a388:	4620      	mov	r0, r4
 801a38a:	f001 fb0f 	bl	801b9ac <_Balloc>
 801a38e:	9000      	str	r0, [sp, #0]
 801a390:	2800      	cmp	r0, #0
 801a392:	d139      	bne.n	801a408 <_dtoa_r+0x320>
 801a394:	4b16      	ldr	r3, [pc, #88]	; (801a3f0 <_dtoa_r+0x308>)
 801a396:	4602      	mov	r2, r0
 801a398:	f240 11af 	movw	r1, #431	; 0x1af
 801a39c:	e6bd      	b.n	801a11a <_dtoa_r+0x32>
 801a39e:	2301      	movs	r3, #1
 801a3a0:	e7e1      	b.n	801a366 <_dtoa_r+0x27e>
 801a3a2:	2501      	movs	r5, #1
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	9307      	str	r3, [sp, #28]
 801a3a8:	9509      	str	r5, [sp, #36]	; 0x24
 801a3aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a3ae:	9301      	str	r3, [sp, #4]
 801a3b0:	9304      	str	r3, [sp, #16]
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	2312      	movs	r3, #18
 801a3b6:	e7d1      	b.n	801a35c <_dtoa_r+0x274>
 801a3b8:	636f4361 	.word	0x636f4361
 801a3bc:	3fd287a7 	.word	0x3fd287a7
 801a3c0:	8b60c8b3 	.word	0x8b60c8b3
 801a3c4:	3fc68a28 	.word	0x3fc68a28
 801a3c8:	509f79fb 	.word	0x509f79fb
 801a3cc:	3fd34413 	.word	0x3fd34413
 801a3d0:	0801fcae 	.word	0x0801fcae
 801a3d4:	0801fcc5 	.word	0x0801fcc5
 801a3d8:	7ff00000 	.word	0x7ff00000
 801a3dc:	0801fcaa 	.word	0x0801fcaa
 801a3e0:	0801fca1 	.word	0x0801fca1
 801a3e4:	0801fb1d 	.word	0x0801fb1d
 801a3e8:	3ff80000 	.word	0x3ff80000
 801a3ec:	0801fe20 	.word	0x0801fe20
 801a3f0:	0801fd1d 	.word	0x0801fd1d
 801a3f4:	2301      	movs	r3, #1
 801a3f6:	9309      	str	r3, [sp, #36]	; 0x24
 801a3f8:	e7d7      	b.n	801a3aa <_dtoa_r+0x2c2>
 801a3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3fc:	9301      	str	r3, [sp, #4]
 801a3fe:	9304      	str	r3, [sp, #16]
 801a400:	e7ba      	b.n	801a378 <_dtoa_r+0x290>
 801a402:	3101      	adds	r1, #1
 801a404:	0052      	lsls	r2, r2, #1
 801a406:	e7ba      	b.n	801a37e <_dtoa_r+0x296>
 801a408:	69e3      	ldr	r3, [r4, #28]
 801a40a:	9a00      	ldr	r2, [sp, #0]
 801a40c:	601a      	str	r2, [r3, #0]
 801a40e:	9b04      	ldr	r3, [sp, #16]
 801a410:	2b0e      	cmp	r3, #14
 801a412:	f200 80a8 	bhi.w	801a566 <_dtoa_r+0x47e>
 801a416:	2d00      	cmp	r5, #0
 801a418:	f000 80a5 	beq.w	801a566 <_dtoa_r+0x47e>
 801a41c:	f1bb 0f00 	cmp.w	fp, #0
 801a420:	dd38      	ble.n	801a494 <_dtoa_r+0x3ac>
 801a422:	4bc0      	ldr	r3, [pc, #768]	; (801a724 <_dtoa_r+0x63c>)
 801a424:	f00b 020f 	and.w	r2, fp, #15
 801a428:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a42c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a430:	e9d3 6700 	ldrd	r6, r7, [r3]
 801a434:	ea4f 182b 	mov.w	r8, fp, asr #4
 801a438:	d019      	beq.n	801a46e <_dtoa_r+0x386>
 801a43a:	4bbb      	ldr	r3, [pc, #748]	; (801a728 <_dtoa_r+0x640>)
 801a43c:	ec51 0b18 	vmov	r0, r1, d8
 801a440:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801a444:	f7e6 fa0c 	bl	8000860 <__aeabi_ddiv>
 801a448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a44c:	f008 080f 	and.w	r8, r8, #15
 801a450:	2503      	movs	r5, #3
 801a452:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801a728 <_dtoa_r+0x640>
 801a456:	f1b8 0f00 	cmp.w	r8, #0
 801a45a:	d10a      	bne.n	801a472 <_dtoa_r+0x38a>
 801a45c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a460:	4632      	mov	r2, r6
 801a462:	463b      	mov	r3, r7
 801a464:	f7e6 f9fc 	bl	8000860 <__aeabi_ddiv>
 801a468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a46c:	e02b      	b.n	801a4c6 <_dtoa_r+0x3de>
 801a46e:	2502      	movs	r5, #2
 801a470:	e7ef      	b.n	801a452 <_dtoa_r+0x36a>
 801a472:	f018 0f01 	tst.w	r8, #1
 801a476:	d008      	beq.n	801a48a <_dtoa_r+0x3a2>
 801a478:	4630      	mov	r0, r6
 801a47a:	4639      	mov	r1, r7
 801a47c:	e9d9 2300 	ldrd	r2, r3, [r9]
 801a480:	f7e6 f8c4 	bl	800060c <__aeabi_dmul>
 801a484:	3501      	adds	r5, #1
 801a486:	4606      	mov	r6, r0
 801a488:	460f      	mov	r7, r1
 801a48a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a48e:	f109 0908 	add.w	r9, r9, #8
 801a492:	e7e0      	b.n	801a456 <_dtoa_r+0x36e>
 801a494:	f000 809f 	beq.w	801a5d6 <_dtoa_r+0x4ee>
 801a498:	f1cb 0600 	rsb	r6, fp, #0
 801a49c:	4ba1      	ldr	r3, [pc, #644]	; (801a724 <_dtoa_r+0x63c>)
 801a49e:	4fa2      	ldr	r7, [pc, #648]	; (801a728 <_dtoa_r+0x640>)
 801a4a0:	f006 020f 	and.w	r2, r6, #15
 801a4a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ac:	ec51 0b18 	vmov	r0, r1, d8
 801a4b0:	f7e6 f8ac 	bl	800060c <__aeabi_dmul>
 801a4b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a4b8:	1136      	asrs	r6, r6, #4
 801a4ba:	2300      	movs	r3, #0
 801a4bc:	2502      	movs	r5, #2
 801a4be:	2e00      	cmp	r6, #0
 801a4c0:	d17e      	bne.n	801a5c0 <_dtoa_r+0x4d8>
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d1d0      	bne.n	801a468 <_dtoa_r+0x380>
 801a4c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	f000 8084 	beq.w	801a5da <_dtoa_r+0x4f2>
 801a4d2:	4b96      	ldr	r3, [pc, #600]	; (801a72c <_dtoa_r+0x644>)
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	4640      	mov	r0, r8
 801a4d8:	4649      	mov	r1, r9
 801a4da:	f7e6 fb09 	bl	8000af0 <__aeabi_dcmplt>
 801a4de:	2800      	cmp	r0, #0
 801a4e0:	d07b      	beq.n	801a5da <_dtoa_r+0x4f2>
 801a4e2:	9b04      	ldr	r3, [sp, #16]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d078      	beq.n	801a5da <_dtoa_r+0x4f2>
 801a4e8:	9b01      	ldr	r3, [sp, #4]
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	dd39      	ble.n	801a562 <_dtoa_r+0x47a>
 801a4ee:	4b90      	ldr	r3, [pc, #576]	; (801a730 <_dtoa_r+0x648>)
 801a4f0:	2200      	movs	r2, #0
 801a4f2:	4640      	mov	r0, r8
 801a4f4:	4649      	mov	r1, r9
 801a4f6:	f7e6 f889 	bl	800060c <__aeabi_dmul>
 801a4fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a4fe:	9e01      	ldr	r6, [sp, #4]
 801a500:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801a504:	3501      	adds	r5, #1
 801a506:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801a50a:	4628      	mov	r0, r5
 801a50c:	f7e6 f814 	bl	8000538 <__aeabi_i2d>
 801a510:	4642      	mov	r2, r8
 801a512:	464b      	mov	r3, r9
 801a514:	f7e6 f87a 	bl	800060c <__aeabi_dmul>
 801a518:	4b86      	ldr	r3, [pc, #536]	; (801a734 <_dtoa_r+0x64c>)
 801a51a:	2200      	movs	r2, #0
 801a51c:	f7e5 fec0 	bl	80002a0 <__adddf3>
 801a520:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801a524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a528:	9303      	str	r3, [sp, #12]
 801a52a:	2e00      	cmp	r6, #0
 801a52c:	d158      	bne.n	801a5e0 <_dtoa_r+0x4f8>
 801a52e:	4b82      	ldr	r3, [pc, #520]	; (801a738 <_dtoa_r+0x650>)
 801a530:	2200      	movs	r2, #0
 801a532:	4640      	mov	r0, r8
 801a534:	4649      	mov	r1, r9
 801a536:	f7e5 feb1 	bl	800029c <__aeabi_dsub>
 801a53a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a53e:	4680      	mov	r8, r0
 801a540:	4689      	mov	r9, r1
 801a542:	f7e6 faf3 	bl	8000b2c <__aeabi_dcmpgt>
 801a546:	2800      	cmp	r0, #0
 801a548:	f040 8296 	bne.w	801aa78 <_dtoa_r+0x990>
 801a54c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801a550:	4640      	mov	r0, r8
 801a552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a556:	4649      	mov	r1, r9
 801a558:	f7e6 faca 	bl	8000af0 <__aeabi_dcmplt>
 801a55c:	2800      	cmp	r0, #0
 801a55e:	f040 8289 	bne.w	801aa74 <_dtoa_r+0x98c>
 801a562:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a566:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a568:	2b00      	cmp	r3, #0
 801a56a:	f2c0 814e 	blt.w	801a80a <_dtoa_r+0x722>
 801a56e:	f1bb 0f0e 	cmp.w	fp, #14
 801a572:	f300 814a 	bgt.w	801a80a <_dtoa_r+0x722>
 801a576:	4b6b      	ldr	r3, [pc, #428]	; (801a724 <_dtoa_r+0x63c>)
 801a578:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a57c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a582:	2b00      	cmp	r3, #0
 801a584:	f280 80dc 	bge.w	801a740 <_dtoa_r+0x658>
 801a588:	9b04      	ldr	r3, [sp, #16]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	f300 80d8 	bgt.w	801a740 <_dtoa_r+0x658>
 801a590:	f040 826f 	bne.w	801aa72 <_dtoa_r+0x98a>
 801a594:	4b68      	ldr	r3, [pc, #416]	; (801a738 <_dtoa_r+0x650>)
 801a596:	2200      	movs	r2, #0
 801a598:	4640      	mov	r0, r8
 801a59a:	4649      	mov	r1, r9
 801a59c:	f7e6 f836 	bl	800060c <__aeabi_dmul>
 801a5a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a5a4:	f7e6 fab8 	bl	8000b18 <__aeabi_dcmpge>
 801a5a8:	9e04      	ldr	r6, [sp, #16]
 801a5aa:	4637      	mov	r7, r6
 801a5ac:	2800      	cmp	r0, #0
 801a5ae:	f040 8245 	bne.w	801aa3c <_dtoa_r+0x954>
 801a5b2:	9d00      	ldr	r5, [sp, #0]
 801a5b4:	2331      	movs	r3, #49	; 0x31
 801a5b6:	f805 3b01 	strb.w	r3, [r5], #1
 801a5ba:	f10b 0b01 	add.w	fp, fp, #1
 801a5be:	e241      	b.n	801aa44 <_dtoa_r+0x95c>
 801a5c0:	07f2      	lsls	r2, r6, #31
 801a5c2:	d505      	bpl.n	801a5d0 <_dtoa_r+0x4e8>
 801a5c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a5c8:	f7e6 f820 	bl	800060c <__aeabi_dmul>
 801a5cc:	3501      	adds	r5, #1
 801a5ce:	2301      	movs	r3, #1
 801a5d0:	1076      	asrs	r6, r6, #1
 801a5d2:	3708      	adds	r7, #8
 801a5d4:	e773      	b.n	801a4be <_dtoa_r+0x3d6>
 801a5d6:	2502      	movs	r5, #2
 801a5d8:	e775      	b.n	801a4c6 <_dtoa_r+0x3de>
 801a5da:	9e04      	ldr	r6, [sp, #16]
 801a5dc:	465f      	mov	r7, fp
 801a5de:	e792      	b.n	801a506 <_dtoa_r+0x41e>
 801a5e0:	9900      	ldr	r1, [sp, #0]
 801a5e2:	4b50      	ldr	r3, [pc, #320]	; (801a724 <_dtoa_r+0x63c>)
 801a5e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a5e8:	4431      	add	r1, r6
 801a5ea:	9102      	str	r1, [sp, #8]
 801a5ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a5ee:	eeb0 9a47 	vmov.f32	s18, s14
 801a5f2:	eef0 9a67 	vmov.f32	s19, s15
 801a5f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801a5fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a5fe:	2900      	cmp	r1, #0
 801a600:	d044      	beq.n	801a68c <_dtoa_r+0x5a4>
 801a602:	494e      	ldr	r1, [pc, #312]	; (801a73c <_dtoa_r+0x654>)
 801a604:	2000      	movs	r0, #0
 801a606:	f7e6 f92b 	bl	8000860 <__aeabi_ddiv>
 801a60a:	ec53 2b19 	vmov	r2, r3, d9
 801a60e:	f7e5 fe45 	bl	800029c <__aeabi_dsub>
 801a612:	9d00      	ldr	r5, [sp, #0]
 801a614:	ec41 0b19 	vmov	d9, r0, r1
 801a618:	4649      	mov	r1, r9
 801a61a:	4640      	mov	r0, r8
 801a61c:	f7e6 faa6 	bl	8000b6c <__aeabi_d2iz>
 801a620:	4606      	mov	r6, r0
 801a622:	f7e5 ff89 	bl	8000538 <__aeabi_i2d>
 801a626:	4602      	mov	r2, r0
 801a628:	460b      	mov	r3, r1
 801a62a:	4640      	mov	r0, r8
 801a62c:	4649      	mov	r1, r9
 801a62e:	f7e5 fe35 	bl	800029c <__aeabi_dsub>
 801a632:	3630      	adds	r6, #48	; 0x30
 801a634:	f805 6b01 	strb.w	r6, [r5], #1
 801a638:	ec53 2b19 	vmov	r2, r3, d9
 801a63c:	4680      	mov	r8, r0
 801a63e:	4689      	mov	r9, r1
 801a640:	f7e6 fa56 	bl	8000af0 <__aeabi_dcmplt>
 801a644:	2800      	cmp	r0, #0
 801a646:	d164      	bne.n	801a712 <_dtoa_r+0x62a>
 801a648:	4642      	mov	r2, r8
 801a64a:	464b      	mov	r3, r9
 801a64c:	4937      	ldr	r1, [pc, #220]	; (801a72c <_dtoa_r+0x644>)
 801a64e:	2000      	movs	r0, #0
 801a650:	f7e5 fe24 	bl	800029c <__aeabi_dsub>
 801a654:	ec53 2b19 	vmov	r2, r3, d9
 801a658:	f7e6 fa4a 	bl	8000af0 <__aeabi_dcmplt>
 801a65c:	2800      	cmp	r0, #0
 801a65e:	f040 80b6 	bne.w	801a7ce <_dtoa_r+0x6e6>
 801a662:	9b02      	ldr	r3, [sp, #8]
 801a664:	429d      	cmp	r5, r3
 801a666:	f43f af7c 	beq.w	801a562 <_dtoa_r+0x47a>
 801a66a:	4b31      	ldr	r3, [pc, #196]	; (801a730 <_dtoa_r+0x648>)
 801a66c:	ec51 0b19 	vmov	r0, r1, d9
 801a670:	2200      	movs	r2, #0
 801a672:	f7e5 ffcb 	bl	800060c <__aeabi_dmul>
 801a676:	4b2e      	ldr	r3, [pc, #184]	; (801a730 <_dtoa_r+0x648>)
 801a678:	ec41 0b19 	vmov	d9, r0, r1
 801a67c:	2200      	movs	r2, #0
 801a67e:	4640      	mov	r0, r8
 801a680:	4649      	mov	r1, r9
 801a682:	f7e5 ffc3 	bl	800060c <__aeabi_dmul>
 801a686:	4680      	mov	r8, r0
 801a688:	4689      	mov	r9, r1
 801a68a:	e7c5      	b.n	801a618 <_dtoa_r+0x530>
 801a68c:	ec51 0b17 	vmov	r0, r1, d7
 801a690:	f7e5 ffbc 	bl	800060c <__aeabi_dmul>
 801a694:	9b02      	ldr	r3, [sp, #8]
 801a696:	9d00      	ldr	r5, [sp, #0]
 801a698:	930f      	str	r3, [sp, #60]	; 0x3c
 801a69a:	ec41 0b19 	vmov	d9, r0, r1
 801a69e:	4649      	mov	r1, r9
 801a6a0:	4640      	mov	r0, r8
 801a6a2:	f7e6 fa63 	bl	8000b6c <__aeabi_d2iz>
 801a6a6:	4606      	mov	r6, r0
 801a6a8:	f7e5 ff46 	bl	8000538 <__aeabi_i2d>
 801a6ac:	3630      	adds	r6, #48	; 0x30
 801a6ae:	4602      	mov	r2, r0
 801a6b0:	460b      	mov	r3, r1
 801a6b2:	4640      	mov	r0, r8
 801a6b4:	4649      	mov	r1, r9
 801a6b6:	f7e5 fdf1 	bl	800029c <__aeabi_dsub>
 801a6ba:	f805 6b01 	strb.w	r6, [r5], #1
 801a6be:	9b02      	ldr	r3, [sp, #8]
 801a6c0:	429d      	cmp	r5, r3
 801a6c2:	4680      	mov	r8, r0
 801a6c4:	4689      	mov	r9, r1
 801a6c6:	f04f 0200 	mov.w	r2, #0
 801a6ca:	d124      	bne.n	801a716 <_dtoa_r+0x62e>
 801a6cc:	4b1b      	ldr	r3, [pc, #108]	; (801a73c <_dtoa_r+0x654>)
 801a6ce:	ec51 0b19 	vmov	r0, r1, d9
 801a6d2:	f7e5 fde5 	bl	80002a0 <__adddf3>
 801a6d6:	4602      	mov	r2, r0
 801a6d8:	460b      	mov	r3, r1
 801a6da:	4640      	mov	r0, r8
 801a6dc:	4649      	mov	r1, r9
 801a6de:	f7e6 fa25 	bl	8000b2c <__aeabi_dcmpgt>
 801a6e2:	2800      	cmp	r0, #0
 801a6e4:	d173      	bne.n	801a7ce <_dtoa_r+0x6e6>
 801a6e6:	ec53 2b19 	vmov	r2, r3, d9
 801a6ea:	4914      	ldr	r1, [pc, #80]	; (801a73c <_dtoa_r+0x654>)
 801a6ec:	2000      	movs	r0, #0
 801a6ee:	f7e5 fdd5 	bl	800029c <__aeabi_dsub>
 801a6f2:	4602      	mov	r2, r0
 801a6f4:	460b      	mov	r3, r1
 801a6f6:	4640      	mov	r0, r8
 801a6f8:	4649      	mov	r1, r9
 801a6fa:	f7e6 f9f9 	bl	8000af0 <__aeabi_dcmplt>
 801a6fe:	2800      	cmp	r0, #0
 801a700:	f43f af2f 	beq.w	801a562 <_dtoa_r+0x47a>
 801a704:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801a706:	1e6b      	subs	r3, r5, #1
 801a708:	930f      	str	r3, [sp, #60]	; 0x3c
 801a70a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a70e:	2b30      	cmp	r3, #48	; 0x30
 801a710:	d0f8      	beq.n	801a704 <_dtoa_r+0x61c>
 801a712:	46bb      	mov	fp, r7
 801a714:	e04a      	b.n	801a7ac <_dtoa_r+0x6c4>
 801a716:	4b06      	ldr	r3, [pc, #24]	; (801a730 <_dtoa_r+0x648>)
 801a718:	f7e5 ff78 	bl	800060c <__aeabi_dmul>
 801a71c:	4680      	mov	r8, r0
 801a71e:	4689      	mov	r9, r1
 801a720:	e7bd      	b.n	801a69e <_dtoa_r+0x5b6>
 801a722:	bf00      	nop
 801a724:	0801fe20 	.word	0x0801fe20
 801a728:	0801fdf8 	.word	0x0801fdf8
 801a72c:	3ff00000 	.word	0x3ff00000
 801a730:	40240000 	.word	0x40240000
 801a734:	401c0000 	.word	0x401c0000
 801a738:	40140000 	.word	0x40140000
 801a73c:	3fe00000 	.word	0x3fe00000
 801a740:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a744:	9d00      	ldr	r5, [sp, #0]
 801a746:	4642      	mov	r2, r8
 801a748:	464b      	mov	r3, r9
 801a74a:	4630      	mov	r0, r6
 801a74c:	4639      	mov	r1, r7
 801a74e:	f7e6 f887 	bl	8000860 <__aeabi_ddiv>
 801a752:	f7e6 fa0b 	bl	8000b6c <__aeabi_d2iz>
 801a756:	9001      	str	r0, [sp, #4]
 801a758:	f7e5 feee 	bl	8000538 <__aeabi_i2d>
 801a75c:	4642      	mov	r2, r8
 801a75e:	464b      	mov	r3, r9
 801a760:	f7e5 ff54 	bl	800060c <__aeabi_dmul>
 801a764:	4602      	mov	r2, r0
 801a766:	460b      	mov	r3, r1
 801a768:	4630      	mov	r0, r6
 801a76a:	4639      	mov	r1, r7
 801a76c:	f7e5 fd96 	bl	800029c <__aeabi_dsub>
 801a770:	9e01      	ldr	r6, [sp, #4]
 801a772:	9f04      	ldr	r7, [sp, #16]
 801a774:	3630      	adds	r6, #48	; 0x30
 801a776:	f805 6b01 	strb.w	r6, [r5], #1
 801a77a:	9e00      	ldr	r6, [sp, #0]
 801a77c:	1bae      	subs	r6, r5, r6
 801a77e:	42b7      	cmp	r7, r6
 801a780:	4602      	mov	r2, r0
 801a782:	460b      	mov	r3, r1
 801a784:	d134      	bne.n	801a7f0 <_dtoa_r+0x708>
 801a786:	f7e5 fd8b 	bl	80002a0 <__adddf3>
 801a78a:	4642      	mov	r2, r8
 801a78c:	464b      	mov	r3, r9
 801a78e:	4606      	mov	r6, r0
 801a790:	460f      	mov	r7, r1
 801a792:	f7e6 f9cb 	bl	8000b2c <__aeabi_dcmpgt>
 801a796:	b9c8      	cbnz	r0, 801a7cc <_dtoa_r+0x6e4>
 801a798:	4642      	mov	r2, r8
 801a79a:	464b      	mov	r3, r9
 801a79c:	4630      	mov	r0, r6
 801a79e:	4639      	mov	r1, r7
 801a7a0:	f7e6 f99c 	bl	8000adc <__aeabi_dcmpeq>
 801a7a4:	b110      	cbz	r0, 801a7ac <_dtoa_r+0x6c4>
 801a7a6:	9b01      	ldr	r3, [sp, #4]
 801a7a8:	07db      	lsls	r3, r3, #31
 801a7aa:	d40f      	bmi.n	801a7cc <_dtoa_r+0x6e4>
 801a7ac:	4651      	mov	r1, sl
 801a7ae:	4620      	mov	r0, r4
 801a7b0:	f001 f93c 	bl	801ba2c <_Bfree>
 801a7b4:	2300      	movs	r3, #0
 801a7b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a7b8:	702b      	strb	r3, [r5, #0]
 801a7ba:	f10b 0301 	add.w	r3, fp, #1
 801a7be:	6013      	str	r3, [r2, #0]
 801a7c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	f43f ace2 	beq.w	801a18c <_dtoa_r+0xa4>
 801a7c8:	601d      	str	r5, [r3, #0]
 801a7ca:	e4df      	b.n	801a18c <_dtoa_r+0xa4>
 801a7cc:	465f      	mov	r7, fp
 801a7ce:	462b      	mov	r3, r5
 801a7d0:	461d      	mov	r5, r3
 801a7d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a7d6:	2a39      	cmp	r2, #57	; 0x39
 801a7d8:	d106      	bne.n	801a7e8 <_dtoa_r+0x700>
 801a7da:	9a00      	ldr	r2, [sp, #0]
 801a7dc:	429a      	cmp	r2, r3
 801a7de:	d1f7      	bne.n	801a7d0 <_dtoa_r+0x6e8>
 801a7e0:	9900      	ldr	r1, [sp, #0]
 801a7e2:	2230      	movs	r2, #48	; 0x30
 801a7e4:	3701      	adds	r7, #1
 801a7e6:	700a      	strb	r2, [r1, #0]
 801a7e8:	781a      	ldrb	r2, [r3, #0]
 801a7ea:	3201      	adds	r2, #1
 801a7ec:	701a      	strb	r2, [r3, #0]
 801a7ee:	e790      	b.n	801a712 <_dtoa_r+0x62a>
 801a7f0:	4ba3      	ldr	r3, [pc, #652]	; (801aa80 <_dtoa_r+0x998>)
 801a7f2:	2200      	movs	r2, #0
 801a7f4:	f7e5 ff0a 	bl	800060c <__aeabi_dmul>
 801a7f8:	2200      	movs	r2, #0
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	4606      	mov	r6, r0
 801a7fe:	460f      	mov	r7, r1
 801a800:	f7e6 f96c 	bl	8000adc <__aeabi_dcmpeq>
 801a804:	2800      	cmp	r0, #0
 801a806:	d09e      	beq.n	801a746 <_dtoa_r+0x65e>
 801a808:	e7d0      	b.n	801a7ac <_dtoa_r+0x6c4>
 801a80a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a80c:	2a00      	cmp	r2, #0
 801a80e:	f000 80ca 	beq.w	801a9a6 <_dtoa_r+0x8be>
 801a812:	9a07      	ldr	r2, [sp, #28]
 801a814:	2a01      	cmp	r2, #1
 801a816:	f300 80ad 	bgt.w	801a974 <_dtoa_r+0x88c>
 801a81a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a81c:	2a00      	cmp	r2, #0
 801a81e:	f000 80a5 	beq.w	801a96c <_dtoa_r+0x884>
 801a822:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a826:	9e08      	ldr	r6, [sp, #32]
 801a828:	9d05      	ldr	r5, [sp, #20]
 801a82a:	9a05      	ldr	r2, [sp, #20]
 801a82c:	441a      	add	r2, r3
 801a82e:	9205      	str	r2, [sp, #20]
 801a830:	9a06      	ldr	r2, [sp, #24]
 801a832:	2101      	movs	r1, #1
 801a834:	441a      	add	r2, r3
 801a836:	4620      	mov	r0, r4
 801a838:	9206      	str	r2, [sp, #24]
 801a83a:	f001 f9f7 	bl	801bc2c <__i2b>
 801a83e:	4607      	mov	r7, r0
 801a840:	b165      	cbz	r5, 801a85c <_dtoa_r+0x774>
 801a842:	9b06      	ldr	r3, [sp, #24]
 801a844:	2b00      	cmp	r3, #0
 801a846:	dd09      	ble.n	801a85c <_dtoa_r+0x774>
 801a848:	42ab      	cmp	r3, r5
 801a84a:	9a05      	ldr	r2, [sp, #20]
 801a84c:	bfa8      	it	ge
 801a84e:	462b      	movge	r3, r5
 801a850:	1ad2      	subs	r2, r2, r3
 801a852:	9205      	str	r2, [sp, #20]
 801a854:	9a06      	ldr	r2, [sp, #24]
 801a856:	1aed      	subs	r5, r5, r3
 801a858:	1ad3      	subs	r3, r2, r3
 801a85a:	9306      	str	r3, [sp, #24]
 801a85c:	9b08      	ldr	r3, [sp, #32]
 801a85e:	b1f3      	cbz	r3, 801a89e <_dtoa_r+0x7b6>
 801a860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a862:	2b00      	cmp	r3, #0
 801a864:	f000 80a3 	beq.w	801a9ae <_dtoa_r+0x8c6>
 801a868:	2e00      	cmp	r6, #0
 801a86a:	dd10      	ble.n	801a88e <_dtoa_r+0x7a6>
 801a86c:	4639      	mov	r1, r7
 801a86e:	4632      	mov	r2, r6
 801a870:	4620      	mov	r0, r4
 801a872:	f001 fa9b 	bl	801bdac <__pow5mult>
 801a876:	4652      	mov	r2, sl
 801a878:	4601      	mov	r1, r0
 801a87a:	4607      	mov	r7, r0
 801a87c:	4620      	mov	r0, r4
 801a87e:	f001 f9eb 	bl	801bc58 <__multiply>
 801a882:	4651      	mov	r1, sl
 801a884:	4680      	mov	r8, r0
 801a886:	4620      	mov	r0, r4
 801a888:	f001 f8d0 	bl	801ba2c <_Bfree>
 801a88c:	46c2      	mov	sl, r8
 801a88e:	9b08      	ldr	r3, [sp, #32]
 801a890:	1b9a      	subs	r2, r3, r6
 801a892:	d004      	beq.n	801a89e <_dtoa_r+0x7b6>
 801a894:	4651      	mov	r1, sl
 801a896:	4620      	mov	r0, r4
 801a898:	f001 fa88 	bl	801bdac <__pow5mult>
 801a89c:	4682      	mov	sl, r0
 801a89e:	2101      	movs	r1, #1
 801a8a0:	4620      	mov	r0, r4
 801a8a2:	f001 f9c3 	bl	801bc2c <__i2b>
 801a8a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	4606      	mov	r6, r0
 801a8ac:	f340 8081 	ble.w	801a9b2 <_dtoa_r+0x8ca>
 801a8b0:	461a      	mov	r2, r3
 801a8b2:	4601      	mov	r1, r0
 801a8b4:	4620      	mov	r0, r4
 801a8b6:	f001 fa79 	bl	801bdac <__pow5mult>
 801a8ba:	9b07      	ldr	r3, [sp, #28]
 801a8bc:	2b01      	cmp	r3, #1
 801a8be:	4606      	mov	r6, r0
 801a8c0:	dd7a      	ble.n	801a9b8 <_dtoa_r+0x8d0>
 801a8c2:	f04f 0800 	mov.w	r8, #0
 801a8c6:	6933      	ldr	r3, [r6, #16]
 801a8c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a8cc:	6918      	ldr	r0, [r3, #16]
 801a8ce:	f001 f95f 	bl	801bb90 <__hi0bits>
 801a8d2:	f1c0 0020 	rsb	r0, r0, #32
 801a8d6:	9b06      	ldr	r3, [sp, #24]
 801a8d8:	4418      	add	r0, r3
 801a8da:	f010 001f 	ands.w	r0, r0, #31
 801a8de:	f000 8094 	beq.w	801aa0a <_dtoa_r+0x922>
 801a8e2:	f1c0 0320 	rsb	r3, r0, #32
 801a8e6:	2b04      	cmp	r3, #4
 801a8e8:	f340 8085 	ble.w	801a9f6 <_dtoa_r+0x90e>
 801a8ec:	9b05      	ldr	r3, [sp, #20]
 801a8ee:	f1c0 001c 	rsb	r0, r0, #28
 801a8f2:	4403      	add	r3, r0
 801a8f4:	9305      	str	r3, [sp, #20]
 801a8f6:	9b06      	ldr	r3, [sp, #24]
 801a8f8:	4403      	add	r3, r0
 801a8fa:	4405      	add	r5, r0
 801a8fc:	9306      	str	r3, [sp, #24]
 801a8fe:	9b05      	ldr	r3, [sp, #20]
 801a900:	2b00      	cmp	r3, #0
 801a902:	dd05      	ble.n	801a910 <_dtoa_r+0x828>
 801a904:	4651      	mov	r1, sl
 801a906:	461a      	mov	r2, r3
 801a908:	4620      	mov	r0, r4
 801a90a:	f001 faa9 	bl	801be60 <__lshift>
 801a90e:	4682      	mov	sl, r0
 801a910:	9b06      	ldr	r3, [sp, #24]
 801a912:	2b00      	cmp	r3, #0
 801a914:	dd05      	ble.n	801a922 <_dtoa_r+0x83a>
 801a916:	4631      	mov	r1, r6
 801a918:	461a      	mov	r2, r3
 801a91a:	4620      	mov	r0, r4
 801a91c:	f001 faa0 	bl	801be60 <__lshift>
 801a920:	4606      	mov	r6, r0
 801a922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a924:	2b00      	cmp	r3, #0
 801a926:	d072      	beq.n	801aa0e <_dtoa_r+0x926>
 801a928:	4631      	mov	r1, r6
 801a92a:	4650      	mov	r0, sl
 801a92c:	f001 fb04 	bl	801bf38 <__mcmp>
 801a930:	2800      	cmp	r0, #0
 801a932:	da6c      	bge.n	801aa0e <_dtoa_r+0x926>
 801a934:	2300      	movs	r3, #0
 801a936:	4651      	mov	r1, sl
 801a938:	220a      	movs	r2, #10
 801a93a:	4620      	mov	r0, r4
 801a93c:	f001 f898 	bl	801ba70 <__multadd>
 801a940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a942:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a946:	4682      	mov	sl, r0
 801a948:	2b00      	cmp	r3, #0
 801a94a:	f000 81b0 	beq.w	801acae <_dtoa_r+0xbc6>
 801a94e:	2300      	movs	r3, #0
 801a950:	4639      	mov	r1, r7
 801a952:	220a      	movs	r2, #10
 801a954:	4620      	mov	r0, r4
 801a956:	f001 f88b 	bl	801ba70 <__multadd>
 801a95a:	9b01      	ldr	r3, [sp, #4]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	4607      	mov	r7, r0
 801a960:	f300 8096 	bgt.w	801aa90 <_dtoa_r+0x9a8>
 801a964:	9b07      	ldr	r3, [sp, #28]
 801a966:	2b02      	cmp	r3, #2
 801a968:	dc59      	bgt.n	801aa1e <_dtoa_r+0x936>
 801a96a:	e091      	b.n	801aa90 <_dtoa_r+0x9a8>
 801a96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a96e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801a972:	e758      	b.n	801a826 <_dtoa_r+0x73e>
 801a974:	9b04      	ldr	r3, [sp, #16]
 801a976:	1e5e      	subs	r6, r3, #1
 801a978:	9b08      	ldr	r3, [sp, #32]
 801a97a:	42b3      	cmp	r3, r6
 801a97c:	bfbf      	itttt	lt
 801a97e:	9b08      	ldrlt	r3, [sp, #32]
 801a980:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801a982:	9608      	strlt	r6, [sp, #32]
 801a984:	1af3      	sublt	r3, r6, r3
 801a986:	bfb4      	ite	lt
 801a988:	18d2      	addlt	r2, r2, r3
 801a98a:	1b9e      	subge	r6, r3, r6
 801a98c:	9b04      	ldr	r3, [sp, #16]
 801a98e:	bfbc      	itt	lt
 801a990:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801a992:	2600      	movlt	r6, #0
 801a994:	2b00      	cmp	r3, #0
 801a996:	bfb7      	itett	lt
 801a998:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801a99c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801a9a0:	1a9d      	sublt	r5, r3, r2
 801a9a2:	2300      	movlt	r3, #0
 801a9a4:	e741      	b.n	801a82a <_dtoa_r+0x742>
 801a9a6:	9e08      	ldr	r6, [sp, #32]
 801a9a8:	9d05      	ldr	r5, [sp, #20]
 801a9aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a9ac:	e748      	b.n	801a840 <_dtoa_r+0x758>
 801a9ae:	9a08      	ldr	r2, [sp, #32]
 801a9b0:	e770      	b.n	801a894 <_dtoa_r+0x7ac>
 801a9b2:	9b07      	ldr	r3, [sp, #28]
 801a9b4:	2b01      	cmp	r3, #1
 801a9b6:	dc19      	bgt.n	801a9ec <_dtoa_r+0x904>
 801a9b8:	9b02      	ldr	r3, [sp, #8]
 801a9ba:	b9bb      	cbnz	r3, 801a9ec <_dtoa_r+0x904>
 801a9bc:	9b03      	ldr	r3, [sp, #12]
 801a9be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a9c2:	b99b      	cbnz	r3, 801a9ec <_dtoa_r+0x904>
 801a9c4:	9b03      	ldr	r3, [sp, #12]
 801a9c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a9ca:	0d1b      	lsrs	r3, r3, #20
 801a9cc:	051b      	lsls	r3, r3, #20
 801a9ce:	b183      	cbz	r3, 801a9f2 <_dtoa_r+0x90a>
 801a9d0:	9b05      	ldr	r3, [sp, #20]
 801a9d2:	3301      	adds	r3, #1
 801a9d4:	9305      	str	r3, [sp, #20]
 801a9d6:	9b06      	ldr	r3, [sp, #24]
 801a9d8:	3301      	adds	r3, #1
 801a9da:	9306      	str	r3, [sp, #24]
 801a9dc:	f04f 0801 	mov.w	r8, #1
 801a9e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	f47f af6f 	bne.w	801a8c6 <_dtoa_r+0x7de>
 801a9e8:	2001      	movs	r0, #1
 801a9ea:	e774      	b.n	801a8d6 <_dtoa_r+0x7ee>
 801a9ec:	f04f 0800 	mov.w	r8, #0
 801a9f0:	e7f6      	b.n	801a9e0 <_dtoa_r+0x8f8>
 801a9f2:	4698      	mov	r8, r3
 801a9f4:	e7f4      	b.n	801a9e0 <_dtoa_r+0x8f8>
 801a9f6:	d082      	beq.n	801a8fe <_dtoa_r+0x816>
 801a9f8:	9a05      	ldr	r2, [sp, #20]
 801a9fa:	331c      	adds	r3, #28
 801a9fc:	441a      	add	r2, r3
 801a9fe:	9205      	str	r2, [sp, #20]
 801aa00:	9a06      	ldr	r2, [sp, #24]
 801aa02:	441a      	add	r2, r3
 801aa04:	441d      	add	r5, r3
 801aa06:	9206      	str	r2, [sp, #24]
 801aa08:	e779      	b.n	801a8fe <_dtoa_r+0x816>
 801aa0a:	4603      	mov	r3, r0
 801aa0c:	e7f4      	b.n	801a9f8 <_dtoa_r+0x910>
 801aa0e:	9b04      	ldr	r3, [sp, #16]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	dc37      	bgt.n	801aa84 <_dtoa_r+0x99c>
 801aa14:	9b07      	ldr	r3, [sp, #28]
 801aa16:	2b02      	cmp	r3, #2
 801aa18:	dd34      	ble.n	801aa84 <_dtoa_r+0x99c>
 801aa1a:	9b04      	ldr	r3, [sp, #16]
 801aa1c:	9301      	str	r3, [sp, #4]
 801aa1e:	9b01      	ldr	r3, [sp, #4]
 801aa20:	b963      	cbnz	r3, 801aa3c <_dtoa_r+0x954>
 801aa22:	4631      	mov	r1, r6
 801aa24:	2205      	movs	r2, #5
 801aa26:	4620      	mov	r0, r4
 801aa28:	f001 f822 	bl	801ba70 <__multadd>
 801aa2c:	4601      	mov	r1, r0
 801aa2e:	4606      	mov	r6, r0
 801aa30:	4650      	mov	r0, sl
 801aa32:	f001 fa81 	bl	801bf38 <__mcmp>
 801aa36:	2800      	cmp	r0, #0
 801aa38:	f73f adbb 	bgt.w	801a5b2 <_dtoa_r+0x4ca>
 801aa3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa3e:	9d00      	ldr	r5, [sp, #0]
 801aa40:	ea6f 0b03 	mvn.w	fp, r3
 801aa44:	f04f 0800 	mov.w	r8, #0
 801aa48:	4631      	mov	r1, r6
 801aa4a:	4620      	mov	r0, r4
 801aa4c:	f000 ffee 	bl	801ba2c <_Bfree>
 801aa50:	2f00      	cmp	r7, #0
 801aa52:	f43f aeab 	beq.w	801a7ac <_dtoa_r+0x6c4>
 801aa56:	f1b8 0f00 	cmp.w	r8, #0
 801aa5a:	d005      	beq.n	801aa68 <_dtoa_r+0x980>
 801aa5c:	45b8      	cmp	r8, r7
 801aa5e:	d003      	beq.n	801aa68 <_dtoa_r+0x980>
 801aa60:	4641      	mov	r1, r8
 801aa62:	4620      	mov	r0, r4
 801aa64:	f000 ffe2 	bl	801ba2c <_Bfree>
 801aa68:	4639      	mov	r1, r7
 801aa6a:	4620      	mov	r0, r4
 801aa6c:	f000 ffde 	bl	801ba2c <_Bfree>
 801aa70:	e69c      	b.n	801a7ac <_dtoa_r+0x6c4>
 801aa72:	2600      	movs	r6, #0
 801aa74:	4637      	mov	r7, r6
 801aa76:	e7e1      	b.n	801aa3c <_dtoa_r+0x954>
 801aa78:	46bb      	mov	fp, r7
 801aa7a:	4637      	mov	r7, r6
 801aa7c:	e599      	b.n	801a5b2 <_dtoa_r+0x4ca>
 801aa7e:	bf00      	nop
 801aa80:	40240000 	.word	0x40240000
 801aa84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	f000 80c8 	beq.w	801ac1c <_dtoa_r+0xb34>
 801aa8c:	9b04      	ldr	r3, [sp, #16]
 801aa8e:	9301      	str	r3, [sp, #4]
 801aa90:	2d00      	cmp	r5, #0
 801aa92:	dd05      	ble.n	801aaa0 <_dtoa_r+0x9b8>
 801aa94:	4639      	mov	r1, r7
 801aa96:	462a      	mov	r2, r5
 801aa98:	4620      	mov	r0, r4
 801aa9a:	f001 f9e1 	bl	801be60 <__lshift>
 801aa9e:	4607      	mov	r7, r0
 801aaa0:	f1b8 0f00 	cmp.w	r8, #0
 801aaa4:	d05b      	beq.n	801ab5e <_dtoa_r+0xa76>
 801aaa6:	6879      	ldr	r1, [r7, #4]
 801aaa8:	4620      	mov	r0, r4
 801aaaa:	f000 ff7f 	bl	801b9ac <_Balloc>
 801aaae:	4605      	mov	r5, r0
 801aab0:	b928      	cbnz	r0, 801aabe <_dtoa_r+0x9d6>
 801aab2:	4b83      	ldr	r3, [pc, #524]	; (801acc0 <_dtoa_r+0xbd8>)
 801aab4:	4602      	mov	r2, r0
 801aab6:	f240 21ef 	movw	r1, #751	; 0x2ef
 801aaba:	f7ff bb2e 	b.w	801a11a <_dtoa_r+0x32>
 801aabe:	693a      	ldr	r2, [r7, #16]
 801aac0:	3202      	adds	r2, #2
 801aac2:	0092      	lsls	r2, r2, #2
 801aac4:	f107 010c 	add.w	r1, r7, #12
 801aac8:	300c      	adds	r0, #12
 801aaca:	f7ff fa67 	bl	8019f9c <memcpy>
 801aace:	2201      	movs	r2, #1
 801aad0:	4629      	mov	r1, r5
 801aad2:	4620      	mov	r0, r4
 801aad4:	f001 f9c4 	bl	801be60 <__lshift>
 801aad8:	9b00      	ldr	r3, [sp, #0]
 801aada:	3301      	adds	r3, #1
 801aadc:	9304      	str	r3, [sp, #16]
 801aade:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aae2:	4413      	add	r3, r2
 801aae4:	9308      	str	r3, [sp, #32]
 801aae6:	9b02      	ldr	r3, [sp, #8]
 801aae8:	f003 0301 	and.w	r3, r3, #1
 801aaec:	46b8      	mov	r8, r7
 801aaee:	9306      	str	r3, [sp, #24]
 801aaf0:	4607      	mov	r7, r0
 801aaf2:	9b04      	ldr	r3, [sp, #16]
 801aaf4:	4631      	mov	r1, r6
 801aaf6:	3b01      	subs	r3, #1
 801aaf8:	4650      	mov	r0, sl
 801aafa:	9301      	str	r3, [sp, #4]
 801aafc:	f7ff fa6a 	bl	8019fd4 <quorem>
 801ab00:	4641      	mov	r1, r8
 801ab02:	9002      	str	r0, [sp, #8]
 801ab04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ab08:	4650      	mov	r0, sl
 801ab0a:	f001 fa15 	bl	801bf38 <__mcmp>
 801ab0e:	463a      	mov	r2, r7
 801ab10:	9005      	str	r0, [sp, #20]
 801ab12:	4631      	mov	r1, r6
 801ab14:	4620      	mov	r0, r4
 801ab16:	f001 fa2b 	bl	801bf70 <__mdiff>
 801ab1a:	68c2      	ldr	r2, [r0, #12]
 801ab1c:	4605      	mov	r5, r0
 801ab1e:	bb02      	cbnz	r2, 801ab62 <_dtoa_r+0xa7a>
 801ab20:	4601      	mov	r1, r0
 801ab22:	4650      	mov	r0, sl
 801ab24:	f001 fa08 	bl	801bf38 <__mcmp>
 801ab28:	4602      	mov	r2, r0
 801ab2a:	4629      	mov	r1, r5
 801ab2c:	4620      	mov	r0, r4
 801ab2e:	9209      	str	r2, [sp, #36]	; 0x24
 801ab30:	f000 ff7c 	bl	801ba2c <_Bfree>
 801ab34:	9b07      	ldr	r3, [sp, #28]
 801ab36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab38:	9d04      	ldr	r5, [sp, #16]
 801ab3a:	ea43 0102 	orr.w	r1, r3, r2
 801ab3e:	9b06      	ldr	r3, [sp, #24]
 801ab40:	4319      	orrs	r1, r3
 801ab42:	d110      	bne.n	801ab66 <_dtoa_r+0xa7e>
 801ab44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ab48:	d029      	beq.n	801ab9e <_dtoa_r+0xab6>
 801ab4a:	9b05      	ldr	r3, [sp, #20]
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	dd02      	ble.n	801ab56 <_dtoa_r+0xa6e>
 801ab50:	9b02      	ldr	r3, [sp, #8]
 801ab52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801ab56:	9b01      	ldr	r3, [sp, #4]
 801ab58:	f883 9000 	strb.w	r9, [r3]
 801ab5c:	e774      	b.n	801aa48 <_dtoa_r+0x960>
 801ab5e:	4638      	mov	r0, r7
 801ab60:	e7ba      	b.n	801aad8 <_dtoa_r+0x9f0>
 801ab62:	2201      	movs	r2, #1
 801ab64:	e7e1      	b.n	801ab2a <_dtoa_r+0xa42>
 801ab66:	9b05      	ldr	r3, [sp, #20]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	db04      	blt.n	801ab76 <_dtoa_r+0xa8e>
 801ab6c:	9907      	ldr	r1, [sp, #28]
 801ab6e:	430b      	orrs	r3, r1
 801ab70:	9906      	ldr	r1, [sp, #24]
 801ab72:	430b      	orrs	r3, r1
 801ab74:	d120      	bne.n	801abb8 <_dtoa_r+0xad0>
 801ab76:	2a00      	cmp	r2, #0
 801ab78:	dded      	ble.n	801ab56 <_dtoa_r+0xa6e>
 801ab7a:	4651      	mov	r1, sl
 801ab7c:	2201      	movs	r2, #1
 801ab7e:	4620      	mov	r0, r4
 801ab80:	f001 f96e 	bl	801be60 <__lshift>
 801ab84:	4631      	mov	r1, r6
 801ab86:	4682      	mov	sl, r0
 801ab88:	f001 f9d6 	bl	801bf38 <__mcmp>
 801ab8c:	2800      	cmp	r0, #0
 801ab8e:	dc03      	bgt.n	801ab98 <_dtoa_r+0xab0>
 801ab90:	d1e1      	bne.n	801ab56 <_dtoa_r+0xa6e>
 801ab92:	f019 0f01 	tst.w	r9, #1
 801ab96:	d0de      	beq.n	801ab56 <_dtoa_r+0xa6e>
 801ab98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ab9c:	d1d8      	bne.n	801ab50 <_dtoa_r+0xa68>
 801ab9e:	9a01      	ldr	r2, [sp, #4]
 801aba0:	2339      	movs	r3, #57	; 0x39
 801aba2:	7013      	strb	r3, [r2, #0]
 801aba4:	462b      	mov	r3, r5
 801aba6:	461d      	mov	r5, r3
 801aba8:	3b01      	subs	r3, #1
 801abaa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801abae:	2a39      	cmp	r2, #57	; 0x39
 801abb0:	d06c      	beq.n	801ac8c <_dtoa_r+0xba4>
 801abb2:	3201      	adds	r2, #1
 801abb4:	701a      	strb	r2, [r3, #0]
 801abb6:	e747      	b.n	801aa48 <_dtoa_r+0x960>
 801abb8:	2a00      	cmp	r2, #0
 801abba:	dd07      	ble.n	801abcc <_dtoa_r+0xae4>
 801abbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801abc0:	d0ed      	beq.n	801ab9e <_dtoa_r+0xab6>
 801abc2:	9a01      	ldr	r2, [sp, #4]
 801abc4:	f109 0301 	add.w	r3, r9, #1
 801abc8:	7013      	strb	r3, [r2, #0]
 801abca:	e73d      	b.n	801aa48 <_dtoa_r+0x960>
 801abcc:	9b04      	ldr	r3, [sp, #16]
 801abce:	9a08      	ldr	r2, [sp, #32]
 801abd0:	f803 9c01 	strb.w	r9, [r3, #-1]
 801abd4:	4293      	cmp	r3, r2
 801abd6:	d043      	beq.n	801ac60 <_dtoa_r+0xb78>
 801abd8:	4651      	mov	r1, sl
 801abda:	2300      	movs	r3, #0
 801abdc:	220a      	movs	r2, #10
 801abde:	4620      	mov	r0, r4
 801abe0:	f000 ff46 	bl	801ba70 <__multadd>
 801abe4:	45b8      	cmp	r8, r7
 801abe6:	4682      	mov	sl, r0
 801abe8:	f04f 0300 	mov.w	r3, #0
 801abec:	f04f 020a 	mov.w	r2, #10
 801abf0:	4641      	mov	r1, r8
 801abf2:	4620      	mov	r0, r4
 801abf4:	d107      	bne.n	801ac06 <_dtoa_r+0xb1e>
 801abf6:	f000 ff3b 	bl	801ba70 <__multadd>
 801abfa:	4680      	mov	r8, r0
 801abfc:	4607      	mov	r7, r0
 801abfe:	9b04      	ldr	r3, [sp, #16]
 801ac00:	3301      	adds	r3, #1
 801ac02:	9304      	str	r3, [sp, #16]
 801ac04:	e775      	b.n	801aaf2 <_dtoa_r+0xa0a>
 801ac06:	f000 ff33 	bl	801ba70 <__multadd>
 801ac0a:	4639      	mov	r1, r7
 801ac0c:	4680      	mov	r8, r0
 801ac0e:	2300      	movs	r3, #0
 801ac10:	220a      	movs	r2, #10
 801ac12:	4620      	mov	r0, r4
 801ac14:	f000 ff2c 	bl	801ba70 <__multadd>
 801ac18:	4607      	mov	r7, r0
 801ac1a:	e7f0      	b.n	801abfe <_dtoa_r+0xb16>
 801ac1c:	9b04      	ldr	r3, [sp, #16]
 801ac1e:	9301      	str	r3, [sp, #4]
 801ac20:	9d00      	ldr	r5, [sp, #0]
 801ac22:	4631      	mov	r1, r6
 801ac24:	4650      	mov	r0, sl
 801ac26:	f7ff f9d5 	bl	8019fd4 <quorem>
 801ac2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ac2e:	9b00      	ldr	r3, [sp, #0]
 801ac30:	f805 9b01 	strb.w	r9, [r5], #1
 801ac34:	1aea      	subs	r2, r5, r3
 801ac36:	9b01      	ldr	r3, [sp, #4]
 801ac38:	4293      	cmp	r3, r2
 801ac3a:	dd07      	ble.n	801ac4c <_dtoa_r+0xb64>
 801ac3c:	4651      	mov	r1, sl
 801ac3e:	2300      	movs	r3, #0
 801ac40:	220a      	movs	r2, #10
 801ac42:	4620      	mov	r0, r4
 801ac44:	f000 ff14 	bl	801ba70 <__multadd>
 801ac48:	4682      	mov	sl, r0
 801ac4a:	e7ea      	b.n	801ac22 <_dtoa_r+0xb3a>
 801ac4c:	9b01      	ldr	r3, [sp, #4]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	bfc8      	it	gt
 801ac52:	461d      	movgt	r5, r3
 801ac54:	9b00      	ldr	r3, [sp, #0]
 801ac56:	bfd8      	it	le
 801ac58:	2501      	movle	r5, #1
 801ac5a:	441d      	add	r5, r3
 801ac5c:	f04f 0800 	mov.w	r8, #0
 801ac60:	4651      	mov	r1, sl
 801ac62:	2201      	movs	r2, #1
 801ac64:	4620      	mov	r0, r4
 801ac66:	f001 f8fb 	bl	801be60 <__lshift>
 801ac6a:	4631      	mov	r1, r6
 801ac6c:	4682      	mov	sl, r0
 801ac6e:	f001 f963 	bl	801bf38 <__mcmp>
 801ac72:	2800      	cmp	r0, #0
 801ac74:	dc96      	bgt.n	801aba4 <_dtoa_r+0xabc>
 801ac76:	d102      	bne.n	801ac7e <_dtoa_r+0xb96>
 801ac78:	f019 0f01 	tst.w	r9, #1
 801ac7c:	d192      	bne.n	801aba4 <_dtoa_r+0xabc>
 801ac7e:	462b      	mov	r3, r5
 801ac80:	461d      	mov	r5, r3
 801ac82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ac86:	2a30      	cmp	r2, #48	; 0x30
 801ac88:	d0fa      	beq.n	801ac80 <_dtoa_r+0xb98>
 801ac8a:	e6dd      	b.n	801aa48 <_dtoa_r+0x960>
 801ac8c:	9a00      	ldr	r2, [sp, #0]
 801ac8e:	429a      	cmp	r2, r3
 801ac90:	d189      	bne.n	801aba6 <_dtoa_r+0xabe>
 801ac92:	f10b 0b01 	add.w	fp, fp, #1
 801ac96:	2331      	movs	r3, #49	; 0x31
 801ac98:	e796      	b.n	801abc8 <_dtoa_r+0xae0>
 801ac9a:	4b0a      	ldr	r3, [pc, #40]	; (801acc4 <_dtoa_r+0xbdc>)
 801ac9c:	f7ff ba99 	b.w	801a1d2 <_dtoa_r+0xea>
 801aca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	f47f aa6d 	bne.w	801a182 <_dtoa_r+0x9a>
 801aca8:	4b07      	ldr	r3, [pc, #28]	; (801acc8 <_dtoa_r+0xbe0>)
 801acaa:	f7ff ba92 	b.w	801a1d2 <_dtoa_r+0xea>
 801acae:	9b01      	ldr	r3, [sp, #4]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	dcb5      	bgt.n	801ac20 <_dtoa_r+0xb38>
 801acb4:	9b07      	ldr	r3, [sp, #28]
 801acb6:	2b02      	cmp	r3, #2
 801acb8:	f73f aeb1 	bgt.w	801aa1e <_dtoa_r+0x936>
 801acbc:	e7b0      	b.n	801ac20 <_dtoa_r+0xb38>
 801acbe:	bf00      	nop
 801acc0:	0801fd1d 	.word	0x0801fd1d
 801acc4:	0801fb1c 	.word	0x0801fb1c
 801acc8:	0801fca1 	.word	0x0801fca1

0801accc <_free_r>:
 801accc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801acce:	2900      	cmp	r1, #0
 801acd0:	d044      	beq.n	801ad5c <_free_r+0x90>
 801acd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801acd6:	9001      	str	r0, [sp, #4]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	f1a1 0404 	sub.w	r4, r1, #4
 801acde:	bfb8      	it	lt
 801ace0:	18e4      	addlt	r4, r4, r3
 801ace2:	f000 fe57 	bl	801b994 <__malloc_lock>
 801ace6:	4a1e      	ldr	r2, [pc, #120]	; (801ad60 <_free_r+0x94>)
 801ace8:	9801      	ldr	r0, [sp, #4]
 801acea:	6813      	ldr	r3, [r2, #0]
 801acec:	b933      	cbnz	r3, 801acfc <_free_r+0x30>
 801acee:	6063      	str	r3, [r4, #4]
 801acf0:	6014      	str	r4, [r2, #0]
 801acf2:	b003      	add	sp, #12
 801acf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801acf8:	f000 be52 	b.w	801b9a0 <__malloc_unlock>
 801acfc:	42a3      	cmp	r3, r4
 801acfe:	d908      	bls.n	801ad12 <_free_r+0x46>
 801ad00:	6825      	ldr	r5, [r4, #0]
 801ad02:	1961      	adds	r1, r4, r5
 801ad04:	428b      	cmp	r3, r1
 801ad06:	bf01      	itttt	eq
 801ad08:	6819      	ldreq	r1, [r3, #0]
 801ad0a:	685b      	ldreq	r3, [r3, #4]
 801ad0c:	1949      	addeq	r1, r1, r5
 801ad0e:	6021      	streq	r1, [r4, #0]
 801ad10:	e7ed      	b.n	801acee <_free_r+0x22>
 801ad12:	461a      	mov	r2, r3
 801ad14:	685b      	ldr	r3, [r3, #4]
 801ad16:	b10b      	cbz	r3, 801ad1c <_free_r+0x50>
 801ad18:	42a3      	cmp	r3, r4
 801ad1a:	d9fa      	bls.n	801ad12 <_free_r+0x46>
 801ad1c:	6811      	ldr	r1, [r2, #0]
 801ad1e:	1855      	adds	r5, r2, r1
 801ad20:	42a5      	cmp	r5, r4
 801ad22:	d10b      	bne.n	801ad3c <_free_r+0x70>
 801ad24:	6824      	ldr	r4, [r4, #0]
 801ad26:	4421      	add	r1, r4
 801ad28:	1854      	adds	r4, r2, r1
 801ad2a:	42a3      	cmp	r3, r4
 801ad2c:	6011      	str	r1, [r2, #0]
 801ad2e:	d1e0      	bne.n	801acf2 <_free_r+0x26>
 801ad30:	681c      	ldr	r4, [r3, #0]
 801ad32:	685b      	ldr	r3, [r3, #4]
 801ad34:	6053      	str	r3, [r2, #4]
 801ad36:	440c      	add	r4, r1
 801ad38:	6014      	str	r4, [r2, #0]
 801ad3a:	e7da      	b.n	801acf2 <_free_r+0x26>
 801ad3c:	d902      	bls.n	801ad44 <_free_r+0x78>
 801ad3e:	230c      	movs	r3, #12
 801ad40:	6003      	str	r3, [r0, #0]
 801ad42:	e7d6      	b.n	801acf2 <_free_r+0x26>
 801ad44:	6825      	ldr	r5, [r4, #0]
 801ad46:	1961      	adds	r1, r4, r5
 801ad48:	428b      	cmp	r3, r1
 801ad4a:	bf04      	itt	eq
 801ad4c:	6819      	ldreq	r1, [r3, #0]
 801ad4e:	685b      	ldreq	r3, [r3, #4]
 801ad50:	6063      	str	r3, [r4, #4]
 801ad52:	bf04      	itt	eq
 801ad54:	1949      	addeq	r1, r1, r5
 801ad56:	6021      	streq	r1, [r4, #0]
 801ad58:	6054      	str	r4, [r2, #4]
 801ad5a:	e7ca      	b.n	801acf2 <_free_r+0x26>
 801ad5c:	b003      	add	sp, #12
 801ad5e:	bd30      	pop	{r4, r5, pc}
 801ad60:	2000950c 	.word	0x2000950c

0801ad64 <rshift>:
 801ad64:	6903      	ldr	r3, [r0, #16]
 801ad66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ad6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ad72:	f100 0414 	add.w	r4, r0, #20
 801ad76:	dd45      	ble.n	801ae04 <rshift+0xa0>
 801ad78:	f011 011f 	ands.w	r1, r1, #31
 801ad7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801ad80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801ad84:	d10c      	bne.n	801ada0 <rshift+0x3c>
 801ad86:	f100 0710 	add.w	r7, r0, #16
 801ad8a:	4629      	mov	r1, r5
 801ad8c:	42b1      	cmp	r1, r6
 801ad8e:	d334      	bcc.n	801adfa <rshift+0x96>
 801ad90:	1a9b      	subs	r3, r3, r2
 801ad92:	009b      	lsls	r3, r3, #2
 801ad94:	1eea      	subs	r2, r5, #3
 801ad96:	4296      	cmp	r6, r2
 801ad98:	bf38      	it	cc
 801ad9a:	2300      	movcc	r3, #0
 801ad9c:	4423      	add	r3, r4
 801ad9e:	e015      	b.n	801adcc <rshift+0x68>
 801ada0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ada4:	f1c1 0820 	rsb	r8, r1, #32
 801ada8:	40cf      	lsrs	r7, r1
 801adaa:	f105 0e04 	add.w	lr, r5, #4
 801adae:	46a1      	mov	r9, r4
 801adb0:	4576      	cmp	r6, lr
 801adb2:	46f4      	mov	ip, lr
 801adb4:	d815      	bhi.n	801ade2 <rshift+0x7e>
 801adb6:	1a9a      	subs	r2, r3, r2
 801adb8:	0092      	lsls	r2, r2, #2
 801adba:	3a04      	subs	r2, #4
 801adbc:	3501      	adds	r5, #1
 801adbe:	42ae      	cmp	r6, r5
 801adc0:	bf38      	it	cc
 801adc2:	2200      	movcc	r2, #0
 801adc4:	18a3      	adds	r3, r4, r2
 801adc6:	50a7      	str	r7, [r4, r2]
 801adc8:	b107      	cbz	r7, 801adcc <rshift+0x68>
 801adca:	3304      	adds	r3, #4
 801adcc:	1b1a      	subs	r2, r3, r4
 801adce:	42a3      	cmp	r3, r4
 801add0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801add4:	bf08      	it	eq
 801add6:	2300      	moveq	r3, #0
 801add8:	6102      	str	r2, [r0, #16]
 801adda:	bf08      	it	eq
 801addc:	6143      	streq	r3, [r0, #20]
 801adde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ade2:	f8dc c000 	ldr.w	ip, [ip]
 801ade6:	fa0c fc08 	lsl.w	ip, ip, r8
 801adea:	ea4c 0707 	orr.w	r7, ip, r7
 801adee:	f849 7b04 	str.w	r7, [r9], #4
 801adf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801adf6:	40cf      	lsrs	r7, r1
 801adf8:	e7da      	b.n	801adb0 <rshift+0x4c>
 801adfa:	f851 cb04 	ldr.w	ip, [r1], #4
 801adfe:	f847 cf04 	str.w	ip, [r7, #4]!
 801ae02:	e7c3      	b.n	801ad8c <rshift+0x28>
 801ae04:	4623      	mov	r3, r4
 801ae06:	e7e1      	b.n	801adcc <rshift+0x68>

0801ae08 <__hexdig_fun>:
 801ae08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ae0c:	2b09      	cmp	r3, #9
 801ae0e:	d802      	bhi.n	801ae16 <__hexdig_fun+0xe>
 801ae10:	3820      	subs	r0, #32
 801ae12:	b2c0      	uxtb	r0, r0
 801ae14:	4770      	bx	lr
 801ae16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801ae1a:	2b05      	cmp	r3, #5
 801ae1c:	d801      	bhi.n	801ae22 <__hexdig_fun+0x1a>
 801ae1e:	3847      	subs	r0, #71	; 0x47
 801ae20:	e7f7      	b.n	801ae12 <__hexdig_fun+0xa>
 801ae22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801ae26:	2b05      	cmp	r3, #5
 801ae28:	d801      	bhi.n	801ae2e <__hexdig_fun+0x26>
 801ae2a:	3827      	subs	r0, #39	; 0x27
 801ae2c:	e7f1      	b.n	801ae12 <__hexdig_fun+0xa>
 801ae2e:	2000      	movs	r0, #0
 801ae30:	4770      	bx	lr
	...

0801ae34 <__gethex>:
 801ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae38:	4617      	mov	r7, r2
 801ae3a:	680a      	ldr	r2, [r1, #0]
 801ae3c:	b085      	sub	sp, #20
 801ae3e:	f102 0b02 	add.w	fp, r2, #2
 801ae42:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801ae46:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801ae4a:	4681      	mov	r9, r0
 801ae4c:	468a      	mov	sl, r1
 801ae4e:	9302      	str	r3, [sp, #8]
 801ae50:	32fe      	adds	r2, #254	; 0xfe
 801ae52:	eb02 030b 	add.w	r3, r2, fp
 801ae56:	46d8      	mov	r8, fp
 801ae58:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801ae5c:	9301      	str	r3, [sp, #4]
 801ae5e:	2830      	cmp	r0, #48	; 0x30
 801ae60:	d0f7      	beq.n	801ae52 <__gethex+0x1e>
 801ae62:	f7ff ffd1 	bl	801ae08 <__hexdig_fun>
 801ae66:	4604      	mov	r4, r0
 801ae68:	2800      	cmp	r0, #0
 801ae6a:	d138      	bne.n	801aede <__gethex+0xaa>
 801ae6c:	49a7      	ldr	r1, [pc, #668]	; (801b10c <__gethex+0x2d8>)
 801ae6e:	2201      	movs	r2, #1
 801ae70:	4640      	mov	r0, r8
 801ae72:	f7fe fff3 	bl	8019e5c <strncmp>
 801ae76:	4606      	mov	r6, r0
 801ae78:	2800      	cmp	r0, #0
 801ae7a:	d169      	bne.n	801af50 <__gethex+0x11c>
 801ae7c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801ae80:	465d      	mov	r5, fp
 801ae82:	f7ff ffc1 	bl	801ae08 <__hexdig_fun>
 801ae86:	2800      	cmp	r0, #0
 801ae88:	d064      	beq.n	801af54 <__gethex+0x120>
 801ae8a:	465a      	mov	r2, fp
 801ae8c:	7810      	ldrb	r0, [r2, #0]
 801ae8e:	2830      	cmp	r0, #48	; 0x30
 801ae90:	4690      	mov	r8, r2
 801ae92:	f102 0201 	add.w	r2, r2, #1
 801ae96:	d0f9      	beq.n	801ae8c <__gethex+0x58>
 801ae98:	f7ff ffb6 	bl	801ae08 <__hexdig_fun>
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	fab0 f480 	clz	r4, r0
 801aea2:	0964      	lsrs	r4, r4, #5
 801aea4:	465e      	mov	r6, fp
 801aea6:	9301      	str	r3, [sp, #4]
 801aea8:	4642      	mov	r2, r8
 801aeaa:	4615      	mov	r5, r2
 801aeac:	3201      	adds	r2, #1
 801aeae:	7828      	ldrb	r0, [r5, #0]
 801aeb0:	f7ff ffaa 	bl	801ae08 <__hexdig_fun>
 801aeb4:	2800      	cmp	r0, #0
 801aeb6:	d1f8      	bne.n	801aeaa <__gethex+0x76>
 801aeb8:	4994      	ldr	r1, [pc, #592]	; (801b10c <__gethex+0x2d8>)
 801aeba:	2201      	movs	r2, #1
 801aebc:	4628      	mov	r0, r5
 801aebe:	f7fe ffcd 	bl	8019e5c <strncmp>
 801aec2:	b978      	cbnz	r0, 801aee4 <__gethex+0xb0>
 801aec4:	b946      	cbnz	r6, 801aed8 <__gethex+0xa4>
 801aec6:	1c6e      	adds	r6, r5, #1
 801aec8:	4632      	mov	r2, r6
 801aeca:	4615      	mov	r5, r2
 801aecc:	3201      	adds	r2, #1
 801aece:	7828      	ldrb	r0, [r5, #0]
 801aed0:	f7ff ff9a 	bl	801ae08 <__hexdig_fun>
 801aed4:	2800      	cmp	r0, #0
 801aed6:	d1f8      	bne.n	801aeca <__gethex+0x96>
 801aed8:	1b73      	subs	r3, r6, r5
 801aeda:	009e      	lsls	r6, r3, #2
 801aedc:	e004      	b.n	801aee8 <__gethex+0xb4>
 801aede:	2400      	movs	r4, #0
 801aee0:	4626      	mov	r6, r4
 801aee2:	e7e1      	b.n	801aea8 <__gethex+0x74>
 801aee4:	2e00      	cmp	r6, #0
 801aee6:	d1f7      	bne.n	801aed8 <__gethex+0xa4>
 801aee8:	782b      	ldrb	r3, [r5, #0]
 801aeea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801aeee:	2b50      	cmp	r3, #80	; 0x50
 801aef0:	d13d      	bne.n	801af6e <__gethex+0x13a>
 801aef2:	786b      	ldrb	r3, [r5, #1]
 801aef4:	2b2b      	cmp	r3, #43	; 0x2b
 801aef6:	d02f      	beq.n	801af58 <__gethex+0x124>
 801aef8:	2b2d      	cmp	r3, #45	; 0x2d
 801aefa:	d031      	beq.n	801af60 <__gethex+0x12c>
 801aefc:	1c69      	adds	r1, r5, #1
 801aefe:	f04f 0b00 	mov.w	fp, #0
 801af02:	7808      	ldrb	r0, [r1, #0]
 801af04:	f7ff ff80 	bl	801ae08 <__hexdig_fun>
 801af08:	1e42      	subs	r2, r0, #1
 801af0a:	b2d2      	uxtb	r2, r2
 801af0c:	2a18      	cmp	r2, #24
 801af0e:	d82e      	bhi.n	801af6e <__gethex+0x13a>
 801af10:	f1a0 0210 	sub.w	r2, r0, #16
 801af14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801af18:	f7ff ff76 	bl	801ae08 <__hexdig_fun>
 801af1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801af20:	fa5f fc8c 	uxtb.w	ip, ip
 801af24:	f1bc 0f18 	cmp.w	ip, #24
 801af28:	d91d      	bls.n	801af66 <__gethex+0x132>
 801af2a:	f1bb 0f00 	cmp.w	fp, #0
 801af2e:	d000      	beq.n	801af32 <__gethex+0xfe>
 801af30:	4252      	negs	r2, r2
 801af32:	4416      	add	r6, r2
 801af34:	f8ca 1000 	str.w	r1, [sl]
 801af38:	b1dc      	cbz	r4, 801af72 <__gethex+0x13e>
 801af3a:	9b01      	ldr	r3, [sp, #4]
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	bf14      	ite	ne
 801af40:	f04f 0800 	movne.w	r8, #0
 801af44:	f04f 0806 	moveq.w	r8, #6
 801af48:	4640      	mov	r0, r8
 801af4a:	b005      	add	sp, #20
 801af4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af50:	4645      	mov	r5, r8
 801af52:	4626      	mov	r6, r4
 801af54:	2401      	movs	r4, #1
 801af56:	e7c7      	b.n	801aee8 <__gethex+0xb4>
 801af58:	f04f 0b00 	mov.w	fp, #0
 801af5c:	1ca9      	adds	r1, r5, #2
 801af5e:	e7d0      	b.n	801af02 <__gethex+0xce>
 801af60:	f04f 0b01 	mov.w	fp, #1
 801af64:	e7fa      	b.n	801af5c <__gethex+0x128>
 801af66:	230a      	movs	r3, #10
 801af68:	fb03 0002 	mla	r0, r3, r2, r0
 801af6c:	e7d0      	b.n	801af10 <__gethex+0xdc>
 801af6e:	4629      	mov	r1, r5
 801af70:	e7e0      	b.n	801af34 <__gethex+0x100>
 801af72:	eba5 0308 	sub.w	r3, r5, r8
 801af76:	3b01      	subs	r3, #1
 801af78:	4621      	mov	r1, r4
 801af7a:	2b07      	cmp	r3, #7
 801af7c:	dc0a      	bgt.n	801af94 <__gethex+0x160>
 801af7e:	4648      	mov	r0, r9
 801af80:	f000 fd14 	bl	801b9ac <_Balloc>
 801af84:	4604      	mov	r4, r0
 801af86:	b940      	cbnz	r0, 801af9a <__gethex+0x166>
 801af88:	4b61      	ldr	r3, [pc, #388]	; (801b110 <__gethex+0x2dc>)
 801af8a:	4602      	mov	r2, r0
 801af8c:	21e4      	movs	r1, #228	; 0xe4
 801af8e:	4861      	ldr	r0, [pc, #388]	; (801b114 <__gethex+0x2e0>)
 801af90:	f001 faa8 	bl	801c4e4 <__assert_func>
 801af94:	3101      	adds	r1, #1
 801af96:	105b      	asrs	r3, r3, #1
 801af98:	e7ef      	b.n	801af7a <__gethex+0x146>
 801af9a:	f100 0a14 	add.w	sl, r0, #20
 801af9e:	2300      	movs	r3, #0
 801afa0:	495a      	ldr	r1, [pc, #360]	; (801b10c <__gethex+0x2d8>)
 801afa2:	f8cd a004 	str.w	sl, [sp, #4]
 801afa6:	469b      	mov	fp, r3
 801afa8:	45a8      	cmp	r8, r5
 801afaa:	d342      	bcc.n	801b032 <__gethex+0x1fe>
 801afac:	9801      	ldr	r0, [sp, #4]
 801afae:	f840 bb04 	str.w	fp, [r0], #4
 801afb2:	eba0 000a 	sub.w	r0, r0, sl
 801afb6:	1080      	asrs	r0, r0, #2
 801afb8:	6120      	str	r0, [r4, #16]
 801afba:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801afbe:	4658      	mov	r0, fp
 801afc0:	f000 fde6 	bl	801bb90 <__hi0bits>
 801afc4:	683d      	ldr	r5, [r7, #0]
 801afc6:	eba8 0000 	sub.w	r0, r8, r0
 801afca:	42a8      	cmp	r0, r5
 801afcc:	dd59      	ble.n	801b082 <__gethex+0x24e>
 801afce:	eba0 0805 	sub.w	r8, r0, r5
 801afd2:	4641      	mov	r1, r8
 801afd4:	4620      	mov	r0, r4
 801afd6:	f001 f975 	bl	801c2c4 <__any_on>
 801afda:	4683      	mov	fp, r0
 801afdc:	b1b8      	cbz	r0, 801b00e <__gethex+0x1da>
 801afde:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801afe2:	1159      	asrs	r1, r3, #5
 801afe4:	f003 021f 	and.w	r2, r3, #31
 801afe8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801afec:	f04f 0b01 	mov.w	fp, #1
 801aff0:	fa0b f202 	lsl.w	r2, fp, r2
 801aff4:	420a      	tst	r2, r1
 801aff6:	d00a      	beq.n	801b00e <__gethex+0x1da>
 801aff8:	455b      	cmp	r3, fp
 801affa:	dd06      	ble.n	801b00a <__gethex+0x1d6>
 801affc:	f1a8 0102 	sub.w	r1, r8, #2
 801b000:	4620      	mov	r0, r4
 801b002:	f001 f95f 	bl	801c2c4 <__any_on>
 801b006:	2800      	cmp	r0, #0
 801b008:	d138      	bne.n	801b07c <__gethex+0x248>
 801b00a:	f04f 0b02 	mov.w	fp, #2
 801b00e:	4641      	mov	r1, r8
 801b010:	4620      	mov	r0, r4
 801b012:	f7ff fea7 	bl	801ad64 <rshift>
 801b016:	4446      	add	r6, r8
 801b018:	68bb      	ldr	r3, [r7, #8]
 801b01a:	42b3      	cmp	r3, r6
 801b01c:	da41      	bge.n	801b0a2 <__gethex+0x26e>
 801b01e:	4621      	mov	r1, r4
 801b020:	4648      	mov	r0, r9
 801b022:	f000 fd03 	bl	801ba2c <_Bfree>
 801b026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b028:	2300      	movs	r3, #0
 801b02a:	6013      	str	r3, [r2, #0]
 801b02c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801b030:	e78a      	b.n	801af48 <__gethex+0x114>
 801b032:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801b036:	2a2e      	cmp	r2, #46	; 0x2e
 801b038:	d014      	beq.n	801b064 <__gethex+0x230>
 801b03a:	2b20      	cmp	r3, #32
 801b03c:	d106      	bne.n	801b04c <__gethex+0x218>
 801b03e:	9b01      	ldr	r3, [sp, #4]
 801b040:	f843 bb04 	str.w	fp, [r3], #4
 801b044:	f04f 0b00 	mov.w	fp, #0
 801b048:	9301      	str	r3, [sp, #4]
 801b04a:	465b      	mov	r3, fp
 801b04c:	7828      	ldrb	r0, [r5, #0]
 801b04e:	9303      	str	r3, [sp, #12]
 801b050:	f7ff feda 	bl	801ae08 <__hexdig_fun>
 801b054:	9b03      	ldr	r3, [sp, #12]
 801b056:	f000 000f 	and.w	r0, r0, #15
 801b05a:	4098      	lsls	r0, r3
 801b05c:	ea4b 0b00 	orr.w	fp, fp, r0
 801b060:	3304      	adds	r3, #4
 801b062:	e7a1      	b.n	801afa8 <__gethex+0x174>
 801b064:	45a8      	cmp	r8, r5
 801b066:	d8e8      	bhi.n	801b03a <__gethex+0x206>
 801b068:	2201      	movs	r2, #1
 801b06a:	4628      	mov	r0, r5
 801b06c:	9303      	str	r3, [sp, #12]
 801b06e:	f7fe fef5 	bl	8019e5c <strncmp>
 801b072:	4926      	ldr	r1, [pc, #152]	; (801b10c <__gethex+0x2d8>)
 801b074:	9b03      	ldr	r3, [sp, #12]
 801b076:	2800      	cmp	r0, #0
 801b078:	d1df      	bne.n	801b03a <__gethex+0x206>
 801b07a:	e795      	b.n	801afa8 <__gethex+0x174>
 801b07c:	f04f 0b03 	mov.w	fp, #3
 801b080:	e7c5      	b.n	801b00e <__gethex+0x1da>
 801b082:	da0b      	bge.n	801b09c <__gethex+0x268>
 801b084:	eba5 0800 	sub.w	r8, r5, r0
 801b088:	4621      	mov	r1, r4
 801b08a:	4642      	mov	r2, r8
 801b08c:	4648      	mov	r0, r9
 801b08e:	f000 fee7 	bl	801be60 <__lshift>
 801b092:	eba6 0608 	sub.w	r6, r6, r8
 801b096:	4604      	mov	r4, r0
 801b098:	f100 0a14 	add.w	sl, r0, #20
 801b09c:	f04f 0b00 	mov.w	fp, #0
 801b0a0:	e7ba      	b.n	801b018 <__gethex+0x1e4>
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	42b3      	cmp	r3, r6
 801b0a6:	dd73      	ble.n	801b190 <__gethex+0x35c>
 801b0a8:	1b9e      	subs	r6, r3, r6
 801b0aa:	42b5      	cmp	r5, r6
 801b0ac:	dc34      	bgt.n	801b118 <__gethex+0x2e4>
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	2b02      	cmp	r3, #2
 801b0b2:	d023      	beq.n	801b0fc <__gethex+0x2c8>
 801b0b4:	2b03      	cmp	r3, #3
 801b0b6:	d025      	beq.n	801b104 <__gethex+0x2d0>
 801b0b8:	2b01      	cmp	r3, #1
 801b0ba:	d115      	bne.n	801b0e8 <__gethex+0x2b4>
 801b0bc:	42b5      	cmp	r5, r6
 801b0be:	d113      	bne.n	801b0e8 <__gethex+0x2b4>
 801b0c0:	2d01      	cmp	r5, #1
 801b0c2:	d10b      	bne.n	801b0dc <__gethex+0x2a8>
 801b0c4:	9a02      	ldr	r2, [sp, #8]
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	6013      	str	r3, [r2, #0]
 801b0ca:	2301      	movs	r3, #1
 801b0cc:	6123      	str	r3, [r4, #16]
 801b0ce:	f8ca 3000 	str.w	r3, [sl]
 801b0d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0d4:	f04f 0862 	mov.w	r8, #98	; 0x62
 801b0d8:	601c      	str	r4, [r3, #0]
 801b0da:	e735      	b.n	801af48 <__gethex+0x114>
 801b0dc:	1e69      	subs	r1, r5, #1
 801b0de:	4620      	mov	r0, r4
 801b0e0:	f001 f8f0 	bl	801c2c4 <__any_on>
 801b0e4:	2800      	cmp	r0, #0
 801b0e6:	d1ed      	bne.n	801b0c4 <__gethex+0x290>
 801b0e8:	4621      	mov	r1, r4
 801b0ea:	4648      	mov	r0, r9
 801b0ec:	f000 fc9e 	bl	801ba2c <_Bfree>
 801b0f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	6013      	str	r3, [r2, #0]
 801b0f6:	f04f 0850 	mov.w	r8, #80	; 0x50
 801b0fa:	e725      	b.n	801af48 <__gethex+0x114>
 801b0fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d1f2      	bne.n	801b0e8 <__gethex+0x2b4>
 801b102:	e7df      	b.n	801b0c4 <__gethex+0x290>
 801b104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b106:	2b00      	cmp	r3, #0
 801b108:	d1dc      	bne.n	801b0c4 <__gethex+0x290>
 801b10a:	e7ed      	b.n	801b0e8 <__gethex+0x2b4>
 801b10c:	0801fb45 	.word	0x0801fb45
 801b110:	0801fd1d 	.word	0x0801fd1d
 801b114:	0801fd2e 	.word	0x0801fd2e
 801b118:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 801b11c:	f1bb 0f00 	cmp.w	fp, #0
 801b120:	d133      	bne.n	801b18a <__gethex+0x356>
 801b122:	f1b8 0f00 	cmp.w	r8, #0
 801b126:	d004      	beq.n	801b132 <__gethex+0x2fe>
 801b128:	4641      	mov	r1, r8
 801b12a:	4620      	mov	r0, r4
 801b12c:	f001 f8ca 	bl	801c2c4 <__any_on>
 801b130:	4683      	mov	fp, r0
 801b132:	ea4f 1268 	mov.w	r2, r8, asr #5
 801b136:	2301      	movs	r3, #1
 801b138:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b13c:	f008 081f 	and.w	r8, r8, #31
 801b140:	fa03 f308 	lsl.w	r3, r3, r8
 801b144:	4213      	tst	r3, r2
 801b146:	4631      	mov	r1, r6
 801b148:	4620      	mov	r0, r4
 801b14a:	bf18      	it	ne
 801b14c:	f04b 0b02 	orrne.w	fp, fp, #2
 801b150:	1bad      	subs	r5, r5, r6
 801b152:	f7ff fe07 	bl	801ad64 <rshift>
 801b156:	687e      	ldr	r6, [r7, #4]
 801b158:	f04f 0802 	mov.w	r8, #2
 801b15c:	f1bb 0f00 	cmp.w	fp, #0
 801b160:	d04a      	beq.n	801b1f8 <__gethex+0x3c4>
 801b162:	68fb      	ldr	r3, [r7, #12]
 801b164:	2b02      	cmp	r3, #2
 801b166:	d016      	beq.n	801b196 <__gethex+0x362>
 801b168:	2b03      	cmp	r3, #3
 801b16a:	d018      	beq.n	801b19e <__gethex+0x36a>
 801b16c:	2b01      	cmp	r3, #1
 801b16e:	d109      	bne.n	801b184 <__gethex+0x350>
 801b170:	f01b 0f02 	tst.w	fp, #2
 801b174:	d006      	beq.n	801b184 <__gethex+0x350>
 801b176:	f8da 3000 	ldr.w	r3, [sl]
 801b17a:	ea4b 0b03 	orr.w	fp, fp, r3
 801b17e:	f01b 0f01 	tst.w	fp, #1
 801b182:	d10f      	bne.n	801b1a4 <__gethex+0x370>
 801b184:	f048 0810 	orr.w	r8, r8, #16
 801b188:	e036      	b.n	801b1f8 <__gethex+0x3c4>
 801b18a:	f04f 0b01 	mov.w	fp, #1
 801b18e:	e7d0      	b.n	801b132 <__gethex+0x2fe>
 801b190:	f04f 0801 	mov.w	r8, #1
 801b194:	e7e2      	b.n	801b15c <__gethex+0x328>
 801b196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b198:	f1c3 0301 	rsb	r3, r3, #1
 801b19c:	930f      	str	r3, [sp, #60]	; 0x3c
 801b19e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d0ef      	beq.n	801b184 <__gethex+0x350>
 801b1a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b1a8:	f104 0214 	add.w	r2, r4, #20
 801b1ac:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801b1b0:	9301      	str	r3, [sp, #4]
 801b1b2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801b1b6:	2300      	movs	r3, #0
 801b1b8:	4694      	mov	ip, r2
 801b1ba:	f852 1b04 	ldr.w	r1, [r2], #4
 801b1be:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801b1c2:	d01e      	beq.n	801b202 <__gethex+0x3ce>
 801b1c4:	3101      	adds	r1, #1
 801b1c6:	f8cc 1000 	str.w	r1, [ip]
 801b1ca:	f1b8 0f02 	cmp.w	r8, #2
 801b1ce:	f104 0214 	add.w	r2, r4, #20
 801b1d2:	d13d      	bne.n	801b250 <__gethex+0x41c>
 801b1d4:	683b      	ldr	r3, [r7, #0]
 801b1d6:	3b01      	subs	r3, #1
 801b1d8:	42ab      	cmp	r3, r5
 801b1da:	d10b      	bne.n	801b1f4 <__gethex+0x3c0>
 801b1dc:	1169      	asrs	r1, r5, #5
 801b1de:	2301      	movs	r3, #1
 801b1e0:	f005 051f 	and.w	r5, r5, #31
 801b1e4:	fa03 f505 	lsl.w	r5, r3, r5
 801b1e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b1ec:	421d      	tst	r5, r3
 801b1ee:	bf18      	it	ne
 801b1f0:	f04f 0801 	movne.w	r8, #1
 801b1f4:	f048 0820 	orr.w	r8, r8, #32
 801b1f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b1fa:	601c      	str	r4, [r3, #0]
 801b1fc:	9b02      	ldr	r3, [sp, #8]
 801b1fe:	601e      	str	r6, [r3, #0]
 801b200:	e6a2      	b.n	801af48 <__gethex+0x114>
 801b202:	4290      	cmp	r0, r2
 801b204:	f842 3c04 	str.w	r3, [r2, #-4]
 801b208:	d8d6      	bhi.n	801b1b8 <__gethex+0x384>
 801b20a:	68a2      	ldr	r2, [r4, #8]
 801b20c:	4593      	cmp	fp, r2
 801b20e:	db17      	blt.n	801b240 <__gethex+0x40c>
 801b210:	6861      	ldr	r1, [r4, #4]
 801b212:	4648      	mov	r0, r9
 801b214:	3101      	adds	r1, #1
 801b216:	f000 fbc9 	bl	801b9ac <_Balloc>
 801b21a:	4682      	mov	sl, r0
 801b21c:	b918      	cbnz	r0, 801b226 <__gethex+0x3f2>
 801b21e:	4b1b      	ldr	r3, [pc, #108]	; (801b28c <__gethex+0x458>)
 801b220:	4602      	mov	r2, r0
 801b222:	2184      	movs	r1, #132	; 0x84
 801b224:	e6b3      	b.n	801af8e <__gethex+0x15a>
 801b226:	6922      	ldr	r2, [r4, #16]
 801b228:	3202      	adds	r2, #2
 801b22a:	f104 010c 	add.w	r1, r4, #12
 801b22e:	0092      	lsls	r2, r2, #2
 801b230:	300c      	adds	r0, #12
 801b232:	f7fe feb3 	bl	8019f9c <memcpy>
 801b236:	4621      	mov	r1, r4
 801b238:	4648      	mov	r0, r9
 801b23a:	f000 fbf7 	bl	801ba2c <_Bfree>
 801b23e:	4654      	mov	r4, sl
 801b240:	6922      	ldr	r2, [r4, #16]
 801b242:	1c51      	adds	r1, r2, #1
 801b244:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801b248:	6121      	str	r1, [r4, #16]
 801b24a:	2101      	movs	r1, #1
 801b24c:	6151      	str	r1, [r2, #20]
 801b24e:	e7bc      	b.n	801b1ca <__gethex+0x396>
 801b250:	6921      	ldr	r1, [r4, #16]
 801b252:	4559      	cmp	r1, fp
 801b254:	dd0b      	ble.n	801b26e <__gethex+0x43a>
 801b256:	2101      	movs	r1, #1
 801b258:	4620      	mov	r0, r4
 801b25a:	f7ff fd83 	bl	801ad64 <rshift>
 801b25e:	68bb      	ldr	r3, [r7, #8]
 801b260:	3601      	adds	r6, #1
 801b262:	42b3      	cmp	r3, r6
 801b264:	f6ff aedb 	blt.w	801b01e <__gethex+0x1ea>
 801b268:	f04f 0801 	mov.w	r8, #1
 801b26c:	e7c2      	b.n	801b1f4 <__gethex+0x3c0>
 801b26e:	f015 051f 	ands.w	r5, r5, #31
 801b272:	d0f9      	beq.n	801b268 <__gethex+0x434>
 801b274:	9b01      	ldr	r3, [sp, #4]
 801b276:	441a      	add	r2, r3
 801b278:	f1c5 0520 	rsb	r5, r5, #32
 801b27c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801b280:	f000 fc86 	bl	801bb90 <__hi0bits>
 801b284:	42a8      	cmp	r0, r5
 801b286:	dbe6      	blt.n	801b256 <__gethex+0x422>
 801b288:	e7ee      	b.n	801b268 <__gethex+0x434>
 801b28a:	bf00      	nop
 801b28c:	0801fd1d 	.word	0x0801fd1d

0801b290 <L_shift>:
 801b290:	f1c2 0208 	rsb	r2, r2, #8
 801b294:	0092      	lsls	r2, r2, #2
 801b296:	b570      	push	{r4, r5, r6, lr}
 801b298:	f1c2 0620 	rsb	r6, r2, #32
 801b29c:	6843      	ldr	r3, [r0, #4]
 801b29e:	6804      	ldr	r4, [r0, #0]
 801b2a0:	fa03 f506 	lsl.w	r5, r3, r6
 801b2a4:	432c      	orrs	r4, r5
 801b2a6:	40d3      	lsrs	r3, r2
 801b2a8:	6004      	str	r4, [r0, #0]
 801b2aa:	f840 3f04 	str.w	r3, [r0, #4]!
 801b2ae:	4288      	cmp	r0, r1
 801b2b0:	d3f4      	bcc.n	801b29c <L_shift+0xc>
 801b2b2:	bd70      	pop	{r4, r5, r6, pc}

0801b2b4 <__match>:
 801b2b4:	b530      	push	{r4, r5, lr}
 801b2b6:	6803      	ldr	r3, [r0, #0]
 801b2b8:	3301      	adds	r3, #1
 801b2ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b2be:	b914      	cbnz	r4, 801b2c6 <__match+0x12>
 801b2c0:	6003      	str	r3, [r0, #0]
 801b2c2:	2001      	movs	r0, #1
 801b2c4:	bd30      	pop	{r4, r5, pc}
 801b2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801b2ce:	2d19      	cmp	r5, #25
 801b2d0:	bf98      	it	ls
 801b2d2:	3220      	addls	r2, #32
 801b2d4:	42a2      	cmp	r2, r4
 801b2d6:	d0f0      	beq.n	801b2ba <__match+0x6>
 801b2d8:	2000      	movs	r0, #0
 801b2da:	e7f3      	b.n	801b2c4 <__match+0x10>

0801b2dc <__hexnan>:
 801b2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2e0:	680b      	ldr	r3, [r1, #0]
 801b2e2:	6801      	ldr	r1, [r0, #0]
 801b2e4:	115e      	asrs	r6, r3, #5
 801b2e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801b2ea:	f013 031f 	ands.w	r3, r3, #31
 801b2ee:	b087      	sub	sp, #28
 801b2f0:	bf18      	it	ne
 801b2f2:	3604      	addne	r6, #4
 801b2f4:	2500      	movs	r5, #0
 801b2f6:	1f37      	subs	r7, r6, #4
 801b2f8:	4682      	mov	sl, r0
 801b2fa:	4690      	mov	r8, r2
 801b2fc:	9301      	str	r3, [sp, #4]
 801b2fe:	f846 5c04 	str.w	r5, [r6, #-4]
 801b302:	46b9      	mov	r9, r7
 801b304:	463c      	mov	r4, r7
 801b306:	9502      	str	r5, [sp, #8]
 801b308:	46ab      	mov	fp, r5
 801b30a:	784a      	ldrb	r2, [r1, #1]
 801b30c:	1c4b      	adds	r3, r1, #1
 801b30e:	9303      	str	r3, [sp, #12]
 801b310:	b342      	cbz	r2, 801b364 <__hexnan+0x88>
 801b312:	4610      	mov	r0, r2
 801b314:	9105      	str	r1, [sp, #20]
 801b316:	9204      	str	r2, [sp, #16]
 801b318:	f7ff fd76 	bl	801ae08 <__hexdig_fun>
 801b31c:	2800      	cmp	r0, #0
 801b31e:	d14f      	bne.n	801b3c0 <__hexnan+0xe4>
 801b320:	9a04      	ldr	r2, [sp, #16]
 801b322:	9905      	ldr	r1, [sp, #20]
 801b324:	2a20      	cmp	r2, #32
 801b326:	d818      	bhi.n	801b35a <__hexnan+0x7e>
 801b328:	9b02      	ldr	r3, [sp, #8]
 801b32a:	459b      	cmp	fp, r3
 801b32c:	dd13      	ble.n	801b356 <__hexnan+0x7a>
 801b32e:	454c      	cmp	r4, r9
 801b330:	d206      	bcs.n	801b340 <__hexnan+0x64>
 801b332:	2d07      	cmp	r5, #7
 801b334:	dc04      	bgt.n	801b340 <__hexnan+0x64>
 801b336:	462a      	mov	r2, r5
 801b338:	4649      	mov	r1, r9
 801b33a:	4620      	mov	r0, r4
 801b33c:	f7ff ffa8 	bl	801b290 <L_shift>
 801b340:	4544      	cmp	r4, r8
 801b342:	d950      	bls.n	801b3e6 <__hexnan+0x10a>
 801b344:	2300      	movs	r3, #0
 801b346:	f1a4 0904 	sub.w	r9, r4, #4
 801b34a:	f844 3c04 	str.w	r3, [r4, #-4]
 801b34e:	f8cd b008 	str.w	fp, [sp, #8]
 801b352:	464c      	mov	r4, r9
 801b354:	461d      	mov	r5, r3
 801b356:	9903      	ldr	r1, [sp, #12]
 801b358:	e7d7      	b.n	801b30a <__hexnan+0x2e>
 801b35a:	2a29      	cmp	r2, #41	; 0x29
 801b35c:	d155      	bne.n	801b40a <__hexnan+0x12e>
 801b35e:	3102      	adds	r1, #2
 801b360:	f8ca 1000 	str.w	r1, [sl]
 801b364:	f1bb 0f00 	cmp.w	fp, #0
 801b368:	d04f      	beq.n	801b40a <__hexnan+0x12e>
 801b36a:	454c      	cmp	r4, r9
 801b36c:	d206      	bcs.n	801b37c <__hexnan+0xa0>
 801b36e:	2d07      	cmp	r5, #7
 801b370:	dc04      	bgt.n	801b37c <__hexnan+0xa0>
 801b372:	462a      	mov	r2, r5
 801b374:	4649      	mov	r1, r9
 801b376:	4620      	mov	r0, r4
 801b378:	f7ff ff8a 	bl	801b290 <L_shift>
 801b37c:	4544      	cmp	r4, r8
 801b37e:	d934      	bls.n	801b3ea <__hexnan+0x10e>
 801b380:	f1a8 0204 	sub.w	r2, r8, #4
 801b384:	4623      	mov	r3, r4
 801b386:	f853 1b04 	ldr.w	r1, [r3], #4
 801b38a:	f842 1f04 	str.w	r1, [r2, #4]!
 801b38e:	429f      	cmp	r7, r3
 801b390:	d2f9      	bcs.n	801b386 <__hexnan+0xaa>
 801b392:	1b3b      	subs	r3, r7, r4
 801b394:	f023 0303 	bic.w	r3, r3, #3
 801b398:	3304      	adds	r3, #4
 801b39a:	3e03      	subs	r6, #3
 801b39c:	3401      	adds	r4, #1
 801b39e:	42a6      	cmp	r6, r4
 801b3a0:	bf38      	it	cc
 801b3a2:	2304      	movcc	r3, #4
 801b3a4:	4443      	add	r3, r8
 801b3a6:	2200      	movs	r2, #0
 801b3a8:	f843 2b04 	str.w	r2, [r3], #4
 801b3ac:	429f      	cmp	r7, r3
 801b3ae:	d2fb      	bcs.n	801b3a8 <__hexnan+0xcc>
 801b3b0:	683b      	ldr	r3, [r7, #0]
 801b3b2:	b91b      	cbnz	r3, 801b3bc <__hexnan+0xe0>
 801b3b4:	4547      	cmp	r7, r8
 801b3b6:	d126      	bne.n	801b406 <__hexnan+0x12a>
 801b3b8:	2301      	movs	r3, #1
 801b3ba:	603b      	str	r3, [r7, #0]
 801b3bc:	2005      	movs	r0, #5
 801b3be:	e025      	b.n	801b40c <__hexnan+0x130>
 801b3c0:	3501      	adds	r5, #1
 801b3c2:	2d08      	cmp	r5, #8
 801b3c4:	f10b 0b01 	add.w	fp, fp, #1
 801b3c8:	dd06      	ble.n	801b3d8 <__hexnan+0xfc>
 801b3ca:	4544      	cmp	r4, r8
 801b3cc:	d9c3      	bls.n	801b356 <__hexnan+0x7a>
 801b3ce:	2300      	movs	r3, #0
 801b3d0:	f844 3c04 	str.w	r3, [r4, #-4]
 801b3d4:	2501      	movs	r5, #1
 801b3d6:	3c04      	subs	r4, #4
 801b3d8:	6822      	ldr	r2, [r4, #0]
 801b3da:	f000 000f 	and.w	r0, r0, #15
 801b3de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b3e2:	6020      	str	r0, [r4, #0]
 801b3e4:	e7b7      	b.n	801b356 <__hexnan+0x7a>
 801b3e6:	2508      	movs	r5, #8
 801b3e8:	e7b5      	b.n	801b356 <__hexnan+0x7a>
 801b3ea:	9b01      	ldr	r3, [sp, #4]
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d0df      	beq.n	801b3b0 <__hexnan+0xd4>
 801b3f0:	f1c3 0320 	rsb	r3, r3, #32
 801b3f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b3f8:	40da      	lsrs	r2, r3
 801b3fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801b3fe:	4013      	ands	r3, r2
 801b400:	f846 3c04 	str.w	r3, [r6, #-4]
 801b404:	e7d4      	b.n	801b3b0 <__hexnan+0xd4>
 801b406:	3f04      	subs	r7, #4
 801b408:	e7d2      	b.n	801b3b0 <__hexnan+0xd4>
 801b40a:	2004      	movs	r0, #4
 801b40c:	b007      	add	sp, #28
 801b40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b412 <__ssputs_r>:
 801b412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b416:	688e      	ldr	r6, [r1, #8]
 801b418:	461f      	mov	r7, r3
 801b41a:	42be      	cmp	r6, r7
 801b41c:	680b      	ldr	r3, [r1, #0]
 801b41e:	4682      	mov	sl, r0
 801b420:	460c      	mov	r4, r1
 801b422:	4690      	mov	r8, r2
 801b424:	d82c      	bhi.n	801b480 <__ssputs_r+0x6e>
 801b426:	898a      	ldrh	r2, [r1, #12]
 801b428:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b42c:	d026      	beq.n	801b47c <__ssputs_r+0x6a>
 801b42e:	6965      	ldr	r5, [r4, #20]
 801b430:	6909      	ldr	r1, [r1, #16]
 801b432:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b436:	eba3 0901 	sub.w	r9, r3, r1
 801b43a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b43e:	1c7b      	adds	r3, r7, #1
 801b440:	444b      	add	r3, r9
 801b442:	106d      	asrs	r5, r5, #1
 801b444:	429d      	cmp	r5, r3
 801b446:	bf38      	it	cc
 801b448:	461d      	movcc	r5, r3
 801b44a:	0553      	lsls	r3, r2, #21
 801b44c:	d527      	bpl.n	801b49e <__ssputs_r+0x8c>
 801b44e:	4629      	mov	r1, r5
 801b450:	f000 f960 	bl	801b714 <_malloc_r>
 801b454:	4606      	mov	r6, r0
 801b456:	b360      	cbz	r0, 801b4b2 <__ssputs_r+0xa0>
 801b458:	6921      	ldr	r1, [r4, #16]
 801b45a:	464a      	mov	r2, r9
 801b45c:	f7fe fd9e 	bl	8019f9c <memcpy>
 801b460:	89a3      	ldrh	r3, [r4, #12]
 801b462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b46a:	81a3      	strh	r3, [r4, #12]
 801b46c:	6126      	str	r6, [r4, #16]
 801b46e:	6165      	str	r5, [r4, #20]
 801b470:	444e      	add	r6, r9
 801b472:	eba5 0509 	sub.w	r5, r5, r9
 801b476:	6026      	str	r6, [r4, #0]
 801b478:	60a5      	str	r5, [r4, #8]
 801b47a:	463e      	mov	r6, r7
 801b47c:	42be      	cmp	r6, r7
 801b47e:	d900      	bls.n	801b482 <__ssputs_r+0x70>
 801b480:	463e      	mov	r6, r7
 801b482:	6820      	ldr	r0, [r4, #0]
 801b484:	4632      	mov	r2, r6
 801b486:	4641      	mov	r1, r8
 801b488:	f000 ffbc 	bl	801c404 <memmove>
 801b48c:	68a3      	ldr	r3, [r4, #8]
 801b48e:	1b9b      	subs	r3, r3, r6
 801b490:	60a3      	str	r3, [r4, #8]
 801b492:	6823      	ldr	r3, [r4, #0]
 801b494:	4433      	add	r3, r6
 801b496:	6023      	str	r3, [r4, #0]
 801b498:	2000      	movs	r0, #0
 801b49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b49e:	462a      	mov	r2, r5
 801b4a0:	f000 ff74 	bl	801c38c <_realloc_r>
 801b4a4:	4606      	mov	r6, r0
 801b4a6:	2800      	cmp	r0, #0
 801b4a8:	d1e0      	bne.n	801b46c <__ssputs_r+0x5a>
 801b4aa:	6921      	ldr	r1, [r4, #16]
 801b4ac:	4650      	mov	r0, sl
 801b4ae:	f7ff fc0d 	bl	801accc <_free_r>
 801b4b2:	230c      	movs	r3, #12
 801b4b4:	f8ca 3000 	str.w	r3, [sl]
 801b4b8:	89a3      	ldrh	r3, [r4, #12]
 801b4ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b4be:	81a3      	strh	r3, [r4, #12]
 801b4c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b4c4:	e7e9      	b.n	801b49a <__ssputs_r+0x88>
	...

0801b4c8 <_svfiprintf_r>:
 801b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4cc:	4698      	mov	r8, r3
 801b4ce:	898b      	ldrh	r3, [r1, #12]
 801b4d0:	061b      	lsls	r3, r3, #24
 801b4d2:	b09d      	sub	sp, #116	; 0x74
 801b4d4:	4607      	mov	r7, r0
 801b4d6:	460d      	mov	r5, r1
 801b4d8:	4614      	mov	r4, r2
 801b4da:	d50e      	bpl.n	801b4fa <_svfiprintf_r+0x32>
 801b4dc:	690b      	ldr	r3, [r1, #16]
 801b4de:	b963      	cbnz	r3, 801b4fa <_svfiprintf_r+0x32>
 801b4e0:	2140      	movs	r1, #64	; 0x40
 801b4e2:	f000 f917 	bl	801b714 <_malloc_r>
 801b4e6:	6028      	str	r0, [r5, #0]
 801b4e8:	6128      	str	r0, [r5, #16]
 801b4ea:	b920      	cbnz	r0, 801b4f6 <_svfiprintf_r+0x2e>
 801b4ec:	230c      	movs	r3, #12
 801b4ee:	603b      	str	r3, [r7, #0]
 801b4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b4f4:	e0d0      	b.n	801b698 <_svfiprintf_r+0x1d0>
 801b4f6:	2340      	movs	r3, #64	; 0x40
 801b4f8:	616b      	str	r3, [r5, #20]
 801b4fa:	2300      	movs	r3, #0
 801b4fc:	9309      	str	r3, [sp, #36]	; 0x24
 801b4fe:	2320      	movs	r3, #32
 801b500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b504:	f8cd 800c 	str.w	r8, [sp, #12]
 801b508:	2330      	movs	r3, #48	; 0x30
 801b50a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b6b0 <_svfiprintf_r+0x1e8>
 801b50e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b512:	f04f 0901 	mov.w	r9, #1
 801b516:	4623      	mov	r3, r4
 801b518:	469a      	mov	sl, r3
 801b51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b51e:	b10a      	cbz	r2, 801b524 <_svfiprintf_r+0x5c>
 801b520:	2a25      	cmp	r2, #37	; 0x25
 801b522:	d1f9      	bne.n	801b518 <_svfiprintf_r+0x50>
 801b524:	ebba 0b04 	subs.w	fp, sl, r4
 801b528:	d00b      	beq.n	801b542 <_svfiprintf_r+0x7a>
 801b52a:	465b      	mov	r3, fp
 801b52c:	4622      	mov	r2, r4
 801b52e:	4629      	mov	r1, r5
 801b530:	4638      	mov	r0, r7
 801b532:	f7ff ff6e 	bl	801b412 <__ssputs_r>
 801b536:	3001      	adds	r0, #1
 801b538:	f000 80a9 	beq.w	801b68e <_svfiprintf_r+0x1c6>
 801b53c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b53e:	445a      	add	r2, fp
 801b540:	9209      	str	r2, [sp, #36]	; 0x24
 801b542:	f89a 3000 	ldrb.w	r3, [sl]
 801b546:	2b00      	cmp	r3, #0
 801b548:	f000 80a1 	beq.w	801b68e <_svfiprintf_r+0x1c6>
 801b54c:	2300      	movs	r3, #0
 801b54e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b556:	f10a 0a01 	add.w	sl, sl, #1
 801b55a:	9304      	str	r3, [sp, #16]
 801b55c:	9307      	str	r3, [sp, #28]
 801b55e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b562:	931a      	str	r3, [sp, #104]	; 0x68
 801b564:	4654      	mov	r4, sl
 801b566:	2205      	movs	r2, #5
 801b568:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b56c:	4850      	ldr	r0, [pc, #320]	; (801b6b0 <_svfiprintf_r+0x1e8>)
 801b56e:	f7e4 fe2f 	bl	80001d0 <memchr>
 801b572:	9a04      	ldr	r2, [sp, #16]
 801b574:	b9d8      	cbnz	r0, 801b5ae <_svfiprintf_r+0xe6>
 801b576:	06d0      	lsls	r0, r2, #27
 801b578:	bf44      	itt	mi
 801b57a:	2320      	movmi	r3, #32
 801b57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b580:	0711      	lsls	r1, r2, #28
 801b582:	bf44      	itt	mi
 801b584:	232b      	movmi	r3, #43	; 0x2b
 801b586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b58a:	f89a 3000 	ldrb.w	r3, [sl]
 801b58e:	2b2a      	cmp	r3, #42	; 0x2a
 801b590:	d015      	beq.n	801b5be <_svfiprintf_r+0xf6>
 801b592:	9a07      	ldr	r2, [sp, #28]
 801b594:	4654      	mov	r4, sl
 801b596:	2000      	movs	r0, #0
 801b598:	f04f 0c0a 	mov.w	ip, #10
 801b59c:	4621      	mov	r1, r4
 801b59e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b5a2:	3b30      	subs	r3, #48	; 0x30
 801b5a4:	2b09      	cmp	r3, #9
 801b5a6:	d94d      	bls.n	801b644 <_svfiprintf_r+0x17c>
 801b5a8:	b1b0      	cbz	r0, 801b5d8 <_svfiprintf_r+0x110>
 801b5aa:	9207      	str	r2, [sp, #28]
 801b5ac:	e014      	b.n	801b5d8 <_svfiprintf_r+0x110>
 801b5ae:	eba0 0308 	sub.w	r3, r0, r8
 801b5b2:	fa09 f303 	lsl.w	r3, r9, r3
 801b5b6:	4313      	orrs	r3, r2
 801b5b8:	9304      	str	r3, [sp, #16]
 801b5ba:	46a2      	mov	sl, r4
 801b5bc:	e7d2      	b.n	801b564 <_svfiprintf_r+0x9c>
 801b5be:	9b03      	ldr	r3, [sp, #12]
 801b5c0:	1d19      	adds	r1, r3, #4
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	9103      	str	r1, [sp, #12]
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	bfbb      	ittet	lt
 801b5ca:	425b      	neglt	r3, r3
 801b5cc:	f042 0202 	orrlt.w	r2, r2, #2
 801b5d0:	9307      	strge	r3, [sp, #28]
 801b5d2:	9307      	strlt	r3, [sp, #28]
 801b5d4:	bfb8      	it	lt
 801b5d6:	9204      	strlt	r2, [sp, #16]
 801b5d8:	7823      	ldrb	r3, [r4, #0]
 801b5da:	2b2e      	cmp	r3, #46	; 0x2e
 801b5dc:	d10c      	bne.n	801b5f8 <_svfiprintf_r+0x130>
 801b5de:	7863      	ldrb	r3, [r4, #1]
 801b5e0:	2b2a      	cmp	r3, #42	; 0x2a
 801b5e2:	d134      	bne.n	801b64e <_svfiprintf_r+0x186>
 801b5e4:	9b03      	ldr	r3, [sp, #12]
 801b5e6:	1d1a      	adds	r2, r3, #4
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	9203      	str	r2, [sp, #12]
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	bfb8      	it	lt
 801b5f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b5f4:	3402      	adds	r4, #2
 801b5f6:	9305      	str	r3, [sp, #20]
 801b5f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801b6c0 <_svfiprintf_r+0x1f8>
 801b5fc:	7821      	ldrb	r1, [r4, #0]
 801b5fe:	2203      	movs	r2, #3
 801b600:	4650      	mov	r0, sl
 801b602:	f7e4 fde5 	bl	80001d0 <memchr>
 801b606:	b138      	cbz	r0, 801b618 <_svfiprintf_r+0x150>
 801b608:	9b04      	ldr	r3, [sp, #16]
 801b60a:	eba0 000a 	sub.w	r0, r0, sl
 801b60e:	2240      	movs	r2, #64	; 0x40
 801b610:	4082      	lsls	r2, r0
 801b612:	4313      	orrs	r3, r2
 801b614:	3401      	adds	r4, #1
 801b616:	9304      	str	r3, [sp, #16]
 801b618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b61c:	4825      	ldr	r0, [pc, #148]	; (801b6b4 <_svfiprintf_r+0x1ec>)
 801b61e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b622:	2206      	movs	r2, #6
 801b624:	f7e4 fdd4 	bl	80001d0 <memchr>
 801b628:	2800      	cmp	r0, #0
 801b62a:	d038      	beq.n	801b69e <_svfiprintf_r+0x1d6>
 801b62c:	4b22      	ldr	r3, [pc, #136]	; (801b6b8 <_svfiprintf_r+0x1f0>)
 801b62e:	bb1b      	cbnz	r3, 801b678 <_svfiprintf_r+0x1b0>
 801b630:	9b03      	ldr	r3, [sp, #12]
 801b632:	3307      	adds	r3, #7
 801b634:	f023 0307 	bic.w	r3, r3, #7
 801b638:	3308      	adds	r3, #8
 801b63a:	9303      	str	r3, [sp, #12]
 801b63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b63e:	4433      	add	r3, r6
 801b640:	9309      	str	r3, [sp, #36]	; 0x24
 801b642:	e768      	b.n	801b516 <_svfiprintf_r+0x4e>
 801b644:	fb0c 3202 	mla	r2, ip, r2, r3
 801b648:	460c      	mov	r4, r1
 801b64a:	2001      	movs	r0, #1
 801b64c:	e7a6      	b.n	801b59c <_svfiprintf_r+0xd4>
 801b64e:	2300      	movs	r3, #0
 801b650:	3401      	adds	r4, #1
 801b652:	9305      	str	r3, [sp, #20]
 801b654:	4619      	mov	r1, r3
 801b656:	f04f 0c0a 	mov.w	ip, #10
 801b65a:	4620      	mov	r0, r4
 801b65c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b660:	3a30      	subs	r2, #48	; 0x30
 801b662:	2a09      	cmp	r2, #9
 801b664:	d903      	bls.n	801b66e <_svfiprintf_r+0x1a6>
 801b666:	2b00      	cmp	r3, #0
 801b668:	d0c6      	beq.n	801b5f8 <_svfiprintf_r+0x130>
 801b66a:	9105      	str	r1, [sp, #20]
 801b66c:	e7c4      	b.n	801b5f8 <_svfiprintf_r+0x130>
 801b66e:	fb0c 2101 	mla	r1, ip, r1, r2
 801b672:	4604      	mov	r4, r0
 801b674:	2301      	movs	r3, #1
 801b676:	e7f0      	b.n	801b65a <_svfiprintf_r+0x192>
 801b678:	ab03      	add	r3, sp, #12
 801b67a:	9300      	str	r3, [sp, #0]
 801b67c:	462a      	mov	r2, r5
 801b67e:	4b0f      	ldr	r3, [pc, #60]	; (801b6bc <_svfiprintf_r+0x1f4>)
 801b680:	a904      	add	r1, sp, #16
 801b682:	4638      	mov	r0, r7
 801b684:	f7fc fea4 	bl	80183d0 <_printf_float>
 801b688:	1c42      	adds	r2, r0, #1
 801b68a:	4606      	mov	r6, r0
 801b68c:	d1d6      	bne.n	801b63c <_svfiprintf_r+0x174>
 801b68e:	89ab      	ldrh	r3, [r5, #12]
 801b690:	065b      	lsls	r3, r3, #25
 801b692:	f53f af2d 	bmi.w	801b4f0 <_svfiprintf_r+0x28>
 801b696:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b698:	b01d      	add	sp, #116	; 0x74
 801b69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b69e:	ab03      	add	r3, sp, #12
 801b6a0:	9300      	str	r3, [sp, #0]
 801b6a2:	462a      	mov	r2, r5
 801b6a4:	4b05      	ldr	r3, [pc, #20]	; (801b6bc <_svfiprintf_r+0x1f4>)
 801b6a6:	a904      	add	r1, sp, #16
 801b6a8:	4638      	mov	r0, r7
 801b6aa:	f7fd f935 	bl	8018918 <_printf_i>
 801b6ae:	e7eb      	b.n	801b688 <_svfiprintf_r+0x1c0>
 801b6b0:	0801fd8e 	.word	0x0801fd8e
 801b6b4:	0801fd98 	.word	0x0801fd98
 801b6b8:	080183d1 	.word	0x080183d1
 801b6bc:	0801b413 	.word	0x0801b413
 801b6c0:	0801fd94 	.word	0x0801fd94

0801b6c4 <malloc>:
 801b6c4:	4b02      	ldr	r3, [pc, #8]	; (801b6d0 <malloc+0xc>)
 801b6c6:	4601      	mov	r1, r0
 801b6c8:	6818      	ldr	r0, [r3, #0]
 801b6ca:	f000 b823 	b.w	801b714 <_malloc_r>
 801b6ce:	bf00      	nop
 801b6d0:	200001f0 	.word	0x200001f0

0801b6d4 <sbrk_aligned>:
 801b6d4:	b570      	push	{r4, r5, r6, lr}
 801b6d6:	4e0e      	ldr	r6, [pc, #56]	; (801b710 <sbrk_aligned+0x3c>)
 801b6d8:	460c      	mov	r4, r1
 801b6da:	6831      	ldr	r1, [r6, #0]
 801b6dc:	4605      	mov	r5, r0
 801b6de:	b911      	cbnz	r1, 801b6e6 <sbrk_aligned+0x12>
 801b6e0:	f000 fede 	bl	801c4a0 <_sbrk_r>
 801b6e4:	6030      	str	r0, [r6, #0]
 801b6e6:	4621      	mov	r1, r4
 801b6e8:	4628      	mov	r0, r5
 801b6ea:	f000 fed9 	bl	801c4a0 <_sbrk_r>
 801b6ee:	1c43      	adds	r3, r0, #1
 801b6f0:	d00a      	beq.n	801b708 <sbrk_aligned+0x34>
 801b6f2:	1cc4      	adds	r4, r0, #3
 801b6f4:	f024 0403 	bic.w	r4, r4, #3
 801b6f8:	42a0      	cmp	r0, r4
 801b6fa:	d007      	beq.n	801b70c <sbrk_aligned+0x38>
 801b6fc:	1a21      	subs	r1, r4, r0
 801b6fe:	4628      	mov	r0, r5
 801b700:	f000 fece 	bl	801c4a0 <_sbrk_r>
 801b704:	3001      	adds	r0, #1
 801b706:	d101      	bne.n	801b70c <sbrk_aligned+0x38>
 801b708:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b70c:	4620      	mov	r0, r4
 801b70e:	bd70      	pop	{r4, r5, r6, pc}
 801b710:	20009510 	.word	0x20009510

0801b714 <_malloc_r>:
 801b714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b718:	1ccd      	adds	r5, r1, #3
 801b71a:	f025 0503 	bic.w	r5, r5, #3
 801b71e:	3508      	adds	r5, #8
 801b720:	2d0c      	cmp	r5, #12
 801b722:	bf38      	it	cc
 801b724:	250c      	movcc	r5, #12
 801b726:	2d00      	cmp	r5, #0
 801b728:	4607      	mov	r7, r0
 801b72a:	db01      	blt.n	801b730 <_malloc_r+0x1c>
 801b72c:	42a9      	cmp	r1, r5
 801b72e:	d905      	bls.n	801b73c <_malloc_r+0x28>
 801b730:	230c      	movs	r3, #12
 801b732:	603b      	str	r3, [r7, #0]
 801b734:	2600      	movs	r6, #0
 801b736:	4630      	mov	r0, r6
 801b738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b73c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b810 <_malloc_r+0xfc>
 801b740:	f000 f928 	bl	801b994 <__malloc_lock>
 801b744:	f8d8 3000 	ldr.w	r3, [r8]
 801b748:	461c      	mov	r4, r3
 801b74a:	bb5c      	cbnz	r4, 801b7a4 <_malloc_r+0x90>
 801b74c:	4629      	mov	r1, r5
 801b74e:	4638      	mov	r0, r7
 801b750:	f7ff ffc0 	bl	801b6d4 <sbrk_aligned>
 801b754:	1c43      	adds	r3, r0, #1
 801b756:	4604      	mov	r4, r0
 801b758:	d155      	bne.n	801b806 <_malloc_r+0xf2>
 801b75a:	f8d8 4000 	ldr.w	r4, [r8]
 801b75e:	4626      	mov	r6, r4
 801b760:	2e00      	cmp	r6, #0
 801b762:	d145      	bne.n	801b7f0 <_malloc_r+0xdc>
 801b764:	2c00      	cmp	r4, #0
 801b766:	d048      	beq.n	801b7fa <_malloc_r+0xe6>
 801b768:	6823      	ldr	r3, [r4, #0]
 801b76a:	4631      	mov	r1, r6
 801b76c:	4638      	mov	r0, r7
 801b76e:	eb04 0903 	add.w	r9, r4, r3
 801b772:	f000 fe95 	bl	801c4a0 <_sbrk_r>
 801b776:	4581      	cmp	r9, r0
 801b778:	d13f      	bne.n	801b7fa <_malloc_r+0xe6>
 801b77a:	6821      	ldr	r1, [r4, #0]
 801b77c:	1a6d      	subs	r5, r5, r1
 801b77e:	4629      	mov	r1, r5
 801b780:	4638      	mov	r0, r7
 801b782:	f7ff ffa7 	bl	801b6d4 <sbrk_aligned>
 801b786:	3001      	adds	r0, #1
 801b788:	d037      	beq.n	801b7fa <_malloc_r+0xe6>
 801b78a:	6823      	ldr	r3, [r4, #0]
 801b78c:	442b      	add	r3, r5
 801b78e:	6023      	str	r3, [r4, #0]
 801b790:	f8d8 3000 	ldr.w	r3, [r8]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d038      	beq.n	801b80a <_malloc_r+0xf6>
 801b798:	685a      	ldr	r2, [r3, #4]
 801b79a:	42a2      	cmp	r2, r4
 801b79c:	d12b      	bne.n	801b7f6 <_malloc_r+0xe2>
 801b79e:	2200      	movs	r2, #0
 801b7a0:	605a      	str	r2, [r3, #4]
 801b7a2:	e00f      	b.n	801b7c4 <_malloc_r+0xb0>
 801b7a4:	6822      	ldr	r2, [r4, #0]
 801b7a6:	1b52      	subs	r2, r2, r5
 801b7a8:	d41f      	bmi.n	801b7ea <_malloc_r+0xd6>
 801b7aa:	2a0b      	cmp	r2, #11
 801b7ac:	d917      	bls.n	801b7de <_malloc_r+0xca>
 801b7ae:	1961      	adds	r1, r4, r5
 801b7b0:	42a3      	cmp	r3, r4
 801b7b2:	6025      	str	r5, [r4, #0]
 801b7b4:	bf18      	it	ne
 801b7b6:	6059      	strne	r1, [r3, #4]
 801b7b8:	6863      	ldr	r3, [r4, #4]
 801b7ba:	bf08      	it	eq
 801b7bc:	f8c8 1000 	streq.w	r1, [r8]
 801b7c0:	5162      	str	r2, [r4, r5]
 801b7c2:	604b      	str	r3, [r1, #4]
 801b7c4:	4638      	mov	r0, r7
 801b7c6:	f104 060b 	add.w	r6, r4, #11
 801b7ca:	f000 f8e9 	bl	801b9a0 <__malloc_unlock>
 801b7ce:	f026 0607 	bic.w	r6, r6, #7
 801b7d2:	1d23      	adds	r3, r4, #4
 801b7d4:	1af2      	subs	r2, r6, r3
 801b7d6:	d0ae      	beq.n	801b736 <_malloc_r+0x22>
 801b7d8:	1b9b      	subs	r3, r3, r6
 801b7da:	50a3      	str	r3, [r4, r2]
 801b7dc:	e7ab      	b.n	801b736 <_malloc_r+0x22>
 801b7de:	42a3      	cmp	r3, r4
 801b7e0:	6862      	ldr	r2, [r4, #4]
 801b7e2:	d1dd      	bne.n	801b7a0 <_malloc_r+0x8c>
 801b7e4:	f8c8 2000 	str.w	r2, [r8]
 801b7e8:	e7ec      	b.n	801b7c4 <_malloc_r+0xb0>
 801b7ea:	4623      	mov	r3, r4
 801b7ec:	6864      	ldr	r4, [r4, #4]
 801b7ee:	e7ac      	b.n	801b74a <_malloc_r+0x36>
 801b7f0:	4634      	mov	r4, r6
 801b7f2:	6876      	ldr	r6, [r6, #4]
 801b7f4:	e7b4      	b.n	801b760 <_malloc_r+0x4c>
 801b7f6:	4613      	mov	r3, r2
 801b7f8:	e7cc      	b.n	801b794 <_malloc_r+0x80>
 801b7fa:	230c      	movs	r3, #12
 801b7fc:	603b      	str	r3, [r7, #0]
 801b7fe:	4638      	mov	r0, r7
 801b800:	f000 f8ce 	bl	801b9a0 <__malloc_unlock>
 801b804:	e797      	b.n	801b736 <_malloc_r+0x22>
 801b806:	6025      	str	r5, [r4, #0]
 801b808:	e7dc      	b.n	801b7c4 <_malloc_r+0xb0>
 801b80a:	605b      	str	r3, [r3, #4]
 801b80c:	deff      	udf	#255	; 0xff
 801b80e:	bf00      	nop
 801b810:	2000950c 	.word	0x2000950c

0801b814 <__ascii_mbtowc>:
 801b814:	b082      	sub	sp, #8
 801b816:	b901      	cbnz	r1, 801b81a <__ascii_mbtowc+0x6>
 801b818:	a901      	add	r1, sp, #4
 801b81a:	b142      	cbz	r2, 801b82e <__ascii_mbtowc+0x1a>
 801b81c:	b14b      	cbz	r3, 801b832 <__ascii_mbtowc+0x1e>
 801b81e:	7813      	ldrb	r3, [r2, #0]
 801b820:	600b      	str	r3, [r1, #0]
 801b822:	7812      	ldrb	r2, [r2, #0]
 801b824:	1e10      	subs	r0, r2, #0
 801b826:	bf18      	it	ne
 801b828:	2001      	movne	r0, #1
 801b82a:	b002      	add	sp, #8
 801b82c:	4770      	bx	lr
 801b82e:	4610      	mov	r0, r2
 801b830:	e7fb      	b.n	801b82a <__ascii_mbtowc+0x16>
 801b832:	f06f 0001 	mvn.w	r0, #1
 801b836:	e7f8      	b.n	801b82a <__ascii_mbtowc+0x16>

0801b838 <__sflush_r>:
 801b838:	898a      	ldrh	r2, [r1, #12]
 801b83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b83e:	4605      	mov	r5, r0
 801b840:	0710      	lsls	r0, r2, #28
 801b842:	460c      	mov	r4, r1
 801b844:	d458      	bmi.n	801b8f8 <__sflush_r+0xc0>
 801b846:	684b      	ldr	r3, [r1, #4]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	dc05      	bgt.n	801b858 <__sflush_r+0x20>
 801b84c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b84e:	2b00      	cmp	r3, #0
 801b850:	dc02      	bgt.n	801b858 <__sflush_r+0x20>
 801b852:	2000      	movs	r0, #0
 801b854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b858:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b85a:	2e00      	cmp	r6, #0
 801b85c:	d0f9      	beq.n	801b852 <__sflush_r+0x1a>
 801b85e:	2300      	movs	r3, #0
 801b860:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b864:	682f      	ldr	r7, [r5, #0]
 801b866:	6a21      	ldr	r1, [r4, #32]
 801b868:	602b      	str	r3, [r5, #0]
 801b86a:	d032      	beq.n	801b8d2 <__sflush_r+0x9a>
 801b86c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b86e:	89a3      	ldrh	r3, [r4, #12]
 801b870:	075a      	lsls	r2, r3, #29
 801b872:	d505      	bpl.n	801b880 <__sflush_r+0x48>
 801b874:	6863      	ldr	r3, [r4, #4]
 801b876:	1ac0      	subs	r0, r0, r3
 801b878:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b87a:	b10b      	cbz	r3, 801b880 <__sflush_r+0x48>
 801b87c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b87e:	1ac0      	subs	r0, r0, r3
 801b880:	2300      	movs	r3, #0
 801b882:	4602      	mov	r2, r0
 801b884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b886:	6a21      	ldr	r1, [r4, #32]
 801b888:	4628      	mov	r0, r5
 801b88a:	47b0      	blx	r6
 801b88c:	1c43      	adds	r3, r0, #1
 801b88e:	89a3      	ldrh	r3, [r4, #12]
 801b890:	d106      	bne.n	801b8a0 <__sflush_r+0x68>
 801b892:	6829      	ldr	r1, [r5, #0]
 801b894:	291d      	cmp	r1, #29
 801b896:	d82b      	bhi.n	801b8f0 <__sflush_r+0xb8>
 801b898:	4a29      	ldr	r2, [pc, #164]	; (801b940 <__sflush_r+0x108>)
 801b89a:	410a      	asrs	r2, r1
 801b89c:	07d6      	lsls	r6, r2, #31
 801b89e:	d427      	bmi.n	801b8f0 <__sflush_r+0xb8>
 801b8a0:	2200      	movs	r2, #0
 801b8a2:	6062      	str	r2, [r4, #4]
 801b8a4:	04d9      	lsls	r1, r3, #19
 801b8a6:	6922      	ldr	r2, [r4, #16]
 801b8a8:	6022      	str	r2, [r4, #0]
 801b8aa:	d504      	bpl.n	801b8b6 <__sflush_r+0x7e>
 801b8ac:	1c42      	adds	r2, r0, #1
 801b8ae:	d101      	bne.n	801b8b4 <__sflush_r+0x7c>
 801b8b0:	682b      	ldr	r3, [r5, #0]
 801b8b2:	b903      	cbnz	r3, 801b8b6 <__sflush_r+0x7e>
 801b8b4:	6560      	str	r0, [r4, #84]	; 0x54
 801b8b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b8b8:	602f      	str	r7, [r5, #0]
 801b8ba:	2900      	cmp	r1, #0
 801b8bc:	d0c9      	beq.n	801b852 <__sflush_r+0x1a>
 801b8be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b8c2:	4299      	cmp	r1, r3
 801b8c4:	d002      	beq.n	801b8cc <__sflush_r+0x94>
 801b8c6:	4628      	mov	r0, r5
 801b8c8:	f7ff fa00 	bl	801accc <_free_r>
 801b8cc:	2000      	movs	r0, #0
 801b8ce:	6360      	str	r0, [r4, #52]	; 0x34
 801b8d0:	e7c0      	b.n	801b854 <__sflush_r+0x1c>
 801b8d2:	2301      	movs	r3, #1
 801b8d4:	4628      	mov	r0, r5
 801b8d6:	47b0      	blx	r6
 801b8d8:	1c41      	adds	r1, r0, #1
 801b8da:	d1c8      	bne.n	801b86e <__sflush_r+0x36>
 801b8dc:	682b      	ldr	r3, [r5, #0]
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d0c5      	beq.n	801b86e <__sflush_r+0x36>
 801b8e2:	2b1d      	cmp	r3, #29
 801b8e4:	d001      	beq.n	801b8ea <__sflush_r+0xb2>
 801b8e6:	2b16      	cmp	r3, #22
 801b8e8:	d101      	bne.n	801b8ee <__sflush_r+0xb6>
 801b8ea:	602f      	str	r7, [r5, #0]
 801b8ec:	e7b1      	b.n	801b852 <__sflush_r+0x1a>
 801b8ee:	89a3      	ldrh	r3, [r4, #12]
 801b8f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b8f4:	81a3      	strh	r3, [r4, #12]
 801b8f6:	e7ad      	b.n	801b854 <__sflush_r+0x1c>
 801b8f8:	690f      	ldr	r7, [r1, #16]
 801b8fa:	2f00      	cmp	r7, #0
 801b8fc:	d0a9      	beq.n	801b852 <__sflush_r+0x1a>
 801b8fe:	0793      	lsls	r3, r2, #30
 801b900:	680e      	ldr	r6, [r1, #0]
 801b902:	bf08      	it	eq
 801b904:	694b      	ldreq	r3, [r1, #20]
 801b906:	600f      	str	r7, [r1, #0]
 801b908:	bf18      	it	ne
 801b90a:	2300      	movne	r3, #0
 801b90c:	eba6 0807 	sub.w	r8, r6, r7
 801b910:	608b      	str	r3, [r1, #8]
 801b912:	f1b8 0f00 	cmp.w	r8, #0
 801b916:	dd9c      	ble.n	801b852 <__sflush_r+0x1a>
 801b918:	6a21      	ldr	r1, [r4, #32]
 801b91a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b91c:	4643      	mov	r3, r8
 801b91e:	463a      	mov	r2, r7
 801b920:	4628      	mov	r0, r5
 801b922:	47b0      	blx	r6
 801b924:	2800      	cmp	r0, #0
 801b926:	dc06      	bgt.n	801b936 <__sflush_r+0xfe>
 801b928:	89a3      	ldrh	r3, [r4, #12]
 801b92a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b92e:	81a3      	strh	r3, [r4, #12]
 801b930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b934:	e78e      	b.n	801b854 <__sflush_r+0x1c>
 801b936:	4407      	add	r7, r0
 801b938:	eba8 0800 	sub.w	r8, r8, r0
 801b93c:	e7e9      	b.n	801b912 <__sflush_r+0xda>
 801b93e:	bf00      	nop
 801b940:	dfbffffe 	.word	0xdfbffffe

0801b944 <_fflush_r>:
 801b944:	b538      	push	{r3, r4, r5, lr}
 801b946:	690b      	ldr	r3, [r1, #16]
 801b948:	4605      	mov	r5, r0
 801b94a:	460c      	mov	r4, r1
 801b94c:	b913      	cbnz	r3, 801b954 <_fflush_r+0x10>
 801b94e:	2500      	movs	r5, #0
 801b950:	4628      	mov	r0, r5
 801b952:	bd38      	pop	{r3, r4, r5, pc}
 801b954:	b118      	cbz	r0, 801b95e <_fflush_r+0x1a>
 801b956:	6a03      	ldr	r3, [r0, #32]
 801b958:	b90b      	cbnz	r3, 801b95e <_fflush_r+0x1a>
 801b95a:	f7fd fba9 	bl	80190b0 <__sinit>
 801b95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b962:	2b00      	cmp	r3, #0
 801b964:	d0f3      	beq.n	801b94e <_fflush_r+0xa>
 801b966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b968:	07d0      	lsls	r0, r2, #31
 801b96a:	d404      	bmi.n	801b976 <_fflush_r+0x32>
 801b96c:	0599      	lsls	r1, r3, #22
 801b96e:	d402      	bmi.n	801b976 <_fflush_r+0x32>
 801b970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b972:	f7fe fb11 	bl	8019f98 <__retarget_lock_acquire_recursive>
 801b976:	4628      	mov	r0, r5
 801b978:	4621      	mov	r1, r4
 801b97a:	f7ff ff5d 	bl	801b838 <__sflush_r>
 801b97e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b980:	07da      	lsls	r2, r3, #31
 801b982:	4605      	mov	r5, r0
 801b984:	d4e4      	bmi.n	801b950 <_fflush_r+0xc>
 801b986:	89a3      	ldrh	r3, [r4, #12]
 801b988:	059b      	lsls	r3, r3, #22
 801b98a:	d4e1      	bmi.n	801b950 <_fflush_r+0xc>
 801b98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b98e:	f7fe fb04 	bl	8019f9a <__retarget_lock_release_recursive>
 801b992:	e7dd      	b.n	801b950 <_fflush_r+0xc>

0801b994 <__malloc_lock>:
 801b994:	4801      	ldr	r0, [pc, #4]	; (801b99c <__malloc_lock+0x8>)
 801b996:	f7fe baff 	b.w	8019f98 <__retarget_lock_acquire_recursive>
 801b99a:	bf00      	nop
 801b99c:	20009508 	.word	0x20009508

0801b9a0 <__malloc_unlock>:
 801b9a0:	4801      	ldr	r0, [pc, #4]	; (801b9a8 <__malloc_unlock+0x8>)
 801b9a2:	f7fe bafa 	b.w	8019f9a <__retarget_lock_release_recursive>
 801b9a6:	bf00      	nop
 801b9a8:	20009508 	.word	0x20009508

0801b9ac <_Balloc>:
 801b9ac:	b570      	push	{r4, r5, r6, lr}
 801b9ae:	69c6      	ldr	r6, [r0, #28]
 801b9b0:	4604      	mov	r4, r0
 801b9b2:	460d      	mov	r5, r1
 801b9b4:	b976      	cbnz	r6, 801b9d4 <_Balloc+0x28>
 801b9b6:	2010      	movs	r0, #16
 801b9b8:	f7ff fe84 	bl	801b6c4 <malloc>
 801b9bc:	4602      	mov	r2, r0
 801b9be:	61e0      	str	r0, [r4, #28]
 801b9c0:	b920      	cbnz	r0, 801b9cc <_Balloc+0x20>
 801b9c2:	4b18      	ldr	r3, [pc, #96]	; (801ba24 <_Balloc+0x78>)
 801b9c4:	4818      	ldr	r0, [pc, #96]	; (801ba28 <_Balloc+0x7c>)
 801b9c6:	216b      	movs	r1, #107	; 0x6b
 801b9c8:	f000 fd8c 	bl	801c4e4 <__assert_func>
 801b9cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b9d0:	6006      	str	r6, [r0, #0]
 801b9d2:	60c6      	str	r6, [r0, #12]
 801b9d4:	69e6      	ldr	r6, [r4, #28]
 801b9d6:	68f3      	ldr	r3, [r6, #12]
 801b9d8:	b183      	cbz	r3, 801b9fc <_Balloc+0x50>
 801b9da:	69e3      	ldr	r3, [r4, #28]
 801b9dc:	68db      	ldr	r3, [r3, #12]
 801b9de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b9e2:	b9b8      	cbnz	r0, 801ba14 <_Balloc+0x68>
 801b9e4:	2101      	movs	r1, #1
 801b9e6:	fa01 f605 	lsl.w	r6, r1, r5
 801b9ea:	1d72      	adds	r2, r6, #5
 801b9ec:	0092      	lsls	r2, r2, #2
 801b9ee:	4620      	mov	r0, r4
 801b9f0:	f000 fd96 	bl	801c520 <_calloc_r>
 801b9f4:	b160      	cbz	r0, 801ba10 <_Balloc+0x64>
 801b9f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b9fa:	e00e      	b.n	801ba1a <_Balloc+0x6e>
 801b9fc:	2221      	movs	r2, #33	; 0x21
 801b9fe:	2104      	movs	r1, #4
 801ba00:	4620      	mov	r0, r4
 801ba02:	f000 fd8d 	bl	801c520 <_calloc_r>
 801ba06:	69e3      	ldr	r3, [r4, #28]
 801ba08:	60f0      	str	r0, [r6, #12]
 801ba0a:	68db      	ldr	r3, [r3, #12]
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d1e4      	bne.n	801b9da <_Balloc+0x2e>
 801ba10:	2000      	movs	r0, #0
 801ba12:	bd70      	pop	{r4, r5, r6, pc}
 801ba14:	6802      	ldr	r2, [r0, #0]
 801ba16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ba1a:	2300      	movs	r3, #0
 801ba1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ba20:	e7f7      	b.n	801ba12 <_Balloc+0x66>
 801ba22:	bf00      	nop
 801ba24:	0801fcae 	.word	0x0801fcae
 801ba28:	0801fd9f 	.word	0x0801fd9f

0801ba2c <_Bfree>:
 801ba2c:	b570      	push	{r4, r5, r6, lr}
 801ba2e:	69c6      	ldr	r6, [r0, #28]
 801ba30:	4605      	mov	r5, r0
 801ba32:	460c      	mov	r4, r1
 801ba34:	b976      	cbnz	r6, 801ba54 <_Bfree+0x28>
 801ba36:	2010      	movs	r0, #16
 801ba38:	f7ff fe44 	bl	801b6c4 <malloc>
 801ba3c:	4602      	mov	r2, r0
 801ba3e:	61e8      	str	r0, [r5, #28]
 801ba40:	b920      	cbnz	r0, 801ba4c <_Bfree+0x20>
 801ba42:	4b09      	ldr	r3, [pc, #36]	; (801ba68 <_Bfree+0x3c>)
 801ba44:	4809      	ldr	r0, [pc, #36]	; (801ba6c <_Bfree+0x40>)
 801ba46:	218f      	movs	r1, #143	; 0x8f
 801ba48:	f000 fd4c 	bl	801c4e4 <__assert_func>
 801ba4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ba50:	6006      	str	r6, [r0, #0]
 801ba52:	60c6      	str	r6, [r0, #12]
 801ba54:	b13c      	cbz	r4, 801ba66 <_Bfree+0x3a>
 801ba56:	69eb      	ldr	r3, [r5, #28]
 801ba58:	6862      	ldr	r2, [r4, #4]
 801ba5a:	68db      	ldr	r3, [r3, #12]
 801ba5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ba60:	6021      	str	r1, [r4, #0]
 801ba62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ba66:	bd70      	pop	{r4, r5, r6, pc}
 801ba68:	0801fcae 	.word	0x0801fcae
 801ba6c:	0801fd9f 	.word	0x0801fd9f

0801ba70 <__multadd>:
 801ba70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba74:	690d      	ldr	r5, [r1, #16]
 801ba76:	4607      	mov	r7, r0
 801ba78:	460c      	mov	r4, r1
 801ba7a:	461e      	mov	r6, r3
 801ba7c:	f101 0c14 	add.w	ip, r1, #20
 801ba80:	2000      	movs	r0, #0
 801ba82:	f8dc 3000 	ldr.w	r3, [ip]
 801ba86:	b299      	uxth	r1, r3
 801ba88:	fb02 6101 	mla	r1, r2, r1, r6
 801ba8c:	0c1e      	lsrs	r6, r3, #16
 801ba8e:	0c0b      	lsrs	r3, r1, #16
 801ba90:	fb02 3306 	mla	r3, r2, r6, r3
 801ba94:	b289      	uxth	r1, r1
 801ba96:	3001      	adds	r0, #1
 801ba98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ba9c:	4285      	cmp	r5, r0
 801ba9e:	f84c 1b04 	str.w	r1, [ip], #4
 801baa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801baa6:	dcec      	bgt.n	801ba82 <__multadd+0x12>
 801baa8:	b30e      	cbz	r6, 801baee <__multadd+0x7e>
 801baaa:	68a3      	ldr	r3, [r4, #8]
 801baac:	42ab      	cmp	r3, r5
 801baae:	dc19      	bgt.n	801bae4 <__multadd+0x74>
 801bab0:	6861      	ldr	r1, [r4, #4]
 801bab2:	4638      	mov	r0, r7
 801bab4:	3101      	adds	r1, #1
 801bab6:	f7ff ff79 	bl	801b9ac <_Balloc>
 801baba:	4680      	mov	r8, r0
 801babc:	b928      	cbnz	r0, 801baca <__multadd+0x5a>
 801babe:	4602      	mov	r2, r0
 801bac0:	4b0c      	ldr	r3, [pc, #48]	; (801baf4 <__multadd+0x84>)
 801bac2:	480d      	ldr	r0, [pc, #52]	; (801baf8 <__multadd+0x88>)
 801bac4:	21ba      	movs	r1, #186	; 0xba
 801bac6:	f000 fd0d 	bl	801c4e4 <__assert_func>
 801baca:	6922      	ldr	r2, [r4, #16]
 801bacc:	3202      	adds	r2, #2
 801bace:	f104 010c 	add.w	r1, r4, #12
 801bad2:	0092      	lsls	r2, r2, #2
 801bad4:	300c      	adds	r0, #12
 801bad6:	f7fe fa61 	bl	8019f9c <memcpy>
 801bada:	4621      	mov	r1, r4
 801badc:	4638      	mov	r0, r7
 801bade:	f7ff ffa5 	bl	801ba2c <_Bfree>
 801bae2:	4644      	mov	r4, r8
 801bae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bae8:	3501      	adds	r5, #1
 801baea:	615e      	str	r6, [r3, #20]
 801baec:	6125      	str	r5, [r4, #16]
 801baee:	4620      	mov	r0, r4
 801baf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801baf4:	0801fd1d 	.word	0x0801fd1d
 801baf8:	0801fd9f 	.word	0x0801fd9f

0801bafc <__s2b>:
 801bafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb00:	460c      	mov	r4, r1
 801bb02:	4615      	mov	r5, r2
 801bb04:	461f      	mov	r7, r3
 801bb06:	2209      	movs	r2, #9
 801bb08:	3308      	adds	r3, #8
 801bb0a:	4606      	mov	r6, r0
 801bb0c:	fb93 f3f2 	sdiv	r3, r3, r2
 801bb10:	2100      	movs	r1, #0
 801bb12:	2201      	movs	r2, #1
 801bb14:	429a      	cmp	r2, r3
 801bb16:	db09      	blt.n	801bb2c <__s2b+0x30>
 801bb18:	4630      	mov	r0, r6
 801bb1a:	f7ff ff47 	bl	801b9ac <_Balloc>
 801bb1e:	b940      	cbnz	r0, 801bb32 <__s2b+0x36>
 801bb20:	4602      	mov	r2, r0
 801bb22:	4b19      	ldr	r3, [pc, #100]	; (801bb88 <__s2b+0x8c>)
 801bb24:	4819      	ldr	r0, [pc, #100]	; (801bb8c <__s2b+0x90>)
 801bb26:	21d3      	movs	r1, #211	; 0xd3
 801bb28:	f000 fcdc 	bl	801c4e4 <__assert_func>
 801bb2c:	0052      	lsls	r2, r2, #1
 801bb2e:	3101      	adds	r1, #1
 801bb30:	e7f0      	b.n	801bb14 <__s2b+0x18>
 801bb32:	9b08      	ldr	r3, [sp, #32]
 801bb34:	6143      	str	r3, [r0, #20]
 801bb36:	2d09      	cmp	r5, #9
 801bb38:	f04f 0301 	mov.w	r3, #1
 801bb3c:	6103      	str	r3, [r0, #16]
 801bb3e:	dd16      	ble.n	801bb6e <__s2b+0x72>
 801bb40:	f104 0909 	add.w	r9, r4, #9
 801bb44:	46c8      	mov	r8, r9
 801bb46:	442c      	add	r4, r5
 801bb48:	f818 3b01 	ldrb.w	r3, [r8], #1
 801bb4c:	4601      	mov	r1, r0
 801bb4e:	3b30      	subs	r3, #48	; 0x30
 801bb50:	220a      	movs	r2, #10
 801bb52:	4630      	mov	r0, r6
 801bb54:	f7ff ff8c 	bl	801ba70 <__multadd>
 801bb58:	45a0      	cmp	r8, r4
 801bb5a:	d1f5      	bne.n	801bb48 <__s2b+0x4c>
 801bb5c:	f1a5 0408 	sub.w	r4, r5, #8
 801bb60:	444c      	add	r4, r9
 801bb62:	1b2d      	subs	r5, r5, r4
 801bb64:	1963      	adds	r3, r4, r5
 801bb66:	42bb      	cmp	r3, r7
 801bb68:	db04      	blt.n	801bb74 <__s2b+0x78>
 801bb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb6e:	340a      	adds	r4, #10
 801bb70:	2509      	movs	r5, #9
 801bb72:	e7f6      	b.n	801bb62 <__s2b+0x66>
 801bb74:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bb78:	4601      	mov	r1, r0
 801bb7a:	3b30      	subs	r3, #48	; 0x30
 801bb7c:	220a      	movs	r2, #10
 801bb7e:	4630      	mov	r0, r6
 801bb80:	f7ff ff76 	bl	801ba70 <__multadd>
 801bb84:	e7ee      	b.n	801bb64 <__s2b+0x68>
 801bb86:	bf00      	nop
 801bb88:	0801fd1d 	.word	0x0801fd1d
 801bb8c:	0801fd9f 	.word	0x0801fd9f

0801bb90 <__hi0bits>:
 801bb90:	0c03      	lsrs	r3, r0, #16
 801bb92:	041b      	lsls	r3, r3, #16
 801bb94:	b9d3      	cbnz	r3, 801bbcc <__hi0bits+0x3c>
 801bb96:	0400      	lsls	r0, r0, #16
 801bb98:	2310      	movs	r3, #16
 801bb9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801bb9e:	bf04      	itt	eq
 801bba0:	0200      	lsleq	r0, r0, #8
 801bba2:	3308      	addeq	r3, #8
 801bba4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801bba8:	bf04      	itt	eq
 801bbaa:	0100      	lsleq	r0, r0, #4
 801bbac:	3304      	addeq	r3, #4
 801bbae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801bbb2:	bf04      	itt	eq
 801bbb4:	0080      	lsleq	r0, r0, #2
 801bbb6:	3302      	addeq	r3, #2
 801bbb8:	2800      	cmp	r0, #0
 801bbba:	db05      	blt.n	801bbc8 <__hi0bits+0x38>
 801bbbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801bbc0:	f103 0301 	add.w	r3, r3, #1
 801bbc4:	bf08      	it	eq
 801bbc6:	2320      	moveq	r3, #32
 801bbc8:	4618      	mov	r0, r3
 801bbca:	4770      	bx	lr
 801bbcc:	2300      	movs	r3, #0
 801bbce:	e7e4      	b.n	801bb9a <__hi0bits+0xa>

0801bbd0 <__lo0bits>:
 801bbd0:	6803      	ldr	r3, [r0, #0]
 801bbd2:	f013 0207 	ands.w	r2, r3, #7
 801bbd6:	d00c      	beq.n	801bbf2 <__lo0bits+0x22>
 801bbd8:	07d9      	lsls	r1, r3, #31
 801bbda:	d422      	bmi.n	801bc22 <__lo0bits+0x52>
 801bbdc:	079a      	lsls	r2, r3, #30
 801bbde:	bf49      	itett	mi
 801bbe0:	085b      	lsrmi	r3, r3, #1
 801bbe2:	089b      	lsrpl	r3, r3, #2
 801bbe4:	6003      	strmi	r3, [r0, #0]
 801bbe6:	2201      	movmi	r2, #1
 801bbe8:	bf5c      	itt	pl
 801bbea:	6003      	strpl	r3, [r0, #0]
 801bbec:	2202      	movpl	r2, #2
 801bbee:	4610      	mov	r0, r2
 801bbf0:	4770      	bx	lr
 801bbf2:	b299      	uxth	r1, r3
 801bbf4:	b909      	cbnz	r1, 801bbfa <__lo0bits+0x2a>
 801bbf6:	0c1b      	lsrs	r3, r3, #16
 801bbf8:	2210      	movs	r2, #16
 801bbfa:	b2d9      	uxtb	r1, r3
 801bbfc:	b909      	cbnz	r1, 801bc02 <__lo0bits+0x32>
 801bbfe:	3208      	adds	r2, #8
 801bc00:	0a1b      	lsrs	r3, r3, #8
 801bc02:	0719      	lsls	r1, r3, #28
 801bc04:	bf04      	itt	eq
 801bc06:	091b      	lsreq	r3, r3, #4
 801bc08:	3204      	addeq	r2, #4
 801bc0a:	0799      	lsls	r1, r3, #30
 801bc0c:	bf04      	itt	eq
 801bc0e:	089b      	lsreq	r3, r3, #2
 801bc10:	3202      	addeq	r2, #2
 801bc12:	07d9      	lsls	r1, r3, #31
 801bc14:	d403      	bmi.n	801bc1e <__lo0bits+0x4e>
 801bc16:	085b      	lsrs	r3, r3, #1
 801bc18:	f102 0201 	add.w	r2, r2, #1
 801bc1c:	d003      	beq.n	801bc26 <__lo0bits+0x56>
 801bc1e:	6003      	str	r3, [r0, #0]
 801bc20:	e7e5      	b.n	801bbee <__lo0bits+0x1e>
 801bc22:	2200      	movs	r2, #0
 801bc24:	e7e3      	b.n	801bbee <__lo0bits+0x1e>
 801bc26:	2220      	movs	r2, #32
 801bc28:	e7e1      	b.n	801bbee <__lo0bits+0x1e>
	...

0801bc2c <__i2b>:
 801bc2c:	b510      	push	{r4, lr}
 801bc2e:	460c      	mov	r4, r1
 801bc30:	2101      	movs	r1, #1
 801bc32:	f7ff febb 	bl	801b9ac <_Balloc>
 801bc36:	4602      	mov	r2, r0
 801bc38:	b928      	cbnz	r0, 801bc46 <__i2b+0x1a>
 801bc3a:	4b05      	ldr	r3, [pc, #20]	; (801bc50 <__i2b+0x24>)
 801bc3c:	4805      	ldr	r0, [pc, #20]	; (801bc54 <__i2b+0x28>)
 801bc3e:	f240 1145 	movw	r1, #325	; 0x145
 801bc42:	f000 fc4f 	bl	801c4e4 <__assert_func>
 801bc46:	2301      	movs	r3, #1
 801bc48:	6144      	str	r4, [r0, #20]
 801bc4a:	6103      	str	r3, [r0, #16]
 801bc4c:	bd10      	pop	{r4, pc}
 801bc4e:	bf00      	nop
 801bc50:	0801fd1d 	.word	0x0801fd1d
 801bc54:	0801fd9f 	.word	0x0801fd9f

0801bc58 <__multiply>:
 801bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc5c:	4691      	mov	r9, r2
 801bc5e:	690a      	ldr	r2, [r1, #16]
 801bc60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bc64:	429a      	cmp	r2, r3
 801bc66:	bfb8      	it	lt
 801bc68:	460b      	movlt	r3, r1
 801bc6a:	460c      	mov	r4, r1
 801bc6c:	bfbc      	itt	lt
 801bc6e:	464c      	movlt	r4, r9
 801bc70:	4699      	movlt	r9, r3
 801bc72:	6927      	ldr	r7, [r4, #16]
 801bc74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801bc78:	68a3      	ldr	r3, [r4, #8]
 801bc7a:	6861      	ldr	r1, [r4, #4]
 801bc7c:	eb07 060a 	add.w	r6, r7, sl
 801bc80:	42b3      	cmp	r3, r6
 801bc82:	b085      	sub	sp, #20
 801bc84:	bfb8      	it	lt
 801bc86:	3101      	addlt	r1, #1
 801bc88:	f7ff fe90 	bl	801b9ac <_Balloc>
 801bc8c:	b930      	cbnz	r0, 801bc9c <__multiply+0x44>
 801bc8e:	4602      	mov	r2, r0
 801bc90:	4b44      	ldr	r3, [pc, #272]	; (801bda4 <__multiply+0x14c>)
 801bc92:	4845      	ldr	r0, [pc, #276]	; (801bda8 <__multiply+0x150>)
 801bc94:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801bc98:	f000 fc24 	bl	801c4e4 <__assert_func>
 801bc9c:	f100 0514 	add.w	r5, r0, #20
 801bca0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801bca4:	462b      	mov	r3, r5
 801bca6:	2200      	movs	r2, #0
 801bca8:	4543      	cmp	r3, r8
 801bcaa:	d321      	bcc.n	801bcf0 <__multiply+0x98>
 801bcac:	f104 0314 	add.w	r3, r4, #20
 801bcb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801bcb4:	f109 0314 	add.w	r3, r9, #20
 801bcb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801bcbc:	9202      	str	r2, [sp, #8]
 801bcbe:	1b3a      	subs	r2, r7, r4
 801bcc0:	3a15      	subs	r2, #21
 801bcc2:	f022 0203 	bic.w	r2, r2, #3
 801bcc6:	3204      	adds	r2, #4
 801bcc8:	f104 0115 	add.w	r1, r4, #21
 801bccc:	428f      	cmp	r7, r1
 801bcce:	bf38      	it	cc
 801bcd0:	2204      	movcc	r2, #4
 801bcd2:	9201      	str	r2, [sp, #4]
 801bcd4:	9a02      	ldr	r2, [sp, #8]
 801bcd6:	9303      	str	r3, [sp, #12]
 801bcd8:	429a      	cmp	r2, r3
 801bcda:	d80c      	bhi.n	801bcf6 <__multiply+0x9e>
 801bcdc:	2e00      	cmp	r6, #0
 801bcde:	dd03      	ble.n	801bce8 <__multiply+0x90>
 801bce0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d05b      	beq.n	801bda0 <__multiply+0x148>
 801bce8:	6106      	str	r6, [r0, #16]
 801bcea:	b005      	add	sp, #20
 801bcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcf0:	f843 2b04 	str.w	r2, [r3], #4
 801bcf4:	e7d8      	b.n	801bca8 <__multiply+0x50>
 801bcf6:	f8b3 a000 	ldrh.w	sl, [r3]
 801bcfa:	f1ba 0f00 	cmp.w	sl, #0
 801bcfe:	d024      	beq.n	801bd4a <__multiply+0xf2>
 801bd00:	f104 0e14 	add.w	lr, r4, #20
 801bd04:	46a9      	mov	r9, r5
 801bd06:	f04f 0c00 	mov.w	ip, #0
 801bd0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801bd0e:	f8d9 1000 	ldr.w	r1, [r9]
 801bd12:	fa1f fb82 	uxth.w	fp, r2
 801bd16:	b289      	uxth	r1, r1
 801bd18:	fb0a 110b 	mla	r1, sl, fp, r1
 801bd1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801bd20:	f8d9 2000 	ldr.w	r2, [r9]
 801bd24:	4461      	add	r1, ip
 801bd26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bd2a:	fb0a c20b 	mla	r2, sl, fp, ip
 801bd2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801bd32:	b289      	uxth	r1, r1
 801bd34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801bd38:	4577      	cmp	r7, lr
 801bd3a:	f849 1b04 	str.w	r1, [r9], #4
 801bd3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bd42:	d8e2      	bhi.n	801bd0a <__multiply+0xb2>
 801bd44:	9a01      	ldr	r2, [sp, #4]
 801bd46:	f845 c002 	str.w	ip, [r5, r2]
 801bd4a:	9a03      	ldr	r2, [sp, #12]
 801bd4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801bd50:	3304      	adds	r3, #4
 801bd52:	f1b9 0f00 	cmp.w	r9, #0
 801bd56:	d021      	beq.n	801bd9c <__multiply+0x144>
 801bd58:	6829      	ldr	r1, [r5, #0]
 801bd5a:	f104 0c14 	add.w	ip, r4, #20
 801bd5e:	46ae      	mov	lr, r5
 801bd60:	f04f 0a00 	mov.w	sl, #0
 801bd64:	f8bc b000 	ldrh.w	fp, [ip]
 801bd68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801bd6c:	fb09 220b 	mla	r2, r9, fp, r2
 801bd70:	4452      	add	r2, sl
 801bd72:	b289      	uxth	r1, r1
 801bd74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801bd78:	f84e 1b04 	str.w	r1, [lr], #4
 801bd7c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801bd80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bd84:	f8be 1000 	ldrh.w	r1, [lr]
 801bd88:	fb09 110a 	mla	r1, r9, sl, r1
 801bd8c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801bd90:	4567      	cmp	r7, ip
 801bd92:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bd96:	d8e5      	bhi.n	801bd64 <__multiply+0x10c>
 801bd98:	9a01      	ldr	r2, [sp, #4]
 801bd9a:	50a9      	str	r1, [r5, r2]
 801bd9c:	3504      	adds	r5, #4
 801bd9e:	e799      	b.n	801bcd4 <__multiply+0x7c>
 801bda0:	3e01      	subs	r6, #1
 801bda2:	e79b      	b.n	801bcdc <__multiply+0x84>
 801bda4:	0801fd1d 	.word	0x0801fd1d
 801bda8:	0801fd9f 	.word	0x0801fd9f

0801bdac <__pow5mult>:
 801bdac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bdb0:	4615      	mov	r5, r2
 801bdb2:	f012 0203 	ands.w	r2, r2, #3
 801bdb6:	4606      	mov	r6, r0
 801bdb8:	460f      	mov	r7, r1
 801bdba:	d007      	beq.n	801bdcc <__pow5mult+0x20>
 801bdbc:	4c25      	ldr	r4, [pc, #148]	; (801be54 <__pow5mult+0xa8>)
 801bdbe:	3a01      	subs	r2, #1
 801bdc0:	2300      	movs	r3, #0
 801bdc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bdc6:	f7ff fe53 	bl	801ba70 <__multadd>
 801bdca:	4607      	mov	r7, r0
 801bdcc:	10ad      	asrs	r5, r5, #2
 801bdce:	d03d      	beq.n	801be4c <__pow5mult+0xa0>
 801bdd0:	69f4      	ldr	r4, [r6, #28]
 801bdd2:	b97c      	cbnz	r4, 801bdf4 <__pow5mult+0x48>
 801bdd4:	2010      	movs	r0, #16
 801bdd6:	f7ff fc75 	bl	801b6c4 <malloc>
 801bdda:	4602      	mov	r2, r0
 801bddc:	61f0      	str	r0, [r6, #28]
 801bdde:	b928      	cbnz	r0, 801bdec <__pow5mult+0x40>
 801bde0:	4b1d      	ldr	r3, [pc, #116]	; (801be58 <__pow5mult+0xac>)
 801bde2:	481e      	ldr	r0, [pc, #120]	; (801be5c <__pow5mult+0xb0>)
 801bde4:	f240 11b3 	movw	r1, #435	; 0x1b3
 801bde8:	f000 fb7c 	bl	801c4e4 <__assert_func>
 801bdec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bdf0:	6004      	str	r4, [r0, #0]
 801bdf2:	60c4      	str	r4, [r0, #12]
 801bdf4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801bdf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bdfc:	b94c      	cbnz	r4, 801be12 <__pow5mult+0x66>
 801bdfe:	f240 2171 	movw	r1, #625	; 0x271
 801be02:	4630      	mov	r0, r6
 801be04:	f7ff ff12 	bl	801bc2c <__i2b>
 801be08:	2300      	movs	r3, #0
 801be0a:	f8c8 0008 	str.w	r0, [r8, #8]
 801be0e:	4604      	mov	r4, r0
 801be10:	6003      	str	r3, [r0, #0]
 801be12:	f04f 0900 	mov.w	r9, #0
 801be16:	07eb      	lsls	r3, r5, #31
 801be18:	d50a      	bpl.n	801be30 <__pow5mult+0x84>
 801be1a:	4639      	mov	r1, r7
 801be1c:	4622      	mov	r2, r4
 801be1e:	4630      	mov	r0, r6
 801be20:	f7ff ff1a 	bl	801bc58 <__multiply>
 801be24:	4639      	mov	r1, r7
 801be26:	4680      	mov	r8, r0
 801be28:	4630      	mov	r0, r6
 801be2a:	f7ff fdff 	bl	801ba2c <_Bfree>
 801be2e:	4647      	mov	r7, r8
 801be30:	106d      	asrs	r5, r5, #1
 801be32:	d00b      	beq.n	801be4c <__pow5mult+0xa0>
 801be34:	6820      	ldr	r0, [r4, #0]
 801be36:	b938      	cbnz	r0, 801be48 <__pow5mult+0x9c>
 801be38:	4622      	mov	r2, r4
 801be3a:	4621      	mov	r1, r4
 801be3c:	4630      	mov	r0, r6
 801be3e:	f7ff ff0b 	bl	801bc58 <__multiply>
 801be42:	6020      	str	r0, [r4, #0]
 801be44:	f8c0 9000 	str.w	r9, [r0]
 801be48:	4604      	mov	r4, r0
 801be4a:	e7e4      	b.n	801be16 <__pow5mult+0x6a>
 801be4c:	4638      	mov	r0, r7
 801be4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be52:	bf00      	nop
 801be54:	0801fee8 	.word	0x0801fee8
 801be58:	0801fcae 	.word	0x0801fcae
 801be5c:	0801fd9f 	.word	0x0801fd9f

0801be60 <__lshift>:
 801be60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be64:	460c      	mov	r4, r1
 801be66:	6849      	ldr	r1, [r1, #4]
 801be68:	6923      	ldr	r3, [r4, #16]
 801be6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801be6e:	68a3      	ldr	r3, [r4, #8]
 801be70:	4607      	mov	r7, r0
 801be72:	4691      	mov	r9, r2
 801be74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801be78:	f108 0601 	add.w	r6, r8, #1
 801be7c:	42b3      	cmp	r3, r6
 801be7e:	db0b      	blt.n	801be98 <__lshift+0x38>
 801be80:	4638      	mov	r0, r7
 801be82:	f7ff fd93 	bl	801b9ac <_Balloc>
 801be86:	4605      	mov	r5, r0
 801be88:	b948      	cbnz	r0, 801be9e <__lshift+0x3e>
 801be8a:	4602      	mov	r2, r0
 801be8c:	4b28      	ldr	r3, [pc, #160]	; (801bf30 <__lshift+0xd0>)
 801be8e:	4829      	ldr	r0, [pc, #164]	; (801bf34 <__lshift+0xd4>)
 801be90:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801be94:	f000 fb26 	bl	801c4e4 <__assert_func>
 801be98:	3101      	adds	r1, #1
 801be9a:	005b      	lsls	r3, r3, #1
 801be9c:	e7ee      	b.n	801be7c <__lshift+0x1c>
 801be9e:	2300      	movs	r3, #0
 801bea0:	f100 0114 	add.w	r1, r0, #20
 801bea4:	f100 0210 	add.w	r2, r0, #16
 801bea8:	4618      	mov	r0, r3
 801beaa:	4553      	cmp	r3, sl
 801beac:	db33      	blt.n	801bf16 <__lshift+0xb6>
 801beae:	6920      	ldr	r0, [r4, #16]
 801beb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801beb4:	f104 0314 	add.w	r3, r4, #20
 801beb8:	f019 091f 	ands.w	r9, r9, #31
 801bebc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bec0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bec4:	d02b      	beq.n	801bf1e <__lshift+0xbe>
 801bec6:	f1c9 0e20 	rsb	lr, r9, #32
 801beca:	468a      	mov	sl, r1
 801becc:	2200      	movs	r2, #0
 801bece:	6818      	ldr	r0, [r3, #0]
 801bed0:	fa00 f009 	lsl.w	r0, r0, r9
 801bed4:	4310      	orrs	r0, r2
 801bed6:	f84a 0b04 	str.w	r0, [sl], #4
 801beda:	f853 2b04 	ldr.w	r2, [r3], #4
 801bede:	459c      	cmp	ip, r3
 801bee0:	fa22 f20e 	lsr.w	r2, r2, lr
 801bee4:	d8f3      	bhi.n	801bece <__lshift+0x6e>
 801bee6:	ebac 0304 	sub.w	r3, ip, r4
 801beea:	3b15      	subs	r3, #21
 801beec:	f023 0303 	bic.w	r3, r3, #3
 801bef0:	3304      	adds	r3, #4
 801bef2:	f104 0015 	add.w	r0, r4, #21
 801bef6:	4584      	cmp	ip, r0
 801bef8:	bf38      	it	cc
 801befa:	2304      	movcc	r3, #4
 801befc:	50ca      	str	r2, [r1, r3]
 801befe:	b10a      	cbz	r2, 801bf04 <__lshift+0xa4>
 801bf00:	f108 0602 	add.w	r6, r8, #2
 801bf04:	3e01      	subs	r6, #1
 801bf06:	4638      	mov	r0, r7
 801bf08:	612e      	str	r6, [r5, #16]
 801bf0a:	4621      	mov	r1, r4
 801bf0c:	f7ff fd8e 	bl	801ba2c <_Bfree>
 801bf10:	4628      	mov	r0, r5
 801bf12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf16:	f842 0f04 	str.w	r0, [r2, #4]!
 801bf1a:	3301      	adds	r3, #1
 801bf1c:	e7c5      	b.n	801beaa <__lshift+0x4a>
 801bf1e:	3904      	subs	r1, #4
 801bf20:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf24:	f841 2f04 	str.w	r2, [r1, #4]!
 801bf28:	459c      	cmp	ip, r3
 801bf2a:	d8f9      	bhi.n	801bf20 <__lshift+0xc0>
 801bf2c:	e7ea      	b.n	801bf04 <__lshift+0xa4>
 801bf2e:	bf00      	nop
 801bf30:	0801fd1d 	.word	0x0801fd1d
 801bf34:	0801fd9f 	.word	0x0801fd9f

0801bf38 <__mcmp>:
 801bf38:	b530      	push	{r4, r5, lr}
 801bf3a:	6902      	ldr	r2, [r0, #16]
 801bf3c:	690c      	ldr	r4, [r1, #16]
 801bf3e:	1b12      	subs	r2, r2, r4
 801bf40:	d10e      	bne.n	801bf60 <__mcmp+0x28>
 801bf42:	f100 0314 	add.w	r3, r0, #20
 801bf46:	3114      	adds	r1, #20
 801bf48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801bf4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801bf50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801bf54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801bf58:	42a5      	cmp	r5, r4
 801bf5a:	d003      	beq.n	801bf64 <__mcmp+0x2c>
 801bf5c:	d305      	bcc.n	801bf6a <__mcmp+0x32>
 801bf5e:	2201      	movs	r2, #1
 801bf60:	4610      	mov	r0, r2
 801bf62:	bd30      	pop	{r4, r5, pc}
 801bf64:	4283      	cmp	r3, r0
 801bf66:	d3f3      	bcc.n	801bf50 <__mcmp+0x18>
 801bf68:	e7fa      	b.n	801bf60 <__mcmp+0x28>
 801bf6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bf6e:	e7f7      	b.n	801bf60 <__mcmp+0x28>

0801bf70 <__mdiff>:
 801bf70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf74:	460c      	mov	r4, r1
 801bf76:	4606      	mov	r6, r0
 801bf78:	4611      	mov	r1, r2
 801bf7a:	4620      	mov	r0, r4
 801bf7c:	4690      	mov	r8, r2
 801bf7e:	f7ff ffdb 	bl	801bf38 <__mcmp>
 801bf82:	1e05      	subs	r5, r0, #0
 801bf84:	d110      	bne.n	801bfa8 <__mdiff+0x38>
 801bf86:	4629      	mov	r1, r5
 801bf88:	4630      	mov	r0, r6
 801bf8a:	f7ff fd0f 	bl	801b9ac <_Balloc>
 801bf8e:	b930      	cbnz	r0, 801bf9e <__mdiff+0x2e>
 801bf90:	4b3a      	ldr	r3, [pc, #232]	; (801c07c <__mdiff+0x10c>)
 801bf92:	4602      	mov	r2, r0
 801bf94:	f240 2137 	movw	r1, #567	; 0x237
 801bf98:	4839      	ldr	r0, [pc, #228]	; (801c080 <__mdiff+0x110>)
 801bf9a:	f000 faa3 	bl	801c4e4 <__assert_func>
 801bf9e:	2301      	movs	r3, #1
 801bfa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bfa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfa8:	bfa4      	itt	ge
 801bfaa:	4643      	movge	r3, r8
 801bfac:	46a0      	movge	r8, r4
 801bfae:	4630      	mov	r0, r6
 801bfb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bfb4:	bfa6      	itte	ge
 801bfb6:	461c      	movge	r4, r3
 801bfb8:	2500      	movge	r5, #0
 801bfba:	2501      	movlt	r5, #1
 801bfbc:	f7ff fcf6 	bl	801b9ac <_Balloc>
 801bfc0:	b920      	cbnz	r0, 801bfcc <__mdiff+0x5c>
 801bfc2:	4b2e      	ldr	r3, [pc, #184]	; (801c07c <__mdiff+0x10c>)
 801bfc4:	4602      	mov	r2, r0
 801bfc6:	f240 2145 	movw	r1, #581	; 0x245
 801bfca:	e7e5      	b.n	801bf98 <__mdiff+0x28>
 801bfcc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801bfd0:	6926      	ldr	r6, [r4, #16]
 801bfd2:	60c5      	str	r5, [r0, #12]
 801bfd4:	f104 0914 	add.w	r9, r4, #20
 801bfd8:	f108 0514 	add.w	r5, r8, #20
 801bfdc:	f100 0e14 	add.w	lr, r0, #20
 801bfe0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801bfe4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801bfe8:	f108 0210 	add.w	r2, r8, #16
 801bfec:	46f2      	mov	sl, lr
 801bfee:	2100      	movs	r1, #0
 801bff0:	f859 3b04 	ldr.w	r3, [r9], #4
 801bff4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801bff8:	fa11 f88b 	uxtah	r8, r1, fp
 801bffc:	b299      	uxth	r1, r3
 801bffe:	0c1b      	lsrs	r3, r3, #16
 801c000:	eba8 0801 	sub.w	r8, r8, r1
 801c004:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c008:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c00c:	fa1f f888 	uxth.w	r8, r8
 801c010:	1419      	asrs	r1, r3, #16
 801c012:	454e      	cmp	r6, r9
 801c014:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c018:	f84a 3b04 	str.w	r3, [sl], #4
 801c01c:	d8e8      	bhi.n	801bff0 <__mdiff+0x80>
 801c01e:	1b33      	subs	r3, r6, r4
 801c020:	3b15      	subs	r3, #21
 801c022:	f023 0303 	bic.w	r3, r3, #3
 801c026:	3304      	adds	r3, #4
 801c028:	3415      	adds	r4, #21
 801c02a:	42a6      	cmp	r6, r4
 801c02c:	bf38      	it	cc
 801c02e:	2304      	movcc	r3, #4
 801c030:	441d      	add	r5, r3
 801c032:	4473      	add	r3, lr
 801c034:	469e      	mov	lr, r3
 801c036:	462e      	mov	r6, r5
 801c038:	4566      	cmp	r6, ip
 801c03a:	d30e      	bcc.n	801c05a <__mdiff+0xea>
 801c03c:	f10c 0203 	add.w	r2, ip, #3
 801c040:	1b52      	subs	r2, r2, r5
 801c042:	f022 0203 	bic.w	r2, r2, #3
 801c046:	3d03      	subs	r5, #3
 801c048:	45ac      	cmp	ip, r5
 801c04a:	bf38      	it	cc
 801c04c:	2200      	movcc	r2, #0
 801c04e:	4413      	add	r3, r2
 801c050:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c054:	b17a      	cbz	r2, 801c076 <__mdiff+0x106>
 801c056:	6107      	str	r7, [r0, #16]
 801c058:	e7a4      	b.n	801bfa4 <__mdiff+0x34>
 801c05a:	f856 8b04 	ldr.w	r8, [r6], #4
 801c05e:	fa11 f288 	uxtah	r2, r1, r8
 801c062:	1414      	asrs	r4, r2, #16
 801c064:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801c068:	b292      	uxth	r2, r2
 801c06a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801c06e:	f84e 2b04 	str.w	r2, [lr], #4
 801c072:	1421      	asrs	r1, r4, #16
 801c074:	e7e0      	b.n	801c038 <__mdiff+0xc8>
 801c076:	3f01      	subs	r7, #1
 801c078:	e7ea      	b.n	801c050 <__mdiff+0xe0>
 801c07a:	bf00      	nop
 801c07c:	0801fd1d 	.word	0x0801fd1d
 801c080:	0801fd9f 	.word	0x0801fd9f

0801c084 <__ulp>:
 801c084:	b082      	sub	sp, #8
 801c086:	ed8d 0b00 	vstr	d0, [sp]
 801c08a:	9a01      	ldr	r2, [sp, #4]
 801c08c:	4b0f      	ldr	r3, [pc, #60]	; (801c0cc <__ulp+0x48>)
 801c08e:	4013      	ands	r3, r2
 801c090:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801c094:	2b00      	cmp	r3, #0
 801c096:	dc08      	bgt.n	801c0aa <__ulp+0x26>
 801c098:	425b      	negs	r3, r3
 801c09a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801c09e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c0a2:	da04      	bge.n	801c0ae <__ulp+0x2a>
 801c0a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801c0a8:	4113      	asrs	r3, r2
 801c0aa:	2200      	movs	r2, #0
 801c0ac:	e008      	b.n	801c0c0 <__ulp+0x3c>
 801c0ae:	f1a2 0314 	sub.w	r3, r2, #20
 801c0b2:	2b1e      	cmp	r3, #30
 801c0b4:	bfda      	itte	le
 801c0b6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801c0ba:	40da      	lsrle	r2, r3
 801c0bc:	2201      	movgt	r2, #1
 801c0be:	2300      	movs	r3, #0
 801c0c0:	4619      	mov	r1, r3
 801c0c2:	4610      	mov	r0, r2
 801c0c4:	ec41 0b10 	vmov	d0, r0, r1
 801c0c8:	b002      	add	sp, #8
 801c0ca:	4770      	bx	lr
 801c0cc:	7ff00000 	.word	0x7ff00000

0801c0d0 <__b2d>:
 801c0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0d4:	6906      	ldr	r6, [r0, #16]
 801c0d6:	f100 0814 	add.w	r8, r0, #20
 801c0da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801c0de:	1f37      	subs	r7, r6, #4
 801c0e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c0e4:	4610      	mov	r0, r2
 801c0e6:	f7ff fd53 	bl	801bb90 <__hi0bits>
 801c0ea:	f1c0 0320 	rsb	r3, r0, #32
 801c0ee:	280a      	cmp	r0, #10
 801c0f0:	600b      	str	r3, [r1, #0]
 801c0f2:	491b      	ldr	r1, [pc, #108]	; (801c160 <__b2d+0x90>)
 801c0f4:	dc15      	bgt.n	801c122 <__b2d+0x52>
 801c0f6:	f1c0 0c0b 	rsb	ip, r0, #11
 801c0fa:	fa22 f30c 	lsr.w	r3, r2, ip
 801c0fe:	45b8      	cmp	r8, r7
 801c100:	ea43 0501 	orr.w	r5, r3, r1
 801c104:	bf34      	ite	cc
 801c106:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c10a:	2300      	movcs	r3, #0
 801c10c:	3015      	adds	r0, #21
 801c10e:	fa02 f000 	lsl.w	r0, r2, r0
 801c112:	fa23 f30c 	lsr.w	r3, r3, ip
 801c116:	4303      	orrs	r3, r0
 801c118:	461c      	mov	r4, r3
 801c11a:	ec45 4b10 	vmov	d0, r4, r5
 801c11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c122:	45b8      	cmp	r8, r7
 801c124:	bf3a      	itte	cc
 801c126:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c12a:	f1a6 0708 	subcc.w	r7, r6, #8
 801c12e:	2300      	movcs	r3, #0
 801c130:	380b      	subs	r0, #11
 801c132:	d012      	beq.n	801c15a <__b2d+0x8a>
 801c134:	f1c0 0120 	rsb	r1, r0, #32
 801c138:	fa23 f401 	lsr.w	r4, r3, r1
 801c13c:	4082      	lsls	r2, r0
 801c13e:	4322      	orrs	r2, r4
 801c140:	4547      	cmp	r7, r8
 801c142:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801c146:	bf8c      	ite	hi
 801c148:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801c14c:	2200      	movls	r2, #0
 801c14e:	4083      	lsls	r3, r0
 801c150:	40ca      	lsrs	r2, r1
 801c152:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801c156:	4313      	orrs	r3, r2
 801c158:	e7de      	b.n	801c118 <__b2d+0x48>
 801c15a:	ea42 0501 	orr.w	r5, r2, r1
 801c15e:	e7db      	b.n	801c118 <__b2d+0x48>
 801c160:	3ff00000 	.word	0x3ff00000

0801c164 <__d2b>:
 801c164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c168:	460f      	mov	r7, r1
 801c16a:	2101      	movs	r1, #1
 801c16c:	ec59 8b10 	vmov	r8, r9, d0
 801c170:	4616      	mov	r6, r2
 801c172:	f7ff fc1b 	bl	801b9ac <_Balloc>
 801c176:	4604      	mov	r4, r0
 801c178:	b930      	cbnz	r0, 801c188 <__d2b+0x24>
 801c17a:	4602      	mov	r2, r0
 801c17c:	4b24      	ldr	r3, [pc, #144]	; (801c210 <__d2b+0xac>)
 801c17e:	4825      	ldr	r0, [pc, #148]	; (801c214 <__d2b+0xb0>)
 801c180:	f240 310f 	movw	r1, #783	; 0x30f
 801c184:	f000 f9ae 	bl	801c4e4 <__assert_func>
 801c188:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c18c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c190:	bb2d      	cbnz	r5, 801c1de <__d2b+0x7a>
 801c192:	9301      	str	r3, [sp, #4]
 801c194:	f1b8 0300 	subs.w	r3, r8, #0
 801c198:	d026      	beq.n	801c1e8 <__d2b+0x84>
 801c19a:	4668      	mov	r0, sp
 801c19c:	9300      	str	r3, [sp, #0]
 801c19e:	f7ff fd17 	bl	801bbd0 <__lo0bits>
 801c1a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c1a6:	b1e8      	cbz	r0, 801c1e4 <__d2b+0x80>
 801c1a8:	f1c0 0320 	rsb	r3, r0, #32
 801c1ac:	fa02 f303 	lsl.w	r3, r2, r3
 801c1b0:	430b      	orrs	r3, r1
 801c1b2:	40c2      	lsrs	r2, r0
 801c1b4:	6163      	str	r3, [r4, #20]
 801c1b6:	9201      	str	r2, [sp, #4]
 801c1b8:	9b01      	ldr	r3, [sp, #4]
 801c1ba:	61a3      	str	r3, [r4, #24]
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	bf14      	ite	ne
 801c1c0:	2202      	movne	r2, #2
 801c1c2:	2201      	moveq	r2, #1
 801c1c4:	6122      	str	r2, [r4, #16]
 801c1c6:	b1bd      	cbz	r5, 801c1f8 <__d2b+0x94>
 801c1c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c1cc:	4405      	add	r5, r0
 801c1ce:	603d      	str	r5, [r7, #0]
 801c1d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c1d4:	6030      	str	r0, [r6, #0]
 801c1d6:	4620      	mov	r0, r4
 801c1d8:	b003      	add	sp, #12
 801c1da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c1de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c1e2:	e7d6      	b.n	801c192 <__d2b+0x2e>
 801c1e4:	6161      	str	r1, [r4, #20]
 801c1e6:	e7e7      	b.n	801c1b8 <__d2b+0x54>
 801c1e8:	a801      	add	r0, sp, #4
 801c1ea:	f7ff fcf1 	bl	801bbd0 <__lo0bits>
 801c1ee:	9b01      	ldr	r3, [sp, #4]
 801c1f0:	6163      	str	r3, [r4, #20]
 801c1f2:	3020      	adds	r0, #32
 801c1f4:	2201      	movs	r2, #1
 801c1f6:	e7e5      	b.n	801c1c4 <__d2b+0x60>
 801c1f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c1fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c200:	6038      	str	r0, [r7, #0]
 801c202:	6918      	ldr	r0, [r3, #16]
 801c204:	f7ff fcc4 	bl	801bb90 <__hi0bits>
 801c208:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c20c:	e7e2      	b.n	801c1d4 <__d2b+0x70>
 801c20e:	bf00      	nop
 801c210:	0801fd1d 	.word	0x0801fd1d
 801c214:	0801fd9f 	.word	0x0801fd9f

0801c218 <__ratio>:
 801c218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c21c:	4688      	mov	r8, r1
 801c21e:	4669      	mov	r1, sp
 801c220:	4681      	mov	r9, r0
 801c222:	f7ff ff55 	bl	801c0d0 <__b2d>
 801c226:	a901      	add	r1, sp, #4
 801c228:	4640      	mov	r0, r8
 801c22a:	ec55 4b10 	vmov	r4, r5, d0
 801c22e:	f7ff ff4f 	bl	801c0d0 <__b2d>
 801c232:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c236:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801c23a:	eba3 0c02 	sub.w	ip, r3, r2
 801c23e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c242:	1a9b      	subs	r3, r3, r2
 801c244:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801c248:	ec51 0b10 	vmov	r0, r1, d0
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	bfd6      	itet	le
 801c250:	460a      	movle	r2, r1
 801c252:	462a      	movgt	r2, r5
 801c254:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c258:	468b      	mov	fp, r1
 801c25a:	462f      	mov	r7, r5
 801c25c:	bfd4      	ite	le
 801c25e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801c262:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c266:	4620      	mov	r0, r4
 801c268:	ee10 2a10 	vmov	r2, s0
 801c26c:	465b      	mov	r3, fp
 801c26e:	4639      	mov	r1, r7
 801c270:	f7e4 faf6 	bl	8000860 <__aeabi_ddiv>
 801c274:	ec41 0b10 	vmov	d0, r0, r1
 801c278:	b003      	add	sp, #12
 801c27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c27e <__copybits>:
 801c27e:	3901      	subs	r1, #1
 801c280:	b570      	push	{r4, r5, r6, lr}
 801c282:	1149      	asrs	r1, r1, #5
 801c284:	6914      	ldr	r4, [r2, #16]
 801c286:	3101      	adds	r1, #1
 801c288:	f102 0314 	add.w	r3, r2, #20
 801c28c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c290:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c294:	1f05      	subs	r5, r0, #4
 801c296:	42a3      	cmp	r3, r4
 801c298:	d30c      	bcc.n	801c2b4 <__copybits+0x36>
 801c29a:	1aa3      	subs	r3, r4, r2
 801c29c:	3b11      	subs	r3, #17
 801c29e:	f023 0303 	bic.w	r3, r3, #3
 801c2a2:	3211      	adds	r2, #17
 801c2a4:	42a2      	cmp	r2, r4
 801c2a6:	bf88      	it	hi
 801c2a8:	2300      	movhi	r3, #0
 801c2aa:	4418      	add	r0, r3
 801c2ac:	2300      	movs	r3, #0
 801c2ae:	4288      	cmp	r0, r1
 801c2b0:	d305      	bcc.n	801c2be <__copybits+0x40>
 801c2b2:	bd70      	pop	{r4, r5, r6, pc}
 801c2b4:	f853 6b04 	ldr.w	r6, [r3], #4
 801c2b8:	f845 6f04 	str.w	r6, [r5, #4]!
 801c2bc:	e7eb      	b.n	801c296 <__copybits+0x18>
 801c2be:	f840 3b04 	str.w	r3, [r0], #4
 801c2c2:	e7f4      	b.n	801c2ae <__copybits+0x30>

0801c2c4 <__any_on>:
 801c2c4:	f100 0214 	add.w	r2, r0, #20
 801c2c8:	6900      	ldr	r0, [r0, #16]
 801c2ca:	114b      	asrs	r3, r1, #5
 801c2cc:	4298      	cmp	r0, r3
 801c2ce:	b510      	push	{r4, lr}
 801c2d0:	db11      	blt.n	801c2f6 <__any_on+0x32>
 801c2d2:	dd0a      	ble.n	801c2ea <__any_on+0x26>
 801c2d4:	f011 011f 	ands.w	r1, r1, #31
 801c2d8:	d007      	beq.n	801c2ea <__any_on+0x26>
 801c2da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c2de:	fa24 f001 	lsr.w	r0, r4, r1
 801c2e2:	fa00 f101 	lsl.w	r1, r0, r1
 801c2e6:	428c      	cmp	r4, r1
 801c2e8:	d10b      	bne.n	801c302 <__any_on+0x3e>
 801c2ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c2ee:	4293      	cmp	r3, r2
 801c2f0:	d803      	bhi.n	801c2fa <__any_on+0x36>
 801c2f2:	2000      	movs	r0, #0
 801c2f4:	bd10      	pop	{r4, pc}
 801c2f6:	4603      	mov	r3, r0
 801c2f8:	e7f7      	b.n	801c2ea <__any_on+0x26>
 801c2fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c2fe:	2900      	cmp	r1, #0
 801c300:	d0f5      	beq.n	801c2ee <__any_on+0x2a>
 801c302:	2001      	movs	r0, #1
 801c304:	e7f6      	b.n	801c2f4 <__any_on+0x30>

0801c306 <__sread>:
 801c306:	b510      	push	{r4, lr}
 801c308:	460c      	mov	r4, r1
 801c30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c30e:	f000 f8b5 	bl	801c47c <_read_r>
 801c312:	2800      	cmp	r0, #0
 801c314:	bfab      	itete	ge
 801c316:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c318:	89a3      	ldrhlt	r3, [r4, #12]
 801c31a:	181b      	addge	r3, r3, r0
 801c31c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c320:	bfac      	ite	ge
 801c322:	6563      	strge	r3, [r4, #84]	; 0x54
 801c324:	81a3      	strhlt	r3, [r4, #12]
 801c326:	bd10      	pop	{r4, pc}

0801c328 <__swrite>:
 801c328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c32c:	461f      	mov	r7, r3
 801c32e:	898b      	ldrh	r3, [r1, #12]
 801c330:	05db      	lsls	r3, r3, #23
 801c332:	4605      	mov	r5, r0
 801c334:	460c      	mov	r4, r1
 801c336:	4616      	mov	r6, r2
 801c338:	d505      	bpl.n	801c346 <__swrite+0x1e>
 801c33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c33e:	2302      	movs	r3, #2
 801c340:	2200      	movs	r2, #0
 801c342:	f000 f889 	bl	801c458 <_lseek_r>
 801c346:	89a3      	ldrh	r3, [r4, #12]
 801c348:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c34c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c350:	81a3      	strh	r3, [r4, #12]
 801c352:	4632      	mov	r2, r6
 801c354:	463b      	mov	r3, r7
 801c356:	4628      	mov	r0, r5
 801c358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c35c:	f000 b8b0 	b.w	801c4c0 <_write_r>

0801c360 <__sseek>:
 801c360:	b510      	push	{r4, lr}
 801c362:	460c      	mov	r4, r1
 801c364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c368:	f000 f876 	bl	801c458 <_lseek_r>
 801c36c:	1c43      	adds	r3, r0, #1
 801c36e:	89a3      	ldrh	r3, [r4, #12]
 801c370:	bf15      	itete	ne
 801c372:	6560      	strne	r0, [r4, #84]	; 0x54
 801c374:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c378:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c37c:	81a3      	strheq	r3, [r4, #12]
 801c37e:	bf18      	it	ne
 801c380:	81a3      	strhne	r3, [r4, #12]
 801c382:	bd10      	pop	{r4, pc}

0801c384 <__sclose>:
 801c384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c388:	f000 b856 	b.w	801c438 <_close_r>

0801c38c <_realloc_r>:
 801c38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c390:	4680      	mov	r8, r0
 801c392:	4614      	mov	r4, r2
 801c394:	460e      	mov	r6, r1
 801c396:	b921      	cbnz	r1, 801c3a2 <_realloc_r+0x16>
 801c398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c39c:	4611      	mov	r1, r2
 801c39e:	f7ff b9b9 	b.w	801b714 <_malloc_r>
 801c3a2:	b92a      	cbnz	r2, 801c3b0 <_realloc_r+0x24>
 801c3a4:	f7fe fc92 	bl	801accc <_free_r>
 801c3a8:	4625      	mov	r5, r4
 801c3aa:	4628      	mov	r0, r5
 801c3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3b0:	f000 f8cc 	bl	801c54c <_malloc_usable_size_r>
 801c3b4:	4284      	cmp	r4, r0
 801c3b6:	4607      	mov	r7, r0
 801c3b8:	d802      	bhi.n	801c3c0 <_realloc_r+0x34>
 801c3ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c3be:	d812      	bhi.n	801c3e6 <_realloc_r+0x5a>
 801c3c0:	4621      	mov	r1, r4
 801c3c2:	4640      	mov	r0, r8
 801c3c4:	f7ff f9a6 	bl	801b714 <_malloc_r>
 801c3c8:	4605      	mov	r5, r0
 801c3ca:	2800      	cmp	r0, #0
 801c3cc:	d0ed      	beq.n	801c3aa <_realloc_r+0x1e>
 801c3ce:	42bc      	cmp	r4, r7
 801c3d0:	4622      	mov	r2, r4
 801c3d2:	4631      	mov	r1, r6
 801c3d4:	bf28      	it	cs
 801c3d6:	463a      	movcs	r2, r7
 801c3d8:	f7fd fde0 	bl	8019f9c <memcpy>
 801c3dc:	4631      	mov	r1, r6
 801c3de:	4640      	mov	r0, r8
 801c3e0:	f7fe fc74 	bl	801accc <_free_r>
 801c3e4:	e7e1      	b.n	801c3aa <_realloc_r+0x1e>
 801c3e6:	4635      	mov	r5, r6
 801c3e8:	e7df      	b.n	801c3aa <_realloc_r+0x1e>

0801c3ea <__ascii_wctomb>:
 801c3ea:	b149      	cbz	r1, 801c400 <__ascii_wctomb+0x16>
 801c3ec:	2aff      	cmp	r2, #255	; 0xff
 801c3ee:	bf85      	ittet	hi
 801c3f0:	238a      	movhi	r3, #138	; 0x8a
 801c3f2:	6003      	strhi	r3, [r0, #0]
 801c3f4:	700a      	strbls	r2, [r1, #0]
 801c3f6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801c3fa:	bf98      	it	ls
 801c3fc:	2001      	movls	r0, #1
 801c3fe:	4770      	bx	lr
 801c400:	4608      	mov	r0, r1
 801c402:	4770      	bx	lr

0801c404 <memmove>:
 801c404:	4288      	cmp	r0, r1
 801c406:	b510      	push	{r4, lr}
 801c408:	eb01 0402 	add.w	r4, r1, r2
 801c40c:	d902      	bls.n	801c414 <memmove+0x10>
 801c40e:	4284      	cmp	r4, r0
 801c410:	4623      	mov	r3, r4
 801c412:	d807      	bhi.n	801c424 <memmove+0x20>
 801c414:	1e43      	subs	r3, r0, #1
 801c416:	42a1      	cmp	r1, r4
 801c418:	d008      	beq.n	801c42c <memmove+0x28>
 801c41a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c41e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c422:	e7f8      	b.n	801c416 <memmove+0x12>
 801c424:	4402      	add	r2, r0
 801c426:	4601      	mov	r1, r0
 801c428:	428a      	cmp	r2, r1
 801c42a:	d100      	bne.n	801c42e <memmove+0x2a>
 801c42c:	bd10      	pop	{r4, pc}
 801c42e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c436:	e7f7      	b.n	801c428 <memmove+0x24>

0801c438 <_close_r>:
 801c438:	b538      	push	{r3, r4, r5, lr}
 801c43a:	4d06      	ldr	r5, [pc, #24]	; (801c454 <_close_r+0x1c>)
 801c43c:	2300      	movs	r3, #0
 801c43e:	4604      	mov	r4, r0
 801c440:	4608      	mov	r0, r1
 801c442:	602b      	str	r3, [r5, #0]
 801c444:	f7e9 f903 	bl	800564e <_close>
 801c448:	1c43      	adds	r3, r0, #1
 801c44a:	d102      	bne.n	801c452 <_close_r+0x1a>
 801c44c:	682b      	ldr	r3, [r5, #0]
 801c44e:	b103      	cbz	r3, 801c452 <_close_r+0x1a>
 801c450:	6023      	str	r3, [r4, #0]
 801c452:	bd38      	pop	{r3, r4, r5, pc}
 801c454:	20009504 	.word	0x20009504

0801c458 <_lseek_r>:
 801c458:	b538      	push	{r3, r4, r5, lr}
 801c45a:	4d07      	ldr	r5, [pc, #28]	; (801c478 <_lseek_r+0x20>)
 801c45c:	4604      	mov	r4, r0
 801c45e:	4608      	mov	r0, r1
 801c460:	4611      	mov	r1, r2
 801c462:	2200      	movs	r2, #0
 801c464:	602a      	str	r2, [r5, #0]
 801c466:	461a      	mov	r2, r3
 801c468:	f7e9 f918 	bl	800569c <_lseek>
 801c46c:	1c43      	adds	r3, r0, #1
 801c46e:	d102      	bne.n	801c476 <_lseek_r+0x1e>
 801c470:	682b      	ldr	r3, [r5, #0]
 801c472:	b103      	cbz	r3, 801c476 <_lseek_r+0x1e>
 801c474:	6023      	str	r3, [r4, #0]
 801c476:	bd38      	pop	{r3, r4, r5, pc}
 801c478:	20009504 	.word	0x20009504

0801c47c <_read_r>:
 801c47c:	b538      	push	{r3, r4, r5, lr}
 801c47e:	4d07      	ldr	r5, [pc, #28]	; (801c49c <_read_r+0x20>)
 801c480:	4604      	mov	r4, r0
 801c482:	4608      	mov	r0, r1
 801c484:	4611      	mov	r1, r2
 801c486:	2200      	movs	r2, #0
 801c488:	602a      	str	r2, [r5, #0]
 801c48a:	461a      	mov	r2, r3
 801c48c:	f7e9 f8a6 	bl	80055dc <_read>
 801c490:	1c43      	adds	r3, r0, #1
 801c492:	d102      	bne.n	801c49a <_read_r+0x1e>
 801c494:	682b      	ldr	r3, [r5, #0]
 801c496:	b103      	cbz	r3, 801c49a <_read_r+0x1e>
 801c498:	6023      	str	r3, [r4, #0]
 801c49a:	bd38      	pop	{r3, r4, r5, pc}
 801c49c:	20009504 	.word	0x20009504

0801c4a0 <_sbrk_r>:
 801c4a0:	b538      	push	{r3, r4, r5, lr}
 801c4a2:	4d06      	ldr	r5, [pc, #24]	; (801c4bc <_sbrk_r+0x1c>)
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	4604      	mov	r4, r0
 801c4a8:	4608      	mov	r0, r1
 801c4aa:	602b      	str	r3, [r5, #0]
 801c4ac:	f7e9 f904 	bl	80056b8 <_sbrk>
 801c4b0:	1c43      	adds	r3, r0, #1
 801c4b2:	d102      	bne.n	801c4ba <_sbrk_r+0x1a>
 801c4b4:	682b      	ldr	r3, [r5, #0]
 801c4b6:	b103      	cbz	r3, 801c4ba <_sbrk_r+0x1a>
 801c4b8:	6023      	str	r3, [r4, #0]
 801c4ba:	bd38      	pop	{r3, r4, r5, pc}
 801c4bc:	20009504 	.word	0x20009504

0801c4c0 <_write_r>:
 801c4c0:	b538      	push	{r3, r4, r5, lr}
 801c4c2:	4d07      	ldr	r5, [pc, #28]	; (801c4e0 <_write_r+0x20>)
 801c4c4:	4604      	mov	r4, r0
 801c4c6:	4608      	mov	r0, r1
 801c4c8:	4611      	mov	r1, r2
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	602a      	str	r2, [r5, #0]
 801c4ce:	461a      	mov	r2, r3
 801c4d0:	f7e9 f8a1 	bl	8005616 <_write>
 801c4d4:	1c43      	adds	r3, r0, #1
 801c4d6:	d102      	bne.n	801c4de <_write_r+0x1e>
 801c4d8:	682b      	ldr	r3, [r5, #0]
 801c4da:	b103      	cbz	r3, 801c4de <_write_r+0x1e>
 801c4dc:	6023      	str	r3, [r4, #0]
 801c4de:	bd38      	pop	{r3, r4, r5, pc}
 801c4e0:	20009504 	.word	0x20009504

0801c4e4 <__assert_func>:
 801c4e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c4e6:	4614      	mov	r4, r2
 801c4e8:	461a      	mov	r2, r3
 801c4ea:	4b09      	ldr	r3, [pc, #36]	; (801c510 <__assert_func+0x2c>)
 801c4ec:	681b      	ldr	r3, [r3, #0]
 801c4ee:	4605      	mov	r5, r0
 801c4f0:	68d8      	ldr	r0, [r3, #12]
 801c4f2:	b14c      	cbz	r4, 801c508 <__assert_func+0x24>
 801c4f4:	4b07      	ldr	r3, [pc, #28]	; (801c514 <__assert_func+0x30>)
 801c4f6:	9100      	str	r1, [sp, #0]
 801c4f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c4fc:	4906      	ldr	r1, [pc, #24]	; (801c518 <__assert_func+0x34>)
 801c4fe:	462b      	mov	r3, r5
 801c500:	f000 f82c 	bl	801c55c <fiprintf>
 801c504:	f000 f83c 	bl	801c580 <abort>
 801c508:	4b04      	ldr	r3, [pc, #16]	; (801c51c <__assert_func+0x38>)
 801c50a:	461c      	mov	r4, r3
 801c50c:	e7f3      	b.n	801c4f6 <__assert_func+0x12>
 801c50e:	bf00      	nop
 801c510:	200001f0 	.word	0x200001f0
 801c514:	0801fef4 	.word	0x0801fef4
 801c518:	0801ff01 	.word	0x0801ff01
 801c51c:	0801ff2f 	.word	0x0801ff2f

0801c520 <_calloc_r>:
 801c520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c522:	fba1 2402 	umull	r2, r4, r1, r2
 801c526:	b94c      	cbnz	r4, 801c53c <_calloc_r+0x1c>
 801c528:	4611      	mov	r1, r2
 801c52a:	9201      	str	r2, [sp, #4]
 801c52c:	f7ff f8f2 	bl	801b714 <_malloc_r>
 801c530:	9a01      	ldr	r2, [sp, #4]
 801c532:	4605      	mov	r5, r0
 801c534:	b930      	cbnz	r0, 801c544 <_calloc_r+0x24>
 801c536:	4628      	mov	r0, r5
 801c538:	b003      	add	sp, #12
 801c53a:	bd30      	pop	{r4, r5, pc}
 801c53c:	220c      	movs	r2, #12
 801c53e:	6002      	str	r2, [r0, #0]
 801c540:	2500      	movs	r5, #0
 801c542:	e7f8      	b.n	801c536 <_calloc_r+0x16>
 801c544:	4621      	mov	r1, r4
 801c546:	f7fd fc9b 	bl	8019e80 <memset>
 801c54a:	e7f4      	b.n	801c536 <_calloc_r+0x16>

0801c54c <_malloc_usable_size_r>:
 801c54c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c550:	1f18      	subs	r0, r3, #4
 801c552:	2b00      	cmp	r3, #0
 801c554:	bfbc      	itt	lt
 801c556:	580b      	ldrlt	r3, [r1, r0]
 801c558:	18c0      	addlt	r0, r0, r3
 801c55a:	4770      	bx	lr

0801c55c <fiprintf>:
 801c55c:	b40e      	push	{r1, r2, r3}
 801c55e:	b503      	push	{r0, r1, lr}
 801c560:	4601      	mov	r1, r0
 801c562:	ab03      	add	r3, sp, #12
 801c564:	4805      	ldr	r0, [pc, #20]	; (801c57c <fiprintf+0x20>)
 801c566:	f853 2b04 	ldr.w	r2, [r3], #4
 801c56a:	6800      	ldr	r0, [r0, #0]
 801c56c:	9301      	str	r3, [sp, #4]
 801c56e:	f000 f837 	bl	801c5e0 <_vfiprintf_r>
 801c572:	b002      	add	sp, #8
 801c574:	f85d eb04 	ldr.w	lr, [sp], #4
 801c578:	b003      	add	sp, #12
 801c57a:	4770      	bx	lr
 801c57c:	200001f0 	.word	0x200001f0

0801c580 <abort>:
 801c580:	b508      	push	{r3, lr}
 801c582:	2006      	movs	r0, #6
 801c584:	f000 fa88 	bl	801ca98 <raise>
 801c588:	2001      	movs	r0, #1
 801c58a:	f7e9 f81d 	bl	80055c8 <_exit>

0801c58e <__sfputc_r>:
 801c58e:	6893      	ldr	r3, [r2, #8]
 801c590:	3b01      	subs	r3, #1
 801c592:	2b00      	cmp	r3, #0
 801c594:	b410      	push	{r4}
 801c596:	6093      	str	r3, [r2, #8]
 801c598:	da08      	bge.n	801c5ac <__sfputc_r+0x1e>
 801c59a:	6994      	ldr	r4, [r2, #24]
 801c59c:	42a3      	cmp	r3, r4
 801c59e:	db01      	blt.n	801c5a4 <__sfputc_r+0x16>
 801c5a0:	290a      	cmp	r1, #10
 801c5a2:	d103      	bne.n	801c5ac <__sfputc_r+0x1e>
 801c5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c5a8:	f000 b934 	b.w	801c814 <__swbuf_r>
 801c5ac:	6813      	ldr	r3, [r2, #0]
 801c5ae:	1c58      	adds	r0, r3, #1
 801c5b0:	6010      	str	r0, [r2, #0]
 801c5b2:	7019      	strb	r1, [r3, #0]
 801c5b4:	4608      	mov	r0, r1
 801c5b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c5ba:	4770      	bx	lr

0801c5bc <__sfputs_r>:
 801c5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5be:	4606      	mov	r6, r0
 801c5c0:	460f      	mov	r7, r1
 801c5c2:	4614      	mov	r4, r2
 801c5c4:	18d5      	adds	r5, r2, r3
 801c5c6:	42ac      	cmp	r4, r5
 801c5c8:	d101      	bne.n	801c5ce <__sfputs_r+0x12>
 801c5ca:	2000      	movs	r0, #0
 801c5cc:	e007      	b.n	801c5de <__sfputs_r+0x22>
 801c5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5d2:	463a      	mov	r2, r7
 801c5d4:	4630      	mov	r0, r6
 801c5d6:	f7ff ffda 	bl	801c58e <__sfputc_r>
 801c5da:	1c43      	adds	r3, r0, #1
 801c5dc:	d1f3      	bne.n	801c5c6 <__sfputs_r+0xa>
 801c5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c5e0 <_vfiprintf_r>:
 801c5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5e4:	460d      	mov	r5, r1
 801c5e6:	b09d      	sub	sp, #116	; 0x74
 801c5e8:	4614      	mov	r4, r2
 801c5ea:	4698      	mov	r8, r3
 801c5ec:	4606      	mov	r6, r0
 801c5ee:	b118      	cbz	r0, 801c5f8 <_vfiprintf_r+0x18>
 801c5f0:	6a03      	ldr	r3, [r0, #32]
 801c5f2:	b90b      	cbnz	r3, 801c5f8 <_vfiprintf_r+0x18>
 801c5f4:	f7fc fd5c 	bl	80190b0 <__sinit>
 801c5f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c5fa:	07d9      	lsls	r1, r3, #31
 801c5fc:	d405      	bmi.n	801c60a <_vfiprintf_r+0x2a>
 801c5fe:	89ab      	ldrh	r3, [r5, #12]
 801c600:	059a      	lsls	r2, r3, #22
 801c602:	d402      	bmi.n	801c60a <_vfiprintf_r+0x2a>
 801c604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c606:	f7fd fcc7 	bl	8019f98 <__retarget_lock_acquire_recursive>
 801c60a:	89ab      	ldrh	r3, [r5, #12]
 801c60c:	071b      	lsls	r3, r3, #28
 801c60e:	d501      	bpl.n	801c614 <_vfiprintf_r+0x34>
 801c610:	692b      	ldr	r3, [r5, #16]
 801c612:	b99b      	cbnz	r3, 801c63c <_vfiprintf_r+0x5c>
 801c614:	4629      	mov	r1, r5
 801c616:	4630      	mov	r0, r6
 801c618:	f000 f93a 	bl	801c890 <__swsetup_r>
 801c61c:	b170      	cbz	r0, 801c63c <_vfiprintf_r+0x5c>
 801c61e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c620:	07dc      	lsls	r4, r3, #31
 801c622:	d504      	bpl.n	801c62e <_vfiprintf_r+0x4e>
 801c624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c628:	b01d      	add	sp, #116	; 0x74
 801c62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c62e:	89ab      	ldrh	r3, [r5, #12]
 801c630:	0598      	lsls	r0, r3, #22
 801c632:	d4f7      	bmi.n	801c624 <_vfiprintf_r+0x44>
 801c634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c636:	f7fd fcb0 	bl	8019f9a <__retarget_lock_release_recursive>
 801c63a:	e7f3      	b.n	801c624 <_vfiprintf_r+0x44>
 801c63c:	2300      	movs	r3, #0
 801c63e:	9309      	str	r3, [sp, #36]	; 0x24
 801c640:	2320      	movs	r3, #32
 801c642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c646:	f8cd 800c 	str.w	r8, [sp, #12]
 801c64a:	2330      	movs	r3, #48	; 0x30
 801c64c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c800 <_vfiprintf_r+0x220>
 801c650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c654:	f04f 0901 	mov.w	r9, #1
 801c658:	4623      	mov	r3, r4
 801c65a:	469a      	mov	sl, r3
 801c65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c660:	b10a      	cbz	r2, 801c666 <_vfiprintf_r+0x86>
 801c662:	2a25      	cmp	r2, #37	; 0x25
 801c664:	d1f9      	bne.n	801c65a <_vfiprintf_r+0x7a>
 801c666:	ebba 0b04 	subs.w	fp, sl, r4
 801c66a:	d00b      	beq.n	801c684 <_vfiprintf_r+0xa4>
 801c66c:	465b      	mov	r3, fp
 801c66e:	4622      	mov	r2, r4
 801c670:	4629      	mov	r1, r5
 801c672:	4630      	mov	r0, r6
 801c674:	f7ff ffa2 	bl	801c5bc <__sfputs_r>
 801c678:	3001      	adds	r0, #1
 801c67a:	f000 80a9 	beq.w	801c7d0 <_vfiprintf_r+0x1f0>
 801c67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c680:	445a      	add	r2, fp
 801c682:	9209      	str	r2, [sp, #36]	; 0x24
 801c684:	f89a 3000 	ldrb.w	r3, [sl]
 801c688:	2b00      	cmp	r3, #0
 801c68a:	f000 80a1 	beq.w	801c7d0 <_vfiprintf_r+0x1f0>
 801c68e:	2300      	movs	r3, #0
 801c690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c698:	f10a 0a01 	add.w	sl, sl, #1
 801c69c:	9304      	str	r3, [sp, #16]
 801c69e:	9307      	str	r3, [sp, #28]
 801c6a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c6a4:	931a      	str	r3, [sp, #104]	; 0x68
 801c6a6:	4654      	mov	r4, sl
 801c6a8:	2205      	movs	r2, #5
 801c6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c6ae:	4854      	ldr	r0, [pc, #336]	; (801c800 <_vfiprintf_r+0x220>)
 801c6b0:	f7e3 fd8e 	bl	80001d0 <memchr>
 801c6b4:	9a04      	ldr	r2, [sp, #16]
 801c6b6:	b9d8      	cbnz	r0, 801c6f0 <_vfiprintf_r+0x110>
 801c6b8:	06d1      	lsls	r1, r2, #27
 801c6ba:	bf44      	itt	mi
 801c6bc:	2320      	movmi	r3, #32
 801c6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c6c2:	0713      	lsls	r3, r2, #28
 801c6c4:	bf44      	itt	mi
 801c6c6:	232b      	movmi	r3, #43	; 0x2b
 801c6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c6cc:	f89a 3000 	ldrb.w	r3, [sl]
 801c6d0:	2b2a      	cmp	r3, #42	; 0x2a
 801c6d2:	d015      	beq.n	801c700 <_vfiprintf_r+0x120>
 801c6d4:	9a07      	ldr	r2, [sp, #28]
 801c6d6:	4654      	mov	r4, sl
 801c6d8:	2000      	movs	r0, #0
 801c6da:	f04f 0c0a 	mov.w	ip, #10
 801c6de:	4621      	mov	r1, r4
 801c6e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c6e4:	3b30      	subs	r3, #48	; 0x30
 801c6e6:	2b09      	cmp	r3, #9
 801c6e8:	d94d      	bls.n	801c786 <_vfiprintf_r+0x1a6>
 801c6ea:	b1b0      	cbz	r0, 801c71a <_vfiprintf_r+0x13a>
 801c6ec:	9207      	str	r2, [sp, #28]
 801c6ee:	e014      	b.n	801c71a <_vfiprintf_r+0x13a>
 801c6f0:	eba0 0308 	sub.w	r3, r0, r8
 801c6f4:	fa09 f303 	lsl.w	r3, r9, r3
 801c6f8:	4313      	orrs	r3, r2
 801c6fa:	9304      	str	r3, [sp, #16]
 801c6fc:	46a2      	mov	sl, r4
 801c6fe:	e7d2      	b.n	801c6a6 <_vfiprintf_r+0xc6>
 801c700:	9b03      	ldr	r3, [sp, #12]
 801c702:	1d19      	adds	r1, r3, #4
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	9103      	str	r1, [sp, #12]
 801c708:	2b00      	cmp	r3, #0
 801c70a:	bfbb      	ittet	lt
 801c70c:	425b      	neglt	r3, r3
 801c70e:	f042 0202 	orrlt.w	r2, r2, #2
 801c712:	9307      	strge	r3, [sp, #28]
 801c714:	9307      	strlt	r3, [sp, #28]
 801c716:	bfb8      	it	lt
 801c718:	9204      	strlt	r2, [sp, #16]
 801c71a:	7823      	ldrb	r3, [r4, #0]
 801c71c:	2b2e      	cmp	r3, #46	; 0x2e
 801c71e:	d10c      	bne.n	801c73a <_vfiprintf_r+0x15a>
 801c720:	7863      	ldrb	r3, [r4, #1]
 801c722:	2b2a      	cmp	r3, #42	; 0x2a
 801c724:	d134      	bne.n	801c790 <_vfiprintf_r+0x1b0>
 801c726:	9b03      	ldr	r3, [sp, #12]
 801c728:	1d1a      	adds	r2, r3, #4
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	9203      	str	r2, [sp, #12]
 801c72e:	2b00      	cmp	r3, #0
 801c730:	bfb8      	it	lt
 801c732:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c736:	3402      	adds	r4, #2
 801c738:	9305      	str	r3, [sp, #20]
 801c73a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c810 <_vfiprintf_r+0x230>
 801c73e:	7821      	ldrb	r1, [r4, #0]
 801c740:	2203      	movs	r2, #3
 801c742:	4650      	mov	r0, sl
 801c744:	f7e3 fd44 	bl	80001d0 <memchr>
 801c748:	b138      	cbz	r0, 801c75a <_vfiprintf_r+0x17a>
 801c74a:	9b04      	ldr	r3, [sp, #16]
 801c74c:	eba0 000a 	sub.w	r0, r0, sl
 801c750:	2240      	movs	r2, #64	; 0x40
 801c752:	4082      	lsls	r2, r0
 801c754:	4313      	orrs	r3, r2
 801c756:	3401      	adds	r4, #1
 801c758:	9304      	str	r3, [sp, #16]
 801c75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c75e:	4829      	ldr	r0, [pc, #164]	; (801c804 <_vfiprintf_r+0x224>)
 801c760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c764:	2206      	movs	r2, #6
 801c766:	f7e3 fd33 	bl	80001d0 <memchr>
 801c76a:	2800      	cmp	r0, #0
 801c76c:	d03f      	beq.n	801c7ee <_vfiprintf_r+0x20e>
 801c76e:	4b26      	ldr	r3, [pc, #152]	; (801c808 <_vfiprintf_r+0x228>)
 801c770:	bb1b      	cbnz	r3, 801c7ba <_vfiprintf_r+0x1da>
 801c772:	9b03      	ldr	r3, [sp, #12]
 801c774:	3307      	adds	r3, #7
 801c776:	f023 0307 	bic.w	r3, r3, #7
 801c77a:	3308      	adds	r3, #8
 801c77c:	9303      	str	r3, [sp, #12]
 801c77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c780:	443b      	add	r3, r7
 801c782:	9309      	str	r3, [sp, #36]	; 0x24
 801c784:	e768      	b.n	801c658 <_vfiprintf_r+0x78>
 801c786:	fb0c 3202 	mla	r2, ip, r2, r3
 801c78a:	460c      	mov	r4, r1
 801c78c:	2001      	movs	r0, #1
 801c78e:	e7a6      	b.n	801c6de <_vfiprintf_r+0xfe>
 801c790:	2300      	movs	r3, #0
 801c792:	3401      	adds	r4, #1
 801c794:	9305      	str	r3, [sp, #20]
 801c796:	4619      	mov	r1, r3
 801c798:	f04f 0c0a 	mov.w	ip, #10
 801c79c:	4620      	mov	r0, r4
 801c79e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c7a2:	3a30      	subs	r2, #48	; 0x30
 801c7a4:	2a09      	cmp	r2, #9
 801c7a6:	d903      	bls.n	801c7b0 <_vfiprintf_r+0x1d0>
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d0c6      	beq.n	801c73a <_vfiprintf_r+0x15a>
 801c7ac:	9105      	str	r1, [sp, #20]
 801c7ae:	e7c4      	b.n	801c73a <_vfiprintf_r+0x15a>
 801c7b0:	fb0c 2101 	mla	r1, ip, r1, r2
 801c7b4:	4604      	mov	r4, r0
 801c7b6:	2301      	movs	r3, #1
 801c7b8:	e7f0      	b.n	801c79c <_vfiprintf_r+0x1bc>
 801c7ba:	ab03      	add	r3, sp, #12
 801c7bc:	9300      	str	r3, [sp, #0]
 801c7be:	462a      	mov	r2, r5
 801c7c0:	4b12      	ldr	r3, [pc, #72]	; (801c80c <_vfiprintf_r+0x22c>)
 801c7c2:	a904      	add	r1, sp, #16
 801c7c4:	4630      	mov	r0, r6
 801c7c6:	f7fb fe03 	bl	80183d0 <_printf_float>
 801c7ca:	4607      	mov	r7, r0
 801c7cc:	1c78      	adds	r0, r7, #1
 801c7ce:	d1d6      	bne.n	801c77e <_vfiprintf_r+0x19e>
 801c7d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c7d2:	07d9      	lsls	r1, r3, #31
 801c7d4:	d405      	bmi.n	801c7e2 <_vfiprintf_r+0x202>
 801c7d6:	89ab      	ldrh	r3, [r5, #12]
 801c7d8:	059a      	lsls	r2, r3, #22
 801c7da:	d402      	bmi.n	801c7e2 <_vfiprintf_r+0x202>
 801c7dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c7de:	f7fd fbdc 	bl	8019f9a <__retarget_lock_release_recursive>
 801c7e2:	89ab      	ldrh	r3, [r5, #12]
 801c7e4:	065b      	lsls	r3, r3, #25
 801c7e6:	f53f af1d 	bmi.w	801c624 <_vfiprintf_r+0x44>
 801c7ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c7ec:	e71c      	b.n	801c628 <_vfiprintf_r+0x48>
 801c7ee:	ab03      	add	r3, sp, #12
 801c7f0:	9300      	str	r3, [sp, #0]
 801c7f2:	462a      	mov	r2, r5
 801c7f4:	4b05      	ldr	r3, [pc, #20]	; (801c80c <_vfiprintf_r+0x22c>)
 801c7f6:	a904      	add	r1, sp, #16
 801c7f8:	4630      	mov	r0, r6
 801c7fa:	f7fc f88d 	bl	8018918 <_printf_i>
 801c7fe:	e7e4      	b.n	801c7ca <_vfiprintf_r+0x1ea>
 801c800:	0801fd8e 	.word	0x0801fd8e
 801c804:	0801fd98 	.word	0x0801fd98
 801c808:	080183d1 	.word	0x080183d1
 801c80c:	0801c5bd 	.word	0x0801c5bd
 801c810:	0801fd94 	.word	0x0801fd94

0801c814 <__swbuf_r>:
 801c814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c816:	460e      	mov	r6, r1
 801c818:	4614      	mov	r4, r2
 801c81a:	4605      	mov	r5, r0
 801c81c:	b118      	cbz	r0, 801c826 <__swbuf_r+0x12>
 801c81e:	6a03      	ldr	r3, [r0, #32]
 801c820:	b90b      	cbnz	r3, 801c826 <__swbuf_r+0x12>
 801c822:	f7fc fc45 	bl	80190b0 <__sinit>
 801c826:	69a3      	ldr	r3, [r4, #24]
 801c828:	60a3      	str	r3, [r4, #8]
 801c82a:	89a3      	ldrh	r3, [r4, #12]
 801c82c:	071a      	lsls	r2, r3, #28
 801c82e:	d525      	bpl.n	801c87c <__swbuf_r+0x68>
 801c830:	6923      	ldr	r3, [r4, #16]
 801c832:	b31b      	cbz	r3, 801c87c <__swbuf_r+0x68>
 801c834:	6823      	ldr	r3, [r4, #0]
 801c836:	6922      	ldr	r2, [r4, #16]
 801c838:	1a98      	subs	r0, r3, r2
 801c83a:	6963      	ldr	r3, [r4, #20]
 801c83c:	b2f6      	uxtb	r6, r6
 801c83e:	4283      	cmp	r3, r0
 801c840:	4637      	mov	r7, r6
 801c842:	dc04      	bgt.n	801c84e <__swbuf_r+0x3a>
 801c844:	4621      	mov	r1, r4
 801c846:	4628      	mov	r0, r5
 801c848:	f7ff f87c 	bl	801b944 <_fflush_r>
 801c84c:	b9e0      	cbnz	r0, 801c888 <__swbuf_r+0x74>
 801c84e:	68a3      	ldr	r3, [r4, #8]
 801c850:	3b01      	subs	r3, #1
 801c852:	60a3      	str	r3, [r4, #8]
 801c854:	6823      	ldr	r3, [r4, #0]
 801c856:	1c5a      	adds	r2, r3, #1
 801c858:	6022      	str	r2, [r4, #0]
 801c85a:	701e      	strb	r6, [r3, #0]
 801c85c:	6962      	ldr	r2, [r4, #20]
 801c85e:	1c43      	adds	r3, r0, #1
 801c860:	429a      	cmp	r2, r3
 801c862:	d004      	beq.n	801c86e <__swbuf_r+0x5a>
 801c864:	89a3      	ldrh	r3, [r4, #12]
 801c866:	07db      	lsls	r3, r3, #31
 801c868:	d506      	bpl.n	801c878 <__swbuf_r+0x64>
 801c86a:	2e0a      	cmp	r6, #10
 801c86c:	d104      	bne.n	801c878 <__swbuf_r+0x64>
 801c86e:	4621      	mov	r1, r4
 801c870:	4628      	mov	r0, r5
 801c872:	f7ff f867 	bl	801b944 <_fflush_r>
 801c876:	b938      	cbnz	r0, 801c888 <__swbuf_r+0x74>
 801c878:	4638      	mov	r0, r7
 801c87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c87c:	4621      	mov	r1, r4
 801c87e:	4628      	mov	r0, r5
 801c880:	f000 f806 	bl	801c890 <__swsetup_r>
 801c884:	2800      	cmp	r0, #0
 801c886:	d0d5      	beq.n	801c834 <__swbuf_r+0x20>
 801c888:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c88c:	e7f4      	b.n	801c878 <__swbuf_r+0x64>
	...

0801c890 <__swsetup_r>:
 801c890:	b538      	push	{r3, r4, r5, lr}
 801c892:	4b2a      	ldr	r3, [pc, #168]	; (801c93c <__swsetup_r+0xac>)
 801c894:	4605      	mov	r5, r0
 801c896:	6818      	ldr	r0, [r3, #0]
 801c898:	460c      	mov	r4, r1
 801c89a:	b118      	cbz	r0, 801c8a4 <__swsetup_r+0x14>
 801c89c:	6a03      	ldr	r3, [r0, #32]
 801c89e:	b90b      	cbnz	r3, 801c8a4 <__swsetup_r+0x14>
 801c8a0:	f7fc fc06 	bl	80190b0 <__sinit>
 801c8a4:	89a3      	ldrh	r3, [r4, #12]
 801c8a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c8aa:	0718      	lsls	r0, r3, #28
 801c8ac:	d422      	bmi.n	801c8f4 <__swsetup_r+0x64>
 801c8ae:	06d9      	lsls	r1, r3, #27
 801c8b0:	d407      	bmi.n	801c8c2 <__swsetup_r+0x32>
 801c8b2:	2309      	movs	r3, #9
 801c8b4:	602b      	str	r3, [r5, #0]
 801c8b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c8ba:	81a3      	strh	r3, [r4, #12]
 801c8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c8c0:	e034      	b.n	801c92c <__swsetup_r+0x9c>
 801c8c2:	0758      	lsls	r0, r3, #29
 801c8c4:	d512      	bpl.n	801c8ec <__swsetup_r+0x5c>
 801c8c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c8c8:	b141      	cbz	r1, 801c8dc <__swsetup_r+0x4c>
 801c8ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c8ce:	4299      	cmp	r1, r3
 801c8d0:	d002      	beq.n	801c8d8 <__swsetup_r+0x48>
 801c8d2:	4628      	mov	r0, r5
 801c8d4:	f7fe f9fa 	bl	801accc <_free_r>
 801c8d8:	2300      	movs	r3, #0
 801c8da:	6363      	str	r3, [r4, #52]	; 0x34
 801c8dc:	89a3      	ldrh	r3, [r4, #12]
 801c8de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c8e2:	81a3      	strh	r3, [r4, #12]
 801c8e4:	2300      	movs	r3, #0
 801c8e6:	6063      	str	r3, [r4, #4]
 801c8e8:	6923      	ldr	r3, [r4, #16]
 801c8ea:	6023      	str	r3, [r4, #0]
 801c8ec:	89a3      	ldrh	r3, [r4, #12]
 801c8ee:	f043 0308 	orr.w	r3, r3, #8
 801c8f2:	81a3      	strh	r3, [r4, #12]
 801c8f4:	6923      	ldr	r3, [r4, #16]
 801c8f6:	b94b      	cbnz	r3, 801c90c <__swsetup_r+0x7c>
 801c8f8:	89a3      	ldrh	r3, [r4, #12]
 801c8fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c8fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c902:	d003      	beq.n	801c90c <__swsetup_r+0x7c>
 801c904:	4621      	mov	r1, r4
 801c906:	4628      	mov	r0, r5
 801c908:	f000 f840 	bl	801c98c <__smakebuf_r>
 801c90c:	89a0      	ldrh	r0, [r4, #12]
 801c90e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c912:	f010 0301 	ands.w	r3, r0, #1
 801c916:	d00a      	beq.n	801c92e <__swsetup_r+0x9e>
 801c918:	2300      	movs	r3, #0
 801c91a:	60a3      	str	r3, [r4, #8]
 801c91c:	6963      	ldr	r3, [r4, #20]
 801c91e:	425b      	negs	r3, r3
 801c920:	61a3      	str	r3, [r4, #24]
 801c922:	6923      	ldr	r3, [r4, #16]
 801c924:	b943      	cbnz	r3, 801c938 <__swsetup_r+0xa8>
 801c926:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c92a:	d1c4      	bne.n	801c8b6 <__swsetup_r+0x26>
 801c92c:	bd38      	pop	{r3, r4, r5, pc}
 801c92e:	0781      	lsls	r1, r0, #30
 801c930:	bf58      	it	pl
 801c932:	6963      	ldrpl	r3, [r4, #20]
 801c934:	60a3      	str	r3, [r4, #8]
 801c936:	e7f4      	b.n	801c922 <__swsetup_r+0x92>
 801c938:	2000      	movs	r0, #0
 801c93a:	e7f7      	b.n	801c92c <__swsetup_r+0x9c>
 801c93c:	200001f0 	.word	0x200001f0

0801c940 <__swhatbuf_r>:
 801c940:	b570      	push	{r4, r5, r6, lr}
 801c942:	460c      	mov	r4, r1
 801c944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c948:	2900      	cmp	r1, #0
 801c94a:	b096      	sub	sp, #88	; 0x58
 801c94c:	4615      	mov	r5, r2
 801c94e:	461e      	mov	r6, r3
 801c950:	da0d      	bge.n	801c96e <__swhatbuf_r+0x2e>
 801c952:	89a3      	ldrh	r3, [r4, #12]
 801c954:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c958:	f04f 0100 	mov.w	r1, #0
 801c95c:	bf0c      	ite	eq
 801c95e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c962:	2340      	movne	r3, #64	; 0x40
 801c964:	2000      	movs	r0, #0
 801c966:	6031      	str	r1, [r6, #0]
 801c968:	602b      	str	r3, [r5, #0]
 801c96a:	b016      	add	sp, #88	; 0x58
 801c96c:	bd70      	pop	{r4, r5, r6, pc}
 801c96e:	466a      	mov	r2, sp
 801c970:	f000 f848 	bl	801ca04 <_fstat_r>
 801c974:	2800      	cmp	r0, #0
 801c976:	dbec      	blt.n	801c952 <__swhatbuf_r+0x12>
 801c978:	9901      	ldr	r1, [sp, #4]
 801c97a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c97e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c982:	4259      	negs	r1, r3
 801c984:	4159      	adcs	r1, r3
 801c986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c98a:	e7eb      	b.n	801c964 <__swhatbuf_r+0x24>

0801c98c <__smakebuf_r>:
 801c98c:	898b      	ldrh	r3, [r1, #12]
 801c98e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c990:	079d      	lsls	r5, r3, #30
 801c992:	4606      	mov	r6, r0
 801c994:	460c      	mov	r4, r1
 801c996:	d507      	bpl.n	801c9a8 <__smakebuf_r+0x1c>
 801c998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c99c:	6023      	str	r3, [r4, #0]
 801c99e:	6123      	str	r3, [r4, #16]
 801c9a0:	2301      	movs	r3, #1
 801c9a2:	6163      	str	r3, [r4, #20]
 801c9a4:	b002      	add	sp, #8
 801c9a6:	bd70      	pop	{r4, r5, r6, pc}
 801c9a8:	ab01      	add	r3, sp, #4
 801c9aa:	466a      	mov	r2, sp
 801c9ac:	f7ff ffc8 	bl	801c940 <__swhatbuf_r>
 801c9b0:	9900      	ldr	r1, [sp, #0]
 801c9b2:	4605      	mov	r5, r0
 801c9b4:	4630      	mov	r0, r6
 801c9b6:	f7fe fead 	bl	801b714 <_malloc_r>
 801c9ba:	b948      	cbnz	r0, 801c9d0 <__smakebuf_r+0x44>
 801c9bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c9c0:	059a      	lsls	r2, r3, #22
 801c9c2:	d4ef      	bmi.n	801c9a4 <__smakebuf_r+0x18>
 801c9c4:	f023 0303 	bic.w	r3, r3, #3
 801c9c8:	f043 0302 	orr.w	r3, r3, #2
 801c9cc:	81a3      	strh	r3, [r4, #12]
 801c9ce:	e7e3      	b.n	801c998 <__smakebuf_r+0xc>
 801c9d0:	89a3      	ldrh	r3, [r4, #12]
 801c9d2:	6020      	str	r0, [r4, #0]
 801c9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c9d8:	81a3      	strh	r3, [r4, #12]
 801c9da:	9b00      	ldr	r3, [sp, #0]
 801c9dc:	6163      	str	r3, [r4, #20]
 801c9de:	9b01      	ldr	r3, [sp, #4]
 801c9e0:	6120      	str	r0, [r4, #16]
 801c9e2:	b15b      	cbz	r3, 801c9fc <__smakebuf_r+0x70>
 801c9e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c9e8:	4630      	mov	r0, r6
 801c9ea:	f000 f81d 	bl	801ca28 <_isatty_r>
 801c9ee:	b128      	cbz	r0, 801c9fc <__smakebuf_r+0x70>
 801c9f0:	89a3      	ldrh	r3, [r4, #12]
 801c9f2:	f023 0303 	bic.w	r3, r3, #3
 801c9f6:	f043 0301 	orr.w	r3, r3, #1
 801c9fa:	81a3      	strh	r3, [r4, #12]
 801c9fc:	89a3      	ldrh	r3, [r4, #12]
 801c9fe:	431d      	orrs	r5, r3
 801ca00:	81a5      	strh	r5, [r4, #12]
 801ca02:	e7cf      	b.n	801c9a4 <__smakebuf_r+0x18>

0801ca04 <_fstat_r>:
 801ca04:	b538      	push	{r3, r4, r5, lr}
 801ca06:	4d07      	ldr	r5, [pc, #28]	; (801ca24 <_fstat_r+0x20>)
 801ca08:	2300      	movs	r3, #0
 801ca0a:	4604      	mov	r4, r0
 801ca0c:	4608      	mov	r0, r1
 801ca0e:	4611      	mov	r1, r2
 801ca10:	602b      	str	r3, [r5, #0]
 801ca12:	f7e8 fe28 	bl	8005666 <_fstat>
 801ca16:	1c43      	adds	r3, r0, #1
 801ca18:	d102      	bne.n	801ca20 <_fstat_r+0x1c>
 801ca1a:	682b      	ldr	r3, [r5, #0]
 801ca1c:	b103      	cbz	r3, 801ca20 <_fstat_r+0x1c>
 801ca1e:	6023      	str	r3, [r4, #0]
 801ca20:	bd38      	pop	{r3, r4, r5, pc}
 801ca22:	bf00      	nop
 801ca24:	20009504 	.word	0x20009504

0801ca28 <_isatty_r>:
 801ca28:	b538      	push	{r3, r4, r5, lr}
 801ca2a:	4d06      	ldr	r5, [pc, #24]	; (801ca44 <_isatty_r+0x1c>)
 801ca2c:	2300      	movs	r3, #0
 801ca2e:	4604      	mov	r4, r0
 801ca30:	4608      	mov	r0, r1
 801ca32:	602b      	str	r3, [r5, #0]
 801ca34:	f7e8 fe27 	bl	8005686 <_isatty>
 801ca38:	1c43      	adds	r3, r0, #1
 801ca3a:	d102      	bne.n	801ca42 <_isatty_r+0x1a>
 801ca3c:	682b      	ldr	r3, [r5, #0]
 801ca3e:	b103      	cbz	r3, 801ca42 <_isatty_r+0x1a>
 801ca40:	6023      	str	r3, [r4, #0]
 801ca42:	bd38      	pop	{r3, r4, r5, pc}
 801ca44:	20009504 	.word	0x20009504

0801ca48 <_raise_r>:
 801ca48:	291f      	cmp	r1, #31
 801ca4a:	b538      	push	{r3, r4, r5, lr}
 801ca4c:	4604      	mov	r4, r0
 801ca4e:	460d      	mov	r5, r1
 801ca50:	d904      	bls.n	801ca5c <_raise_r+0x14>
 801ca52:	2316      	movs	r3, #22
 801ca54:	6003      	str	r3, [r0, #0]
 801ca56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ca5a:	bd38      	pop	{r3, r4, r5, pc}
 801ca5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801ca5e:	b112      	cbz	r2, 801ca66 <_raise_r+0x1e>
 801ca60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ca64:	b94b      	cbnz	r3, 801ca7a <_raise_r+0x32>
 801ca66:	4620      	mov	r0, r4
 801ca68:	f000 f830 	bl	801cacc <_getpid_r>
 801ca6c:	462a      	mov	r2, r5
 801ca6e:	4601      	mov	r1, r0
 801ca70:	4620      	mov	r0, r4
 801ca72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ca76:	f000 b817 	b.w	801caa8 <_kill_r>
 801ca7a:	2b01      	cmp	r3, #1
 801ca7c:	d00a      	beq.n	801ca94 <_raise_r+0x4c>
 801ca7e:	1c59      	adds	r1, r3, #1
 801ca80:	d103      	bne.n	801ca8a <_raise_r+0x42>
 801ca82:	2316      	movs	r3, #22
 801ca84:	6003      	str	r3, [r0, #0]
 801ca86:	2001      	movs	r0, #1
 801ca88:	e7e7      	b.n	801ca5a <_raise_r+0x12>
 801ca8a:	2400      	movs	r4, #0
 801ca8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ca90:	4628      	mov	r0, r5
 801ca92:	4798      	blx	r3
 801ca94:	2000      	movs	r0, #0
 801ca96:	e7e0      	b.n	801ca5a <_raise_r+0x12>

0801ca98 <raise>:
 801ca98:	4b02      	ldr	r3, [pc, #8]	; (801caa4 <raise+0xc>)
 801ca9a:	4601      	mov	r1, r0
 801ca9c:	6818      	ldr	r0, [r3, #0]
 801ca9e:	f7ff bfd3 	b.w	801ca48 <_raise_r>
 801caa2:	bf00      	nop
 801caa4:	200001f0 	.word	0x200001f0

0801caa8 <_kill_r>:
 801caa8:	b538      	push	{r3, r4, r5, lr}
 801caaa:	4d07      	ldr	r5, [pc, #28]	; (801cac8 <_kill_r+0x20>)
 801caac:	2300      	movs	r3, #0
 801caae:	4604      	mov	r4, r0
 801cab0:	4608      	mov	r0, r1
 801cab2:	4611      	mov	r1, r2
 801cab4:	602b      	str	r3, [r5, #0]
 801cab6:	f7e8 fd77 	bl	80055a8 <_kill>
 801caba:	1c43      	adds	r3, r0, #1
 801cabc:	d102      	bne.n	801cac4 <_kill_r+0x1c>
 801cabe:	682b      	ldr	r3, [r5, #0]
 801cac0:	b103      	cbz	r3, 801cac4 <_kill_r+0x1c>
 801cac2:	6023      	str	r3, [r4, #0]
 801cac4:	bd38      	pop	{r3, r4, r5, pc}
 801cac6:	bf00      	nop
 801cac8:	20009504 	.word	0x20009504

0801cacc <_getpid_r>:
 801cacc:	f7e8 bd64 	b.w	8005598 <_getpid>

0801cad0 <asinf>:
 801cad0:	b508      	push	{r3, lr}
 801cad2:	ed2d 8b02 	vpush	{d8}
 801cad6:	eeb0 8a40 	vmov.f32	s16, s0
 801cada:	f000 fd0b 	bl	801d4f4 <__ieee754_asinf>
 801cade:	eeb4 8a48 	vcmp.f32	s16, s16
 801cae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cae6:	eef0 8a40 	vmov.f32	s17, s0
 801caea:	d615      	bvs.n	801cb18 <asinf+0x48>
 801caec:	eeb0 0a48 	vmov.f32	s0, s16
 801caf0:	f000 f954 	bl	801cd9c <fabsf>
 801caf4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801caf8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801cafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb00:	dd0a      	ble.n	801cb18 <asinf+0x48>
 801cb02:	f7fd fa1f 	bl	8019f44 <__errno>
 801cb06:	ecbd 8b02 	vpop	{d8}
 801cb0a:	2321      	movs	r3, #33	; 0x21
 801cb0c:	6003      	str	r3, [r0, #0]
 801cb0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801cb12:	4804      	ldr	r0, [pc, #16]	; (801cb24 <asinf+0x54>)
 801cb14:	f7fd ba58 	b.w	8019fc8 <nanf>
 801cb18:	eeb0 0a68 	vmov.f32	s0, s17
 801cb1c:	ecbd 8b02 	vpop	{d8}
 801cb20:	bd08      	pop	{r3, pc}
 801cb22:	bf00      	nop
 801cb24:	0801ff2f 	.word	0x0801ff2f

0801cb28 <atan2f>:
 801cb28:	f000 bdca 	b.w	801d6c0 <__ieee754_atan2f>

0801cb2c <atan2>:
 801cb2c:	f000 b800 	b.w	801cb30 <__ieee754_atan2>

0801cb30 <__ieee754_atan2>:
 801cb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb34:	ec57 6b11 	vmov	r6, r7, d1
 801cb38:	4273      	negs	r3, r6
 801cb3a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 801ccb8 <__ieee754_atan2+0x188>
 801cb3e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801cb42:	4333      	orrs	r3, r6
 801cb44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801cb48:	4543      	cmp	r3, r8
 801cb4a:	ec51 0b10 	vmov	r0, r1, d0
 801cb4e:	ee11 5a10 	vmov	r5, s2
 801cb52:	d80a      	bhi.n	801cb6a <__ieee754_atan2+0x3a>
 801cb54:	4244      	negs	r4, r0
 801cb56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801cb5a:	4304      	orrs	r4, r0
 801cb5c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801cb60:	4544      	cmp	r4, r8
 801cb62:	ee10 9a10 	vmov	r9, s0
 801cb66:	468e      	mov	lr, r1
 801cb68:	d907      	bls.n	801cb7a <__ieee754_atan2+0x4a>
 801cb6a:	4632      	mov	r2, r6
 801cb6c:	463b      	mov	r3, r7
 801cb6e:	f7e3 fb97 	bl	80002a0 <__adddf3>
 801cb72:	ec41 0b10 	vmov	d0, r0, r1
 801cb76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb7a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801cb7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801cb82:	4334      	orrs	r4, r6
 801cb84:	d103      	bne.n	801cb8e <__ieee754_atan2+0x5e>
 801cb86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb8a:	f000 b911 	b.w	801cdb0 <atan>
 801cb8e:	17bc      	asrs	r4, r7, #30
 801cb90:	f004 0402 	and.w	r4, r4, #2
 801cb94:	ea53 0909 	orrs.w	r9, r3, r9
 801cb98:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801cb9c:	d107      	bne.n	801cbae <__ieee754_atan2+0x7e>
 801cb9e:	2c02      	cmp	r4, #2
 801cba0:	d05f      	beq.n	801cc62 <__ieee754_atan2+0x132>
 801cba2:	2c03      	cmp	r4, #3
 801cba4:	d1e5      	bne.n	801cb72 <__ieee754_atan2+0x42>
 801cba6:	a140      	add	r1, pc, #256	; (adr r1, 801cca8 <__ieee754_atan2+0x178>)
 801cba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbac:	e7e1      	b.n	801cb72 <__ieee754_atan2+0x42>
 801cbae:	4315      	orrs	r5, r2
 801cbb0:	d106      	bne.n	801cbc0 <__ieee754_atan2+0x90>
 801cbb2:	f1be 0f00 	cmp.w	lr, #0
 801cbb6:	da5f      	bge.n	801cc78 <__ieee754_atan2+0x148>
 801cbb8:	a13d      	add	r1, pc, #244	; (adr r1, 801ccb0 <__ieee754_atan2+0x180>)
 801cbba:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cbbe:	e7d8      	b.n	801cb72 <__ieee754_atan2+0x42>
 801cbc0:	4542      	cmp	r2, r8
 801cbc2:	d10f      	bne.n	801cbe4 <__ieee754_atan2+0xb4>
 801cbc4:	4293      	cmp	r3, r2
 801cbc6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801cbca:	d107      	bne.n	801cbdc <__ieee754_atan2+0xac>
 801cbcc:	2c02      	cmp	r4, #2
 801cbce:	d84c      	bhi.n	801cc6a <__ieee754_atan2+0x13a>
 801cbd0:	4b33      	ldr	r3, [pc, #204]	; (801cca0 <__ieee754_atan2+0x170>)
 801cbd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801cbd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cbda:	e7ca      	b.n	801cb72 <__ieee754_atan2+0x42>
 801cbdc:	2c02      	cmp	r4, #2
 801cbde:	d848      	bhi.n	801cc72 <__ieee754_atan2+0x142>
 801cbe0:	4b30      	ldr	r3, [pc, #192]	; (801cca4 <__ieee754_atan2+0x174>)
 801cbe2:	e7f6      	b.n	801cbd2 <__ieee754_atan2+0xa2>
 801cbe4:	4543      	cmp	r3, r8
 801cbe6:	d0e4      	beq.n	801cbb2 <__ieee754_atan2+0x82>
 801cbe8:	1a9b      	subs	r3, r3, r2
 801cbea:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801cbee:	ea4f 5223 	mov.w	r2, r3, asr #20
 801cbf2:	da1e      	bge.n	801cc32 <__ieee754_atan2+0x102>
 801cbf4:	2f00      	cmp	r7, #0
 801cbf6:	da01      	bge.n	801cbfc <__ieee754_atan2+0xcc>
 801cbf8:	323c      	adds	r2, #60	; 0x3c
 801cbfa:	db1e      	blt.n	801cc3a <__ieee754_atan2+0x10a>
 801cbfc:	4632      	mov	r2, r6
 801cbfe:	463b      	mov	r3, r7
 801cc00:	f7e3 fe2e 	bl	8000860 <__aeabi_ddiv>
 801cc04:	ec41 0b10 	vmov	d0, r0, r1
 801cc08:	f000 fab8 	bl	801d17c <fabs>
 801cc0c:	f000 f8d0 	bl	801cdb0 <atan>
 801cc10:	ec51 0b10 	vmov	r0, r1, d0
 801cc14:	2c01      	cmp	r4, #1
 801cc16:	d013      	beq.n	801cc40 <__ieee754_atan2+0x110>
 801cc18:	2c02      	cmp	r4, #2
 801cc1a:	d015      	beq.n	801cc48 <__ieee754_atan2+0x118>
 801cc1c:	2c00      	cmp	r4, #0
 801cc1e:	d0a8      	beq.n	801cb72 <__ieee754_atan2+0x42>
 801cc20:	a317      	add	r3, pc, #92	; (adr r3, 801cc80 <__ieee754_atan2+0x150>)
 801cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc26:	f7e3 fb39 	bl	800029c <__aeabi_dsub>
 801cc2a:	a317      	add	r3, pc, #92	; (adr r3, 801cc88 <__ieee754_atan2+0x158>)
 801cc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc30:	e014      	b.n	801cc5c <__ieee754_atan2+0x12c>
 801cc32:	a117      	add	r1, pc, #92	; (adr r1, 801cc90 <__ieee754_atan2+0x160>)
 801cc34:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc38:	e7ec      	b.n	801cc14 <__ieee754_atan2+0xe4>
 801cc3a:	2000      	movs	r0, #0
 801cc3c:	2100      	movs	r1, #0
 801cc3e:	e7e9      	b.n	801cc14 <__ieee754_atan2+0xe4>
 801cc40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801cc44:	4619      	mov	r1, r3
 801cc46:	e794      	b.n	801cb72 <__ieee754_atan2+0x42>
 801cc48:	a30d      	add	r3, pc, #52	; (adr r3, 801cc80 <__ieee754_atan2+0x150>)
 801cc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc4e:	f7e3 fb25 	bl	800029c <__aeabi_dsub>
 801cc52:	4602      	mov	r2, r0
 801cc54:	460b      	mov	r3, r1
 801cc56:	a10c      	add	r1, pc, #48	; (adr r1, 801cc88 <__ieee754_atan2+0x158>)
 801cc58:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc5c:	f7e3 fb1e 	bl	800029c <__aeabi_dsub>
 801cc60:	e787      	b.n	801cb72 <__ieee754_atan2+0x42>
 801cc62:	a109      	add	r1, pc, #36	; (adr r1, 801cc88 <__ieee754_atan2+0x158>)
 801cc64:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc68:	e783      	b.n	801cb72 <__ieee754_atan2+0x42>
 801cc6a:	a10b      	add	r1, pc, #44	; (adr r1, 801cc98 <__ieee754_atan2+0x168>)
 801cc6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc70:	e77f      	b.n	801cb72 <__ieee754_atan2+0x42>
 801cc72:	2000      	movs	r0, #0
 801cc74:	2100      	movs	r1, #0
 801cc76:	e77c      	b.n	801cb72 <__ieee754_atan2+0x42>
 801cc78:	a105      	add	r1, pc, #20	; (adr r1, 801cc90 <__ieee754_atan2+0x160>)
 801cc7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801cc7e:	e778      	b.n	801cb72 <__ieee754_atan2+0x42>
 801cc80:	33145c07 	.word	0x33145c07
 801cc84:	3ca1a626 	.word	0x3ca1a626
 801cc88:	54442d18 	.word	0x54442d18
 801cc8c:	400921fb 	.word	0x400921fb
 801cc90:	54442d18 	.word	0x54442d18
 801cc94:	3ff921fb 	.word	0x3ff921fb
 801cc98:	54442d18 	.word	0x54442d18
 801cc9c:	3fe921fb 	.word	0x3fe921fb
 801cca0:	0801ff30 	.word	0x0801ff30
 801cca4:	0801ff48 	.word	0x0801ff48
 801cca8:	54442d18 	.word	0x54442d18
 801ccac:	c00921fb 	.word	0xc00921fb
 801ccb0:	54442d18 	.word	0x54442d18
 801ccb4:	bff921fb 	.word	0xbff921fb
 801ccb8:	7ff00000 	.word	0x7ff00000

0801ccbc <cosf>:
 801ccbc:	ee10 3a10 	vmov	r3, s0
 801ccc0:	b507      	push	{r0, r1, r2, lr}
 801ccc2:	4a1e      	ldr	r2, [pc, #120]	; (801cd3c <cosf+0x80>)
 801ccc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ccc8:	4293      	cmp	r3, r2
 801ccca:	dc06      	bgt.n	801ccda <cosf+0x1e>
 801cccc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801cd40 <cosf+0x84>
 801ccd0:	b003      	add	sp, #12
 801ccd2:	f85d eb04 	ldr.w	lr, [sp], #4
 801ccd6:	f000 ba87 	b.w	801d1e8 <__kernel_cosf>
 801ccda:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ccde:	db04      	blt.n	801ccea <cosf+0x2e>
 801cce0:	ee30 0a40 	vsub.f32	s0, s0, s0
 801cce4:	b003      	add	sp, #12
 801cce6:	f85d fb04 	ldr.w	pc, [sp], #4
 801ccea:	4668      	mov	r0, sp
 801ccec:	f000 ff68 	bl	801dbc0 <__ieee754_rem_pio2f>
 801ccf0:	f000 0003 	and.w	r0, r0, #3
 801ccf4:	2801      	cmp	r0, #1
 801ccf6:	d009      	beq.n	801cd0c <cosf+0x50>
 801ccf8:	2802      	cmp	r0, #2
 801ccfa:	d010      	beq.n	801cd1e <cosf+0x62>
 801ccfc:	b9b0      	cbnz	r0, 801cd2c <cosf+0x70>
 801ccfe:	eddd 0a01 	vldr	s1, [sp, #4]
 801cd02:	ed9d 0a00 	vldr	s0, [sp]
 801cd06:	f000 fa6f 	bl	801d1e8 <__kernel_cosf>
 801cd0a:	e7eb      	b.n	801cce4 <cosf+0x28>
 801cd0c:	eddd 0a01 	vldr	s1, [sp, #4]
 801cd10:	ed9d 0a00 	vldr	s0, [sp]
 801cd14:	f000 fac6 	bl	801d2a4 <__kernel_sinf>
 801cd18:	eeb1 0a40 	vneg.f32	s0, s0
 801cd1c:	e7e2      	b.n	801cce4 <cosf+0x28>
 801cd1e:	eddd 0a01 	vldr	s1, [sp, #4]
 801cd22:	ed9d 0a00 	vldr	s0, [sp]
 801cd26:	f000 fa5f 	bl	801d1e8 <__kernel_cosf>
 801cd2a:	e7f5      	b.n	801cd18 <cosf+0x5c>
 801cd2c:	eddd 0a01 	vldr	s1, [sp, #4]
 801cd30:	ed9d 0a00 	vldr	s0, [sp]
 801cd34:	2001      	movs	r0, #1
 801cd36:	f000 fab5 	bl	801d2a4 <__kernel_sinf>
 801cd3a:	e7d3      	b.n	801cce4 <cosf+0x28>
 801cd3c:	3f490fd8 	.word	0x3f490fd8
 801cd40:	00000000 	.word	0x00000000

0801cd44 <sqrt>:
 801cd44:	b538      	push	{r3, r4, r5, lr}
 801cd46:	ed2d 8b02 	vpush	{d8}
 801cd4a:	ec55 4b10 	vmov	r4, r5, d0
 801cd4e:	f000 fd57 	bl	801d800 <__ieee754_sqrt>
 801cd52:	4622      	mov	r2, r4
 801cd54:	462b      	mov	r3, r5
 801cd56:	4620      	mov	r0, r4
 801cd58:	4629      	mov	r1, r5
 801cd5a:	eeb0 8a40 	vmov.f32	s16, s0
 801cd5e:	eef0 8a60 	vmov.f32	s17, s1
 801cd62:	f7e3 feed 	bl	8000b40 <__aeabi_dcmpun>
 801cd66:	b990      	cbnz	r0, 801cd8e <sqrt+0x4a>
 801cd68:	2200      	movs	r2, #0
 801cd6a:	2300      	movs	r3, #0
 801cd6c:	4620      	mov	r0, r4
 801cd6e:	4629      	mov	r1, r5
 801cd70:	f7e3 febe 	bl	8000af0 <__aeabi_dcmplt>
 801cd74:	b158      	cbz	r0, 801cd8e <sqrt+0x4a>
 801cd76:	f7fd f8e5 	bl	8019f44 <__errno>
 801cd7a:	2321      	movs	r3, #33	; 0x21
 801cd7c:	6003      	str	r3, [r0, #0]
 801cd7e:	2200      	movs	r2, #0
 801cd80:	2300      	movs	r3, #0
 801cd82:	4610      	mov	r0, r2
 801cd84:	4619      	mov	r1, r3
 801cd86:	f7e3 fd6b 	bl	8000860 <__aeabi_ddiv>
 801cd8a:	ec41 0b18 	vmov	d8, r0, r1
 801cd8e:	eeb0 0a48 	vmov.f32	s0, s16
 801cd92:	eef0 0a68 	vmov.f32	s1, s17
 801cd96:	ecbd 8b02 	vpop	{d8}
 801cd9a:	bd38      	pop	{r3, r4, r5, pc}

0801cd9c <fabsf>:
 801cd9c:	ee10 3a10 	vmov	r3, s0
 801cda0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cda4:	ee00 3a10 	vmov	s0, r3
 801cda8:	4770      	bx	lr
 801cdaa:	0000      	movs	r0, r0
 801cdac:	0000      	movs	r0, r0
	...

0801cdb0 <atan>:
 801cdb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdb4:	ec55 4b10 	vmov	r4, r5, d0
 801cdb8:	4bc3      	ldr	r3, [pc, #780]	; (801d0c8 <atan+0x318>)
 801cdba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801cdbe:	429e      	cmp	r6, r3
 801cdc0:	46ab      	mov	fp, r5
 801cdc2:	dd18      	ble.n	801cdf6 <atan+0x46>
 801cdc4:	4bc1      	ldr	r3, [pc, #772]	; (801d0cc <atan+0x31c>)
 801cdc6:	429e      	cmp	r6, r3
 801cdc8:	dc01      	bgt.n	801cdce <atan+0x1e>
 801cdca:	d109      	bne.n	801cde0 <atan+0x30>
 801cdcc:	b144      	cbz	r4, 801cde0 <atan+0x30>
 801cdce:	4622      	mov	r2, r4
 801cdd0:	462b      	mov	r3, r5
 801cdd2:	4620      	mov	r0, r4
 801cdd4:	4629      	mov	r1, r5
 801cdd6:	f7e3 fa63 	bl	80002a0 <__adddf3>
 801cdda:	4604      	mov	r4, r0
 801cddc:	460d      	mov	r5, r1
 801cdde:	e006      	b.n	801cdee <atan+0x3e>
 801cde0:	f1bb 0f00 	cmp.w	fp, #0
 801cde4:	f300 8131 	bgt.w	801d04a <atan+0x29a>
 801cde8:	a59b      	add	r5, pc, #620	; (adr r5, 801d058 <atan+0x2a8>)
 801cdea:	e9d5 4500 	ldrd	r4, r5, [r5]
 801cdee:	ec45 4b10 	vmov	d0, r4, r5
 801cdf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdf6:	4bb6      	ldr	r3, [pc, #728]	; (801d0d0 <atan+0x320>)
 801cdf8:	429e      	cmp	r6, r3
 801cdfa:	dc14      	bgt.n	801ce26 <atan+0x76>
 801cdfc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ce00:	429e      	cmp	r6, r3
 801ce02:	dc0d      	bgt.n	801ce20 <atan+0x70>
 801ce04:	a396      	add	r3, pc, #600	; (adr r3, 801d060 <atan+0x2b0>)
 801ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce0a:	ee10 0a10 	vmov	r0, s0
 801ce0e:	4629      	mov	r1, r5
 801ce10:	f7e3 fa46 	bl	80002a0 <__adddf3>
 801ce14:	4baf      	ldr	r3, [pc, #700]	; (801d0d4 <atan+0x324>)
 801ce16:	2200      	movs	r2, #0
 801ce18:	f7e3 fe88 	bl	8000b2c <__aeabi_dcmpgt>
 801ce1c:	2800      	cmp	r0, #0
 801ce1e:	d1e6      	bne.n	801cdee <atan+0x3e>
 801ce20:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ce24:	e02b      	b.n	801ce7e <atan+0xce>
 801ce26:	f000 f9a9 	bl	801d17c <fabs>
 801ce2a:	4bab      	ldr	r3, [pc, #684]	; (801d0d8 <atan+0x328>)
 801ce2c:	429e      	cmp	r6, r3
 801ce2e:	ec55 4b10 	vmov	r4, r5, d0
 801ce32:	f300 80bf 	bgt.w	801cfb4 <atan+0x204>
 801ce36:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801ce3a:	429e      	cmp	r6, r3
 801ce3c:	f300 80a0 	bgt.w	801cf80 <atan+0x1d0>
 801ce40:	ee10 2a10 	vmov	r2, s0
 801ce44:	ee10 0a10 	vmov	r0, s0
 801ce48:	462b      	mov	r3, r5
 801ce4a:	4629      	mov	r1, r5
 801ce4c:	f7e3 fa28 	bl	80002a0 <__adddf3>
 801ce50:	4ba0      	ldr	r3, [pc, #640]	; (801d0d4 <atan+0x324>)
 801ce52:	2200      	movs	r2, #0
 801ce54:	f7e3 fa22 	bl	800029c <__aeabi_dsub>
 801ce58:	2200      	movs	r2, #0
 801ce5a:	4606      	mov	r6, r0
 801ce5c:	460f      	mov	r7, r1
 801ce5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ce62:	4620      	mov	r0, r4
 801ce64:	4629      	mov	r1, r5
 801ce66:	f7e3 fa1b 	bl	80002a0 <__adddf3>
 801ce6a:	4602      	mov	r2, r0
 801ce6c:	460b      	mov	r3, r1
 801ce6e:	4630      	mov	r0, r6
 801ce70:	4639      	mov	r1, r7
 801ce72:	f7e3 fcf5 	bl	8000860 <__aeabi_ddiv>
 801ce76:	f04f 0a00 	mov.w	sl, #0
 801ce7a:	4604      	mov	r4, r0
 801ce7c:	460d      	mov	r5, r1
 801ce7e:	4622      	mov	r2, r4
 801ce80:	462b      	mov	r3, r5
 801ce82:	4620      	mov	r0, r4
 801ce84:	4629      	mov	r1, r5
 801ce86:	f7e3 fbc1 	bl	800060c <__aeabi_dmul>
 801ce8a:	4602      	mov	r2, r0
 801ce8c:	460b      	mov	r3, r1
 801ce8e:	4680      	mov	r8, r0
 801ce90:	4689      	mov	r9, r1
 801ce92:	f7e3 fbbb 	bl	800060c <__aeabi_dmul>
 801ce96:	a374      	add	r3, pc, #464	; (adr r3, 801d068 <atan+0x2b8>)
 801ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce9c:	4606      	mov	r6, r0
 801ce9e:	460f      	mov	r7, r1
 801cea0:	f7e3 fbb4 	bl	800060c <__aeabi_dmul>
 801cea4:	a372      	add	r3, pc, #456	; (adr r3, 801d070 <atan+0x2c0>)
 801cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceaa:	f7e3 f9f9 	bl	80002a0 <__adddf3>
 801ceae:	4632      	mov	r2, r6
 801ceb0:	463b      	mov	r3, r7
 801ceb2:	f7e3 fbab 	bl	800060c <__aeabi_dmul>
 801ceb6:	a370      	add	r3, pc, #448	; (adr r3, 801d078 <atan+0x2c8>)
 801ceb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cebc:	f7e3 f9f0 	bl	80002a0 <__adddf3>
 801cec0:	4632      	mov	r2, r6
 801cec2:	463b      	mov	r3, r7
 801cec4:	f7e3 fba2 	bl	800060c <__aeabi_dmul>
 801cec8:	a36d      	add	r3, pc, #436	; (adr r3, 801d080 <atan+0x2d0>)
 801ceca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cece:	f7e3 f9e7 	bl	80002a0 <__adddf3>
 801ced2:	4632      	mov	r2, r6
 801ced4:	463b      	mov	r3, r7
 801ced6:	f7e3 fb99 	bl	800060c <__aeabi_dmul>
 801ceda:	a36b      	add	r3, pc, #428	; (adr r3, 801d088 <atan+0x2d8>)
 801cedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cee0:	f7e3 f9de 	bl	80002a0 <__adddf3>
 801cee4:	4632      	mov	r2, r6
 801cee6:	463b      	mov	r3, r7
 801cee8:	f7e3 fb90 	bl	800060c <__aeabi_dmul>
 801ceec:	a368      	add	r3, pc, #416	; (adr r3, 801d090 <atan+0x2e0>)
 801ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef2:	f7e3 f9d5 	bl	80002a0 <__adddf3>
 801cef6:	4642      	mov	r2, r8
 801cef8:	464b      	mov	r3, r9
 801cefa:	f7e3 fb87 	bl	800060c <__aeabi_dmul>
 801cefe:	a366      	add	r3, pc, #408	; (adr r3, 801d098 <atan+0x2e8>)
 801cf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf04:	4680      	mov	r8, r0
 801cf06:	4689      	mov	r9, r1
 801cf08:	4630      	mov	r0, r6
 801cf0a:	4639      	mov	r1, r7
 801cf0c:	f7e3 fb7e 	bl	800060c <__aeabi_dmul>
 801cf10:	a363      	add	r3, pc, #396	; (adr r3, 801d0a0 <atan+0x2f0>)
 801cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf16:	f7e3 f9c1 	bl	800029c <__aeabi_dsub>
 801cf1a:	4632      	mov	r2, r6
 801cf1c:	463b      	mov	r3, r7
 801cf1e:	f7e3 fb75 	bl	800060c <__aeabi_dmul>
 801cf22:	a361      	add	r3, pc, #388	; (adr r3, 801d0a8 <atan+0x2f8>)
 801cf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf28:	f7e3 f9b8 	bl	800029c <__aeabi_dsub>
 801cf2c:	4632      	mov	r2, r6
 801cf2e:	463b      	mov	r3, r7
 801cf30:	f7e3 fb6c 	bl	800060c <__aeabi_dmul>
 801cf34:	a35e      	add	r3, pc, #376	; (adr r3, 801d0b0 <atan+0x300>)
 801cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf3a:	f7e3 f9af 	bl	800029c <__aeabi_dsub>
 801cf3e:	4632      	mov	r2, r6
 801cf40:	463b      	mov	r3, r7
 801cf42:	f7e3 fb63 	bl	800060c <__aeabi_dmul>
 801cf46:	a35c      	add	r3, pc, #368	; (adr r3, 801d0b8 <atan+0x308>)
 801cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf4c:	f7e3 f9a6 	bl	800029c <__aeabi_dsub>
 801cf50:	4632      	mov	r2, r6
 801cf52:	463b      	mov	r3, r7
 801cf54:	f7e3 fb5a 	bl	800060c <__aeabi_dmul>
 801cf58:	4602      	mov	r2, r0
 801cf5a:	460b      	mov	r3, r1
 801cf5c:	4640      	mov	r0, r8
 801cf5e:	4649      	mov	r1, r9
 801cf60:	f7e3 f99e 	bl	80002a0 <__adddf3>
 801cf64:	4622      	mov	r2, r4
 801cf66:	462b      	mov	r3, r5
 801cf68:	f7e3 fb50 	bl	800060c <__aeabi_dmul>
 801cf6c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 801cf70:	4602      	mov	r2, r0
 801cf72:	460b      	mov	r3, r1
 801cf74:	d14b      	bne.n	801d00e <atan+0x25e>
 801cf76:	4620      	mov	r0, r4
 801cf78:	4629      	mov	r1, r5
 801cf7a:	f7e3 f98f 	bl	800029c <__aeabi_dsub>
 801cf7e:	e72c      	b.n	801cdda <atan+0x2a>
 801cf80:	ee10 0a10 	vmov	r0, s0
 801cf84:	4b53      	ldr	r3, [pc, #332]	; (801d0d4 <atan+0x324>)
 801cf86:	2200      	movs	r2, #0
 801cf88:	4629      	mov	r1, r5
 801cf8a:	f7e3 f987 	bl	800029c <__aeabi_dsub>
 801cf8e:	4b51      	ldr	r3, [pc, #324]	; (801d0d4 <atan+0x324>)
 801cf90:	4606      	mov	r6, r0
 801cf92:	460f      	mov	r7, r1
 801cf94:	2200      	movs	r2, #0
 801cf96:	4620      	mov	r0, r4
 801cf98:	4629      	mov	r1, r5
 801cf9a:	f7e3 f981 	bl	80002a0 <__adddf3>
 801cf9e:	4602      	mov	r2, r0
 801cfa0:	460b      	mov	r3, r1
 801cfa2:	4630      	mov	r0, r6
 801cfa4:	4639      	mov	r1, r7
 801cfa6:	f7e3 fc5b 	bl	8000860 <__aeabi_ddiv>
 801cfaa:	f04f 0a01 	mov.w	sl, #1
 801cfae:	4604      	mov	r4, r0
 801cfb0:	460d      	mov	r5, r1
 801cfb2:	e764      	b.n	801ce7e <atan+0xce>
 801cfb4:	4b49      	ldr	r3, [pc, #292]	; (801d0dc <atan+0x32c>)
 801cfb6:	429e      	cmp	r6, r3
 801cfb8:	da1d      	bge.n	801cff6 <atan+0x246>
 801cfba:	ee10 0a10 	vmov	r0, s0
 801cfbe:	4b48      	ldr	r3, [pc, #288]	; (801d0e0 <atan+0x330>)
 801cfc0:	2200      	movs	r2, #0
 801cfc2:	4629      	mov	r1, r5
 801cfc4:	f7e3 f96a 	bl	800029c <__aeabi_dsub>
 801cfc8:	4b45      	ldr	r3, [pc, #276]	; (801d0e0 <atan+0x330>)
 801cfca:	4606      	mov	r6, r0
 801cfcc:	460f      	mov	r7, r1
 801cfce:	2200      	movs	r2, #0
 801cfd0:	4620      	mov	r0, r4
 801cfd2:	4629      	mov	r1, r5
 801cfd4:	f7e3 fb1a 	bl	800060c <__aeabi_dmul>
 801cfd8:	4b3e      	ldr	r3, [pc, #248]	; (801d0d4 <atan+0x324>)
 801cfda:	2200      	movs	r2, #0
 801cfdc:	f7e3 f960 	bl	80002a0 <__adddf3>
 801cfe0:	4602      	mov	r2, r0
 801cfe2:	460b      	mov	r3, r1
 801cfe4:	4630      	mov	r0, r6
 801cfe6:	4639      	mov	r1, r7
 801cfe8:	f7e3 fc3a 	bl	8000860 <__aeabi_ddiv>
 801cfec:	f04f 0a02 	mov.w	sl, #2
 801cff0:	4604      	mov	r4, r0
 801cff2:	460d      	mov	r5, r1
 801cff4:	e743      	b.n	801ce7e <atan+0xce>
 801cff6:	462b      	mov	r3, r5
 801cff8:	ee10 2a10 	vmov	r2, s0
 801cffc:	4939      	ldr	r1, [pc, #228]	; (801d0e4 <atan+0x334>)
 801cffe:	2000      	movs	r0, #0
 801d000:	f7e3 fc2e 	bl	8000860 <__aeabi_ddiv>
 801d004:	f04f 0a03 	mov.w	sl, #3
 801d008:	4604      	mov	r4, r0
 801d00a:	460d      	mov	r5, r1
 801d00c:	e737      	b.n	801ce7e <atan+0xce>
 801d00e:	4b36      	ldr	r3, [pc, #216]	; (801d0e8 <atan+0x338>)
 801d010:	4e36      	ldr	r6, [pc, #216]	; (801d0ec <atan+0x33c>)
 801d012:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d01a:	f7e3 f93f 	bl	800029c <__aeabi_dsub>
 801d01e:	4622      	mov	r2, r4
 801d020:	462b      	mov	r3, r5
 801d022:	f7e3 f93b 	bl	800029c <__aeabi_dsub>
 801d026:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801d02a:	4602      	mov	r2, r0
 801d02c:	460b      	mov	r3, r1
 801d02e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d032:	f7e3 f933 	bl	800029c <__aeabi_dsub>
 801d036:	f1bb 0f00 	cmp.w	fp, #0
 801d03a:	4604      	mov	r4, r0
 801d03c:	460d      	mov	r5, r1
 801d03e:	f6bf aed6 	bge.w	801cdee <atan+0x3e>
 801d042:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d046:	461d      	mov	r5, r3
 801d048:	e6d1      	b.n	801cdee <atan+0x3e>
 801d04a:	a51d      	add	r5, pc, #116	; (adr r5, 801d0c0 <atan+0x310>)
 801d04c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d050:	e6cd      	b.n	801cdee <atan+0x3e>
 801d052:	bf00      	nop
 801d054:	f3af 8000 	nop.w
 801d058:	54442d18 	.word	0x54442d18
 801d05c:	bff921fb 	.word	0xbff921fb
 801d060:	8800759c 	.word	0x8800759c
 801d064:	7e37e43c 	.word	0x7e37e43c
 801d068:	e322da11 	.word	0xe322da11
 801d06c:	3f90ad3a 	.word	0x3f90ad3a
 801d070:	24760deb 	.word	0x24760deb
 801d074:	3fa97b4b 	.word	0x3fa97b4b
 801d078:	a0d03d51 	.word	0xa0d03d51
 801d07c:	3fb10d66 	.word	0x3fb10d66
 801d080:	c54c206e 	.word	0xc54c206e
 801d084:	3fb745cd 	.word	0x3fb745cd
 801d088:	920083ff 	.word	0x920083ff
 801d08c:	3fc24924 	.word	0x3fc24924
 801d090:	5555550d 	.word	0x5555550d
 801d094:	3fd55555 	.word	0x3fd55555
 801d098:	2c6a6c2f 	.word	0x2c6a6c2f
 801d09c:	bfa2b444 	.word	0xbfa2b444
 801d0a0:	52defd9a 	.word	0x52defd9a
 801d0a4:	3fadde2d 	.word	0x3fadde2d
 801d0a8:	af749a6d 	.word	0xaf749a6d
 801d0ac:	3fb3b0f2 	.word	0x3fb3b0f2
 801d0b0:	fe231671 	.word	0xfe231671
 801d0b4:	3fbc71c6 	.word	0x3fbc71c6
 801d0b8:	9998ebc4 	.word	0x9998ebc4
 801d0bc:	3fc99999 	.word	0x3fc99999
 801d0c0:	54442d18 	.word	0x54442d18
 801d0c4:	3ff921fb 	.word	0x3ff921fb
 801d0c8:	440fffff 	.word	0x440fffff
 801d0cc:	7ff00000 	.word	0x7ff00000
 801d0d0:	3fdbffff 	.word	0x3fdbffff
 801d0d4:	3ff00000 	.word	0x3ff00000
 801d0d8:	3ff2ffff 	.word	0x3ff2ffff
 801d0dc:	40038000 	.word	0x40038000
 801d0e0:	3ff80000 	.word	0x3ff80000
 801d0e4:	bff00000 	.word	0xbff00000
 801d0e8:	0801ff80 	.word	0x0801ff80
 801d0ec:	0801ff60 	.word	0x0801ff60

0801d0f0 <sinf>:
 801d0f0:	ee10 3a10 	vmov	r3, s0
 801d0f4:	b507      	push	{r0, r1, r2, lr}
 801d0f6:	4a1f      	ldr	r2, [pc, #124]	; (801d174 <sinf+0x84>)
 801d0f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d0fc:	4293      	cmp	r3, r2
 801d0fe:	dc07      	bgt.n	801d110 <sinf+0x20>
 801d100:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801d178 <sinf+0x88>
 801d104:	2000      	movs	r0, #0
 801d106:	b003      	add	sp, #12
 801d108:	f85d eb04 	ldr.w	lr, [sp], #4
 801d10c:	f000 b8ca 	b.w	801d2a4 <__kernel_sinf>
 801d110:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d114:	db04      	blt.n	801d120 <sinf+0x30>
 801d116:	ee30 0a40 	vsub.f32	s0, s0, s0
 801d11a:	b003      	add	sp, #12
 801d11c:	f85d fb04 	ldr.w	pc, [sp], #4
 801d120:	4668      	mov	r0, sp
 801d122:	f000 fd4d 	bl	801dbc0 <__ieee754_rem_pio2f>
 801d126:	f000 0003 	and.w	r0, r0, #3
 801d12a:	2801      	cmp	r0, #1
 801d12c:	d00a      	beq.n	801d144 <sinf+0x54>
 801d12e:	2802      	cmp	r0, #2
 801d130:	d00f      	beq.n	801d152 <sinf+0x62>
 801d132:	b9c0      	cbnz	r0, 801d166 <sinf+0x76>
 801d134:	eddd 0a01 	vldr	s1, [sp, #4]
 801d138:	ed9d 0a00 	vldr	s0, [sp]
 801d13c:	2001      	movs	r0, #1
 801d13e:	f000 f8b1 	bl	801d2a4 <__kernel_sinf>
 801d142:	e7ea      	b.n	801d11a <sinf+0x2a>
 801d144:	eddd 0a01 	vldr	s1, [sp, #4]
 801d148:	ed9d 0a00 	vldr	s0, [sp]
 801d14c:	f000 f84c 	bl	801d1e8 <__kernel_cosf>
 801d150:	e7e3      	b.n	801d11a <sinf+0x2a>
 801d152:	eddd 0a01 	vldr	s1, [sp, #4]
 801d156:	ed9d 0a00 	vldr	s0, [sp]
 801d15a:	2001      	movs	r0, #1
 801d15c:	f000 f8a2 	bl	801d2a4 <__kernel_sinf>
 801d160:	eeb1 0a40 	vneg.f32	s0, s0
 801d164:	e7d9      	b.n	801d11a <sinf+0x2a>
 801d166:	eddd 0a01 	vldr	s1, [sp, #4]
 801d16a:	ed9d 0a00 	vldr	s0, [sp]
 801d16e:	f000 f83b 	bl	801d1e8 <__kernel_cosf>
 801d172:	e7f5      	b.n	801d160 <sinf+0x70>
 801d174:	3f490fd8 	.word	0x3f490fd8
 801d178:	00000000 	.word	0x00000000

0801d17c <fabs>:
 801d17c:	ec51 0b10 	vmov	r0, r1, d0
 801d180:	ee10 2a10 	vmov	r2, s0
 801d184:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d188:	ec43 2b10 	vmov	d0, r2, r3
 801d18c:	4770      	bx	lr
	...

0801d190 <tanf>:
 801d190:	ee10 3a10 	vmov	r3, s0
 801d194:	b507      	push	{r0, r1, r2, lr}
 801d196:	4a12      	ldr	r2, [pc, #72]	; (801d1e0 <tanf+0x50>)
 801d198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d19c:	4293      	cmp	r3, r2
 801d19e:	dc07      	bgt.n	801d1b0 <tanf+0x20>
 801d1a0:	eddf 0a10 	vldr	s1, [pc, #64]	; 801d1e4 <tanf+0x54>
 801d1a4:	2001      	movs	r0, #1
 801d1a6:	b003      	add	sp, #12
 801d1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1ac:	f000 b8c2 	b.w	801d334 <__kernel_tanf>
 801d1b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d1b4:	db04      	blt.n	801d1c0 <tanf+0x30>
 801d1b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 801d1ba:	b003      	add	sp, #12
 801d1bc:	f85d fb04 	ldr.w	pc, [sp], #4
 801d1c0:	4668      	mov	r0, sp
 801d1c2:	f000 fcfd 	bl	801dbc0 <__ieee754_rem_pio2f>
 801d1c6:	0040      	lsls	r0, r0, #1
 801d1c8:	f000 0002 	and.w	r0, r0, #2
 801d1cc:	eddd 0a01 	vldr	s1, [sp, #4]
 801d1d0:	ed9d 0a00 	vldr	s0, [sp]
 801d1d4:	f1c0 0001 	rsb	r0, r0, #1
 801d1d8:	f000 f8ac 	bl	801d334 <__kernel_tanf>
 801d1dc:	e7ed      	b.n	801d1ba <tanf+0x2a>
 801d1de:	bf00      	nop
 801d1e0:	3f490fda 	.word	0x3f490fda
 801d1e4:	00000000 	.word	0x00000000

0801d1e8 <__kernel_cosf>:
 801d1e8:	ee10 3a10 	vmov	r3, s0
 801d1ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d1f0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801d1f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d1f8:	da05      	bge.n	801d206 <__kernel_cosf+0x1e>
 801d1fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d1fe:	ee17 2a90 	vmov	r2, s15
 801d202:	2a00      	cmp	r2, #0
 801d204:	d03b      	beq.n	801d27e <__kernel_cosf+0x96>
 801d206:	ee20 7a00 	vmul.f32	s14, s0, s0
 801d20a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801d284 <__kernel_cosf+0x9c>
 801d20e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801d288 <__kernel_cosf+0xa0>
 801d212:	4a1e      	ldr	r2, [pc, #120]	; (801d28c <__kernel_cosf+0xa4>)
 801d214:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d218:	4293      	cmp	r3, r2
 801d21a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801d290 <__kernel_cosf+0xa8>
 801d21e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d222:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801d294 <__kernel_cosf+0xac>
 801d226:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d22a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801d298 <__kernel_cosf+0xb0>
 801d22e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d232:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801d29c <__kernel_cosf+0xb4>
 801d236:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d23a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801d23e:	ee26 6a07 	vmul.f32	s12, s12, s14
 801d242:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d246:	eee7 0a06 	vfma.f32	s1, s14, s12
 801d24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d24e:	dc04      	bgt.n	801d25a <__kernel_cosf+0x72>
 801d250:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d254:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801d258:	4770      	bx	lr
 801d25a:	4a11      	ldr	r2, [pc, #68]	; (801d2a0 <__kernel_cosf+0xb8>)
 801d25c:	4293      	cmp	r3, r2
 801d25e:	bfda      	itte	le
 801d260:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801d264:	ee07 3a10 	vmovle	s14, r3
 801d268:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801d26c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d270:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801d274:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d278:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d27c:	4770      	bx	lr
 801d27e:	eeb0 0a66 	vmov.f32	s0, s13
 801d282:	4770      	bx	lr
 801d284:	ad47d74e 	.word	0xad47d74e
 801d288:	310f74f6 	.word	0x310f74f6
 801d28c:	3e999999 	.word	0x3e999999
 801d290:	b493f27c 	.word	0xb493f27c
 801d294:	37d00d01 	.word	0x37d00d01
 801d298:	bab60b61 	.word	0xbab60b61
 801d29c:	3d2aaaab 	.word	0x3d2aaaab
 801d2a0:	3f480000 	.word	0x3f480000

0801d2a4 <__kernel_sinf>:
 801d2a4:	ee10 3a10 	vmov	r3, s0
 801d2a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d2ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801d2b0:	da04      	bge.n	801d2bc <__kernel_sinf+0x18>
 801d2b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d2b6:	ee17 3a90 	vmov	r3, s15
 801d2ba:	b35b      	cbz	r3, 801d314 <__kernel_sinf+0x70>
 801d2bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 801d2c0:	eddf 7a15 	vldr	s15, [pc, #84]	; 801d318 <__kernel_sinf+0x74>
 801d2c4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801d31c <__kernel_sinf+0x78>
 801d2c8:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d2cc:	eddf 7a14 	vldr	s15, [pc, #80]	; 801d320 <__kernel_sinf+0x7c>
 801d2d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d2d4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801d324 <__kernel_sinf+0x80>
 801d2d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d2dc:	eddf 7a12 	vldr	s15, [pc, #72]	; 801d328 <__kernel_sinf+0x84>
 801d2e0:	ee60 6a07 	vmul.f32	s13, s0, s14
 801d2e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d2e8:	b930      	cbnz	r0, 801d2f8 <__kernel_sinf+0x54>
 801d2ea:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801d32c <__kernel_sinf+0x88>
 801d2ee:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d2f2:	eea6 0a26 	vfma.f32	s0, s12, s13
 801d2f6:	4770      	bx	lr
 801d2f8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801d2fc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801d300:	eee0 7a86 	vfma.f32	s15, s1, s12
 801d304:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801d308:	eddf 7a09 	vldr	s15, [pc, #36]	; 801d330 <__kernel_sinf+0x8c>
 801d30c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801d310:	ee30 0a60 	vsub.f32	s0, s0, s1
 801d314:	4770      	bx	lr
 801d316:	bf00      	nop
 801d318:	2f2ec9d3 	.word	0x2f2ec9d3
 801d31c:	b2d72f34 	.word	0xb2d72f34
 801d320:	3638ef1b 	.word	0x3638ef1b
 801d324:	b9500d01 	.word	0xb9500d01
 801d328:	3c088889 	.word	0x3c088889
 801d32c:	be2aaaab 	.word	0xbe2aaaab
 801d330:	3e2aaaab 	.word	0x3e2aaaab

0801d334 <__kernel_tanf>:
 801d334:	b508      	push	{r3, lr}
 801d336:	ee10 3a10 	vmov	r3, s0
 801d33a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d33e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801d342:	eef0 7a40 	vmov.f32	s15, s0
 801d346:	da17      	bge.n	801d378 <__kernel_tanf+0x44>
 801d348:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801d34c:	ee17 1a10 	vmov	r1, s14
 801d350:	bb41      	cbnz	r1, 801d3a4 <__kernel_tanf+0x70>
 801d352:	1c43      	adds	r3, r0, #1
 801d354:	4313      	orrs	r3, r2
 801d356:	d108      	bne.n	801d36a <__kernel_tanf+0x36>
 801d358:	f7ff fd20 	bl	801cd9c <fabsf>
 801d35c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d360:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d364:	eeb0 0a67 	vmov.f32	s0, s15
 801d368:	bd08      	pop	{r3, pc}
 801d36a:	2801      	cmp	r0, #1
 801d36c:	d0fa      	beq.n	801d364 <__kernel_tanf+0x30>
 801d36e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801d372:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d376:	e7f5      	b.n	801d364 <__kernel_tanf+0x30>
 801d378:	494c      	ldr	r1, [pc, #304]	; (801d4ac <__kernel_tanf+0x178>)
 801d37a:	428a      	cmp	r2, r1
 801d37c:	db12      	blt.n	801d3a4 <__kernel_tanf+0x70>
 801d37e:	2b00      	cmp	r3, #0
 801d380:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801d4b0 <__kernel_tanf+0x17c>
 801d384:	bfb8      	it	lt
 801d386:	eef1 7a40 	vneglt.f32	s15, s0
 801d38a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d38e:	eddf 7a49 	vldr	s15, [pc, #292]	; 801d4b4 <__kernel_tanf+0x180>
 801d392:	bfb8      	it	lt
 801d394:	eef1 0a60 	vneglt.f32	s1, s1
 801d398:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d39c:	eddf 0a46 	vldr	s1, [pc, #280]	; 801d4b8 <__kernel_tanf+0x184>
 801d3a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d3a4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801d3a8:	eddf 5a44 	vldr	s11, [pc, #272]	; 801d4bc <__kernel_tanf+0x188>
 801d3ac:	ed9f 6a44 	vldr	s12, [pc, #272]	; 801d4c0 <__kernel_tanf+0x18c>
 801d3b0:	ed9f 5a44 	vldr	s10, [pc, #272]	; 801d4c4 <__kernel_tanf+0x190>
 801d3b4:	493d      	ldr	r1, [pc, #244]	; (801d4ac <__kernel_tanf+0x178>)
 801d3b6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801d3ba:	428a      	cmp	r2, r1
 801d3bc:	eea7 6a25 	vfma.f32	s12, s14, s11
 801d3c0:	eddf 5a41 	vldr	s11, [pc, #260]	; 801d4c8 <__kernel_tanf+0x194>
 801d3c4:	eee6 5a07 	vfma.f32	s11, s12, s14
 801d3c8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801d4cc <__kernel_tanf+0x198>
 801d3cc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d3d0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801d4d0 <__kernel_tanf+0x19c>
 801d3d4:	eee6 5a07 	vfma.f32	s11, s12, s14
 801d3d8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801d4d4 <__kernel_tanf+0x1a0>
 801d3dc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d3e0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801d4d8 <__kernel_tanf+0x1a4>
 801d3e4:	eee7 5a05 	vfma.f32	s11, s14, s10
 801d3e8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801d4dc <__kernel_tanf+0x1a8>
 801d3ec:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d3f0:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801d4e0 <__kernel_tanf+0x1ac>
 801d3f4:	eee5 5a07 	vfma.f32	s11, s10, s14
 801d3f8:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801d4e4 <__kernel_tanf+0x1b0>
 801d3fc:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d400:	eddf 5a39 	vldr	s11, [pc, #228]	; 801d4e8 <__kernel_tanf+0x1b4>
 801d404:	eee5 5a07 	vfma.f32	s11, s10, s14
 801d408:	eeb0 7a46 	vmov.f32	s14, s12
 801d40c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801d410:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801d414:	eeb0 6a60 	vmov.f32	s12, s1
 801d418:	eea7 6a05 	vfma.f32	s12, s14, s10
 801d41c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801d4ec <__kernel_tanf+0x1b8>
 801d420:	eee6 0a26 	vfma.f32	s1, s12, s13
 801d424:	eee5 0a07 	vfma.f32	s1, s10, s14
 801d428:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801d42c:	db1d      	blt.n	801d46a <__kernel_tanf+0x136>
 801d42e:	ee07 0a10 	vmov	s14, r0
 801d432:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d436:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801d43a:	ee76 6a87 	vadd.f32	s13, s13, s14
 801d43e:	179b      	asrs	r3, r3, #30
 801d440:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801d444:	f003 0302 	and.w	r3, r3, #2
 801d448:	f1c3 0301 	rsb	r3, r3, #1
 801d44c:	ee76 6a60 	vsub.f32	s13, s12, s1
 801d450:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801d454:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801d458:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801d45c:	ee07 3a90 	vmov	s15, r3
 801d460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d464:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d468:	e77c      	b.n	801d364 <__kernel_tanf+0x30>
 801d46a:	2801      	cmp	r0, #1
 801d46c:	d01b      	beq.n	801d4a6 <__kernel_tanf+0x172>
 801d46e:	4b20      	ldr	r3, [pc, #128]	; (801d4f0 <__kernel_tanf+0x1bc>)
 801d470:	ee16 2a90 	vmov	r2, s13
 801d474:	401a      	ands	r2, r3
 801d476:	ee05 2a90 	vmov	s11, r2
 801d47a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801d47e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d482:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801d486:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801d48a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801d48e:	ee16 2a10 	vmov	r2, s12
 801d492:	4013      	ands	r3, r2
 801d494:	ee07 3a90 	vmov	s15, r3
 801d498:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801d49c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801d4a0:	eee7 7a06 	vfma.f32	s15, s14, s12
 801d4a4:	e75e      	b.n	801d364 <__kernel_tanf+0x30>
 801d4a6:	eef0 7a66 	vmov.f32	s15, s13
 801d4aa:	e75b      	b.n	801d364 <__kernel_tanf+0x30>
 801d4ac:	3f2ca140 	.word	0x3f2ca140
 801d4b0:	3f490fda 	.word	0x3f490fda
 801d4b4:	33222168 	.word	0x33222168
 801d4b8:	00000000 	.word	0x00000000
 801d4bc:	b79bae5f 	.word	0xb79bae5f
 801d4c0:	38a3f445 	.word	0x38a3f445
 801d4c4:	37d95384 	.word	0x37d95384
 801d4c8:	3a1a26c8 	.word	0x3a1a26c8
 801d4cc:	3b6b6916 	.word	0x3b6b6916
 801d4d0:	3cb327a4 	.word	0x3cb327a4
 801d4d4:	3e088889 	.word	0x3e088889
 801d4d8:	3895c07a 	.word	0x3895c07a
 801d4dc:	398137b9 	.word	0x398137b9
 801d4e0:	3abede48 	.word	0x3abede48
 801d4e4:	3c11371f 	.word	0x3c11371f
 801d4e8:	3d5d0dd1 	.word	0x3d5d0dd1
 801d4ec:	3eaaaaab 	.word	0x3eaaaaab
 801d4f0:	fffff000 	.word	0xfffff000

0801d4f4 <__ieee754_asinf>:
 801d4f4:	b538      	push	{r3, r4, r5, lr}
 801d4f6:	ee10 5a10 	vmov	r5, s0
 801d4fa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801d4fe:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801d502:	ed2d 8b04 	vpush	{d8-d9}
 801d506:	d10c      	bne.n	801d522 <__ieee754_asinf+0x2e>
 801d508:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801d680 <__ieee754_asinf+0x18c>
 801d50c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801d684 <__ieee754_asinf+0x190>
 801d510:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d514:	eee0 7a07 	vfma.f32	s15, s0, s14
 801d518:	eeb0 0a67 	vmov.f32	s0, s15
 801d51c:	ecbd 8b04 	vpop	{d8-d9}
 801d520:	bd38      	pop	{r3, r4, r5, pc}
 801d522:	dd04      	ble.n	801d52e <__ieee754_asinf+0x3a>
 801d524:	ee70 7a40 	vsub.f32	s15, s0, s0
 801d528:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801d52c:	e7f6      	b.n	801d51c <__ieee754_asinf+0x28>
 801d52e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801d532:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801d536:	da0b      	bge.n	801d550 <__ieee754_asinf+0x5c>
 801d538:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801d53c:	da52      	bge.n	801d5e4 <__ieee754_asinf+0xf0>
 801d53e:	eddf 7a52 	vldr	s15, [pc, #328]	; 801d688 <__ieee754_asinf+0x194>
 801d542:	ee70 7a27 	vadd.f32	s15, s0, s15
 801d546:	eef4 7ae8 	vcmpe.f32	s15, s17
 801d54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d54e:	dce5      	bgt.n	801d51c <__ieee754_asinf+0x28>
 801d550:	f7ff fc24 	bl	801cd9c <fabsf>
 801d554:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801d558:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d55c:	ee20 8a27 	vmul.f32	s16, s0, s15
 801d560:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801d68c <__ieee754_asinf+0x198>
 801d564:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801d690 <__ieee754_asinf+0x19c>
 801d568:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801d694 <__ieee754_asinf+0x1a0>
 801d56c:	eea8 7a27 	vfma.f32	s14, s16, s15
 801d570:	eddf 7a49 	vldr	s15, [pc, #292]	; 801d698 <__ieee754_asinf+0x1a4>
 801d574:	eee7 7a08 	vfma.f32	s15, s14, s16
 801d578:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801d69c <__ieee754_asinf+0x1a8>
 801d57c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801d580:	eddf 7a47 	vldr	s15, [pc, #284]	; 801d6a0 <__ieee754_asinf+0x1ac>
 801d584:	eee7 7a08 	vfma.f32	s15, s14, s16
 801d588:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801d6a4 <__ieee754_asinf+0x1b0>
 801d58c:	eea7 9a88 	vfma.f32	s18, s15, s16
 801d590:	eddf 7a45 	vldr	s15, [pc, #276]	; 801d6a8 <__ieee754_asinf+0x1b4>
 801d594:	eee8 7a07 	vfma.f32	s15, s16, s14
 801d598:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801d6ac <__ieee754_asinf+0x1b8>
 801d59c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801d5a0:	eddf 7a43 	vldr	s15, [pc, #268]	; 801d6b0 <__ieee754_asinf+0x1bc>
 801d5a4:	eee7 7a08 	vfma.f32	s15, s14, s16
 801d5a8:	eeb0 0a48 	vmov.f32	s0, s16
 801d5ac:	eee7 8a88 	vfma.f32	s17, s15, s16
 801d5b0:	f000 fa00 	bl	801d9b4 <__ieee754_sqrtf>
 801d5b4:	4b3f      	ldr	r3, [pc, #252]	; (801d6b4 <__ieee754_asinf+0x1c0>)
 801d5b6:	ee29 9a08 	vmul.f32	s18, s18, s16
 801d5ba:	429c      	cmp	r4, r3
 801d5bc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801d5c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801d5c4:	dd3d      	ble.n	801d642 <__ieee754_asinf+0x14e>
 801d5c6:	eea0 0a06 	vfma.f32	s0, s0, s12
 801d5ca:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801d6b8 <__ieee754_asinf+0x1c4>
 801d5ce:	eee0 7a26 	vfma.f32	s15, s0, s13
 801d5d2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801d684 <__ieee754_asinf+0x190>
 801d5d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d5da:	2d00      	cmp	r5, #0
 801d5dc:	bfd8      	it	le
 801d5de:	eeb1 0a40 	vnegle.f32	s0, s0
 801d5e2:	e79b      	b.n	801d51c <__ieee754_asinf+0x28>
 801d5e4:	ee60 7a00 	vmul.f32	s15, s0, s0
 801d5e8:	eddf 6a29 	vldr	s13, [pc, #164]	; 801d690 <__ieee754_asinf+0x19c>
 801d5ec:	ed9f 7a27 	vldr	s14, [pc, #156]	; 801d68c <__ieee754_asinf+0x198>
 801d5f0:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801d6a4 <__ieee754_asinf+0x1b0>
 801d5f4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801d5f8:	eddf 6a27 	vldr	s13, [pc, #156]	; 801d698 <__ieee754_asinf+0x1a4>
 801d5fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 801d600:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801d69c <__ieee754_asinf+0x1a8>
 801d604:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801d608:	eddf 6a25 	vldr	s13, [pc, #148]	; 801d6a0 <__ieee754_asinf+0x1ac>
 801d60c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801d610:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801d694 <__ieee754_asinf+0x1a0>
 801d614:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801d618:	eddf 6a23 	vldr	s13, [pc, #140]	; 801d6a8 <__ieee754_asinf+0x1b4>
 801d61c:	eee7 6a86 	vfma.f32	s13, s15, s12
 801d620:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801d6ac <__ieee754_asinf+0x1b8>
 801d624:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801d628:	eddf 6a21 	vldr	s13, [pc, #132]	; 801d6b0 <__ieee754_asinf+0x1bc>
 801d62c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d630:	ee27 7a27 	vmul.f32	s14, s14, s15
 801d634:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801d638:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801d63c:	eea0 0a27 	vfma.f32	s0, s0, s15
 801d640:	e76c      	b.n	801d51c <__ieee754_asinf+0x28>
 801d642:	ee10 3a10 	vmov	r3, s0
 801d646:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801d64a:	f023 030f 	bic.w	r3, r3, #15
 801d64e:	ee07 3a10 	vmov	s14, r3
 801d652:	eea7 8a47 	vfms.f32	s16, s14, s14
 801d656:	ee70 7a07 	vadd.f32	s15, s0, s14
 801d65a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d65e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801d662:	eddf 7a07 	vldr	s15, [pc, #28]	; 801d680 <__ieee754_asinf+0x18c>
 801d666:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801d66a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801d66e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801d6bc <__ieee754_asinf+0x1c8>
 801d672:	eeb0 6a40 	vmov.f32	s12, s0
 801d676:	eea7 6a66 	vfms.f32	s12, s14, s13
 801d67a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801d67e:	e7aa      	b.n	801d5d6 <__ieee754_asinf+0xe2>
 801d680:	b33bbd2e 	.word	0xb33bbd2e
 801d684:	3fc90fdb 	.word	0x3fc90fdb
 801d688:	7149f2ca 	.word	0x7149f2ca
 801d68c:	3a4f7f04 	.word	0x3a4f7f04
 801d690:	3811ef08 	.word	0x3811ef08
 801d694:	3e2aaaab 	.word	0x3e2aaaab
 801d698:	bd241146 	.word	0xbd241146
 801d69c:	3e4e0aa8 	.word	0x3e4e0aa8
 801d6a0:	bea6b090 	.word	0xbea6b090
 801d6a4:	3d9dc62e 	.word	0x3d9dc62e
 801d6a8:	bf303361 	.word	0xbf303361
 801d6ac:	4001572d 	.word	0x4001572d
 801d6b0:	c019d139 	.word	0xc019d139
 801d6b4:	3f799999 	.word	0x3f799999
 801d6b8:	333bbd2e 	.word	0x333bbd2e
 801d6bc:	3f490fdb 	.word	0x3f490fdb

0801d6c0 <__ieee754_atan2f>:
 801d6c0:	ee10 2a90 	vmov	r2, s1
 801d6c4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801d6c8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801d6cc:	b510      	push	{r4, lr}
 801d6ce:	eef0 7a40 	vmov.f32	s15, s0
 801d6d2:	dc06      	bgt.n	801d6e2 <__ieee754_atan2f+0x22>
 801d6d4:	ee10 0a10 	vmov	r0, s0
 801d6d8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801d6dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d6e0:	dd04      	ble.n	801d6ec <__ieee754_atan2f+0x2c>
 801d6e2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801d6e6:	eeb0 0a67 	vmov.f32	s0, s15
 801d6ea:	bd10      	pop	{r4, pc}
 801d6ec:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801d6f0:	d103      	bne.n	801d6fa <__ieee754_atan2f+0x3a>
 801d6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6f6:	f000 bb8f 	b.w	801de18 <atanf>
 801d6fa:	1794      	asrs	r4, r2, #30
 801d6fc:	f004 0402 	and.w	r4, r4, #2
 801d700:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801d704:	b943      	cbnz	r3, 801d718 <__ieee754_atan2f+0x58>
 801d706:	2c02      	cmp	r4, #2
 801d708:	d05e      	beq.n	801d7c8 <__ieee754_atan2f+0x108>
 801d70a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801d7dc <__ieee754_atan2f+0x11c>
 801d70e:	2c03      	cmp	r4, #3
 801d710:	bf08      	it	eq
 801d712:	eef0 7a47 	vmoveq.f32	s15, s14
 801d716:	e7e6      	b.n	801d6e6 <__ieee754_atan2f+0x26>
 801d718:	b941      	cbnz	r1, 801d72c <__ieee754_atan2f+0x6c>
 801d71a:	eddf 7a31 	vldr	s15, [pc, #196]	; 801d7e0 <__ieee754_atan2f+0x120>
 801d71e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801d7e4 <__ieee754_atan2f+0x124>
 801d722:	2800      	cmp	r0, #0
 801d724:	bfb8      	it	lt
 801d726:	eef0 7a47 	vmovlt.f32	s15, s14
 801d72a:	e7dc      	b.n	801d6e6 <__ieee754_atan2f+0x26>
 801d72c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801d730:	d110      	bne.n	801d754 <__ieee754_atan2f+0x94>
 801d732:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d736:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801d73a:	d107      	bne.n	801d74c <__ieee754_atan2f+0x8c>
 801d73c:	2c02      	cmp	r4, #2
 801d73e:	d846      	bhi.n	801d7ce <__ieee754_atan2f+0x10e>
 801d740:	4b29      	ldr	r3, [pc, #164]	; (801d7e8 <__ieee754_atan2f+0x128>)
 801d742:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801d746:	edd3 7a00 	vldr	s15, [r3]
 801d74a:	e7cc      	b.n	801d6e6 <__ieee754_atan2f+0x26>
 801d74c:	2c02      	cmp	r4, #2
 801d74e:	d841      	bhi.n	801d7d4 <__ieee754_atan2f+0x114>
 801d750:	4b26      	ldr	r3, [pc, #152]	; (801d7ec <__ieee754_atan2f+0x12c>)
 801d752:	e7f6      	b.n	801d742 <__ieee754_atan2f+0x82>
 801d754:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d758:	d0df      	beq.n	801d71a <__ieee754_atan2f+0x5a>
 801d75a:	1a5b      	subs	r3, r3, r1
 801d75c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801d760:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801d764:	da1a      	bge.n	801d79c <__ieee754_atan2f+0xdc>
 801d766:	2a00      	cmp	r2, #0
 801d768:	da01      	bge.n	801d76e <__ieee754_atan2f+0xae>
 801d76a:	313c      	adds	r1, #60	; 0x3c
 801d76c:	db19      	blt.n	801d7a2 <__ieee754_atan2f+0xe2>
 801d76e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801d772:	f7ff fb13 	bl	801cd9c <fabsf>
 801d776:	f000 fb4f 	bl	801de18 <atanf>
 801d77a:	eef0 7a40 	vmov.f32	s15, s0
 801d77e:	2c01      	cmp	r4, #1
 801d780:	d012      	beq.n	801d7a8 <__ieee754_atan2f+0xe8>
 801d782:	2c02      	cmp	r4, #2
 801d784:	d017      	beq.n	801d7b6 <__ieee754_atan2f+0xf6>
 801d786:	2c00      	cmp	r4, #0
 801d788:	d0ad      	beq.n	801d6e6 <__ieee754_atan2f+0x26>
 801d78a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801d7f0 <__ieee754_atan2f+0x130>
 801d78e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d792:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801d7f4 <__ieee754_atan2f+0x134>
 801d796:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d79a:	e7a4      	b.n	801d6e6 <__ieee754_atan2f+0x26>
 801d79c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801d7e0 <__ieee754_atan2f+0x120>
 801d7a0:	e7ed      	b.n	801d77e <__ieee754_atan2f+0xbe>
 801d7a2:	eddf 7a15 	vldr	s15, [pc, #84]	; 801d7f8 <__ieee754_atan2f+0x138>
 801d7a6:	e7ea      	b.n	801d77e <__ieee754_atan2f+0xbe>
 801d7a8:	ee17 3a90 	vmov	r3, s15
 801d7ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d7b0:	ee07 3a90 	vmov	s15, r3
 801d7b4:	e797      	b.n	801d6e6 <__ieee754_atan2f+0x26>
 801d7b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801d7f0 <__ieee754_atan2f+0x130>
 801d7ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d7be:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801d7f4 <__ieee754_atan2f+0x134>
 801d7c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d7c6:	e78e      	b.n	801d6e6 <__ieee754_atan2f+0x26>
 801d7c8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801d7f4 <__ieee754_atan2f+0x134>
 801d7cc:	e78b      	b.n	801d6e6 <__ieee754_atan2f+0x26>
 801d7ce:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801d7fc <__ieee754_atan2f+0x13c>
 801d7d2:	e788      	b.n	801d6e6 <__ieee754_atan2f+0x26>
 801d7d4:	eddf 7a08 	vldr	s15, [pc, #32]	; 801d7f8 <__ieee754_atan2f+0x138>
 801d7d8:	e785      	b.n	801d6e6 <__ieee754_atan2f+0x26>
 801d7da:	bf00      	nop
 801d7dc:	c0490fdb 	.word	0xc0490fdb
 801d7e0:	3fc90fdb 	.word	0x3fc90fdb
 801d7e4:	bfc90fdb 	.word	0xbfc90fdb
 801d7e8:	0801ffa0 	.word	0x0801ffa0
 801d7ec:	0801ffac 	.word	0x0801ffac
 801d7f0:	33bbbd2e 	.word	0x33bbbd2e
 801d7f4:	40490fdb 	.word	0x40490fdb
 801d7f8:	00000000 	.word	0x00000000
 801d7fc:	3f490fdb 	.word	0x3f490fdb

0801d800 <__ieee754_sqrt>:
 801d800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d804:	ec55 4b10 	vmov	r4, r5, d0
 801d808:	4e67      	ldr	r6, [pc, #412]	; (801d9a8 <__ieee754_sqrt+0x1a8>)
 801d80a:	43ae      	bics	r6, r5
 801d80c:	ee10 0a10 	vmov	r0, s0
 801d810:	ee10 2a10 	vmov	r2, s0
 801d814:	4629      	mov	r1, r5
 801d816:	462b      	mov	r3, r5
 801d818:	d10d      	bne.n	801d836 <__ieee754_sqrt+0x36>
 801d81a:	f7e2 fef7 	bl	800060c <__aeabi_dmul>
 801d81e:	4602      	mov	r2, r0
 801d820:	460b      	mov	r3, r1
 801d822:	4620      	mov	r0, r4
 801d824:	4629      	mov	r1, r5
 801d826:	f7e2 fd3b 	bl	80002a0 <__adddf3>
 801d82a:	4604      	mov	r4, r0
 801d82c:	460d      	mov	r5, r1
 801d82e:	ec45 4b10 	vmov	d0, r4, r5
 801d832:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d836:	2d00      	cmp	r5, #0
 801d838:	dc0b      	bgt.n	801d852 <__ieee754_sqrt+0x52>
 801d83a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d83e:	4326      	orrs	r6, r4
 801d840:	d0f5      	beq.n	801d82e <__ieee754_sqrt+0x2e>
 801d842:	b135      	cbz	r5, 801d852 <__ieee754_sqrt+0x52>
 801d844:	f7e2 fd2a 	bl	800029c <__aeabi_dsub>
 801d848:	4602      	mov	r2, r0
 801d84a:	460b      	mov	r3, r1
 801d84c:	f7e3 f808 	bl	8000860 <__aeabi_ddiv>
 801d850:	e7eb      	b.n	801d82a <__ieee754_sqrt+0x2a>
 801d852:	1509      	asrs	r1, r1, #20
 801d854:	f000 808d 	beq.w	801d972 <__ieee754_sqrt+0x172>
 801d858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d85c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801d860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d864:	07c9      	lsls	r1, r1, #31
 801d866:	bf5c      	itt	pl
 801d868:	005b      	lslpl	r3, r3, #1
 801d86a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801d86e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d872:	bf58      	it	pl
 801d874:	0052      	lslpl	r2, r2, #1
 801d876:	2500      	movs	r5, #0
 801d878:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801d87c:	1076      	asrs	r6, r6, #1
 801d87e:	0052      	lsls	r2, r2, #1
 801d880:	f04f 0e16 	mov.w	lr, #22
 801d884:	46ac      	mov	ip, r5
 801d886:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801d88a:	eb0c 0001 	add.w	r0, ip, r1
 801d88e:	4298      	cmp	r0, r3
 801d890:	bfde      	ittt	le
 801d892:	1a1b      	suble	r3, r3, r0
 801d894:	eb00 0c01 	addle.w	ip, r0, r1
 801d898:	186d      	addle	r5, r5, r1
 801d89a:	005b      	lsls	r3, r3, #1
 801d89c:	f1be 0e01 	subs.w	lr, lr, #1
 801d8a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801d8a4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801d8a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d8ac:	d1ed      	bne.n	801d88a <__ieee754_sqrt+0x8a>
 801d8ae:	4674      	mov	r4, lr
 801d8b0:	2720      	movs	r7, #32
 801d8b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801d8b6:	4563      	cmp	r3, ip
 801d8b8:	eb01 000e 	add.w	r0, r1, lr
 801d8bc:	dc02      	bgt.n	801d8c4 <__ieee754_sqrt+0xc4>
 801d8be:	d113      	bne.n	801d8e8 <__ieee754_sqrt+0xe8>
 801d8c0:	4290      	cmp	r0, r2
 801d8c2:	d811      	bhi.n	801d8e8 <__ieee754_sqrt+0xe8>
 801d8c4:	2800      	cmp	r0, #0
 801d8c6:	eb00 0e01 	add.w	lr, r0, r1
 801d8ca:	da57      	bge.n	801d97c <__ieee754_sqrt+0x17c>
 801d8cc:	f1be 0f00 	cmp.w	lr, #0
 801d8d0:	db54      	blt.n	801d97c <__ieee754_sqrt+0x17c>
 801d8d2:	f10c 0801 	add.w	r8, ip, #1
 801d8d6:	eba3 030c 	sub.w	r3, r3, ip
 801d8da:	4290      	cmp	r0, r2
 801d8dc:	bf88      	it	hi
 801d8de:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 801d8e2:	1a12      	subs	r2, r2, r0
 801d8e4:	440c      	add	r4, r1
 801d8e6:	46c4      	mov	ip, r8
 801d8e8:	005b      	lsls	r3, r3, #1
 801d8ea:	3f01      	subs	r7, #1
 801d8ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801d8f0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801d8f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d8f8:	d1dd      	bne.n	801d8b6 <__ieee754_sqrt+0xb6>
 801d8fa:	4313      	orrs	r3, r2
 801d8fc:	d01b      	beq.n	801d936 <__ieee754_sqrt+0x136>
 801d8fe:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801d9ac <__ieee754_sqrt+0x1ac>
 801d902:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801d9b0 <__ieee754_sqrt+0x1b0>
 801d906:	e9da 0100 	ldrd	r0, r1, [sl]
 801d90a:	e9db 2300 	ldrd	r2, r3, [fp]
 801d90e:	f7e2 fcc5 	bl	800029c <__aeabi_dsub>
 801d912:	e9da 8900 	ldrd	r8, r9, [sl]
 801d916:	4602      	mov	r2, r0
 801d918:	460b      	mov	r3, r1
 801d91a:	4640      	mov	r0, r8
 801d91c:	4649      	mov	r1, r9
 801d91e:	f7e3 f8f1 	bl	8000b04 <__aeabi_dcmple>
 801d922:	b140      	cbz	r0, 801d936 <__ieee754_sqrt+0x136>
 801d924:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 801d928:	e9da 0100 	ldrd	r0, r1, [sl]
 801d92c:	e9db 2300 	ldrd	r2, r3, [fp]
 801d930:	d126      	bne.n	801d980 <__ieee754_sqrt+0x180>
 801d932:	3501      	adds	r5, #1
 801d934:	463c      	mov	r4, r7
 801d936:	106a      	asrs	r2, r5, #1
 801d938:	0863      	lsrs	r3, r4, #1
 801d93a:	07e9      	lsls	r1, r5, #31
 801d93c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801d940:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801d944:	bf48      	it	mi
 801d946:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801d94a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801d94e:	461c      	mov	r4, r3
 801d950:	e76d      	b.n	801d82e <__ieee754_sqrt+0x2e>
 801d952:	0ad3      	lsrs	r3, r2, #11
 801d954:	3815      	subs	r0, #21
 801d956:	0552      	lsls	r2, r2, #21
 801d958:	2b00      	cmp	r3, #0
 801d95a:	d0fa      	beq.n	801d952 <__ieee754_sqrt+0x152>
 801d95c:	02dc      	lsls	r4, r3, #11
 801d95e:	d50a      	bpl.n	801d976 <__ieee754_sqrt+0x176>
 801d960:	f1c1 0420 	rsb	r4, r1, #32
 801d964:	fa22 f404 	lsr.w	r4, r2, r4
 801d968:	1e4d      	subs	r5, r1, #1
 801d96a:	408a      	lsls	r2, r1
 801d96c:	4323      	orrs	r3, r4
 801d96e:	1b41      	subs	r1, r0, r5
 801d970:	e772      	b.n	801d858 <__ieee754_sqrt+0x58>
 801d972:	4608      	mov	r0, r1
 801d974:	e7f0      	b.n	801d958 <__ieee754_sqrt+0x158>
 801d976:	005b      	lsls	r3, r3, #1
 801d978:	3101      	adds	r1, #1
 801d97a:	e7ef      	b.n	801d95c <__ieee754_sqrt+0x15c>
 801d97c:	46e0      	mov	r8, ip
 801d97e:	e7aa      	b.n	801d8d6 <__ieee754_sqrt+0xd6>
 801d980:	f7e2 fc8e 	bl	80002a0 <__adddf3>
 801d984:	e9da 8900 	ldrd	r8, r9, [sl]
 801d988:	4602      	mov	r2, r0
 801d98a:	460b      	mov	r3, r1
 801d98c:	4640      	mov	r0, r8
 801d98e:	4649      	mov	r1, r9
 801d990:	f7e3 f8ae 	bl	8000af0 <__aeabi_dcmplt>
 801d994:	b120      	cbz	r0, 801d9a0 <__ieee754_sqrt+0x1a0>
 801d996:	1ca0      	adds	r0, r4, #2
 801d998:	bf08      	it	eq
 801d99a:	3501      	addeq	r5, #1
 801d99c:	3402      	adds	r4, #2
 801d99e:	e7ca      	b.n	801d936 <__ieee754_sqrt+0x136>
 801d9a0:	3401      	adds	r4, #1
 801d9a2:	f024 0401 	bic.w	r4, r4, #1
 801d9a6:	e7c6      	b.n	801d936 <__ieee754_sqrt+0x136>
 801d9a8:	7ff00000 	.word	0x7ff00000
 801d9ac:	200001f8 	.word	0x200001f8
 801d9b0:	20000200 	.word	0x20000200

0801d9b4 <__ieee754_sqrtf>:
 801d9b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801d9b8:	4770      	bx	lr
 801d9ba:	0000      	movs	r0, r0
 801d9bc:	0000      	movs	r0, r0
	...

0801d9c0 <ceil>:
 801d9c0:	ec51 0b10 	vmov	r0, r1, d0
 801d9c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9cc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801d9d0:	2e13      	cmp	r6, #19
 801d9d2:	ee10 5a10 	vmov	r5, s0
 801d9d6:	ee10 8a10 	vmov	r8, s0
 801d9da:	460c      	mov	r4, r1
 801d9dc:	dc2f      	bgt.n	801da3e <ceil+0x7e>
 801d9de:	2e00      	cmp	r6, #0
 801d9e0:	da12      	bge.n	801da08 <ceil+0x48>
 801d9e2:	a333      	add	r3, pc, #204	; (adr r3, 801dab0 <ceil+0xf0>)
 801d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9e8:	f7e2 fc5a 	bl	80002a0 <__adddf3>
 801d9ec:	2200      	movs	r2, #0
 801d9ee:	2300      	movs	r3, #0
 801d9f0:	f7e3 f89c 	bl	8000b2c <__aeabi_dcmpgt>
 801d9f4:	b128      	cbz	r0, 801da02 <ceil+0x42>
 801d9f6:	2c00      	cmp	r4, #0
 801d9f8:	db51      	blt.n	801da9e <ceil+0xde>
 801d9fa:	432c      	orrs	r4, r5
 801d9fc:	d053      	beq.n	801daa6 <ceil+0xe6>
 801d9fe:	4c2e      	ldr	r4, [pc, #184]	; (801dab8 <ceil+0xf8>)
 801da00:	2500      	movs	r5, #0
 801da02:	4621      	mov	r1, r4
 801da04:	4628      	mov	r0, r5
 801da06:	e024      	b.n	801da52 <ceil+0x92>
 801da08:	4f2c      	ldr	r7, [pc, #176]	; (801dabc <ceil+0xfc>)
 801da0a:	4137      	asrs	r7, r6
 801da0c:	ea01 0307 	and.w	r3, r1, r7
 801da10:	4303      	orrs	r3, r0
 801da12:	d01e      	beq.n	801da52 <ceil+0x92>
 801da14:	a326      	add	r3, pc, #152	; (adr r3, 801dab0 <ceil+0xf0>)
 801da16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da1a:	f7e2 fc41 	bl	80002a0 <__adddf3>
 801da1e:	2200      	movs	r2, #0
 801da20:	2300      	movs	r3, #0
 801da22:	f7e3 f883 	bl	8000b2c <__aeabi_dcmpgt>
 801da26:	2800      	cmp	r0, #0
 801da28:	d0eb      	beq.n	801da02 <ceil+0x42>
 801da2a:	2c00      	cmp	r4, #0
 801da2c:	bfc2      	ittt	gt
 801da2e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801da32:	4133      	asrgt	r3, r6
 801da34:	18e4      	addgt	r4, r4, r3
 801da36:	ea24 0407 	bic.w	r4, r4, r7
 801da3a:	2500      	movs	r5, #0
 801da3c:	e7e1      	b.n	801da02 <ceil+0x42>
 801da3e:	2e33      	cmp	r6, #51	; 0x33
 801da40:	dd0b      	ble.n	801da5a <ceil+0x9a>
 801da42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801da46:	d104      	bne.n	801da52 <ceil+0x92>
 801da48:	ee10 2a10 	vmov	r2, s0
 801da4c:	460b      	mov	r3, r1
 801da4e:	f7e2 fc27 	bl	80002a0 <__adddf3>
 801da52:	ec41 0b10 	vmov	d0, r0, r1
 801da56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da5a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801da5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801da62:	40df      	lsrs	r7, r3
 801da64:	4238      	tst	r0, r7
 801da66:	d0f4      	beq.n	801da52 <ceil+0x92>
 801da68:	a311      	add	r3, pc, #68	; (adr r3, 801dab0 <ceil+0xf0>)
 801da6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da6e:	f7e2 fc17 	bl	80002a0 <__adddf3>
 801da72:	2200      	movs	r2, #0
 801da74:	2300      	movs	r3, #0
 801da76:	f7e3 f859 	bl	8000b2c <__aeabi_dcmpgt>
 801da7a:	2800      	cmp	r0, #0
 801da7c:	d0c1      	beq.n	801da02 <ceil+0x42>
 801da7e:	2c00      	cmp	r4, #0
 801da80:	dd0a      	ble.n	801da98 <ceil+0xd8>
 801da82:	2e14      	cmp	r6, #20
 801da84:	d101      	bne.n	801da8a <ceil+0xca>
 801da86:	3401      	adds	r4, #1
 801da88:	e006      	b.n	801da98 <ceil+0xd8>
 801da8a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801da8e:	2301      	movs	r3, #1
 801da90:	40b3      	lsls	r3, r6
 801da92:	441d      	add	r5, r3
 801da94:	45a8      	cmp	r8, r5
 801da96:	d8f6      	bhi.n	801da86 <ceil+0xc6>
 801da98:	ea25 0507 	bic.w	r5, r5, r7
 801da9c:	e7b1      	b.n	801da02 <ceil+0x42>
 801da9e:	2500      	movs	r5, #0
 801daa0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801daa4:	e7ad      	b.n	801da02 <ceil+0x42>
 801daa6:	4625      	mov	r5, r4
 801daa8:	e7ab      	b.n	801da02 <ceil+0x42>
 801daaa:	bf00      	nop
 801daac:	f3af 8000 	nop.w
 801dab0:	8800759c 	.word	0x8800759c
 801dab4:	7e37e43c 	.word	0x7e37e43c
 801dab8:	3ff00000 	.word	0x3ff00000
 801dabc:	000fffff 	.word	0x000fffff

0801dac0 <floor>:
 801dac0:	ec51 0b10 	vmov	r0, r1, d0
 801dac4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801dac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dacc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801dad0:	2e13      	cmp	r6, #19
 801dad2:	ee10 5a10 	vmov	r5, s0
 801dad6:	ee10 8a10 	vmov	r8, s0
 801dada:	460c      	mov	r4, r1
 801dadc:	dc31      	bgt.n	801db42 <floor+0x82>
 801dade:	2e00      	cmp	r6, #0
 801dae0:	da14      	bge.n	801db0c <floor+0x4c>
 801dae2:	a333      	add	r3, pc, #204	; (adr r3, 801dbb0 <floor+0xf0>)
 801dae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dae8:	f7e2 fbda 	bl	80002a0 <__adddf3>
 801daec:	2200      	movs	r2, #0
 801daee:	2300      	movs	r3, #0
 801daf0:	f7e3 f81c 	bl	8000b2c <__aeabi_dcmpgt>
 801daf4:	b138      	cbz	r0, 801db06 <floor+0x46>
 801daf6:	2c00      	cmp	r4, #0
 801daf8:	da53      	bge.n	801dba2 <floor+0xe2>
 801dafa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801dafe:	4325      	orrs	r5, r4
 801db00:	d052      	beq.n	801dba8 <floor+0xe8>
 801db02:	4c2d      	ldr	r4, [pc, #180]	; (801dbb8 <floor+0xf8>)
 801db04:	2500      	movs	r5, #0
 801db06:	4621      	mov	r1, r4
 801db08:	4628      	mov	r0, r5
 801db0a:	e024      	b.n	801db56 <floor+0x96>
 801db0c:	4f2b      	ldr	r7, [pc, #172]	; (801dbbc <floor+0xfc>)
 801db0e:	4137      	asrs	r7, r6
 801db10:	ea01 0307 	and.w	r3, r1, r7
 801db14:	4303      	orrs	r3, r0
 801db16:	d01e      	beq.n	801db56 <floor+0x96>
 801db18:	a325      	add	r3, pc, #148	; (adr r3, 801dbb0 <floor+0xf0>)
 801db1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db1e:	f7e2 fbbf 	bl	80002a0 <__adddf3>
 801db22:	2200      	movs	r2, #0
 801db24:	2300      	movs	r3, #0
 801db26:	f7e3 f801 	bl	8000b2c <__aeabi_dcmpgt>
 801db2a:	2800      	cmp	r0, #0
 801db2c:	d0eb      	beq.n	801db06 <floor+0x46>
 801db2e:	2c00      	cmp	r4, #0
 801db30:	bfbe      	ittt	lt
 801db32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801db36:	4133      	asrlt	r3, r6
 801db38:	18e4      	addlt	r4, r4, r3
 801db3a:	ea24 0407 	bic.w	r4, r4, r7
 801db3e:	2500      	movs	r5, #0
 801db40:	e7e1      	b.n	801db06 <floor+0x46>
 801db42:	2e33      	cmp	r6, #51	; 0x33
 801db44:	dd0b      	ble.n	801db5e <floor+0x9e>
 801db46:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801db4a:	d104      	bne.n	801db56 <floor+0x96>
 801db4c:	ee10 2a10 	vmov	r2, s0
 801db50:	460b      	mov	r3, r1
 801db52:	f7e2 fba5 	bl	80002a0 <__adddf3>
 801db56:	ec41 0b10 	vmov	d0, r0, r1
 801db5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db5e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801db62:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801db66:	40df      	lsrs	r7, r3
 801db68:	4238      	tst	r0, r7
 801db6a:	d0f4      	beq.n	801db56 <floor+0x96>
 801db6c:	a310      	add	r3, pc, #64	; (adr r3, 801dbb0 <floor+0xf0>)
 801db6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db72:	f7e2 fb95 	bl	80002a0 <__adddf3>
 801db76:	2200      	movs	r2, #0
 801db78:	2300      	movs	r3, #0
 801db7a:	f7e2 ffd7 	bl	8000b2c <__aeabi_dcmpgt>
 801db7e:	2800      	cmp	r0, #0
 801db80:	d0c1      	beq.n	801db06 <floor+0x46>
 801db82:	2c00      	cmp	r4, #0
 801db84:	da0a      	bge.n	801db9c <floor+0xdc>
 801db86:	2e14      	cmp	r6, #20
 801db88:	d101      	bne.n	801db8e <floor+0xce>
 801db8a:	3401      	adds	r4, #1
 801db8c:	e006      	b.n	801db9c <floor+0xdc>
 801db8e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801db92:	2301      	movs	r3, #1
 801db94:	40b3      	lsls	r3, r6
 801db96:	441d      	add	r5, r3
 801db98:	45a8      	cmp	r8, r5
 801db9a:	d8f6      	bhi.n	801db8a <floor+0xca>
 801db9c:	ea25 0507 	bic.w	r5, r5, r7
 801dba0:	e7b1      	b.n	801db06 <floor+0x46>
 801dba2:	2500      	movs	r5, #0
 801dba4:	462c      	mov	r4, r5
 801dba6:	e7ae      	b.n	801db06 <floor+0x46>
 801dba8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801dbac:	e7ab      	b.n	801db06 <floor+0x46>
 801dbae:	bf00      	nop
 801dbb0:	8800759c 	.word	0x8800759c
 801dbb4:	7e37e43c 	.word	0x7e37e43c
 801dbb8:	bff00000 	.word	0xbff00000
 801dbbc:	000fffff 	.word	0x000fffff

0801dbc0 <__ieee754_rem_pio2f>:
 801dbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbc2:	ee10 6a10 	vmov	r6, s0
 801dbc6:	4b86      	ldr	r3, [pc, #536]	; (801dde0 <__ieee754_rem_pio2f+0x220>)
 801dbc8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801dbcc:	429d      	cmp	r5, r3
 801dbce:	b087      	sub	sp, #28
 801dbd0:	4604      	mov	r4, r0
 801dbd2:	dc05      	bgt.n	801dbe0 <__ieee754_rem_pio2f+0x20>
 801dbd4:	2300      	movs	r3, #0
 801dbd6:	ed80 0a00 	vstr	s0, [r0]
 801dbda:	6043      	str	r3, [r0, #4]
 801dbdc:	2000      	movs	r0, #0
 801dbde:	e020      	b.n	801dc22 <__ieee754_rem_pio2f+0x62>
 801dbe0:	4b80      	ldr	r3, [pc, #512]	; (801dde4 <__ieee754_rem_pio2f+0x224>)
 801dbe2:	429d      	cmp	r5, r3
 801dbe4:	dc38      	bgt.n	801dc58 <__ieee754_rem_pio2f+0x98>
 801dbe6:	2e00      	cmp	r6, #0
 801dbe8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801dde8 <__ieee754_rem_pio2f+0x228>
 801dbec:	4b7f      	ldr	r3, [pc, #508]	; (801ddec <__ieee754_rem_pio2f+0x22c>)
 801dbee:	f025 050f 	bic.w	r5, r5, #15
 801dbf2:	dd18      	ble.n	801dc26 <__ieee754_rem_pio2f+0x66>
 801dbf4:	429d      	cmp	r5, r3
 801dbf6:	ee70 7a47 	vsub.f32	s15, s0, s14
 801dbfa:	bf09      	itett	eq
 801dbfc:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801ddf0 <__ieee754_rem_pio2f+0x230>
 801dc00:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801ddf4 <__ieee754_rem_pio2f+0x234>
 801dc04:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801dc08:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801ddf8 <__ieee754_rem_pio2f+0x238>
 801dc0c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801dc10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801dc14:	edc0 6a00 	vstr	s13, [r0]
 801dc18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dc1c:	edc0 7a01 	vstr	s15, [r0, #4]
 801dc20:	2001      	movs	r0, #1
 801dc22:	b007      	add	sp, #28
 801dc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc26:	429d      	cmp	r5, r3
 801dc28:	ee70 7a07 	vadd.f32	s15, s0, s14
 801dc2c:	bf09      	itett	eq
 801dc2e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801ddf0 <__ieee754_rem_pio2f+0x230>
 801dc32:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801ddf4 <__ieee754_rem_pio2f+0x234>
 801dc36:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801dc3a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801ddf8 <__ieee754_rem_pio2f+0x238>
 801dc3e:	ee77 6a87 	vadd.f32	s13, s15, s14
 801dc42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801dc46:	edc0 6a00 	vstr	s13, [r0]
 801dc4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dc4e:	edc0 7a01 	vstr	s15, [r0, #4]
 801dc52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dc56:	e7e4      	b.n	801dc22 <__ieee754_rem_pio2f+0x62>
 801dc58:	4b68      	ldr	r3, [pc, #416]	; (801ddfc <__ieee754_rem_pio2f+0x23c>)
 801dc5a:	429d      	cmp	r5, r3
 801dc5c:	dc71      	bgt.n	801dd42 <__ieee754_rem_pio2f+0x182>
 801dc5e:	f7ff f89d 	bl	801cd9c <fabsf>
 801dc62:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801de00 <__ieee754_rem_pio2f+0x240>
 801dc66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801dc6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801dc6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801dc72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801dc76:	ee17 0a90 	vmov	r0, s15
 801dc7a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801dde8 <__ieee754_rem_pio2f+0x228>
 801dc7e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801dc82:	281f      	cmp	r0, #31
 801dc84:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801ddf4 <__ieee754_rem_pio2f+0x234>
 801dc88:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc8c:	eeb1 6a47 	vneg.f32	s12, s14
 801dc90:	ee70 6a67 	vsub.f32	s13, s0, s15
 801dc94:	ee16 2a90 	vmov	r2, s13
 801dc98:	dc1c      	bgt.n	801dcd4 <__ieee754_rem_pio2f+0x114>
 801dc9a:	495a      	ldr	r1, [pc, #360]	; (801de04 <__ieee754_rem_pio2f+0x244>)
 801dc9c:	1e47      	subs	r7, r0, #1
 801dc9e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801dca2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801dca6:	428b      	cmp	r3, r1
 801dca8:	d014      	beq.n	801dcd4 <__ieee754_rem_pio2f+0x114>
 801dcaa:	6022      	str	r2, [r4, #0]
 801dcac:	ed94 7a00 	vldr	s14, [r4]
 801dcb0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801dcb4:	2e00      	cmp	r6, #0
 801dcb6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801dcba:	ed84 0a01 	vstr	s0, [r4, #4]
 801dcbe:	dab0      	bge.n	801dc22 <__ieee754_rem_pio2f+0x62>
 801dcc0:	eeb1 7a47 	vneg.f32	s14, s14
 801dcc4:	eeb1 0a40 	vneg.f32	s0, s0
 801dcc8:	ed84 7a00 	vstr	s14, [r4]
 801dccc:	ed84 0a01 	vstr	s0, [r4, #4]
 801dcd0:	4240      	negs	r0, r0
 801dcd2:	e7a6      	b.n	801dc22 <__ieee754_rem_pio2f+0x62>
 801dcd4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801dcd8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801dcdc:	2908      	cmp	r1, #8
 801dcde:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801dce2:	dde2      	ble.n	801dcaa <__ieee754_rem_pio2f+0xea>
 801dce4:	eddf 5a42 	vldr	s11, [pc, #264]	; 801ddf0 <__ieee754_rem_pio2f+0x230>
 801dce8:	eef0 6a40 	vmov.f32	s13, s0
 801dcec:	eee6 6a25 	vfma.f32	s13, s12, s11
 801dcf0:	ee70 7a66 	vsub.f32	s15, s0, s13
 801dcf4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801dcf8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801ddf8 <__ieee754_rem_pio2f+0x238>
 801dcfc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801dd00:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801dd04:	ee15 2a90 	vmov	r2, s11
 801dd08:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801dd0c:	1a5b      	subs	r3, r3, r1
 801dd0e:	2b19      	cmp	r3, #25
 801dd10:	dc04      	bgt.n	801dd1c <__ieee754_rem_pio2f+0x15c>
 801dd12:	edc4 5a00 	vstr	s11, [r4]
 801dd16:	eeb0 0a66 	vmov.f32	s0, s13
 801dd1a:	e7c7      	b.n	801dcac <__ieee754_rem_pio2f+0xec>
 801dd1c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801de08 <__ieee754_rem_pio2f+0x248>
 801dd20:	eeb0 0a66 	vmov.f32	s0, s13
 801dd24:	eea6 0a25 	vfma.f32	s0, s12, s11
 801dd28:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801dd2c:	eddf 6a37 	vldr	s13, [pc, #220]	; 801de0c <__ieee754_rem_pio2f+0x24c>
 801dd30:	eee6 7a25 	vfma.f32	s15, s12, s11
 801dd34:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801dd38:	ee30 7a67 	vsub.f32	s14, s0, s15
 801dd3c:	ed84 7a00 	vstr	s14, [r4]
 801dd40:	e7b4      	b.n	801dcac <__ieee754_rem_pio2f+0xec>
 801dd42:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801dd46:	db06      	blt.n	801dd56 <__ieee754_rem_pio2f+0x196>
 801dd48:	ee70 7a40 	vsub.f32	s15, s0, s0
 801dd4c:	edc0 7a01 	vstr	s15, [r0, #4]
 801dd50:	edc0 7a00 	vstr	s15, [r0]
 801dd54:	e742      	b.n	801dbdc <__ieee754_rem_pio2f+0x1c>
 801dd56:	15ea      	asrs	r2, r5, #23
 801dd58:	3a86      	subs	r2, #134	; 0x86
 801dd5a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801dd5e:	ee07 3a90 	vmov	s15, r3
 801dd62:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801dd66:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801de10 <__ieee754_rem_pio2f+0x250>
 801dd6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dd72:	ed8d 7a03 	vstr	s14, [sp, #12]
 801dd76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dd7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801dd7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dd82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dd86:	ed8d 7a04 	vstr	s14, [sp, #16]
 801dd8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801dd8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801dd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd96:	edcd 7a05 	vstr	s15, [sp, #20]
 801dd9a:	d11e      	bne.n	801ddda <__ieee754_rem_pio2f+0x21a>
 801dd9c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801dda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dda4:	bf14      	ite	ne
 801dda6:	2302      	movne	r3, #2
 801dda8:	2301      	moveq	r3, #1
 801ddaa:	491a      	ldr	r1, [pc, #104]	; (801de14 <__ieee754_rem_pio2f+0x254>)
 801ddac:	9101      	str	r1, [sp, #4]
 801ddae:	2102      	movs	r1, #2
 801ddb0:	9100      	str	r1, [sp, #0]
 801ddb2:	a803      	add	r0, sp, #12
 801ddb4:	4621      	mov	r1, r4
 801ddb6:	f000 f903 	bl	801dfc0 <__kernel_rem_pio2f>
 801ddba:	2e00      	cmp	r6, #0
 801ddbc:	f6bf af31 	bge.w	801dc22 <__ieee754_rem_pio2f+0x62>
 801ddc0:	edd4 7a00 	vldr	s15, [r4]
 801ddc4:	eef1 7a67 	vneg.f32	s15, s15
 801ddc8:	edc4 7a00 	vstr	s15, [r4]
 801ddcc:	edd4 7a01 	vldr	s15, [r4, #4]
 801ddd0:	eef1 7a67 	vneg.f32	s15, s15
 801ddd4:	edc4 7a01 	vstr	s15, [r4, #4]
 801ddd8:	e77a      	b.n	801dcd0 <__ieee754_rem_pio2f+0x110>
 801ddda:	2303      	movs	r3, #3
 801dddc:	e7e5      	b.n	801ddaa <__ieee754_rem_pio2f+0x1ea>
 801ddde:	bf00      	nop
 801dde0:	3f490fd8 	.word	0x3f490fd8
 801dde4:	4016cbe3 	.word	0x4016cbe3
 801dde8:	3fc90f80 	.word	0x3fc90f80
 801ddec:	3fc90fd0 	.word	0x3fc90fd0
 801ddf0:	37354400 	.word	0x37354400
 801ddf4:	37354443 	.word	0x37354443
 801ddf8:	2e85a308 	.word	0x2e85a308
 801ddfc:	43490f80 	.word	0x43490f80
 801de00:	3f22f984 	.word	0x3f22f984
 801de04:	0801ffb8 	.word	0x0801ffb8
 801de08:	2e85a300 	.word	0x2e85a300
 801de0c:	248d3132 	.word	0x248d3132
 801de10:	43800000 	.word	0x43800000
 801de14:	08020038 	.word	0x08020038

0801de18 <atanf>:
 801de18:	b538      	push	{r3, r4, r5, lr}
 801de1a:	ee10 5a10 	vmov	r5, s0
 801de1e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801de22:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801de26:	eef0 7a40 	vmov.f32	s15, s0
 801de2a:	db10      	blt.n	801de4e <atanf+0x36>
 801de2c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801de30:	dd04      	ble.n	801de3c <atanf+0x24>
 801de32:	ee70 7a00 	vadd.f32	s15, s0, s0
 801de36:	eeb0 0a67 	vmov.f32	s0, s15
 801de3a:	bd38      	pop	{r3, r4, r5, pc}
 801de3c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801df74 <atanf+0x15c>
 801de40:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801df78 <atanf+0x160>
 801de44:	2d00      	cmp	r5, #0
 801de46:	bfd8      	it	le
 801de48:	eef0 7a47 	vmovle.f32	s15, s14
 801de4c:	e7f3      	b.n	801de36 <atanf+0x1e>
 801de4e:	4b4b      	ldr	r3, [pc, #300]	; (801df7c <atanf+0x164>)
 801de50:	429c      	cmp	r4, r3
 801de52:	dc10      	bgt.n	801de76 <atanf+0x5e>
 801de54:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801de58:	da0a      	bge.n	801de70 <atanf+0x58>
 801de5a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801df80 <atanf+0x168>
 801de5e:	ee30 7a07 	vadd.f32	s14, s0, s14
 801de62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de66:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801de6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de6e:	dce2      	bgt.n	801de36 <atanf+0x1e>
 801de70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801de74:	e013      	b.n	801de9e <atanf+0x86>
 801de76:	f7fe ff91 	bl	801cd9c <fabsf>
 801de7a:	4b42      	ldr	r3, [pc, #264]	; (801df84 <atanf+0x16c>)
 801de7c:	429c      	cmp	r4, r3
 801de7e:	dc4f      	bgt.n	801df20 <atanf+0x108>
 801de80:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801de84:	429c      	cmp	r4, r3
 801de86:	dc41      	bgt.n	801df0c <atanf+0xf4>
 801de88:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801de8c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801de90:	eea0 7a27 	vfma.f32	s14, s0, s15
 801de94:	2300      	movs	r3, #0
 801de96:	ee30 0a27 	vadd.f32	s0, s0, s15
 801de9a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801de9e:	1c5a      	adds	r2, r3, #1
 801dea0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801dea4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801df88 <atanf+0x170>
 801dea8:	eddf 5a38 	vldr	s11, [pc, #224]	; 801df8c <atanf+0x174>
 801deac:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801df90 <atanf+0x178>
 801deb0:	ee66 6a06 	vmul.f32	s13, s12, s12
 801deb4:	eee6 5a87 	vfma.f32	s11, s13, s14
 801deb8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801df94 <atanf+0x17c>
 801debc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801dec0:	eddf 5a35 	vldr	s11, [pc, #212]	; 801df98 <atanf+0x180>
 801dec4:	eee7 5a26 	vfma.f32	s11, s14, s13
 801dec8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801df9c <atanf+0x184>
 801decc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801ded0:	eddf 5a33 	vldr	s11, [pc, #204]	; 801dfa0 <atanf+0x188>
 801ded4:	eee7 5a26 	vfma.f32	s11, s14, s13
 801ded8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801dfa4 <atanf+0x18c>
 801dedc:	eea6 5a87 	vfma.f32	s10, s13, s14
 801dee0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801dfa8 <atanf+0x190>
 801dee4:	eea5 7a26 	vfma.f32	s14, s10, s13
 801dee8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801dfac <atanf+0x194>
 801deec:	eea7 5a26 	vfma.f32	s10, s14, s13
 801def0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801dfb0 <atanf+0x198>
 801def4:	eea5 7a26 	vfma.f32	s14, s10, s13
 801def8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801defc:	eea5 7a86 	vfma.f32	s14, s11, s12
 801df00:	ee27 7a87 	vmul.f32	s14, s15, s14
 801df04:	d121      	bne.n	801df4a <atanf+0x132>
 801df06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801df0a:	e794      	b.n	801de36 <atanf+0x1e>
 801df0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801df10:	ee30 7a67 	vsub.f32	s14, s0, s15
 801df14:	ee30 0a27 	vadd.f32	s0, s0, s15
 801df18:	2301      	movs	r3, #1
 801df1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801df1e:	e7be      	b.n	801de9e <atanf+0x86>
 801df20:	4b24      	ldr	r3, [pc, #144]	; (801dfb4 <atanf+0x19c>)
 801df22:	429c      	cmp	r4, r3
 801df24:	dc0b      	bgt.n	801df3e <atanf+0x126>
 801df26:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801df2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801df2e:	eea0 7a27 	vfma.f32	s14, s0, s15
 801df32:	2302      	movs	r3, #2
 801df34:	ee70 6a67 	vsub.f32	s13, s0, s15
 801df38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801df3c:	e7af      	b.n	801de9e <atanf+0x86>
 801df3e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801df42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801df46:	2303      	movs	r3, #3
 801df48:	e7a9      	b.n	801de9e <atanf+0x86>
 801df4a:	4a1b      	ldr	r2, [pc, #108]	; (801dfb8 <atanf+0x1a0>)
 801df4c:	491b      	ldr	r1, [pc, #108]	; (801dfbc <atanf+0x1a4>)
 801df4e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801df52:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801df56:	edd3 6a00 	vldr	s13, [r3]
 801df5a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801df5e:	2d00      	cmp	r5, #0
 801df60:	ee37 7a67 	vsub.f32	s14, s14, s15
 801df64:	edd2 7a00 	vldr	s15, [r2]
 801df68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801df6c:	bfb8      	it	lt
 801df6e:	eef1 7a67 	vneglt.f32	s15, s15
 801df72:	e760      	b.n	801de36 <atanf+0x1e>
 801df74:	3fc90fdb 	.word	0x3fc90fdb
 801df78:	bfc90fdb 	.word	0xbfc90fdb
 801df7c:	3edfffff 	.word	0x3edfffff
 801df80:	7149f2ca 	.word	0x7149f2ca
 801df84:	3f97ffff 	.word	0x3f97ffff
 801df88:	3c8569d7 	.word	0x3c8569d7
 801df8c:	3d4bda59 	.word	0x3d4bda59
 801df90:	bd6ef16b 	.word	0xbd6ef16b
 801df94:	3d886b35 	.word	0x3d886b35
 801df98:	3dba2e6e 	.word	0x3dba2e6e
 801df9c:	3e124925 	.word	0x3e124925
 801dfa0:	3eaaaaab 	.word	0x3eaaaaab
 801dfa4:	bd15a221 	.word	0xbd15a221
 801dfa8:	bd9d8795 	.word	0xbd9d8795
 801dfac:	bde38e38 	.word	0xbde38e38
 801dfb0:	be4ccccd 	.word	0xbe4ccccd
 801dfb4:	401bffff 	.word	0x401bffff
 801dfb8:	08020350 	.word	0x08020350
 801dfbc:	08020360 	.word	0x08020360

0801dfc0 <__kernel_rem_pio2f>:
 801dfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfc4:	ed2d 8b04 	vpush	{d8-d9}
 801dfc8:	b0d9      	sub	sp, #356	; 0x164
 801dfca:	4688      	mov	r8, r1
 801dfcc:	9002      	str	r0, [sp, #8]
 801dfce:	49b8      	ldr	r1, [pc, #736]	; (801e2b0 <__kernel_rem_pio2f+0x2f0>)
 801dfd0:	9866      	ldr	r0, [sp, #408]	; 0x198
 801dfd2:	9301      	str	r3, [sp, #4]
 801dfd4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801dfd8:	9901      	ldr	r1, [sp, #4]
 801dfda:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801dfdc:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 801dfe0:	1d11      	adds	r1, r2, #4
 801dfe2:	db25      	blt.n	801e030 <__kernel_rem_pio2f+0x70>
 801dfe4:	1ed0      	subs	r0, r2, #3
 801dfe6:	bf48      	it	mi
 801dfe8:	1d10      	addmi	r0, r2, #4
 801dfea:	10c0      	asrs	r0, r0, #3
 801dfec:	1c45      	adds	r5, r0, #1
 801dfee:	00e9      	lsls	r1, r5, #3
 801dff0:	eba0 070b 	sub.w	r7, r0, fp
 801dff4:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801e2c0 <__kernel_rem_pio2f+0x300>
 801dff8:	9103      	str	r1, [sp, #12]
 801dffa:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801dffe:	eb0a 0c0b 	add.w	ip, sl, fp
 801e002:	ae1c      	add	r6, sp, #112	; 0x70
 801e004:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801e008:	2400      	movs	r4, #0
 801e00a:	4564      	cmp	r4, ip
 801e00c:	dd12      	ble.n	801e034 <__kernel_rem_pio2f+0x74>
 801e00e:	9901      	ldr	r1, [sp, #4]
 801e010:	ac1c      	add	r4, sp, #112	; 0x70
 801e012:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e016:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801e01a:	f04f 0c00 	mov.w	ip, #0
 801e01e:	45d4      	cmp	ip, sl
 801e020:	dc27      	bgt.n	801e072 <__kernel_rem_pio2f+0xb2>
 801e022:	f8dd e008 	ldr.w	lr, [sp, #8]
 801e026:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801e2c0 <__kernel_rem_pio2f+0x300>
 801e02a:	4627      	mov	r7, r4
 801e02c:	2600      	movs	r6, #0
 801e02e:	e016      	b.n	801e05e <__kernel_rem_pio2f+0x9e>
 801e030:	2000      	movs	r0, #0
 801e032:	e7db      	b.n	801dfec <__kernel_rem_pio2f+0x2c>
 801e034:	42e7      	cmn	r7, r4
 801e036:	bf5d      	ittte	pl
 801e038:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801e03c:	ee07 1a90 	vmovpl	s15, r1
 801e040:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801e044:	eef0 7a47 	vmovmi.f32	s15, s14
 801e048:	ece6 7a01 	vstmia	r6!, {s15}
 801e04c:	3401      	adds	r4, #1
 801e04e:	e7dc      	b.n	801e00a <__kernel_rem_pio2f+0x4a>
 801e050:	ecfe 6a01 	vldmia	lr!, {s13}
 801e054:	ed97 7a00 	vldr	s14, [r7]
 801e058:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e05c:	3601      	adds	r6, #1
 801e05e:	455e      	cmp	r6, fp
 801e060:	f1a7 0704 	sub.w	r7, r7, #4
 801e064:	ddf4      	ble.n	801e050 <__kernel_rem_pio2f+0x90>
 801e066:	ece9 7a01 	vstmia	r9!, {s15}
 801e06a:	f10c 0c01 	add.w	ip, ip, #1
 801e06e:	3404      	adds	r4, #4
 801e070:	e7d5      	b.n	801e01e <__kernel_rem_pio2f+0x5e>
 801e072:	a908      	add	r1, sp, #32
 801e074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e078:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801e07c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801e2bc <__kernel_rem_pio2f+0x2fc>
 801e080:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801e2b8 <__kernel_rem_pio2f+0x2f8>
 801e084:	9105      	str	r1, [sp, #20]
 801e086:	9304      	str	r3, [sp, #16]
 801e088:	4656      	mov	r6, sl
 801e08a:	00b3      	lsls	r3, r6, #2
 801e08c:	9306      	str	r3, [sp, #24]
 801e08e:	ab58      	add	r3, sp, #352	; 0x160
 801e090:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801e094:	ac08      	add	r4, sp, #32
 801e096:	ab44      	add	r3, sp, #272	; 0x110
 801e098:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801e09c:	46a4      	mov	ip, r4
 801e09e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801e0a2:	4637      	mov	r7, r6
 801e0a4:	2f00      	cmp	r7, #0
 801e0a6:	f1a0 0004 	sub.w	r0, r0, #4
 801e0aa:	dc4a      	bgt.n	801e142 <__kernel_rem_pio2f+0x182>
 801e0ac:	4628      	mov	r0, r5
 801e0ae:	9207      	str	r2, [sp, #28]
 801e0b0:	f000 fa3a 	bl	801e528 <scalbnf>
 801e0b4:	eeb0 8a40 	vmov.f32	s16, s0
 801e0b8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801e0bc:	ee28 0a00 	vmul.f32	s0, s16, s0
 801e0c0:	f000 f9f0 	bl	801e4a4 <floorf>
 801e0c4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801e0c8:	eea0 8a67 	vfms.f32	s16, s0, s15
 801e0cc:	2d00      	cmp	r5, #0
 801e0ce:	9a07      	ldr	r2, [sp, #28]
 801e0d0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801e0d4:	ee17 9a90 	vmov	r9, s15
 801e0d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e0dc:	ee38 8a67 	vsub.f32	s16, s16, s15
 801e0e0:	dd41      	ble.n	801e166 <__kernel_rem_pio2f+0x1a6>
 801e0e2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801e0e6:	ab08      	add	r3, sp, #32
 801e0e8:	f1c5 0e08 	rsb	lr, r5, #8
 801e0ec:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801e0f0:	fa47 f00e 	asr.w	r0, r7, lr
 801e0f4:	4481      	add	r9, r0
 801e0f6:	fa00 f00e 	lsl.w	r0, r0, lr
 801e0fa:	1a3f      	subs	r7, r7, r0
 801e0fc:	f1c5 0007 	rsb	r0, r5, #7
 801e100:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801e104:	4107      	asrs	r7, r0
 801e106:	2f00      	cmp	r7, #0
 801e108:	dd3c      	ble.n	801e184 <__kernel_rem_pio2f+0x1c4>
 801e10a:	f04f 0e00 	mov.w	lr, #0
 801e10e:	f109 0901 	add.w	r9, r9, #1
 801e112:	4671      	mov	r1, lr
 801e114:	4576      	cmp	r6, lr
 801e116:	dc67      	bgt.n	801e1e8 <__kernel_rem_pio2f+0x228>
 801e118:	2d00      	cmp	r5, #0
 801e11a:	dd03      	ble.n	801e124 <__kernel_rem_pio2f+0x164>
 801e11c:	2d01      	cmp	r5, #1
 801e11e:	d074      	beq.n	801e20a <__kernel_rem_pio2f+0x24a>
 801e120:	2d02      	cmp	r5, #2
 801e122:	d07b      	beq.n	801e21c <__kernel_rem_pio2f+0x25c>
 801e124:	2f02      	cmp	r7, #2
 801e126:	d12d      	bne.n	801e184 <__kernel_rem_pio2f+0x1c4>
 801e128:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e12c:	ee30 8a48 	vsub.f32	s16, s0, s16
 801e130:	b341      	cbz	r1, 801e184 <__kernel_rem_pio2f+0x1c4>
 801e132:	4628      	mov	r0, r5
 801e134:	9207      	str	r2, [sp, #28]
 801e136:	f000 f9f7 	bl	801e528 <scalbnf>
 801e13a:	9a07      	ldr	r2, [sp, #28]
 801e13c:	ee38 8a40 	vsub.f32	s16, s16, s0
 801e140:	e020      	b.n	801e184 <__kernel_rem_pio2f+0x1c4>
 801e142:	ee60 7a28 	vmul.f32	s15, s0, s17
 801e146:	3f01      	subs	r7, #1
 801e148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e14c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e150:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801e154:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e158:	ecac 0a01 	vstmia	ip!, {s0}
 801e15c:	ed90 0a00 	vldr	s0, [r0]
 801e160:	ee37 0a80 	vadd.f32	s0, s15, s0
 801e164:	e79e      	b.n	801e0a4 <__kernel_rem_pio2f+0xe4>
 801e166:	d105      	bne.n	801e174 <__kernel_rem_pio2f+0x1b4>
 801e168:	1e70      	subs	r0, r6, #1
 801e16a:	ab08      	add	r3, sp, #32
 801e16c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801e170:	11ff      	asrs	r7, r7, #7
 801e172:	e7c8      	b.n	801e106 <__kernel_rem_pio2f+0x146>
 801e174:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e178:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e180:	da30      	bge.n	801e1e4 <__kernel_rem_pio2f+0x224>
 801e182:	2700      	movs	r7, #0
 801e184:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e18c:	f040 809a 	bne.w	801e2c4 <__kernel_rem_pio2f+0x304>
 801e190:	1e74      	subs	r4, r6, #1
 801e192:	46a4      	mov	ip, r4
 801e194:	2100      	movs	r1, #0
 801e196:	45d4      	cmp	ip, sl
 801e198:	da47      	bge.n	801e22a <__kernel_rem_pio2f+0x26a>
 801e19a:	2900      	cmp	r1, #0
 801e19c:	d063      	beq.n	801e266 <__kernel_rem_pio2f+0x2a6>
 801e19e:	ab08      	add	r3, sp, #32
 801e1a0:	3d08      	subs	r5, #8
 801e1a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801e1a6:	2b00      	cmp	r3, #0
 801e1a8:	d07f      	beq.n	801e2aa <__kernel_rem_pio2f+0x2ea>
 801e1aa:	4628      	mov	r0, r5
 801e1ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e1b0:	f000 f9ba 	bl	801e528 <scalbnf>
 801e1b4:	1c63      	adds	r3, r4, #1
 801e1b6:	aa44      	add	r2, sp, #272	; 0x110
 801e1b8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801e2bc <__kernel_rem_pio2f+0x2fc>
 801e1bc:	0099      	lsls	r1, r3, #2
 801e1be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e1c2:	4623      	mov	r3, r4
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	f280 80ad 	bge.w	801e324 <__kernel_rem_pio2f+0x364>
 801e1ca:	4623      	mov	r3, r4
 801e1cc:	2b00      	cmp	r3, #0
 801e1ce:	f2c0 80cb 	blt.w	801e368 <__kernel_rem_pio2f+0x3a8>
 801e1d2:	aa44      	add	r2, sp, #272	; 0x110
 801e1d4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801e1d8:	4e36      	ldr	r6, [pc, #216]	; (801e2b4 <__kernel_rem_pio2f+0x2f4>)
 801e1da:	eddf 7a39 	vldr	s15, [pc, #228]	; 801e2c0 <__kernel_rem_pio2f+0x300>
 801e1de:	2000      	movs	r0, #0
 801e1e0:	1ae2      	subs	r2, r4, r3
 801e1e2:	e0b6      	b.n	801e352 <__kernel_rem_pio2f+0x392>
 801e1e4:	2702      	movs	r7, #2
 801e1e6:	e790      	b.n	801e10a <__kernel_rem_pio2f+0x14a>
 801e1e8:	6820      	ldr	r0, [r4, #0]
 801e1ea:	b949      	cbnz	r1, 801e200 <__kernel_rem_pio2f+0x240>
 801e1ec:	b118      	cbz	r0, 801e1f6 <__kernel_rem_pio2f+0x236>
 801e1ee:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801e1f2:	6020      	str	r0, [r4, #0]
 801e1f4:	2001      	movs	r0, #1
 801e1f6:	f10e 0e01 	add.w	lr, lr, #1
 801e1fa:	3404      	adds	r4, #4
 801e1fc:	4601      	mov	r1, r0
 801e1fe:	e789      	b.n	801e114 <__kernel_rem_pio2f+0x154>
 801e200:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801e204:	6020      	str	r0, [r4, #0]
 801e206:	4608      	mov	r0, r1
 801e208:	e7f5      	b.n	801e1f6 <__kernel_rem_pio2f+0x236>
 801e20a:	1e74      	subs	r4, r6, #1
 801e20c:	ab08      	add	r3, sp, #32
 801e20e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e212:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801e216:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801e21a:	e783      	b.n	801e124 <__kernel_rem_pio2f+0x164>
 801e21c:	1e74      	subs	r4, r6, #1
 801e21e:	ab08      	add	r3, sp, #32
 801e220:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e224:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801e228:	e7f5      	b.n	801e216 <__kernel_rem_pio2f+0x256>
 801e22a:	ab08      	add	r3, sp, #32
 801e22c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801e230:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801e234:	4301      	orrs	r1, r0
 801e236:	e7ae      	b.n	801e196 <__kernel_rem_pio2f+0x1d6>
 801e238:	3001      	adds	r0, #1
 801e23a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801e23e:	2f00      	cmp	r7, #0
 801e240:	d0fa      	beq.n	801e238 <__kernel_rem_pio2f+0x278>
 801e242:	9b06      	ldr	r3, [sp, #24]
 801e244:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801e248:	eb0d 0403 	add.w	r4, sp, r3
 801e24c:	9b01      	ldr	r3, [sp, #4]
 801e24e:	18f7      	adds	r7, r6, r3
 801e250:	ab1c      	add	r3, sp, #112	; 0x70
 801e252:	f106 0c01 	add.w	ip, r6, #1
 801e256:	3c4c      	subs	r4, #76	; 0x4c
 801e258:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e25c:	4430      	add	r0, r6
 801e25e:	4560      	cmp	r0, ip
 801e260:	da04      	bge.n	801e26c <__kernel_rem_pio2f+0x2ac>
 801e262:	4606      	mov	r6, r0
 801e264:	e711      	b.n	801e08a <__kernel_rem_pio2f+0xca>
 801e266:	9c05      	ldr	r4, [sp, #20]
 801e268:	2001      	movs	r0, #1
 801e26a:	e7e6      	b.n	801e23a <__kernel_rem_pio2f+0x27a>
 801e26c:	9b04      	ldr	r3, [sp, #16]
 801e26e:	f8dd e008 	ldr.w	lr, [sp, #8]
 801e272:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e276:	9306      	str	r3, [sp, #24]
 801e278:	ee07 3a90 	vmov	s15, r3
 801e27c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e280:	2600      	movs	r6, #0
 801e282:	ece7 7a01 	vstmia	r7!, {s15}
 801e286:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801e2c0 <__kernel_rem_pio2f+0x300>
 801e28a:	46b9      	mov	r9, r7
 801e28c:	455e      	cmp	r6, fp
 801e28e:	dd04      	ble.n	801e29a <__kernel_rem_pio2f+0x2da>
 801e290:	ece4 7a01 	vstmia	r4!, {s15}
 801e294:	f10c 0c01 	add.w	ip, ip, #1
 801e298:	e7e1      	b.n	801e25e <__kernel_rem_pio2f+0x29e>
 801e29a:	ecfe 6a01 	vldmia	lr!, {s13}
 801e29e:	ed39 7a01 	vldmdb	r9!, {s14}
 801e2a2:	3601      	adds	r6, #1
 801e2a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e2a8:	e7f0      	b.n	801e28c <__kernel_rem_pio2f+0x2cc>
 801e2aa:	3c01      	subs	r4, #1
 801e2ac:	e777      	b.n	801e19e <__kernel_rem_pio2f+0x1de>
 801e2ae:	bf00      	nop
 801e2b0:	0802039c 	.word	0x0802039c
 801e2b4:	08020370 	.word	0x08020370
 801e2b8:	43800000 	.word	0x43800000
 801e2bc:	3b800000 	.word	0x3b800000
 801e2c0:	00000000 	.word	0x00000000
 801e2c4:	9b03      	ldr	r3, [sp, #12]
 801e2c6:	eeb0 0a48 	vmov.f32	s0, s16
 801e2ca:	1a98      	subs	r0, r3, r2
 801e2cc:	f000 f92c 	bl	801e528 <scalbnf>
 801e2d0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801e2b8 <__kernel_rem_pio2f+0x2f8>
 801e2d4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801e2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2dc:	db19      	blt.n	801e312 <__kernel_rem_pio2f+0x352>
 801e2de:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801e2bc <__kernel_rem_pio2f+0x2fc>
 801e2e2:	ee60 7a27 	vmul.f32	s15, s0, s15
 801e2e6:	aa08      	add	r2, sp, #32
 801e2e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e2ec:	1c74      	adds	r4, r6, #1
 801e2ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e2f2:	3508      	adds	r5, #8
 801e2f4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801e2f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e2fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e300:	ee10 3a10 	vmov	r3, s0
 801e304:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801e308:	ee17 3a90 	vmov	r3, s15
 801e30c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801e310:	e74b      	b.n	801e1aa <__kernel_rem_pio2f+0x1ea>
 801e312:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e316:	aa08      	add	r2, sp, #32
 801e318:	ee10 3a10 	vmov	r3, s0
 801e31c:	4634      	mov	r4, r6
 801e31e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801e322:	e742      	b.n	801e1aa <__kernel_rem_pio2f+0x1ea>
 801e324:	a808      	add	r0, sp, #32
 801e326:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801e32a:	9001      	str	r0, [sp, #4]
 801e32c:	ee07 0a90 	vmov	s15, r0
 801e330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e334:	3b01      	subs	r3, #1
 801e336:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e33a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801e33e:	ed62 7a01 	vstmdb	r2!, {s15}
 801e342:	e73f      	b.n	801e1c4 <__kernel_rem_pio2f+0x204>
 801e344:	ecf6 6a01 	vldmia	r6!, {s13}
 801e348:	ecb5 7a01 	vldmia	r5!, {s14}
 801e34c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e350:	3001      	adds	r0, #1
 801e352:	4550      	cmp	r0, sl
 801e354:	dc01      	bgt.n	801e35a <__kernel_rem_pio2f+0x39a>
 801e356:	4290      	cmp	r0, r2
 801e358:	ddf4      	ble.n	801e344 <__kernel_rem_pio2f+0x384>
 801e35a:	a858      	add	r0, sp, #352	; 0x160
 801e35c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801e360:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801e364:	3b01      	subs	r3, #1
 801e366:	e731      	b.n	801e1cc <__kernel_rem_pio2f+0x20c>
 801e368:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801e36a:	2b02      	cmp	r3, #2
 801e36c:	dc09      	bgt.n	801e382 <__kernel_rem_pio2f+0x3c2>
 801e36e:	2b00      	cmp	r3, #0
 801e370:	dc2b      	bgt.n	801e3ca <__kernel_rem_pio2f+0x40a>
 801e372:	d044      	beq.n	801e3fe <__kernel_rem_pio2f+0x43e>
 801e374:	f009 0007 	and.w	r0, r9, #7
 801e378:	b059      	add	sp, #356	; 0x164
 801e37a:	ecbd 8b04 	vpop	{d8-d9}
 801e37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e382:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801e384:	2b03      	cmp	r3, #3
 801e386:	d1f5      	bne.n	801e374 <__kernel_rem_pio2f+0x3b4>
 801e388:	aa30      	add	r2, sp, #192	; 0xc0
 801e38a:	1f0b      	subs	r3, r1, #4
 801e38c:	4413      	add	r3, r2
 801e38e:	461a      	mov	r2, r3
 801e390:	4620      	mov	r0, r4
 801e392:	2800      	cmp	r0, #0
 801e394:	f1a2 0204 	sub.w	r2, r2, #4
 801e398:	dc52      	bgt.n	801e440 <__kernel_rem_pio2f+0x480>
 801e39a:	4622      	mov	r2, r4
 801e39c:	2a01      	cmp	r2, #1
 801e39e:	f1a3 0304 	sub.w	r3, r3, #4
 801e3a2:	dc5d      	bgt.n	801e460 <__kernel_rem_pio2f+0x4a0>
 801e3a4:	ab30      	add	r3, sp, #192	; 0xc0
 801e3a6:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801e2c0 <__kernel_rem_pio2f+0x300>
 801e3aa:	440b      	add	r3, r1
 801e3ac:	2c01      	cmp	r4, #1
 801e3ae:	dc67      	bgt.n	801e480 <__kernel_rem_pio2f+0x4c0>
 801e3b0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801e3b4:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801e3b8:	2f00      	cmp	r7, #0
 801e3ba:	d167      	bne.n	801e48c <__kernel_rem_pio2f+0x4cc>
 801e3bc:	edc8 6a00 	vstr	s13, [r8]
 801e3c0:	ed88 7a01 	vstr	s14, [r8, #4]
 801e3c4:	edc8 7a02 	vstr	s15, [r8, #8]
 801e3c8:	e7d4      	b.n	801e374 <__kernel_rem_pio2f+0x3b4>
 801e3ca:	ab30      	add	r3, sp, #192	; 0xc0
 801e3cc:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801e2c0 <__kernel_rem_pio2f+0x300>
 801e3d0:	440b      	add	r3, r1
 801e3d2:	4622      	mov	r2, r4
 801e3d4:	2a00      	cmp	r2, #0
 801e3d6:	da24      	bge.n	801e422 <__kernel_rem_pio2f+0x462>
 801e3d8:	b34f      	cbz	r7, 801e42e <__kernel_rem_pio2f+0x46e>
 801e3da:	eef1 7a47 	vneg.f32	s15, s14
 801e3de:	edc8 7a00 	vstr	s15, [r8]
 801e3e2:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801e3e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e3ea:	aa31      	add	r2, sp, #196	; 0xc4
 801e3ec:	2301      	movs	r3, #1
 801e3ee:	429c      	cmp	r4, r3
 801e3f0:	da20      	bge.n	801e434 <__kernel_rem_pio2f+0x474>
 801e3f2:	b10f      	cbz	r7, 801e3f8 <__kernel_rem_pio2f+0x438>
 801e3f4:	eef1 7a67 	vneg.f32	s15, s15
 801e3f8:	edc8 7a01 	vstr	s15, [r8, #4]
 801e3fc:	e7ba      	b.n	801e374 <__kernel_rem_pio2f+0x3b4>
 801e3fe:	ab30      	add	r3, sp, #192	; 0xc0
 801e400:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801e2c0 <__kernel_rem_pio2f+0x300>
 801e404:	440b      	add	r3, r1
 801e406:	2c00      	cmp	r4, #0
 801e408:	da05      	bge.n	801e416 <__kernel_rem_pio2f+0x456>
 801e40a:	b10f      	cbz	r7, 801e410 <__kernel_rem_pio2f+0x450>
 801e40c:	eef1 7a67 	vneg.f32	s15, s15
 801e410:	edc8 7a00 	vstr	s15, [r8]
 801e414:	e7ae      	b.n	801e374 <__kernel_rem_pio2f+0x3b4>
 801e416:	ed33 7a01 	vldmdb	r3!, {s14}
 801e41a:	3c01      	subs	r4, #1
 801e41c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e420:	e7f1      	b.n	801e406 <__kernel_rem_pio2f+0x446>
 801e422:	ed73 7a01 	vldmdb	r3!, {s15}
 801e426:	3a01      	subs	r2, #1
 801e428:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e42c:	e7d2      	b.n	801e3d4 <__kernel_rem_pio2f+0x414>
 801e42e:	eef0 7a47 	vmov.f32	s15, s14
 801e432:	e7d4      	b.n	801e3de <__kernel_rem_pio2f+0x41e>
 801e434:	ecb2 7a01 	vldmia	r2!, {s14}
 801e438:	3301      	adds	r3, #1
 801e43a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e43e:	e7d6      	b.n	801e3ee <__kernel_rem_pio2f+0x42e>
 801e440:	edd2 7a00 	vldr	s15, [r2]
 801e444:	edd2 6a01 	vldr	s13, [r2, #4]
 801e448:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e44c:	3801      	subs	r0, #1
 801e44e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e452:	ed82 7a00 	vstr	s14, [r2]
 801e456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e45a:	edc2 7a01 	vstr	s15, [r2, #4]
 801e45e:	e798      	b.n	801e392 <__kernel_rem_pio2f+0x3d2>
 801e460:	edd3 7a00 	vldr	s15, [r3]
 801e464:	edd3 6a01 	vldr	s13, [r3, #4]
 801e468:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e46c:	3a01      	subs	r2, #1
 801e46e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e472:	ed83 7a00 	vstr	s14, [r3]
 801e476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e47a:	edc3 7a01 	vstr	s15, [r3, #4]
 801e47e:	e78d      	b.n	801e39c <__kernel_rem_pio2f+0x3dc>
 801e480:	ed33 7a01 	vldmdb	r3!, {s14}
 801e484:	3c01      	subs	r4, #1
 801e486:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e48a:	e78f      	b.n	801e3ac <__kernel_rem_pio2f+0x3ec>
 801e48c:	eef1 6a66 	vneg.f32	s13, s13
 801e490:	eeb1 7a47 	vneg.f32	s14, s14
 801e494:	edc8 6a00 	vstr	s13, [r8]
 801e498:	ed88 7a01 	vstr	s14, [r8, #4]
 801e49c:	eef1 7a67 	vneg.f32	s15, s15
 801e4a0:	e790      	b.n	801e3c4 <__kernel_rem_pio2f+0x404>
 801e4a2:	bf00      	nop

0801e4a4 <floorf>:
 801e4a4:	ee10 3a10 	vmov	r3, s0
 801e4a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801e4ac:	3a7f      	subs	r2, #127	; 0x7f
 801e4ae:	2a16      	cmp	r2, #22
 801e4b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801e4b4:	dc2a      	bgt.n	801e50c <floorf+0x68>
 801e4b6:	2a00      	cmp	r2, #0
 801e4b8:	da11      	bge.n	801e4de <floorf+0x3a>
 801e4ba:	eddf 7a18 	vldr	s15, [pc, #96]	; 801e51c <floorf+0x78>
 801e4be:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e4c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801e4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4ca:	dd05      	ble.n	801e4d8 <floorf+0x34>
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	da23      	bge.n	801e518 <floorf+0x74>
 801e4d0:	4a13      	ldr	r2, [pc, #76]	; (801e520 <floorf+0x7c>)
 801e4d2:	2900      	cmp	r1, #0
 801e4d4:	bf18      	it	ne
 801e4d6:	4613      	movne	r3, r2
 801e4d8:	ee00 3a10 	vmov	s0, r3
 801e4dc:	4770      	bx	lr
 801e4de:	4911      	ldr	r1, [pc, #68]	; (801e524 <floorf+0x80>)
 801e4e0:	4111      	asrs	r1, r2
 801e4e2:	420b      	tst	r3, r1
 801e4e4:	d0fa      	beq.n	801e4dc <floorf+0x38>
 801e4e6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801e51c <floorf+0x78>
 801e4ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e4ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801e4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4f6:	ddef      	ble.n	801e4d8 <floorf+0x34>
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	bfbe      	ittt	lt
 801e4fc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801e500:	fa40 f202 	asrlt.w	r2, r0, r2
 801e504:	189b      	addlt	r3, r3, r2
 801e506:	ea23 0301 	bic.w	r3, r3, r1
 801e50a:	e7e5      	b.n	801e4d8 <floorf+0x34>
 801e50c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e510:	d3e4      	bcc.n	801e4dc <floorf+0x38>
 801e512:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e516:	4770      	bx	lr
 801e518:	2300      	movs	r3, #0
 801e51a:	e7dd      	b.n	801e4d8 <floorf+0x34>
 801e51c:	7149f2ca 	.word	0x7149f2ca
 801e520:	bf800000 	.word	0xbf800000
 801e524:	007fffff 	.word	0x007fffff

0801e528 <scalbnf>:
 801e528:	ee10 3a10 	vmov	r3, s0
 801e52c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801e530:	d02b      	beq.n	801e58a <scalbnf+0x62>
 801e532:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801e536:	d302      	bcc.n	801e53e <scalbnf+0x16>
 801e538:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e53c:	4770      	bx	lr
 801e53e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801e542:	d123      	bne.n	801e58c <scalbnf+0x64>
 801e544:	4b24      	ldr	r3, [pc, #144]	; (801e5d8 <scalbnf+0xb0>)
 801e546:	eddf 7a25 	vldr	s15, [pc, #148]	; 801e5dc <scalbnf+0xb4>
 801e54a:	4298      	cmp	r0, r3
 801e54c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e550:	db17      	blt.n	801e582 <scalbnf+0x5a>
 801e552:	ee10 3a10 	vmov	r3, s0
 801e556:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801e55a:	3a19      	subs	r2, #25
 801e55c:	f24c 3150 	movw	r1, #50000	; 0xc350
 801e560:	4288      	cmp	r0, r1
 801e562:	dd15      	ble.n	801e590 <scalbnf+0x68>
 801e564:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801e5e0 <scalbnf+0xb8>
 801e568:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801e5e4 <scalbnf+0xbc>
 801e56c:	ee10 3a10 	vmov	r3, s0
 801e570:	eeb0 7a67 	vmov.f32	s14, s15
 801e574:	2b00      	cmp	r3, #0
 801e576:	bfb8      	it	lt
 801e578:	eef0 7a66 	vmovlt.f32	s15, s13
 801e57c:	ee27 0a87 	vmul.f32	s0, s15, s14
 801e580:	4770      	bx	lr
 801e582:	eddf 7a19 	vldr	s15, [pc, #100]	; 801e5e8 <scalbnf+0xc0>
 801e586:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e58a:	4770      	bx	lr
 801e58c:	0dd2      	lsrs	r2, r2, #23
 801e58e:	e7e5      	b.n	801e55c <scalbnf+0x34>
 801e590:	4410      	add	r0, r2
 801e592:	28fe      	cmp	r0, #254	; 0xfe
 801e594:	dce6      	bgt.n	801e564 <scalbnf+0x3c>
 801e596:	2800      	cmp	r0, #0
 801e598:	dd06      	ble.n	801e5a8 <scalbnf+0x80>
 801e59a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e59e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801e5a2:	ee00 3a10 	vmov	s0, r3
 801e5a6:	4770      	bx	lr
 801e5a8:	f110 0f16 	cmn.w	r0, #22
 801e5ac:	da09      	bge.n	801e5c2 <scalbnf+0x9a>
 801e5ae:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801e5e8 <scalbnf+0xc0>
 801e5b2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801e5ec <scalbnf+0xc4>
 801e5b6:	ee10 3a10 	vmov	r3, s0
 801e5ba:	eeb0 7a67 	vmov.f32	s14, s15
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	e7d9      	b.n	801e576 <scalbnf+0x4e>
 801e5c2:	3019      	adds	r0, #25
 801e5c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e5c8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801e5cc:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801e5f0 <scalbnf+0xc8>
 801e5d0:	ee07 3a90 	vmov	s15, r3
 801e5d4:	e7d7      	b.n	801e586 <scalbnf+0x5e>
 801e5d6:	bf00      	nop
 801e5d8:	ffff3cb0 	.word	0xffff3cb0
 801e5dc:	4c000000 	.word	0x4c000000
 801e5e0:	7149f2ca 	.word	0x7149f2ca
 801e5e4:	f149f2ca 	.word	0xf149f2ca
 801e5e8:	0da24260 	.word	0x0da24260
 801e5ec:	8da24260 	.word	0x8da24260
 801e5f0:	33000000 	.word	0x33000000

0801e5f4 <_init>:
 801e5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5f6:	bf00      	nop
 801e5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e5fa:	bc08      	pop	{r3}
 801e5fc:	469e      	mov	lr, r3
 801e5fe:	4770      	bx	lr

0801e600 <_fini>:
 801e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e602:	bf00      	nop
 801e604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e606:	bc08      	pop	{r3}
 801e608:	469e      	mov	lr, r3
 801e60a:	4770      	bx	lr
