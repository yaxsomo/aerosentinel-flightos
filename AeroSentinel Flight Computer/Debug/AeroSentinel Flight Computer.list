
AeroSentinel Flight Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019cec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017b0  08019e80  08019e80  00029e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b630  0801b630  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  0801b630  0801b630  0002b630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b638  0801b638  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b638  0801b638  0002b638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b63c  0801b63c  0002b63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801b640  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          00003e74  20000200  20000200  00030200  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004074  20004074  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .comment      00000093  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 14 .debug_info   000267f0  00000000  00000000  000302c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000048c7  00000000  00000000  00056ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002250  00000000  00000000  0005b380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001aaa  00000000  00000000  0005d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027ca6  00000000  00000000  0005f07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028a82  00000000  00000000  00086d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3122  00000000  00000000  000af7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000abd8  00000000  00000000  001928c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  0019d49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019e64 	.word	0x08019e64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08019e64 	.word	0x08019e64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <UART_Transmit_Messages_BlackBox>:

extern UART_HandleTypeDef huart1;


void UART_Transmit_Messages_BlackBox(const char* str)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff f939 	bl	8000270 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <UART_Transmit_Messages_BlackBox+0x28>)
 800100a:	f008 f9f0 	bl	80093ee <HAL_UART_Transmit>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20003bd0 	.word	0x20003bd0

0800101c <file_exists>:



bool file_exists(const char* filename) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b0ca      	sub	sp, #296	; 0x128
 8001020:	af00      	add	r7, sp, #0
 8001022:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001026:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800102a:	6018      	str	r0, [r3, #0]
    FILINFO fno;
    FRESULT result = f_stat(filename, &fno);
 800102c:	f107 020c 	add.w	r2, r7, #12
 8001030:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001034:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001038:	4611      	mov	r1, r2
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	f00b fd62 	bl	800cb04 <f_stat>
 8001040:	4603      	mov	r3, r0
 8001042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    return result == FR_OK && !(fno.fattrib & AM_DIR);
 8001046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10a      	bne.n	8001064 <file_exists+0x48>
 800104e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001052:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001056:	7a1b      	ldrb	r3, [r3, #8]
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <file_exists+0x48>
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <file_exists+0x4a>
 8001064:	2300      	movs	r3, #0
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
}
 800106c:	4618      	mov	r0, r3
 800106e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <buf_clear>:
	while(*buf++ != '\0') i++;
	return i;

}

void buf_clear(void){
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++ ){
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	e007      	b.n	8001094 <buf_clear+0x1c>
		data_buffer[i] = '\0';
 8001084:	4a09      	ldr	r2, [pc, #36]	; (80010ac <buf_clear+0x34>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++ ){
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800109a:	dbf3      	blt.n	8001084 <buf_clear+0xc>
	}
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20002ae4 	.word	0x20002ae4

080010b0 <mount_sd_card>:


void mount_sd_card(){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "",0);
 80010b4:	2200      	movs	r2, #0
 80010b6:	490a      	ldr	r1, [pc, #40]	; (80010e0 <mount_sd_card+0x30>)
 80010b8:	480a      	ldr	r0, [pc, #40]	; (80010e4 <mount_sd_card+0x34>)
 80010ba:	f00b f8d5 	bl	800c268 <f_mount>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <mount_sd_card+0x38>)
 80010c4:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <mount_sd_card+0x38>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <mount_sd_card+0x26>
	{
		UART_Transmit_Messages_BlackBox("Error mounting the SD Card \r\n");
 80010ce:	4807      	ldr	r0, [pc, #28]	; (80010ec <mount_sd_card+0x3c>)
 80010d0:	f7ff ff8e 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
	} else {
		UART_Transmit_Messages_BlackBox("SD Card mounted successfully! \r\n");
	}
}
 80010d4:	e002      	b.n	80010dc <mount_sd_card+0x2c>
		UART_Transmit_Messages_BlackBox("SD Card mounted successfully! \r\n");
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <mount_sd_card+0x40>)
 80010d8:	f7ff ff8a 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	08019e80 	.word	0x08019e80
 80010e4:	20000a78 	.word	0x20000a78
 80010e8:	20002ae0 	.word	0x20002ae0
 80010ec:	08019e84 	.word	0x08019e84
 80010f0:	08019ea4 	.word	0x08019ea4

080010f4 <check_free_space>:

void check_free_space() {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
    f_getfree("", &fre_clust, &pfs);
 80010fa:	4a37      	ldr	r2, [pc, #220]	; (80011d8 <check_free_space+0xe4>)
 80010fc:	4937      	ldr	r1, [pc, #220]	; (80011dc <check_free_space+0xe8>)
 80010fe:	4838      	ldr	r0, [pc, #224]	; (80011e0 <check_free_space+0xec>)
 8001100:	f00b fd39 	bl	800cb76 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <check_free_space+0xe4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	3b02      	subs	r3, #2
 800110c:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <check_free_space+0xe4>)
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	8952      	ldrh	r2, [r2, #10]
 8001112:	fb02 f303 	mul.w	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f9f4 	bl	8000504 <__aeabi_ui2d>
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <check_free_space+0xf0>)
 8001122:	f7ff fa69 	bl	80005f8 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fd3b 	bl	8000ba8 <__aeabi_d2uiz>
 8001132:	4603      	mov	r3, r0
 8001134:	4a2c      	ldr	r2, [pc, #176]	; (80011e8 <check_free_space+0xf4>)
 8001136:	6013      	str	r3, [r2, #0]
    float total_GB = (float)total / (1024.0 * 1024.0);
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <check_free_space+0xf4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001144:	eddf 6a29 	vldr	s13, [pc, #164]	; 80011ec <check_free_space+0xf8>
 8001148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114c:	edc7 7a01 	vstr	s15, [r7, #4]
    sprintf(data_buffer, "SD CARD Total Size: \t%.2f GB\r\n", total_GB);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f9f9 	bl	8000548 <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4925      	ldr	r1, [pc, #148]	; (80011f0 <check_free_space+0xfc>)
 800115c:	4825      	ldr	r0, [pc, #148]	; (80011f4 <check_free_space+0x100>)
 800115e:	f013 fb99 	bl	8014894 <siprintf>
    UART_Transmit_Messages_BlackBox(data_buffer);
 8001162:	4824      	ldr	r0, [pc, #144]	; (80011f4 <check_free_space+0x100>)
 8001164:	f7ff ff44 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
    buf_clear();
 8001168:	f7ff ff86 	bl	8001078 <buf_clear>

    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <check_free_space+0xe4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	895b      	ldrh	r3, [r3, #10]
 8001172:	461a      	mov	r2, r3
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <check_free_space+0xe8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9c1 	bl	8000504 <__aeabi_ui2d>
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <check_free_space+0xf0>)
 8001188:	f7ff fa36 	bl	80005f8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fd08 	bl	8000ba8 <__aeabi_d2uiz>
 8001198:	4603      	mov	r3, r0
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <check_free_space+0x104>)
 800119c:	6013      	str	r3, [r2, #0]
    float free_space_GB = (float)free_space / (1024.0 * 1024.0);
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <check_free_space+0x104>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011aa:	eddf 6a10 	vldr	s13, [pc, #64]	; 80011ec <check_free_space+0xf8>
 80011ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b2:	edc7 7a00 	vstr	s15, [r7]
    sprintf(data_buffer, "SD CARD Free Space: \t%.2f GB\r\n", free_space_GB);
 80011b6:	6838      	ldr	r0, [r7, #0]
 80011b8:	f7ff f9c6 	bl	8000548 <__aeabi_f2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	490e      	ldr	r1, [pc, #56]	; (80011fc <check_free_space+0x108>)
 80011c2:	480c      	ldr	r0, [pc, #48]	; (80011f4 <check_free_space+0x100>)
 80011c4:	f013 fb66 	bl	8014894 <siprintf>
    UART_Transmit_Messages_BlackBox(data_buffer);
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <check_free_space+0x100>)
 80011ca:	f7ff ff11 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20002ee4 	.word	0x20002ee4
 80011dc:	20002ee8 	.word	0x20002ee8
 80011e0:	08019e80 	.word	0x08019e80
 80011e4:	3fe00000 	.word	0x3fe00000
 80011e8:	20002eec 	.word	0x20002eec
 80011ec:	49800000 	.word	0x49800000
 80011f0:	08019ec8 	.word	0x08019ec8
 80011f4:	20002ae4 	.word	0x20002ae4
 80011f8:	20002ef0 	.word	0x20002ef0
 80011fc:	08019ee8 	.word	0x08019ee8

08001200 <create_file>:





void create_file(const char* filename) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    // Open file to write OR create it if it does not exist
    fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001208:	220b      	movs	r2, #11
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <create_file+0x40>)
 800120e:	f00b f871 	bl	800c2f4 <f_open>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <create_file+0x44>)
 8001218:	701a      	strb	r2, [r3, #0]

    if (fresult == FR_OK) {
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <create_file+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <create_file+0x30>
        UART_Transmit_Messages_BlackBox("File created successfully! \r\n");
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <create_file+0x48>)
 8001224:	f7ff fee4 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
        f_close(&fil);
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <create_file+0x40>)
 800122a:	f00b fc41 	bl	800cab0 <f_close>
    } else {
        UART_Transmit_Messages_BlackBox("Error creating the file. \r\n");
    }
}
 800122e:	e002      	b.n	8001236 <create_file+0x36>
        UART_Transmit_Messages_BlackBox("Error creating the file. \r\n");
 8001230:	4806      	ldr	r0, [pc, #24]	; (800124c <create_file+0x4c>)
 8001232:	f7ff fedd 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20001ab0 	.word	0x20001ab0
 8001244:	20002ae0 	.word	0x20002ae0
 8001248:	08019f08 	.word	0x08019f08
 800124c:	08019f28 	.word	0x08019f28

08001250 <append_data_to_file>:

void append_data_to_file(const char* filename, const char* data) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    if (file_exists(filename)) {
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fede 	bl	800101c <file_exists>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <append_data_to_file+0x2a>
        // Open file to append data at the end
        fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 8001266:	2233      	movs	r2, #51	; 0x33
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	482d      	ldr	r0, [pc, #180]	; (8001320 <append_data_to_file+0xd0>)
 800126c:	f00b f842 	bl	800c2f4 <f_open>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <append_data_to_file+0xd4>)
 8001276:	701a      	strb	r2, [r3, #0]
 8001278:	e00b      	b.n	8001292 <append_data_to_file+0x42>
    } else {
    	create_file(filename);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffc0 	bl	8001200 <create_file>
        // Open file to write OR create it if it does not exist
        fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001280:	220b      	movs	r2, #11
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4826      	ldr	r0, [pc, #152]	; (8001320 <append_data_to_file+0xd0>)
 8001286:	f00b f835 	bl	800c2f4 <f_open>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <append_data_to_file+0xd4>)
 8001290:	701a      	strb	r2, [r3, #0]
    }

    if (fresult == FR_OK) {
 8001292:	4b24      	ldr	r3, [pc, #144]	; (8001324 <append_data_to_file+0xd4>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d13b      	bne.n	8001312 <append_data_to_file+0xc2>
        // Write data to the file
        UINT bytes_written;
        fresult = f_write(&fil, data, strlen(data), &bytes_written);
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f7fe ffe8 	bl	8000270 <strlen>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	6839      	ldr	r1, [r7, #0]
 80012a8:	481d      	ldr	r0, [pc, #116]	; (8001320 <append_data_to_file+0xd0>)
 80012aa:	f00b f9ef 	bl	800c68c <f_write>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <append_data_to_file+0xd4>)
 80012b4:	701a      	strb	r2, [r3, #0]

        if (fresult == FR_OK && bytes_written == strlen(data)) {
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <append_data_to_file+0xd4>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10a      	bne.n	80012d4 <append_data_to_file+0x84>
 80012be:	6838      	ldr	r0, [r7, #0]
 80012c0:	f7fe ffd6 	bl	8000270 <strlen>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d103      	bne.n	80012d4 <append_data_to_file+0x84>
            //UART_Transmit_Messages_BlackBox("Data written to the file successfully! \r\n");
            // Synchronize file information with the disk
            f_sync(&fil);
 80012cc:	4814      	ldr	r0, [pc, #80]	; (8001320 <append_data_to_file+0xd0>)
 80012ce:	f00b fb71 	bl	800c9b4 <f_sync>
 80012d2:	e01a      	b.n	800130a <append_data_to_file+0xba>
        } else {
            if (fresult != FR_OK) {
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <append_data_to_file+0xd4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00a      	beq.n	80012f2 <append_data_to_file+0xa2>
                sprintf(data_buffer, "Error writing data to the file. Error code: %d \r\n", fresult);
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <append_data_to_file+0xd4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4911      	ldr	r1, [pc, #68]	; (8001328 <append_data_to_file+0xd8>)
 80012e4:	4811      	ldr	r0, [pc, #68]	; (800132c <append_data_to_file+0xdc>)
 80012e6:	f013 fad5 	bl	8014894 <siprintf>
                UART_Transmit_Messages_BlackBox(data_buffer);
 80012ea:	4810      	ldr	r0, [pc, #64]	; (800132c <append_data_to_file+0xdc>)
 80012ec:	f7ff fe80 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
 80012f0:	e00b      	b.n	800130a <append_data_to_file+0xba>
            } else {
                sprintf(data_buffer, "Error: Incorrect number of bytes written. Expected: %d, Actual: %d \r\n",
 80012f2:	6838      	ldr	r0, [r7, #0]
 80012f4:	f7fe ffbc 	bl	8000270 <strlen>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <append_data_to_file+0xe0>)
 80012fe:	480b      	ldr	r0, [pc, #44]	; (800132c <append_data_to_file+0xdc>)
 8001300:	f013 fac8 	bl	8014894 <siprintf>
                        strlen(data), bytes_written);
                UART_Transmit_Messages_BlackBox(data_buffer);
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <append_data_to_file+0xdc>)
 8001306:	f7ff fe73 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
            }
        }

        // Close file
        f_close(&fil);
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <append_data_to_file+0xd0>)
 800130c:	f00b fbd0 	bl	800cab0 <f_close>
    } else {
        UART_Transmit_Messages_BlackBox("Error opening the file for writing. \r\n");
    }
}
 8001310:	e002      	b.n	8001318 <append_data_to_file+0xc8>
        UART_Transmit_Messages_BlackBox("Error opening the file for writing. \r\n");
 8001312:	4808      	ldr	r0, [pc, #32]	; (8001334 <append_data_to_file+0xe4>)
 8001314:	f7ff fe6c 	bl	8000ff0 <UART_Transmit_Messages_BlackBox>
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20001ab0 	.word	0x20001ab0
 8001324:	20002ae0 	.word	0x20002ae0
 8001328:	08019f44 	.word	0x08019f44
 800132c:	20002ae4 	.word	0x20002ae4
 8001330:	08019f78 	.word	0x08019f78
 8001334:	08019fc0 	.word	0x08019fc0

08001338 <QMC_init>:



//###############################################################################################################
uint32_t QMC_init(I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af04      	add	r7, sp, #16
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
	uint8_t array[2];
	magneto_sensor.i2c=i2c;
 8001344:	4a33      	ldr	r2, [pc, #204]	; (8001414 <QMC_init+0xdc>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
	magneto_sensor.Control_Register=0x11;
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <QMC_init+0xdc>)
 800134c:	2211      	movs	r2, #17
 800134e:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 8001350:	2301      	movs	r3, #1
 8001352:	733b      	strb	r3, [r7, #12]
	array[1]=magneto_sensor.Control_Register;
 8001354:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <QMC_init+0xdc>)
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	737b      	strb	r3, [r7, #13]

	if(Output_Data_Rate==200)magneto_sensor.Control_Register|=0b00001100;
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	2bc8      	cmp	r3, #200	; 0xc8
 800135e:	d107      	bne.n	8001370 <QMC_init+0x38>
 8001360:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <QMC_init+0xdc>)
 8001362:	791b      	ldrb	r3, [r3, #4]
 8001364:	f043 030c 	orr.w	r3, r3, #12
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <QMC_init+0xdc>)
 800136c:	711a      	strb	r2, [r3, #4]
 800136e:	e024      	b.n	80013ba <QMC_init+0x82>
	else if(Output_Data_Rate==100)magneto_sensor.Control_Register|=0b00001000;
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d107      	bne.n	8001386 <QMC_init+0x4e>
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <QMC_init+0xdc>)
 8001378:	791b      	ldrb	r3, [r3, #4]
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <QMC_init+0xdc>)
 8001382:	711a      	strb	r2, [r3, #4]
 8001384:	e019      	b.n	80013ba <QMC_init+0x82>
	else if(Output_Data_Rate==50)magneto_sensor.Control_Register|=0b00000100;
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	2b32      	cmp	r3, #50	; 0x32
 800138a:	d107      	bne.n	800139c <QMC_init+0x64>
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <QMC_init+0xdc>)
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <QMC_init+0xdc>)
 8001398:	711a      	strb	r2, [r3, #4]
 800139a:	e00e      	b.n	80013ba <QMC_init+0x82>
	else if(Output_Data_Rate==10)magneto_sensor.Control_Register|=0b00000000;
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b0a      	cmp	r3, #10
 80013a0:	d104      	bne.n	80013ac <QMC_init+0x74>
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <QMC_init+0xdc>)
 80013a4:	791a      	ldrb	r2, [r3, #4]
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <QMC_init+0xdc>)
 80013a8:	711a      	strb	r2, [r3, #4]
 80013aa:	e006      	b.n	80013ba <QMC_init+0x82>
	else magneto_sensor.Control_Register|=0b00001100;
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <QMC_init+0xdc>)
 80013ae:	791b      	ldrb	r3, [r3, #4]
 80013b0:	f043 030c 	orr.w	r3, r3, #12
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <QMC_init+0xdc>)
 80013b8:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <QMC_init+0xdc>)
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	2364      	movs	r3, #100	; 0x64
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	220b      	movs	r2, #11
 80013d0:	211a      	movs	r1, #26
 80013d2:	f004 fff5 	bl	80063c0 <HAL_I2C_Mem_Write>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <QMC_init+0xa8>
 80013dc:	2301      	movs	r3, #1
 80013de:	e014      	b.n	800140a <QMC_init+0xd2>
	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <QMC_init+0xdc>)
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	2364      	movs	r3, #100	; 0x64
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2301      	movs	r3, #1
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	3301      	adds	r3, #1
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2301      	movs	r3, #1
 80013f6:	2209      	movs	r2, #9
 80013f8:	211a      	movs	r1, #26
 80013fa:	f004 ffe1 	bl	80063c0 <HAL_I2C_Mem_Write>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <QMC_init+0xd0>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <QMC_init+0xd2>

	return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20002ef4 	.word	0x20002ef4

08001418 <QMC_read>:

uint8_t QMC_read()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af04      	add	r7, sp, #16
	  magneto_sensor.datas[0]=0;
 800141e:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <QMC_read+0x138>)
 8001420:	2200      	movs	r2, #0
 8001422:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x06, 1, magneto_sensor.datas, 1, 100);
 8001424:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <QMC_read+0x138>)
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	2364      	movs	r3, #100	; 0x64
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	2301      	movs	r3, #1
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <QMC_read+0x13c>)
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	2206      	movs	r2, #6
 8001438:	211a      	movs	r1, #26
 800143a:	f005 f8bb 	bl	80065b4 <HAL_I2C_Mem_Read>

	  if((magneto_sensor.datas[0]&0x01)==1)
 800143e:	4b44      	ldr	r3, [pc, #272]	; (8001550 <QMC_read+0x138>)
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d075      	beq.n	8001536 <QMC_read+0x11e>
	  {
		  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x00, 1, magneto_sensor.datas, 6, 100);
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <QMC_read+0x138>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	2364      	movs	r3, #100	; 0x64
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	2306      	movs	r3, #6
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <QMC_read+0x13c>)
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2301      	movs	r3, #1
 800145c:	2200      	movs	r2, #0
 800145e:	211a      	movs	r1, #26
 8001460:	f005 f8a8 	bl	80065b4 <HAL_I2C_Mem_Read>
		  magneto_sensor.Xaxis= (magneto_sensor.datas[1]<<8) | magneto_sensor.datas[0];
 8001464:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <QMC_read+0x138>)
 8001466:	799b      	ldrb	r3, [r3, #6]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21a      	sxth	r2, r3
 800146c:	4b38      	ldr	r3, [pc, #224]	; (8001550 <QMC_read+0x138>)
 800146e:	795b      	ldrb	r3, [r3, #5]
 8001470:	b21b      	sxth	r3, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	b21a      	sxth	r2, r3
 8001476:	4b36      	ldr	r3, [pc, #216]	; (8001550 <QMC_read+0x138>)
 8001478:	819a      	strh	r2, [r3, #12]
		  magneto_sensor.Yaxis= (magneto_sensor.datas[3]<<8) | magneto_sensor.datas[2];
 800147a:	4b35      	ldr	r3, [pc, #212]	; (8001550 <QMC_read+0x138>)
 800147c:	7a1b      	ldrb	r3, [r3, #8]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	4b33      	ldr	r3, [pc, #204]	; (8001550 <QMC_read+0x138>)
 8001484:	79db      	ldrb	r3, [r3, #7]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21a      	sxth	r2, r3
 800148c:	4b30      	ldr	r3, [pc, #192]	; (8001550 <QMC_read+0x138>)
 800148e:	81da      	strh	r2, [r3, #14]
		  magneto_sensor.Zaxis= (magneto_sensor.datas[5]<<8) | magneto_sensor.datas[4];
 8001490:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <QMC_read+0x138>)
 8001492:	7a9b      	ldrb	r3, [r3, #10]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <QMC_read+0x138>)
 800149a:	7a5b      	ldrb	r3, [r3, #9]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <QMC_read+0x138>)
 80014a4:	821a      	strh	r2, [r3, #16]

		  magneto_sensor.compas=atan2f(magneto_sensor.Yaxis,magneto_sensor.Xaxis)*180.00/M_PI;
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <QMC_read+0x138>)
 80014a8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b4:	4b26      	ldr	r3, [pc, #152]	; (8001550 <QMC_read+0x138>)
 80014b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014ba:	ee07 3a10 	vmov	s14, r3
 80014be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014c2:	eef0 0a47 	vmov.f32	s1, s14
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	f016 ff65 	bl	8018398 <atan2f>
 80014ce:	ee10 3a10 	vmov	r3, s0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f838 	bl	8000548 <__aeabi_f2d>
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <QMC_read+0x140>)
 80014de:	f7ff f88b 	bl	80005f8 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	a317      	add	r3, pc, #92	; (adr r3, 8001548 <QMC_read+0x130>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f9ac 	bl	800084c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb74 	bl	8000be8 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <QMC_read+0x138>)
 8001504:	6193      	str	r3, [r2, #24]

		  if(magneto_sensor.compas>0)
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <QMC_read+0x138>)
 8001508:	edd3 7a06 	vldr	s15, [r3, #24]
 800150c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001514:	dd04      	ble.n	8001520 <QMC_read+0x108>
		  {
			  magneto_sensor.heading= magneto_sensor.compas;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <QMC_read+0x138>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <QMC_read+0x138>)
 800151c:	6153      	str	r3, [r2, #20]
 800151e:	e00c      	b.n	800153a <QMC_read+0x122>
		  }
		  else
		  {
			  magneto_sensor.heading=360+magneto_sensor.compas;
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <QMC_read+0x138>)
 8001522:	edd3 7a06 	vldr	s15, [r3, #24]
 8001526:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800155c <QMC_read+0x144>
 800152a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <QMC_read+0x138>)
 8001530:	edc3 7a05 	vstr	s15, [r3, #20]
 8001534:	e001      	b.n	800153a <QMC_read+0x122>
		  }
	  }
	  else
	  {
		  return 1;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <QMC_read+0x124>
	  }
return 0;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	f3af 8000 	nop.w
 8001548:	54442d18 	.word	0x54442d18
 800154c:	400921fb 	.word	0x400921fb
 8001550:	20002ef4 	.word	0x20002ef4
 8001554:	20002ef9 	.word	0x20002ef9
 8001558:	40668000 	.word	0x40668000
 800155c:	43b40000 	.word	0x43b40000

08001560 <Transmit_Compass_Data>:
}




CompassData Transmit_Compass_Data(){
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]


		if(QMC_read() == 0)
 8001568:	f7ff ff56 	bl	8001418 <QMC_read>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 8082 	bne.w	8001678 <Transmit_Compass_Data+0x118>
		{
			float heading = magneto_sensor.heading;
 8001574:	4b4e      	ldr	r3, [pc, #312]	; (80016b0 <Transmit_Compass_Data+0x150>)
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	61fb      	str	r3, [r7, #28]


	        // Calculate magDecRad based on your requirements
			double calculatedMagDecRad = heading * (M_PI / 180.0);
 800157a:	69f8      	ldr	r0, [r7, #28]
 800157c:	f7fe ffe4 	bl	8000548 <__aeabi_f2d>
 8001580:	a349      	add	r3, pc, #292	; (adr r3, 80016a8 <Transmit_Compass_Data+0x148>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff f837 	bl	80005f8 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	e9c7 2304 	strd	r2, r3, [r7, #16]


			//Compas_Value=magneto_sensor.heading;
			//char mag_buffer[100];
			compass_data.mag_unit_x = (double)magneto_sensor.Xaxis;
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <Transmit_Compass_Data+0x150>)
 8001594:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffc3 	bl	8000524 <__aeabi_i2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4944      	ldr	r1, [pc, #272]	; (80016b4 <Transmit_Compass_Data+0x154>)
 80015a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
			compass_data.mag_unit_y = (double)magneto_sensor.Yaxis;
 80015a8:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <Transmit_Compass_Data+0x150>)
 80015aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffb8 	bl	8000524 <__aeabi_i2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	493e      	ldr	r1, [pc, #248]	; (80016b4 <Transmit_Compass_Data+0x154>)
 80015ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
			compass_data.mag_unit_z = (double)magneto_sensor.Zaxis;
 80015be:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <Transmit_Compass_Data+0x150>)
 80015c0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffad 	bl	8000524 <__aeabi_i2d>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4939      	ldr	r1, [pc, #228]	; (80016b4 <Transmit_Compass_Data+0x154>)
 80015d0:	e9c1 2308 	strd	r2, r3, [r1, #32]
			//sprintf(mag_buffer, "X=%d, Y=%d, Z=%d \r\n", magneto_sensor.Xaxis, magneto_sensor.Yaxis, magneto_sensor.Zaxis);
			//sprintf(mag_heading_buffer, "HEADING : %.1f\r\n",magneto_sensor.heading);
			//UART_Transmit_Messages_Magnetometer(mag_buffer);
			//UART_Transmit_Messages_Magnetometer(mag_heading_buffer);

	        const int numDirections = sizeof(directions) / sizeof(directions[0]);
 80015d4:	2309      	movs	r3, #9
 80015d6:	60fb      	str	r3, [r7, #12]
	        const char* direction = "Unknown";
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <Transmit_Compass_Data+0x158>)
 80015da:	627b      	str	r3, [r7, #36]	; 0x24

	        for (int i = 0; i < numDirections; ++i) {
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
 80015e0:	e02e      	b.n	8001640 <Transmit_Compass_Data+0xe0>
	            if (heading >= directions[i].min && heading <= directions[i].max) {
 80015e2:	4936      	ldr	r1, [pc, #216]	; (80016bc <Transmit_Compass_Data+0x15c>)
 80015e4:	6a3a      	ldr	r2, [r7, #32]
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80015f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001600:	db1b      	blt.n	800163a <Transmit_Compass_Data+0xda>
 8001602:	492e      	ldr	r1, [pc, #184]	; (80016bc <Transmit_Compass_Data+0x15c>)
 8001604:	6a3a      	ldr	r2, [r7, #32]
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	3304      	adds	r3, #4
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ed97 7a07 	vldr	s14, [r7, #28]
 800161a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800161e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001622:	d80a      	bhi.n	800163a <Transmit_Compass_Data+0xda>
	                direction = directions[i].direction;
 8001624:	4925      	ldr	r1, [pc, #148]	; (80016bc <Transmit_Compass_Data+0x15c>)
 8001626:	6a3a      	ldr	r2, [r7, #32]
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	3308      	adds	r3, #8
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
	                break;
 8001638:	e006      	b.n	8001648 <Transmit_Compass_Data+0xe8>
	        for (int i = 0; i < numDirections; ++i) {
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	3301      	adds	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
 8001640:	6a3a      	ldr	r2, [r7, #32]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	429a      	cmp	r2, r3
 8001646:	dbcc      	blt.n	80015e2 <Transmit_Compass_Data+0x82>
	            }
	        }

	        compass_data.heading = heading;
 8001648:	4a1a      	ldr	r2, [pc, #104]	; (80016b4 <Transmit_Compass_Data+0x154>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	6013      	str	r3, [r2, #0]
	        compass_data.direction = direction;
 800164e:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <Transmit_Compass_Data+0x154>)
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	6293      	str	r3, [r2, #40]	; 0x28
	        compass_data.magDecRad = calculatedMagDecRad;
 8001654:	4917      	ldr	r1, [pc, #92]	; (80016b4 <Transmit_Compass_Data+0x154>)
 8001656:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800165a:	e9c1 2302 	strd	r2, r3, [r1, #8]



	        return compass_data;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <Transmit_Compass_Data+0x154>)
 8001662:	461c      	mov	r4, r3
 8001664:	4615      	mov	r5, r2
 8001666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001672:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001676:	e012      	b.n	800169e <Transmit_Compass_Data+0x13e>

		}
		else
		{
	        compass_data.heading = 0;
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <Transmit_Compass_Data+0x154>)
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
	        compass_data.direction = "ERR";
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <Transmit_Compass_Data+0x154>)
 8001682:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <Transmit_Compass_Data+0x160>)
 8001684:	629a      	str	r2, [r3, #40]	; 0x28

	        return compass_data;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <Transmit_Compass_Data+0x154>)
 800168a:	461c      	mov	r4, r3
 800168c:	4615      	mov	r5, r2
 800168e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001696:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800169a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}

}
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	3728      	adds	r7, #40	; 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bdb0      	pop	{r4, r5, r7, pc}
 80016a6:	bf00      	nop
 80016a8:	a2529d39 	.word	0xa2529d39
 80016ac:	3f91df46 	.word	0x3f91df46
 80016b0:	20002ef4 	.word	0x20002ef4
 80016b4:	20002f10 	.word	0x20002f10
 80016b8:	0801a070 	.word	0x0801a070
 80016bc:	0801a8cc 	.word	0x0801a8cc
 80016c0:	0801a078 	.word	0x0801a078

080016c4 <UART_Transmit_String>:
	uint8_t all_reg_rx[8];
	struct LoRa_Handler LoraRX={0};


void UART_Transmit_String(const char* str)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7fe fdcf 	bl	8000270 <strlen>
 80016d2:	4603      	mov	r3, r0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <UART_Transmit_String+0x28>)
 80016de:	f007 fe86 	bl	80093ee <HAL_UART_Transmit>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20003bd0 	.word	0x20003bd0

080016f0 <printIntroTitle>:




void printIntroTitle()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
    UART_Transmit_String("\r\n");
 80016f4:	480e      	ldr	r0, [pc, #56]	; (8001730 <printIntroTitle+0x40>)
 80016f6:	f7ff ffe5 	bl	80016c4 <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 80016fa:	480e      	ldr	r0, [pc, #56]	; (8001734 <printIntroTitle+0x44>)
 80016fc:	f7ff ffe2 	bl	80016c4 <UART_Transmit_String>
    UART_Transmit_String("*               AEROSENTINEL Flight Computer           *\r\n");
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <printIntroTitle+0x48>)
 8001702:	f7ff ffdf 	bl	80016c4 <UART_Transmit_String>
    UART_Transmit_String("*    A versatile flight control system for your rocket  *\r\n");
 8001706:	480d      	ldr	r0, [pc, #52]	; (800173c <printIntroTitle+0x4c>)
 8001708:	f7ff ffdc 	bl	80016c4 <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <printIntroTitle+0x44>)
 800170e:	f7ff ffd9 	bl	80016c4 <UART_Transmit_String>
    UART_Transmit_String("               Welcome to AEROSENTINEL CLI              \r\n");
 8001712:	480b      	ldr	r0, [pc, #44]	; (8001740 <printIntroTitle+0x50>)
 8001714:	f7ff ffd6 	bl	80016c4 <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <printIntroTitle+0x44>)
 800171a:	f7ff ffd3 	bl	80016c4 <UART_Transmit_String>
    UART_Transmit_String("\r\n");
 800171e:	4804      	ldr	r0, [pc, #16]	; (8001730 <printIntroTitle+0x40>)
 8001720:	f7ff ffd0 	bl	80016c4 <UART_Transmit_String>
    mount_sd_card();
 8001724:	f7ff fcc4 	bl	80010b0 <mount_sd_card>
    check_free_space();
 8001728:	f7ff fce4 	bl	80010f4 <check_free_space>


    //scanSingleUARTDevice(&huart1); // Checks for UART devices connected


}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	0801a07c 	.word	0x0801a07c
 8001734:	0801a080 	.word	0x0801a080
 8001738:	0801a0bc 	.word	0x0801a0bc
 800173c:	0801a0f8 	.word	0x0801a0f8
 8001740:	0801a134 	.word	0x0801a134

08001744 <printOptions>:

void printOptions(){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
    UART_Transmit_String("\r\nChoose an option:\r\n");
 8001748:	480b      	ldr	r0, [pc, #44]	; (8001778 <printOptions+0x34>)
 800174a:	f7ff ffbb 	bl	80016c4 <UART_Transmit_String>
    UART_Transmit_String("0 - Initialize Flight Computer\r\n");
 800174e:	480b      	ldr	r0, [pc, #44]	; (800177c <printOptions+0x38>)
 8001750:	f7ff ffb8 	bl	80016c4 <UART_Transmit_String>
    UART_Transmit_String("1 - Read All Sensors\r\n");
 8001754:	480a      	ldr	r0, [pc, #40]	; (8001780 <printOptions+0x3c>)
 8001756:	f7ff ffb5 	bl	80016c4 <UART_Transmit_String>
    //UART_Transmit_String("2 - LoRa Test (Sender/Receiver)\r\n");
    UART_Transmit_String("3 - Execute Pyro Test (Ignition)\r\n");
 800175a:	480a      	ldr	r0, [pc, #40]	; (8001784 <printOptions+0x40>)
 800175c:	f7ff ffb2 	bl	80016c4 <UART_Transmit_String>
    UART_Transmit_String("4 - Execute Pyro Test (Parachute)\r\n");
 8001760:	4809      	ldr	r0, [pc, #36]	; (8001788 <printOptions+0x44>)
 8001762:	f7ff ffaf 	bl	80016c4 <UART_Transmit_String>
    UART_Transmit_String("5 - Launch Procedure\r\n");
 8001766:	4809      	ldr	r0, [pc, #36]	; (800178c <printOptions+0x48>)
 8001768:	f7ff ffac 	bl	80016c4 <UART_Transmit_String>
    UART_Transmit_String("\r\n");
 800176c:	4808      	ldr	r0, [pc, #32]	; (8001790 <printOptions+0x4c>)
 800176e:	f7ff ffa9 	bl	80016c4 <UART_Transmit_String>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	0801a170 	.word	0x0801a170
 800177c:	0801a188 	.word	0x0801a188
 8001780:	0801a1ac 	.word	0x0801a1ac
 8001784:	0801a1c4 	.word	0x0801a1c4
 8001788:	0801a1e8 	.word	0x0801a1e8
 800178c:	0801a20c 	.word	0x0801a20c
 8001790:	0801a07c 	.word	0x0801a07c

08001794 <initialization_procedure>:


int32_t initialization_procedure(){
 8001794:	b580      	push	{r7, lr}
 8001796:	b0d0      	sub	sp, #320	; 0x140
 8001798:	af00      	add	r7, sp, #0


	  int32_t fc_initialization_state;


	  UART_Transmit_String("Starting initialization process.. \r\n");
 800179a:	482a      	ldr	r0, [pc, #168]	; (8001844 <initialization_procedure+0xb0>)
 800179c:	f7ff ff92 	bl	80016c4 <UART_Transmit_String>
	  int32_t imu_init_state = IMU_Initialization();
 80017a0:	f000 fbb8 	bl	8001f14 <IMU_Initialization>
 80017a4:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	  char imu_buffer[100];

	  HAL_Delay(100);
 80017a8:	2064      	movs	r0, #100	; 0x64
 80017aa:	f003 fc13 	bl	8004fd4 <HAL_Delay>

	  sprintf(imu_buffer, "IMU Initialization. Code : %ld  \r\n", imu_init_state);
 80017ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017b2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80017b6:	4924      	ldr	r1, [pc, #144]	; (8001848 <initialization_procedure+0xb4>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f013 f86b 	bl	8014894 <siprintf>
	  UART_Transmit_String(imu_buffer);
 80017be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff7e 	bl	80016c4 <UART_Transmit_String>

	  HAL_Delay(100);
 80017c8:	2064      	movs	r0, #100	; 0x64
 80017ca:	f003 fc03 	bl	8004fd4 <HAL_Delay>

	  int32_t pressure_init_state = Pressure_Init();
 80017ce:	f000 fd9f 	bl	8002310 <Pressure_Init>
 80017d2:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	  char pressure_buffer[100];
	  sprintf(pressure_buffer, "Pressure Initialization. Code : %ld  \r\n", pressure_init_state);
 80017d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017da:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80017de:	491b      	ldr	r1, [pc, #108]	; (800184c <initialization_procedure+0xb8>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f013 f857 	bl	8014894 <siprintf>
	  UART_Transmit_String(pressure_buffer);
 80017e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff6a 	bl	80016c4 <UART_Transmit_String>

	  HAL_Delay(100);
 80017f0:	2064      	movs	r0, #100	; 0x64
 80017f2:	f003 fbef 	bl	8004fd4 <HAL_Delay>

	  int32_t magnetometer_init_state = QMC_init(&hi2c1, 200);
 80017f6:	21c8      	movs	r1, #200	; 0xc8
 80017f8:	4815      	ldr	r0, [pc, #84]	; (8001850 <initialization_procedure+0xbc>)
 80017fa:	f7ff fd9d 	bl	8001338 <QMC_init>
 80017fe:	4603      	mov	r3, r0
 8001800:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  char magneto_buffer[100];
	  sprintf(magneto_buffer, "Magnetometer Initialization. Code : %ld  \r\n", magnetometer_init_state);
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800180a:	4912      	ldr	r1, [pc, #72]	; (8001854 <initialization_procedure+0xc0>)
 800180c:	4618      	mov	r0, r3
 800180e:	f013 f841 	bl	8014894 <siprintf>
	  UART_Transmit_String(magneto_buffer);
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff55 	bl	80016c4 <UART_Transmit_String>

	  HAL_Delay(100);
 800181a:	2064      	movs	r0, #100	; 0x64
 800181c:	f003 fbda 	bl	8004fd4 <HAL_Delay>




	  fc_initialization_state = imu_init_state + pressure_init_state + magnetometer_init_state;
 8001820:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001824:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001828:	4413      	add	r3, r2
 800182a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800182e:	4413      	add	r3, r2
 8001830:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	  return fc_initialization_state;
 8001834:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
}
 8001838:	4618      	mov	r0, r3
 800183a:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	0801a224 	.word	0x0801a224
 8001848:	0801a24c 	.word	0x0801a24c
 800184c:	0801a270 	.word	0x0801a270
 8001850:	200039d8 	.word	0x200039d8
 8001854:	0801a298 	.word	0x0801a298

08001858 <sensors_readings>:


void sensors_readings() {
 8001858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800185c:	b0e0      	sub	sp, #384	; 0x180
 800185e:	af0e      	add	r7, sp, #56	; 0x38
    // Call each sensor function and receive the data structures


    IMUData imu_data = IMU_Data_Read();
 8001860:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fc1b 	bl	80020a0 <IMU_Data_Read>
    TemperatureData temperature_data = Transmit_Temperature();
 800186a:	f001 f989 	bl	8002b80 <Transmit_Temperature>
 800186e:	eef0 7a40 	vmov.f32	s15, s0
 8001872:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
    PressureTempData pressure_temp_data = Transmit_Pressure_Temp_Data();
 8001876:	f001 f8bd 	bl	80029f4 <Transmit_Pressure_Temp_Data>
 800187a:	eeb0 7a40 	vmov.f32	s14, s0
 800187e:	eef0 7a60 	vmov.f32	s15, s1
 8001882:	ed87 7a47 	vstr	s14, [r7, #284]	; 0x11c
 8001886:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
    CompassData compass_data = Transmit_Compass_Data();
 800188a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fe66 	bl	8001560 <Transmit_Compass_Data>
    // Format IMU data into the buffer
    sprintf(buffer, "IMU Data: \n"
            "Acceleration (X=%.3f g, Y=%.3f g, Z=%.3f g), \n"
            "Angular Rate (X=%4.2f dps, Y=%4.2f dps, Z=%4.2f dps), \n"
            "Roll=%.3f°, Pitch=%.3f°\r", // Note the '\r' to return to the beginning of the line
            imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001894:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
    sprintf(buffer, "IMU Data: \n"
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe55 	bl	8000548 <__aeabi_f2d>
 800189e:	e9c7 0106 	strd	r0, r1, [r7, #24]
            imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 80018a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
    sprintf(buffer, "IMU Data: \n"
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe4e 	bl	8000548 <__aeabi_f2d>
 80018ac:	4682      	mov	sl, r0
 80018ae:	468b      	mov	fp, r1
            imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 80018b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
    sprintf(buffer, "IMU Data: \n"
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fe47 	bl	8000548 <__aeabi_f2d>
 80018ba:	e9c7 0104 	strd	r0, r1, [r7, #16]
            imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z,
 80018be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
    sprintf(buffer, "IMU Data: \n"
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fe40 	bl	8000548 <__aeabi_f2d>
 80018c8:	e9c7 0102 	strd	r0, r1, [r7, #8]
            imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z,
 80018cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
    sprintf(buffer, "IMU Data: \n"
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe39 	bl	8000548 <__aeabi_f2d>
 80018d6:	e9c7 0100 	strd	r0, r1, [r7]
            imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z,
 80018da:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
    sprintf(buffer, "IMU Data: \n"
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe32 	bl	8000548 <__aeabi_f2d>
 80018e4:	4680      	mov	r8, r0
 80018e6:	4689      	mov	r9, r1
            imu_data.roll, imu_data.pitch);
 80018e8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
    sprintf(buffer, "IMU Data: \n"
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fe2b 	bl	8000548 <__aeabi_f2d>
 80018f2:	4604      	mov	r4, r0
 80018f4:	460d      	mov	r5, r1
            imu_data.roll, imu_data.pitch);
 80018f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
    sprintf(buffer, "IMU Data: \n"
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe24 	bl	8000548 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	f107 0020 	add.w	r0, r7, #32
 8001908:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800190c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001910:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001914:	ed97 7b00 	vldr	d7, [r7]
 8001918:	ed8d 7b06 	vstr	d7, [sp, #24]
 800191c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001920:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001924:	ed97 7b04 	vldr	d7, [r7, #16]
 8001928:	ed8d 7b02 	vstr	d7, [sp, #8]
 800192c:	e9cd ab00 	strd	sl, fp, [sp]
 8001930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001934:	4937      	ldr	r1, [pc, #220]	; (8001a14 <sensors_readings+0x1bc>)
 8001936:	f012 ffad 	bl	8014894 <siprintf>
    UART_Transmit_String(buffer);
 800193a:	f107 0320 	add.w	r3, r7, #32
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fec0 	bl	80016c4 <UART_Transmit_String>
    append_data_to_file("sensor_data.txt", buffer);
 8001944:	f107 0320 	add.w	r3, r7, #32
 8001948:	4619      	mov	r1, r3
 800194a:	4833      	ldr	r0, [pc, #204]	; (8001a18 <sensors_readings+0x1c0>)
 800194c:	f7ff fc80 	bl	8001250 <append_data_to_file>

    // Concatenate temperature data to buffer
    sprintf(buffer, "Temperature: %.2f°C \r\n", temperature_data.temperature_celsius/100);
 8001950:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8001954:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001a1c <sensors_readings+0x1c4>
 8001958:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800195c:	ee16 0a90 	vmov	r0, s13
 8001960:	f7fe fdf2 	bl	8000548 <__aeabi_f2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	f107 0020 	add.w	r0, r7, #32
 800196c:	492c      	ldr	r1, [pc, #176]	; (8001a20 <sensors_readings+0x1c8>)
 800196e:	f012 ff91 	bl	8014894 <siprintf>
    UART_Transmit_String(buffer);
 8001972:	f107 0320 	add.w	r3, r7, #32
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fea4 	bl	80016c4 <UART_Transmit_String>
    append_data_to_file("sensor_data.txt", buffer);
 800197c:	f107 0320 	add.w	r3, r7, #32
 8001980:	4619      	mov	r1, r3
 8001982:	4825      	ldr	r0, [pc, #148]	; (8001a18 <sensors_readings+0x1c0>)
 8001984:	f7ff fc64 	bl	8001250 <append_data_to_file>

    // Concatenate pressure and temperature data to buffer
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
            pressure_temp_data.pressure_hpa, pressure_temp_data.temperature_celsius);
 8001988:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fddb 	bl	8000548 <__aeabi_f2d>
 8001992:	4604      	mov	r4, r0
 8001994:	460d      	mov	r5, r1
            pressure_temp_data.pressure_hpa, pressure_temp_data.temperature_celsius);
 8001996:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdd4 	bl	8000548 <__aeabi_f2d>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	f107 0020 	add.w	r0, r7, #32
 80019a8:	e9cd 2300 	strd	r2, r3, [sp]
 80019ac:	4622      	mov	r2, r4
 80019ae:	462b      	mov	r3, r5
 80019b0:	491c      	ldr	r1, [pc, #112]	; (8001a24 <sensors_readings+0x1cc>)
 80019b2:	f012 ff6f 	bl	8014894 <siprintf>
    UART_Transmit_String(buffer);
 80019b6:	f107 0320 	add.w	r3, r7, #32
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fe82 	bl	80016c4 <UART_Transmit_String>
    append_data_to_file("sensor_data.txt", buffer);
 80019c0:	f107 0320 	add.w	r3, r7, #32
 80019c4:	4619      	mov	r1, r3
 80019c6:	4814      	ldr	r0, [pc, #80]	; (8001a18 <sensors_readings+0x1c0>)
 80019c8:	f7ff fc42 	bl	8001250 <append_data_to_file>

    // Concatenate compass data to buffer
    sprintf(buffer, "HEADING (YAW): %.1f\r\n", compass_data.heading);
 80019cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fdb9 	bl	8000548 <__aeabi_f2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	f107 0020 	add.w	r0, r7, #32
 80019de:	4912      	ldr	r1, [pc, #72]	; (8001a28 <sensors_readings+0x1d0>)
 80019e0:	f012 ff58 	bl	8014894 <siprintf>
    UART_Transmit_String(buffer);
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fe6b 	bl	80016c4 <UART_Transmit_String>
    append_data_to_file("sensor_data.txt", buffer);
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	4619      	mov	r1, r3
 80019f4:	4808      	ldr	r0, [pc, #32]	; (8001a18 <sensors_readings+0x1c0>)
 80019f6:	f7ff fc2b 	bl	8001250 <append_data_to_file>

    UART_Transmit_String("------------------------------------------------------ \r\n");
 80019fa:	480c      	ldr	r0, [pc, #48]	; (8001a2c <sensors_readings+0x1d4>)
 80019fc:	f7ff fe62 	bl	80016c4 <UART_Transmit_String>
    // Append the separator to the file
    append_data_to_file("sensor_data.txt", "------------------------------------------------------ \r\n");
 8001a00:	490a      	ldr	r1, [pc, #40]	; (8001a2c <sensors_readings+0x1d4>)
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <sensors_readings+0x1c0>)
 8001a04:	f7ff fc24 	bl	8001250 <append_data_to_file>

}
 8001a08:	bf00      	nop
 8001a0a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a14:	0801a2c4 	.word	0x0801a2c4
 8001a18:	0801a350 	.word	0x0801a350
 8001a1c:	42c80000 	.word	0x42c80000
 8001a20:	0801a360 	.word	0x0801a360
 8001a24:	0801a378 	.word	0x0801a378
 8001a28:	0801a3a8 	.word	0x0801a3a8
 8001a2c:	0801a3c0 	.word	0x0801a3c0

08001a30 <send_data_to_gcs>:




// Custom function to print data in the required model format
void send_data_to_gcs(int datatype, float value) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0b6      	sub	sp, #216	; 0xd8
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	ed87 0a00 	vstr	s0, [r7]
	// Print the data for each sensor and append to the file
	char gcs_buffer[200];


    // Print data in the specified format
    sprintf(gcs_buffer, "%d, %.2f;\r\n",
 8001a3c:	6838      	ldr	r0, [r7, #0]
 8001a3e:	f7fe fd83 	bl	8000548 <__aeabi_f2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	f107 0008 	add.w	r0, r7, #8
 8001a4a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4907      	ldr	r1, [pc, #28]	; (8001a70 <send_data_to_gcs+0x40>)
 8001a52:	f012 ff1f 	bl	8014894 <siprintf>
            datatype, value);

    UART_Transmit_String(gcs_buffer);
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fe32 	bl	80016c4 <UART_Transmit_String>

    HAL_Delay(15);
 8001a60:	200f      	movs	r0, #15
 8001a62:	f003 fab7 	bl	8004fd4 <HAL_Delay>


}
 8001a66:	bf00      	nop
 8001a68:	37d0      	adds	r7, #208	; 0xd0
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	0801a3fc 	.word	0x0801a3fc

08001a74 <sensors_readings_graphs>:

void sensors_readings_graphs() {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b098      	sub	sp, #96	; 0x60
 8001a78:	af00      	add	r7, sp, #0
    // Call each sensor function and receive the data structures
    IMUData imu_data = IMU_Data_Read();
 8001a7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fb0e 	bl	80020a0 <IMU_Data_Read>
    TemperatureData temperature_data = Transmit_Temperature();
 8001a84:	f001 f87c 	bl	8002b80 <Transmit_Temperature>
 8001a88:	eef0 7a40 	vmov.f32	s15, s0
 8001a8c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    PressureTempData pressure_temp_data = Transmit_Pressure_Temp_Data();
 8001a90:	f000 ffb0 	bl	80029f4 <Transmit_Pressure_Temp_Data>
 8001a94:	eeb0 7a40 	vmov.f32	s14, s0
 8001a98:	eef0 7a60 	vmov.f32	s15, s1
 8001a9c:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8001aa0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    CompassData compass_data = Transmit_Compass_Data();
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fd5a 	bl	8001560 <Transmit_Compass_Data>


    // Print IMU data
    send_data_to_gcs(1, imu_data.acceleration_x);
 8001aac:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7ff ffbb 	bl	8001a30 <send_data_to_gcs>
    send_data_to_gcs(2, imu_data.acceleration_y);
 8001aba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001abe:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	f7ff ffb4 	bl	8001a30 <send_data_to_gcs>
    send_data_to_gcs(3, imu_data.acceleration_z);
 8001ac8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001acc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f7ff ffad 	bl	8001a30 <send_data_to_gcs>
    send_data_to_gcs(4, imu_data.angular_rate_x);
 8001ad6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001ada:	eeb0 0a67 	vmov.f32	s0, s15
 8001ade:	2004      	movs	r0, #4
 8001ae0:	f7ff ffa6 	bl	8001a30 <send_data_to_gcs>
    send_data_to_gcs(5, imu_data.angular_rate_y);
 8001ae4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aec:	2005      	movs	r0, #5
 8001aee:	f7ff ff9f 	bl	8001a30 <send_data_to_gcs>
    send_data_to_gcs(6, imu_data.angular_rate_z);
 8001af2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001af6:	eeb0 0a67 	vmov.f32	s0, s15
 8001afa:	2006      	movs	r0, #6
 8001afc:	f7ff ff98 	bl	8001a30 <send_data_to_gcs>

    //Print Roll and Pitch data
    send_data_to_gcs(7, imu_data.roll);
 8001b00:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b04:	eeb0 0a67 	vmov.f32	s0, s15
 8001b08:	2007      	movs	r0, #7
 8001b0a:	f7ff ff91 	bl	8001a30 <send_data_to_gcs>
    send_data_to_gcs(8, imu_data.pitch);
 8001b0e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b12:	eeb0 0a67 	vmov.f32	s0, s15
 8001b16:	2008      	movs	r0, #8
 8001b18:	f7ff ff8a 	bl	8001a30 <send_data_to_gcs>

    // Print temperature data
    send_data_to_gcs(9, temperature_data.temperature_celsius / 100);
 8001b1c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b20:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001b64 <sensors_readings_graphs+0xf0>
 8001b24:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b28:	eeb0 0a47 	vmov.f32	s0, s14
 8001b2c:	2009      	movs	r0, #9
 8001b2e:	f7ff ff7f 	bl	8001a30 <send_data_to_gcs>

    // Print pressure and temperature data
    send_data_to_gcs(10, pressure_temp_data.pressure_hpa);
 8001b32:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b36:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3a:	200a      	movs	r0, #10
 8001b3c:	f7ff ff78 	bl	8001a30 <send_data_to_gcs>
    send_data_to_gcs(11, pressure_temp_data.temperature_celsius);
 8001b40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b44:	eeb0 0a67 	vmov.f32	s0, s15
 8001b48:	200b      	movs	r0, #11
 8001b4a:	f7ff ff71 	bl	8001a30 <send_data_to_gcs>

    // Print compass data
    send_data_to_gcs(12, compass_data.heading);
 8001b4e:	edd7 7a00 	vldr	s15, [r7]
 8001b52:	eeb0 0a67 	vmov.f32	s0, s15
 8001b56:	200c      	movs	r0, #12
 8001b58:	f7ff ff6a 	bl	8001a30 <send_data_to_gcs>
}
 8001b5c:	bf00      	nop
 8001b5e:	3760      	adds	r7, #96	; 0x60
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	42c80000 	.word	0x42c80000

08001b68 <menu>:




void menu(char command)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
	int transmission_delay = 50; // In Milliseconds
 8001b72:	2332      	movs	r3, #50	; 0x32
 8001b74:	613b      	str	r3, [r7, #16]

	uint32_t numIterations = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
    switch (command)
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	3b30      	subs	r3, #48	; 0x30
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d87a      	bhi.n	8001c78 <menu+0x110>
 8001b82:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <menu+0x20>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001ba1 	.word	0x08001ba1
 8001b8c:	08001bc5 	.word	0x08001bc5
 8001b90:	08001c81 	.word	0x08001c81
 8001b94:	08001bf3 	.word	0x08001bf3
 8001b98:	08001c2f 	.word	0x08001c2f
 8001b9c:	08001c6b 	.word	0x08001c6b
    {
    case '0':
    	  uint32_t initialization_state = initialization_procedure();
 8001ba0:	f7ff fdf8 	bl	8001794 <initialization_procedure>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60bb      	str	r3, [r7, #8]
    	  if(initialization_state != 0){
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <menu+0x4e>
    		  UART_Transmit_String("Error initializing the Flight Controller.");
 8001bae:	4838      	ldr	r0, [pc, #224]	; (8001c90 <menu+0x128>)
 8001bb0:	f7ff fd88 	bl	80016c4 <UART_Transmit_String>
 8001bb4:	e002      	b.n	8001bbc <menu+0x54>
    	  } else{
    		  UART_Transmit_String("Flight Controller Initialized successfully!\r\n");
 8001bb6:	4837      	ldr	r0, [pc, #220]	; (8001c94 <menu+0x12c>)
 8001bb8:	f7ff fd84 	bl	80016c4 <UART_Transmit_String>

    	  }
    	  UART_Transmit_String("\r\n");
 8001bbc:	4836      	ldr	r0, [pc, #216]	; (8001c98 <menu+0x130>)
 8001bbe:	f7ff fd81 	bl	80016c4 <UART_Transmit_String>
        break;
 8001bc2:	e05e      	b.n	8001c82 <menu+0x11a>
    case '1':
    	UART_Transmit_String("\r\n");
 8001bc4:	4834      	ldr	r0, [pc, #208]	; (8001c98 <menu+0x130>)
 8001bc6:	f7ff fd7d 	bl	80016c4 <UART_Transmit_String>
    	    	numIterations = getNumberOfIterations();
 8001bca:	f000 f873 	bl	8001cb4 <getNumberOfIterations>
 8001bce:	60f8      	str	r0, [r7, #12]
    			for (uint32_t i = 0; i < numIterations; i++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	e008      	b.n	8001be8 <menu+0x80>
    			        {
    				sensors_readings();
 8001bd6:	f7ff fe3f 	bl	8001858 <sensors_readings>
    				HAL_Delay(transmission_delay);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 f9f9 	bl	8004fd4 <HAL_Delay>
    			for (uint32_t i = 0; i < numIterations; i++)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d3f2      	bcc.n	8001bd6 <menu+0x6e>
    			        }
        break;
 8001bf0:	e047      	b.n	8001c82 <menu+0x11a>
    case '2':
    	//TODO : IMPLEMENTATION OF LORA TEST
    	break;
    case '3':
    	UART_Transmit_String("\r\n");
 8001bf2:	4829      	ldr	r0, [pc, #164]	; (8001c98 <menu+0x130>)
 8001bf4:	f7ff fd66 	bl	80016c4 <UART_Transmit_String>
    	UART_Transmit_String("Starting Firing test (Ignition)\r\n");
 8001bf8:	4828      	ldr	r0, [pc, #160]	; (8001c9c <menu+0x134>)
 8001bfa:	f7ff fd63 	bl	80016c4 <UART_Transmit_String>
    	UART_Transmit_String("Arming the igniter..");
 8001bfe:	4828      	ldr	r0, [pc, #160]	; (8001ca0 <menu+0x138>)
 8001c00:	f7ff fd60 	bl	80016c4 <UART_Transmit_String>
    	pyro_arm(1);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f000 ff5d 	bl	8002ac4 <pyro_arm>
    	UART_Transmit_String("Armed\r\n");
 8001c0a:	4826      	ldr	r0, [pc, #152]	; (8001ca4 <menu+0x13c>)
 8001c0c:	f7ff fd5a 	bl	80016c4 <UART_Transmit_String>
    	count_down_sequence_fire_test(5000);
 8001c10:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c14:	f000 f8e4 	bl	8001de0 <count_down_sequence_fire_test>
    	pyro_fire(1);
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f000 ff71 	bl	8002b00 <pyro_fire>
    	UART_Transmit_String("Test Completed Successfully!\r\n");
 8001c1e:	4822      	ldr	r0, [pc, #136]	; (8001ca8 <menu+0x140>)
 8001c20:	f7ff fd50 	bl	80016c4 <UART_Transmit_String>
    	HAL_Delay(1000);
 8001c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c28:	f003 f9d4 	bl	8004fd4 <HAL_Delay>
        break;
 8001c2c:	e029      	b.n	8001c82 <menu+0x11a>
    case '4':
    	UART_Transmit_String("\r\n");
 8001c2e:	481a      	ldr	r0, [pc, #104]	; (8001c98 <menu+0x130>)
 8001c30:	f7ff fd48 	bl	80016c4 <UART_Transmit_String>
    	UART_Transmit_String("Starting Firing test (Parachute)\r\n");
 8001c34:	481d      	ldr	r0, [pc, #116]	; (8001cac <menu+0x144>)
 8001c36:	f7ff fd45 	bl	80016c4 <UART_Transmit_String>
    	UART_Transmit_String("Arming the igniter..");
 8001c3a:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <menu+0x138>)
 8001c3c:	f7ff fd42 	bl	80016c4 <UART_Transmit_String>
    	pyro_arm(2);
 8001c40:	2002      	movs	r0, #2
 8001c42:	f000 ff3f 	bl	8002ac4 <pyro_arm>
    	UART_Transmit_String("Armed\r\n");
 8001c46:	4817      	ldr	r0, [pc, #92]	; (8001ca4 <menu+0x13c>)
 8001c48:	f7ff fd3c 	bl	80016c4 <UART_Transmit_String>
    	count_down_sequence_fire_test(5000);
 8001c4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c50:	f000 f8c6 	bl	8001de0 <count_down_sequence_fire_test>
    	pyro_fire(2);
 8001c54:	2002      	movs	r0, #2
 8001c56:	f000 ff53 	bl	8002b00 <pyro_fire>
    	UART_Transmit_String("Test Completed Successfully!\r\n");
 8001c5a:	4813      	ldr	r0, [pc, #76]	; (8001ca8 <menu+0x140>)
 8001c5c:	f7ff fd32 	bl	80016c4 <UART_Transmit_String>
    	HAL_Delay(1000);
 8001c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c64:	f003 f9b6 	bl	8004fd4 <HAL_Delay>
        break;
 8001c68:	e00b      	b.n	8001c82 <menu+0x11a>
    case '5':
    	launch_procedure(10000);
 8001c6a:	f242 7010 	movw	r0, #10000	; 0x2710
 8001c6e:	f000 f84f 	bl	8001d10 <launch_procedure>
    	while(1){
    		sensors_readings_graphs();
 8001c72:	f7ff feff 	bl	8001a74 <sensors_readings_graphs>
 8001c76:	e7fc      	b.n	8001c72 <menu+0x10a>
    	}
        break;
    default:
        UART_Transmit_String("Invalid command! Try again.\r\n");
 8001c78:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <menu+0x148>)
 8001c7a:	f7ff fd23 	bl	80016c4 <UART_Transmit_String>
        break;
 8001c7e:	e000      	b.n	8001c82 <menu+0x11a>
    	break;
 8001c80:	bf00      	nop
    }

    printOptions();
 8001c82:	f7ff fd5f 	bl	8001744 <printOptions>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	0801a408 	.word	0x0801a408
 8001c94:	0801a434 	.word	0x0801a434
 8001c98:	0801a07c 	.word	0x0801a07c
 8001c9c:	0801a464 	.word	0x0801a464
 8001ca0:	0801a488 	.word	0x0801a488
 8001ca4:	0801a4a0 	.word	0x0801a4a0
 8001ca8:	0801a4a8 	.word	0x0801a4a8
 8001cac:	0801a4c8 	.word	0x0801a4c8
 8001cb0:	0801a4ec 	.word	0x0801a4ec

08001cb4 <getNumberOfIterations>:



// Function to get the number of iterations from the user
uint32_t getNumberOfIterations()
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
    char inputBuffer[10];
    char inputChar;
    int bufferIndex = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]

    // Ask for the number of iterations
    UART_Transmit_String("\r\nEnter the number of iterations[Finish the integer with '$']: ");
 8001cbe:	4812      	ldr	r0, [pc, #72]	; (8001d08 <getNumberOfIterations+0x54>)
 8001cc0:	f7ff fd00 	bl	80016c4 <UART_Transmit_String>

    // Read user input character by character until we encounter '\n'
    do
    {
        HAL_UART_Receive(&huart1, (uint8_t *)&inputChar, sizeof(inputChar), HAL_MAX_DELAY);
 8001cc4:	1cf9      	adds	r1, r7, #3
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cca:	2201      	movs	r2, #1
 8001ccc:	480f      	ldr	r0, [pc, #60]	; (8001d0c <getNumberOfIterations+0x58>)
 8001cce:	f007 fc20 	bl	8009512 <HAL_UART_Receive>
        inputBuffer[bufferIndex++] = inputChar;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	617a      	str	r2, [r7, #20]
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	3318      	adds	r3, #24
 8001cdc:	443b      	add	r3, r7
 8001cde:	f803 2c14 	strb.w	r2, [r3, #-20]
    } while (inputChar != '$');
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	2b24      	cmp	r3, #36	; 0x24
 8001ce6:	d1ed      	bne.n	8001cc4 <getNumberOfIterations+0x10>

    // Null-terminate the input buffer
    inputBuffer[bufferIndex] = '\0';
 8001ce8:	1d3a      	adds	r2, r7, #4
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	4413      	add	r3, r2
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]

    // Convert the input string to an integer using atoi
    int userInput = atoi(inputBuffer);
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f011 ff53 	bl	8013ba0 <atoi>
 8001cfa:	6138      	str	r0, [r7, #16]

    return userInput;
 8001cfc:	693b      	ldr	r3, [r7, #16]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	0801a50c 	.word	0x0801a50c
 8001d0c:	20003bd0 	.word	0x20003bd0

08001d10 <launch_procedure>:


void launch_procedure(int countdown_duration_ms) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

	UART_Transmit_String("Launch procedure starting.... \r\n");
 8001d18:	482d      	ldr	r0, [pc, #180]	; (8001dd0 <launch_procedure+0xc0>)
 8001d1a:	f7ff fcd3 	bl	80016c4 <UART_Transmit_String>

    int count_down_print = countdown_duration_ms / 1000;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a2c      	ldr	r2, [pc, #176]	; (8001dd4 <launch_procedure+0xc4>)
 8001d22:	fb82 1203 	smull	r1, r2, r2, r3
 8001d26:	1192      	asrs	r2, r2, #6
 8001d28:	17db      	asrs	r3, r3, #31
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	61fb      	str	r3, [r7, #28]

    // Calculate the number of SysTick ticks required for the countdown
    uint32_t ticks_start = HAL_GetTick();
 8001d2e:	f003 f945 	bl	8004fbc <HAL_GetTick>
 8001d32:	61b8      	str	r0, [r7, #24]
    uint32_t ticks_end = ticks_start + countdown_duration_ms;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4413      	add	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

    char count_down_str[5]; // Buffer to store the countdown value as a string

    // Loop until the countdown duration is over
    while (HAL_GetTick() < ticks_end) {
 8001d3c:	e029      	b.n	8001d92 <launch_procedure+0x82>
    	if(count_down_print <= (countdown_duration_ms / 1000)) {
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a24      	ldr	r2, [pc, #144]	; (8001dd4 <launch_procedure+0xc4>)
 8001d42:	fb82 1203 	smull	r1, r2, r2, r3
 8001d46:	1192      	asrs	r2, r2, #6
 8001d48:	17db      	asrs	r3, r3, #31
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dc1c      	bgt.n	8001d8c <launch_procedure+0x7c>
        // Toggle the buzzer (set the GPIO pin high and then low with a delay to produce sound)
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	2120      	movs	r1, #32
 8001d56:	4820      	ldr	r0, [pc, #128]	; (8001dd8 <launch_procedure+0xc8>)
 8001d58:	f003 fe8c 	bl	8005a74 <HAL_GPIO_WritePin>

        // Convert the countdown value to a string
        sprintf(count_down_str, "%d...", count_down_print);
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	491e      	ldr	r1, [pc, #120]	; (8001ddc <launch_procedure+0xcc>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f012 fd95 	bl	8014894 <siprintf>

        // Transmit the countdown value via UART
        UART_Transmit_String(count_down_str);
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fca8 	bl	80016c4 <UART_Transmit_String>

        HAL_Delay(200); // Delay for 200 milliseconds (adjust the value as needed)
 8001d74:	20c8      	movs	r0, #200	; 0xc8
 8001d76:	f003 f92d 	bl	8004fd4 <HAL_Delay>

        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	4816      	ldr	r0, [pc, #88]	; (8001dd8 <launch_procedure+0xc8>)
 8001d80:	f003 fe78 	bl	8005a74 <HAL_GPIO_WritePin>
        HAL_Delay(800); // Delay for 800 milliseconds (adjust the value as needed)
 8001d84:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001d88:	f003 f924 	bl	8004fd4 <HAL_Delay>
    	}
        count_down_print--;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
    while (HAL_GetTick() < ticks_end) {
 8001d92:	f003 f913 	bl	8004fbc <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d8cf      	bhi.n	8001d3e <launch_procedure+0x2e>
    }

    pyro_arm(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f000 fe90 	bl	8002ac4 <pyro_arm>
    // Enable the buzzer at the end of the countdown (Launching the test!!!)
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001da4:	2201      	movs	r2, #1
 8001da6:	2120      	movs	r1, #32
 8001da8:	480b      	ldr	r0, [pc, #44]	; (8001dd8 <launch_procedure+0xc8>)
 8001daa:	f003 fe63 	bl	8005a74 <HAL_GPIO_WritePin>
    pyro_fire(1);
 8001dae:	2001      	movs	r0, #1
 8001db0:	f000 fea6 	bl	8002b00 <pyro_fire>
    HAL_Delay(800);
 8001db4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001db8:	f003 f90c 	bl	8004fd4 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2120      	movs	r1, #32
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <launch_procedure+0xc8>)
 8001dc2:	f003 fe57 	bl	8005a74 <HAL_GPIO_WritePin>

}
 8001dc6:	bf00      	nop
 8001dc8:	3720      	adds	r7, #32
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	0801a54c 	.word	0x0801a54c
 8001dd4:	10624dd3 	.word	0x10624dd3
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	0801a570 	.word	0x0801a570

08001de0 <count_down_sequence_fire_test>:


void count_down_sequence_fire_test(int countdown_duration_ms) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

    int count_down_print = countdown_duration_ms / 1000;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <count_down_sequence_fire_test+0x98>)
 8001dec:	fb82 1203 	smull	r1, r2, r2, r3
 8001df0:	1192      	asrs	r2, r2, #6
 8001df2:	17db      	asrs	r3, r3, #31
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	61fb      	str	r3, [r7, #28]

    // Calculate the number of SysTick ticks required for the countdown
    uint32_t ticks_start = HAL_GetTick();
 8001df8:	f003 f8e0 	bl	8004fbc <HAL_GetTick>
 8001dfc:	61b8      	str	r0, [r7, #24]
    uint32_t ticks_end = ticks_start + countdown_duration_ms;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4413      	add	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]

    char count_down_str[5]; // Buffer to store the countdown value as a string

    // Loop until the countdown duration is over
    while (HAL_GetTick() < ticks_end) {
 8001e06:	e01f      	b.n	8001e48 <count_down_sequence_fire_test+0x68>
        // Toggle the buzzer (set the GPIO pin high and then low with a delay to produce sound)
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2120      	movs	r1, #32
 8001e0c:	481b      	ldr	r0, [pc, #108]	; (8001e7c <count_down_sequence_fire_test+0x9c>)
 8001e0e:	f003 fe31 	bl	8005a74 <HAL_GPIO_WritePin>

        // Convert the countdown value to a string
        sprintf(count_down_str, "%d...", count_down_print);
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	4919      	ldr	r1, [pc, #100]	; (8001e80 <count_down_sequence_fire_test+0xa0>)
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f012 fd3a 	bl	8014894 <siprintf>

        // Transmit the countdown value via UART
        UART_Transmit_String(count_down_str);
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fc4d 	bl	80016c4 <UART_Transmit_String>

        HAL_Delay(200); // Delay for 200 milliseconds (adjust the value as needed)
 8001e2a:	20c8      	movs	r0, #200	; 0xc8
 8001e2c:	f003 f8d2 	bl	8004fd4 <HAL_Delay>

        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2120      	movs	r1, #32
 8001e34:	4811      	ldr	r0, [pc, #68]	; (8001e7c <count_down_sequence_fire_test+0x9c>)
 8001e36:	f003 fe1d 	bl	8005a74 <HAL_GPIO_WritePin>
        HAL_Delay(800); // Delay for 800 milliseconds (adjust the value as needed)
 8001e3a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e3e:	f003 f8c9 	bl	8004fd4 <HAL_Delay>
        count_down_print--;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
    while (HAL_GetTick() < ticks_end) {
 8001e48:	f003 f8b8 	bl	8004fbc <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d8d9      	bhi.n	8001e08 <count_down_sequence_fire_test+0x28>
    }

    // Enable the buzzer at the end of the countdown (Launching the test!!!)
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001e54:	2201      	movs	r2, #1
 8001e56:	2120      	movs	r1, #32
 8001e58:	4808      	ldr	r0, [pc, #32]	; (8001e7c <count_down_sequence_fire_test+0x9c>)
 8001e5a:	f003 fe0b 	bl	8005a74 <HAL_GPIO_WritePin>
    HAL_Delay(800);
 8001e5e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e62:	f003 f8b7 	bl	8004fd4 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2120      	movs	r1, #32
 8001e6a:	4804      	ldr	r0, [pc, #16]	; (8001e7c <count_down_sequence_fire_test+0x9c>)
 8001e6c:	f003 fe02 	bl	8005a74 <HAL_GPIO_WritePin>

}
 8001e70:	bf00      	nop
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	10624dd3 	.word	0x10624dd3
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	0801a570 	.word	0x0801a570

08001e84 <platform_read>:
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}

// SENSOR READING FUNCTION DEFINITION
int32_t platform_read(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af04      	add	r7, sp, #16
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	460b      	mov	r3, r1
 8001e92:	72fb      	strb	r3, [r7, #11]
 8001e94:	4613      	mov	r3, r2
 8001e96:	813b      	strh	r3, [r7, #8]
  // Perform the I2C read operation using HAL_I2C_Mem_Read
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8001e98:	7afb      	ldrb	r3, [r7, #11]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	2364      	movs	r3, #100	; 0x64
 8001e9e:	9302      	str	r3, [sp, #8]
 8001ea0:	893b      	ldrh	r3, [r7, #8]
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	21d6      	movs	r1, #214	; 0xd6
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f004 fb81 	bl	80065b4 <HAL_I2C_Mem_Read>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <platform_read+0x3c>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e001      	b.n	8001ec4 <platform_read+0x40>
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <platform_write>:

// SENSOR WRITING FUNCTION DEFINITION
int32_t platform_write(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af04      	add	r7, sp, #16
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	460b      	mov	r3, r1
 8001eda:	72fb      	strb	r3, [r7, #11]
 8001edc:	4613      	mov	r3, r2
 8001ede:	813b      	strh	r3, [r7, #8]
  // Perform the I2C write operation using HAL_I2C_Mem_Write
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8001ee0:	7afb      	ldrb	r3, [r7, #11]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	2364      	movs	r3, #100	; 0x64
 8001ee6:	9302      	str	r3, [sp, #8]
 8001ee8:	893b      	ldrh	r3, [r7, #8]
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	21d6      	movs	r1, #214	; 0xd6
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f004 fa63 	bl	80063c0 <HAL_I2C_Mem_Write>
 8001efa:	4603      	mov	r3, r0
 8001efc:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <platform_write+0x3c>
 8001f04:	2300      	movs	r3, #0
 8001f06:	e001      	b.n	8001f0c <platform_write+0x40>
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <IMU_Initialization>:


// IMU INITIALIZATION FUNCTION
int32_t IMU_Initialization(){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0


	/* Initialize MEMS driver interface */
	device.write_reg = platform_write;
 8001f1a:	4b57      	ldr	r3, [pc, #348]	; (8002078 <IMU_Initialization+0x164>)
 8001f1c:	4a57      	ldr	r2, [pc, #348]	; (800207c <IMU_Initialization+0x168>)
 8001f1e:	601a      	str	r2, [r3, #0]
	device.read_reg = platform_read;
 8001f20:	4b55      	ldr	r3, [pc, #340]	; (8002078 <IMU_Initialization+0x164>)
 8001f22:	4a57      	ldr	r2, [pc, #348]	; (8002080 <IMU_Initialization+0x16c>)
 8001f24:	605a      	str	r2, [r3, #4]
	device.handle = &hi2c1;
 8001f26:	4b54      	ldr	r3, [pc, #336]	; (8002078 <IMU_Initialization+0x164>)
 8001f28:	4a56      	ldr	r2, [pc, #344]	; (8002084 <IMU_Initialization+0x170>)
 8001f2a:	60da      	str	r2, [r3, #12]

	/* Check device ID */
	whoamI = 0;
 8001f2c:	4b56      	ldr	r3, [pc, #344]	; (8002088 <IMU_Initialization+0x174>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
	lsm6ds3tr_c_device_id_get(&device, &whoamI);
 8001f32:	4955      	ldr	r1, [pc, #340]	; (8002088 <IMU_Initialization+0x174>)
 8001f34:	4850      	ldr	r0, [pc, #320]	; (8002078 <IMU_Initialization+0x164>)
 8001f36:	f001 fd3d 	bl	80039b4 <lsm6ds3tr_c_device_id_get>

	if ( whoamI != LSM6DS3TR_C_ID ) {
 8001f3a:	4b53      	ldr	r3, [pc, #332]	; (8002088 <IMU_Initialization+0x174>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b6a      	cmp	r3, #106	; 0x6a
 8001f40:	d002      	beq.n	8001f48 <IMU_Initialization+0x34>
		return -1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f46:	e092      	b.n	800206e <IMU_Initialization+0x15a>
	}



	/* Restore default configuration */
	lsm6ds3tr_c_reset_set(&device, PROPERTY_ENABLE);
 8001f48:	2101      	movs	r1, #1
 8001f4a:	484b      	ldr	r0, [pc, #300]	; (8002078 <IMU_Initialization+0x164>)
 8001f4c:	f001 fd43 	bl	80039d6 <lsm6ds3tr_c_reset_set>

	do {
    lsm6ds3tr_c_reset_get(&device, &rst);
 8001f50:	494e      	ldr	r1, [pc, #312]	; (800208c <IMU_Initialization+0x178>)
 8001f52:	4849      	ldr	r0, [pc, #292]	; (8002078 <IMU_Initialization+0x164>)
 8001f54:	f001 fd65 	bl	8003a22 <lsm6ds3tr_c_reset_get>
	} while (rst);
 8001f58:	4b4c      	ldr	r3, [pc, #304]	; (800208c <IMU_Initialization+0x178>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f7      	bne.n	8001f50 <IMU_Initialization+0x3c>

	int32_t int_set,xl_fs,xl_dr,gy_fs,gy_dr,bdu,xl_fas,xl_lp,gy_bps,state;
	//int32_t dev_round_status,dev_round_mode;

	//Enabling I2C Communication
	int_set = lsm6ds3tr_c_i2c_interface_set(&device,LSM6DS3TR_C_I2C_ENABLE);
 8001f60:	2100      	movs	r1, #0
 8001f62:	4845      	ldr	r0, [pc, #276]	; (8002078 <IMU_Initialization+0x164>)
 8001f64:	f001 fe41 	bl	8003bea <lsm6ds3tr_c_i2c_interface_set>
 8001f68:	6278      	str	r0, [r7, #36]	; 0x24

	  /* Enable Block Data Update */
	  bdu = lsm6ds3tr_c_block_data_update_set(&device, PROPERTY_ENABLE);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4842      	ldr	r0, [pc, #264]	; (8002078 <IMU_Initialization+0x164>)
 8001f6e:	f001 fc65 	bl	800383c <lsm6ds3tr_c_block_data_update_set>
 8001f72:	6238      	str	r0, [r7, #32]
	  /* Set Output Data Rate */
	  xl_dr= lsm6ds3tr_c_xl_data_rate_set(&device, LSM6DS3TR_C_XL_ODR_104Hz);
 8001f74:	2104      	movs	r1, #4
 8001f76:	4840      	ldr	r0, [pc, #256]	; (8002078 <IMU_Initialization+0x164>)
 8001f78:	f001 fbee 	bl	8003758 <lsm6ds3tr_c_xl_data_rate_set>
 8001f7c:	61f8      	str	r0, [r7, #28]
	  gy_dr= lsm6ds3tr_c_gy_data_rate_set(&device, LSM6DS3TR_C_XL_ODR_104Hz);
 8001f7e:	2104      	movs	r1, #4
 8001f80:	483d      	ldr	r0, [pc, #244]	; (8002078 <IMU_Initialization+0x164>)
 8001f82:	f001 fc35 	bl	80037f0 <lsm6ds3tr_c_gy_data_rate_set>
 8001f86:	61b8      	str	r0, [r7, #24]
	  /* Set full scale */
	  xl_fs= lsm6ds3tr_c_xl_full_scale_set(&device, LSM6DS3TR_C_2g);
 8001f88:	2100      	movs	r1, #0
 8001f8a:	483b      	ldr	r0, [pc, #236]	; (8002078 <IMU_Initialization+0x164>)
 8001f8c:	f001 fbbe 	bl	800370c <lsm6ds3tr_c_xl_full_scale_set>
 8001f90:	6178      	str	r0, [r7, #20]
	  gy_fs= lsm6ds3tr_c_gy_full_scale_set(&device, LSM6DS3TR_C_500dps);
 8001f92:	2102      	movs	r1, #2
 8001f94:	4838      	ldr	r0, [pc, #224]	; (8002078 <IMU_Initialization+0x164>)
 8001f96:	f001 fc05 	bl	80037a4 <lsm6ds3tr_c_gy_full_scale_set>
 8001f9a:	6138      	str	r0, [r7, #16]


	  /* Configure filtering chain(No aux interface) */
	  /* Accelerometer - analog filter */
	  xl_fas= lsm6ds3tr_c_xl_filter_analog_set(&device,
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4836      	ldr	r0, [pc, #216]	; (8002078 <IMU_Initialization+0x164>)
 8001fa0:	f001 fd58 	bl	8003a54 <lsm6ds3tr_c_xl_filter_analog_set>
 8001fa4:	60f8      	str	r0, [r7, #12]
	                                   LSM6DS3TR_C_XL_ANA_BW_400Hz);
	  /* Accelerometer - LPF1 path ( LPF2 not used )*/
	  //xl_lp = lsm6ds3tr_c_xl_lp1_bandwidth_set(&device, LSM6DS3TR_C_XL_LP1_ODR_DIV_4);
	  /* Accelerometer - LPF1 + LPF2 path */
	  xl_lp= lsm6ds3tr_c_xl_lp2_bandwidth_set(&device,LSM6DS3TR_C_XL_LOW_NOISE_LP_ODR_DIV_100);
 8001fa6:	2111      	movs	r1, #17
 8001fa8:	4833      	ldr	r0, [pc, #204]	; (8002078 <IMU_Initialization+0x164>)
 8001faa:	f001 fd79 	bl	8003aa0 <lsm6ds3tr_c_xl_lp2_bandwidth_set>
 8001fae:	60b8      	str	r0, [r7, #8]
	  /* Accelerometer - High Pass / Slope path */
	  //lsm6ds3tr_c_xl_reference_mode_set(&device, PROPERTY_DISABLE);
	  //lsm6ds3tr_c_xl_hp_bandwidth_set(&device, LSM6DS3TR_C_XL_HP_ODR_DIV_100);
	  /* Gyroscope - filtering chain */
	  gy_bps= lsm6ds3tr_c_gy_band_pass_set(&device,
 8001fb0:	21a8      	movs	r1, #168	; 0xa8
 8001fb2:	4831      	ldr	r0, [pc, #196]	; (8002078 <IMU_Initialization+0x164>)
 8001fb4:	f001 fdab 	bl	8003b0e <lsm6ds3tr_c_gy_band_pass_set>
 8001fb8:	6078      	str	r0, [r7, #4]

	  //dev_round_status = lsm6ds3tr_c_rounding_on_status_set(&device,PROPERTY_ENABLE);
	  //dev_round_mode= lsm6ds3tr_c_rounding_mode_set(&device,LSM6DS3TR_C_ROUND_GY_XL);


		state = int_set + xl_fs + xl_dr + gy_fs + gy_dr + bdu + xl_fas + xl_lp + gy_bps;
 8001fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	441a      	add	r2, r3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	441a      	add	r2, r3
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	441a      	add	r2, r3
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	441a      	add	r2, r3
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	441a      	add	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	441a      	add	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	603b      	str	r3, [r7, #0]

		//UART_Transmit_Messages_IMU("Configuration successful. \r\n");


		  MotionFX_initialize((MFXState_t *)mfxstate);
 8001fde:	482c      	ldr	r0, [pc, #176]	; (8002090 <IMU_Initialization+0x17c>)
 8001fe0:	f011 fafa 	bl	80135d8 <MotionFX_initialize>

		  MotionFX_getKnobs(mfxstate, ipKnobs);
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <IMU_Initialization+0x180>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4829      	ldr	r0, [pc, #164]	; (8002090 <IMU_Initialization+0x17c>)
 8001fec:	f011 fbfa 	bl	80137e4 <MotionFX_getKnobs>

		  ipKnobs->acc_orientation[0] = 'n';
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <IMU_Initialization+0x180>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	226e      	movs	r2, #110	; 0x6e
 8001ff6:	775a      	strb	r2, [r3, #29]
		  ipKnobs->acc_orientation[1] = 'w';
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <IMU_Initialization+0x180>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2277      	movs	r2, #119	; 0x77
 8001ffe:	779a      	strb	r2, [r3, #30]
		  ipKnobs->acc_orientation[2] = 'u';
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <IMU_Initialization+0x180>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2275      	movs	r2, #117	; 0x75
 8002006:	77da      	strb	r2, [r3, #31]
		  ipKnobs->gyro_orientation[0] = 'n';
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <IMU_Initialization+0x180>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	226e      	movs	r2, #110	; 0x6e
 800200e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		  ipKnobs->gyro_orientation[1] = 'w';
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <IMU_Initialization+0x180>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2277      	movs	r2, #119	; 0x77
 8002018:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		  ipKnobs->gyro_orientation[2] = 'u';
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <IMU_Initialization+0x180>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2275      	movs	r2, #117	; 0x75
 8002022:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <IMU_Initialization+0x180>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <IMU_Initialization+0x184>)
 800202c:	615a      	str	r2, [r3, #20]
		  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <IMU_Initialization+0x180>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1a      	ldr	r2, [pc, #104]	; (800209c <IMU_Initialization+0x188>)
 8002034:	619a      	str	r2, [r3, #24]

		  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <IMU_Initialization+0x180>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		  ipKnobs->LMode = 1;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <IMU_Initialization+0x180>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2201      	movs	r2, #1
 8002046:	731a      	strb	r2, [r3, #12]
		  ipKnobs->modx = DECIMATION;
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <IMU_Initialization+0x180>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2201      	movs	r2, #1
 800204e:	771a      	strb	r2, [r3, #28]

		  MotionFX_setKnobs(mfxstate, ipKnobs);
 8002050:	4b10      	ldr	r3, [pc, #64]	; (8002094 <IMU_Initialization+0x180>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	480e      	ldr	r0, [pc, #56]	; (8002090 <IMU_Initialization+0x17c>)
 8002058:	f011 fb78 	bl	801374c <MotionFX_setKnobs>
		  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 800205c:	2101      	movs	r1, #1
 800205e:	480c      	ldr	r0, [pc, #48]	; (8002090 <IMU_Initialization+0x17c>)
 8002060:	f011 fbfe 	bl	8013860 <MotionFX_enable_6X>
		  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002064:	2100      	movs	r1, #0
 8002066:	480a      	ldr	r0, [pc, #40]	; (8002090 <IMU_Initialization+0x17c>)
 8002068:	f011 fc1a 	bl	80138a0 <MotionFX_enable_9X>


		return state;
 800206c:	683b      	ldr	r3, [r7, #0]


}
 800206e:	4618      	mov	r0, r3
 8002070:	3728      	adds	r7, #40	; 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20002f50 	.word	0x20002f50
 800207c:	08001ecd 	.word	0x08001ecd
 8002080:	08001e85 	.word	0x08001e85
 8002084:	200039d8 	.word	0x200039d8
 8002088:	20002f4e 	.word	0x20002f4e
 800208c:	20002f4f 	.word	0x20002f4f
 8002090:	20002fb0 	.word	0x20002fb0
 8002094:	20000000 	.word	0x20000000
 8002098:	3ac88a48 	.word	0x3ac88a48
 800209c:	3b83126f 	.word	0x3b83126f

080020a0 <IMU_Data_Read>:


//IMU DATA READING FUNCTION
IMUData IMU_Data_Read(){
 80020a0:	b5b0      	push	{r4, r5, r7, lr}
 80020a2:	b0a0      	sub	sp, #128	; 0x80
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	6078      	str	r0, [r7, #4]

	int32_t reading_state, gyro_reading, acc_reading;
    MFX_input_t data_in;
    MFX_output_t data_out;
    float delta_time = TIME_ODR_104Hz;
 80020a8:	4b6a      	ldr	r3, [pc, #424]	; (8002254 <IMU_Data_Read+0x1b4>)
 80020aa:	60bb      	str	r3, [r7, #8]
	//char test[100];


	//ACCELEROMETER RAW DATA READING
	acc_reading = lsm6ds3tr_c_acceleration_raw_get(&device,data_raw_acceleration);
 80020ac:	496a      	ldr	r1, [pc, #424]	; (8002258 <IMU_Data_Read+0x1b8>)
 80020ae:	486b      	ldr	r0, [pc, #428]	; (800225c <IMU_Data_Read+0x1bc>)
 80020b0:	f001 fc35 	bl	800391e <lsm6ds3tr_c_acceleration_raw_get>
 80020b4:	6778      	str	r0, [r7, #116]	; 0x74
	//GYROSCOPE
	gyro_reading = lsm6ds3tr_c_angular_rate_raw_get(&device,data_raw_angular_rate);
 80020b6:	496a      	ldr	r1, [pc, #424]	; (8002260 <IMU_Data_Read+0x1c0>)
 80020b8:	4868      	ldr	r0, [pc, #416]	; (800225c <IMU_Data_Read+0x1bc>)
 80020ba:	f001 fbe5 	bl	8003888 <lsm6ds3tr_c_angular_rate_raw_get>
 80020be:	6738      	str	r0, [r7, #112]	; 0x70


	reading_state = gyro_reading + acc_reading; // If 0 -> Success | Otherwise error code
 80020c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80020c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c4:	4413      	add	r3, r2
 80020c6:	66fb      	str	r3, [r7, #108]	; 0x6c



	  if (reading_state == 0){
 80020c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f040 8094 	bne.w	80021f8 <IMU_Data_Read+0x158>

			data_in.acc[0] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[0]) * FROM_MG_TO_G);
 80020d0:	4b61      	ldr	r3, [pc, #388]	; (8002258 <IMU_Data_Read+0x1b8>)
 80020d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 fae8 	bl	80036ac <lsm6ds3tr_c_from_fs2g_to_mg>
 80020dc:	eef0 7a40 	vmov.f32	s15, s0
 80020e0:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002264 <IMU_Data_Read+0x1c4>
 80020e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			data_in.acc[1] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[1]) * FROM_MG_TO_G);
 80020ec:	4b5a      	ldr	r3, [pc, #360]	; (8002258 <IMU_Data_Read+0x1b8>)
 80020ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 fada 	bl	80036ac <lsm6ds3tr_c_from_fs2g_to_mg>
 80020f8:	eef0 7a40 	vmov.f32	s15, s0
 80020fc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002264 <IMU_Data_Read+0x1c4>
 8002100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002104:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			data_in.acc[2] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[2]) * FROM_MG_TO_G);
 8002108:	4b53      	ldr	r3, [pc, #332]	; (8002258 <IMU_Data_Read+0x1b8>)
 800210a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800210e:	4618      	mov	r0, r3
 8002110:	f001 facc 	bl	80036ac <lsm6ds3tr_c_from_fs2g_to_mg>
 8002114:	eef0 7a40 	vmov.f32	s15, s0
 8002118:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8002264 <IMU_Data_Read+0x1c4>
 800211c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002120:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c


			data_in.gyro[0] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[0]) * FROM_MDPS_TO_DPS) ;
 8002124:	4b4e      	ldr	r3, [pc, #312]	; (8002260 <IMU_Data_Read+0x1c0>)
 8002126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212a:	4618      	mov	r0, r3
 800212c:	f001 fad6 	bl	80036dc <lsm6ds3tr_c_from_fs500dps_to_mdps>
 8002130:	eef0 7a40 	vmov.f32	s15, s0
 8002134:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002264 <IMU_Data_Read+0x1c4>
 8002138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			data_in.gyro[1] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[1]) * FROM_MDPS_TO_DPS) ;
 8002140:	4b47      	ldr	r3, [pc, #284]	; (8002260 <IMU_Data_Read+0x1c0>)
 8002142:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002146:	4618      	mov	r0, r3
 8002148:	f001 fac8 	bl	80036dc <lsm6ds3tr_c_from_fs500dps_to_mdps>
 800214c:	eef0 7a40 	vmov.f32	s15, s0
 8002150:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002264 <IMU_Data_Read+0x1c4>
 8002154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002158:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			data_in.gyro[2] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[2]) * FROM_MDPS_TO_DPS) ;
 800215c:	4b40      	ldr	r3, [pc, #256]	; (8002260 <IMU_Data_Read+0x1c0>)
 800215e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002162:	4618      	mov	r0, r3
 8002164:	f001 faba 	bl	80036dc <lsm6ds3tr_c_from_fs500dps_to_mdps>
 8002168:	eef0 7a40 	vmov.f32	s15, s0
 800216c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002264 <IMU_Data_Read+0x1c4>
 8002170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002174:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


		    /* Don't set mag values because we use only acc and gyro */
		    data_in.mag[0] = 0.0f;
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	64bb      	str	r3, [r7, #72]	; 0x48
		    data_in.mag[1] = 0.0f;
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	64fb      	str	r3, [r7, #76]	; 0x4c
		    data_in.mag[2] = 0.0f;
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	653b      	str	r3, [r7, #80]	; 0x50



	      MotionFX_propagate(mfxstate, &data_out, &data_in, &delta_time);
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002192:	f107 010c 	add.w	r1, r7, #12
 8002196:	4834      	ldr	r0, [pc, #208]	; (8002268 <IMU_Data_Read+0x1c8>)
 8002198:	f011 fbb2 	bl	8013900 <MotionFX_propagate>
	      MotionFX_update(mfxstate, &data_out, &data_in, &delta_time, NULL);
 800219c:	f107 0308 	add.w	r3, r7, #8
 80021a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80021a4:	f107 010c 	add.w	r1, r7, #12
 80021a8:	2000      	movs	r0, #0
 80021aa:	9000      	str	r0, [sp, #0]
 80021ac:	482e      	ldr	r0, [pc, #184]	; (8002268 <IMU_Data_Read+0x1c8>)
 80021ae:	f011 fb97 	bl	80138e0 <MotionFX_update>

	        // Update imu_data
	        imu_data.acceleration_x = data_out.gravity[0];
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	4a2d      	ldr	r2, [pc, #180]	; (800226c <IMU_Data_Read+0x1cc>)
 80021b6:	6013      	str	r3, [r2, #0]
	        imu_data.acceleration_y = data_out.gravity[1];
 80021b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ba:	4a2c      	ldr	r2, [pc, #176]	; (800226c <IMU_Data_Read+0x1cc>)
 80021bc:	6053      	str	r3, [r2, #4]
	        imu_data.acceleration_z = data_out.gravity[2];
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	4a2a      	ldr	r2, [pc, #168]	; (800226c <IMU_Data_Read+0x1cc>)
 80021c2:	6093      	str	r3, [r2, #8]
	        imu_data.angular_rate_x = data_out.linear_acceleration[0];
 80021c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c6:	4a29      	ldr	r2, [pc, #164]	; (800226c <IMU_Data_Read+0x1cc>)
 80021c8:	60d3      	str	r3, [r2, #12]
	        imu_data.angular_rate_y = data_out.linear_acceleration[1];
 80021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021cc:	4a27      	ldr	r2, [pc, #156]	; (800226c <IMU_Data_Read+0x1cc>)
 80021ce:	6113      	str	r3, [r2, #16]
	        imu_data.angular_rate_z = data_out.linear_acceleration[2];
 80021d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d2:	4a26      	ldr	r2, [pc, #152]	; (800226c <IMU_Data_Read+0x1cc>)
 80021d4:	6153      	str	r3, [r2, #20]
	        imu_data.pitch = data_out.rotation[1];
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4a24      	ldr	r2, [pc, #144]	; (800226c <IMU_Data_Read+0x1cc>)
 80021da:	61d3      	str	r3, [r2, #28]
	        imu_data.roll = data_out.rotation[2];
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	4a23      	ldr	r2, [pc, #140]	; (800226c <IMU_Data_Read+0x1cc>)
 80021e0:	6193      	str	r3, [r2, #24]


	        return imu_data;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a21      	ldr	r2, [pc, #132]	; (800226c <IMU_Data_Read+0x1cc>)
 80021e6:	461c      	mov	r4, r3
 80021e8:	4615      	mov	r5, r2
 80021ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021f6:	e029      	b.n	800224c <IMU_Data_Read+0x1ac>
	  }	else	{

		  //Error State
		  imu_data.acceleration_x = 0.0;
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <IMU_Data_Read+0x1cc>)
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
		  imu_data.acceleration_y = 0.0;
 8002200:	4b1a      	ldr	r3, [pc, #104]	; (800226c <IMU_Data_Read+0x1cc>)
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
		  imu_data.acceleration_z = 0.0;
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <IMU_Data_Read+0x1cc>)
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
		  imu_data.angular_rate_x = 0.0;
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <IMU_Data_Read+0x1cc>)
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
		  imu_data.angular_rate_y = 0.0;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <IMU_Data_Read+0x1cc>)
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
		  imu_data.angular_rate_z = 0.0;
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <IMU_Data_Read+0x1cc>)
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
		  imu_data.pitch = 0.0;
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <IMU_Data_Read+0x1cc>)
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	61da      	str	r2, [r3, #28]
		  imu_data.roll = 0.0;
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <IMU_Data_Read+0x1cc>)
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	619a      	str	r2, [r3, #24]

	        return imu_data;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0c      	ldr	r2, [pc, #48]	; (800226c <IMU_Data_Read+0x1cc>)
 800223c:	461c      	mov	r4, r3
 800223e:	4615      	mov	r5, r2
 8002240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002244:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002248:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}

}
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	3778      	adds	r7, #120	; 0x78
 8002250:	46bd      	mov	sp, r7
 8002252:	bdb0      	pop	{r4, r5, r7, pc}
 8002254:	3c1d4952 	.word	0x3c1d4952
 8002258:	20002f40 	.word	0x20002f40
 800225c:	20002f50 	.word	0x20002f50
 8002260:	20002f48 	.word	0x20002f48
 8002264:	3a83126f 	.word	0x3a83126f
 8002268:	20002fb0 	.word	0x20002fb0
 800226c:	20002f60 	.word	0x20002f60

08002270 <dps310_i2c_read>:
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}



int8_t dps310_i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af04      	add	r7, sp, #16
 8002276:	603a      	str	r2, [r7, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
 800227e:	460b      	mov	r3, r1
 8002280:	71bb      	strb	r3, [r7, #6]
 8002282:	4613      	mov	r3, r2
 8002284:	80bb      	strh	r3, [r7, #4]


	  // Perform the I2C read operation using HAL_I2C_Mem_Read
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	b299      	uxth	r1, r3
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	b29a      	uxth	r2, r3
 800228e:	2364      	movs	r3, #100	; 0x64
 8002290:	9302      	str	r3, [sp, #8]
 8002292:	88bb      	ldrh	r3, [r7, #4]
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2301      	movs	r3, #1
 800229c:	4807      	ldr	r0, [pc, #28]	; (80022bc <dps310_i2c_read+0x4c>)
 800229e:	f004 f989 	bl	80065b4 <HAL_I2C_Mem_Read>
 80022a2:	4603      	mov	r3, r0
 80022a4:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <dps310_i2c_read+0x40>
 80022ac:	2300      	movs	r3, #0
 80022ae:	e001      	b.n	80022b4 <dps310_i2c_read+0x44>
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff


}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200039d8 	.word	0x200039d8

080022c0 <dps310_i2c_write>:

int8_t dps310_i2c_write(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af04      	add	r7, sp, #16
 80022c6:	603a      	str	r2, [r7, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
 80022ce:	460b      	mov	r3, r1
 80022d0:	71bb      	strb	r3, [r7, #6]
 80022d2:	4613      	mov	r3, r2
 80022d4:	80bb      	strh	r3, [r7, #4]

	  // Perform the I2C write operation using HAL_I2C_Mem_Write
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	b299      	uxth	r1, r3
 80022da:	79bb      	ldrb	r3, [r7, #6]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	2364      	movs	r3, #100	; 0x64
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	88bb      	ldrh	r3, [r7, #4]
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2301      	movs	r3, #1
 80022ec:	4807      	ldr	r0, [pc, #28]	; (800230c <dps310_i2c_write+0x4c>)
 80022ee:	f004 f867 	bl	80063c0 <HAL_I2C_Mem_Write>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <dps310_i2c_write+0x40>
 80022fc:	2300      	movs	r3, #0
 80022fe:	e001      	b.n	8002304 <dps310_i2c_write+0x44>
 8002300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200039d8 	.word	0x200039d8

08002310 <Pressure_Init>:



int32_t Pressure_Init(){
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0

    int16_t ret;

    ret = product_id_check();
 8002316:	f000 fb21 	bl	800295c <product_id_check>
 800231a:	4603      	mov	r3, r0
 800231c:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 800231e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <Pressure_Init+0x1c>
 8002326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800232a:	e011      	b.n	8002350 <Pressure_Init+0x40>

    dps310_configure_temperature(
 800232c:	2000      	movs	r0, #0
 800232e:	f000 f8b1 	bl	8002494 <dps310_configure_temperature>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_TMP_CFG_TMP_PRC_SINGLE);

    dps310_configure_pressure(
 8002332:	2001      	movs	r0, #1
 8002334:	f000 f8da 	bl	80024ec <dps310_configure_pressure>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_PRS_CFG_PM_PRC_2_TIMES);

    ret = read_coefs();
 8002338:	f000 f80e 	bl	8002358 <read_coefs>
 800233c:	4603      	mov	r3, r0
 800233e:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 8002340:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <Pressure_Init+0x3e>
 8002348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800234c:	e000      	b.n	8002350 <Pressure_Init+0x40>

    return 0;
 800234e:	2300      	movs	r3, #0

}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <read_coefs>:

int16_t dps310_reset() {
    return write_byte_to_reg(DPS310_RESET_REG, DPS310_RESET_SOFT_RST_VALUE);
}

int16_t read_coefs() {
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[18];

    ret = wait_for_reg_value(
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	2008      	movs	r0, #8
 8002364:	f000 fa3e 	bl	80027e4 <wait_for_reg_value>
 8002368:	4603      	mov	r3, r0
 800236a:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE);

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_COEF_REG, buff, 18);
 800236c:	1d3a      	adds	r2, r7, #4
 800236e:	2312      	movs	r3, #18
 8002370:	2110      	movs	r1, #16
 8002372:	20ee      	movs	r0, #238	; 0xee
 8002374:	f7ff ff7c 	bl	8002270 <dps310_i2c_read>
 8002378:	4603      	mov	r3, r0
 800237a:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 800237c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <read_coefs+0x32>
 8002384:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002388:	e07d      	b.n	8002486 <read_coefs+0x12e>

    g_coefs.c0 = get_two_complement_of(
            ((uint16_t) buff[0] << 4u) | (((uint16_t) buff[1] >> 4u) & 0x0Fu),
 800238a:	793b      	ldrb	r3, [r7, #4]
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	461a      	mov	r2, r3
 8002390:	797b      	ldrb	r3, [r7, #5]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	4313      	orrs	r3, r2
    g_coefs.c0 = get_two_complement_of(
 800239c:	210c      	movs	r1, #12
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fab8 	bl	8002914 <get_two_complement_of>
 80023a4:	4603      	mov	r3, r0
 80023a6:	b21a      	sxth	r2, r3
 80023a8:	4b39      	ldr	r3, [pc, #228]	; (8002490 <read_coefs+0x138>)
 80023aa:	801a      	strh	r2, [r3, #0]
            12);

    g_coefs.c1 = get_two_complement_of(
            ((((uint16_t) buff[1] & 0x0Fu) << 8u) | (uint16_t) buff[2]),
 80023ac:	797b      	ldrb	r3, [r7, #5]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80023b4:	79ba      	ldrb	r2, [r7, #6]
 80023b6:	4313      	orrs	r3, r2
    g_coefs.c1 = get_two_complement_of(
 80023b8:	210c      	movs	r1, #12
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 faaa 	bl	8002914 <get_two_complement_of>
 80023c0:	4603      	mov	r3, r0
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	4b32      	ldr	r3, [pc, #200]	; (8002490 <read_coefs+0x138>)
 80023c6:	805a      	strh	r2, [r3, #2]
            12);

    g_coefs.c00 = get_two_complement_of(
            ((uint32_t) buff[3] << 12u) | ((uint32_t) buff[4] << 4u) | (((uint32_t) buff[5] >> 4u) & 0x0Fu),
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	031a      	lsls	r2, r3, #12
 80023cc:	7a3b      	ldrb	r3, [r7, #8]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	431a      	orrs	r2, r3
 80023d2:	7a7b      	ldrb	r3, [r7, #9]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f003 030f 	and.w	r3, r3, #15
    g_coefs.c00 = get_two_complement_of(
 80023dc:	4313      	orrs	r3, r2
 80023de:	2114      	movs	r1, #20
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fa97 	bl	8002914 <get_two_complement_of>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a29      	ldr	r2, [pc, #164]	; (8002490 <read_coefs+0x138>)
 80023ea:	6053      	str	r3, [r2, #4]
            20);

    g_coefs.c10 = get_two_complement_of(
            (((uint32_t) buff[5] & 0x0Fu) << 16u) | ((uint32_t) buff[6] << 8u) | (uint32_t) buff[7],
 80023ec:	7a7b      	ldrb	r3, [r7, #9]
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80023f4:	7abb      	ldrb	r3, [r7, #10]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	4313      	orrs	r3, r2
 80023fa:	7afa      	ldrb	r2, [r7, #11]
    g_coefs.c10 = get_two_complement_of(
 80023fc:	4313      	orrs	r3, r2
 80023fe:	2114      	movs	r1, #20
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fa87 	bl	8002914 <get_two_complement_of>
 8002406:	4603      	mov	r3, r0
 8002408:	4a21      	ldr	r2, [pc, #132]	; (8002490 <read_coefs+0x138>)
 800240a:	6093      	str	r3, [r2, #8]
            20);

    g_coefs.c01 = get_two_complement_of(
            ((uint16_t) buff[8] << 8u) | (uint16_t) buff[9],
 800240c:	7b3b      	ldrb	r3, [r7, #12]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	7b7a      	ldrb	r2, [r7, #13]
 8002412:	4313      	orrs	r3, r2
    g_coefs.c01 = get_two_complement_of(
 8002414:	2110      	movs	r1, #16
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fa7c 	bl	8002914 <get_two_complement_of>
 800241c:	4603      	mov	r3, r0
 800241e:	b21a      	sxth	r2, r3
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <read_coefs+0x138>)
 8002422:	819a      	strh	r2, [r3, #12]
            16);

    g_coefs.c11 = get_two_complement_of(
            ((uint16_t) buff[10] << 8u) | (uint16_t) buff[11],
 8002424:	7bbb      	ldrb	r3, [r7, #14]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	4313      	orrs	r3, r2
    g_coefs.c11 = get_two_complement_of(
 800242c:	2110      	movs	r1, #16
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fa70 	bl	8002914 <get_two_complement_of>
 8002434:	4603      	mov	r3, r0
 8002436:	b21a      	sxth	r2, r3
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <read_coefs+0x138>)
 800243a:	81da      	strh	r2, [r3, #14]
            16);

    g_coefs.c20 = get_two_complement_of(
            ((uint16_t) buff[12] << 8u) | (uint16_t) buff[13],
 800243c:	7c3b      	ldrb	r3, [r7, #16]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	7c7a      	ldrb	r2, [r7, #17]
 8002442:	4313      	orrs	r3, r2
    g_coefs.c20 = get_two_complement_of(
 8002444:	2110      	movs	r1, #16
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fa64 	bl	8002914 <get_two_complement_of>
 800244c:	4603      	mov	r3, r0
 800244e:	b21a      	sxth	r2, r3
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <read_coefs+0x138>)
 8002452:	821a      	strh	r2, [r3, #16]
            16);

    g_coefs.c21 = get_two_complement_of(
            ((uint16_t) buff[14] << 8u) | (uint16_t) buff[15],
 8002454:	7cbb      	ldrb	r3, [r7, #18]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	7cfa      	ldrb	r2, [r7, #19]
 800245a:	4313      	orrs	r3, r2
    g_coefs.c21 = get_two_complement_of(
 800245c:	2110      	movs	r1, #16
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fa58 	bl	8002914 <get_two_complement_of>
 8002464:	4603      	mov	r3, r0
 8002466:	b21a      	sxth	r2, r3
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <read_coefs+0x138>)
 800246a:	825a      	strh	r2, [r3, #18]
            16);

    g_coefs.c30 = get_two_complement_of(
            ((uint16_t) buff[16] << 8u) | (uint16_t) buff[17],
 800246c:	7d3b      	ldrb	r3, [r7, #20]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	7d7a      	ldrb	r2, [r7, #21]
 8002472:	4313      	orrs	r3, r2
    g_coefs.c30 = get_two_complement_of(
 8002474:	2110      	movs	r1, #16
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fa4c 	bl	8002914 <get_two_complement_of>
 800247c:	4603      	mov	r3, r0
 800247e:	b21a      	sxth	r2, r3
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <read_coefs+0x138>)
 8002482:	829a      	strh	r2, [r3, #20]
            16);

    return DPS310_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20003930 	.word	0x20003930

08002494 <dps310_configure_temperature>:

int16_t dps310_configure_temperature(uint8_t data) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
    int16_t ret;
    uint8_t temperature_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	737b      	strb	r3, [r7, #13]

    ret = get_temperature_sensor(&temperature_sensor);
 80024a2:	f107 030d 	add.w	r3, r7, #13
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fa7e 	bl	80029a8 <get_temperature_sensor>
 80024ac:	4603      	mov	r3, r0
 80024ae:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 80024b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <dps310_configure_temperature+0x2a>
 80024b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024bc:	e00f      	b.n	80024de <dps310_configure_temperature+0x4a>

    g_temperature_rate = DPS310_TMP_CFG_TMP_RATE_MASK & data;
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <dps310_configure_temperature+0x54>)
 80024c8:	701a      	strb	r2, [r3, #0]
    data |= temperature_sensor;
 80024ca:	7b7a      	ldrb	r2, [r7, #13]
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	71fb      	strb	r3, [r7, #7]

    return write_byte_to_reg(DPS310_TMP_CFG_REG, data);
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	4619      	mov	r1, r3
 80024d6:	2007      	movs	r0, #7
 80024d8:	f000 f820 	bl	800251c <write_byte_to_reg>
 80024dc:	4603      	mov	r3, r0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20003949 	.word	0x20003949

080024ec <dps310_configure_pressure>:

int16_t dps310_configure_pressure(uint8_t data) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
    g_pressure_rate = DPS310_PRS_CFG_PM_RATE_MASK & data;
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <dps310_configure_pressure+0x2c>)
 8002500:	701a      	strb	r2, [r3, #0]
    return write_byte_to_reg(DPS310_PRS_CFG_REG, data);
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	4619      	mov	r1, r3
 8002506:	2006      	movs	r0, #6
 8002508:	f000 f808 	bl	800251c <write_byte_to_reg>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20003948 	.word	0x20003948

0800251c <write_byte_to_reg>:

int16_t write_byte_to_reg(uint8_t reg_addr, uint8_t data) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	460a      	mov	r2, r1
 8002526:	71fb      	strb	r3, [r7, #7]
 8002528:	4613      	mov	r3, r2
 800252a:	71bb      	strb	r3, [r7, #6]
    int16_t ret;
    uint8_t buff[1];

    buff[0] = data;
 800252c:	79bb      	ldrb	r3, [r7, #6]
 800252e:	733b      	strb	r3, [r7, #12]
    ret = dps310_i2c_write(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 8002530:	f107 020c 	add.w	r2, r7, #12
 8002534:	79f9      	ldrb	r1, [r7, #7]
 8002536:	2301      	movs	r3, #1
 8002538:	20ee      	movs	r0, #238	; 0xee
 800253a:	f7ff fec1 	bl	80022c0 <dps310_i2c_write>
 800253e:	4603      	mov	r3, r0
 8002540:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 8002542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <write_byte_to_reg+0x34>
 800254a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800254e:	e000      	b.n	8002552 <write_byte_to_reg+0x36>

    return DPS310_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <read_temperature>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t read_temperature(float *p_temperature) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_TMP);
 8002564:	2102      	movs	r1, #2
 8002566:	2008      	movs	r0, #8
 8002568:	f7ff ffd8 	bl	800251c <write_byte_to_reg>
 800256c:	4603      	mov	r3, r0
 800256e:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002570:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <read_temperature+0x22>
 8002578:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800257c:	e066      	b.n	800264c <read_temperature+0xf0>

    ret = wait_for_reg_value(
 800257e:	2267      	movs	r2, #103	; 0x67
 8002580:	2160      	movs	r1, #96	; 0x60
 8002582:	2008      	movs	r0, #8
 8002584:	f000 f92e 	bl	80027e4 <wait_for_reg_value>
 8002588:	4603      	mov	r3, r0
 800258a:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 800258c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <read_temperature+0x3e>
 8002594:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002598:	e058      	b.n	800264c <read_temperature+0xf0>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_B2_REG, buff, 3);
 800259a:	f107 020c 	add.w	r2, r7, #12
 800259e:	2303      	movs	r3, #3
 80025a0:	2103      	movs	r1, #3
 80025a2:	20ee      	movs	r0, #238	; 0xee
 80025a4:	f7ff fe64 	bl	8002270 <dps310_i2c_read>
 80025a8:	4603      	mov	r3, r0
 80025aa:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 80025ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <read_temperature+0x5e>
 80025b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025b8:	e048      	b.n	800264c <read_temperature+0xf0>

    int32_t temp_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 80025ba:	7b3b      	ldrb	r3, [r7, #12]
 80025bc:	041a      	lsls	r2, r3, #16
 80025be:	7b7b      	ldrb	r3, [r7, #13]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	4313      	orrs	r3, r2
 80025c4:	7bba      	ldrb	r2, [r7, #14]
    int32_t temp_raw = get_two_complement_of(
 80025c6:	4313      	orrs	r3, r2
 80025c8:	2118      	movs	r1, #24
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f9a2 	bl	8002914 <get_two_complement_of>
 80025d0:	6138      	str	r0, [r7, #16]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_temperature_rate, &factor);
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <read_temperature+0xf8>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	f107 0208 	add.w	r2, r7, #8
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 f940 	bl	8002862 <get_scale_factor_for>
 80025e2:	4603      	mov	r3, r0
 80025e4:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 80025e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <read_temperature+0x98>
 80025ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025f2:	e02b      	b.n	800264c <read_temperature+0xf0>

    g_last_temp_raw_sc = (float) temp_raw / factor;
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <read_temperature+0xfc>)
 800260e:	edc3 7a00 	vstr	s15, [r3]
    *p_temperature = (float) g_coefs.c0 * 0.5f + (float) g_coefs.c1 * g_last_temp_raw_sc;
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <read_temperature+0x100>)
 8002614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002618:	ee07 3a90 	vmov	s15, r3
 800261c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002620:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002624:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <read_temperature+0x100>)
 800262a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800262e:	ee07 3a90 	vmov	s15, r3
 8002632:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <read_temperature+0xfc>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20003949 	.word	0x20003949
 8002658:	2000394c 	.word	0x2000394c
 800265c:	20003930 	.word	0x20003930

08002660 <read_pressure>:

int16_t read_pressure(float *p_pressure) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_PRS);
 8002668:	2101      	movs	r1, #1
 800266a:	2008      	movs	r0, #8
 800266c:	f7ff ff56 	bl	800251c <write_byte_to_reg>
 8002670:	4603      	mov	r3, r0
 8002672:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8002674:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <read_pressure+0x22>
 800267c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002680:	e0a4      	b.n	80027cc <read_pressure+0x16c>

    ret = wait_for_reg_value(
 8002682:	2257      	movs	r2, #87	; 0x57
 8002684:	2150      	movs	r1, #80	; 0x50
 8002686:	2008      	movs	r0, #8
 8002688:	f000 f8ac 	bl	80027e4 <wait_for_reg_value>
 800268c:	4603      	mov	r3, r0
 800268e:	83fb      	strh	r3, [r7, #30]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 8002690:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <read_pressure+0x3e>
 8002698:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800269c:	e096      	b.n	80027cc <read_pressure+0x16c>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PSR_B2_REG, buff, 3);
 800269e:	f107 0210 	add.w	r2, r7, #16
 80026a2:	2303      	movs	r3, #3
 80026a4:	2100      	movs	r1, #0
 80026a6:	20ee      	movs	r0, #238	; 0xee
 80026a8:	f7ff fde2 	bl	8002270 <dps310_i2c_read>
 80026ac:	4603      	mov	r3, r0
 80026ae:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 80026b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <read_pressure+0x5e>
 80026b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026bc:	e086      	b.n	80027cc <read_pressure+0x16c>

    int32_t pressure_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 80026be:	7c3b      	ldrb	r3, [r7, #16]
 80026c0:	041a      	lsls	r2, r3, #16
 80026c2:	7c7b      	ldrb	r3, [r7, #17]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	4313      	orrs	r3, r2
 80026c8:	7cba      	ldrb	r2, [r7, #18]
    int32_t pressure_raw = get_two_complement_of(
 80026ca:	4313      	orrs	r3, r2
 80026cc:	2118      	movs	r1, #24
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f920 	bl	8002914 <get_two_complement_of>
 80026d4:	61b8      	str	r0, [r7, #24]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_pressure_rate, &factor);
 80026d6:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <read_pressure+0x174>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	f107 020c 	add.w	r2, r7, #12
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 f8be 	bl	8002862 <get_scale_factor_for>
 80026e6:	4603      	mov	r3, r0
 80026e8:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 80026ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <read_pressure+0x98>
 80026f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026f6:	e069      	b.n	80027cc <read_pressure+0x16c>

    float pressure_raw_sc = (float) pressure_raw / factor;
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800270c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002710:	edc7 7a05 	vstr	s15, [r7, #20]

    // *0.01f -> Convert compensated pressure measurement from Pa to hPa
    *p_pressure = (g_coefs.c00 +
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <read_pressure+0x178>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 8002720:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <read_pressure+0x178>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800272c:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <read_pressure+0x178>)
 800272e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800273a:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <read_pressure+0x178>)
 800273c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002740:	ee07 3a90 	vmov	s15, r3
 8002744:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002748:	edd7 7a05 	vldr	s15, [r7, #20]
 800274c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002750:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002754:	edd7 7a05 	vldr	s15, [r7, #20]
 8002758:	ee66 7a27 	vmul.f32	s15, s12, s15
 800275c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002760:	edd7 7a05 	vldr	s15, [r7, #20]
 8002764:	ee66 7aa7 	vmul.f32	s15, s13, s15
    *p_pressure = (g_coefs.c00 +
 8002768:	ee37 7a27 	vadd.f32	s14, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <read_pressure+0x178>)
 800276e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800277a:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <read_pressure+0x178>)
 800277c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002780:	ee07 3a90 	vmov	s15, r3
 8002784:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <read_pressure+0x178>)
 800278a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002796:	edd7 7a05 	vldr	s15, [r7, #20]
 800279a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800279e:	ee36 6a27 	vadd.f32	s12, s12, s15
 80027a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <read_pressure+0x17c>)
 80027b0:	edd3 7a00 	vldr	s15, [r3]
 80027b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 80027b8:	ee77 7a27 	vadd.f32	s15, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 80027bc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80027e0 <read_pressure+0x180>
 80027c0:	ee67 7a87 	vmul.f32	s15, s15, s14
    *p_pressure = (g_coefs.c00 +
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20003948 	.word	0x20003948
 80027d8:	20003930 	.word	0x20003930
 80027dc:	2000394c 	.word	0x2000394c
 80027e0:	3c23d70a 	.word	0x3c23d70a

080027e4 <wait_for_reg_value>:

int16_t wait_for_reg_value(uint8_t reg_addr, uint8_t reg_value, uint8_t mask) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
 80027ee:	460b      	mov	r3, r1
 80027f0:	71bb      	strb	r3, [r7, #6]
 80027f2:	4613      	mov	r3, r2
 80027f4:	717b      	strb	r3, [r7, #5]
    int16_t ret;
    uint8_t buff[1];
    uint16_t attempts = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	81fb      	strh	r3, [r7, #14]

    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 80027fa:	e024      	b.n	8002846 <wait_for_reg_value+0x62>
        attempts++;
 80027fc:	89fb      	ldrh	r3, [r7, #14]
 80027fe:	3301      	adds	r3, #1
 8002800:	81fb      	strh	r3, [r7, #14]

        ret = dps310_i2c_read(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 8002802:	f107 0208 	add.w	r2, r7, #8
 8002806:	79f9      	ldrb	r1, [r7, #7]
 8002808:	2301      	movs	r3, #1
 800280a:	20ee      	movs	r0, #238	; 0xee
 800280c:	f7ff fd30 	bl	8002270 <dps310_i2c_read>
 8002810:	4603      	mov	r3, r0
 8002812:	81bb      	strh	r3, [r7, #12]
        if (ret != DPS310_OK) return ret;
 8002814:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <wait_for_reg_value+0x3e>
 800281c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002820:	e01b      	b.n	800285a <wait_for_reg_value+0x76>

        bool b_is_expected_value = ((buff[0] & mask) == reg_value);
 8002822:	7a3a      	ldrb	r2, [r7, #8]
 8002824:	797b      	ldrb	r3, [r7, #5]
 8002826:	4013      	ands	r3, r2
 8002828:	b2db      	uxtb	r3, r3
 800282a:	79ba      	ldrb	r2, [r7, #6]
 800282c:	429a      	cmp	r2, r3
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	72fb      	strb	r3, [r7, #11]
        if (b_is_expected_value) return DPS310_OK;
 8002836:	7afb      	ldrb	r3, [r7, #11]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <wait_for_reg_value+0x5c>
 800283c:	2300      	movs	r3, #0
 800283e:	e00c      	b.n	800285a <wait_for_reg_value+0x76>

        HAL_Delay(10);
 8002840:	200a      	movs	r0, #10
 8002842:	f002 fbc7 	bl	8004fd4 <HAL_Delay>
    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8002846:	89fb      	ldrh	r3, [r7, #14]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d9d7      	bls.n	80027fc <wait_for_reg_value+0x18>
    }

    if (attempts == DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 800284c:	89fb      	ldrh	r3, [r7, #14]
 800284e:	2b03      	cmp	r3, #3
 8002850:	d102      	bne.n	8002858 <wait_for_reg_value+0x74>
        return DPS310_WAIT_TIMEOUT_ERROR;
 8002852:	f06f 0303 	mvn.w	r3, #3
 8002856:	e000      	b.n	800285a <wait_for_reg_value+0x76>
    }

    return DPS310_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <get_scale_factor_for>:

int16_t get_scale_factor_for(uint8_t rate, uint32_t *p_factor) {
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	6039      	str	r1, [r7, #0]
 800286c:	71fb      	strb	r3, [r7, #7]
    uint32_t ret = DPS310_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]

    switch (rate) {
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b70      	cmp	r3, #112	; 0x70
 8002876:	d03d      	beq.n	80028f4 <get_scale_factor_for+0x92>
 8002878:	2b70      	cmp	r3, #112	; 0x70
 800287a:	dc40      	bgt.n	80028fe <get_scale_factor_for+0x9c>
 800287c:	2b60      	cmp	r3, #96	; 0x60
 800287e:	d034      	beq.n	80028ea <get_scale_factor_for+0x88>
 8002880:	2b60      	cmp	r3, #96	; 0x60
 8002882:	dc3c      	bgt.n	80028fe <get_scale_factor_for+0x9c>
 8002884:	2b50      	cmp	r3, #80	; 0x50
 8002886:	d02b      	beq.n	80028e0 <get_scale_factor_for+0x7e>
 8002888:	2b50      	cmp	r3, #80	; 0x50
 800288a:	dc38      	bgt.n	80028fe <get_scale_factor_for+0x9c>
 800288c:	2b40      	cmp	r3, #64	; 0x40
 800288e:	d022      	beq.n	80028d6 <get_scale_factor_for+0x74>
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	dc34      	bgt.n	80028fe <get_scale_factor_for+0x9c>
 8002894:	2b30      	cmp	r3, #48	; 0x30
 8002896:	d019      	beq.n	80028cc <get_scale_factor_for+0x6a>
 8002898:	2b30      	cmp	r3, #48	; 0x30
 800289a:	dc30      	bgt.n	80028fe <get_scale_factor_for+0x9c>
 800289c:	2b20      	cmp	r3, #32
 800289e:	d010      	beq.n	80028c2 <get_scale_factor_for+0x60>
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	dc2c      	bgt.n	80028fe <get_scale_factor_for+0x9c>
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <get_scale_factor_for+0x4c>
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	d005      	beq.n	80028b8 <get_scale_factor_for+0x56>
 80028ac:	e027      	b.n	80028fe <get_scale_factor_for+0x9c>
        case DPS310_CFG_RATE_1_MEAS:
            *p_factor = 524288;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80028b4:	601a      	str	r2, [r3, #0]
            break;
 80028b6:	e025      	b.n	8002904 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_2_MEAS:
            *p_factor = 1572864;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80028be:	601a      	str	r2, [r3, #0]
            break;
 80028c0:	e020      	b.n	8002904 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_4_MEAS:
            *p_factor = 3670016;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 80028c8:	601a      	str	r2, [r3, #0]
            break;
 80028ca:	e01b      	b.n	8002904 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_8_MEAS:
            *p_factor = 7864320;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80028d2:	601a      	str	r2, [r3, #0]
            break;
 80028d4:	e016      	b.n	8002904 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_16_MEAS:
            *p_factor = 253952;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 80028dc:	601a      	str	r2, [r3, #0]
            break;
 80028de:	e011      	b.n	8002904 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_32_MEAS:
            *p_factor = 516096;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 80028e6:	601a      	str	r2, [r3, #0]
            break;
 80028e8:	e00c      	b.n	8002904 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_64_MEAS:
            *p_factor = 1040384;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 80028f0:	601a      	str	r2, [r3, #0]
            break;
 80028f2:	e007      	b.n	8002904 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_128_MEAS:
            *p_factor = 2088960;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 80028fa:	601a      	str	r2, [r3, #0]
            break;
 80028fc:	e002      	b.n	8002904 <get_scale_factor_for+0xa2>
        default:
            ret = DPS310_UNKNOWN_RATE_ERROR;
 80028fe:	f06f 0304 	mvn.w	r3, #4
 8002902:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	b21b      	sxth	r3, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <get_two_complement_of>:

int32_t get_two_complement_of(uint32_t value, uint8_t length) {
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
    int32_t ret = value;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60fb      	str	r3, [r7, #12]
    bool b_is_negative = value & (1u << (length - 1u));
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	3b01      	subs	r3, #1
 8002928:	2201      	movs	r2, #1
 800292a:	409a      	lsls	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf14      	ite	ne
 8002934:	2301      	movne	r3, #1
 8002936:	2300      	moveq	r3, #0
 8002938:	72fb      	strb	r3, [r7, #11]

    if (b_is_negative) {
 800293a:	7afb      	ldrb	r3, [r7, #11]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <get_two_complement_of+0x3a>
        ret -= ((uint32_t) 1 << length);
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 800294e:	68fb      	ldr	r3, [r7, #12]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <product_id_check>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t product_id_check() {
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PRODUCT_ID_REG, buff, 1);
 8002962:	1d3a      	adds	r2, r7, #4
 8002964:	2301      	movs	r3, #1
 8002966:	210d      	movs	r1, #13
 8002968:	20ee      	movs	r0, #238	; 0xee
 800296a:	f7ff fc81 	bl	8002270 <dps310_i2c_read>
 800296e:	4603      	mov	r3, r0
 8002970:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 8002972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <product_id_check+0x24>
 800297a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800297e:	e00f      	b.n	80029a0 <product_id_check+0x44>

    bool b_is_product_id_valid = buff[0] == DPS310_PRODUCT_ID_VALUE;
 8002980:	793b      	ldrb	r3, [r7, #4]
 8002982:	2b10      	cmp	r3, #16
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	717b      	strb	r3, [r7, #5]
    if (!b_is_product_id_valid) return DPS310_PRODUCT_ID_ERROR;
 800298c:	797b      	ldrb	r3, [r7, #5]
 800298e:	f083 0301 	eor.w	r3, r3, #1
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <product_id_check+0x42>
 8002998:	f06f 0301 	mvn.w	r3, #1
 800299c:	e000      	b.n	80029a0 <product_id_check+0x44>

    return DPS310_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <get_temperature_sensor>:

int16_t get_temperature_sensor(uint8_t *p_sensor) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
    uint16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_COEF_SRCE, buff, 1);
 80029b0:	f107 020c 	add.w	r2, r7, #12
 80029b4:	2301      	movs	r3, #1
 80029b6:	2128      	movs	r1, #40	; 0x28
 80029b8:	20ee      	movs	r0, #238	; 0xee
 80029ba:	f7ff fc59 	bl	8002270 <dps310_i2c_read>
 80029be:	4603      	mov	r3, r0
 80029c0:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 80029c2:	89fb      	ldrh	r3, [r7, #14]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <get_temperature_sensor+0x26>
 80029c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029cc:	e00e      	b.n	80029ec <get_temperature_sensor+0x44>

    uint8_t value = buff[0] & DPS310_TMP_COEF_SRCE_MASK;
 80029ce:	7b3b      	ldrb	r3, [r7, #12]
 80029d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80029d4:	737b      	strb	r3, [r7, #13]

    if (value) {
 80029d6:	7b7b      	ldrb	r3, [r7, #13]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <get_temperature_sensor+0x3c>
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2280      	movs	r2, #128	; 0x80
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e002      	b.n	80029ea <get_temperature_sensor+0x42>
    } else {
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_INTERNAL;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
    }

    return DPS310_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <Transmit_Pressure_Temp_Data>:


PressureTempData Transmit_Pressure_Temp_Data(){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0


	  pressure_read_state = read_pressure(&pressure_value);
 80029fa:	4822      	ldr	r0, [pc, #136]	; (8002a84 <Transmit_Pressure_Temp_Data+0x90>)
 80029fc:	f7ff fe30 	bl	8002660 <read_pressure>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461a      	mov	r2, r3
 8002a04:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <Transmit_Pressure_Temp_Data+0x94>)
 8002a06:	801a      	strh	r2, [r3, #0]
	  temperature_p_state = read_temperature(&temperature_p_value);
 8002a08:	4820      	ldr	r0, [pc, #128]	; (8002a8c <Transmit_Pressure_Temp_Data+0x98>)
 8002a0a:	f7ff fda7 	bl	800255c <read_temperature>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <Transmit_Pressure_Temp_Data+0x9c>)
 8002a14:	801a      	strh	r2, [r3, #0]

	  if(pressure_read_state == 0 && temperature_p_state == 0){
 8002a16:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <Transmit_Pressure_Temp_Data+0x94>)
 8002a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d114      	bne.n	8002a4a <Transmit_Pressure_Temp_Data+0x56>
 8002a20:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <Transmit_Pressure_Temp_Data+0x9c>)
 8002a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10f      	bne.n	8002a4a <Transmit_Pressure_Temp_Data+0x56>
		    pressure_temp_data.pressure_hpa = pressure_value;
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <Transmit_Pressure_Temp_Data+0x90>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <Transmit_Pressure_Temp_Data+0xa0>)
 8002a30:	6013      	str	r3, [r2, #0]
		    pressure_temp_data.temperature_celsius = temperature_p_value;
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <Transmit_Pressure_Temp_Data+0x98>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <Transmit_Pressure_Temp_Data+0xa0>)
 8002a38:	6053      	str	r3, [r2, #4]

		    return pressure_temp_data;
 8002a3a:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <Transmit_Pressure_Temp_Data+0xa0>)
 8002a3c:	f107 0308 	add.w	r3, r7, #8
 8002a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a44:	e883 0003 	stmia.w	r3, {r0, r1}
 8002a48:	e00e      	b.n	8002a68 <Transmit_Pressure_Temp_Data+0x74>
	  } else {
		    pressure_temp_data.pressure_hpa = 0;
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <Transmit_Pressure_Temp_Data+0xa0>)
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
		    pressure_temp_data.temperature_celsius = 0;
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <Transmit_Pressure_Temp_Data+0xa0>)
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	605a      	str	r2, [r3, #4]

		    return pressure_temp_data;
 8002a5a:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <Transmit_Pressure_Temp_Data+0xa0>)
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a64:	e883 0003 	stmia.w	r3, {r0, r1}
	  }


}
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	ee07 2a10 	vmov	s14, r2
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eeb0 0a47 	vmov.f32	s0, s14
 8002a78:	eef0 0a67 	vmov.f32	s1, s15
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20003950 	.word	0x20003950
 8002a88:	20003958 	.word	0x20003958
 8002a8c:	20003954 	.word	0x20003954
 8002a90:	2000395a 	.word	0x2000395a
 8002a94:	2000395c 	.word	0x2000395c

08002a98 <UART_Transmit_Pyro>:
 */

#include "pyro.h"

void UART_Transmit_Pyro(const char* str)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7fd fbe5 	bl	8000270 <strlen>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <UART_Transmit_Pyro+0x28>)
 8002ab2:	f006 fc9c 	bl	80093ee <HAL_UART_Transmit>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20003bd0 	.word	0x20003bd0

08002ac4 <pyro_arm>:

// Function to arm the pyro charge
void pyro_arm(int pyroSlot) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    if (pyroSlot == 1) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <pyro_arm+0x1a>
        // Arm Pyro 1 (set the GPIO pin low)
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_RESET);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2140      	movs	r1, #64	; 0x40
 8002ad6:	4808      	ldr	r0, [pc, #32]	; (8002af8 <pyro_arm+0x34>)
 8002ad8:	f002 ffcc 	bl	8005a74 <HAL_GPIO_WritePin>
    } else if (pyroSlot == 2) {
        // Arm Pyro 2 (set the GPIO pin low)
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
    }
}
 8002adc:	e007      	b.n	8002aee <pyro_arm+0x2a>
    } else if (pyroSlot == 2) {
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d104      	bne.n	8002aee <pyro_arm+0x2a>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4804      	ldr	r0, [pc, #16]	; (8002afc <pyro_arm+0x38>)
 8002aea:	f002 ffc3 	bl	8005a74 <HAL_GPIO_WritePin>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40020400 	.word	0x40020400
 8002afc:	40020000 	.word	0x40020000

08002b00 <pyro_fire>:

// Function to fire the pyro charge
void pyro_fire(int pyroSlot) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
    if (pyroSlot == 1) {
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d114      	bne.n	8002b38 <pyro_fire+0x38>
        // Fire Pyro 1 (set the GPIO pin high)
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_SET);
 8002b0e:	2201      	movs	r2, #1
 8002b10:	2140      	movs	r1, #64	; 0x40
 8002b12:	4817      	ldr	r0, [pc, #92]	; (8002b70 <pyro_fire+0x70>)
 8002b14:	f002 ffae 	bl	8005a74 <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Ignition..");
 8002b18:	4816      	ldr	r0, [pc, #88]	; (8002b74 <pyro_fire+0x74>)
 8002b1a:	f7ff ffbd 	bl	8002a98 <UART_Transmit_Pyro>
        HAL_Delay(PYRO_IGNITION_TIME);
 8002b1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b22:	f002 fa57 	bl	8004fd4 <HAL_Delay>
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_RESET);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2140      	movs	r1, #64	; 0x40
 8002b2a:	4811      	ldr	r0, [pc, #68]	; (8002b70 <pyro_fire+0x70>)
 8002b2c:	f002 ffa2 	bl	8005a74 <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Finished.\r\n");
 8002b30:	4811      	ldr	r0, [pc, #68]	; (8002b78 <pyro_fire+0x78>)
 8002b32:	f7ff ffb1 	bl	8002a98 <UART_Transmit_Pyro>
        UART_Transmit_Pyro("Ignition..");
        HAL_Delay(PYRO_IGNITION_TIME);
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
        UART_Transmit_Pyro("Finished.\r\n");
    }
}
 8002b36:	e016      	b.n	8002b66 <pyro_fire+0x66>
    } else if (pyroSlot == 2) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d113      	bne.n	8002b66 <pyro_fire+0x66>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_SET);
 8002b3e:	2201      	movs	r2, #1
 8002b40:	2101      	movs	r1, #1
 8002b42:	480e      	ldr	r0, [pc, #56]	; (8002b7c <pyro_fire+0x7c>)
 8002b44:	f002 ff96 	bl	8005a74 <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Ignition..");
 8002b48:	480a      	ldr	r0, [pc, #40]	; (8002b74 <pyro_fire+0x74>)
 8002b4a:	f7ff ffa5 	bl	8002a98 <UART_Transmit_Pyro>
        HAL_Delay(PYRO_IGNITION_TIME);
 8002b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b52:	f002 fa3f 	bl	8004fd4 <HAL_Delay>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4808      	ldr	r0, [pc, #32]	; (8002b7c <pyro_fire+0x7c>)
 8002b5c:	f002 ff8a 	bl	8005a74 <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Finished.\r\n");
 8002b60:	4805      	ldr	r0, [pc, #20]	; (8002b78 <pyro_fire+0x78>)
 8002b62:	f7ff ff99 	bl	8002a98 <UART_Transmit_Pyro>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40020400 	.word	0x40020400
 8002b74:	0801a794 	.word	0x0801a794
 8002b78:	0801a7a0 	.word	0x0801a7a0
 8002b7c:	40020000 	.word	0x40020000

08002b80 <Transmit_Temperature>:
{
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}


TemperatureData Transmit_Temperature(){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af02      	add	r7, sp, #8


	buffer[0] = TEMP_READ_ADDRESS;
 8002b86:	4b40      	ldr	r3, [pc, #256]	; (8002c88 <Transmit_Temperature+0x108>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
	//UART_Transmit_String("Reading temperature..\r\n");
	ret = HAL_I2C_Master_Transmit(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,1,HAL_MAX_DELAY);
 8002b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	2301      	movs	r3, #1
 8002b94:	4a3c      	ldr	r2, [pc, #240]	; (8002c88 <Transmit_Temperature+0x108>)
 8002b96:	2190      	movs	r1, #144	; 0x90
 8002b98:	483c      	ldr	r0, [pc, #240]	; (8002c8c <Transmit_Temperature+0x10c>)
 8002b9a:	f003 f8ed 	bl	8005d78 <HAL_I2C_Master_Transmit>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <Transmit_Temperature+0x110>)
 8002ba4:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK){
 8002ba6:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <Transmit_Temperature+0x110>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <Transmit_Temperature+0x3c>
		UART_Transmit_String("Error communicating with Temperature sensor");
 8002bae:	4839      	ldr	r0, [pc, #228]	; (8002c94 <Transmit_Temperature+0x114>)
 8002bb0:	f7fe fd88 	bl	80016c4 <UART_Transmit_String>
		UART_Transmit_String("\r\n");
 8002bb4:	4838      	ldr	r0, [pc, #224]	; (8002c98 <Transmit_Temperature+0x118>)
 8002bb6:	f7fe fd85 	bl	80016c4 <UART_Transmit_String>
 8002bba:	e059      	b.n	8002c70 <Transmit_Temperature+0xf0>
	} else{
		ret = HAL_I2C_Master_Receive(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,2,HAL_MAX_DELAY);
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	4a30      	ldr	r2, [pc, #192]	; (8002c88 <Transmit_Temperature+0x108>)
 8002bc6:	2190      	movs	r1, #144	; 0x90
 8002bc8:	4830      	ldr	r0, [pc, #192]	; (8002c8c <Transmit_Temperature+0x10c>)
 8002bca:	f003 f9d3 	bl	8005f74 <HAL_I2C_Master_Receive>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <Transmit_Temperature+0x110>)
 8002bd4:	701a      	strb	r2, [r3, #0]
		if (ret != HAL_OK){
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <Transmit_Temperature+0x110>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <Transmit_Temperature+0x6c>
			UART_Transmit_String("Error receiving data from Temperature sensor");
 8002bde:	482f      	ldr	r0, [pc, #188]	; (8002c9c <Transmit_Temperature+0x11c>)
 8002be0:	f7fe fd70 	bl	80016c4 <UART_Transmit_String>
			UART_Transmit_String("\r\n");
 8002be4:	482c      	ldr	r0, [pc, #176]	; (8002c98 <Transmit_Temperature+0x118>)
 8002be6:	f7fe fd6d 	bl	80016c4 <UART_Transmit_String>
 8002bea:	e041      	b.n	8002c70 <Transmit_Temperature+0xf0>
		} else {
			//Combine the bytes
			val = ((int16_t)buffer[0] << 4) | (buffer[1] >> 4);
 8002bec:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <Transmit_Temperature+0x108>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	b21a      	sxth	r2, r3
 8002bf4:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <Transmit_Temperature+0x108>)
 8002bf6:	785b      	ldrb	r3, [r3, #1]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	b21b      	sxth	r3, r3
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	b21a      	sxth	r2, r3
 8002c02:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <Transmit_Temperature+0x120>)
 8002c04:	801a      	strh	r2, [r3, #0]

			//Convert to 2's complement (temperature can be negative)
			if(val > 0x7FF){
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <Transmit_Temperature+0x120>)
 8002c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c10:	db09      	blt.n	8002c26 <Transmit_Temperature+0xa6>
				val |= 0xF000;
 8002c12:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <Transmit_Temperature+0x120>)
 8002c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c18:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002c1c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002c20:	b21a      	sxth	r2, r3
 8002c22:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <Transmit_Temperature+0x120>)
 8002c24:	801a      	strh	r2, [r3, #0]
			}

			//Convert to float temperature value (Celsius)
			temp_c = val * 0.0625; // 0.0625 can be retreived into the datasheet
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <Transmit_Temperature+0x120>)
 8002c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fc79 	bl	8000524 <__aeabi_i2d>
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <Transmit_Temperature+0x124>)
 8002c38:	f7fd fcde 	bl	80005f8 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7fd ffd0 	bl	8000be8 <__aeabi_d2f>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <Transmit_Temperature+0x128>)
 8002c4c:	6013      	str	r3, [r2, #0]

			//Convert to temperature to decimal format
			temp_c *= 100;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <Transmit_Temperature+0x128>)
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002cac <Transmit_Temperature+0x12c>
 8002c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <Transmit_Temperature+0x128>)
 8002c5e:	edc3 7a00 	vstr	s15, [r3]

			temperature_data.temperature_celsius = temp_c;
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <Transmit_Temperature+0x128>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <Transmit_Temperature+0x130>)
 8002c68:	6013      	str	r3, [r2, #0]

			return temperature_data;
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <Transmit_Temperature+0x130>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	e004      	b.n	8002c7a <Transmit_Temperature+0xfa>

		}
	}

	//Error State
	temperature_data.temperature_celsius = -100.00;
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <Transmit_Temperature+0x130>)
 8002c72:	4a10      	ldr	r2, [pc, #64]	; (8002cb4 <Transmit_Temperature+0x134>)
 8002c74:	601a      	str	r2, [r3, #0]
	return temperature_data;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <Transmit_Temperature+0x130>)
 8002c78:	681b      	ldr	r3, [r3, #0]

}
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20003968 	.word	0x20003968
 8002c8c:	200039d8 	.word	0x200039d8
 8002c90:	20003964 	.word	0x20003964
 8002c94:	0801a7ac 	.word	0x0801a7ac
 8002c98:	0801a7d8 	.word	0x0801a7d8
 8002c9c:	0801a7dc 	.word	0x0801a7dc
 8002ca0:	20003974 	.word	0x20003974
 8002ca4:	3fb00000 	.word	0x3fb00000
 8002ca8:	20003978 	.word	0x20003978
 8002cac:	42c80000 	.word	0x42c80000
 8002cb0:	2000397c 	.word	0x2000397c
 8002cb4:	c2c80000 	.word	0xc2c80000

08002cb8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2110      	movs	r1, #16
 8002cc0:	4803      	ldr	r0, [pc, #12]	; (8002cd0 <SELECT+0x18>)
 8002cc2:	f002 fed7 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f002 f984 	bl	8004fd4 <HAL_Delay>
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40020000 	.word	0x40020000

08002cd4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002cd8:	2201      	movs	r2, #1
 8002cda:	2110      	movs	r1, #16
 8002cdc:	4803      	ldr	r0, [pc, #12]	; (8002cec <DESELECT+0x18>)
 8002cde:	f002 fec9 	bl	8005a74 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	f002 f976 	bl	8004fd4 <HAL_Delay>
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40020000 	.word	0x40020000

08002cf0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002cfa:	bf00      	nop
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <SPI_TxByte+0x30>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d1f8      	bne.n	8002cfc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002d0a:	1df9      	adds	r1, r7, #7
 8002d0c:	2364      	movs	r3, #100	; 0x64
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4803      	ldr	r0, [pc, #12]	; (8002d20 <SPI_TxByte+0x30>)
 8002d12:	f005 f9de 	bl	80080d2 <HAL_SPI_Transmit>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20003aa0 	.word	0x20003aa0

08002d24 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002d30:	bf00      	nop
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <SPI_TxBuffer+0x30>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d1f8      	bne.n	8002d32 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002d40:	887a      	ldrh	r2, [r7, #2]
 8002d42:	2364      	movs	r3, #100	; 0x64
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4803      	ldr	r0, [pc, #12]	; (8002d54 <SPI_TxBuffer+0x30>)
 8002d48:	f005 f9c3 	bl	80080d2 <HAL_SPI_Transmit>
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20003aa0 	.word	0x20003aa0

08002d58 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8002d5e:	23ff      	movs	r3, #255	; 0xff
 8002d60:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002d62:	bf00      	nop
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <SPI_RxByte+0x34>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d1f8      	bne.n	8002d64 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002d72:	1dba      	adds	r2, r7, #6
 8002d74:	1df9      	adds	r1, r7, #7
 8002d76:	2364      	movs	r3, #100	; 0x64
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	4803      	ldr	r0, [pc, #12]	; (8002d8c <SPI_RxByte+0x34>)
 8002d7e:	f005 fae4 	bl	800834a <HAL_SPI_TransmitReceive>

	return data;
 8002d82:	79bb      	ldrb	r3, [r7, #6]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20003aa0 	.word	0x20003aa0

08002d90 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002d98:	f7ff ffde 	bl	8002d58 <SPI_RxByte>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	701a      	strb	r2, [r3, #0]
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <SD_ReadyWait+0x30>)
 8002db4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002db8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002dba:	f7ff ffcd 	bl	8002d58 <SPI_RxByte>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	2bff      	cmp	r3, #255	; 0xff
 8002dc6:	d003      	beq.n	8002dd0 <SD_ReadyWait+0x24>
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <SD_ReadyWait+0x30>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f4      	bne.n	8002dba <SD_ReadyWait+0xe>

	return res;
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20003982 	.word	0x20003982

08002de0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8002de6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002dea:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002dec:	f7ff ff72 	bl	8002cd4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	e005      	b.n	8002e02 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8002df6:	20ff      	movs	r0, #255	; 0xff
 8002df8:	f7ff ff7a 	bl	8002cf0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	ddf6      	ble.n	8002df6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002e08:	f7ff ff56 	bl	8002cb8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002e0c:	2340      	movs	r3, #64	; 0x40
 8002e0e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8002e20:	2395      	movs	r3, #149	; 0x95
 8002e22:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8002e24:	463b      	mov	r3, r7
 8002e26:	2106      	movs	r1, #6
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff7b 	bl	8002d24 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8002e2e:	e002      	b.n	8002e36 <SD_PowerOn+0x56>
	{
		cnt--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8002e36:	f7ff ff8f 	bl	8002d58 <SPI_RxByte>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d002      	beq.n	8002e46 <SD_PowerOn+0x66>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f4      	bne.n	8002e30 <SD_PowerOn+0x50>
	}

	DESELECT();
 8002e46:	f7ff ff45 	bl	8002cd4 <DESELECT>
	SPI_TxByte(0XFF);
 8002e4a:	20ff      	movs	r0, #255	; 0xff
 8002e4c:	f7ff ff50 	bl	8002cf0 <SPI_TxByte>

	PowerFlag = 1;
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <SD_PowerOn+0x80>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20003985 	.word	0x20003985

08002e64 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <SD_PowerOff+0x14>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	20003985 	.word	0x20003985

08002e7c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <SD_CheckPower+0x14>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20003985 	.word	0x20003985

08002e94 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <SD_RxDataBlock+0x58>)
 8002ea0:	22c8      	movs	r2, #200	; 0xc8
 8002ea2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002ea4:	f7ff ff58 	bl	8002d58 <SPI_RxByte>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2bff      	cmp	r3, #255	; 0xff
 8002eb0:	d103      	bne.n	8002eba <SD_RxDataBlock+0x26>
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <SD_RxDataBlock+0x58>)
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f4      	bne.n	8002ea4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	2bfe      	cmp	r3, #254	; 0xfe
 8002ebe:	d001      	beq.n	8002ec4 <SD_RxDataBlock+0x30>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e00f      	b.n	8002ee4 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ff60 	bl	8002d90 <SPI_RxBytePtr>
	} while(len--);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	1e5a      	subs	r2, r3, #1
 8002ed4:	603a      	str	r2, [r7, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f4      	bne.n	8002ec4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8002eda:	f7ff ff3d 	bl	8002d58 <SPI_RxByte>
	SPI_RxByte();
 8002ede:	f7ff ff3b 	bl	8002d58 <SPI_RxByte>

	return TRUE;
 8002ee2:	2301      	movs	r3, #1
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20003980 	.word	0x20003980

08002ef0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002f00:	f7ff ff54 	bl	8002dac <SD_ReadyWait>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2bff      	cmp	r3, #255	; 0xff
 8002f08:	d001      	beq.n	8002f0e <SD_TxDataBlock+0x1e>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e02f      	b.n	8002f6e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff feed 	bl	8002cf0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	2bfd      	cmp	r3, #253	; 0xfd
 8002f1a:	d020      	beq.n	8002f5e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8002f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff feff 	bl	8002d24 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8002f26:	f7ff ff17 	bl	8002d58 <SPI_RxByte>
		SPI_RxByte();
 8002f2a:	f7ff ff15 	bl	8002d58 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8002f2e:	e00b      	b.n	8002f48 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8002f30:	f7ff ff12 	bl	8002d58 <SPI_RxByte>
 8002f34:	4603      	mov	r3, r0
 8002f36:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	d006      	beq.n	8002f50 <SD_TxDataBlock+0x60>
			i++;
 8002f42:	7bbb      	ldrb	r3, [r7, #14]
 8002f44:	3301      	adds	r3, #1
 8002f46:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8002f48:	7bbb      	ldrb	r3, [r7, #14]
 8002f4a:	2b40      	cmp	r3, #64	; 0x40
 8002f4c:	d9f0      	bls.n	8002f30 <SD_TxDataBlock+0x40>
 8002f4e:	e000      	b.n	8002f52 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8002f50:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8002f52:	bf00      	nop
 8002f54:	f7ff ff00 	bl	8002d58 <SPI_RxByte>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0fa      	beq.n	8002f54 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d101      	bne.n	8002f6c <SD_TxDataBlock+0x7c>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <SD_TxDataBlock+0x7e>

	return FALSE;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	6039      	str	r1, [r7, #0]
 8002f80:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002f82:	f7ff ff13 	bl	8002dac <SD_ReadyWait>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2bff      	cmp	r3, #255	; 0xff
 8002f8a:	d001      	beq.n	8002f90 <SD_SendCmd+0x1a>
 8002f8c:	23ff      	movs	r3, #255	; 0xff
 8002f8e:	e042      	b.n	8003016 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff feac 	bl	8002cf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	0e1b      	lsrs	r3, r3, #24
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fea6 	bl	8002cf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	0c1b      	lsrs	r3, r3, #16
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fea0 	bl	8002cf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fe9a 	bl	8002cf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fe95 	bl	8002cf0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	d102      	bne.n	8002fd2 <SD_SendCmd+0x5c>
 8002fcc:	2395      	movs	r3, #149	; 0x95
 8002fce:	73fb      	strb	r3, [r7, #15]
 8002fd0:	e007      	b.n	8002fe2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	2b48      	cmp	r3, #72	; 0x48
 8002fd6:	d102      	bne.n	8002fde <SD_SendCmd+0x68>
 8002fd8:	2387      	movs	r3, #135	; 0x87
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	e001      	b.n	8002fe2 <SD_SendCmd+0x6c>
	else crc = 1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fe83 	bl	8002cf0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	2b4c      	cmp	r3, #76	; 0x4c
 8002fee:	d101      	bne.n	8002ff4 <SD_SendCmd+0x7e>
 8002ff0:	f7ff feb2 	bl	8002d58 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002ff4:	230a      	movs	r3, #10
 8002ff6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002ff8:	f7ff feae 	bl	8002d58 <SPI_RxByte>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8003000:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003004:	2b00      	cmp	r3, #0
 8003006:	da05      	bge.n	8003014 <SD_SendCmd+0x9e>
 8003008:	7bbb      	ldrb	r3, [r7, #14]
 800300a:	3b01      	subs	r3, #1
 800300c:	73bb      	strb	r3, [r7, #14]
 800300e:	7bbb      	ldrb	r3, [r7, #14]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f1      	bne.n	8002ff8 <SD_SendCmd+0x82>

	return res;
 8003014:	7b7b      	ldrb	r3, [r7, #13]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <SD_disk_initialize+0x14>
 8003030:	2301      	movs	r3, #1
 8003032:	e0d1      	b.n	80031d8 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <SD_disk_initialize+0x1c0>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <SD_disk_initialize+0x2a>
 8003042:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <SD_disk_initialize+0x1c0>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	e0c6      	b.n	80031d8 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800304a:	f7ff fec9 	bl	8002de0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800304e:	f7ff fe33 	bl	8002cb8 <SELECT>

	/* check disk type */
	type = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8003056:	2100      	movs	r1, #0
 8003058:	2040      	movs	r0, #64	; 0x40
 800305a:	f7ff ff8c 	bl	8002f76 <SD_SendCmd>
 800305e:	4603      	mov	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	f040 80a1 	bne.w	80031a8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8003066:	4b5f      	ldr	r3, [pc, #380]	; (80031e4 <SD_disk_initialize+0x1c4>)
 8003068:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800306c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800306e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003072:	2048      	movs	r0, #72	; 0x48
 8003074:	f7ff ff7f 	bl	8002f76 <SD_SendCmd>
 8003078:	4603      	mov	r3, r0
 800307a:	2b01      	cmp	r3, #1
 800307c:	d155      	bne.n	800312a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
 8003082:	e00c      	b.n	800309e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8003084:	7bfc      	ldrb	r4, [r7, #15]
 8003086:	f7ff fe67 	bl	8002d58 <SPI_RxByte>
 800308a:	4603      	mov	r3, r0
 800308c:	461a      	mov	r2, r3
 800308e:	f104 0310 	add.w	r3, r4, #16
 8003092:	443b      	add	r3, r7
 8003094:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	3301      	adds	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d9ef      	bls.n	8003084 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80030a4:	7abb      	ldrb	r3, [r7, #10]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d17e      	bne.n	80031a8 <SD_disk_initialize+0x188>
 80030aa:	7afb      	ldrb	r3, [r7, #11]
 80030ac:	2baa      	cmp	r3, #170	; 0xaa
 80030ae:	d17b      	bne.n	80031a8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80030b0:	2100      	movs	r1, #0
 80030b2:	2077      	movs	r0, #119	; 0x77
 80030b4:	f7ff ff5f 	bl	8002f76 <SD_SendCmd>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d807      	bhi.n	80030ce <SD_disk_initialize+0xae>
 80030be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80030c2:	2069      	movs	r0, #105	; 0x69
 80030c4:	f7ff ff57 	bl	8002f76 <SD_SendCmd>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d004      	beq.n	80030d8 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80030ce:	4b45      	ldr	r3, [pc, #276]	; (80031e4 <SD_disk_initialize+0x1c4>)
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1ec      	bne.n	80030b0 <SD_disk_initialize+0x90>
 80030d6:	e000      	b.n	80030da <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80030d8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80030da:	4b42      	ldr	r3, [pc, #264]	; (80031e4 <SD_disk_initialize+0x1c4>)
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d062      	beq.n	80031a8 <SD_disk_initialize+0x188>
 80030e2:	2100      	movs	r1, #0
 80030e4:	207a      	movs	r0, #122	; 0x7a
 80030e6:	f7ff ff46 	bl	8002f76 <SD_SendCmd>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d15b      	bne.n	80031a8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	e00c      	b.n	8003110 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80030f6:	7bfc      	ldrb	r4, [r7, #15]
 80030f8:	f7ff fe2e 	bl	8002d58 <SPI_RxByte>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	f104 0310 	add.w	r3, r4, #16
 8003104:	443b      	add	r3, r7
 8003106:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	3301      	adds	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d9ef      	bls.n	80030f6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8003116:	7a3b      	ldrb	r3, [r7, #8]
 8003118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <SD_disk_initialize+0x104>
 8003120:	230c      	movs	r3, #12
 8003122:	e000      	b.n	8003126 <SD_disk_initialize+0x106>
 8003124:	2304      	movs	r3, #4
 8003126:	73bb      	strb	r3, [r7, #14]
 8003128:	e03e      	b.n	80031a8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800312a:	2100      	movs	r1, #0
 800312c:	2077      	movs	r0, #119	; 0x77
 800312e:	f7ff ff22 	bl	8002f76 <SD_SendCmd>
 8003132:	4603      	mov	r3, r0
 8003134:	2b01      	cmp	r3, #1
 8003136:	d808      	bhi.n	800314a <SD_disk_initialize+0x12a>
 8003138:	2100      	movs	r1, #0
 800313a:	2069      	movs	r0, #105	; 0x69
 800313c:	f7ff ff1b 	bl	8002f76 <SD_SendCmd>
 8003140:	4603      	mov	r3, r0
 8003142:	2b01      	cmp	r3, #1
 8003144:	d801      	bhi.n	800314a <SD_disk_initialize+0x12a>
 8003146:	2302      	movs	r3, #2
 8003148:	e000      	b.n	800314c <SD_disk_initialize+0x12c>
 800314a:	2301      	movs	r3, #1
 800314c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800314e:	7bbb      	ldrb	r3, [r7, #14]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d10e      	bne.n	8003172 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8003154:	2100      	movs	r1, #0
 8003156:	2077      	movs	r0, #119	; 0x77
 8003158:	f7ff ff0d 	bl	8002f76 <SD_SendCmd>
 800315c:	4603      	mov	r3, r0
 800315e:	2b01      	cmp	r3, #1
 8003160:	d80e      	bhi.n	8003180 <SD_disk_initialize+0x160>
 8003162:	2100      	movs	r1, #0
 8003164:	2069      	movs	r0, #105	; 0x69
 8003166:	f7ff ff06 	bl	8002f76 <SD_SendCmd>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d107      	bne.n	8003180 <SD_disk_initialize+0x160>
 8003170:	e00c      	b.n	800318c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8003172:	2100      	movs	r1, #0
 8003174:	2041      	movs	r0, #65	; 0x41
 8003176:	f7ff fefe 	bl	8002f76 <SD_SendCmd>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8003180:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <SD_disk_initialize+0x1c4>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e2      	bne.n	800314e <SD_disk_initialize+0x12e>
 8003188:	e000      	b.n	800318c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800318a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800318c:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <SD_disk_initialize+0x1c4>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <SD_disk_initialize+0x184>
 8003194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003198:	2050      	movs	r0, #80	; 0x50
 800319a:	f7ff feec 	bl	8002f76 <SD_SendCmd>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <SD_disk_initialize+0x188>
 80031a4:	2300      	movs	r3, #0
 80031a6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80031a8:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <SD_disk_initialize+0x1c8>)
 80031aa:	7bbb      	ldrb	r3, [r7, #14]
 80031ac:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80031ae:	f7ff fd91 	bl	8002cd4 <DESELECT>
	SPI_RxByte();
 80031b2:	f7ff fdd1 	bl	8002d58 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80031b6:	7bbb      	ldrb	r3, [r7, #14]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <SD_disk_initialize+0x1c0>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <SD_disk_initialize+0x1c0>)
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	e001      	b.n	80031d2 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80031ce:	f7ff fe49 	bl	8002e64 <SD_PowerOff>
	}

	return Stat;
 80031d2:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <SD_disk_initialize+0x1c0>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b2db      	uxtb	r3, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd90      	pop	{r4, r7, pc}
 80031e0:	20000004 	.word	0x20000004
 80031e4:	20003980 	.word	0x20003980
 80031e8:	20003984 	.word	0x20003984

080031ec <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <SD_disk_status+0x14>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e002      	b.n	8003206 <SD_disk_status+0x1a>
	return Stat;
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <SD_disk_status+0x28>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b2db      	uxtb	r3, r3
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000004 	.word	0x20000004

08003218 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	607a      	str	r2, [r7, #4]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4603      	mov	r3, r0
 8003226:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d102      	bne.n	8003234 <SD_disk_read+0x1c>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <SD_disk_read+0x20>
 8003234:	2304      	movs	r3, #4
 8003236:	e051      	b.n	80032dc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <SD_disk_read+0xcc>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <SD_disk_read+0x32>
 8003246:	2303      	movs	r3, #3
 8003248:	e048      	b.n	80032dc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800324a:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <SD_disk_read+0xd0>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d102      	bne.n	800325c <SD_disk_read+0x44>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	025b      	lsls	r3, r3, #9
 800325a:	607b      	str	r3, [r7, #4]

	SELECT();
 800325c:	f7ff fd2c 	bl	8002cb8 <SELECT>

	if (count == 1)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d111      	bne.n	800328a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	2051      	movs	r0, #81	; 0x51
 800326a:	f7ff fe84 	bl	8002f76 <SD_SendCmd>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d129      	bne.n	80032c8 <SD_disk_read+0xb0>
 8003274:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003278:	68b8      	ldr	r0, [r7, #8]
 800327a:	f7ff fe0b 	bl	8002e94 <SD_RxDataBlock>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d021      	beq.n	80032c8 <SD_disk_read+0xb0>
 8003284:	2300      	movs	r3, #0
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	e01e      	b.n	80032c8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	2052      	movs	r0, #82	; 0x52
 800328e:	f7ff fe72 	bl	8002f76 <SD_SendCmd>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d117      	bne.n	80032c8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8003298:	f44f 7100 	mov.w	r1, #512	; 0x200
 800329c:	68b8      	ldr	r0, [r7, #8]
 800329e:	f7ff fdf9 	bl	8002e94 <SD_RxDataBlock>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <SD_disk_read+0xa6>
				buff += 512;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80032ae:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ed      	bne.n	8003298 <SD_disk_read+0x80>
 80032bc:	e000      	b.n	80032c0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80032be:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80032c0:	2100      	movs	r1, #0
 80032c2:	204c      	movs	r0, #76	; 0x4c
 80032c4:	f7ff fe57 	bl	8002f76 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80032c8:	f7ff fd04 	bl	8002cd4 <DESELECT>
	SPI_RxByte();
 80032cc:	f7ff fd44 	bl	8002d58 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000004 	.word	0x20000004
 80032e8:	20003984 	.word	0x20003984

080032ec <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4603      	mov	r3, r0
 80032fa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <SD_disk_write+0x1c>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <SD_disk_write+0x20>
 8003308:	2304      	movs	r3, #4
 800330a:	e06b      	b.n	80033e4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800330c:	4b37      	ldr	r3, [pc, #220]	; (80033ec <SD_disk_write+0x100>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <SD_disk_write+0x32>
 800331a:	2303      	movs	r3, #3
 800331c:	e062      	b.n	80033e4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800331e:	4b33      	ldr	r3, [pc, #204]	; (80033ec <SD_disk_write+0x100>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <SD_disk_write+0x44>
 800332c:	2302      	movs	r3, #2
 800332e:	e059      	b.n	80033e4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8003330:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <SD_disk_write+0x104>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <SD_disk_write+0x56>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	025b      	lsls	r3, r3, #9
 8003340:	607b      	str	r3, [r7, #4]

	SELECT();
 8003342:	f7ff fcb9 	bl	8002cb8 <SELECT>

	if (count == 1)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d110      	bne.n	800336e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	2058      	movs	r0, #88	; 0x58
 8003350:	f7ff fe11 	bl	8002f76 <SD_SendCmd>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d13a      	bne.n	80033d0 <SD_disk_write+0xe4>
 800335a:	21fe      	movs	r1, #254	; 0xfe
 800335c:	68b8      	ldr	r0, [r7, #8]
 800335e:	f7ff fdc7 	bl	8002ef0 <SD_TxDataBlock>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d033      	beq.n	80033d0 <SD_disk_write+0xe4>
			count = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	e030      	b.n	80033d0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <SD_disk_write+0x104>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800337a:	2100      	movs	r1, #0
 800337c:	2077      	movs	r0, #119	; 0x77
 800337e:	f7ff fdfa 	bl	8002f76 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003382:	6839      	ldr	r1, [r7, #0]
 8003384:	2057      	movs	r0, #87	; 0x57
 8003386:	f7ff fdf6 	bl	8002f76 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	2059      	movs	r0, #89	; 0x59
 800338e:	f7ff fdf2 	bl	8002f76 <SD_SendCmd>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d11b      	bne.n	80033d0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003398:	21fc      	movs	r1, #252	; 0xfc
 800339a:	68b8      	ldr	r0, [r7, #8]
 800339c:	f7ff fda8 	bl	8002ef0 <SD_TxDataBlock>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <SD_disk_write+0xd0>
				buff += 512;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80033ac:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1ee      	bne.n	8003398 <SD_disk_write+0xac>
 80033ba:	e000      	b.n	80033be <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80033bc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80033be:	21fd      	movs	r1, #253	; 0xfd
 80033c0:	2000      	movs	r0, #0
 80033c2:	f7ff fd95 	bl	8002ef0 <SD_TxDataBlock>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <SD_disk_write+0xe4>
			{
				count = 1;
 80033cc:	2301      	movs	r3, #1
 80033ce:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80033d0:	f7ff fc80 	bl	8002cd4 <DESELECT>
	SPI_RxByte();
 80033d4:	f7ff fcc0 	bl	8002d58 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000004 	.word	0x20000004
 80033f0:	20003984 	.word	0x20003984

080033f4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b08b      	sub	sp, #44	; 0x2c
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	603a      	str	r2, [r7, #0]
 80033fe:	71fb      	strb	r3, [r7, #7]
 8003400:	460b      	mov	r3, r1
 8003402:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <SD_disk_ioctl+0x1e>
 800340e:	2304      	movs	r3, #4
 8003410:	e115      	b.n	800363e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8003418:	79bb      	ldrb	r3, [r7, #6]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d124      	bne.n	8003468 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d012      	beq.n	800344c <SD_disk_ioctl+0x58>
 8003426:	2b02      	cmp	r3, #2
 8003428:	dc1a      	bgt.n	8003460 <SD_disk_ioctl+0x6c>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <SD_disk_ioctl+0x40>
 800342e:	2b01      	cmp	r3, #1
 8003430:	d006      	beq.n	8003440 <SD_disk_ioctl+0x4c>
 8003432:	e015      	b.n	8003460 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8003434:	f7ff fd16 	bl	8002e64 <SD_PowerOff>
			res = RES_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800343e:	e0fc      	b.n	800363a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8003440:	f7ff fcce 	bl	8002de0 <SD_PowerOn>
			res = RES_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800344a:	e0f6      	b.n	800363a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	1c5c      	adds	r4, r3, #1
 8003450:	f7ff fd14 	bl	8002e7c <SD_CheckPower>
 8003454:	4603      	mov	r3, r0
 8003456:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8003458:	2300      	movs	r3, #0
 800345a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800345e:	e0ec      	b.n	800363a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8003460:	2304      	movs	r3, #4
 8003462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003466:	e0e8      	b.n	800363a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003468:	4b77      	ldr	r3, [pc, #476]	; (8003648 <SD_disk_ioctl+0x254>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <SD_disk_ioctl+0x86>
 8003476:	2303      	movs	r3, #3
 8003478:	e0e1      	b.n	800363e <SD_disk_ioctl+0x24a>

		SELECT();
 800347a:	f7ff fc1d 	bl	8002cb8 <SELECT>

		switch (ctrl)
 800347e:	79bb      	ldrb	r3, [r7, #6]
 8003480:	2b0d      	cmp	r3, #13
 8003482:	f200 80cb 	bhi.w	800361c <SD_disk_ioctl+0x228>
 8003486:	a201      	add	r2, pc, #4	; (adr r2, 800348c <SD_disk_ioctl+0x98>)
 8003488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348c:	08003587 	.word	0x08003587
 8003490:	080034c5 	.word	0x080034c5
 8003494:	08003577 	.word	0x08003577
 8003498:	0800361d 	.word	0x0800361d
 800349c:	0800361d 	.word	0x0800361d
 80034a0:	0800361d 	.word	0x0800361d
 80034a4:	0800361d 	.word	0x0800361d
 80034a8:	0800361d 	.word	0x0800361d
 80034ac:	0800361d 	.word	0x0800361d
 80034b0:	0800361d 	.word	0x0800361d
 80034b4:	0800361d 	.word	0x0800361d
 80034b8:	08003599 	.word	0x08003599
 80034bc:	080035bd 	.word	0x080035bd
 80034c0:	080035e1 	.word	0x080035e1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80034c4:	2100      	movs	r1, #0
 80034c6:	2049      	movs	r0, #73	; 0x49
 80034c8:	f7ff fd55 	bl	8002f76 <SD_SendCmd>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 80a8 	bne.w	8003624 <SD_disk_ioctl+0x230>
 80034d4:	f107 030c 	add.w	r3, r7, #12
 80034d8:	2110      	movs	r1, #16
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fcda 	bl	8002e94 <SD_RxDataBlock>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 809e 	beq.w	8003624 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80034e8:	7b3b      	ldrb	r3, [r7, #12]
 80034ea:	099b      	lsrs	r3, r3, #6
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d10e      	bne.n	8003510 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80034f2:	7d7b      	ldrb	r3, [r7, #21]
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	7d3b      	ldrb	r3, [r7, #20]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	4413      	add	r3, r2
 8003500:	b29b      	uxth	r3, r3
 8003502:	3301      	adds	r3, #1
 8003504:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8003506:	8bfb      	ldrh	r3, [r7, #30]
 8003508:	029a      	lsls	r2, r3, #10
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e02e      	b.n	800356e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003510:	7c7b      	ldrb	r3, [r7, #17]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	b2da      	uxtb	r2, r3
 8003518:	7dbb      	ldrb	r3, [r7, #22]
 800351a:	09db      	lsrs	r3, r3, #7
 800351c:	b2db      	uxtb	r3, r3
 800351e:	4413      	add	r3, r2
 8003520:	b2da      	uxtb	r2, r3
 8003522:	7d7b      	ldrb	r3, [r7, #21]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f003 0306 	and.w	r3, r3, #6
 800352c:	b2db      	uxtb	r3, r3
 800352e:	4413      	add	r3, r2
 8003530:	b2db      	uxtb	r3, r3
 8003532:	3302      	adds	r3, #2
 8003534:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003538:	7d3b      	ldrb	r3, [r7, #20]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	b2db      	uxtb	r3, r3
 800353e:	b29a      	uxth	r2, r3
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	b29b      	uxth	r3, r3
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	b29b      	uxth	r3, r3
 8003548:	4413      	add	r3, r2
 800354a:	b29a      	uxth	r2, r3
 800354c:	7cbb      	ldrb	r3, [r7, #18]
 800354e:	029b      	lsls	r3, r3, #10
 8003550:	b29b      	uxth	r3, r3
 8003552:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003556:	b29b      	uxth	r3, r3
 8003558:	4413      	add	r3, r2
 800355a:	b29b      	uxth	r3, r3
 800355c:	3301      	adds	r3, #1
 800355e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8003560:	8bfa      	ldrh	r2, [r7, #30]
 8003562:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003566:	3b09      	subs	r3, #9
 8003568:	409a      	lsls	r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8003574:	e056      	b.n	8003624 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800357c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003584:	e055      	b.n	8003632 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8003586:	f7ff fc11 	bl	8002dac <SD_ReadyWait>
 800358a:	4603      	mov	r3, r0
 800358c:	2bff      	cmp	r3, #255	; 0xff
 800358e:	d14b      	bne.n	8003628 <SD_disk_ioctl+0x234>
 8003590:	2300      	movs	r3, #0
 8003592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003596:	e047      	b.n	8003628 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003598:	2100      	movs	r1, #0
 800359a:	2049      	movs	r0, #73	; 0x49
 800359c:	f7ff fceb 	bl	8002f76 <SD_SendCmd>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d142      	bne.n	800362c <SD_disk_ioctl+0x238>
 80035a6:	2110      	movs	r1, #16
 80035a8:	6a38      	ldr	r0, [r7, #32]
 80035aa:	f7ff fc73 	bl	8002e94 <SD_RxDataBlock>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d03b      	beq.n	800362c <SD_disk_ioctl+0x238>
 80035b4:	2300      	movs	r3, #0
 80035b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80035ba:	e037      	b.n	800362c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80035bc:	2100      	movs	r1, #0
 80035be:	204a      	movs	r0, #74	; 0x4a
 80035c0:	f7ff fcd9 	bl	8002f76 <SD_SendCmd>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d132      	bne.n	8003630 <SD_disk_ioctl+0x23c>
 80035ca:	2110      	movs	r1, #16
 80035cc:	6a38      	ldr	r0, [r7, #32]
 80035ce:	f7ff fc61 	bl	8002e94 <SD_RxDataBlock>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d02b      	beq.n	8003630 <SD_disk_ioctl+0x23c>
 80035d8:	2300      	movs	r3, #0
 80035da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80035de:	e027      	b.n	8003630 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80035e0:	2100      	movs	r1, #0
 80035e2:	207a      	movs	r0, #122	; 0x7a
 80035e4:	f7ff fcc7 	bl	8002f76 <SD_SendCmd>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d116      	bne.n	800361c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80035f4:	e00b      	b.n	800360e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80035f6:	6a3c      	ldr	r4, [r7, #32]
 80035f8:	1c63      	adds	r3, r4, #1
 80035fa:	623b      	str	r3, [r7, #32]
 80035fc:	f7ff fbac 	bl	8002d58 <SPI_RxByte>
 8003600:	4603      	mov	r3, r0
 8003602:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003604:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003608:	3301      	adds	r3, #1
 800360a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800360e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003612:	2b03      	cmp	r3, #3
 8003614:	d9ef      	bls.n	80035f6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800361c:	2304      	movs	r3, #4
 800361e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003622:	e006      	b.n	8003632 <SD_disk_ioctl+0x23e>
			break;
 8003624:	bf00      	nop
 8003626:	e004      	b.n	8003632 <SD_disk_ioctl+0x23e>
			break;
 8003628:	bf00      	nop
 800362a:	e002      	b.n	8003632 <SD_disk_ioctl+0x23e>
			break;
 800362c:	bf00      	nop
 800362e:	e000      	b.n	8003632 <SD_disk_ioctl+0x23e>
			break;
 8003630:	bf00      	nop
		}

		DESELECT();
 8003632:	f7ff fb4f 	bl	8002cd4 <DESELECT>
		SPI_RxByte();
 8003636:	f7ff fb8f 	bl	8002d58 <SPI_RxByte>
	}

	return res;
 800363a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800363e:	4618      	mov	r0, r3
 8003640:	372c      	adds	r7, #44	; 0x2c
 8003642:	46bd      	mov	sp, r7
 8003644:	bd90      	pop	{r4, r7, pc}
 8003646:	bf00      	nop
 8003648:	20000004 	.word	0x20000004

0800364c <lsm6ds3tr_c_read_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	461a      	mov	r2, r3
 8003658:	460b      	mov	r3, r1
 800365a:	72fb      	strb	r3, [r7, #11]
 800365c:	4613      	mov	r3, r2
 800365e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685c      	ldr	r4, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	68d8      	ldr	r0, [r3, #12]
 8003668:	893b      	ldrh	r3, [r7, #8]
 800366a:	7af9      	ldrb	r1, [r7, #11]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	47a0      	blx	r4
 8003670:	6178      	str	r0, [r7, #20]

  return ret;
 8003672:	697b      	ldr	r3, [r7, #20]
}
 8003674:	4618      	mov	r0, r3
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	bd90      	pop	{r4, r7, pc}

0800367c <lsm6ds3tr_c_write_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	461a      	mov	r2, r3
 8003688:	460b      	mov	r3, r1
 800368a:	72fb      	strb	r3, [r7, #11]
 800368c:	4613      	mov	r3, r2
 800368e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681c      	ldr	r4, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68d8      	ldr	r0, [r3, #12]
 8003698:	893b      	ldrh	r3, [r7, #8]
 800369a:	7af9      	ldrb	r1, [r7, #11]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	47a0      	blx	r4
 80036a0:	6178      	str	r0, [r7, #20]

  return ret;
 80036a2:	697b      	ldr	r3, [r7, #20]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd90      	pop	{r4, r7, pc}

080036ac <lsm6ds3tr_c_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6ds3tr_c_from_fs2g_to_mg(int16_t lsb)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 80036b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80036d8 <lsm6ds3tr_c_from_fs2g_to_mg+0x2c>
 80036c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80036ca:	eeb0 0a67 	vmov.f32	s0, s15
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	3d79db23 	.word	0x3d79db23

080036dc <lsm6ds3tr_c_from_fs500dps_to_mdps>:
{
  return ((float_t)lsb * 8.750f);
}

float_t lsm6ds3tr_c_from_fs500dps_to_mdps(int16_t lsb)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 17.50f);
 80036e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003708 <lsm6ds3tr_c_from_fs500dps_to_mdps+0x2c>
 80036f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80036fa:	eeb0 0a67 	vmov.f32	s0, s15
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	418c0000 	.word	0x418c0000

0800370c <lsm6ds3tr_c_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_xl_t val)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003718:	f107 0208 	add.w	r2, r7, #8
 800371c:	2301      	movs	r3, #1
 800371e:	2110      	movs	r1, #16
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ff93 	bl	800364c <lsm6ds3tr_c_read_reg>
 8003726:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <lsm6ds3tr_c_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	b2da      	uxtb	r2, r3
 8003736:	7a3b      	ldrb	r3, [r7, #8]
 8003738:	f362 0383 	bfi	r3, r2, #2, #2
 800373c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 800373e:	f107 0208 	add.w	r2, r7, #8
 8003742:	2301      	movs	r3, #1
 8003744:	2110      	movs	r1, #16
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ff98 	bl	800367c <lsm6ds3tr_c_write_reg>
 800374c:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800374e:	68fb      	ldr	r3, [r7, #12]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <lsm6ds3tr_c_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_xl_t val)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003764:	f107 0208 	add.w	r2, r7, #8
 8003768:	2301      	movs	r3, #1
 800376a:	2110      	movs	r1, #16
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff6d 	bl	800364c <lsm6ds3tr_c_read_reg>
 8003772:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10f      	bne.n	800379a <lsm6ds3tr_c_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800377a:	78fb      	ldrb	r3, [r7, #3]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	b2da      	uxtb	r2, r3
 8003782:	7a3b      	ldrb	r3, [r7, #8]
 8003784:	f362 1307 	bfi	r3, r2, #4, #4
 8003788:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 800378a:	f107 0208 	add.w	r2, r7, #8
 800378e:	2301      	movs	r3, #1
 8003790:	2110      	movs	r1, #16
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ff72 	bl	800367c <lsm6ds3tr_c_write_reg>
 8003798:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800379a:	68fb      	ldr	r3, [r7, #12]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <lsm6ds3tr_c_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_g_t val)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 80037b0:	f107 0208 	add.w	r2, r7, #8
 80037b4:	2301      	movs	r3, #1
 80037b6:	2111      	movs	r1, #17
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff ff47 	bl	800364c <lsm6ds3tr_c_read_reg>
 80037be:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10f      	bne.n	80037e6 <lsm6ds3tr_c_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	7a3b      	ldrb	r3, [r7, #8]
 80037d0:	f362 0343 	bfi	r3, r2, #1, #3
 80037d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 80037d6:	f107 0208 	add.w	r2, r7, #8
 80037da:	2301      	movs	r3, #1
 80037dc:	2111      	movs	r1, #17
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ff4c 	bl	800367c <lsm6ds3tr_c_write_reg>
 80037e4:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <lsm6ds3tr_c_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_g_t val)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 80037fc:	f107 0208 	add.w	r2, r7, #8
 8003800:	2301      	movs	r3, #1
 8003802:	2111      	movs	r1, #17
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff21 	bl	800364c <lsm6ds3tr_c_read_reg>
 800380a:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <lsm6ds3tr_c_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	b2da      	uxtb	r2, r3
 800381a:	7a3b      	ldrb	r3, [r7, #8]
 800381c:	f362 1307 	bfi	r3, r2, #4, #4
 8003820:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003822:	f107 0208 	add.w	r2, r7, #8
 8003826:	2301      	movs	r3, #1
 8003828:	2111      	movs	r1, #17
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff ff26 	bl	800367c <lsm6ds3tr_c_write_reg>
 8003830:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003832:	68fb      	ldr	r3, [r7, #12]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <lsm6ds3tr_c_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_block_data_update_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8003848:	f107 0208 	add.w	r2, r7, #8
 800384c:	2301      	movs	r3, #1
 800384e:	2112      	movs	r1, #18
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff fefb 	bl	800364c <lsm6ds3tr_c_read_reg>
 8003856:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10f      	bne.n	800387e <lsm6ds3tr_c_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	b2da      	uxtb	r2, r3
 8003866:	7a3b      	ldrb	r3, [r7, #8]
 8003868:	f362 1386 	bfi	r3, r2, #6, #1
 800386c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 800386e:	f107 0208 	add.w	r2, r7, #8
 8003872:	2301      	movs	r3, #1
 8003874:	2112      	movs	r1, #18
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ff00 	bl	800367c <lsm6ds3tr_c_write_reg>
 800387c:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800387e:	68fb      	ldr	r3, [r7, #12]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <lsm6ds3tr_c_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_G, buff, 6);
 8003892:	f107 020c 	add.w	r2, r7, #12
 8003896:	2306      	movs	r3, #6
 8003898:	2122      	movs	r1, #34	; 0x22
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff fed6 	bl	800364c <lsm6ds3tr_c_read_reg>
 80038a0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80038a2:	7b7b      	ldrb	r3, [r7, #13]
 80038a4:	b21a      	sxth	r2, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	7b3b      	ldrb	r3, [r7, #12]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	4413      	add	r3, r2
 80038bc:	b29b      	uxth	r3, r3
 80038be:	b21a      	sxth	r2, r3
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	3302      	adds	r3, #2
 80038ca:	b212      	sxth	r2, r2
 80038cc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	3302      	adds	r3, #2
 80038d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	b29a      	uxth	r2, r3
 80038dc:	7bbb      	ldrb	r3, [r7, #14]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	3302      	adds	r3, #2
 80038e8:	b212      	sxth	r2, r2
 80038ea:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80038ec:	7c7a      	ldrb	r2, [r7, #17]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	3304      	adds	r3, #4
 80038f2:	b212      	sxth	r2, r2
 80038f4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	3304      	adds	r3, #4
 80038fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	b29a      	uxth	r2, r3
 8003904:	7c3b      	ldrb	r3, [r7, #16]
 8003906:	b29b      	uxth	r3, r3
 8003908:	4413      	add	r3, r2
 800390a:	b29a      	uxth	r2, r3
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	3304      	adds	r3, #4
 8003910:	b212      	sxth	r2, r2
 8003912:	801a      	strh	r2, [r3, #0]

  return ret;
 8003914:	697b      	ldr	r3, [r7, #20]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <lsm6ds3tr_c_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_acceleration_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_XL, buff, 6);
 8003928:	f107 020c 	add.w	r2, r7, #12
 800392c:	2306      	movs	r3, #6
 800392e:	2128      	movs	r1, #40	; 0x28
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fe8b 	bl	800364c <lsm6ds3tr_c_read_reg>
 8003936:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003938:	7b7b      	ldrb	r3, [r7, #13]
 800393a:	b21a      	sxth	r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003946:	b29b      	uxth	r3, r3
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	b29a      	uxth	r2, r3
 800394c:	7b3b      	ldrb	r3, [r7, #12]
 800394e:	b29b      	uxth	r3, r3
 8003950:	4413      	add	r3, r2
 8003952:	b29b      	uxth	r3, r3
 8003954:	b21a      	sxth	r2, r3
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800395a:	7bfa      	ldrb	r2, [r7, #15]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	3302      	adds	r3, #2
 8003960:	b212      	sxth	r2, r2
 8003962:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	3302      	adds	r3, #2
 8003968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800396c:	b29b      	uxth	r3, r3
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	b29a      	uxth	r2, r3
 8003972:	7bbb      	ldrb	r3, [r7, #14]
 8003974:	b29b      	uxth	r3, r3
 8003976:	4413      	add	r3, r2
 8003978:	b29a      	uxth	r2, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	3302      	adds	r3, #2
 800397e:	b212      	sxth	r2, r2
 8003980:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003982:	7c7a      	ldrb	r2, [r7, #17]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	3304      	adds	r3, #4
 8003988:	b212      	sxth	r2, r2
 800398a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	3304      	adds	r3, #4
 8003990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003994:	b29b      	uxth	r3, r3
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	b29a      	uxth	r2, r3
 800399a:	7c3b      	ldrb	r3, [r7, #16]
 800399c:	b29b      	uxth	r3, r3
 800399e:	4413      	add	r3, r2
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	3304      	adds	r3, #4
 80039a6:	b212      	sxth	r2, r2
 80039a8:	801a      	strh	r2, [r3, #0]

  return ret;
 80039aa:	697b      	ldr	r3, [r7, #20]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <lsm6ds3tr_c_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_WHO_AM_I, buff, 1);
 80039be:	2301      	movs	r3, #1
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	210f      	movs	r1, #15
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff fe41 	bl	800364c <lsm6ds3tr_c_read_reg>
 80039ca:	60f8      	str	r0, [r7, #12]

  return ret;
 80039cc:	68fb      	ldr	r3, [r7, #12]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <lsm6ds3tr_c_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 80039e2:	f107 0208 	add.w	r2, r7, #8
 80039e6:	2301      	movs	r3, #1
 80039e8:	2112      	movs	r1, #18
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fe2e 	bl	800364c <lsm6ds3tr_c_read_reg>
 80039f0:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10f      	bne.n	8003a18 <lsm6ds3tr_c_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	7a3b      	ldrb	r3, [r7, #8]
 8003a02:	f362 0300 	bfi	r3, r2, #0, #1
 8003a06:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8003a08:	f107 0208 	add.w	r2, r7, #8
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	2112      	movs	r1, #18
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff fe33 	bl	800367c <lsm6ds3tr_c_write_reg>
 8003a16:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8003a18:	68fb      	ldr	r3, [r7, #12]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <lsm6ds3tr_c_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b084      	sub	sp, #16
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8003a2c:	f107 0208 	add.w	r2, r7, #8
 8003a30:	2301      	movs	r3, #1
 8003a32:	2112      	movs	r1, #18
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fe09 	bl	800364c <lsm6ds3tr_c_read_reg>
 8003a3a:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 8003a3c:	7a3b      	ldrb	r3, [r7, #8]
 8003a3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	701a      	strb	r2, [r3, #0]

  return ret;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <lsm6ds3tr_c_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_bw0_xl_t val)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003a60:	f107 0208 	add.w	r2, r7, #8
 8003a64:	2301      	movs	r3, #1
 8003a66:	2110      	movs	r1, #16
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff fdef 	bl	800364c <lsm6ds3tr_c_read_reg>
 8003a6e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10f      	bne.n	8003a96 <lsm6ds3tr_c_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	7a3b      	ldrb	r3, [r7, #8]
 8003a80:	f362 0300 	bfi	r3, r2, #0, #1
 8003a84:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003a86:	f107 0208 	add.w	r2, r7, #8
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	2110      	movs	r1, #16
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff fdf4 	bl	800367c <lsm6ds3tr_c_write_reg>
 8003a94:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003a96:	68fb      	ldr	r3, [r7, #12]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <lsm6ds3tr_c_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_input_composite_t val)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 8003aac:	f107 0208 	add.w	r2, r7, #8
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	2117      	movs	r1, #23
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fdc9 	bl	800364c <lsm6ds3tr_c_read_reg>
 8003aba:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d120      	bne.n	8003b04 <lsm6ds3tr_c_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	7a3b      	ldrb	r3, [r7, #8]
 8003ace:	f362 03c3 	bfi	r3, r2, #3, #1
 8003ad2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	7a3b      	ldrb	r3, [r7, #8]
 8003ade:	f362 1346 	bfi	r3, r2, #5, #2
 8003ae2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8003ae4:	7a3b      	ldrb	r3, [r7, #8]
 8003ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aea:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8003aec:	7a3b      	ldrb	r3, [r7, #8]
 8003aee:	f36f 0382 	bfc	r3, #2, #1
 8003af2:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 8003af4:	f107 0208 	add.w	r2, r7, #8
 8003af8:	2301      	movs	r3, #1
 8003afa:	2117      	movs	r1, #23
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff fdbd 	bl	800367c <lsm6ds3tr_c_write_reg>
 8003b02:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8003b04:	68fb      	ldr	r3, [r7, #12]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <lsm6ds3tr_c_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_band_pass_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_lpf1_sel_g_t val)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  lsm6ds3tr_c_ctrl6_c_t ctrl6_c;
  lsm6ds3tr_c_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 8003b1a:	f107 0208 	add.w	r2, r7, #8
 8003b1e:	2301      	movs	r3, #1
 8003b20:	2116      	movs	r1, #22
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff fd92 	bl	800364c <lsm6ds3tr_c_read_reg>
 8003b28:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl7_g, 1);

  if (ret == 0)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d157      	bne.n	8003be0 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	7a3b      	ldrb	r3, [r7, #8]
 8003b3c:	f362 1305 	bfi	r3, r2, #4, #2
 8003b40:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	09db      	lsrs	r3, r3, #7
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	7a3b      	ldrb	r3, [r7, #8]
 8003b50:	f362 1386 	bfi	r3, r2, #6, #1
 8003b54:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 8003b56:	f107 0208 	add.w	r2, r7, #8
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	2116      	movs	r1, #22
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fd8c 	bl	800367c <lsm6ds3tr_c_write_reg>
 8003b64:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl7_g, 1);

    if (ret == 0)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d139      	bne.n	8003be0 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
    {
      ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 8003b6c:	f107 020c 	add.w	r2, r7, #12
 8003b70:	2301      	movs	r3, #1
 8003b72:	2115      	movs	r1, #21
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff fd69 	bl	800364c <lsm6ds3tr_c_read_reg>
 8003b7a:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl6_c, 1);

      if (ret == 0)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d12e      	bne.n	8003be0 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	7b3b      	ldrb	r3, [r7, #12]
 8003b8c:	f362 0301 	bfi	r3, r2, #0, #2
 8003b90:	733b      	strb	r3, [r7, #12]
        ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 8003b92:	f107 020c 	add.w	r2, r7, #12
 8003b96:	2301      	movs	r3, #1
 8003b98:	2115      	movs	r1, #21
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff fd6e 	bl	800367c <lsm6ds3tr_c_write_reg>
 8003ba0:	6178      	str	r0, [r7, #20]
                                    (uint8_t *)&ctrl6_c, 1);

        if (ret == 0)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d11b      	bne.n	8003be0 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
        {
          ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8003ba8:	f107 0210 	add.w	r2, r7, #16
 8003bac:	2301      	movs	r3, #1
 8003bae:	2113      	movs	r1, #19
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff fd4b 	bl	800364c <lsm6ds3tr_c_read_reg>
 8003bb6:	6178      	str	r0, [r7, #20]
                                     (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d110      	bne.n	8003be0 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	08db      	lsrs	r3, r3, #3
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	7c3b      	ldrb	r3, [r7, #16]
 8003bca:	f362 0341 	bfi	r3, r2, #1, #1
 8003bce:	743b      	strb	r3, [r7, #16]
            ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8003bd0:	f107 0210 	add.w	r2, r7, #16
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	2113      	movs	r1, #19
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff fd4f 	bl	800367c <lsm6ds3tr_c_write_reg>
 8003bde:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8003be0:	697b      	ldr	r3, [r7, #20]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <lsm6ds3tr_c_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_i2c_interface_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_i2c_disable_t val)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8003bf6:	f107 0208 	add.w	r2, r7, #8
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	2113      	movs	r1, #19
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff fd24 	bl	800364c <lsm6ds3tr_c_read_reg>
 8003c04:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl4_c, 1);

  if (ret == 0)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10f      	bne.n	8003c2c <lsm6ds3tr_c_i2c_interface_set+0x42>
  {
    ctrl4_c.i2c_disable = (uint8_t)val;
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	7a3b      	ldrb	r3, [r7, #8]
 8003c16:	f362 0382 	bfi	r3, r2, #2, #1
 8003c1a:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8003c1c:	f107 0208 	add.w	r2, r7, #8
 8003c20:	2301      	movs	r3, #1
 8003c22:	2113      	movs	r1, #19
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff fd29 	bl	800367c <lsm6ds3tr_c_write_reg>
 8003c2a:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl4_c, 1);
  }

  return ret;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c3e:	f001 f957 	bl	8004ef0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c42:	f000 f84f 	bl	8003ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c46:	f000 fbaf 	bl	80043a8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8003c4a:	f000 f8b9 	bl	8003dc0 <MX_ADC3_Init>
  MX_I2C1_Init();
 8003c4e:	f000 f91d 	bl	8003e8c <MX_I2C1_Init>
  MX_I2C2_Init();
 8003c52:	f000 f949 	bl	8003ee8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8003c56:	f000 f99b 	bl	8003f90 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003c5a:	f000 faf5 	bl	8004248 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003c5e:	f000 fb1d 	bl	800429c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003c62:	f000 fb45 	bl	80042f0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8003c66:	f000 fb6d 	bl	8004344 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8003c6a:	f000 fb95 	bl	8004398 <MX_USB_OTG_FS_USB_Init>
  MX_TIM2_Init();
 8003c6e:	f000 f9c5 	bl	8003ffc <MX_TIM2_Init>
  MX_TIM3_Init();
 8003c72:	f000 fa0f 	bl	8004094 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003c76:	f000 fa99 	bl	80041ac <MX_TIM5_Init>
  MX_FATFS_Init();
 8003c7a:	f005 ffcf 	bl	8009c1c <MX_FATFS_Init>
  MX_RTC_Init();
 8003c7e:	f000 f961 	bl	8003f44 <MX_RTC_Init>
  MX_CRC_Init();
 8003c82:	f000 f8ef 	bl	8003e64 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin, GPIO_PIN_SET); // LED_ON Pin enabled
 8003c86:	2201      	movs	r2, #1
 8003c88:	2101      	movs	r1, #1
 8003c8a:	4812      	ldr	r0, [pc, #72]	; (8003cd4 <main+0x9c>)
 8003c8c:	f001 fef2 	bl	8005a74 <HAL_GPIO_WritePin>



  //INITIALIZATION SECTOR

  printIntroTitle();
 8003c90:	f7fd fd2e 	bl	80016f0 <printIntroTitle>
  printOptions();
 8003c94:	f7fd fd56 	bl	8001744 <printOptions>
	  // Usage : screen /dev/tty.usbserial-1120 (OR tty.usbserial-1130)  115200
	  //MENU SECTOR ------------------------------------------------------------------------


	  char userInput;
	  UART_Transmit_String("\r\nChoice: ");
 8003c98:	480f      	ldr	r0, [pc, #60]	; (8003cd8 <main+0xa0>)
 8003c9a:	f7fd fd13 	bl	80016c4 <UART_Transmit_String>
	         HAL_UART_Receive(&huart1, (uint8_t *)&userInput, sizeof(userInput), HAL_MAX_DELAY);
 8003c9e:	1df9      	adds	r1, r7, #7
 8003ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	480d      	ldr	r0, [pc, #52]	; (8003cdc <main+0xa4>)
 8003ca8:	f005 fc33 	bl	8009512 <HAL_UART_Receive>

	         switch (userInput)
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	2b0a      	cmp	r3, #10
 8003cb0:	d002      	beq.n	8003cb8 <main+0x80>
 8003cb2:	2b0d      	cmp	r3, #13
 8003cb4:	d104      	bne.n	8003cc0 <main+0x88>
	         {
	         case '\r': // Ignore carriage return characters
	             break;
 8003cb6:	e008      	b.n	8003cca <main+0x92>
	         case '\n': // Process command on new line (Enter pressed)
	             UART_Transmit_String("\r\n"); // Move to a new line after the command
 8003cb8:	4809      	ldr	r0, [pc, #36]	; (8003ce0 <main+0xa8>)
 8003cba:	f7fd fd03 	bl	80016c4 <UART_Transmit_String>
	             break;
 8003cbe:	e004      	b.n	8003cca <main+0x92>
	         default:
	             menu(userInput);
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd ff50 	bl	8001b68 <menu>
	             break;
 8003cc8:	bf00      	nop
	         }

	         HAL_Delay(100);
 8003cca:	2064      	movs	r0, #100	; 0x64
 8003ccc:	f001 f982 	bl	8004fd4 <HAL_Delay>
  {
 8003cd0:	e7e2      	b.n	8003c98 <main+0x60>
 8003cd2:	bf00      	nop
 8003cd4:	40020400 	.word	0x40020400
 8003cd8:	0801a814 	.word	0x0801a814
 8003cdc:	20003bd0 	.word	0x20003bd0
 8003ce0:	0801a820 	.word	0x0801a820

08003ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b094      	sub	sp, #80	; 0x50
 8003ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cea:	f107 0320 	add.w	r3, r7, #32
 8003cee:	2230      	movs	r2, #48	; 0x30
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f011 fd50 	bl	8015798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cf8:	f107 030c 	add.w	r3, r7, #12
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	4b2a      	ldr	r3, [pc, #168]	; (8003db8 <SystemClock_Config+0xd4>)
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	4a29      	ldr	r2, [pc, #164]	; (8003db8 <SystemClock_Config+0xd4>)
 8003d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d16:	6413      	str	r3, [r2, #64]	; 0x40
 8003d18:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <SystemClock_Config+0xd4>)
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d24:	2300      	movs	r3, #0
 8003d26:	607b      	str	r3, [r7, #4]
 8003d28:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <SystemClock_Config+0xd8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <SystemClock_Config+0xd8>)
 8003d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	4b21      	ldr	r3, [pc, #132]	; (8003dbc <SystemClock_Config+0xd8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003d40:	230b      	movs	r3, #11
 8003d42:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d4e:	2310      	movs	r3, #16
 8003d50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003d52:	2301      	movs	r3, #1
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d56:	2302      	movs	r3, #2
 8003d58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8003d60:	230f      	movs	r3, #15
 8003d62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8003d64:	2390      	movs	r3, #144	; 0x90
 8003d66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8003d6c:	2305      	movs	r3, #5
 8003d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d70:	f107 0320 	add.w	r3, r7, #32
 8003d74:	4618      	mov	r0, r3
 8003d76:	f003 faef 	bl	8007358 <HAL_RCC_OscConfig>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003d80:	f000 fc04 	bl	800458c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d84:	230f      	movs	r3, #15
 8003d86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003d98:	f107 030c 	add.w	r3, r7, #12
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f003 fd52 	bl	8007848 <HAL_RCC_ClockConfig>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <SystemClock_Config+0xca>
  {
    Error_Handler();
 8003daa:	f000 fbef 	bl	800458c <Error_Handler>
  }
}
 8003dae:	bf00      	nop
 8003db0:	3750      	adds	r7, #80	; 0x50
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40007000 	.word	0x40007000

08003dc0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003dc6:	463b      	mov	r3, r7
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8003dd2:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003dd4:	4a21      	ldr	r2, [pc, #132]	; (8003e5c <MX_ADC3_Init+0x9c>)
 8003dd6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003dd8:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003dde:	4b1e      	ldr	r3, [pc, #120]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8003de4:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003dea:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003df8:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003dfe:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003e00:	4a17      	ldr	r2, [pc, #92]	; (8003e60 <MX_ADC3_Init+0xa0>)
 8003e02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e04:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003e10:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003e1e:	480e      	ldr	r0, [pc, #56]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003e20:	f001 f8fc 	bl	800501c <HAL_ADC_Init>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8003e2a:	f000 fbaf 	bl	800458c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003e2e:	230c      	movs	r3, #12
 8003e30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003e3a:	463b      	mov	r3, r7
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4806      	ldr	r0, [pc, #24]	; (8003e58 <MX_ADC3_Init+0x98>)
 8003e40:	f001 f930 	bl	80050a4 <HAL_ADC_ConfigChannel>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8003e4a:	f000 fb9f 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20003988 	.word	0x20003988
 8003e5c:	40012200 	.word	0x40012200
 8003e60:	0f000001 	.word	0x0f000001

08003e64 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <MX_CRC_Init+0x20>)
 8003e6a:	4a07      	ldr	r2, [pc, #28]	; (8003e88 <MX_CRC_Init+0x24>)
 8003e6c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003e6e:	4805      	ldr	r0, [pc, #20]	; (8003e84 <MX_CRC_Init+0x20>)
 8003e70:	f001 fc47 	bl	8005702 <HAL_CRC_Init>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003e7a:	f000 fb87 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	200039d0 	.word	0x200039d0
 8003e88:	40023000 	.word	0x40023000

08003e8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e90:	4b12      	ldr	r3, [pc, #72]	; (8003edc <MX_I2C1_Init+0x50>)
 8003e92:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <MX_I2C1_Init+0x54>)
 8003e94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <MX_I2C1_Init+0x50>)
 8003e98:	4a12      	ldr	r2, [pc, #72]	; (8003ee4 <MX_I2C1_Init+0x58>)
 8003e9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <MX_I2C1_Init+0x50>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <MX_I2C1_Init+0x50>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <MX_I2C1_Init+0x50>)
 8003eaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003eae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <MX_I2C1_Init+0x50>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <MX_I2C1_Init+0x50>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ebc:	4b07      	ldr	r3, [pc, #28]	; (8003edc <MX_I2C1_Init+0x50>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <MX_I2C1_Init+0x50>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ec8:	4804      	ldr	r0, [pc, #16]	; (8003edc <MX_I2C1_Init+0x50>)
 8003eca:	f001 fe11 	bl	8005af0 <HAL_I2C_Init>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ed4:	f000 fb5a 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ed8:	bf00      	nop
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200039d8 	.word	0x200039d8
 8003ee0:	40005400 	.word	0x40005400
 8003ee4:	000186a0 	.word	0x000186a0

08003ee8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003eec:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <MX_I2C2_Init+0x50>)
 8003eee:	4a13      	ldr	r2, [pc, #76]	; (8003f3c <MX_I2C2_Init+0x54>)
 8003ef0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003ef2:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <MX_I2C2_Init+0x50>)
 8003ef4:	4a12      	ldr	r2, [pc, #72]	; (8003f40 <MX_I2C2_Init+0x58>)
 8003ef6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <MX_I2C2_Init+0x50>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003efe:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <MX_I2C2_Init+0x50>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <MX_I2C2_Init+0x50>)
 8003f06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	; (8003f38 <MX_I2C2_Init+0x50>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <MX_I2C2_Init+0x50>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f18:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <MX_I2C2_Init+0x50>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <MX_I2C2_Init+0x50>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003f24:	4804      	ldr	r0, [pc, #16]	; (8003f38 <MX_I2C2_Init+0x50>)
 8003f26:	f001 fde3 	bl	8005af0 <HAL_I2C_Init>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003f30:	f000 fb2c 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20003a2c 	.word	0x20003a2c
 8003f3c:	40005800 	.word	0x40005800
 8003f40:	000186a0 	.word	0x000186a0

08003f44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003f48:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <MX_RTC_Init+0x44>)
 8003f4a:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <MX_RTC_Init+0x48>)
 8003f4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <MX_RTC_Init+0x44>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <MX_RTC_Init+0x44>)
 8003f56:	227f      	movs	r2, #127	; 0x7f
 8003f58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <MX_RTC_Init+0x44>)
 8003f5c:	22ff      	movs	r2, #255	; 0xff
 8003f5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <MX_RTC_Init+0x44>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <MX_RTC_Init+0x44>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <MX_RTC_Init+0x44>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f72:	4805      	ldr	r0, [pc, #20]	; (8003f88 <MX_RTC_Init+0x44>)
 8003f74:	f003 ff2a 	bl	8007dcc <HAL_RTC_Init>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003f7e:	f000 fb05 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20003a80 	.word	0x20003a80
 8003f8c:	40002800 	.word	0x40002800

08003f90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f94:	4b17      	ldr	r3, [pc, #92]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003f96:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <MX_SPI1_Init+0x68>)
 8003f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f9a:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003f9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fa8:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fae:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003fba:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003fc4:	2230      	movs	r2, #48	; 0x30
 8003fc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd4:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003fda:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003fdc:	220a      	movs	r2, #10
 8003fde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003fe0:	4804      	ldr	r0, [pc, #16]	; (8003ff4 <MX_SPI1_Init+0x64>)
 8003fe2:	f003 ffed 	bl	8007fc0 <HAL_SPI_Init>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003fec:	f000 face 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20003aa0 	.word	0x20003aa0
 8003ff8:	40013000 	.word	0x40013000

08003ffc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004002:	f107 0308 	add.w	r3, r7, #8
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	609a      	str	r2, [r3, #8]
 800400e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004010:	463b      	mov	r3, r7
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004018:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <MX_TIM2_Init+0x94>)
 800401a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800401e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004020:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <MX_TIM2_Init+0x94>)
 8004022:	2200      	movs	r2, #0
 8004024:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004026:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <MX_TIM2_Init+0x94>)
 8004028:	2200      	movs	r2, #0
 800402a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <MX_TIM2_Init+0x94>)
 800402e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004032:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004034:	4b16      	ldr	r3, [pc, #88]	; (8004090 <MX_TIM2_Init+0x94>)
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800403a:	4b15      	ldr	r3, [pc, #84]	; (8004090 <MX_TIM2_Init+0x94>)
 800403c:	2200      	movs	r2, #0
 800403e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004040:	4813      	ldr	r0, [pc, #76]	; (8004090 <MX_TIM2_Init+0x94>)
 8004042:	f004 fbef 	bl	8008824 <HAL_TIM_Base_Init>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800404c:	f000 fa9e 	bl	800458c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004054:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004056:	f107 0308 	add.w	r3, r7, #8
 800405a:	4619      	mov	r1, r3
 800405c:	480c      	ldr	r0, [pc, #48]	; (8004090 <MX_TIM2_Init+0x94>)
 800405e:	f004 fd4b 	bl	8008af8 <HAL_TIM_ConfigClockSource>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004068:	f000 fa90 	bl	800458c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800406c:	2300      	movs	r3, #0
 800406e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004070:	2300      	movs	r3, #0
 8004072:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004074:	463b      	mov	r3, r7
 8004076:	4619      	mov	r1, r3
 8004078:	4805      	ldr	r0, [pc, #20]	; (8004090 <MX_TIM2_Init+0x94>)
 800407a:	f005 f8ef 	bl	800925c <HAL_TIMEx_MasterConfigSynchronization>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004084:	f000 fa82 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004088:	bf00      	nop
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20003af8 	.word	0x20003af8

08004094 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08e      	sub	sp, #56	; 0x38
 8004098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800409a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	605a      	str	r2, [r3, #4]
 80040a4:	609a      	str	r2, [r3, #8]
 80040a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040a8:	f107 0320 	add.w	r3, r7, #32
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040b2:	1d3b      	adds	r3, r7, #4
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	611a      	str	r2, [r3, #16]
 80040c0:	615a      	str	r2, [r3, #20]
 80040c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040c4:	4b37      	ldr	r3, [pc, #220]	; (80041a4 <MX_TIM3_Init+0x110>)
 80040c6:	4a38      	ldr	r2, [pc, #224]	; (80041a8 <MX_TIM3_Init+0x114>)
 80040c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80040ca:	4b36      	ldr	r3, [pc, #216]	; (80041a4 <MX_TIM3_Init+0x110>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d0:	4b34      	ldr	r3, [pc, #208]	; (80041a4 <MX_TIM3_Init+0x110>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80040d6:	4b33      	ldr	r3, [pc, #204]	; (80041a4 <MX_TIM3_Init+0x110>)
 80040d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040de:	4b31      	ldr	r3, [pc, #196]	; (80041a4 <MX_TIM3_Init+0x110>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040e4:	4b2f      	ldr	r3, [pc, #188]	; (80041a4 <MX_TIM3_Init+0x110>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040ea:	482e      	ldr	r0, [pc, #184]	; (80041a4 <MX_TIM3_Init+0x110>)
 80040ec:	f004 fb9a 	bl	8008824 <HAL_TIM_Base_Init>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80040f6:	f000 fa49 	bl	800458c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004100:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004104:	4619      	mov	r1, r3
 8004106:	4827      	ldr	r0, [pc, #156]	; (80041a4 <MX_TIM3_Init+0x110>)
 8004108:	f004 fcf6 	bl	8008af8 <HAL_TIM_ConfigClockSource>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004112:	f000 fa3b 	bl	800458c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004116:	4823      	ldr	r0, [pc, #140]	; (80041a4 <MX_TIM3_Init+0x110>)
 8004118:	f004 fbd3 	bl	80088c2 <HAL_TIM_PWM_Init>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004122:	f000 fa33 	bl	800458c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004126:	2300      	movs	r3, #0
 8004128:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800412e:	f107 0320 	add.w	r3, r7, #32
 8004132:	4619      	mov	r1, r3
 8004134:	481b      	ldr	r0, [pc, #108]	; (80041a4 <MX_TIM3_Init+0x110>)
 8004136:	f005 f891 	bl	800925c <HAL_TIMEx_MasterConfigSynchronization>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004140:	f000 fa24 	bl	800458c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004144:	2360      	movs	r3, #96	; 0x60
 8004146:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	2204      	movs	r2, #4
 8004158:	4619      	mov	r1, r3
 800415a:	4812      	ldr	r0, [pc, #72]	; (80041a4 <MX_TIM3_Init+0x110>)
 800415c:	f004 fc0a 	bl	8008974 <HAL_TIM_PWM_ConfigChannel>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004166:	f000 fa11 	bl	800458c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	2208      	movs	r2, #8
 800416e:	4619      	mov	r1, r3
 8004170:	480c      	ldr	r0, [pc, #48]	; (80041a4 <MX_TIM3_Init+0x110>)
 8004172:	f004 fbff 	bl	8008974 <HAL_TIM_PWM_ConfigChannel>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800417c:	f000 fa06 	bl	800458c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004180:	1d3b      	adds	r3, r7, #4
 8004182:	220c      	movs	r2, #12
 8004184:	4619      	mov	r1, r3
 8004186:	4807      	ldr	r0, [pc, #28]	; (80041a4 <MX_TIM3_Init+0x110>)
 8004188:	f004 fbf4 	bl	8008974 <HAL_TIM_PWM_ConfigChannel>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8004192:	f000 f9fb 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004196:	4803      	ldr	r0, [pc, #12]	; (80041a4 <MX_TIM3_Init+0x110>)
 8004198:	f000 fbc8 	bl	800492c <HAL_TIM_MspPostInit>

}
 800419c:	bf00      	nop
 800419e:	3738      	adds	r7, #56	; 0x38
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20003b40 	.word	0x20003b40
 80041a8:	40000400 	.word	0x40000400

080041ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041b2:	f107 0308 	add.w	r3, r7, #8
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	605a      	str	r2, [r3, #4]
 80041bc:	609a      	str	r2, [r3, #8]
 80041be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041c0:	463b      	mov	r3, r7
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80041c8:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <MX_TIM5_Init+0x94>)
 80041ca:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <MX_TIM5_Init+0x98>)
 80041cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80041ce:	4b1c      	ldr	r3, [pc, #112]	; (8004240 <MX_TIM5_Init+0x94>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041d4:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <MX_TIM5_Init+0x94>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80041da:	4b19      	ldr	r3, [pc, #100]	; (8004240 <MX_TIM5_Init+0x94>)
 80041dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041e2:	4b17      	ldr	r3, [pc, #92]	; (8004240 <MX_TIM5_Init+0x94>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041e8:	4b15      	ldr	r3, [pc, #84]	; (8004240 <MX_TIM5_Init+0x94>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80041ee:	4814      	ldr	r0, [pc, #80]	; (8004240 <MX_TIM5_Init+0x94>)
 80041f0:	f004 fb18 	bl	8008824 <HAL_TIM_Base_Init>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80041fa:	f000 f9c7 	bl	800458c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004202:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004204:	f107 0308 	add.w	r3, r7, #8
 8004208:	4619      	mov	r1, r3
 800420a:	480d      	ldr	r0, [pc, #52]	; (8004240 <MX_TIM5_Init+0x94>)
 800420c:	f004 fc74 	bl	8008af8 <HAL_TIM_ConfigClockSource>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004216:	f000 f9b9 	bl	800458c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800421a:	2300      	movs	r3, #0
 800421c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800421e:	2300      	movs	r3, #0
 8004220:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004222:	463b      	mov	r3, r7
 8004224:	4619      	mov	r1, r3
 8004226:	4806      	ldr	r0, [pc, #24]	; (8004240 <MX_TIM5_Init+0x94>)
 8004228:	f005 f818 	bl	800925c <HAL_TIMEx_MasterConfigSynchronization>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8004232:	f000 f9ab 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20003b88 	.word	0x20003b88
 8004244:	40000c00 	.word	0x40000c00

08004248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800424c:	4b11      	ldr	r3, [pc, #68]	; (8004294 <MX_USART1_UART_Init+0x4c>)
 800424e:	4a12      	ldr	r2, [pc, #72]	; (8004298 <MX_USART1_UART_Init+0x50>)
 8004250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <MX_USART1_UART_Init+0x4c>)
 8004254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800425a:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <MX_USART1_UART_Init+0x4c>)
 800425c:	2200      	movs	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <MX_USART1_UART_Init+0x4c>)
 8004262:	2200      	movs	r2, #0
 8004264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <MX_USART1_UART_Init+0x4c>)
 8004268:	2200      	movs	r2, #0
 800426a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800426c:	4b09      	ldr	r3, [pc, #36]	; (8004294 <MX_USART1_UART_Init+0x4c>)
 800426e:	220c      	movs	r2, #12
 8004270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <MX_USART1_UART_Init+0x4c>)
 8004274:	2200      	movs	r2, #0
 8004276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <MX_USART1_UART_Init+0x4c>)
 800427a:	2200      	movs	r2, #0
 800427c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800427e:	4805      	ldr	r0, [pc, #20]	; (8004294 <MX_USART1_UART_Init+0x4c>)
 8004280:	f005 f868 	bl	8009354 <HAL_UART_Init>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800428a:	f000 f97f 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20003bd0 	.word	0x20003bd0
 8004298:	40011000 	.word	0x40011000

0800429c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <MX_USART2_UART_Init+0x4c>)
 80042a2:	4a12      	ldr	r2, [pc, #72]	; (80042ec <MX_USART2_UART_Init+0x50>)
 80042a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <MX_USART2_UART_Init+0x4c>)
 80042a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <MX_USART2_UART_Init+0x4c>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <MX_USART2_UART_Init+0x4c>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <MX_USART2_UART_Init+0x4c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042c0:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <MX_USART2_UART_Init+0x4c>)
 80042c2:	220c      	movs	r2, #12
 80042c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042c6:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <MX_USART2_UART_Init+0x4c>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <MX_USART2_UART_Init+0x4c>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042d2:	4805      	ldr	r0, [pc, #20]	; (80042e8 <MX_USART2_UART_Init+0x4c>)
 80042d4:	f005 f83e 	bl	8009354 <HAL_UART_Init>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80042de:	f000 f955 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20003c14 	.word	0x20003c14
 80042ec:	40004400 	.word	0x40004400

080042f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <MX_USART3_UART_Init+0x4c>)
 80042f6:	4a12      	ldr	r2, [pc, #72]	; (8004340 <MX_USART3_UART_Init+0x50>)
 80042f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <MX_USART3_UART_Init+0x4c>)
 80042fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004300:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004302:	4b0e      	ldr	r3, [pc, #56]	; (800433c <MX_USART3_UART_Init+0x4c>)
 8004304:	2200      	movs	r2, #0
 8004306:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <MX_USART3_UART_Init+0x4c>)
 800430a:	2200      	movs	r2, #0
 800430c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800430e:	4b0b      	ldr	r3, [pc, #44]	; (800433c <MX_USART3_UART_Init+0x4c>)
 8004310:	2200      	movs	r2, #0
 8004312:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <MX_USART3_UART_Init+0x4c>)
 8004316:	220c      	movs	r2, #12
 8004318:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <MX_USART3_UART_Init+0x4c>)
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <MX_USART3_UART_Init+0x4c>)
 8004322:	2200      	movs	r2, #0
 8004324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004326:	4805      	ldr	r0, [pc, #20]	; (800433c <MX_USART3_UART_Init+0x4c>)
 8004328:	f005 f814 	bl	8009354 <HAL_UART_Init>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004332:	f000 f92b 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20003c58 	.word	0x20003c58
 8004340:	40004800 	.word	0x40004800

08004344 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <MX_USART6_UART_Init+0x4c>)
 800434a:	4a12      	ldr	r2, [pc, #72]	; (8004394 <MX_USART6_UART_Init+0x50>)
 800434c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <MX_USART6_UART_Init+0x4c>)
 8004350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004354:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004356:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <MX_USART6_UART_Init+0x4c>)
 8004358:	2200      	movs	r2, #0
 800435a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800435c:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <MX_USART6_UART_Init+0x4c>)
 800435e:	2200      	movs	r2, #0
 8004360:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004362:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <MX_USART6_UART_Init+0x4c>)
 8004364:	2200      	movs	r2, #0
 8004366:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <MX_USART6_UART_Init+0x4c>)
 800436a:	220c      	movs	r2, #12
 800436c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <MX_USART6_UART_Init+0x4c>)
 8004370:	2200      	movs	r2, #0
 8004372:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <MX_USART6_UART_Init+0x4c>)
 8004376:	2200      	movs	r2, #0
 8004378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800437a:	4805      	ldr	r0, [pc, #20]	; (8004390 <MX_USART6_UART_Init+0x4c>)
 800437c:	f004 ffea 	bl	8009354 <HAL_UART_Init>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004386:	f000 f901 	bl	800458c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20003c9c 	.word	0x20003c9c
 8004394:	40011400 	.word	0x40011400

08004398 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	; 0x28
 80043ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ae:	f107 0314 	add.w	r3, r7, #20
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	609a      	str	r2, [r3, #8]
 80043ba:	60da      	str	r2, [r3, #12]
 80043bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	4b6e      	ldr	r3, [pc, #440]	; (800457c <MX_GPIO_Init+0x1d4>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	4a6d      	ldr	r2, [pc, #436]	; (800457c <MX_GPIO_Init+0x1d4>)
 80043c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043cc:	6313      	str	r3, [r2, #48]	; 0x30
 80043ce:	4b6b      	ldr	r3, [pc, #428]	; (800457c <MX_GPIO_Init+0x1d4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	4b67      	ldr	r3, [pc, #412]	; (800457c <MX_GPIO_Init+0x1d4>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	4a66      	ldr	r2, [pc, #408]	; (800457c <MX_GPIO_Init+0x1d4>)
 80043e4:	f043 0304 	orr.w	r3, r3, #4
 80043e8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ea:	4b64      	ldr	r3, [pc, #400]	; (800457c <MX_GPIO_Init+0x1d4>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
 80043fa:	4b60      	ldr	r3, [pc, #384]	; (800457c <MX_GPIO_Init+0x1d4>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	4a5f      	ldr	r2, [pc, #380]	; (800457c <MX_GPIO_Init+0x1d4>)
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6313      	str	r3, [r2, #48]	; 0x30
 8004406:	4b5d      	ldr	r3, [pc, #372]	; (800457c <MX_GPIO_Init+0x1d4>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	4b59      	ldr	r3, [pc, #356]	; (800457c <MX_GPIO_Init+0x1d4>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	4a58      	ldr	r2, [pc, #352]	; (800457c <MX_GPIO_Init+0x1d4>)
 800441c:	f043 0302 	orr.w	r3, r3, #2
 8004420:	6313      	str	r3, [r2, #48]	; 0x30
 8004422:	4b56      	ldr	r3, [pc, #344]	; (800457c <MX_GPIO_Init+0x1d4>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 800442e:	2200      	movs	r2, #0
 8004430:	f248 0103 	movw	r1, #32771	; 0x8003
 8004434:	4852      	ldr	r0, [pc, #328]	; (8004580 <MX_GPIO_Init+0x1d8>)
 8004436:	f001 fb1d 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800443a:	2201      	movs	r2, #1
 800443c:	2110      	movs	r1, #16
 800443e:	4850      	ldr	r0, [pc, #320]	; (8004580 <MX_GPIO_Init+0x1d8>)
 8004440:	f001 fb18 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004444:	2200      	movs	r2, #0
 8004446:	2120      	movs	r1, #32
 8004448:	484e      	ldr	r0, [pc, #312]	; (8004584 <MX_GPIO_Init+0x1dc>)
 800444a:	f001 fb13 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 800444e:	2200      	movs	r2, #0
 8004450:	2147      	movs	r1, #71	; 0x47
 8004452:	484d      	ldr	r0, [pc, #308]	; (8004588 <MX_GPIO_Init+0x1e0>)
 8004454:	f001 fb0e 	bl	8005a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8004458:	2313      	movs	r3, #19
 800445a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800445c:	2303      	movs	r3, #3
 800445e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004464:	f107 0314 	add.w	r3, r7, #20
 8004468:	4619      	mov	r1, r3
 800446a:	4846      	ldr	r0, [pc, #280]	; (8004584 <MX_GPIO_Init+0x1dc>)
 800446c:	f001 f966 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 8004470:	f248 0303 	movw	r3, #32771	; 0x8003
 8004474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004476:	2301      	movs	r3, #1
 8004478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447e:	2300      	movs	r3, #0
 8004480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004482:	f107 0314 	add.w	r3, r7, #20
 8004486:	4619      	mov	r1, r3
 8004488:	483d      	ldr	r0, [pc, #244]	; (8004580 <MX_GPIO_Init+0x1d8>)
 800448a:	f001 f957 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800448e:	2310      	movs	r3, #16
 8004490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004492:	2301      	movs	r3, #1
 8004494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800449a:	2301      	movs	r3, #1
 800449c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800449e:	f107 0314 	add.w	r3, r7, #20
 80044a2:	4619      	mov	r1, r3
 80044a4:	4836      	ldr	r0, [pc, #216]	; (8004580 <MX_GPIO_Init+0x1d8>)
 80044a6:	f001 f949 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80044aa:	2320      	movs	r3, #32
 80044ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ae:	2301      	movs	r3, #1
 80044b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b6:	2300      	movs	r3, #0
 80044b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80044ba:	f107 0314 	add.w	r3, r7, #20
 80044be:	4619      	mov	r1, r3
 80044c0:	4830      	ldr	r0, [pc, #192]	; (8004584 <MX_GPIO_Init+0x1dc>)
 80044c2:	f001 f93b 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ON_Pin PB1 PB2 PB6 */
  GPIO_InitStruct.Pin = LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 80044c6:	2347      	movs	r3, #71	; 0x47
 80044c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ca:	2301      	movs	r3, #1
 80044cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d2:	2300      	movs	r3, #0
 80044d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d6:	f107 0314 	add.w	r3, r7, #20
 80044da:	4619      	mov	r1, r3
 80044dc:	482a      	ldr	r0, [pc, #168]	; (8004588 <MX_GPIO_Init+0x1e0>)
 80044de:	f001 f92d 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80044e2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80044e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80044ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	4619      	mov	r1, r3
 80044f8:	4823      	ldr	r0, [pc, #140]	; (8004588 <MX_GPIO_Init+0x1e0>)
 80044fa:	f001 f91f 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80044fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004504:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450e:	f107 0314 	add.w	r3, r7, #20
 8004512:	4619      	mov	r1, r3
 8004514:	481a      	ldr	r0, [pc, #104]	; (8004580 <MX_GPIO_Init+0x1d8>)
 8004516:	f001 f911 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800451a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800451e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004520:	2302      	movs	r3, #2
 8004522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004528:	2303      	movs	r3, #3
 800452a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800452c:	230a      	movs	r3, #10
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004530:	f107 0314 	add.w	r3, r7, #20
 8004534:	4619      	mov	r1, r3
 8004536:	4812      	ldr	r0, [pc, #72]	; (8004580 <MX_GPIO_Init+0x1d8>)
 8004538:	f001 f900 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800453c:	2310      	movs	r3, #16
 800453e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4619      	mov	r1, r3
 800454e:	480e      	ldr	r0, [pc, #56]	; (8004588 <MX_GPIO_Init+0x1e0>)
 8004550:	f001 f8f4 	bl	800573c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004554:	2200      	movs	r2, #0
 8004556:	2100      	movs	r1, #0
 8004558:	2017      	movs	r0, #23
 800455a:	f001 f89c 	bl	8005696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800455e:	2017      	movs	r0, #23
 8004560:	f001 f8b5 	bl	80056ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004564:	2200      	movs	r2, #0
 8004566:	2100      	movs	r1, #0
 8004568:	2028      	movs	r0, #40	; 0x28
 800456a:	f001 f894 	bl	8005696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800456e:	2028      	movs	r0, #40	; 0x28
 8004570:	f001 f8ad 	bl	80056ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004574:	bf00      	nop
 8004576:	3728      	adds	r7, #40	; 0x28
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40023800 	.word	0x40023800
 8004580:	40020000 	.word	0x40020000
 8004584:	40020800 	.word	0x40020800
 8004588:	40020400 	.word	0x40020400

0800458c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004590:	b672      	cpsid	i
}
 8004592:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004594:	e7fe      	b.n	8004594 <Error_Handler+0x8>
	...

08004598 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <HAL_MspInit+0x4c>)
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	4a0f      	ldr	r2, [pc, #60]	; (80045e4 <HAL_MspInit+0x4c>)
 80045a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ac:	6453      	str	r3, [r2, #68]	; 0x44
 80045ae:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <HAL_MspInit+0x4c>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <HAL_MspInit+0x4c>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <HAL_MspInit+0x4c>)
 80045c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <HAL_MspInit+0x4c>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800

080045e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f0:	f107 0314 	add.w	r3, r7, #20
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a17      	ldr	r2, [pc, #92]	; (8004664 <HAL_ADC_MspInit+0x7c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d127      	bne.n	800465a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	4b16      	ldr	r3, [pc, #88]	; (8004668 <HAL_ADC_MspInit+0x80>)
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	4a15      	ldr	r2, [pc, #84]	; (8004668 <HAL_ADC_MspInit+0x80>)
 8004614:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004618:	6453      	str	r3, [r2, #68]	; 0x44
 800461a:	4b13      	ldr	r3, [pc, #76]	; (8004668 <HAL_ADC_MspInit+0x80>)
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <HAL_ADC_MspInit+0x80>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	4a0e      	ldr	r2, [pc, #56]	; (8004668 <HAL_ADC_MspInit+0x80>)
 8004630:	f043 0304 	orr.w	r3, r3, #4
 8004634:	6313      	str	r3, [r2, #48]	; 0x30
 8004636:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <HAL_ADC_MspInit+0x80>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004642:	230c      	movs	r3, #12
 8004644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004646:	2303      	movs	r3, #3
 8004648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800464e:	f107 0314 	add.w	r3, r7, #20
 8004652:	4619      	mov	r1, r3
 8004654:	4805      	ldr	r0, [pc, #20]	; (800466c <HAL_ADC_MspInit+0x84>)
 8004656:	f001 f871 	bl	800573c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800465a:	bf00      	nop
 800465c:	3728      	adds	r7, #40	; 0x28
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40012200 	.word	0x40012200
 8004668:	40023800 	.word	0x40023800
 800466c:	40020800 	.word	0x40020800

08004670 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a0b      	ldr	r2, [pc, #44]	; (80046ac <HAL_CRC_MspInit+0x3c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10d      	bne.n	800469e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <HAL_CRC_MspInit+0x40>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <HAL_CRC_MspInit+0x40>)
 800468c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004690:	6313      	str	r3, [r2, #48]	; 0x30
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <HAL_CRC_MspInit+0x40>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40023000 	.word	0x40023000
 80046b0:	40023800 	.word	0x40023800

080046b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08c      	sub	sp, #48	; 0x30
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046bc:	f107 031c 	add.w	r3, r7, #28
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	605a      	str	r2, [r3, #4]
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a33      	ldr	r2, [pc, #204]	; (80047a0 <HAL_I2C_MspInit+0xec>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d12d      	bne.n	8004732 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	4b32      	ldr	r3, [pc, #200]	; (80047a4 <HAL_I2C_MspInit+0xf0>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	4a31      	ldr	r2, [pc, #196]	; (80047a4 <HAL_I2C_MspInit+0xf0>)
 80046e0:	f043 0302 	orr.w	r3, r3, #2
 80046e4:	6313      	str	r3, [r2, #48]	; 0x30
 80046e6:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <HAL_I2C_MspInit+0xf0>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80046f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046f8:	2312      	movs	r3, #18
 80046fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004700:	2303      	movs	r3, #3
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004704:	2304      	movs	r3, #4
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004708:	f107 031c 	add.w	r3, r7, #28
 800470c:	4619      	mov	r1, r3
 800470e:	4826      	ldr	r0, [pc, #152]	; (80047a8 <HAL_I2C_MspInit+0xf4>)
 8004710:	f001 f814 	bl	800573c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <HAL_I2C_MspInit+0xf0>)
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	4a21      	ldr	r2, [pc, #132]	; (80047a4 <HAL_I2C_MspInit+0xf0>)
 800471e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004722:	6413      	str	r3, [r2, #64]	; 0x40
 8004724:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <HAL_I2C_MspInit+0xf0>)
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004730:	e031      	b.n	8004796 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1d      	ldr	r2, [pc, #116]	; (80047ac <HAL_I2C_MspInit+0xf8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d12c      	bne.n	8004796 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <HAL_I2C_MspInit+0xf0>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <HAL_I2C_MspInit+0xf0>)
 8004746:	f043 0302 	orr.w	r3, r3, #2
 800474a:	6313      	str	r3, [r2, #48]	; 0x30
 800474c:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <HAL_I2C_MspInit+0xf0>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004758:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800475c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800475e:	2312      	movs	r3, #18
 8004760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004762:	2300      	movs	r3, #0
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004766:	2303      	movs	r3, #3
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800476a:	2304      	movs	r3, #4
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800476e:	f107 031c 	add.w	r3, r7, #28
 8004772:	4619      	mov	r1, r3
 8004774:	480c      	ldr	r0, [pc, #48]	; (80047a8 <HAL_I2C_MspInit+0xf4>)
 8004776:	f000 ffe1 	bl	800573c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_I2C_MspInit+0xf0>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <HAL_I2C_MspInit+0xf0>)
 8004784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_I2C_MspInit+0xf0>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
}
 8004796:	bf00      	nop
 8004798:	3730      	adds	r7, #48	; 0x30
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40005400 	.word	0x40005400
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40020400 	.word	0x40020400
 80047ac:	40005800 	.word	0x40005800

080047b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047b8:	f107 0308 	add.w	r3, r7, #8
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a0c      	ldr	r2, [pc, #48]	; (80047fc <HAL_RTC_MspInit+0x4c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d111      	bne.n	80047f4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80047d0:	2302      	movs	r3, #2
 80047d2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80047d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047d8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047da:	f107 0308 	add.w	r3, r7, #8
 80047de:	4618      	mov	r0, r3
 80047e0:	f003 fa12 	bl	8007c08 <HAL_RCCEx_PeriphCLKConfig>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80047ea:	f7ff fecf 	bl	800458c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80047ee:	4b04      	ldr	r3, [pc, #16]	; (8004800 <HAL_RTC_MspInit+0x50>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80047f4:	bf00      	nop
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40002800 	.word	0x40002800
 8004800:	42470e3c 	.word	0x42470e3c

08004804 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	; 0x28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800480c:	f107 0314 	add.w	r3, r7, #20
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	609a      	str	r2, [r3, #8]
 8004818:	60da      	str	r2, [r3, #12]
 800481a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a19      	ldr	r2, [pc, #100]	; (8004888 <HAL_SPI_MspInit+0x84>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d12b      	bne.n	800487e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	4b18      	ldr	r3, [pc, #96]	; (800488c <HAL_SPI_MspInit+0x88>)
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	4a17      	ldr	r2, [pc, #92]	; (800488c <HAL_SPI_MspInit+0x88>)
 8004830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004834:	6453      	str	r3, [r2, #68]	; 0x44
 8004836:	4b15      	ldr	r3, [pc, #84]	; (800488c <HAL_SPI_MspInit+0x88>)
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_SPI_MspInit+0x88>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	4a10      	ldr	r2, [pc, #64]	; (800488c <HAL_SPI_MspInit+0x88>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	6313      	str	r3, [r2, #48]	; 0x30
 8004852:	4b0e      	ldr	r3, [pc, #56]	; (800488c <HAL_SPI_MspInit+0x88>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800485e:	23e0      	movs	r3, #224	; 0xe0
 8004860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004862:	2302      	movs	r3, #2
 8004864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800486a:	2303      	movs	r3, #3
 800486c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800486e:	2305      	movs	r3, #5
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004872:	f107 0314 	add.w	r3, r7, #20
 8004876:	4619      	mov	r1, r3
 8004878:	4805      	ldr	r0, [pc, #20]	; (8004890 <HAL_SPI_MspInit+0x8c>)
 800487a:	f000 ff5f 	bl	800573c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800487e:	bf00      	nop
 8004880:	3728      	adds	r7, #40	; 0x28
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40013000 	.word	0x40013000
 800488c:	40023800 	.word	0x40023800
 8004890:	40020000 	.word	0x40020000

08004894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a4:	d10e      	bne.n	80048c4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <HAL_TIM_Base_MspInit+0x8c>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	4a1c      	ldr	r2, [pc, #112]	; (8004920 <HAL_TIM_Base_MspInit+0x8c>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	6413      	str	r3, [r2, #64]	; 0x40
 80048b6:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <HAL_TIM_Base_MspInit+0x8c>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80048c2:	e026      	b.n	8004912 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a16      	ldr	r2, [pc, #88]	; (8004924 <HAL_TIM_Base_MspInit+0x90>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10e      	bne.n	80048ec <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	4b13      	ldr	r3, [pc, #76]	; (8004920 <HAL_TIM_Base_MspInit+0x8c>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	4a12      	ldr	r2, [pc, #72]	; (8004920 <HAL_TIM_Base_MspInit+0x8c>)
 80048d8:	f043 0302 	orr.w	r3, r3, #2
 80048dc:	6413      	str	r3, [r2, #64]	; 0x40
 80048de:	4b10      	ldr	r3, [pc, #64]	; (8004920 <HAL_TIM_Base_MspInit+0x8c>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	693b      	ldr	r3, [r7, #16]
}
 80048ea:	e012      	b.n	8004912 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a0d      	ldr	r2, [pc, #52]	; (8004928 <HAL_TIM_Base_MspInit+0x94>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d10d      	bne.n	8004912 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_TIM_Base_MspInit+0x8c>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	4a08      	ldr	r2, [pc, #32]	; (8004920 <HAL_TIM_Base_MspInit+0x8c>)
 8004900:	f043 0308 	orr.w	r3, r3, #8
 8004904:	6413      	str	r3, [r2, #64]	; 0x40
 8004906:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_TIM_Base_MspInit+0x8c>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40023800 	.word	0x40023800
 8004924:	40000400 	.word	0x40000400
 8004928:	40000c00 	.word	0x40000c00

0800492c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004934:	f107 0314 	add.w	r3, r7, #20
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <HAL_TIM_MspPostInit+0xa4>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d13c      	bne.n	80049c8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <HAL_TIM_MspPostInit+0xa8>)
 8004954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004956:	4a1f      	ldr	r2, [pc, #124]	; (80049d4 <HAL_TIM_MspPostInit+0xa8>)
 8004958:	f043 0304 	orr.w	r3, r3, #4
 800495c:	6313      	str	r3, [r2, #48]	; 0x30
 800495e:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <HAL_TIM_MspPostInit+0xa8>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_TIM_MspPostInit+0xa8>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	4a18      	ldr	r2, [pc, #96]	; (80049d4 <HAL_TIM_MspPostInit+0xa8>)
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	6313      	str	r3, [r2, #48]	; 0x30
 800497a:	4b16      	ldr	r3, [pc, #88]	; (80049d4 <HAL_TIM_MspPostInit+0xa8>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004986:	f44f 7340 	mov.w	r3, #768	; 0x300
 800498a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498c:	2302      	movs	r3, #2
 800498e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004994:	2300      	movs	r3, #0
 8004996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004998:	2302      	movs	r3, #2
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800499c:	f107 0314 	add.w	r3, r7, #20
 80049a0:	4619      	mov	r1, r3
 80049a2:	480d      	ldr	r0, [pc, #52]	; (80049d8 <HAL_TIM_MspPostInit+0xac>)
 80049a4:	f000 feca 	bl	800573c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80049a8:	2320      	movs	r3, #32
 80049aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ac:	2302      	movs	r3, #2
 80049ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049b4:	2300      	movs	r3, #0
 80049b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80049b8:	2302      	movs	r3, #2
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049bc:	f107 0314 	add.w	r3, r7, #20
 80049c0:	4619      	mov	r1, r3
 80049c2:	4806      	ldr	r0, [pc, #24]	; (80049dc <HAL_TIM_MspPostInit+0xb0>)
 80049c4:	f000 feba 	bl	800573c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80049c8:	bf00      	nop
 80049ca:	3728      	adds	r7, #40	; 0x28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40020800 	.word	0x40020800
 80049dc:	40020400 	.word	0x40020400

080049e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b090      	sub	sp, #64	; 0x40
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	60da      	str	r2, [r3, #12]
 80049f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a74      	ldr	r2, [pc, #464]	; (8004bd0 <HAL_UART_MspInit+0x1f0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d14b      	bne.n	8004a9a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a02:	2300      	movs	r3, #0
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a06:	4b73      	ldr	r3, [pc, #460]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	4a72      	ldr	r2, [pc, #456]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004a0c:	f043 0310 	orr.w	r3, r3, #16
 8004a10:	6453      	str	r3, [r2, #68]	; 0x44
 8004a12:	4b70      	ldr	r3, [pc, #448]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	f003 0310 	and.w	r3, r3, #16
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
 8004a22:	4b6c      	ldr	r3, [pc, #432]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	4a6b      	ldr	r2, [pc, #428]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a2e:	4b69      	ldr	r3, [pc, #420]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	623b      	str	r3, [r7, #32]
 8004a3e:	4b65      	ldr	r3, [pc, #404]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	4a64      	ldr	r2, [pc, #400]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004a44:	f043 0302 	orr.w	r3, r3, #2
 8004a48:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4a:	4b62      	ldr	r3, [pc, #392]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a64:	2303      	movs	r3, #3
 8004a66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a68:	2307      	movs	r3, #7
 8004a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a70:	4619      	mov	r1, r3
 8004a72:	4859      	ldr	r0, [pc, #356]	; (8004bd8 <HAL_UART_MspInit+0x1f8>)
 8004a74:	f000 fe62 	bl	800573c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a84:	2303      	movs	r3, #3
 8004a86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a88:	2307      	movs	r3, #7
 8004a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a90:	4619      	mov	r1, r3
 8004a92:	4852      	ldr	r0, [pc, #328]	; (8004bdc <HAL_UART_MspInit+0x1fc>)
 8004a94:	f000 fe52 	bl	800573c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004a98:	e095      	b.n	8004bc6 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a50      	ldr	r2, [pc, #320]	; (8004be0 <HAL_UART_MspInit+0x200>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d12c      	bne.n	8004afe <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61fb      	str	r3, [r7, #28]
 8004aa8:	4b4a      	ldr	r3, [pc, #296]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	4a49      	ldr	r2, [pc, #292]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab4:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61bb      	str	r3, [r7, #24]
 8004ac4:	4b43      	ldr	r3, [pc, #268]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	4a42      	ldr	r2, [pc, #264]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad0:	4b40      	ldr	r3, [pc, #256]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004adc:	230c      	movs	r3, #12
 8004ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004aec:	2307      	movs	r3, #7
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004af4:	4619      	mov	r1, r3
 8004af6:	4838      	ldr	r0, [pc, #224]	; (8004bd8 <HAL_UART_MspInit+0x1f8>)
 8004af8:	f000 fe20 	bl	800573c <HAL_GPIO_Init>
}
 8004afc:	e063      	b.n	8004bc6 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART3)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a38      	ldr	r2, [pc, #224]	; (8004be4 <HAL_UART_MspInit+0x204>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d12d      	bne.n	8004b64 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	4a30      	ldr	r2, [pc, #192]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b16:	6413      	str	r3, [r2, #64]	; 0x40
 8004b18:	4b2e      	ldr	r3, [pc, #184]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b24:	2300      	movs	r3, #0
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	4b2a      	ldr	r3, [pc, #168]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	4a29      	ldr	r2, [pc, #164]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	6313      	str	r3, [r2, #48]	; 0x30
 8004b34:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b46:	2302      	movs	r3, #2
 8004b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b52:	2307      	movs	r3, #7
 8004b54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4822      	ldr	r0, [pc, #136]	; (8004be8 <HAL_UART_MspInit+0x208>)
 8004b5e:	f000 fded 	bl	800573c <HAL_GPIO_Init>
}
 8004b62:	e030      	b.n	8004bc6 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART6)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a20      	ldr	r2, [pc, #128]	; (8004bec <HAL_UART_MspInit+0x20c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d12b      	bne.n	8004bc6 <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	4b18      	ldr	r3, [pc, #96]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	4a17      	ldr	r2, [pc, #92]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004b78:	f043 0320 	orr.w	r3, r3, #32
 8004b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b7e:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	4a10      	ldr	r2, [pc, #64]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004b94:	f043 0304 	orr.w	r3, r3, #4
 8004b98:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <HAL_UART_MspInit+0x1f4>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	60bb      	str	r3, [r7, #8]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ba6:	23c0      	movs	r3, #192	; 0xc0
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004baa:	2302      	movs	r3, #2
 8004bac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4809      	ldr	r0, [pc, #36]	; (8004be8 <HAL_UART_MspInit+0x208>)
 8004bc2:	f000 fdbb 	bl	800573c <HAL_GPIO_Init>
}
 8004bc6:	bf00      	nop
 8004bc8:	3740      	adds	r7, #64	; 0x40
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40011000 	.word	0x40011000
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	40020000 	.word	0x40020000
 8004bdc:	40020400 	.word	0x40020400
 8004be0:	40004400 	.word	0x40004400
 8004be4:	40004800 	.word	0x40004800
 8004be8:	40020800 	.word	0x40020800
 8004bec:	40011400 	.word	0x40011400

08004bf0 <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <SDTimer_Handler+0x40>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d006      	beq.n	8004c0c <SDTimer_Handler+0x1c>
    Timer1--;
 8004bfe:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <SDTimer_Handler+0x40>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <SDTimer_Handler+0x40>)
 8004c0a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8004c0c:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <SDTimer_Handler+0x44>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d006      	beq.n	8004c24 <SDTimer_Handler+0x34>
    Timer2--;
 8004c16:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <SDTimer_Handler+0x44>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <SDTimer_Handler+0x44>)
 8004c22:	701a      	strb	r2, [r3, #0]
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20003980 	.word	0x20003980
 8004c34:	20003982 	.word	0x20003982

08004c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c3c:	e7fe      	b.n	8004c3c <NMI_Handler+0x4>

08004c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c42:	e7fe      	b.n	8004c42 <HardFault_Handler+0x4>

08004c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c48:	e7fe      	b.n	8004c48 <MemManage_Handler+0x4>

08004c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c4e:	e7fe      	b.n	8004c4e <BusFault_Handler+0x4>

08004c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c54:	e7fe      	b.n	8004c54 <UsageFault_Handler+0x4>

08004c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c56:	b480      	push	{r7}
 8004c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c5a:	bf00      	nop
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c68:	bf00      	nop
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c72:	b480      	push	{r7}
 8004c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c76:	bf00      	nop
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8004c84:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <SysTick_Handler+0x30>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <SysTick_Handler+0x30>)
 8004c90:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8004c92:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <SysTick_Handler+0x30>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b09      	cmp	r3, #9
 8004c9a:	d904      	bls.n	8004ca6 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <SysTick_Handler+0x30>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8004ca2:	f7ff ffa5 	bl	8004bf0 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ca6:	f000 f975 	bl	8004f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004caa:	bf00      	nop
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20003ce0 	.word	0x20003ce0

08004cb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004cb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004cbc:	f000 fef4 	bl	8005aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004cc0:	bf00      	nop
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004cc8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004ccc:	f000 feec 	bl	8005aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004cd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004cd4:	f000 fee8 	bl	8005aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004cd8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004cdc:	f000 fee4 	bl	8005aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004ce0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004ce4:	f000 fee0 	bl	8005aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ce8:	bf00      	nop
 8004cea:	bd80      	pop	{r7, pc}

08004cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return 1;
 8004cf0:	2301      	movs	r3, #1
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <_kill>:

int _kill(int pid, int sig)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d06:	f010 fd53 	bl	80157b0 <__errno>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2216      	movs	r2, #22
 8004d0e:	601a      	str	r2, [r3, #0]
  return -1;
 8004d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <_exit>:

void _exit (int status)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff ffe7 	bl	8004cfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8004d2e:	e7fe      	b.n	8004d2e <_exit+0x12>

08004d30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e00a      	b.n	8004d58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d42:	f3af 8000 	nop.w
 8004d46:	4601      	mov	r1, r0
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	60ba      	str	r2, [r7, #8]
 8004d4e:	b2ca      	uxtb	r2, r1
 8004d50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	3301      	adds	r3, #1
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	dbf0      	blt.n	8004d42 <_read+0x12>
  }

  return len;
 8004d60:	687b      	ldr	r3, [r7, #4]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	e009      	b.n	8004d90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	60ba      	str	r2, [r7, #8]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	dbf1      	blt.n	8004d7c <_write+0x12>
  }
  return len;
 8004d98:	687b      	ldr	r3, [r7, #4]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <_close>:

int _close(int file)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004dca:	605a      	str	r2, [r3, #4]
  return 0;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <_isatty>:

int _isatty(int file)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004de2:	2301      	movs	r3, #1
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e14:	4a14      	ldr	r2, [pc, #80]	; (8004e68 <_sbrk+0x5c>)
 8004e16:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <_sbrk+0x60>)
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e20:	4b13      	ldr	r3, [pc, #76]	; (8004e70 <_sbrk+0x64>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d102      	bne.n	8004e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e28:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <_sbrk+0x64>)
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <_sbrk+0x68>)
 8004e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e2e:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <_sbrk+0x64>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4413      	add	r3, r2
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d207      	bcs.n	8004e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e3c:	f010 fcb8 	bl	80157b0 <__errno>
 8004e40:	4603      	mov	r3, r0
 8004e42:	220c      	movs	r2, #12
 8004e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e4a:	e009      	b.n	8004e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e4c:	4b08      	ldr	r3, [pc, #32]	; (8004e70 <_sbrk+0x64>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e52:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <_sbrk+0x64>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4413      	add	r3, r2
 8004e5a:	4a05      	ldr	r2, [pc, #20]	; (8004e70 <_sbrk+0x64>)
 8004e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20020000 	.word	0x20020000
 8004e6c:	00000400 	.word	0x00000400
 8004e70:	20003ce4 	.word	0x20003ce4
 8004e74:	20004078 	.word	0x20004078

08004e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <SystemInit+0x20>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e82:	4a05      	ldr	r2, [pc, #20]	; (8004e98 <SystemInit+0x20>)
 8004e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e8c:	bf00      	nop
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	e000ed00 	.word	0xe000ed00

08004e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ea0:	480d      	ldr	r0, [pc, #52]	; (8004ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ea2:	490e      	ldr	r1, [pc, #56]	; (8004edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ea4:	4a0e      	ldr	r2, [pc, #56]	; (8004ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ea8:	e002      	b.n	8004eb0 <LoopCopyDataInit>

08004eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eae:	3304      	adds	r3, #4

08004eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004eb4:	d3f9      	bcc.n	8004eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004eb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004eb8:	4c0b      	ldr	r4, [pc, #44]	; (8004ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ebc:	e001      	b.n	8004ec2 <LoopFillZerobss>

08004ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ec0:	3204      	adds	r2, #4

08004ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ec4:	d3fb      	bcc.n	8004ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ec6:	f7ff ffd7 	bl	8004e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004eca:	f010 fc77 	bl	80157bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ece:	f7fe feb3 	bl	8003c38 <main>
  bx  lr    
 8004ed2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004edc:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8004ee0:	0801b640 	.word	0x0801b640
  ldr r2, =_sbss
 8004ee4:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004ee8:	20004074 	.word	0x20004074

08004eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004eec:	e7fe      	b.n	8004eec <ADC_IRQHandler>
	...

08004ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ef4:	4b0e      	ldr	r3, [pc, #56]	; (8004f30 <HAL_Init+0x40>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a0d      	ldr	r2, [pc, #52]	; (8004f30 <HAL_Init+0x40>)
 8004efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <HAL_Init+0x40>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <HAL_Init+0x40>)
 8004f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f0c:	4b08      	ldr	r3, [pc, #32]	; (8004f30 <HAL_Init+0x40>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a07      	ldr	r2, [pc, #28]	; (8004f30 <HAL_Init+0x40>)
 8004f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f18:	2003      	movs	r0, #3
 8004f1a:	f000 fbb1 	bl	8005680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f1e:	200f      	movs	r0, #15
 8004f20:	f000 f808 	bl	8004f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f24:	f7ff fb38 	bl	8004598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40023c00 	.word	0x40023c00

08004f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f3c:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <HAL_InitTick+0x54>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <HAL_InitTick+0x58>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	4619      	mov	r1, r3
 8004f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fbc9 	bl	80056ea <HAL_SYSTICK_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e00e      	b.n	8004f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b0f      	cmp	r3, #15
 8004f66:	d80a      	bhi.n	8004f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f68:	2200      	movs	r2, #0
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f70:	f000 fb91 	bl	8005696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f74:	4a06      	ldr	r2, [pc, #24]	; (8004f90 <HAL_InitTick+0x5c>)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e000      	b.n	8004f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000008 	.word	0x20000008
 8004f8c:	20000010 	.word	0x20000010
 8004f90:	2000000c 	.word	0x2000000c

08004f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f98:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <HAL_IncTick+0x20>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <HAL_IncTick+0x24>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	4a04      	ldr	r2, [pc, #16]	; (8004fb8 <HAL_IncTick+0x24>)
 8004fa6:	6013      	str	r3, [r2, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000010 	.word	0x20000010
 8004fb8:	20003ce8 	.word	0x20003ce8

08004fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8004fc0:	4b03      	ldr	r3, [pc, #12]	; (8004fd0 <HAL_GetTick+0x14>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	20003ce8 	.word	0x20003ce8

08004fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fdc:	f7ff ffee 	bl	8004fbc <HAL_GetTick>
 8004fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fec:	d005      	beq.n	8004ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fee:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <HAL_Delay+0x44>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ffa:	bf00      	nop
 8004ffc:	f7ff ffde 	bl	8004fbc <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	429a      	cmp	r2, r3
 800500a:	d8f7      	bhi.n	8004ffc <HAL_Delay+0x28>
  {
  }
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000010 	.word	0x20000010

0800501c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005024:	2300      	movs	r3, #0
 8005026:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e033      	b.n	800509a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fad4 	bl	80045e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b00      	cmp	r3, #0
 8005058:	d118      	bne.n	800508c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005062:	f023 0302 	bic.w	r3, r3, #2
 8005066:	f043 0202 	orr.w	r2, r3, #2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f93a 	bl	80052e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	f043 0201 	orr.w	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	641a      	str	r2, [r3, #64]	; 0x40
 800508a:	e001      	b.n	8005090 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x1c>
 80050bc:	2302      	movs	r3, #2
 80050be:	e105      	b.n	80052cc <HAL_ADC_ConfigChannel+0x228>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b09      	cmp	r3, #9
 80050ce:	d925      	bls.n	800511c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68d9      	ldr	r1, [r3, #12]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	4613      	mov	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	4413      	add	r3, r2
 80050e4:	3b1e      	subs	r3, #30
 80050e6:	2207      	movs	r2, #7
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	43da      	mvns	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	400a      	ands	r2, r1
 80050f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68d9      	ldr	r1, [r3, #12]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	b29b      	uxth	r3, r3
 8005106:	4618      	mov	r0, r3
 8005108:	4603      	mov	r3, r0
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	4403      	add	r3, r0
 800510e:	3b1e      	subs	r3, #30
 8005110:	409a      	lsls	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	60da      	str	r2, [r3, #12]
 800511a:	e022      	b.n	8005162 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6919      	ldr	r1, [r3, #16]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	2207      	movs	r2, #7
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43da      	mvns	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	400a      	ands	r2, r1
 800513e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6919      	ldr	r1, [r3, #16]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	4618      	mov	r0, r3
 8005152:	4603      	mov	r3, r0
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	4403      	add	r3, r0
 8005158:	409a      	lsls	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b06      	cmp	r3, #6
 8005168:	d824      	bhi.n	80051b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	3b05      	subs	r3, #5
 800517c:	221f      	movs	r2, #31
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43da      	mvns	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	400a      	ands	r2, r1
 800518a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	4618      	mov	r0, r3
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	3b05      	subs	r3, #5
 80051a6:	fa00 f203 	lsl.w	r2, r0, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	635a      	str	r2, [r3, #52]	; 0x34
 80051b2:	e04c      	b.n	800524e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d824      	bhi.n	8005206 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	3b23      	subs	r3, #35	; 0x23
 80051ce:	221f      	movs	r2, #31
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	43da      	mvns	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	400a      	ands	r2, r1
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	4618      	mov	r0, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	3b23      	subs	r3, #35	; 0x23
 80051f8:	fa00 f203 	lsl.w	r2, r0, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
 8005204:	e023      	b.n	800524e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	3b41      	subs	r3, #65	; 0x41
 8005218:	221f      	movs	r2, #31
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43da      	mvns	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	400a      	ands	r2, r1
 8005226:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	4618      	mov	r0, r3
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	3b41      	subs	r3, #65	; 0x41
 8005242:	fa00 f203 	lsl.w	r2, r0, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800524e:	4b22      	ldr	r3, [pc, #136]	; (80052d8 <HAL_ADC_ConfigChannel+0x234>)
 8005250:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a21      	ldr	r2, [pc, #132]	; (80052dc <HAL_ADC_ConfigChannel+0x238>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d109      	bne.n	8005270 <HAL_ADC_ConfigChannel+0x1cc>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b12      	cmp	r3, #18
 8005262:	d105      	bne.n	8005270 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a19      	ldr	r2, [pc, #100]	; (80052dc <HAL_ADC_ConfigChannel+0x238>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d123      	bne.n	80052c2 <HAL_ADC_ConfigChannel+0x21e>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b10      	cmp	r3, #16
 8005280:	d003      	beq.n	800528a <HAL_ADC_ConfigChannel+0x1e6>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b11      	cmp	r3, #17
 8005288:	d11b      	bne.n	80052c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b10      	cmp	r3, #16
 800529c:	d111      	bne.n	80052c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <HAL_ADC_ConfigChannel+0x23c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <HAL_ADC_ConfigChannel+0x240>)
 80052a4:	fba2 2303 	umull	r2, r3, r2, r3
 80052a8:	0c9a      	lsrs	r2, r3, #18
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80052b4:	e002      	b.n	80052bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f9      	bne.n	80052b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	40012300 	.word	0x40012300
 80052dc:	40012000 	.word	0x40012000
 80052e0:	20000008 	.word	0x20000008
 80052e4:	431bde83 	.word	0x431bde83

080052e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052f0:	4b79      	ldr	r3, [pc, #484]	; (80054d8 <ADC_Init+0x1f0>)
 80052f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	431a      	orrs	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800531c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	021a      	lsls	r2, r3, #8
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6859      	ldr	r1, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6899      	ldr	r1, [r3, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	4a58      	ldr	r2, [pc, #352]	; (80054dc <ADC_Init+0x1f4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d022      	beq.n	80053c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800538e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6899      	ldr	r1, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6899      	ldr	r1, [r3, #8]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	609a      	str	r2, [r3, #8]
 80053c4:	e00f      	b.n	80053e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0202 	bic.w	r2, r2, #2
 80053f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6899      	ldr	r1, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7e1b      	ldrb	r3, [r3, #24]
 8005400:	005a      	lsls	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01b      	beq.n	800544c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005422:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005432:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6859      	ldr	r1, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	3b01      	subs	r3, #1
 8005440:	035a      	lsls	r2, r3, #13
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	e007      	b.n	800545c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800545a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800546a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	3b01      	subs	r3, #1
 8005478:	051a      	lsls	r2, r3, #20
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6899      	ldr	r1, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800549e:	025a      	lsls	r2, r3, #9
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6899      	ldr	r1, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	029a      	lsls	r2, r3, #10
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	40012300 	.word	0x40012300
 80054dc:	0f000001 	.word	0x0f000001

080054e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054f0:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <__NVIC_SetPriorityGrouping+0x44>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054fc:	4013      	ands	r3, r2
 80054fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800550c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005512:	4a04      	ldr	r2, [pc, #16]	; (8005524 <__NVIC_SetPriorityGrouping+0x44>)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	60d3      	str	r3, [r2, #12]
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	e000ed00 	.word	0xe000ed00

08005528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800552c:	4b04      	ldr	r3, [pc, #16]	; (8005540 <__NVIC_GetPriorityGrouping+0x18>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	0a1b      	lsrs	r3, r3, #8
 8005532:	f003 0307 	and.w	r3, r3, #7
}
 8005536:	4618      	mov	r0, r3
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	e000ed00 	.word	0xe000ed00

08005544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	4603      	mov	r3, r0
 800554c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800554e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005552:	2b00      	cmp	r3, #0
 8005554:	db0b      	blt.n	800556e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	f003 021f 	and.w	r2, r3, #31
 800555c:	4907      	ldr	r1, [pc, #28]	; (800557c <__NVIC_EnableIRQ+0x38>)
 800555e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	2001      	movs	r0, #1
 8005566:	fa00 f202 	lsl.w	r2, r0, r2
 800556a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	e000e100 	.word	0xe000e100

08005580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	6039      	str	r1, [r7, #0]
 800558a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800558c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005590:	2b00      	cmp	r3, #0
 8005592:	db0a      	blt.n	80055aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	490c      	ldr	r1, [pc, #48]	; (80055cc <__NVIC_SetPriority+0x4c>)
 800559a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800559e:	0112      	lsls	r2, r2, #4
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	440b      	add	r3, r1
 80055a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055a8:	e00a      	b.n	80055c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	4908      	ldr	r1, [pc, #32]	; (80055d0 <__NVIC_SetPriority+0x50>)
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	3b04      	subs	r3, #4
 80055b8:	0112      	lsls	r2, r2, #4
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	440b      	add	r3, r1
 80055be:	761a      	strb	r2, [r3, #24]
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	e000e100 	.word	0xe000e100
 80055d0:	e000ed00 	.word	0xe000ed00

080055d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b089      	sub	sp, #36	; 0x24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f1c3 0307 	rsb	r3, r3, #7
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	bf28      	it	cs
 80055f2:	2304      	movcs	r3, #4
 80055f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	3304      	adds	r3, #4
 80055fa:	2b06      	cmp	r3, #6
 80055fc:	d902      	bls.n	8005604 <NVIC_EncodePriority+0x30>
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	3b03      	subs	r3, #3
 8005602:	e000      	b.n	8005606 <NVIC_EncodePriority+0x32>
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43da      	mvns	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	401a      	ands	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800561c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	fa01 f303 	lsl.w	r3, r1, r3
 8005626:	43d9      	mvns	r1, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800562c:	4313      	orrs	r3, r2
         );
}
 800562e:	4618      	mov	r0, r3
 8005630:	3724      	adds	r7, #36	; 0x24
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3b01      	subs	r3, #1
 8005648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800564c:	d301      	bcc.n	8005652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800564e:	2301      	movs	r3, #1
 8005650:	e00f      	b.n	8005672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005652:	4a0a      	ldr	r2, [pc, #40]	; (800567c <SysTick_Config+0x40>)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3b01      	subs	r3, #1
 8005658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800565a:	210f      	movs	r1, #15
 800565c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005660:	f7ff ff8e 	bl	8005580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <SysTick_Config+0x40>)
 8005666:	2200      	movs	r2, #0
 8005668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800566a:	4b04      	ldr	r3, [pc, #16]	; (800567c <SysTick_Config+0x40>)
 800566c:	2207      	movs	r2, #7
 800566e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	e000e010 	.word	0xe000e010

08005680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff ff29 	bl	80054e0 <__NVIC_SetPriorityGrouping>
}
 800568e:	bf00      	nop
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005696:	b580      	push	{r7, lr}
 8005698:	b086      	sub	sp, #24
 800569a:	af00      	add	r7, sp, #0
 800569c:	4603      	mov	r3, r0
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	607a      	str	r2, [r7, #4]
 80056a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056a8:	f7ff ff3e 	bl	8005528 <__NVIC_GetPriorityGrouping>
 80056ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	6978      	ldr	r0, [r7, #20]
 80056b4:	f7ff ff8e 	bl	80055d4 <NVIC_EncodePriority>
 80056b8:	4602      	mov	r2, r0
 80056ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056be:	4611      	mov	r1, r2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff ff5d 	bl	8005580 <__NVIC_SetPriority>
}
 80056c6:	bf00      	nop
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	4603      	mov	r3, r0
 80056d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056dc:	4618      	mov	r0, r3
 80056de:	f7ff ff31 	bl	8005544 <__NVIC_EnableIRQ>
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7ff ffa2 	bl	800563c <SysTick_Config>
 80056f8:	4603      	mov	r3, r0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e00e      	b.n	8005732 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	795b      	ldrb	r3, [r3, #5]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d105      	bne.n	800572a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7fe ffa3 	bl	8004670 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800573c:	b480      	push	{r7}
 800573e:	b089      	sub	sp, #36	; 0x24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800574e:	2300      	movs	r3, #0
 8005750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e16b      	b.n	8005a30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005758:	2201      	movs	r2, #1
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4013      	ands	r3, r2
 800576a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	429a      	cmp	r2, r3
 8005772:	f040 815a 	bne.w	8005a2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b01      	cmp	r3, #1
 8005780:	d005      	beq.n	800578e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800578a:	2b02      	cmp	r3, #2
 800578c:	d130      	bne.n	80057f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	2203      	movs	r2, #3
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	43db      	mvns	r3, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4013      	ands	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057c4:	2201      	movs	r2, #1
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4013      	ands	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	091b      	lsrs	r3, r3, #4
 80057da:	f003 0201 	and.w	r2, r3, #1
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d017      	beq.n	800582c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	2203      	movs	r2, #3
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	fa02 f303 	lsl.w	r3, r2, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4313      	orrs	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f003 0303 	and.w	r3, r3, #3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d123      	bne.n	8005880 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	08da      	lsrs	r2, r3, #3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3208      	adds	r2, #8
 8005840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005844:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	220f      	movs	r2, #15
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	08da      	lsrs	r2, r3, #3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3208      	adds	r2, #8
 800587a:	69b9      	ldr	r1, [r7, #24]
 800587c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	2203      	movs	r2, #3
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	4013      	ands	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0203 	and.w	r2, r3, #3
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80b4 	beq.w	8005a2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	4b60      	ldr	r3, [pc, #384]	; (8005a48 <HAL_GPIO_Init+0x30c>)
 80058c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ca:	4a5f      	ldr	r2, [pc, #380]	; (8005a48 <HAL_GPIO_Init+0x30c>)
 80058cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058d0:	6453      	str	r3, [r2, #68]	; 0x44
 80058d2:	4b5d      	ldr	r3, [pc, #372]	; (8005a48 <HAL_GPIO_Init+0x30c>)
 80058d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058de:	4a5b      	ldr	r2, [pc, #364]	; (8005a4c <HAL_GPIO_Init+0x310>)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	089b      	lsrs	r3, r3, #2
 80058e4:	3302      	adds	r3, #2
 80058e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	220f      	movs	r2, #15
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4013      	ands	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a52      	ldr	r2, [pc, #328]	; (8005a50 <HAL_GPIO_Init+0x314>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d02b      	beq.n	8005962 <HAL_GPIO_Init+0x226>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a51      	ldr	r2, [pc, #324]	; (8005a54 <HAL_GPIO_Init+0x318>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d025      	beq.n	800595e <HAL_GPIO_Init+0x222>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a50      	ldr	r2, [pc, #320]	; (8005a58 <HAL_GPIO_Init+0x31c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01f      	beq.n	800595a <HAL_GPIO_Init+0x21e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a4f      	ldr	r2, [pc, #316]	; (8005a5c <HAL_GPIO_Init+0x320>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d019      	beq.n	8005956 <HAL_GPIO_Init+0x21a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a4e      	ldr	r2, [pc, #312]	; (8005a60 <HAL_GPIO_Init+0x324>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_GPIO_Init+0x216>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a4d      	ldr	r2, [pc, #308]	; (8005a64 <HAL_GPIO_Init+0x328>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00d      	beq.n	800594e <HAL_GPIO_Init+0x212>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a4c      	ldr	r2, [pc, #304]	; (8005a68 <HAL_GPIO_Init+0x32c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <HAL_GPIO_Init+0x20e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a4b      	ldr	r2, [pc, #300]	; (8005a6c <HAL_GPIO_Init+0x330>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d101      	bne.n	8005946 <HAL_GPIO_Init+0x20a>
 8005942:	2307      	movs	r3, #7
 8005944:	e00e      	b.n	8005964 <HAL_GPIO_Init+0x228>
 8005946:	2308      	movs	r3, #8
 8005948:	e00c      	b.n	8005964 <HAL_GPIO_Init+0x228>
 800594a:	2306      	movs	r3, #6
 800594c:	e00a      	b.n	8005964 <HAL_GPIO_Init+0x228>
 800594e:	2305      	movs	r3, #5
 8005950:	e008      	b.n	8005964 <HAL_GPIO_Init+0x228>
 8005952:	2304      	movs	r3, #4
 8005954:	e006      	b.n	8005964 <HAL_GPIO_Init+0x228>
 8005956:	2303      	movs	r3, #3
 8005958:	e004      	b.n	8005964 <HAL_GPIO_Init+0x228>
 800595a:	2302      	movs	r3, #2
 800595c:	e002      	b.n	8005964 <HAL_GPIO_Init+0x228>
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <HAL_GPIO_Init+0x228>
 8005962:	2300      	movs	r3, #0
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	f002 0203 	and.w	r2, r2, #3
 800596a:	0092      	lsls	r2, r2, #2
 800596c:	4093      	lsls	r3, r2
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	4313      	orrs	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005974:	4935      	ldr	r1, [pc, #212]	; (8005a4c <HAL_GPIO_Init+0x310>)
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	089b      	lsrs	r3, r3, #2
 800597a:	3302      	adds	r3, #2
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005982:	4b3b      	ldr	r3, [pc, #236]	; (8005a70 <HAL_GPIO_Init+0x334>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059a6:	4a32      	ldr	r2, [pc, #200]	; (8005a70 <HAL_GPIO_Init+0x334>)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059ac:	4b30      	ldr	r3, [pc, #192]	; (8005a70 <HAL_GPIO_Init+0x334>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059d0:	4a27      	ldr	r2, [pc, #156]	; (8005a70 <HAL_GPIO_Init+0x334>)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059d6:	4b26      	ldr	r3, [pc, #152]	; (8005a70 <HAL_GPIO_Init+0x334>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059fa:	4a1d      	ldr	r2, [pc, #116]	; (8005a70 <HAL_GPIO_Init+0x334>)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a00:	4b1b      	ldr	r3, [pc, #108]	; (8005a70 <HAL_GPIO_Init+0x334>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a24:	4a12      	ldr	r2, [pc, #72]	; (8005a70 <HAL_GPIO_Init+0x334>)
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	61fb      	str	r3, [r7, #28]
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	2b0f      	cmp	r3, #15
 8005a34:	f67f ae90 	bls.w	8005758 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a38:	bf00      	nop
 8005a3a:	bf00      	nop
 8005a3c:	3724      	adds	r7, #36	; 0x24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	40013800 	.word	0x40013800
 8005a50:	40020000 	.word	0x40020000
 8005a54:	40020400 	.word	0x40020400
 8005a58:	40020800 	.word	0x40020800
 8005a5c:	40020c00 	.word	0x40020c00
 8005a60:	40021000 	.word	0x40021000
 8005a64:	40021400 	.word	0x40021400
 8005a68:	40021800 	.word	0x40021800
 8005a6c:	40021c00 	.word	0x40021c00
 8005a70:	40013c00 	.word	0x40013c00

08005a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	807b      	strh	r3, [r7, #2]
 8005a80:	4613      	mov	r3, r2
 8005a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a84:	787b      	ldrb	r3, [r7, #1]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a8a:	887a      	ldrh	r2, [r7, #2]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a90:	e003      	b.n	8005a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a92:	887b      	ldrh	r3, [r7, #2]
 8005a94:	041a      	lsls	r2, r3, #16
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	619a      	str	r2, [r3, #24]
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d006      	beq.n	8005acc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005abe:	4a05      	ldr	r2, [pc, #20]	; (8005ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ac4:	88fb      	ldrh	r3, [r7, #6]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f806 	bl	8005ad8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	40013c00 	.word	0x40013c00

08005ad8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e12b      	b.n	8005d5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fe fdcc 	bl	80046b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2224      	movs	r2, #36	; 0x24
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0201 	bic.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b54:	f002 f830 	bl	8007bb8 <HAL_RCC_GetPCLK1Freq>
 8005b58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	4a81      	ldr	r2, [pc, #516]	; (8005d64 <HAL_I2C_Init+0x274>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d807      	bhi.n	8005b74 <HAL_I2C_Init+0x84>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4a80      	ldr	r2, [pc, #512]	; (8005d68 <HAL_I2C_Init+0x278>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	bf94      	ite	ls
 8005b6c:	2301      	movls	r3, #1
 8005b6e:	2300      	movhi	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	e006      	b.n	8005b82 <HAL_I2C_Init+0x92>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4a7d      	ldr	r2, [pc, #500]	; (8005d6c <HAL_I2C_Init+0x27c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	bf94      	ite	ls
 8005b7c:	2301      	movls	r3, #1
 8005b7e:	2300      	movhi	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e0e7      	b.n	8005d5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a78      	ldr	r2, [pc, #480]	; (8005d70 <HAL_I2C_Init+0x280>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	0c9b      	lsrs	r3, r3, #18
 8005b94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	4a6a      	ldr	r2, [pc, #424]	; (8005d64 <HAL_I2C_Init+0x274>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d802      	bhi.n	8005bc4 <HAL_I2C_Init+0xd4>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	e009      	b.n	8005bd8 <HAL_I2C_Init+0xe8>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	4a69      	ldr	r2, [pc, #420]	; (8005d74 <HAL_I2C_Init+0x284>)
 8005bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd4:	099b      	lsrs	r3, r3, #6
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	495c      	ldr	r1, [pc, #368]	; (8005d64 <HAL_I2C_Init+0x274>)
 8005bf4:	428b      	cmp	r3, r1
 8005bf6:	d819      	bhi.n	8005c2c <HAL_I2C_Init+0x13c>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	1e59      	subs	r1, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c06:	1c59      	adds	r1, r3, #1
 8005c08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c0c:	400b      	ands	r3, r1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <HAL_I2C_Init+0x138>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1e59      	subs	r1, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c20:	3301      	adds	r3, #1
 8005c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c26:	e051      	b.n	8005ccc <HAL_I2C_Init+0x1dc>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	e04f      	b.n	8005ccc <HAL_I2C_Init+0x1dc>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d111      	bne.n	8005c58 <HAL_I2C_Init+0x168>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	1e58      	subs	r0, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6859      	ldr	r1, [r3, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	440b      	add	r3, r1
 8005c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c46:	3301      	adds	r3, #1
 8005c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	e012      	b.n	8005c7e <HAL_I2C_Init+0x18e>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	1e58      	subs	r0, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6859      	ldr	r1, [r3, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	440b      	add	r3, r1
 8005c66:	0099      	lsls	r1, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c6e:	3301      	adds	r3, #1
 8005c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bf0c      	ite	eq
 8005c78:	2301      	moveq	r3, #1
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <HAL_I2C_Init+0x196>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e022      	b.n	8005ccc <HAL_I2C_Init+0x1dc>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10e      	bne.n	8005cac <HAL_I2C_Init+0x1bc>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1e58      	subs	r0, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6859      	ldr	r1, [r3, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	440b      	add	r3, r1
 8005c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005caa:	e00f      	b.n	8005ccc <HAL_I2C_Init+0x1dc>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1e58      	subs	r0, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6859      	ldr	r1, [r3, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	0099      	lsls	r1, r3, #2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	6809      	ldr	r1, [r1, #0]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005cfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6911      	ldr	r1, [r2, #16]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	68d2      	ldr	r2, [r2, #12]
 8005d06:	4311      	orrs	r1, r2
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6812      	ldr	r2, [r2, #0]
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0201 	orr.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	000186a0 	.word	0x000186a0
 8005d68:	001e847f 	.word	0x001e847f
 8005d6c:	003d08ff 	.word	0x003d08ff
 8005d70:	431bde83 	.word	0x431bde83
 8005d74:	10624dd3 	.word	0x10624dd3

08005d78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	461a      	mov	r2, r3
 8005d84:	460b      	mov	r3, r1
 8005d86:	817b      	strh	r3, [r7, #10]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d8c:	f7ff f916 	bl	8004fbc <HAL_GetTick>
 8005d90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	f040 80e0 	bne.w	8005f60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	2319      	movs	r3, #25
 8005da6:	2201      	movs	r2, #1
 8005da8:	4970      	ldr	r1, [pc, #448]	; (8005f6c <HAL_I2C_Master_Transmit+0x1f4>)
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f001 f8f6 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005db6:	2302      	movs	r3, #2
 8005db8:	e0d3      	b.n	8005f62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_I2C_Master_Transmit+0x50>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e0cc      	b.n	8005f62 <HAL_I2C_Master_Transmit+0x1ea>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d007      	beq.n	8005dee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0201 	orr.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2221      	movs	r2, #33	; 0x21
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2210      	movs	r2, #16
 8005e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	893a      	ldrh	r2, [r7, #8]
 8005e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4a50      	ldr	r2, [pc, #320]	; (8005f70 <HAL_I2C_Master_Transmit+0x1f8>)
 8005e2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e30:	8979      	ldrh	r1, [r7, #10]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	6a3a      	ldr	r2, [r7, #32]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fde2 	bl	8006a00 <I2C_MasterRequestWrite>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e08d      	b.n	8005f62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e46:	2300      	movs	r3, #0
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005e5c:	e066      	b.n	8005f2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	6a39      	ldr	r1, [r7, #32]
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f001 f970 	bl	8007148 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00d      	beq.n	8005e8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d107      	bne.n	8005e86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e06b      	b.n	8005f62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	781a      	ldrb	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d11b      	bne.n	8005f00 <HAL_I2C_Master_Transmit+0x188>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d017      	beq.n	8005f00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	6a39      	ldr	r1, [r7, #32]
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f001 f960 	bl	80071ca <I2C_WaitOnBTFFlagUntilTimeout>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00d      	beq.n	8005f2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d107      	bne.n	8005f28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e01a      	b.n	8005f62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d194      	bne.n	8005e5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e000      	b.n	8005f62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005f60:	2302      	movs	r3, #2
  }
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	00100002 	.word	0x00100002
 8005f70:	ffff0000 	.word	0xffff0000

08005f74 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08c      	sub	sp, #48	; 0x30
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	607a      	str	r2, [r7, #4]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	460b      	mov	r3, r1
 8005f82:	817b      	strh	r3, [r7, #10]
 8005f84:	4613      	mov	r3, r2
 8005f86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f88:	f7ff f818 	bl	8004fbc <HAL_GetTick>
 8005f8c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	f040 820b 	bne.w	80063b2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	2319      	movs	r3, #25
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	497c      	ldr	r1, [pc, #496]	; (8006198 <HAL_I2C_Master_Receive+0x224>)
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fff8 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e1fe      	b.n	80063b4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_I2C_Master_Receive+0x50>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e1f7      	b.n	80063b4 <HAL_I2C_Master_Receive+0x440>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d007      	beq.n	8005fea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0201 	orr.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ff8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2222      	movs	r2, #34	; 0x22
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2210      	movs	r2, #16
 8006006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	893a      	ldrh	r2, [r7, #8]
 800601a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a5c      	ldr	r2, [pc, #368]	; (800619c <HAL_I2C_Master_Receive+0x228>)
 800602a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800602c:	8979      	ldrh	r1, [r7, #10]
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fd66 	bl	8006b04 <I2C_MasterRequestRead>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e1b8      	b.n	80063b4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006046:	2b00      	cmp	r3, #0
 8006048:	d113      	bne.n	8006072 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800604a:	2300      	movs	r3, #0
 800604c:	623b      	str	r3, [r7, #32]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	695b      	ldr	r3, [r3, #20]
 8006054:	623b      	str	r3, [r7, #32]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	623b      	str	r3, [r7, #32]
 800605e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e18c      	b.n	800638c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006076:	2b01      	cmp	r3, #1
 8006078:	d11b      	bne.n	80060b2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	61fb      	str	r3, [r7, #28]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e16c      	b.n	800638c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d11b      	bne.n	80060f2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060da:	2300      	movs	r3, #0
 80060dc:	61bb      	str	r3, [r7, #24]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	e14c      	b.n	800638c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006100:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006118:	e138      	b.n	800638c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611e:	2b03      	cmp	r3, #3
 8006120:	f200 80f1 	bhi.w	8006306 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006128:	2b01      	cmp	r3, #1
 800612a:	d123      	bne.n	8006174 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800612c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f001 f88b 	bl	800724c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e139      	b.n	80063b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006172:	e10b      	b.n	800638c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006178:	2b02      	cmp	r3, #2
 800617a:	d14e      	bne.n	800621a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	2200      	movs	r2, #0
 8006184:	4906      	ldr	r1, [pc, #24]	; (80061a0 <HAL_I2C_Master_Receive+0x22c>)
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 ff08 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d008      	beq.n	80061a4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e10e      	b.n	80063b4 <HAL_I2C_Master_Receive+0x440>
 8006196:	bf00      	nop
 8006198:	00100002 	.word	0x00100002
 800619c:	ffff0000 	.word	0xffff0000
 80061a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006218:	e0b8      	b.n	800638c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	2200      	movs	r2, #0
 8006222:	4966      	ldr	r1, [pc, #408]	; (80063bc <HAL_I2C_Master_Receive+0x448>)
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 feb9 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0bf      	b.n	80063b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006242:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	2200      	movs	r2, #0
 800627e:	494f      	ldr	r1, [pc, #316]	; (80063bc <HAL_I2C_Master_Receive+0x448>)
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fe8b 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e091      	b.n	80063b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	3b01      	subs	r3, #1
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006304:	e042      	b.n	800638c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006308:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 ff9e 	bl	800724c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e04c      	b.n	80063b4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b04      	cmp	r3, #4
 8006358:	d118      	bne.n	800638c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006390:	2b00      	cmp	r3, #0
 8006392:	f47f aec2 	bne.w	800611a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e000      	b.n	80063b4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80063b2:	2302      	movs	r3, #2
  }
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3728      	adds	r7, #40	; 0x28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	00010004 	.word	0x00010004

080063c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	461a      	mov	r2, r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	817b      	strh	r3, [r7, #10]
 80063d2:	460b      	mov	r3, r1
 80063d4:	813b      	strh	r3, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063da:	f7fe fdef 	bl	8004fbc <HAL_GetTick>
 80063de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	f040 80d9 	bne.w	80065a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	2319      	movs	r3, #25
 80063f4:	2201      	movs	r2, #1
 80063f6:	496d      	ldr	r1, [pc, #436]	; (80065ac <HAL_I2C_Mem_Write+0x1ec>)
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fdcf 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006404:	2302      	movs	r3, #2
 8006406:	e0cc      	b.n	80065a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640e:	2b01      	cmp	r3, #1
 8006410:	d101      	bne.n	8006416 <HAL_I2C_Mem_Write+0x56>
 8006412:	2302      	movs	r3, #2
 8006414:	e0c5      	b.n	80065a2 <HAL_I2C_Mem_Write+0x1e2>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b01      	cmp	r3, #1
 800642a:	d007      	beq.n	800643c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800644a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2221      	movs	r2, #33	; 0x21
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2240      	movs	r2, #64	; 0x40
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a3a      	ldr	r2, [r7, #32]
 8006466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800646c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4a4d      	ldr	r2, [pc, #308]	; (80065b0 <HAL_I2C_Mem_Write+0x1f0>)
 800647c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800647e:	88f8      	ldrh	r0, [r7, #6]
 8006480:	893a      	ldrh	r2, [r7, #8]
 8006482:	8979      	ldrh	r1, [r7, #10]
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	4603      	mov	r3, r0
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 fc06 	bl	8006ca0 <I2C_RequestMemoryWrite>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d052      	beq.n	8006540 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e081      	b.n	80065a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fe50 	bl	8007148 <I2C_WaitOnTXEFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d107      	bne.n	80064c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e06b      	b.n	80065a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	781a      	ldrb	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b04      	cmp	r3, #4
 8006506:	d11b      	bne.n	8006540 <HAL_I2C_Mem_Write+0x180>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650c:	2b00      	cmp	r3, #0
 800650e:	d017      	beq.n	8006540 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	781a      	ldrb	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006536:	b29b      	uxth	r3, r3
 8006538:	3b01      	subs	r3, #1
 800653a:	b29a      	uxth	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1aa      	bne.n	800649e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 fe3c 	bl	80071ca <I2C_WaitOnBTFFlagUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00d      	beq.n	8006574 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	2b04      	cmp	r3, #4
 800655e:	d107      	bne.n	8006570 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800656e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e016      	b.n	80065a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800659c:	2300      	movs	r3, #0
 800659e:	e000      	b.n	80065a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80065a0:	2302      	movs	r3, #2
  }
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	00100002 	.word	0x00100002
 80065b0:	ffff0000 	.word	0xffff0000

080065b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08c      	sub	sp, #48	; 0x30
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	4608      	mov	r0, r1
 80065be:	4611      	mov	r1, r2
 80065c0:	461a      	mov	r2, r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	817b      	strh	r3, [r7, #10]
 80065c6:	460b      	mov	r3, r1
 80065c8:	813b      	strh	r3, [r7, #8]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065ce:	f7fe fcf5 	bl	8004fbc <HAL_GetTick>
 80065d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b20      	cmp	r3, #32
 80065de:	f040 8208 	bne.w	80069f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	2319      	movs	r3, #25
 80065e8:	2201      	movs	r2, #1
 80065ea:	497b      	ldr	r1, [pc, #492]	; (80067d8 <HAL_I2C_Mem_Read+0x224>)
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fcd5 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80065f8:	2302      	movs	r3, #2
 80065fa:	e1fb      	b.n	80069f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006602:	2b01      	cmp	r3, #1
 8006604:	d101      	bne.n	800660a <HAL_I2C_Mem_Read+0x56>
 8006606:	2302      	movs	r3, #2
 8006608:	e1f4      	b.n	80069f4 <HAL_I2C_Mem_Read+0x440>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b01      	cmp	r3, #1
 800661e:	d007      	beq.n	8006630 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800663e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2222      	movs	r2, #34	; 0x22
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2240      	movs	r2, #64	; 0x40
 800664c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800665a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4a5b      	ldr	r2, [pc, #364]	; (80067dc <HAL_I2C_Mem_Read+0x228>)
 8006670:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006672:	88f8      	ldrh	r0, [r7, #6]
 8006674:	893a      	ldrh	r2, [r7, #8]
 8006676:	8979      	ldrh	r1, [r7, #10]
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	4603      	mov	r3, r0
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fba2 	bl	8006dcc <I2C_RequestMemoryRead>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e1b0      	b.n	80069f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006696:	2b00      	cmp	r3, #0
 8006698:	d113      	bne.n	80066c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800669a:	2300      	movs	r3, #0
 800669c:	623b      	str	r3, [r7, #32]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	623b      	str	r3, [r7, #32]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	623b      	str	r3, [r7, #32]
 80066ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	e184      	b.n	80069cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d11b      	bne.n	8006702 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066da:	2300      	movs	r3, #0
 80066dc:	61fb      	str	r3, [r7, #28]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	61fb      	str	r3, [r7, #28]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	61fb      	str	r3, [r7, #28]
 80066ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	e164      	b.n	80069cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006706:	2b02      	cmp	r3, #2
 8006708:	d11b      	bne.n	8006742 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006718:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672a:	2300      	movs	r3, #0
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	e144      	b.n	80069cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006758:	e138      	b.n	80069cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800675e:	2b03      	cmp	r3, #3
 8006760:	f200 80f1 	bhi.w	8006946 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006768:	2b01      	cmp	r3, #1
 800676a:	d123      	bne.n	80067b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800676c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fd6b 	bl	800724c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e139      	b.n	80069f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067b2:	e10b      	b.n	80069cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d14e      	bne.n	800685a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	2200      	movs	r2, #0
 80067c4:	4906      	ldr	r1, [pc, #24]	; (80067e0 <HAL_I2C_Mem_Read+0x22c>)
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fbe8 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d008      	beq.n	80067e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e10e      	b.n	80069f4 <HAL_I2C_Mem_Read+0x440>
 80067d6:	bf00      	nop
 80067d8:	00100002 	.word	0x00100002
 80067dc:	ffff0000 	.word	0xffff0000
 80067e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681c:	b29b      	uxth	r3, r3
 800681e:	3b01      	subs	r3, #1
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006858:	e0b8      	b.n	80069cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	2200      	movs	r2, #0
 8006862:	4966      	ldr	r1, [pc, #408]	; (80069fc <HAL_I2C_Mem_Read+0x448>)
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 fb99 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e0bf      	b.n	80069f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068bc:	2200      	movs	r2, #0
 80068be:	494f      	ldr	r1, [pc, #316]	; (80069fc <HAL_I2C_Mem_Read+0x448>)
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fb6b 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e091      	b.n	80069f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	691a      	ldr	r2, [r3, #16]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29a      	uxth	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691a      	ldr	r2, [r3, #16]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692e:	3b01      	subs	r3, #1
 8006930:	b29a      	uxth	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693a:	b29b      	uxth	r3, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006944:	e042      	b.n	80069cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006948:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 fc7e 	bl	800724c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e04c      	b.n	80069f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b04      	cmp	r3, #4
 8006998:	d118      	bne.n	80069cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f47f aec2 	bne.w	800675a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2220      	movs	r2, #32
 80069da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	e000      	b.n	80069f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80069f2:	2302      	movs	r3, #2
  }
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3728      	adds	r7, #40	; 0x28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	00010004 	.word	0x00010004

08006a00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	607a      	str	r2, [r7, #4]
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d006      	beq.n	8006a2a <I2C_MasterRequestWrite+0x2a>
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d003      	beq.n	8006a2a <I2C_MasterRequestWrite+0x2a>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a28:	d108      	bne.n	8006a3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	e00b      	b.n	8006a54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a40:	2b12      	cmp	r3, #18
 8006a42:	d107      	bne.n	8006a54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 fa9b 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00d      	beq.n	8006a88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7a:	d103      	bne.n	8006a84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e035      	b.n	8006af4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a90:	d108      	bne.n	8006aa4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a92:	897b      	ldrh	r3, [r7, #10]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006aa0:	611a      	str	r2, [r3, #16]
 8006aa2:	e01b      	b.n	8006adc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006aa4:	897b      	ldrh	r3, [r7, #10]
 8006aa6:	11db      	asrs	r3, r3, #7
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	f003 0306 	and.w	r3, r3, #6
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f063 030f 	orn	r3, r3, #15
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	490e      	ldr	r1, [pc, #56]	; (8006afc <I2C_MasterRequestWrite+0xfc>)
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fac1 	bl	800704a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e010      	b.n	8006af4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ad2:	897b      	ldrh	r3, [r7, #10]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	4907      	ldr	r1, [pc, #28]	; (8006b00 <I2C_MasterRequestWrite+0x100>)
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 fab1 	bl	800704a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	00010008 	.word	0x00010008
 8006b00:	00010002 	.word	0x00010002

08006b04 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	460b      	mov	r3, r1
 8006b12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b28:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d006      	beq.n	8006b3e <I2C_MasterRequestRead+0x3a>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d003      	beq.n	8006b3e <I2C_MasterRequestRead+0x3a>
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b3c:	d108      	bne.n	8006b50 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	e00b      	b.n	8006b68 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	2b11      	cmp	r3, #17
 8006b56:	d107      	bne.n	8006b68 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fa11 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00d      	beq.n	8006b9c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8e:	d103      	bne.n	8006b98 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e079      	b.n	8006c90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ba4:	d108      	bne.n	8006bb8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ba6:	897b      	ldrh	r3, [r7, #10]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	611a      	str	r2, [r3, #16]
 8006bb6:	e05f      	b.n	8006c78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006bb8:	897b      	ldrh	r3, [r7, #10]
 8006bba:	11db      	asrs	r3, r3, #7
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f003 0306 	and.w	r3, r3, #6
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f063 030f 	orn	r3, r3, #15
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	4930      	ldr	r1, [pc, #192]	; (8006c98 <I2C_MasterRequestRead+0x194>)
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 fa37 	bl	800704a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e054      	b.n	8006c90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006be6:	897b      	ldrh	r3, [r7, #10]
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	4929      	ldr	r1, [pc, #164]	; (8006c9c <I2C_MasterRequestRead+0x198>)
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 fa27 	bl	800704a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e044      	b.n	8006c90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	613b      	str	r3, [r7, #16]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 f9af 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00d      	beq.n	8006c60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c52:	d103      	bne.n	8006c5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e017      	b.n	8006c90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006c60:	897b      	ldrh	r3, [r7, #10]
 8006c62:	11db      	asrs	r3, r3, #7
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	f003 0306 	and.w	r3, r3, #6
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	f063 030e 	orn	r3, r3, #14
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4907      	ldr	r1, [pc, #28]	; (8006c9c <I2C_MasterRequestRead+0x198>)
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 f9e3 	bl	800704a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	00010008 	.word	0x00010008
 8006c9c:	00010002 	.word	0x00010002

08006ca0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	4608      	mov	r0, r1
 8006caa:	4611      	mov	r1, r2
 8006cac:	461a      	mov	r2, r3
 8006cae:	4603      	mov	r3, r0
 8006cb0:	817b      	strh	r3, [r7, #10]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	813b      	strh	r3, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 f960 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00d      	beq.n	8006cfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf0:	d103      	bne.n	8006cfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e05f      	b.n	8006dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cfe:	897b      	ldrh	r3, [r7, #10]
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	6a3a      	ldr	r2, [r7, #32]
 8006d12:	492d      	ldr	r1, [pc, #180]	; (8006dc8 <I2C_RequestMemoryWrite+0x128>)
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 f998 	bl	800704a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e04c      	b.n	8006dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3c:	6a39      	ldr	r1, [r7, #32]
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fa02 	bl	8007148 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00d      	beq.n	8006d66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d107      	bne.n	8006d62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e02b      	b.n	8006dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d66:	88fb      	ldrh	r3, [r7, #6]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d105      	bne.n	8006d78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d6c:	893b      	ldrh	r3, [r7, #8]
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	611a      	str	r2, [r3, #16]
 8006d76:	e021      	b.n	8006dbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d78:	893b      	ldrh	r3, [r7, #8]
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d88:	6a39      	ldr	r1, [r7, #32]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f9dc 	bl	8007148 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00d      	beq.n	8006db2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d107      	bne.n	8006dae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e005      	b.n	8006dbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006db2:	893b      	ldrh	r3, [r7, #8]
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	00010002 	.word	0x00010002

08006dcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b088      	sub	sp, #32
 8006dd0:	af02      	add	r7, sp, #8
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	461a      	mov	r2, r3
 8006dda:	4603      	mov	r3, r0
 8006ddc:	817b      	strh	r3, [r7, #10]
 8006dde:	460b      	mov	r3, r1
 8006de0:	813b      	strh	r3, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006df4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 f8c2 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00d      	beq.n	8006e3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e2c:	d103      	bne.n	8006e36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e0aa      	b.n	8006f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e3a:	897b      	ldrh	r3, [r7, #10]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	6a3a      	ldr	r2, [r7, #32]
 8006e4e:	4952      	ldr	r1, [pc, #328]	; (8006f98 <I2C_RequestMemoryRead+0x1cc>)
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f8fa 	bl	800704a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e097      	b.n	8006f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e78:	6a39      	ldr	r1, [r7, #32]
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 f964 	bl	8007148 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00d      	beq.n	8006ea2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d107      	bne.n	8006e9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e076      	b.n	8006f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d105      	bne.n	8006eb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ea8:	893b      	ldrh	r3, [r7, #8]
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	611a      	str	r2, [r3, #16]
 8006eb2:	e021      	b.n	8006ef8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006eb4:	893b      	ldrh	r3, [r7, #8]
 8006eb6:	0a1b      	lsrs	r3, r3, #8
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec4:	6a39      	ldr	r1, [r7, #32]
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 f93e 	bl	8007148 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00d      	beq.n	8006eee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d107      	bne.n	8006eea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e050      	b.n	8006f90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006eee:	893b      	ldrh	r3, [r7, #8]
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efa:	6a39      	ldr	r1, [r7, #32]
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 f923 	bl	8007148 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00d      	beq.n	8006f24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d107      	bne.n	8006f20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e035      	b.n	8006f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f82b 	bl	8006f9c <I2C_WaitOnFlagUntilTimeout>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00d      	beq.n	8006f68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5a:	d103      	bne.n	8006f64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e013      	b.n	8006f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f68:	897b      	ldrh	r3, [r7, #10]
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	f043 0301 	orr.w	r3, r3, #1
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	6a3a      	ldr	r2, [r7, #32]
 8006f7c:	4906      	ldr	r1, [pc, #24]	; (8006f98 <I2C_RequestMemoryRead+0x1cc>)
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 f863 	bl	800704a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	00010002 	.word	0x00010002

08006f9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fac:	e025      	b.n	8006ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fb4:	d021      	beq.n	8006ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fb6:	f7fe f801 	bl	8004fbc <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d302      	bcc.n	8006fcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d116      	bne.n	8006ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	f043 0220 	orr.w	r2, r3, #32
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e023      	b.n	8007042 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	0c1b      	lsrs	r3, r3, #16
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b01      	cmp	r3, #1
 8007002:	d10d      	bne.n	8007020 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	43da      	mvns	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4013      	ands	r3, r2
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	bf0c      	ite	eq
 8007016:	2301      	moveq	r3, #1
 8007018:	2300      	movne	r3, #0
 800701a:	b2db      	uxtb	r3, r3
 800701c:	461a      	mov	r2, r3
 800701e:	e00c      	b.n	800703a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	43da      	mvns	r2, r3
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4013      	ands	r3, r2
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	bf0c      	ite	eq
 8007032:	2301      	moveq	r3, #1
 8007034:	2300      	movne	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	461a      	mov	r2, r3
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	429a      	cmp	r2, r3
 800703e:	d0b6      	beq.n	8006fae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	60b9      	str	r1, [r7, #8]
 8007054:	607a      	str	r2, [r7, #4]
 8007056:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007058:	e051      	b.n	80070fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007068:	d123      	bne.n	80070b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007078:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007082:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2220      	movs	r2, #32
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	f043 0204 	orr.w	r2, r3, #4
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e046      	b.n	8007140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070b8:	d021      	beq.n	80070fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ba:	f7fd ff7f 	bl	8004fbc <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d302      	bcc.n	80070d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d116      	bne.n	80070fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2220      	movs	r2, #32
 80070da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	f043 0220 	orr.w	r2, r3, #32
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e020      	b.n	8007140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	0c1b      	lsrs	r3, r3, #16
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b01      	cmp	r3, #1
 8007106:	d10c      	bne.n	8007122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	43da      	mvns	r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	4013      	ands	r3, r2
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	bf14      	ite	ne
 800711a:	2301      	movne	r3, #1
 800711c:	2300      	moveq	r3, #0
 800711e:	b2db      	uxtb	r3, r3
 8007120:	e00b      	b.n	800713a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	43da      	mvns	r2, r3
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	4013      	ands	r3, r2
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	bf14      	ite	ne
 8007134:	2301      	movne	r3, #1
 8007136:	2300      	moveq	r3, #0
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d18d      	bne.n	800705a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007154:	e02d      	b.n	80071b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f8ce 	bl	80072f8 <I2C_IsAcknowledgeFailed>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e02d      	b.n	80071c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800716c:	d021      	beq.n	80071b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800716e:	f7fd ff25 	bl	8004fbc <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	429a      	cmp	r2, r3
 800717c:	d302      	bcc.n	8007184 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d116      	bne.n	80071b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2220      	movs	r2, #32
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f043 0220 	orr.w	r2, r3, #32
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e007      	b.n	80071c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071bc:	2b80      	cmp	r3, #128	; 0x80
 80071be:	d1ca      	bne.n	8007156 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071d6:	e02d      	b.n	8007234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f88d 	bl	80072f8 <I2C_IsAcknowledgeFailed>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e02d      	b.n	8007244 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ee:	d021      	beq.n	8007234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071f0:	f7fd fee4 	bl	8004fbc <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d302      	bcc.n	8007206 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d116      	bne.n	8007234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	f043 0220 	orr.w	r2, r3, #32
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e007      	b.n	8007244 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b04      	cmp	r3, #4
 8007240:	d1ca      	bne.n	80071d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007258:	e042      	b.n	80072e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	f003 0310 	and.w	r3, r3, #16
 8007264:	2b10      	cmp	r3, #16
 8007266:	d119      	bne.n	800729c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0210 	mvn.w	r2, #16
 8007270:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e029      	b.n	80072f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729c:	f7fd fe8e 	bl	8004fbc <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d302      	bcc.n	80072b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d116      	bne.n	80072e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	f043 0220 	orr.w	r2, r3, #32
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e007      	b.n	80072f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ea:	2b40      	cmp	r3, #64	; 0x40
 80072ec:	d1b5      	bne.n	800725a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800730a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800730e:	d11b      	bne.n	8007348 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007318:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2220      	movs	r2, #32
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	f043 0204 	orr.w	r2, r3, #4
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e000      	b.n	800734a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
	...

08007358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e267      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d075      	beq.n	8007462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007376:	4b88      	ldr	r3, [pc, #544]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 030c 	and.w	r3, r3, #12
 800737e:	2b04      	cmp	r3, #4
 8007380:	d00c      	beq.n	800739c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007382:	4b85      	ldr	r3, [pc, #532]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800738a:	2b08      	cmp	r3, #8
 800738c:	d112      	bne.n	80073b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800738e:	4b82      	ldr	r3, [pc, #520]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800739a:	d10b      	bne.n	80073b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800739c:	4b7e      	ldr	r3, [pc, #504]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d05b      	beq.n	8007460 <HAL_RCC_OscConfig+0x108>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d157      	bne.n	8007460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e242      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073bc:	d106      	bne.n	80073cc <HAL_RCC_OscConfig+0x74>
 80073be:	4b76      	ldr	r3, [pc, #472]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a75      	ldr	r2, [pc, #468]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80073c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	e01d      	b.n	8007408 <HAL_RCC_OscConfig+0xb0>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073d4:	d10c      	bne.n	80073f0 <HAL_RCC_OscConfig+0x98>
 80073d6:	4b70      	ldr	r3, [pc, #448]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a6f      	ldr	r2, [pc, #444]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80073dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	4b6d      	ldr	r3, [pc, #436]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a6c      	ldr	r2, [pc, #432]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80073e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	e00b      	b.n	8007408 <HAL_RCC_OscConfig+0xb0>
 80073f0:	4b69      	ldr	r3, [pc, #420]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a68      	ldr	r2, [pc, #416]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80073f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	4b66      	ldr	r3, [pc, #408]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a65      	ldr	r2, [pc, #404]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 8007402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d013      	beq.n	8007438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007410:	f7fd fdd4 	bl	8004fbc <HAL_GetTick>
 8007414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007416:	e008      	b.n	800742a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007418:	f7fd fdd0 	bl	8004fbc <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b64      	cmp	r3, #100	; 0x64
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e207      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800742a:	4b5b      	ldr	r3, [pc, #364]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0f0      	beq.n	8007418 <HAL_RCC_OscConfig+0xc0>
 8007436:	e014      	b.n	8007462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007438:	f7fd fdc0 	bl	8004fbc <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800743e:	e008      	b.n	8007452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007440:	f7fd fdbc 	bl	8004fbc <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b64      	cmp	r3, #100	; 0x64
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e1f3      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007452:	4b51      	ldr	r3, [pc, #324]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1f0      	bne.n	8007440 <HAL_RCC_OscConfig+0xe8>
 800745e:	e000      	b.n	8007462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d063      	beq.n	8007536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800746e:	4b4a      	ldr	r3, [pc, #296]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f003 030c 	and.w	r3, r3, #12
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800747a:	4b47      	ldr	r3, [pc, #284]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007482:	2b08      	cmp	r3, #8
 8007484:	d11c      	bne.n	80074c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007486:	4b44      	ldr	r3, [pc, #272]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d116      	bne.n	80074c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007492:	4b41      	ldr	r3, [pc, #260]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d005      	beq.n	80074aa <HAL_RCC_OscConfig+0x152>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d001      	beq.n	80074aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e1c7      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074aa:	4b3b      	ldr	r3, [pc, #236]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	4937      	ldr	r1, [pc, #220]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074be:	e03a      	b.n	8007536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d020      	beq.n	800750a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074c8:	4b34      	ldr	r3, [pc, #208]	; (800759c <HAL_RCC_OscConfig+0x244>)
 80074ca:	2201      	movs	r2, #1
 80074cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ce:	f7fd fd75 	bl	8004fbc <HAL_GetTick>
 80074d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d4:	e008      	b.n	80074e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074d6:	f7fd fd71 	bl	8004fbc <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d901      	bls.n	80074e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e1a8      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e8:	4b2b      	ldr	r3, [pc, #172]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0f0      	beq.n	80074d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074f4:	4b28      	ldr	r3, [pc, #160]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	4925      	ldr	r1, [pc, #148]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 8007504:	4313      	orrs	r3, r2
 8007506:	600b      	str	r3, [r1, #0]
 8007508:	e015      	b.n	8007536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800750a:	4b24      	ldr	r3, [pc, #144]	; (800759c <HAL_RCC_OscConfig+0x244>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007510:	f7fd fd54 	bl	8004fbc <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007518:	f7fd fd50 	bl	8004fbc <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e187      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800752a:	4b1b      	ldr	r3, [pc, #108]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f0      	bne.n	8007518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0308 	and.w	r3, r3, #8
 800753e:	2b00      	cmp	r3, #0
 8007540:	d036      	beq.n	80075b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d016      	beq.n	8007578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800754a:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <HAL_RCC_OscConfig+0x248>)
 800754c:	2201      	movs	r2, #1
 800754e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007550:	f7fd fd34 	bl	8004fbc <HAL_GetTick>
 8007554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007556:	e008      	b.n	800756a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007558:	f7fd fd30 	bl	8004fbc <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e167      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800756a:	4b0b      	ldr	r3, [pc, #44]	; (8007598 <HAL_RCC_OscConfig+0x240>)
 800756c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0f0      	beq.n	8007558 <HAL_RCC_OscConfig+0x200>
 8007576:	e01b      	b.n	80075b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007578:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <HAL_RCC_OscConfig+0x248>)
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800757e:	f7fd fd1d 	bl	8004fbc <HAL_GetTick>
 8007582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007584:	e00e      	b.n	80075a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007586:	f7fd fd19 	bl	8004fbc <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d907      	bls.n	80075a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e150      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
 8007598:	40023800 	.word	0x40023800
 800759c:	42470000 	.word	0x42470000
 80075a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075a4:	4b88      	ldr	r3, [pc, #544]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 80075a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1ea      	bne.n	8007586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8097 	beq.w	80076ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075be:	2300      	movs	r3, #0
 80075c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075c2:	4b81      	ldr	r3, [pc, #516]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10f      	bne.n	80075ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075ce:	2300      	movs	r3, #0
 80075d0:	60bb      	str	r3, [r7, #8]
 80075d2:	4b7d      	ldr	r3, [pc, #500]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	4a7c      	ldr	r2, [pc, #496]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 80075d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075dc:	6413      	str	r3, [r2, #64]	; 0x40
 80075de:	4b7a      	ldr	r3, [pc, #488]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e6:	60bb      	str	r3, [r7, #8]
 80075e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075ea:	2301      	movs	r3, #1
 80075ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ee:	4b77      	ldr	r3, [pc, #476]	; (80077cc <HAL_RCC_OscConfig+0x474>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d118      	bne.n	800762c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075fa:	4b74      	ldr	r3, [pc, #464]	; (80077cc <HAL_RCC_OscConfig+0x474>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a73      	ldr	r2, [pc, #460]	; (80077cc <HAL_RCC_OscConfig+0x474>)
 8007600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007606:	f7fd fcd9 	bl	8004fbc <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800760e:	f7fd fcd5 	bl	8004fbc <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e10c      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007620:	4b6a      	ldr	r3, [pc, #424]	; (80077cc <HAL_RCC_OscConfig+0x474>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0f0      	beq.n	800760e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d106      	bne.n	8007642 <HAL_RCC_OscConfig+0x2ea>
 8007634:	4b64      	ldr	r3, [pc, #400]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 8007636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007638:	4a63      	ldr	r2, [pc, #396]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 800763a:	f043 0301 	orr.w	r3, r3, #1
 800763e:	6713      	str	r3, [r2, #112]	; 0x70
 8007640:	e01c      	b.n	800767c <HAL_RCC_OscConfig+0x324>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	2b05      	cmp	r3, #5
 8007648:	d10c      	bne.n	8007664 <HAL_RCC_OscConfig+0x30c>
 800764a:	4b5f      	ldr	r3, [pc, #380]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 800764c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764e:	4a5e      	ldr	r2, [pc, #376]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 8007650:	f043 0304 	orr.w	r3, r3, #4
 8007654:	6713      	str	r3, [r2, #112]	; 0x70
 8007656:	4b5c      	ldr	r3, [pc, #368]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 8007658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765a:	4a5b      	ldr	r2, [pc, #364]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 800765c:	f043 0301 	orr.w	r3, r3, #1
 8007660:	6713      	str	r3, [r2, #112]	; 0x70
 8007662:	e00b      	b.n	800767c <HAL_RCC_OscConfig+0x324>
 8007664:	4b58      	ldr	r3, [pc, #352]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 8007666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007668:	4a57      	ldr	r2, [pc, #348]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 800766a:	f023 0301 	bic.w	r3, r3, #1
 800766e:	6713      	str	r3, [r2, #112]	; 0x70
 8007670:	4b55      	ldr	r3, [pc, #340]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 8007672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007674:	4a54      	ldr	r2, [pc, #336]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 8007676:	f023 0304 	bic.w	r3, r3, #4
 800767a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d015      	beq.n	80076b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007684:	f7fd fc9a 	bl	8004fbc <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800768a:	e00a      	b.n	80076a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800768c:	f7fd fc96 	bl	8004fbc <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	f241 3288 	movw	r2, #5000	; 0x1388
 800769a:	4293      	cmp	r3, r2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e0cb      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a2:	4b49      	ldr	r3, [pc, #292]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 80076a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0ee      	beq.n	800768c <HAL_RCC_OscConfig+0x334>
 80076ae:	e014      	b.n	80076da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076b0:	f7fd fc84 	bl	8004fbc <HAL_GetTick>
 80076b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076b6:	e00a      	b.n	80076ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076b8:	f7fd fc80 	bl	8004fbc <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d901      	bls.n	80076ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e0b5      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ce:	4b3e      	ldr	r3, [pc, #248]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 80076d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1ee      	bne.n	80076b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d105      	bne.n	80076ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076e0:	4b39      	ldr	r3, [pc, #228]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	4a38      	ldr	r2, [pc, #224]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 80076e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 80a1 	beq.w	8007838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076f6:	4b34      	ldr	r3, [pc, #208]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f003 030c 	and.w	r3, r3, #12
 80076fe:	2b08      	cmp	r3, #8
 8007700:	d05c      	beq.n	80077bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d141      	bne.n	800778e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800770a:	4b31      	ldr	r3, [pc, #196]	; (80077d0 <HAL_RCC_OscConfig+0x478>)
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007710:	f7fd fc54 	bl	8004fbc <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007718:	f7fd fc50 	bl	8004fbc <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e087      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800772a:	4b27      	ldr	r3, [pc, #156]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f0      	bne.n	8007718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69da      	ldr	r2, [r3, #28]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	019b      	lsls	r3, r3, #6
 8007746:	431a      	orrs	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	085b      	lsrs	r3, r3, #1
 800774e:	3b01      	subs	r3, #1
 8007750:	041b      	lsls	r3, r3, #16
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007758:	061b      	lsls	r3, r3, #24
 800775a:	491b      	ldr	r1, [pc, #108]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 800775c:	4313      	orrs	r3, r2
 800775e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007760:	4b1b      	ldr	r3, [pc, #108]	; (80077d0 <HAL_RCC_OscConfig+0x478>)
 8007762:	2201      	movs	r2, #1
 8007764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007766:	f7fd fc29 	bl	8004fbc <HAL_GetTick>
 800776a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800776c:	e008      	b.n	8007780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800776e:	f7fd fc25 	bl	8004fbc <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2b02      	cmp	r3, #2
 800777a:	d901      	bls.n	8007780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e05c      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007780:	4b11      	ldr	r3, [pc, #68]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d0f0      	beq.n	800776e <HAL_RCC_OscConfig+0x416>
 800778c:	e054      	b.n	8007838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800778e:	4b10      	ldr	r3, [pc, #64]	; (80077d0 <HAL_RCC_OscConfig+0x478>)
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007794:	f7fd fc12 	bl	8004fbc <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800779a:	e008      	b.n	80077ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800779c:	f7fd fc0e 	bl	8004fbc <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e045      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077ae:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <HAL_RCC_OscConfig+0x470>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1f0      	bne.n	800779c <HAL_RCC_OscConfig+0x444>
 80077ba:	e03d      	b.n	8007838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d107      	bne.n	80077d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e038      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
 80077c8:	40023800 	.word	0x40023800
 80077cc:	40007000 	.word	0x40007000
 80077d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077d4:	4b1b      	ldr	r3, [pc, #108]	; (8007844 <HAL_RCC_OscConfig+0x4ec>)
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d028      	beq.n	8007834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d121      	bne.n	8007834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d11a      	bne.n	8007834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007804:	4013      	ands	r3, r2
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800780a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800780c:	4293      	cmp	r3, r2
 800780e:	d111      	bne.n	8007834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	3b01      	subs	r3, #1
 800781e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007820:	429a      	cmp	r2, r3
 8007822:	d107      	bne.n	8007834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007830:	429a      	cmp	r2, r3
 8007832:	d001      	beq.n	8007838 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e000      	b.n	800783a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	40023800 	.word	0x40023800

08007848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e0cc      	b.n	80079f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800785c:	4b68      	ldr	r3, [pc, #416]	; (8007a00 <HAL_RCC_ClockConfig+0x1b8>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0307 	and.w	r3, r3, #7
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	429a      	cmp	r2, r3
 8007868:	d90c      	bls.n	8007884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800786a:	4b65      	ldr	r3, [pc, #404]	; (8007a00 <HAL_RCC_ClockConfig+0x1b8>)
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007872:	4b63      	ldr	r3, [pc, #396]	; (8007a00 <HAL_RCC_ClockConfig+0x1b8>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d001      	beq.n	8007884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e0b8      	b.n	80079f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d020      	beq.n	80078d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800789c:	4b59      	ldr	r3, [pc, #356]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	4a58      	ldr	r2, [pc, #352]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 80078a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80078a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078b4:	4b53      	ldr	r3, [pc, #332]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	4a52      	ldr	r2, [pc, #328]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 80078ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80078be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078c0:	4b50      	ldr	r3, [pc, #320]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	494d      	ldr	r1, [pc, #308]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d044      	beq.n	8007968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d107      	bne.n	80078f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078e6:	4b47      	ldr	r3, [pc, #284]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d119      	bne.n	8007926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e07f      	b.n	80079f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d003      	beq.n	8007906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007902:	2b03      	cmp	r3, #3
 8007904:	d107      	bne.n	8007916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007906:	4b3f      	ldr	r3, [pc, #252]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e06f      	b.n	80079f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007916:	4b3b      	ldr	r3, [pc, #236]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e067      	b.n	80079f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007926:	4b37      	ldr	r3, [pc, #220]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f023 0203 	bic.w	r2, r3, #3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	4934      	ldr	r1, [pc, #208]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 8007934:	4313      	orrs	r3, r2
 8007936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007938:	f7fd fb40 	bl	8004fbc <HAL_GetTick>
 800793c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800793e:	e00a      	b.n	8007956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007940:	f7fd fb3c 	bl	8004fbc <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	f241 3288 	movw	r2, #5000	; 0x1388
 800794e:	4293      	cmp	r3, r2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e04f      	b.n	80079f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007956:	4b2b      	ldr	r3, [pc, #172]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f003 020c 	and.w	r2, r3, #12
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	429a      	cmp	r2, r3
 8007966:	d1eb      	bne.n	8007940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007968:	4b25      	ldr	r3, [pc, #148]	; (8007a00 <HAL_RCC_ClockConfig+0x1b8>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 0307 	and.w	r3, r3, #7
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d20c      	bcs.n	8007990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007976:	4b22      	ldr	r3, [pc, #136]	; (8007a00 <HAL_RCC_ClockConfig+0x1b8>)
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800797e:	4b20      	ldr	r3, [pc, #128]	; (8007a00 <HAL_RCC_ClockConfig+0x1b8>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	429a      	cmp	r2, r3
 800798a:	d001      	beq.n	8007990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e032      	b.n	80079f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	d008      	beq.n	80079ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800799c:	4b19      	ldr	r3, [pc, #100]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	4916      	ldr	r1, [pc, #88]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0308 	and.w	r3, r3, #8
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d009      	beq.n	80079ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079ba:	4b12      	ldr	r3, [pc, #72]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	00db      	lsls	r3, r3, #3
 80079c8:	490e      	ldr	r1, [pc, #56]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80079ce:	f000 f821 	bl	8007a14 <HAL_RCC_GetSysClockFreq>
 80079d2:	4602      	mov	r2, r0
 80079d4:	4b0b      	ldr	r3, [pc, #44]	; (8007a04 <HAL_RCC_ClockConfig+0x1bc>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	091b      	lsrs	r3, r3, #4
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	490a      	ldr	r1, [pc, #40]	; (8007a08 <HAL_RCC_ClockConfig+0x1c0>)
 80079e0:	5ccb      	ldrb	r3, [r1, r3]
 80079e2:	fa22 f303 	lsr.w	r3, r2, r3
 80079e6:	4a09      	ldr	r2, [pc, #36]	; (8007a0c <HAL_RCC_ClockConfig+0x1c4>)
 80079e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80079ea:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <HAL_RCC_ClockConfig+0x1c8>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fd faa0 	bl	8004f34 <HAL_InitTick>

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	40023c00 	.word	0x40023c00
 8007a04:	40023800 	.word	0x40023800
 8007a08:	0801a938 	.word	0x0801a938
 8007a0c:	20000008 	.word	0x20000008
 8007a10:	2000000c 	.word	0x2000000c

08007a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a18:	b090      	sub	sp, #64	; 0x40
 8007a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a20:	2300      	movs	r3, #0
 8007a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a24:	2300      	movs	r3, #0
 8007a26:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a2c:	4b59      	ldr	r3, [pc, #356]	; (8007b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f003 030c 	and.w	r3, r3, #12
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d00d      	beq.n	8007a54 <HAL_RCC_GetSysClockFreq+0x40>
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	f200 80a1 	bhi.w	8007b80 <HAL_RCC_GetSysClockFreq+0x16c>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <HAL_RCC_GetSysClockFreq+0x34>
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d003      	beq.n	8007a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8007a46:	e09b      	b.n	8007b80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a48:	4b53      	ldr	r3, [pc, #332]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8007a4a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007a4c:	e09b      	b.n	8007b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a4e:	4b53      	ldr	r3, [pc, #332]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8007a50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a52:	e098      	b.n	8007b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a54:	4b4f      	ldr	r3, [pc, #316]	; (8007b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a5e:	4b4d      	ldr	r3, [pc, #308]	; (8007b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d028      	beq.n	8007abc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a6a:	4b4a      	ldr	r3, [pc, #296]	; (8007b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	099b      	lsrs	r3, r3, #6
 8007a70:	2200      	movs	r2, #0
 8007a72:	623b      	str	r3, [r7, #32]
 8007a74:	627a      	str	r2, [r7, #36]	; 0x24
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	4b47      	ldr	r3, [pc, #284]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8007a80:	fb03 f201 	mul.w	r2, r3, r1
 8007a84:	2300      	movs	r3, #0
 8007a86:	fb00 f303 	mul.w	r3, r0, r3
 8007a8a:	4413      	add	r3, r2
 8007a8c:	4a43      	ldr	r2, [pc, #268]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8007a8e:	fba0 1202 	umull	r1, r2, r0, r2
 8007a92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a94:	460a      	mov	r2, r1
 8007a96:	62ba      	str	r2, [r7, #40]	; 0x28
 8007a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a9a:	4413      	add	r3, r2
 8007a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	61bb      	str	r3, [r7, #24]
 8007aa4:	61fa      	str	r2, [r7, #28]
 8007aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007aaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007aae:	f7f9 f8eb 	bl	8000c88 <__aeabi_uldivmod>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aba:	e053      	b.n	8007b64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007abc:	4b35      	ldr	r3, [pc, #212]	; (8007b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	099b      	lsrs	r3, r3, #6
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	613b      	str	r3, [r7, #16]
 8007ac6:	617a      	str	r2, [r7, #20]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007ace:	f04f 0b00 	mov.w	fp, #0
 8007ad2:	4652      	mov	r2, sl
 8007ad4:	465b      	mov	r3, fp
 8007ad6:	f04f 0000 	mov.w	r0, #0
 8007ada:	f04f 0100 	mov.w	r1, #0
 8007ade:	0159      	lsls	r1, r3, #5
 8007ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ae4:	0150      	lsls	r0, r2, #5
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	ebb2 080a 	subs.w	r8, r2, sl
 8007aee:	eb63 090b 	sbc.w	r9, r3, fp
 8007af2:	f04f 0200 	mov.w	r2, #0
 8007af6:	f04f 0300 	mov.w	r3, #0
 8007afa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007afe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007b02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007b06:	ebb2 0408 	subs.w	r4, r2, r8
 8007b0a:	eb63 0509 	sbc.w	r5, r3, r9
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	f04f 0300 	mov.w	r3, #0
 8007b16:	00eb      	lsls	r3, r5, #3
 8007b18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b1c:	00e2      	lsls	r2, r4, #3
 8007b1e:	4614      	mov	r4, r2
 8007b20:	461d      	mov	r5, r3
 8007b22:	eb14 030a 	adds.w	r3, r4, sl
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	eb45 030b 	adc.w	r3, r5, fp
 8007b2c:	607b      	str	r3, [r7, #4]
 8007b2e:	f04f 0200 	mov.w	r2, #0
 8007b32:	f04f 0300 	mov.w	r3, #0
 8007b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	028b      	lsls	r3, r1, #10
 8007b3e:	4621      	mov	r1, r4
 8007b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b44:	4621      	mov	r1, r4
 8007b46:	028a      	lsls	r2, r1, #10
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4e:	2200      	movs	r2, #0
 8007b50:	60bb      	str	r3, [r7, #8]
 8007b52:	60fa      	str	r2, [r7, #12]
 8007b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b58:	f7f9 f896 	bl	8000c88 <__aeabi_uldivmod>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4613      	mov	r3, r2
 8007b62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b64:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	0c1b      	lsrs	r3, r3, #16
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	3301      	adds	r3, #1
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b7e:	e002      	b.n	8007b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b80:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3740      	adds	r7, #64	; 0x40
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b92:	bf00      	nop
 8007b94:	40023800 	.word	0x40023800
 8007b98:	00f42400 	.word	0x00f42400
 8007b9c:	017d7840 	.word	0x017d7840

08007ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ba4:	4b03      	ldr	r3, [pc, #12]	; (8007bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20000008 	.word	0x20000008

08007bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bbc:	f7ff fff0 	bl	8007ba0 <HAL_RCC_GetHCLKFreq>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	0a9b      	lsrs	r3, r3, #10
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	4903      	ldr	r1, [pc, #12]	; (8007bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bce:	5ccb      	ldrb	r3, [r1, r3]
 8007bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40023800 	.word	0x40023800
 8007bdc:	0801a948 	.word	0x0801a948

08007be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007be4:	f7ff ffdc 	bl	8007ba0 <HAL_RCC_GetHCLKFreq>
 8007be8:	4602      	mov	r2, r0
 8007bea:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	0b5b      	lsrs	r3, r3, #13
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	4903      	ldr	r1, [pc, #12]	; (8007c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bf6:	5ccb      	ldrb	r3, [r1, r3]
 8007bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	40023800 	.word	0x40023800
 8007c04:	0801a948 	.word	0x0801a948

08007c08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d105      	bne.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d035      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c30:	4b62      	ldr	r3, [pc, #392]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c36:	f7fd f9c1 	bl	8004fbc <HAL_GetTick>
 8007c3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c3c:	e008      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007c3e:	f7fd f9bd 	bl	8004fbc <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d901      	bls.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e0b0      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c50:	4b5b      	ldr	r3, [pc, #364]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1f0      	bne.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	019a      	lsls	r2, r3, #6
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	071b      	lsls	r3, r3, #28
 8007c68:	4955      	ldr	r1, [pc, #340]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c70:	4b52      	ldr	r3, [pc, #328]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007c72:	2201      	movs	r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c76:	f7fd f9a1 	bl	8004fbc <HAL_GetTick>
 8007c7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c7c:	e008      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007c7e:	f7fd f99d 	bl	8004fbc <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e090      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c90:	4b4b      	ldr	r3, [pc, #300]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f0      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0302 	and.w	r3, r3, #2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 8083 	beq.w	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
 8007cae:	4b44      	ldr	r3, [pc, #272]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	4a43      	ldr	r2, [pc, #268]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8007cba:	4b41      	ldr	r3, [pc, #260]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007cc6:	4b3f      	ldr	r3, [pc, #252]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a3e      	ldr	r2, [pc, #248]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007cd2:	f7fd f973 	bl	8004fbc <HAL_GetTick>
 8007cd6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007cd8:	e008      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007cda:	f7fd f96f 	bl	8004fbc <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d901      	bls.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e062      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007cec:	4b35      	ldr	r3, [pc, #212]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d0f0      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007cf8:	4b31      	ldr	r3, [pc, #196]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d00:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d02f      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d10:	693a      	ldr	r2, [r7, #16]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d028      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d16:	4b2a      	ldr	r3, [pc, #168]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d1e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d20:	4b29      	ldr	r3, [pc, #164]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007d22:	2201      	movs	r2, #1
 8007d24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d26:	4b28      	ldr	r3, [pc, #160]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007d2c:	4a24      	ldr	r2, [pc, #144]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d32:	4b23      	ldr	r3, [pc, #140]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d114      	bne.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007d3e:	f7fd f93d 	bl	8004fbc <HAL_GetTick>
 8007d42:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d44:	e00a      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d46:	f7fd f939 	bl	8004fbc <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d901      	bls.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e02a      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d5c:	4b18      	ldr	r3, [pc, #96]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0ee      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d74:	d10d      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007d76:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d8a:	490d      	ldr	r1, [pc, #52]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	608b      	str	r3, [r1, #8]
 8007d90:	e005      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007d92:	4b0b      	ldr	r3, [pc, #44]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	4a0a      	ldr	r2, [pc, #40]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007d98:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d9c:	6093      	str	r3, [r2, #8]
 8007d9e:	4b08      	ldr	r3, [pc, #32]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007da0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007daa:	4905      	ldr	r1, [pc, #20]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	42470068 	.word	0x42470068
 8007dc0:	40023800 	.word	0x40023800
 8007dc4:	40007000 	.word	0x40007000
 8007dc8:	42470e40 	.word	0x42470e40

08007dcc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e066      	b.n	8007eb0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	7f5b      	ldrb	r3, [r3, #29]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d105      	bne.n	8007df8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7fc fcdc 	bl	80047b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	22ca      	movs	r2, #202	; 0xca
 8007e04:	625a      	str	r2, [r3, #36]	; 0x24
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2253      	movs	r2, #83	; 0x53
 8007e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f87a 	bl	8007f08 <RTC_EnterInitMode>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d12c      	bne.n	8007e78 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6812      	ldr	r2, [r2, #0]
 8007e28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e30:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6899      	ldr	r1, [r3, #8]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	431a      	orrs	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	68d2      	ldr	r2, [r2, #12]
 8007e58:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6919      	ldr	r1, [r3, #16]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	041a      	lsls	r2, r3, #16
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f881 	bl	8007f76 <RTC_ExitInitMode>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d113      	bne.n	8007ea6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e8c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	699a      	ldr	r2, [r3, #24]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	22ff      	movs	r2, #255	; 0xff
 8007eac:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007ed2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ed4:	f7fd f872 	bl	8004fbc <HAL_GetTick>
 8007ed8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007eda:	e009      	b.n	8007ef0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007edc:	f7fd f86e 	bl	8004fbc <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eea:	d901      	bls.n	8007ef0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e007      	b.n	8007f00 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0ee      	beq.n	8007edc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d122      	bne.n	8007f6c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f34:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f36:	f7fd f841 	bl	8004fbc <HAL_GetTick>
 8007f3a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007f3c:	e00c      	b.n	8007f58 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007f3e:	f7fd f83d 	bl	8004fbc <HAL_GetTick>
 8007f42:	4602      	mov	r2, r0
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f4c:	d904      	bls.n	8007f58 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2204      	movs	r2, #4
 8007f52:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d102      	bne.n	8007f6c <RTC_EnterInitMode+0x64>
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d1e8      	bne.n	8007f3e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68da      	ldr	r2, [r3, #12]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f90:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f003 0320 	and.w	r3, r3, #32
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff ff89 	bl	8007eb8 <HAL_RTC_WaitForSynchro>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d004      	beq.n	8007fb6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2204      	movs	r2, #4
 8007fb0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e07b      	b.n	80080ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d108      	bne.n	8007fec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fe2:	d009      	beq.n	8007ff8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	61da      	str	r2, [r3, #28]
 8007fea:	e005      	b.n	8007ff8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fc fbf6 	bl	8004804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800802e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008040:	431a      	orrs	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	431a      	orrs	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	431a      	orrs	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008068:	431a      	orrs	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800807c:	ea42 0103 	orr.w	r1, r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008084:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	0c1b      	lsrs	r3, r3, #16
 8008096:	f003 0104 	and.w	r1, r3, #4
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	f003 0210 	and.w	r2, r3, #16
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	69da      	ldr	r2, [r3, #28]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b088      	sub	sp, #32
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	603b      	str	r3, [r7, #0]
 80080de:	4613      	mov	r3, r2
 80080e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d101      	bne.n	80080f4 <HAL_SPI_Transmit+0x22>
 80080f0:	2302      	movs	r3, #2
 80080f2:	e126      	b.n	8008342 <HAL_SPI_Transmit+0x270>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080fc:	f7fc ff5e 	bl	8004fbc <HAL_GetTick>
 8008100:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008102:	88fb      	ldrh	r3, [r7, #6]
 8008104:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b01      	cmp	r3, #1
 8008110:	d002      	beq.n	8008118 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008112:	2302      	movs	r3, #2
 8008114:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008116:	e10b      	b.n	8008330 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <HAL_SPI_Transmit+0x52>
 800811e:	88fb      	ldrh	r3, [r7, #6]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008128:	e102      	b.n	8008330 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2203      	movs	r2, #3
 800812e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	88fa      	ldrh	r2, [r7, #6]
 8008142:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	88fa      	ldrh	r2, [r7, #6]
 8008148:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008170:	d10f      	bne.n	8008192 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008180:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008190:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819c:	2b40      	cmp	r3, #64	; 0x40
 800819e:	d007      	beq.n	80081b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081b8:	d14b      	bne.n	8008252 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <HAL_SPI_Transmit+0xf6>
 80081c2:	8afb      	ldrh	r3, [r7, #22]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d13e      	bne.n	8008246 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081cc:	881a      	ldrh	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d8:	1c9a      	adds	r2, r3, #2
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80081ec:	e02b      	b.n	8008246 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d112      	bne.n	8008222 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008200:	881a      	ldrh	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820c:	1c9a      	adds	r2, r3, #2
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008216:	b29b      	uxth	r3, r3
 8008218:	3b01      	subs	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008220:	e011      	b.n	8008246 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008222:	f7fc fecb 	bl	8004fbc <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	683a      	ldr	r2, [r7, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	d803      	bhi.n	800823a <HAL_SPI_Transmit+0x168>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008238:	d102      	bne.n	8008240 <HAL_SPI_Transmit+0x16e>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d102      	bne.n	8008246 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008244:	e074      	b.n	8008330 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800824a:	b29b      	uxth	r3, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1ce      	bne.n	80081ee <HAL_SPI_Transmit+0x11c>
 8008250:	e04c      	b.n	80082ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <HAL_SPI_Transmit+0x18e>
 800825a:	8afb      	ldrh	r3, [r7, #22]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d140      	bne.n	80082e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	330c      	adds	r3, #12
 800826a:	7812      	ldrb	r2, [r2, #0]
 800826c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008272:	1c5a      	adds	r2, r3, #1
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800827c:	b29b      	uxth	r3, r3
 800827e:	3b01      	subs	r3, #1
 8008280:	b29a      	uxth	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008286:	e02c      	b.n	80082e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	2b02      	cmp	r3, #2
 8008294:	d113      	bne.n	80082be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	330c      	adds	r3, #12
 80082a0:	7812      	ldrb	r2, [r2, #0]
 80082a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	3b01      	subs	r3, #1
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80082bc:	e011      	b.n	80082e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082be:	f7fc fe7d 	bl	8004fbc <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d803      	bhi.n	80082d6 <HAL_SPI_Transmit+0x204>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082d4:	d102      	bne.n	80082dc <HAL_SPI_Transmit+0x20a>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d102      	bne.n	80082e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082e0:	e026      	b.n	8008330 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1cd      	bne.n	8008288 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 fa55 	bl	80087a0 <SPI_EndRxTxTransaction>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2220      	movs	r2, #32
 8008300:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10a      	bne.n	8008320 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800830a:	2300      	movs	r3, #0
 800830c:	613b      	str	r3, [r7, #16]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	613b      	str	r3, [r7, #16]
 800831e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	77fb      	strb	r3, [r7, #31]
 800832c:	e000      	b.n	8008330 <HAL_SPI_Transmit+0x25e>
  }

error:
 800832e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008340:	7ffb      	ldrb	r3, [r7, #31]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3720      	adds	r7, #32
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b08c      	sub	sp, #48	; 0x30
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008358:	2301      	movs	r3, #1
 800835a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_SPI_TransmitReceive+0x26>
 800836c:	2302      	movs	r3, #2
 800836e:	e18a      	b.n	8008686 <HAL_SPI_TransmitReceive+0x33c>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008378:	f7fc fe20 	bl	8004fbc <HAL_GetTick>
 800837c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800838e:	887b      	ldrh	r3, [r7, #2]
 8008390:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008392:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008396:	2b01      	cmp	r3, #1
 8008398:	d00f      	beq.n	80083ba <HAL_SPI_TransmitReceive+0x70>
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083a0:	d107      	bne.n	80083b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d103      	bne.n	80083b2 <HAL_SPI_TransmitReceive+0x68>
 80083aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d003      	beq.n	80083ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80083b2:	2302      	movs	r3, #2
 80083b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083b8:	e15b      	b.n	8008672 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d005      	beq.n	80083cc <HAL_SPI_TransmitReceive+0x82>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d002      	beq.n	80083cc <HAL_SPI_TransmitReceive+0x82>
 80083c6:	887b      	ldrh	r3, [r7, #2]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d103      	bne.n	80083d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083d2:	e14e      	b.n	8008672 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d003      	beq.n	80083e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2205      	movs	r2, #5
 80083e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	887a      	ldrh	r2, [r7, #2]
 80083f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	887a      	ldrh	r2, [r7, #2]
 80083fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	887a      	ldrh	r2, [r7, #2]
 800840a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	887a      	ldrh	r2, [r7, #2]
 8008410:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008428:	2b40      	cmp	r3, #64	; 0x40
 800842a:	d007      	beq.n	800843c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800843a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008444:	d178      	bne.n	8008538 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <HAL_SPI_TransmitReceive+0x10a>
 800844e:	8b7b      	ldrh	r3, [r7, #26]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d166      	bne.n	8008522 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008458:	881a      	ldrh	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	1c9a      	adds	r2, r3, #2
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800846e:	b29b      	uxth	r3, r3
 8008470:	3b01      	subs	r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008478:	e053      	b.n	8008522 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b02      	cmp	r3, #2
 8008486:	d11b      	bne.n	80084c0 <HAL_SPI_TransmitReceive+0x176>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d016      	beq.n	80084c0 <HAL_SPI_TransmitReceive+0x176>
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	2b01      	cmp	r3, #1
 8008496:	d113      	bne.n	80084c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849c:	881a      	ldrh	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a8:	1c9a      	adds	r2, r3, #2
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	3b01      	subs	r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d119      	bne.n	8008502 <HAL_SPI_TransmitReceive+0x1b8>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d014      	beq.n	8008502 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e2:	b292      	uxth	r2, r2
 80084e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ea:	1c9a      	adds	r2, r3, #2
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	3b01      	subs	r3, #1
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084fe:	2301      	movs	r3, #1
 8008500:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008502:	f7fc fd5b 	bl	8004fbc <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800850e:	429a      	cmp	r2, r3
 8008510:	d807      	bhi.n	8008522 <HAL_SPI_TransmitReceive+0x1d8>
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008518:	d003      	beq.n	8008522 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008520:	e0a7      	b.n	8008672 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008526:	b29b      	uxth	r3, r3
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1a6      	bne.n	800847a <HAL_SPI_TransmitReceive+0x130>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1a1      	bne.n	800847a <HAL_SPI_TransmitReceive+0x130>
 8008536:	e07c      	b.n	8008632 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <HAL_SPI_TransmitReceive+0x1fc>
 8008540:	8b7b      	ldrh	r3, [r7, #26]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d16b      	bne.n	800861e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	330c      	adds	r3, #12
 8008550:	7812      	ldrb	r2, [r2, #0]
 8008552:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008562:	b29b      	uxth	r3, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	b29a      	uxth	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800856c:	e057      	b.n	800861e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b02      	cmp	r3, #2
 800857a:	d11c      	bne.n	80085b6 <HAL_SPI_TransmitReceive+0x26c>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008580:	b29b      	uxth	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d017      	beq.n	80085b6 <HAL_SPI_TransmitReceive+0x26c>
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	2b01      	cmp	r3, #1
 800858a:	d114      	bne.n	80085b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	330c      	adds	r3, #12
 8008596:	7812      	ldrb	r2, [r2, #0]
 8008598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	3b01      	subs	r3, #1
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d119      	bne.n	80085f8 <HAL_SPI_TransmitReceive+0x2ae>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d014      	beq.n	80085f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68da      	ldr	r2, [r3, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d8:	b2d2      	uxtb	r2, r2
 80085da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	3b01      	subs	r3, #1
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085f4:	2301      	movs	r3, #1
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085f8:	f7fc fce0 	bl	8004fbc <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008604:	429a      	cmp	r2, r3
 8008606:	d803      	bhi.n	8008610 <HAL_SPI_TransmitReceive+0x2c6>
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800860e:	d102      	bne.n	8008616 <HAL_SPI_TransmitReceive+0x2cc>
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	2b00      	cmp	r3, #0
 8008614:	d103      	bne.n	800861e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800861c:	e029      	b.n	8008672 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008622:	b29b      	uxth	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1a2      	bne.n	800856e <HAL_SPI_TransmitReceive+0x224>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862c:	b29b      	uxth	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d19d      	bne.n	800856e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008634:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 f8b2 	bl	80087a0 <SPI_EndRxTxTransaction>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d006      	beq.n	8008650 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2220      	movs	r2, #32
 800864c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800864e:	e010      	b.n	8008672 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10b      	bne.n	8008670 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008658:	2300      	movs	r3, #0
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	e000      	b.n	8008672 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008670:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008686:	4618      	mov	r0, r3
 8008688:	3730      	adds	r7, #48	; 0x30
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	4613      	mov	r3, r2
 800869e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086a0:	f7fc fc8c 	bl	8004fbc <HAL_GetTick>
 80086a4:	4602      	mov	r2, r0
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	1a9b      	subs	r3, r3, r2
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4413      	add	r3, r2
 80086ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086b0:	f7fc fc84 	bl	8004fbc <HAL_GetTick>
 80086b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086b6:	4b39      	ldr	r3, [pc, #228]	; (800879c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	015b      	lsls	r3, r3, #5
 80086bc:	0d1b      	lsrs	r3, r3, #20
 80086be:	69fa      	ldr	r2, [r7, #28]
 80086c0:	fb02 f303 	mul.w	r3, r2, r3
 80086c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086c6:	e054      	b.n	8008772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ce:	d050      	beq.n	8008772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086d0:	f7fc fc74 	bl	8004fbc <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	69fa      	ldr	r2, [r7, #28]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d902      	bls.n	80086e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d13d      	bne.n	8008762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086fe:	d111      	bne.n	8008724 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008708:	d004      	beq.n	8008714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008712:	d107      	bne.n	8008724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800872c:	d10f      	bne.n	800874e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800874c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e017      	b.n	8008792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	3b01      	subs	r3, #1
 8008770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4013      	ands	r3, r2
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	429a      	cmp	r2, r3
 8008780:	bf0c      	ite	eq
 8008782:	2301      	moveq	r3, #1
 8008784:	2300      	movne	r3, #0
 8008786:	b2db      	uxtb	r3, r3
 8008788:	461a      	mov	r2, r3
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	429a      	cmp	r2, r3
 800878e:	d19b      	bne.n	80086c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3720      	adds	r7, #32
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20000008 	.word	0x20000008

080087a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b088      	sub	sp, #32
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80087ac:	4b1b      	ldr	r3, [pc, #108]	; (800881c <SPI_EndRxTxTransaction+0x7c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a1b      	ldr	r2, [pc, #108]	; (8008820 <SPI_EndRxTxTransaction+0x80>)
 80087b2:	fba2 2303 	umull	r2, r3, r2, r3
 80087b6:	0d5b      	lsrs	r3, r3, #21
 80087b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087bc:	fb02 f303 	mul.w	r3, r2, r3
 80087c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087ca:	d112      	bne.n	80087f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2200      	movs	r2, #0
 80087d4:	2180      	movs	r1, #128	; 0x80
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f7ff ff5a 	bl	8008690 <SPI_WaitFlagStateUntilTimeout>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d016      	beq.n	8008810 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e6:	f043 0220 	orr.w	r2, r3, #32
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e00f      	b.n	8008812 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008808:	2b80      	cmp	r3, #128	; 0x80
 800880a:	d0f2      	beq.n	80087f2 <SPI_EndRxTxTransaction+0x52>
 800880c:	e000      	b.n	8008810 <SPI_EndRxTxTransaction+0x70>
        break;
 800880e:	bf00      	nop
  }

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000008 	.word	0x20000008
 8008820:	165e9f81 	.word	0x165e9f81

08008824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e041      	b.n	80088ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7fc f822 	bl	8004894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3304      	adds	r3, #4
 8008860:	4619      	mov	r1, r3
 8008862:	4610      	mov	r0, r2
 8008864:	f000 fa10 	bl	8008c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e041      	b.n	8008958 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d106      	bne.n	80088ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f839 	bl	8008960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2202      	movs	r2, #2
 80088f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	3304      	adds	r3, #4
 80088fe:	4619      	mov	r1, r3
 8008900:	4610      	mov	r0, r2
 8008902:	f000 f9c1 	bl	8008c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800898a:	2b01      	cmp	r3, #1
 800898c:	d101      	bne.n	8008992 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800898e:	2302      	movs	r3, #2
 8008990:	e0ae      	b.n	8008af0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b0c      	cmp	r3, #12
 800899e:	f200 809f 	bhi.w	8008ae0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80089a2:	a201      	add	r2, pc, #4	; (adr r2, 80089a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	080089dd 	.word	0x080089dd
 80089ac:	08008ae1 	.word	0x08008ae1
 80089b0:	08008ae1 	.word	0x08008ae1
 80089b4:	08008ae1 	.word	0x08008ae1
 80089b8:	08008a1d 	.word	0x08008a1d
 80089bc:	08008ae1 	.word	0x08008ae1
 80089c0:	08008ae1 	.word	0x08008ae1
 80089c4:	08008ae1 	.word	0x08008ae1
 80089c8:	08008a5f 	.word	0x08008a5f
 80089cc:	08008ae1 	.word	0x08008ae1
 80089d0:	08008ae1 	.word	0x08008ae1
 80089d4:	08008ae1 	.word	0x08008ae1
 80089d8:	08008a9f 	.word	0x08008a9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 f9f0 	bl	8008dc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	699a      	ldr	r2, [r3, #24]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f042 0208 	orr.w	r2, r2, #8
 80089f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	699a      	ldr	r2, [r3, #24]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 0204 	bic.w	r2, r2, #4
 8008a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6999      	ldr	r1, [r3, #24]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	691a      	ldr	r2, [r3, #16]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	619a      	str	r2, [r3, #24]
      break;
 8008a1a:	e064      	b.n	8008ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68b9      	ldr	r1, [r7, #8]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fa40 	bl	8008ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699a      	ldr	r2, [r3, #24]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699a      	ldr	r2, [r3, #24]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6999      	ldr	r1, [r3, #24]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	021a      	lsls	r2, r3, #8
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	619a      	str	r2, [r3, #24]
      break;
 8008a5c:	e043      	b.n	8008ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 fa95 	bl	8008f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69da      	ldr	r2, [r3, #28]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f042 0208 	orr.w	r2, r2, #8
 8008a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69da      	ldr	r2, [r3, #28]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0204 	bic.w	r2, r2, #4
 8008a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69d9      	ldr	r1, [r3, #28]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	61da      	str	r2, [r3, #28]
      break;
 8008a9c:	e023      	b.n	8008ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68b9      	ldr	r1, [r7, #8]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fae9 	bl	800907c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69da      	ldr	r2, [r3, #28]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69da      	ldr	r2, [r3, #28]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	69d9      	ldr	r1, [r3, #28]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	021a      	lsls	r2, r3, #8
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	61da      	str	r2, [r3, #28]
      break;
 8008ade:	e002      	b.n	8008ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ae4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_TIM_ConfigClockSource+0x1c>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e0b4      	b.n	8008c7e <HAL_TIM_ConfigClockSource+0x186>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b4c:	d03e      	beq.n	8008bcc <HAL_TIM_ConfigClockSource+0xd4>
 8008b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b52:	f200 8087 	bhi.w	8008c64 <HAL_TIM_ConfigClockSource+0x16c>
 8008b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b5a:	f000 8086 	beq.w	8008c6a <HAL_TIM_ConfigClockSource+0x172>
 8008b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b62:	d87f      	bhi.n	8008c64 <HAL_TIM_ConfigClockSource+0x16c>
 8008b64:	2b70      	cmp	r3, #112	; 0x70
 8008b66:	d01a      	beq.n	8008b9e <HAL_TIM_ConfigClockSource+0xa6>
 8008b68:	2b70      	cmp	r3, #112	; 0x70
 8008b6a:	d87b      	bhi.n	8008c64 <HAL_TIM_ConfigClockSource+0x16c>
 8008b6c:	2b60      	cmp	r3, #96	; 0x60
 8008b6e:	d050      	beq.n	8008c12 <HAL_TIM_ConfigClockSource+0x11a>
 8008b70:	2b60      	cmp	r3, #96	; 0x60
 8008b72:	d877      	bhi.n	8008c64 <HAL_TIM_ConfigClockSource+0x16c>
 8008b74:	2b50      	cmp	r3, #80	; 0x50
 8008b76:	d03c      	beq.n	8008bf2 <HAL_TIM_ConfigClockSource+0xfa>
 8008b78:	2b50      	cmp	r3, #80	; 0x50
 8008b7a:	d873      	bhi.n	8008c64 <HAL_TIM_ConfigClockSource+0x16c>
 8008b7c:	2b40      	cmp	r3, #64	; 0x40
 8008b7e:	d058      	beq.n	8008c32 <HAL_TIM_ConfigClockSource+0x13a>
 8008b80:	2b40      	cmp	r3, #64	; 0x40
 8008b82:	d86f      	bhi.n	8008c64 <HAL_TIM_ConfigClockSource+0x16c>
 8008b84:	2b30      	cmp	r3, #48	; 0x30
 8008b86:	d064      	beq.n	8008c52 <HAL_TIM_ConfigClockSource+0x15a>
 8008b88:	2b30      	cmp	r3, #48	; 0x30
 8008b8a:	d86b      	bhi.n	8008c64 <HAL_TIM_ConfigClockSource+0x16c>
 8008b8c:	2b20      	cmp	r3, #32
 8008b8e:	d060      	beq.n	8008c52 <HAL_TIM_ConfigClockSource+0x15a>
 8008b90:	2b20      	cmp	r3, #32
 8008b92:	d867      	bhi.n	8008c64 <HAL_TIM_ConfigClockSource+0x16c>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d05c      	beq.n	8008c52 <HAL_TIM_ConfigClockSource+0x15a>
 8008b98:	2b10      	cmp	r3, #16
 8008b9a:	d05a      	beq.n	8008c52 <HAL_TIM_ConfigClockSource+0x15a>
 8008b9c:	e062      	b.n	8008c64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	6899      	ldr	r1, [r3, #8]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f000 fb35 	bl	800921c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	609a      	str	r2, [r3, #8]
      break;
 8008bca:	e04f      	b.n	8008c6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6818      	ldr	r0, [r3, #0]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	6899      	ldr	r1, [r3, #8]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f000 fb1e 	bl	800921c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689a      	ldr	r2, [r3, #8]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bee:	609a      	str	r2, [r3, #8]
      break;
 8008bf0:	e03c      	b.n	8008c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	6859      	ldr	r1, [r3, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f000 fa92 	bl	8009128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2150      	movs	r1, #80	; 0x50
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 faeb 	bl	80091e6 <TIM_ITRx_SetConfig>
      break;
 8008c10:	e02c      	b.n	8008c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	6859      	ldr	r1, [r3, #4]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f000 fab1 	bl	8009186 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2160      	movs	r1, #96	; 0x60
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 fadb 	bl	80091e6 <TIM_ITRx_SetConfig>
      break;
 8008c30:	e01c      	b.n	8008c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6818      	ldr	r0, [r3, #0]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	6859      	ldr	r1, [r3, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f000 fa72 	bl	8009128 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2140      	movs	r1, #64	; 0x40
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 facb 	bl	80091e6 <TIM_ITRx_SetConfig>
      break;
 8008c50:	e00c      	b.n	8008c6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	f000 fac2 	bl	80091e6 <TIM_ITRx_SetConfig>
      break;
 8008c62:	e003      	b.n	8008c6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	73fb      	strb	r3, [r7, #15]
      break;
 8008c68:	e000      	b.n	8008c6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
	...

08008c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a40      	ldr	r2, [pc, #256]	; (8008d9c <TIM_Base_SetConfig+0x114>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d013      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca6:	d00f      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a3d      	ldr	r2, [pc, #244]	; (8008da0 <TIM_Base_SetConfig+0x118>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d00b      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a3c      	ldr	r2, [pc, #240]	; (8008da4 <TIM_Base_SetConfig+0x11c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d007      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a3b      	ldr	r2, [pc, #236]	; (8008da8 <TIM_Base_SetConfig+0x120>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d003      	beq.n	8008cc8 <TIM_Base_SetConfig+0x40>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a3a      	ldr	r2, [pc, #232]	; (8008dac <TIM_Base_SetConfig+0x124>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d108      	bne.n	8008cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a2f      	ldr	r2, [pc, #188]	; (8008d9c <TIM_Base_SetConfig+0x114>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d02b      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce8:	d027      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a2c      	ldr	r2, [pc, #176]	; (8008da0 <TIM_Base_SetConfig+0x118>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d023      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a2b      	ldr	r2, [pc, #172]	; (8008da4 <TIM_Base_SetConfig+0x11c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d01f      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a2a      	ldr	r2, [pc, #168]	; (8008da8 <TIM_Base_SetConfig+0x120>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d01b      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a29      	ldr	r2, [pc, #164]	; (8008dac <TIM_Base_SetConfig+0x124>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d017      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a28      	ldr	r2, [pc, #160]	; (8008db0 <TIM_Base_SetConfig+0x128>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d013      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a27      	ldr	r2, [pc, #156]	; (8008db4 <TIM_Base_SetConfig+0x12c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d00f      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a26      	ldr	r2, [pc, #152]	; (8008db8 <TIM_Base_SetConfig+0x130>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d00b      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a25      	ldr	r2, [pc, #148]	; (8008dbc <TIM_Base_SetConfig+0x134>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d007      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a24      	ldr	r2, [pc, #144]	; (8008dc0 <TIM_Base_SetConfig+0x138>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d003      	beq.n	8008d3a <TIM_Base_SetConfig+0xb2>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a23      	ldr	r2, [pc, #140]	; (8008dc4 <TIM_Base_SetConfig+0x13c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d108      	bne.n	8008d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a0a      	ldr	r2, [pc, #40]	; (8008d9c <TIM_Base_SetConfig+0x114>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d003      	beq.n	8008d80 <TIM_Base_SetConfig+0xf8>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a0c      	ldr	r2, [pc, #48]	; (8008dac <TIM_Base_SetConfig+0x124>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d103      	bne.n	8008d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	615a      	str	r2, [r3, #20]
}
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40010000 	.word	0x40010000
 8008da0:	40000400 	.word	0x40000400
 8008da4:	40000800 	.word	0x40000800
 8008da8:	40000c00 	.word	0x40000c00
 8008dac:	40010400 	.word	0x40010400
 8008db0:	40014000 	.word	0x40014000
 8008db4:	40014400 	.word	0x40014400
 8008db8:	40014800 	.word	0x40014800
 8008dbc:	40001800 	.word	0x40001800
 8008dc0:	40001c00 	.word	0x40001c00
 8008dc4:	40002000 	.word	0x40002000

08008dc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b087      	sub	sp, #28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	f023 0201 	bic.w	r2, r3, #1
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f023 0303 	bic.w	r3, r3, #3
 8008dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f023 0302 	bic.w	r3, r3, #2
 8008e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a20      	ldr	r2, [pc, #128]	; (8008ea0 <TIM_OC1_SetConfig+0xd8>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d003      	beq.n	8008e2c <TIM_OC1_SetConfig+0x64>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a1f      	ldr	r2, [pc, #124]	; (8008ea4 <TIM_OC1_SetConfig+0xdc>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d10c      	bne.n	8008e46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f023 0308 	bic.w	r3, r3, #8
 8008e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f023 0304 	bic.w	r3, r3, #4
 8008e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a15      	ldr	r2, [pc, #84]	; (8008ea0 <TIM_OC1_SetConfig+0xd8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d003      	beq.n	8008e56 <TIM_OC1_SetConfig+0x8e>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a14      	ldr	r2, [pc, #80]	; (8008ea4 <TIM_OC1_SetConfig+0xdc>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d111      	bne.n	8008e7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	621a      	str	r2, [r3, #32]
}
 8008e94:	bf00      	nop
 8008e96:	371c      	adds	r7, #28
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	40010000 	.word	0x40010000
 8008ea4:	40010400 	.word	0x40010400

08008ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	f023 0210 	bic.w	r2, r3, #16
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	021b      	lsls	r3, r3, #8
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f023 0320 	bic.w	r3, r3, #32
 8008ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a22      	ldr	r2, [pc, #136]	; (8008f8c <TIM_OC2_SetConfig+0xe4>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d003      	beq.n	8008f10 <TIM_OC2_SetConfig+0x68>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a21      	ldr	r2, [pc, #132]	; (8008f90 <TIM_OC2_SetConfig+0xe8>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10d      	bne.n	8008f2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a17      	ldr	r2, [pc, #92]	; (8008f8c <TIM_OC2_SetConfig+0xe4>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d003      	beq.n	8008f3c <TIM_OC2_SetConfig+0x94>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a16      	ldr	r2, [pc, #88]	; (8008f90 <TIM_OC2_SetConfig+0xe8>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d113      	bne.n	8008f64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	621a      	str	r2, [r3, #32]
}
 8008f7e:	bf00      	nop
 8008f80:	371c      	adds	r7, #28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	40010000 	.word	0x40010000
 8008f90:	40010400 	.word	0x40010400

08008f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f023 0303 	bic.w	r3, r3, #3
 8008fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	021b      	lsls	r3, r3, #8
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a21      	ldr	r2, [pc, #132]	; (8009074 <TIM_OC3_SetConfig+0xe0>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d003      	beq.n	8008ffa <TIM_OC3_SetConfig+0x66>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a20      	ldr	r2, [pc, #128]	; (8009078 <TIM_OC3_SetConfig+0xe4>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d10d      	bne.n	8009016 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	021b      	lsls	r3, r3, #8
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	4313      	orrs	r3, r2
 800900c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a16      	ldr	r2, [pc, #88]	; (8009074 <TIM_OC3_SetConfig+0xe0>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d003      	beq.n	8009026 <TIM_OC3_SetConfig+0x92>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a15      	ldr	r2, [pc, #84]	; (8009078 <TIM_OC3_SetConfig+0xe4>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d113      	bne.n	800904e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800902c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	011b      	lsls	r3, r3, #4
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	4313      	orrs	r3, r2
 8009040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	011b      	lsls	r3, r3, #4
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	4313      	orrs	r3, r2
 800904c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	621a      	str	r2, [r3, #32]
}
 8009068:	bf00      	nop
 800906a:	371c      	adds	r7, #28
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	40010000 	.word	0x40010000
 8009078:	40010400 	.word	0x40010400

0800907c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	021b      	lsls	r3, r3, #8
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	031b      	lsls	r3, r3, #12
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a12      	ldr	r2, [pc, #72]	; (8009120 <TIM_OC4_SetConfig+0xa4>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d003      	beq.n	80090e4 <TIM_OC4_SetConfig+0x68>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a11      	ldr	r2, [pc, #68]	; (8009124 <TIM_OC4_SetConfig+0xa8>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d109      	bne.n	80090f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	019b      	lsls	r3, r3, #6
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	621a      	str	r2, [r3, #32]
}
 8009112:	bf00      	nop
 8009114:	371c      	adds	r7, #28
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	40010000 	.word	0x40010000
 8009124:	40010400 	.word	0x40010400

08009128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	f023 0201 	bic.w	r2, r3, #1
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	011b      	lsls	r3, r3, #4
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	4313      	orrs	r3, r2
 800915c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f023 030a 	bic.w	r3, r3, #10
 8009164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	4313      	orrs	r3, r2
 800916c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	621a      	str	r2, [r3, #32]
}
 800917a:	bf00      	nop
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009186:	b480      	push	{r7}
 8009188:	b087      	sub	sp, #28
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	f023 0210 	bic.w	r2, r3, #16
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6a1b      	ldr	r3, [r3, #32]
 80091a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	031b      	lsls	r3, r3, #12
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	011b      	lsls	r3, r3, #4
 80091c8:	693a      	ldr	r2, [r7, #16]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	621a      	str	r2, [r3, #32]
}
 80091da:	bf00      	nop
 80091dc:	371c      	adds	r7, #28
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b085      	sub	sp, #20
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4313      	orrs	r3, r2
 8009204:	f043 0307 	orr.w	r3, r3, #7
 8009208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	609a      	str	r2, [r3, #8]
}
 8009210:	bf00      	nop
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800921c:	b480      	push	{r7}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009236:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	021a      	lsls	r2, r3, #8
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	431a      	orrs	r2, r3
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4313      	orrs	r3, r2
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	4313      	orrs	r3, r2
 8009248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	609a      	str	r2, [r3, #8]
}
 8009250:	bf00      	nop
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800925c:	b480      	push	{r7}
 800925e:	b085      	sub	sp, #20
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800926c:	2b01      	cmp	r3, #1
 800926e:	d101      	bne.n	8009274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009270:	2302      	movs	r3, #2
 8009272:	e05a      	b.n	800932a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800929a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a21      	ldr	r2, [pc, #132]	; (8009338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d022      	beq.n	80092fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092c0:	d01d      	beq.n	80092fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a1d      	ldr	r2, [pc, #116]	; (800933c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d018      	beq.n	80092fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a1b      	ldr	r2, [pc, #108]	; (8009340 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d013      	beq.n	80092fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a1a      	ldr	r2, [pc, #104]	; (8009344 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d00e      	beq.n	80092fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a18      	ldr	r2, [pc, #96]	; (8009348 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d009      	beq.n	80092fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a17      	ldr	r2, [pc, #92]	; (800934c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d004      	beq.n	80092fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a15      	ldr	r2, [pc, #84]	; (8009350 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d10c      	bne.n	8009318 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	4313      	orrs	r3, r2
 800930e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop
 8009338:	40010000 	.word	0x40010000
 800933c:	40000400 	.word	0x40000400
 8009340:	40000800 	.word	0x40000800
 8009344:	40000c00 	.word	0x40000c00
 8009348:	40010400 	.word	0x40010400
 800934c:	40014000 	.word	0x40014000
 8009350:	40001800 	.word	0x40001800

08009354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e03f      	b.n	80093e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d106      	bne.n	8009380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7fb fb30 	bl	80049e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2224      	movs	r2, #36	; 0x24
 8009384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f9cb 	bl	8009734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	691a      	ldr	r2, [r3, #16]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	695a      	ldr	r2, [r3, #20]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68da      	ldr	r2, [r3, #12]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2220      	movs	r2, #32
 80093e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b08a      	sub	sp, #40	; 0x28
 80093f2:	af02      	add	r7, sp, #8
 80093f4:	60f8      	str	r0, [r7, #12]
 80093f6:	60b9      	str	r1, [r7, #8]
 80093f8:	603b      	str	r3, [r7, #0]
 80093fa:	4613      	mov	r3, r2
 80093fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b20      	cmp	r3, #32
 800940c:	d17c      	bne.n	8009508 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <HAL_UART_Transmit+0x2c>
 8009414:	88fb      	ldrh	r3, [r7, #6]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e075      	b.n	800950a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009424:	2b01      	cmp	r3, #1
 8009426:	d101      	bne.n	800942c <HAL_UART_Transmit+0x3e>
 8009428:	2302      	movs	r3, #2
 800942a:	e06e      	b.n	800950a <HAL_UART_Transmit+0x11c>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2221      	movs	r2, #33	; 0x21
 800943e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009442:	f7fb fdbb 	bl	8004fbc <HAL_GetTick>
 8009446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	88fa      	ldrh	r2, [r7, #6]
 800944c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	88fa      	ldrh	r2, [r7, #6]
 8009452:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800945c:	d108      	bne.n	8009470 <HAL_UART_Transmit+0x82>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	61bb      	str	r3, [r7, #24]
 800946e:	e003      	b.n	8009478 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009474:	2300      	movs	r3, #0
 8009476:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009480:	e02a      	b.n	80094d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2200      	movs	r2, #0
 800948a:	2180      	movs	r1, #128	; 0x80
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 f8e2 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e036      	b.n	800950a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10b      	bne.n	80094ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	3302      	adds	r3, #2
 80094b6:	61bb      	str	r3, [r7, #24]
 80094b8:	e007      	b.n	80094ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	781a      	ldrb	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	3301      	adds	r3, #1
 80094c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094dc:	b29b      	uxth	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1cf      	bne.n	8009482 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2200      	movs	r2, #0
 80094ea:	2140      	movs	r1, #64	; 0x40
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 f8b2 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e006      	b.n	800950a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2220      	movs	r2, #32
 8009500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009504:	2300      	movs	r3, #0
 8009506:	e000      	b.n	800950a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009508:	2302      	movs	r3, #2
  }
}
 800950a:	4618      	mov	r0, r3
 800950c:	3720      	adds	r7, #32
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b08a      	sub	sp, #40	; 0x28
 8009516:	af02      	add	r7, sp, #8
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	603b      	str	r3, [r7, #0]
 800951e:	4613      	mov	r3, r2
 8009520:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b20      	cmp	r3, #32
 8009530:	f040 808c 	bne.w	800964c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <HAL_UART_Receive+0x2e>
 800953a:	88fb      	ldrh	r3, [r7, #6]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e084      	b.n	800964e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800954a:	2b01      	cmp	r3, #1
 800954c:	d101      	bne.n	8009552 <HAL_UART_Receive+0x40>
 800954e:	2302      	movs	r3, #2
 8009550:	e07d      	b.n	800964e <HAL_UART_Receive+0x13c>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2222      	movs	r2, #34	; 0x22
 8009564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800956e:	f7fb fd25 	bl	8004fbc <HAL_GetTick>
 8009572:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	88fa      	ldrh	r2, [r7, #6]
 8009578:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	88fa      	ldrh	r2, [r7, #6]
 800957e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009588:	d108      	bne.n	800959c <HAL_UART_Receive+0x8a>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d104      	bne.n	800959c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009592:	2300      	movs	r3, #0
 8009594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	61bb      	str	r3, [r7, #24]
 800959a:	e003      	b.n	80095a4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095a0:	2300      	movs	r3, #0
 80095a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80095ac:	e043      	b.n	8009636 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2200      	movs	r2, #0
 80095b6:	2120      	movs	r1, #32
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 f84c 	bl	8009656 <UART_WaitOnFlagUntilTimeout>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e042      	b.n	800964e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10c      	bne.n	80095e8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095da:	b29a      	uxth	r2, r3
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	3302      	adds	r3, #2
 80095e4:	61bb      	str	r3, [r7, #24]
 80095e6:	e01f      	b.n	8009628 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095f0:	d007      	beq.n	8009602 <HAL_UART_Receive+0xf0>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <HAL_UART_Receive+0xfe>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d106      	bne.n	8009610 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	b2da      	uxtb	r2, r3
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	701a      	strb	r2, [r3, #0]
 800960e:	e008      	b.n	8009622 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800961c:	b2da      	uxtb	r2, r3
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	3301      	adds	r3, #1
 8009626:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800962c:	b29b      	uxth	r3, r3
 800962e:	3b01      	subs	r3, #1
 8009630:	b29a      	uxth	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800963a:	b29b      	uxth	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1b6      	bne.n	80095ae <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2220      	movs	r2, #32
 8009644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	e000      	b.n	800964e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800964c:	2302      	movs	r3, #2
  }
}
 800964e:	4618      	mov	r0, r3
 8009650:	3720      	adds	r7, #32
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b090      	sub	sp, #64	; 0x40
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	603b      	str	r3, [r7, #0]
 8009662:	4613      	mov	r3, r2
 8009664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009666:	e050      	b.n	800970a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800966a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800966e:	d04c      	beq.n	800970a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009672:	2b00      	cmp	r3, #0
 8009674:	d007      	beq.n	8009686 <UART_WaitOnFlagUntilTimeout+0x30>
 8009676:	f7fb fca1 	bl	8004fbc <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009682:	429a      	cmp	r2, r3
 8009684:	d241      	bcs.n	800970a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	330c      	adds	r3, #12
 800968c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800969c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	330c      	adds	r3, #12
 80096a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096a6:	637a      	str	r2, [r7, #52]	; 0x34
 80096a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e5      	bne.n	8009686 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3314      	adds	r3, #20
 80096c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	613b      	str	r3, [r7, #16]
   return(result);
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f023 0301 	bic.w	r3, r3, #1
 80096d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3314      	adds	r3, #20
 80096d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096da:	623a      	str	r2, [r7, #32]
 80096dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096de:	69f9      	ldr	r1, [r7, #28]
 80096e0:	6a3a      	ldr	r2, [r7, #32]
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1e5      	bne.n	80096ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2220      	movs	r2, #32
 80096f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2220      	movs	r2, #32
 80096fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009706:	2303      	movs	r3, #3
 8009708:	e00f      	b.n	800972a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4013      	ands	r3, r2
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	429a      	cmp	r2, r3
 8009718:	bf0c      	ite	eq
 800971a:	2301      	moveq	r3, #1
 800971c:	2300      	movne	r3, #0
 800971e:	b2db      	uxtb	r3, r3
 8009720:	461a      	mov	r2, r3
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	429a      	cmp	r2, r3
 8009726:	d09f      	beq.n	8009668 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3740      	adds	r7, #64	; 0x40
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
	...

08009734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009738:	b0c0      	sub	sp, #256	; 0x100
 800973a:	af00      	add	r7, sp, #0
 800973c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800974c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009750:	68d9      	ldr	r1, [r3, #12]
 8009752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	ea40 0301 	orr.w	r3, r0, r1
 800975c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800975e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	431a      	orrs	r2, r3
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	431a      	orrs	r2, r3
 8009774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	4313      	orrs	r3, r2
 800977c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800978c:	f021 010c 	bic.w	r1, r1, #12
 8009790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800979a:	430b      	orrs	r3, r1
 800979c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800979e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80097aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ae:	6999      	ldr	r1, [r3, #24]
 80097b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	ea40 0301 	orr.w	r3, r0, r1
 80097ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	4b8f      	ldr	r3, [pc, #572]	; (8009a00 <UART_SetConfig+0x2cc>)
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d005      	beq.n	80097d4 <UART_SetConfig+0xa0>
 80097c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	4b8d      	ldr	r3, [pc, #564]	; (8009a04 <UART_SetConfig+0x2d0>)
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d104      	bne.n	80097de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097d4:	f7fe fa04 	bl	8007be0 <HAL_RCC_GetPCLK2Freq>
 80097d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80097dc:	e003      	b.n	80097e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097de:	f7fe f9eb 	bl	8007bb8 <HAL_RCC_GetPCLK1Freq>
 80097e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097f0:	f040 810c 	bne.w	8009a0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097f8:	2200      	movs	r2, #0
 80097fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009802:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009806:	4622      	mov	r2, r4
 8009808:	462b      	mov	r3, r5
 800980a:	1891      	adds	r1, r2, r2
 800980c:	65b9      	str	r1, [r7, #88]	; 0x58
 800980e:	415b      	adcs	r3, r3
 8009810:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009812:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009816:	4621      	mov	r1, r4
 8009818:	eb12 0801 	adds.w	r8, r2, r1
 800981c:	4629      	mov	r1, r5
 800981e:	eb43 0901 	adc.w	r9, r3, r1
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	f04f 0300 	mov.w	r3, #0
 800982a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800982e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009836:	4690      	mov	r8, r2
 8009838:	4699      	mov	r9, r3
 800983a:	4623      	mov	r3, r4
 800983c:	eb18 0303 	adds.w	r3, r8, r3
 8009840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009844:	462b      	mov	r3, r5
 8009846:	eb49 0303 	adc.w	r3, r9, r3
 800984a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800984e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800985a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800985e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009862:	460b      	mov	r3, r1
 8009864:	18db      	adds	r3, r3, r3
 8009866:	653b      	str	r3, [r7, #80]	; 0x50
 8009868:	4613      	mov	r3, r2
 800986a:	eb42 0303 	adc.w	r3, r2, r3
 800986e:	657b      	str	r3, [r7, #84]	; 0x54
 8009870:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009874:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009878:	f7f7 fa06 	bl	8000c88 <__aeabi_uldivmod>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4b61      	ldr	r3, [pc, #388]	; (8009a08 <UART_SetConfig+0x2d4>)
 8009882:	fba3 2302 	umull	r2, r3, r3, r2
 8009886:	095b      	lsrs	r3, r3, #5
 8009888:	011c      	lsls	r4, r3, #4
 800988a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800988e:	2200      	movs	r2, #0
 8009890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009894:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009898:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800989c:	4642      	mov	r2, r8
 800989e:	464b      	mov	r3, r9
 80098a0:	1891      	adds	r1, r2, r2
 80098a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80098a4:	415b      	adcs	r3, r3
 80098a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80098ac:	4641      	mov	r1, r8
 80098ae:	eb12 0a01 	adds.w	sl, r2, r1
 80098b2:	4649      	mov	r1, r9
 80098b4:	eb43 0b01 	adc.w	fp, r3, r1
 80098b8:	f04f 0200 	mov.w	r2, #0
 80098bc:	f04f 0300 	mov.w	r3, #0
 80098c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098cc:	4692      	mov	sl, r2
 80098ce:	469b      	mov	fp, r3
 80098d0:	4643      	mov	r3, r8
 80098d2:	eb1a 0303 	adds.w	r3, sl, r3
 80098d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098da:	464b      	mov	r3, r9
 80098dc:	eb4b 0303 	adc.w	r3, fp, r3
 80098e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80098e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80098f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80098f8:	460b      	mov	r3, r1
 80098fa:	18db      	adds	r3, r3, r3
 80098fc:	643b      	str	r3, [r7, #64]	; 0x40
 80098fe:	4613      	mov	r3, r2
 8009900:	eb42 0303 	adc.w	r3, r2, r3
 8009904:	647b      	str	r3, [r7, #68]	; 0x44
 8009906:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800990a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800990e:	f7f7 f9bb 	bl	8000c88 <__aeabi_uldivmod>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4611      	mov	r1, r2
 8009918:	4b3b      	ldr	r3, [pc, #236]	; (8009a08 <UART_SetConfig+0x2d4>)
 800991a:	fba3 2301 	umull	r2, r3, r3, r1
 800991e:	095b      	lsrs	r3, r3, #5
 8009920:	2264      	movs	r2, #100	; 0x64
 8009922:	fb02 f303 	mul.w	r3, r2, r3
 8009926:	1acb      	subs	r3, r1, r3
 8009928:	00db      	lsls	r3, r3, #3
 800992a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800992e:	4b36      	ldr	r3, [pc, #216]	; (8009a08 <UART_SetConfig+0x2d4>)
 8009930:	fba3 2302 	umull	r2, r3, r3, r2
 8009934:	095b      	lsrs	r3, r3, #5
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800993c:	441c      	add	r4, r3
 800993e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009942:	2200      	movs	r2, #0
 8009944:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009948:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800994c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009950:	4642      	mov	r2, r8
 8009952:	464b      	mov	r3, r9
 8009954:	1891      	adds	r1, r2, r2
 8009956:	63b9      	str	r1, [r7, #56]	; 0x38
 8009958:	415b      	adcs	r3, r3
 800995a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800995c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009960:	4641      	mov	r1, r8
 8009962:	1851      	adds	r1, r2, r1
 8009964:	6339      	str	r1, [r7, #48]	; 0x30
 8009966:	4649      	mov	r1, r9
 8009968:	414b      	adcs	r3, r1
 800996a:	637b      	str	r3, [r7, #52]	; 0x34
 800996c:	f04f 0200 	mov.w	r2, #0
 8009970:	f04f 0300 	mov.w	r3, #0
 8009974:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009978:	4659      	mov	r1, fp
 800997a:	00cb      	lsls	r3, r1, #3
 800997c:	4651      	mov	r1, sl
 800997e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009982:	4651      	mov	r1, sl
 8009984:	00ca      	lsls	r2, r1, #3
 8009986:	4610      	mov	r0, r2
 8009988:	4619      	mov	r1, r3
 800998a:	4603      	mov	r3, r0
 800998c:	4642      	mov	r2, r8
 800998e:	189b      	adds	r3, r3, r2
 8009990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009994:	464b      	mov	r3, r9
 8009996:	460a      	mov	r2, r1
 8009998:	eb42 0303 	adc.w	r3, r2, r3
 800999c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80099ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80099b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80099b4:	460b      	mov	r3, r1
 80099b6:	18db      	adds	r3, r3, r3
 80099b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80099ba:	4613      	mov	r3, r2
 80099bc:	eb42 0303 	adc.w	r3, r2, r3
 80099c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80099ca:	f7f7 f95d 	bl	8000c88 <__aeabi_uldivmod>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4b0d      	ldr	r3, [pc, #52]	; (8009a08 <UART_SetConfig+0x2d4>)
 80099d4:	fba3 1302 	umull	r1, r3, r3, r2
 80099d8:	095b      	lsrs	r3, r3, #5
 80099da:	2164      	movs	r1, #100	; 0x64
 80099dc:	fb01 f303 	mul.w	r3, r1, r3
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	3332      	adds	r3, #50	; 0x32
 80099e6:	4a08      	ldr	r2, [pc, #32]	; (8009a08 <UART_SetConfig+0x2d4>)
 80099e8:	fba2 2303 	umull	r2, r3, r2, r3
 80099ec:	095b      	lsrs	r3, r3, #5
 80099ee:	f003 0207 	and.w	r2, r3, #7
 80099f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4422      	add	r2, r4
 80099fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099fc:	e106      	b.n	8009c0c <UART_SetConfig+0x4d8>
 80099fe:	bf00      	nop
 8009a00:	40011000 	.word	0x40011000
 8009a04:	40011400 	.word	0x40011400
 8009a08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a10:	2200      	movs	r2, #0
 8009a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009a1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009a1e:	4642      	mov	r2, r8
 8009a20:	464b      	mov	r3, r9
 8009a22:	1891      	adds	r1, r2, r2
 8009a24:	6239      	str	r1, [r7, #32]
 8009a26:	415b      	adcs	r3, r3
 8009a28:	627b      	str	r3, [r7, #36]	; 0x24
 8009a2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a2e:	4641      	mov	r1, r8
 8009a30:	1854      	adds	r4, r2, r1
 8009a32:	4649      	mov	r1, r9
 8009a34:	eb43 0501 	adc.w	r5, r3, r1
 8009a38:	f04f 0200 	mov.w	r2, #0
 8009a3c:	f04f 0300 	mov.w	r3, #0
 8009a40:	00eb      	lsls	r3, r5, #3
 8009a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a46:	00e2      	lsls	r2, r4, #3
 8009a48:	4614      	mov	r4, r2
 8009a4a:	461d      	mov	r5, r3
 8009a4c:	4643      	mov	r3, r8
 8009a4e:	18e3      	adds	r3, r4, r3
 8009a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a54:	464b      	mov	r3, r9
 8009a56:	eb45 0303 	adc.w	r3, r5, r3
 8009a5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a6e:	f04f 0200 	mov.w	r2, #0
 8009a72:	f04f 0300 	mov.w	r3, #0
 8009a76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	008b      	lsls	r3, r1, #2
 8009a7e:	4621      	mov	r1, r4
 8009a80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a84:	4621      	mov	r1, r4
 8009a86:	008a      	lsls	r2, r1, #2
 8009a88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a8c:	f7f7 f8fc 	bl	8000c88 <__aeabi_uldivmod>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4b60      	ldr	r3, [pc, #384]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009a96:	fba3 2302 	umull	r2, r3, r3, r2
 8009a9a:	095b      	lsrs	r3, r3, #5
 8009a9c:	011c      	lsls	r4, r3, #4
 8009a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009aa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009aac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	1891      	adds	r1, r2, r2
 8009ab6:	61b9      	str	r1, [r7, #24]
 8009ab8:	415b      	adcs	r3, r3
 8009aba:	61fb      	str	r3, [r7, #28]
 8009abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ac0:	4641      	mov	r1, r8
 8009ac2:	1851      	adds	r1, r2, r1
 8009ac4:	6139      	str	r1, [r7, #16]
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	414b      	adcs	r3, r1
 8009aca:	617b      	str	r3, [r7, #20]
 8009acc:	f04f 0200 	mov.w	r2, #0
 8009ad0:	f04f 0300 	mov.w	r3, #0
 8009ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ad8:	4659      	mov	r1, fp
 8009ada:	00cb      	lsls	r3, r1, #3
 8009adc:	4651      	mov	r1, sl
 8009ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ae2:	4651      	mov	r1, sl
 8009ae4:	00ca      	lsls	r2, r1, #3
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4603      	mov	r3, r0
 8009aec:	4642      	mov	r2, r8
 8009aee:	189b      	adds	r3, r3, r2
 8009af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009af4:	464b      	mov	r3, r9
 8009af6:	460a      	mov	r2, r1
 8009af8:	eb42 0303 	adc.w	r3, r2, r3
 8009afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009b0c:	f04f 0200 	mov.w	r2, #0
 8009b10:	f04f 0300 	mov.w	r3, #0
 8009b14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009b18:	4649      	mov	r1, r9
 8009b1a:	008b      	lsls	r3, r1, #2
 8009b1c:	4641      	mov	r1, r8
 8009b1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b22:	4641      	mov	r1, r8
 8009b24:	008a      	lsls	r2, r1, #2
 8009b26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009b2a:	f7f7 f8ad 	bl	8000c88 <__aeabi_uldivmod>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4611      	mov	r1, r2
 8009b34:	4b38      	ldr	r3, [pc, #224]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009b36:	fba3 2301 	umull	r2, r3, r3, r1
 8009b3a:	095b      	lsrs	r3, r3, #5
 8009b3c:	2264      	movs	r2, #100	; 0x64
 8009b3e:	fb02 f303 	mul.w	r3, r2, r3
 8009b42:	1acb      	subs	r3, r1, r3
 8009b44:	011b      	lsls	r3, r3, #4
 8009b46:	3332      	adds	r3, #50	; 0x32
 8009b48:	4a33      	ldr	r2, [pc, #204]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b4e:	095b      	lsrs	r3, r3, #5
 8009b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b54:	441c      	add	r4, r3
 8009b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	673b      	str	r3, [r7, #112]	; 0x70
 8009b5e:	677a      	str	r2, [r7, #116]	; 0x74
 8009b60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009b64:	4642      	mov	r2, r8
 8009b66:	464b      	mov	r3, r9
 8009b68:	1891      	adds	r1, r2, r2
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	415b      	adcs	r3, r3
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b74:	4641      	mov	r1, r8
 8009b76:	1851      	adds	r1, r2, r1
 8009b78:	6039      	str	r1, [r7, #0]
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	414b      	adcs	r3, r1
 8009b7e:	607b      	str	r3, [r7, #4]
 8009b80:	f04f 0200 	mov.w	r2, #0
 8009b84:	f04f 0300 	mov.w	r3, #0
 8009b88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b8c:	4659      	mov	r1, fp
 8009b8e:	00cb      	lsls	r3, r1, #3
 8009b90:	4651      	mov	r1, sl
 8009b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b96:	4651      	mov	r1, sl
 8009b98:	00ca      	lsls	r2, r1, #3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	4642      	mov	r2, r8
 8009ba2:	189b      	adds	r3, r3, r2
 8009ba4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ba6:	464b      	mov	r3, r9
 8009ba8:	460a      	mov	r2, r1
 8009baa:	eb42 0303 	adc.w	r3, r2, r3
 8009bae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8009bba:	667a      	str	r2, [r7, #100]	; 0x64
 8009bbc:	f04f 0200 	mov.w	r2, #0
 8009bc0:	f04f 0300 	mov.w	r3, #0
 8009bc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009bc8:	4649      	mov	r1, r9
 8009bca:	008b      	lsls	r3, r1, #2
 8009bcc:	4641      	mov	r1, r8
 8009bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bd2:	4641      	mov	r1, r8
 8009bd4:	008a      	lsls	r2, r1, #2
 8009bd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009bda:	f7f7 f855 	bl	8000c88 <__aeabi_uldivmod>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4b0d      	ldr	r3, [pc, #52]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009be4:	fba3 1302 	umull	r1, r3, r3, r2
 8009be8:	095b      	lsrs	r3, r3, #5
 8009bea:	2164      	movs	r1, #100	; 0x64
 8009bec:	fb01 f303 	mul.w	r3, r1, r3
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	011b      	lsls	r3, r3, #4
 8009bf4:	3332      	adds	r3, #50	; 0x32
 8009bf6:	4a08      	ldr	r2, [pc, #32]	; (8009c18 <UART_SetConfig+0x4e4>)
 8009bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfc:	095b      	lsrs	r3, r3, #5
 8009bfe:	f003 020f 	and.w	r2, r3, #15
 8009c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4422      	add	r2, r4
 8009c0a:	609a      	str	r2, [r3, #8]
}
 8009c0c:	bf00      	nop
 8009c0e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009c12:	46bd      	mov	sp, r7
 8009c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c18:	51eb851f 	.word	0x51eb851f

08009c1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009c20:	4904      	ldr	r1, [pc, #16]	; (8009c34 <MX_FATFS_Init+0x18>)
 8009c22:	4805      	ldr	r0, [pc, #20]	; (8009c38 <MX_FATFS_Init+0x1c>)
 8009c24:	f003 f8a8 	bl	800cd78 <FATFS_LinkDriver>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	4b03      	ldr	r3, [pc, #12]	; (8009c3c <MX_FATFS_Init+0x20>)
 8009c2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009c30:	bf00      	nop
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20003cf0 	.word	0x20003cf0
 8009c38:	20000014 	.word	0x20000014
 8009c3c:	20003cec 	.word	0x20003cec

08009c40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009c40:	b480      	push	{r7}
 8009c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009c44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	4603      	mov	r3, r0
 8009c58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8009c5a:	79fb      	ldrb	r3, [r7, #7]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7f9 f9df 	bl	8003020 <SD_disk_initialize>
 8009c62:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	4603      	mov	r3, r0
 8009c74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7f9 fab7 	bl	80031ec <SD_disk_status>
 8009c7e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60b9      	str	r1, [r7, #8]
 8009c90:	607a      	str	r2, [r7, #4]
 8009c92:	603b      	str	r3, [r7, #0]
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8009c98:	7bf8      	ldrb	r0, [r7, #15]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	68b9      	ldr	r1, [r7, #8]
 8009ca0:	f7f9 faba 	bl	8003218 <SD_disk_read>
 8009ca4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	603b      	str	r3, [r7, #0]
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8009cbe:	7bf8      	ldrb	r0, [r7, #15]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	68b9      	ldr	r1, [r7, #8]
 8009cc6:	f7f9 fb11 	bl	80032ec <SD_disk_write>
 8009cca:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	603a      	str	r2, [r7, #0]
 8009cde:	71fb      	strb	r3, [r7, #7]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8009ce4:	79b9      	ldrb	r1, [r7, #6]
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	683a      	ldr	r2, [r7, #0]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7f9 fb82 	bl	80033f4 <SD_disk_ioctl>
 8009cf0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009d06:	79fb      	ldrb	r3, [r7, #7]
 8009d08:	4a08      	ldr	r2, [pc, #32]	; (8009d2c <disk_status+0x30>)
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	79fa      	ldrb	r2, [r7, #7]
 8009d14:	4905      	ldr	r1, [pc, #20]	; (8009d2c <disk_status+0x30>)
 8009d16:	440a      	add	r2, r1
 8009d18:	7a12      	ldrb	r2, [r2, #8]
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	4798      	blx	r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20003f1c 	.word	0x20003f1c

08009d30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009d3e:	79fb      	ldrb	r3, [r7, #7]
 8009d40:	4a0d      	ldr	r2, [pc, #52]	; (8009d78 <disk_initialize+0x48>)
 8009d42:	5cd3      	ldrb	r3, [r2, r3]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d111      	bne.n	8009d6c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009d48:	79fb      	ldrb	r3, [r7, #7]
 8009d4a:	4a0b      	ldr	r2, [pc, #44]	; (8009d78 <disk_initialize+0x48>)
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d50:	79fb      	ldrb	r3, [r7, #7]
 8009d52:	4a09      	ldr	r2, [pc, #36]	; (8009d78 <disk_initialize+0x48>)
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4413      	add	r3, r2
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	79fa      	ldrb	r2, [r7, #7]
 8009d5e:	4906      	ldr	r1, [pc, #24]	; (8009d78 <disk_initialize+0x48>)
 8009d60:	440a      	add	r2, r1
 8009d62:	7a12      	ldrb	r2, [r2, #8]
 8009d64:	4610      	mov	r0, r2
 8009d66:	4798      	blx	r3
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20003f1c 	.word	0x20003f1c

08009d7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009d7c:	b590      	push	{r4, r7, lr}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	607a      	str	r2, [r7, #4]
 8009d86:	603b      	str	r3, [r7, #0]
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
 8009d8e:	4a0a      	ldr	r2, [pc, #40]	; (8009db8 <disk_read+0x3c>)
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4413      	add	r3, r2
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	689c      	ldr	r4, [r3, #8]
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	4a07      	ldr	r2, [pc, #28]	; (8009db8 <disk_read+0x3c>)
 8009d9c:	4413      	add	r3, r2
 8009d9e:	7a18      	ldrb	r0, [r3, #8]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	68b9      	ldr	r1, [r7, #8]
 8009da6:	47a0      	blx	r4
 8009da8:	4603      	mov	r3, r0
 8009daa:	75fb      	strb	r3, [r7, #23]
  return res;
 8009dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	371c      	adds	r7, #28
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd90      	pop	{r4, r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20003f1c 	.word	0x20003f1c

08009dbc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009dbc:	b590      	push	{r4, r7, lr}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	607a      	str	r2, [r7, #4]
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	4603      	mov	r3, r0
 8009dca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	4a0a      	ldr	r2, [pc, #40]	; (8009df8 <disk_write+0x3c>)
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	68dc      	ldr	r4, [r3, #12]
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	4a07      	ldr	r2, [pc, #28]	; (8009df8 <disk_write+0x3c>)
 8009ddc:	4413      	add	r3, r2
 8009dde:	7a18      	ldrb	r0, [r3, #8]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	68b9      	ldr	r1, [r7, #8]
 8009de6:	47a0      	blx	r4
 8009de8:	4603      	mov	r3, r0
 8009dea:	75fb      	strb	r3, [r7, #23]
  return res;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd90      	pop	{r4, r7, pc}
 8009df6:	bf00      	nop
 8009df8:	20003f1c 	.word	0x20003f1c

08009dfc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	603a      	str	r2, [r7, #0]
 8009e06:	71fb      	strb	r3, [r7, #7]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009e0c:	79fb      	ldrb	r3, [r7, #7]
 8009e0e:	4a09      	ldr	r2, [pc, #36]	; (8009e34 <disk_ioctl+0x38>)
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	79fa      	ldrb	r2, [r7, #7]
 8009e1a:	4906      	ldr	r1, [pc, #24]	; (8009e34 <disk_ioctl+0x38>)
 8009e1c:	440a      	add	r2, r1
 8009e1e:	7a10      	ldrb	r0, [r2, #8]
 8009e20:	79b9      	ldrb	r1, [r7, #6]
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	4798      	blx	r3
 8009e26:	4603      	mov	r3, r0
 8009e28:	73fb      	strb	r3, [r7, #15]
  return res;
 8009e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	20003f1c 	.word	0x20003f1c

08009e38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3301      	adds	r3, #1
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009e48:	89fb      	ldrh	r3, [r7, #14]
 8009e4a:	021b      	lsls	r3, r3, #8
 8009e4c:	b21a      	sxth	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b21b      	sxth	r3, r3
 8009e54:	4313      	orrs	r3, r2
 8009e56:	b21b      	sxth	r3, r3
 8009e58:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009e5a:	89fb      	ldrh	r3, [r7, #14]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3714      	adds	r7, #20
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3303      	adds	r3, #3
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	021b      	lsls	r3, r3, #8
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	3202      	adds	r2, #2
 8009e80:	7812      	ldrb	r2, [r2, #0]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	021b      	lsls	r3, r3, #8
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	3201      	adds	r2, #1
 8009e8e:	7812      	ldrb	r2, [r2, #0]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	021b      	lsls	r3, r3, #8
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	7812      	ldrb	r2, [r2, #0]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b083      	sub	sp, #12
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	607a      	str	r2, [r7, #4]
 8009ec0:	887a      	ldrh	r2, [r7, #2]
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]
 8009ec6:	887b      	ldrh	r3, [r7, #2]
 8009ec8:	0a1b      	lsrs	r3, r3, #8
 8009eca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	607a      	str	r2, [r7, #4]
 8009ed2:	887a      	ldrh	r2, [r7, #2]
 8009ed4:	b2d2      	uxtb	r2, r2
 8009ed6:	701a      	strb	r2, [r3, #0]
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	b2d2      	uxtb	r2, r2
 8009ef8:	701a      	strb	r2, [r3, #0]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	0a1b      	lsrs	r3, r3, #8
 8009efe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	607a      	str	r2, [r7, #4]
 8009f06:	683a      	ldr	r2, [r7, #0]
 8009f08:	b2d2      	uxtb	r2, r2
 8009f0a:	701a      	strb	r2, [r3, #0]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	0a1b      	lsrs	r3, r3, #8
 8009f10:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	1c5a      	adds	r2, r3, #1
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	b2d2      	uxtb	r2, r2
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	0a1b      	lsrs	r3, r3, #8
 8009f22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	607a      	str	r2, [r7, #4]
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	b2d2      	uxtb	r2, r2
 8009f2e:	701a      	strb	r2, [r3, #0]
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00d      	beq.n	8009f72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	1c53      	adds	r3, r2, #1
 8009f5a:	613b      	str	r3, [r7, #16]
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	1c59      	adds	r1, r3, #1
 8009f60:	6179      	str	r1, [r7, #20]
 8009f62:	7812      	ldrb	r2, [r2, #0]
 8009f64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	607b      	str	r3, [r7, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1f1      	bne.n	8009f56 <mem_cpy+0x1a>
	}
}
 8009f72:	bf00      	nop
 8009f74:	371c      	adds	r7, #28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009f7e:	b480      	push	{r7}
 8009f80:	b087      	sub	sp, #28
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	60b9      	str	r1, [r7, #8]
 8009f88:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	1c5a      	adds	r2, r3, #1
 8009f92:	617a      	str	r2, [r7, #20]
 8009f94:	68ba      	ldr	r2, [r7, #8]
 8009f96:	b2d2      	uxtb	r2, r2
 8009f98:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	607b      	str	r3, [r7, #4]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1f3      	bne.n	8009f8e <mem_set+0x10>
}
 8009fa6:	bf00      	nop
 8009fa8:	bf00      	nop
 8009faa:	371c      	adds	r7, #28
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009fb4:	b480      	push	{r7}
 8009fb6:	b089      	sub	sp, #36	; 0x24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	61fb      	str	r3, [r7, #28]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	61fa      	str	r2, [r7, #28]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	1c5a      	adds	r2, r3, #1
 8009fda:	61ba      	str	r2, [r7, #24]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	1acb      	subs	r3, r1, r3
 8009fe0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	607b      	str	r3, [r7, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d002      	beq.n	8009ff4 <mem_cmp+0x40>
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d0eb      	beq.n	8009fcc <mem_cmp+0x18>

	return r;
 8009ff4:	697b      	ldr	r3, [r7, #20]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3724      	adds	r7, #36	; 0x24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a002:	b480      	push	{r7}
 800a004:	b083      	sub	sp, #12
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a00c:	e002      	b.n	800a014 <chk_chr+0x12>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	3301      	adds	r3, #1
 800a012:	607b      	str	r3, [r7, #4]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d005      	beq.n	800a028 <chk_chr+0x26>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	461a      	mov	r2, r3
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	4293      	cmp	r3, r2
 800a026:	d1f2      	bne.n	800a00e <chk_chr+0xc>
	return *str;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	781b      	ldrb	r3, [r3, #0]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a042:	2300      	movs	r3, #0
 800a044:	60bb      	str	r3, [r7, #8]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	60fb      	str	r3, [r7, #12]
 800a04a:	e029      	b.n	800a0a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a04c:	4a27      	ldr	r2, [pc, #156]	; (800a0ec <chk_lock+0xb4>)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	011b      	lsls	r3, r3, #4
 800a052:	4413      	add	r3, r2
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d01d      	beq.n	800a096 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a05a:	4a24      	ldr	r2, [pc, #144]	; (800a0ec <chk_lock+0xb4>)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	011b      	lsls	r3, r3, #4
 800a060:	4413      	add	r3, r2
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d116      	bne.n	800a09a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a06c:	4a1f      	ldr	r2, [pc, #124]	; (800a0ec <chk_lock+0xb4>)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	011b      	lsls	r3, r3, #4
 800a072:	4413      	add	r3, r2
 800a074:	3304      	adds	r3, #4
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d10c      	bne.n	800a09a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a080:	4a1a      	ldr	r2, [pc, #104]	; (800a0ec <chk_lock+0xb4>)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	011b      	lsls	r3, r3, #4
 800a086:	4413      	add	r3, r2
 800a088:	3308      	adds	r3, #8
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a090:	429a      	cmp	r2, r3
 800a092:	d102      	bne.n	800a09a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a094:	e007      	b.n	800a0a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a096:	2301      	movs	r3, #1
 800a098:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3301      	adds	r3, #1
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d9d2      	bls.n	800a04c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d109      	bne.n	800a0c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d102      	bne.n	800a0b8 <chk_lock+0x80>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d101      	bne.n	800a0bc <chk_lock+0x84>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	e010      	b.n	800a0de <chk_lock+0xa6>
 800a0bc:	2312      	movs	r3, #18
 800a0be:	e00e      	b.n	800a0de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d108      	bne.n	800a0d8 <chk_lock+0xa0>
 800a0c6:	4a09      	ldr	r2, [pc, #36]	; (800a0ec <chk_lock+0xb4>)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	011b      	lsls	r3, r3, #4
 800a0cc:	4413      	add	r3, r2
 800a0ce:	330c      	adds	r3, #12
 800a0d0:	881b      	ldrh	r3, [r3, #0]
 800a0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d6:	d101      	bne.n	800a0dc <chk_lock+0xa4>
 800a0d8:	2310      	movs	r3, #16
 800a0da:	e000      	b.n	800a0de <chk_lock+0xa6>
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	20003cfc 	.word	0x20003cfc

0800a0f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	607b      	str	r3, [r7, #4]
 800a0fa:	e002      	b.n	800a102 <enq_lock+0x12>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	3301      	adds	r3, #1
 800a100:	607b      	str	r3, [r7, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d806      	bhi.n	800a116 <enq_lock+0x26>
 800a108:	4a09      	ldr	r2, [pc, #36]	; (800a130 <enq_lock+0x40>)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	011b      	lsls	r3, r3, #4
 800a10e:	4413      	add	r3, r2
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1f2      	bne.n	800a0fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b02      	cmp	r3, #2
 800a11a:	bf14      	ite	ne
 800a11c:	2301      	movne	r3, #1
 800a11e:	2300      	moveq	r3, #0
 800a120:	b2db      	uxtb	r3, r3
}
 800a122:	4618      	mov	r0, r3
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	20003cfc 	.word	0x20003cfc

0800a134 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a13e:	2300      	movs	r3, #0
 800a140:	60fb      	str	r3, [r7, #12]
 800a142:	e01f      	b.n	800a184 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a144:	4a41      	ldr	r2, [pc, #260]	; (800a24c <inc_lock+0x118>)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	011b      	lsls	r3, r3, #4
 800a14a:	4413      	add	r3, r2
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	429a      	cmp	r2, r3
 800a154:	d113      	bne.n	800a17e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a156:	4a3d      	ldr	r2, [pc, #244]	; (800a24c <inc_lock+0x118>)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	011b      	lsls	r3, r3, #4
 800a15c:	4413      	add	r3, r2
 800a15e:	3304      	adds	r3, #4
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a166:	429a      	cmp	r2, r3
 800a168:	d109      	bne.n	800a17e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a16a:	4a38      	ldr	r2, [pc, #224]	; (800a24c <inc_lock+0x118>)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	011b      	lsls	r3, r3, #4
 800a170:	4413      	add	r3, r2
 800a172:	3308      	adds	r3, #8
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d006      	beq.n	800a18c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3301      	adds	r3, #1
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d9dc      	bls.n	800a144 <inc_lock+0x10>
 800a18a:	e000      	b.n	800a18e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a18c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b02      	cmp	r3, #2
 800a192:	d132      	bne.n	800a1fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	e002      	b.n	800a1a0 <inc_lock+0x6c>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	3301      	adds	r3, #1
 800a19e:	60fb      	str	r3, [r7, #12]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d806      	bhi.n	800a1b4 <inc_lock+0x80>
 800a1a6:	4a29      	ldr	r2, [pc, #164]	; (800a24c <inc_lock+0x118>)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	4413      	add	r3, r2
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1f2      	bne.n	800a19a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d101      	bne.n	800a1be <inc_lock+0x8a>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	e040      	b.n	800a240 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	4922      	ldr	r1, [pc, #136]	; (800a24c <inc_lock+0x118>)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	011b      	lsls	r3, r3, #4
 800a1c8:	440b      	add	r3, r1
 800a1ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	491e      	ldr	r1, [pc, #120]	; (800a24c <inc_lock+0x118>)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	440b      	add	r3, r1
 800a1d8:	3304      	adds	r3, #4
 800a1da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	695a      	ldr	r2, [r3, #20]
 800a1e0:	491a      	ldr	r1, [pc, #104]	; (800a24c <inc_lock+0x118>)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	011b      	lsls	r3, r3, #4
 800a1e6:	440b      	add	r3, r1
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a1ec:	4a17      	ldr	r2, [pc, #92]	; (800a24c <inc_lock+0x118>)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	011b      	lsls	r3, r3, #4
 800a1f2:	4413      	add	r3, r2
 800a1f4:	330c      	adds	r3, #12
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d009      	beq.n	800a214 <inc_lock+0xe0>
 800a200:	4a12      	ldr	r2, [pc, #72]	; (800a24c <inc_lock+0x118>)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	011b      	lsls	r3, r3, #4
 800a206:	4413      	add	r3, r2
 800a208:	330c      	adds	r3, #12
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d001      	beq.n	800a214 <inc_lock+0xe0>
 800a210:	2300      	movs	r3, #0
 800a212:	e015      	b.n	800a240 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d108      	bne.n	800a22c <inc_lock+0xf8>
 800a21a:	4a0c      	ldr	r2, [pc, #48]	; (800a24c <inc_lock+0x118>)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	011b      	lsls	r3, r3, #4
 800a220:	4413      	add	r3, r2
 800a222:	330c      	adds	r3, #12
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	3301      	adds	r3, #1
 800a228:	b29a      	uxth	r2, r3
 800a22a:	e001      	b.n	800a230 <inc_lock+0xfc>
 800a22c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a230:	4906      	ldr	r1, [pc, #24]	; (800a24c <inc_lock+0x118>)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	011b      	lsls	r3, r3, #4
 800a236:	440b      	add	r3, r1
 800a238:	330c      	adds	r3, #12
 800a23a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	3301      	adds	r3, #1
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	20003cfc 	.word	0x20003cfc

0800a250 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	607b      	str	r3, [r7, #4]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d825      	bhi.n	800a2b0 <dec_lock+0x60>
		n = Files[i].ctr;
 800a264:	4a17      	ldr	r2, [pc, #92]	; (800a2c4 <dec_lock+0x74>)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	011b      	lsls	r3, r3, #4
 800a26a:	4413      	add	r3, r2
 800a26c:	330c      	adds	r3, #12
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a272:	89fb      	ldrh	r3, [r7, #14]
 800a274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a278:	d101      	bne.n	800a27e <dec_lock+0x2e>
 800a27a:	2300      	movs	r3, #0
 800a27c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a27e:	89fb      	ldrh	r3, [r7, #14]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <dec_lock+0x3a>
 800a284:	89fb      	ldrh	r3, [r7, #14]
 800a286:	3b01      	subs	r3, #1
 800a288:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a28a:	4a0e      	ldr	r2, [pc, #56]	; (800a2c4 <dec_lock+0x74>)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	011b      	lsls	r3, r3, #4
 800a290:	4413      	add	r3, r2
 800a292:	330c      	adds	r3, #12
 800a294:	89fa      	ldrh	r2, [r7, #14]
 800a296:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a298:	89fb      	ldrh	r3, [r7, #14]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d105      	bne.n	800a2aa <dec_lock+0x5a>
 800a29e:	4a09      	ldr	r2, [pc, #36]	; (800a2c4 <dec_lock+0x74>)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	011b      	lsls	r3, r3, #4
 800a2a4:	4413      	add	r3, r2
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	737b      	strb	r3, [r7, #13]
 800a2ae:	e001      	b.n	800a2b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a2b4:	7b7b      	ldrb	r3, [r7, #13]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	20003cfc 	.word	0x20003cfc

0800a2c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	e010      	b.n	800a2f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a2d6:	4a0d      	ldr	r2, [pc, #52]	; (800a30c <clear_lock+0x44>)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	011b      	lsls	r3, r3, #4
 800a2dc:	4413      	add	r3, r2
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d105      	bne.n	800a2f2 <clear_lock+0x2a>
 800a2e6:	4a09      	ldr	r2, [pc, #36]	; (800a30c <clear_lock+0x44>)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	011b      	lsls	r3, r3, #4
 800a2ec:	4413      	add	r3, r2
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d9eb      	bls.n	800a2d6 <clear_lock+0xe>
	}
}
 800a2fe:	bf00      	nop
 800a300:	bf00      	nop
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	20003cfc 	.word	0x20003cfc

0800a310 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	78db      	ldrb	r3, [r3, #3]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d034      	beq.n	800a38e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a328:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	7858      	ldrb	r0, [r3, #1]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a334:	2301      	movs	r3, #1
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	f7ff fd40 	bl	8009dbc <disk_write>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a342:	2301      	movs	r3, #1
 800a344:	73fb      	strb	r3, [r7, #15]
 800a346:	e022      	b.n	800a38e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a352:	697a      	ldr	r2, [r7, #20]
 800a354:	1ad2      	subs	r2, r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d217      	bcs.n	800a38e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	789b      	ldrb	r3, [r3, #2]
 800a362:	613b      	str	r3, [r7, #16]
 800a364:	e010      	b.n	800a388 <sync_window+0x78>
					wsect += fs->fsize;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	4413      	add	r3, r2
 800a36e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	7858      	ldrb	r0, [r3, #1]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a37a:	2301      	movs	r3, #1
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	f7ff fd1d 	bl	8009dbc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	3b01      	subs	r3, #1
 800a386:	613b      	str	r3, [r7, #16]
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d8eb      	bhi.n	800a366 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d01b      	beq.n	800a3e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff ffad 	bl	800a310 <sync_window>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d113      	bne.n	800a3e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	7858      	ldrb	r0, [r3, #1]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	f7ff fcd5 	bl	8009d7c <disk_read>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d004      	beq.n	800a3e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a3d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
	...

0800a3f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f7ff ff87 	bl	800a310 <sync_window>
 800a402:	4603      	mov	r3, r0
 800a404:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a406:	7bfb      	ldrb	r3, [r7, #15]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d159      	bne.n	800a4c0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	2b03      	cmp	r3, #3
 800a412:	d149      	bne.n	800a4a8 <sync_fs+0xb4>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	791b      	ldrb	r3, [r3, #4]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d145      	bne.n	800a4a8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	899b      	ldrh	r3, [r3, #12]
 800a426:	461a      	mov	r2, r3
 800a428:	2100      	movs	r1, #0
 800a42a:	f7ff fda8 	bl	8009f7e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	3338      	adds	r3, #56	; 0x38
 800a432:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a436:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff fd37 	bl	8009eae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3338      	adds	r3, #56	; 0x38
 800a444:	4921      	ldr	r1, [pc, #132]	; (800a4cc <sync_fs+0xd8>)
 800a446:	4618      	mov	r0, r3
 800a448:	f7ff fd4c 	bl	8009ee4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3338      	adds	r3, #56	; 0x38
 800a450:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a454:	491e      	ldr	r1, [pc, #120]	; (800a4d0 <sync_fs+0xdc>)
 800a456:	4618      	mov	r0, r3
 800a458:	f7ff fd44 	bl	8009ee4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	3338      	adds	r3, #56	; 0x38
 800a460:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	4619      	mov	r1, r3
 800a46a:	4610      	mov	r0, r2
 800a46c:	f7ff fd3a 	bl	8009ee4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	3338      	adds	r3, #56	; 0x38
 800a474:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	4619      	mov	r1, r3
 800a47e:	4610      	mov	r0, r2
 800a480:	f7ff fd30 	bl	8009ee4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	1c5a      	adds	r2, r3, #1
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	7858      	ldrb	r0, [r3, #1]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a49c:	2301      	movs	r3, #1
 800a49e:	f7ff fc8d 	bl	8009dbc <disk_write>
			fs->fsi_flag = 0;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	785b      	ldrb	r3, [r3, #1]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7ff fca3 	bl	8009dfc <disk_ioctl>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d001      	beq.n	800a4c0 <sync_fs+0xcc>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	41615252 	.word	0x41615252
 800a4d0:	61417272 	.word	0x61417272

0800a4d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	3b02      	subs	r3, #2
 800a4e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	69db      	ldr	r3, [r3, #28]
 800a4e8:	3b02      	subs	r3, #2
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d301      	bcc.n	800a4f4 <clust2sect+0x20>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	e008      	b.n	800a506 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	895b      	ldrh	r3, [r3, #10]
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	fb03 f202 	mul.w	r2, r3, r2
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a504:	4413      	add	r3, r2
}
 800a506:	4618      	mov	r0, r3
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b086      	sub	sp, #24
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d904      	bls.n	800a532 <get_fat+0x20>
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	69db      	ldr	r3, [r3, #28]
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d302      	bcc.n	800a538 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a532:	2301      	movs	r3, #1
 800a534:	617b      	str	r3, [r7, #20]
 800a536:	e0bb      	b.n	800a6b0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a53c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	2b03      	cmp	r3, #3
 800a544:	f000 8083 	beq.w	800a64e <get_fat+0x13c>
 800a548:	2b03      	cmp	r3, #3
 800a54a:	f300 80a7 	bgt.w	800a69c <get_fat+0x18a>
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d002      	beq.n	800a558 <get_fat+0x46>
 800a552:	2b02      	cmp	r3, #2
 800a554:	d056      	beq.n	800a604 <get_fat+0xf2>
 800a556:	e0a1      	b.n	800a69c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	085b      	lsrs	r3, r3, #1
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4413      	add	r3, r2
 800a564:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	899b      	ldrh	r3, [r3, #12]
 800a56e:	4619      	mov	r1, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	fbb3 f3f1 	udiv	r3, r3, r1
 800a576:	4413      	add	r3, r2
 800a578:	4619      	mov	r1, r3
 800a57a:	6938      	ldr	r0, [r7, #16]
 800a57c:	f7ff ff0c 	bl	800a398 <move_window>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	f040 808d 	bne.w	800a6a2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	1c5a      	adds	r2, r3, #1
 800a58c:	60fa      	str	r2, [r7, #12]
 800a58e:	693a      	ldr	r2, [r7, #16]
 800a590:	8992      	ldrh	r2, [r2, #12]
 800a592:	fbb3 f1f2 	udiv	r1, r3, r2
 800a596:	fb01 f202 	mul.w	r2, r1, r2
 800a59a:	1a9b      	subs	r3, r3, r2
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	4413      	add	r3, r2
 800a5a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a5a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	899b      	ldrh	r3, [r3, #12]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5b6:	4413      	add	r3, r2
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6938      	ldr	r0, [r7, #16]
 800a5bc:	f7ff feec 	bl	800a398 <move_window>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d16f      	bne.n	800a6a6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	899b      	ldrh	r3, [r3, #12]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5d2:	fb01 f202 	mul.w	r2, r1, r2
 800a5d6:	1a9b      	subs	r3, r3, r2
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	4413      	add	r3, r2
 800a5dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a5e0:	021b      	lsls	r3, r3, #8
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	f003 0301 	and.w	r3, r3, #1
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <get_fat+0xe8>
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	091b      	lsrs	r3, r3, #4
 800a5f8:	e002      	b.n	800a600 <get_fat+0xee>
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a600:	617b      	str	r3, [r7, #20]
			break;
 800a602:	e055      	b.n	800a6b0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	899b      	ldrh	r3, [r3, #12]
 800a60c:	085b      	lsrs	r3, r3, #1
 800a60e:	b29b      	uxth	r3, r3
 800a610:	4619      	mov	r1, r3
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	fbb3 f3f1 	udiv	r3, r3, r1
 800a618:	4413      	add	r3, r2
 800a61a:	4619      	mov	r1, r3
 800a61c:	6938      	ldr	r0, [r7, #16]
 800a61e:	f7ff febb 	bl	800a398 <move_window>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d140      	bne.n	800a6aa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	693a      	ldr	r2, [r7, #16]
 800a634:	8992      	ldrh	r2, [r2, #12]
 800a636:	fbb3 f0f2 	udiv	r0, r3, r2
 800a63a:	fb00 f202 	mul.w	r2, r0, r2
 800a63e:	1a9b      	subs	r3, r3, r2
 800a640:	440b      	add	r3, r1
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff fbf8 	bl	8009e38 <ld_word>
 800a648:	4603      	mov	r3, r0
 800a64a:	617b      	str	r3, [r7, #20]
			break;
 800a64c:	e030      	b.n	800a6b0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	899b      	ldrh	r3, [r3, #12]
 800a656:	089b      	lsrs	r3, r3, #2
 800a658:	b29b      	uxth	r3, r3
 800a65a:	4619      	mov	r1, r3
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a662:	4413      	add	r3, r2
 800a664:	4619      	mov	r1, r3
 800a666:	6938      	ldr	r0, [r7, #16]
 800a668:	f7ff fe96 	bl	800a398 <move_window>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d11d      	bne.n	800a6ae <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	693a      	ldr	r2, [r7, #16]
 800a67e:	8992      	ldrh	r2, [r2, #12]
 800a680:	fbb3 f0f2 	udiv	r0, r3, r2
 800a684:	fb00 f202 	mul.w	r2, r0, r2
 800a688:	1a9b      	subs	r3, r3, r2
 800a68a:	440b      	add	r3, r1
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7ff fbeb 	bl	8009e68 <ld_dword>
 800a692:	4603      	mov	r3, r0
 800a694:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a698:	617b      	str	r3, [r7, #20]
			break;
 800a69a:	e009      	b.n	800a6b0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a69c:	2301      	movs	r3, #1
 800a69e:	617b      	str	r3, [r7, #20]
 800a6a0:	e006      	b.n	800a6b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6a2:	bf00      	nop
 800a6a4:	e004      	b.n	800a6b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6a6:	bf00      	nop
 800a6a8:	e002      	b.n	800a6b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a6aa:	bf00      	nop
 800a6ac:	e000      	b.n	800a6b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a6ae:	bf00      	nop
		}
	}

	return val;
 800a6b0:	697b      	ldr	r3, [r7, #20]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3718      	adds	r7, #24
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a6ba:	b590      	push	{r4, r7, lr}
 800a6bc:	b089      	sub	sp, #36	; 0x24
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	60f8      	str	r0, [r7, #12]
 800a6c2:	60b9      	str	r1, [r7, #8]
 800a6c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	f240 8109 	bls.w	800a8e4 <put_fat+0x22a>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	69db      	ldr	r3, [r3, #28]
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	f080 8103 	bcs.w	800a8e4 <put_fat+0x22a>
		switch (fs->fs_type) {
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	f000 80b6 	beq.w	800a854 <put_fat+0x19a>
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	f300 80fb 	bgt.w	800a8e4 <put_fat+0x22a>
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d003      	beq.n	800a6fa <put_fat+0x40>
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	f000 8083 	beq.w	800a7fe <put_fat+0x144>
 800a6f8:	e0f4      	b.n	800a8e4 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	61bb      	str	r3, [r7, #24]
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	085b      	lsrs	r3, r3, #1
 800a702:	69ba      	ldr	r2, [r7, #24]
 800a704:	4413      	add	r3, r2
 800a706:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	899b      	ldrh	r3, [r3, #12]
 800a710:	4619      	mov	r1, r3
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	fbb3 f3f1 	udiv	r3, r3, r1
 800a718:	4413      	add	r3, r2
 800a71a:	4619      	mov	r1, r3
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7ff fe3b 	bl	800a398 <move_window>
 800a722:	4603      	mov	r3, r0
 800a724:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a726:	7ffb      	ldrb	r3, [r7, #31]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f040 80d4 	bne.w	800a8d6 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	61ba      	str	r2, [r7, #24]
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	8992      	ldrh	r2, [r2, #12]
 800a73e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a742:	fb00 f202 	mul.w	r2, r0, r2
 800a746:	1a9b      	subs	r3, r3, r2
 800a748:	440b      	add	r3, r1
 800a74a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00d      	beq.n	800a772 <put_fat+0xb8>
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	b25b      	sxtb	r3, r3
 800a75c:	f003 030f 	and.w	r3, r3, #15
 800a760:	b25a      	sxtb	r2, r3
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	b2db      	uxtb	r3, r3
 800a766:	011b      	lsls	r3, r3, #4
 800a768:	b25b      	sxtb	r3, r3
 800a76a:	4313      	orrs	r3, r2
 800a76c:	b25b      	sxtb	r3, r3
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	e001      	b.n	800a776 <put_fat+0xbc>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	b2db      	uxtb	r3, r3
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2201      	movs	r2, #1
 800a77e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	899b      	ldrh	r3, [r3, #12]
 800a788:	4619      	mov	r1, r3
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a790:	4413      	add	r3, r2
 800a792:	4619      	mov	r1, r3
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7ff fdff 	bl	800a398 <move_window>
 800a79a:	4603      	mov	r3, r0
 800a79c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a79e:	7ffb      	ldrb	r3, [r7, #31]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f040 809a 	bne.w	800a8da <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	899b      	ldrh	r3, [r3, #12]
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7b8:	fb00 f202 	mul.w	r2, r0, r2
 800a7bc:	1a9b      	subs	r3, r3, r2
 800a7be:	440b      	add	r3, r1
 800a7c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	f003 0301 	and.w	r3, r3, #1
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d003      	beq.n	800a7d4 <put_fat+0x11a>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	091b      	lsrs	r3, r3, #4
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	e00e      	b.n	800a7f2 <put_fat+0x138>
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	b25b      	sxtb	r3, r3
 800a7da:	f023 030f 	bic.w	r3, r3, #15
 800a7de:	b25a      	sxtb	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	0a1b      	lsrs	r3, r3, #8
 800a7e4:	b25b      	sxtb	r3, r3
 800a7e6:	f003 030f 	and.w	r3, r3, #15
 800a7ea:	b25b      	sxtb	r3, r3
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	b25b      	sxtb	r3, r3
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	70da      	strb	r2, [r3, #3]
			break;
 800a7fc:	e072      	b.n	800a8e4 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	899b      	ldrh	r3, [r3, #12]
 800a806:	085b      	lsrs	r3, r3, #1
 800a808:	b29b      	uxth	r3, r3
 800a80a:	4619      	mov	r1, r3
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a812:	4413      	add	r3, r2
 800a814:	4619      	mov	r1, r3
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f7ff fdbe 	bl	800a398 <move_window>
 800a81c:	4603      	mov	r3, r0
 800a81e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a820:	7ffb      	ldrb	r3, [r7, #31]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d15b      	bne.n	800a8de <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	005b      	lsls	r3, r3, #1
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	8992      	ldrh	r2, [r2, #12]
 800a834:	fbb3 f0f2 	udiv	r0, r3, r2
 800a838:	fb00 f202 	mul.w	r2, r0, r2
 800a83c:	1a9b      	subs	r3, r3, r2
 800a83e:	440b      	add	r3, r1
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	b292      	uxth	r2, r2
 800a844:	4611      	mov	r1, r2
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff fb31 	bl	8009eae <st_word>
			fs->wflag = 1;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2201      	movs	r2, #1
 800a850:	70da      	strb	r2, [r3, #3]
			break;
 800a852:	e047      	b.n	800a8e4 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	899b      	ldrh	r3, [r3, #12]
 800a85c:	089b      	lsrs	r3, r3, #2
 800a85e:	b29b      	uxth	r3, r3
 800a860:	4619      	mov	r1, r3
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	fbb3 f3f1 	udiv	r3, r3, r1
 800a868:	4413      	add	r3, r2
 800a86a:	4619      	mov	r1, r3
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f7ff fd93 	bl	800a398 <move_window>
 800a872:	4603      	mov	r3, r0
 800a874:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a876:	7ffb      	ldrb	r3, [r7, #31]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d132      	bne.n	800a8e2 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	8992      	ldrh	r2, [r2, #12]
 800a890:	fbb3 f0f2 	udiv	r0, r3, r2
 800a894:	fb00 f202 	mul.w	r2, r0, r2
 800a898:	1a9b      	subs	r3, r3, r2
 800a89a:	440b      	add	r3, r1
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7ff fae3 	bl	8009e68 <ld_dword>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a8a8:	4323      	orrs	r3, r4
 800a8aa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	8992      	ldrh	r2, [r2, #12]
 800a8ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8be:	fb00 f202 	mul.w	r2, r0, r2
 800a8c2:	1a9b      	subs	r3, r3, r2
 800a8c4:	440b      	add	r3, r1
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7ff fb0b 	bl	8009ee4 <st_dword>
			fs->wflag = 1;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	70da      	strb	r2, [r3, #3]
			break;
 800a8d4:	e006      	b.n	800a8e4 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a8d6:	bf00      	nop
 800a8d8:	e004      	b.n	800a8e4 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a8da:	bf00      	nop
 800a8dc:	e002      	b.n	800a8e4 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a8de:	bf00      	nop
 800a8e0:	e000      	b.n	800a8e4 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a8e2:	bf00      	nop
		}
	}
	return res;
 800a8e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3724      	adds	r7, #36	; 0x24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd90      	pop	{r4, r7, pc}

0800a8ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b088      	sub	sp, #32
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	60f8      	str	r0, [r7, #12]
 800a8f6:	60b9      	str	r1, [r7, #8]
 800a8f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d904      	bls.n	800a914 <remove_chain+0x26>
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	69db      	ldr	r3, [r3, #28]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	429a      	cmp	r2, r3
 800a912:	d301      	bcc.n	800a918 <remove_chain+0x2a>
 800a914:	2302      	movs	r3, #2
 800a916:	e04b      	b.n	800a9b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d00c      	beq.n	800a938 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a91e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a922:	6879      	ldr	r1, [r7, #4]
 800a924:	69b8      	ldr	r0, [r7, #24]
 800a926:	f7ff fec8 	bl	800a6ba <put_fat>
 800a92a:	4603      	mov	r3, r0
 800a92c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a92e:	7ffb      	ldrb	r3, [r7, #31]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <remove_chain+0x4a>
 800a934:	7ffb      	ldrb	r3, [r7, #31]
 800a936:	e03b      	b.n	800a9b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a938:	68b9      	ldr	r1, [r7, #8]
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f7ff fde9 	bl	800a512 <get_fat>
 800a940:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d031      	beq.n	800a9ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d101      	bne.n	800a952 <remove_chain+0x64>
 800a94e:	2302      	movs	r3, #2
 800a950:	e02e      	b.n	800a9b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a958:	d101      	bne.n	800a95e <remove_chain+0x70>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e028      	b.n	800a9b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a95e:	2200      	movs	r2, #0
 800a960:	68b9      	ldr	r1, [r7, #8]
 800a962:	69b8      	ldr	r0, [r7, #24]
 800a964:	f7ff fea9 	bl	800a6ba <put_fat>
 800a968:	4603      	mov	r3, r0
 800a96a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a96c:	7ffb      	ldrb	r3, [r7, #31]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <remove_chain+0x88>
 800a972:	7ffb      	ldrb	r3, [r7, #31]
 800a974:	e01c      	b.n	800a9b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	699a      	ldr	r2, [r3, #24]
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	3b02      	subs	r3, #2
 800a980:	429a      	cmp	r2, r3
 800a982:	d20b      	bcs.n	800a99c <remove_chain+0xae>
			fs->free_clst++;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	1c5a      	adds	r2, r3, #1
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	791b      	ldrb	r3, [r3, #4]
 800a992:	f043 0301 	orr.w	r3, r3, #1
 800a996:	b2da      	uxtb	r2, r3
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d3c6      	bcc.n	800a938 <remove_chain+0x4a>
 800a9aa:	e000      	b.n	800a9ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a9ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3720      	adds	r7, #32
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10d      	bne.n	800a9ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d004      	beq.n	800a9e4 <create_chain+0x2c>
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d31b      	bcc.n	800aa1c <create_chain+0x64>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	61bb      	str	r3, [r7, #24]
 800a9e8:	e018      	b.n	800aa1c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7ff fd90 	bl	800a512 <get_fat>
 800a9f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d801      	bhi.n	800a9fe <create_chain+0x46>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e070      	b.n	800aae0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa04:	d101      	bne.n	800aa0a <create_chain+0x52>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	e06a      	b.n	800aae0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d201      	bcs.n	800aa18 <create_chain+0x60>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	e063      	b.n	800aae0 <create_chain+0x128>
		scl = clst;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	3301      	adds	r3, #1
 800aa24:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	69fa      	ldr	r2, [r7, #28]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d307      	bcc.n	800aa40 <create_chain+0x88>
				ncl = 2;
 800aa30:	2302      	movs	r3, #2
 800aa32:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aa34:	69fa      	ldr	r2, [r7, #28]
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d901      	bls.n	800aa40 <create_chain+0x88>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	e04f      	b.n	800aae0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aa40:	69f9      	ldr	r1, [r7, #28]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7ff fd65 	bl	800a512 <get_fat>
 800aa48:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00e      	beq.n	800aa6e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d003      	beq.n	800aa5e <create_chain+0xa6>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa5c:	d101      	bne.n	800aa62 <create_chain+0xaa>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	e03e      	b.n	800aae0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aa62:	69fa      	ldr	r2, [r7, #28]
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d1da      	bne.n	800aa20 <create_chain+0x68>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	e038      	b.n	800aae0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aa6e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aa70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa74:	69f9      	ldr	r1, [r7, #28]
 800aa76:	6938      	ldr	r0, [r7, #16]
 800aa78:	f7ff fe1f 	bl	800a6ba <put_fat>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aa80:	7dfb      	ldrb	r3, [r7, #23]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d109      	bne.n	800aa9a <create_chain+0xe2>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d006      	beq.n	800aa9a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aa8c:	69fa      	ldr	r2, [r7, #28]
 800aa8e:	6839      	ldr	r1, [r7, #0]
 800aa90:	6938      	ldr	r0, [r7, #16]
 800aa92:	f7ff fe12 	bl	800a6ba <put_fat>
 800aa96:	4603      	mov	r3, r0
 800aa98:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d116      	bne.n	800aace <create_chain+0x116>
		fs->last_clst = ncl;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	69fa      	ldr	r2, [r7, #28]
 800aaa4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	699a      	ldr	r2, [r3, #24]
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	3b02      	subs	r3, #2
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d804      	bhi.n	800aabe <create_chain+0x106>
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	1e5a      	subs	r2, r3, #1
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	791b      	ldrb	r3, [r3, #4]
 800aac2:	f043 0301 	orr.w	r3, r3, #1
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	711a      	strb	r2, [r3, #4]
 800aacc:	e007      	b.n	800aade <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800aace:	7dfb      	ldrb	r3, [r7, #23]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d102      	bne.n	800aada <create_chain+0x122>
 800aad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aad8:	e000      	b.n	800aadc <create_chain+0x124>
 800aada:	2301      	movs	r3, #1
 800aadc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800aade:	69fb      	ldr	r3, [r7, #28]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3720      	adds	r7, #32
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b087      	sub	sp, #28
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	3304      	adds	r3, #4
 800aafe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	899b      	ldrh	r3, [r3, #12]
 800ab04:	461a      	mov	r2, r3
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	8952      	ldrh	r2, [r2, #10]
 800ab10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab14:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	1d1a      	adds	r2, r3, #4
 800ab1a:	613a      	str	r2, [r7, #16]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <clmt_clust+0x42>
 800ab26:	2300      	movs	r3, #0
 800ab28:	e010      	b.n	800ab4c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ab2a:	697a      	ldr	r2, [r7, #20]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d307      	bcc.n	800ab42 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ab32:	697a      	ldr	r2, [r7, #20]
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	617b      	str	r3, [r7, #20]
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab40:	e7e9      	b.n	800ab16 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ab42:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	4413      	add	r3, r2
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	371c      	adds	r7, #28
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab6e:	d204      	bcs.n	800ab7a <dir_sdi+0x22>
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	f003 031f 	and.w	r3, r3, #31
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <dir_sdi+0x26>
		return FR_INT_ERR;
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	e071      	b.n	800ac62 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d106      	bne.n	800ab9e <dir_sdi+0x46>
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d902      	bls.n	800ab9e <dir_sdi+0x46>
		clst = fs->dirbase;
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10c      	bne.n	800abbe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	095b      	lsrs	r3, r3, #5
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	8912      	ldrh	r2, [r2, #8]
 800abac:	4293      	cmp	r3, r2
 800abae:	d301      	bcc.n	800abb4 <dir_sdi+0x5c>
 800abb0:	2302      	movs	r3, #2
 800abb2:	e056      	b.n	800ac62 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	61da      	str	r2, [r3, #28]
 800abbc:	e02d      	b.n	800ac1a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	895b      	ldrh	r3, [r3, #10]
 800abc2:	461a      	mov	r2, r3
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	899b      	ldrh	r3, [r3, #12]
 800abc8:	fb02 f303 	mul.w	r3, r2, r3
 800abcc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800abce:	e019      	b.n	800ac04 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6979      	ldr	r1, [r7, #20]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff fc9c 	bl	800a512 <get_fat>
 800abda:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abe2:	d101      	bne.n	800abe8 <dir_sdi+0x90>
 800abe4:	2301      	movs	r3, #1
 800abe6:	e03c      	b.n	800ac62 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2b01      	cmp	r3, #1
 800abec:	d904      	bls.n	800abf8 <dir_sdi+0xa0>
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	69db      	ldr	r3, [r3, #28]
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d301      	bcc.n	800abfc <dir_sdi+0xa4>
 800abf8:	2302      	movs	r3, #2
 800abfa:	e032      	b.n	800ac62 <dir_sdi+0x10a>
			ofs -= csz;
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac04:	683a      	ldr	r2, [r7, #0]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d2e1      	bcs.n	800abd0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ac0c:	6979      	ldr	r1, [r7, #20]
 800ac0e:	6938      	ldr	r0, [r7, #16]
 800ac10:	f7ff fc60 	bl	800a4d4 <clust2sect>
 800ac14:	4602      	mov	r2, r0
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	69db      	ldr	r3, [r3, #28]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <dir_sdi+0xd4>
 800ac28:	2302      	movs	r3, #2
 800ac2a:	e01a      	b.n	800ac62 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	69da      	ldr	r2, [r3, #28]
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	899b      	ldrh	r3, [r3, #12]
 800ac34:	4619      	mov	r1, r3
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac3c:	441a      	add	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	899b      	ldrh	r3, [r3, #12]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac54:	fb00 f202 	mul.w	r2, r0, r2
 800ac58:	1a9b      	subs	r3, r3, r2
 800ac5a:	18ca      	adds	r2, r1, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3718      	adds	r7, #24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b086      	sub	sp, #24
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	3320      	adds	r3, #32
 800ac80:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	69db      	ldr	r3, [r3, #28]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d003      	beq.n	800ac92 <dir_next+0x28>
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac90:	d301      	bcc.n	800ac96 <dir_next+0x2c>
 800ac92:	2304      	movs	r3, #4
 800ac94:	e0bb      	b.n	800ae0e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	899b      	ldrh	r3, [r3, #12]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800aca2:	fb01 f202 	mul.w	r2, r1, r2
 800aca6:	1a9b      	subs	r3, r3, r2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f040 809d 	bne.w	800ade8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	1c5a      	adds	r2, r3, #1
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10b      	bne.n	800acd8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	095b      	lsrs	r3, r3, #5
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	8912      	ldrh	r2, [r2, #8]
 800acc8:	4293      	cmp	r3, r2
 800acca:	f0c0 808d 	bcc.w	800ade8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	61da      	str	r2, [r3, #28]
 800acd4:	2304      	movs	r3, #4
 800acd6:	e09a      	b.n	800ae0e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	899b      	ldrh	r3, [r3, #12]
 800acdc:	461a      	mov	r2, r3
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	8952      	ldrh	r2, [r2, #10]
 800ace8:	3a01      	subs	r2, #1
 800acea:	4013      	ands	r3, r2
 800acec:	2b00      	cmp	r3, #0
 800acee:	d17b      	bne.n	800ade8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	4619      	mov	r1, r3
 800acf8:	4610      	mov	r0, r2
 800acfa:	f7ff fc0a 	bl	800a512 <get_fat>
 800acfe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d801      	bhi.n	800ad0a <dir_next+0xa0>
 800ad06:	2302      	movs	r3, #2
 800ad08:	e081      	b.n	800ae0e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad10:	d101      	bne.n	800ad16 <dir_next+0xac>
 800ad12:	2301      	movs	r3, #1
 800ad14:	e07b      	b.n	800ae0e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d359      	bcc.n	800add4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d104      	bne.n	800ad30 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	61da      	str	r2, [r3, #28]
 800ad2c:	2304      	movs	r3, #4
 800ad2e:	e06e      	b.n	800ae0e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	4619      	mov	r1, r3
 800ad38:	4610      	mov	r0, r2
 800ad3a:	f7ff fe3d 	bl	800a9b8 <create_chain>
 800ad3e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d101      	bne.n	800ad4a <dir_next+0xe0>
 800ad46:	2307      	movs	r3, #7
 800ad48:	e061      	b.n	800ae0e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d101      	bne.n	800ad54 <dir_next+0xea>
 800ad50:	2302      	movs	r3, #2
 800ad52:	e05c      	b.n	800ae0e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad5a:	d101      	bne.n	800ad60 <dir_next+0xf6>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e056      	b.n	800ae0e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f7ff fad5 	bl	800a310 <sync_window>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <dir_next+0x106>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e04e      	b.n	800ae0e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	899b      	ldrh	r3, [r3, #12]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	f7ff f8fe 	bl	8009f7e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ad82:	2300      	movs	r3, #0
 800ad84:	613b      	str	r3, [r7, #16]
 800ad86:	6979      	ldr	r1, [r7, #20]
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f7ff fba3 	bl	800a4d4 <clust2sect>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	635a      	str	r2, [r3, #52]	; 0x34
 800ad94:	e012      	b.n	800adbc <dir_next+0x152>
						fs->wflag = 1;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f7ff fab7 	bl	800a310 <sync_window>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d001      	beq.n	800adac <dir_next+0x142>
 800ada8:	2301      	movs	r3, #1
 800adaa:	e030      	b.n	800ae0e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	3301      	adds	r3, #1
 800adb0:	613b      	str	r3, [r7, #16]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb6:	1c5a      	adds	r2, r3, #1
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	635a      	str	r2, [r3, #52]	; 0x34
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	895b      	ldrh	r3, [r3, #10]
 800adc0:	461a      	mov	r2, r3
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d3e6      	bcc.n	800ad96 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	1ad2      	subs	r2, r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800adda:	6979      	ldr	r1, [r7, #20]
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f7ff fb79 	bl	800a4d4 <clust2sect>
 800ade2:	4602      	mov	r2, r0
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	899b      	ldrh	r3, [r3, #12]
 800adf8:	461a      	mov	r2, r3
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae00:	fb00 f202 	mul.w	r2, r0, r2
 800ae04:	1a9b      	subs	r3, r3, r2
 800ae06:	18ca      	adds	r2, r1, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b086      	sub	sp, #24
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
 800ae1e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ae26:	2100      	movs	r1, #0
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7ff fe95 	bl	800ab58 <dir_sdi>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d12b      	bne.n	800ae90 <dir_alloc+0x7a>
		n = 0;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	69db      	ldr	r3, [r3, #28]
 800ae40:	4619      	mov	r1, r3
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f7ff faa8 	bl	800a398 <move_window>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d11d      	bne.n	800ae8e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a1b      	ldr	r3, [r3, #32]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	2be5      	cmp	r3, #229	; 0xe5
 800ae5a:	d004      	beq.n	800ae66 <dir_alloc+0x50>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6a1b      	ldr	r3, [r3, #32]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d107      	bne.n	800ae76 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	613b      	str	r3, [r7, #16]
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d102      	bne.n	800ae7a <dir_alloc+0x64>
 800ae74:	e00c      	b.n	800ae90 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ae76:	2300      	movs	r3, #0
 800ae78:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ae7a:	2101      	movs	r1, #1
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff fef4 	bl	800ac6a <dir_next>
 800ae82:	4603      	mov	r3, r0
 800ae84:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ae86:	7dfb      	ldrb	r3, [r7, #23]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d0d7      	beq.n	800ae3c <dir_alloc+0x26>
 800ae8c:	e000      	b.n	800ae90 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ae8e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ae90:	7dfb      	ldrb	r3, [r7, #23]
 800ae92:	2b04      	cmp	r3, #4
 800ae94:	d101      	bne.n	800ae9a <dir_alloc+0x84>
 800ae96:	2307      	movs	r3, #7
 800ae98:	75fb      	strb	r3, [r7, #23]
	return res;
 800ae9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3718      	adds	r7, #24
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	331a      	adds	r3, #26
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fe ffc0 	bl	8009e38 <ld_word>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2b03      	cmp	r3, #3
 800aec2:	d109      	bne.n	800aed8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	3314      	adds	r3, #20
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fe ffb5 	bl	8009e38 <ld_word>
 800aece:	4603      	mov	r3, r0
 800aed0:	041b      	lsls	r3, r3, #16
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	4313      	orrs	r3, r2
 800aed6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aed8:	68fb      	ldr	r3, [r7, #12]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b084      	sub	sp, #16
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	60f8      	str	r0, [r7, #12]
 800aeea:	60b9      	str	r1, [r7, #8]
 800aeec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	331a      	adds	r3, #26
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	b292      	uxth	r2, r2
 800aef6:	4611      	mov	r1, r2
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7fe ffd8 	bl	8009eae <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	2b03      	cmp	r3, #3
 800af04:	d109      	bne.n	800af1a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f103 0214 	add.w	r2, r3, #20
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	0c1b      	lsrs	r3, r3, #16
 800af10:	b29b      	uxth	r3, r3
 800af12:	4619      	mov	r1, r3
 800af14:	4610      	mov	r0, r2
 800af16:	f7fe ffca 	bl	8009eae <st_word>
	}
}
 800af1a:	bf00      	nop
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
	...

0800af24 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800af24:	b590      	push	{r4, r7, lr}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	331a      	adds	r3, #26
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe ff80 	bl	8009e38 <ld_word>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <cmp_lfn+0x1e>
 800af3e:	2300      	movs	r3, #0
 800af40:	e059      	b.n	800aff6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af4a:	1e5a      	subs	r2, r3, #1
 800af4c:	4613      	mov	r3, r2
 800af4e:	005b      	lsls	r3, r3, #1
 800af50:	4413      	add	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800af58:	2301      	movs	r3, #1
 800af5a:	81fb      	strh	r3, [r7, #14]
 800af5c:	2300      	movs	r3, #0
 800af5e:	613b      	str	r3, [r7, #16]
 800af60:	e033      	b.n	800afca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800af62:	4a27      	ldr	r2, [pc, #156]	; (800b000 <cmp_lfn+0xdc>)
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	4413      	add	r3, r2
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	461a      	mov	r2, r3
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	4413      	add	r3, r2
 800af70:	4618      	mov	r0, r3
 800af72:	f7fe ff61 	bl	8009e38 <ld_word>
 800af76:	4603      	mov	r3, r0
 800af78:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800af7a:	89fb      	ldrh	r3, [r7, #14]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d01a      	beq.n	800afb6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2bfe      	cmp	r3, #254	; 0xfe
 800af84:	d812      	bhi.n	800afac <cmp_lfn+0x88>
 800af86:	89bb      	ldrh	r3, [r7, #12]
 800af88:	4618      	mov	r0, r3
 800af8a:	f001 ff41 	bl	800ce10 <ff_wtoupper>
 800af8e:	4603      	mov	r3, r0
 800af90:	461c      	mov	r4, r3
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	1c5a      	adds	r2, r3, #1
 800af96:	617a      	str	r2, [r7, #20]
 800af98:	005b      	lsls	r3, r3, #1
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	4413      	add	r3, r2
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f001 ff35 	bl	800ce10 <ff_wtoupper>
 800afa6:	4603      	mov	r3, r0
 800afa8:	429c      	cmp	r4, r3
 800afaa:	d001      	beq.n	800afb0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800afac:	2300      	movs	r3, #0
 800afae:	e022      	b.n	800aff6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800afb0:	89bb      	ldrh	r3, [r7, #12]
 800afb2:	81fb      	strh	r3, [r7, #14]
 800afb4:	e006      	b.n	800afc4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800afb6:	89bb      	ldrh	r3, [r7, #12]
 800afb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d001      	beq.n	800afc4 <cmp_lfn+0xa0>
 800afc0:	2300      	movs	r3, #0
 800afc2:	e018      	b.n	800aff6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	3301      	adds	r3, #1
 800afc8:	613b      	str	r3, [r7, #16]
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	2b0c      	cmp	r3, #12
 800afce:	d9c8      	bls.n	800af62 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00b      	beq.n	800aff4 <cmp_lfn+0xd0>
 800afdc:	89fb      	ldrh	r3, [r7, #14]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d008      	beq.n	800aff4 <cmp_lfn+0xd0>
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	4413      	add	r3, r2
 800afea:	881b      	ldrh	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <cmp_lfn+0xd0>
 800aff0:	2300      	movs	r3, #0
 800aff2:	e000      	b.n	800aff6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800aff4:	2301      	movs	r3, #1
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	371c      	adds	r7, #28
 800affa:	46bd      	mov	sp, r7
 800affc:	bd90      	pop	{r4, r7, pc}
 800affe:	bf00      	nop
 800b000:	0801a9d0 	.word	0x0801a9d0

0800b004 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	4611      	mov	r1, r2
 800b010:	461a      	mov	r2, r3
 800b012:	460b      	mov	r3, r1
 800b014:	71fb      	strb	r3, [r7, #7]
 800b016:	4613      	mov	r3, r2
 800b018:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	330d      	adds	r3, #13
 800b01e:	79ba      	ldrb	r2, [r7, #6]
 800b020:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	330b      	adds	r3, #11
 800b026:	220f      	movs	r2, #15
 800b028:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	330c      	adds	r3, #12
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	331a      	adds	r3, #26
 800b036:	2100      	movs	r1, #0
 800b038:	4618      	mov	r0, r3
 800b03a:	f7fe ff38 	bl	8009eae <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b03e:	79fb      	ldrb	r3, [r7, #7]
 800b040:	1e5a      	subs	r2, r3, #1
 800b042:	4613      	mov	r3, r2
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	4413      	add	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	82fb      	strh	r3, [r7, #22]
 800b052:	2300      	movs	r3, #0
 800b054:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b056:	8afb      	ldrh	r3, [r7, #22]
 800b058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d007      	beq.n	800b070 <put_lfn+0x6c>
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	61fa      	str	r2, [r7, #28]
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	4413      	add	r3, r2
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b070:	4a17      	ldr	r2, [pc, #92]	; (800b0d0 <put_lfn+0xcc>)
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	4413      	add	r3, r2
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	461a      	mov	r2, r3
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	4413      	add	r3, r2
 800b07e:	8afa      	ldrh	r2, [r7, #22]
 800b080:	4611      	mov	r1, r2
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe ff13 	bl	8009eae <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b088:	8afb      	ldrh	r3, [r7, #22]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d102      	bne.n	800b094 <put_lfn+0x90>
 800b08e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b092:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	3301      	adds	r3, #1
 800b098:	61bb      	str	r3, [r7, #24]
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	2b0c      	cmp	r3, #12
 800b09e:	d9da      	bls.n	800b056 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b0a0:	8afb      	ldrh	r3, [r7, #22]
 800b0a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d006      	beq.n	800b0b8 <put_lfn+0xb4>
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	005b      	lsls	r3, r3, #1
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	881b      	ldrh	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d103      	bne.n	800b0c0 <put_lfn+0xbc>
 800b0b8:	79fb      	ldrb	r3, [r7, #7]
 800b0ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	79fa      	ldrb	r2, [r7, #7]
 800b0c4:	701a      	strb	r2, [r3, #0]
}
 800b0c6:	bf00      	nop
 800b0c8:	3720      	adds	r7, #32
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	0801a9d0 	.word	0x0801a9d0

0800b0d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08c      	sub	sp, #48	; 0x30
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
 800b0e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b0e2:	220b      	movs	r2, #11
 800b0e4:	68b9      	ldr	r1, [r7, #8]
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f7fe ff28 	bl	8009f3c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	2b05      	cmp	r3, #5
 800b0f0:	d92b      	bls.n	800b14a <gen_numname+0x76>
		sr = seq;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b0f6:	e022      	b.n	800b13e <gen_numname+0x6a>
			wc = *lfn++;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	1c9a      	adds	r2, r3, #2
 800b0fc:	607a      	str	r2, [r7, #4]
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b102:	2300      	movs	r3, #0
 800b104:	62bb      	str	r3, [r7, #40]	; 0x28
 800b106:	e017      	b.n	800b138 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	005a      	lsls	r2, r3, #1
 800b10c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	4413      	add	r3, r2
 800b114:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b116:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b118:	085b      	lsrs	r3, r3, #1
 800b11a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b122:	2b00      	cmp	r3, #0
 800b124:	d005      	beq.n	800b132 <gen_numname+0x5e>
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b12c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b130:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	3301      	adds	r3, #1
 800b136:	62bb      	str	r3, [r7, #40]	; 0x28
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	2b0f      	cmp	r3, #15
 800b13c:	d9e4      	bls.n	800b108 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1d8      	bne.n	800b0f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b14a:	2307      	movs	r3, #7
 800b14c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	b2db      	uxtb	r3, r3
 800b152:	f003 030f 	and.w	r3, r3, #15
 800b156:	b2db      	uxtb	r3, r3
 800b158:	3330      	adds	r3, #48	; 0x30
 800b15a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b15e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b162:	2b39      	cmp	r3, #57	; 0x39
 800b164:	d904      	bls.n	800b170 <gen_numname+0x9c>
 800b166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b16a:	3307      	adds	r3, #7
 800b16c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b172:	1e5a      	subs	r2, r3, #1
 800b174:	62ba      	str	r2, [r7, #40]	; 0x28
 800b176:	3330      	adds	r3, #48	; 0x30
 800b178:	443b      	add	r3, r7
 800b17a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b17e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	091b      	lsrs	r3, r3, #4
 800b186:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1df      	bne.n	800b14e <gen_numname+0x7a>
	ns[i] = '~';
 800b18e:	f107 0214 	add.w	r2, r7, #20
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	4413      	add	r3, r2
 800b196:	227e      	movs	r2, #126	; 0x7e
 800b198:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b19a:	2300      	movs	r3, #0
 800b19c:	627b      	str	r3, [r7, #36]	; 0x24
 800b19e:	e002      	b.n	800b1a6 <gen_numname+0xd2>
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b1a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d205      	bcs.n	800b1ba <gen_numname+0xe6>
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	4413      	add	r3, r2
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	2b20      	cmp	r3, #32
 800b1b8:	d1f2      	bne.n	800b1a0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1bc:	2b07      	cmp	r3, #7
 800b1be:	d807      	bhi.n	800b1d0 <gen_numname+0xfc>
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	1c5a      	adds	r2, r3, #1
 800b1c4:	62ba      	str	r2, [r7, #40]	; 0x28
 800b1c6:	3330      	adds	r3, #48	; 0x30
 800b1c8:	443b      	add	r3, r7
 800b1ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b1ce:	e000      	b.n	800b1d2 <gen_numname+0xfe>
 800b1d0:	2120      	movs	r1, #32
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	627a      	str	r2, [r7, #36]	; 0x24
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	4413      	add	r3, r2
 800b1dc:	460a      	mov	r2, r1
 800b1de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e2:	2b07      	cmp	r3, #7
 800b1e4:	d9e9      	bls.n	800b1ba <gen_numname+0xe6>
}
 800b1e6:	bf00      	nop
 800b1e8:	bf00      	nop
 800b1ea:	3730      	adds	r7, #48	; 0x30
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b1fc:	230b      	movs	r3, #11
 800b1fe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b200:	7bfb      	ldrb	r3, [r7, #15]
 800b202:	b2da      	uxtb	r2, r3
 800b204:	0852      	lsrs	r2, r2, #1
 800b206:	01db      	lsls	r3, r3, #7
 800b208:	4313      	orrs	r3, r2
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	1c59      	adds	r1, r3, #1
 800b210:	6079      	str	r1, [r7, #4]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	4413      	add	r3, r2
 800b216:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	3b01      	subs	r3, #1
 800b21c:	60bb      	str	r3, [r7, #8]
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1ed      	bne.n	800b200 <sum_sfn+0x10>
	return sum;
 800b224:	7bfb      	ldrb	r3, [r7, #15]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b086      	sub	sp, #24
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b240:	2100      	movs	r1, #0
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f7ff fc88 	bl	800ab58 <dir_sdi>
 800b248:	4603      	mov	r3, r0
 800b24a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b24c:	7dfb      	ldrb	r3, [r7, #23]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d001      	beq.n	800b256 <dir_find+0x24>
 800b252:	7dfb      	ldrb	r3, [r7, #23]
 800b254:	e0a9      	b.n	800b3aa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b256:	23ff      	movs	r3, #255	; 0xff
 800b258:	753b      	strb	r3, [r7, #20]
 800b25a:	7d3b      	ldrb	r3, [r7, #20]
 800b25c:	757b      	strb	r3, [r7, #21]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b264:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	69db      	ldr	r3, [r3, #28]
 800b26a:	4619      	mov	r1, r3
 800b26c:	6938      	ldr	r0, [r7, #16]
 800b26e:	f7ff f893 	bl	800a398 <move_window>
 800b272:	4603      	mov	r3, r0
 800b274:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b276:	7dfb      	ldrb	r3, [r7, #23]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f040 8090 	bne.w	800b39e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b286:	7dbb      	ldrb	r3, [r7, #22]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d102      	bne.n	800b292 <dir_find+0x60>
 800b28c:	2304      	movs	r3, #4
 800b28e:	75fb      	strb	r3, [r7, #23]
 800b290:	e08a      	b.n	800b3a8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	330b      	adds	r3, #11
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b29e:	73fb      	strb	r3, [r7, #15]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	7bfa      	ldrb	r2, [r7, #15]
 800b2a4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b2a6:	7dbb      	ldrb	r3, [r7, #22]
 800b2a8:	2be5      	cmp	r3, #229	; 0xe5
 800b2aa:	d007      	beq.n	800b2bc <dir_find+0x8a>
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
 800b2ae:	f003 0308 	and.w	r3, r3, #8
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d009      	beq.n	800b2ca <dir_find+0x98>
 800b2b6:	7bfb      	ldrb	r3, [r7, #15]
 800b2b8:	2b0f      	cmp	r3, #15
 800b2ba:	d006      	beq.n	800b2ca <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b2bc:	23ff      	movs	r3, #255	; 0xff
 800b2be:	757b      	strb	r3, [r7, #21]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2c6:	631a      	str	r2, [r3, #48]	; 0x30
 800b2c8:	e05e      	b.n	800b388 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b2ca:	7bfb      	ldrb	r3, [r7, #15]
 800b2cc:	2b0f      	cmp	r3, #15
 800b2ce:	d136      	bne.n	800b33e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b2d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d154      	bne.n	800b388 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b2de:	7dbb      	ldrb	r3, [r7, #22]
 800b2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00d      	beq.n	800b304 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a1b      	ldr	r3, [r3, #32]
 800b2ec:	7b5b      	ldrb	r3, [r3, #13]
 800b2ee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b2f0:	7dbb      	ldrb	r3, [r7, #22]
 800b2f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2f6:	75bb      	strb	r3, [r7, #22]
 800b2f8:	7dbb      	ldrb	r3, [r7, #22]
 800b2fa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	695a      	ldr	r2, [r3, #20]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b304:	7dba      	ldrb	r2, [r7, #22]
 800b306:	7d7b      	ldrb	r3, [r7, #21]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d115      	bne.n	800b338 <dir_find+0x106>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a1b      	ldr	r3, [r3, #32]
 800b310:	330d      	adds	r3, #13
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	7d3a      	ldrb	r2, [r7, #20]
 800b316:	429a      	cmp	r2, r3
 800b318:	d10e      	bne.n	800b338 <dir_find+0x106>
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	691a      	ldr	r2, [r3, #16]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	4619      	mov	r1, r3
 800b324:	4610      	mov	r0, r2
 800b326:	f7ff fdfd 	bl	800af24 <cmp_lfn>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d003      	beq.n	800b338 <dir_find+0x106>
 800b330:	7d7b      	ldrb	r3, [r7, #21]
 800b332:	3b01      	subs	r3, #1
 800b334:	b2db      	uxtb	r3, r3
 800b336:	e000      	b.n	800b33a <dir_find+0x108>
 800b338:	23ff      	movs	r3, #255	; 0xff
 800b33a:	757b      	strb	r3, [r7, #21]
 800b33c:	e024      	b.n	800b388 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b33e:	7d7b      	ldrb	r3, [r7, #21]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d109      	bne.n	800b358 <dir_find+0x126>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a1b      	ldr	r3, [r3, #32]
 800b348:	4618      	mov	r0, r3
 800b34a:	f7ff ff51 	bl	800b1f0 <sum_sfn>
 800b34e:	4603      	mov	r3, r0
 800b350:	461a      	mov	r2, r3
 800b352:	7d3b      	ldrb	r3, [r7, #20]
 800b354:	4293      	cmp	r3, r2
 800b356:	d024      	beq.n	800b3a2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10a      	bne.n	800b37c <dir_find+0x14a>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a18      	ldr	r0, [r3, #32]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3324      	adds	r3, #36	; 0x24
 800b36e:	220b      	movs	r2, #11
 800b370:	4619      	mov	r1, r3
 800b372:	f7fe fe1f 	bl	8009fb4 <mem_cmp>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d014      	beq.n	800b3a6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b37c:	23ff      	movs	r3, #255	; 0xff
 800b37e:	757b      	strb	r3, [r7, #21]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b386:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b388:	2100      	movs	r1, #0
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f7ff fc6d 	bl	800ac6a <dir_next>
 800b390:	4603      	mov	r3, r0
 800b392:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b394:	7dfb      	ldrb	r3, [r7, #23]
 800b396:	2b00      	cmp	r3, #0
 800b398:	f43f af65 	beq.w	800b266 <dir_find+0x34>
 800b39c:	e004      	b.n	800b3a8 <dir_find+0x176>
		if (res != FR_OK) break;
 800b39e:	bf00      	nop
 800b3a0:	e002      	b.n	800b3a8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b3a2:	bf00      	nop
 800b3a4:	e000      	b.n	800b3a8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b3a6:	bf00      	nop

	return res;
 800b3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3718      	adds	r7, #24
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
	...

0800b3b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08c      	sub	sp, #48	; 0x30
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b3c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <dir_register+0x20>
 800b3d0:	2306      	movs	r3, #6
 800b3d2:	e0e0      	b.n	800b596 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b3d8:	e002      	b.n	800b3e0 <dir_register+0x2c>
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	3301      	adds	r3, #1
 800b3de:	627b      	str	r3, [r7, #36]	; 0x24
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	691a      	ldr	r2, [r3, #16]
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e6:	005b      	lsls	r3, r3, #1
 800b3e8:	4413      	add	r3, r2
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1f4      	bne.n	800b3da <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b3f6:	f107 030c 	add.w	r3, r7, #12
 800b3fa:	220c      	movs	r2, #12
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f7fe fd9d 	bl	8009f3c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b402:	7dfb      	ldrb	r3, [r7, #23]
 800b404:	f003 0301 	and.w	r3, r3, #1
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d032      	beq.n	800b472 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2240      	movs	r2, #64	; 0x40
 800b410:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b414:	2301      	movs	r3, #1
 800b416:	62bb      	str	r3, [r7, #40]	; 0x28
 800b418:	e016      	b.n	800b448 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	691a      	ldr	r2, [r3, #16]
 800b424:	f107 010c 	add.w	r1, r7, #12
 800b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42a:	f7ff fe53 	bl	800b0d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7ff feff 	bl	800b232 <dir_find>
 800b434:	4603      	mov	r3, r0
 800b436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b43a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d106      	bne.n	800b450 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b444:	3301      	adds	r3, #1
 800b446:	62bb      	str	r3, [r7, #40]	; 0x28
 800b448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44a:	2b63      	cmp	r3, #99	; 0x63
 800b44c:	d9e5      	bls.n	800b41a <dir_register+0x66>
 800b44e:	e000      	b.n	800b452 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b450:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	2b64      	cmp	r3, #100	; 0x64
 800b456:	d101      	bne.n	800b45c <dir_register+0xa8>
 800b458:	2307      	movs	r3, #7
 800b45a:	e09c      	b.n	800b596 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b45c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b460:	2b04      	cmp	r3, #4
 800b462:	d002      	beq.n	800b46a <dir_register+0xb6>
 800b464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b468:	e095      	b.n	800b596 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b46a:	7dfa      	ldrb	r2, [r7, #23]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b472:	7dfb      	ldrb	r3, [r7, #23]
 800b474:	f003 0302 	and.w	r3, r3, #2
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d007      	beq.n	800b48c <dir_register+0xd8>
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	330c      	adds	r3, #12
 800b480:	4a47      	ldr	r2, [pc, #284]	; (800b5a0 <dir_register+0x1ec>)
 800b482:	fba2 2303 	umull	r2, r3, r2, r3
 800b486:	089b      	lsrs	r3, r3, #2
 800b488:	3301      	adds	r3, #1
 800b48a:	e000      	b.n	800b48e <dir_register+0xda>
 800b48c:	2301      	movs	r3, #1
 800b48e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b490:	6a39      	ldr	r1, [r7, #32]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff fcbf 	bl	800ae16 <dir_alloc>
 800b498:	4603      	mov	r3, r0
 800b49a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b49e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d148      	bne.n	800b538 <dir_register+0x184>
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	623b      	str	r3, [r7, #32]
 800b4ac:	6a3b      	ldr	r3, [r7, #32]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d042      	beq.n	800b538 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	695a      	ldr	r2, [r3, #20]
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	015b      	lsls	r3, r3, #5
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7ff fb4a 	bl	800ab58 <dir_sdi>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b4ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d132      	bne.n	800b538 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	3324      	adds	r3, #36	; 0x24
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7ff fe8a 	bl	800b1f0 <sum_sfn>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	69f8      	ldr	r0, [r7, #28]
 800b4e8:	f7fe ff56 	bl	800a398 <move_window>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b4f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d11d      	bne.n	800b536 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	6918      	ldr	r0, [r3, #16]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a19      	ldr	r1, [r3, #32]
 800b502:	6a3b      	ldr	r3, [r7, #32]
 800b504:	b2da      	uxtb	r2, r3
 800b506:	7efb      	ldrb	r3, [r7, #27]
 800b508:	f7ff fd7c 	bl	800b004 <put_lfn>
				fs->wflag = 1;
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	2201      	movs	r2, #1
 800b510:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b512:	2100      	movs	r1, #0
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff fba8 	bl	800ac6a <dir_next>
 800b51a:	4603      	mov	r3, r0
 800b51c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b520:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b524:	2b00      	cmp	r3, #0
 800b526:	d107      	bne.n	800b538 <dir_register+0x184>
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	3b01      	subs	r3, #1
 800b52c:	623b      	str	r3, [r7, #32]
 800b52e:	6a3b      	ldr	r3, [r7, #32]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1d5      	bne.n	800b4e0 <dir_register+0x12c>
 800b534:	e000      	b.n	800b538 <dir_register+0x184>
				if (res != FR_OK) break;
 800b536:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d128      	bne.n	800b592 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	69db      	ldr	r3, [r3, #28]
 800b544:	4619      	mov	r1, r3
 800b546:	69f8      	ldr	r0, [r7, #28]
 800b548:	f7fe ff26 	bl	800a398 <move_window>
 800b54c:	4603      	mov	r3, r0
 800b54e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b556:	2b00      	cmp	r3, #0
 800b558:	d11b      	bne.n	800b592 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6a1b      	ldr	r3, [r3, #32]
 800b55e:	2220      	movs	r2, #32
 800b560:	2100      	movs	r1, #0
 800b562:	4618      	mov	r0, r3
 800b564:	f7fe fd0b 	bl	8009f7e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6a18      	ldr	r0, [r3, #32]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	3324      	adds	r3, #36	; 0x24
 800b570:	220b      	movs	r2, #11
 800b572:	4619      	mov	r1, r3
 800b574:	f7fe fce2 	bl	8009f3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	330c      	adds	r3, #12
 800b584:	f002 0218 	and.w	r2, r2, #24
 800b588:	b2d2      	uxtb	r2, r2
 800b58a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	2201      	movs	r2, #1
 800b590:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b596:	4618      	mov	r0, r3
 800b598:	3730      	adds	r7, #48	; 0x30
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	4ec4ec4f 	.word	0x4ec4ec4f

0800b5a4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b088      	sub	sp, #32
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	69db      	ldr	r3, [r3, #28]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 80c9 	beq.w	800b756 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5cc:	d032      	beq.n	800b634 <get_fileinfo+0x90>
			i = j = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	61bb      	str	r3, [r7, #24]
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b5d6:	e01b      	b.n	800b610 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b5d8:	89fb      	ldrh	r3, [r7, #14]
 800b5da:	2100      	movs	r1, #0
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f001 fbdb 	bl	800cd98 <ff_convert>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b5e6:	89fb      	ldrh	r3, [r7, #14]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d102      	bne.n	800b5f2 <get_fileinfo+0x4e>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	61fb      	str	r3, [r7, #28]
 800b5f0:	e01a      	b.n	800b628 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	2bfe      	cmp	r3, #254	; 0xfe
 800b5f6:	d902      	bls.n	800b5fe <get_fileinfo+0x5a>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	61fb      	str	r3, [r7, #28]
 800b5fc:	e014      	b.n	800b628 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	1c5a      	adds	r2, r3, #1
 800b602:	61fa      	str	r2, [r7, #28]
 800b604:	89fa      	ldrh	r2, [r7, #14]
 800b606:	b2d1      	uxtb	r1, r2
 800b608:	683a      	ldr	r2, [r7, #0]
 800b60a:	4413      	add	r3, r2
 800b60c:	460a      	mov	r2, r1
 800b60e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	691a      	ldr	r2, [r3, #16]
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	1c59      	adds	r1, r3, #1
 800b618:	61b9      	str	r1, [r7, #24]
 800b61a:	005b      	lsls	r3, r3, #1
 800b61c:	4413      	add	r3, r2
 800b61e:	881b      	ldrh	r3, [r3, #0]
 800b620:	81fb      	strh	r3, [r7, #14]
 800b622:	89fb      	ldrh	r3, [r7, #14]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1d7      	bne.n	800b5d8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	4413      	add	r3, r2
 800b62e:	3316      	adds	r3, #22
 800b630:	2200      	movs	r2, #0
 800b632:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b634:	2300      	movs	r3, #0
 800b636:	61bb      	str	r3, [r7, #24]
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b63c:	683a      	ldr	r2, [r7, #0]
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	4413      	add	r3, r2
 800b642:	3316      	adds	r3, #22
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b648:	e04c      	b.n	800b6e4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a1a      	ldr	r2, [r3, #32]
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	1c59      	adds	r1, r3, #1
 800b652:	61f9      	str	r1, [r7, #28]
 800b654:	4413      	add	r3, r2
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b65a:	7dfb      	ldrb	r3, [r7, #23]
 800b65c:	2b20      	cmp	r3, #32
 800b65e:	d100      	bne.n	800b662 <get_fileinfo+0xbe>
 800b660:	e040      	b.n	800b6e4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b662:	7dfb      	ldrb	r3, [r7, #23]
 800b664:	2b05      	cmp	r3, #5
 800b666:	d101      	bne.n	800b66c <get_fileinfo+0xc8>
 800b668:	23e5      	movs	r3, #229	; 0xe5
 800b66a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	2b09      	cmp	r3, #9
 800b670:	d10f      	bne.n	800b692 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800b672:	89bb      	ldrh	r3, [r7, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d105      	bne.n	800b684 <get_fileinfo+0xe0>
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	4413      	add	r3, r2
 800b67e:	3316      	adds	r3, #22
 800b680:	222e      	movs	r2, #46	; 0x2e
 800b682:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	61ba      	str	r2, [r7, #24]
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	4413      	add	r3, r2
 800b68e:	222e      	movs	r2, #46	; 0x2e
 800b690:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b692:	683a      	ldr	r2, [r7, #0]
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	4413      	add	r3, r2
 800b698:	3309      	adds	r3, #9
 800b69a:	7dfa      	ldrb	r2, [r7, #23]
 800b69c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b69e:	89bb      	ldrh	r3, [r7, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d11c      	bne.n	800b6de <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b6a4:	7dfb      	ldrb	r3, [r7, #23]
 800b6a6:	2b40      	cmp	r3, #64	; 0x40
 800b6a8:	d913      	bls.n	800b6d2 <get_fileinfo+0x12e>
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	2b5a      	cmp	r3, #90	; 0x5a
 800b6ae:	d810      	bhi.n	800b6d2 <get_fileinfo+0x12e>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a1b      	ldr	r3, [r3, #32]
 800b6b4:	330c      	adds	r3, #12
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	2b08      	cmp	r3, #8
 800b6be:	d901      	bls.n	800b6c4 <get_fileinfo+0x120>
 800b6c0:	2310      	movs	r3, #16
 800b6c2:	e000      	b.n	800b6c6 <get_fileinfo+0x122>
 800b6c4:	2308      	movs	r3, #8
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d002      	beq.n	800b6d2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800b6cc:	7dfb      	ldrb	r3, [r7, #23]
 800b6ce:	3320      	adds	r3, #32
 800b6d0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	3316      	adds	r3, #22
 800b6da:	7dfa      	ldrb	r2, [r7, #23]
 800b6dc:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	2b0a      	cmp	r3, #10
 800b6e8:	d9af      	bls.n	800b64a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b6ea:	89bb      	ldrh	r3, [r7, #12]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10d      	bne.n	800b70c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	3316      	adds	r3, #22
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
 800b700:	330c      	adds	r3, #12
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d101      	bne.n	800b70c <get_fileinfo+0x168>
 800b708:	2300      	movs	r3, #0
 800b70a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b70c:	683a      	ldr	r2, [r7, #0]
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	4413      	add	r3, r2
 800b712:	3309      	adds	r3, #9
 800b714:	2200      	movs	r2, #0
 800b716:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a1b      	ldr	r3, [r3, #32]
 800b71c:	7ada      	ldrb	r2, [r3, #11]
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	331c      	adds	r3, #28
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe fb9d 	bl	8009e68 <ld_dword>
 800b72e:	4602      	mov	r2, r0
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a1b      	ldr	r3, [r3, #32]
 800b738:	3316      	adds	r3, #22
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fe fb94 	bl	8009e68 <ld_dword>
 800b740:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	b29a      	uxth	r2, r3
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	80da      	strh	r2, [r3, #6]
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	0c1b      	lsrs	r3, r3, #16
 800b74e:	b29a      	uxth	r2, r3
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	809a      	strh	r2, [r3, #4]
 800b754:	e000      	b.n	800b758 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b756:	bf00      	nop
}
 800b758:	3720      	adds	r7, #32
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
	...

0800b760 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b08a      	sub	sp, #40	; 0x28
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	613b      	str	r3, [r7, #16]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	691b      	ldr	r3, [r3, #16]
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	2300      	movs	r3, #0
 800b77a:	617b      	str	r3, [r7, #20]
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	61ba      	str	r2, [r7, #24]
 800b786:	693a      	ldr	r2, [r7, #16]
 800b788:	4413      	add	r3, r2
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b78e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b790:	2b1f      	cmp	r3, #31
 800b792:	d940      	bls.n	800b816 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b796:	2b2f      	cmp	r3, #47	; 0x2f
 800b798:	d006      	beq.n	800b7a8 <create_name+0x48>
 800b79a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b79c:	2b5c      	cmp	r3, #92	; 0x5c
 800b79e:	d110      	bne.n	800b7c2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b7a0:	e002      	b.n	800b7a8 <create_name+0x48>
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	61bb      	str	r3, [r7, #24]
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	2b2f      	cmp	r3, #47	; 0x2f
 800b7b2:	d0f6      	beq.n	800b7a2 <create_name+0x42>
 800b7b4:	693a      	ldr	r2, [r7, #16]
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	2b5c      	cmp	r3, #92	; 0x5c
 800b7be:	d0f0      	beq.n	800b7a2 <create_name+0x42>
			break;
 800b7c0:	e02a      	b.n	800b818 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	2bfe      	cmp	r3, #254	; 0xfe
 800b7c6:	d901      	bls.n	800b7cc <create_name+0x6c>
 800b7c8:	2306      	movs	r3, #6
 800b7ca:	e17d      	b.n	800bac8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b7cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b7d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f001 fade 	bl	800cd98 <ff_convert>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b7e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d101      	bne.n	800b7ea <create_name+0x8a>
 800b7e6:	2306      	movs	r3, #6
 800b7e8:	e16e      	b.n	800bac8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b7ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7ec:	2b7f      	cmp	r3, #127	; 0x7f
 800b7ee:	d809      	bhi.n	800b804 <create_name+0xa4>
 800b7f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	488d      	ldr	r0, [pc, #564]	; (800ba2c <create_name+0x2cc>)
 800b7f6:	f7fe fc04 	bl	800a002 <chk_chr>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d001      	beq.n	800b804 <create_name+0xa4>
 800b800:	2306      	movs	r3, #6
 800b802:	e161      	b.n	800bac8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	1c5a      	adds	r2, r3, #1
 800b808:	617a      	str	r2, [r7, #20]
 800b80a:	005b      	lsls	r3, r3, #1
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	4413      	add	r3, r2
 800b810:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b812:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b814:	e7b4      	b.n	800b780 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b816:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	441a      	add	r2, r3
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b824:	2b1f      	cmp	r3, #31
 800b826:	d801      	bhi.n	800b82c <create_name+0xcc>
 800b828:	2304      	movs	r3, #4
 800b82a:	e000      	b.n	800b82e <create_name+0xce>
 800b82c:	2300      	movs	r3, #0
 800b82e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b832:	e011      	b.n	800b858 <create_name+0xf8>
		w = lfn[di - 1];
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b83a:	3b01      	subs	r3, #1
 800b83c:	005b      	lsls	r3, r3, #1
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	4413      	add	r3, r2
 800b842:	881b      	ldrh	r3, [r3, #0]
 800b844:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b848:	2b20      	cmp	r3, #32
 800b84a:	d002      	beq.n	800b852 <create_name+0xf2>
 800b84c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b84e:	2b2e      	cmp	r3, #46	; 0x2e
 800b850:	d106      	bne.n	800b860 <create_name+0x100>
		di--;
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	3b01      	subs	r3, #1
 800b856:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1ea      	bne.n	800b834 <create_name+0xd4>
 800b85e:	e000      	b.n	800b862 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b860:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	005b      	lsls	r3, r3, #1
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	4413      	add	r3, r2
 800b86a:	2200      	movs	r2, #0
 800b86c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <create_name+0x118>
 800b874:	2306      	movs	r3, #6
 800b876:	e127      	b.n	800bac8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3324      	adds	r3, #36	; 0x24
 800b87c:	220b      	movs	r2, #11
 800b87e:	2120      	movs	r1, #32
 800b880:	4618      	mov	r0, r3
 800b882:	f7fe fb7c 	bl	8009f7e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b886:	2300      	movs	r3, #0
 800b888:	61bb      	str	r3, [r7, #24]
 800b88a:	e002      	b.n	800b892 <create_name+0x132>
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	3301      	adds	r3, #1
 800b890:	61bb      	str	r3, [r7, #24]
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	005b      	lsls	r3, r3, #1
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	4413      	add	r3, r2
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	d0f5      	beq.n	800b88c <create_name+0x12c>
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	005b      	lsls	r3, r3, #1
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	881b      	ldrh	r3, [r3, #0]
 800b8aa:	2b2e      	cmp	r3, #46	; 0x2e
 800b8ac:	d0ee      	beq.n	800b88c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d009      	beq.n	800b8c8 <create_name+0x168>
 800b8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b8:	f043 0303 	orr.w	r3, r3, #3
 800b8bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b8c0:	e002      	b.n	800b8c8 <create_name+0x168>
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	617b      	str	r3, [r7, #20]
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d009      	beq.n	800b8e2 <create_name+0x182>
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	005b      	lsls	r3, r3, #1
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	4413      	add	r3, r2
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	2b2e      	cmp	r3, #46	; 0x2e
 800b8e0:	d1ef      	bne.n	800b8c2 <create_name+0x162>

	i = b = 0; ni = 8;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	623b      	str	r3, [r7, #32]
 800b8ec:	2308      	movs	r3, #8
 800b8ee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	1c5a      	adds	r2, r3, #1
 800b8f4:	61ba      	str	r2, [r7, #24]
 800b8f6:	005b      	lsls	r3, r3, #1
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	881b      	ldrh	r3, [r3, #0]
 800b8fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b900:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b902:	2b00      	cmp	r3, #0
 800b904:	f000 8090 	beq.w	800ba28 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b90a:	2b20      	cmp	r3, #32
 800b90c:	d006      	beq.n	800b91c <create_name+0x1bc>
 800b90e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b910:	2b2e      	cmp	r3, #46	; 0x2e
 800b912:	d10a      	bne.n	800b92a <create_name+0x1ca>
 800b914:	69ba      	ldr	r2, [r7, #24]
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d006      	beq.n	800b92a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b920:	f043 0303 	orr.w	r3, r3, #3
 800b924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b928:	e07d      	b.n	800ba26 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b92a:	6a3a      	ldr	r2, [r7, #32]
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d203      	bcs.n	800b93a <create_name+0x1da>
 800b932:	69ba      	ldr	r2, [r7, #24]
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	429a      	cmp	r2, r3
 800b938:	d123      	bne.n	800b982 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	2b0b      	cmp	r3, #11
 800b93e:	d106      	bne.n	800b94e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b944:	f043 0303 	orr.w	r3, r3, #3
 800b948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b94c:	e075      	b.n	800ba3a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b94e:	69ba      	ldr	r2, [r7, #24]
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	429a      	cmp	r2, r3
 800b954:	d005      	beq.n	800b962 <create_name+0x202>
 800b956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b95a:	f043 0303 	orr.w	r3, r3, #3
 800b95e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b962:	69ba      	ldr	r2, [r7, #24]
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	429a      	cmp	r2, r3
 800b968:	d866      	bhi.n	800ba38 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	61bb      	str	r3, [r7, #24]
 800b96e:	2308      	movs	r3, #8
 800b970:	623b      	str	r3, [r7, #32]
 800b972:	230b      	movs	r3, #11
 800b974:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b976:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b980:	e051      	b.n	800ba26 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b984:	2b7f      	cmp	r3, #127	; 0x7f
 800b986:	d914      	bls.n	800b9b2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b98a:	2100      	movs	r1, #0
 800b98c:	4618      	mov	r0, r3
 800b98e:	f001 fa03 	bl	800cd98 <ff_convert>
 800b992:	4603      	mov	r3, r0
 800b994:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d004      	beq.n	800b9a6 <create_name+0x246>
 800b99c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b99e:	3b80      	subs	r3, #128	; 0x80
 800b9a0:	4a23      	ldr	r2, [pc, #140]	; (800ba30 <create_name+0x2d0>)
 800b9a2:	5cd3      	ldrb	r3, [r2, r3]
 800b9a4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b9a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9aa:	f043 0302 	orr.w	r3, r3, #2
 800b9ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b9b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d007      	beq.n	800b9c8 <create_name+0x268>
 800b9b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	481d      	ldr	r0, [pc, #116]	; (800ba34 <create_name+0x2d4>)
 800b9be:	f7fe fb20 	bl	800a002 <chk_chr>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d008      	beq.n	800b9da <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b9c8:	235f      	movs	r3, #95	; 0x5f
 800b9ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9d0:	f043 0303 	orr.w	r3, r3, #3
 800b9d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9d8:	e01b      	b.n	800ba12 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b9da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9dc:	2b40      	cmp	r3, #64	; 0x40
 800b9de:	d909      	bls.n	800b9f4 <create_name+0x294>
 800b9e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9e2:	2b5a      	cmp	r3, #90	; 0x5a
 800b9e4:	d806      	bhi.n	800b9f4 <create_name+0x294>
					b |= 2;
 800b9e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9ea:	f043 0302 	orr.w	r3, r3, #2
 800b9ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b9f2:	e00e      	b.n	800ba12 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b9f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9f6:	2b60      	cmp	r3, #96	; 0x60
 800b9f8:	d90b      	bls.n	800ba12 <create_name+0x2b2>
 800b9fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9fc:	2b7a      	cmp	r3, #122	; 0x7a
 800b9fe:	d808      	bhi.n	800ba12 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ba00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba04:	f043 0301 	orr.w	r3, r3, #1
 800ba08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ba0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba0e:	3b20      	subs	r3, #32
 800ba10:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ba12:	6a3b      	ldr	r3, [r7, #32]
 800ba14:	1c5a      	adds	r2, r3, #1
 800ba16:	623a      	str	r2, [r7, #32]
 800ba18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ba1a:	b2d1      	uxtb	r1, r2
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	4413      	add	r3, r2
 800ba20:	460a      	mov	r2, r1
 800ba22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ba26:	e763      	b.n	800b8f0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ba28:	bf00      	nop
 800ba2a:	e006      	b.n	800ba3a <create_name+0x2da>
 800ba2c:	0801a824 	.word	0x0801a824
 800ba30:	0801a950 	.word	0x0801a950
 800ba34:	0801a830 	.word	0x0801a830
			if (si > di) break;			/* No extension */
 800ba38:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba40:	2be5      	cmp	r3, #229	; 0xe5
 800ba42:	d103      	bne.n	800ba4c <create_name+0x2ec>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2205      	movs	r2, #5
 800ba48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	2b08      	cmp	r3, #8
 800ba50:	d104      	bne.n	800ba5c <create_name+0x2fc>
 800ba52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ba5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba60:	f003 030c 	and.w	r3, r3, #12
 800ba64:	2b0c      	cmp	r3, #12
 800ba66:	d005      	beq.n	800ba74 <create_name+0x314>
 800ba68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba6c:	f003 0303 	and.w	r3, r3, #3
 800ba70:	2b03      	cmp	r3, #3
 800ba72:	d105      	bne.n	800ba80 <create_name+0x320>
 800ba74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba78:	f043 0302 	orr.w	r3, r3, #2
 800ba7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ba80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba84:	f003 0302 	and.w	r3, r3, #2
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d117      	bne.n	800babc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ba8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba90:	f003 0303 	and.w	r3, r3, #3
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d105      	bne.n	800baa4 <create_name+0x344>
 800ba98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba9c:	f043 0310 	orr.w	r3, r3, #16
 800baa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800baa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800baa8:	f003 030c 	and.w	r3, r3, #12
 800baac:	2b04      	cmp	r3, #4
 800baae:	d105      	bne.n	800babc <create_name+0x35c>
 800bab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab4:	f043 0308 	orr.w	r3, r3, #8
 800bab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bac2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800bac6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3728      	adds	r7, #40	; 0x28
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bae4:	e002      	b.n	800baec <follow_path+0x1c>
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	3301      	adds	r3, #1
 800baea:	603b      	str	r3, [r7, #0]
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	2b2f      	cmp	r3, #47	; 0x2f
 800baf2:	d0f8      	beq.n	800bae6 <follow_path+0x16>
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	2b5c      	cmp	r3, #92	; 0x5c
 800bafa:	d0f4      	beq.n	800bae6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	2200      	movs	r2, #0
 800bb00:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b1f      	cmp	r3, #31
 800bb08:	d80a      	bhi.n	800bb20 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2280      	movs	r2, #128	; 0x80
 800bb0e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bb12:	2100      	movs	r1, #0
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7ff f81f 	bl	800ab58 <dir_sdi>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	75fb      	strb	r3, [r7, #23]
 800bb1e:	e048      	b.n	800bbb2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb20:	463b      	mov	r3, r7
 800bb22:	4619      	mov	r1, r3
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7ff fe1b 	bl	800b760 <create_name>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d139      	bne.n	800bba8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7ff fb7c 	bl	800b232 <dir_find>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bb44:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bb46:	7dfb      	ldrb	r3, [r7, #23]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00a      	beq.n	800bb62 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bb4c:	7dfb      	ldrb	r3, [r7, #23]
 800bb4e:	2b04      	cmp	r3, #4
 800bb50:	d12c      	bne.n	800bbac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bb52:	7afb      	ldrb	r3, [r7, #11]
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d127      	bne.n	800bbac <follow_path+0xdc>
 800bb5c:	2305      	movs	r3, #5
 800bb5e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bb60:	e024      	b.n	800bbac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bb62:	7afb      	ldrb	r3, [r7, #11]
 800bb64:	f003 0304 	and.w	r3, r3, #4
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d121      	bne.n	800bbb0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	799b      	ldrb	r3, [r3, #6]
 800bb70:	f003 0310 	and.w	r3, r3, #16
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d102      	bne.n	800bb7e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bb78:	2305      	movs	r3, #5
 800bb7a:	75fb      	strb	r3, [r7, #23]
 800bb7c:	e019      	b.n	800bbb2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	695b      	ldr	r3, [r3, #20]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	8992      	ldrh	r2, [r2, #12]
 800bb8c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb90:	fb00 f202 	mul.w	r2, r0, r2
 800bb94:	1a9b      	subs	r3, r3, r2
 800bb96:	440b      	add	r3, r1
 800bb98:	4619      	mov	r1, r3
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f7ff f982 	bl	800aea4 <ld_clust>
 800bba0:	4602      	mov	r2, r0
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bba6:	e7bb      	b.n	800bb20 <follow_path+0x50>
			if (res != FR_OK) break;
 800bba8:	bf00      	nop
 800bbaa:	e002      	b.n	800bbb2 <follow_path+0xe2>
				break;
 800bbac:	bf00      	nop
 800bbae:	e000      	b.n	800bbb2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bbb0:	bf00      	nop
			}
		}
	}

	return res;
 800bbb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3718      	adds	r7, #24
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b087      	sub	sp, #28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bbc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbc8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d031      	beq.n	800bc36 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	617b      	str	r3, [r7, #20]
 800bbd8:	e002      	b.n	800bbe0 <get_ldnumber+0x24>
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	617b      	str	r3, [r7, #20]
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b1f      	cmp	r3, #31
 800bbe6:	d903      	bls.n	800bbf0 <get_ldnumber+0x34>
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	2b3a      	cmp	r3, #58	; 0x3a
 800bbee:	d1f4      	bne.n	800bbda <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	2b3a      	cmp	r3, #58	; 0x3a
 800bbf6:	d11c      	bne.n	800bc32 <get_ldnumber+0x76>
			tp = *path;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	60fa      	str	r2, [r7, #12]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	3b30      	subs	r3, #48	; 0x30
 800bc08:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2b09      	cmp	r3, #9
 800bc0e:	d80e      	bhi.n	800bc2e <get_ldnumber+0x72>
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d10a      	bne.n	800bc2e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d107      	bne.n	800bc2e <get_ldnumber+0x72>
					vol = (int)i;
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	3301      	adds	r3, #1
 800bc26:	617b      	str	r3, [r7, #20]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	697a      	ldr	r2, [r7, #20]
 800bc2c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	e002      	b.n	800bc38 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bc32:	2300      	movs	r3, #0
 800bc34:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bc36:	693b      	ldr	r3, [r7, #16]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	371c      	adds	r7, #28
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	70da      	strb	r2, [r3, #3]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc5a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7fe fb9a 	bl	800a398 <move_window>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d001      	beq.n	800bc6e <check_fs+0x2a>
 800bc6a:	2304      	movs	r3, #4
 800bc6c:	e038      	b.n	800bce0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	3338      	adds	r3, #56	; 0x38
 800bc72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fe f8de 	bl	8009e38 <ld_word>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	461a      	mov	r2, r3
 800bc80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d001      	beq.n	800bc8c <check_fs+0x48>
 800bc88:	2303      	movs	r3, #3
 800bc8a:	e029      	b.n	800bce0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc92:	2be9      	cmp	r3, #233	; 0xe9
 800bc94:	d009      	beq.n	800bcaa <check_fs+0x66>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc9c:	2beb      	cmp	r3, #235	; 0xeb
 800bc9e:	d11e      	bne.n	800bcde <check_fs+0x9a>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bca6:	2b90      	cmp	r3, #144	; 0x90
 800bca8:	d119      	bne.n	800bcde <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	3338      	adds	r3, #56	; 0x38
 800bcae:	3336      	adds	r3, #54	; 0x36
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7fe f8d9 	bl	8009e68 <ld_dword>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bcbc:	4a0a      	ldr	r2, [pc, #40]	; (800bce8 <check_fs+0xa4>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d101      	bne.n	800bcc6 <check_fs+0x82>
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	e00c      	b.n	800bce0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	3338      	adds	r3, #56	; 0x38
 800bcca:	3352      	adds	r3, #82	; 0x52
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fe f8cb 	bl	8009e68 <ld_dword>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	4a05      	ldr	r2, [pc, #20]	; (800bcec <check_fs+0xa8>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d101      	bne.n	800bcde <check_fs+0x9a>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e000      	b.n	800bce0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bcde:	2302      	movs	r3, #2
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	00544146 	.word	0x00544146
 800bcec:	33544146 	.word	0x33544146

0800bcf0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b096      	sub	sp, #88	; 0x58
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	2200      	movs	r2, #0
 800bd02:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f7ff ff59 	bl	800bbbc <get_ldnumber>
 800bd0a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bd0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	da01      	bge.n	800bd16 <find_volume+0x26>
 800bd12:	230b      	movs	r3, #11
 800bd14:	e265      	b.n	800c1e2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bd16:	4a9f      	ldr	r2, [pc, #636]	; (800bf94 <find_volume+0x2a4>)
 800bd18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d101      	bne.n	800bd2a <find_volume+0x3a>
 800bd26:	230c      	movs	r3, #12
 800bd28:	e25b      	b.n	800c1e2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd2e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	f023 0301 	bic.w	r3, r3, #1
 800bd36:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d01a      	beq.n	800bd76 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd42:	785b      	ldrb	r3, [r3, #1]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7fd ffd9 	bl	8009cfc <disk_status>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bd50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd54:	f003 0301 	and.w	r3, r3, #1
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10c      	bne.n	800bd76 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d007      	beq.n	800bd72 <find_volume+0x82>
 800bd62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd66:	f003 0304 	and.w	r3, r3, #4
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d001      	beq.n	800bd72 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bd6e:	230a      	movs	r3, #10
 800bd70:	e237      	b.n	800c1e2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800bd72:	2300      	movs	r3, #0
 800bd74:	e235      	b.n	800c1e2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd78:	2200      	movs	r2, #0
 800bd7a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd82:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd86:	785b      	ldrb	r3, [r3, #1]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fd ffd1 	bl	8009d30 <disk_initialize>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bd94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bd98:	f003 0301 	and.w	r3, r3, #1
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bda0:	2303      	movs	r3, #3
 800bda2:	e21e      	b.n	800c1e2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d007      	beq.n	800bdba <find_volume+0xca>
 800bdaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdae:	f003 0304 	and.w	r3, r3, #4
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bdb6:	230a      	movs	r3, #10
 800bdb8:	e213      	b.n	800c1e2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbc:	7858      	ldrb	r0, [r3, #1]
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc0:	330c      	adds	r3, #12
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	2102      	movs	r1, #2
 800bdc6:	f7fe f819 	bl	8009dfc <disk_ioctl>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d001      	beq.n	800bdd4 <find_volume+0xe4>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e206      	b.n	800c1e2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800bdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd6:	899b      	ldrh	r3, [r3, #12]
 800bdd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bddc:	d80d      	bhi.n	800bdfa <find_volume+0x10a>
 800bdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde0:	899b      	ldrh	r3, [r3, #12]
 800bde2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bde6:	d308      	bcc.n	800bdfa <find_volume+0x10a>
 800bde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdea:	899b      	ldrh	r3, [r3, #12]
 800bdec:	461a      	mov	r2, r3
 800bdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf0:	899b      	ldrh	r3, [r3, #12]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d001      	beq.n	800bdfe <find_volume+0x10e>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e1f1      	b.n	800c1e2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bdfe:	2300      	movs	r3, #0
 800be00:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800be02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be06:	f7ff ff1d 	bl	800bc44 <check_fs>
 800be0a:	4603      	mov	r3, r0
 800be0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800be10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be14:	2b02      	cmp	r3, #2
 800be16:	d149      	bne.n	800beac <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be18:	2300      	movs	r3, #0
 800be1a:	643b      	str	r3, [r7, #64]	; 0x40
 800be1c:	e01e      	b.n	800be5c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800be1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be20:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800be24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be26:	011b      	lsls	r3, r3, #4
 800be28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800be2c:	4413      	add	r3, r2
 800be2e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be32:	3304      	adds	r3, #4
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d006      	beq.n	800be48 <find_volume+0x158>
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	3308      	adds	r3, #8
 800be3e:	4618      	mov	r0, r3
 800be40:	f7fe f812 	bl	8009e68 <ld_dword>
 800be44:	4602      	mov	r2, r0
 800be46:	e000      	b.n	800be4a <find_volume+0x15a>
 800be48:	2200      	movs	r2, #0
 800be4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	3358      	adds	r3, #88	; 0x58
 800be50:	443b      	add	r3, r7
 800be52:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800be56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be58:	3301      	adds	r3, #1
 800be5a:	643b      	str	r3, [r7, #64]	; 0x40
 800be5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be5e:	2b03      	cmp	r3, #3
 800be60:	d9dd      	bls.n	800be1e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800be62:	2300      	movs	r3, #0
 800be64:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800be66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d002      	beq.n	800be72 <find_volume+0x182>
 800be6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be6e:	3b01      	subs	r3, #1
 800be70:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800be72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	3358      	adds	r3, #88	; 0x58
 800be78:	443b      	add	r3, r7
 800be7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800be7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800be80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be82:	2b00      	cmp	r3, #0
 800be84:	d005      	beq.n	800be92 <find_volume+0x1a2>
 800be86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be8a:	f7ff fedb 	bl	800bc44 <check_fs>
 800be8e:	4603      	mov	r3, r0
 800be90:	e000      	b.n	800be94 <find_volume+0x1a4>
 800be92:	2303      	movs	r3, #3
 800be94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800be98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d905      	bls.n	800beac <find_volume+0x1bc>
 800bea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bea2:	3301      	adds	r3, #1
 800bea4:	643b      	str	r3, [r7, #64]	; 0x40
 800bea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bea8:	2b03      	cmp	r3, #3
 800beaa:	d9e2      	bls.n	800be72 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800beac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800beb0:	2b04      	cmp	r3, #4
 800beb2:	d101      	bne.n	800beb8 <find_volume+0x1c8>
 800beb4:	2301      	movs	r3, #1
 800beb6:	e194      	b.n	800c1e2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800beb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d901      	bls.n	800bec4 <find_volume+0x1d4>
 800bec0:	230d      	movs	r3, #13
 800bec2:	e18e      	b.n	800c1e2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec6:	3338      	adds	r3, #56	; 0x38
 800bec8:	330b      	adds	r3, #11
 800beca:	4618      	mov	r0, r3
 800becc:	f7fd ffb4 	bl	8009e38 <ld_word>
 800bed0:	4603      	mov	r3, r0
 800bed2:	461a      	mov	r2, r3
 800bed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed6:	899b      	ldrh	r3, [r3, #12]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d001      	beq.n	800bee0 <find_volume+0x1f0>
 800bedc:	230d      	movs	r3, #13
 800bede:	e180      	b.n	800c1e2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	3338      	adds	r3, #56	; 0x38
 800bee4:	3316      	adds	r3, #22
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fd ffa6 	bl	8009e38 <ld_word>
 800beec:	4603      	mov	r3, r0
 800beee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d106      	bne.n	800bf04 <find_volume+0x214>
 800bef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef8:	3338      	adds	r3, #56	; 0x38
 800befa:	3324      	adds	r3, #36	; 0x24
 800befc:	4618      	mov	r0, r3
 800befe:	f7fd ffb3 	bl	8009e68 <ld_dword>
 800bf02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf08:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800bf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf16:	789b      	ldrb	r3, [r3, #2]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d005      	beq.n	800bf28 <find_volume+0x238>
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1e:	789b      	ldrb	r3, [r3, #2]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d001      	beq.n	800bf28 <find_volume+0x238>
 800bf24:	230d      	movs	r3, #13
 800bf26:	e15c      	b.n	800c1e2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2a:	789b      	ldrb	r3, [r3, #2]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf30:	fb02 f303 	mul.w	r3, r2, r3
 800bf34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf44:	895b      	ldrh	r3, [r3, #10]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d008      	beq.n	800bf5c <find_volume+0x26c>
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4c:	895b      	ldrh	r3, [r3, #10]
 800bf4e:	461a      	mov	r2, r3
 800bf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf52:	895b      	ldrh	r3, [r3, #10]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	4013      	ands	r3, r2
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <find_volume+0x270>
 800bf5c:	230d      	movs	r3, #13
 800bf5e:	e140      	b.n	800c1e2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf62:	3338      	adds	r3, #56	; 0x38
 800bf64:	3311      	adds	r3, #17
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fd ff66 	bl	8009e38 <ld_word>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	461a      	mov	r2, r3
 800bf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf76:	891b      	ldrh	r3, [r3, #8]
 800bf78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf7a:	8992      	ldrh	r2, [r2, #12]
 800bf7c:	0952      	lsrs	r2, r2, #5
 800bf7e:	b292      	uxth	r2, r2
 800bf80:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf84:	fb01 f202 	mul.w	r2, r1, r2
 800bf88:	1a9b      	subs	r3, r3, r2
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d003      	beq.n	800bf98 <find_volume+0x2a8>
 800bf90:	230d      	movs	r3, #13
 800bf92:	e126      	b.n	800c1e2 <find_volume+0x4f2>
 800bf94:	20003cf4 	.word	0x20003cf4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9a:	3338      	adds	r3, #56	; 0x38
 800bf9c:	3313      	adds	r3, #19
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fd ff4a 	bl	8009e38 <ld_word>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bfa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d106      	bne.n	800bfbc <find_volume+0x2cc>
 800bfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb0:	3338      	adds	r3, #56	; 0x38
 800bfb2:	3320      	adds	r3, #32
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fd ff57 	bl	8009e68 <ld_dword>
 800bfba:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbe:	3338      	adds	r3, #56	; 0x38
 800bfc0:	330e      	adds	r3, #14
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fd ff38 	bl	8009e38 <ld_word>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bfcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <find_volume+0x2e6>
 800bfd2:	230d      	movs	r3, #13
 800bfd4:	e105      	b.n	800c1e2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bfd6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bfd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfda:	4413      	add	r3, r2
 800bfdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfde:	8911      	ldrh	r1, [r2, #8]
 800bfe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfe2:	8992      	ldrh	r2, [r2, #12]
 800bfe4:	0952      	lsrs	r2, r2, #5
 800bfe6:	b292      	uxth	r2, r2
 800bfe8:	fbb1 f2f2 	udiv	r2, r1, r2
 800bfec:	b292      	uxth	r2, r2
 800bfee:	4413      	add	r3, r2
 800bff0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d201      	bcs.n	800bffe <find_volume+0x30e>
 800bffa:	230d      	movs	r3, #13
 800bffc:	e0f1      	b.n	800c1e2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c006:	8952      	ldrh	r2, [r2, #10]
 800c008:	fbb3 f3f2 	udiv	r3, r3, r2
 800c00c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	2b00      	cmp	r3, #0
 800c012:	d101      	bne.n	800c018 <find_volume+0x328>
 800c014:	230d      	movs	r3, #13
 800c016:	e0e4      	b.n	800c1e2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c018:	2303      	movs	r3, #3
 800c01a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c024:	4293      	cmp	r3, r2
 800c026:	d802      	bhi.n	800c02e <find_volume+0x33e>
 800c028:	2302      	movs	r3, #2
 800c02a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c030:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c034:	4293      	cmp	r3, r2
 800c036:	d802      	bhi.n	800c03e <find_volume+0x34e>
 800c038:	2301      	movs	r3, #1
 800c03a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c040:	1c9a      	adds	r2, r3, #2
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c048:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c04a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c04c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c050:	441a      	add	r2, r3
 800c052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c054:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c056:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05a:	441a      	add	r2, r3
 800c05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800c060:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c064:	2b03      	cmp	r3, #3
 800c066:	d11e      	bne.n	800c0a6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06a:	3338      	adds	r3, #56	; 0x38
 800c06c:	332a      	adds	r3, #42	; 0x2a
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fd fee2 	bl	8009e38 <ld_word>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <find_volume+0x38e>
 800c07a:	230d      	movs	r3, #13
 800c07c:	e0b1      	b.n	800c1e2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c080:	891b      	ldrh	r3, [r3, #8]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d001      	beq.n	800c08a <find_volume+0x39a>
 800c086:	230d      	movs	r3, #13
 800c088:	e0ab      	b.n	800c1e2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08c:	3338      	adds	r3, #56	; 0x38
 800c08e:	332c      	adds	r3, #44	; 0x2c
 800c090:	4618      	mov	r0, r3
 800c092:	f7fd fee9 	bl	8009e68 <ld_dword>
 800c096:	4602      	mov	r2, r0
 800c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09e:	69db      	ldr	r3, [r3, #28]
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	647b      	str	r3, [r7, #68]	; 0x44
 800c0a4:	e01f      	b.n	800c0e6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a8:	891b      	ldrh	r3, [r3, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d101      	bne.n	800c0b2 <find_volume+0x3c2>
 800c0ae:	230d      	movs	r3, #13
 800c0b0:	e097      	b.n	800c1e2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0b8:	441a      	add	r2, r3
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0bc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c0be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d103      	bne.n	800c0ce <find_volume+0x3de>
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	69db      	ldr	r3, [r3, #28]
 800c0ca:	005b      	lsls	r3, r3, #1
 800c0cc:	e00a      	b.n	800c0e4 <find_volume+0x3f4>
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d0:	69da      	ldr	r2, [r3, #28]
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	005b      	lsls	r3, r3, #1
 800c0d6:	4413      	add	r3, r2
 800c0d8:	085a      	lsrs	r2, r3, #1
 800c0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0dc:	69db      	ldr	r3, [r3, #28]
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c0e4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e8:	6a1a      	ldr	r2, [r3, #32]
 800c0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ec:	899b      	ldrh	r3, [r3, #12]
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0f2:	440b      	add	r3, r1
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0f8:	8989      	ldrh	r1, [r1, #12]
 800c0fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d201      	bcs.n	800c106 <find_volume+0x416>
 800c102:	230d      	movs	r3, #13
 800c104:	e06d      	b.n	800c1e2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c10c:	619a      	str	r2, [r3, #24]
 800c10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c110:	699a      	ldr	r2, [r3, #24]
 800c112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c114:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c118:	2280      	movs	r2, #128	; 0x80
 800c11a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c11c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c120:	2b03      	cmp	r3, #3
 800c122:	d149      	bne.n	800c1b8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c126:	3338      	adds	r3, #56	; 0x38
 800c128:	3330      	adds	r3, #48	; 0x30
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fd fe84 	bl	8009e38 <ld_word>
 800c130:	4603      	mov	r3, r0
 800c132:	2b01      	cmp	r3, #1
 800c134:	d140      	bne.n	800c1b8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c138:	3301      	adds	r3, #1
 800c13a:	4619      	mov	r1, r3
 800c13c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c13e:	f7fe f92b 	bl	800a398 <move_window>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d137      	bne.n	800c1b8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14a:	2200      	movs	r2, #0
 800c14c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c150:	3338      	adds	r3, #56	; 0x38
 800c152:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c156:	4618      	mov	r0, r3
 800c158:	f7fd fe6e 	bl	8009e38 <ld_word>
 800c15c:	4603      	mov	r3, r0
 800c15e:	461a      	mov	r2, r3
 800c160:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c164:	429a      	cmp	r2, r3
 800c166:	d127      	bne.n	800c1b8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16a:	3338      	adds	r3, #56	; 0x38
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fd fe7b 	bl	8009e68 <ld_dword>
 800c172:	4603      	mov	r3, r0
 800c174:	4a1d      	ldr	r2, [pc, #116]	; (800c1ec <find_volume+0x4fc>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d11e      	bne.n	800c1b8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17c:	3338      	adds	r3, #56	; 0x38
 800c17e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c182:	4618      	mov	r0, r3
 800c184:	f7fd fe70 	bl	8009e68 <ld_dword>
 800c188:	4603      	mov	r3, r0
 800c18a:	4a19      	ldr	r2, [pc, #100]	; (800c1f0 <find_volume+0x500>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d113      	bne.n	800c1b8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c192:	3338      	adds	r3, #56	; 0x38
 800c194:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fd fe65 	bl	8009e68 <ld_dword>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a6:	3338      	adds	r3, #56	; 0x38
 800c1a8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fd fe5b 	bl	8009e68 <ld_dword>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c1be:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c1c0:	4b0c      	ldr	r3, [pc, #48]	; (800c1f4 <find_volume+0x504>)
 800c1c2:	881b      	ldrh	r3, [r3, #0]
 800c1c4:	3301      	adds	r3, #1
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	4b0a      	ldr	r3, [pc, #40]	; (800c1f4 <find_volume+0x504>)
 800c1ca:	801a      	strh	r2, [r3, #0]
 800c1cc:	4b09      	ldr	r3, [pc, #36]	; (800c1f4 <find_volume+0x504>)
 800c1ce:	881a      	ldrh	r2, [r3, #0]
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d6:	4a08      	ldr	r2, [pc, #32]	; (800c1f8 <find_volume+0x508>)
 800c1d8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c1da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1dc:	f7fe f874 	bl	800a2c8 <clear_lock>
#endif
	return FR_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3758      	adds	r7, #88	; 0x58
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	41615252 	.word	0x41615252
 800c1f0:	61417272 	.word	0x61417272
 800c1f4:	20003cf8 	.word	0x20003cf8
 800c1f8:	20003d1c 	.word	0x20003d1c

0800c1fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c206:	2309      	movs	r3, #9
 800c208:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d01c      	beq.n	800c24a <validate+0x4e>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d018      	beq.n	800c24a <validate+0x4e>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d013      	beq.n	800c24a <validate+0x4e>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	889a      	ldrh	r2, [r3, #4]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	88db      	ldrh	r3, [r3, #6]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d10c      	bne.n	800c24a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	785b      	ldrb	r3, [r3, #1]
 800c236:	4618      	mov	r0, r3
 800c238:	f7fd fd60 	bl	8009cfc <disk_status>
 800c23c:	4603      	mov	r3, r0
 800c23e:	f003 0301 	and.w	r3, r3, #1
 800c242:	2b00      	cmp	r3, #0
 800c244:	d101      	bne.n	800c24a <validate+0x4e>
			res = FR_OK;
 800c246:	2300      	movs	r3, #0
 800c248:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d102      	bne.n	800c256 <validate+0x5a>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	e000      	b.n	800c258 <validate+0x5c>
 800c256:	2300      	movs	r3, #0
 800c258:	683a      	ldr	r2, [r7, #0]
 800c25a:	6013      	str	r3, [r2, #0]
	return res;
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b088      	sub	sp, #32
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	4613      	mov	r3, r2
 800c274:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c27a:	f107 0310 	add.w	r3, r7, #16
 800c27e:	4618      	mov	r0, r3
 800c280:	f7ff fc9c 	bl	800bbbc <get_ldnumber>
 800c284:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	da01      	bge.n	800c290 <f_mount+0x28>
 800c28c:	230b      	movs	r3, #11
 800c28e:	e02b      	b.n	800c2e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c290:	4a17      	ldr	r2, [pc, #92]	; (800c2f0 <f_mount+0x88>)
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c298:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d005      	beq.n	800c2ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c2a0:	69b8      	ldr	r0, [r7, #24]
 800c2a2:	f7fe f811 	bl	800a2c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	490d      	ldr	r1, [pc, #52]	; (800c2f0 <f_mount+0x88>)
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d002      	beq.n	800c2ce <f_mount+0x66>
 800c2c8:	79fb      	ldrb	r3, [r7, #7]
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d001      	beq.n	800c2d2 <f_mount+0x6a>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	e00a      	b.n	800c2e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c2d2:	f107 010c 	add.w	r1, r7, #12
 800c2d6:	f107 0308 	add.w	r3, r7, #8
 800c2da:	2200      	movs	r2, #0
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7ff fd07 	bl	800bcf0 <find_volume>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c2e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3720      	adds	r7, #32
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	20003cf4 	.word	0x20003cf4

0800c2f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b09a      	sub	sp, #104	; 0x68
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	4613      	mov	r3, r2
 800c300:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d101      	bne.n	800c30c <f_open+0x18>
 800c308:	2309      	movs	r3, #9
 800c30a:	e1bb      	b.n	800c684 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c30c:	79fb      	ldrb	r3, [r7, #7]
 800c30e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c312:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c314:	79fa      	ldrb	r2, [r7, #7]
 800c316:	f107 0114 	add.w	r1, r7, #20
 800c31a:	f107 0308 	add.w	r3, r7, #8
 800c31e:	4618      	mov	r0, r3
 800c320:	f7ff fce6 	bl	800bcf0 <find_volume>
 800c324:	4603      	mov	r3, r0
 800c326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c32a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f040 819f 	bne.w	800c672 <f_open+0x37e>
		dj.obj.fs = fs;
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c338:	68ba      	ldr	r2, [r7, #8]
 800c33a:	f107 0318 	add.w	r3, r7, #24
 800c33e:	4611      	mov	r1, r2
 800c340:	4618      	mov	r0, r3
 800c342:	f7ff fbc5 	bl	800bad0 <follow_path>
 800c346:	4603      	mov	r3, r0
 800c348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c34c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c350:	2b00      	cmp	r3, #0
 800c352:	d11a      	bne.n	800c38a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c354:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c358:	b25b      	sxtb	r3, r3
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	da03      	bge.n	800c366 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c35e:	2306      	movs	r3, #6
 800c360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c364:	e011      	b.n	800c38a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c366:	79fb      	ldrb	r3, [r7, #7]
 800c368:	f023 0301 	bic.w	r3, r3, #1
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	bf14      	ite	ne
 800c370:	2301      	movne	r3, #1
 800c372:	2300      	moveq	r3, #0
 800c374:	b2db      	uxtb	r3, r3
 800c376:	461a      	mov	r2, r3
 800c378:	f107 0318 	add.w	r3, r7, #24
 800c37c:	4611      	mov	r1, r2
 800c37e:	4618      	mov	r0, r3
 800c380:	f7fd fe5a 	bl	800a038 <chk_lock>
 800c384:	4603      	mov	r3, r0
 800c386:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c38a:	79fb      	ldrb	r3, [r7, #7]
 800c38c:	f003 031c 	and.w	r3, r3, #28
 800c390:	2b00      	cmp	r3, #0
 800c392:	d07f      	beq.n	800c494 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c394:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d017      	beq.n	800c3cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c39c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c3a0:	2b04      	cmp	r3, #4
 800c3a2:	d10e      	bne.n	800c3c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c3a4:	f7fd fea4 	bl	800a0f0 <enq_lock>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d006      	beq.n	800c3bc <f_open+0xc8>
 800c3ae:	f107 0318 	add.w	r3, r7, #24
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fe fffe 	bl	800b3b4 <dir_register>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	e000      	b.n	800c3be <f_open+0xca>
 800c3bc:	2312      	movs	r3, #18
 800c3be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c3c2:	79fb      	ldrb	r3, [r7, #7]
 800c3c4:	f043 0308 	orr.w	r3, r3, #8
 800c3c8:	71fb      	strb	r3, [r7, #7]
 800c3ca:	e010      	b.n	800c3ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c3cc:	7fbb      	ldrb	r3, [r7, #30]
 800c3ce:	f003 0311 	and.w	r3, r3, #17
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d003      	beq.n	800c3de <f_open+0xea>
					res = FR_DENIED;
 800c3d6:	2307      	movs	r3, #7
 800c3d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c3dc:	e007      	b.n	800c3ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c3de:	79fb      	ldrb	r3, [r7, #7]
 800c3e0:	f003 0304 	and.w	r3, r3, #4
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <f_open+0xfa>
 800c3e8:	2308      	movs	r3, #8
 800c3ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c3ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d168      	bne.n	800c4c8 <f_open+0x1d4>
 800c3f6:	79fb      	ldrb	r3, [r7, #7]
 800c3f8:	f003 0308 	and.w	r3, r3, #8
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d063      	beq.n	800c4c8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c400:	f7fd fc1e 	bl	8009c40 <get_fattime>
 800c404:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c408:	330e      	adds	r3, #14
 800c40a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fd fd69 	bl	8009ee4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	3316      	adds	r3, #22
 800c416:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fd fd63 	bl	8009ee4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c420:	330b      	adds	r3, #11
 800c422:	2220      	movs	r2, #32
 800c424:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c42a:	4611      	mov	r1, r2
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fe fd39 	bl	800aea4 <ld_clust>
 800c432:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c438:	2200      	movs	r2, #0
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fe fd51 	bl	800aee2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c442:	331c      	adds	r3, #28
 800c444:	2100      	movs	r1, #0
 800c446:	4618      	mov	r0, r3
 800c448:	f7fd fd4c 	bl	8009ee4 <st_dword>
					fs->wflag = 1;
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	2201      	movs	r2, #1
 800c450:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c454:	2b00      	cmp	r3, #0
 800c456:	d037      	beq.n	800c4c8 <f_open+0x1d4>
						dw = fs->winsect;
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c45e:	f107 0318 	add.w	r3, r7, #24
 800c462:	2200      	movs	r2, #0
 800c464:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c466:	4618      	mov	r0, r3
 800c468:	f7fe fa41 	bl	800a8ee <remove_chain>
 800c46c:	4603      	mov	r3, r0
 800c46e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c472:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c476:	2b00      	cmp	r3, #0
 800c478:	d126      	bne.n	800c4c8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fd ff8a 	bl	800a398 <move_window>
 800c484:	4603      	mov	r3, r0
 800c486:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c48e:	3a01      	subs	r2, #1
 800c490:	615a      	str	r2, [r3, #20]
 800c492:	e019      	b.n	800c4c8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c494:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d115      	bne.n	800c4c8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c49c:	7fbb      	ldrb	r3, [r7, #30]
 800c49e:	f003 0310 	and.w	r3, r3, #16
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <f_open+0x1ba>
					res = FR_NO_FILE;
 800c4a6:	2304      	movs	r3, #4
 800c4a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c4ac:	e00c      	b.n	800c4c8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c4ae:	79fb      	ldrb	r3, [r7, #7]
 800c4b0:	f003 0302 	and.w	r3, r3, #2
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d007      	beq.n	800c4c8 <f_open+0x1d4>
 800c4b8:	7fbb      	ldrb	r3, [r7, #30]
 800c4ba:	f003 0301 	and.w	r3, r3, #1
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d002      	beq.n	800c4c8 <f_open+0x1d4>
						res = FR_DENIED;
 800c4c2:	2307      	movs	r3, #7
 800c4c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c4c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d128      	bne.n	800c522 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c4d0:	79fb      	ldrb	r3, [r7, #7]
 800c4d2:	f003 0308 	and.w	r3, r3, #8
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c4da:	79fb      	ldrb	r3, [r7, #7]
 800c4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c4ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c4f0:	79fb      	ldrb	r3, [r7, #7]
 800c4f2:	f023 0301 	bic.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	bf14      	ite	ne
 800c4fa:	2301      	movne	r3, #1
 800c4fc:	2300      	moveq	r3, #0
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	461a      	mov	r2, r3
 800c502:	f107 0318 	add.w	r3, r7, #24
 800c506:	4611      	mov	r1, r2
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fd fe13 	bl	800a134 <inc_lock>
 800c50e:	4602      	mov	r2, r0
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	691b      	ldr	r3, [r3, #16]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d102      	bne.n	800c522 <f_open+0x22e>
 800c51c:	2302      	movs	r3, #2
 800c51e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c522:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c526:	2b00      	cmp	r3, #0
 800c528:	f040 80a3 	bne.w	800c672 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c530:	4611      	mov	r1, r2
 800c532:	4618      	mov	r0, r3
 800c534:	f7fe fcb6 	bl	800aea4 <ld_clust>
 800c538:	4602      	mov	r2, r0
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c540:	331c      	adds	r3, #28
 800c542:	4618      	mov	r0, r3
 800c544:	f7fd fc90 	bl	8009e68 <ld_dword>
 800c548:	4602      	mov	r2, r0
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2200      	movs	r2, #0
 800c552:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c554:	697a      	ldr	r2, [r7, #20]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	88da      	ldrh	r2, [r3, #6]
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	79fa      	ldrb	r2, [r7, #7]
 800c566:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2200      	movs	r2, #0
 800c56c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3330      	adds	r3, #48	; 0x30
 800c57e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c582:	2100      	movs	r1, #0
 800c584:	4618      	mov	r0, r3
 800c586:	f7fd fcfa 	bl	8009f7e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	f003 0320 	and.w	r3, r3, #32
 800c590:	2b00      	cmp	r3, #0
 800c592:	d06e      	beq.n	800c672 <f_open+0x37e>
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d06a      	beq.n	800c672 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	68da      	ldr	r2, [r3, #12]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	895b      	ldrh	r3, [r3, #10]
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	899b      	ldrh	r3, [r3, #12]
 800c5ae:	fb02 f303 	mul.w	r3, r2, r3
 800c5b2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5c0:	e016      	b.n	800c5f0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fd ffa3 	bl	800a512 <get_fat>
 800c5cc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c5ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d802      	bhi.n	800c5da <f_open+0x2e6>
 800c5d4:	2302      	movs	r3, #2
 800c5d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c5da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5e0:	d102      	bne.n	800c5e8 <f_open+0x2f4>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c5e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d103      	bne.n	800c600 <f_open+0x30c>
 800c5f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d8e0      	bhi.n	800c5c2 <f_open+0x2ce>
				}
				fp->clust = clst;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c604:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c606:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d131      	bne.n	800c672 <f_open+0x37e>
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	899b      	ldrh	r3, [r3, #12]
 800c612:	461a      	mov	r2, r3
 800c614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c616:	fbb3 f1f2 	udiv	r1, r3, r2
 800c61a:	fb01 f202 	mul.w	r2, r1, r2
 800c61e:	1a9b      	subs	r3, r3, r2
 800c620:	2b00      	cmp	r3, #0
 800c622:	d026      	beq.n	800c672 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c628:	4618      	mov	r0, r3
 800c62a:	f7fd ff53 	bl	800a4d4 <clust2sect>
 800c62e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c632:	2b00      	cmp	r3, #0
 800c634:	d103      	bne.n	800c63e <f_open+0x34a>
						res = FR_INT_ERR;
 800c636:	2302      	movs	r3, #2
 800c638:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c63c:	e019      	b.n	800c672 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	899b      	ldrh	r3, [r3, #12]
 800c642:	461a      	mov	r2, r3
 800c644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c646:	fbb3 f2f2 	udiv	r2, r3, r2
 800c64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c64c:	441a      	add	r2, r3
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	7858      	ldrb	r0, [r3, #1]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6a1a      	ldr	r2, [r3, #32]
 800c660:	2301      	movs	r3, #1
 800c662:	f7fd fb8b 	bl	8009d7c <disk_read>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d002      	beq.n	800c672 <f_open+0x37e>
 800c66c:	2301      	movs	r3, #1
 800c66e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c672:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c676:	2b00      	cmp	r3, #0
 800c678:	d002      	beq.n	800c680 <f_open+0x38c>
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c680:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c684:	4618      	mov	r0, r3
 800c686:	3768      	adds	r7, #104	; 0x68
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b08c      	sub	sp, #48	; 0x30
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	607a      	str	r2, [r7, #4]
 800c698:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f107 0210 	add.w	r2, r7, #16
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7ff fda5 	bl	800c1fc <validate>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c6b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d107      	bne.n	800c6d0 <f_write+0x44>
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	7d5b      	ldrb	r3, [r3, #21]
 800c6c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c6c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <f_write+0x4a>
 800c6d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c6d4:	e16a      	b.n	800c9ac <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	7d1b      	ldrb	r3, [r3, #20]
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d101      	bne.n	800c6e6 <f_write+0x5a>
 800c6e2:	2307      	movs	r3, #7
 800c6e4:	e162      	b.n	800c9ac <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	699a      	ldr	r2, [r3, #24]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	441a      	add	r2, r3
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	699b      	ldr	r3, [r3, #24]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	f080 814c 	bcs.w	800c990 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	699b      	ldr	r3, [r3, #24]
 800c6fc:	43db      	mvns	r3, r3
 800c6fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c700:	e146      	b.n	800c990 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	693a      	ldr	r2, [r7, #16]
 800c708:	8992      	ldrh	r2, [r2, #12]
 800c70a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c70e:	fb01 f202 	mul.w	r2, r1, r2
 800c712:	1a9b      	subs	r3, r3, r2
 800c714:	2b00      	cmp	r3, #0
 800c716:	f040 80f1 	bne.w	800c8fc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	699b      	ldr	r3, [r3, #24]
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	8992      	ldrh	r2, [r2, #12]
 800c722:	fbb3 f3f2 	udiv	r3, r3, r2
 800c726:	693a      	ldr	r2, [r7, #16]
 800c728:	8952      	ldrh	r2, [r2, #10]
 800c72a:	3a01      	subs	r2, #1
 800c72c:	4013      	ands	r3, r2
 800c72e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d143      	bne.n	800c7be <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d10c      	bne.n	800c758 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c746:	2b00      	cmp	r3, #0
 800c748:	d11a      	bne.n	800c780 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2100      	movs	r1, #0
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fe f932 	bl	800a9b8 <create_chain>
 800c754:	62b8      	str	r0, [r7, #40]	; 0x28
 800c756:	e013      	b.n	800c780 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d007      	beq.n	800c770 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	699b      	ldr	r3, [r3, #24]
 800c764:	4619      	mov	r1, r3
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f7fe f9be 	bl	800aae8 <clmt_clust>
 800c76c:	62b8      	str	r0, [r7, #40]	; 0x28
 800c76e:	e007      	b.n	800c780 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	69db      	ldr	r3, [r3, #28]
 800c776:	4619      	mov	r1, r3
 800c778:	4610      	mov	r0, r2
 800c77a:	f7fe f91d 	bl	800a9b8 <create_chain>
 800c77e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c782:	2b00      	cmp	r3, #0
 800c784:	f000 8109 	beq.w	800c99a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d104      	bne.n	800c798 <f_write+0x10c>
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2202      	movs	r2, #2
 800c792:	755a      	strb	r2, [r3, #21]
 800c794:	2302      	movs	r3, #2
 800c796:	e109      	b.n	800c9ac <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c79e:	d104      	bne.n	800c7aa <f_write+0x11e>
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	755a      	strb	r2, [r3, #21]
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e100      	b.n	800c9ac <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d102      	bne.n	800c7be <f_write+0x132>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7bc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	7d1b      	ldrb	r3, [r3, #20]
 800c7c2:	b25b      	sxtb	r3, r3
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	da18      	bge.n	800c7fa <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	7858      	ldrb	r0, [r3, #1]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6a1a      	ldr	r2, [r3, #32]
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	f7fd faf0 	bl	8009dbc <disk_write>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d004      	beq.n	800c7ec <f_write+0x160>
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	755a      	strb	r2, [r3, #21]
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e0df      	b.n	800c9ac <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	7d1b      	ldrb	r3, [r3, #20]
 800c7f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7f4:	b2da      	uxtb	r2, r3
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c7fa:	693a      	ldr	r2, [r7, #16]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	69db      	ldr	r3, [r3, #28]
 800c800:	4619      	mov	r1, r3
 800c802:	4610      	mov	r0, r2
 800c804:	f7fd fe66 	bl	800a4d4 <clust2sect>
 800c808:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d104      	bne.n	800c81a <f_write+0x18e>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2202      	movs	r2, #2
 800c814:	755a      	strb	r2, [r3, #21]
 800c816:	2302      	movs	r3, #2
 800c818:	e0c8      	b.n	800c9ac <f_write+0x320>
			sect += csect;
 800c81a:	697a      	ldr	r2, [r7, #20]
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	4413      	add	r3, r2
 800c820:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	899b      	ldrh	r3, [r3, #12]
 800c826:	461a      	mov	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c82e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c830:	6a3b      	ldr	r3, [r7, #32]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d043      	beq.n	800c8be <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	6a3b      	ldr	r3, [r7, #32]
 800c83a:	4413      	add	r3, r2
 800c83c:	693a      	ldr	r2, [r7, #16]
 800c83e:	8952      	ldrh	r2, [r2, #10]
 800c840:	4293      	cmp	r3, r2
 800c842:	d905      	bls.n	800c850 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	895b      	ldrh	r3, [r3, #10]
 800c848:	461a      	mov	r2, r3
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	7858      	ldrb	r0, [r3, #1]
 800c854:	6a3b      	ldr	r3, [r7, #32]
 800c856:	697a      	ldr	r2, [r7, #20]
 800c858:	69f9      	ldr	r1, [r7, #28]
 800c85a:	f7fd faaf 	bl	8009dbc <disk_write>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d004      	beq.n	800c86e <f_write+0x1e2>
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2201      	movs	r2, #1
 800c868:	755a      	strb	r2, [r3, #21]
 800c86a:	2301      	movs	r3, #1
 800c86c:	e09e      	b.n	800c9ac <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6a1a      	ldr	r2, [r3, #32]
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	1ad3      	subs	r3, r2, r3
 800c876:	6a3a      	ldr	r2, [r7, #32]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d918      	bls.n	800c8ae <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	6a1a      	ldr	r2, [r3, #32]
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	693a      	ldr	r2, [r7, #16]
 800c88c:	8992      	ldrh	r2, [r2, #12]
 800c88e:	fb02 f303 	mul.w	r3, r2, r3
 800c892:	69fa      	ldr	r2, [r7, #28]
 800c894:	18d1      	adds	r1, r2, r3
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	899b      	ldrh	r3, [r3, #12]
 800c89a:	461a      	mov	r2, r3
 800c89c:	f7fd fb4e 	bl	8009f3c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	7d1b      	ldrb	r3, [r3, #20]
 800c8a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	899b      	ldrh	r3, [r3, #12]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	6a3b      	ldr	r3, [r7, #32]
 800c8b6:	fb02 f303 	mul.w	r3, r2, r3
 800c8ba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c8bc:	e04b      	b.n	800c956 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	697a      	ldr	r2, [r7, #20]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d016      	beq.n	800c8f6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	699a      	ldr	r2, [r3, #24]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d210      	bcs.n	800c8f6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	7858      	ldrb	r0, [r3, #1]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8de:	2301      	movs	r3, #1
 800c8e0:	697a      	ldr	r2, [r7, #20]
 800c8e2:	f7fd fa4b 	bl	8009d7c <disk_read>
 800c8e6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d004      	beq.n	800c8f6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	755a      	strb	r2, [r3, #21]
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e05a      	b.n	800c9ac <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	697a      	ldr	r2, [r7, #20]
 800c8fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	899b      	ldrh	r3, [r3, #12]
 800c900:	4618      	mov	r0, r3
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	8992      	ldrh	r2, [r2, #12]
 800c90a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c90e:	fb01 f202 	mul.w	r2, r1, r2
 800c912:	1a9b      	subs	r3, r3, r2
 800c914:	1ac3      	subs	r3, r0, r3
 800c916:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d901      	bls.n	800c924 <f_write+0x298>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	699b      	ldr	r3, [r3, #24]
 800c92e:	693a      	ldr	r2, [r7, #16]
 800c930:	8992      	ldrh	r2, [r2, #12]
 800c932:	fbb3 f0f2 	udiv	r0, r3, r2
 800c936:	fb00 f202 	mul.w	r2, r0, r2
 800c93a:	1a9b      	subs	r3, r3, r2
 800c93c:	440b      	add	r3, r1
 800c93e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c940:	69f9      	ldr	r1, [r7, #28]
 800c942:	4618      	mov	r0, r3
 800c944:	f7fd fafa 	bl	8009f3c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	7d1b      	ldrb	r3, [r3, #20]
 800c94c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c950:	b2da      	uxtb	r2, r3
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c956:	69fa      	ldr	r2, [r7, #28]
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95a:	4413      	add	r3, r2
 800c95c:	61fb      	str	r3, [r7, #28]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	699a      	ldr	r2, [r3, #24]
 800c962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c964:	441a      	add	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	619a      	str	r2, [r3, #24]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	68da      	ldr	r2, [r3, #12]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	429a      	cmp	r2, r3
 800c974:	bf38      	it	cc
 800c976:	461a      	movcc	r2, r3
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	60da      	str	r2, [r3, #12]
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	441a      	add	r2, r3
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	601a      	str	r2, [r3, #0]
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	f47f aeb5 	bne.w	800c702 <f_write+0x76>
 800c998:	e000      	b.n	800c99c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c99a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	7d1b      	ldrb	r3, [r3, #20]
 800c9a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9a4:	b2da      	uxtb	r2, r3
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3730      	adds	r7, #48	; 0x30
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f107 0208 	add.w	r2, r7, #8
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7ff fc19 	bl	800c1fc <validate>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d168      	bne.n	800caa6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	7d1b      	ldrb	r3, [r3, #20]
 800c9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d062      	beq.n	800caa6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	7d1b      	ldrb	r3, [r3, #20]
 800c9e4:	b25b      	sxtb	r3, r3
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	da15      	bge.n	800ca16 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	7858      	ldrb	r0, [r3, #1]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6a1a      	ldr	r2, [r3, #32]
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	f7fd f9df 	bl	8009dbc <disk_write>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <f_sync+0x54>
 800ca04:	2301      	movs	r3, #1
 800ca06:	e04f      	b.n	800caa8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	7d1b      	ldrb	r3, [r3, #20]
 800ca0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ca16:	f7fd f913 	bl	8009c40 <get_fattime>
 800ca1a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca22:	4619      	mov	r1, r3
 800ca24:	4610      	mov	r0, r2
 800ca26:	f7fd fcb7 	bl	800a398 <move_window>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d138      	bne.n	800caa6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca38:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	330b      	adds	r3, #11
 800ca3e:	781a      	ldrb	r2, [r3, #0]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	330b      	adds	r3, #11
 800ca44:	f042 0220 	orr.w	r2, r2, #32
 800ca48:	b2d2      	uxtb	r2, r2
 800ca4a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6818      	ldr	r0, [r3, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	461a      	mov	r2, r3
 800ca56:	68f9      	ldr	r1, [r7, #12]
 800ca58:	f7fe fa43 	bl	800aee2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f103 021c 	add.w	r2, r3, #28
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	68db      	ldr	r3, [r3, #12]
 800ca66:	4619      	mov	r1, r3
 800ca68:	4610      	mov	r0, r2
 800ca6a:	f7fd fa3b 	bl	8009ee4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	3316      	adds	r3, #22
 800ca72:	6939      	ldr	r1, [r7, #16]
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7fd fa35 	bl	8009ee4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3312      	adds	r3, #18
 800ca7e:	2100      	movs	r1, #0
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fd fa14 	bl	8009eae <st_word>
					fs->wflag = 1;
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7fd fcb0 	bl	800a3f4 <sync_fs>
 800ca94:	4603      	mov	r3, r0
 800ca96:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	7d1b      	ldrb	r3, [r3, #20]
 800ca9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800caa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3718      	adds	r7, #24
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7ff ff7b 	bl	800c9b4 <f_sync>
 800cabe:	4603      	mov	r3, r0
 800cac0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cac2:	7bfb      	ldrb	r3, [r7, #15]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d118      	bne.n	800cafa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f107 0208 	add.w	r2, r7, #8
 800cace:	4611      	mov	r1, r2
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7ff fb93 	bl	800c1fc <validate>
 800cad6:	4603      	mov	r3, r0
 800cad8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cada:	7bfb      	ldrb	r3, [r7, #15]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d10c      	bne.n	800cafa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	691b      	ldr	r3, [r3, #16]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fd fbb3 	bl	800a250 <dec_lock>
 800caea:	4603      	mov	r3, r0
 800caec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800caee:	7bfb      	ldrb	r3, [r7, #15]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d102      	bne.n	800cafa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b090      	sub	sp, #64	; 0x40
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800cb0e:	f107 0108 	add.w	r1, r7, #8
 800cb12:	1d3b      	adds	r3, r7, #4
 800cb14:	2200      	movs	r2, #0
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7ff f8ea 	bl	800bcf0 <find_volume>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800cb22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d11f      	bne.n	800cb6a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	f107 0308 	add.w	r3, r7, #8
 800cb30:	4611      	mov	r1, r2
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fe ffcc 	bl	800bad0 <follow_path>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800cb3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d111      	bne.n	800cb6a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800cb46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb4a:	b25b      	sxtb	r3, r3
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	da03      	bge.n	800cb58 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800cb50:	2306      	movs	r3, #6
 800cb52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cb56:	e008      	b.n	800cb6a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d005      	beq.n	800cb6a <f_stat+0x66>
 800cb5e:	f107 0308 	add.w	r3, r7, #8
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7fe fd1d 	bl	800b5a4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800cb6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3740      	adds	r7, #64	; 0x40
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b092      	sub	sp, #72	; 0x48
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	60f8      	str	r0, [r7, #12]
 800cb7e:	60b9      	str	r1, [r7, #8]
 800cb80:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800cb82:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800cb86:	f107 030c 	add.w	r3, r7, #12
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7ff f8af 	bl	800bcf0 <find_volume>
 800cb92:	4603      	mov	r3, r0
 800cb94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800cb98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f040 8099 	bne.w	800ccd4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800cba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbaa:	699a      	ldr	r2, [r3, #24]
 800cbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbae:	69db      	ldr	r3, [r3, #28]
 800cbb0:	3b02      	subs	r3, #2
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d804      	bhi.n	800cbc0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800cbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb8:	699a      	ldr	r2, [r3, #24]
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	601a      	str	r2, [r3, #0]
 800cbbe:	e089      	b.n	800ccd4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800cbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d128      	bne.n	800cc1e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800cbcc:	2302      	movs	r3, #2
 800cbce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800cbd4:	f107 0314 	add.w	r3, r7, #20
 800cbd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fd fc99 	bl	800a512 <get_fat>
 800cbe0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800cbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbe8:	d103      	bne.n	800cbf2 <f_getfree+0x7c>
 800cbea:	2301      	movs	r3, #1
 800cbec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cbf0:	e063      	b.n	800ccba <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800cbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d103      	bne.n	800cc00 <f_getfree+0x8a>
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cbfe:	e05c      	b.n	800ccba <f_getfree+0x144>
					if (stat == 0) nfree++;
 800cc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d102      	bne.n	800cc0c <f_getfree+0x96>
 800cc06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc08:	3301      	adds	r3, #1
 800cc0a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800cc0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc0e:	3301      	adds	r3, #1
 800cc10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc14:	69db      	ldr	r3, [r3, #28]
 800cc16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d3db      	bcc.n	800cbd4 <f_getfree+0x5e>
 800cc1c:	e04d      	b.n	800ccba <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800cc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc20:	69db      	ldr	r3, [r3, #28]
 800cc22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc28:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	637b      	str	r3, [r7, #52]	; 0x34
 800cc2e:	2300      	movs	r3, #0
 800cc30:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800cc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d113      	bne.n	800cc60 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800cc38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	1c5a      	adds	r2, r3, #1
 800cc3e:	63ba      	str	r2, [r7, #56]	; 0x38
 800cc40:	4619      	mov	r1, r3
 800cc42:	f7fd fba9 	bl	800a398 <move_window>
 800cc46:	4603      	mov	r3, r0
 800cc48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800cc4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d131      	bne.n	800ccb8 <f_getfree+0x142>
							p = fs->win;
 800cc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc56:	3338      	adds	r3, #56	; 0x38
 800cc58:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800cc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5c:	899b      	ldrh	r3, [r3, #12]
 800cc5e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800cc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d10f      	bne.n	800cc88 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800cc68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc6a:	f7fd f8e5 	bl	8009e38 <ld_word>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d102      	bne.n	800cc7a <f_getfree+0x104>
 800cc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc76:	3301      	adds	r3, #1
 800cc78:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7c:	3302      	adds	r3, #2
 800cc7e:	633b      	str	r3, [r7, #48]	; 0x30
 800cc80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc82:	3b02      	subs	r3, #2
 800cc84:	637b      	str	r3, [r7, #52]	; 0x34
 800cc86:	e010      	b.n	800ccaa <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800cc88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc8a:	f7fd f8ed 	bl	8009e68 <ld_dword>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d102      	bne.n	800cc9e <f_getfree+0x128>
 800cc98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	3304      	adds	r3, #4
 800cca2:	633b      	str	r3, [r7, #48]	; 0x30
 800cca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca6:	3b04      	subs	r3, #4
 800cca8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800ccaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccac:	3b01      	subs	r3, #1
 800ccae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1bd      	bne.n	800cc32 <f_getfree+0xbc>
 800ccb6:	e000      	b.n	800ccba <f_getfree+0x144>
							if (res != FR_OK) break;
 800ccb8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ccbe:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ccc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ccc4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ccc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc8:	791a      	ldrb	r2, [r3, #4]
 800ccca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cccc:	f042 0201 	orr.w	r2, r2, #1
 800ccd0:	b2d2      	uxtb	r2, r2
 800ccd2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ccd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3748      	adds	r7, #72	; 0x48
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b087      	sub	sp, #28
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	4613      	mov	r3, r2
 800ccec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ccf6:	4b1f      	ldr	r3, [pc, #124]	; (800cd74 <FATFS_LinkDriverEx+0x94>)
 800ccf8:	7a5b      	ldrb	r3, [r3, #9]
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d131      	bne.n	800cd64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cd00:	4b1c      	ldr	r3, [pc, #112]	; (800cd74 <FATFS_LinkDriverEx+0x94>)
 800cd02:	7a5b      	ldrb	r3, [r3, #9]
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	461a      	mov	r2, r3
 800cd08:	4b1a      	ldr	r3, [pc, #104]	; (800cd74 <FATFS_LinkDriverEx+0x94>)
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cd0e:	4b19      	ldr	r3, [pc, #100]	; (800cd74 <FATFS_LinkDriverEx+0x94>)
 800cd10:	7a5b      	ldrb	r3, [r3, #9]
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	4a17      	ldr	r2, [pc, #92]	; (800cd74 <FATFS_LinkDriverEx+0x94>)
 800cd16:	009b      	lsls	r3, r3, #2
 800cd18:	4413      	add	r3, r2
 800cd1a:	68fa      	ldr	r2, [r7, #12]
 800cd1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cd1e:	4b15      	ldr	r3, [pc, #84]	; (800cd74 <FATFS_LinkDriverEx+0x94>)
 800cd20:	7a5b      	ldrb	r3, [r3, #9]
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	461a      	mov	r2, r3
 800cd26:	4b13      	ldr	r3, [pc, #76]	; (800cd74 <FATFS_LinkDriverEx+0x94>)
 800cd28:	4413      	add	r3, r2
 800cd2a:	79fa      	ldrb	r2, [r7, #7]
 800cd2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cd2e:	4b11      	ldr	r3, [pc, #68]	; (800cd74 <FATFS_LinkDriverEx+0x94>)
 800cd30:	7a5b      	ldrb	r3, [r3, #9]
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	1c5a      	adds	r2, r3, #1
 800cd36:	b2d1      	uxtb	r1, r2
 800cd38:	4a0e      	ldr	r2, [pc, #56]	; (800cd74 <FATFS_LinkDriverEx+0x94>)
 800cd3a:	7251      	strb	r1, [r2, #9]
 800cd3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cd3e:	7dbb      	ldrb	r3, [r7, #22]
 800cd40:	3330      	adds	r3, #48	; 0x30
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	223a      	movs	r2, #58	; 0x3a
 800cd4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	3302      	adds	r3, #2
 800cd54:	222f      	movs	r2, #47	; 0x2f
 800cd56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	3303      	adds	r3, #3
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cd60:	2300      	movs	r3, #0
 800cd62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cd64:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	371c      	adds	r7, #28
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	20003f1c 	.word	0x20003f1c

0800cd78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cd82:	2200      	movs	r2, #0
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff ffaa 	bl	800cce0 <FATFS_LinkDriverEx>
 800cd8c:	4603      	mov	r3, r0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
	...

0800cd98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	6039      	str	r1, [r7, #0]
 800cda2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cda4:	88fb      	ldrh	r3, [r7, #6]
 800cda6:	2b7f      	cmp	r3, #127	; 0x7f
 800cda8:	d802      	bhi.n	800cdb0 <ff_convert+0x18>
		c = chr;
 800cdaa:	88fb      	ldrh	r3, [r7, #6]
 800cdac:	81fb      	strh	r3, [r7, #14]
 800cdae:	e025      	b.n	800cdfc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00b      	beq.n	800cdce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cdb6:	88fb      	ldrh	r3, [r7, #6]
 800cdb8:	2bff      	cmp	r3, #255	; 0xff
 800cdba:	d805      	bhi.n	800cdc8 <ff_convert+0x30>
 800cdbc:	88fb      	ldrh	r3, [r7, #6]
 800cdbe:	3b80      	subs	r3, #128	; 0x80
 800cdc0:	4a12      	ldr	r2, [pc, #72]	; (800ce0c <ff_convert+0x74>)
 800cdc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdc6:	e000      	b.n	800cdca <ff_convert+0x32>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	81fb      	strh	r3, [r7, #14]
 800cdcc:	e016      	b.n	800cdfc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cdce:	2300      	movs	r3, #0
 800cdd0:	81fb      	strh	r3, [r7, #14]
 800cdd2:	e009      	b.n	800cde8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cdd4:	89fb      	ldrh	r3, [r7, #14]
 800cdd6:	4a0d      	ldr	r2, [pc, #52]	; (800ce0c <ff_convert+0x74>)
 800cdd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cddc:	88fa      	ldrh	r2, [r7, #6]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d006      	beq.n	800cdf0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cde2:	89fb      	ldrh	r3, [r7, #14]
 800cde4:	3301      	adds	r3, #1
 800cde6:	81fb      	strh	r3, [r7, #14]
 800cde8:	89fb      	ldrh	r3, [r7, #14]
 800cdea:	2b7f      	cmp	r3, #127	; 0x7f
 800cdec:	d9f2      	bls.n	800cdd4 <ff_convert+0x3c>
 800cdee:	e000      	b.n	800cdf2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cdf0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cdf2:	89fb      	ldrh	r3, [r7, #14]
 800cdf4:	3380      	adds	r3, #128	; 0x80
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cdfc:	89fb      	ldrh	r3, [r7, #14]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3714      	adds	r7, #20
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	0801a9e0 	.word	0x0801a9e0

0800ce10 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b087      	sub	sp, #28
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	4603      	mov	r3, r0
 800ce18:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ce1a:	88fb      	ldrh	r3, [r7, #6]
 800ce1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce20:	d201      	bcs.n	800ce26 <ff_wtoupper+0x16>
 800ce22:	4b3e      	ldr	r3, [pc, #248]	; (800cf1c <ff_wtoupper+0x10c>)
 800ce24:	e000      	b.n	800ce28 <ff_wtoupper+0x18>
 800ce26:	4b3e      	ldr	r3, [pc, #248]	; (800cf20 <ff_wtoupper+0x110>)
 800ce28:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	1c9a      	adds	r2, r3, #2
 800ce2e:	617a      	str	r2, [r7, #20]
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ce34:	8a7b      	ldrh	r3, [r7, #18]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d068      	beq.n	800cf0c <ff_wtoupper+0xfc>
 800ce3a:	88fa      	ldrh	r2, [r7, #6]
 800ce3c:	8a7b      	ldrh	r3, [r7, #18]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d364      	bcc.n	800cf0c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	1c9a      	adds	r2, r3, #2
 800ce46:	617a      	str	r2, [r7, #20]
 800ce48:	881b      	ldrh	r3, [r3, #0]
 800ce4a:	823b      	strh	r3, [r7, #16]
 800ce4c:	8a3b      	ldrh	r3, [r7, #16]
 800ce4e:	0a1b      	lsrs	r3, r3, #8
 800ce50:	81fb      	strh	r3, [r7, #14]
 800ce52:	8a3b      	ldrh	r3, [r7, #16]
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ce58:	88fa      	ldrh	r2, [r7, #6]
 800ce5a:	8a79      	ldrh	r1, [r7, #18]
 800ce5c:	8a3b      	ldrh	r3, [r7, #16]
 800ce5e:	440b      	add	r3, r1
 800ce60:	429a      	cmp	r2, r3
 800ce62:	da49      	bge.n	800cef8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ce64:	89fb      	ldrh	r3, [r7, #14]
 800ce66:	2b08      	cmp	r3, #8
 800ce68:	d84f      	bhi.n	800cf0a <ff_wtoupper+0xfa>
 800ce6a:	a201      	add	r2, pc, #4	; (adr r2, 800ce70 <ff_wtoupper+0x60>)
 800ce6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce70:	0800ce95 	.word	0x0800ce95
 800ce74:	0800cea7 	.word	0x0800cea7
 800ce78:	0800cebd 	.word	0x0800cebd
 800ce7c:	0800cec5 	.word	0x0800cec5
 800ce80:	0800cecd 	.word	0x0800cecd
 800ce84:	0800ced5 	.word	0x0800ced5
 800ce88:	0800cedd 	.word	0x0800cedd
 800ce8c:	0800cee5 	.word	0x0800cee5
 800ce90:	0800ceed 	.word	0x0800ceed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ce94:	88fa      	ldrh	r2, [r7, #6]
 800ce96:	8a7b      	ldrh	r3, [r7, #18]
 800ce98:	1ad3      	subs	r3, r2, r3
 800ce9a:	005b      	lsls	r3, r3, #1
 800ce9c:	697a      	ldr	r2, [r7, #20]
 800ce9e:	4413      	add	r3, r2
 800cea0:	881b      	ldrh	r3, [r3, #0]
 800cea2:	80fb      	strh	r3, [r7, #6]
 800cea4:	e027      	b.n	800cef6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cea6:	88fa      	ldrh	r2, [r7, #6]
 800cea8:	8a7b      	ldrh	r3, [r7, #18]
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	f003 0301 	and.w	r3, r3, #1
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	88fa      	ldrh	r2, [r7, #6]
 800ceb6:	1ad3      	subs	r3, r2, r3
 800ceb8:	80fb      	strh	r3, [r7, #6]
 800ceba:	e01c      	b.n	800cef6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cebc:	88fb      	ldrh	r3, [r7, #6]
 800cebe:	3b10      	subs	r3, #16
 800cec0:	80fb      	strh	r3, [r7, #6]
 800cec2:	e018      	b.n	800cef6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cec4:	88fb      	ldrh	r3, [r7, #6]
 800cec6:	3b20      	subs	r3, #32
 800cec8:	80fb      	strh	r3, [r7, #6]
 800ceca:	e014      	b.n	800cef6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cecc:	88fb      	ldrh	r3, [r7, #6]
 800cece:	3b30      	subs	r3, #48	; 0x30
 800ced0:	80fb      	strh	r3, [r7, #6]
 800ced2:	e010      	b.n	800cef6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ced4:	88fb      	ldrh	r3, [r7, #6]
 800ced6:	3b1a      	subs	r3, #26
 800ced8:	80fb      	strh	r3, [r7, #6]
 800ceda:	e00c      	b.n	800cef6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cedc:	88fb      	ldrh	r3, [r7, #6]
 800cede:	3308      	adds	r3, #8
 800cee0:	80fb      	strh	r3, [r7, #6]
 800cee2:	e008      	b.n	800cef6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cee4:	88fb      	ldrh	r3, [r7, #6]
 800cee6:	3b50      	subs	r3, #80	; 0x50
 800cee8:	80fb      	strh	r3, [r7, #6]
 800ceea:	e004      	b.n	800cef6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ceec:	88fb      	ldrh	r3, [r7, #6]
 800ceee:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800cef2:	80fb      	strh	r3, [r7, #6]
 800cef4:	bf00      	nop
			}
			break;
 800cef6:	e008      	b.n	800cf0a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cef8:	89fb      	ldrh	r3, [r7, #14]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d195      	bne.n	800ce2a <ff_wtoupper+0x1a>
 800cefe:	8a3b      	ldrh	r3, [r7, #16]
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	697a      	ldr	r2, [r7, #20]
 800cf04:	4413      	add	r3, r2
 800cf06:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800cf08:	e78f      	b.n	800ce2a <ff_wtoupper+0x1a>
			break;
 800cf0a:	bf00      	nop
	}

	return chr;
 800cf0c:	88fb      	ldrh	r3, [r7, #6]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	371c      	adds	r7, #28
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	0801aae0 	.word	0x0801aae0
 800cf20:	0801acd4 	.word	0x0801acd4

0800cf24 <DataHist_parameters>:
 800cf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf28:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800cf2a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800cf2e:	7020      	strb	r0, [r4, #0]
 800cf30:	6808      	ldr	r0, [r1, #0]
 800cf32:	6060      	str	r0, [r4, #4]
 800cf34:	6848      	ldr	r0, [r1, #4]
 800cf36:	60a0      	str	r0, [r4, #8]
 800cf38:	6888      	ldr	r0, [r1, #8]
 800cf3a:	60e0      	str	r0, [r4, #12]
 800cf3c:	68c8      	ldr	r0, [r1, #12]
 800cf3e:	6120      	str	r0, [r4, #16]
 800cf40:	6908      	ldr	r0, [r1, #16]
 800cf42:	6160      	str	r0, [r4, #20]
 800cf44:	6948      	ldr	r0, [r1, #20]
 800cf46:	61a0      	str	r0, [r4, #24]
 800cf48:	6988      	ldr	r0, [r1, #24]
 800cf4a:	61e0      	str	r0, [r4, #28]
 800cf4c:	69c8      	ldr	r0, [r1, #28]
 800cf4e:	6220      	str	r0, [r4, #32]
 800cf50:	6a09      	ldr	r1, [r1, #32]
 800cf52:	6261      	str	r1, [r4, #36]	; 0x24
 800cf54:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 800cf58:	8811      	ldrh	r1, [r2, #0]
 800cf5a:	edd2 7a01 	vldr	s15, [r2, #4]
 800cf5e:	8521      	strh	r1, [r4, #40]	; 0x28
 800cf60:	f102 0e80 	add.w	lr, r2, #128	; 0x80
 800cf64:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800cf68:	2700      	movs	r7, #0
 800cf6a:	f1ae 0278 	sub.w	r2, lr, #120	; 0x78
 800cf6e:	4641      	mov	r1, r8
 800cf70:	f852 0b04 	ldr.w	r0, [r2], #4
 800cf74:	f841 0b04 	str.w	r0, [r1], #4
 800cf78:	4572      	cmp	r2, lr
 800cf7a:	d1f9      	bne.n	800cf70 <DataHist_parameters+0x4c>
 800cf7c:	371e      	adds	r7, #30
 800cf7e:	2f5a      	cmp	r7, #90	; 0x5a
 800cf80:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800cf84:	f102 0e78 	add.w	lr, r2, #120	; 0x78
 800cf88:	d1ef      	bne.n	800cf6a <DataHist_parameters+0x46>
 800cf8a:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
 800cf8e:	881a      	ldrh	r2, [r3, #0]
 800cf90:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800cf94:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800cf98:	f103 0e80 	add.w	lr, r3, #128	; 0x80
 800cf9c:	f504 77d0 	add.w	r7, r4, #416	; 0x1a0
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	f1ae 0378 	sub.w	r3, lr, #120	; 0x78
 800cfa6:	463a      	mov	r2, r7
 800cfa8:	f853 1b04 	ldr.w	r1, [r3], #4
 800cfac:	f842 1b04 	str.w	r1, [r2], #4
 800cfb0:	4573      	cmp	r3, lr
 800cfb2:	d1f9      	bne.n	800cfa8 <DataHist_parameters+0x84>
 800cfb4:	301e      	adds	r0, #30
 800cfb6:	285a      	cmp	r0, #90	; 0x5a
 800cfb8:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800cfbc:	f103 0e78 	add.w	lr, r3, #120	; 0x78
 800cfc0:	d1ef      	bne.n	800cfa2 <DataHist_parameters+0x7e>
 800cfc2:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800cfc6:	f8bc 3000 	ldrh.w	r3, [ip]
 800cfca:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800cfce:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800cfd2:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800cfd6:	f504 7e44 	add.w	lr, r4, #784	; 0x310
 800cfda:	2000      	movs	r0, #0
 800cfdc:	f1ac 0378 	sub.w	r3, ip, #120	; 0x78
 800cfe0:	4672      	mov	r2, lr
 800cfe2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cfe6:	f842 1b04 	str.w	r1, [r2], #4
 800cfea:	4563      	cmp	r3, ip
 800cfec:	d1f9      	bne.n	800cfe2 <DataHist_parameters+0xbe>
 800cfee:	301e      	adds	r0, #30
 800cff0:	285a      	cmp	r0, #90	; 0x5a
 800cff2:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800cff6:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 800cffa:	d1ef      	bne.n	800cfdc <DataHist_parameters+0xb8>
 800cffc:	f8c4 730c 	str.w	r7, [r4, #780]	; 0x30c
 800d000:	8833      	ldrh	r3, [r6, #0]
 800d002:	6877      	ldr	r7, [r6, #4]
 800d004:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800d008:	f106 0080 	add.w	r0, r6, #128	; 0x80
 800d00c:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 800d010:	2600      	movs	r6, #0
 800d012:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800d016:	4662      	mov	r2, ip
 800d018:	f853 1b04 	ldr.w	r1, [r3], #4
 800d01c:	f842 1b04 	str.w	r1, [r2], #4
 800d020:	4283      	cmp	r3, r0
 800d022:	d1f9      	bne.n	800d018 <DataHist_parameters+0xf4>
 800d024:	361e      	adds	r6, #30
 800d026:	2e5a      	cmp	r6, #90	; 0x5a
 800d028:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800d02c:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d030:	d1ef      	bne.n	800d012 <DataHist_parameters+0xee>
 800d032:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800d036:	69aa      	ldr	r2, [r5, #24]
 800d038:	605f      	str	r7, [r3, #4]
 800d03a:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800d03e:	7829      	ldrb	r1, [r5, #0]
 800d040:	f884 15e8 	strb.w	r1, [r4, #1512]	; 0x5e8
 800d044:	619a      	str	r2, [r3, #24]
 800d046:	6869      	ldr	r1, [r5, #4]
 800d048:	6059      	str	r1, [r3, #4]
 800d04a:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800d04e:	68a9      	ldr	r1, [r5, #8]
 800d050:	6011      	str	r1, [r2, #0]
 800d052:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800d056:	68e9      	ldr	r1, [r5, #12]
 800d058:	6011      	str	r1, [r2, #0]
 800d05a:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800d05e:	6929      	ldr	r1, [r5, #16]
 800d060:	6011      	str	r1, [r2, #0]
 800d062:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800d066:	6969      	ldr	r1, [r5, #20]
 800d068:	6011      	str	r1, [r2, #0]
 800d06a:	69e9      	ldr	r1, [r5, #28]
 800d06c:	61d9      	str	r1, [r3, #28]
 800d06e:	f504 62c1 	add.w	r2, r4, #1544	; 0x608
 800d072:	6a2b      	ldr	r3, [r5, #32]
 800d074:	6013      	str	r3, [r2, #0]
 800d076:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800d07a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800d07c:	601a      	str	r2, [r3, #0]
 800d07e:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800d082:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d084:	601a      	str	r2, [r3, #0]
 800d086:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800d08a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d092:	bf00      	nop

0800d094 <rotVect>:
 800d094:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800d098:	ed92 7a01 	vldr	s14, [r2, #4]
 800d09c:	ed92 6a00 	vldr	s12, [r2]
 800d0a0:	ee07 3a90 	vmov	s15, r3
 800d0a4:	f991 3000 	ldrsb.w	r3, [r1]
 800d0a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0ac:	ee06 3a90 	vmov	s13, r3
 800d0b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0b4:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800d0b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d0bc:	ee07 3a10 	vmov	s14, r3
 800d0c0:	eee6 7a86 	vfma.f32	s15, s13, s12
 800d0c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d0c8:	edd2 6a02 	vldr	s13, [r2, #8]
 800d0cc:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d0d0:	edc0 7a00 	vstr	s15, [r0]
 800d0d4:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800d0d8:	ed92 7a01 	vldr	s14, [r2, #4]
 800d0dc:	ed92 6a00 	vldr	s12, [r2]
 800d0e0:	ee07 3a90 	vmov	s15, r3
 800d0e4:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800d0e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0ec:	ee06 3a90 	vmov	s13, r3
 800d0f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0f4:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800d0f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d0fc:	ee07 3a10 	vmov	s14, r3
 800d100:	eee6 7a86 	vfma.f32	s15, s13, s12
 800d104:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d108:	edd2 6a02 	vldr	s13, [r2, #8]
 800d10c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d110:	edc0 7a01 	vstr	s15, [r0, #4]
 800d114:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800d118:	ed92 7a01 	vldr	s14, [r2, #4]
 800d11c:	ed92 6a00 	vldr	s12, [r2]
 800d120:	ee07 3a90 	vmov	s15, r3
 800d124:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800d128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d12c:	ee06 3a90 	vmov	s13, r3
 800d130:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d134:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d138:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800d13c:	eee6 7a86 	vfma.f32	s15, s13, s12
 800d140:	ee07 3a10 	vmov	s14, r3
 800d144:	edd2 6a02 	vldr	s13, [r2, #8]
 800d148:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d14c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d150:	edc0 7a02 	vstr	s15, [r0, #8]
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop

0800d158 <findAxis>:
 800d158:	f990 3000 	ldrsb.w	r3, [r0]
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d027      	beq.n	800d1b0 <findAxis+0x58>
 800d160:	3301      	adds	r3, #1
 800d162:	d00e      	beq.n	800d182 <findAxis+0x2a>
 800d164:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d053      	beq.n	800d214 <findAxis+0xbc>
 800d16c:	3301      	adds	r3, #1
 800d16e:	d048      	beq.n	800d202 <findAxis+0xaa>
 800d170:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d053      	beq.n	800d220 <findAxis+0xc8>
 800d178:	3301      	adds	r3, #1
 800d17a:	d104      	bne.n	800d186 <findAxis+0x2e>
 800d17c:	2364      	movs	r3, #100	; 0x64
 800d17e:	700b      	strb	r3, [r1, #0]
 800d180:	e001      	b.n	800d186 <findAxis+0x2e>
 800d182:	2377      	movs	r3, #119	; 0x77
 800d184:	700b      	strb	r3, [r1, #0]
 800d186:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d016      	beq.n	800d1bc <findAxis+0x64>
 800d18e:	3301      	adds	r3, #1
 800d190:	d02e      	beq.n	800d1f0 <findAxis+0x98>
 800d192:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d039      	beq.n	800d20e <findAxis+0xb6>
 800d19a:	3301      	adds	r3, #1
 800d19c:	d034      	beq.n	800d208 <findAxis+0xb0>
 800d19e:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d03f      	beq.n	800d226 <findAxis+0xce>
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	d10a      	bne.n	800d1c0 <findAxis+0x68>
 800d1aa:	2364      	movs	r3, #100	; 0x64
 800d1ac:	704b      	strb	r3, [r1, #1]
 800d1ae:	e007      	b.n	800d1c0 <findAxis+0x68>
 800d1b0:	2365      	movs	r3, #101	; 0x65
 800d1b2:	700b      	strb	r3, [r1, #0]
 800d1b4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d1e8      	bne.n	800d18e <findAxis+0x36>
 800d1bc:	2365      	movs	r3, #101	; 0x65
 800d1be:	704b      	strb	r3, [r1, #1]
 800d1c0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d010      	beq.n	800d1ea <findAxis+0x92>
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	d014      	beq.n	800d1f6 <findAxis+0x9e>
 800d1cc:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d022      	beq.n	800d21a <findAxis+0xc2>
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	d011      	beq.n	800d1fc <findAxis+0xa4>
 800d1d8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d025      	beq.n	800d22c <findAxis+0xd4>
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	bf04      	itt	eq
 800d1e4:	2364      	moveq	r3, #100	; 0x64
 800d1e6:	708b      	strbeq	r3, [r1, #2]
 800d1e8:	4770      	bx	lr
 800d1ea:	2365      	movs	r3, #101	; 0x65
 800d1ec:	708b      	strb	r3, [r1, #2]
 800d1ee:	4770      	bx	lr
 800d1f0:	2377      	movs	r3, #119	; 0x77
 800d1f2:	704b      	strb	r3, [r1, #1]
 800d1f4:	e7e4      	b.n	800d1c0 <findAxis+0x68>
 800d1f6:	2377      	movs	r3, #119	; 0x77
 800d1f8:	708b      	strb	r3, [r1, #2]
 800d1fa:	4770      	bx	lr
 800d1fc:	2373      	movs	r3, #115	; 0x73
 800d1fe:	708b      	strb	r3, [r1, #2]
 800d200:	4770      	bx	lr
 800d202:	2373      	movs	r3, #115	; 0x73
 800d204:	700b      	strb	r3, [r1, #0]
 800d206:	e7be      	b.n	800d186 <findAxis+0x2e>
 800d208:	2373      	movs	r3, #115	; 0x73
 800d20a:	704b      	strb	r3, [r1, #1]
 800d20c:	e7d8      	b.n	800d1c0 <findAxis+0x68>
 800d20e:	236e      	movs	r3, #110	; 0x6e
 800d210:	704b      	strb	r3, [r1, #1]
 800d212:	e7d5      	b.n	800d1c0 <findAxis+0x68>
 800d214:	236e      	movs	r3, #110	; 0x6e
 800d216:	700b      	strb	r3, [r1, #0]
 800d218:	e7b5      	b.n	800d186 <findAxis+0x2e>
 800d21a:	236e      	movs	r3, #110	; 0x6e
 800d21c:	708b      	strb	r3, [r1, #2]
 800d21e:	4770      	bx	lr
 800d220:	2375      	movs	r3, #117	; 0x75
 800d222:	700b      	strb	r3, [r1, #0]
 800d224:	e7af      	b.n	800d186 <findAxis+0x2e>
 800d226:	2375      	movs	r3, #117	; 0x75
 800d228:	704b      	strb	r3, [r1, #1]
 800d22a:	e7c9      	b.n	800d1c0 <findAxis+0x68>
 800d22c:	2375      	movs	r3, #117	; 0x75
 800d22e:	708b      	strb	r3, [r1, #2]
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	0000      	movs	r0, r0
	...

0800d238 <findDirection>:
 800d238:	b5d0      	push	{r4, r6, r7, lr}
 800d23a:	ed2d 8b04 	vpush	{d8-d9}
 800d23e:	eef0 8ac0 	vabs.f32	s17, s0
 800d242:	eeb0 8ae0 	vabs.f32	s16, s1
 800d246:	eef4 8ac8 	vcmpe.f32	s17, s16
 800d24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d24e:	4604      	mov	r4, r0
 800d250:	eeb0 9ac1 	vabs.f32	s18, s2
 800d254:	dd36      	ble.n	800d2c4 <findDirection+0x8c>
 800d256:	eef4 8ac9 	vcmpe.f32	s17, s18
 800d25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d25e:	dd31      	ble.n	800d2c4 <findDirection+0x8c>
 800d260:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d268:	ee18 0a90 	vmov	r0, s17
 800d26c:	f340 8094 	ble.w	800d398 <findDirection+0x160>
 800d270:	f7f3 f96a 	bl	8000548 <__aeabi_f2d>
 800d274:	4606      	mov	r6, r0
 800d276:	ee18 0a10 	vmov	r0, s16
 800d27a:	460f      	mov	r7, r1
 800d27c:	f7f3 f964 	bl	8000548 <__aeabi_f2d>
 800d280:	a387      	add	r3, pc, #540	; (adr r3, 800d4a0 <findDirection+0x268>)
 800d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d286:	f7f3 f9b7 	bl	80005f8 <__aeabi_dmul>
 800d28a:	4602      	mov	r2, r0
 800d28c:	460b      	mov	r3, r1
 800d28e:	4630      	mov	r0, r6
 800d290:	4639      	mov	r1, r7
 800d292:	f7f3 fc41 	bl	8000b18 <__aeabi_dcmpgt>
 800d296:	b188      	cbz	r0, 800d2bc <findDirection+0x84>
 800d298:	ee19 0a10 	vmov	r0, s18
 800d29c:	f7f3 f954 	bl	8000548 <__aeabi_f2d>
 800d2a0:	a37f      	add	r3, pc, #508	; (adr r3, 800d4a0 <findDirection+0x268>)
 800d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a6:	f7f3 f9a7 	bl	80005f8 <__aeabi_dmul>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	4639      	mov	r1, r7
 800d2b2:	f7f3 fc31 	bl	8000b18 <__aeabi_dcmpgt>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	bf18      	it	ne
 800d2ba:	2404      	movne	r4, #4
 800d2bc:	ecbd 8b04 	vpop	{d8-d9}
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	bdd0      	pop	{r4, r6, r7, pc}
 800d2c4:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800d2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2cc:	dd32      	ble.n	800d334 <findDirection+0xfc>
 800d2ce:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800d2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2d6:	ee18 0a10 	vmov	r0, s16
 800d2da:	f340 8086 	ble.w	800d3ea <findDirection+0x1b2>
 800d2de:	f7f3 f933 	bl	8000548 <__aeabi_f2d>
 800d2e2:	4606      	mov	r6, r0
 800d2e4:	ee18 0a90 	vmov	r0, s17
 800d2e8:	460f      	mov	r7, r1
 800d2ea:	f7f3 f92d 	bl	8000548 <__aeabi_f2d>
 800d2ee:	a36c      	add	r3, pc, #432	; (adr r3, 800d4a0 <findDirection+0x268>)
 800d2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f4:	f7f3 f980 	bl	80005f8 <__aeabi_dmul>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	4639      	mov	r1, r7
 800d300:	f7f3 fc0a 	bl	8000b18 <__aeabi_dcmpgt>
 800d304:	2800      	cmp	r0, #0
 800d306:	d0d9      	beq.n	800d2bc <findDirection+0x84>
 800d308:	ee19 0a10 	vmov	r0, s18
 800d30c:	f7f3 f91c 	bl	8000548 <__aeabi_f2d>
 800d310:	a363      	add	r3, pc, #396	; (adr r3, 800d4a0 <findDirection+0x268>)
 800d312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d316:	f7f3 f96f 	bl	80005f8 <__aeabi_dmul>
 800d31a:	4602      	mov	r2, r0
 800d31c:	460b      	mov	r3, r1
 800d31e:	4630      	mov	r0, r6
 800d320:	4639      	mov	r1, r7
 800d322:	f7f3 fbf9 	bl	8000b18 <__aeabi_dcmpgt>
 800d326:	ecbd 8b04 	vpop	{d8-d9}
 800d32a:	2800      	cmp	r0, #0
 800d32c:	bf18      	it	ne
 800d32e:	2401      	movne	r4, #1
 800d330:	4620      	mov	r0, r4
 800d332:	bdd0      	pop	{r4, r6, r7, pc}
 800d334:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800d338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d33c:	ee19 0a10 	vmov	r0, s18
 800d340:	dd7f      	ble.n	800d442 <findDirection+0x20a>
 800d342:	f7f3 f901 	bl	8000548 <__aeabi_f2d>
 800d346:	4606      	mov	r6, r0
 800d348:	ee18 0a10 	vmov	r0, s16
 800d34c:	460f      	mov	r7, r1
 800d34e:	f7f3 f8fb 	bl	8000548 <__aeabi_f2d>
 800d352:	a353      	add	r3, pc, #332	; (adr r3, 800d4a0 <findDirection+0x268>)
 800d354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d358:	f7f3 f94e 	bl	80005f8 <__aeabi_dmul>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	4630      	mov	r0, r6
 800d362:	4639      	mov	r1, r7
 800d364:	f7f3 fbd8 	bl	8000b18 <__aeabi_dcmpgt>
 800d368:	2800      	cmp	r0, #0
 800d36a:	d0a7      	beq.n	800d2bc <findDirection+0x84>
 800d36c:	ee18 0a90 	vmov	r0, s17
 800d370:	f7f3 f8ea 	bl	8000548 <__aeabi_f2d>
 800d374:	a34a      	add	r3, pc, #296	; (adr r3, 800d4a0 <findDirection+0x268>)
 800d376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37a:	f7f3 f93d 	bl	80005f8 <__aeabi_dmul>
 800d37e:	4602      	mov	r2, r0
 800d380:	460b      	mov	r3, r1
 800d382:	4630      	mov	r0, r6
 800d384:	4639      	mov	r1, r7
 800d386:	f7f3 fbc7 	bl	8000b18 <__aeabi_dcmpgt>
 800d38a:	ecbd 8b04 	vpop	{d8-d9}
 800d38e:	2800      	cmp	r0, #0
 800d390:	bf18      	it	ne
 800d392:	2400      	movne	r4, #0
 800d394:	4620      	mov	r0, r4
 800d396:	bdd0      	pop	{r4, r6, r7, pc}
 800d398:	f7f3 f8d6 	bl	8000548 <__aeabi_f2d>
 800d39c:	4606      	mov	r6, r0
 800d39e:	ee18 0a10 	vmov	r0, s16
 800d3a2:	460f      	mov	r7, r1
 800d3a4:	f7f3 f8d0 	bl	8000548 <__aeabi_f2d>
 800d3a8:	a33d      	add	r3, pc, #244	; (adr r3, 800d4a0 <findDirection+0x268>)
 800d3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ae:	f7f3 f923 	bl	80005f8 <__aeabi_dmul>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	4639      	mov	r1, r7
 800d3ba:	f7f3 fbad 	bl	8000b18 <__aeabi_dcmpgt>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	f43f af7c 	beq.w	800d2bc <findDirection+0x84>
 800d3c4:	ee19 0a10 	vmov	r0, s18
 800d3c8:	f7f3 f8be 	bl	8000548 <__aeabi_f2d>
 800d3cc:	a334      	add	r3, pc, #208	; (adr r3, 800d4a0 <findDirection+0x268>)
 800d3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d2:	f7f3 f911 	bl	80005f8 <__aeabi_dmul>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	460b      	mov	r3, r1
 800d3da:	4630      	mov	r0, r6
 800d3dc:	4639      	mov	r1, r7
 800d3de:	f7f3 fb9b 	bl	8000b18 <__aeabi_dcmpgt>
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	bf18      	it	ne
 800d3e6:	2405      	movne	r4, #5
 800d3e8:	e768      	b.n	800d2bc <findDirection+0x84>
 800d3ea:	f7f3 f8ad 	bl	8000548 <__aeabi_f2d>
 800d3ee:	4606      	mov	r6, r0
 800d3f0:	ee18 0a90 	vmov	r0, s17
 800d3f4:	460f      	mov	r7, r1
 800d3f6:	f7f3 f8a7 	bl	8000548 <__aeabi_f2d>
 800d3fa:	a329      	add	r3, pc, #164	; (adr r3, 800d4a0 <findDirection+0x268>)
 800d3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d400:	f7f3 f8fa 	bl	80005f8 <__aeabi_dmul>
 800d404:	4602      	mov	r2, r0
 800d406:	460b      	mov	r3, r1
 800d408:	4630      	mov	r0, r6
 800d40a:	4639      	mov	r1, r7
 800d40c:	f7f3 fb84 	bl	8000b18 <__aeabi_dcmpgt>
 800d410:	2800      	cmp	r0, #0
 800d412:	f43f af53 	beq.w	800d2bc <findDirection+0x84>
 800d416:	ee19 0a10 	vmov	r0, s18
 800d41a:	f7f3 f895 	bl	8000548 <__aeabi_f2d>
 800d41e:	a320      	add	r3, pc, #128	; (adr r3, 800d4a0 <findDirection+0x268>)
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	f7f3 f8e8 	bl	80005f8 <__aeabi_dmul>
 800d428:	4602      	mov	r2, r0
 800d42a:	460b      	mov	r3, r1
 800d42c:	4630      	mov	r0, r6
 800d42e:	4639      	mov	r1, r7
 800d430:	f7f3 fb72 	bl	8000b18 <__aeabi_dcmpgt>
 800d434:	ecbd 8b04 	vpop	{d8-d9}
 800d438:	2800      	cmp	r0, #0
 800d43a:	bf18      	it	ne
 800d43c:	2403      	movne	r4, #3
 800d43e:	4620      	mov	r0, r4
 800d440:	bdd0      	pop	{r4, r6, r7, pc}
 800d442:	f7f3 f881 	bl	8000548 <__aeabi_f2d>
 800d446:	4606      	mov	r6, r0
 800d448:	ee18 0a10 	vmov	r0, s16
 800d44c:	460f      	mov	r7, r1
 800d44e:	f7f3 f87b 	bl	8000548 <__aeabi_f2d>
 800d452:	a313      	add	r3, pc, #76	; (adr r3, 800d4a0 <findDirection+0x268>)
 800d454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d458:	f7f3 f8ce 	bl	80005f8 <__aeabi_dmul>
 800d45c:	4602      	mov	r2, r0
 800d45e:	460b      	mov	r3, r1
 800d460:	4630      	mov	r0, r6
 800d462:	4639      	mov	r1, r7
 800d464:	f7f3 fb58 	bl	8000b18 <__aeabi_dcmpgt>
 800d468:	2800      	cmp	r0, #0
 800d46a:	f43f af27 	beq.w	800d2bc <findDirection+0x84>
 800d46e:	ee18 0a90 	vmov	r0, s17
 800d472:	f7f3 f869 	bl	8000548 <__aeabi_f2d>
 800d476:	a30a      	add	r3, pc, #40	; (adr r3, 800d4a0 <findDirection+0x268>)
 800d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47c:	f7f3 f8bc 	bl	80005f8 <__aeabi_dmul>
 800d480:	4602      	mov	r2, r0
 800d482:	460b      	mov	r3, r1
 800d484:	4630      	mov	r0, r6
 800d486:	4639      	mov	r1, r7
 800d488:	f7f3 fb46 	bl	8000b18 <__aeabi_dcmpgt>
 800d48c:	ecbd 8b04 	vpop	{d8-d9}
 800d490:	2800      	cmp	r0, #0
 800d492:	bf18      	it	ne
 800d494:	2402      	movne	r4, #2
 800d496:	4620      	mov	r0, r4
 800d498:	bdd0      	pop	{r4, r6, r7, pc}
 800d49a:	bf00      	nop
 800d49c:	f3af 8000 	nop.w
 800d4a0:	e0000000 	.word	0xe0000000
 800d4a4:	3ff6b851 	.word	0x3ff6b851

0800d4a8 <updateOrientation>:
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	6003      	str	r3, [r0, #0]
 800d4ac:	6043      	str	r3, [r0, #4]
 800d4ae:	7203      	strb	r3, [r0, #8]
 800d4b0:	f891 c000 	ldrb.w	ip, [r1]
 800d4b4:	784a      	ldrb	r2, [r1, #1]
 800d4b6:	f1ac 0342 	sub.w	r3, ip, #66	; 0x42
 800d4ba:	2b17      	cmp	r3, #23
 800d4bc:	bf98      	it	ls
 800d4be:	f10c 0c20 	addls.w	ip, ip, #32
 800d4c2:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800d4c6:	bf98      	it	ls
 800d4c8:	fa5f fc8c 	uxtbls.w	ip, ip
 800d4cc:	2b17      	cmp	r3, #23
 800d4ce:	788b      	ldrb	r3, [r1, #2]
 800d4d0:	bf98      	it	ls
 800d4d2:	3220      	addls	r2, #32
 800d4d4:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800d4d8:	bf98      	it	ls
 800d4da:	b2d2      	uxtbls	r2, r2
 800d4dc:	2917      	cmp	r1, #23
 800d4de:	bf98      	it	ls
 800d4e0:	3320      	addls	r3, #32
 800d4e2:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 800d4e6:	bf98      	it	ls
 800d4e8:	b2db      	uxtbls	r3, r3
 800d4ea:	f1bc 0f13 	cmp.w	ip, #19
 800d4ee:	d80d      	bhi.n	800d50c <updateOrientation+0x64>
 800d4f0:	e8df f00c 	tbb	[pc, ip]
 800d4f4:	0c0c0a32 	.word	0x0c0c0a32
 800d4f8:	0c0c0c0c 	.word	0x0c0c0c0c
 800d4fc:	0c350c0c 	.word	0x0c350c0c
 800d500:	380c0c0c 	.word	0x380c0c0c
 800d504:	3e0c3b0c 	.word	0x3e0c3b0c
 800d508:	2101      	movs	r1, #1
 800d50a:	7001      	strb	r1, [r0, #0]
 800d50c:	3a64      	subs	r2, #100	; 0x64
 800d50e:	2a13      	cmp	r2, #19
 800d510:	d80d      	bhi.n	800d52e <updateOrientation+0x86>
 800d512:	e8df f002 	tbb	[pc, r2]
 800d516:	0a30      	.short	0x0a30
 800d518:	0c0c0c0c 	.word	0x0c0c0c0c
 800d51c:	0c0c0c0c 	.word	0x0c0c0c0c
 800d520:	0c0c0c33 	.word	0x0c0c0c33
 800d524:	390c360c 	.word	0x390c360c
 800d528:	3c0c      	.short	0x3c0c
 800d52a:	2201      	movs	r2, #1
 800d52c:	7042      	strb	r2, [r0, #1]
 800d52e:	3b64      	subs	r3, #100	; 0x64
 800d530:	2b13      	cmp	r3, #19
 800d532:	d80d      	bhi.n	800d550 <updateOrientation+0xa8>
 800d534:	e8df f003 	tbb	[pc, r3]
 800d538:	0c0c2e0a 	.word	0x0c0c2e0a
 800d53c:	0c0c0c0c 	.word	0x0c0c0c0c
 800d540:	0c310c0c 	.word	0x0c310c0c
 800d544:	340c0c0c 	.word	0x340c0c0c
 800d548:	0d0c370c 	.word	0x0d0c370c
 800d54c:	23ff      	movs	r3, #255	; 0xff
 800d54e:	7203      	strb	r3, [r0, #8]
 800d550:	4770      	bx	lr
 800d552:	23ff      	movs	r3, #255	; 0xff
 800d554:	7083      	strb	r3, [r0, #2]
 800d556:	4770      	bx	lr
 800d558:	21ff      	movs	r1, #255	; 0xff
 800d55a:	7181      	strb	r1, [r0, #6]
 800d55c:	e7d6      	b.n	800d50c <updateOrientation+0x64>
 800d55e:	2101      	movs	r1, #1
 800d560:	70c1      	strb	r1, [r0, #3]
 800d562:	e7d3      	b.n	800d50c <updateOrientation+0x64>
 800d564:	21ff      	movs	r1, #255	; 0xff
 800d566:	70c1      	strb	r1, [r0, #3]
 800d568:	e7d0      	b.n	800d50c <updateOrientation+0x64>
 800d56a:	2101      	movs	r1, #1
 800d56c:	7181      	strb	r1, [r0, #6]
 800d56e:	e7cd      	b.n	800d50c <updateOrientation+0x64>
 800d570:	21ff      	movs	r1, #255	; 0xff
 800d572:	7001      	strb	r1, [r0, #0]
 800d574:	e7ca      	b.n	800d50c <updateOrientation+0x64>
 800d576:	22ff      	movs	r2, #255	; 0xff
 800d578:	71c2      	strb	r2, [r0, #7]
 800d57a:	e7d8      	b.n	800d52e <updateOrientation+0x86>
 800d57c:	2201      	movs	r2, #1
 800d57e:	7102      	strb	r2, [r0, #4]
 800d580:	e7d5      	b.n	800d52e <updateOrientation+0x86>
 800d582:	22ff      	movs	r2, #255	; 0xff
 800d584:	7102      	strb	r2, [r0, #4]
 800d586:	e7d2      	b.n	800d52e <updateOrientation+0x86>
 800d588:	2201      	movs	r2, #1
 800d58a:	71c2      	strb	r2, [r0, #7]
 800d58c:	e7cf      	b.n	800d52e <updateOrientation+0x86>
 800d58e:	22ff      	movs	r2, #255	; 0xff
 800d590:	7042      	strb	r2, [r0, #1]
 800d592:	e7cc      	b.n	800d52e <updateOrientation+0x86>
 800d594:	2301      	movs	r3, #1
 800d596:	7083      	strb	r3, [r0, #2]
 800d598:	4770      	bx	lr
 800d59a:	2301      	movs	r3, #1
 800d59c:	7143      	strb	r3, [r0, #5]
 800d59e:	4770      	bx	lr
 800d5a0:	23ff      	movs	r3, #255	; 0xff
 800d5a2:	7143      	strb	r3, [r0, #5]
 800d5a4:	4770      	bx	lr
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	7203      	strb	r3, [r0, #8]
 800d5aa:	4770      	bx	lr

0800d5ac <qmult>:
 800d5ac:	ed91 2a03 	vldr	s4, [r1, #12]
 800d5b0:	ed90 3a01 	vldr	s6, [r0, #4]
 800d5b4:	edd0 5a02 	vldr	s11, [r0, #8]
 800d5b8:	edd1 4a01 	vldr	s9, [r1, #4]
 800d5bc:	ed90 4a00 	vldr	s8, [r0]
 800d5c0:	ed91 5a02 	vldr	s10, [r1, #8]
 800d5c4:	edd1 3a00 	vldr	s7, [r1]
 800d5c8:	edd0 2a03 	vldr	s5, [r0, #12]
 800d5cc:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800d5d0:	ee62 6a03 	vmul.f32	s13, s4, s6
 800d5d4:	ee22 7a25 	vmul.f32	s14, s4, s11
 800d5d8:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800d5dc:	eea4 6a02 	vfma.f32	s12, s8, s4
 800d5e0:	eee4 6a05 	vfma.f32	s13, s8, s10
 800d5e4:	eea3 7a23 	vfma.f32	s14, s6, s7
 800d5e8:	eee4 7a63 	vfms.f32	s15, s8, s7
 800d5ec:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800d5f0:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800d5f4:	eea5 7a22 	vfma.f32	s14, s10, s5
 800d5f8:	eee2 7a22 	vfma.f32	s15, s4, s5
 800d5fc:	eea3 6a45 	vfms.f32	s12, s6, s10
 800d600:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800d604:	eea4 7a64 	vfms.f32	s14, s8, s9
 800d608:	eee5 7a65 	vfms.f32	s15, s10, s11
 800d60c:	ed82 6a00 	vstr	s12, [r2]
 800d610:	edc2 6a01 	vstr	s13, [r2, #4]
 800d614:	ed82 7a02 	vstr	s14, [r2, #8]
 800d618:	edc2 7a03 	vstr	s15, [r2, #12]
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop

0800d620 <dataDerivative5>:
 800d620:	ed90 7a01 	vldr	s14, [r0, #4]
 800d624:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 800d628:	edd0 6a04 	vldr	s13, [r0, #16]
 800d62c:	ed90 6a00 	vldr	s12, [r0]
 800d630:	ed90 4a02 	vldr	s8, [r0, #8]
 800d634:	edd0 4a09 	vldr	s9, [r0, #36]	; 0x24
 800d638:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
 800d63c:	eee7 7a05 	vfma.f32	s15, s14, s10
 800d640:	ed90 7a03 	vldr	s14, [r0, #12]
 800d644:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d648:	edd0 6a0b 	vldr	s13, [r0, #44]	; 0x2c
 800d64c:	ee96 7a05 	vfnms.f32	s14, s12, s10
 800d650:	eee4 6a05 	vfma.f32	s13, s8, s10
 800d654:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 800d658:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
 800d65c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d660:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d664:	ee37 7a24 	vadd.f32	s14, s14, s9
 800d668:	eeb0 6a66 	vmov.f32	s12, s13
 800d66c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800d6a8 <dataDerivative5+0x88>
 800d670:	eea5 7a25 	vfma.f32	s14, s10, s11
 800d674:	ee60 6a26 	vmul.f32	s13, s0, s13
 800d678:	ed90 5a05 	vldr	s10, [r0, #20]
 800d67c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d680:	ee36 6a45 	vsub.f32	s12, s12, s10
 800d684:	ed90 5a0e 	vldr	s10, [r0, #56]	; 0x38
 800d688:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d68c:	eea5 6a25 	vfma.f32	s12, s10, s11
 800d690:	ee27 0aa7 	vmul.f32	s0, s15, s15
 800d694:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d698:	eea7 0a07 	vfma.f32	s0, s14, s14
 800d69c:	eea6 0aa6 	vfma.f32	s0, s13, s13
 800d6a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	3dcccccd 	.word	0x3dcccccd

0800d6ac <b_dcm2q>:
 800d6ac:	ed90 5a08 	vldr	s10, [r0, #32]
 800d6b0:	edd0 7a00 	vldr	s15, [r0]
 800d6b4:	edd0 6a04 	vldr	s13, [r0, #16]
 800d6b8:	ee37 7a85 	vadd.f32	s14, s15, s10
 800d6bc:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800d6c0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d6c4:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800d6c8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800d6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d0:	bfc5      	ittet	gt
 800d6d2:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800d6d6:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800d6da:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800d7e8 <b_dcm2q+0x13c>
 800d6de:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800d6e2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800d6e6:	ee35 6a47 	vsub.f32	s12, s10, s14
 800d6ea:	ee35 7a07 	vadd.f32	s14, s10, s14
 800d6ee:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800d6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6f6:	bfc5      	ittet	gt
 800d6f8:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800d6fc:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800d700:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800d7e8 <b_dcm2q+0x13c>
 800d704:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800d708:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800d70c:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800d710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d714:	dd5b      	ble.n	800d7ce <b_dcm2q+0x122>
 800d716:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800d71a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800d71e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800d722:	eef1 4ac7 	vsqrt.f32	s9, s14
 800d726:	ee64 4a84 	vmul.f32	s9, s9, s8
 800d72a:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d72e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d732:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d736:	edd0 6a07 	vldr	s13, [r0, #28]
 800d73a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d742:	bf85      	ittet	hi
 800d744:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800d748:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800d74c:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800d7e8 <b_dcm2q+0x13c>
 800d750:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800d754:	edd0 7a05 	vldr	s15, [r0, #20]
 800d758:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d75c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d764:	d43c      	bmi.n	800d7e0 <b_dcm2q+0x134>
 800d766:	bfd8      	it	le
 800d768:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800d76c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d770:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d774:	ed81 7a00 	vstr	s14, [r1]
 800d778:	edd0 7a06 	vldr	s15, [r0, #24]
 800d77c:	ed90 7a02 	vldr	s14, [r0, #8]
 800d780:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d784:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d78c:	d425      	bmi.n	800d7da <b_dcm2q+0x12e>
 800d78e:	bfd8      	it	le
 800d790:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800d794:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d798:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800d79c:	edc1 5a01 	vstr	s11, [r1, #4]
 800d7a0:	edd0 7a01 	vldr	s15, [r0, #4]
 800d7a4:	ed90 7a03 	vldr	s14, [r0, #12]
 800d7a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b4:	d40e      	bmi.n	800d7d4 <b_dcm2q+0x128>
 800d7b6:	bfd8      	it	le
 800d7b8:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800d7bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d7c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800d7c4:	edc1 4a03 	vstr	s9, [r1, #12]
 800d7c8:	ed81 6a02 	vstr	s12, [r1, #8]
 800d7cc:	4770      	bx	lr
 800d7ce:	eddf 4a06 	vldr	s9, [pc, #24]	; 800d7e8 <b_dcm2q+0x13c>
 800d7d2:	e7aa      	b.n	800d72a <b_dcm2q+0x7e>
 800d7d4:	eeb1 6a46 	vneg.f32	s12, s12
 800d7d8:	e7f0      	b.n	800d7bc <b_dcm2q+0x110>
 800d7da:	eef1 5a65 	vneg.f32	s11, s11
 800d7de:	e7d9      	b.n	800d794 <b_dcm2q+0xe8>
 800d7e0:	eeb1 7a47 	vneg.f32	s14, s14
 800d7e4:	e7c2      	b.n	800d76c <b_dcm2q+0xc0>
 800d7e6:	bf00      	nop
 800d7e8:	00000000 	.word	0x00000000

0800d7ec <getRotationMatrix>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	4605      	mov	r5, r0
 800d7f2:	460c      	mov	r4, r1
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	2224      	movs	r2, #36	; 0x24
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	f007 ffcd 	bl	8015798 <memset>
 800d7fe:	edd5 5a00 	vldr	s11, [r5]
 800d802:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800d928 <getRotationMatrix+0x13c>
 800d806:	edc0 5a02 	vstr	s11, [r0, #8]
 800d80a:	edd5 4a01 	vldr	s9, [r5, #4]
 800d80e:	edc0 4a05 	vstr	s9, [r0, #20]
 800d812:	ed95 5a02 	vldr	s10, [r5, #8]
 800d816:	ed80 5a08 	vstr	s10, [r0, #32]
 800d81a:	ed94 4a02 	vldr	s8, [r4, #8]
 800d81e:	edd4 3a01 	vldr	s7, [r4, #4]
 800d822:	ed94 6a00 	vldr	s12, [r4]
 800d826:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 800d82a:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 800d82e:	eee3 6a85 	vfma.f32	s13, s7, s10
 800d832:	4603      	mov	r3, r0
 800d834:	eee6 7a24 	vfma.f32	s15, s12, s9
 800d838:	ee25 7a46 	vnmul.f32	s14, s10, s12
 800d83c:	eeb0 6ae6 	vabs.f32	s12, s13
 800d840:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800d844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d848:	eea4 7a25 	vfma.f32	s14, s8, s11
 800d84c:	bfdc      	itt	le
 800d84e:	ee86 4a83 	vdivle.f32	s8, s13, s6
 800d852:	eeb0 6a43 	vmovle.f32	s12, s6
 800d856:	eef0 3ac7 	vabs.f32	s7, s14
 800d85a:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800d85e:	bfd4      	ite	le
 800d860:	ee24 4a04 	vmulle.f32	s8, s8, s8
 800d864:	eeb7 4a00 	vmovgt.f32	s8, #112	; 0x3f800000  1.0
 800d868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d86c:	ed80 7a03 	vstr	s14, [r0, #12]
 800d870:	edc0 7a06 	vstr	s15, [r0, #24]
 800d874:	d43f      	bmi.n	800d8f6 <getRotationMatrix+0x10a>
 800d876:	eec7 3a06 	vdiv.f32	s7, s14, s12
 800d87a:	eea3 4aa3 	vfma.f32	s8, s7, s7
 800d87e:	eeb0 3a44 	vmov.f32	s6, s8
 800d882:	eeb0 4ae7 	vabs.f32	s8, s15
 800d886:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800d88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d88e:	d543      	bpl.n	800d918 <getRotationMatrix+0x12c>
 800d890:	eec6 2a04 	vdiv.f32	s5, s12, s8
 800d894:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800d898:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800d89c:	eeb0 6a44 	vmov.f32	s12, s8
 800d8a0:	eee3 3a22 	vfma.f32	s7, s6, s5
 800d8a4:	eeb1 4ae3 	vsqrt.f32	s8, s7
 800d8a8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800d8ac:	ee24 6a06 	vmul.f32	s12, s8, s12
 800d8b0:	ee83 4a86 	vdiv.f32	s8, s7, s12
 800d8b4:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d8b8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800d8bc:	ee66 6a84 	vmul.f32	s13, s13, s8
 800d8c0:	ee65 3a47 	vnmul.f32	s7, s10, s14
 800d8c4:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 800d8c8:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 800d8cc:	eee7 3aa4 	vfma.f32	s7, s15, s9
 800d8d0:	eef0 4a44 	vmov.f32	s9, s8
 800d8d4:	eee6 4a85 	vfma.f32	s9, s13, s10
 800d8d8:	eea7 6a25 	vfma.f32	s12, s14, s11
 800d8dc:	edc3 6a00 	vstr	s13, [r3]
 800d8e0:	ed83 7a03 	vstr	s14, [r3, #12]
 800d8e4:	edc3 7a06 	vstr	s15, [r3, #24]
 800d8e8:	edc3 3a01 	vstr	s7, [r3, #4]
 800d8ec:	edc3 4a04 	vstr	s9, [r3, #16]
 800d8f0:	ed83 6a07 	vstr	s12, [r3, #28]
 800d8f4:	bd38      	pop	{r3, r4, r5, pc}
 800d8f6:	eec6 2a23 	vdiv.f32	s5, s12, s7
 800d8fa:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800d8fe:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800d902:	eeb0 6a63 	vmov.f32	s12, s7
 800d906:	eea4 3a22 	vfma.f32	s6, s8, s5
 800d90a:	eeb0 4ae7 	vabs.f32	s8, s15
 800d90e:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800d912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d916:	d4bb      	bmi.n	800d890 <getRotationMatrix+0xa4>
 800d918:	ee87 4a86 	vdiv.f32	s8, s15, s12
 800d91c:	eef0 3a43 	vmov.f32	s7, s6
 800d920:	eee4 3a04 	vfma.f32	s7, s8, s8
 800d924:	e7be      	b.n	800d8a4 <getRotationMatrix+0xb8>
 800d926:	bf00      	nop
 800d928:	00000000 	.word	0x00000000

0800d92c <kf_update>:
 800d92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d930:	ed2d 8b10 	vpush	{d8-d15}
 800d934:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 800d938:	3901      	subs	r1, #1
 800d93a:	f8dd 4490 	ldr.w	r4, [sp, #1168]	; 0x490
 800d93e:	9303      	str	r3, [sp, #12]
 800d940:	ed94 2a00 	vldr	s4, [r4]
 800d944:	edd4 2a01 	vldr	s5, [r4, #4]
 800d948:	ed94 3a02 	vldr	s6, [r4, #8]
 800d94c:	edd4 3a03 	vldr	s7, [r4, #12]
 800d950:	ed94 4a04 	vldr	s8, [r4, #16]
 800d954:	edd4 4a05 	vldr	s9, [r4, #20]
 800d958:	ed94 5a06 	vldr	s10, [r4, #24]
 800d95c:	edd4 5a07 	vldr	s11, [r4, #28]
 800d960:	ed94 6a08 	vldr	s12, [r4, #32]
 800d964:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 800d968:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800d96c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800d970:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 800d9e4 <kf_update+0xb8>
 800d974:	9104      	str	r1, [sp, #16]
 800d976:	ab0b      	add	r3, sp, #44	; 0x2c
 800d978:	ee22 2a02 	vmul.f32	s4, s4, s4
 800d97c:	ee62 2aa2 	vmul.f32	s5, s5, s5
 800d980:	ee23 3a03 	vmul.f32	s6, s6, s6
 800d984:	ee63 3aa3 	vmul.f32	s7, s7, s7
 800d988:	ee24 4a04 	vmul.f32	s8, s8, s8
 800d98c:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800d990:	ee25 5a05 	vmul.f32	s10, s10, s10
 800d994:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800d998:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d99c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d9a0:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d9a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d9a8:	9302      	str	r3, [sp, #8]
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	4606      	mov	r6, r0
 800d9ae:	9200      	str	r2, [sp, #0]
 800d9b0:	ed8d 2a0b 	vstr	s4, [sp, #44]	; 0x2c
 800d9b4:	edcd 2a0c 	vstr	s5, [sp, #48]	; 0x30
 800d9b8:	ed8d 3a0d 	vstr	s6, [sp, #52]	; 0x34
 800d9bc:	edcd 3a0e 	vstr	s7, [sp, #56]	; 0x38
 800d9c0:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 800d9c4:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
 800d9c8:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
 800d9cc:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 800d9d0:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 800d9d4:	edcd 6a14 	vstr	s13, [sp, #80]	; 0x50
 800d9d8:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800d9dc:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800d9e0:	9301      	str	r3, [sp, #4]
 800d9e2:	e010      	b.n	800da06 <kf_update+0xda>
 800d9e4:	00000000 	.word	0x00000000
 800d9e8:	9a00      	ldr	r2, [sp, #0]
 800d9ea:	9b01      	ldr	r3, [sp, #4]
 800d9ec:	3204      	adds	r2, #4
 800d9ee:	9200      	str	r2, [sp, #0]
 800d9f0:	9a02      	ldr	r2, [sp, #8]
 800d9f2:	3204      	adds	r2, #4
 800d9f4:	9202      	str	r2, [sp, #8]
 800d9f6:	9a03      	ldr	r2, [sp, #12]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	3204      	adds	r2, #4
 800d9fc:	2b0c      	cmp	r3, #12
 800d9fe:	9301      	str	r3, [sp, #4]
 800da00:	9203      	str	r2, [sp, #12]
 800da02:	f000 857b 	beq.w	800e4fc <kf_update+0xbd0>
 800da06:	9a04      	ldr	r2, [sp, #16]
 800da08:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800da0c:	9204      	str	r2, [sp, #16]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d0ea      	beq.n	800d9e8 <kf_update+0xbc>
 800da12:	9a03      	ldr	r2, [sp, #12]
 800da14:	ed8d 8a17 	vstr	s16, [sp, #92]	; 0x5c
 800da18:	f106 0328 	add.w	r3, r6, #40	; 0x28
 800da1c:	ac17      	add	r4, sp, #92	; 0x5c
 800da1e:	edd2 da00 	vldr	s27, [r2]
 800da22:	ed92 ea0c 	vldr	s28, [r2, #48]	; 0x30
 800da26:	edd2 ea18 	vldr	s29, [r2, #96]	; 0x60
 800da2a:	ed92 fa24 	vldr	s30, [r2, #144]	; 0x90
 800da2e:	edd2 fa30 	vldr	s31, [r2, #192]	; 0xc0
 800da32:	edd2 6a3c 	vldr	s13, [r2, #240]	; 0xf0
 800da36:	ed92 6a48 	vldr	s12, [r2, #288]	; 0x120
 800da3a:	edd2 5a54 	vldr	s11, [r2, #336]	; 0x150
 800da3e:	ed92 5a60 	vldr	s10, [r2, #384]	; 0x180
 800da42:	9305      	str	r3, [sp, #20]
 800da44:	ed8d 8a18 	vstr	s16, [sp, #96]	; 0x60
 800da48:	ed8d 8a19 	vstr	s16, [sp, #100]	; 0x64
 800da4c:	ed8d 8a1a 	vstr	s16, [sp, #104]	; 0x68
 800da50:	ed8d 8a1b 	vstr	s16, [sp, #108]	; 0x6c
 800da54:	ed8d 8a1c 	vstr	s16, [sp, #112]	; 0x70
 800da58:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
 800da5c:	ed8d 8a1e 	vstr	s16, [sp, #120]	; 0x78
 800da60:	ed8d 8a1f 	vstr	s16, [sp, #124]	; 0x7c
 800da64:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 800da68:	4622      	mov	r2, r4
 800da6a:	ecb3 7a01 	vldmia	r3!, {s14}
 800da6e:	ecf2 7a01 	vldmia	r2!, {s15}
 800da72:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800da76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da7a:	d006      	beq.n	800da8a <kf_update+0x15e>
 800da7c:	eef5 da40 	vcmp.f32	s27, #0.0
 800da80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da84:	bf18      	it	ne
 800da86:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 800da8a:	ed93 7a08 	vldr	s14, [r3, #32]
 800da8e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800da92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da96:	d006      	beq.n	800daa6 <kf_update+0x17a>
 800da98:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800da9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daa0:	bf18      	it	ne
 800daa2:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800daa6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800daaa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800daae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dab2:	d006      	beq.n	800dac2 <kf_update+0x196>
 800dab4:	eef5 ea40 	vcmp.f32	s29, #0.0
 800dab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dabc:	bf18      	it	ne
 800dabe:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800dac2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800dac6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800daca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dace:	d006      	beq.n	800dade <kf_update+0x1b2>
 800dad0:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800dad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad8:	bf18      	it	ne
 800dada:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800dade:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800dae2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daea:	d006      	beq.n	800dafa <kf_update+0x1ce>
 800daec:	eef5 fa40 	vcmp.f32	s31, #0.0
 800daf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf4:	bf18      	it	ne
 800daf6:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800dafa:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800dafe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800db02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db06:	d006      	beq.n	800db16 <kf_update+0x1ea>
 800db08:	eef5 6a40 	vcmp.f32	s13, #0.0
 800db0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db10:	bf18      	it	ne
 800db12:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800db16:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800db1a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800db1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db22:	d006      	beq.n	800db32 <kf_update+0x206>
 800db24:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800db28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db2c:	bf18      	it	ne
 800db2e:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800db32:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800db36:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800db3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3e:	d006      	beq.n	800db4e <kf_update+0x222>
 800db40:	eef5 5a40 	vcmp.f32	s11, #0.0
 800db44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db48:	bf18      	it	ne
 800db4a:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800db4e:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800db52:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800db56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db5a:	d006      	beq.n	800db6a <kf_update+0x23e>
 800db5c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800db60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db64:	bf18      	it	ne
 800db66:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800db6a:	4299      	cmp	r1, r3
 800db6c:	ed42 7a01 	vstr	s15, [r2, #-4]
 800db70:	f47f af7b 	bne.w	800da6a <kf_update+0x13e>
 800db74:	eef5 da40 	vcmp.f32	s27, #0.0
 800db78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db7c:	eddd ba17 	vldr	s23, [sp, #92]	; 0x5c
 800db80:	f040 8492 	bne.w	800e4a8 <kf_update+0xb7c>
 800db84:	eef0 7a6d 	vmov.f32	s15, s27
 800db88:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800db8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db90:	ed9d ca18 	vldr	s24, [sp, #96]	; 0x60
 800db94:	d006      	beq.n	800dba4 <kf_update+0x278>
 800db96:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800db9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9e:	bf18      	it	ne
 800dba0:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 800dba4:	eef5 ea40 	vcmp.f32	s29, #0.0
 800dba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbac:	ed9d aa19 	vldr	s20, [sp, #100]	; 0x64
 800dbb0:	d006      	beq.n	800dbc0 <kf_update+0x294>
 800dbb2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800dbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbba:	bf18      	it	ne
 800dbbc:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 800dbc0:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800dbc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbc8:	ed9d da1a 	vldr	s26, [sp, #104]	; 0x68
 800dbcc:	d006      	beq.n	800dbdc <kf_update+0x2b0>
 800dbce:	eeb5 da40 	vcmp.f32	s26, #0.0
 800dbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd6:	bf18      	it	ne
 800dbd8:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 800dbdc:	eef5 fa40 	vcmp.f32	s31, #0.0
 800dbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbe4:	eddd ca1b 	vldr	s25, [sp, #108]	; 0x6c
 800dbe8:	d006      	beq.n	800dbf8 <kf_update+0x2cc>
 800dbea:	eef5 ca40 	vcmp.f32	s25, #0.0
 800dbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf2:	bf18      	it	ne
 800dbf4:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800dbf8:	eef5 6a40 	vcmp.f32	s13, #0.0
 800dbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc00:	ed9d ba1c 	vldr	s22, [sp, #112]	; 0x70
 800dc04:	d006      	beq.n	800dc14 <kf_update+0x2e8>
 800dc06:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800dc0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc0e:	bf18      	it	ne
 800dc10:	eeeb 7a26 	vfmane.f32	s15, s22, s13
 800dc14:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800dc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc1c:	eddd aa1d 	vldr	s21, [sp, #116]	; 0x74
 800dc20:	d006      	beq.n	800dc30 <kf_update+0x304>
 800dc22:	eef5 aa40 	vcmp.f32	s21, #0.0
 800dc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc2a:	bf18      	it	ne
 800dc2c:	eeea 7a86 	vfmane.f32	s15, s21, s12
 800dc30:	eef5 5a40 	vcmp.f32	s11, #0.0
 800dc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc38:	eddd 9a1e 	vldr	s19, [sp, #120]	; 0x78
 800dc3c:	d006      	beq.n	800dc4c <kf_update+0x320>
 800dc3e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800dc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc46:	bf18      	it	ne
 800dc48:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 800dc4c:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800dc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc54:	ed9d 9a1f 	vldr	s18, [sp, #124]	; 0x7c
 800dc58:	d006      	beq.n	800dc68 <kf_update+0x33c>
 800dc5a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800dc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc62:	bf18      	it	ne
 800dc64:	eee9 7a05 	vfmane.f32	s15, s18, s10
 800dc68:	9b02      	ldr	r3, [sp, #8]
 800dc6a:	ed93 7a00 	vldr	s14, [r3]
 800dc6e:	9b01      	ldr	r3, [sp, #4]
 800dc70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc74:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800dc78:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 800dc7c:	2b05      	cmp	r3, #5
 800dc7e:	ee6b ba87 	vmul.f32	s23, s23, s14
 800dc82:	ee2c ca07 	vmul.f32	s24, s24, s14
 800dc86:	ee2a aa07 	vmul.f32	s20, s20, s14
 800dc8a:	ee2d da07 	vmul.f32	s26, s26, s14
 800dc8e:	ee67 ca2c 	vmul.f32	s25, s14, s25
 800dc92:	ee27 ba0b 	vmul.f32	s22, s14, s22
 800dc96:	ee67 aa2a 	vmul.f32	s21, s14, s21
 800dc9a:	ee69 9a87 	vmul.f32	s19, s19, s14
 800dc9e:	ee29 9a07 	vmul.f32	s18, s18, s14
 800dca2:	edcd ba17 	vstr	s23, [sp, #92]	; 0x5c
 800dca6:	ed8d ca18 	vstr	s24, [sp, #96]	; 0x60
 800dcaa:	ed8d aa19 	vstr	s20, [sp, #100]	; 0x64
 800dcae:	ed8d da1a 	vstr	s26, [sp, #104]	; 0x68
 800dcb2:	edcd ca1b 	vstr	s25, [sp, #108]	; 0x6c
 800dcb6:	ed8d ba1c 	vstr	s22, [sp, #112]	; 0x70
 800dcba:	edcd aa1d 	vstr	s21, [sp, #116]	; 0x74
 800dcbe:	edcd 9a1e 	vstr	s19, [sp, #120]	; 0x78
 800dcc2:	ed8d 9a1f 	vstr	s18, [sp, #124]	; 0x7c
 800dcc6:	f340 83eb 	ble.w	800e4a0 <kf_update+0xb74>
 800dcca:	eef5 da40 	vcmp.f32	s27, #0.0
 800dcce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcd2:	f000 8456 	beq.w	800e582 <kf_update+0xc56>
 800dcd6:	edd6 7a01 	vldr	s15, [r6, #4]
 800dcda:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce2:	f040 8477 	bne.w	800e5d4 <kf_update+0xca8>
 800dce6:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800dcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcee:	d008      	beq.n	800dd02 <kf_update+0x3d6>
 800dcf0:	ed96 7a02 	vldr	s14, [r6, #8]
 800dcf4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcfc:	bf18      	it	ne
 800dcfe:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800dd02:	eef5 ea40 	vcmp.f32	s29, #0.0
 800dd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd0a:	d008      	beq.n	800dd1e <kf_update+0x3f2>
 800dd0c:	ed96 7a03 	vldr	s14, [r6, #12]
 800dd10:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd18:	bf18      	it	ne
 800dd1a:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800dd1e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800dd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd26:	d008      	beq.n	800dd3a <kf_update+0x40e>
 800dd28:	ed96 7a04 	vldr	s14, [r6, #16]
 800dd2c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd34:	bf18      	it	ne
 800dd36:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800dd3a:	eef5 fa40 	vcmp.f32	s31, #0.0
 800dd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd42:	d008      	beq.n	800dd56 <kf_update+0x42a>
 800dd44:	ed96 7a05 	vldr	s14, [r6, #20]
 800dd48:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd50:	bf18      	it	ne
 800dd52:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800dd56:	eef5 6a40 	vcmp.f32	s13, #0.0
 800dd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd5e:	d008      	beq.n	800dd72 <kf_update+0x446>
 800dd60:	ed96 7a06 	vldr	s14, [r6, #24]
 800dd64:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd6c:	bf18      	it	ne
 800dd6e:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800dd72:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800dd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd7a:	d008      	beq.n	800dd8e <kf_update+0x462>
 800dd7c:	ed96 7a07 	vldr	s14, [r6, #28]
 800dd80:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd88:	bf18      	it	ne
 800dd8a:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800dd8e:	eef5 5a40 	vcmp.f32	s11, #0.0
 800dd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd96:	d008      	beq.n	800ddaa <kf_update+0x47e>
 800dd98:	ed96 7a08 	vldr	s14, [r6, #32]
 800dd9c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800dda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda4:	bf18      	it	ne
 800dda6:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800ddaa:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ddae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb2:	d008      	beq.n	800ddc6 <kf_update+0x49a>
 800ddb4:	ed96 7a09 	vldr	s14, [r6, #36]	; 0x24
 800ddb8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ddbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddc0:	bf18      	it	ne
 800ddc2:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800ddc6:	9b00      	ldr	r3, [sp, #0]
 800ddc8:	edd3 8a00 	vldr	s17, [r3]
 800ddcc:	ee78 8ae7 	vsub.f32	s17, s17, s15
 800ddd0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ddd4:	2100      	movs	r1, #0
 800ddd6:	a868      	add	r0, sp, #416	; 0x1a0
 800ddd8:	ed8d 5a09 	vstr	s10, [sp, #36]	; 0x24
 800dddc:	edcd 5a08 	vstr	s11, [sp, #32]
 800dde0:	ed8d 6a07 	vstr	s12, [sp, #28]
 800dde4:	edcd 6a06 	vstr	s13, [sp, #24]
 800dde8:	f007 fcd6 	bl	8015798 <memset>
 800ddec:	ab68      	add	r3, sp, #416	; 0x1a0
 800ddee:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
 800ddf2:	eddd 5a08 	vldr	s11, [sp, #32]
 800ddf6:	ed9d 6a07 	vldr	s12, [sp, #28]
 800ddfa:	eddd 6a06 	vldr	s13, [sp, #24]
 800ddfe:	a971      	add	r1, sp, #452	; 0x1c4
 800de00:	461a      	mov	r2, r3
 800de02:	ecf4 7a01 	vldmia	r4!, {s15}
 800de06:	eef5 7a40 	vcmp.f32	s15, #0.0
 800de0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de0e:	d062      	beq.n	800ded6 <kf_update+0x5aa>
 800de10:	eef5 da40 	vcmp.f32	s27, #0.0
 800de14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de18:	d005      	beq.n	800de26 <kf_update+0x4fa>
 800de1a:	ed92 7a00 	vldr	s14, [r2]
 800de1e:	eea7 7aad 	vfma.f32	s14, s15, s27
 800de22:	ed82 7a00 	vstr	s14, [r2]
 800de26:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800de2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de2e:	d005      	beq.n	800de3c <kf_update+0x510>
 800de30:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 800de34:	eea7 7a8e 	vfma.f32	s14, s15, s28
 800de38:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 800de3c:	eef5 ea40 	vcmp.f32	s29, #0.0
 800de40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de44:	d005      	beq.n	800de52 <kf_update+0x526>
 800de46:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 800de4a:	eea7 7aae 	vfma.f32	s14, s15, s29
 800de4e:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 800de52:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800de56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de5a:	d005      	beq.n	800de68 <kf_update+0x53c>
 800de5c:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 800de60:	eea7 7a8f 	vfma.f32	s14, s15, s30
 800de64:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 800de68:	eef5 fa40 	vcmp.f32	s31, #0.0
 800de6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de70:	d005      	beq.n	800de7e <kf_update+0x552>
 800de72:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 800de76:	eea7 7aaf 	vfma.f32	s14, s15, s31
 800de7a:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 800de7e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800de82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de86:	d005      	beq.n	800de94 <kf_update+0x568>
 800de88:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 800de8c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800de90:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 800de94:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800de98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de9c:	d005      	beq.n	800deaa <kf_update+0x57e>
 800de9e:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 800dea2:	eea7 7a86 	vfma.f32	s14, s15, s12
 800dea6:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 800deaa:	eef5 5a40 	vcmp.f32	s11, #0.0
 800deae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb2:	d005      	beq.n	800dec0 <kf_update+0x594>
 800deb4:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 800deb8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800debc:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 800dec0:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800dec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dec8:	d005      	beq.n	800ded6 <kf_update+0x5aa>
 800deca:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 800dece:	eea7 7a85 	vfma.f32	s14, s15, s10
 800ded2:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 800ded6:	3204      	adds	r2, #4
 800ded8:	4291      	cmp	r1, r2
 800deda:	d192      	bne.n	800de02 <kf_update+0x4d6>
 800dedc:	afb9      	add	r7, sp, #740	; 0x2e4
 800dede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dee2:	a868      	add	r0, sp, #416	; 0x1a0
 800dee4:	463a      	mov	r2, r7
 800dee6:	f04f 0b02 	mov.w	fp, #2
 800deea:	f04f 0e03 	mov.w	lr, #3
 800deee:	f04f 0c04 	mov.w	ip, #4
 800def2:	f04f 0a05 	mov.w	sl, #5
 800def6:	f04f 0906 	mov.w	r9, #6
 800defa:	f04f 0807 	mov.w	r8, #7
 800defe:	2408      	movs	r4, #8
 800df00:	2100      	movs	r1, #0
 800df02:	9306      	str	r3, [sp, #24]
 800df04:	e07b      	b.n	800dffe <kf_update+0x6d2>
 800df06:	edd0 7a00 	vldr	s15, [r0]
 800df0a:	ed82 8a01 	vstr	s16, [r2, #4]
 800df0e:	eef1 7a67 	vneg.f32	s15, s15
 800df12:	2901      	cmp	r1, #1
 800df14:	edc0 7a00 	vstr	s15, [r0]
 800df18:	f1a4 0507 	sub.w	r5, r4, #7
 800df1c:	f000 8110 	beq.w	800e140 <kf_update+0x814>
 800df20:	ab68      	add	r3, sp, #416	; 0x1a0
 800df22:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800df26:	edd5 7a00 	vldr	s15, [r5]
 800df2a:	ed82 8a02 	vstr	s16, [r2, #8]
 800df2e:	eef1 7a67 	vneg.f32	s15, s15
 800df32:	2902      	cmp	r1, #2
 800df34:	edc5 7a00 	vstr	s15, [r5]
 800df38:	f000 80ef 	beq.w	800e11a <kf_update+0x7ee>
 800df3c:	ab68      	add	r3, sp, #416	; 0x1a0
 800df3e:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 800df42:	edd5 7a00 	vldr	s15, [r5]
 800df46:	ed82 8a03 	vstr	s16, [r2, #12]
 800df4a:	eef1 7a67 	vneg.f32	s15, s15
 800df4e:	2903      	cmp	r1, #3
 800df50:	edc5 7a00 	vstr	s15, [r5]
 800df54:	d176      	bne.n	800e044 <kf_update+0x718>
 800df56:	edd0 7a03 	vldr	s15, [r0, #12]
 800df5a:	ed82 8a04 	vstr	s16, [r2, #16]
 800df5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df62:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 800df66:	edc0 7a03 	vstr	s15, [r0, #12]
 800df6a:	edd5 7a00 	vldr	s15, [r5]
 800df6e:	ed82 8a05 	vstr	s16, [r2, #20]
 800df72:	eef1 7a67 	vneg.f32	s15, s15
 800df76:	edc5 7a00 	vstr	s15, [r5]
 800df7a:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 800df7e:	edd5 7a00 	vldr	s15, [r5]
 800df82:	ed82 8a06 	vstr	s16, [r2, #24]
 800df86:	eef1 7a67 	vneg.f32	s15, s15
 800df8a:	edc5 7a00 	vstr	s15, [r5]
 800df8e:	ab68      	add	r3, sp, #416	; 0x1a0
 800df90:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 800df94:	edd5 7a00 	vldr	s15, [r5]
 800df98:	ed82 8a07 	vstr	s16, [r2, #28]
 800df9c:	eef1 7a67 	vneg.f32	s15, s15
 800dfa0:	2907      	cmp	r1, #7
 800dfa2:	edc5 7a00 	vstr	s15, [r5]
 800dfa6:	f040 80a4 	bne.w	800e0f2 <kf_update+0x7c6>
 800dfaa:	edd0 7a07 	vldr	s15, [r0, #28]
 800dfae:	ed82 8a08 	vstr	s16, [r2, #32]
 800dfb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dfb6:	edc0 7a07 	vstr	s15, [r0, #28]
 800dfba:	ab68      	add	r3, sp, #416	; 0x1a0
 800dfbc:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 800dfc0:	edd5 7a00 	vldr	s15, [r5]
 800dfc4:	00a5      	lsls	r5, r4, #2
 800dfc6:	eef1 7a67 	vneg.f32	s15, s15
 800dfca:	ab68      	add	r3, sp, #416	; 0x1a0
 800dfcc:	3101      	adds	r1, #1
 800dfce:	441d      	add	r5, r3
 800dfd0:	2909      	cmp	r1, #9
 800dfd2:	edc5 7a00 	vstr	s15, [r5]
 800dfd6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800dfda:	f104 0409 	add.w	r4, r4, #9
 800dfde:	f100 0024 	add.w	r0, r0, #36	; 0x24
 800dfe2:	f108 0809 	add.w	r8, r8, #9
 800dfe6:	f109 0909 	add.w	r9, r9, #9
 800dfea:	f10a 0a09 	add.w	sl, sl, #9
 800dfee:	f10c 0c09 	add.w	ip, ip, #9
 800dff2:	f10e 0e09 	add.w	lr, lr, #9
 800dff6:	f10b 0b09 	add.w	fp, fp, #9
 800dffa:	f000 80d2 	beq.w	800e1a2 <kf_update+0x876>
 800dffe:	ed82 8a00 	vstr	s16, [r2]
 800e002:	2900      	cmp	r1, #0
 800e004:	f47f af7f 	bne.w	800df06 <kf_update+0x5da>
 800e008:	eddd 7a68 	vldr	s15, [sp, #416]	; 0x1a0
 800e00c:	ed82 8a01 	vstr	s16, [r2, #4]
 800e010:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e014:	ab68      	add	r3, sp, #416	; 0x1a0
 800e016:	1fe5      	subs	r5, r4, #7
 800e018:	edc0 7a00 	vstr	s15, [r0]
 800e01c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800e020:	edd5 7a00 	vldr	s15, [r5]
 800e024:	ed82 8a02 	vstr	s16, [r2, #8]
 800e028:	eef1 7a67 	vneg.f32	s15, s15
 800e02c:	edc5 7a00 	vstr	s15, [r5]
 800e030:	ed82 8a03 	vstr	s16, [r2, #12]
 800e034:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 800e038:	edd5 7a00 	vldr	s15, [r5]
 800e03c:	eef1 7a67 	vneg.f32	s15, s15
 800e040:	edc5 7a00 	vstr	s15, [r5]
 800e044:	ab68      	add	r3, sp, #416	; 0x1a0
 800e046:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 800e04a:	edd5 7a00 	vldr	s15, [r5]
 800e04e:	ed82 8a04 	vstr	s16, [r2, #16]
 800e052:	eef1 7a67 	vneg.f32	s15, s15
 800e056:	2904      	cmp	r1, #4
 800e058:	edc5 7a00 	vstr	s15, [r5]
 800e05c:	d02d      	beq.n	800e0ba <kf_update+0x78e>
 800e05e:	ab68      	add	r3, sp, #416	; 0x1a0
 800e060:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 800e064:	edd5 7a00 	vldr	s15, [r5]
 800e068:	ed82 8a05 	vstr	s16, [r2, #20]
 800e06c:	eef1 7a67 	vneg.f32	s15, s15
 800e070:	2905      	cmp	r1, #5
 800e072:	edc5 7a00 	vstr	s15, [r5]
 800e076:	d077      	beq.n	800e168 <kf_update+0x83c>
 800e078:	ab68      	add	r3, sp, #416	; 0x1a0
 800e07a:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 800e07e:	edd5 7a00 	vldr	s15, [r5]
 800e082:	ed82 8a06 	vstr	s16, [r2, #24]
 800e086:	eef1 7a67 	vneg.f32	s15, s15
 800e08a:	2906      	cmp	r1, #6
 800e08c:	edc5 7a00 	vstr	s15, [r5]
 800e090:	f47f af7d 	bne.w	800df8e <kf_update+0x662>
 800e094:	edd0 7a06 	vldr	s15, [r0, #24]
 800e098:	ed82 8a07 	vstr	s16, [r2, #28]
 800e09c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e0a0:	ed82 8a08 	vstr	s16, [r2, #32]
 800e0a4:	edc0 7a06 	vstr	s15, [r0, #24]
 800e0a8:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 800e0ac:	edd5 7a00 	vldr	s15, [r5]
 800e0b0:	eef1 7a67 	vneg.f32	s15, s15
 800e0b4:	edc5 7a00 	vstr	s15, [r5]
 800e0b8:	e77f      	b.n	800dfba <kf_update+0x68e>
 800e0ba:	edd0 7a04 	vldr	s15, [r0, #16]
 800e0be:	ed82 8a05 	vstr	s16, [r2, #20]
 800e0c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e0c6:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 800e0ca:	edc0 7a04 	vstr	s15, [r0, #16]
 800e0ce:	edd5 7a00 	vldr	s15, [r5]
 800e0d2:	ed82 8a06 	vstr	s16, [r2, #24]
 800e0d6:	eef1 7a67 	vneg.f32	s15, s15
 800e0da:	edc5 7a00 	vstr	s15, [r5]
 800e0de:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 800e0e2:	edd5 7a00 	vldr	s15, [r5]
 800e0e6:	ed82 8a07 	vstr	s16, [r2, #28]
 800e0ea:	eef1 7a67 	vneg.f32	s15, s15
 800e0ee:	edc5 7a00 	vstr	s15, [r5]
 800e0f2:	ab68      	add	r3, sp, #416	; 0x1a0
 800e0f4:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 800e0f8:	edd5 7a00 	vldr	s15, [r5]
 800e0fc:	ed82 8a08 	vstr	s16, [r2, #32]
 800e100:	eef1 7a67 	vneg.f32	s15, s15
 800e104:	2908      	cmp	r1, #8
 800e106:	edc5 7a00 	vstr	s15, [r5]
 800e10a:	f47f af56 	bne.w	800dfba <kf_update+0x68e>
 800e10e:	edd0 7a08 	vldr	s15, [r0, #32]
 800e112:	00a5      	lsls	r5, r4, #2
 800e114:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e118:	e757      	b.n	800dfca <kf_update+0x69e>
 800e11a:	edd0 7a02 	vldr	s15, [r0, #8]
 800e11e:	ed82 8a03 	vstr	s16, [r2, #12]
 800e122:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e126:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 800e12a:	edc0 7a02 	vstr	s15, [r0, #8]
 800e12e:	edd5 7a00 	vldr	s15, [r5]
 800e132:	ed82 8a04 	vstr	s16, [r2, #16]
 800e136:	eef1 7a67 	vneg.f32	s15, s15
 800e13a:	edc5 7a00 	vstr	s15, [r5]
 800e13e:	e78e      	b.n	800e05e <kf_update+0x732>
 800e140:	edd0 7a01 	vldr	s15, [r0, #4]
 800e144:	ed82 8a02 	vstr	s16, [r2, #8]
 800e148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e14c:	ab68      	add	r3, sp, #416	; 0x1a0
 800e14e:	ed82 8a03 	vstr	s16, [r2, #12]
 800e152:	edc0 7a01 	vstr	s15, [r0, #4]
 800e156:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 800e15a:	edd5 7a00 	vldr	s15, [r5]
 800e15e:	eef1 7a67 	vneg.f32	s15, s15
 800e162:	edc5 7a00 	vstr	s15, [r5]
 800e166:	e76d      	b.n	800e044 <kf_update+0x718>
 800e168:	edd0 7a05 	vldr	s15, [r0, #20]
 800e16c:	ed82 8a06 	vstr	s16, [r2, #24]
 800e170:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e174:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 800e178:	edc0 7a05 	vstr	s15, [r0, #20]
 800e17c:	edd5 7a00 	vldr	s15, [r5]
 800e180:	ed82 8a07 	vstr	s16, [r2, #28]
 800e184:	eef1 7a67 	vneg.f32	s15, s15
 800e188:	edc5 7a00 	vstr	s15, [r5]
 800e18c:	ed82 8a08 	vstr	s16, [r2, #32]
 800e190:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 800e194:	edd5 7a00 	vldr	s15, [r5]
 800e198:	eef1 7a67 	vneg.f32	s15, s15
 800e19c:	edc5 7a00 	vstr	s15, [r5]
 800e1a0:	e70b      	b.n	800dfba <kf_update+0x68e>
 800e1a2:	9b06      	ldr	r3, [sp, #24]
 800e1a4:	2400      	movs	r4, #0
 800e1a6:	f506 70a2 	add.w	r0, r6, #324	; 0x144
 800e1aa:	ecf3 3a01 	vldmia	r3!, {s7}
 800e1ae:	ed93 4a08 	vldr	s8, [r3, #32]
 800e1b2:	edd3 4a11 	vldr	s9, [r3, #68]	; 0x44
 800e1b6:	ed93 5a1a 	vldr	s10, [r3, #104]	; 0x68
 800e1ba:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 800e1be:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 800e1c2:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 800e1c6:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800e1ca:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 800e1ce:	4632      	mov	r2, r6
 800e1d0:	4639      	mov	r1, r7
 800e1d2:	eef5 3a40 	vcmp.f32	s7, #0.0
 800e1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1da:	d00c      	beq.n	800e1f6 <kf_update+0x8ca>
 800e1dc:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
 800e1e0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800e1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e8:	d005      	beq.n	800e1f6 <kf_update+0x8ca>
 800e1ea:	edd1 2a00 	vldr	s5, [r1]
 800e1ee:	eee3 2a83 	vfma.f32	s5, s7, s6
 800e1f2:	edc1 2a00 	vstr	s5, [r1]
 800e1f6:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800e1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1fe:	d00c      	beq.n	800e21a <kf_update+0x8ee>
 800e200:	ed92 3a0b 	vldr	s6, [r2, #44]	; 0x2c
 800e204:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800e208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e20c:	d005      	beq.n	800e21a <kf_update+0x8ee>
 800e20e:	edd1 2a00 	vldr	s5, [r1]
 800e212:	eee4 2a03 	vfma.f32	s5, s8, s6
 800e216:	edc1 2a00 	vstr	s5, [r1]
 800e21a:	eef5 4a40 	vcmp.f32	s9, #0.0
 800e21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e222:	d00c      	beq.n	800e23e <kf_update+0x912>
 800e224:	ed92 3a0c 	vldr	s6, [r2, #48]	; 0x30
 800e228:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800e22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e230:	d005      	beq.n	800e23e <kf_update+0x912>
 800e232:	edd1 2a00 	vldr	s5, [r1]
 800e236:	eee4 2a83 	vfma.f32	s5, s9, s6
 800e23a:	edc1 2a00 	vstr	s5, [r1]
 800e23e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800e242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e246:	d00c      	beq.n	800e262 <kf_update+0x936>
 800e248:	ed92 3a0d 	vldr	s6, [r2, #52]	; 0x34
 800e24c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800e250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e254:	d005      	beq.n	800e262 <kf_update+0x936>
 800e256:	edd1 2a00 	vldr	s5, [r1]
 800e25a:	eee5 2a03 	vfma.f32	s5, s10, s6
 800e25e:	edc1 2a00 	vstr	s5, [r1]
 800e262:	eef5 5a40 	vcmp.f32	s11, #0.0
 800e266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26a:	d00c      	beq.n	800e286 <kf_update+0x95a>
 800e26c:	ed92 3a0e 	vldr	s6, [r2, #56]	; 0x38
 800e270:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800e274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e278:	d005      	beq.n	800e286 <kf_update+0x95a>
 800e27a:	edd1 2a00 	vldr	s5, [r1]
 800e27e:	eee5 2a83 	vfma.f32	s5, s11, s6
 800e282:	edc1 2a00 	vstr	s5, [r1]
 800e286:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e28e:	d00c      	beq.n	800e2aa <kf_update+0x97e>
 800e290:	ed92 3a0f 	vldr	s6, [r2, #60]	; 0x3c
 800e294:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800e298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e29c:	d005      	beq.n	800e2aa <kf_update+0x97e>
 800e29e:	edd1 2a00 	vldr	s5, [r1]
 800e2a2:	eee6 2a03 	vfma.f32	s5, s12, s6
 800e2a6:	edc1 2a00 	vstr	s5, [r1]
 800e2aa:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b2:	d00c      	beq.n	800e2ce <kf_update+0x9a2>
 800e2b4:	ed92 3a10 	vldr	s6, [r2, #64]	; 0x40
 800e2b8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800e2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c0:	d005      	beq.n	800e2ce <kf_update+0x9a2>
 800e2c2:	edd1 2a00 	vldr	s5, [r1]
 800e2c6:	eee6 2a83 	vfma.f32	s5, s13, s6
 800e2ca:	edc1 2a00 	vstr	s5, [r1]
 800e2ce:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d6:	d00c      	beq.n	800e2f2 <kf_update+0x9c6>
 800e2d8:	ed92 3a11 	vldr	s6, [r2, #68]	; 0x44
 800e2dc:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800e2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e4:	d005      	beq.n	800e2f2 <kf_update+0x9c6>
 800e2e6:	edd1 2a00 	vldr	s5, [r1]
 800e2ea:	eee7 2a03 	vfma.f32	s5, s14, s6
 800e2ee:	edc1 2a00 	vstr	s5, [r1]
 800e2f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2fa:	d00c      	beq.n	800e316 <kf_update+0x9ea>
 800e2fc:	ed92 3a12 	vldr	s6, [r2, #72]	; 0x48
 800e300:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800e304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e308:	d005      	beq.n	800e316 <kf_update+0x9ea>
 800e30a:	edd1 2a00 	vldr	s5, [r1]
 800e30e:	eee7 2a83 	vfma.f32	s5, s15, s6
 800e312:	edc1 2a00 	vstr	s5, [r1]
 800e316:	3224      	adds	r2, #36	; 0x24
 800e318:	4282      	cmp	r2, r0
 800e31a:	f101 0124 	add.w	r1, r1, #36	; 0x24
 800e31e:	f47f af58 	bne.w	800e1d2 <kf_update+0x8a6>
 800e322:	3401      	adds	r4, #1
 800e324:	2c09      	cmp	r4, #9
 800e326:	f107 0704 	add.w	r7, r7, #4
 800e32a:	f47f af3e 	bne.w	800e1aa <kf_update+0x87e>
 800e32e:	9805      	ldr	r0, [sp, #20]
 800e330:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800e334:	a9b9      	add	r1, sp, #740	; 0x2e4
 800e336:	f007 fa67 	bl	8015808 <memcpy>
 800e33a:	eef5 ba40 	vcmp.f32	s23, #0.0
 800e33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e342:	d05f      	beq.n	800e404 <kf_update+0xad8>
 800e344:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e34c:	d05a      	beq.n	800e404 <kf_update+0xad8>
 800e34e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800e352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e356:	ee68 baab 	vmul.f32	s23, s17, s23
 800e35a:	f000 812c 	beq.w	800e5b6 <kf_update+0xc8a>
 800e35e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800e362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e366:	ee2c ca28 	vmul.f32	s24, s24, s17
 800e36a:	f000 8121 	beq.w	800e5b0 <kf_update+0xc84>
 800e36e:	eeb5 da40 	vcmp.f32	s26, #0.0
 800e372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e376:	ee68 7a8a 	vmul.f32	s15, s17, s20
 800e37a:	f000 8114 	beq.w	800e5a6 <kf_update+0xc7a>
 800e37e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800e382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e386:	ee28 7a8d 	vmul.f32	s14, s17, s26
 800e38a:	eeb0 aa4c 	vmov.f32	s20, s24
 800e38e:	f040 812f 	bne.w	800e5f0 <kf_update+0xcc4>
 800e392:	eef0 ca47 	vmov.f32	s25, s14
 800e396:	eeb0 da67 	vmov.f32	s26, s15
 800e39a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800e39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3a2:	d065      	beq.n	800e470 <kf_update+0xb44>
 800e3a4:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ac:	f000 80f0 	beq.w	800e590 <kf_update+0xc64>
 800e3b0:	eef0 7a48 	vmov.f32	s15, s16
 800e3b4:	eef5 aa40 	vcmp.f32	s21, #0.0
 800e3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3bc:	ee28 7a8b 	vmul.f32	s14, s17, s22
 800e3c0:	d17d      	bne.n	800e4be <kf_update+0xb92>
 800e3c2:	eef0 aa47 	vmov.f32	s21, s14
 800e3c6:	eeb0 ba67 	vmov.f32	s22, s15
 800e3ca:	eef5 9a40 	vcmp.f32	s19, #0.0
 800e3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d2:	f000 8082 	beq.w	800e4da <kf_update+0xbae>
 800e3d6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3de:	f000 80da 	beq.w	800e596 <kf_update+0xc6a>
 800e3e2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ea:	ee28 7aa9 	vmul.f32	s14, s17, s19
 800e3ee:	eef0 7a48 	vmov.f32	s15, s16
 800e3f2:	f040 812a 	bne.w	800e64a <kf_update+0xd1e>
 800e3f6:	eef0 8a49 	vmov.f32	s17, s18
 800e3fa:	eef0 9a67 	vmov.f32	s19, s15
 800e3fe:	eeb0 9a47 	vmov.f32	s18, s14
 800e402:	e086      	b.n	800e512 <kf_update+0xbe6>
 800e404:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800e408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40c:	d005      	beq.n	800e41a <kf_update+0xaee>
 800e40e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e416:	f040 80f9 	bne.w	800e60c <kf_update+0xce0>
 800e41a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800e41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e422:	d071      	beq.n	800e508 <kf_update+0xbdc>
 800e424:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42c:	f040 8116 	bne.w	800e65c <kf_update+0xd30>
 800e430:	eeb0 aa68 	vmov.f32	s20, s17
 800e434:	eef0 ba68 	vmov.f32	s23, s17
 800e438:	eeb5 da40 	vcmp.f32	s26, #0.0
 800e43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e440:	d007      	beq.n	800e452 <kf_update+0xb26>
 800e442:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e44a:	f040 80c7 	bne.w	800e5dc <kf_update+0xcb0>
 800e44e:	eeb0 da68 	vmov.f32	s26, s17
 800e452:	eef5 ca40 	vcmp.f32	s25, #0.0
 800e456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45a:	d09e      	beq.n	800e39a <kf_update+0xa6e>
 800e45c:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e464:	f040 80f7 	bne.w	800e656 <kf_update+0xd2a>
 800e468:	eeb0 ba68 	vmov.f32	s22, s17
 800e46c:	eef0 ca68 	vmov.f32	s25, s17
 800e470:	eef5 aa40 	vcmp.f32	s21, #0.0
 800e474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e478:	d0a7      	beq.n	800e3ca <kf_update+0xa9e>
 800e47a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e482:	f040 80ce 	bne.w	800e622 <kf_update+0xcf6>
 800e486:	eef5 9a40 	vcmp.f32	s19, #0.0
 800e48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e48e:	f000 8087 	beq.w	800e5a0 <kf_update+0xc74>
 800e492:	eeb0 9a68 	vmov.f32	s18, s17
 800e496:	eef0 9a68 	vmov.f32	s19, s17
 800e49a:	eef0 aa68 	vmov.f32	s21, s17
 800e49e:	e038      	b.n	800e512 <kf_update+0xbe6>
 800e4a0:	9b00      	ldr	r3, [sp, #0]
 800e4a2:	edd3 8a00 	vldr	s17, [r3]
 800e4a6:	e493      	b.n	800ddd0 <kf_update+0x4a4>
 800e4a8:	eef5 ba40 	vcmp.f32	s23, #0.0
 800e4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b0:	bf14      	ite	ne
 800e4b2:	ee6b 7aad 	vmulne.f32	s15, s23, s27
 800e4b6:	eef0 7a6b 	vmoveq.f32	s15, s23
 800e4ba:	f7ff bb65 	b.w	800db88 <kf_update+0x25c>
 800e4be:	eef5 9a40 	vcmp.f32	s19, #0.0
 800e4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c6:	eeb0 ba67 	vmov.f32	s22, s15
 800e4ca:	ee68 7aaa 	vmul.f32	s15, s17, s21
 800e4ce:	f040 80b2 	bne.w	800e636 <kf_update+0xd0a>
 800e4d2:	eef0 9a67 	vmov.f32	s19, s15
 800e4d6:	eef0 aa47 	vmov.f32	s21, s14
 800e4da:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e2:	d014      	beq.n	800e50e <kf_update+0xbe2>
 800e4e4:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ec:	d04d      	beq.n	800e58a <kf_update+0xc5e>
 800e4ee:	eeb0 7a48 	vmov.f32	s14, s16
 800e4f2:	ee68 8a89 	vmul.f32	s17, s17, s18
 800e4f6:	eeb0 9a47 	vmov.f32	s18, s14
 800e4fa:	e00a      	b.n	800e512 <kf_update+0xbe6>
 800e4fc:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
 800e500:	ecbd 8b10 	vpop	{d8-d15}
 800e504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e508:	eef0 ba4a 	vmov.f32	s23, s20
 800e50c:	e794      	b.n	800e438 <kf_update+0xb0c>
 800e50e:	eef0 8a49 	vmov.f32	s17, s18
 800e512:	edd6 3a01 	vldr	s7, [r6, #4]
 800e516:	ed96 4a02 	vldr	s8, [r6, #8]
 800e51a:	edd6 4a03 	vldr	s9, [r6, #12]
 800e51e:	ed96 5a04 	vldr	s10, [r6, #16]
 800e522:	edd6 5a05 	vldr	s11, [r6, #20]
 800e526:	ed96 6a06 	vldr	s12, [r6, #24]
 800e52a:	edd6 6a07 	vldr	s13, [r6, #28]
 800e52e:	ed96 7a08 	vldr	s14, [r6, #32]
 800e532:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
 800e536:	ee73 baab 	vadd.f32	s23, s7, s23
 800e53a:	ee34 aa0a 	vadd.f32	s20, s8, s20
 800e53e:	ee34 da8d 	vadd.f32	s26, s9, s26
 800e542:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800e546:	ee35 ba8b 	vadd.f32	s22, s11, s22
 800e54a:	ee76 aa2a 	vadd.f32	s21, s12, s21
 800e54e:	ee76 9aa9 	vadd.f32	s19, s13, s19
 800e552:	ee37 9a09 	vadd.f32	s18, s14, s18
 800e556:	ee77 8aa8 	vadd.f32	s17, s15, s17
 800e55a:	edc6 ba01 	vstr	s23, [r6, #4]
 800e55e:	ed86 aa02 	vstr	s20, [r6, #8]
 800e562:	ed86 da03 	vstr	s26, [r6, #12]
 800e566:	edc6 ca04 	vstr	s25, [r6, #16]
 800e56a:	ed86 ba05 	vstr	s22, [r6, #20]
 800e56e:	edc6 aa06 	vstr	s21, [r6, #24]
 800e572:	edc6 9a07 	vstr	s19, [r6, #28]
 800e576:	ed86 9a08 	vstr	s18, [r6, #32]
 800e57a:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
 800e57e:	f7ff ba33 	b.w	800d9e8 <kf_update+0xbc>
 800e582:	eef0 7a6d 	vmov.f32	s15, s27
 800e586:	f7ff bbae 	b.w	800dce6 <kf_update+0x3ba>
 800e58a:	eeb0 9a68 	vmov.f32	s18, s17
 800e58e:	e7c0      	b.n	800e512 <kf_update+0xbe6>
 800e590:	eeb0 ba68 	vmov.f32	s22, s17
 800e594:	e76c      	b.n	800e470 <kf_update+0xb44>
 800e596:	eeb0 9a68 	vmov.f32	s18, s17
 800e59a:	eef0 9a68 	vmov.f32	s19, s17
 800e59e:	e7b8      	b.n	800e512 <kf_update+0xbe6>
 800e5a0:	eef0 aa69 	vmov.f32	s21, s19
 800e5a4:	e799      	b.n	800e4da <kf_update+0xbae>
 800e5a6:	eeb0 da67 	vmov.f32	s26, s15
 800e5aa:	eeb0 aa4c 	vmov.f32	s20, s24
 800e5ae:	e750      	b.n	800e452 <kf_update+0xb26>
 800e5b0:	eeb0 aa4c 	vmov.f32	s20, s24
 800e5b4:	e740      	b.n	800e438 <kf_update+0xb0c>
 800e5b6:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800e5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5be:	f43f af3b 	beq.w	800e438 <kf_update+0xb0c>
 800e5c2:	eeb5 da40 	vcmp.f32	s26, #0.0
 800e5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ca:	ee68 7a8a 	vmul.f32	s15, s17, s20
 800e5ce:	f47f aed6 	bne.w	800e37e <kf_update+0xa52>
 800e5d2:	e7e8      	b.n	800e5a6 <kf_update+0xc7a>
 800e5d4:	ee67 7aad 	vmul.f32	s15, s15, s27
 800e5d8:	f7ff bb85 	b.w	800dce6 <kf_update+0x3ba>
 800e5dc:	eef5 ca40 	vcmp.f32	s25, #0.0
 800e5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5e4:	ee28 7a8d 	vmul.f32	s14, s17, s26
 800e5e8:	eef0 7a48 	vmov.f32	s15, s16
 800e5ec:	f43f aed1 	beq.w	800e392 <kf_update+0xa66>
 800e5f0:	eeb0 da67 	vmov.f32	s26, s15
 800e5f4:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800e5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5fc:	ee68 7aac 	vmul.f32	s15, s17, s25
 800e600:	d126      	bne.n	800e650 <kf_update+0xd24>
 800e602:	eeb0 ba67 	vmov.f32	s22, s15
 800e606:	eef0 ca47 	vmov.f32	s25, s14
 800e60a:	e731      	b.n	800e470 <kf_update+0xb44>
 800e60c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800e610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e614:	ee2c ca28 	vmul.f32	s24, s24, s17
 800e618:	eef0 ba48 	vmov.f32	s23, s16
 800e61c:	f47f aea7 	bne.w	800e36e <kf_update+0xa42>
 800e620:	e7c6      	b.n	800e5b0 <kf_update+0xc84>
 800e622:	eef5 9a40 	vcmp.f32	s19, #0.0
 800e626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e62a:	ee68 7aaa 	vmul.f32	s15, s17, s21
 800e62e:	eeb0 7a48 	vmov.f32	s14, s16
 800e632:	f43f af4e 	beq.w	800e4d2 <kf_update+0xba6>
 800e636:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e63e:	eef0 aa47 	vmov.f32	s21, s14
 800e642:	ee28 7aa9 	vmul.f32	s14, s17, s19
 800e646:	f43f aed6 	beq.w	800e3f6 <kf_update+0xaca>
 800e64a:	eef0 9a67 	vmov.f32	s19, s15
 800e64e:	e750      	b.n	800e4f2 <kf_update+0xbc6>
 800e650:	eef0 ca47 	vmov.f32	s25, s14
 800e654:	e6ae      	b.n	800e3b4 <kf_update+0xa88>
 800e656:	eeb0 7a48 	vmov.f32	s14, s16
 800e65a:	e7cb      	b.n	800e5f4 <kf_update+0xcc8>
 800e65c:	ed9f ca06 	vldr	s24, [pc, #24]	; 800e678 <kf_update+0xd4c>
 800e660:	eeb5 da40 	vcmp.f32	s26, #0.0
 800e664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e668:	ee68 7a8a 	vmul.f32	s15, s17, s20
 800e66c:	eef0 ba4c 	vmov.f32	s23, s24
 800e670:	f47f ae85 	bne.w	800e37e <kf_update+0xa52>
 800e674:	e797      	b.n	800e5a6 <kf_update+0xc7a>
 800e676:	bf00      	nop
 800e678:	00000000 	.word	0x00000000

0800e67c <q2hpr>:
 800e67c:	b510      	push	{r4, lr}
 800e67e:	ed90 7a00 	vldr	s14, [r0]
 800e682:	edd0 6a01 	vldr	s13, [r0, #4]
 800e686:	edd0 7a02 	vldr	s15, [r0, #8]
 800e68a:	edd0 4a03 	vldr	s9, [r0, #12]
 800e68e:	ed2d 8b0a 	vpush	{d8-d12}
 800e692:	ee27 0a26 	vmul.f32	s0, s14, s13
 800e696:	ee27 5a27 	vmul.f32	s10, s14, s15
 800e69a:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800e69e:	ee67 0a07 	vmul.f32	s1, s14, s14
 800e6a2:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800e6a6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e6aa:	ee27 7a24 	vmul.f32	s14, s14, s9
 800e6ae:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800e6b2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800e6b6:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800e6ba:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800e6be:	ee36 ba06 	vadd.f32	s22, s12, s12
 800e6c2:	ee70 aa00 	vadd.f32	s21, s0, s0
 800e6c6:	ee35 ca05 	vadd.f32	s24, s10, s10
 800e6ca:	ee77 8a07 	vadd.f32	s17, s14, s14
 800e6ce:	ee75 baa5 	vadd.f32	s23, s11, s11
 800e6d2:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800e6d6:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800e6da:	460c      	mov	r4, r1
 800e6dc:	bb8a      	cbnz	r2, 800e742 <q2hpr+0xc6>
 800e6de:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800e6e2:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800e6e6:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800e6ea:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800e6ee:	f009 fe53 	bl	8018398 <atan2f>
 800e6f2:	eeb0 8a40 	vmov.f32	s16, s0
 800e6f6:	ed84 8a00 	vstr	s16, [r4]
 800e6fa:	ee38 0aab 	vadd.f32	s0, s17, s23
 800e6fe:	f009 fe1f 	bl	8018340 <asinf>
 800e702:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800e706:	eef0 8a40 	vmov.f32	s17, s0
 800e70a:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800e70e:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800e712:	f009 fe41 	bl	8018398 <atan2f>
 800e716:	eef1 8a68 	vneg.f32	s17, s17
 800e71a:	eeb0 9a40 	vmov.f32	s18, s0
 800e71e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e726:	ed84 9a02 	vstr	s18, [r4, #8]
 800e72a:	edc4 8a01 	vstr	s17, [r4, #4]
 800e72e:	d505      	bpl.n	800e73c <q2hpr+0xc0>
 800e730:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800e788 <q2hpr+0x10c>
 800e734:	ee38 8a00 	vadd.f32	s16, s16, s0
 800e738:	ed84 8a00 	vstr	s16, [r4]
 800e73c:	ecbd 8b0a 	vpop	{d8-d12}
 800e740:	bd10      	pop	{r4, pc}
 800e742:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800e746:	f009 fdfb 	bl	8018340 <asinf>
 800e74a:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800e74e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800e752:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800e756:	eeb0 9a40 	vmov.f32	s18, s0
 800e75a:	ee38 0aab 	vadd.f32	s0, s17, s23
 800e75e:	f009 fe1b 	bl	8018398 <atan2f>
 800e762:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800e766:	eef0 8a40 	vmov.f32	s17, s0
 800e76a:	ee3a 0a88 	vadd.f32	s0, s21, s16
 800e76e:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800e772:	eeb1 0a40 	vneg.f32	s0, s0
 800e776:	f009 fe0f 	bl	8018398 <atan2f>
 800e77a:	eef1 8a68 	vneg.f32	s17, s17
 800e77e:	eeb0 8a40 	vmov.f32	s16, s0
 800e782:	ed84 0a00 	vstr	s0, [r4]
 800e786:	e7ca      	b.n	800e71e <q2hpr+0xa2>
 800e788:	40c90fdb 	.word	0x40c90fdb

0800e78c <output_update>:
 800e78c:	edd0 7a01 	vldr	s15, [r0, #4]
 800e790:	edd0 5a00 	vldr	s11, [r0]
 800e794:	edd0 6a02 	vldr	s13, [r0, #8]
 800e798:	ed90 5a03 	vldr	s10, [r0, #12]
 800e79c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a4:	ee27 7aa6 	vmul.f32	s14, s15, s13
 800e7a8:	eea5 6aa5 	vfma.f32	s12, s11, s11
 800e7ac:	4615      	mov	r5, r2
 800e7ae:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800e7b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e7b6:	eea5 7a85 	vfma.f32	s14, s11, s10
 800e7ba:	460f      	mov	r7, r1
 800e7bc:	461e      	mov	r6, r3
 800e7be:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800e7c2:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e7c6:	ee36 6a06 	vadd.f32	s12, s12, s12
 800e7ca:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e7ce:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e7d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e7d6:	ee37 7a07 	vadd.f32	s14, s14, s14
 800e7da:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800e7de:	2a00      	cmp	r2, #0
 800e7e0:	d145      	bne.n	800e86e <output_update+0xe2>
 800e7e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e7e6:	eeb1 7a47 	vneg.f32	s14, s14
 800e7ea:	ed83 7a00 	vstr	s14, [r3]
 800e7ee:	edc3 7a01 	vstr	s15, [r3, #4]
 800e7f2:	ed83 5a02 	vstr	s10, [r3, #8]
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	4604      	mov	r4, r0
 800e7fa:	f7ff ff3f 	bl	800e67c <q2hpr>
 800e7fe:	ed95 7a01 	vldr	s14, [r5, #4]
 800e802:	edd5 7a02 	vldr	s15, [r5, #8]
 800e806:	edd5 6a00 	vldr	s13, [r5]
 800e80a:	ed9f 6a43 	vldr	s12, [pc, #268]	; 800e918 <output_update+0x18c>
 800e80e:	ee27 7a46 	vnmul.f32	s14, s14, s12
 800e812:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800e816:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e81a:	ed85 7a01 	vstr	s14, [r5, #4]
 800e81e:	edc5 6a00 	vstr	s13, [r5]
 800e822:	edc5 7a02 	vstr	s15, [r5, #8]
 800e826:	ed97 7a01 	vldr	s14, [r7, #4]
 800e82a:	edd6 7a00 	vldr	s15, [r6]
 800e82e:	6823      	ldr	r3, [r4, #0]
 800e830:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e834:	edc8 7a00 	vstr	s15, [r8]
 800e838:	ed97 7a00 	vldr	s14, [r7]
 800e83c:	edd6 7a01 	vldr	s15, [r6, #4]
 800e840:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e844:	edc8 7a01 	vstr	s15, [r8, #4]
 800e848:	edd6 7a02 	vldr	s15, [r6, #8]
 800e84c:	ed97 7a02 	vldr	s14, [r7, #8]
 800e850:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e854:	edc8 7a02 	vstr	s15, [r8, #8]
 800e858:	edd4 7a02 	vldr	s15, [r4, #8]
 800e85c:	6862      	ldr	r2, [r4, #4]
 800e85e:	6022      	str	r2, [r4, #0]
 800e860:	eef1 7a67 	vneg.f32	s15, s15
 800e864:	6063      	str	r3, [r4, #4]
 800e866:	edc4 7a02 	vstr	s15, [r4, #8]
 800e86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e86e:	2a01      	cmp	r2, #1
 800e870:	d015      	beq.n	800e89e <output_update+0x112>
 800e872:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800e918 <output_update+0x18c>
 800e876:	edd5 6a00 	vldr	s13, [r5]
 800e87a:	ed95 7a01 	vldr	s14, [r5, #4]
 800e87e:	edd5 7a02 	vldr	s15, [r5, #8]
 800e882:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e886:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e88a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e88e:	edc5 6a00 	vstr	s13, [r5]
 800e892:	ed85 7a01 	vstr	s14, [r5, #4]
 800e896:	edc5 7a02 	vstr	s15, [r5, #8]
 800e89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e89e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e8a2:	ee36 6a65 	vsub.f32	s12, s12, s11
 800e8a6:	eeb1 7a47 	vneg.f32	s14, s14
 800e8aa:	edc3 7a00 	vstr	s15, [r3]
 800e8ae:	ed83 7a01 	vstr	s14, [r3, #4]
 800e8b2:	ed83 6a02 	vstr	s12, [r3, #8]
 800e8b6:	4629      	mov	r1, r5
 800e8b8:	f7ff fee0 	bl	800e67c <q2hpr>
 800e8bc:	edd5 6a00 	vldr	s13, [r5]
 800e8c0:	ed95 7a01 	vldr	s14, [r5, #4]
 800e8c4:	edd5 7a02 	vldr	s15, [r5, #8]
 800e8c8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800e918 <output_update+0x18c>
 800e8cc:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e8d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e8d4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e8d8:	ed85 7a01 	vstr	s14, [r5, #4]
 800e8dc:	edc5 6a00 	vstr	s13, [r5]
 800e8e0:	edc5 7a02 	vstr	s15, [r5, #8]
 800e8e4:	ed97 7a00 	vldr	s14, [r7]
 800e8e8:	edd6 7a00 	vldr	s15, [r6]
 800e8ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e8f0:	edc8 7a00 	vstr	s15, [r8]
 800e8f4:	ed97 7a01 	vldr	s14, [r7, #4]
 800e8f8:	edd6 7a01 	vldr	s15, [r6, #4]
 800e8fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e900:	edc8 7a01 	vstr	s15, [r8, #4]
 800e904:	edd6 7a02 	vldr	s15, [r6, #8]
 800e908:	ed97 7a02 	vldr	s14, [r7, #8]
 800e90c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e910:	edc8 7a02 	vstr	s15, [r8, #8]
 800e914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e918:	42652ee1 	.word	0x42652ee1
 800e91c:	00000000 	.word	0x00000000

0800e920 <MFX_emptyAttitude>:
 800e920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e924:	ed2d 8b02 	vpush	{d8}
 800e928:	4fe9      	ldr	r7, [pc, #932]	; (800ecd0 <MFX_emptyAttitude+0x3b0>)
 800e92a:	eddf 8aea 	vldr	s17, [pc, #936]	; 800ecd4 <MFX_emptyAttitude+0x3b4>
 800e92e:	f6ad 4dd4 	subw	sp, sp, #3284	; 0xcd4
 800e932:	f50d 64d7 	add.w	r4, sp, #1720	; 0x6b8
 800e936:	f04f 0800 	mov.w	r8, #0
 800e93a:	46bc      	mov	ip, r7
 800e93c:	e9c4 8800 	strd	r8, r8, [r4]
 800e940:	f83c 3b04 	ldrh.w	r3, [ip], #4
 800e944:	f8c4 8008 	str.w	r8, [r4, #8]
 800e948:	f88d 854a 	strb.w	r8, [sp, #1354]	; 0x54a
 800e94c:	f8ad 3548 	strh.w	r3, [sp, #1352]	; 0x548
 800e950:	4681      	mov	r9, r0
 800e952:	f8dd 3548 	ldr.w	r3, [sp, #1352]	; 0x548
 800e956:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e95a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e95e:	0c1b      	lsrs	r3, r3, #16
 800e960:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e964:	ab2b      	add	r3, sp, #172	; 0xac
 800e966:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e96a:	ab2e      	add	r3, sp, #184	; 0xb8
 800e96c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e970:	ab31      	add	r3, sp, #196	; 0xc4
 800e972:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e976:	ab34      	add	r3, sp, #208	; 0xd0
 800e978:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e97c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e980:	ab37      	add	r3, sp, #220	; 0xdc
 800e982:	edcd 8a08 	vstr	s17, [sp, #32]
 800e986:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 800e98a:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 800e98e:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 800e992:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e996:	ab3a      	add	r3, sp, #232	; 0xe8
 800e998:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e99c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e9a0:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 800e9a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e9a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e9ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e9b0:	f44f 75b4 	mov.w	r5, #360	; 0x168
 800e9b4:	f8dc 3000 	ldr.w	r3, [ip]
 800e9b8:	f8ce 3000 	str.w	r3, [lr]
 800e9bc:	462a      	mov	r2, r5
 800e9be:	4641      	mov	r1, r8
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	f006 fee9 	bl	8015798 <memset>
 800e9c6:	f44f 56f0 	mov.w	r6, #7680	; 0x1e00
 800e9ca:	462a      	mov	r2, r5
 800e9cc:	4621      	mov	r1, r4
 800e9ce:	a840      	add	r0, sp, #256	; 0x100
 800e9d0:	f8ad 60f8 	strh.w	r6, [sp, #248]	; 0xf8
 800e9d4:	f006 ff18 	bl	8015808 <memcpy>
 800e9d8:	462a      	mov	r2, r5
 800e9da:	4641      	mov	r1, r8
 800e9dc:	4620      	mov	r0, r4
 800e9de:	ed8d 8a3f 	vstr	s16, [sp, #252]	; 0xfc
 800e9e2:	f006 fed9 	bl	8015798 <memset>
 800e9e6:	462a      	mov	r2, r5
 800e9e8:	4621      	mov	r1, r4
 800e9ea:	a89c      	add	r0, sp, #624	; 0x270
 800e9ec:	f8ad 6268 	strh.w	r6, [sp, #616]	; 0x268
 800e9f0:	f006 ff0a 	bl	8015808 <memcpy>
 800e9f4:	462a      	mov	r2, r5
 800e9f6:	4641      	mov	r1, r8
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	ed8d 8a9b 	vstr	s16, [sp, #620]	; 0x26c
 800e9fe:	f006 fecb 	bl	8015798 <memset>
 800ea02:	462a      	mov	r2, r5
 800ea04:	4621      	mov	r1, r4
 800ea06:	a8f8      	add	r0, sp, #992	; 0x3e0
 800ea08:	f8ad 63d8 	strh.w	r6, [sp, #984]	; 0x3d8
 800ea0c:	f006 fefc 	bl	8015808 <memcpy>
 800ea10:	462a      	mov	r2, r5
 800ea12:	4641      	mov	r1, r8
 800ea14:	4620      	mov	r0, r4
 800ea16:	ed8d 8af7 	vstr	s16, [sp, #988]	; 0x3dc
 800ea1a:	f006 febd 	bl	8015798 <memset>
 800ea1e:	462a      	mov	r2, r5
 800ea20:	4621      	mov	r1, r4
 800ea22:	f50d 60aa 	add.w	r0, sp, #1360	; 0x550
 800ea26:	f8ad 6548 	strh.w	r6, [sp, #1352]	; 0x548
 800ea2a:	f006 feed 	bl	8015808 <memcpy>
 800ea2e:	f04f 0301 	mov.w	r3, #1
 800ea32:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 800ea36:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800ea3a:	4ba7      	ldr	r3, [pc, #668]	; (800ecd8 <MFX_emptyAttitude+0x3b8>)
 800ea3c:	9320      	str	r3, [sp, #128]	; 0x80
 800ea3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea40:	ae0c      	add	r6, sp, #48	; 0x30
 800ea42:	46b3      	mov	fp, r6
 800ea44:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ea46:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800ea4a:	e9c4 8800 	strd	r8, r8, [r4]
 800ea4e:	e9c4 8802 	strd	r8, r8, [r4, #8]
 800ea52:	f8c4 8010 	str.w	r8, [r4, #16]
 800ea56:	f10d 0c6c 	add.w	ip, sp, #108	; 0x6c
 800ea5a:	46a6      	mov	lr, r4
 800ea5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ea64:	f50d 6aa9 	add.w	sl, sp, #1352	; 0x548
 800ea68:	682d      	ldr	r5, [r5, #0]
 800ea6a:	f8cc 5000 	str.w	r5, [ip]
 800ea6e:	af21      	add	r7, sp, #132	; 0x84
 800ea70:	ed8a 8a01 	vstr	s16, [sl, #4]
 800ea74:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ea76:	ab1a      	add	r3, sp, #104	; 0x68
 800ea78:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ea7c:	abf6      	add	r3, sp, #984	; 0x3d8
 800ea7e:	9300      	str	r3, [sp, #0]
 800ea80:	aa3e      	add	r2, sp, #248	; 0xf8
 800ea82:	f8c7 8000 	str.w	r8, [r7]
 800ea86:	ab9a      	add	r3, sp, #616	; 0x268
 800ea88:	a911      	add	r1, sp, #68	; 0x44
 800ea8a:	9403      	str	r4, [sp, #12]
 800ea8c:	2001      	movs	r0, #1
 800ea8e:	f7fe fa49 	bl	800cf24 <DataHist_parameters>
 800ea92:	4b92      	ldr	r3, [pc, #584]	; (800ecdc <MFX_emptyAttitude+0x3bc>)
 800ea94:	f8c9 3018 	str.w	r3, [r9, #24]
 800ea98:	4b91      	ldr	r3, [pc, #580]	; (800ece0 <MFX_emptyAttitude+0x3c0>)
 800ea9a:	f8c9 301c 	str.w	r3, [r9, #28]
 800ea9e:	4b91      	ldr	r3, [pc, #580]	; (800ece4 <MFX_emptyAttitude+0x3c4>)
 800eaa0:	f8c9 3020 	str.w	r3, [r9, #32]
 800eaa4:	4b90      	ldr	r3, [pc, #576]	; (800ece8 <MFX_emptyAttitude+0x3c8>)
 800eaa6:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 800eaaa:	ae2b      	add	r6, sp, #172	; 0xac
 800eaac:	4b8f      	ldr	r3, [pc, #572]	; (800ecec <MFX_emptyAttitude+0x3cc>)
 800eaae:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 800eab2:	ce07      	ldmia	r6!, {r0, r1, r2}
 800eab4:	4b8e      	ldr	r3, [pc, #568]	; (800ecf0 <MFX_emptyAttitude+0x3d0>)
 800eab6:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
 800eaba:	4b8e      	ldr	r3, [pc, #568]	; (800ecf4 <MFX_emptyAttitude+0x3d4>)
 800eabc:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 800eac0:	4b8d      	ldr	r3, [pc, #564]	; (800ecf8 <MFX_emptyAttitude+0x3d8>)
 800eac2:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 800eac6:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 800eaca:	f8a9 3070 	strh.w	r3, [r9, #112]	; 0x70
 800eace:	ad2e      	add	r5, sp, #184	; 0xb8
 800ead0:	f89d 30aa 	ldrb.w	r3, [sp, #170]	; 0xaa
 800ead4:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800ead8:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
 800eadc:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
 800eae0:	cd07      	ldmia	r5!, {r0, r1, r2}
 800eae2:	f889 3072 	strb.w	r3, [r9, #114]	; 0x72
 800eae6:	f240 1301 	movw	r3, #257	; 0x101
 800eaea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800ecc8 <MFX_emptyAttitude+0x3a8>
 800eaee:	f8a9 3000 	strh.w	r3, [r9]
 800eaf2:	f8a9 3004 	strh.w	r3, [r9, #4]
 800eaf6:	4b81      	ldr	r3, [pc, #516]	; (800ecfc <MFX_emptyAttitude+0x3dc>)
 800eaf8:	f8c9 300c 	str.w	r3, [r9, #12]
 800eafc:	4b80      	ldr	r3, [pc, #512]	; (800ed00 <MFX_emptyAttitude+0x3e0>)
 800eafe:	f8c9 3014 	str.w	r3, [r9, #20]
 800eb02:	f509 7346 	add.w	r3, r9, #792	; 0x318
 800eb06:	9304      	str	r3, [sp, #16]
 800eb08:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
 800eb0c:	ed89 6b16 	vstr	d6, [r9, #88]	; 0x58
 800eb10:	ed89 6b18 	vstr	d6, [r9, #96]	; 0x60
 800eb14:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 800eb18:	f8a9 8002 	strh.w	r8, [r9, #2]
 800eb1c:	ed89 8a02 	vstr	s16, [r9, #8]
 800eb20:	ed89 8a04 	vstr	s16, [r9, #16]
 800eb24:	ed89 6b1a 	vstr	d6, [r9, #104]	; 0x68
 800eb28:	f8c9 1084 	str.w	r1, [r9, #132]	; 0x84
 800eb2c:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
 800eb30:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 800eb34:	f10d 0bd0 	add.w	fp, sp, #208	; 0xd0
 800eb38:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
 800eb3c:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
 800eb40:	f8c9 2094 	str.w	r2, [r9, #148]	; 0x94
 800eb44:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800eb48:	af37      	add	r7, sp, #220	; 0xdc
 800eb4a:	f8c9 0098 	str.w	r0, [r9, #152]	; 0x98
 800eb4e:	f8c9 109c 	str.w	r1, [r9, #156]	; 0x9c
 800eb52:	f8c9 20a0 	str.w	r2, [r9, #160]	; 0xa0
 800eb56:	cf07      	ldmia	r7!, {r0, r1, r2}
 800eb58:	f10d 0ee8 	add.w	lr, sp, #232	; 0xe8
 800eb5c:	f8c9 00a4 	str.w	r0, [r9, #164]	; 0xa4
 800eb60:	f8c9 10a8 	str.w	r1, [r9, #168]	; 0xa8
 800eb64:	f8c9 20ac 	str.w	r2, [r9, #172]	; 0xac
 800eb68:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 800eb6c:	eddf 7a65 	vldr	s15, [pc, #404]	; 800ed04 <MFX_emptyAttitude+0x3e4>
 800eb70:	ed9f 5a65 	vldr	s10, [pc, #404]	; 800ed08 <MFX_emptyAttitude+0x3e8>
 800eb74:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800ed0c <MFX_emptyAttitude+0x3ec>
 800eb78:	f8c9 00b0 	str.w	r0, [r9, #176]	; 0xb0
 800eb7c:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800eb80:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800eb84:	f8c9 10b4 	str.w	r1, [r9, #180]	; 0xb4
 800eb88:	ed89 5a65 	vstr	s10, [r9, #404]	; 0x194
 800eb8c:	edc9 5a66 	vstr	s11, [r9, #408]	; 0x198
 800eb90:	ed89 7a67 	vstr	s14, [r9, #412]	; 0x19c
 800eb94:	edc9 8a64 	vstr	s17, [r9, #400]	; 0x190
 800eb98:	edc9 8a30 	vstr	s17, [r9, #192]	; 0xc0
 800eb9c:	edc9 8a4a 	vstr	s17, [r9, #296]	; 0x128
 800eba0:	edc9 8a31 	vstr	s17, [r9, #196]	; 0xc4
 800eba4:	f04f 0101 	mov.w	r1, #1
 800eba8:	f8c9 20b8 	str.w	r2, [r9, #184]	; 0xb8
 800ebac:	edc9 8a4b 	vstr	s17, [r9, #300]	; 0x12c
 800ebb0:	edc9 8a32 	vstr	s17, [r9, #200]	; 0xc8
 800ebb4:	edc9 8a4c 	vstr	s17, [r9, #304]	; 0x130
 800ebb8:	edc9 8a33 	vstr	s17, [r9, #204]	; 0xcc
 800ebbc:	edc9 8a4d 	vstr	s17, [r9, #308]	; 0x134
 800ebc0:	edc9 8a34 	vstr	s17, [r9, #208]	; 0xd0
 800ebc4:	edc9 8a4e 	vstr	s17, [r9, #312]	; 0x138
 800ebc8:	edc9 8a35 	vstr	s17, [r9, #212]	; 0xd4
 800ebcc:	edc9 8a4f 	vstr	s17, [r9, #316]	; 0x13c
 800ebd0:	edc9 8a36 	vstr	s17, [r9, #216]	; 0xd8
 800ebd4:	edc9 8a50 	vstr	s17, [r9, #320]	; 0x140
 800ebd8:	edc9 8a37 	vstr	s17, [r9, #220]	; 0xdc
 800ebdc:	edc9 8a51 	vstr	s17, [r9, #324]	; 0x144
 800ebe0:	edc9 8a38 	vstr	s17, [r9, #224]	; 0xe0
 800ebe4:	edc9 8a52 	vstr	s17, [r9, #328]	; 0x148
 800ebe8:	edc9 8a39 	vstr	s17, [r9, #228]	; 0xe4
 800ebec:	edc9 8a53 	vstr	s17, [r9, #332]	; 0x14c
 800ebf0:	edc9 8a3a 	vstr	s17, [r9, #232]	; 0xe8
 800ebf4:	edc9 8a54 	vstr	s17, [r9, #336]	; 0x150
 800ebf8:	edc9 8a3b 	vstr	s17, [r9, #236]	; 0xec
 800ebfc:	edc9 8a55 	vstr	s17, [r9, #340]	; 0x154
 800ec00:	edc9 8a3c 	vstr	s17, [r9, #240]	; 0xf0
 800ec04:	edc9 8a56 	vstr	s17, [r9, #344]	; 0x158
 800ec08:	edc9 8a3d 	vstr	s17, [r9, #244]	; 0xf4
 800ec0c:	edc9 8a57 	vstr	s17, [r9, #348]	; 0x15c
 800ec10:	edc9 8a3e 	vstr	s17, [r9, #248]	; 0xf8
 800ec14:	edc9 8a58 	vstr	s17, [r9, #352]	; 0x160
 800ec18:	edc9 8a3f 	vstr	s17, [r9, #252]	; 0xfc
 800ec1c:	edc9 8a59 	vstr	s17, [r9, #356]	; 0x164
 800ec20:	edc9 8a40 	vstr	s17, [r9, #256]	; 0x100
 800ec24:	edc9 8a5a 	vstr	s17, [r9, #360]	; 0x168
 800ec28:	edc9 8a41 	vstr	s17, [r9, #260]	; 0x104
 800ec2c:	edc9 8a5b 	vstr	s17, [r9, #364]	; 0x16c
 800ec30:	f8c9 c1a0 	str.w	ip, [r9, #416]	; 0x1a0
 800ec34:	edc9 7a75 	vstr	s15, [r9, #468]	; 0x1d4
 800ec38:	edc9 7a7f 	vstr	s15, [r9, #508]	; 0x1fc
 800ec3c:	edc9 8a42 	vstr	s17, [r9, #264]	; 0x108
 800ec40:	edc9 8a5c 	vstr	s17, [r9, #368]	; 0x170
 800ec44:	edc9 8a43 	vstr	s17, [r9, #268]	; 0x10c
 800ec48:	edc9 8a5d 	vstr	s17, [r9, #372]	; 0x174
 800ec4c:	edc9 8a44 	vstr	s17, [r9, #272]	; 0x110
 800ec50:	edc9 8a5e 	vstr	s17, [r9, #376]	; 0x178
 800ec54:	edc9 8a45 	vstr	s17, [r9, #276]	; 0x114
 800ec58:	edc9 8a5f 	vstr	s17, [r9, #380]	; 0x17c
 800ec5c:	edc9 8a46 	vstr	s17, [r9, #280]	; 0x118
 800ec60:	edc9 8a60 	vstr	s17, [r9, #384]	; 0x180
 800ec64:	edc9 8a47 	vstr	s17, [r9, #284]	; 0x11c
 800ec68:	edc9 8a61 	vstr	s17, [r9, #388]	; 0x184
 800ec6c:	edc9 8a48 	vstr	s17, [r9, #288]	; 0x120
 800ec70:	edc9 8a62 	vstr	s17, [r9, #392]	; 0x188
 800ec74:	edc9 8a49 	vstr	s17, [r9, #292]	; 0x124
 800ec78:	edc9 8a63 	vstr	s17, [r9, #396]	; 0x18c
 800ec7c:	f889 81a4 	strb.w	r8, [r9, #420]	; 0x1a4
 800ec80:	f8c9 81a6 	str.w	r8, [r9, #422]	; 0x1a6
 800ec84:	edc9 8a6c 	vstr	s17, [r9, #432]	; 0x1b0
 800ec88:	edc9 8a76 	vstr	s17, [r9, #472]	; 0x1d8
 800ec8c:	edc9 8a77 	vstr	s17, [r9, #476]	; 0x1dc
 800ec90:	edc9 8a78 	vstr	s17, [r9, #480]	; 0x1e0
 800ec94:	edc9 8a79 	vstr	s17, [r9, #484]	; 0x1e4
 800ec98:	edc9 8a7a 	vstr	s17, [r9, #488]	; 0x1e8
 800ec9c:	edc9 8a7b 	vstr	s17, [r9, #492]	; 0x1ec
 800eca0:	edc9 8a7c 	vstr	s17, [r9, #496]	; 0x1f0
 800eca4:	edc9 8a7d 	vstr	s17, [r9, #500]	; 0x1f4
 800eca8:	edc9 8a6d 	vstr	s17, [r9, #436]	; 0x1b4
 800ecac:	edc9 8a7e 	vstr	s17, [r9, #504]	; 0x1f8
 800ecb0:	edc9 8a80 	vstr	s17, [r9, #512]	; 0x200
 800ecb4:	edc9 7a89 	vstr	s15, [r9, #548]	; 0x224
 800ecb8:	edc9 7a93 	vstr	s15, [r9, #588]	; 0x24c
 800ecbc:	edc9 7a9d 	vstr	s15, [r9, #628]	; 0x274
 800ecc0:	e026      	b.n	800ed10 <MFX_emptyAttitude+0x3f0>
 800ecc2:	bf00      	nop
 800ecc4:	f3af 8000 	nop.w
	...
 800ecd0:	0801a86c 	.word	0x0801a86c
 800ecd4:	00000000 	.word	0x00000000
 800ecd8:	40a00000 	.word	0x40a00000
 800ecdc:	3a9d4952 	.word	0x3a9d4952
 800ece0:	3ac49ba6 	.word	0x3ac49ba6
 800ece4:	3b03126f 	.word	0x3b03126f
 800ece8:	3a83126f 	.word	0x3a83126f
 800ecec:	3f639581 	.word	0x3f639581
 800ecf0:	402ab021 	.word	0x402ab021
 800ecf4:	3f13f7cf 	.word	0x3f13f7cf
 800ecf8:	3f2ac083 	.word	0x3f2ac083
 800ecfc:	01010100 	.word	0x01010100
 800ed00:	41200000 	.word	0x41200000
 800ed04:	447a0000 	.word	0x447a0000
 800ed08:	3f4ccccd 	.word	0x3f4ccccd
 800ed0c:	3f333333 	.word	0x3f333333
 800ed10:	edc9 8a81 	vstr	s17, [r9, #516]	; 0x204
 800ed14:	edc9 8a82 	vstr	s17, [r9, #520]	; 0x208
 800ed18:	edc9 8a83 	vstr	s17, [r9, #524]	; 0x20c
 800ed1c:	edc9 8a84 	vstr	s17, [r9, #528]	; 0x210
 800ed20:	edc9 8a85 	vstr	s17, [r9, #532]	; 0x214
 800ed24:	edc9 8a86 	vstr	s17, [r9, #536]	; 0x218
 800ed28:	edc9 8a6e 	vstr	s17, [r9, #440]	; 0x1b8
 800ed2c:	edc9 8a87 	vstr	s17, [r9, #540]	; 0x21c
 800ed30:	edc9 8a88 	vstr	s17, [r9, #544]	; 0x220
 800ed34:	edc9 8a8a 	vstr	s17, [r9, #552]	; 0x228
 800ed38:	edc9 8a8b 	vstr	s17, [r9, #556]	; 0x22c
 800ed3c:	edc9 8a8c 	vstr	s17, [r9, #560]	; 0x230
 800ed40:	edc9 8a8d 	vstr	s17, [r9, #564]	; 0x234
 800ed44:	edc9 8a8e 	vstr	s17, [r9, #568]	; 0x238
 800ed48:	edc9 8a8f 	vstr	s17, [r9, #572]	; 0x23c
 800ed4c:	edc9 8a6f 	vstr	s17, [r9, #444]	; 0x1bc
 800ed50:	edc9 8a90 	vstr	s17, [r9, #576]	; 0x240
 800ed54:	edc9 8a91 	vstr	s17, [r9, #580]	; 0x244
 800ed58:	edc9 8a92 	vstr	s17, [r9, #584]	; 0x248
 800ed5c:	edc9 8a94 	vstr	s17, [r9, #592]	; 0x250
 800ed60:	edc9 8a95 	vstr	s17, [r9, #596]	; 0x254
 800ed64:	edc9 8a96 	vstr	s17, [r9, #600]	; 0x258
 800ed68:	edc9 8a97 	vstr	s17, [r9, #604]	; 0x25c
 800ed6c:	edc9 8a98 	vstr	s17, [r9, #608]	; 0x260
 800ed70:	edc9 8a70 	vstr	s17, [r9, #448]	; 0x1c0
 800ed74:	edc9 8a99 	vstr	s17, [r9, #612]	; 0x264
 800ed78:	edc9 8a9a 	vstr	s17, [r9, #616]	; 0x268
 800ed7c:	edc9 8a9b 	vstr	s17, [r9, #620]	; 0x26c
 800ed80:	edc9 8a9c 	vstr	s17, [r9, #624]	; 0x270
 800ed84:	edc9 8a9e 	vstr	s17, [r9, #632]	; 0x278
 800ed88:	edc9 7aa7 	vstr	s15, [r9, #668]	; 0x29c
 800ed8c:	edc9 7ab1 	vstr	s15, [r9, #708]	; 0x2c4
 800ed90:	edc9 7abb 	vstr	s15, [r9, #748]	; 0x2ec
 800ed94:	edc9 8a9f 	vstr	s17, [r9, #636]	; 0x27c
 800ed98:	edc9 8aa0 	vstr	s17, [r9, #640]	; 0x280
 800ed9c:	edc9 8aa1 	vstr	s17, [r9, #644]	; 0x284
 800eda0:	edc9 8a71 	vstr	s17, [r9, #452]	; 0x1c4
 800eda4:	edc9 8aa2 	vstr	s17, [r9, #648]	; 0x288
 800eda8:	edc9 8aa3 	vstr	s17, [r9, #652]	; 0x28c
 800edac:	edc9 8aa4 	vstr	s17, [r9, #656]	; 0x290
 800edb0:	edc9 8aa5 	vstr	s17, [r9, #660]	; 0x294
 800edb4:	edc9 8aa6 	vstr	s17, [r9, #664]	; 0x298
 800edb8:	edc9 8aa8 	vstr	s17, [r9, #672]	; 0x2a0
 800edbc:	edc9 8aa9 	vstr	s17, [r9, #676]	; 0x2a4
 800edc0:	edc9 8aaa 	vstr	s17, [r9, #680]	; 0x2a8
 800edc4:	edc9 8a72 	vstr	s17, [r9, #456]	; 0x1c8
 800edc8:	edc9 8aab 	vstr	s17, [r9, #684]	; 0x2ac
 800edcc:	edc9 8aac 	vstr	s17, [r9, #688]	; 0x2b0
 800edd0:	edc9 8aad 	vstr	s17, [r9, #692]	; 0x2b4
 800edd4:	edc9 8aae 	vstr	s17, [r9, #696]	; 0x2b8
 800edd8:	edc9 8aaf 	vstr	s17, [r9, #700]	; 0x2bc
 800eddc:	edc9 8ab0 	vstr	s17, [r9, #704]	; 0x2c0
 800ede0:	edc9 8ab2 	vstr	s17, [r9, #712]	; 0x2c8
 800ede4:	edc9 8ab3 	vstr	s17, [r9, #716]	; 0x2cc
 800ede8:	edc9 8a73 	vstr	s17, [r9, #460]	; 0x1cc
 800edec:	edc9 8ab4 	vstr	s17, [r9, #720]	; 0x2d0
 800edf0:	edc9 8ab5 	vstr	s17, [r9, #724]	; 0x2d4
 800edf4:	edc9 8ab6 	vstr	s17, [r9, #728]	; 0x2d8
 800edf8:	edc9 8ab7 	vstr	s17, [r9, #732]	; 0x2dc
 800edfc:	edc9 8ab8 	vstr	s17, [r9, #736]	; 0x2e0
 800ee00:	edc9 8ab9 	vstr	s17, [r9, #740]	; 0x2e4
 800ee04:	edc9 8aba 	vstr	s17, [r9, #744]	; 0x2e8
 800ee08:	edc9 8abc 	vstr	s17, [r9, #752]	; 0x2f0
 800ee0c:	9a04      	ldr	r2, [sp, #16]
 800ee0e:	f889 11ac 	strb.w	r1, [r9, #428]	; 0x1ac
 800ee12:	edc9 8a74 	vstr	s17, [r9, #464]	; 0x1d0
 800ee16:	edc9 7ac5 	vstr	s15, [r9, #788]	; 0x314
 800ee1a:	9203      	str	r2, [sp, #12]
 800ee1c:	f50d 624a 	add.w	r2, sp, #3232	; 0xca0
 800ee20:	9202      	str	r2, [sp, #8]
 800ee22:	f50d 6233 	add.w	r2, sp, #2864	; 0xb30
 800ee26:	9201      	str	r2, [sp, #4]
 800ee28:	f50d 621c 	add.w	r2, sp, #2496	; 0x9c0
 800ee2c:	9200      	str	r2, [sp, #0]
 800ee2e:	7820      	ldrb	r0, [r4, #0]
 800ee30:	edc9 8abd 	vstr	s17, [r9, #756]	; 0x2f4
 800ee34:	f50d 6305 	add.w	r3, sp, #2128	; 0x850
 800ee38:	f50d 62dc 	add.w	r2, sp, #1760	; 0x6e0
 800ee3c:	f20d 61bc 	addw	r1, sp, #1724	; 0x6bc
 800ee40:	edc9 8abe 	vstr	s17, [r9, #760]	; 0x2f8
 800ee44:	edc9 8abf 	vstr	s17, [r9, #764]	; 0x2fc
 800ee48:	edc9 8ac0 	vstr	s17, [r9, #768]	; 0x300
 800ee4c:	edc9 8ac1 	vstr	s17, [r9, #772]	; 0x304
 800ee50:	edc9 8ac2 	vstr	s17, [r9, #776]	; 0x308
 800ee54:	edc9 8ac3 	vstr	s17, [r9, #780]	; 0x30c
 800ee58:	edc9 8ac4 	vstr	s17, [r9, #784]	; 0x310
 800ee5c:	f7fe f862 	bl	800cf24 <DataHist_parameters>
 800ee60:	f609 1344 	addw	r3, r9, #2372	; 0x944
 800ee64:	f509 6216 	add.w	r2, r9, #2400	; 0x960
 800ee68:	f609 1168 	addw	r1, r9, #2408	; 0x968
 800ee6c:	f509 6017 	add.w	r0, r9, #2416	; 0x970
 800ee70:	f10d 0c20 	add.w	ip, sp, #32
 800ee74:	9304      	str	r3, [sp, #16]
 800ee76:	9205      	str	r2, [sp, #20]
 800ee78:	9106      	str	r1, [sp, #24]
 800ee7a:	9007      	str	r0, [sp, #28]
 800ee7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee80:	f8c9 393c 	str.w	r3, [r9, #2364]	; 0x93c
 800ee84:	9b04      	ldr	r3, [sp, #16]
 800ee86:	f8c9 0930 	str.w	r0, [r9, #2352]	; 0x930
 800ee8a:	f8c9 1934 	str.w	r1, [r9, #2356]	; 0x934
 800ee8e:	f8c9 2938 	str.w	r2, [r9, #2360]	; 0x938
 800ee92:	9906      	ldr	r1, [sp, #24]
 800ee94:	9a05      	ldr	r2, [sp, #20]
 800ee96:	9807      	ldr	r0, [sp, #28]
 800ee98:	f509 6b14 	add.w	fp, r9, #2368	; 0x940
 800ee9c:	f609 1a5c 	addw	sl, r9, #2396	; 0x95c
 800eea0:	edcb 8a00 	vstr	s17, [fp]
 800eea4:	f609 1748 	addw	r7, r9, #2376	; 0x948
 800eea8:	edca 8a00 	vstr	s17, [sl]
 800eeac:	f609 1664 	addw	r6, r9, #2404	; 0x964
 800eeb0:	edc3 8a00 	vstr	s17, [r3]
 800eeb4:	f609 1554 	addw	r5, r9, #2388	; 0x954
 800eeb8:	f609 1458 	addw	r4, r9, #2392	; 0x958
 800eebc:	f609 1e6c 	addw	lr, r9, #2412	; 0x96c
 800eec0:	230a      	movs	r3, #10
 800eec2:	edc2 8a00 	vstr	s17, [r2]
 800eec6:	edc7 8a00 	vstr	s17, [r7]
 800eeca:	edc6 8a00 	vstr	s17, [r6]
 800eece:	f8c9 894c 	str.w	r8, [r9, #2380]	; 0x94c
 800eed2:	f8a9 8950 	strh.w	r8, [r9, #2384]	; 0x950
 800eed6:	edc5 8a00 	vstr	s17, [r5]
 800eeda:	ed84 8a00 	vstr	s16, [r4]
 800eede:	edc1 8a00 	vstr	s17, [r1]
 800eee2:	edc0 8a00 	vstr	s17, [r0]
 800eee6:	edce 8a00 	vstr	s17, [lr]
 800eeea:	f8c9 3974 	str.w	r3, [r9, #2420]	; 0x974
 800eeee:	f889 8978 	strb.w	r8, [r9, #2424]	; 0x978
 800eef2:	f60d 4dd4 	addw	sp, sp, #3284	; 0xcd4
 800eef6:	ecbd 8b02 	vpop	{d8}
 800eefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eefe:	bf00      	nop

0800ef00 <iNemoEngine_API_Update>:
 800ef00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef04:	ed2d 8b10 	vpush	{d8-d15}
 800ef08:	f2ad 5d94 	subw	sp, sp, #1428	; 0x594
 800ef0c:	eeb0 8a40 	vmov.f32	s16, s0
 800ef10:	9006      	str	r0, [sp, #24]
 800ef12:	9114      	str	r1, [sp, #80]	; 0x50
 800ef14:	4614      	mov	r4, r2
 800ef16:	9324      	str	r3, [sp, #144]	; 0x90
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	f000 8222 	beq.w	800f362 <iNemoEngine_API_Update+0x462>
 800ef1e:	68e0      	ldr	r0, [r4, #12]
 800ef20:	6921      	ldr	r1, [r4, #16]
 800ef22:	6962      	ldr	r2, [r4, #20]
 800ef24:	9d06      	ldr	r5, [sp, #24]
 800ef26:	aba1      	add	r3, sp, #644	; 0x284
 800ef28:	c307      	stmia	r3!, {r0, r1, r2}
 800ef2a:	6820      	ldr	r0, [r4, #0]
 800ef2c:	6861      	ldr	r1, [r4, #4]
 800ef2e:	68a2      	ldr	r2, [r4, #8]
 800ef30:	ab9e      	add	r3, sp, #632	; 0x278
 800ef32:	c307      	stmia	r3!, {r0, r1, r2}
 800ef34:	69a0      	ldr	r0, [r4, #24]
 800ef36:	69e1      	ldr	r1, [r4, #28]
 800ef38:	6a22      	ldr	r2, [r4, #32]
 800ef3a:	f895 4978 	ldrb.w	r4, [r5, #2424]	; 0x978
 800ef3e:	aba4      	add	r3, sp, #656	; 0x290
 800ef40:	c307      	stmia	r3!, {r0, r1, r2}
 800ef42:	b12c      	cbz	r4, 800ef50 <iNemoEngine_API_Update+0x50>
 800ef44:	f8b5 2950 	ldrh.w	r2, [r5, #2384]	; 0x950
 800ef48:	792b      	ldrb	r3, [r5, #4]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	f082 82a5 	bcs.w	801149a <iNemoEngine_API_Update+0x259a>
 800ef50:	9c06      	ldr	r4, [sp, #24]
 800ef52:	ae31      	add	r6, sp, #196	; 0xc4
 800ef54:	f104 033a 	add.w	r3, r4, #58	; 0x3a
 800ef58:	4619      	mov	r1, r3
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	aaa1      	add	r2, sp, #644	; 0x284
 800ef5e:	9320      	str	r3, [sp, #128]	; 0x80
 800ef60:	ad37      	add	r5, sp, #220	; 0xdc
 800ef62:	f7fe f897 	bl	800d094 <rotVect>
 800ef66:	aaa4      	add	r2, sp, #656	; 0x290
 800ef68:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800ef6c:	a834      	add	r0, sp, #208	; 0xd0
 800ef6e:	f7fe f891 	bl	800d094 <rotVect>
 800ef72:	aa9e      	add	r2, sp, #632	; 0x278
 800ef74:	f104 0143 	add.w	r1, r4, #67	; 0x43
 800ef78:	4628      	mov	r0, r5
 800ef7a:	f7fe f88b 	bl	800d094 <rotVect>
 800ef7e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800ef82:	b923      	cbnz	r3, 800ef8e <iNemoEngine_API_Update+0x8e>
 800ef84:	4b9d      	ldr	r3, [pc, #628]	; (800f1fc <iNemoEngine_API_Update+0x2fc>)
 800ef86:	606b      	str	r3, [r5, #4]
 800ef88:	60ab      	str	r3, [r5, #8]
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	602b      	str	r3, [r5, #0]
 800ef8e:	9b06      	ldr	r3, [sp, #24]
 800ef90:	f8d3 794c 	ldr.w	r7, [r3, #2380]	; 0x94c
 800ef94:	2f09      	cmp	r7, #9
 800ef96:	d851      	bhi.n	800f03c <iNemoEngine_API_Update+0x13c>
 800ef98:	edd6 aa01 	vldr	s21, [r6, #4]
 800ef9c:	ed96 ba00 	vldr	s22, [r6]
 800efa0:	ed96 aa02 	vldr	s20, [r6, #8]
 800efa4:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 800efa8:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 800efac:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 800efb0:	eeea 7a0a 	vfma.f32	s15, s20, s20
 800efb4:	ee17 0a90 	vmov	r0, s15
 800efb8:	f7f1 fac6 	bl	8000548 <__aeabi_f2d>
 800efbc:	ec41 0b10 	vmov	d0, r0, r1
 800efc0:	f009 faf8 	bl	80185b4 <sqrt>
 800efc4:	ec51 0b10 	vmov	r0, r1, d0
 800efc8:	f7f1 fe0e 	bl	8000be8 <__aeabi_d2f>
 800efcc:	ee07 0a90 	vmov	s15, r0
 800efd0:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 800efd4:	ed95 9a01 	vldr	s18, [r5, #4]
 800efd8:	edd5 9a00 	vldr	s19, [r5]
 800efdc:	edd5 8a02 	vldr	s17, [r5, #8]
 800efe0:	ee69 7a09 	vmul.f32	s15, s18, s18
 800efe4:	ee2b ba07 	vmul.f32	s22, s22, s14
 800efe8:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800efec:	ee6a aa87 	vmul.f32	s21, s21, s14
 800eff0:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800eff4:	ee2a aa07 	vmul.f32	s20, s20, s14
 800eff8:	ee17 0a90 	vmov	r0, s15
 800effc:	ed86 ba00 	vstr	s22, [r6]
 800f000:	edc6 aa01 	vstr	s21, [r6, #4]
 800f004:	ed86 aa02 	vstr	s20, [r6, #8]
 800f008:	f7f1 fa9e 	bl	8000548 <__aeabi_f2d>
 800f00c:	ec41 0b10 	vmov	d0, r0, r1
 800f010:	f009 fad0 	bl	80185b4 <sqrt>
 800f014:	ec51 0b10 	vmov	r0, r1, d0
 800f018:	f7f1 fde6 	bl	8000be8 <__aeabi_d2f>
 800f01c:	ee07 0a90 	vmov	s15, r0
 800f020:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 800f024:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800f028:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f02c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f030:	edc5 9a00 	vstr	s19, [r5]
 800f034:	ed85 9a01 	vstr	s18, [r5, #4]
 800f038:	edc5 8a02 	vstr	s17, [r5, #8]
 800f03c:	9906      	ldr	r1, [sp, #24]
 800f03e:	790b      	ldrb	r3, [r1, #4]
 800f040:	f8b1 2950 	ldrh.w	r2, [r1, #2384]	; 0x950
 800f044:	429a      	cmp	r2, r3
 800f046:	f080 80f5 	bcs.w	800f234 <iNemoEngine_API_Update+0x334>
 800f04a:	abf8      	add	r3, sp, #992	; 0x3e0
 800f04c:	9319      	str	r3, [sp, #100]	; 0x64
 800f04e:	f501 6313 	add.w	r3, r1, #2352	; 0x930
 800f052:	931c      	str	r3, [sp, #112]	; 0x70
 800f054:	f601 1334 	addw	r3, r1, #2356	; 0x934
 800f058:	931d      	str	r3, [sp, #116]	; 0x74
 800f05a:	f601 1338 	addw	r3, r1, #2360	; 0x938
 800f05e:	931e      	str	r3, [sp, #120]	; 0x78
 800f060:	eddd 9af5 	vldr	s19, [sp, #980]	; 0x3d4
 800f064:	f601 133c 	addw	r3, r1, #2364	; 0x93c
 800f068:	accc      	add	r4, sp, #816	; 0x330
 800f06a:	931f      	str	r3, [sp, #124]	; 0x7c
 800f06c:	460d      	mov	r5, r1
 800f06e:	3701      	adds	r7, #1
 800f070:	9819      	ldr	r0, [sp, #100]	; 0x64
 800f072:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f074:	f8c5 794c 	str.w	r7, [r5, #2380]	; 0x94c
 800f078:	aaa1      	add	r2, sp, #644	; 0x284
 800f07a:	f7fe f80b 	bl	800d094 <rotVect>
 800f07e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f080:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	60d3      	str	r3, [r2, #12]
 800f086:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	6113      	str	r3, [r2, #16]
 800f08c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	6153      	str	r3, [r2, #20]
 800f092:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	6193      	str	r3, [r2, #24]
 800f098:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 800f09c:	9301      	str	r3, [sp, #4]
 800f09e:	4601      	mov	r1, r0
 800f0a0:	f102 0328 	add.w	r3, r2, #40	; 0x28
 800f0a4:	4610      	mov	r0, r2
 800f0a6:	4615      	mov	r5, r2
 800f0a8:	300c      	adds	r0, #12
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	f102 031c 	add.w	r3, r2, #28
 800f0b0:	f7ff fb6c 	bl	800e78c <output_update>
 800f0b4:	ed95 8a00 	vldr	s16, [r5]
 800f0b8:	ed95 aa01 	vldr	s20, [r5, #4]
 800f0bc:	eeb0 0a48 	vmov.f32	s0, s16
 800f0c0:	f009 fc4e 	bl	8018960 <sinf>
 800f0c4:	eeb0 9a40 	vmov.f32	s18, s0
 800f0c8:	eeb0 0a48 	vmov.f32	s0, s16
 800f0cc:	f009 fa2e 	bl	801852c <cosf>
 800f0d0:	edd4 7a33 	vldr	s15, [r4, #204]	; 0xcc
 800f0d4:	edd4 6a3d 	vldr	s13, [r4, #244]	; 0xf4
 800f0d8:	ee60 8a00 	vmul.f32	s17, s0, s0
 800f0dc:	eeb0 7aca 	vabs.f32	s14, s20
 800f0e0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f0e4:	eddf 7a46 	vldr	s15, [pc, #280]	; 800f200 <iNemoEngine_API_Update+0x300>
 800f0e8:	ee29 9a09 	vmul.f32	s18, s18, s18
 800f0ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f4:	eee9 8a26 	vfma.f32	s17, s18, s13
 800f0f8:	d579      	bpl.n	800f1ee <iNemoEngine_API_Update+0x2ee>
 800f0fa:	eeb0 0a4a 	vmov.f32	s0, s20
 800f0fe:	f009 fc7f 	bl	8018a00 <tanf>
 800f102:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f106:	eeb0 7a69 	vmov.f32	s14, s19
 800f10a:	eea0 7a28 	vfma.f32	s14, s0, s17
 800f10e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f110:	9b06      	ldr	r3, [sp, #24]
 800f112:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800f204 <iNemoEngine_API_Update+0x304>
 800f116:	4c3c      	ldr	r4, [pc, #240]	; (800f208 <iNemoEngine_API_Update+0x308>)
 800f118:	eef1 7ac7 	vsqrt.f32	s15, s14
 800f11c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800f228 <iNemoEngine_API_Update+0x328>
 800f120:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f124:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f12c:	bf88      	it	hi
 800f12e:	eef0 7a66 	vmovhi.f32	s15, s13
 800f132:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13a:	bfb8      	it	lt
 800f13c:	eef0 7a47 	vmovlt.f32	s15, s14
 800f140:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 800f144:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f148:	bbd3      	cbnz	r3, 800f1c0 <iNemoEngine_API_Update+0x2c0>
 800f14a:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 800f14e:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 800f152:	edd5 0a08 	vldr	s1, [r5, #32]
 800f156:	ed95 0a07 	vldr	s0, [r5, #28]
 800f15a:	f7fe f86d 	bl	800d238 <findDirection>
 800f15e:	ed95 7a03 	vldr	s14, [r5, #12]
 800f162:	edd5 6a04 	vldr	s13, [r5, #16]
 800f166:	edd5 8a05 	vldr	s17, [r5, #20]
 800f16a:	edd5 7a06 	vldr	s15, [r5, #24]
 800f16e:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0
 800f172:	2805      	cmp	r0, #5
 800f174:	f204 822c 	bhi.w	80135d0 <iNemoEngine_API_Update+0x46d0>
 800f178:	e8df f010 	tbh	[pc, r0, lsl #1]
 800f17c:	11d0000a 	.word	0x11d0000a
 800f180:	11990006 	.word	0x11990006
 800f184:	000a0006 	.word	0x000a0006
 800f188:	eddf 7a20 	vldr	s15, [pc, #128]	; 800f20c <iNemoEngine_API_Update+0x30c>
 800f18c:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f190:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f210 <iNemoEngine_API_Update+0x310>
 800f194:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f19c:	bfa8      	it	ge
 800f19e:	ee38 8a67 	vsubge.f32	s16, s16, s15
 800f1a2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1aa:	f100 80d5 	bmi.w	800f358 <iNemoEngine_API_Update+0x458>
 800f1ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f1b0:	ed83 8a0d 	vstr	s16, [r3, #52]	; 0x34
 800f1b4:	f20d 5d94 	addw	sp, sp, #1428	; 0x594
 800f1b8:	ecbd 8b10 	vpop	{d8-d15}
 800f1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c0:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 800f1c4:	edd5 8a05 	vldr	s17, [r5, #20]
 800f1c8:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 800f1cc:	edd5 0a07 	vldr	s1, [r5, #28]
 800f1d0:	ed95 0a08 	vldr	s0, [r5, #32]
 800f1d4:	eeb1 1a41 	vneg.f32	s2, s2
 800f1d8:	f7fe f82e 	bl	800d238 <findDirection>
 800f1dc:	eef1 8a68 	vneg.f32	s17, s17
 800f1e0:	ed95 7a04 	vldr	s14, [r5, #16]
 800f1e4:	edd5 6a03 	vldr	s13, [r5, #12]
 800f1e8:	edd5 7a06 	vldr	s15, [r5, #24]
 800f1ec:	e7bf      	b.n	800f16e <iNemoEngine_API_Update+0x26e>
 800f1ee:	eddf 7a09 	vldr	s15, [pc, #36]	; 800f214 <iNemoEngine_API_Update+0x314>
 800f1f2:	eeb0 7a69 	vmov.f32	s14, s19
 800f1f6:	eea8 7aa7 	vfma.f32	s14, s17, s15
 800f1fa:	e788      	b.n	800f10e <iNemoEngine_API_Update+0x20e>
 800f1fc:	3f333333 	.word	0x3f333333
 800f200:	3fbc430e 	.word	0x3fbc430e
 800f204:	40490fdb 	.word	0x40490fdb
 800f208:	2000021c 	.word	0x2000021c
 800f20c:	43340000 	.word	0x43340000
 800f210:	43b40000 	.word	0x43b40000
 800f214:	42c6ab07 	.word	0x42c6ab07
 800f218:	3c03126f 	.word	0x3c03126f
 800f21c:	3b656042 	.word	0x3b656042
 800f220:	3e4ccccd 	.word	0x3e4ccccd
 800f224:	3fb50481 	.word	0x3fb50481
 800f228:	3c8efa35 	.word	0x3c8efa35
 800f22c:	3ed93dd9 	.word	0x3ed93dd9
 800f230:	42c80000 	.word	0x42c80000
 800f234:	ee07 3a90 	vmov	s15, r3
 800f238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f23c:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800f218 <iNemoEngine_API_Update+0x318>
 800f240:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 800f21c <iNemoEngine_API_Update+0x31c>
 800f244:	ed5f ba08 	vldr	s23, [pc, #-32]	; 800f228 <iNemoEngine_API_Update+0x328>
 800f248:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800f224 <iNemoEngine_API_Update+0x324>
 800f24c:	ed5f 4a0c 	vldr	s9, [pc, #-48]	; 800f220 <iNemoEngine_API_Update+0x320>
 800f250:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f254:	4608      	mov	r0, r1
 800f256:	eec7 5a27 	vdiv.f32	s11, s14, s15
 800f25a:	f601 125c 	addw	r2, r1, #2396	; 0x95c
 800f25e:	2300      	movs	r3, #0
 800f260:	2100      	movs	r1, #0
 800f262:	f50d 7cb2 	add.w	ip, sp, #356	; 0x164
 800f266:	ac56      	add	r4, sp, #344	; 0x158
 800f268:	edcd 7a07 	vstr	s15, [sp, #28]
 800f26c:	eef1 7ae5 	vsqrt.f32	s15, s11
 800f270:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 800f22c <iNemoEngine_API_Update+0x32c>
 800f274:	ee86 4aa7 	vdiv.f32	s8, s13, s15
 800f278:	ee67 6a87 	vmul.f32	s13, s15, s14
 800f27c:	ed92 7a00 	vldr	s14, [r2]
 800f280:	f8a0 1950 	strh.w	r1, [r0, #2384]	; 0x950
 800f284:	6013      	str	r3, [r2, #0]
 800f286:	f500 6216 	add.w	r2, r0, #2400	; 0x960
 800f28a:	ee27 ea2b 	vmul.f32	s28, s14, s23
 800f28e:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
 800f292:	ed92 7a00 	vldr	s14, [r2]
 800f296:	6013      	str	r3, [r2, #0]
 800f298:	f600 1264 	addw	r2, r0, #2404	; 0x964
 800f29c:	ee67 ea2b 	vmul.f32	s29, s14, s23
 800f2a0:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
 800f2a4:	ed92 7a00 	vldr	s14, [r2]
 800f2a8:	6013      	str	r3, [r2, #0]
 800f2aa:	7947      	ldrb	r7, [r0, #5]
 800f2ac:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 800f2b0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f2b4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800f2b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f2bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f2c0:	9a06      	ldr	r2, [sp, #24]
 800f2c2:	f8d2 01c8 	ldr.w	r0, [r2, #456]	; 0x1c8
 800f2c6:	f8d2 11cc 	ldr.w	r1, [r2, #460]	; 0x1cc
 800f2ca:	f8d2 21d0 	ldr.w	r2, [r2, #464]	; 0x1d0
 800f2ce:	abd9      	add	r3, sp, #868	; 0x364
 800f2d0:	2f01      	cmp	r7, #1
 800f2d2:	c307      	stmia	r3!, {r0, r1, r2}
 800f2d4:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f2d8:	ee67 4aa4 	vmul.f32	s9, s15, s9
 800f2dc:	ee67 ba2b 	vmul.f32	s23, s14, s23
 800f2e0:	f002 844a 	beq.w	8011b78 <iNemoEngine_API_Update+0x2c78>
 800f2e4:	2f02      	cmp	r7, #2
 800f2e6:	f002 843c 	beq.w	8011b62 <iNemoEngine_API_Update+0x2c62>
 800f2ea:	2f00      	cmp	r7, #0
 800f2ec:	f002 814d 	beq.w	801158a <iNemoEngine_API_Update+0x268a>
 800f2f0:	9b06      	ldr	r3, [sp, #24]
 800f2f2:	ed5f 5a31 	vldr	s11, [pc, #-196]	; 800f230 <iNemoEngine_API_Update+0x330>
 800f2f6:	ed93 ba05 	vldr	s22, [r3, #20]
 800f2fa:	491b      	ldr	r1, [pc, #108]	; (800f368 <iNemoEngine_API_Update+0x468>)
 800f2fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f300:	ee2b ba25 	vmul.f32	s22, s22, s11
 800f304:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f308:	4618      	mov	r0, r3
 800f30a:	8842      	ldrh	r2, [r0, #2]
 800f30c:	1e53      	subs	r3, r2, #1
 800f30e:	2b12      	cmp	r3, #18
 800f310:	d834      	bhi.n	800f37c <iNemoEngine_API_Update+0x47c>
 800f312:	3201      	adds	r2, #1
 800f314:	b213      	sxth	r3, r2
 800f316:	b292      	uxth	r2, r2
 800f318:	2a03      	cmp	r2, #3
 800f31a:	8043      	strh	r3, [r0, #2]
 800f31c:	f242 8401 	bls.w	8011b22 <iNemoEngine_API_Update+0x2c22>
 800f320:	ee07 3a10 	vmov	s14, r3
 800f324:	eddf 5a11 	vldr	s11, [pc, #68]	; 800f36c <iNemoEngine_API_Update+0x46c>
 800f328:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f32c:	4603      	mov	r3, r0
 800f32e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f332:	ee84 4a07 	vdiv.f32	s8, s8, s14
 800f336:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
 800f33a:	ed8d 4a22 	vstr	s8, [sp, #136]	; 0x88
 800f33e:	ee66 5a87 	vmul.f32	s11, s13, s14
 800f342:	ee66 6a05 	vmul.f32	s13, s12, s10
 800f346:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800f378 <iNemoEngine_API_Update+0x478>
 800f34a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800f34e:	ee24 6a86 	vmul.f32	s12, s9, s12
 800f352:	eeb0 7a65 	vmov.f32	s14, s11
 800f356:	e02d      	b.n	800f3b4 <iNemoEngine_API_Update+0x4b4>
 800f358:	eddf 7a05 	vldr	s15, [pc, #20]	; 800f370 <iNemoEngine_API_Update+0x470>
 800f35c:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f360:	e725      	b.n	800f1ae <iNemoEngine_API_Update+0x2ae>
 800f362:	ab46      	add	r3, sp, #280	; 0x118
 800f364:	9324      	str	r3, [sp, #144]	; 0x90
 800f366:	e5da      	b.n	800ef1e <iNemoEngine_API_Update+0x1e>
 800f368:	3a83126f 	.word	0x3a83126f
 800f36c:	3d4ccccd 	.word	0x3d4ccccd
 800f370:	43b40000 	.word	0x43b40000
 800f374:	358637bd 	.word	0x358637bd
 800f378:	3f333333 	.word	0x3f333333
 800f37c:	ed1f 5a03 	vldr	s10, [pc, #-12]	; 800f374 <iNemoEngine_API_Update+0x474>
 800f380:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800f384:	edd0 5a0b 	vldr	s11, [r0, #44]	; 0x2c
 800f388:	ee37 7a05 	vadd.f32	s14, s14, s10
 800f38c:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
 800f390:	ee84 7a07 	vdiv.f32	s14, s8, s14
 800f394:	2300      	movs	r3, #0
 800f396:	8043      	strh	r3, [r0, #2]
 800f398:	ee66 5aa5 	vmul.f32	s11, s13, s11
 800f39c:	ed8d 7a22 	vstr	s14, [sp, #136]	; 0x88
 800f3a0:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800f3a4:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f3a8:	ee66 6a05 	vmul.f32	s13, s12, s10
 800f3ac:	ed1f 6a0e 	vldr	s12, [pc, #-56]	; 800f378 <iNemoEngine_API_Update+0x478>
 800f3b0:	ee24 6a86 	vmul.f32	s12, s9, s12
 800f3b4:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
 800f3b8:	ee25 5a24 	vmul.f32	s10, s10, s9
 800f3bc:	edcd 7a89 	vstr	s15, [sp, #548]	; 0x224
 800f3c0:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 800f3c4:	edcd 7a8b 	vstr	s15, [sp, #556]	; 0x22c
 800f3c8:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 800f3cc:	4bdd      	ldr	r3, [pc, #884]	; (800f744 <iNemoEngine_API_Update+0x844>)
 800f3ce:	9162      	str	r1, [sp, #392]	; 0x188
 800f3d0:	a8f8      	add	r0, sp, #992	; 0x3e0
 800f3d2:	9163      	str	r1, [sp, #396]	; 0x18c
 800f3d4:	9164      	str	r1, [sp, #400]	; 0x190
 800f3d6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800f3da:	2100      	movs	r1, #0
 800f3dc:	4605      	mov	r5, r0
 800f3de:	9367      	str	r3, [sp, #412]	; 0x19c
 800f3e0:	9019      	str	r0, [sp, #100]	; 0x64
 800f3e2:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 800f3e6:	edcd 5a84 	vstr	s11, [sp, #528]	; 0x210
 800f3ea:	edcd 5a85 	vstr	s11, [sp, #532]	; 0x214
 800f3ee:	ed8d 7a86 	vstr	s14, [sp, #536]	; 0x218
 800f3f2:	ed8d 7a87 	vstr	s14, [sp, #540]	; 0x21c
 800f3f6:	ed8d 7a88 	vstr	s14, [sp, #544]	; 0x220
 800f3fa:	edcd 6a8c 	vstr	s13, [sp, #560]	; 0x230
 800f3fe:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 800f402:	ed8d 5a8e 	vstr	s10, [sp, #568]	; 0x238
 800f406:	edcd 7a5f 	vstr	s15, [sp, #380]	; 0x17c
 800f40a:	edcd 7a60 	vstr	s15, [sp, #384]	; 0x180
 800f40e:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 800f412:	f006 f9c1 	bl	8015798 <memset>
 800f416:	9b06      	ldr	r3, [sp, #24]
 800f418:	7b5a      	ldrb	r2, [r3, #13]
 800f41a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f41e:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 800f422:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
 800f426:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 800f42a:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
 800f42e:	f8c5 3178 	str.w	r3, [r5, #376]	; 0x178
 800f432:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
 800f436:	2a00      	cmp	r2, #0
 800f438:	f001 8124 	beq.w	8010684 <iNemoEngine_API_Update+0x1784>
 800f43c:	ed94 8a01 	vldr	s16, [r4, #4]
 800f440:	edd4 8a00 	vldr	s17, [r4]
 800f444:	ed94 ca02 	vldr	s24, [r4, #8]
 800f448:	ee28 9a08 	vmul.f32	s18, s16, s16
 800f44c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800f450:	eea8 9aa8 	vfma.f32	s18, s17, s17
 800f454:	ee68 5a27 	vmul.f32	s11, s16, s15
 800f458:	eeac 9a0c 	vfma.f32	s18, s24, s24
 800f45c:	ee6c 6a27 	vmul.f32	s13, s24, s15
 800f460:	eef1 cac9 	vsqrt.f32	s25, s18
 800f464:	ee3c 5a0c 	vadd.f32	s10, s24, s24
 800f468:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800f46c:	ee38 6aa8 	vadd.f32	s12, s17, s17
 800f470:	ee38 7a08 	vadd.f32	s14, s16, s16
 800f474:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f476:	ed94 aa04 	vldr	s20, [r4, #16]
 800f47a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 800f47e:	eef1 7a4a 	vneg.f32	s15, s20
 800f482:	edd4 9a05 	vldr	s19, [r4, #20]
 800f486:	edd4 aa03 	vldr	s21, [r4, #12]
 800f48a:	ed83 5a01 	vstr	s10, [r3, #4]
 800f48e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f492:	edc3 5a02 	vstr	s11, [r3, #8]
 800f496:	edc3 7a05 	vstr	s15, [r3, #20]
 800f49a:	eef1 7a69 	vneg.f32	s15, s19
 800f49e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f4a2:	edc3 6a0c 	vstr	s13, [r3, #48]	; 0x30
 800f4a6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 800f4aa:	eef1 7a6a 	vneg.f32	s15, s21
 800f4ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f4b2:	ed83 6a0e 	vstr	s12, [r3, #56]	; 0x38
 800f4b6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 800f4ba:	ee79 7aa9 	vadd.f32	s15, s19, s19
 800f4be:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60
 800f4c2:	edc3 7a04 	vstr	s15, [r3, #16]
 800f4c6:	ee7a 7aaa 	vadd.f32	s15, s21, s21
 800f4ca:	2230      	movs	r2, #48	; 0x30
 800f4cc:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 800f4d0:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 800f4d4:	2100      	movs	r1, #0
 800f4d6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 800f4da:	a88f      	add	r0, sp, #572	; 0x23c
 800f4dc:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 800f4e0:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
 800f4e4:	933c      	str	r3, [sp, #240]	; 0xf0
 800f4e6:	f006 f957 	bl	8015798 <memset>
 800f4ea:	9a06      	ldr	r2, [sp, #24]
 800f4ec:	edd2 7a07 	vldr	s15, [r2, #28]
 800f4f0:	ed92 da06 	vldr	s26, [r2, #24]
 800f4f4:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
 800f4f8:	ee6b 7a27 	vmul.f32	s15, s22, s15
 800f4fc:	ee2b da0d 	vmul.f32	s26, s22, s26
 800f500:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800f504:	edd2 7a08 	vldr	s15, [r2, #32]
 800f508:	ee6b 7a27 	vmul.f32	s15, s22, s15
 800f50c:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
 800f510:	2b00      	cmp	r3, #0
 800f512:	f043 8025 	bne.w	8012560 <iNemoEngine_API_Update+0x3660>
 800f516:	4613      	mov	r3, r2
 800f518:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 800f51c:	9225      	str	r2, [sp, #148]	; 0x94
 800f51e:	f603 1244 	addw	r2, r3, #2372	; 0x944
 800f522:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800f526:	9226      	str	r2, [sp, #152]	; 0x98
 800f528:	9327      	str	r3, [sp, #156]	; 0x9c
 800f52a:	9a06      	ldr	r2, [sp, #24]
 800f52c:	f892 3318 	ldrb.w	r3, [r2, #792]	; 0x318
 800f530:	2b00      	cmp	r3, #0
 800f532:	f042 84db 	bne.w	8011eec <iNemoEngine_API_Update+0x2fec>
 800f536:	4613      	mov	r3, r2
 800f538:	f502 6597 	add.w	r5, r2, #1208	; 0x4b8
 800f53c:	f202 47b4 	addw	r7, r2, #1204	; 0x4b4
 800f540:	f502 66c5 	add.w	r6, r2, #1576	; 0x628
 800f544:	f202 6824 	addw	r8, r2, #1572	; 0x624
 800f548:	f203 7394 	addw	r3, r3, #1940	; 0x794
 800f54c:	f502 62f3 	add.w	r2, r2, #1944	; 0x798
 800f550:	9215      	str	r2, [sp, #84]	; 0x54
 800f552:	931b      	str	r3, [sp, #108]	; 0x6c
 800f554:	9b06      	ldr	r3, [sp, #24]
 800f556:	f503 6213 	add.w	r2, r3, #2352	; 0x930
 800f55a:	ed92 6a00 	vldr	s12, [r2]
 800f55e:	921c      	str	r2, [sp, #112]	; 0x70
 800f560:	f603 1134 	addw	r1, r3, #2356	; 0x934
 800f564:	f603 1038 	addw	r0, r3, #2360	; 0x938
 800f568:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 800f56c:	edd3 7a00 	vldr	s15, [r3]
 800f570:	edd1 6a00 	vldr	s13, [r1]
 800f574:	ed90 7a00 	vldr	s14, [r0]
 800f578:	931f      	str	r3, [sp, #124]	; 0x7c
 800f57a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f582:	911d      	str	r1, [sp, #116]	; 0x74
 800f584:	901e      	str	r0, [sp, #120]	; 0x78
 800f586:	ed8d 6a4e 	vstr	s12, [sp, #312]	; 0x138
 800f58a:	edcd 6a4f 	vstr	s13, [sp, #316]	; 0x13c
 800f58e:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800f592:	edcd 7a51 	vstr	s15, [sp, #324]	; 0x144
 800f596:	f04f 0300 	mov.w	r3, #0
 800f59a:	d13a      	bne.n	800f612 <iNemoEngine_API_Update+0x712>
 800f59c:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a4:	d135      	bne.n	800f612 <iNemoEngine_API_Update+0x712>
 800f5a6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ae:	d130      	bne.n	800f612 <iNemoEngine_API_Update+0x712>
 800f5b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b8:	d12b      	bne.n	800f612 <iNemoEngine_API_Update+0x712>
 800f5ba:	9a06      	ldr	r2, [sp, #24]
 800f5bc:	934e      	str	r3, [sp, #312]	; 0x138
 800f5be:	934f      	str	r3, [sp, #316]	; 0x13c
 800f5c0:	9350      	str	r3, [sp, #320]	; 0x140
 800f5c2:	4b61      	ldr	r3, [pc, #388]	; (800f748 <iNemoEngine_API_Update+0x848>)
 800f5c4:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 800f5c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f5cc:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 800f5d0:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 800f5d4:	9351      	str	r3, [sp, #324]	; 0x144
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	4613      	mov	r3, r2
 800f5da:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 800f5de:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
 800f5e2:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f5e6:	f006 f8d7 	bl	8015798 <memset>
 800f5ea:	9a06      	ldr	r2, [sp, #24]
 800f5ec:	4b57      	ldr	r3, [pc, #348]	; (800f74c <iNemoEngine_API_Update+0x84c>)
 800f5ee:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
 800f5f2:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 800f5f6:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
 800f5fa:	f8c2 324c 	str.w	r3, [r2, #588]	; 0x24c
 800f5fe:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
 800f602:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 800f606:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
 800f60a:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
 800f60e:	f8c2 3314 	str.w	r3, [r2, #788]	; 0x314
 800f612:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800f750 <iNemoEngine_API_Update+0x850>
 800f616:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800f61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f61e:	f100 87e0 	bmi.w	80105e2 <iNemoEngine_API_Update+0x16e2>
 800f622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f626:	ee7c 6ac7 	vsub.f32	s13, s25, s14
 800f62a:	eec7 7a2c 	vdiv.f32	s15, s14, s25
 800f62e:	eeb0 7ae6 	vabs.f32	s14, s13
 800f632:	eef0 6a47 	vmov.f32	s13, s14
 800f636:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 800f63a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f63e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f642:	ed8d 7a21 	vstr	s14, [sp, #132]	; 0x84
 800f646:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 800f64a:	edd4 6a00 	vldr	s13, [r4]
 800f64e:	ed94 6a01 	vldr	s12, [r4, #4]
 800f652:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 800f656:	eeaa 7aaa 	vfma.f32	s14, s21, s21
 800f65a:	4628      	mov	r0, r5
 800f65c:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800f660:	eea9 7aa9 	vfma.f32	s14, s19, s19
 800f664:	ee67 6a86 	vmul.f32	s13, s15, s12
 800f668:	ed8d 6a2d 	vstr	s12, [sp, #180]	; 0xb4
 800f66c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800f750 <iNemoEngine_API_Update+0x850>
 800f670:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 800f674:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800f678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67c:	bf54      	ite	pl
 800f67e:	eeb1 9ac7 	vsqrtpl.f32	s18, s14
 800f682:	ed9f 9a34 	vldrmi	s18, [pc, #208]	; 800f754 <iNemoEngine_API_Update+0x854>
 800f686:	ed94 5a02 	vldr	s10, [r4, #8]
 800f68a:	edd7 3a00 	vldr	s7, [r7]
 800f68e:	ed8d 5a2a 	vstr	s10, [sp, #168]	; 0xa8
 800f692:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800f696:	ee83 7a09 	vdiv.f32	s14, s6, s18
 800f69a:	ee65 7a27 	vmul.f32	s15, s10, s15
 800f69e:	ee2a 6a07 	vmul.f32	s12, s20, s14
 800f6a2:	eeb0 0a63 	vmov.f32	s0, s7
 800f6a6:	ee66 6a26 	vmul.f32	s13, s12, s13
 800f6aa:	ed8d 6a41 	vstr	s12, [sp, #260]	; 0x104
 800f6ae:	ee2a 6a87 	vmul.f32	s12, s21, s14
 800f6b2:	ee29 7a87 	vmul.f32	s14, s19, s14
 800f6b6:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f6ba:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 800f6be:	eee7 6a87 	vfma.f32	s13, s15, s14
 800f6c2:	ed8d 7a42 	vstr	s14, [sp, #264]	; 0x108
 800f6c6:	edcd 5a3d 	vstr	s11, [sp, #244]	; 0xf4
 800f6ca:	ed8d 6a40 	vstr	s12, [sp, #256]	; 0x100
 800f6ce:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 800f6d2:	f7fd ffa5 	bl	800d620 <dataDerivative5>
 800f6d6:	edd8 fa00 	vldr	s31, [r8]
 800f6da:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
 800f6de:	4630      	mov	r0, r6
 800f6e0:	eeb0 0a6f 	vmov.f32	s0, s31
 800f6e4:	f7fd ff9c 	bl	800d620 <dataDerivative5>
 800f6e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f6ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f6ec:	ed93 fa00 	vldr	s30, [r3]
 800f6f0:	eeb0 ba40 	vmov.f32	s22, s0
 800f6f4:	eeb0 0a4f 	vmov.f32	s0, s30
 800f6f8:	f7fd ff92 	bl	800d620 <dataDerivative5>
 800f6fc:	eec3 7a23 	vdiv.f32	s15, s6, s7
 800f700:	eef0 da40 	vmov.f32	s27, s0
 800f704:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f708:	ee27 8a88 	vmul.f32	s16, s15, s16
 800f70c:	ee27 ca8c 	vmul.f32	s24, s15, s24
 800f710:	eddf 7a11 	vldr	s15, [pc, #68]	; 800f758 <iNemoEngine_API_Update+0x858>
 800f714:	eeb0 7ae8 	vabs.f32	s14, s17
 800f718:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f720:	d52c      	bpl.n	800f77c <iNemoEngine_API_Update+0x87c>
 800f722:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f726:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f72e:	f281 8756 	bge.w	80115de <iNemoEngine_API_Update+0x26de>
 800f732:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800f736:	eef4 8ac7 	vcmpe.f32	s17, s14
 800f73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f73e:	f303 80bc 	bgt.w	80128ba <iNemoEngine_API_Update+0x39ba>
 800f742:	e00b      	b.n	800f75c <iNemoEngine_API_Update+0x85c>
 800f744:	3a9d4952 	.word	0x3a9d4952
 800f748:	bf666666 	.word	0xbf666666
 800f74c:	40a00000 	.word	0x40a00000
 800f750:	3c23d70a 	.word	0x3c23d70a
 800f754:	3dcccccd 	.word	0x3dcccccd
 800f758:	4b000000 	.word	0x4b000000
 800f75c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800f760:	ee17 0a90 	vmov	r0, s15
 800f764:	f7f0 fef0 	bl	8000548 <__aeabi_f2d>
 800f768:	ec41 0b10 	vmov	d0, r0, r1
 800f76c:	f009 fd60 	bl	8019230 <ceil>
 800f770:	ec51 0b10 	vmov	r0, r1, d0
 800f774:	f7f1 fa38 	bl	8000be8 <__aeabi_d2f>
 800f778:	ee08 0a90 	vmov	s17, r0
 800f77c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 800f758 <iNemoEngine_API_Update+0x858>
 800f780:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 800f784:	eeb0 7ac8 	vabs.f32	s14, s16
 800f788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f790:	d51f      	bpl.n	800f7d2 <iNemoEngine_API_Update+0x8d2>
 800f792:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f796:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f79e:	f281 870c 	bge.w	80115ba <iNemoEngine_API_Update+0x26ba>
 800f7a2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800f7a6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800f7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ae:	f303 8080 	bgt.w	80128b2 <iNemoEngine_API_Update+0x39b2>
 800f7b2:	ee78 7a67 	vsub.f32	s15, s16, s15
 800f7b6:	ee17 0a90 	vmov	r0, s15
 800f7ba:	f7f0 fec5 	bl	8000548 <__aeabi_f2d>
 800f7be:	ec41 0b10 	vmov	d0, r0, r1
 800f7c2:	f009 fd35 	bl	8019230 <ceil>
 800f7c6:	ec51 0b10 	vmov	r0, r1, d0
 800f7ca:	f7f1 fa0d 	bl	8000be8 <__aeabi_d2f>
 800f7ce:	ee08 0a10 	vmov	s16, r0
 800f7d2:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 800f758 <iNemoEngine_API_Update+0x858>
 800f7d6:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
 800f7da:	eeb0 7acc 	vabs.f32	s14, s24
 800f7de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7e6:	d51f      	bpl.n	800f828 <iNemoEngine_API_Update+0x928>
 800f7e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f7ec:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f4:	f281 86cf 	bge.w	8011596 <iNemoEngine_API_Update+0x2696>
 800f7f8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800f7fc:	eeb4 cac7 	vcmpe.f32	s24, s14
 800f800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f804:	f303 8065 	bgt.w	80128d2 <iNemoEngine_API_Update+0x39d2>
 800f808:	ee7c 7a67 	vsub.f32	s15, s24, s15
 800f80c:	ee17 0a90 	vmov	r0, s15
 800f810:	f7f0 fe9a 	bl	8000548 <__aeabi_f2d>
 800f814:	ec41 0b10 	vmov	d0, r0, r1
 800f818:	f009 fd0a 	bl	8019230 <ceil>
 800f81c:	ec51 0b10 	vmov	r0, r1, d0
 800f820:	f7f1 f9e2 	bl	8000be8 <__aeabi_d2f>
 800f824:	ee0c 0a10 	vmov	s24, r0
 800f828:	9b06      	ldr	r3, [sp, #24]
 800f82a:	ed8d ca45 	vstr	s24, [sp, #276]	; 0x114
 800f82e:	f893 04b1 	ldrb.w	r0, [r3, #1201]	; 0x4b1
 800f832:	1e43      	subs	r3, r0, #1
 800f834:	b25b      	sxtb	r3, r3
 800f836:	2b00      	cmp	r3, #0
 800f838:	dd18      	ble.n	800f86c <iNemoEngine_API_Update+0x96c>
 800f83a:	9c06      	ldr	r4, [sp, #24]
 800f83c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f840:	1e81      	subs	r1, r0, #2
 800f842:	009b      	lsls	r3, r3, #2
 800f844:	b2c9      	uxtb	r1, r1
 800f846:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
 800f84a:	441a      	add	r2, r3
 800f84c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f850:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 800f854:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 800f858:	4423      	add	r3, r4
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	60da      	str	r2, [r3, #12]
 800f85e:	685a      	ldr	r2, [r3, #4]
 800f860:	611a      	str	r2, [r3, #16]
 800f862:	689a      	ldr	r2, [r3, #8]
 800f864:	615a      	str	r2, [r3, #20]
 800f866:	3b0c      	subs	r3, #12
 800f868:	428b      	cmp	r3, r1
 800f86a:	d1f6      	bne.n	800f85a <iNemoEngine_API_Update+0x95a>
 800f86c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f870:	edc5 8a00 	vstr	s17, [r5]
 800f874:	eec7 8aaf 	vdiv.f32	s17, s15, s31
 800f878:	9a06      	ldr	r2, [sp, #24]
 800f87a:	f202 43bc 	addw	r3, r2, #1212	; 0x4bc
 800f87e:	ed83 8a00 	vstr	s16, [r3]
 800f882:	f502 6398 	add.w	r3, r2, #1216	; 0x4c0
 800f886:	ed83 ca00 	vstr	s24, [r3]
 800f88a:	f892 34b0 	ldrb.w	r3, [r2, #1200]	; 0x4b0
 800f88e:	ed5f 7a4e 	vldr	s15, [pc, #-312]	; 800f758 <iNemoEngine_API_Update+0x858>
 800f892:	ee2a 8aa8 	vmul.f32	s16, s21, s17
 800f896:	3301      	adds	r3, #1
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	eeb0 7ac8 	vabs.f32	s14, s16
 800f89e:	4298      	cmp	r0, r3
 800f8a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f8a4:	bf28      	it	cs
 800f8a6:	4618      	movcs	r0, r3
 800f8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ac:	ee2a ca28 	vmul.f32	s24, s20, s17
 800f8b0:	f882 04b0 	strb.w	r0, [r2, #1200]	; 0x4b0
 800f8b4:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800f8b8:	d51f      	bpl.n	800f8fa <iNemoEngine_API_Update+0x9fa>
 800f8ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f8be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c6:	f281 87cb 	bge.w	8011860 <iNemoEngine_API_Update+0x2960>
 800f8ca:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800f8ce:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800f8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d6:	f303 8000 	bgt.w	80128da <iNemoEngine_API_Update+0x39da>
 800f8da:	ee78 7a67 	vsub.f32	s15, s16, s15
 800f8de:	ee17 0a90 	vmov	r0, s15
 800f8e2:	f7f0 fe31 	bl	8000548 <__aeabi_f2d>
 800f8e6:	ec41 0b10 	vmov	d0, r0, r1
 800f8ea:	f009 fca1 	bl	8019230 <ceil>
 800f8ee:	ec51 0b10 	vmov	r0, r1, d0
 800f8f2:	f7f1 f979 	bl	8000be8 <__aeabi_d2f>
 800f8f6:	ee08 0a10 	vmov	s16, r0
 800f8fa:	ed5f 7a69 	vldr	s15, [pc, #-420]	; 800f758 <iNemoEngine_API_Update+0x858>
 800f8fe:	ed8d 8a43 	vstr	s16, [sp, #268]	; 0x10c
 800f902:	eeb0 7acc 	vabs.f32	s14, s24
 800f906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f90e:	d51f      	bpl.n	800f950 <iNemoEngine_API_Update+0xa50>
 800f910:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f914:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f91c:	f281 878e 	bge.w	801183c <iNemoEngine_API_Update+0x293c>
 800f920:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800f924:	eeb4 cac7 	vcmpe.f32	s24, s14
 800f928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f92c:	f302 87cd 	bgt.w	80128ca <iNemoEngine_API_Update+0x39ca>
 800f930:	ee7c 7a67 	vsub.f32	s15, s24, s15
 800f934:	ee17 0a90 	vmov	r0, s15
 800f938:	f7f0 fe06 	bl	8000548 <__aeabi_f2d>
 800f93c:	ec41 0b10 	vmov	d0, r0, r1
 800f940:	f009 fc76 	bl	8019230 <ceil>
 800f944:	ec51 0b10 	vmov	r0, r1, d0
 800f948:	f7f1 f94e 	bl	8000be8 <__aeabi_d2f>
 800f94c:	ee0c 0a10 	vmov	s24, r0
 800f950:	ed5f 7a7f 	vldr	s15, [pc, #-508]	; 800f758 <iNemoEngine_API_Update+0x858>
 800f954:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 800f958:	eeb0 7ae8 	vabs.f32	s14, s17
 800f95c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f964:	d51f      	bpl.n	800f9a6 <iNemoEngine_API_Update+0xaa6>
 800f966:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f96a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f972:	f281 8751 	bge.w	8011818 <iNemoEngine_API_Update+0x2918>
 800f976:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800f97a:	eef4 8ac7 	vcmpe.f32	s17, s14
 800f97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f982:	f302 878e 	bgt.w	80128a2 <iNemoEngine_API_Update+0x39a2>
 800f986:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800f98a:	ee17 0a90 	vmov	r0, s15
 800f98e:	f7f0 fddb 	bl	8000548 <__aeabi_f2d>
 800f992:	ec41 0b10 	vmov	d0, r0, r1
 800f996:	f009 fc4b 	bl	8019230 <ceil>
 800f99a:	ec51 0b10 	vmov	r0, r1, d0
 800f99e:	f7f1 f923 	bl	8000be8 <__aeabi_d2f>
 800f9a2:	ee08 0a90 	vmov	s17, r0
 800f9a6:	9b06      	ldr	r3, [sp, #24]
 800f9a8:	edcd 8a45 	vstr	s17, [sp, #276]	; 0x114
 800f9ac:	f893 0621 	ldrb.w	r0, [r3, #1569]	; 0x621
 800f9b0:	1e43      	subs	r3, r0, #1
 800f9b2:	b25b      	sxtb	r3, r3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	dd18      	ble.n	800f9ea <iNemoEngine_API_Update+0xaea>
 800f9b8:	9c06      	ldr	r4, [sp, #24]
 800f9ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f9be:	1e81      	subs	r1, r0, #2
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	b2c9      	uxtb	r1, r1
 800f9c4:	f504 62c2 	add.w	r2, r4, #1552	; 0x610
 800f9c8:	441a      	add	r2, r3
 800f9ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f9ce:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 800f9d2:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 800f9d6:	4423      	add	r3, r4
 800f9d8:	681a      	ldr	r2, [r3, #0]
 800f9da:	60da      	str	r2, [r3, #12]
 800f9dc:	685a      	ldr	r2, [r3, #4]
 800f9de:	611a      	str	r2, [r3, #16]
 800f9e0:	689a      	ldr	r2, [r3, #8]
 800f9e2:	615a      	str	r2, [r3, #20]
 800f9e4:	3b0c      	subs	r3, #12
 800f9e6:	4299      	cmp	r1, r3
 800f9e8:	d1f6      	bne.n	800f9d8 <iNemoEngine_API_Update+0xad8>
 800f9ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f9ee:	ed86 8a00 	vstr	s16, [r6]
 800f9f2:	ee87 8a8f 	vdiv.f32	s16, s15, s30
 800f9f6:	9a06      	ldr	r2, [sp, #24]
 800f9f8:	f202 632c 	addw	r3, r2, #1580	; 0x62c
 800f9fc:	ed83 ca00 	vstr	s24, [r3]
 800fa00:	f502 63c6 	add.w	r3, r2, #1584	; 0x630
 800fa04:	edc3 8a00 	vstr	s17, [r3]
 800fa08:	f892 3620 	ldrb.w	r3, [r2, #1568]	; 0x620
 800fa0c:	ed5f 7aae 	vldr	s15, [pc, #-696]	; 800f758 <iNemoEngine_API_Update+0x858>
 800fa10:	ee68 8a0e 	vmul.f32	s17, s16, s28
 800fa14:	3301      	adds	r3, #1
 800fa16:	b2db      	uxtb	r3, r3
 800fa18:	eeb0 7ae8 	vabs.f32	s14, s17
 800fa1c:	4298      	cmp	r0, r3
 800fa1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa22:	bf28      	it	cs
 800fa24:	4618      	movcs	r0, r3
 800fa26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa2a:	ee28 ca2e 	vmul.f32	s24, s16, s29
 800fa2e:	f882 0620 	strb.w	r0, [r2, #1568]	; 0x620
 800fa32:	ee28 8a2b 	vmul.f32	s16, s16, s23
 800fa36:	d51f      	bpl.n	800fa78 <iNemoEngine_API_Update+0xb78>
 800fa38:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fa3c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800fa40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa44:	f281 86d6 	bge.w	80117f4 <iNemoEngine_API_Update+0x28f4>
 800fa48:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800fa4c:	eef4 8ac7 	vcmpe.f32	s17, s14
 800fa50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa54:	f302 8745 	bgt.w	80128e2 <iNemoEngine_API_Update+0x39e2>
 800fa58:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800fa5c:	ee17 0a90 	vmov	r0, s15
 800fa60:	f7f0 fd72 	bl	8000548 <__aeabi_f2d>
 800fa64:	ec41 0b10 	vmov	d0, r0, r1
 800fa68:	f009 fbe2 	bl	8019230 <ceil>
 800fa6c:	ec51 0b10 	vmov	r0, r1, d0
 800fa70:	f7f1 f8ba 	bl	8000be8 <__aeabi_d2f>
 800fa74:	ee08 0a90 	vmov	s17, r0
 800fa78:	ed5f 7ac9 	vldr	s15, [pc, #-804]	; 800f758 <iNemoEngine_API_Update+0x858>
 800fa7c:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 800fa80:	eeb0 7acc 	vabs.f32	s14, s24
 800fa84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa8c:	d51f      	bpl.n	800face <iNemoEngine_API_Update+0xbce>
 800fa8e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fa92:	eeb4 cae7 	vcmpe.f32	s24, s15
 800fa96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa9a:	f281 871d 	bge.w	80118d8 <iNemoEngine_API_Update+0x29d8>
 800fa9e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800faa2:	eeb4 cac7 	vcmpe.f32	s24, s14
 800faa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faaa:	f302 86fe 	bgt.w	80128aa <iNemoEngine_API_Update+0x39aa>
 800faae:	ee7c 7a67 	vsub.f32	s15, s24, s15
 800fab2:	ee17 0a90 	vmov	r0, s15
 800fab6:	f7f0 fd47 	bl	8000548 <__aeabi_f2d>
 800faba:	ec41 0b10 	vmov	d0, r0, r1
 800fabe:	f009 fbb7 	bl	8019230 <ceil>
 800fac2:	ec51 0b10 	vmov	r0, r1, d0
 800fac6:	f7f1 f88f 	bl	8000be8 <__aeabi_d2f>
 800faca:	ee0c 0a10 	vmov	s24, r0
 800face:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800f758 <iNemoEngine_API_Update+0x858>
 800fad2:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 800fad6:	eeb0 7ac8 	vabs.f32	s14, s16
 800fada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fae2:	d51f      	bpl.n	800fb24 <iNemoEngine_API_Update+0xc24>
 800fae4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fae8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800faec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf0:	f281 86c8 	bge.w	8011884 <iNemoEngine_API_Update+0x2984>
 800faf4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800faf8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800fafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb00:	f302 86df 	bgt.w	80128c2 <iNemoEngine_API_Update+0x39c2>
 800fb04:	ee78 7a67 	vsub.f32	s15, s16, s15
 800fb08:	ee17 0a90 	vmov	r0, s15
 800fb0c:	f7f0 fd1c 	bl	8000548 <__aeabi_f2d>
 800fb10:	ec41 0b10 	vmov	d0, r0, r1
 800fb14:	f009 fb8c 	bl	8019230 <ceil>
 800fb18:	ec51 0b10 	vmov	r0, r1, d0
 800fb1c:	f7f1 f864 	bl	8000be8 <__aeabi_d2f>
 800fb20:	ee08 0a10 	vmov	s16, r0
 800fb24:	9b06      	ldr	r3, [sp, #24]
 800fb26:	ed8d 8a45 	vstr	s16, [sp, #276]	; 0x114
 800fb2a:	f893 0791 	ldrb.w	r0, [r3, #1937]	; 0x791
 800fb2e:	1e43      	subs	r3, r0, #1
 800fb30:	b25b      	sxtb	r3, r3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	dd18      	ble.n	800fb68 <iNemoEngine_API_Update+0xc68>
 800fb36:	9c06      	ldr	r4, [sp, #24]
 800fb38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fb3c:	1e81      	subs	r1, r0, #2
 800fb3e:	009b      	lsls	r3, r3, #2
 800fb40:	b2c9      	uxtb	r1, r1
 800fb42:	f504 62f0 	add.w	r2, r4, #1920	; 0x780
 800fb46:	441a      	add	r2, r3
 800fb48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fb4c:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 800fb50:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 800fb54:	4423      	add	r3, r4
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	60da      	str	r2, [r3, #12]
 800fb5a:	685a      	ldr	r2, [r3, #4]
 800fb5c:	611a      	str	r2, [r3, #16]
 800fb5e:	689a      	ldr	r2, [r3, #8]
 800fb60:	615a      	str	r2, [r3, #20]
 800fb62:	3b0c      	subs	r3, #12
 800fb64:	428b      	cmp	r3, r1
 800fb66:	d1f6      	bne.n	800fb56 <iNemoEngine_API_Update+0xc56>
 800fb68:	9c06      	ldr	r4, [sp, #24]
 800fb6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb6c:	f204 729c 	addw	r2, r4, #1948	; 0x79c
 800fb70:	edc3 8a00 	vstr	s17, [r3]
 800fb74:	922e      	str	r2, [sp, #184]	; 0xb8
 800fb76:	ed82 ca00 	vstr	s24, [r2]
 800fb7a:	f504 62f4 	add.w	r2, r4, #1952	; 0x7a0
 800fb7e:	ed82 8a00 	vstr	s16, [r2]
 800fb82:	f894 3790 	ldrb.w	r3, [r4, #1936]	; 0x790
 800fb86:	922f      	str	r2, [sp, #188]	; 0xbc
 800fb88:	3301      	adds	r3, #1
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	4298      	cmp	r0, r3
 800fb8e:	bf28      	it	cs
 800fb90:	4618      	movcs	r0, r3
 800fb92:	f884 0790 	strb.w	r0, [r4, #1936]	; 0x790
 800fb96:	aa68      	add	r2, sp, #416	; 0x1a0
 800fb98:	a93d      	add	r1, sp, #244	; 0xf4
 800fb9a:	a840      	add	r0, sp, #256	; 0x100
 800fb9c:	f7fd fe26 	bl	800d7ec <getRotationMatrix>
 800fba0:	4623      	mov	r3, r4
 800fba2:	f504 7247 	add.w	r2, r4, #796	; 0x31c
 800fba6:	9229      	str	r2, [sp, #164]	; 0xa4
 800fba8:	4614      	mov	r4, r2
 800fbaa:	aeae      	add	r6, sp, #696	; 0x2b8
 800fbac:	f503 774f 	add.w	r7, r3, #828	; 0x33c
 800fbb0:	6820      	ldr	r0, [r4, #0]
 800fbb2:	6861      	ldr	r1, [r4, #4]
 800fbb4:	68a2      	ldr	r2, [r4, #8]
 800fbb6:	68e3      	ldr	r3, [r4, #12]
 800fbb8:	4635      	mov	r5, r6
 800fbba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fbbc:	3410      	adds	r4, #16
 800fbbe:	42bc      	cmp	r4, r7
 800fbc0:	462e      	mov	r6, r5
 800fbc2:	d1f5      	bne.n	800fbb0 <iNemoEngine_API_Update+0xcb0>
 800fbc4:	6820      	ldr	r0, [r4, #0]
 800fbc6:	6028      	str	r0, [r5, #0]
 800fbc8:	9b06      	ldr	r3, [sp, #24]
 800fbca:	edd3 7ac7 	vldr	s15, [r3, #796]	; 0x31c
 800fbce:	ed93 7ac8 	vldr	s14, [r3, #800]	; 0x320
 800fbd2:	eef0 7ae7 	vabs.f32	s15, s15
 800fbd6:	eeb0 7ac7 	vabs.f32	s14, s14
 800fbda:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe2:	f140 8543 	bpl.w	801066c <iNemoEngine_API_Update+0x176c>
 800fbe6:	2604      	movs	r6, #4
 800fbe8:	2400      	movs	r4, #0
 800fbea:	eef0 7a47 	vmov.f32	s15, s14
 800fbee:	f04f 0c07 	mov.w	ip, #7
 800fbf2:	f04f 0e06 	mov.w	lr, #6
 800fbf6:	2103      	movs	r1, #3
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	4623      	mov	r3, r4
 800fbfc:	2701      	movs	r7, #1
 800fbfe:	9a06      	ldr	r2, [sp, #24]
 800fc00:	ed92 7ac9 	vldr	s14, [r2, #804]	; 0x324
 800fc04:	eeb0 7ac7 	vabs.f32	s14, s14
 800fc08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc10:	f340 8525 	ble.w	801065e <iNemoEngine_API_Update+0x175e>
 800fc14:	f04f 0c08 	mov.w	ip, #8
 800fc18:	2104      	movs	r1, #4
 800fc1a:	f04f 0906 	mov.w	r9, #6
 800fc1e:	f04f 0e07 	mov.w	lr, #7
 800fc22:	f04f 0803 	mov.w	r8, #3
 800fc26:	2605      	movs	r6, #5
 800fc28:	4660      	mov	r0, ip
 800fc2a:	460c      	mov	r4, r1
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	2301      	movs	r3, #1
 800fc30:	2702      	movs	r7, #2
 800fc32:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800fc34:	442c      	add	r4, r5
 800fc36:	4428      	add	r0, r5
 800fc38:	ed90 7a00 	vldr	s14, [r0]
 800fc3c:	edd4 6a00 	vldr	s13, [r4]
 800fc40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc44:	a8ae      	add	r0, sp, #696	; 0x2b8
 800fc46:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800fc4a:	acae      	add	r4, sp, #696	; 0x2b8
 800fc4c:	adae      	add	r5, sp, #696	; 0x2b8
 800fc4e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800fc52:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800fc56:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 800fc5a:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800fc5e:	edc0 7a00 	vstr	s15, [r0]
 800fc62:	edd5 7a00 	vldr	s15, [r5]
 800fc66:	ed94 7a00 	vldr	s14, [r4]
 800fc6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fc6e:	edc4 6a00 	vstr	s13, [r4]
 800fc72:	ed90 6a00 	vldr	s12, [r0]
 800fc76:	a8ae      	add	r0, sp, #696	; 0x2b8
 800fc78:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800fc7c:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800fc80:	ed90 7a00 	vldr	s14, [r0]
 800fc84:	edd5 7a00 	vldr	s15, [r5]
 800fc88:	eee6 7a47 	vfms.f32	s15, s12, s14
 800fc8c:	00b4      	lsls	r4, r6, #2
 800fc8e:	9403      	str	r4, [sp, #12]
 800fc90:	ea4f 048c 	mov.w	r4, ip, lsl #2
 800fc94:	edc5 7a00 	vstr	s15, [r5]
 800fc98:	ed90 7a00 	vldr	s14, [r0]
 800fc9c:	a8ae      	add	r0, sp, #696	; 0x2b8
 800fc9e:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800fca2:	edd0 7a00 	vldr	s15, [r0]
 800fca6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800fcaa:	4626      	mov	r6, r4
 800fcac:	acae      	add	r4, sp, #696	; 0x2b8
 800fcae:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 800fcb2:	edc0 7a00 	vstr	s15, [r0]
 800fcb6:	a8ae      	add	r0, sp, #696	; 0x2b8
 800fcb8:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800fcbc:	edd0 5a00 	vldr	s11, [r0]
 800fcc0:	ed94 7a00 	vldr	s14, [r4]
 800fcc4:	eea6 7a65 	vfms.f32	s14, s12, s11
 800fcc8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800fccc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800fcd0:	eef0 7ae7 	vabs.f32	s15, s15
 800fcd4:	ed84 7a00 	vstr	s14, [r4]
 800fcd8:	ed90 6a00 	vldr	s12, [r0]
 800fcdc:	a8ae      	add	r0, sp, #696	; 0x2b8
 800fcde:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 800fce2:	ed90 7a00 	vldr	s14, [r0]
 800fce6:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800fcea:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800fcee:	ea4f 048e 	mov.w	r4, lr, lsl #2
 800fcf2:	ed80 7a00 	vstr	s14, [r0]
 800fcf6:	ed95 7a00 	vldr	s14, [r5]
 800fcfa:	eeb0 7ac7 	vabs.f32	s14, s14
 800fcfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd06:	ea4f 0581 	mov.w	r5, r1, lsl #2
 800fd0a:	dd0b      	ble.n	800fd24 <iNemoEngine_API_Update+0xe24>
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	4645      	mov	r5, r8
 800fd10:	4613      	mov	r3, r2
 800fd12:	464c      	mov	r4, r9
 800fd14:	46d4      	mov	ip, sl
 800fd16:	4602      	mov	r2, r0
 800fd18:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800fd1c:	ea4f 098e 	mov.w	r9, lr, lsl #2
 800fd20:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 800fd24:	a9ae      	add	r1, sp, #696	; 0x2b8
 800fd26:	eb01 0008 	add.w	r0, r1, r8
 800fd2a:	440d      	add	r5, r1
 800fd2c:	ed90 7a00 	vldr	s14, [r0]
 800fd30:	edd5 7a00 	vldr	s15, [r5]
 800fd34:	ee87 4a27 	vdiv.f32	s8, s14, s15
 800fd38:	440c      	add	r4, r1
 800fd3a:	eb01 0809 	add.w	r8, r1, r9
 800fd3e:	440e      	add	r6, r1
 800fd40:	46b6      	mov	lr, r6
 800fd42:	460e      	mov	r6, r1
 800fd44:	9903      	ldr	r1, [sp, #12]
 800fd46:	4431      	add	r1, r6
 800fd48:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800fd4c:	ed80 4a00 	vstr	s8, [r0]
 800fd50:	ed94 7a00 	vldr	s14, [r4]
 800fd54:	edd8 7a00 	vldr	s15, [r8]
 800fd58:	eee4 7a47 	vfms.f32	s15, s8, s14
 800fd5c:	a8ae      	add	r0, sp, #696	; 0x2b8
 800fd5e:	edc8 7a00 	vstr	s15, [r8]
 800fd62:	edd1 2a00 	vldr	s5, [r1]
 800fd66:	ed95 7a00 	vldr	s14, [r5]
 800fd6a:	ed94 1a00 	vldr	s2, [r4]
 800fd6e:	edde 1a00 	vldr	s3, [lr]
 800fd72:	f50b 61b2 	add.w	r1, fp, #1424	; 0x590
 800fd76:	4469      	add	r1, sp
 800fd78:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 800fd7c:	ee83 2a87 	vdiv.f32	s4, s7, s14
 800fd80:	ed91 7a00 	vldr	s14, [r1]
 800fd84:	a9ae      	add	r1, sp, #696	; 0x2b8
 800fd86:	448b      	add	fp, r1
 800fd88:	f50c 61b2 	add.w	r1, ip, #1424	; 0x590
 800fd8c:	eec3 0aa7 	vdiv.f32	s1, s7, s15
 800fd90:	4469      	add	r1, sp
 800fd92:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 800fd96:	4484      	add	ip, r0
 800fd98:	4450      	add	r0, sl
 800fd9a:	edd1 6a00 	vldr	s13, [r1]
 800fd9e:	eddb 7a00 	vldr	s15, [fp]
 800fda2:	ed90 0a00 	vldr	s0, [r0]
 800fda6:	f50a 61b2 	add.w	r1, sl, #1424	; 0x590
 800fdaa:	4469      	add	r1, sp
 800fdac:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 800fdb0:	ee83 3aa7 	vdiv.f32	s6, s7, s15
 800fdb4:	edd1 4a00 	vldr	s9, [r1]
 800fdb8:	eddc 7a00 	vldr	s15, [ip]
 800fdbc:	eee0 4a47 	vfms.f32	s9, s0, s14
 800fdc0:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 800fdc4:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800fdc8:	eee7 6ac7 	vfms.f32	s13, s15, s14
 800fdcc:	4601      	mov	r1, r0
 800fdce:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 800fdd2:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 800fdd6:	eee4 4a66 	vfms.f32	s9, s8, s13
 800fdda:	ed90 5a00 	vldr	s10, [r0]
 800fdde:	ee60 4aa4 	vmul.f32	s9, s1, s9
 800fde2:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 800fde6:	eee1 6a64 	vfms.f32	s13, s2, s9
 800fdea:	eea1 7ae4 	vfms.f32	s14, s3, s9
 800fdee:	ee62 8a26 	vmul.f32	s17, s4, s13
 800fdf2:	edd1 6a00 	vldr	s13, [r1]
 800fdf6:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 800fdfa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800fdfe:	460b      	mov	r3, r1
 800fe00:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800fe04:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 800fe08:	edd1 5a00 	vldr	s11, [r1]
 800fe0c:	ed93 8a00 	vldr	s16, [r3]
 800fe10:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800fe14:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 800fe18:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 800fe1c:	eee7 5ac5 	vfms.f32	s11, s15, s10
 800fe20:	eea6 8ae7 	vfms.f32	s16, s13, s15
 800fe24:	ed92 6a00 	vldr	s12, [r2]
 800fe28:	edd3 7a00 	vldr	s15, [r3]
 800fe2c:	eea0 6a45 	vfms.f32	s12, s0, s10
 800fe30:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800fe34:	eea4 6a65 	vfms.f32	s12, s8, s11
 800fe38:	eee4 7a48 	vfms.f32	s15, s8, s16
 800fe3c:	ee20 6a86 	vmul.f32	s12, s1, s12
 800fe40:	ee67 7aa0 	vmul.f32	s15, s15, s1
 800fe44:	eee1 5a46 	vfms.f32	s11, s2, s12
 800fe48:	eea7 8ac1 	vfms.f32	s16, s15, s2
 800fe4c:	eea1 5ac6 	vfms.f32	s10, s3, s12
 800fe50:	eee7 6ae1 	vfms.f32	s13, s15, s3
 800fe54:	ee62 5a25 	vmul.f32	s11, s4, s11
 800fe58:	ee28 2a02 	vmul.f32	s4, s16, s4
 800fe5c:	eea2 7ae8 	vfms.f32	s14, s5, s17
 800fe60:	eee2 6a62 	vfms.f32	s13, s4, s5
 800fe64:	eea2 5ae5 	vfms.f32	s10, s5, s11
 800fe68:	ee23 7a07 	vmul.f32	s14, s6, s14
 800fe6c:	ee23 5a05 	vmul.f32	s10, s6, s10
 800fe70:	ee26 3a83 	vmul.f32	s6, s13, s6
 800fe74:	ee77 6aa5 	vadd.f32	s13, s15, s11
 800fe78:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 800fe7c:	ee77 6a66 	vsub.f32	s13, s14, s13
 800fe80:	ee36 6a42 	vsub.f32	s12, s12, s4
 800fe84:	eef4 6ac4 	vcmpe.f32	s13, s8
 800fe88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe8c:	bfc8      	it	gt
 800fe8e:	ee76 6aa3 	vaddgt.f32	s13, s13, s7
 800fe92:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800fe96:	bfcc      	ite	gt
 800fe98:	eeb1 4ae6 	vsqrtgt.f32	s8, s13
 800fe9c:	ed9f 4ad7 	vldrle	s8, [pc, #860]	; 80101fc <iNemoEngine_API_Update+0x12fc>
 800fea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea4:	f100 8411 	bmi.w	80106ca <iNemoEngine_API_Update+0x17ca>
 800fea8:	bfd8      	it	le
 800feaa:	ee24 4a06 	vmulle.f32	s8, s8, s12
 800feae:	ee77 6a87 	vadd.f32	s13, s15, s14
 800feb2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800feb6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800feba:	ee24 6a06 	vmul.f32	s12, s8, s12
 800febe:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 800fec2:	eef4 6ac4 	vcmpe.f32	s13, s8
 800fec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feca:	bf88      	it	hi
 800fecc:	eeb7 4a00 	vmovhi.f32	s8, #112	; 0x3f800000  1.0
 800fed0:	ee33 3a64 	vsub.f32	s6, s6, s9
 800fed4:	bf88      	it	hi
 800fed6:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 800feda:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 800fede:	bf8c      	ite	hi
 800fee0:	eef1 6ac4 	vsqrthi.f32	s13, s8
 800fee4:	eddf 6ac5 	vldrls	s13, [pc, #788]	; 80101fc <iNemoEngine_API_Update+0x12fc>
 800fee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feec:	f100 83ea 	bmi.w	80106c4 <iNemoEngine_API_Update+0x17c4>
 800fef0:	bfd8      	it	le
 800fef2:	ee66 6a83 	vmulle.f32	s13, s13, s6
 800fef6:	ee37 7a25 	vadd.f32	s14, s14, s11
 800fefa:	ee38 5ac5 	vsub.f32	s10, s17, s10
 800fefe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ff06:	ee66 6a87 	vmul.f32	s13, s13, s14
 800ff0a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ff0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ff12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff16:	bf84      	itt	hi
 800ff18:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800ff1c:	ee37 7a87 	vaddhi.f32	s14, s15, s14
 800ff20:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800ff24:	bf8c      	ite	hi
 800ff26:	eef1 7ac7 	vsqrthi.f32	s15, s14
 800ff2a:	eddf 7ab4 	vldrls	s15, [pc, #720]	; 80101fc <iNemoEngine_API_Update+0x12fc>
 800ff2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff32:	f100 83ce 	bmi.w	80106d2 <iNemoEngine_API_Update+0x17d2>
 800ff36:	bfd8      	it	le
 800ff38:	ee67 7a85 	vmulle.f32	s15, s15, s10
 800ff3c:	9b06      	ldr	r3, [sp, #24]
 800ff3e:	f893 2341 	ldrb.w	r2, [r3, #833]	; 0x341
 800ff42:	1e53      	subs	r3, r2, #1
 800ff44:	b25b      	sxtb	r3, r3
 800ff46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff50:	dd1d      	ble.n	800ff8e <iNemoEngine_API_Update+0x108e>
 800ff52:	9806      	ldr	r0, [sp, #24]
 800ff54:	3a02      	subs	r2, #2
 800ff56:	b2d1      	uxtb	r1, r2
 800ff58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ff5c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ff60:	f1a0 010c 	sub.w	r1, r0, #12
 800ff64:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800ff68:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800ff6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ff70:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800ff74:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800ff78:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800ff7c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 800ff80:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800ff84:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800ff88:	3b0c      	subs	r3, #12
 800ff8a:	428b      	cmp	r3, r1
 800ff8c:	d1f0      	bne.n	800ff70 <iNemoEngine_API_Update+0x1070>
 800ff8e:	ed9d 7a07 	vldr	s14, [sp, #28]
 800ff92:	9b06      	ldr	r3, [sp, #24]
 800ff94:	9310      	str	r3, [sp, #64]	; 0x40
 800ff96:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ff9a:	ee85 7a87 	vdiv.f32	s14, s11, s14
 800ff9e:	aa3d      	add	r2, sp, #244	; 0xf4
 800ffa0:	922b      	str	r2, [sp, #172]	; 0xac
 800ffa2:	9212      	str	r2, [sp, #72]	; 0x48
 800ffa4:	f50d 7be2 	add.w	fp, sp, #452	; 0x1c4
 800ffa8:	f50d 7af4 	add.w	sl, sp, #488	; 0x1e8
 800ffac:	ee36 6a06 	vadd.f32	s12, s12, s12
 800ffb0:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800ffb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ffb8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ffbc:	ee66 6a87 	vmul.f32	s13, s13, s14
 800ffc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffc4:	ed83 6ad2 	vstr	s12, [r3, #840]	; 0x348
 800ffc8:	edc3 6ad3 	vstr	s13, [r3, #844]	; 0x34c
 800ffcc:	edc3 7ad4 	vstr	s15, [r3, #848]	; 0x350
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	930e      	str	r3, [sp, #56]	; 0x38
 800ffd4:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 800ffd8:	f1c3 0301 	rsb	r3, r3, #1
 800ffdc:	9328      	str	r3, [sp, #160]	; 0xa0
 800ffde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffe0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ffe2:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	930e      	str	r3, [sp, #56]	; 0x38
 800ffe8:	a9ae      	add	r1, sp, #696	; 0x2b8
 800ffea:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 800ffee:	18e0      	adds	r0, r4, r3
 800fff0:	f803 0f01 	strb.w	r0, [r3, #1]!
 800fff4:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800fff8:	f841 0b04 	str.w	r0, [r1], #4
 800fffc:	f20d 10e1 	addw	r0, sp, #481	; 0x1e1
 8010000:	4283      	cmp	r3, r0
 8010002:	f102 020c 	add.w	r2, r2, #12
 8010006:	d1f2      	bne.n	800ffee <iNemoEngine_API_Update+0x10ee>
 8010008:	ed9d 7aae 	vldr	s14, [sp, #696]	; 0x2b8
 801000c:	eddd 7aaf 	vldr	s15, [sp, #700]	; 0x2bc
 8010010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010014:	ed9d 7ab0 	vldr	s14, [sp, #704]	; 0x2c0
 8010018:	eddd 7ab1 	vldr	s15, [sp, #708]	; 0x2c4
 801001c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010020:	bf88      	it	hi
 8010022:	f44f 7381 	movhi.w	r3, #258	; 0x102
 8010026:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801002a:	ed9d 7ab2 	vldr	s14, [sp, #712]	; 0x2c8
 801002e:	eddd 7ab3 	vldr	s15, [sp, #716]	; 0x2cc
 8010032:	bf88      	it	hi
 8010034:	f8ab 3000 	strhhi.w	r3, [fp]
 8010038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801003c:	bf88      	it	hi
 801003e:	f44f 7341 	movhi.w	r3, #772	; 0x304
 8010042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010046:	ed9d 7ab4 	vldr	s14, [sp, #720]	; 0x2d0
 801004a:	eddd 7ab5 	vldr	s15, [sp, #724]	; 0x2d4
 801004e:	bf88      	it	hi
 8010050:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 8010054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010058:	bf88      	it	hi
 801005a:	f240 5306 	movwhi	r3, #1286	; 0x506
 801005e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010062:	ed9d 7ab6 	vldr	s14, [sp, #728]	; 0x2d8
 8010066:	eddd 7ab7 	vldr	s15, [sp, #732]	; 0x2dc
 801006a:	bf88      	it	hi
 801006c:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 8010070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010074:	bf88      	it	hi
 8010076:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 801007a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801007e:	ed9d 7ab8 	vldr	s14, [sp, #736]	; 0x2e0
 8010082:	eddd 7ab9 	vldr	s15, [sp, #740]	; 0x2e4
 8010086:	bf88      	it	hi
 8010088:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 801008c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010090:	bf88      	it	hi
 8010092:	f640 130a 	movwhi	r3, #2314	; 0x90a
 8010096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801009a:	ed9d 7aba 	vldr	s14, [sp, #744]	; 0x2e8
 801009e:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 80100a2:	bf88      	it	hi
 80100a4:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 80100a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ac:	bf88      	it	hi
 80100ae:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 80100b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100b6:	ed9d 7abc 	vldr	s14, [sp, #752]	; 0x2f0
 80100ba:	eddd 7abd 	vldr	s15, [sp, #756]	; 0x2f4
 80100be:	bf88      	it	hi
 80100c0:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 80100c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c8:	bf88      	it	hi
 80100ca:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 80100ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100d2:	ed9d 7abe 	vldr	s14, [sp, #760]	; 0x2f8
 80100d6:	eddd 7abf 	vldr	s15, [sp, #764]	; 0x2fc
 80100da:	bf88      	it	hi
 80100dc:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 80100e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e4:	bf88      	it	hi
 80100e6:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 80100ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100ee:	ed9d 7ac0 	vldr	s14, [sp, #768]	; 0x300
 80100f2:	eddd 7ac1 	vldr	s15, [sp, #772]	; 0x304
 80100f6:	bf88      	it	hi
 80100f8:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 80100fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010100:	bf88      	it	hi
 8010102:	f241 1312 	movwhi	r3, #4370	; 0x1112
 8010106:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801010a:	ed9d 7ac2 	vldr	s14, [sp, #776]	; 0x308
 801010e:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 8010112:	bf88      	it	hi
 8010114:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8010118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801011c:	bf88      	it	hi
 801011e:	f241 3314 	movwhi	r3, #4884	; 0x1314
 8010122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010126:	bf88      	it	hi
 8010128:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 801012c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010130:	bf84      	itt	hi
 8010132:	f241 5316 	movwhi	r3, #5398	; 0x1516
 8010136:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 801013a:	ed9d 7ac4 	vldr	s14, [sp, #784]	; 0x310
 801013e:	eddd 7ac5 	vldr	s15, [sp, #788]	; 0x314
 8010142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010146:	ed9d 7ac6 	vldr	s14, [sp, #792]	; 0x318
 801014a:	eddd 7ac7 	vldr	s15, [sp, #796]	; 0x31c
 801014e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010152:	bf88      	it	hi
 8010154:	f241 7318 	movwhi	r3, #5912	; 0x1718
 8010158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801015c:	ed9d 7ac8 	vldr	s14, [sp, #800]	; 0x320
 8010160:	eddd 7ac9 	vldr	s15, [sp, #804]	; 0x324
 8010164:	bf88      	it	hi
 8010166:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 801016a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016e:	bf88      	it	hi
 8010170:	f641 131a 	movwhi	r3, #6426	; 0x191a
 8010174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010178:	ed9d 7aca 	vldr	s14, [sp, #808]	; 0x328
 801017c:	eddd 7acb 	vldr	s15, [sp, #812]	; 0x32c
 8010180:	bf88      	it	hi
 8010182:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 8010186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801018a:	bf88      	it	hi
 801018c:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8010190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010194:	bf88      	it	hi
 8010196:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 801019a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801019e:	bf84      	itt	hi
 80101a0:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 80101a4:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 80101a8:	221e      	movs	r2, #30
 80101aa:	2101      	movs	r1, #1
 80101ac:	4650      	mov	r0, sl
 80101ae:	f005 faf3 	bl	8015798 <memset>
 80101b2:	2304      	movs	r3, #4
 80101b4:	930c      	str	r3, [sp, #48]	; 0x30
 80101b6:	2302      	movs	r3, #2
 80101b8:	9307      	str	r3, [sp, #28]
 80101ba:	9a07      	ldr	r2, [sp, #28]
 80101bc:	920a      	str	r2, [sp, #40]	; 0x28
 80101be:	4613      	mov	r3, r2
 80101c0:	0052      	lsls	r2, r2, #1
 80101c2:	9207      	str	r2, [sp, #28]
 80101c4:	f103 0901 	add.w	r9, r3, #1
 80101c8:	f04f 0801 	mov.w	r8, #1
 80101cc:	9b07      	ldr	r3, [sp, #28]
 80101ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80101d2:	4443      	add	r3, r8
 80101d4:	2b1f      	cmp	r3, #31
 80101d6:	bfa8      	it	ge
 80101d8:	231f      	movge	r3, #31
 80101da:	4642      	mov	r2, r8
 80101dc:	1a9f      	subs	r7, r3, r2
 80101de:	2f00      	cmp	r7, #0
 80101e0:	4698      	mov	r8, r3
 80101e2:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 80101e6:	dd54      	ble.n	8010292 <iNemoEngine_API_Update+0x1392>
 80101e8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80101ec:	9304      	str	r3, [sp, #16]
 80101ee:	f1a8 0302 	sub.w	r3, r8, #2
 80101f2:	4616      	mov	r6, r2
 80101f4:	2400      	movs	r4, #0
 80101f6:	9305      	str	r3, [sp, #20]
 80101f8:	e00f      	b.n	801021a <iNemoEngine_API_Update+0x131a>
 80101fa:	bf00      	nop
 80101fc:	00000000 	.word	0x00000000
 8010200:	3f333333 	.word	0x3f333333
 8010204:	3f4ccccd 	.word	0x3f4ccccd
 8010208:	45f0      	cmp	r8, lr
 801020a:	f80a 2004 	strb.w	r2, [sl, r4]
 801020e:	f000 81f6 	beq.w	80105fe <iNemoEngine_API_Update+0x16fe>
 8010212:	4665      	mov	r5, ip
 8010214:	3401      	adds	r4, #1
 8010216:	42a7      	cmp	r7, r4
 8010218:	dd34      	ble.n	8010284 <iNemoEngine_API_Update+0x1384>
 801021a:	1e71      	subs	r1, r6, #1
 801021c:	a8ae      	add	r0, sp, #696	; 0x2b8
 801021e:	f91b 3001 	ldrsb.w	r3, [fp, r1]
 8010222:	f91b 2005 	ldrsb.w	r2, [fp, r5]
 8010226:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801022a:	ed10 7a01 	vldr	s14, [r0, #-4]
 801022e:	a8ae      	add	r0, sp, #696	; 0x2b8
 8010230:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8010234:	ed50 7a01 	vldr	s15, [r0, #-4]
 8010238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801023c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010240:	f105 0e02 	add.w	lr, r5, #2
 8010244:	f105 0c01 	add.w	ip, r5, #1
 8010248:	d8de      	bhi.n	8010208 <iNemoEngine_API_Update+0x1308>
 801024a:	3601      	adds	r6, #1
 801024c:	454e      	cmp	r6, r9
 801024e:	f80a 3004 	strb.w	r3, [sl, r4]
 8010252:	d1df      	bne.n	8010214 <iNemoEngine_API_Update+0x1314>
 8010254:	1c6b      	adds	r3, r5, #1
 8010256:	9a04      	ldr	r2, [sp, #16]
 8010258:	9308      	str	r3, [sp, #32]
 801025a:	1c60      	adds	r0, r4, #1
 801025c:	4598      	cmp	r8, r3
 801025e:	eba2 0205 	sub.w	r2, r2, r5
 8010262:	4450      	add	r0, sl
 8010264:	ddd6      	ble.n	8010214 <iNemoEngine_API_Update+0x1314>
 8010266:	eb0b 0105 	add.w	r1, fp, r5
 801026a:	f005 facd 	bl	8015808 <memcpy>
 801026e:	9a04      	ldr	r2, [sp, #16]
 8010270:	9b05      	ldr	r3, [sp, #20]
 8010272:	4414      	add	r4, r2
 8010274:	1b64      	subs	r4, r4, r5
 8010276:	1b5a      	subs	r2, r3, r5
 8010278:	3401      	adds	r4, #1
 801027a:	9b08      	ldr	r3, [sp, #32]
 801027c:	42a7      	cmp	r7, r4
 801027e:	eb02 0503 	add.w	r5, r2, r3
 8010282:	dcca      	bgt.n	801021a <iNemoEngine_API_Update+0x131a>
 8010284:	9b03      	ldr	r3, [sp, #12]
 8010286:	1e58      	subs	r0, r3, #1
 8010288:	463a      	mov	r2, r7
 801028a:	4458      	add	r0, fp
 801028c:	4651      	mov	r1, sl
 801028e:	f005 fabb 	bl	8015808 <memcpy>
 8010292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010294:	eb08 0903 	add.w	r9, r8, r3
 8010298:	f1b9 0f1e 	cmp.w	r9, #30
 801029c:	dd96      	ble.n	80101cc <iNemoEngine_API_Update+0x12cc>
 801029e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102a0:	3b01      	subs	r3, #1
 80102a2:	930c      	str	r3, [sp, #48]	; 0x30
 80102a4:	d189      	bne.n	80101ba <iNemoEngine_API_Update+0x12ba>
 80102a6:	f99b 300e 	ldrsb.w	r3, [fp, #14]
 80102aa:	aaae      	add	r2, sp, #696	; 0x2b8
 80102ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80102b0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80102b4:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 80102b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80102bc:	ed13 7a01 	vldr	s14, [r3, #-4]
 80102c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80102c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80102cc:	bf4c      	ite	mi
 80102ce:	2201      	movmi	r2, #1
 80102d0:	2200      	movpl	r2, #0
 80102d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102d6:	bf4c      	ite	mi
 80102d8:	2301      	movmi	r3, #1
 80102da:	2300      	movpl	r3, #0
 80102dc:	429a      	cmp	r2, r3
 80102de:	f000 819d 	beq.w	801061c <iNemoEngine_API_Update+0x171c>
 80102e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80102ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80102f0:	ece3 7a01 	vstmia	r3!, {s15}
 80102f4:	9312      	str	r3, [sp, #72]	; 0x48
 80102f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80102f8:	3304      	adds	r3, #4
 80102fa:	9310      	str	r3, [sp, #64]	; 0x40
 80102fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102fe:	2b03      	cmp	r3, #3
 8010300:	f47f ae6d 	bne.w	800ffde <iNemoEngine_API_Update+0x10de>
 8010304:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8010308:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 801030c:	eddd 6a16 	vldr	s13, [sp, #88]	; 0x58
 8010310:	ed1f 1a45 	vldr	s2, [pc, #-276]	; 8010200 <iNemoEngine_API_Update+0x1300>
 8010314:	9a06      	ldr	r2, [sp, #24]
 8010316:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801031a:	ee2d 1a81 	vmul.f32	s2, s27, s2
 801031e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010322:	f892 3900 	ldrb.w	r3, [r2, #2304]	; 0x900
 8010326:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 801032a:	eeb0 8a67 	vmov.f32	s16, s15
 801032e:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 8010332:	eea7 8aa7 	vfma.f32	s16, s15, s15
 8010336:	f502 6810 	add.w	r8, r2, #2304	; 0x900
 801033a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801033e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010342:	eeb1 6ac8 	vsqrt.f32	s12, s16
 8010346:	eec7 5a0d 	vdiv.f32	s11, s14, s26
 801034a:	ee2b 7a27 	vmul.f32	s14, s22, s15
 801034e:	ee6d 7aa7 	vmul.f32	s15, s27, s15
 8010352:	eec7 6a26 	vdiv.f32	s13, s14, s13
 8010356:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 801035a:	edcd 5a52 	vstr	s11, [sp, #328]	; 0x148
 801035e:	ee87 5a87 	vdiv.f32	s10, s15, s14
 8010362:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010366:	eeb0 7a41 	vmov.f32	s14, s2
 801036a:	eeab 7a27 	vfma.f32	s14, s22, s15
 801036e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8010372:	ed5f 7a5c 	vldr	s15, [pc, #-368]	; 8010204 <iNemoEngine_API_Update+0x1304>
 8010376:	ed8d 7a03 	vstr	s14, [sp, #12]
 801037a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801037e:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 8010382:	ed8d 5a54 	vstr	s10, [sp, #336]	; 0x150
 8010386:	ed8d 6a55 	vstr	s12, [sp, #340]	; 0x154
 801038a:	2b00      	cmp	r3, #0
 801038c:	f040 8159 	bne.w	8010642 <iNemoEngine_API_Update+0x1742>
 8010390:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8010394:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8010398:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801039c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 80103a0:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80103a4:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 80103a8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80103ac:	f8c8 3020 	str.w	r3, [r8, #32]
 80103b0:	edc8 7a07 	vstr	s15, [r8, #28]
 80103b4:	f602 130c 	addw	r3, r2, #2316	; 0x90c
 80103b8:	edd3 8a00 	vldr	s17, [r3]
 80103bc:	edd2 2a02 	vldr	s5, [r2, #8]
 80103c0:	f602 1324 	addw	r3, r2, #2340	; 0x924
 80103c4:	edd3 7a00 	vldr	s15, [r3]
 80103c8:	f602 1308 	addw	r3, r2, #2312	; 0x908
 80103cc:	ed93 7a00 	vldr	s14, [r3]
 80103d0:	f502 6312 	add.w	r3, r2, #2336	; 0x920
 80103d4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80103d8:	edd3 7a00 	vldr	s15, [r3]
 80103dc:	f502 6311 	add.w	r3, r2, #2320	; 0x910
 80103e0:	eee7 8a27 	vfma.f32	s17, s14, s15
 80103e4:	ed93 7a00 	vldr	s14, [r3]
 80103e8:	f602 1328 	addw	r3, r2, #2344	; 0x928
 80103ec:	edd3 7a00 	vldr	s15, [r3]
 80103f0:	f602 1314 	addw	r3, r2, #2324	; 0x914
 80103f4:	eee7 8a27 	vfma.f32	s17, s14, s15
 80103f8:	ed93 7a00 	vldr	s14, [r3]
 80103fc:	f602 132c 	addw	r3, r2, #2348	; 0x92c
 8010400:	edd3 7a00 	vldr	s15, [r3]
 8010404:	f602 1304 	addw	r3, r2, #2308	; 0x904
 8010408:	eee7 8a27 	vfma.f32	s17, s14, s15
 801040c:	ed93 7a00 	vldr	s14, [r3]
 8010410:	f602 131c 	addw	r3, r2, #2332	; 0x91c
 8010414:	edd3 7a00 	vldr	s15, [r3]
 8010418:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 801041c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010420:	eee7 8a27 	vfma.f32	s17, s14, s15
 8010424:	f340 8158 	ble.w	80106d8 <iNemoEngine_API_Update+0x17d8>
 8010428:	edd2 7a30 	vldr	s15, [r2, #192]	; 0xc0
 801042c:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010434:	f101 8112 	bmi.w	801165c <iNemoEngine_API_Update+0x275c>
 8010438:	ed92 fa31 	vldr	s30, [r2, #196]	; 0xc4
 801043c:	4613      	mov	r3, r2
 801043e:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 8010442:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801044a:	f142 8186 	bpl.w	801275a <iNemoEngine_API_Update+0x385a>
 801044e:	edd3 4a62 	vldr	s9, [r3, #392]	; 0x188
 8010452:	eef4 4ae8 	vcmpe.f32	s9, s17
 8010456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801045a:	f342 821e 	ble.w	801289a <iNemoEngine_API_Update+0x399a>
 801045e:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 8010462:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8010466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046a:	f302 8555 	bgt.w	8012f18 <iNemoEngine_API_Update+0x4018>
 801046e:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8010472:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801047a:	f142 8565 	bpl.w	8012f48 <iNemoEngine_API_Update+0x4048>
 801047e:	edd3 3a4d 	vldr	s7, [r3, #308]	; 0x134
 8010482:	ed93 4a4f 	vldr	s8, [r3, #316]	; 0x13c
 8010486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801048a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801048e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8010492:	ee24 7a07 	vmul.f32	s14, s8, s14
 8010496:	ee87 ca27 	vdiv.f32	s24, s14, s15
 801049a:	ee3c ca23 	vadd.f32	s24, s24, s7
 801049e:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80104a2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80104a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104aa:	f2c2 8566 	blt.w	8012f7a <iNemoEngine_API_Update+0x407a>
 80104ae:	9b06      	ldr	r3, [sp, #24]
 80104b0:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 80104b4:	eef4 8ac7 	vcmpe.f32	s17, s14
 80104b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104bc:	f142 87a3 	bpl.w	8013406 <iNemoEngine_API_Update+0x4506>
 80104c0:	edd3 3a51 	vldr	s7, [r3, #324]	; 0x144
 80104c4:	ed93 4a53 	vldr	s8, [r3, #332]	; 0x14c
 80104c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80104cc:	ee34 4a63 	vsub.f32	s8, s8, s7
 80104d0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80104d4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80104d8:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80104dc:	ee3c ca23 	vadd.f32	s24, s24, s7
 80104e0:	9b06      	ldr	r3, [sp, #24]
 80104e2:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 80104e6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80104ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ee:	f2c2 8566 	blt.w	8012fbe <iNemoEngine_API_Update+0x40be>
 80104f2:	9b06      	ldr	r3, [sp, #24]
 80104f4:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 80104f8:	eef4 8ac7 	vcmpe.f32	s17, s14
 80104fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010500:	f142 87dc 	bpl.w	80134bc <iNemoEngine_API_Update+0x45bc>
 8010504:	edd3 3a55 	vldr	s7, [r3, #340]	; 0x154
 8010508:	ed93 4a57 	vldr	s8, [r3, #348]	; 0x15c
 801050c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010510:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010514:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8010518:	ee64 7a27 	vmul.f32	s15, s8, s15
 801051c:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8010520:	ee3c ca23 	vadd.f32	s24, s24, s7
 8010524:	9b06      	ldr	r3, [sp, #24]
 8010526:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 801052a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801052e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010532:	f2c2 8566 	blt.w	8013002 <iNemoEngine_API_Update+0x4102>
 8010536:	9b06      	ldr	r3, [sp, #24]
 8010538:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 801053c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010544:	f142 87c5 	bpl.w	80134d2 <iNemoEngine_API_Update+0x45d2>
 8010548:	edd3 3a59 	vldr	s7, [r3, #356]	; 0x164
 801054c:	ed93 4a5b 	vldr	s8, [r3, #364]	; 0x16c
 8010550:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010554:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010558:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801055c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8010560:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8010564:	ee3c ca23 	vadd.f32	s24, s24, s7
 8010568:	9b06      	ldr	r3, [sp, #24]
 801056a:	edd3 7a5c 	vldr	s15, [r3, #368]	; 0x170
 801056e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010576:	f2c2 8566 	blt.w	8013046 <iNemoEngine_API_Update+0x4146>
 801057a:	9b06      	ldr	r3, [sp, #24]
 801057c:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 8010580:	eef4 8ac7 	vcmpe.f32	s17, s14
 8010584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010588:	f142 8795 	bpl.w	80134b6 <iNemoEngine_API_Update+0x45b6>
 801058c:	edd3 3a5d 	vldr	s7, [r3, #372]	; 0x174
 8010590:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 8010594:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010598:	ee34 4a63 	vsub.f32	s8, s8, s7
 801059c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80105a0:	ee64 7a27 	vmul.f32	s15, s8, s15
 80105a4:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80105a8:	ee3c ca23 	vadd.f32	s24, s24, s7
 80105ac:	9b06      	ldr	r3, [sp, #24]
 80105ae:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 80105b2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80105b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ba:	f2c0 8092 	blt.w	80106e2 <iNemoEngine_API_Update+0x17e2>
 80105be:	9b06      	ldr	r3, [sp, #24]
 80105c0:	ed93 4a61 	vldr	s8, [r3, #388]	; 0x184
 80105c4:	ed93 7a63 	vldr	s14, [r3, #396]	; 0x18c
 80105c8:	ee74 4ae7 	vsub.f32	s9, s9, s15
 80105cc:	ee37 7a44 	vsub.f32	s14, s14, s8
 80105d0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80105d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105d8:	ee87 caa4 	vdiv.f32	s24, s15, s9
 80105dc:	ee3c ca04 	vadd.f32	s24, s24, s8
 80105e0:	e07f      	b.n	80106e2 <iNemoEngine_API_Update+0x17e2>
 80105e2:	eddf 7ad2 	vldr	s15, [pc, #840]	; 801092c <iNemoEngine_API_Update+0x1a2c>
 80105e6:	eddf cad2 	vldr	s25, [pc, #840]	; 8010930 <iNemoEngine_API_Update+0x1a30>
 80105ea:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 80105ee:	eddf 7ad1 	vldr	s15, [pc, #836]	; 8010934 <iNemoEngine_API_Update+0x1a34>
 80105f2:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 80105f6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80105fa:	f7ff b824 	b.w	800f646 <iNemoEngine_API_Update+0x746>
 80105fe:	1c60      	adds	r0, r4, #1
 8010600:	454e      	cmp	r6, r9
 8010602:	4459      	add	r1, fp
 8010604:	4450      	add	r0, sl
 8010606:	4665      	mov	r5, ip
 8010608:	f6bf ae04 	bge.w	8010214 <iNemoEngine_API_Update+0x1314>
 801060c:	eba9 0206 	sub.w	r2, r9, r6
 8010610:	444c      	add	r4, r9
 8010612:	1ba4      	subs	r4, r4, r6
 8010614:	f005 f8f8 	bl	8015808 <memcpy>
 8010618:	464e      	mov	r6, r9
 801061a:	e5fb      	b.n	8010214 <iNemoEngine_API_Update+0x1314>
 801061c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010624:	f43f ae5d 	beq.w	80102e2 <iNemoEngine_API_Update+0x13e2>
 8010628:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801062c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010630:	f43f ae57 	beq.w	80102e2 <iNemoEngine_API_Update+0x13e2>
 8010634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010638:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801063c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010640:	e655      	b.n	80102ee <iNemoEngine_API_Update+0x13ee>
 8010642:	2300      	movs	r3, #0
 8010644:	f882 3900 	strb.w	r3, [r2, #2304]	; 0x900
 8010648:	edc8 7a07 	vstr	s15, [r8, #28]
 801064c:	edc8 7a08 	vstr	s15, [r8, #32]
 8010650:	edc8 7a09 	vstr	s15, [r8, #36]	; 0x24
 8010654:	edc8 7a0a 	vstr	s15, [r8, #40]	; 0x28
 8010658:	edc8 7a0b 	vstr	s15, [r8, #44]	; 0x2c
 801065c:	e6aa      	b.n	80103b4 <iNemoEngine_API_Update+0x14b4>
 801065e:	f04f 0908 	mov.w	r9, #8
 8010662:	f04f 0805 	mov.w	r8, #5
 8010666:	2202      	movs	r2, #2
 8010668:	f7ff bae3 	b.w	800fc32 <iNemoEngine_API_Update+0xd32>
 801066c:	2104      	movs	r1, #4
 801066e:	2000      	movs	r0, #0
 8010670:	f04f 0c06 	mov.w	ip, #6
 8010674:	f04f 0e07 	mov.w	lr, #7
 8010678:	2603      	movs	r6, #3
 801067a:	460c      	mov	r4, r1
 801067c:	2301      	movs	r3, #1
 801067e:	4607      	mov	r7, r0
 8010680:	f7ff babd 	b.w	800fbfe <iNemoEngine_API_Update+0xcfe>
 8010684:	ed9f 5aac 	vldr	s10, [pc, #688]	; 8010938 <iNemoEngine_API_Update+0x1a38>
 8010688:	ed9f 8aac 	vldr	s16, [pc, #688]	; 801093c <iNemoEngine_API_Update+0x1a3c>
 801068c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801096c <iNemoEngine_API_Update+0x1a6c>
 8010690:	eddf 6aab 	vldr	s13, [pc, #684]	; 8010940 <iNemoEngine_API_Update+0x1a40>
 8010694:	ed84 5a00 	vstr	s10, [r4]
 8010698:	eef0 7a45 	vmov.f32	s15, s10
 801069c:	eeb0 6a45 	vmov.f32	s12, s10
 80106a0:	eddf caa8 	vldr	s25, [pc, #672]	; 8010944 <iNemoEngine_API_Update+0x1a44>
 80106a4:	ed9f 9aa8 	vldr	s18, [pc, #672]	; 8010948 <iNemoEngine_API_Update+0x1a48>
 80106a8:	ed84 8a01 	vstr	s16, [r4, #4]
 80106ac:	eef0 5a66 	vmov.f32	s11, s13
 80106b0:	ed84 8a02 	vstr	s16, [r4, #8]
 80106b4:	eeb0 5a47 	vmov.f32	s10, s14
 80106b8:	eef0 8a67 	vmov.f32	s17, s15
 80106bc:	eeb0 ca48 	vmov.f32	s24, s16
 80106c0:	f7fe bed8 	b.w	800f474 <iNemoEngine_API_Update+0x574>
 80106c4:	eef1 6a66 	vneg.f32	s13, s13
 80106c8:	e415      	b.n	800fef6 <iNemoEngine_API_Update+0xff6>
 80106ca:	eeb1 4a44 	vneg.f32	s8, s8
 80106ce:	f7ff bbee 	b.w	800feae <iNemoEngine_API_Update+0xfae>
 80106d2:	eef1 7a67 	vneg.f32	s15, s15
 80106d6:	e431      	b.n	800ff3c <iNemoEngine_API_Update+0x103c>
 80106d8:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 80106dc:	eeb0 fa4c 	vmov.f32	s30, s24
 80106e0:	4613      	mov	r3, r2
 80106e2:	edd3 fa74 	vldr	s31, [r3, #464]	; 0x1d0
 80106e6:	ed93 7a72 	vldr	s14, [r3, #456]	; 0x1c8
 80106ea:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 80106ee:	eddf 4a90 	vldr	s9, [pc, #576]	; 8010930 <iNemoEngine_API_Update+0x1a30>
 80106f2:	ee7c faef 	vsub.f32	s31, s25, s31
 80106f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106fa:	eef0 faef 	vabs.f32	s31, s31
 80106fe:	eef0 7ae7 	vabs.f32	s15, s15
 8010702:	ee77 7aaf 	vadd.f32	s15, s15, s31
 8010706:	eef4 7ae4 	vcmpe.f32	s15, s9
 801070a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801070e:	dd0a      	ble.n	8010726 <iNemoEngine_API_Update+0x1826>
 8010710:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 801094c <iNemoEngine_API_Update+0x1a4c>
 8010714:	eef4 7ac4 	vcmpe.f32	s15, s8
 8010718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801071c:	f340 8790 	ble.w	8011640 <iNemoEngine_API_Update+0x2740>
 8010720:	eef1 4a04 	vmov.f32	s9, #20	; 0x40a00000  5.0
 8010724:	e001      	b.n	801072a <iNemoEngine_API_Update+0x182a>
 8010726:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 801072a:	eddd 7a21 	vldr	s15, [sp, #132]	; 0x84
 801072e:	781c      	ldrb	r4, [r3, #0]
 8010730:	eef4 4ae7 	vcmpe.f32	s9, s15
 8010734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010738:	bfa8      	it	ge
 801073a:	eef0 7a64 	vmovge.f32	s15, s9
 801073e:	edcd 7a04 	vstr	s15, [sp, #16]
 8010742:	b1cc      	cbz	r4, 8010778 <iNemoEngine_API_Update+0x1878>
 8010744:	785c      	ldrb	r4, [r3, #1]
 8010746:	2c00      	cmp	r4, #0
 8010748:	f040 8774 	bne.w	8011634 <iNemoEngine_API_Update+0x2734>
 801074c:	ee75 7aa6 	vadd.f32	s15, s11, s13
 8010750:	edd3 6a05 	vldr	s13, [r3, #20]
 8010754:	ee75 7a27 	vadd.f32	s15, s10, s15
 8010758:	ee76 7a27 	vadd.f32	s15, s12, s15
 801075c:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 8010760:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010764:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010768:	ee66 6a86 	vmul.f32	s13, s13, s12
 801076c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010774:	f102 848b 	bmi.w	801308e <iNemoEngine_API_Update+0x418e>
 8010778:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 801077c:	461a      	mov	r2, r3
 801077e:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 8010782:	ed9d 6a50 	vldr	s12, [sp, #320]	; 0x140
 8010786:	edcd 6a98 	vstr	s13, [sp, #608]	; 0x260
 801078a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801078e:	eef0 6a65 	vmov.f32	s13, s11
 8010792:	eee7 6a47 	vfms.f32	s13, s14, s14
 8010796:	2300      	movs	r3, #0
 8010798:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
 801079c:	ed9d 5a4e 	vldr	s10, [sp, #312]	; 0x138
 80107a0:	eddd 4a4f 	vldr	s9, [sp, #316]	; 0x13c
 80107a4:	eddd 0a51 	vldr	s1, [sp, #324]	; 0x144
 80107a8:	ed8d 7a45 	vstr	s14, [sp, #276]	; 0x114
 80107ac:	ee26 4a06 	vmul.f32	s8, s12, s12
 80107b0:	ee25 2a05 	vmul.f32	s4, s10, s10
 80107b4:	ee34 4a04 	vadd.f32	s8, s8, s8
 80107b8:	eeb1 3ae6 	vsqrt.f32	s6, s13
 80107bc:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 80107c0:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
 80107c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80107c6:	ee64 3a86 	vmul.f32	s7, s9, s12
 80107ca:	ee25 0a24 	vmul.f32	s0, s10, s9
 80107ce:	ee64 1aa4 	vmul.f32	s3, s9, s9
 80107d2:	ee64 6aa0 	vmul.f32	s13, s9, s1
 80107d6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 80107da:	eea2 4a24 	vfma.f32	s8, s4, s9
 80107de:	ee73 3aa3 	vadd.f32	s7, s7, s7
 80107e2:	ee35 1ac4 	vsub.f32	s2, s11, s8
 80107e6:	ee25 4a06 	vmul.f32	s8, s10, s12
 80107ea:	ee26 6a20 	vmul.f32	s12, s12, s1
 80107ee:	ee71 1aa1 	vadd.f32	s3, s3, s3
 80107f2:	ee30 6a06 	vadd.f32	s12, s0, s12
 80107f6:	ee25 5a20 	vmul.f32	s10, s10, s1
 80107fa:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80107fe:	eee2 1a24 	vfma.f32	s3, s4, s9
 8010802:	ee36 2a06 	vadd.f32	s4, s12, s12
 8010806:	eeb0 6a63 	vmov.f32	s12, s7
 801080a:	eea5 6a24 	vfma.f32	s12, s10, s9
 801080e:	eee5 3a64 	vfms.f32	s7, s10, s9
 8010812:	eeb0 5a66 	vmov.f32	s10, s13
 8010816:	ee7a 6aa6 	vadd.f32	s13, s21, s13
 801081a:	ee94 5a24 	vfnms.f32	s10, s8, s9
 801081e:	eee4 6a64 	vfms.f32	s13, s8, s9
 8010822:	ee25 5a07 	vmul.f32	s10, s10, s14
 8010826:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 801082a:	edcd 6a92 	vstr	s13, [sp, #584]	; 0x248
 801082e:	ee75 6ae1 	vsub.f32	s13, s11, s3
 8010832:	ee79 5ae5 	vsub.f32	s11, s19, s11
 8010836:	ee66 6a87 	vmul.f32	s13, s13, s14
 801083a:	ee75 1aa1 	vadd.f32	s3, s11, s3
 801083e:	eee3 6a23 	vfma.f32	s13, s6, s7
 8010842:	ee26 7a07 	vmul.f32	s14, s12, s14
 8010846:	eddd 5a2a 	vldr	s11, [sp, #168]	; 0xa8
 801084a:	eddd 4a2c 	vldr	s9, [sp, #176]	; 0xb0
 801084e:	ed8d 9a99 	vstr	s18, [sp, #612]	; 0x264
 8010852:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8010856:	eea3 7a01 	vfma.f32	s14, s6, s2
 801085a:	edcd 6a91 	vstr	s13, [sp, #580]	; 0x244
 801085e:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8010862:	edcd ca9a 	vstr	s25, [sp, #616]	; 0x268
 8010866:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801086a:	eea3 5a02 	vfma.f32	s10, s6, s4
 801086e:	ed8d 7a90 	vstr	s14, [sp, #576]	; 0x240
 8010872:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8010980 <iNemoEngine_API_Update+0x1a80>
 8010876:	ed8d 3a44 	vstr	s6, [sp, #272]	; 0x110
 801087a:	ee3a 6a46 	vsub.f32	s12, s20, s12
 801087e:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8010882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801088a:	ed8d 5a8f 	vstr	s10, [sp, #572]	; 0x23c
 801088e:	edcd 1a3f 	vstr	s3, [sp, #252]	; 0xfc
 8010892:	edcd 1a94 	vstr	s3, [sp, #592]	; 0x250
 8010896:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 801089a:	ed8d 6a93 	vstr	s12, [sp, #588]	; 0x24c
 801089e:	d541      	bpl.n	8010924 <iNemoEngine_API_Update+0x1a24>
 80108a0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8010950 <iNemoEngine_API_Update+0x1a50>
 80108a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80108a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ac:	dd3a      	ble.n	8010924 <iNemoEngine_API_Update+0x1a24>
 80108ae:	ee79 7a67 	vsub.f32	s15, s18, s15
 80108b2:	eef0 7ae7 	vabs.f32	s15, s15
 80108b6:	ee77 7a8b 	vadd.f32	s15, s15, s22
 80108ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80108be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c2:	dd5f      	ble.n	8010984 <iNemoEngine_API_Update+0x1a84>
 80108c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80108c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80108cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d0:	f140 86a4 	bpl.w	801161c <iNemoEngine_API_Update+0x271c>
 80108d4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8010954 <iNemoEngine_API_Update+0x1a54>
 80108d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80108dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108e0:	f141 8185 	bpl.w	8011bee <iNemoEngine_API_Update+0x2cee>
 80108e4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8010964 <iNemoEngine_API_Update+0x1a64>
 80108e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80108ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f0:	f2c1 8185 	blt.w	8011bfe <iNemoEngine_API_Update+0x2cfe>
 80108f4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8010958 <iNemoEngine_API_Update+0x1a58>
 80108f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80108fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010900:	f141 824e 	bpl.w	8011da0 <iNemoEngine_API_Update+0x2ea0>
 8010904:	eddf 6a17 	vldr	s13, [pc, #92]	; 8010964 <iNemoEngine_API_Update+0x1a64>
 8010908:	ed9f 7a14 	vldr	s14, [pc, #80]	; 801095c <iNemoEngine_API_Update+0x1a5c>
 801090c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8010960 <iNemoEngine_API_Update+0x1a60>
 8010910:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010914:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801091c:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010920:	f001 b977 	b.w	8011c12 <iNemoEngine_API_Update+0x2d12>
 8010924:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010928:	e7c1      	b.n	80108ae <iNemoEngine_API_Update+0x19ae>
 801092a:	bf00      	nop
 801092c:	3ecccccc 	.word	0x3ecccccc
 8010930:	3dcccccd 	.word	0x3dcccccd
 8010934:	3f666666 	.word	0x3f666666
 8010938:	00000000 	.word	0x00000000
 801093c:	3f333333 	.word	0x3f333333
 8010940:	bfb33333 	.word	0xbfb33333
 8010944:	3f7d6d54 	.word	0x3f7d6d54
 8010948:	3f7ae147 	.word	0x3f7ae147
 801094c:	3fb77778 	.word	0x3fb77778
 8010950:	3f4ccccd 	.word	0x3f4ccccd
 8010954:	3ba3d70a 	.word	0x3ba3d70a
 8010958:	3c75c28f 	.word	0x3c75c28f
 801095c:	3f19999a 	.word	0x3f19999a
 8010960:	43480000 	.word	0x43480000
 8010964:	3c23d70a 	.word	0x3c23d70a
 8010968:	3b449ba6 	.word	0x3b449ba6
 801096c:	3fb33333 	.word	0x3fb33333
 8010970:	3ecccccd 	.word	0x3ecccccd
 8010974:	3f8f5c29 	.word	0x3f8f5c29
 8010978:	3f59999a 	.word	0x3f59999a
 801097c:	3e4ccccd 	.word	0x3e4ccccd
 8010980:	3f99999a 	.word	0x3f99999a
 8010984:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010988:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 8010964 <iNemoEngine_API_Update+0x1a64>
 801098c:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 8010968 <iNemoEngine_API_Update+0x1a68>
 8010990:	eeb0 7a65 	vmov.f32	s14, s11
 8010994:	eef0 6a65 	vmov.f32	s13, s11
 8010998:	ed8d 6a65 	vstr	s12, [sp, #404]	; 0x194
 801099c:	ed9d 6a04 	vldr	s12, [sp, #16]
 80109a0:	ed9d 3a84 	vldr	s6, [sp, #528]	; 0x210
 80109a4:	ed9d 5a83 	vldr	s10, [sp, #524]	; 0x20c
 80109a8:	ed9d 2a88 	vldr	s4, [sp, #544]	; 0x220
 80109ac:	eddd 4a8c 	vldr	s9, [sp, #560]	; 0x230
 80109b0:	9a06      	ldr	r2, [sp, #24]
 80109b2:	ed8d 4a66 	vstr	s8, [sp, #408]	; 0x198
 80109b6:	ee66 3a0f 	vmul.f32	s7, s12, s30
 80109ba:	ed9d 6a8d 	vldr	s12, [sp, #564]	; 0x234
 80109be:	7b13      	ldrb	r3, [r2, #12]
 80109c0:	ee23 3a23 	vmul.f32	s6, s6, s7
 80109c4:	ee23 5a85 	vmul.f32	s10, s7, s10
 80109c8:	ed8d 3a84 	vstr	s6, [sp, #528]	; 0x210
 80109cc:	ed9d 3a85 	vldr	s6, [sp, #532]	; 0x214
 80109d0:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 80109d4:	ee63 3a23 	vmul.f32	s7, s6, s7
 80109d8:	ed9d 3a86 	vldr	s6, [sp, #536]	; 0x218
 80109dc:	edcd 3a85 	vstr	s7, [sp, #532]	; 0x214
 80109e0:	eddd 3a87 	vldr	s7, [sp, #540]	; 0x21c
 80109e4:	ee2c 3a03 	vmul.f32	s6, s24, s6
 80109e8:	ee6c 3a23 	vmul.f32	s7, s24, s7
 80109ec:	ee74 4aa4 	vadd.f32	s9, s9, s9
 80109f0:	ee2c ca02 	vmul.f32	s24, s24, s4
 80109f4:	ee36 6a06 	vadd.f32	s12, s12, s12
 80109f8:	ed9d 2a8e 	vldr	s4, [sp, #568]	; 0x238
 80109fc:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 8010a00:	ee64 4a87 	vmul.f32	s9, s9, s14
 8010a04:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010a08:	ee2f fa02 	vmul.f32	s30, s30, s4
 8010a0c:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 8010a10:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 8010a14:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 8010a18:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 8010a1c:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f000 8525 	beq.w	8011470 <iNemoEngine_API_Update+0x2570>
 8010a26:	ee27 3a03 	vmul.f32	s6, s14, s6
 8010a2a:	ee67 3a23 	vmul.f32	s7, s14, s7
 8010a2e:	ee27 ca0c 	vmul.f32	s24, s14, s24
 8010a32:	ed9d 2a22 	vldr	s4, [sp, #136]	; 0x88
 8010a36:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 8010a3a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010a3e:	4613      	mov	r3, r2
 8010a40:	ee25 2a82 	vmul.f32	s4, s11, s4
 8010a44:	7b92      	ldrb	r2, [r2, #14]
 8010a46:	7b5b      	ldrb	r3, [r3, #13]
 8010a48:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 8010a4c:	ee64 5a25 	vmul.f32	s11, s8, s11
 8010a50:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010a54:	edcd 5a66 	vstr	s11, [sp, #408]	; 0x198
 8010a58:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 8010a5c:	ed8d 2a5f 	vstr	s4, [sp, #380]	; 0x17c
 8010a60:	ed8d 2a60 	vstr	s4, [sp, #384]	; 0x180
 8010a64:	ed8d 2a61 	vstr	s4, [sp, #388]	; 0x184
 8010a68:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 8010a6c:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 8010a70:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 8010a74:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 8010a78:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 8010a7c:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 8010a80:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8010a84:	b15a      	cbz	r2, 8010a9e <iNemoEngine_API_Update+0x1b9e>
 8010a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a92:	dd04      	ble.n	8010a9e <iNemoEngine_API_Update+0x1b9e>
 8010a94:	2100      	movs	r1, #0
 8010a96:	f8ad 10eb 	strh.w	r1, [sp, #235]	; 0xeb
 8010a9a:	f88d 10ed 	strb.w	r1, [sp, #237]	; 0xed
 8010a9e:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8010aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa6:	dd08      	ble.n	8010aba <iNemoEngine_API_Update+0x1bba>
 8010aa8:	9906      	ldr	r1, [sp, #24]
 8010aaa:	edd1 7a64 	vldr	s15, [r1, #400]	; 0x190
 8010aae:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab6:	f280 85a4 	bge.w	8011602 <iNemoEngine_API_Update+0x2702>
 8010aba:	b133      	cbz	r3, 8010aca <iNemoEngine_API_Update+0x1bca>
 8010abc:	f240 1101 	movw	r1, #257	; 0x101
 8010ac0:	f8ad 10e8 	strh.w	r1, [sp, #232]	; 0xe8
 8010ac4:	2101      	movs	r1, #1
 8010ac6:	f88d 10ea 	strb.w	r1, [sp, #234]	; 0xea
 8010aca:	2401      	movs	r4, #1
 8010acc:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 8010ad0:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 8010ad4:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 801096c <iNemoEngine_API_Update+0x1a6c>
 8010ad8:	eef4 cae7 	vcmpe.f32	s25, s15
 8010adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae0:	dc07      	bgt.n	8010af2 <iNemoEngine_API_Update+0x1bf2>
 8010ae2:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 8010970 <iNemoEngine_API_Update+0x1a70>
 8010ae6:	eef4 cae7 	vcmpe.f32	s25, s15
 8010aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aee:	f141 801d 	bpl.w	8011b2c <iNemoEngine_API_Update+0x2c2c>
 8010af2:	2300      	movs	r3, #0
 8010af4:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 8010af8:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8010afc:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8010b00:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8010b04:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 8010974 <iNemoEngine_API_Update+0x1a74>
 8010b08:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8010b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b10:	dc07      	bgt.n	8010b22 <iNemoEngine_API_Update+0x1c22>
 8010b12:	ed5f 7a67 	vldr	s15, [pc, #-412]	; 8010978 <iNemoEngine_API_Update+0x1a78>
 8010b16:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8010b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b1e:	f140 86ed 	bpl.w	80118fc <iNemoEngine_API_Update+0x29fc>
 8010b22:	2300      	movs	r3, #0
 8010b24:	f8ad 30eb 	strh.w	r3, [sp, #235]	; 0xeb
 8010b28:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
 8010b2c:	f8ad 30f1 	strh.w	r3, [sp, #241]	; 0xf1
 8010b30:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010b34:	eef4 fae7 	vcmpe.f32	s31, s15
 8010b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3c:	f340 8486 	ble.w	801144c <iNemoEngine_API_Update+0x254c>
 8010b40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010b44:	ee7f 7aa7 	vadd.f32	s15, s31, s15
 8010b48:	9a06      	ldr	r2, [sp, #24]
 8010b4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010b4e:	2300      	movs	r3, #0
 8010b50:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8010b54:	ee27 fa8f 	vmul.f32	s30, s15, s30
 8010b58:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8010b5c:	eef4 fae7 	vcmpe.f32	s31, s15
 8010b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b64:	bfc4      	itt	gt
 8010b66:	f88d 30f1 	strbgt.w	r3, [sp, #241]	; 0xf1
 8010b6a:	f88d 30f3 	strbgt.w	r3, [sp, #243]	; 0xf3
 8010b6e:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 8010b72:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8010b76:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010b78:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 8010b7c:	2b0e      	cmp	r3, #14
 8010b7e:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 8010b82:	f340 8567 	ble.w	8011654 <iNemoEngine_API_Update+0x2754>
 8010b86:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8010b8a:	eeb4 dae7 	vcmpe.f32	s26, s15
 8010b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b92:	f340 82ed 	ble.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010b96:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8010b9a:	eef4 7acb 	vcmpe.f32	s15, s22
 8010b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ba2:	f340 82e5 	ble.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010ba6:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 8010baa:	eef4 7aed 	vcmpe.f32	s15, s27
 8010bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb2:	f340 82dd 	ble.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010bb6:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 801097c <iNemoEngine_API_Update+0x1a7c>
 8010bba:	eeb0 7ace 	vabs.f32	s14, s28
 8010bbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc6:	f140 82d3 	bpl.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010bca:	eeb0 7aee 	vabs.f32	s14, s29
 8010bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd6:	f140 82cb 	bpl.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010bda:	eeb0 7aeb 	vabs.f32	s14, s23
 8010bde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be6:	f140 82c3 	bpl.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010bea:	ed5f 7a9b 	vldr	s15, [pc, #-620]	; 8010980 <iNemoEngine_API_Update+0x1a80>
 8010bee:	eef0 aaea 	vabs.f32	s21, s21
 8010bf2:	eef4 aae7 	vcmpe.f32	s21, s15
 8010bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfa:	f140 82b9 	bpl.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010bfe:	eeb0 aaca 	vabs.f32	s20, s20
 8010c02:	eeb4 aae7 	vcmpe.f32	s20, s15
 8010c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c0a:	f140 82b1 	bpl.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010c0e:	eef0 9ae9 	vabs.f32	s19, s19
 8010c12:	eef4 9ae7 	vcmpe.f32	s19, s15
 8010c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1a:	f140 82a9 	bpl.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010c1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c20:	9806      	ldr	r0, [sp, #24]
 8010c22:	ed93 6a00 	vldr	s12, [r3]
 8010c26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010c28:	f890 11a0 	ldrb.w	r1, [r0, #416]	; 0x1a0
 8010c2c:	ed93 7a00 	vldr	s14, [r3]
 8010c30:	f200 73a4 	addw	r3, r0, #1956	; 0x7a4
 8010c34:	edd3 4a00 	vldr	s9, [r3]
 8010c38:	2909      	cmp	r1, #9
 8010c3a:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8010c3e:	f500 63f6 	add.w	r3, r0, #1968	; 0x7b0
 8010c42:	ed93 5a00 	vldr	s10, [r3]
 8010c46:	bf8c      	ite	hi
 8010c48:	220a      	movhi	r2, #10
 8010c4a:	2205      	movls	r2, #5
 8010c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c50:	bfb4      	ite	lt
 8010c52:	eef0 7a64 	vmovlt.f32	s15, s9
 8010c56:	eef0 7a46 	vmovge.f32	s15, s12
 8010c5a:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010c5e:	bf8c      	ite	hi
 8010c60:	eef0 5a64 	vmovhi.f32	s11, s9
 8010c64:	eef0 5a46 	vmovls.f32	s11, s12
 8010c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c6c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8010c70:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010c74:	bfb8      	it	lt
 8010c76:	eef0 7a45 	vmovlt.f32	s15, s10
 8010c7a:	f200 73bc 	addw	r3, r0, #1980	; 0x7bc
 8010c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c82:	bf88      	it	hi
 8010c84:	eef0 5a45 	vmovhi.f32	s11, s10
 8010c88:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010c8c:	ed93 5a00 	vldr	s10, [r3]
 8010c90:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c98:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010c9c:	bfb8      	it	lt
 8010c9e:	eef0 7a45 	vmovlt.f32	s15, s10
 8010ca2:	f500 63f9 	add.w	r3, r0, #1992	; 0x7c8
 8010ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010caa:	bf88      	it	hi
 8010cac:	eef0 5a45 	vmovhi.f32	s11, s10
 8010cb0:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010cb4:	ed93 5a00 	vldr	s10, [r3]
 8010cb8:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc0:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010cc4:	bfb8      	it	lt
 8010cc6:	eef0 7a45 	vmovlt.f32	s15, s10
 8010cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cce:	bf88      	it	hi
 8010cd0:	eef0 5a45 	vmovhi.f32	s11, s10
 8010cd4:	2a05      	cmp	r2, #5
 8010cd6:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010cda:	d065      	beq.n	8010da8 <iNemoEngine_API_Update+0x1ea8>
 8010cdc:	f200 73d4 	addw	r3, r0, #2004	; 0x7d4
 8010ce0:	ed93 5a00 	vldr	s10, [r3]
 8010ce4:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cec:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010cf0:	bfb8      	it	lt
 8010cf2:	eef0 7a45 	vmovlt.f32	s15, s10
 8010cf6:	f500 63fc 	add.w	r3, r0, #2016	; 0x7e0
 8010cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfe:	bf88      	it	hi
 8010d00:	eef0 5a45 	vmovhi.f32	s11, s10
 8010d04:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010d08:	ed93 5a00 	vldr	s10, [r3]
 8010d0c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d14:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010d18:	bfb8      	it	lt
 8010d1a:	eef0 7a45 	vmovlt.f32	s15, s10
 8010d1e:	f200 73ec 	addw	r3, r0, #2028	; 0x7ec
 8010d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d26:	bf88      	it	hi
 8010d28:	eef0 5a45 	vmovhi.f32	s11, s10
 8010d2c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010d30:	ed93 5a00 	vldr	s10, [r3]
 8010d34:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d3c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010d40:	bfb8      	it	lt
 8010d42:	eef0 7a45 	vmovlt.f32	s15, s10
 8010d46:	f500 63ff 	add.w	r3, r0, #2040	; 0x7f8
 8010d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4e:	bf88      	it	hi
 8010d50:	eef0 5a45 	vmovhi.f32	s11, s10
 8010d54:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010d58:	ed93 5a00 	vldr	s10, [r3]
 8010d5c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d64:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010d68:	bfb8      	it	lt
 8010d6a:	eef0 7a45 	vmovlt.f32	s15, s10
 8010d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d72:	bf88      	it	hi
 8010d74:	eef0 5a45 	vmovhi.f32	s11, s10
 8010d78:	2a0a      	cmp	r2, #10
 8010d7a:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010d7e:	d113      	bne.n	8010da8 <iNemoEngine_API_Update+0x1ea8>
 8010d80:	f600 0304 	addw	r3, r0, #2052	; 0x804
 8010d84:	ed93 5a00 	vldr	s10, [r3]
 8010d88:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d90:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010d94:	bfb8      	it	lt
 8010d96:	eef0 7a45 	vmovlt.f32	s15, s10
 8010d9a:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da2:	bf88      	it	hi
 8010da4:	eef0 5a45 	vmovhi.f32	s11, s10
 8010da8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010dac:	eddf 5aeb 	vldr	s11, [pc, #940]	; 801115c <iNemoEngine_API_Update+0x225c>
 8010db0:	ed9f 5aeb 	vldr	s10, [pc, #940]	; 8011160 <iNemoEngine_API_Update+0x2260>
 8010db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010db8:	ee26 6a05 	vmul.f32	s12, s12, s10
 8010dbc:	eef4 7ae5 	vcmpe.f32	s15, s11
 8010dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc4:	f300 81d4 	bgt.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010dc8:	eef0 7ac6 	vabs.f32	s15, s12
 8010dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010dd0:	ed9f 6ae4 	vldr	s12, [pc, #912]	; 8011164 <iNemoEngine_API_Update+0x2264>
 8010dd4:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ddc:	f300 81c8 	bgt.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010de0:	9806      	ldr	r0, [sp, #24]
 8010de2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8010de4:	ed93 6a00 	vldr	s12, [r3]
 8010de8:	f500 63f5 	add.w	r3, r0, #1960	; 0x7a8
 8010dec:	edd3 4a00 	vldr	s9, [r3]
 8010df0:	f200 73b4 	addw	r3, r0, #1972	; 0x7b4
 8010df4:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8010df8:	ed93 5a00 	vldr	s10, [r3]
 8010dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e00:	bfb4      	ite	lt
 8010e02:	eef0 7a64 	vmovlt.f32	s15, s9
 8010e06:	eef0 7a46 	vmovge.f32	s15, s12
 8010e0a:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010e0e:	bf8c      	ite	hi
 8010e10:	eef0 5a64 	vmovhi.f32	s11, s9
 8010e14:	eef0 5a46 	vmovls.f32	s11, s12
 8010e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e1c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8010e20:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010e24:	bfb8      	it	lt
 8010e26:	eef0 7a45 	vmovlt.f32	s15, s10
 8010e2a:	f500 63f8 	add.w	r3, r0, #1984	; 0x7c0
 8010e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e32:	bf88      	it	hi
 8010e34:	eef0 5a45 	vmovhi.f32	s11, s10
 8010e38:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010e3c:	ed93 5a00 	vldr	s10, [r3]
 8010e40:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e48:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010e4c:	bfb8      	it	lt
 8010e4e:	eef0 7a45 	vmovlt.f32	s15, s10
 8010e52:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
 8010e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5a:	bf88      	it	hi
 8010e5c:	eef0 5a45 	vmovhi.f32	s11, s10
 8010e60:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010e64:	ed93 5a00 	vldr	s10, [r3]
 8010e68:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e70:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010e74:	bfb8      	it	lt
 8010e76:	eef0 7a45 	vmovlt.f32	s15, s10
 8010e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e7e:	bf88      	it	hi
 8010e80:	eef0 5a45 	vmovhi.f32	s11, s10
 8010e84:	2a05      	cmp	r2, #5
 8010e86:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010e8a:	d065      	beq.n	8010f58 <iNemoEngine_API_Update+0x2058>
 8010e8c:	f500 63fb 	add.w	r3, r0, #2008	; 0x7d8
 8010e90:	ed93 5a00 	vldr	s10, [r3]
 8010e94:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e9c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010ea0:	bfb8      	it	lt
 8010ea2:	eef0 7a45 	vmovlt.f32	s15, s10
 8010ea6:	f200 73e4 	addw	r3, r0, #2020	; 0x7e4
 8010eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eae:	bf88      	it	hi
 8010eb0:	eef0 5a45 	vmovhi.f32	s11, s10
 8010eb4:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010eb8:	ed93 5a00 	vldr	s10, [r3]
 8010ebc:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec4:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010ec8:	bfb8      	it	lt
 8010eca:	eef0 7a45 	vmovlt.f32	s15, s10
 8010ece:	f500 63fe 	add.w	r3, r0, #2032	; 0x7f0
 8010ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed6:	bf88      	it	hi
 8010ed8:	eef0 5a45 	vmovhi.f32	s11, s10
 8010edc:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010ee0:	ed93 5a00 	vldr	s10, [r3]
 8010ee4:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eec:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010ef0:	bfb8      	it	lt
 8010ef2:	eef0 7a45 	vmovlt.f32	s15, s10
 8010ef6:	f200 73fc 	addw	r3, r0, #2044	; 0x7fc
 8010efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efe:	bf88      	it	hi
 8010f00:	eef0 5a45 	vmovhi.f32	s11, s10
 8010f04:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010f08:	ed93 5a00 	vldr	s10, [r3]
 8010f0c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f14:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010f18:	bfb8      	it	lt
 8010f1a:	eef0 7a45 	vmovlt.f32	s15, s10
 8010f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f22:	bf88      	it	hi
 8010f24:	eef0 5a45 	vmovhi.f32	s11, s10
 8010f28:	2a0a      	cmp	r2, #10
 8010f2a:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010f2e:	d113      	bne.n	8010f58 <iNemoEngine_API_Update+0x2058>
 8010f30:	f600 0308 	addw	r3, r0, #2056	; 0x808
 8010f34:	ed93 5a00 	vldr	s10, [r3]
 8010f38:	eef4 7ac5 	vcmpe.f32	s15, s10
 8010f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f40:	eef4 5ac5 	vcmpe.f32	s11, s10
 8010f44:	bfb8      	it	lt
 8010f46:	eef0 7a45 	vmovlt.f32	s15, s10
 8010f4a:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f52:	bf88      	it	hi
 8010f54:	eef0 5a45 	vmovhi.f32	s11, s10
 8010f58:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010f5c:	eddf 5a7f 	vldr	s11, [pc, #508]	; 801115c <iNemoEngine_API_Update+0x225c>
 8010f60:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 8011160 <iNemoEngine_API_Update+0x2260>
 8010f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f68:	ee26 6a05 	vmul.f32	s12, s12, s10
 8010f6c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8010f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f74:	f300 80fc 	bgt.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010f78:	eef0 7ac6 	vabs.f32	s15, s12
 8010f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f80:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8011164 <iNemoEngine_API_Update+0x2264>
 8010f84:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f8c:	f300 80f0 	bgt.w	8011170 <iNemoEngine_API_Update+0x2270>
 8010f90:	9806      	ldr	r0, [sp, #24]
 8010f92:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8010f94:	ed93 5a00 	vldr	s10, [r3]
 8010f98:	f200 73ac 	addw	r3, r0, #1964	; 0x7ac
 8010f9c:	edd3 4a00 	vldr	s9, [r3]
 8010fa0:	f500 63f7 	add.w	r3, r0, #1976	; 0x7b8
 8010fa4:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8010fa8:	ed93 6a00 	vldr	s12, [r3]
 8010fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb0:	bfb4      	ite	lt
 8010fb2:	eef0 7a64 	vmovlt.f32	s15, s9
 8010fb6:	eef0 7a45 	vmovge.f32	s15, s10
 8010fba:	bf8c      	ite	hi
 8010fbc:	eef0 5a64 	vmovhi.f32	s11, s9
 8010fc0:	eef0 5a45 	vmovls.f32	s11, s10
 8010fc4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fcc:	ee35 5a24 	vadd.f32	s10, s10, s9
 8010fd0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8010fd4:	bfa8      	it	ge
 8010fd6:	eef0 7a46 	vmovge.f32	s15, s12
 8010fda:	f200 73c4 	addw	r3, r0, #1988	; 0x7c4
 8010fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe2:	bf98      	it	ls
 8010fe4:	eef0 5a46 	vmovls.f32	s11, s12
 8010fe8:	ee76 4a05 	vadd.f32	s9, s12, s10
 8010fec:	ed93 6a00 	vldr	s12, [r3]
 8010ff0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8010ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8010ffc:	bfa8      	it	ge
 8010ffe:	eef0 7a46 	vmovge.f32	s15, s12
 8011002:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
 8011006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801100a:	bf8c      	ite	hi
 801100c:	eeb0 5a65 	vmovhi.f32	s10, s11
 8011010:	eeb0 5a46 	vmovls.f32	s10, s12
 8011014:	edd3 5a00 	vldr	s11, [r3]
 8011018:	eef4 5ae7 	vcmpe.f32	s11, s15
 801101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011020:	ee36 6a24 	vadd.f32	s12, s12, s9
 8011024:	eef4 5ac5 	vcmpe.f32	s11, s10
 8011028:	bfa8      	it	ge
 801102a:	eef0 7a65 	vmovge.f32	s15, s11
 801102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011032:	ee35 6a86 	vadd.f32	s12, s11, s12
 8011036:	bf88      	it	hi
 8011038:	eef0 5a45 	vmovhi.f32	s11, s10
 801103c:	2a05      	cmp	r2, #5
 801103e:	d065      	beq.n	801110c <iNemoEngine_API_Update+0x220c>
 8011040:	f200 73dc 	addw	r3, r0, #2012	; 0x7dc
 8011044:	ed93 5a00 	vldr	s10, [r3]
 8011048:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011050:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8011054:	bfa8      	it	ge
 8011056:	eef0 7a45 	vmovge.f32	s15, s10
 801105a:	f500 63fd 	add.w	r3, r0, #2024	; 0x7e8
 801105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011062:	bf98      	it	ls
 8011064:	eef0 5a45 	vmovls.f32	s11, s10
 8011068:	ee35 5a06 	vadd.f32	s10, s10, s12
 801106c:	ed93 6a00 	vldr	s12, [r3]
 8011070:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011078:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801107c:	bfa8      	it	ge
 801107e:	eef0 7a46 	vmovge.f32	s15, s12
 8011082:	f200 73f4 	addw	r3, r0, #2036	; 0x7f4
 8011086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801108a:	bf98      	it	ls
 801108c:	eef0 5a46 	vmovls.f32	s11, s12
 8011090:	ee36 5a05 	vadd.f32	s10, s12, s10
 8011094:	ed93 6a00 	vldr	s12, [r3]
 8011098:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801109c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 80110a4:	bfa8      	it	ge
 80110a6:	eef0 7a46 	vmovge.f32	s15, s12
 80110aa:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80110ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b2:	bf98      	it	ls
 80110b4:	eef0 5a46 	vmovls.f32	s11, s12
 80110b8:	ee36 6a05 	vadd.f32	s12, s12, s10
 80110bc:	ed93 5a00 	vldr	s10, [r3]
 80110c0:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80110c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c8:	eeb4 5ae5 	vcmpe.f32	s10, s11
 80110cc:	bfa8      	it	ge
 80110ce:	eef0 7a45 	vmovge.f32	s15, s10
 80110d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d6:	bf98      	it	ls
 80110d8:	eef0 5a45 	vmovls.f32	s11, s10
 80110dc:	2a0a      	cmp	r2, #10
 80110de:	ee35 6a06 	vadd.f32	s12, s10, s12
 80110e2:	d113      	bne.n	801110c <iNemoEngine_API_Update+0x220c>
 80110e4:	f600 030c 	addw	r3, r0, #2060	; 0x80c
 80110e8:	ed93 5a00 	vldr	s10, [r3]
 80110ec:	eef4 7ac5 	vcmpe.f32	s15, s10
 80110f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f4:	eef4 5ac5 	vcmpe.f32	s11, s10
 80110f8:	bfb8      	it	lt
 80110fa:	eef0 7a45 	vmovlt.f32	s15, s10
 80110fe:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011106:	bf88      	it	hi
 8011108:	eef0 5a45 	vmovhi.f32	s11, s10
 801110c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011110:	eddf 5a12 	vldr	s11, [pc, #72]	; 801115c <iNemoEngine_API_Update+0x225c>
 8011114:	ed9f 5a12 	vldr	s10, [pc, #72]	; 8011160 <iNemoEngine_API_Update+0x2260>
 8011118:	ee67 7a87 	vmul.f32	s15, s15, s14
 801111c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8011120:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011128:	dc22      	bgt.n	8011170 <iNemoEngine_API_Update+0x2270>
 801112a:	eef0 7ac6 	vabs.f32	s15, s12
 801112e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011132:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8011164 <iNemoEngine_API_Update+0x2264>
 8011136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801113e:	dc17      	bgt.n	8011170 <iNemoEngine_API_Update+0x2270>
 8011140:	9b06      	ldr	r3, [sp, #24]
 8011142:	795b      	ldrb	r3, [r3, #5]
 8011144:	2b00      	cmp	r3, #0
 8011146:	f002 8117 	beq.w	8013378 <iNemoEngine_API_Update+0x4478>
 801114a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801114e:	2a01      	cmp	r2, #1
 8011150:	f001 87d1 	beq.w	80130f6 <iNemoEngine_API_Update+0x41f6>
 8011154:	f04f 0901 	mov.w	r9, #1
 8011158:	f000 bc0b 	b.w	8011972 <iNemoEngine_API_Update+0x2a72>
 801115c:	3be56041 	.word	0x3be56041
 8011160:	3dcccccd 	.word	0x3dcccccd
 8011164:	3e333333 	.word	0x3e333333
 8011168:	42480000 	.word	0x42480000
 801116c:	00000000 	.word	0x00000000
 8011170:	9b06      	ldr	r3, [sp, #24]
 8011172:	795b      	ldrb	r3, [r3, #5]
 8011174:	f04f 0900 	mov.w	r9, #0
 8011178:	f8ad 90ee 	strh.w	r9, [sp, #238]	; 0xee
 801117c:	f88d 90f0 	strb.w	r9, [sp, #240]	; 0xf0
 8011180:	2b00      	cmp	r3, #0
 8011182:	f040 83f1 	bne.w	8011968 <iNemoEngine_API_Update+0x2a68>
 8011186:	9906      	ldr	r1, [sp, #24]
 8011188:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 801118c:	9295      	str	r2, [sp, #596]	; 0x254
 801118e:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 8011192:	9296      	str	r2, [sp, #600]	; 0x258
 8011194:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 8011198:	9297      	str	r2, [sp, #604]	; 0x25c
 801119a:	2200      	movs	r2, #0
 801119c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80111a0:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 80111a4:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 80111a8:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 80111ac:	704a      	strb	r2, [r1, #1]
 80111ae:	ed5f 7a12 	vldr	s15, [pc, #-72]	; 8011168 <iNemoEngine_API_Update+0x2268>
 80111b2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80111b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ba:	f2c0 8138 	blt.w	801142e <iNemoEngine_API_Update+0x252e>
 80111be:	9906      	ldr	r1, [sp, #24]
 80111c0:	2200      	movs	r2, #0
 80111c2:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 80111c6:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 80111ca:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d125      	bne.n	801121e <iNemoEngine_API_Update+0x231e>
 80111d2:	eddd 4a86 	vldr	s9, [sp, #536]	; 0x218
 80111d6:	ed9d 6a5f 	vldr	s12, [sp, #380]	; 0x17c
 80111da:	ed9d 5a87 	vldr	s10, [sp, #540]	; 0x21c
 80111de:	ed9d 7a60 	vldr	s14, [sp, #384]	; 0x180
 80111e2:	eddd 5a88 	vldr	s11, [sp, #544]	; 0x220
 80111e6:	eddd 7a61 	vldr	s15, [sp, #388]	; 0x184
 80111ea:	eeb6 4a08 	vmov.f32	s8, #104	; 0x3f400000  0.750
 80111ee:	ee64 4a84 	vmul.f32	s9, s9, s8
 80111f2:	ee36 6a06 	vadd.f32	s12, s12, s12
 80111f6:	ee25 5a04 	vmul.f32	s10, s10, s8
 80111fa:	ee37 7a07 	vadd.f32	s14, s14, s14
 80111fe:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011202:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011206:	edcd 4a86 	vstr	s9, [sp, #536]	; 0x218
 801120a:	ed8d 6a5f 	vstr	s12, [sp, #380]	; 0x17c
 801120e:	ed8d 5a87 	vstr	s10, [sp, #540]	; 0x21c
 8011212:	ed8d 7a60 	vstr	s14, [sp, #384]	; 0x180
 8011216:	edcd 5a88 	vstr	s11, [sp, #544]	; 0x220
 801121a:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 801121e:	9c06      	ldr	r4, [sp, #24]
 8011220:	ed9d 6a60 	vldr	s12, [sp, #384]	; 0x180
 8011224:	ed94 2a7f 	vldr	s4, [r4, #508]	; 0x1fc
 8011228:	edd4 1a75 	vldr	s3, [r4, #468]	; 0x1d4
 801122c:	edd4 2a89 	vldr	s5, [r4, #548]	; 0x224
 8011230:	edd4 3a93 	vldr	s7, [r4, #588]	; 0x24c
 8011234:	eddd 0a5f 	vldr	s1, [sp, #380]	; 0x17c
 8011238:	ed9d 1a61 	vldr	s2, [sp, #388]	; 0x184
 801123c:	ed94 4a9d 	vldr	s8, [r4, #628]	; 0x274
 8011240:	edd4 4aa7 	vldr	s9, [r4, #668]	; 0x29c
 8011244:	ed94 5ab1 	vldr	s10, [r4, #708]	; 0x2c4
 8011248:	ed9d 3a8b 	vldr	s6, [sp, #556]	; 0x22c
 801124c:	ed9d 7a89 	vldr	s14, [sp, #548]	; 0x224
 8011250:	eddd 7a8a 	vldr	s15, [sp, #552]	; 0x228
 8011254:	edd4 5abb 	vldr	s11, [r4, #748]	; 0x2ec
 8011258:	eea6 2a06 	vfma.f32	s4, s12, s12
 801125c:	ab83      	add	r3, sp, #524	; 0x20c
 801125e:	aa8f      	add	r2, sp, #572	; 0x23c
 8011260:	ed9d 6a62 	vldr	s12, [sp, #392]	; 0x188
 8011264:	ed84 2a7f 	vstr	s4, [r4, #508]	; 0x1fc
 8011268:	eee0 1aa0 	vfma.f32	s3, s1, s1
 801126c:	a93a      	add	r1, sp, #232	; 0xe8
 801126e:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
 8011272:	eee1 2a01 	vfma.f32	s5, s2, s2
 8011276:	eee6 3a06 	vfma.f32	s7, s12, s12
 801127a:	eddd 0a63 	vldr	s1, [sp, #396]	; 0x18c
 801127e:	ed9d 1a64 	vldr	s2, [sp, #400]	; 0x190
 8011282:	ed9d 6a65 	vldr	s12, [sp, #404]	; 0x194
 8011286:	edc4 1a75 	vstr	s3, [r4, #468]	; 0x1d4
 801128a:	eea0 4aa0 	vfma.f32	s8, s1, s1
 801128e:	eee1 4a01 	vfma.f32	s9, s2, s2
 8011292:	eea6 5a06 	vfma.f32	s10, s12, s12
 8011296:	eddd 0a66 	vldr	s1, [sp, #408]	; 0x198
 801129a:	ed9d 1a67 	vldr	s2, [sp, #412]	; 0x19c
 801129e:	ed94 6ac5 	vldr	s12, [r4, #788]	; 0x314
 80112a2:	edc4 2a89 	vstr	s5, [r4, #548]	; 0x224
 80112a6:	eee0 5aa0 	vfma.f32	s11, s1, s1
 80112aa:	eea1 6a01 	vfma.f32	s12, s2, s2
 80112ae:	ee26 7a87 	vmul.f32	s14, s13, s14
 80112b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80112b6:	ee66 6a83 	vmul.f32	s13, s13, s6
 80112ba:	ee27 7a28 	vmul.f32	s14, s14, s17
 80112be:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80112c2:	ee66 8aa8 	vmul.f32	s17, s13, s17
 80112c6:	ed8d 7a89 	vstr	s14, [sp, #548]	; 0x224
 80112ca:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 80112ce:	edc4 3a93 	vstr	s7, [r4, #588]	; 0x24c
 80112d2:	ed84 4a9d 	vstr	s8, [r4, #628]	; 0x274
 80112d6:	edc4 4aa7 	vstr	s9, [r4, #668]	; 0x29c
 80112da:	ed84 5ab1 	vstr	s10, [r4, #708]	; 0x2c4
 80112de:	edcd 8a8b 	vstr	s17, [sp, #556]	; 0x22c
 80112e2:	edc4 5abb 	vstr	s11, [r4, #748]	; 0x2ec
 80112e6:	ed84 6ac5 	vstr	s12, [r4, #788]	; 0x314
 80112ea:	9300      	str	r3, [sp, #0]
 80112ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80112ee:	f7fc fb1d 	bl	800d92c <kf_update>
 80112f2:	edd4 6a6d 	vldr	s13, [r4, #436]	; 0x1b4
 80112f6:	ed94 6a6c 	vldr	s12, [r4, #432]	; 0x1b0
 80112fa:	ed94 7a6e 	vldr	s14, [r4, #440]	; 0x1b8
 80112fe:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8011302:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011306:	eee6 7a06 	vfma.f32	s15, s12, s12
 801130a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801130e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011316:	f100 80bb 	bmi.w	8011490 <iNemoEngine_API_Update+0x2590>
 801131a:	ed5f 5a6c 	vldr	s11, [pc, #-432]	; 801116c <iNemoEngine_API_Update+0x226c>
 801131e:	ed8d 6a52 	vstr	s12, [sp, #328]	; 0x148
 8011322:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8011326:	aa4e      	add	r2, sp, #312	; 0x138
 8011328:	a8ae      	add	r0, sp, #696	; 0x2b8
 801132a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 801132e:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8011332:	4611      	mov	r1, r2
 8011334:	ae68      	add	r6, sp, #416	; 0x1a0
 8011336:	af70      	add	r7, sp, #448	; 0x1c0
 8011338:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 801133c:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8011340:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 8011344:	ee27 6a86 	vmul.f32	s12, s15, s12
 8011348:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801134c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011350:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011354:	edcd 5a55 	vstr	s11, [sp, #340]	; 0x154
 8011358:	ed8d 6aae 	vstr	s12, [sp, #696]	; 0x2b8
 801135c:	edcd 6aaf 	vstr	s13, [sp, #700]	; 0x2bc
 8011360:	ed8d 7ab0 	vstr	s14, [sp, #704]	; 0x2c0
 8011364:	edcd 7ab1 	vstr	s15, [sp, #708]	; 0x2c4
 8011368:	f7fc f920 	bl	800d5ac <qmult>
 801136c:	ed92 6a01 	vldr	s12, [r2, #4]
 8011370:	edd2 5a00 	vldr	s11, [r2]
 8011374:	edd2 6a02 	vldr	s13, [r2, #8]
 8011378:	ed92 7a03 	vldr	s14, [r2, #12]
 801137c:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 801137e:	ee66 7a06 	vmul.f32	s15, s12, s12
 8011382:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8011386:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801138a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801138e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8011392:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8011396:	eec4 7a85 	vdiv.f32	s15, s9, s10
 801139a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801139e:	ee26 6a27 	vmul.f32	s12, s12, s15
 80113a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80113a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113aa:	edcd 5a4a 	vstr	s11, [sp, #296]	; 0x128
 80113ae:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 80113b2:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 80113b6:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
 80113ba:	4634      	mov	r4, r6
 80113bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113be:	42bc      	cmp	r4, r7
 80113c0:	f105 0510 	add.w	r5, r5, #16
 80113c4:	f106 0610 	add.w	r6, r6, #16
 80113c8:	f845 0c10 	str.w	r0, [r5, #-16]
 80113cc:	f845 1c0c 	str.w	r1, [r5, #-12]
 80113d0:	f845 2c08 	str.w	r2, [r5, #-8]
 80113d4:	f845 3c04 	str.w	r3, [r5, #-4]
 80113d8:	d1ef      	bne.n	80113ba <iNemoEngine_API_Update+0x24ba>
 80113da:	6830      	ldr	r0, [r6, #0]
 80113dc:	6028      	str	r0, [r5, #0]
 80113de:	9e06      	ldr	r6, [sp, #24]
 80113e0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80113e2:	f8d6 31bc 	ldr.w	r3, [r6, #444]	; 0x1bc
 80113e6:	6013      	str	r3, [r2, #0]
 80113e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80113ea:	f8d6 31c0 	ldr.w	r3, [r6, #448]	; 0x1c0
 80113ee:	6013      	str	r3, [r2, #0]
 80113f0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80113f2:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 80113f6:	6013      	str	r3, [r2, #0]
 80113f8:	ad4a      	add	r5, sp, #296	; 0x128
 80113fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113fc:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80113fe:	60eb      	str	r3, [r5, #12]
 8011400:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011402:	6028      	str	r0, [r5, #0]
 8011404:	6069      	str	r1, [r5, #4]
 8011406:	60aa      	str	r2, [r5, #8]
 8011408:	edd6 9a75 	vldr	s19, [r6, #468]	; 0x1d4
 801140c:	edc3 5a00 	vstr	s11, [r3]
 8011410:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011412:	f8d6 794c 	ldr.w	r7, [r6, #2380]	; 0x94c
 8011416:	ed83 6a00 	vstr	s12, [r3]
 801141a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801141c:	edc3 6a00 	vstr	s13, [r3]
 8011420:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011422:	accc      	add	r4, sp, #816	; 0x330
 8011424:	ed83 7a00 	vstr	s14, [r3]
 8011428:	4635      	mov	r5, r6
 801142a:	f7fd be20 	b.w	800f06e <iNemoEngine_API_Update+0x16e>
 801142e:	9906      	ldr	r1, [sp, #24]
 8011430:	f891 21a2 	ldrb.w	r2, [r1, #418]	; 0x1a2
 8011434:	2a31      	cmp	r2, #49	; 0x31
 8011436:	f63f aeca 	bhi.w	80111ce <iNemoEngine_API_Update+0x22ce>
 801143a:	3201      	adds	r2, #1
 801143c:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 8011440:	2200      	movs	r2, #0
 8011442:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8011446:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 801144a:	e6c0      	b.n	80111ce <iNemoEngine_API_Update+0x22ce>
 801144c:	9a06      	ldr	r2, [sp, #24]
 801144e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8011450:	2b00      	cmp	r3, #0
 8011452:	f340 8398 	ble.w	8011b86 <iNemoEngine_API_Update+0x2c86>
 8011456:	3b01      	subs	r3, #1
 8011458:	6593      	str	r3, [r2, #88]	; 0x58
 801145a:	2300      	movs	r3, #0
 801145c:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 8011460:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8011464:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8011468:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 801146c:	f7ff bb8b 	b.w	8010b86 <iNemoEngine_API_Update+0x1c86>
 8011470:	7b53      	ldrb	r3, [r2, #13]
 8011472:	7b92      	ldrb	r2, [r2, #14]
 8011474:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 8011478:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 801147c:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8011480:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 8011484:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 8011488:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 801148c:	f7ff bb07 	b.w	8010a9e <iNemoEngine_API_Update+0x1b9e>
 8011490:	ee35 5ae7 	vsub.f32	s10, s11, s15
 8011494:	eef1 5ac5 	vsqrt.f32	s11, s10
 8011498:	e741      	b.n	801131e <iNemoEngine_API_Update+0x241e>
 801149a:	f9b5 3974 	ldrsh.w	r3, [r5, #2420]	; 0x974
 801149e:	2b00      	cmp	r3, #0
 80114a0:	f341 8173 	ble.w	801278a <iNemoEngine_API_Update+0x388a>
 80114a4:	3b01      	subs	r3, #1
 80114a6:	f8a5 3974 	strh.w	r3, [r5, #2420]	; 0x974
 80114aa:	f7fd bd51 	b.w	800ef50 <iNemoEngine_API_Update+0x50>
 80114ae:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80114b2:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80114b6:	eea7 6a07 	vfma.f32	s12, s14, s14
 80114ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80114be:	eeb0 8a67 	vmov.f32	s16, s15
 80114c2:	eef0 7a46 	vmov.f32	s15, s12
 80114c6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80114ca:	eee8 7ae8 	vfms.f32	s15, s17, s17
 80114ce:	ee17 0a90 	vmov	r0, s15
 80114d2:	f7ef f839 	bl	8000548 <__aeabi_f2d>
 80114d6:	ee78 7a08 	vadd.f32	s15, s16, s16
 80114da:	4602      	mov	r2, r0
 80114dc:	460b      	mov	r3, r1
 80114de:	ee17 0a90 	vmov	r0, s15
 80114e2:	ec43 2b18 	vmov	d8, r2, r3
 80114e6:	f7ef f82f 	bl	8000548 <__aeabi_f2d>
 80114ea:	eeb0 1a48 	vmov.f32	s2, s16
 80114ee:	eef0 1a68 	vmov.f32	s3, s17
 80114f2:	ec41 0b10 	vmov	d0, r0, r1
 80114f6:	f006 ff51 	bl	801839c <atan2>
 80114fa:	a3eb      	add	r3, pc, #940	; (adr r3, 80118a8 <iNemoEngine_API_Update+0x29a8>)
 80114fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011500:	ec51 0b10 	vmov	r0, r1, d0
 8011504:	f7ef f878 	bl	80005f8 <__aeabi_dmul>
 8011508:	4be9      	ldr	r3, [pc, #932]	; (80118b0 <iNemoEngine_API_Update+0x29b0>)
 801150a:	2200      	movs	r2, #0
 801150c:	f7ee febe 	bl	800028c <__adddf3>
 8011510:	f7ef fb6a 	bl	8000be8 <__aeabi_d2f>
 8011514:	ee08 0a10 	vmov	s16, r0
 8011518:	f7fd be3a 	b.w	800f190 <iNemoEngine_API_Update+0x290>
 801151c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011520:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8011524:	eea7 6a07 	vfma.f32	s12, s14, s14
 8011528:	eee6 7a87 	vfma.f32	s15, s13, s14
 801152c:	eeb0 8a67 	vmov.f32	s16, s15
 8011530:	eef0 7a46 	vmov.f32	s15, s12
 8011534:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8011538:	eee8 7ae8 	vfms.f32	s15, s17, s17
 801153c:	ee17 0a90 	vmov	r0, s15
 8011540:	f7ef f802 	bl	8000548 <__aeabi_f2d>
 8011544:	ee78 7a08 	vadd.f32	s15, s16, s16
 8011548:	4602      	mov	r2, r0
 801154a:	460b      	mov	r3, r1
 801154c:	ee17 0a90 	vmov	r0, s15
 8011550:	ec43 2b18 	vmov	d8, r2, r3
 8011554:	f7ee fff8 	bl	8000548 <__aeabi_f2d>
 8011558:	eeb0 1a48 	vmov.f32	s2, s16
 801155c:	eef0 1a68 	vmov.f32	s3, s17
 8011560:	ec41 0b10 	vmov	d0, r0, r1
 8011564:	f006 ff1a 	bl	801839c <atan2>
 8011568:	a3cf      	add	r3, pc, #828	; (adr r3, 80118a8 <iNemoEngine_API_Update+0x29a8>)
 801156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156e:	ec51 0b10 	vmov	r0, r1, d0
 8011572:	f7ef f841 	bl	80005f8 <__aeabi_dmul>
 8011576:	4bce      	ldr	r3, [pc, #824]	; (80118b0 <iNemoEngine_API_Update+0x29b0>)
 8011578:	2200      	movs	r2, #0
 801157a:	f7ee fe85 	bl	8000288 <__aeabi_dsub>
 801157e:	f7ef fb33 	bl	8000be8 <__aeabi_d2f>
 8011582:	ee08 0a10 	vmov	s16, r0
 8011586:	f7fd be03 	b.w	800f190 <iNemoEngine_API_Update+0x290>
 801158a:	ed9f baca 	vldr	s22, [pc, #808]	; 80118b4 <iNemoEngine_API_Update+0x29b4>
 801158e:	49ca      	ldr	r1, [pc, #808]	; (80118b8 <iNemoEngine_API_Update+0x29b8>)
 8011590:	9806      	ldr	r0, [sp, #24]
 8011592:	f7fd beba 	b.w	800f30a <iNemoEngine_API_Update+0x40a>
 8011596:	ee7c 7a27 	vadd.f32	s15, s24, s15
 801159a:	ee17 0a90 	vmov	r0, s15
 801159e:	f7ee ffd3 	bl	8000548 <__aeabi_f2d>
 80115a2:	ec41 0b10 	vmov	d0, r0, r1
 80115a6:	f007 fec3 	bl	8019330 <floor>
 80115aa:	ec51 0b10 	vmov	r0, r1, d0
 80115ae:	f7ef fb1b 	bl	8000be8 <__aeabi_d2f>
 80115b2:	ee0c 0a10 	vmov	s24, r0
 80115b6:	f7fe b937 	b.w	800f828 <iNemoEngine_API_Update+0x928>
 80115ba:	ee78 7a27 	vadd.f32	s15, s16, s15
 80115be:	ee17 0a90 	vmov	r0, s15
 80115c2:	f7ee ffc1 	bl	8000548 <__aeabi_f2d>
 80115c6:	ec41 0b10 	vmov	d0, r0, r1
 80115ca:	f007 feb1 	bl	8019330 <floor>
 80115ce:	ec51 0b10 	vmov	r0, r1, d0
 80115d2:	f7ef fb09 	bl	8000be8 <__aeabi_d2f>
 80115d6:	ee08 0a10 	vmov	s16, r0
 80115da:	f7fe b8fa 	b.w	800f7d2 <iNemoEngine_API_Update+0x8d2>
 80115de:	ee78 7aa7 	vadd.f32	s15, s17, s15
 80115e2:	ee17 0a90 	vmov	r0, s15
 80115e6:	f7ee ffaf 	bl	8000548 <__aeabi_f2d>
 80115ea:	ec41 0b10 	vmov	d0, r0, r1
 80115ee:	f007 fe9f 	bl	8019330 <floor>
 80115f2:	ec51 0b10 	vmov	r0, r1, d0
 80115f6:	f7ef faf7 	bl	8000be8 <__aeabi_d2f>
 80115fa:	ee08 0a90 	vmov	s17, r0
 80115fe:	f7fe b8bd 	b.w	800f77c <iNemoEngine_API_Update+0x87c>
 8011602:	2c00      	cmp	r4, #0
 8011604:	f47f aa59 	bne.w	8010aba <iNemoEngine_API_Update+0x1bba>
 8011608:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
 801160c:	f88d 40ea 	strb.w	r4, [sp, #234]	; 0xea
 8011610:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 8011614:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 8011618:	f7ff ba5c 	b.w	8010ad4 <iNemoEngine_API_Update+0x1bd4>
 801161c:	eddf 5aa7 	vldr	s11, [pc, #668]	; 80118bc <iNemoEngine_API_Update+0x29bc>
 8011620:	ed9f 4aa7 	vldr	s8, [pc, #668]	; 80118c0 <iNemoEngine_API_Update+0x29c0>
 8011624:	ed9f 6aa7 	vldr	s12, [pc, #668]	; 80118c4 <iNemoEngine_API_Update+0x29c4>
 8011628:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80118c8 <iNemoEngine_API_Update+0x29c8>
 801162c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80118cc <iNemoEngine_API_Update+0x29cc>
 8011630:	f7ff b9b2 	b.w	8010998 <iNemoEngine_API_Update+0x1a98>
 8011634:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8011638:	2400      	movs	r4, #0
 801163a:	461a      	mov	r2, r3
 801163c:	f7ff b89f 	b.w	801077e <iNemoEngine_API_Update+0x187e>
 8011640:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011644:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 8011648:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 801164c:	eee7 4a84 	vfma.f32	s9, s15, s8
 8011650:	f7ff b86b 	b.w	801072a <iNemoEngine_API_Update+0x182a>
 8011654:	3305      	adds	r3, #5
 8011656:	6593      	str	r3, [r2, #88]	; 0x58
 8011658:	f7ff ba95 	b.w	8010b86 <iNemoEngine_API_Update+0x1c86>
 801165c:	edd2 4a48 	vldr	s9, [r2, #288]	; 0x120
 8011660:	eef4 4ae8 	vcmpe.f32	s9, s17
 8011664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011668:	f341 8112 	ble.w	8012890 <iNemoEngine_API_Update+0x3990>
 801166c:	ed92 7a32 	vldr	s14, [r2, #200]	; 0xc8
 8011670:	eef4 8ac7 	vcmpe.f32	s17, s14
 8011674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011678:	4613      	mov	r3, r2
 801167a:	f101 8392 	bmi.w	8012da2 <iNemoEngine_API_Update+0x3ea2>
 801167e:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 8011682:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801168a:	f141 83a2 	bpl.w	8012dd2 <iNemoEngine_API_Update+0x3ed2>
 801168e:	edd3 3a33 	vldr	s7, [r3, #204]	; 0xcc
 8011692:	ed93 4a35 	vldr	s8, [r3, #212]	; 0xd4
 8011696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801169a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801169e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80116a2:	ee24 7a07 	vmul.f32	s14, s8, s14
 80116a6:	ee87 fa27 	vdiv.f32	s30, s14, s15
 80116aa:	ee3f fa23 	vadd.f32	s30, s30, s7
 80116ae:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80116b2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80116b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ba:	f2c1 83a3 	blt.w	8012e04 <iNemoEngine_API_Update+0x3f04>
 80116be:	9b06      	ldr	r3, [sp, #24]
 80116c0:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80116c4:	eef4 8ac7 	vcmpe.f32	s17, s14
 80116c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116cc:	f141 86ad 	bpl.w	801342a <iNemoEngine_API_Update+0x452a>
 80116d0:	edd3 3a37 	vldr	s7, [r3, #220]	; 0xdc
 80116d4:	ed93 4a39 	vldr	s8, [r3, #228]	; 0xe4
 80116d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80116dc:	ee34 4a63 	vsub.f32	s8, s8, s7
 80116e0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80116e4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80116e8:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80116ec:	ee3f fa23 	vadd.f32	s30, s30, s7
 80116f0:	9b06      	ldr	r3, [sp, #24]
 80116f2:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 80116f6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80116fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116fe:	f2c1 83a3 	blt.w	8012e48 <iNemoEngine_API_Update+0x3f48>
 8011702:	9b06      	ldr	r3, [sp, #24]
 8011704:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8011708:	eef4 8ac7 	vcmpe.f32	s17, s14
 801170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011710:	f141 86ca 	bpl.w	80134a8 <iNemoEngine_API_Update+0x45a8>
 8011714:	edd3 3a3b 	vldr	s7, [r3, #236]	; 0xec
 8011718:	ed93 4a3d 	vldr	s8, [r3, #244]	; 0xf4
 801171c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011720:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011724:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8011728:	ee64 7a27 	vmul.f32	s15, s8, s15
 801172c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8011730:	ee3f fa23 	vadd.f32	s30, s30, s7
 8011734:	9b06      	ldr	r3, [sp, #24]
 8011736:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 801173a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011742:	f2c1 83a3 	blt.w	8012e8c <iNemoEngine_API_Update+0x3f8c>
 8011746:	9b06      	ldr	r3, [sp, #24]
 8011748:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 801174c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8011750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011754:	f141 866c 	bpl.w	8013430 <iNemoEngine_API_Update+0x4530>
 8011758:	edd3 3a3f 	vldr	s7, [r3, #252]	; 0xfc
 801175c:	ed93 4a41 	vldr	s8, [r3, #260]	; 0x104
 8011760:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011764:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011768:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801176c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8011770:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8011774:	ee3f fa23 	vadd.f32	s30, s30, s7
 8011778:	9b06      	ldr	r3, [sp, #24]
 801177a:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 801177e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011786:	f2c1 83a3 	blt.w	8012ed0 <iNemoEngine_API_Update+0x3fd0>
 801178a:	9b06      	ldr	r3, [sp, #24]
 801178c:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 8011790:	eef4 8ac7 	vcmpe.f32	s17, s14
 8011794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011798:	f141 863c 	bpl.w	8013414 <iNemoEngine_API_Update+0x4514>
 801179c:	edd3 3a43 	vldr	s7, [r3, #268]	; 0x10c
 80117a0:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 80117a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80117a8:	ee34 4a63 	vsub.f32	s8, s8, s7
 80117ac:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80117b0:	ee64 7a27 	vmul.f32	s15, s8, s15
 80117b4:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80117b8:	ee3f fa23 	vadd.f32	s30, s30, s7
 80117bc:	9b06      	ldr	r3, [sp, #24]
 80117be:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 80117c2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80117c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ca:	f6fe ae38 	blt.w	801043e <iNemoEngine_API_Update+0x153e>
 80117ce:	9b06      	ldr	r3, [sp, #24]
 80117d0:	ed93 4a47 	vldr	s8, [r3, #284]	; 0x11c
 80117d4:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 80117d8:	ee74 4ae7 	vsub.f32	s9, s9, s15
 80117dc:	ee37 7a44 	vsub.f32	s14, s14, s8
 80117e0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80117e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117e8:	ee87 faa4 	vdiv.f32	s30, s15, s9
 80117ec:	ee3f fa04 	vadd.f32	s30, s30, s8
 80117f0:	f7fe be25 	b.w	801043e <iNemoEngine_API_Update+0x153e>
 80117f4:	ee78 7aa7 	vadd.f32	s15, s17, s15
 80117f8:	ee17 0a90 	vmov	r0, s15
 80117fc:	f7ee fea4 	bl	8000548 <__aeabi_f2d>
 8011800:	ec41 0b10 	vmov	d0, r0, r1
 8011804:	f007 fd94 	bl	8019330 <floor>
 8011808:	ec51 0b10 	vmov	r0, r1, d0
 801180c:	f7ef f9ec 	bl	8000be8 <__aeabi_d2f>
 8011810:	ee08 0a90 	vmov	s17, r0
 8011814:	f7fe b930 	b.w	800fa78 <iNemoEngine_API_Update+0xb78>
 8011818:	ee78 7aa7 	vadd.f32	s15, s17, s15
 801181c:	ee17 0a90 	vmov	r0, s15
 8011820:	f7ee fe92 	bl	8000548 <__aeabi_f2d>
 8011824:	ec41 0b10 	vmov	d0, r0, r1
 8011828:	f007 fd82 	bl	8019330 <floor>
 801182c:	ec51 0b10 	vmov	r0, r1, d0
 8011830:	f7ef f9da 	bl	8000be8 <__aeabi_d2f>
 8011834:	ee08 0a90 	vmov	s17, r0
 8011838:	f7fe b8b5 	b.w	800f9a6 <iNemoEngine_API_Update+0xaa6>
 801183c:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8011840:	ee17 0a90 	vmov	r0, s15
 8011844:	f7ee fe80 	bl	8000548 <__aeabi_f2d>
 8011848:	ec41 0b10 	vmov	d0, r0, r1
 801184c:	f007 fd70 	bl	8019330 <floor>
 8011850:	ec51 0b10 	vmov	r0, r1, d0
 8011854:	f7ef f9c8 	bl	8000be8 <__aeabi_d2f>
 8011858:	ee0c 0a10 	vmov	s24, r0
 801185c:	f7fe b878 	b.w	800f950 <iNemoEngine_API_Update+0xa50>
 8011860:	ee78 7a27 	vadd.f32	s15, s16, s15
 8011864:	ee17 0a90 	vmov	r0, s15
 8011868:	f7ee fe6e 	bl	8000548 <__aeabi_f2d>
 801186c:	ec41 0b10 	vmov	d0, r0, r1
 8011870:	f007 fd5e 	bl	8019330 <floor>
 8011874:	ec51 0b10 	vmov	r0, r1, d0
 8011878:	f7ef f9b6 	bl	8000be8 <__aeabi_d2f>
 801187c:	ee08 0a10 	vmov	s16, r0
 8011880:	f7fe b83b 	b.w	800f8fa <iNemoEngine_API_Update+0x9fa>
 8011884:	ee78 7a27 	vadd.f32	s15, s16, s15
 8011888:	ee17 0a90 	vmov	r0, s15
 801188c:	f7ee fe5c 	bl	8000548 <__aeabi_f2d>
 8011890:	ec41 0b10 	vmov	d0, r0, r1
 8011894:	f007 fd4c 	bl	8019330 <floor>
 8011898:	ec51 0b10 	vmov	r0, r1, d0
 801189c:	f7ef f9a4 	bl	8000be8 <__aeabi_d2f>
 80118a0:	ee08 0a10 	vmov	s16, r0
 80118a4:	f7fe b93e 	b.w	800fb24 <iNemoEngine_API_Update+0xc24>
 80118a8:	20000000 	.word	0x20000000
 80118ac:	404ca5dc 	.word	0x404ca5dc
 80118b0:	40568000 	.word	0x40568000
 80118b4:	3dcccccd 	.word	0x3dcccccd
 80118b8:	3a83126f 	.word	0x3a83126f
 80118bc:	3c75c28f 	.word	0x3c75c28f
 80118c0:	391d4951 	.word	0x391d4951
 80118c4:	383cbe62 	.word	0x383cbe62
 80118c8:	469c3e00 	.word	0x469c3e00
 80118cc:	43168000 	.word	0x43168000
 80118d0:	3d088889 	.word	0x3d088889
 80118d4:	3e4ccccd 	.word	0x3e4ccccd
 80118d8:	ee7c 7a27 	vadd.f32	s15, s24, s15
 80118dc:	ee17 0a90 	vmov	r0, s15
 80118e0:	f7ee fe32 	bl	8000548 <__aeabi_f2d>
 80118e4:	ec41 0b10 	vmov	d0, r0, r1
 80118e8:	f007 fd22 	bl	8019330 <floor>
 80118ec:	ec51 0b10 	vmov	r0, r1, d0
 80118f0:	f7ef f97a 	bl	8000be8 <__aeabi_d2f>
 80118f4:	ee0c 0a10 	vmov	s24, r0
 80118f8:	f7fe b8e9 	b.w	800face <iNemoEngine_API_Update+0xbce>
 80118fc:	2a00      	cmp	r2, #0
 80118fe:	f43f a910 	beq.w	8010b22 <iNemoEngine_API_Update+0x1c22>
 8011902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011906:	ee39 9a47 	vsub.f32	s18, s18, s14
 801190a:	eef0 7ac9 	vabs.f32	s15, s18
 801190e:	ee29 9a09 	vmul.f32	s18, s18, s18
 8011912:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191a:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801191e:	bfb8      	it	lt
 8011920:	eef0 7a46 	vmovlt.f32	s15, s12
 8011924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011928:	edcd 7a8d 	vstr	s15, [sp, #564]	; 0x234
 801192c:	f77f a900 	ble.w	8010b30 <iNemoEngine_API_Update+0x1c30>
 8011930:	eddd 7a86 	vldr	s15, [sp, #536]	; 0x218
 8011934:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8011938:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011940:	f77f a8f6 	ble.w	8010b30 <iNemoEngine_API_Update+0x1c30>
 8011944:	ee67 7a89 	vmul.f32	s15, s15, s18
 8011948:	edcd 7a86 	vstr	s15, [sp, #536]	; 0x218
 801194c:	eddd 7a87 	vldr	s15, [sp, #540]	; 0x21c
 8011950:	ee67 7a89 	vmul.f32	s15, s15, s18
 8011954:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 8011958:	eddd 7a88 	vldr	s15, [sp, #544]	; 0x220
 801195c:	ee27 9a89 	vmul.f32	s18, s15, s18
 8011960:	ed8d 9a88 	vstr	s18, [sp, #544]	; 0x220
 8011964:	f7ff b8e4 	b.w	8010b30 <iNemoEngine_API_Update+0x1c30>
 8011968:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 801196c:	2a01      	cmp	r2, #1
 801196e:	f000 877b 	beq.w	8012868 <iNemoEngine_API_Update+0x3968>
 8011972:	2b02      	cmp	r3, #2
 8011974:	f040 8778 	bne.w	8012868 <iNemoEngine_API_Update+0x3968>
 8011978:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 801197c:	9a06      	ldr	r2, [sp, #24]
 801197e:	ee87 7a8d 	vdiv.f32	s14, s15, s26
 8011982:	f240 1301 	movw	r3, #257	; 0x101
 8011986:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
 801198a:	2301      	movs	r3, #1
 801198c:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 8011990:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011994:	ed92 6a64 	vldr	s12, [r2, #400]	; 0x190
 8011998:	ed8d 7a3d 	vstr	s14, [sp, #244]	; 0xf4
 801199c:	eecb 5a27 	vdiv.f32	s11, s22, s15
 80119a0:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 80119a4:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 80119a8:	eecd 7aa7 	vdiv.f32	s15, s27, s15
 80119ac:	eeb4 5a00 	vmov.f32	s10, #64	; 0x3e000000  0.125
 80119b0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80119b4:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 80119b8:	eeb4 6ae8 	vcmpe.f32	s12, s17
 80119bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119c0:	f280 87d8 	bge.w	8012974 <iNemoEngine_API_Update+0x3a74>
 80119c4:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
 80119c8:	eeb4 dac6 	vcmpe.f32	s26, s12
 80119cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119d0:	f341 83a4 	ble.w	801311c <iNemoEngine_API_Update+0x421c>
 80119d4:	ed9d 6a16 	vldr	s12, [sp, #88]	; 0x58
 80119d8:	eeb4 6acb 	vcmpe.f32	s12, s22
 80119dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e0:	f341 839c 	ble.w	801311c <iNemoEngine_API_Update+0x421c>
 80119e4:	ed9d 6a17 	vldr	s12, [sp, #92]	; 0x5c
 80119e8:	eeb4 6aed 	vcmpe.f32	s12, s27
 80119ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f0:	f341 8394 	ble.w	801311c <iNemoEngine_API_Update+0x421c>
 80119f4:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 80119f8:	eeb4 8ac6 	vcmpe.f32	s16, s12
 80119fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a00:	f141 838c 	bpl.w	801311c <iNemoEngine_API_Update+0x421c>
 8011a04:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011a08:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8011a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a10:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a18:	f141 8380 	bpl.w	801311c <iNemoEngine_API_Update+0x421c>
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 8011a22:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 8011a26:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8011a2a:	2a00      	cmp	r2, #0
 8011a2c:	f040 87c7 	bne.w	80129be <iNemoEngine_API_Update+0x3abe>
 8011a30:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011a32:	a840      	add	r0, sp, #256	; 0x100
 8011a34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011a38:	4613      	mov	r3, r2
 8011a3a:	edd2 7a00 	vldr	s15, [r2]
 8011a3e:	3101      	adds	r1, #1
 8011a40:	330c      	adds	r3, #12
 8011a42:	3204      	adds	r2, #4
 8011a44:	461c      	mov	r4, r3
 8011a46:	ed94 7a00 	vldr	s14, [r4]
 8011a4a:	330c      	adds	r3, #12
 8011a4c:	4598      	cmp	r8, r3
 8011a4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a52:	d1f7      	bne.n	8011a44 <iNemoEngine_API_Update+0x2b44>
 8011a54:	2902      	cmp	r1, #2
 8011a56:	ece0 7a01 	vstmia	r0!, {s15}
 8011a5a:	f108 0804 	add.w	r8, r8, #4
 8011a5e:	d1eb      	bne.n	8011a38 <iNemoEngine_API_Update+0x2b38>
 8011a60:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 80118d0 <iNemoEngine_API_Update+0x29d0>
 8011a64:	9b06      	ldr	r3, [sp, #24]
 8011a66:	eddd 4a40 	vldr	s9, [sp, #256]	; 0x100
 8011a6a:	ed9d 5a41 	vldr	s10, [sp, #260]	; 0x104
 8011a6e:	eddd 5a42 	vldr	s11, [sp, #264]	; 0x108
 8011a72:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8011a74:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 8011a78:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8011a7c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8011a80:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8011a84:	f503 71b2 	add.w	r1, r3, #356	; 0x164
 8011a88:	4602      	mov	r2, r0
 8011a8a:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 8011a8e:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 8011a92:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 8011a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9e:	f103 030c 	add.w	r3, r3, #12
 8011aa2:	bf88      	it	hi
 8011aa4:	eef0 7a47 	vmovhi.f32	s15, s14
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	d1f2      	bne.n	8011a92 <iNemoEngine_API_Update+0x2b92>
 8011aac:	1d1a      	adds	r2, r3, #4
 8011aae:	4291      	cmp	r1, r2
 8011ab0:	ece4 7a01 	vstmia	r4!, {s15}
 8011ab4:	d1e9      	bne.n	8011a8a <iNemoEngine_API_Update+0x2b8a>
 8011ab6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011ab8:	ed9d 4a3d 	vldr	s8, [sp, #244]	; 0xf4
 8011abc:	edd3 7a00 	vldr	s15, [r3]
 8011ac0:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 8011ac4:	ed9d 6a3f 	vldr	s12, [sp, #252]	; 0xfc
 8011ac8:	9b06      	ldr	r3, [sp, #24]
 8011aca:	ee97 4aa4 	vfnms.f32	s8, s15, s9
 8011ace:	785b      	ldrb	r3, [r3, #1]
 8011ad0:	ee97 7a85 	vfnms.f32	s14, s15, s10
 8011ad4:	ee97 6aa5 	vfnms.f32	s12, s15, s11
 8011ad8:	eef0 4a47 	vmov.f32	s9, s14
 8011adc:	ed8d 4a40 	vstr	s8, [sp, #256]	; 0x100
 8011ae0:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 8011ae4:	ed8d 6a42 	vstr	s12, [sp, #264]	; 0x108
 8011ae8:	b13b      	cbz	r3, 8011afa <iNemoEngine_API_Update+0x2bfa>
 8011aea:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8011aee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af6:	f101 83e1 	bmi.w	80132bc <iNemoEngine_API_Update+0x43bc>
 8011afa:	9b06      	ldr	r3, [sp, #24]
 8011afc:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
 8011b00:	2a1e      	cmp	r2, #30
 8011b02:	f001 843c 	beq.w	801337e <iNemoEngine_API_Update+0x447e>
 8011b06:	1c53      	adds	r3, r2, #1
 8011b08:	2aff      	cmp	r2, #255	; 0xff
 8011b0a:	9906      	ldr	r1, [sp, #24]
 8011b0c:	bf14      	ite	ne
 8011b0e:	b2db      	uxtbne	r3, r3
 8011b10:	23ff      	moveq	r3, #255	; 0xff
 8011b12:	2200      	movs	r2, #0
 8011b14:	f881 31a1 	strb.w	r3, [r1, #417]	; 0x1a1
 8011b18:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8011b1c:	464b      	mov	r3, r9
 8011b1e:	f7ff bb46 	b.w	80111ae <iNemoEngine_API_Update+0x22ae>
 8011b22:	ed1f 7a94 	vldr	s14, [pc, #-592]	; 80118d4 <iNemoEngine_API_Update+0x29d4>
 8011b26:	4603      	mov	r3, r0
 8011b28:	f7fd bc03 	b.w	800f332 <iNemoEngine_API_Update+0x432>
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	f43e afe0 	beq.w	8010af2 <iNemoEngine_API_Update+0x1bf2>
 8011b32:	f89d 30e8 	ldrb.w	r3, [sp, #232]	; 0xe8
 8011b36:	2b01      	cmp	r3, #1
 8011b38:	d002      	beq.n	8011b40 <iNemoEngine_API_Update+0x2c40>
 8011b3a:	2c01      	cmp	r4, #1
 8011b3c:	f47e afe2 	bne.w	8010b04 <iNemoEngine_API_Update+0x1c04>
 8011b40:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 8011b44:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8011b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b4c:	bfb8      	it	lt
 8011b4e:	eeb0 5a67 	vmovlt.f32	s10, s15
 8011b52:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 8011b56:	ed8d 5a84 	vstr	s10, [sp, #528]	; 0x210
 8011b5a:	ed8d 5a85 	vstr	s10, [sp, #532]	; 0x214
 8011b5e:	f7fe bfd1 	b.w	8010b04 <iNemoEngine_API_Update+0x1c04>
 8011b62:	9b06      	ldr	r3, [sp, #24]
 8011b64:	49c6      	ldr	r1, [pc, #792]	; (8011e80 <iNemoEngine_API_Update+0x2f80>)
 8011b66:	ed93 ba05 	vldr	s22, [r3, #20]
 8011b6a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7fd bbc9 	b.w	800f30a <iNemoEngine_API_Update+0x40a>
 8011b78:	9b06      	ldr	r3, [sp, #24]
 8011b7a:	49c2      	ldr	r1, [pc, #776]	; (8011e84 <iNemoEngine_API_Update+0x2f84>)
 8011b7c:	ed93 ba05 	vldr	s22, [r3, #20]
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7fd bbc2 	b.w	800f30a <iNemoEngine_API_Update+0x40a>
 8011b86:	4611      	mov	r1, r2
 8011b88:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8011b8a:	2a00      	cmp	r2, #0
 8011b8c:	dd0c      	ble.n	8011ba8 <iNemoEngine_API_Update+0x2ca8>
 8011b8e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8011b92:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8011b96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b9e:	dd03      	ble.n	8011ba8 <iNemoEngine_API_Update+0x2ca8>
 8011ba0:	3a01      	subs	r2, #1
 8011ba2:	65ca      	str	r2, [r1, #92]	; 0x5c
 8011ba4:	f7fe bfef 	b.w	8010b86 <iNemoEngine_API_Update+0x1c86>
 8011ba8:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8011bac:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011bb4:	eeb4 bac7 	vcmpe.f32	s22, s14
 8011bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bbc:	f57e afe3 	bpl.w	8010b86 <iNemoEngine_API_Update+0x1c86>
 8011bc0:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 8011bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bc8:	eef4 dae7 	vcmpe.f32	s27, s15
 8011bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bd0:	f57e afd9 	bpl.w	8010b86 <iNemoEngine_API_Update+0x1c86>
 8011bd4:	ee7d 7a0d 	vadd.f32	s15, s26, s26
 8011bd8:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 8011bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be4:	f341 8492 	ble.w	801350c <iNemoEngine_API_Update+0x460c>
 8011be8:	9a06      	ldr	r2, [sp, #24]
 8011bea:	3303      	adds	r3, #3
 8011bec:	e434      	b.n	8011458 <iNemoEngine_API_Update+0x2558>
 8011bee:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8011e88 <iNemoEngine_API_Update+0x2f88>
 8011bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bfa:	f57e ae7b 	bpl.w	80108f4 <iNemoEngine_API_Update+0x19f4>
 8011bfe:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8011e8c <iNemoEngine_API_Update+0x2f8c>
 8011c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0a:	f280 80c9 	bge.w	8011da0 <iNemoEngine_API_Update+0x2ea0>
 8011c0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011c12:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8011e90 <iNemoEngine_API_Update+0x2f90>
 8011c16:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c1e:	f280 80d5 	bge.w	8011dcc <iNemoEngine_API_Update+0x2ecc>
 8011c22:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8011e94 <iNemoEngine_API_Update+0x2f94>
 8011c26:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c2e:	f280 80e3 	bge.w	8011df8 <iNemoEngine_API_Update+0x2ef8>
 8011c32:	eddf 6a99 	vldr	s13, [pc, #612]	; 8011e98 <iNemoEngine_API_Update+0x2f98>
 8011c36:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c3e:	f280 80f1 	bge.w	8011e24 <iNemoEngine_API_Update+0x2f24>
 8011c42:	eddf 6a96 	vldr	s13, [pc, #600]	; 8011e9c <iNemoEngine_API_Update+0x2f9c>
 8011c46:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c4e:	f280 80ff 	bge.w	8011e50 <iNemoEngine_API_Update+0x2f50>
 8011c52:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011c56:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5e:	db0d      	blt.n	8011c7c <iNemoEngine_API_Update+0x2d7c>
 8011c60:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011c64:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8011ea0 <iNemoEngine_API_Update+0x2fa0>
 8011c68:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011c6c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011c70:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011c74:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8011ea4 <iNemoEngine_API_Update+0x2fa4>
 8011c78:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011c7c:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8011ea8 <iNemoEngine_API_Update+0x2fa8>
 8011c80:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c88:	f141 82fa 	bpl.w	8013280 <iNemoEngine_API_Update+0x4380>
 8011c8c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8011e88 <iNemoEngine_API_Update+0x2f88>
 8011c90:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c98:	f2c1 82fa 	blt.w	8013290 <iNemoEngine_API_Update+0x4390>
 8011c9c:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8011e8c <iNemoEngine_API_Update+0x2f8c>
 8011ca0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca8:	f141 8296 	bpl.w	80131d8 <iNemoEngine_API_Update+0x42d8>
 8011cac:	ed9f 6a76 	vldr	s12, [pc, #472]	; 8011e88 <iNemoEngine_API_Update+0x2f88>
 8011cb0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8011eac <iNemoEngine_API_Update+0x2fac>
 8011cb4:	eddf 5a7e 	vldr	s11, [pc, #504]	; 8011eb0 <iNemoEngine_API_Update+0x2fb0>
 8011cb8:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8011cbc:	ee26 6a26 	vmul.f32	s12, s12, s13
 8011cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011cc4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011cc8:	ed9f 6a71 	vldr	s12, [pc, #452]	; 8011e90 <iNemoEngine_API_Update+0x2f90>
 8011ccc:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cd4:	f2c1 8296 	blt.w	8013204 <iNemoEngine_API_Update+0x4304>
 8011cd8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011e94 <iNemoEngine_API_Update+0x2f94>
 8011cdc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce4:	f141 8296 	bpl.w	8013214 <iNemoEngine_API_Update+0x4314>
 8011ce8:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8011e90 <iNemoEngine_API_Update+0x2f90>
 8011cec:	eddf 6a71 	vldr	s13, [pc, #452]	; 8011eb4 <iNemoEngine_API_Update+0x2fb4>
 8011cf0:	eddf 5a71 	vldr	s11, [pc, #452]	; 8011eb8 <iNemoEngine_API_Update+0x2fb8>
 8011cf4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8011cf8:	ee26 6a26 	vmul.f32	s12, s12, s13
 8011cfc:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8011ebc <iNemoEngine_API_Update+0x2fbc>
 8011d00:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011d04:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8011e98 <iNemoEngine_API_Update+0x2f98>
 8011d08:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d10:	f2c1 8296 	blt.w	8013240 <iNemoEngine_API_Update+0x4340>
 8011d14:	eddf 6a61 	vldr	s13, [pc, #388]	; 8011e9c <iNemoEngine_API_Update+0x2f9c>
 8011d18:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d20:	f141 8296 	bpl.w	8013250 <iNemoEngine_API_Update+0x4350>
 8011d24:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8011e98 <iNemoEngine_API_Update+0x2f98>
 8011d28:	eddf 6a65 	vldr	s13, [pc, #404]	; 8011ec0 <iNemoEngine_API_Update+0x2fc0>
 8011d2c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8011d30:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 8011d34:	ee26 6a26 	vmul.f32	s12, s12, s13
 8011d38:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 8011d3c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011d40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011d44:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4c:	db0d      	blt.n	8011d6a <iNemoEngine_API_Update+0x2e6a>
 8011d4e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011d52:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8011ec4 <iNemoEngine_API_Update+0x2fc4>
 8011d56:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8011d5a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8011d5e:	ee26 6a26 	vmul.f32	s12, s12, s13
 8011d62:	eddf 6a59 	vldr	s13, [pc, #356]	; 8011ec8 <iNemoEngine_API_Update+0x2fc8>
 8011d66:	eee6 6a25 	vfma.f32	s13, s12, s11
 8011d6a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011d6e:	ee37 6a06 	vadd.f32	s12, s14, s12
 8011d72:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8011d76:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8011d7a:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8011e8c <iNemoEngine_API_Update+0x2f8c>
 8011d7e:	ed9f 4a42 	vldr	s8, [pc, #264]	; 8011e88 <iNemoEngine_API_Update+0x2f88>
 8011d82:	eef4 5ac6 	vcmpe.f32	s11, s12
 8011d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d8a:	bfb8      	it	lt
 8011d8c:	eef0 5a46 	vmovlt.f32	s11, s12
 8011d90:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8011ecc <iNemoEngine_API_Update+0x2fcc>
 8011d94:	ee25 4a84 	vmul.f32	s8, s11, s8
 8011d98:	ee25 6a86 	vmul.f32	s12, s11, s12
 8011d9c:	f7fe bdfc 	b.w	8010998 <iNemoEngine_API_Update+0x1a98>
 8011da0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8011e90 <iNemoEngine_API_Update+0x2f90>
 8011da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dac:	d50e      	bpl.n	8011dcc <iNemoEngine_API_Update+0x2ecc>
 8011dae:	eddf 6a37 	vldr	s13, [pc, #220]	; 8011e8c <iNemoEngine_API_Update+0x2f8c>
 8011db2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8011ed0 <iNemoEngine_API_Update+0x2fd0>
 8011db6:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8011ed4 <iNemoEngine_API_Update+0x2fd4>
 8011dba:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011dbe:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011dc2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8011ed8 <iNemoEngine_API_Update+0x2fd8>
 8011dc6:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011dca:	e72a      	b.n	8011c22 <iNemoEngine_API_Update+0x2d22>
 8011dcc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8011e94 <iNemoEngine_API_Update+0x2f94>
 8011dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd8:	d50e      	bpl.n	8011df8 <iNemoEngine_API_Update+0x2ef8>
 8011dda:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8011e90 <iNemoEngine_API_Update+0x2f90>
 8011dde:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8011eb8 <iNemoEngine_API_Update+0x2fb8>
 8011de2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011de6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011dea:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011dee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011df2:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011df6:	e71c      	b.n	8011c32 <iNemoEngine_API_Update+0x2d32>
 8011df8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8011e98 <iNemoEngine_API_Update+0x2f98>
 8011dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e04:	d50e      	bpl.n	8011e24 <iNemoEngine_API_Update+0x2f24>
 8011e06:	eddf 6a23 	vldr	s13, [pc, #140]	; 8011e94 <iNemoEngine_API_Update+0x2f94>
 8011e0a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011e0e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8011e12:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011e16:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8011e1a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011e1e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011e22:	e70e      	b.n	8011c42 <iNemoEngine_API_Update+0x2d42>
 8011e24:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8011e9c <iNemoEngine_API_Update+0x2f9c>
 8011e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e30:	d50e      	bpl.n	8011e50 <iNemoEngine_API_Update+0x2f50>
 8011e32:	eddf 6a19 	vldr	s13, [pc, #100]	; 8011e98 <iNemoEngine_API_Update+0x2f98>
 8011e36:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8011edc <iNemoEngine_API_Update+0x2fdc>
 8011e3a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011e3e:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8011e42:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011e46:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8011e4a:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011e4e:	e700      	b.n	8011c52 <iNemoEngine_API_Update+0x2d52>
 8011e50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e5c:	f57f af00 	bpl.w	8011c60 <iNemoEngine_API_Update+0x2d60>
 8011e60:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8011e9c <iNemoEngine_API_Update+0x2f9c>
 8011e64:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8011ee0 <iNemoEngine_API_Update+0x2fe0>
 8011e68:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8011ee4 <iNemoEngine_API_Update+0x2fe4>
 8011e6c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011e70:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011e74:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8011ee8 <iNemoEngine_API_Update+0x2fe8>
 8011e78:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011e7c:	e6fe      	b.n	8011c7c <iNemoEngine_API_Update+0x2d7c>
 8011e7e:	bf00      	nop
 8011e80:	3727c5ac 	.word	0x3727c5ac
 8011e84:	3ac49ba6 	.word	0x3ac49ba6
 8011e88:	3c23d70a 	.word	0x3c23d70a
 8011e8c:	3c75c28f 	.word	0x3c75c28f
 8011e90:	3cf5c28f 	.word	0x3cf5c28f
 8011e94:	3d4ccccd 	.word	0x3d4ccccd
 8011e98:	3dcccccd 	.word	0x3dcccccd
 8011e9c:	3e4ccccd 	.word	0x3e4ccccd
 8011ea0:	46979000 	.word	0x46979000
 8011ea4:	4415c000 	.word	0x4415c000
 8011ea8:	3ba3d70a 	.word	0x3ba3d70a
 8011eac:	3d4cccc0 	.word	0x3d4cccc0
 8011eb0:	43480000 	.word	0x43480000
 8011eb4:	3eb33334 	.word	0x3eb33334
 8011eb8:	4247ffff 	.word	0x4247ffff
 8011ebc:	3f933333 	.word	0x3f933333
 8011ec0:	410c0000 	.word	0x410c0000
 8011ec4:	42c80000 	.word	0x42c80000
 8011ec8:	424a0000 	.word	0x424a0000
 8011ecc:	3b449ba6 	.word	0x3b449ba6
 8011ed0:	3ecccccc 	.word	0x3ecccccc
 8011ed4:	42855556 	.word	0x42855556
 8011ed8:	3fcccccd 	.word	0x3fcccccd
 8011edc:	42d40000 	.word	0x42d40000
 8011ee0:	43f00000 	.word	0x43f00000
 8011ee4:	40555555 	.word	0x40555555
 8011ee8:	42ee0000 	.word	0x42ee0000
 8011eec:	4615      	mov	r5, r2
 8011eee:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 8011ef2:	49d7      	ldr	r1, [pc, #860]	; (8012250 <iNemoEngine_API_Update+0x3350>)
 8011ef4:	4ad7      	ldr	r2, [pc, #860]	; (8012254 <iNemoEngine_API_Update+0x3354>)
 8011ef6:	4bd8      	ldr	r3, [pc, #864]	; (8012258 <iNemoEngine_API_Update+0x3358>)
 8011ef8:	2000      	movs	r0, #0
 8011efa:	f885 0318 	strb.w	r0, [r5, #792]	; 0x318
 8011efe:	f205 6824 	addw	r8, r5, #1572	; 0x624
 8011f02:	6039      	str	r1, [r7, #0]
 8011f04:	f205 7194 	addw	r1, r5, #1940	; 0x794
 8011f08:	f8c8 2000 	str.w	r2, [r8]
 8011f0c:	600b      	str	r3, [r1, #0]
 8011f0e:	f895 64b1 	ldrb.w	r6, [r5, #1201]	; 0x4b1
 8011f12:	911b      	str	r1, [sp, #108]	; 0x6c
 8011f14:	2e00      	cmp	r6, #0
 8011f16:	f001 8297 	beq.w	8013448 <iNemoEngine_API_Update+0x4548>
 8011f1a:	eddf 7ad0 	vldr	s15, [pc, #832]	; 801225c <iNemoEngine_API_Update+0x335c>
 8011f1e:	ee68 faa7 	vmul.f32	s31, s17, s15
 8011f22:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 8011f26:	ee28 fa27 	vmul.f32	s30, s16, s15
 8011f2a:	ee6c da27 	vmul.f32	s27, s24, s15
 8011f2e:	ee7f 7acb 	vsub.f32	s15, s31, s22
 8011f32:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8011f36:	ee17 0a90 	vmov	r0, s15
 8011f3a:	f7ee fb05 	bl	8000548 <__aeabi_f2d>
 8011f3e:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 8011f42:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011f46:	ee17 0a90 	vmov	r0, s15
 8011f4a:	f7ee fafd 	bl	8000548 <__aeabi_f2d>
 8011f4e:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 8011f52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011f56:	ee17 0a90 	vmov	r0, s15
 8011f5a:	f7ee faf5 	bl	8000548 <__aeabi_f2d>
 8011f5e:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 8011f62:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011f66:	ee17 0a90 	vmov	r0, s15
 8011f6a:	f7ee faed 	bl	8000548 <__aeabi_f2d>
 8011f6e:	ee7d 7acb 	vsub.f32	s15, s27, s22
 8011f72:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011f76:	ee17 0a90 	vmov	r0, s15
 8011f7a:	f7ee fae5 	bl	8000548 <__aeabi_f2d>
 8011f7e:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 8011f82:	4602      	mov	r2, r0
 8011f84:	460b      	mov	r3, r1
 8011f86:	ee17 0a90 	vmov	r0, s15
 8011f8a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8011f8e:	f7ee fadb 	bl	8000548 <__aeabi_f2d>
 8011f92:	9b06      	ldr	r3, [sp, #24]
 8011f94:	ed9f bab8 	vldr	s22, [pc, #736]	; 8012278 <iNemoEngine_API_Update+0x3378>
 8011f98:	eef0 7aef 	vabs.f32	s15, s31
 8011f9c:	edcd 7a03 	vstr	s15, [sp, #12]
 8011fa0:	eef0 7acf 	vabs.f32	s15, s30
 8011fa4:	f503 6597 	add.w	r5, r3, #1208	; 0x4b8
 8011fa8:	edcd 7a04 	vstr	s15, [sp, #16]
 8011fac:	230c      	movs	r3, #12
 8011fae:	eef0 7aed 	vabs.f32	s15, s27
 8011fb2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8011fb6:	fb13 5606 	smlabb	r6, r3, r6, r5
 8011fba:	edcd 7a05 	vstr	s15, [sp, #20]
 8011fbe:	46aa      	mov	sl, r5
 8011fc0:	e060      	b.n	8012084 <iNemoEngine_API_Update+0x3184>
 8011fc2:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8012260 <iNemoEngine_API_Update+0x3360>
 8011fc6:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fce:	f280 8162 	bge.w	8012296 <iNemoEngine_API_Update+0x3396>
 8011fd2:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8012264 <iNemoEngine_API_Update+0x3364>
 8011fd6:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fde:	f300 816c 	bgt.w	80122ba <iNemoEngine_API_Update+0x33ba>
 8011fe2:	ed9d 0b08 	vldr	d0, [sp, #32]
 8011fe6:	f007 f923 	bl	8019230 <ceil>
 8011fea:	ec51 0b10 	vmov	r0, r1, d0
 8011fee:	f7ee fdfb 	bl	8000be8 <__aeabi_d2f>
 8011ff2:	eddd 7a04 	vldr	s15, [sp, #16]
 8011ff6:	f8ca 0000 	str.w	r0, [sl]
 8011ffa:	eef4 7acb 	vcmpe.f32	s15, s22
 8011ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012002:	f140 8121 	bpl.w	8012248 <iNemoEngine_API_Update+0x3348>
 8012006:	eddf 7a96 	vldr	s15, [pc, #600]	; 8012260 <iNemoEngine_API_Update+0x3360>
 801200a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012012:	f280 8137 	bge.w	8012284 <iNemoEngine_API_Update+0x3384>
 8012016:	eddf 7a93 	vldr	s15, [pc, #588]	; 8012264 <iNemoEngine_API_Update+0x3364>
 801201a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801201e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012022:	f300 8257 	bgt.w	80124d4 <iNemoEngine_API_Update+0x35d4>
 8012026:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 801202a:	f007 f901 	bl	8019230 <ceil>
 801202e:	ec51 0b10 	vmov	r0, r1, d0
 8012032:	f7ee fdd9 	bl	8000be8 <__aeabi_d2f>
 8012036:	eddd 7a05 	vldr	s15, [sp, #20]
 801203a:	f8ca 0004 	str.w	r0, [sl, #4]
 801203e:	eef4 7acb 	vcmpe.f32	s15, s22
 8012042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012046:	d527      	bpl.n	8012098 <iNemoEngine_API_Update+0x3198>
 8012048:	eddf 7a85 	vldr	s15, [pc, #532]	; 8012260 <iNemoEngine_API_Update+0x3360>
 801204c:	eeb4 cae7 	vcmpe.f32	s24, s15
 8012050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012054:	f280 8128 	bge.w	80122a8 <iNemoEngine_API_Update+0x33a8>
 8012058:	eddf 7a82 	vldr	s15, [pc, #520]	; 8012264 <iNemoEngine_API_Update+0x3364>
 801205c:	eeb4 cae7 	vcmpe.f32	s24, s15
 8012060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012064:	f300 812b 	bgt.w	80122be <iNemoEngine_API_Update+0x33be>
 8012068:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 801206c:	f007 f8e0 	bl	8019230 <ceil>
 8012070:	ec51 0b10 	vmov	r0, r1, d0
 8012074:	f7ee fdb8 	bl	8000be8 <__aeabi_d2f>
 8012078:	f8ca 0008 	str.w	r0, [sl, #8]
 801207c:	f10a 0a0c 	add.w	sl, sl, #12
 8012080:	45b2      	cmp	sl, r6
 8012082:	d011      	beq.n	80120a8 <iNemoEngine_API_Update+0x31a8>
 8012084:	eddd 7a03 	vldr	s15, [sp, #12]
 8012088:	eef4 7acb 	vcmpe.f32	s15, s22
 801208c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012090:	d497      	bmi.n	8011fc2 <iNemoEngine_API_Update+0x30c2>
 8012092:	ee1f 0a90 	vmov	r0, s31
 8012096:	e7ac      	b.n	8011ff2 <iNemoEngine_API_Update+0x30f2>
 8012098:	ee1d 0a90 	vmov	r0, s27
 801209c:	f10a 0a0c 	add.w	sl, sl, #12
 80120a0:	f84a 0c04 	str.w	r0, [sl, #-4]
 80120a4:	45b2      	cmp	sl, r6
 80120a6:	d1ed      	bne.n	8012084 <iNemoEngine_API_Update+0x3184>
 80120a8:	9b06      	ldr	r3, [sp, #24]
 80120aa:	f893 9621 	ldrb.w	r9, [r3, #1569]	; 0x621
 80120ae:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 80120b2:	f1b9 0f00 	cmp.w	r9, #0
 80120b6:	f000 8114 	beq.w	80122e2 <iNemoEngine_API_Update+0x33e2>
 80120ba:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8012268 <iNemoEngine_API_Update+0x3368>
 80120be:	ee6a faa7 	vmul.f32	s31, s21, s15
 80120c2:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 80120c6:	ee2a fa27 	vmul.f32	s30, s20, s15
 80120ca:	ee69 daa7 	vmul.f32	s27, s19, s15
 80120ce:	ee7f 7acb 	vsub.f32	s15, s31, s22
 80120d2:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 80120d6:	ee17 0a90 	vmov	r0, s15
 80120da:	f7ee fa35 	bl	8000548 <__aeabi_f2d>
 80120de:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 80120e2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80120e6:	ee17 0a90 	vmov	r0, s15
 80120ea:	f7ee fa2d 	bl	8000548 <__aeabi_f2d>
 80120ee:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 80120f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80120f6:	ee17 0a90 	vmov	r0, s15
 80120fa:	f7ee fa25 	bl	8000548 <__aeabi_f2d>
 80120fe:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 8012102:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012106:	ee17 0a90 	vmov	r0, s15
 801210a:	f7ee fa1d 	bl	8000548 <__aeabi_f2d>
 801210e:	ee7d 7acb 	vsub.f32	s15, s27, s22
 8012112:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012116:	ee17 0a90 	vmov	r0, s15
 801211a:	f7ee fa15 	bl	8000548 <__aeabi_f2d>
 801211e:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 8012122:	4602      	mov	r2, r0
 8012124:	460b      	mov	r3, r1
 8012126:	ee17 0a90 	vmov	r0, s15
 801212a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801212e:	f7ee fa0b 	bl	8000548 <__aeabi_f2d>
 8012132:	eef0 7aef 	vabs.f32	s15, s31
 8012136:	9b06      	ldr	r3, [sp, #24]
 8012138:	edcd 7a03 	vstr	s15, [sp, #12]
 801213c:	eef0 7acf 	vabs.f32	s15, s30
 8012140:	edcd 7a04 	vstr	s15, [sp, #16]
 8012144:	eef0 7aed 	vabs.f32	s15, s27
 8012148:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 801214c:	edcd 7a05 	vstr	s15, [sp, #20]
 8012150:	230c      	movs	r3, #12
 8012152:	eef0 7a6c 	vmov.f32	s15, s25
 8012156:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 801215a:	eef0 ca48 	vmov.f32	s25, s16
 801215e:	ed9f ba46 	vldr	s22, [pc, #280]	; 8012278 <iNemoEngine_API_Update+0x3378>
 8012162:	eeb0 8a4d 	vmov.f32	s16, s26
 8012166:	fb13 6909 	smlabb	r9, r3, r9, r6
 801216a:	46b3      	mov	fp, r6
 801216c:	eeb0 da67 	vmov.f32	s26, s15
 8012170:	e060      	b.n	8012234 <iNemoEngine_API_Update+0x3334>
 8012172:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801226c <iNemoEngine_API_Update+0x336c>
 8012176:	eef4 aae7 	vcmpe.f32	s21, s15
 801217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801217e:	f280 8197 	bge.w	80124b0 <iNemoEngine_API_Update+0x35b0>
 8012182:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8012270 <iNemoEngine_API_Update+0x3370>
 8012186:	eef4 aae7 	vcmpe.f32	s21, s15
 801218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218e:	f300 81a3 	bgt.w	80124d8 <iNemoEngine_API_Update+0x35d8>
 8012192:	ed9d 0b08 	vldr	d0, [sp, #32]
 8012196:	f007 f84b 	bl	8019230 <ceil>
 801219a:	ec51 0b10 	vmov	r0, r1, d0
 801219e:	f7ee fd23 	bl	8000be8 <__aeabi_d2f>
 80121a2:	eddd 7a04 	vldr	s15, [sp, #16]
 80121a6:	f8cb 0000 	str.w	r0, [fp]
 80121aa:	eef4 7acb 	vcmpe.f32	s15, s22
 80121ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121b2:	f140 8171 	bpl.w	8012498 <iNemoEngine_API_Update+0x3598>
 80121b6:	eddf 7a2d 	vldr	s15, [pc, #180]	; 801226c <iNemoEngine_API_Update+0x336c>
 80121ba:	eeb4 aae7 	vcmpe.f32	s20, s15
 80121be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c2:	f280 816c 	bge.w	801249e <iNemoEngine_API_Update+0x359e>
 80121c6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8012270 <iNemoEngine_API_Update+0x3370>
 80121ca:	eeb4 aae7 	vcmpe.f32	s20, s15
 80121ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d2:	f300 81bd 	bgt.w	8012550 <iNemoEngine_API_Update+0x3650>
 80121d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 80121da:	f007 f829 	bl	8019230 <ceil>
 80121de:	ec51 0b10 	vmov	r0, r1, d0
 80121e2:	f7ee fd01 	bl	8000be8 <__aeabi_d2f>
 80121e6:	eddd 7a05 	vldr	s15, [sp, #20]
 80121ea:	f8cb 0004 	str.w	r0, [fp, #4]
 80121ee:	eef4 7acb 	vcmpe.f32	s15, s22
 80121f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f6:	d564      	bpl.n	80122c2 <iNemoEngine_API_Update+0x33c2>
 80121f8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801226c <iNemoEngine_API_Update+0x336c>
 80121fc:	eef4 9ae7 	vcmpe.f32	s19, s15
 8012200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012204:	f280 815d 	bge.w	80124c2 <iNemoEngine_API_Update+0x35c2>
 8012208:	eddf 7a19 	vldr	s15, [pc, #100]	; 8012270 <iNemoEngine_API_Update+0x3370>
 801220c:	eef4 9ae7 	vcmpe.f32	s19, s15
 8012210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012214:	f300 8162 	bgt.w	80124dc <iNemoEngine_API_Update+0x35dc>
 8012218:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 801221c:	f007 f808 	bl	8019230 <ceil>
 8012220:	ec51 0b10 	vmov	r0, r1, d0
 8012224:	f7ee fce0 	bl	8000be8 <__aeabi_d2f>
 8012228:	f8cb 0008 	str.w	r0, [fp, #8]
 801222c:	f10b 0b0c 	add.w	fp, fp, #12
 8012230:	45cb      	cmp	fp, r9
 8012232:	d04e      	beq.n	80122d2 <iNemoEngine_API_Update+0x33d2>
 8012234:	eddd 7a03 	vldr	s15, [sp, #12]
 8012238:	eef4 7acb 	vcmpe.f32	s15, s22
 801223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012240:	d497      	bmi.n	8012172 <iNemoEngine_API_Update+0x3272>
 8012242:	ee1f 0a90 	vmov	r0, s31
 8012246:	e7ac      	b.n	80121a2 <iNemoEngine_API_Update+0x32a2>
 8012248:	ee1f 0a10 	vmov	r0, s30
 801224c:	e6f3      	b.n	8012036 <iNemoEngine_API_Update+0x3136>
 801224e:	bf00      	nop
 8012250:	3a7001e0 	.word	0x3a7001e0
 8012254:	3a000100 	.word	0x3a000100
 8012258:	3a8c0118 	.word	0x3a8c0118
 801225c:	44888777 	.word	0x44888777
 8012260:	39f001e1 	.word	0x39f001e1
 8012264:	b9f001e1 	.word	0xb9f001e1
 8012268:	44fffe00 	.word	0x44fffe00
 801226c:	39800100 	.word	0x39800100
 8012270:	b9800100 	.word	0xb9800100
 8012274:	446a0ccd 	.word	0x446a0ccd
 8012278:	4b000000 	.word	0x4b000000
 801227c:	3cfaad3b 	.word	0x3cfaad3b
 8012280:	bcfaad3b 	.word	0xbcfaad3b
 8012284:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8012288:	f007 f852 	bl	8019330 <floor>
 801228c:	ec51 0b10 	vmov	r0, r1, d0
 8012290:	f7ee fcaa 	bl	8000be8 <__aeabi_d2f>
 8012294:	e6cf      	b.n	8012036 <iNemoEngine_API_Update+0x3136>
 8012296:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801229a:	f007 f849 	bl	8019330 <floor>
 801229e:	ec51 0b10 	vmov	r0, r1, d0
 80122a2:	f7ee fca1 	bl	8000be8 <__aeabi_d2f>
 80122a6:	e6a4      	b.n	8011ff2 <iNemoEngine_API_Update+0x30f2>
 80122a8:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 80122ac:	f007 f840 	bl	8019330 <floor>
 80122b0:	ec51 0b10 	vmov	r0, r1, d0
 80122b4:	f7ee fc98 	bl	8000be8 <__aeabi_d2f>
 80122b8:	e6de      	b.n	8012078 <iNemoEngine_API_Update+0x3178>
 80122ba:	4648      	mov	r0, r9
 80122bc:	e699      	b.n	8011ff2 <iNemoEngine_API_Update+0x30f2>
 80122be:	4648      	mov	r0, r9
 80122c0:	e6da      	b.n	8012078 <iNemoEngine_API_Update+0x3178>
 80122c2:	ee1d 0a90 	vmov	r0, s27
 80122c6:	f10b 0b0c 	add.w	fp, fp, #12
 80122ca:	f84b 0c04 	str.w	r0, [fp, #-4]
 80122ce:	45cb      	cmp	fp, r9
 80122d0:	d1b0      	bne.n	8012234 <iNemoEngine_API_Update+0x3334>
 80122d2:	eef0 7a4d 	vmov.f32	s15, s26
 80122d6:	eeb0 da48 	vmov.f32	s26, s16
 80122da:	eeb0 8a6c 	vmov.f32	s16, s25
 80122de:	eef0 ca67 	vmov.f32	s25, s15
 80122e2:	9b06      	ldr	r3, [sp, #24]
 80122e4:	f893 9791 	ldrb.w	r9, [r3, #1937]	; 0x791
 80122e8:	f1b9 0f00 	cmp.w	r9, #0
 80122ec:	f001 80a7 	beq.w	801343e <iNemoEngine_API_Update+0x453e>
 80122f0:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 8012274 <iNemoEngine_API_Update+0x3374>
 80122f4:	ee6e fa27 	vmul.f32	s31, s28, s15
 80122f8:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 80122fc:	ee2e faa7 	vmul.f32	s30, s29, s15
 8012300:	ee6b daa7 	vmul.f32	s27, s23, s15
 8012304:	ee7f 7acb 	vsub.f32	s15, s31, s22
 8012308:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 801230c:	ee17 0a90 	vmov	r0, s15
 8012310:	f7ee f91a 	bl	8000548 <__aeabi_f2d>
 8012314:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 8012318:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801231c:	ee17 0a90 	vmov	r0, s15
 8012320:	f7ee f912 	bl	8000548 <__aeabi_f2d>
 8012324:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 8012328:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801232c:	ee17 0a90 	vmov	r0, s15
 8012330:	f7ee f90a 	bl	8000548 <__aeabi_f2d>
 8012334:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 8012338:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801233c:	ee17 0a90 	vmov	r0, s15
 8012340:	f7ee f902 	bl	8000548 <__aeabi_f2d>
 8012344:	ee7d 7acb 	vsub.f32	s15, s27, s22
 8012348:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801234c:	ee17 0a90 	vmov	r0, s15
 8012350:	f7ee f8fa 	bl	8000548 <__aeabi_f2d>
 8012354:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 8012358:	4602      	mov	r2, r0
 801235a:	460b      	mov	r3, r1
 801235c:	ee17 0a90 	vmov	r0, s15
 8012360:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8012364:	f7ee f8f0 	bl	8000548 <__aeabi_f2d>
 8012368:	eef0 7aef 	vabs.f32	s15, s31
 801236c:	9b06      	ldr	r3, [sp, #24]
 801236e:	edcd 7a03 	vstr	s15, [sp, #12]
 8012372:	eef0 7acf 	vabs.f32	s15, s30
 8012376:	edcd 7a04 	vstr	s15, [sp, #16]
 801237a:	eef0 7aed 	vabs.f32	s15, s27
 801237e:	f503 62f3 	add.w	r2, r3, #1944	; 0x798
 8012382:	eeb0 7a48 	vmov.f32	s14, s16
 8012386:	230c      	movs	r3, #12
 8012388:	edcd 7a05 	vstr	s15, [sp, #20]
 801238c:	eef0 7a6c 	vmov.f32	s15, s25
 8012390:	eeb0 8a4d 	vmov.f32	s16, s26
 8012394:	eef0 ca4a 	vmov.f32	s25, s20
 8012398:	eeb0 da6a 	vmov.f32	s26, s21
 801239c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80123a0:	eef0 aa69 	vmov.f32	s21, s19
 80123a4:	ed1f ba4c 	vldr	s22, [pc, #-304]	; 8012278 <iNemoEngine_API_Update+0x3378>
 80123a8:	9215      	str	r2, [sp, #84]	; 0x54
 80123aa:	fb13 2909 	smlabb	r9, r3, r9, r2
 80123ae:	4693      	mov	fp, r2
 80123b0:	eeb0 aa67 	vmov.f32	s20, s15
 80123b4:	eef0 9a47 	vmov.f32	s19, s14
 80123b8:	e064      	b.n	8012484 <iNemoEngine_API_Update+0x3584>
 80123ba:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 80123be:	ed1f 7a51 	vldr	s14, [pc, #-324]	; 801227c <iNemoEngine_API_Update+0x337c>
 80123c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80123c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123ca:	f280 80af 	bge.w	801252c <iNemoEngine_API_Update+0x362c>
 80123ce:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8012280 <iNemoEngine_API_Update+0x3380>
 80123d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80123d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123da:	f300 80bb 	bgt.w	8012554 <iNemoEngine_API_Update+0x3654>
 80123de:	ed9d 0b08 	vldr	d0, [sp, #32]
 80123e2:	f006 ff25 	bl	8019230 <ceil>
 80123e6:	ec51 0b10 	vmov	r0, r1, d0
 80123ea:	f7ee fbfd 	bl	8000be8 <__aeabi_d2f>
 80123ee:	eddd 7a04 	vldr	s15, [sp, #16]
 80123f2:	f8cb 0000 	str.w	r0, [fp]
 80123f6:	eef4 7acb 	vcmpe.f32	s15, s22
 80123fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123fe:	f140 8089 	bpl.w	8012514 <iNemoEngine_API_Update+0x3614>
 8012402:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8012406:	ed1f 7a63 	vldr	s14, [pc, #-396]	; 801227c <iNemoEngine_API_Update+0x337c>
 801240a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012412:	f280 8082 	bge.w	801251a <iNemoEngine_API_Update+0x361a>
 8012416:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 8012280 <iNemoEngine_API_Update+0x3380>
 801241a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012422:	f300 809b 	bgt.w	801255c <iNemoEngine_API_Update+0x365c>
 8012426:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 801242a:	f006 ff01 	bl	8019230 <ceil>
 801242e:	ec51 0b10 	vmov	r0, r1, d0
 8012432:	f7ee fbd9 	bl	8000be8 <__aeabi_d2f>
 8012436:	eddd 7a05 	vldr	s15, [sp, #20]
 801243a:	f8cb 0004 	str.w	r0, [fp, #4]
 801243e:	eef4 7acb 	vcmpe.f32	s15, s22
 8012442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012446:	d54b      	bpl.n	80124e0 <iNemoEngine_API_Update+0x35e0>
 8012448:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 801244c:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 801227c <iNemoEngine_API_Update+0x337c>
 8012450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012458:	da71      	bge.n	801253e <iNemoEngine_API_Update+0x363e>
 801245a:	ed1f 7a77 	vldr	s14, [pc, #-476]	; 8012280 <iNemoEngine_API_Update+0x3380>
 801245e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012466:	dc77      	bgt.n	8012558 <iNemoEngine_API_Update+0x3658>
 8012468:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 801246c:	f006 fee0 	bl	8019230 <ceil>
 8012470:	ec51 0b10 	vmov	r0, r1, d0
 8012474:	f7ee fbb8 	bl	8000be8 <__aeabi_d2f>
 8012478:	f8cb 0008 	str.w	r0, [fp, #8]
 801247c:	f10b 0b0c 	add.w	fp, fp, #12
 8012480:	45cb      	cmp	fp, r9
 8012482:	d035      	beq.n	80124f0 <iNemoEngine_API_Update+0x35f0>
 8012484:	eddd 7a03 	vldr	s15, [sp, #12]
 8012488:	eef4 7acb 	vcmpe.f32	s15, s22
 801248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012490:	d493      	bmi.n	80123ba <iNemoEngine_API_Update+0x34ba>
 8012492:	ee1f 0a90 	vmov	r0, s31
 8012496:	e7aa      	b.n	80123ee <iNemoEngine_API_Update+0x34ee>
 8012498:	ee1f 0a10 	vmov	r0, s30
 801249c:	e6a3      	b.n	80121e6 <iNemoEngine_API_Update+0x32e6>
 801249e:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80124a2:	f006 ff45 	bl	8019330 <floor>
 80124a6:	ec51 0b10 	vmov	r0, r1, d0
 80124aa:	f7ee fb9d 	bl	8000be8 <__aeabi_d2f>
 80124ae:	e69a      	b.n	80121e6 <iNemoEngine_API_Update+0x32e6>
 80124b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80124b4:	f006 ff3c 	bl	8019330 <floor>
 80124b8:	ec51 0b10 	vmov	r0, r1, d0
 80124bc:	f7ee fb94 	bl	8000be8 <__aeabi_d2f>
 80124c0:	e66f      	b.n	80121a2 <iNemoEngine_API_Update+0x32a2>
 80124c2:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 80124c6:	f006 ff33 	bl	8019330 <floor>
 80124ca:	ec51 0b10 	vmov	r0, r1, d0
 80124ce:	f7ee fb8b 	bl	8000be8 <__aeabi_d2f>
 80124d2:	e6a9      	b.n	8012228 <iNemoEngine_API_Update+0x3328>
 80124d4:	4648      	mov	r0, r9
 80124d6:	e5ae      	b.n	8012036 <iNemoEngine_API_Update+0x3136>
 80124d8:	4650      	mov	r0, sl
 80124da:	e662      	b.n	80121a2 <iNemoEngine_API_Update+0x32a2>
 80124dc:	4650      	mov	r0, sl
 80124de:	e6a3      	b.n	8012228 <iNemoEngine_API_Update+0x3328>
 80124e0:	ee1d 0a90 	vmov	r0, s27
 80124e4:	f10b 0b0c 	add.w	fp, fp, #12
 80124e8:	f84b 0c04 	str.w	r0, [fp, #-4]
 80124ec:	45cb      	cmp	fp, r9
 80124ee:	d1c9      	bne.n	8012484 <iNemoEngine_API_Update+0x3584>
 80124f0:	eeb0 7a69 	vmov.f32	s14, s19
 80124f4:	eef0 7a4a 	vmov.f32	s15, s20
 80124f8:	eef0 9a6a 	vmov.f32	s19, s21
 80124fc:	eeb0 aa6c 	vmov.f32	s20, s25
 8012500:	eef0 aa4d 	vmov.f32	s21, s26
 8012504:	eef0 ca67 	vmov.f32	s25, s15
 8012508:	eeb0 da48 	vmov.f32	s26, s16
 801250c:	eeb0 8a47 	vmov.f32	s16, s14
 8012510:	f7fd b820 	b.w	800f554 <iNemoEngine_API_Update+0x654>
 8012514:	ee1f 0a10 	vmov	r0, s30
 8012518:	e78d      	b.n	8012436 <iNemoEngine_API_Update+0x3536>
 801251a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 801251e:	f006 ff07 	bl	8019330 <floor>
 8012522:	ec51 0b10 	vmov	r0, r1, d0
 8012526:	f7ee fb5f 	bl	8000be8 <__aeabi_d2f>
 801252a:	e784      	b.n	8012436 <iNemoEngine_API_Update+0x3536>
 801252c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012530:	f006 fefe 	bl	8019330 <floor>
 8012534:	ec51 0b10 	vmov	r0, r1, d0
 8012538:	f7ee fb56 	bl	8000be8 <__aeabi_d2f>
 801253c:	e757      	b.n	80123ee <iNemoEngine_API_Update+0x34ee>
 801253e:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8012542:	f006 fef5 	bl	8019330 <floor>
 8012546:	ec51 0b10 	vmov	r0, r1, d0
 801254a:	f7ee fb4d 	bl	8000be8 <__aeabi_d2f>
 801254e:	e793      	b.n	8012478 <iNemoEngine_API_Update+0x3578>
 8012550:	4650      	mov	r0, sl
 8012552:	e648      	b.n	80121e6 <iNemoEngine_API_Update+0x32e6>
 8012554:	4650      	mov	r0, sl
 8012556:	e74a      	b.n	80123ee <iNemoEngine_API_Update+0x34ee>
 8012558:	4650      	mov	r0, sl
 801255a:	e78d      	b.n	8012478 <iNemoEngine_API_Update+0x3578>
 801255c:	4650      	mov	r0, sl
 801255e:	e76a      	b.n	8012436 <iNemoEngine_API_Update+0x3536>
 8012560:	4616      	mov	r6, r2
 8012562:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8012566:	4be1      	ldr	r3, [pc, #900]	; (80128ec <iNemoEngine_API_Update+0x39ec>)
 8012568:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 801256c:	2100      	movs	r1, #0
 801256e:	f8c2 51cc 	str.w	r5, [r2, #460]	; 0x1cc
 8012572:	f8c2 51d0 	str.w	r5, [r2, #464]	; 0x1d0
 8012576:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 801257a:	f506 70ea 	add.w	r0, r6, #468	; 0x1d4
 801257e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012582:	f003 f909 	bl	8015798 <memset>
 8012586:	ed96 6a02 	vldr	s12, [r6, #8]
 801258a:	eddf 7ad9 	vldr	s15, [pc, #868]	; 80128f0 <iNemoEngine_API_Update+0x39f0>
 801258e:	eddf 5ad9 	vldr	s11, [pc, #868]	; 80128f4 <iNemoEngine_API_Update+0x39f4>
 8012592:	ed9f 5ad9 	vldr	s10, [pc, #868]	; 80128f8 <iNemoEngine_API_Update+0x39f8>
 8012596:	f8c6 50c4 	str.w	r5, [r6, #196]	; 0xc4
 801259a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801259e:	2300      	movs	r3, #0
 80125a0:	edc6 7a34 	vstr	s15, [r6, #208]	; 0xd0
 80125a4:	eddf 7ad5 	vldr	s15, [pc, #852]	; 80128fc <iNemoEngine_API_Update+0x39fc>
 80125a8:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 80125ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 80125b0:	f8c6 3128 	str.w	r3, [r6, #296]	; 0x128
 80125b4:	edc6 7a4e 	vstr	s15, [r6, #312]	; 0x138
 80125b8:	eddf 7ad1 	vldr	s15, [pc, #836]	; 8012900 <iNemoEngine_API_Update+0x3a00>
 80125bc:	4bd1      	ldr	r3, [pc, #836]	; (8012904 <iNemoEngine_API_Update+0x3a04>)
 80125be:	f8c6 30dc 	str.w	r3, [r6, #220]	; 0xdc
 80125c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80125c6:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
 80125ca:	edc6 7a50 	vstr	s15, [r6, #320]	; 0x140
 80125ce:	eddf 7ace 	vldr	s15, [pc, #824]	; 8012908 <iNemoEngine_API_Update+0x3a08>
 80125d2:	4bce      	ldr	r3, [pc, #824]	; (801290c <iNemoEngine_API_Update+0x3a0c>)
 80125d4:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 80125d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80125dc:	4bcc      	ldr	r3, [pc, #816]	; (8012910 <iNemoEngine_API_Update+0x3a10>)
 80125de:	edc6 7a38 	vstr	s15, [r6, #224]	; 0xe0
 80125e2:	eddf 7acc 	vldr	s15, [pc, #816]	; 8012914 <iNemoEngine_API_Update+0x3a14>
 80125e6:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
 80125ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80125ee:	4bca      	ldr	r3, [pc, #808]	; (8012918 <iNemoEngine_API_Update+0x3a18>)
 80125f0:	edc6 7a52 	vstr	s15, [r6, #328]	; 0x148
 80125f4:	eddf 7ac9 	vldr	s15, [pc, #804]	; 801291c <iNemoEngine_API_Update+0x3a1c>
 80125f8:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
 80125fc:	4bc8      	ldr	r3, [pc, #800]	; (8012920 <iNemoEngine_API_Update+0x3a20>)
 80125fe:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
 8012602:	4631      	mov	r1, r6
 8012604:	ee66 5a25 	vmul.f32	s11, s12, s11
 8012608:	ee26 5a05 	vmul.f32	s10, s12, s10
 801260c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012610:	4bc4      	ldr	r3, [pc, #784]	; (8012924 <iNemoEngine_API_Update+0x3a24>)
 8012612:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 8012616:	4bc4      	ldr	r3, [pc, #784]	; (8012928 <iNemoEngine_API_Update+0x3a28>)
 8012618:	f8c6 512c 	str.w	r5, [r6, #300]	; 0x12c
 801261c:	f8c6 50cc 	str.w	r5, [r6, #204]	; 0xcc
 8012620:	f8c6 5134 	str.w	r5, [r6, #308]	; 0x134
 8012624:	edc6 7a3a 	vstr	s15, [r6, #232]	; 0xe8
 8012628:	edc6 5a32 	vstr	s11, [r6, #200]	; 0xc8
 801262c:	edc6 5a4c 	vstr	s11, [r6, #304]	; 0x130
 8012630:	ed86 5a36 	vstr	s10, [r6, #216]	; 0xd8
 8012634:	f8c1 31d4 	str.w	r3, [r1, #468]	; 0x1d4
 8012638:	f8c1 31fc 	str.w	r3, [r1, #508]	; 0x1fc
 801263c:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
 8012640:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 8012644:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 8012648:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 801264c:	f8c1 32c4 	str.w	r3, [r1, #708]	; 0x2c4
 8012650:	f8c1 32ec 	str.w	r3, [r1, #748]	; 0x2ec
 8012654:	f8c1 3314 	str.w	r3, [r1, #788]	; 0x314
 8012658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801265c:	ed81 5a54 	vstr	s10, [r1, #336]	; 0x150
 8012660:	eddf 3ab2 	vldr	s7, [pc, #712]	; 801292c <iNemoEngine_API_Update+0x3a2c>
 8012664:	ed9f 4ab2 	vldr	s8, [pc, #712]	; 8012930 <iNemoEngine_API_Update+0x3a30>
 8012668:	f8c1 317c 	str.w	r3, [r1, #380]	; 0x17c
 801266c:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
 8012670:	f8c1 3124 	str.w	r3, [r1, #292]	; 0x124
 8012674:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8012934 <iNemoEngine_API_Update+0x3a34>
 8012678:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8012938 <iNemoEngine_API_Update+0x3a38>
 801267c:	eddf 7aaf 	vldr	s15, [pc, #700]	; 801293c <iNemoEngine_API_Update+0x3a3c>
 8012680:	eddf 4aaf 	vldr	s9, [pc, #700]	; 8012940 <iNemoEngine_API_Update+0x3a40>
 8012684:	4aaf      	ldr	r2, [pc, #700]	; (8012944 <iNemoEngine_API_Update+0x3a44>)
 8012686:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8012964 <iNemoEngine_API_Update+0x3a64>
 801268a:	4faf      	ldr	r7, [pc, #700]	; (8012948 <iNemoEngine_API_Update+0x3a48>)
 801268c:	4eaf      	ldr	r6, [pc, #700]	; (801294c <iNemoEngine_API_Update+0x3a4c>)
 801268e:	4db0      	ldr	r5, [pc, #704]	; (8012950 <iNemoEngine_API_Update+0x3a50>)
 8012690:	48b0      	ldr	r0, [pc, #704]	; (8012954 <iNemoEngine_API_Update+0x3a54>)
 8012692:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 8012968 <iNemoEngine_API_Update+0x3a68>
 8012696:	edc1 3a3d 	vstr	s7, [r1, #244]	; 0xf4
 801269a:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 801269e:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 80126a2:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
 80126a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80126aa:	ee66 6a26 	vmul.f32	s13, s12, s13
 80126ae:	ee26 7a07 	vmul.f32	s14, s12, s14
 80126b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80126b6:	ee66 2a23 	vmul.f32	s5, s12, s7
 80126ba:	ee26 3a02 	vmul.f32	s6, s12, s4
 80126be:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
 80126c2:	ee66 4a24 	vmul.f32	s9, s12, s9
 80126c6:	4ba4      	ldr	r3, [pc, #656]	; (8012958 <iNemoEngine_API_Update+0x3a58>)
 80126c8:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184
 80126cc:	ee66 1a04 	vmul.f32	s3, s12, s8
 80126d0:	4ba2      	ldr	r3, [pc, #648]	; (801295c <iNemoEngine_API_Update+0x3a5c>)
 80126d2:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
 80126d6:	f8c1 c15c 	str.w	ip, [r1, #348]	; 0x15c
 80126da:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
 80126de:	f8c1 6164 	str.w	r6, [r1, #356]	; 0x164
 80126e2:	f8c1 516c 	str.w	r5, [r1, #364]	; 0x16c
 80126e6:	f8c1 0174 	str.w	r0, [r1, #372]	; 0x174
 80126ea:	edc1 1a46 	vstr	s3, [r1, #280]	; 0x118
 80126ee:	edc1 4a60 	vstr	s9, [r1, #384]	; 0x180
 80126f2:	f8c1 e19c 	str.w	lr, [r1, #412]	; 0x19c
 80126f6:	ed81 2a66 	vstr	s4, [r1, #408]	; 0x198
 80126fa:	ed81 4a65 	vstr	s8, [r1, #404]	; 0x194
 80126fe:	f8c1 2154 	str.w	r2, [r1, #340]	; 0x154
 8012702:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
 8012706:	edc1 6a3c 	vstr	s13, [r1, #240]	; 0xf0
 801270a:	edc1 6a56 	vstr	s13, [r1, #344]	; 0x158
 801270e:	ed81 7a3e 	vstr	s14, [r1, #248]	; 0xf8
 8012712:	ed81 7a58 	vstr	s14, [r1, #352]	; 0x160
 8012716:	edc1 7a40 	vstr	s15, [r1, #256]	; 0x100
 801271a:	edc1 7a5a 	vstr	s15, [r1, #360]	; 0x168
 801271e:	edc1 2a42 	vstr	s5, [r1, #264]	; 0x108
 8012722:	edc1 2a5c 	vstr	s5, [r1, #368]	; 0x170
 8012726:	ed81 3a44 	vstr	s6, [r1, #272]	; 0x110
 801272a:	ed81 3a5e 	vstr	s6, [r1, #376]	; 0x178
 801272e:	ed81 6a48 	vstr	s12, [r1, #288]	; 0x120
 8012732:	ed81 6a62 	vstr	s12, [r1, #392]	; 0x188
 8012736:	edc1 5a64 	vstr	s11, [r1, #400]	; 0x190
 801273a:	784b      	ldrb	r3, [r1, #1]
 801273c:	b18b      	cbz	r3, 8012762 <iNemoEngine_API_Update+0x3862>
 801273e:	f501 6214 	add.w	r2, r1, #2368	; 0x940
 8012742:	9225      	str	r2, [sp, #148]	; 0x94
 8012744:	f601 1348 	addw	r3, r1, #2376	; 0x948
 8012748:	f601 1244 	addw	r2, r1, #2372	; 0x944
 801274c:	9226      	str	r2, [sp, #152]	; 0x98
 801274e:	9327      	str	r3, [sp, #156]	; 0x9c
 8012750:	9a06      	ldr	r2, [sp, #24]
 8012752:	2300      	movs	r3, #0
 8012754:	7053      	strb	r3, [r2, #1]
 8012756:	f7fc bee8 	b.w	800f52a <iNemoEngine_API_Update+0x62a>
 801275a:	ed93 ca4b 	vldr	s24, [r3, #300]	; 0x12c
 801275e:	f7fd bfc0 	b.w	80106e2 <iNemoEngine_API_Update+0x17e2>
 8012762:	9a06      	ldr	r2, [sp, #24]
 8012764:	f502 6314 	add.w	r3, r2, #2368	; 0x940
 8012768:	f602 1144 	addw	r1, r2, #2372	; 0x944
 801276c:	f602 1048 	addw	r0, r2, #2376	; 0x948
 8012770:	9325      	str	r3, [sp, #148]	; 0x94
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
 8012778:	680b      	ldr	r3, [r1, #0]
 801277a:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
 801277e:	6803      	ldr	r3, [r0, #0]
 8012780:	9126      	str	r1, [sp, #152]	; 0x98
 8012782:	9027      	str	r0, [sp, #156]	; 0x9c
 8012784:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
 8012788:	e7e2      	b.n	8012750 <iNemoEngine_API_Update+0x3850>
 801278a:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 801278e:	ed97 0a00 	vldr	s0, [r7]
 8012792:	f505 6097 	add.w	r0, r5, #1208	; 0x4b8
 8012796:	f7fa ff43 	bl	800d620 <dataDerivative5>
 801279a:	f205 6824 	addw	r8, r5, #1572	; 0x624
 801279e:	eef0 3a40 	vmov.f32	s7, s0
 80127a2:	f505 60c5 	add.w	r0, r5, #1576	; 0x628
 80127a6:	ed98 0a00 	vldr	s0, [r8]
 80127aa:	f7fa ff39 	bl	800d620 <dataDerivative5>
 80127ae:	f205 7394 	addw	r3, r5, #1940	; 0x794
 80127b2:	eeb0 3a40 	vmov.f32	s6, s0
 80127b6:	f505 60f3 	add.w	r0, r5, #1944	; 0x798
 80127ba:	ed93 0a00 	vldr	s0, [r3]
 80127be:	f7fa ff2f 	bl	800d620 <dataDerivative5>
 80127c2:	f9b5 3976 	ldrsh.w	r3, [r5, #2422]	; 0x976
 80127c6:	ee07 3a90 	vmov	s15, r3
 80127ca:	3301      	adds	r3, #1
 80127cc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80127d0:	ee07 3a90 	vmov	s15, r3
 80127d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127dc:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80127e0:	f605 106c 	addw	r0, r5, #2412	; 0x96c
 80127e4:	f605 1168 	addw	r1, r5, #2408	; 0x968
 80127e8:	f505 6217 	add.w	r2, r5, #2416	; 0x970
 80127ec:	b21b      	sxth	r3, r3
 80127ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80127f2:	ed90 7a00 	vldr	s14, [r0]
 80127f6:	ed91 5a00 	vldr	s10, [r1]
 80127fa:	eef0 7a63 	vmov.f32	s15, s7
 80127fe:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012802:	eeb0 7a43 	vmov.f32	s14, s6
 8012806:	eea5 7a85 	vfma.f32	s14, s11, s10
 801280a:	ed92 5a00 	vldr	s10, [r2]
 801280e:	eef0 6a40 	vmov.f32	s13, s0
 8012812:	eee5 6a85 	vfma.f32	s13, s11, s10
 8012816:	ee67 7a86 	vmul.f32	s15, s15, s12
 801281a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801281e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012822:	edc0 7a00 	vstr	s15, [r0]
 8012826:	ed81 7a00 	vstr	s14, [r1]
 801282a:	edc2 6a00 	vstr	s13, [r2]
 801282e:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 8012832:	f47c ab8d 	bne.w	800ef50 <iNemoEngine_API_Update+0x50>
 8012836:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801283a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801283e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012842:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012846:	2300      	movs	r3, #0
 8012848:	ed85 7a07 	vstr	s14, [r5, #28]
 801284c:	edc5 6a08 	vstr	s13, [r5, #32]
 8012850:	edc5 7a06 	vstr	s15, [r5, #24]
 8012854:	6003      	str	r3, [r0, #0]
 8012856:	600b      	str	r3, [r1, #0]
 8012858:	6013      	str	r3, [r2, #0]
 801285a:	2300      	movs	r3, #0
 801285c:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 8012860:	f885 3978 	strb.w	r3, [r5, #2424]	; 0x978
 8012864:	f7fc bb74 	b.w	800ef50 <iNemoEngine_API_Update+0x50>
 8012868:	9906      	ldr	r1, [sp, #24]
 801286a:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 801286e:	9295      	str	r2, [sp, #596]	; 0x254
 8012870:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 8012874:	9296      	str	r2, [sp, #600]	; 0x258
 8012876:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 801287a:	9297      	str	r2, [sp, #604]	; 0x25c
 801287c:	2200      	movs	r2, #0
 801287e:	464b      	mov	r3, r9
 8012880:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012884:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 8012888:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 801288c:	f7fe bc8f 	b.w	80111ae <iNemoEngine_API_Update+0x22ae>
 8012890:	ed92 fa49 	vldr	s30, [r2, #292]	; 0x124
 8012894:	4613      	mov	r3, r2
 8012896:	f7fd bdd2 	b.w	801043e <iNemoEngine_API_Update+0x153e>
 801289a:	ed93 ca63 	vldr	s24, [r3, #396]	; 0x18c
 801289e:	f7fd bf20 	b.w	80106e2 <iNemoEngine_API_Update+0x17e2>
 80128a2:	eddf 8a2f 	vldr	s17, [pc, #188]	; 8012960 <iNemoEngine_API_Update+0x3a60>
 80128a6:	f7fd b87e 	b.w	800f9a6 <iNemoEngine_API_Update+0xaa6>
 80128aa:	ed9f ca2d 	vldr	s24, [pc, #180]	; 8012960 <iNemoEngine_API_Update+0x3a60>
 80128ae:	f7fd b90e 	b.w	800face <iNemoEngine_API_Update+0xbce>
 80128b2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8012960 <iNemoEngine_API_Update+0x3a60>
 80128b6:	f7fc bf8c 	b.w	800f7d2 <iNemoEngine_API_Update+0x8d2>
 80128ba:	eddf 8a29 	vldr	s17, [pc, #164]	; 8012960 <iNemoEngine_API_Update+0x3a60>
 80128be:	f7fc bf5d 	b.w	800f77c <iNemoEngine_API_Update+0x87c>
 80128c2:	ed9f 8a27 	vldr	s16, [pc, #156]	; 8012960 <iNemoEngine_API_Update+0x3a60>
 80128c6:	f7fd b92d 	b.w	800fb24 <iNemoEngine_API_Update+0xc24>
 80128ca:	ed9f ca25 	vldr	s24, [pc, #148]	; 8012960 <iNemoEngine_API_Update+0x3a60>
 80128ce:	f7fd b83f 	b.w	800f950 <iNemoEngine_API_Update+0xa50>
 80128d2:	ed9f ca23 	vldr	s24, [pc, #140]	; 8012960 <iNemoEngine_API_Update+0x3a60>
 80128d6:	f7fc bfa7 	b.w	800f828 <iNemoEngine_API_Update+0x928>
 80128da:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8012960 <iNemoEngine_API_Update+0x3a60>
 80128de:	f7fd b80c 	b.w	800f8fa <iNemoEngine_API_Update+0x9fa>
 80128e2:	eddf 8a1f 	vldr	s17, [pc, #124]	; 8012960 <iNemoEngine_API_Update+0x3a60>
 80128e6:	f7fd b8c7 	b.w	800fa78 <iNemoEngine_API_Update+0xb78>
 80128ea:	bf00      	nop
 80128ec:	bf666666 	.word	0xbf666666
 80128f0:	3d072b02 	.word	0x3d072b02
 80128f4:	3ca3d70a 	.word	0x3ca3d70a
 80128f8:	3d4ccccd 	.word	0x3d4ccccd
 80128fc:	3cb43958 	.word	0x3cb43958
 8012900:	3cf5c28f 	.word	0x3cf5c28f
 8012904:	3eb33333 	.word	0x3eb33333
 8012908:	3d75c28f 	.word	0x3d75c28f
 801290c:	3ee66666 	.word	0x3ee66666
 8012910:	3f866666 	.word	0x3f866666
 8012914:	3d23d70a 	.word	0x3d23d70a
 8012918:	3f8ccccd 	.word	0x3f8ccccd
 801291c:	3d8f5c29 	.word	0x3d8f5c29
 8012920:	3f933333 	.word	0x3f933333
 8012924:	3ebd70a4 	.word	0x3ebd70a4
 8012928:	40a00000 	.word	0x40a00000
 801292c:	3ecccccd 	.word	0x3ecccccd
 8012930:	3f4ccccd 	.word	0x3f4ccccd
 8012934:	3dcccccd 	.word	0x3dcccccd
 8012938:	3e4ccccd 	.word	0x3e4ccccd
 801293c:	3e99999a 	.word	0x3e99999a
 8012940:	3f666666 	.word	0x3f666666
 8012944:	3f99999a 	.word	0x3f99999a
 8012948:	3f19999a 	.word	0x3f19999a
 801294c:	3fb9999a 	.word	0x3fb9999a
 8012950:	3fcccccd 	.word	0x3fcccccd
 8012954:	3fe66666 	.word	0x3fe66666
 8012958:	40200000 	.word	0x40200000
 801295c:	40400000 	.word	0x40400000
 8012960:	80000000 	.word	0x80000000
 8012964:	3fa66666 	.word	0x3fa66666
 8012968:	3f333333 	.word	0x3f333333
 801296c:	3e4cccce 	.word	0x3e4cccce
 8012970:	3eaaaaab 	.word	0x3eaaaaab
 8012974:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 8012978:	2a00      	cmp	r2, #0
 801297a:	f040 85bc 	bne.w	80134f6 <iNemoEngine_API_Update+0x45f6>
 801297e:	9906      	ldr	r1, [sp, #24]
 8012980:	ed5f 8a06 	vldr	s17, [pc, #-24]	; 801296c <iNemoEngine_API_Update+0x3a6c>
 8012984:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 8012988:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 8012970 <iNemoEngine_API_Update+0x3a70>
 801298c:	3301      	adds	r3, #1
 801298e:	b29b      	uxth	r3, r3
 8012990:	2b31      	cmp	r3, #49	; 0x31
 8012992:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 8012996:	bf98      	it	ls
 8012998:	eef0 8a67 	vmovls.f32	s17, s15
 801299c:	460b      	mov	r3, r1
 801299e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80129a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80129a6:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 80129aa:	f000 8599 	beq.w	80134e0 <iNemoEngine_API_Update+0x45e0>
 80129ae:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 80129b2:	f47f a83a 	bne.w	8011a2a <iNemoEngine_API_Update+0x2b2a>
 80129b6:	9a06      	ldr	r2, [sp, #24]
 80129b8:	2301      	movs	r3, #1
 80129ba:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
 80129be:	9a06      	ldr	r2, [sp, #24]
 80129c0:	edcd 6a03 	vstr	s13, [sp, #12]
 80129c4:	f502 63c3 	add.w	r3, r2, #1560	; 0x618
 80129c8:	ed93 5a00 	vldr	s10, [r3]
 80129cc:	f502 63f1 	add.w	r3, r2, #1928	; 0x788
 80129d0:	ed93 7a00 	vldr	s14, [r3]
 80129d4:	f202 6314 	addw	r3, r2, #1556	; 0x614
 80129d8:	edd3 4a00 	vldr	s9, [r3]
 80129dc:	ee25 4a05 	vmul.f32	s8, s10, s10
 80129e0:	f202 7384 	addw	r3, r2, #1924	; 0x784
 80129e4:	eea4 4aa4 	vfma.f32	s8, s9, s9
 80129e8:	a93d      	add	r1, sp, #244	; 0xf4
 80129ea:	a843      	add	r0, sp, #268	; 0x10c
 80129ec:	ed93 6a00 	vldr	s12, [r3]
 80129f0:	f202 631c 	addw	r3, r2, #1564	; 0x61c
 80129f4:	edd3 7a00 	vldr	s15, [r3]
 80129f8:	eea7 4aa7 	vfma.f32	s8, s15, s15
 80129fc:	f202 738c 	addw	r3, r2, #1932	; 0x78c
 8012a00:	465e      	mov	r6, fp
 8012a02:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8012a06:	eeb1 3ac4 	vsqrt.f32	s6, s8
 8012a0a:	465a      	mov	r2, fp
 8012a0c:	4655      	mov	r5, sl
 8012a0e:	4657      	mov	r7, sl
 8012a10:	acae      	add	r4, sp, #696	; 0x2b8
 8012a12:	ee67 5a07 	vmul.f32	s11, s14, s14
 8012a16:	ee83 4a83 	vdiv.f32	s8, s7, s6
 8012a1a:	eee6 5a06 	vfma.f32	s11, s12, s12
 8012a1e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012a22:	ee25 5a04 	vmul.f32	s10, s10, s8
 8012a26:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8012a2a:	edd3 7a00 	vldr	s15, [r3]
 8012a2e:	ed8d 5a3e 	vstr	s10, [sp, #248]	; 0xf8
 8012a32:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8012a36:	ee64 4a84 	vmul.f32	s9, s9, s8
 8012a3a:	eeb1 5ae5 	vsqrt.f32	s10, s11
 8012a3e:	edcd 4a3d 	vstr	s9, [sp, #244]	; 0xf4
 8012a42:	eec3 5a85 	vdiv.f32	s11, s7, s10
 8012a46:	ee27 7a25 	vmul.f32	s14, s14, s11
 8012a4a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012a4e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8012a52:	ed8d 7a44 	vstr	s14, [sp, #272]	; 0x110
 8012a56:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
 8012a5a:	ed8d 6a43 	vstr	s12, [sp, #268]	; 0x10c
 8012a5e:	f7fa fec5 	bl	800d7ec <getRotationMatrix>
 8012a62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012a66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012a6a:	6836      	ldr	r6, [r6, #0]
 8012a6c:	602e      	str	r6, [r5, #0]
 8012a6e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a72:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a76:	edda 7a00 	vldr	s15, [sl]
 8012a7a:	ed9a 7a01 	vldr	s14, [sl, #4]
 8012a7e:	eddd 6a03 	vldr	s13, [sp, #12]
 8012a82:	6026      	str	r6, [r4, #0]
 8012a84:	eef0 7ae7 	vabs.f32	s15, s15
 8012a88:	eeb0 7ac7 	vabs.f32	s14, s14
 8012a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a94:	f140 8407 	bpl.w	80132a6 <iNemoEngine_API_Update+0x43a6>
 8012a98:	2304      	movs	r3, #4
 8012a9a:	2000      	movs	r0, #0
 8012a9c:	930c      	str	r3, [sp, #48]	; 0x30
 8012a9e:	469e      	mov	lr, r3
 8012aa0:	eef0 7a47 	vmov.f32	s15, s14
 8012aa4:	2103      	movs	r1, #3
 8012aa6:	2707      	movs	r7, #7
 8012aa8:	f04f 0c06 	mov.w	ip, #6
 8012aac:	4603      	mov	r3, r0
 8012aae:	2601      	movs	r6, #1
 8012ab0:	ed9a 7a02 	vldr	s14, [sl, #8]
 8012ab4:	eeb0 7ac7 	vabs.f32	s14, s14
 8012ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac0:	f340 8453 	ble.w	801336a <iNemoEngine_API_Update+0x446a>
 8012ac4:	2306      	movs	r3, #6
 8012ac6:	2708      	movs	r7, #8
 8012ac8:	2104      	movs	r1, #4
 8012aca:	9303      	str	r3, [sp, #12]
 8012acc:	f04f 0c07 	mov.w	ip, #7
 8012ad0:	f04f 0e05 	mov.w	lr, #5
 8012ad4:	970c      	str	r7, [sp, #48]	; 0x30
 8012ad6:	4608      	mov	r0, r1
 8012ad8:	2200      	movs	r2, #0
 8012ada:	2301      	movs	r3, #1
 8012adc:	2602      	movs	r6, #2
 8012ade:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012ae0:	4450      	add	r0, sl
 8012ae2:	4454      	add	r4, sl
 8012ae4:	ed90 6a00 	vldr	s12, [r0]
 8012ae8:	ed94 7a00 	vldr	s14, [r4]
 8012aec:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8012af0:	a8ae      	add	r0, sp, #696	; 0x2b8
 8012af2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8012af6:	acae      	add	r4, sp, #696	; 0x2b8
 8012af8:	adae      	add	r5, sp, #696	; 0x2b8
 8012afa:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8012afe:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8012b02:	edc0 7a00 	vstr	s15, [r0]
 8012b06:	ed94 7a00 	vldr	s14, [r4]
 8012b0a:	edd5 7a00 	vldr	s15, [r5]
 8012b0e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8012b12:	ed84 6a00 	vstr	s12, [r4]
 8012b16:	edd0 5a00 	vldr	s11, [r0]
 8012b1a:	a8ae      	add	r0, sp, #696	; 0x2b8
 8012b1c:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8012b20:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 8012b24:	ed90 7a00 	vldr	s14, [r0]
 8012b28:	edd5 7a00 	vldr	s15, [r5]
 8012b2c:	eee5 7ac7 	vfms.f32	s15, s11, s14
 8012b30:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8012b34:	9404      	str	r4, [sp, #16]
 8012b36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8012b38:	edc5 7a00 	vstr	s15, [r5]
 8012b3c:	ed90 7a00 	vldr	s14, [r0]
 8012b40:	a8ae      	add	r0, sp, #696	; 0x2b8
 8012b42:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8012b46:	edd0 7a00 	vldr	s15, [r0]
 8012b4a:	eee6 7a47 	vfms.f32	s15, s12, s14
 8012b4e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8012b52:	00bc      	lsls	r4, r7, #2
 8012b54:	9405      	str	r4, [sp, #20]
 8012b56:	edc0 7a00 	vstr	s15, [r0]
 8012b5a:	acae      	add	r4, sp, #696	; 0x2b8
 8012b5c:	a8ae      	add	r0, sp, #696	; 0x2b8
 8012b5e:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8012b62:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8012b66:	ed90 5a00 	vldr	s10, [r0]
 8012b6a:	ed94 7a00 	vldr	s14, [r4]
 8012b6e:	eea5 7ac5 	vfms.f32	s14, s11, s10
 8012b72:	0097      	lsls	r7, r2, #2
 8012b74:	eef0 7ae7 	vabs.f32	s15, s15
 8012b78:	ed84 7a00 	vstr	s14, [r4]
 8012b7c:	9c03      	ldr	r4, [sp, #12]
 8012b7e:	edd0 5a00 	vldr	s11, [r0]
 8012b82:	a8ae      	add	r0, sp, #696	; 0x2b8
 8012b84:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8012b88:	ed90 7a00 	vldr	s14, [r0]
 8012b8c:	eea6 7a65 	vfms.f32	s14, s12, s11
 8012b90:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8012b94:	008c      	lsls	r4, r1, #2
 8012b96:	ed80 7a00 	vstr	s14, [r0]
 8012b9a:	ed95 7a00 	vldr	s14, [r5]
 8012b9e:	eeb0 7ac7 	vabs.f32	s14, s14
 8012ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012ba6:	00b0      	lsls	r0, r6, #2
 8012ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bac:	9003      	str	r0, [sp, #12]
 8012bae:	ea4f 0583 	mov.w	r5, r3, lsl #2
 8012bb2:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8012bb6:	dd0a      	ble.n	8012bce <iNemoEngine_API_Update+0x3cce>
 8012bb8:	4618      	mov	r0, r3
 8012bba:	4613      	mov	r3, r2
 8012bbc:	4602      	mov	r2, r0
 8012bbe:	4674      	mov	r4, lr
 8012bc0:	4650      	mov	r0, sl
 8012bc2:	463d      	mov	r5, r7
 8012bc4:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8012bc8:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8012bcc:	0097      	lsls	r7, r2, #2
 8012bce:	a9ae      	add	r1, sp, #696	; 0x2b8
 8012bd0:	448e      	add	lr, r1
 8012bd2:	440c      	add	r4, r1
 8012bd4:	ed9e 7a00 	vldr	s14, [lr]
 8012bd8:	edd4 7a00 	vldr	s15, [r4]
 8012bdc:	edcd 6a03 	vstr	s13, [sp, #12]
 8012be0:	ee87 2a27 	vdiv.f32	s4, s14, s15
 8012be4:	4408      	add	r0, r1
 8012be6:	4451      	add	r1, sl
 8012be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012bec:	ed8e 2a00 	vstr	s4, [lr]
 8012bf0:	ed90 6a00 	vldr	s12, [r0]
 8012bf4:	edd1 7a00 	vldr	s15, [r1]
 8012bf8:	eee2 7a46 	vfms.f32	s15, s4, s12
 8012bfc:	edc1 7a00 	vstr	s15, [r1]
 8012c00:	9905      	ldr	r1, [sp, #20]
 8012c02:	ed90 3a00 	vldr	s6, [r0]
 8012c06:	ed94 6a00 	vldr	s12, [r4]
 8012c0a:	a8ae      	add	r0, sp, #696	; 0x2b8
 8012c0c:	4401      	add	r1, r0
 8012c0e:	edd1 3a00 	vldr	s7, [r1]
 8012c12:	9904      	ldr	r1, [sp, #16]
 8012c14:	4401      	add	r1, r0
 8012c16:	00b0      	lsls	r0, r6, #2
 8012c18:	edd1 4a00 	vldr	s9, [r1]
 8012c1c:	f500 61b2 	add.w	r1, r0, #1424	; 0x590
 8012c20:	4469      	add	r1, sp
 8012c22:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8012c26:	eec7 2a27 	vdiv.f32	s5, s14, s15
 8012c2a:	edd1 7a00 	vldr	s15, [r1]
 8012c2e:	a9ae      	add	r1, sp, #696	; 0x2b8
 8012c30:	4401      	add	r1, r0
 8012c32:	ee87 4a06 	vdiv.f32	s8, s14, s12
 8012c36:	a8ae      	add	r0, sp, #696	; 0x2b8
 8012c38:	ed91 6a00 	vldr	s12, [r1]
 8012c3c:	f505 61b2 	add.w	r1, r5, #1424	; 0x590
 8012c40:	4469      	add	r1, sp
 8012c42:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8012c46:	ee87 5a06 	vdiv.f32	s10, s14, s12
 8012c4a:	4405      	add	r5, r0
 8012c4c:	ed91 7a00 	vldr	s14, [r1]
 8012c50:	edd5 5a00 	vldr	s11, [r5]
 8012c54:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8012c58:	4469      	add	r1, sp
 8012c5a:	4407      	add	r7, r0
 8012c5c:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8012c60:	edd7 1a00 	vldr	s3, [r7]
 8012c64:	ed91 6a00 	vldr	s12, [r1]
 8012c68:	eea5 7ae7 	vfms.f32	s14, s11, s15
 8012c6c:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8012c70:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8012c74:	eea1 6ae7 	vfms.f32	s12, s3, s15
 8012c78:	4601      	mov	r1, r0
 8012c7a:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 8012c7e:	ed91 1a00 	vldr	s2, [r1]
 8012c82:	eea2 6a47 	vfms.f32	s12, s4, s14
 8012c86:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8012c8a:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 8012c8e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012c92:	ee22 6a86 	vmul.f32	s12, s5, s12
 8012c96:	460b      	mov	r3, r1
 8012c98:	eea3 7a46 	vfms.f32	s14, s6, s12
 8012c9c:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 8012ca0:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8012ca4:	eee3 7ac6 	vfms.f32	s15, s7, s12
 8012ca8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012cac:	ed8b 6a02 	vstr	s12, [fp, #8]
 8012cb0:	eee4 7ac7 	vfms.f32	s15, s9, s14
 8012cb4:	ed8b 7a01 	vstr	s14, [fp, #4]
 8012cb8:	ee65 7a27 	vmul.f32	s15, s10, s15
 8012cbc:	ed90 7a00 	vldr	s14, [r0]
 8012cc0:	ed91 6a00 	vldr	s12, [r1]
 8012cc4:	edcb 7a00 	vstr	s15, [fp]
 8012cc8:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 8012ccc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8012cd0:	edd3 7a00 	vldr	s15, [r3]
 8012cd4:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 8012cd8:	edd3 0a00 	vldr	s1, [r3]
 8012cdc:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 8012ce0:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8012ce4:	4658      	mov	r0, fp
 8012ce6:	a952      	add	r1, sp, #328	; 0x148
 8012ce8:	eee1 7a65 	vfms.f32	s15, s2, s11
 8012cec:	edd2 5a00 	vldr	s11, [r2]
 8012cf0:	eee1 0a61 	vfms.f32	s1, s2, s3
 8012cf4:	eee1 5ac7 	vfms.f32	s11, s3, s14
 8012cf8:	eef0 1a60 	vmov.f32	s3, s1
 8012cfc:	eee2 5a46 	vfms.f32	s11, s4, s12
 8012d00:	eee2 1a67 	vfms.f32	s3, s4, s15
 8012d04:	ee62 5aa5 	vmul.f32	s11, s5, s11
 8012d08:	ee62 2aa1 	vmul.f32	s5, s5, s3
 8012d0c:	eea3 6a65 	vfms.f32	s12, s6, s11
 8012d10:	eee2 7ac3 	vfms.f32	s15, s5, s6
 8012d14:	eea2 1ae3 	vfms.f32	s2, s5, s7
 8012d18:	eea3 7ae5 	vfms.f32	s14, s7, s11
 8012d1c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8012d20:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012d24:	edcb 5a05 	vstr	s11, [fp, #20]
 8012d28:	eef0 5a41 	vmov.f32	s11, s2
 8012d2c:	eea4 7ac6 	vfms.f32	s14, s9, s12
 8012d30:	eee7 5ae4 	vfms.f32	s11, s15, s9
 8012d34:	ee25 7a07 	vmul.f32	s14, s10, s14
 8012d38:	ee65 5a25 	vmul.f32	s11, s10, s11
 8012d3c:	ed8b 6a04 	vstr	s12, [fp, #16]
 8012d40:	ed8b 7a03 	vstr	s14, [fp, #12]
 8012d44:	edcb 2a08 	vstr	s5, [fp, #32]
 8012d48:	edcb 7a07 	vstr	s15, [fp, #28]
 8012d4c:	edcb 5a06 	vstr	s11, [fp, #24]
 8012d50:	f7fa fcac 	bl	800d6ac <b_dcm2q>
 8012d54:	ed9d 7a53 	vldr	s14, [sp, #332]	; 0x14c
 8012d58:	eddd 7a54 	vldr	s15, [sp, #336]	; 0x150
 8012d5c:	ed9d 6a52 	vldr	s12, [sp, #328]	; 0x148
 8012d60:	9b06      	ldr	r3, [sp, #24]
 8012d62:	eddd 6a03 	vldr	s13, [sp, #12]
 8012d66:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8012d6a:	ee37 7a07 	vadd.f32	s14, s14, s14
 8012d6e:	ee36 6a06 	vadd.f32	s12, s12, s12
 8012d72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012d76:	ed8d 6a3d 	vstr	s12, [sp, #244]	; 0xf4
 8012d7a:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8012d7e:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	f43e ae54 	beq.w	8011a30 <iNemoEngine_API_Update+0x2b30>
 8012d88:	9906      	ldr	r1, [sp, #24]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	464b      	mov	r3, r9
 8012d8e:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 8012d92:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8012d96:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8012d9a:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8012d9e:	f7fe ba06 	b.w	80111ae <iNemoEngine_API_Update+0x22ae>
 8012da2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012da6:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8012daa:	edd2 3a31 	vldr	s7, [r2, #196]	; 0xc4
 8012dae:	edd2 7a33 	vldr	s15, [r2, #204]	; 0xcc
 8012db2:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012db6:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012dba:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8012dbe:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 8012dc2:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dca:	ee3f fa23 	vadd.f32	s30, s30, s7
 8012dce:	f6fe ac6e 	blt.w	80116ae <iNemoEngine_API_Update+0x27ae>
 8012dd2:	9b06      	ldr	r3, [sp, #24]
 8012dd4:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8012dd8:	eef4 8ac7 	vcmpe.f32	s17, s14
 8012ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de0:	f140 837a 	bpl.w	80134d8 <iNemoEngine_API_Update+0x45d8>
 8012de4:	edd3 3a35 	vldr	s7, [r3, #212]	; 0xd4
 8012de8:	ed93 4a37 	vldr	s8, [r3, #220]	; 0xdc
 8012dec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012df0:	ee34 4a63 	vsub.f32	s8, s8, s7
 8012df4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8012df8:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012dfc:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8012e00:	ee3f fa23 	vadd.f32	s30, s30, s7
 8012e04:	9b06      	ldr	r3, [sp, #24]
 8012e06:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8012e0a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e12:	f6fe ac6d 	blt.w	80116f0 <iNemoEngine_API_Update+0x27f0>
 8012e16:	9b06      	ldr	r3, [sp, #24]
 8012e18:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 8012e1c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8012e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e24:	f140 82fd 	bpl.w	8013422 <iNemoEngine_API_Update+0x4522>
 8012e28:	edd3 3a39 	vldr	s7, [r3, #228]	; 0xe4
 8012e2c:	ed93 4a3b 	vldr	s8, [r3, #236]	; 0xec
 8012e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e34:	ee34 4a63 	vsub.f32	s8, s8, s7
 8012e38:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8012e3c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012e40:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8012e44:	ee3f fa23 	vadd.f32	s30, s30, s7
 8012e48:	9b06      	ldr	r3, [sp, #24]
 8012e4a:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8012e4e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e56:	f6fe ac6d 	blt.w	8011734 <iNemoEngine_API_Update+0x2834>
 8012e5a:	9b06      	ldr	r3, [sp, #24]
 8012e5c:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8012e60:	eef4 8ac7 	vcmpe.f32	s17, s14
 8012e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e68:	f140 831a 	bpl.w	80134a0 <iNemoEngine_API_Update+0x45a0>
 8012e6c:	edd3 3a3d 	vldr	s7, [r3, #244]	; 0xf4
 8012e70:	ed93 4a3f 	vldr	s8, [r3, #252]	; 0xfc
 8012e74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e78:	ee34 4a63 	vsub.f32	s8, s8, s7
 8012e7c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8012e80:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012e84:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8012e88:	ee3f fa23 	vadd.f32	s30, s30, s7
 8012e8c:	9b06      	ldr	r3, [sp, #24]
 8012e8e:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8012e92:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9a:	f6fe ac6d 	blt.w	8011778 <iNemoEngine_API_Update+0x2878>
 8012e9e:	9b06      	ldr	r3, [sp, #24]
 8012ea0:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 8012ea4:	eef4 8ac7 	vcmpe.f32	s17, s14
 8012ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eac:	f140 82c3 	bpl.w	8013436 <iNemoEngine_API_Update+0x4536>
 8012eb0:	edd3 3a41 	vldr	s7, [r3, #260]	; 0x104
 8012eb4:	ed93 4a43 	vldr	s8, [r3, #268]	; 0x10c
 8012eb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ebc:	ee34 4a63 	vsub.f32	s8, s8, s7
 8012ec0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8012ec4:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012ec8:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8012ecc:	ee3f fa23 	vadd.f32	s30, s30, s7
 8012ed0:	9b06      	ldr	r3, [sp, #24]
 8012ed2:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 8012ed6:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ede:	f6fe ac6d 	blt.w	80117bc <iNemoEngine_API_Update+0x28bc>
 8012ee2:	9b06      	ldr	r3, [sp, #24]
 8012ee4:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
 8012ee8:	eef4 8ac7 	vcmpe.f32	s17, s14
 8012eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef0:	f140 82d2 	bpl.w	8013498 <iNemoEngine_API_Update+0x4598>
 8012ef4:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 8012ef8:	edd3 4a47 	vldr	s9, [r3, #284]	; 0x11c
 8012efc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012f00:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8012f04:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8012f08:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8012f0c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8012f10:	ee3f fa04 	vadd.f32	s30, s30, s8
 8012f14:	f7fd ba93 	b.w	801043e <iNemoEngine_API_Update+0x153e>
 8012f18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012f1c:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8012f20:	edd3 3a4b 	vldr	s7, [r3, #300]	; 0x12c
 8012f24:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8012f28:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012f2c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012f30:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8012f34:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8012f38:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f40:	ee3c ca23 	vadd.f32	s24, s24, s7
 8012f44:	f6fd aaab 	blt.w	801049e <iNemoEngine_API_Update+0x159e>
 8012f48:	9b06      	ldr	r3, [sp, #24]
 8012f4a:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 8012f4e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8012f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f56:	f140 8260 	bpl.w	801341a <iNemoEngine_API_Update+0x451a>
 8012f5a:	edd3 3a4f 	vldr	s7, [r3, #316]	; 0x13c
 8012f5e:	ed93 4a51 	vldr	s8, [r3, #324]	; 0x144
 8012f62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012f66:	ee34 4a63 	vsub.f32	s8, s8, s7
 8012f6a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8012f6e:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012f72:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8012f76:	ee3c ca23 	vadd.f32	s24, s24, s7
 8012f7a:	9b06      	ldr	r3, [sp, #24]
 8012f7c:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8012f80:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f88:	f6fd aaaa 	blt.w	80104e0 <iNemoEngine_API_Update+0x15e0>
 8012f8c:	9b06      	ldr	r3, [sp, #24]
 8012f8e:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8012f92:	eef4 8ac7 	vcmpe.f32	s17, s14
 8012f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f9a:	f140 8237 	bpl.w	801340c <iNemoEngine_API_Update+0x450c>
 8012f9e:	edd3 3a53 	vldr	s7, [r3, #332]	; 0x14c
 8012fa2:	ed93 4a55 	vldr	s8, [r3, #340]	; 0x154
 8012fa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012faa:	ee34 4a63 	vsub.f32	s8, s8, s7
 8012fae:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8012fb2:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012fb6:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8012fba:	ee3c ca23 	vadd.f32	s24, s24, s7
 8012fbe:	9b06      	ldr	r3, [sp, #24]
 8012fc0:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8012fc4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8012fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fcc:	f6fd aaaa 	blt.w	8010524 <iNemoEngine_API_Update+0x1624>
 8012fd0:	9b06      	ldr	r3, [sp, #24]
 8012fd2:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8012fd6:	eef4 8ac7 	vcmpe.f32	s17, s14
 8012fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fde:	f140 8270 	bpl.w	80134c2 <iNemoEngine_API_Update+0x45c2>
 8012fe2:	edd3 3a57 	vldr	s7, [r3, #348]	; 0x15c
 8012fe6:	ed93 4a59 	vldr	s8, [r3, #356]	; 0x164
 8012fea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012fee:	ee34 4a63 	vsub.f32	s8, s8, s7
 8012ff2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8012ff6:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012ffa:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8012ffe:	ee3c ca23 	vadd.f32	s24, s24, s7
 8013002:	9b06      	ldr	r3, [sp, #24]
 8013004:	edd3 7a5a 	vldr	s15, [r3, #360]	; 0x168
 8013008:	eef4 8ae7 	vcmpe.f32	s17, s15
 801300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013010:	f6fd aaaa 	blt.w	8010568 <iNemoEngine_API_Update+0x1668>
 8013014:	9b06      	ldr	r3, [sp, #24]
 8013016:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 801301a:	eef4 8ac7 	vcmpe.f32	s17, s14
 801301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013022:	f140 8252 	bpl.w	80134ca <iNemoEngine_API_Update+0x45ca>
 8013026:	edd3 3a5b 	vldr	s7, [r3, #364]	; 0x16c
 801302a:	ed93 4a5d 	vldr	s8, [r3, #372]	; 0x174
 801302e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013032:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013036:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801303a:	ee64 7a27 	vmul.f32	s15, s8, s15
 801303e:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8013042:	ee3c ca23 	vadd.f32	s24, s24, s7
 8013046:	9b06      	ldr	r3, [sp, #24]
 8013048:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 801304c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013054:	f6fd aaaa 	blt.w	80105ac <iNemoEngine_API_Update+0x16ac>
 8013058:	9b06      	ldr	r3, [sp, #24]
 801305a:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 801305e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8013062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013066:	f140 8222 	bpl.w	80134ae <iNemoEngine_API_Update+0x45ae>
 801306a:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 801306e:	edd3 4a61 	vldr	s9, [r3, #388]	; 0x184
 8013072:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013076:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801307a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801307e:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8013082:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8013086:	ee3c ca04 	vadd.f32	s24, s24, s8
 801308a:	f7fd bb2a 	b.w	80106e2 <iNemoEngine_API_Update+0x17e2>
 801308e:	a94e      	add	r1, sp, #312	; 0x138
 8013090:	a868      	add	r0, sp, #416	; 0x1a0
 8013092:	f7fa fb0b 	bl	800d6ac <b_dcm2q>
 8013096:	9d06      	ldr	r5, [sp, #24]
 8013098:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 801309c:	edc5 7a72 	vstr	s15, [r5, #456]	; 0x1c8
 80130a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80130a4:	edc5 7a73 	vstr	s15, [r5, #460]	; 0x1cc
 80130a8:	4621      	mov	r1, r4
 80130aa:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80130ae:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
 80130b2:	edcd 7a05 	vstr	s15, [sp, #20]
 80130b6:	f002 fb6f 	bl	8015798 <memset>
 80130ba:	4be5      	ldr	r3, [pc, #916]	; (8013450 <iNemoEngine_API_Update+0x4550>)
 80130bc:	702c      	strb	r4, [r5, #0]
 80130be:	eddd 7a05 	vldr	s15, [sp, #20]
 80130c2:	edd5 2a02 	vldr	s5, [r5, #8]
 80130c6:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 80130ca:	9a06      	ldr	r2, [sp, #24]
 80130cc:	f8c5 31d4 	str.w	r3, [r5, #468]	; 0x1d4
 80130d0:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
 80130d4:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
 80130d8:	f8c5 324c 	str.w	r3, [r5, #588]	; 0x24c
 80130dc:	f8c5 3274 	str.w	r3, [r5, #628]	; 0x274
 80130e0:	f8c5 329c 	str.w	r3, [r5, #668]	; 0x29c
 80130e4:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
 80130e8:	f8c5 32ec 	str.w	r3, [r5, #748]	; 0x2ec
 80130ec:	f8c5 3314 	str.w	r3, [r5, #788]	; 0x314
 80130f0:	2401      	movs	r4, #1
 80130f2:	f7fd bb44 	b.w	801077e <iNemoEngine_API_Update+0x187e>
 80130f6:	290a      	cmp	r1, #10
 80130f8:	f000 815d 	beq.w	80133b6 <iNemoEngine_API_Update+0x44b6>
 80130fc:	1c4b      	adds	r3, r1, #1
 80130fe:	9906      	ldr	r1, [sp, #24]
 8013100:	f881 31a0 	strb.w	r3, [r1, #416]	; 0x1a0
 8013104:	4613      	mov	r3, r2
 8013106:	2200      	movs	r2, #0
 8013108:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801310c:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8013110:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8013114:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8013118:	f7fe b849 	b.w	80111ae <iNemoEngine_API_Update+0x22ae>
 801311c:	ed9d 7a55 	vldr	s14, [sp, #340]	; 0x154
 8013120:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013128:	f340 824f 	ble.w	80135ca <iNemoEngine_API_Update+0x46ca>
 801312c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013138:	f140 8244 	bpl.w	80135c4 <iNemoEngine_API_Update+0x46c4>
 801313c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013140:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013148:	f140 81f9 	bpl.w	801353e <iNemoEngine_API_Update+0x463e>
 801314c:	eddf 7ace 	vldr	s15, [pc, #824]	; 8013488 <iNemoEngine_API_Update+0x4588>
 8013150:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013158:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801315c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013160:	eef0 8a46 	vmov.f32	s17, s12
 8013164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013168:	eee7 8aa5 	vfma.f32	s17, s15, s11
 801316c:	f2c0 81fb 	blt.w	8013566 <iNemoEngine_API_Update+0x4666>
 8013170:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801317c:	f140 81fb 	bpl.w	8013576 <iNemoEngine_API_Update+0x4676>
 8013180:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013188:	ed9f 6ab2 	vldr	s12, [pc, #712]	; 8013454 <iNemoEngine_API_Update+0x4554>
 801318c:	eddf 8ab2 	vldr	s17, [pc, #712]	; 8013458 <iNemoEngine_API_Update+0x4558>
 8013190:	eee7 8a86 	vfma.f32	s17, s15, s12
 8013194:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801319c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a0:	f2c0 81fb 	blt.w	801359a <iNemoEngine_API_Update+0x469a>
 80131a4:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80131a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b0:	f140 81fb 	bpl.w	80135aa <iNemoEngine_API_Update+0x46aa>
 80131b4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80131b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80131bc:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 80131c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80131c4:	eee7 8a87 	vfma.f32	s17, s15, s14
 80131c8:	9a06      	ldr	r2, [sp, #24]
 80131ca:	2300      	movs	r3, #0
 80131cc:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 80131d0:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 80131d4:	f7fe bc29 	b.w	8011a2a <iNemoEngine_API_Update+0x2b2a>
 80131d8:	eddf 6aa0 	vldr	s13, [pc, #640]	; 801345c <iNemoEngine_API_Update+0x455c>
 80131dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80131e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e4:	f57e ad78 	bpl.w	8011cd8 <iNemoEngine_API_Update+0x2dd8>
 80131e8:	ed9f 6a9d 	vldr	s12, [pc, #628]	; 8013460 <iNemoEngine_API_Update+0x4560>
 80131ec:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8013488 <iNemoEngine_API_Update+0x4588>
 80131f0:	eddf 5a9c 	vldr	s11, [pc, #624]	; 8013464 <iNemoEngine_API_Update+0x4564>
 80131f4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80131f8:	ee26 6a26 	vmul.f32	s12, s12, s13
 80131fc:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8013468 <iNemoEngine_API_Update+0x4568>
 8013200:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013204:	ed9f 6a99 	vldr	s12, [pc, #612]	; 801346c <iNemoEngine_API_Update+0x456c>
 8013208:	eef4 7ac6 	vcmpe.f32	s15, s12
 801320c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013210:	f6fe ad78 	blt.w	8011d04 <iNemoEngine_API_Update+0x2e04>
 8013214:	eddf 6a96 	vldr	s13, [pc, #600]	; 8013470 <iNemoEngine_API_Update+0x4570>
 8013218:	eef4 7ae6 	vcmpe.f32	s15, s13
 801321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013220:	f57e ad78 	bpl.w	8011d14 <iNemoEngine_API_Update+0x2e14>
 8013224:	ed9f 6a91 	vldr	s12, [pc, #580]	; 801346c <iNemoEngine_API_Update+0x456c>
 8013228:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801322c:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8013230:	ee26 6a26 	vmul.f32	s12, s12, s13
 8013234:	eef3 5a04 	vmov.f32	s11, #52	; 0x41a00000  20.0
 8013238:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801323c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013240:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8013490 <iNemoEngine_API_Update+0x4590>
 8013244:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801324c:	f6fe ad78 	blt.w	8011d40 <iNemoEngine_API_Update+0x2e40>
 8013250:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013254:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801325c:	f57e ad77 	bpl.w	8011d4e <iNemoEngine_API_Update+0x2e4e>
 8013260:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8013490 <iNemoEngine_API_Update+0x4590>
 8013264:	eddf 6a83 	vldr	s13, [pc, #524]	; 8013474 <iNemoEngine_API_Update+0x4574>
 8013268:	eddf 5a83 	vldr	s11, [pc, #524]	; 8013478 <iNemoEngine_API_Update+0x4578>
 801326c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8013270:	ee26 6a26 	vmul.f32	s12, s12, s13
 8013274:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8013278:	eee6 6a25 	vfma.f32	s13, s12, s11
 801327c:	f7fe bd75 	b.w	8011d6a <iNemoEngine_API_Update+0x2e6a>
 8013280:	eddf 6a7e 	vldr	s13, [pc, #504]	; 801347c <iNemoEngine_API_Update+0x457c>
 8013284:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801328c:	f57e ad06 	bpl.w	8011c9c <iNemoEngine_API_Update+0x2d9c>
 8013290:	eddf 6a73 	vldr	s13, [pc, #460]	; 8013460 <iNemoEngine_API_Update+0x4560>
 8013294:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801329c:	da9c      	bge.n	80131d8 <iNemoEngine_API_Update+0x42d8>
 801329e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80132a2:	f7fe bd11 	b.w	8011cc8 <iNemoEngine_API_Update+0x2dc8>
 80132a6:	2104      	movs	r1, #4
 80132a8:	f04f 0e03 	mov.w	lr, #3
 80132ac:	2706      	movs	r7, #6
 80132ae:	f04f 0c07 	mov.w	ip, #7
 80132b2:	4608      	mov	r0, r1
 80132b4:	2301      	movs	r3, #1
 80132b6:	2600      	movs	r6, #0
 80132b8:	f7ff bbfa 	b.w	8012ab0 <iNemoEngine_API_Update+0x3bb0>
 80132bc:	eddf 3a70 	vldr	s7, [pc, #448]	; 8013480 <iNemoEngine_API_Update+0x4580>
 80132c0:	ed9f 5a70 	vldr	s10, [pc, #448]	; 8013484 <iNemoEngine_API_Update+0x4584>
 80132c4:	ac43      	add	r4, sp, #268	; 0x10c
 80132c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80132ca:	edd0 7a7c 	vldr	s15, [r0, #496]	; 0x1f0
 80132ce:	f5a0 73ae 	sub.w	r3, r0, #348	; 0x15c
 80132d2:	3101      	adds	r1, #1
 80132d4:	eeb0 7a67 	vmov.f32	s14, s15
 80132d8:	461a      	mov	r2, r3
 80132da:	edd2 5ad6 	vldr	s11, [r2, #856]	; 0x358
 80132de:	320c      	adds	r2, #12
 80132e0:	4290      	cmp	r0, r2
 80132e2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80132e6:	d1f8      	bne.n	80132da <iNemoEngine_API_Update+0x43da>
 80132e8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80132ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80132f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80132f4:	edd3 5ad6 	vldr	s11, [r3, #856]	; 0x358
 80132f8:	330c      	adds	r3, #12
 80132fa:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80132fe:	4298      	cmp	r0, r3
 8013300:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8013304:	d1f6      	bne.n	80132f4 <iNemoEngine_API_Update+0x43f4>
 8013306:	ee67 7a85 	vmul.f32	s15, s15, s10
 801330a:	2902      	cmp	r1, #2
 801330c:	f100 0004 	add.w	r0, r0, #4
 8013310:	ece4 7a01 	vstmia	r4!, {s15}
 8013314:	d1d9      	bne.n	80132ca <iNemoEngine_API_Update+0x43ca>
 8013316:	eddd 5a43 	vldr	s11, [sp, #268]	; 0x10c
 801331a:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 801331e:	ed9d 7a45 	vldr	s14, [sp, #276]	; 0x114
 8013322:	eeb1 3ae5 	vsqrt.f32	s6, s11
 8013326:	eef1 3ae7 	vsqrt.f32	s7, s15
 801332a:	eeb1 5ac7 	vsqrt.f32	s10, s14
 801332e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8013332:	eef3 5a00 	vmov.f32	s11, #48	; 0x41800000  16.0
 8013336:	ee77 7a87 	vadd.f32	s15, s15, s14
 801333a:	ed8d 3a43 	vstr	s6, [sp, #268]	; 0x10c
 801333e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013346:	edcd 3a44 	vstr	s7, [sp, #272]	; 0x110
 801334a:	ed8d 5a45 	vstr	s10, [sp, #276]	; 0x114
 801334e:	f57e abd4 	bpl.w	8011afa <iNemoEngine_API_Update+0x2bfa>
 8013352:	9906      	ldr	r1, [sp, #24]
 8013354:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 8013358:	2200      	movs	r2, #0
 801335a:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 801335e:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8013362:	464b      	mov	r3, r9
 8013364:	704a      	strb	r2, [r1, #1]
 8013366:	f7fd bf22 	b.w	80111ae <iNemoEngine_API_Update+0x22ae>
 801336a:	2208      	movs	r2, #8
 801336c:	9203      	str	r2, [sp, #12]
 801336e:	2205      	movs	r2, #5
 8013370:	920e      	str	r2, [sp, #56]	; 0x38
 8013372:	2202      	movs	r2, #2
 8013374:	f7ff bbb3 	b.w	8012ade <iNemoEngine_API_Update+0x3bde>
 8013378:	2301      	movs	r3, #1
 801337a:	f7fd bf04 	b.w	8011186 <iNemoEngine_API_Update+0x2286>
 801337e:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8013382:	2b27      	cmp	r3, #39	; 0x27
 8013384:	d838      	bhi.n	80133f8 <iNemoEngine_API_Update+0x44f8>
 8013386:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 801338a:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 801338e:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8013392:	9906      	ldr	r1, [sp, #24]
 8013394:	f8b1 31a8 	ldrh.w	r3, [r1, #424]	; 0x1a8
 8013398:	3301      	adds	r3, #1
 801339a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801339e:	bf14      	ite	ne
 80133a0:	b29b      	uxthne	r3, r3
 80133a2:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 80133a6:	2201      	movs	r2, #1
 80133a8:	f8a1 31a8 	strh.w	r3, [r1, #424]	; 0x1a8
 80133ac:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 80133b0:	464b      	mov	r3, r9
 80133b2:	f7fd befc 	b.w	80111ae <iNemoEngine_API_Update+0x22ae>
 80133b6:	9906      	ldr	r1, [sp, #24]
 80133b8:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 80133bc:	f891 31a3 	ldrb.w	r3, [r1, #419]	; 0x1a3
 80133c0:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 80133c4:	3301      	adds	r3, #1
 80133c6:	f881 31a3 	strb.w	r3, [r1, #419]	; 0x1a3
 80133ca:	784b      	ldrb	r3, [r1, #1]
 80133cc:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 80133d0:	f240 1201 	movw	r2, #257	; 0x101
 80133d4:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 80133d8:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 80133dc:	b13b      	cbz	r3, 80133ee <iNemoEngine_API_Update+0x44ee>
 80133de:	2300      	movs	r3, #0
 80133e0:	ed81 ea6f 	vstr	s28, [r1, #444]	; 0x1bc
 80133e4:	edc1 ea70 	vstr	s29, [r1, #448]	; 0x1c0
 80133e8:	edc1 ba71 	vstr	s23, [r1, #452]	; 0x1c4
 80133ec:	704b      	strb	r3, [r1, #1]
 80133ee:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80133f2:	2301      	movs	r3, #1
 80133f4:	f7fd bedb 	b.w	80111ae <iNemoEngine_API_Update+0x22ae>
 80133f8:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 80133fc:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8013400:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8013404:	e7c5      	b.n	8013392 <iNemoEngine_API_Update+0x4492>
 8013406:	eef0 7a47 	vmov.f32	s15, s14
 801340a:	e5bf      	b.n	8012f8c <iNemoEngine_API_Update+0x408c>
 801340c:	eef0 7a47 	vmov.f32	s15, s14
 8013410:	f7fd b86f 	b.w	80104f2 <iNemoEngine_API_Update+0x15f2>
 8013414:	eef0 7a47 	vmov.f32	s15, s14
 8013418:	e563      	b.n	8012ee2 <iNemoEngine_API_Update+0x3fe2>
 801341a:	eef0 7a47 	vmov.f32	s15, s14
 801341e:	f7fd b846 	b.w	80104ae <iNemoEngine_API_Update+0x15ae>
 8013422:	eef0 7a47 	vmov.f32	s15, s14
 8013426:	f7fe b96c 	b.w	8011702 <iNemoEngine_API_Update+0x2802>
 801342a:	eef0 7a47 	vmov.f32	s15, s14
 801342e:	e4f2      	b.n	8012e16 <iNemoEngine_API_Update+0x3f16>
 8013430:	eef0 7a47 	vmov.f32	s15, s14
 8013434:	e533      	b.n	8012e9e <iNemoEngine_API_Update+0x3f9e>
 8013436:	eef0 7a47 	vmov.f32	s15, s14
 801343a:	f7fe b9a6 	b.w	801178a <iNemoEngine_API_Update+0x288a>
 801343e:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8013442:	9315      	str	r3, [sp, #84]	; 0x54
 8013444:	f7fc b886 	b.w	800f554 <iNemoEngine_API_Update+0x654>
 8013448:	f505 6597 	add.w	r5, r5, #1208	; 0x4b8
 801344c:	f7fe be2c 	b.w	80120a8 <iNemoEngine_API_Update+0x31a8>
 8013450:	40a00000 	.word	0x40a00000
 8013454:	3e999998 	.word	0x3e999998
 8013458:	3f99999a 	.word	0x3f99999a
 801345c:	3cf5c28f 	.word	0x3cf5c28f
 8013460:	3c75c28f 	.word	0x3c75c28f
 8013464:	42855556 	.word	0x42855556
 8013468:	3f866666 	.word	0x3f866666
 801346c:	3d4ccccd 	.word	0x3d4ccccd
 8013470:	3dcccccd 	.word	0x3dcccccd
 8013474:	42200000 	.word	0x42200000
 8013478:	40555555 	.word	0x40555555
 801347c:	3c23d70a 	.word	0x3c23d70a
 8013480:	3d088889 	.word	0x3d088889
 8013484:	3d0d3dcb 	.word	0x3d0d3dcb
 8013488:	3dccccd0 	.word	0x3dccccd0
 801348c:	3f8ccccd 	.word	0x3f8ccccd
 8013490:	3e4ccccd 	.word	0x3e4ccccd
 8013494:	00000000 	.word	0x00000000
 8013498:	eef0 7a47 	vmov.f32	s15, s14
 801349c:	f7fe b997 	b.w	80117ce <iNemoEngine_API_Update+0x28ce>
 80134a0:	eef0 7a47 	vmov.f32	s15, s14
 80134a4:	f7fe b94f 	b.w	8011746 <iNemoEngine_API_Update+0x2846>
 80134a8:	eef0 7a47 	vmov.f32	s15, s14
 80134ac:	e4d5      	b.n	8012e5a <iNemoEngine_API_Update+0x3f5a>
 80134ae:	eef0 7a47 	vmov.f32	s15, s14
 80134b2:	f7fd b884 	b.w	80105be <iNemoEngine_API_Update+0x16be>
 80134b6:	eef0 7a47 	vmov.f32	s15, s14
 80134ba:	e5cd      	b.n	8013058 <iNemoEngine_API_Update+0x4158>
 80134bc:	eef0 7a47 	vmov.f32	s15, s14
 80134c0:	e586      	b.n	8012fd0 <iNemoEngine_API_Update+0x40d0>
 80134c2:	eef0 7a47 	vmov.f32	s15, s14
 80134c6:	f7fd b836 	b.w	8010536 <iNemoEngine_API_Update+0x1636>
 80134ca:	eef0 7a47 	vmov.f32	s15, s14
 80134ce:	f7fd b854 	b.w	801057a <iNemoEngine_API_Update+0x167a>
 80134d2:	eef0 7a47 	vmov.f32	s15, s14
 80134d6:	e59d      	b.n	8013014 <iNemoEngine_API_Update+0x4114>
 80134d8:	eef0 7a47 	vmov.f32	s15, s14
 80134dc:	f7fe b8ef 	b.w	80116be <iNemoEngine_API_Update+0x27be>
 80134e0:	9906      	ldr	r1, [sp, #24]
 80134e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80134e6:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 80134ea:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 80134ee:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 80134f2:	f7fe ba9a 	b.w	8011a2a <iNemoEngine_API_Update+0x2b2a>
 80134f6:	9906      	ldr	r1, [sp, #24]
 80134f8:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 80134fc:	3301      	adds	r3, #1
 80134fe:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 8013502:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8013506:	460b      	mov	r3, r1
 8013508:	f7ff ba49 	b.w	801299e <iNemoEngine_API_Update+0x3a9e>
 801350c:	2a00      	cmp	r2, #0
 801350e:	f73d afa4 	bgt.w	801145a <iNemoEngine_API_Update+0x255a>
 8013512:	eddd 5a83 	vldr	s11, [sp, #524]	; 0x20c
 8013516:	ed9d 7a84 	vldr	s14, [sp, #528]	; 0x210
 801351a:	eddd 7a85 	vldr	s15, [sp, #532]	; 0x214
 801351e:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8013522:	ee65 5a86 	vmul.f32	s11, s11, s12
 8013526:	ee27 7a06 	vmul.f32	s14, s14, s12
 801352a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801352e:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 8013532:	ed8d 7a84 	vstr	s14, [sp, #528]	; 0x210
 8013536:	edcd 7a85 	vstr	s15, [sp, #532]	; 0x214
 801353a:	f7fd bb24 	b.w	8010b86 <iNemoEngine_API_Update+0x1c86>
 801353e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013542:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801354a:	f57f ae11 	bpl.w	8013170 <iNemoEngine_API_Update+0x4270>
 801354e:	ed1f 6a32 	vldr	s12, [pc, #-200]	; 8013488 <iNemoEngine_API_Update+0x4588>
 8013552:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 801348c <iNemoEngine_API_Update+0x458c>
 8013556:	ee77 7a67 	vsub.f32	s15, s14, s15
 801355a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801355e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8013562:	eee7 8a86 	vfma.f32	s17, s15, s12
 8013566:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801356a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801356e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013572:	f6ff ae0f 	blt.w	8013194 <iNemoEngine_API_Update+0x4294>
 8013576:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801357a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013582:	f57f ae0f 	bpl.w	80131a4 <iNemoEngine_API_Update+0x42a4>
 8013586:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801358a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801358e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013592:	eef7 8a08 	vmov.f32	s17, #120	; 0x3fc00000  1.5
 8013596:	eee7 8a86 	vfma.f32	s17, s15, s12
 801359a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 801359e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80135a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135a6:	f6ff ae0f 	blt.w	80131c8 <iNemoEngine_API_Update+0x42c8>
 80135aa:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80135ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135b2:	ed1f 7a49 	vldr	s14, [pc, #-292]	; 8013490 <iNemoEngine_API_Update+0x4590>
 80135b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80135ba:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
 80135be:	eee7 8a87 	vfma.f32	s17, s15, s14
 80135c2:	e601      	b.n	80131c8 <iNemoEngine_API_Update+0x42c8>
 80135c4:	eef1 8a04 	vmov.f32	s17, #20	; 0x40a00000  5.0
 80135c8:	e5fe      	b.n	80131c8 <iNemoEngine_API_Update+0x42c8>
 80135ca:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80135ce:	e5fb      	b.n	80131c8 <iNemoEngine_API_Update+0x42c8>
 80135d0:	ed1f 8a50 	vldr	s16, [pc, #-320]	; 8013494 <iNemoEngine_API_Update+0x4594>
 80135d4:	f7fb bdeb 	b.w	800f1ae <iNemoEngine_API_Update+0x2ae>

080135d8 <MotionFX_initialize>:
 80135d8:	4a4c      	ldr	r2, [pc, #304]	; (801370c <MotionFX_initialize+0x134>)
 80135da:	6813      	ldr	r3, [r2, #0]
 80135dc:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
 80135e0:	f023 0301 	bic.w	r3, r3, #1
 80135e4:	b530      	push	{r4, r5, lr}
 80135e6:	6013      	str	r3, [r2, #0]
 80135e8:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 80135ec:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80135f0:	400b      	ands	r3, r1
 80135f2:	f24c 2240 	movw	r2, #49728	; 0xc240
 80135f6:	4293      	cmp	r3, r2
 80135f8:	b085      	sub	sp, #20
 80135fa:	4604      	mov	r4, r0
 80135fc:	d013      	beq.n	8013626 <MotionFX_initialize+0x4e>
 80135fe:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 8013602:	f24c 2270 	movw	r2, #49776	; 0xc270
 8013606:	4019      	ands	r1, r3
 8013608:	4291      	cmp	r1, r2
 801360a:	d00c      	beq.n	8013626 <MotionFX_initialize+0x4e>
 801360c:	4a40      	ldr	r2, [pc, #256]	; (8013710 <MotionFX_initialize+0x138>)
 801360e:	2301      	movs	r3, #1
 8013610:	6093      	str	r3, [r2, #8]
 8013612:	6893      	ldr	r3, [r2, #8]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d1fc      	bne.n	8013612 <MotionFX_initialize+0x3a>
 8013618:	4b3e      	ldr	r3, [pc, #248]	; (8013714 <MotionFX_initialize+0x13c>)
 801361a:	6013      	str	r3, [r2, #0]
 801361c:	6812      	ldr	r2, [r2, #0]
 801361e:	4b3e      	ldr	r3, [pc, #248]	; (8013718 <MotionFX_initialize+0x140>)
 8013620:	429a      	cmp	r2, r3
 8013622:	d02c      	beq.n	801367e <MotionFX_initialize+0xa6>
 8013624:	e7fe      	b.n	8013624 <MotionFX_initialize+0x4c>
 8013626:	4b3d      	ldr	r3, [pc, #244]	; (801371c <MotionFX_initialize+0x144>)
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d1ee      	bne.n	801360c <MotionFX_initialize+0x34>
 801362e:	4a3c      	ldr	r2, [pc, #240]	; (8013720 <MotionFX_initialize+0x148>)
 8013630:	6813      	ldr	r3, [r2, #0]
 8013632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013636:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801363a:	d056      	beq.n	80136ea <MotionFX_initialize+0x112>
 801363c:	6813      	ldr	r3, [r2, #0]
 801363e:	f240 4183 	movw	r1, #1155	; 0x483
 8013642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013646:	428b      	cmp	r3, r1
 8013648:	d04f      	beq.n	80136ea <MotionFX_initialize+0x112>
 801364a:	6813      	ldr	r3, [r2, #0]
 801364c:	f240 4285 	movw	r2, #1157	; 0x485
 8013650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013654:	4293      	cmp	r3, r2
 8013656:	d048      	beq.n	80136ea <MotionFX_initialize+0x112>
 8013658:	4b32      	ldr	r3, [pc, #200]	; (8013724 <MotionFX_initialize+0x14c>)
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013660:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8013664:	d1d2      	bne.n	801360c <MotionFX_initialize+0x34>
 8013666:	4a30      	ldr	r2, [pc, #192]	; (8013728 <MotionFX_initialize+0x150>)
 8013668:	2301      	movs	r3, #1
 801366a:	6093      	str	r3, [r2, #8]
 801366c:	6893      	ldr	r3, [r2, #8]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d1fc      	bne.n	801366c <MotionFX_initialize+0x94>
 8013672:	4b28      	ldr	r3, [pc, #160]	; (8013714 <MotionFX_initialize+0x13c>)
 8013674:	6013      	str	r3, [r2, #0]
 8013676:	6812      	ldr	r2, [r2, #0]
 8013678:	4b27      	ldr	r3, [pc, #156]	; (8013718 <MotionFX_initialize+0x140>)
 801367a:	429a      	cmp	r2, r3
 801367c:	d1d2      	bne.n	8013624 <MotionFX_initialize+0x4c>
 801367e:	4b2b      	ldr	r3, [pc, #172]	; (801372c <MotionFX_initialize+0x154>)
 8013680:	4a2b      	ldr	r2, [pc, #172]	; (8013730 <MotionFX_initialize+0x158>)
 8013682:	9303      	str	r3, [sp, #12]
 8013684:	2501      	movs	r5, #1
 8013686:	4620      	mov	r0, r4
 8013688:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801368c:	f882 53c4 	strb.w	r5, [r2, #964]	; 0x3c4
 8013690:	f7fb f946 	bl	800e920 <MFX_emptyAttitude>
 8013694:	a901      	add	r1, sp, #4
 8013696:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801369a:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 801369e:	f7f9 ff03 	bl	800d4a8 <updateOrientation>
 80136a2:	a903      	add	r1, sp, #12
 80136a4:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80136a8:	f7f9 fefe 	bl	800d4a8 <updateOrientation>
 80136ac:	a902      	add	r1, sp, #8
 80136ae:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80136b2:	f7f9 fef9 	bl	800d4a8 <updateOrientation>
 80136b6:	4b1f      	ldr	r3, [pc, #124]	; (8013734 <MotionFX_initialize+0x15c>)
 80136b8:	491f      	ldr	r1, [pc, #124]	; (8013738 <MotionFX_initialize+0x160>)
 80136ba:	6363      	str	r3, [r4, #52]	; 0x34
 80136bc:	4b1f      	ldr	r3, [pc, #124]	; (801373c <MotionFX_initialize+0x164>)
 80136be:	4a20      	ldr	r2, [pc, #128]	; (8013740 <MotionFX_initialize+0x168>)
 80136c0:	62a1      	str	r1, [r4, #40]	; 0x28
 80136c2:	61e3      	str	r3, [r4, #28]
 80136c4:	491f      	ldr	r1, [pc, #124]	; (8013744 <MotionFX_initialize+0x16c>)
 80136c6:	61a2      	str	r2, [r4, #24]
 80136c8:	2300      	movs	r3, #0
 80136ca:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80136ce:	f44f 7281 	mov.w	r2, #258	; 0x102
 80136d2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80136d6:	f240 1301 	movw	r3, #257	; 0x101
 80136da:	62e0      	str	r0, [r4, #44]	; 0x2c
 80136dc:	6221      	str	r1, [r4, #32]
 80136de:	80a2      	strh	r2, [r4, #4]
 80136e0:	f8a4 300d 	strh.w	r3, [r4, #13]
 80136e4:	73e5      	strb	r5, [r4, #15]
 80136e6:	b005      	add	sp, #20
 80136e8:	bd30      	pop	{r4, r5, pc}
 80136ea:	4a17      	ldr	r2, [pc, #92]	; (8013748 <MotionFX_initialize+0x170>)
 80136ec:	2301      	movs	r3, #1
 80136ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80136f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d1fb      	bne.n	80136f2 <MotionFX_initialize+0x11a>
 80136fa:	4b06      	ldr	r3, [pc, #24]	; (8013714 <MotionFX_initialize+0x13c>)
 80136fc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8013700:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8013704:	4b04      	ldr	r3, [pc, #16]	; (8013718 <MotionFX_initialize+0x140>)
 8013706:	429a      	cmp	r2, r3
 8013708:	d0b9      	beq.n	801367e <MotionFX_initialize+0xa6>
 801370a:	e78b      	b.n	8013624 <MotionFX_initialize+0x4c>
 801370c:	e0002000 	.word	0xe0002000
 8013710:	40023000 	.word	0x40023000
 8013714:	f407a5c2 	.word	0xf407a5c2
 8013718:	b5e8b5cd 	.word	0xb5e8b5cd
 801371c:	e0042000 	.word	0xe0042000
 8013720:	5c001000 	.word	0x5c001000
 8013724:	50081000 	.word	0x50081000
 8013728:	4c004000 	.word	0x4c004000
 801372c:	00756e65 	.word	0x00756e65
 8013730:	2000021c 	.word	0x2000021c
 8013734:	3f2ac083 	.word	0x3f2ac083
 8013738:	3f666666 	.word	0x3f666666
 801373c:	3a378034 	.word	0x3a378034
 8013740:	3a51b717 	.word	0x3a51b717
 8013744:	3b378034 	.word	0x3b378034
 8013748:	58024000 	.word	0x58024000

0801374c <MotionFX_setKnobs>:
 801374c:	4b24      	ldr	r3, [pc, #144]	; (80137e0 <MotionFX_setKnobs+0x94>)
 801374e:	f893 23c4 	ldrb.w	r2, [r3, #964]	; 0x3c4
 8013752:	b902      	cbnz	r2, 8013756 <MotionFX_setKnobs+0xa>
 8013754:	4770      	bx	lr
 8013756:	460b      	mov	r3, r1
 8013758:	2900      	cmp	r1, #0
 801375a:	d0fb      	beq.n	8013754 <MotionFX_setKnobs+0x8>
 801375c:	b510      	push	{r4, lr}
 801375e:	4604      	mov	r4, r0
 8013760:	689a      	ldr	r2, [r3, #8]
 8013762:	6808      	ldr	r0, [r1, #0]
 8013764:	6849      	ldr	r1, [r1, #4]
 8013766:	62e1      	str	r1, [r4, #44]	; 0x2c
 8013768:	62a0      	str	r0, [r4, #40]	; 0x28
 801376a:	6362      	str	r2, [r4, #52]	; 0x34
 801376c:	7b1a      	ldrb	r2, [r3, #12]
 801376e:	7162      	strb	r2, [r4, #5]
 8013770:	6918      	ldr	r0, [r3, #16]
 8013772:	6959      	ldr	r1, [r3, #20]
 8013774:	699a      	ldr	r2, [r3, #24]
 8013776:	6222      	str	r2, [r4, #32]
 8013778:	61a0      	str	r0, [r4, #24]
 801377a:	61e1      	str	r1, [r4, #28]
 801377c:	7f1a      	ldrb	r2, [r3, #28]
 801377e:	7122      	strb	r2, [r4, #4]
 8013780:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8013784:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 8013788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801378a:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 801378e:	b084      	sub	sp, #16
 8013790:	f8b3 101d 	ldrh.w	r1, [r3, #29]
 8013794:	7fda      	ldrb	r2, [r3, #31]
 8013796:	f88d 2006 	strb.w	r2, [sp, #6]
 801379a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801379e:	f8b3 2021 	ldrh.w	r2, [r3, #33]	; 0x21
 80137a2:	f8ad 2008 	strh.w	r2, [sp, #8]
 80137a6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80137aa:	f88d 200a 	strb.w	r2, [sp, #10]
 80137ae:	f8b3 2025 	ldrh.w	r2, [r3, #37]	; 0x25
 80137b2:	f8ad 200c 	strh.w	r2, [sp, #12]
 80137b6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80137ba:	f88d 300e 	strb.w	r3, [sp, #14]
 80137be:	a901      	add	r1, sp, #4
 80137c0:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80137c4:	f7f9 fe70 	bl	800d4a8 <updateOrientation>
 80137c8:	a903      	add	r1, sp, #12
 80137ca:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80137ce:	f7f9 fe6b 	bl	800d4a8 <updateOrientation>
 80137d2:	a902      	add	r1, sp, #8
 80137d4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80137d8:	f7f9 fe66 	bl	800d4a8 <updateOrientation>
 80137dc:	b004      	add	sp, #16
 80137de:	bd10      	pop	{r4, pc}
 80137e0:	2000021c 	.word	0x2000021c

080137e4 <MotionFX_getKnobs>:
 80137e4:	4b1d      	ldr	r3, [pc, #116]	; (801385c <MotionFX_getKnobs+0x78>)
 80137e6:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80137ea:	b903      	cbnz	r3, 80137ee <MotionFX_getKnobs+0xa>
 80137ec:	4770      	bx	lr
 80137ee:	460a      	mov	r2, r1
 80137f0:	2900      	cmp	r1, #0
 80137f2:	d0fb      	beq.n	80137ec <MotionFX_getKnobs+0x8>
 80137f4:	b510      	push	{r4, lr}
 80137f6:	4604      	mov	r4, r0
 80137f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80137fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80137fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80137fe:	6093      	str	r3, [r2, #8]
 8013800:	6010      	str	r0, [r2, #0]
 8013802:	6051      	str	r1, [r2, #4]
 8013804:	7963      	ldrb	r3, [r4, #5]
 8013806:	7313      	strb	r3, [r2, #12]
 8013808:	69a0      	ldr	r0, [r4, #24]
 801380a:	69e1      	ldr	r1, [r4, #28]
 801380c:	6a23      	ldr	r3, [r4, #32]
 801380e:	6193      	str	r3, [r2, #24]
 8013810:	6110      	str	r0, [r2, #16]
 8013812:	6151      	str	r1, [r2, #20]
 8013814:	7923      	ldrb	r3, [r4, #4]
 8013816:	7713      	strb	r3, [r2, #28]
 8013818:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801381c:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8013820:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8013824:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013826:	f102 011d 	add.w	r1, r2, #29
 801382a:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801382e:	f7f9 fc93 	bl	800d158 <findAxis>
 8013832:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8013836:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801383a:	f7f9 fc8d 	bl	800d158 <findAxis>
 801383e:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8013842:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8013846:	f7f9 fc87 	bl	800d158 <findAxis>
 801384a:	2300      	movs	r3, #0
 801384c:	f882 3020 	strb.w	r3, [r2, #32]
 8013850:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8013854:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8013858:	bd10      	pop	{r4, pc}
 801385a:	bf00      	nop
 801385c:	2000021c 	.word	0x2000021c

08013860 <MotionFX_enable_6X>:
 8013860:	4b0e      	ldr	r3, [pc, #56]	; (801389c <MotionFX_enable_6X+0x3c>)
 8013862:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8013866:	b903      	cbnz	r3, 801386a <MotionFX_enable_6X+0xa>
 8013868:	4770      	bx	lr
 801386a:	2900      	cmp	r1, #0
 801386c:	d0fc      	beq.n	8013868 <MotionFX_enable_6X+0x8>
 801386e:	b530      	push	{r4, r5, lr}
 8013870:	1d05      	adds	r5, r0, #4
 8013872:	b099      	sub	sp, #100	; 0x64
 8013874:	4604      	mov	r4, r0
 8013876:	4629      	mov	r1, r5
 8013878:	225c      	movs	r2, #92	; 0x5c
 801387a:	a801      	add	r0, sp, #4
 801387c:	f001 ffc4 	bl	8015808 <memcpy>
 8013880:	4620      	mov	r0, r4
 8013882:	f7fb f84d 	bl	800e920 <MFX_emptyAttitude>
 8013886:	225c      	movs	r2, #92	; 0x5c
 8013888:	a901      	add	r1, sp, #4
 801388a:	4628      	mov	r0, r5
 801388c:	f001 ffbc 	bl	8015808 <memcpy>
 8013890:	2300      	movs	r3, #0
 8013892:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8013896:	7363      	strb	r3, [r4, #13]
 8013898:	b019      	add	sp, #100	; 0x64
 801389a:	bd30      	pop	{r4, r5, pc}
 801389c:	2000021c 	.word	0x2000021c

080138a0 <MotionFX_enable_9X>:
 80138a0:	4b0e      	ldr	r3, [pc, #56]	; (80138dc <MotionFX_enable_9X+0x3c>)
 80138a2:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80138a6:	b903      	cbnz	r3, 80138aa <MotionFX_enable_9X+0xa>
 80138a8:	4770      	bx	lr
 80138aa:	2900      	cmp	r1, #0
 80138ac:	d0fc      	beq.n	80138a8 <MotionFX_enable_9X+0x8>
 80138ae:	b530      	push	{r4, r5, lr}
 80138b0:	1d05      	adds	r5, r0, #4
 80138b2:	b099      	sub	sp, #100	; 0x64
 80138b4:	4604      	mov	r4, r0
 80138b6:	4629      	mov	r1, r5
 80138b8:	225c      	movs	r2, #92	; 0x5c
 80138ba:	a801      	add	r0, sp, #4
 80138bc:	f001 ffa4 	bl	8015808 <memcpy>
 80138c0:	4620      	mov	r0, r4
 80138c2:	f7fb f82d 	bl	800e920 <MFX_emptyAttitude>
 80138c6:	225c      	movs	r2, #92	; 0x5c
 80138c8:	a901      	add	r1, sp, #4
 80138ca:	4628      	mov	r0, r5
 80138cc:	f001 ff9c 	bl	8015808 <memcpy>
 80138d0:	2301      	movs	r3, #1
 80138d2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80138d6:	7363      	strb	r3, [r4, #13]
 80138d8:	b019      	add	sp, #100	; 0x64
 80138da:	bd30      	pop	{r4, r5, pc}
 80138dc:	2000021c 	.word	0x2000021c

080138e0 <MotionFX_update>:
 80138e0:	b430      	push	{r4, r5}
 80138e2:	4c06      	ldr	r4, [pc, #24]	; (80138fc <MotionFX_update+0x1c>)
 80138e4:	9d02      	ldr	r5, [sp, #8]
 80138e6:	f894 43c4 	ldrb.w	r4, [r4, #964]	; 0x3c4
 80138ea:	b90c      	cbnz	r4, 80138f0 <MotionFX_update+0x10>
 80138ec:	bc30      	pop	{r4, r5}
 80138ee:	4770      	bx	lr
 80138f0:	ed93 0a00 	vldr	s0, [r3]
 80138f4:	462b      	mov	r3, r5
 80138f6:	bc30      	pop	{r4, r5}
 80138f8:	f7fb bb02 	b.w	800ef00 <iNemoEngine_API_Update>
 80138fc:	2000021c 	.word	0x2000021c

08013900 <MotionFX_propagate>:
 8013900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013904:	ed2d 8b06 	vpush	{d8-d10}
 8013908:	4ca2      	ldr	r4, [pc, #648]	; (8013b94 <MotionFX_propagate+0x294>)
 801390a:	f894 63c4 	ldrb.w	r6, [r4, #964]	; 0x3c4
 801390e:	b0a1      	sub	sp, #132	; 0x84
 8013910:	b926      	cbnz	r6, 801391c <MotionFX_propagate+0x1c>
 8013912:	b021      	add	sp, #132	; 0x84
 8013914:	ecbd 8b06 	vpop	{d8-d10}
 8013918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801391c:	4694      	mov	ip, r2
 801391e:	4604      	mov	r4, r0
 8013920:	460d      	mov	r5, r1
 8013922:	68d0      	ldr	r0, [r2, #12]
 8013924:	6911      	ldr	r1, [r2, #16]
 8013926:	6952      	ldr	r2, [r2, #20]
 8013928:	edd3 9a00 	vldr	s19, [r3]
 801392c:	ab13      	add	r3, sp, #76	; 0x4c
 801392e:	c307      	stmia	r3!, {r0, r1, r2}
 8013930:	f8dc 0000 	ldr.w	r0, [ip]
 8013934:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013938:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801393c:	ab10      	add	r3, sp, #64	; 0x40
 801393e:	c307      	stmia	r3!, {r0, r1, r2}
 8013940:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8013944:	f8dc 101c 	ldr.w	r1, [ip, #28]
 8013948:	f8dc 2020 	ldr.w	r2, [ip, #32]
 801394c:	ab16      	add	r3, sp, #88	; 0x58
 801394e:	f104 073a 	add.w	r7, r4, #58	; 0x3a
 8013952:	c307      	stmia	r3!, {r0, r1, r2}
 8013954:	4639      	mov	r1, r7
 8013956:	a803      	add	r0, sp, #12
 8013958:	aa13      	add	r2, sp, #76	; 0x4c
 801395a:	f7f9 fb9b 	bl	800d094 <rotVect>
 801395e:	aa16      	add	r2, sp, #88	; 0x58
 8013960:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8013964:	a806      	add	r0, sp, #24
 8013966:	f7f9 fb95 	bl	800d094 <rotVect>
 801396a:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 801396e:	2b09      	cmp	r3, #9
 8013970:	d829      	bhi.n	80139c6 <MotionFX_propagate+0xc6>
 8013972:	eddd 8a04 	vldr	s17, [sp, #16]
 8013976:	ed9d 9a03 	vldr	s18, [sp, #12]
 801397a:	ed9d 8a05 	vldr	s16, [sp, #20]
 801397e:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8013982:	eee9 7a09 	vfma.f32	s15, s18, s18
 8013986:	eee8 7a08 	vfma.f32	s15, s16, s16
 801398a:	ee17 0a90 	vmov	r0, s15
 801398e:	f7ec fddb 	bl	8000548 <__aeabi_f2d>
 8013992:	ec41 0b10 	vmov	d0, r0, r1
 8013996:	f004 fe0d 	bl	80185b4 <sqrt>
 801399a:	ec51 0b10 	vmov	r0, r1, d0
 801399e:	f7ed f923 	bl	8000be8 <__aeabi_d2f>
 80139a2:	ee07 0a90 	vmov	s15, r0
 80139a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80139aa:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80139ae:	ee29 9a27 	vmul.f32	s18, s18, s15
 80139b2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80139b6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80139ba:	ed8d 9a03 	vstr	s18, [sp, #12]
 80139be:	edcd 8a04 	vstr	s17, [sp, #16]
 80139c2:	ed8d 8a05 	vstr	s16, [sp, #20]
 80139c6:	7923      	ldrb	r3, [r4, #4]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	f000 80ce 	beq.w	8013b6a <MotionFX_propagate+0x26a>
 80139ce:	ee07 3a90 	vmov	s15, r3
 80139d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80139da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80139de:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 80139e2:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 80139e6:	edd3 7a00 	vldr	s15, [r3]
 80139ea:	eddd 8a06 	vldr	s17, [sp, #24]
 80139ee:	ed9d 6a07 	vldr	s12, [sp, #28]
 80139f2:	eddd 6a08 	vldr	s13, [sp, #32]
 80139f6:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8013b98 <MotionFX_propagate+0x298>
 80139fa:	eddf 5a68 	vldr	s11, [pc, #416]	; 8013b9c <MotionFX_propagate+0x29c>
 80139fe:	eee7 7a28 	vfma.f32	s15, s14, s17
 8013a02:	ee26 9a08 	vmul.f32	s18, s12, s16
 8013a06:	edc3 7a00 	vstr	s15, [r3]
 8013a0a:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8013a0e:	edd3 7a00 	vldr	s15, [r3]
 8013a12:	ed8d 9a07 	vstr	s18, [sp, #28]
 8013a16:	eee7 7a06 	vfma.f32	s15, s14, s12
 8013a1a:	ee68 8a88 	vmul.f32	s17, s17, s16
 8013a1e:	edc3 7a00 	vstr	s15, [r3]
 8013a22:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8013a26:	edd3 7a00 	vldr	s15, [r3]
 8013a2a:	edcd 8a06 	vstr	s17, [sp, #24]
 8013a2e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013a32:	ee26 8a88 	vmul.f32	s16, s13, s16
 8013a36:	edc3 7a00 	vstr	s15, [r3]
 8013a3a:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8013a3e:	edd3 7a00 	vldr	s15, [r3]
 8013a42:	ed8d 8a08 	vstr	s16, [sp, #32]
 8013a46:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8013a4a:	ed93 7a00 	vldr	s14, [r3]
 8013a4e:	ee39 9a67 	vsub.f32	s18, s18, s15
 8013a52:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8013a56:	ee69 7a09 	vmul.f32	s15, s18, s18
 8013a5a:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8013a5e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8013a62:	ed93 7a00 	vldr	s14, [r3]
 8013a66:	ee38 8a47 	vsub.f32	s16, s16, s14
 8013a6a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8013a6e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8013a72:	ee29 0a80 	vmul.f32	s0, s19, s0
 8013a76:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a7e:	dd79      	ble.n	8013b74 <MotionFX_propagate+0x274>
 8013a80:	eeb1 aae7 	vsqrt.f32	s20, s15
 8013a84:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8013a88:	eeb0 0a69 	vmov.f32	s0, s19
 8013a8c:	f004 ff68 	bl	8018960 <sinf>
 8013a90:	eeb0 7a40 	vmov.f32	s14, s0
 8013a94:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8013a98:	eeb0 0a69 	vmov.f32	s0, s19
 8013a9c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013aa0:	ee29 9a27 	vmul.f32	s18, s18, s15
 8013aa4:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013aa8:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8013aac:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8013ab0:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8013ab4:	f004 fd3a 	bl	801852c <cosf>
 8013ab8:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8013abc:	a809      	add	r0, sp, #36	; 0x24
 8013abe:	f604 1838 	addw	r8, r4, #2360	; 0x938
 8013ac2:	4632      	mov	r2, r6
 8013ac4:	4631      	mov	r1, r6
 8013ac6:	f7f9 fd71 	bl	800d5ac <qmult>
 8013aca:	edd8 6a00 	vldr	s13, [r8]
 8013ace:	edd6 5a00 	vldr	s11, [r6]
 8013ad2:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8013ad6:	f604 1934 	addw	r9, r4, #2356	; 0x934
 8013ada:	ed99 6a00 	vldr	s12, [r9]
 8013ade:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8013ae2:	4639      	mov	r1, r7
 8013ae4:	eee6 7a06 	vfma.f32	s15, s12, s12
 8013ae8:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 8013aec:	3301      	adds	r3, #1
 8013aee:	ed97 7a00 	vldr	s14, [r7]
 8013af2:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013af6:	aa13      	add	r2, sp, #76	; 0x4c
 8013af8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8013afc:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8013b00:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8013b04:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8013b08:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8013b0c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8013b10:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8013b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013b18:	edc6 5a00 	vstr	s11, [r6]
 8013b1c:	ed89 6a00 	vstr	s12, [r9]
 8013b20:	edc8 6a00 	vstr	s13, [r8]
 8013b24:	ed87 7a00 	vstr	s14, [r7]
 8013b28:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8013b2c:	f7f9 fab2 	bl	800d094 <rotVect>
 8013b30:	6833      	ldr	r3, [r6, #0]
 8013b32:	60eb      	str	r3, [r5, #12]
 8013b34:	f8d9 3000 	ldr.w	r3, [r9]
 8013b38:	f8d8 2000 	ldr.w	r2, [r8]
 8013b3c:	612b      	str	r3, [r5, #16]
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	61ab      	str	r3, [r5, #24]
 8013b42:	616a      	str	r2, [r5, #20]
 8013b44:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8013b48:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8013b4c:	e9cd 3200 	strd	r3, r2, [sp]
 8013b50:	4601      	mov	r1, r0
 8013b52:	f105 031c 	add.w	r3, r5, #28
 8013b56:	462a      	mov	r2, r5
 8013b58:	f105 000c 	add.w	r0, r5, #12
 8013b5c:	f7fa fe16 	bl	800e78c <output_update>
 8013b60:	b021      	add	sp, #132	; 0x84
 8013b62:	ecbd 8b06 	vpop	{d8-d10}
 8013b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b6a:	2301      	movs	r3, #1
 8013b6c:	7123      	strb	r3, [r4, #4]
 8013b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013b72:	e734      	b.n	80139de <MotionFX_propagate+0xde>
 8013b74:	ee68 8a80 	vmul.f32	s17, s17, s0
 8013b78:	ee29 9a00 	vmul.f32	s18, s18, s0
 8013b7c:	ee28 8a00 	vmul.f32	s16, s16, s0
 8013b80:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013b84:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8013b88:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8013b8c:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8013b90:	930c      	str	r3, [sp, #48]	; 0x30
 8013b92:	e793      	b.n	8013abc <MotionFX_propagate+0x1bc>
 8013b94:	2000021c 	.word	0x2000021c
 8013b98:	3c8efa35 	.word	0x3c8efa35
 8013b9c:	38d1b718 	.word	0x38d1b718

08013ba0 <atoi>:
 8013ba0:	220a      	movs	r2, #10
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	f001 bdbe 	b.w	8015724 <strtol>

08013ba8 <__cvt>:
 8013ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013bac:	ec55 4b10 	vmov	r4, r5, d0
 8013bb0:	2d00      	cmp	r5, #0
 8013bb2:	460e      	mov	r6, r1
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	462b      	mov	r3, r5
 8013bb8:	bfbb      	ittet	lt
 8013bba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013bbe:	461d      	movlt	r5, r3
 8013bc0:	2300      	movge	r3, #0
 8013bc2:	232d      	movlt	r3, #45	; 0x2d
 8013bc4:	700b      	strb	r3, [r1, #0]
 8013bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013bc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013bcc:	4691      	mov	r9, r2
 8013bce:	f023 0820 	bic.w	r8, r3, #32
 8013bd2:	bfbc      	itt	lt
 8013bd4:	4622      	movlt	r2, r4
 8013bd6:	4614      	movlt	r4, r2
 8013bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013bdc:	d005      	beq.n	8013bea <__cvt+0x42>
 8013bde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013be2:	d100      	bne.n	8013be6 <__cvt+0x3e>
 8013be4:	3601      	adds	r6, #1
 8013be6:	2102      	movs	r1, #2
 8013be8:	e000      	b.n	8013bec <__cvt+0x44>
 8013bea:	2103      	movs	r1, #3
 8013bec:	ab03      	add	r3, sp, #12
 8013bee:	9301      	str	r3, [sp, #4]
 8013bf0:	ab02      	add	r3, sp, #8
 8013bf2:	9300      	str	r3, [sp, #0]
 8013bf4:	ec45 4b10 	vmov	d0, r4, r5
 8013bf8:	4653      	mov	r3, sl
 8013bfa:	4632      	mov	r2, r6
 8013bfc:	f001 feac 	bl	8015958 <_dtoa_r>
 8013c00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013c04:	4607      	mov	r7, r0
 8013c06:	d102      	bne.n	8013c0e <__cvt+0x66>
 8013c08:	f019 0f01 	tst.w	r9, #1
 8013c0c:	d022      	beq.n	8013c54 <__cvt+0xac>
 8013c0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013c12:	eb07 0906 	add.w	r9, r7, r6
 8013c16:	d110      	bne.n	8013c3a <__cvt+0x92>
 8013c18:	783b      	ldrb	r3, [r7, #0]
 8013c1a:	2b30      	cmp	r3, #48	; 0x30
 8013c1c:	d10a      	bne.n	8013c34 <__cvt+0x8c>
 8013c1e:	2200      	movs	r2, #0
 8013c20:	2300      	movs	r3, #0
 8013c22:	4620      	mov	r0, r4
 8013c24:	4629      	mov	r1, r5
 8013c26:	f7ec ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c2a:	b918      	cbnz	r0, 8013c34 <__cvt+0x8c>
 8013c2c:	f1c6 0601 	rsb	r6, r6, #1
 8013c30:	f8ca 6000 	str.w	r6, [sl]
 8013c34:	f8da 3000 	ldr.w	r3, [sl]
 8013c38:	4499      	add	r9, r3
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	4620      	mov	r0, r4
 8013c40:	4629      	mov	r1, r5
 8013c42:	f7ec ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c46:	b108      	cbz	r0, 8013c4c <__cvt+0xa4>
 8013c48:	f8cd 900c 	str.w	r9, [sp, #12]
 8013c4c:	2230      	movs	r2, #48	; 0x30
 8013c4e:	9b03      	ldr	r3, [sp, #12]
 8013c50:	454b      	cmp	r3, r9
 8013c52:	d307      	bcc.n	8013c64 <__cvt+0xbc>
 8013c54:	9b03      	ldr	r3, [sp, #12]
 8013c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c58:	1bdb      	subs	r3, r3, r7
 8013c5a:	4638      	mov	r0, r7
 8013c5c:	6013      	str	r3, [r2, #0]
 8013c5e:	b004      	add	sp, #16
 8013c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c64:	1c59      	adds	r1, r3, #1
 8013c66:	9103      	str	r1, [sp, #12]
 8013c68:	701a      	strb	r2, [r3, #0]
 8013c6a:	e7f0      	b.n	8013c4e <__cvt+0xa6>

08013c6c <__exponent>:
 8013c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c6e:	4603      	mov	r3, r0
 8013c70:	2900      	cmp	r1, #0
 8013c72:	bfb8      	it	lt
 8013c74:	4249      	neglt	r1, r1
 8013c76:	f803 2b02 	strb.w	r2, [r3], #2
 8013c7a:	bfb4      	ite	lt
 8013c7c:	222d      	movlt	r2, #45	; 0x2d
 8013c7e:	222b      	movge	r2, #43	; 0x2b
 8013c80:	2909      	cmp	r1, #9
 8013c82:	7042      	strb	r2, [r0, #1]
 8013c84:	dd2a      	ble.n	8013cdc <__exponent+0x70>
 8013c86:	f10d 0207 	add.w	r2, sp, #7
 8013c8a:	4617      	mov	r7, r2
 8013c8c:	260a      	movs	r6, #10
 8013c8e:	4694      	mov	ip, r2
 8013c90:	fb91 f5f6 	sdiv	r5, r1, r6
 8013c94:	fb06 1415 	mls	r4, r6, r5, r1
 8013c98:	3430      	adds	r4, #48	; 0x30
 8013c9a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013c9e:	460c      	mov	r4, r1
 8013ca0:	2c63      	cmp	r4, #99	; 0x63
 8013ca2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8013ca6:	4629      	mov	r1, r5
 8013ca8:	dcf1      	bgt.n	8013c8e <__exponent+0x22>
 8013caa:	3130      	adds	r1, #48	; 0x30
 8013cac:	f1ac 0402 	sub.w	r4, ip, #2
 8013cb0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013cb4:	1c41      	adds	r1, r0, #1
 8013cb6:	4622      	mov	r2, r4
 8013cb8:	42ba      	cmp	r2, r7
 8013cba:	d30a      	bcc.n	8013cd2 <__exponent+0x66>
 8013cbc:	f10d 0209 	add.w	r2, sp, #9
 8013cc0:	eba2 020c 	sub.w	r2, r2, ip
 8013cc4:	42bc      	cmp	r4, r7
 8013cc6:	bf88      	it	hi
 8013cc8:	2200      	movhi	r2, #0
 8013cca:	4413      	add	r3, r2
 8013ccc:	1a18      	subs	r0, r3, r0
 8013cce:	b003      	add	sp, #12
 8013cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cd2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013cd6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013cda:	e7ed      	b.n	8013cb8 <__exponent+0x4c>
 8013cdc:	2330      	movs	r3, #48	; 0x30
 8013cde:	3130      	adds	r1, #48	; 0x30
 8013ce0:	7083      	strb	r3, [r0, #2]
 8013ce2:	70c1      	strb	r1, [r0, #3]
 8013ce4:	1d03      	adds	r3, r0, #4
 8013ce6:	e7f1      	b.n	8013ccc <__exponent+0x60>

08013ce8 <_printf_float>:
 8013ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cec:	ed2d 8b02 	vpush	{d8}
 8013cf0:	b08d      	sub	sp, #52	; 0x34
 8013cf2:	460c      	mov	r4, r1
 8013cf4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013cf8:	4616      	mov	r6, r2
 8013cfa:	461f      	mov	r7, r3
 8013cfc:	4605      	mov	r5, r0
 8013cfe:	f001 fd53 	bl	80157a8 <_localeconv_r>
 8013d02:	f8d0 a000 	ldr.w	sl, [r0]
 8013d06:	4650      	mov	r0, sl
 8013d08:	f7ec fab2 	bl	8000270 <strlen>
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8013d10:	6823      	ldr	r3, [r4, #0]
 8013d12:	9305      	str	r3, [sp, #20]
 8013d14:	f8d8 3000 	ldr.w	r3, [r8]
 8013d18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013d1c:	3307      	adds	r3, #7
 8013d1e:	f023 0307 	bic.w	r3, r3, #7
 8013d22:	f103 0208 	add.w	r2, r3, #8
 8013d26:	f8c8 2000 	str.w	r2, [r8]
 8013d2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013d2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013d32:	9307      	str	r3, [sp, #28]
 8013d34:	f8cd 8018 	str.w	r8, [sp, #24]
 8013d38:	ee08 0a10 	vmov	s16, r0
 8013d3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8013d40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d44:	4b9e      	ldr	r3, [pc, #632]	; (8013fc0 <_printf_float+0x2d8>)
 8013d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d4a:	f7ec feef 	bl	8000b2c <__aeabi_dcmpun>
 8013d4e:	bb88      	cbnz	r0, 8013db4 <_printf_float+0xcc>
 8013d50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d54:	4b9a      	ldr	r3, [pc, #616]	; (8013fc0 <_printf_float+0x2d8>)
 8013d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d5a:	f7ec fec9 	bl	8000af0 <__aeabi_dcmple>
 8013d5e:	bb48      	cbnz	r0, 8013db4 <_printf_float+0xcc>
 8013d60:	2200      	movs	r2, #0
 8013d62:	2300      	movs	r3, #0
 8013d64:	4640      	mov	r0, r8
 8013d66:	4649      	mov	r1, r9
 8013d68:	f7ec feb8 	bl	8000adc <__aeabi_dcmplt>
 8013d6c:	b110      	cbz	r0, 8013d74 <_printf_float+0x8c>
 8013d6e:	232d      	movs	r3, #45	; 0x2d
 8013d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d74:	4a93      	ldr	r2, [pc, #588]	; (8013fc4 <_printf_float+0x2dc>)
 8013d76:	4b94      	ldr	r3, [pc, #592]	; (8013fc8 <_printf_float+0x2e0>)
 8013d78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013d7c:	bf94      	ite	ls
 8013d7e:	4690      	movls	r8, r2
 8013d80:	4698      	movhi	r8, r3
 8013d82:	2303      	movs	r3, #3
 8013d84:	6123      	str	r3, [r4, #16]
 8013d86:	9b05      	ldr	r3, [sp, #20]
 8013d88:	f023 0304 	bic.w	r3, r3, #4
 8013d8c:	6023      	str	r3, [r4, #0]
 8013d8e:	f04f 0900 	mov.w	r9, #0
 8013d92:	9700      	str	r7, [sp, #0]
 8013d94:	4633      	mov	r3, r6
 8013d96:	aa0b      	add	r2, sp, #44	; 0x2c
 8013d98:	4621      	mov	r1, r4
 8013d9a:	4628      	mov	r0, r5
 8013d9c:	f000 f9da 	bl	8014154 <_printf_common>
 8013da0:	3001      	adds	r0, #1
 8013da2:	f040 8090 	bne.w	8013ec6 <_printf_float+0x1de>
 8013da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013daa:	b00d      	add	sp, #52	; 0x34
 8013dac:	ecbd 8b02 	vpop	{d8}
 8013db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013db4:	4642      	mov	r2, r8
 8013db6:	464b      	mov	r3, r9
 8013db8:	4640      	mov	r0, r8
 8013dba:	4649      	mov	r1, r9
 8013dbc:	f7ec feb6 	bl	8000b2c <__aeabi_dcmpun>
 8013dc0:	b140      	cbz	r0, 8013dd4 <_printf_float+0xec>
 8013dc2:	464b      	mov	r3, r9
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	bfbc      	itt	lt
 8013dc8:	232d      	movlt	r3, #45	; 0x2d
 8013dca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013dce:	4a7f      	ldr	r2, [pc, #508]	; (8013fcc <_printf_float+0x2e4>)
 8013dd0:	4b7f      	ldr	r3, [pc, #508]	; (8013fd0 <_printf_float+0x2e8>)
 8013dd2:	e7d1      	b.n	8013d78 <_printf_float+0x90>
 8013dd4:	6863      	ldr	r3, [r4, #4]
 8013dd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013dda:	9206      	str	r2, [sp, #24]
 8013ddc:	1c5a      	adds	r2, r3, #1
 8013dde:	d13f      	bne.n	8013e60 <_printf_float+0x178>
 8013de0:	2306      	movs	r3, #6
 8013de2:	6063      	str	r3, [r4, #4]
 8013de4:	9b05      	ldr	r3, [sp, #20]
 8013de6:	6861      	ldr	r1, [r4, #4]
 8013de8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013dec:	2300      	movs	r3, #0
 8013dee:	9303      	str	r3, [sp, #12]
 8013df0:	ab0a      	add	r3, sp, #40	; 0x28
 8013df2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013df6:	ab09      	add	r3, sp, #36	; 0x24
 8013df8:	ec49 8b10 	vmov	d0, r8, r9
 8013dfc:	9300      	str	r3, [sp, #0]
 8013dfe:	6022      	str	r2, [r4, #0]
 8013e00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013e04:	4628      	mov	r0, r5
 8013e06:	f7ff fecf 	bl	8013ba8 <__cvt>
 8013e0a:	9b06      	ldr	r3, [sp, #24]
 8013e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e0e:	2b47      	cmp	r3, #71	; 0x47
 8013e10:	4680      	mov	r8, r0
 8013e12:	d108      	bne.n	8013e26 <_printf_float+0x13e>
 8013e14:	1cc8      	adds	r0, r1, #3
 8013e16:	db02      	blt.n	8013e1e <_printf_float+0x136>
 8013e18:	6863      	ldr	r3, [r4, #4]
 8013e1a:	4299      	cmp	r1, r3
 8013e1c:	dd41      	ble.n	8013ea2 <_printf_float+0x1ba>
 8013e1e:	f1ab 0302 	sub.w	r3, fp, #2
 8013e22:	fa5f fb83 	uxtb.w	fp, r3
 8013e26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013e2a:	d820      	bhi.n	8013e6e <_printf_float+0x186>
 8013e2c:	3901      	subs	r1, #1
 8013e2e:	465a      	mov	r2, fp
 8013e30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013e34:	9109      	str	r1, [sp, #36]	; 0x24
 8013e36:	f7ff ff19 	bl	8013c6c <__exponent>
 8013e3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e3c:	1813      	adds	r3, r2, r0
 8013e3e:	2a01      	cmp	r2, #1
 8013e40:	4681      	mov	r9, r0
 8013e42:	6123      	str	r3, [r4, #16]
 8013e44:	dc02      	bgt.n	8013e4c <_printf_float+0x164>
 8013e46:	6822      	ldr	r2, [r4, #0]
 8013e48:	07d2      	lsls	r2, r2, #31
 8013e4a:	d501      	bpl.n	8013e50 <_printf_float+0x168>
 8013e4c:	3301      	adds	r3, #1
 8013e4e:	6123      	str	r3, [r4, #16]
 8013e50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d09c      	beq.n	8013d92 <_printf_float+0xaa>
 8013e58:	232d      	movs	r3, #45	; 0x2d
 8013e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e5e:	e798      	b.n	8013d92 <_printf_float+0xaa>
 8013e60:	9a06      	ldr	r2, [sp, #24]
 8013e62:	2a47      	cmp	r2, #71	; 0x47
 8013e64:	d1be      	bne.n	8013de4 <_printf_float+0xfc>
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d1bc      	bne.n	8013de4 <_printf_float+0xfc>
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	e7b9      	b.n	8013de2 <_printf_float+0xfa>
 8013e6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013e72:	d118      	bne.n	8013ea6 <_printf_float+0x1be>
 8013e74:	2900      	cmp	r1, #0
 8013e76:	6863      	ldr	r3, [r4, #4]
 8013e78:	dd0b      	ble.n	8013e92 <_printf_float+0x1aa>
 8013e7a:	6121      	str	r1, [r4, #16]
 8013e7c:	b913      	cbnz	r3, 8013e84 <_printf_float+0x19c>
 8013e7e:	6822      	ldr	r2, [r4, #0]
 8013e80:	07d0      	lsls	r0, r2, #31
 8013e82:	d502      	bpl.n	8013e8a <_printf_float+0x1a2>
 8013e84:	3301      	adds	r3, #1
 8013e86:	440b      	add	r3, r1
 8013e88:	6123      	str	r3, [r4, #16]
 8013e8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8013e8c:	f04f 0900 	mov.w	r9, #0
 8013e90:	e7de      	b.n	8013e50 <_printf_float+0x168>
 8013e92:	b913      	cbnz	r3, 8013e9a <_printf_float+0x1b2>
 8013e94:	6822      	ldr	r2, [r4, #0]
 8013e96:	07d2      	lsls	r2, r2, #31
 8013e98:	d501      	bpl.n	8013e9e <_printf_float+0x1b6>
 8013e9a:	3302      	adds	r3, #2
 8013e9c:	e7f4      	b.n	8013e88 <_printf_float+0x1a0>
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	e7f2      	b.n	8013e88 <_printf_float+0x1a0>
 8013ea2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ea8:	4299      	cmp	r1, r3
 8013eaa:	db05      	blt.n	8013eb8 <_printf_float+0x1d0>
 8013eac:	6823      	ldr	r3, [r4, #0]
 8013eae:	6121      	str	r1, [r4, #16]
 8013eb0:	07d8      	lsls	r0, r3, #31
 8013eb2:	d5ea      	bpl.n	8013e8a <_printf_float+0x1a2>
 8013eb4:	1c4b      	adds	r3, r1, #1
 8013eb6:	e7e7      	b.n	8013e88 <_printf_float+0x1a0>
 8013eb8:	2900      	cmp	r1, #0
 8013eba:	bfd4      	ite	le
 8013ebc:	f1c1 0202 	rsble	r2, r1, #2
 8013ec0:	2201      	movgt	r2, #1
 8013ec2:	4413      	add	r3, r2
 8013ec4:	e7e0      	b.n	8013e88 <_printf_float+0x1a0>
 8013ec6:	6823      	ldr	r3, [r4, #0]
 8013ec8:	055a      	lsls	r2, r3, #21
 8013eca:	d407      	bmi.n	8013edc <_printf_float+0x1f4>
 8013ecc:	6923      	ldr	r3, [r4, #16]
 8013ece:	4642      	mov	r2, r8
 8013ed0:	4631      	mov	r1, r6
 8013ed2:	4628      	mov	r0, r5
 8013ed4:	47b8      	blx	r7
 8013ed6:	3001      	adds	r0, #1
 8013ed8:	d12c      	bne.n	8013f34 <_printf_float+0x24c>
 8013eda:	e764      	b.n	8013da6 <_printf_float+0xbe>
 8013edc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013ee0:	f240 80e0 	bls.w	80140a4 <_printf_float+0x3bc>
 8013ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013ee8:	2200      	movs	r2, #0
 8013eea:	2300      	movs	r3, #0
 8013eec:	f7ec fdec 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	d034      	beq.n	8013f5e <_printf_float+0x276>
 8013ef4:	4a37      	ldr	r2, [pc, #220]	; (8013fd4 <_printf_float+0x2ec>)
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	4631      	mov	r1, r6
 8013efa:	4628      	mov	r0, r5
 8013efc:	47b8      	blx	r7
 8013efe:	3001      	adds	r0, #1
 8013f00:	f43f af51 	beq.w	8013da6 <_printf_float+0xbe>
 8013f04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	db02      	blt.n	8013f12 <_printf_float+0x22a>
 8013f0c:	6823      	ldr	r3, [r4, #0]
 8013f0e:	07d8      	lsls	r0, r3, #31
 8013f10:	d510      	bpl.n	8013f34 <_printf_float+0x24c>
 8013f12:	ee18 3a10 	vmov	r3, s16
 8013f16:	4652      	mov	r2, sl
 8013f18:	4631      	mov	r1, r6
 8013f1a:	4628      	mov	r0, r5
 8013f1c:	47b8      	blx	r7
 8013f1e:	3001      	adds	r0, #1
 8013f20:	f43f af41 	beq.w	8013da6 <_printf_float+0xbe>
 8013f24:	f04f 0800 	mov.w	r8, #0
 8013f28:	f104 091a 	add.w	r9, r4, #26
 8013f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f2e:	3b01      	subs	r3, #1
 8013f30:	4543      	cmp	r3, r8
 8013f32:	dc09      	bgt.n	8013f48 <_printf_float+0x260>
 8013f34:	6823      	ldr	r3, [r4, #0]
 8013f36:	079b      	lsls	r3, r3, #30
 8013f38:	f100 8107 	bmi.w	801414a <_printf_float+0x462>
 8013f3c:	68e0      	ldr	r0, [r4, #12]
 8013f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f40:	4298      	cmp	r0, r3
 8013f42:	bfb8      	it	lt
 8013f44:	4618      	movlt	r0, r3
 8013f46:	e730      	b.n	8013daa <_printf_float+0xc2>
 8013f48:	2301      	movs	r3, #1
 8013f4a:	464a      	mov	r2, r9
 8013f4c:	4631      	mov	r1, r6
 8013f4e:	4628      	mov	r0, r5
 8013f50:	47b8      	blx	r7
 8013f52:	3001      	adds	r0, #1
 8013f54:	f43f af27 	beq.w	8013da6 <_printf_float+0xbe>
 8013f58:	f108 0801 	add.w	r8, r8, #1
 8013f5c:	e7e6      	b.n	8013f2c <_printf_float+0x244>
 8013f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	dc39      	bgt.n	8013fd8 <_printf_float+0x2f0>
 8013f64:	4a1b      	ldr	r2, [pc, #108]	; (8013fd4 <_printf_float+0x2ec>)
 8013f66:	2301      	movs	r3, #1
 8013f68:	4631      	mov	r1, r6
 8013f6a:	4628      	mov	r0, r5
 8013f6c:	47b8      	blx	r7
 8013f6e:	3001      	adds	r0, #1
 8013f70:	f43f af19 	beq.w	8013da6 <_printf_float+0xbe>
 8013f74:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013f78:	4313      	orrs	r3, r2
 8013f7a:	d102      	bne.n	8013f82 <_printf_float+0x29a>
 8013f7c:	6823      	ldr	r3, [r4, #0]
 8013f7e:	07d9      	lsls	r1, r3, #31
 8013f80:	d5d8      	bpl.n	8013f34 <_printf_float+0x24c>
 8013f82:	ee18 3a10 	vmov	r3, s16
 8013f86:	4652      	mov	r2, sl
 8013f88:	4631      	mov	r1, r6
 8013f8a:	4628      	mov	r0, r5
 8013f8c:	47b8      	blx	r7
 8013f8e:	3001      	adds	r0, #1
 8013f90:	f43f af09 	beq.w	8013da6 <_printf_float+0xbe>
 8013f94:	f04f 0900 	mov.w	r9, #0
 8013f98:	f104 0a1a 	add.w	sl, r4, #26
 8013f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f9e:	425b      	negs	r3, r3
 8013fa0:	454b      	cmp	r3, r9
 8013fa2:	dc01      	bgt.n	8013fa8 <_printf_float+0x2c0>
 8013fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fa6:	e792      	b.n	8013ece <_printf_float+0x1e6>
 8013fa8:	2301      	movs	r3, #1
 8013faa:	4652      	mov	r2, sl
 8013fac:	4631      	mov	r1, r6
 8013fae:	4628      	mov	r0, r5
 8013fb0:	47b8      	blx	r7
 8013fb2:	3001      	adds	r0, #1
 8013fb4:	f43f aef7 	beq.w	8013da6 <_printf_float+0xbe>
 8013fb8:	f109 0901 	add.w	r9, r9, #1
 8013fbc:	e7ee      	b.n	8013f9c <_printf_float+0x2b4>
 8013fbe:	bf00      	nop
 8013fc0:	7fefffff 	.word	0x7fefffff
 8013fc4:	0801ad90 	.word	0x0801ad90
 8013fc8:	0801ad94 	.word	0x0801ad94
 8013fcc:	0801ad98 	.word	0x0801ad98
 8013fd0:	0801ad9c 	.word	0x0801ad9c
 8013fd4:	0801ada0 	.word	0x0801ada0
 8013fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	bfa8      	it	ge
 8013fe0:	461a      	movge	r2, r3
 8013fe2:	2a00      	cmp	r2, #0
 8013fe4:	4691      	mov	r9, r2
 8013fe6:	dc37      	bgt.n	8014058 <_printf_float+0x370>
 8013fe8:	f04f 0b00 	mov.w	fp, #0
 8013fec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013ff0:	f104 021a 	add.w	r2, r4, #26
 8013ff4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013ff6:	9305      	str	r3, [sp, #20]
 8013ff8:	eba3 0309 	sub.w	r3, r3, r9
 8013ffc:	455b      	cmp	r3, fp
 8013ffe:	dc33      	bgt.n	8014068 <_printf_float+0x380>
 8014000:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014004:	429a      	cmp	r2, r3
 8014006:	db3b      	blt.n	8014080 <_printf_float+0x398>
 8014008:	6823      	ldr	r3, [r4, #0]
 801400a:	07da      	lsls	r2, r3, #31
 801400c:	d438      	bmi.n	8014080 <_printf_float+0x398>
 801400e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014012:	eba2 0903 	sub.w	r9, r2, r3
 8014016:	9b05      	ldr	r3, [sp, #20]
 8014018:	1ad2      	subs	r2, r2, r3
 801401a:	4591      	cmp	r9, r2
 801401c:	bfa8      	it	ge
 801401e:	4691      	movge	r9, r2
 8014020:	f1b9 0f00 	cmp.w	r9, #0
 8014024:	dc35      	bgt.n	8014092 <_printf_float+0x3aa>
 8014026:	f04f 0800 	mov.w	r8, #0
 801402a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801402e:	f104 0a1a 	add.w	sl, r4, #26
 8014032:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014036:	1a9b      	subs	r3, r3, r2
 8014038:	eba3 0309 	sub.w	r3, r3, r9
 801403c:	4543      	cmp	r3, r8
 801403e:	f77f af79 	ble.w	8013f34 <_printf_float+0x24c>
 8014042:	2301      	movs	r3, #1
 8014044:	4652      	mov	r2, sl
 8014046:	4631      	mov	r1, r6
 8014048:	4628      	mov	r0, r5
 801404a:	47b8      	blx	r7
 801404c:	3001      	adds	r0, #1
 801404e:	f43f aeaa 	beq.w	8013da6 <_printf_float+0xbe>
 8014052:	f108 0801 	add.w	r8, r8, #1
 8014056:	e7ec      	b.n	8014032 <_printf_float+0x34a>
 8014058:	4613      	mov	r3, r2
 801405a:	4631      	mov	r1, r6
 801405c:	4642      	mov	r2, r8
 801405e:	4628      	mov	r0, r5
 8014060:	47b8      	blx	r7
 8014062:	3001      	adds	r0, #1
 8014064:	d1c0      	bne.n	8013fe8 <_printf_float+0x300>
 8014066:	e69e      	b.n	8013da6 <_printf_float+0xbe>
 8014068:	2301      	movs	r3, #1
 801406a:	4631      	mov	r1, r6
 801406c:	4628      	mov	r0, r5
 801406e:	9205      	str	r2, [sp, #20]
 8014070:	47b8      	blx	r7
 8014072:	3001      	adds	r0, #1
 8014074:	f43f ae97 	beq.w	8013da6 <_printf_float+0xbe>
 8014078:	9a05      	ldr	r2, [sp, #20]
 801407a:	f10b 0b01 	add.w	fp, fp, #1
 801407e:	e7b9      	b.n	8013ff4 <_printf_float+0x30c>
 8014080:	ee18 3a10 	vmov	r3, s16
 8014084:	4652      	mov	r2, sl
 8014086:	4631      	mov	r1, r6
 8014088:	4628      	mov	r0, r5
 801408a:	47b8      	blx	r7
 801408c:	3001      	adds	r0, #1
 801408e:	d1be      	bne.n	801400e <_printf_float+0x326>
 8014090:	e689      	b.n	8013da6 <_printf_float+0xbe>
 8014092:	9a05      	ldr	r2, [sp, #20]
 8014094:	464b      	mov	r3, r9
 8014096:	4442      	add	r2, r8
 8014098:	4631      	mov	r1, r6
 801409a:	4628      	mov	r0, r5
 801409c:	47b8      	blx	r7
 801409e:	3001      	adds	r0, #1
 80140a0:	d1c1      	bne.n	8014026 <_printf_float+0x33e>
 80140a2:	e680      	b.n	8013da6 <_printf_float+0xbe>
 80140a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80140a6:	2a01      	cmp	r2, #1
 80140a8:	dc01      	bgt.n	80140ae <_printf_float+0x3c6>
 80140aa:	07db      	lsls	r3, r3, #31
 80140ac:	d53a      	bpl.n	8014124 <_printf_float+0x43c>
 80140ae:	2301      	movs	r3, #1
 80140b0:	4642      	mov	r2, r8
 80140b2:	4631      	mov	r1, r6
 80140b4:	4628      	mov	r0, r5
 80140b6:	47b8      	blx	r7
 80140b8:	3001      	adds	r0, #1
 80140ba:	f43f ae74 	beq.w	8013da6 <_printf_float+0xbe>
 80140be:	ee18 3a10 	vmov	r3, s16
 80140c2:	4652      	mov	r2, sl
 80140c4:	4631      	mov	r1, r6
 80140c6:	4628      	mov	r0, r5
 80140c8:	47b8      	blx	r7
 80140ca:	3001      	adds	r0, #1
 80140cc:	f43f ae6b 	beq.w	8013da6 <_printf_float+0xbe>
 80140d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80140d4:	2200      	movs	r2, #0
 80140d6:	2300      	movs	r3, #0
 80140d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80140dc:	f7ec fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80140e0:	b9d8      	cbnz	r0, 801411a <_printf_float+0x432>
 80140e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80140e6:	f108 0201 	add.w	r2, r8, #1
 80140ea:	4631      	mov	r1, r6
 80140ec:	4628      	mov	r0, r5
 80140ee:	47b8      	blx	r7
 80140f0:	3001      	adds	r0, #1
 80140f2:	d10e      	bne.n	8014112 <_printf_float+0x42a>
 80140f4:	e657      	b.n	8013da6 <_printf_float+0xbe>
 80140f6:	2301      	movs	r3, #1
 80140f8:	4652      	mov	r2, sl
 80140fa:	4631      	mov	r1, r6
 80140fc:	4628      	mov	r0, r5
 80140fe:	47b8      	blx	r7
 8014100:	3001      	adds	r0, #1
 8014102:	f43f ae50 	beq.w	8013da6 <_printf_float+0xbe>
 8014106:	f108 0801 	add.w	r8, r8, #1
 801410a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801410c:	3b01      	subs	r3, #1
 801410e:	4543      	cmp	r3, r8
 8014110:	dcf1      	bgt.n	80140f6 <_printf_float+0x40e>
 8014112:	464b      	mov	r3, r9
 8014114:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014118:	e6da      	b.n	8013ed0 <_printf_float+0x1e8>
 801411a:	f04f 0800 	mov.w	r8, #0
 801411e:	f104 0a1a 	add.w	sl, r4, #26
 8014122:	e7f2      	b.n	801410a <_printf_float+0x422>
 8014124:	2301      	movs	r3, #1
 8014126:	4642      	mov	r2, r8
 8014128:	e7df      	b.n	80140ea <_printf_float+0x402>
 801412a:	2301      	movs	r3, #1
 801412c:	464a      	mov	r2, r9
 801412e:	4631      	mov	r1, r6
 8014130:	4628      	mov	r0, r5
 8014132:	47b8      	blx	r7
 8014134:	3001      	adds	r0, #1
 8014136:	f43f ae36 	beq.w	8013da6 <_printf_float+0xbe>
 801413a:	f108 0801 	add.w	r8, r8, #1
 801413e:	68e3      	ldr	r3, [r4, #12]
 8014140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014142:	1a5b      	subs	r3, r3, r1
 8014144:	4543      	cmp	r3, r8
 8014146:	dcf0      	bgt.n	801412a <_printf_float+0x442>
 8014148:	e6f8      	b.n	8013f3c <_printf_float+0x254>
 801414a:	f04f 0800 	mov.w	r8, #0
 801414e:	f104 0919 	add.w	r9, r4, #25
 8014152:	e7f4      	b.n	801413e <_printf_float+0x456>

08014154 <_printf_common>:
 8014154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014158:	4616      	mov	r6, r2
 801415a:	4699      	mov	r9, r3
 801415c:	688a      	ldr	r2, [r1, #8]
 801415e:	690b      	ldr	r3, [r1, #16]
 8014160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014164:	4293      	cmp	r3, r2
 8014166:	bfb8      	it	lt
 8014168:	4613      	movlt	r3, r2
 801416a:	6033      	str	r3, [r6, #0]
 801416c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014170:	4607      	mov	r7, r0
 8014172:	460c      	mov	r4, r1
 8014174:	b10a      	cbz	r2, 801417a <_printf_common+0x26>
 8014176:	3301      	adds	r3, #1
 8014178:	6033      	str	r3, [r6, #0]
 801417a:	6823      	ldr	r3, [r4, #0]
 801417c:	0699      	lsls	r1, r3, #26
 801417e:	bf42      	ittt	mi
 8014180:	6833      	ldrmi	r3, [r6, #0]
 8014182:	3302      	addmi	r3, #2
 8014184:	6033      	strmi	r3, [r6, #0]
 8014186:	6825      	ldr	r5, [r4, #0]
 8014188:	f015 0506 	ands.w	r5, r5, #6
 801418c:	d106      	bne.n	801419c <_printf_common+0x48>
 801418e:	f104 0a19 	add.w	sl, r4, #25
 8014192:	68e3      	ldr	r3, [r4, #12]
 8014194:	6832      	ldr	r2, [r6, #0]
 8014196:	1a9b      	subs	r3, r3, r2
 8014198:	42ab      	cmp	r3, r5
 801419a:	dc26      	bgt.n	80141ea <_printf_common+0x96>
 801419c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80141a0:	1e13      	subs	r3, r2, #0
 80141a2:	6822      	ldr	r2, [r4, #0]
 80141a4:	bf18      	it	ne
 80141a6:	2301      	movne	r3, #1
 80141a8:	0692      	lsls	r2, r2, #26
 80141aa:	d42b      	bmi.n	8014204 <_printf_common+0xb0>
 80141ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80141b0:	4649      	mov	r1, r9
 80141b2:	4638      	mov	r0, r7
 80141b4:	47c0      	blx	r8
 80141b6:	3001      	adds	r0, #1
 80141b8:	d01e      	beq.n	80141f8 <_printf_common+0xa4>
 80141ba:	6823      	ldr	r3, [r4, #0]
 80141bc:	6922      	ldr	r2, [r4, #16]
 80141be:	f003 0306 	and.w	r3, r3, #6
 80141c2:	2b04      	cmp	r3, #4
 80141c4:	bf02      	ittt	eq
 80141c6:	68e5      	ldreq	r5, [r4, #12]
 80141c8:	6833      	ldreq	r3, [r6, #0]
 80141ca:	1aed      	subeq	r5, r5, r3
 80141cc:	68a3      	ldr	r3, [r4, #8]
 80141ce:	bf0c      	ite	eq
 80141d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80141d4:	2500      	movne	r5, #0
 80141d6:	4293      	cmp	r3, r2
 80141d8:	bfc4      	itt	gt
 80141da:	1a9b      	subgt	r3, r3, r2
 80141dc:	18ed      	addgt	r5, r5, r3
 80141de:	2600      	movs	r6, #0
 80141e0:	341a      	adds	r4, #26
 80141e2:	42b5      	cmp	r5, r6
 80141e4:	d11a      	bne.n	801421c <_printf_common+0xc8>
 80141e6:	2000      	movs	r0, #0
 80141e8:	e008      	b.n	80141fc <_printf_common+0xa8>
 80141ea:	2301      	movs	r3, #1
 80141ec:	4652      	mov	r2, sl
 80141ee:	4649      	mov	r1, r9
 80141f0:	4638      	mov	r0, r7
 80141f2:	47c0      	blx	r8
 80141f4:	3001      	adds	r0, #1
 80141f6:	d103      	bne.n	8014200 <_printf_common+0xac>
 80141f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014200:	3501      	adds	r5, #1
 8014202:	e7c6      	b.n	8014192 <_printf_common+0x3e>
 8014204:	18e1      	adds	r1, r4, r3
 8014206:	1c5a      	adds	r2, r3, #1
 8014208:	2030      	movs	r0, #48	; 0x30
 801420a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801420e:	4422      	add	r2, r4
 8014210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014218:	3302      	adds	r3, #2
 801421a:	e7c7      	b.n	80141ac <_printf_common+0x58>
 801421c:	2301      	movs	r3, #1
 801421e:	4622      	mov	r2, r4
 8014220:	4649      	mov	r1, r9
 8014222:	4638      	mov	r0, r7
 8014224:	47c0      	blx	r8
 8014226:	3001      	adds	r0, #1
 8014228:	d0e6      	beq.n	80141f8 <_printf_common+0xa4>
 801422a:	3601      	adds	r6, #1
 801422c:	e7d9      	b.n	80141e2 <_printf_common+0x8e>
	...

08014230 <_printf_i>:
 8014230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014234:	7e0f      	ldrb	r7, [r1, #24]
 8014236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014238:	2f78      	cmp	r7, #120	; 0x78
 801423a:	4691      	mov	r9, r2
 801423c:	4680      	mov	r8, r0
 801423e:	460c      	mov	r4, r1
 8014240:	469a      	mov	sl, r3
 8014242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014246:	d807      	bhi.n	8014258 <_printf_i+0x28>
 8014248:	2f62      	cmp	r7, #98	; 0x62
 801424a:	d80a      	bhi.n	8014262 <_printf_i+0x32>
 801424c:	2f00      	cmp	r7, #0
 801424e:	f000 80d4 	beq.w	80143fa <_printf_i+0x1ca>
 8014252:	2f58      	cmp	r7, #88	; 0x58
 8014254:	f000 80c0 	beq.w	80143d8 <_printf_i+0x1a8>
 8014258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801425c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014260:	e03a      	b.n	80142d8 <_printf_i+0xa8>
 8014262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014266:	2b15      	cmp	r3, #21
 8014268:	d8f6      	bhi.n	8014258 <_printf_i+0x28>
 801426a:	a101      	add	r1, pc, #4	; (adr r1, 8014270 <_printf_i+0x40>)
 801426c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014270:	080142c9 	.word	0x080142c9
 8014274:	080142dd 	.word	0x080142dd
 8014278:	08014259 	.word	0x08014259
 801427c:	08014259 	.word	0x08014259
 8014280:	08014259 	.word	0x08014259
 8014284:	08014259 	.word	0x08014259
 8014288:	080142dd 	.word	0x080142dd
 801428c:	08014259 	.word	0x08014259
 8014290:	08014259 	.word	0x08014259
 8014294:	08014259 	.word	0x08014259
 8014298:	08014259 	.word	0x08014259
 801429c:	080143e1 	.word	0x080143e1
 80142a0:	08014309 	.word	0x08014309
 80142a4:	0801439b 	.word	0x0801439b
 80142a8:	08014259 	.word	0x08014259
 80142ac:	08014259 	.word	0x08014259
 80142b0:	08014403 	.word	0x08014403
 80142b4:	08014259 	.word	0x08014259
 80142b8:	08014309 	.word	0x08014309
 80142bc:	08014259 	.word	0x08014259
 80142c0:	08014259 	.word	0x08014259
 80142c4:	080143a3 	.word	0x080143a3
 80142c8:	682b      	ldr	r3, [r5, #0]
 80142ca:	1d1a      	adds	r2, r3, #4
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	602a      	str	r2, [r5, #0]
 80142d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80142d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80142d8:	2301      	movs	r3, #1
 80142da:	e09f      	b.n	801441c <_printf_i+0x1ec>
 80142dc:	6820      	ldr	r0, [r4, #0]
 80142de:	682b      	ldr	r3, [r5, #0]
 80142e0:	0607      	lsls	r7, r0, #24
 80142e2:	f103 0104 	add.w	r1, r3, #4
 80142e6:	6029      	str	r1, [r5, #0]
 80142e8:	d501      	bpl.n	80142ee <_printf_i+0xbe>
 80142ea:	681e      	ldr	r6, [r3, #0]
 80142ec:	e003      	b.n	80142f6 <_printf_i+0xc6>
 80142ee:	0646      	lsls	r6, r0, #25
 80142f0:	d5fb      	bpl.n	80142ea <_printf_i+0xba>
 80142f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80142f6:	2e00      	cmp	r6, #0
 80142f8:	da03      	bge.n	8014302 <_printf_i+0xd2>
 80142fa:	232d      	movs	r3, #45	; 0x2d
 80142fc:	4276      	negs	r6, r6
 80142fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014302:	485a      	ldr	r0, [pc, #360]	; (801446c <_printf_i+0x23c>)
 8014304:	230a      	movs	r3, #10
 8014306:	e012      	b.n	801432e <_printf_i+0xfe>
 8014308:	682b      	ldr	r3, [r5, #0]
 801430a:	6820      	ldr	r0, [r4, #0]
 801430c:	1d19      	adds	r1, r3, #4
 801430e:	6029      	str	r1, [r5, #0]
 8014310:	0605      	lsls	r5, r0, #24
 8014312:	d501      	bpl.n	8014318 <_printf_i+0xe8>
 8014314:	681e      	ldr	r6, [r3, #0]
 8014316:	e002      	b.n	801431e <_printf_i+0xee>
 8014318:	0641      	lsls	r1, r0, #25
 801431a:	d5fb      	bpl.n	8014314 <_printf_i+0xe4>
 801431c:	881e      	ldrh	r6, [r3, #0]
 801431e:	4853      	ldr	r0, [pc, #332]	; (801446c <_printf_i+0x23c>)
 8014320:	2f6f      	cmp	r7, #111	; 0x6f
 8014322:	bf0c      	ite	eq
 8014324:	2308      	moveq	r3, #8
 8014326:	230a      	movne	r3, #10
 8014328:	2100      	movs	r1, #0
 801432a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801432e:	6865      	ldr	r5, [r4, #4]
 8014330:	60a5      	str	r5, [r4, #8]
 8014332:	2d00      	cmp	r5, #0
 8014334:	bfa2      	ittt	ge
 8014336:	6821      	ldrge	r1, [r4, #0]
 8014338:	f021 0104 	bicge.w	r1, r1, #4
 801433c:	6021      	strge	r1, [r4, #0]
 801433e:	b90e      	cbnz	r6, 8014344 <_printf_i+0x114>
 8014340:	2d00      	cmp	r5, #0
 8014342:	d04b      	beq.n	80143dc <_printf_i+0x1ac>
 8014344:	4615      	mov	r5, r2
 8014346:	fbb6 f1f3 	udiv	r1, r6, r3
 801434a:	fb03 6711 	mls	r7, r3, r1, r6
 801434e:	5dc7      	ldrb	r7, [r0, r7]
 8014350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014354:	4637      	mov	r7, r6
 8014356:	42bb      	cmp	r3, r7
 8014358:	460e      	mov	r6, r1
 801435a:	d9f4      	bls.n	8014346 <_printf_i+0x116>
 801435c:	2b08      	cmp	r3, #8
 801435e:	d10b      	bne.n	8014378 <_printf_i+0x148>
 8014360:	6823      	ldr	r3, [r4, #0]
 8014362:	07de      	lsls	r6, r3, #31
 8014364:	d508      	bpl.n	8014378 <_printf_i+0x148>
 8014366:	6923      	ldr	r3, [r4, #16]
 8014368:	6861      	ldr	r1, [r4, #4]
 801436a:	4299      	cmp	r1, r3
 801436c:	bfde      	ittt	le
 801436e:	2330      	movle	r3, #48	; 0x30
 8014370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014374:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014378:	1b52      	subs	r2, r2, r5
 801437a:	6122      	str	r2, [r4, #16]
 801437c:	f8cd a000 	str.w	sl, [sp]
 8014380:	464b      	mov	r3, r9
 8014382:	aa03      	add	r2, sp, #12
 8014384:	4621      	mov	r1, r4
 8014386:	4640      	mov	r0, r8
 8014388:	f7ff fee4 	bl	8014154 <_printf_common>
 801438c:	3001      	adds	r0, #1
 801438e:	d14a      	bne.n	8014426 <_printf_i+0x1f6>
 8014390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014394:	b004      	add	sp, #16
 8014396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801439a:	6823      	ldr	r3, [r4, #0]
 801439c:	f043 0320 	orr.w	r3, r3, #32
 80143a0:	6023      	str	r3, [r4, #0]
 80143a2:	4833      	ldr	r0, [pc, #204]	; (8014470 <_printf_i+0x240>)
 80143a4:	2778      	movs	r7, #120	; 0x78
 80143a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80143aa:	6823      	ldr	r3, [r4, #0]
 80143ac:	6829      	ldr	r1, [r5, #0]
 80143ae:	061f      	lsls	r7, r3, #24
 80143b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80143b4:	d402      	bmi.n	80143bc <_printf_i+0x18c>
 80143b6:	065f      	lsls	r7, r3, #25
 80143b8:	bf48      	it	mi
 80143ba:	b2b6      	uxthmi	r6, r6
 80143bc:	07df      	lsls	r7, r3, #31
 80143be:	bf48      	it	mi
 80143c0:	f043 0320 	orrmi.w	r3, r3, #32
 80143c4:	6029      	str	r1, [r5, #0]
 80143c6:	bf48      	it	mi
 80143c8:	6023      	strmi	r3, [r4, #0]
 80143ca:	b91e      	cbnz	r6, 80143d4 <_printf_i+0x1a4>
 80143cc:	6823      	ldr	r3, [r4, #0]
 80143ce:	f023 0320 	bic.w	r3, r3, #32
 80143d2:	6023      	str	r3, [r4, #0]
 80143d4:	2310      	movs	r3, #16
 80143d6:	e7a7      	b.n	8014328 <_printf_i+0xf8>
 80143d8:	4824      	ldr	r0, [pc, #144]	; (801446c <_printf_i+0x23c>)
 80143da:	e7e4      	b.n	80143a6 <_printf_i+0x176>
 80143dc:	4615      	mov	r5, r2
 80143de:	e7bd      	b.n	801435c <_printf_i+0x12c>
 80143e0:	682b      	ldr	r3, [r5, #0]
 80143e2:	6826      	ldr	r6, [r4, #0]
 80143e4:	6961      	ldr	r1, [r4, #20]
 80143e6:	1d18      	adds	r0, r3, #4
 80143e8:	6028      	str	r0, [r5, #0]
 80143ea:	0635      	lsls	r5, r6, #24
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	d501      	bpl.n	80143f4 <_printf_i+0x1c4>
 80143f0:	6019      	str	r1, [r3, #0]
 80143f2:	e002      	b.n	80143fa <_printf_i+0x1ca>
 80143f4:	0670      	lsls	r0, r6, #25
 80143f6:	d5fb      	bpl.n	80143f0 <_printf_i+0x1c0>
 80143f8:	8019      	strh	r1, [r3, #0]
 80143fa:	2300      	movs	r3, #0
 80143fc:	6123      	str	r3, [r4, #16]
 80143fe:	4615      	mov	r5, r2
 8014400:	e7bc      	b.n	801437c <_printf_i+0x14c>
 8014402:	682b      	ldr	r3, [r5, #0]
 8014404:	1d1a      	adds	r2, r3, #4
 8014406:	602a      	str	r2, [r5, #0]
 8014408:	681d      	ldr	r5, [r3, #0]
 801440a:	6862      	ldr	r2, [r4, #4]
 801440c:	2100      	movs	r1, #0
 801440e:	4628      	mov	r0, r5
 8014410:	f7eb fede 	bl	80001d0 <memchr>
 8014414:	b108      	cbz	r0, 801441a <_printf_i+0x1ea>
 8014416:	1b40      	subs	r0, r0, r5
 8014418:	6060      	str	r0, [r4, #4]
 801441a:	6863      	ldr	r3, [r4, #4]
 801441c:	6123      	str	r3, [r4, #16]
 801441e:	2300      	movs	r3, #0
 8014420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014424:	e7aa      	b.n	801437c <_printf_i+0x14c>
 8014426:	6923      	ldr	r3, [r4, #16]
 8014428:	462a      	mov	r2, r5
 801442a:	4649      	mov	r1, r9
 801442c:	4640      	mov	r0, r8
 801442e:	47d0      	blx	sl
 8014430:	3001      	adds	r0, #1
 8014432:	d0ad      	beq.n	8014390 <_printf_i+0x160>
 8014434:	6823      	ldr	r3, [r4, #0]
 8014436:	079b      	lsls	r3, r3, #30
 8014438:	d413      	bmi.n	8014462 <_printf_i+0x232>
 801443a:	68e0      	ldr	r0, [r4, #12]
 801443c:	9b03      	ldr	r3, [sp, #12]
 801443e:	4298      	cmp	r0, r3
 8014440:	bfb8      	it	lt
 8014442:	4618      	movlt	r0, r3
 8014444:	e7a6      	b.n	8014394 <_printf_i+0x164>
 8014446:	2301      	movs	r3, #1
 8014448:	4632      	mov	r2, r6
 801444a:	4649      	mov	r1, r9
 801444c:	4640      	mov	r0, r8
 801444e:	47d0      	blx	sl
 8014450:	3001      	adds	r0, #1
 8014452:	d09d      	beq.n	8014390 <_printf_i+0x160>
 8014454:	3501      	adds	r5, #1
 8014456:	68e3      	ldr	r3, [r4, #12]
 8014458:	9903      	ldr	r1, [sp, #12]
 801445a:	1a5b      	subs	r3, r3, r1
 801445c:	42ab      	cmp	r3, r5
 801445e:	dcf2      	bgt.n	8014446 <_printf_i+0x216>
 8014460:	e7eb      	b.n	801443a <_printf_i+0x20a>
 8014462:	2500      	movs	r5, #0
 8014464:	f104 0619 	add.w	r6, r4, #25
 8014468:	e7f5      	b.n	8014456 <_printf_i+0x226>
 801446a:	bf00      	nop
 801446c:	0801ada2 	.word	0x0801ada2
 8014470:	0801adb3 	.word	0x0801adb3

08014474 <_scanf_float>:
 8014474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014478:	b087      	sub	sp, #28
 801447a:	4617      	mov	r7, r2
 801447c:	9303      	str	r3, [sp, #12]
 801447e:	688b      	ldr	r3, [r1, #8]
 8014480:	1e5a      	subs	r2, r3, #1
 8014482:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014486:	bf83      	ittte	hi
 8014488:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801448c:	195b      	addhi	r3, r3, r5
 801448e:	9302      	strhi	r3, [sp, #8]
 8014490:	2300      	movls	r3, #0
 8014492:	bf86      	itte	hi
 8014494:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014498:	608b      	strhi	r3, [r1, #8]
 801449a:	9302      	strls	r3, [sp, #8]
 801449c:	680b      	ldr	r3, [r1, #0]
 801449e:	468b      	mov	fp, r1
 80144a0:	2500      	movs	r5, #0
 80144a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80144a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80144aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80144ae:	4680      	mov	r8, r0
 80144b0:	460c      	mov	r4, r1
 80144b2:	465e      	mov	r6, fp
 80144b4:	46aa      	mov	sl, r5
 80144b6:	46a9      	mov	r9, r5
 80144b8:	9501      	str	r5, [sp, #4]
 80144ba:	68a2      	ldr	r2, [r4, #8]
 80144bc:	b152      	cbz	r2, 80144d4 <_scanf_float+0x60>
 80144be:	683b      	ldr	r3, [r7, #0]
 80144c0:	781b      	ldrb	r3, [r3, #0]
 80144c2:	2b4e      	cmp	r3, #78	; 0x4e
 80144c4:	d864      	bhi.n	8014590 <_scanf_float+0x11c>
 80144c6:	2b40      	cmp	r3, #64	; 0x40
 80144c8:	d83c      	bhi.n	8014544 <_scanf_float+0xd0>
 80144ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80144ce:	b2c8      	uxtb	r0, r1
 80144d0:	280e      	cmp	r0, #14
 80144d2:	d93a      	bls.n	801454a <_scanf_float+0xd6>
 80144d4:	f1b9 0f00 	cmp.w	r9, #0
 80144d8:	d003      	beq.n	80144e2 <_scanf_float+0x6e>
 80144da:	6823      	ldr	r3, [r4, #0]
 80144dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80144e0:	6023      	str	r3, [r4, #0]
 80144e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80144e6:	f1ba 0f01 	cmp.w	sl, #1
 80144ea:	f200 8113 	bhi.w	8014714 <_scanf_float+0x2a0>
 80144ee:	455e      	cmp	r6, fp
 80144f0:	f200 8105 	bhi.w	80146fe <_scanf_float+0x28a>
 80144f4:	2501      	movs	r5, #1
 80144f6:	4628      	mov	r0, r5
 80144f8:	b007      	add	sp, #28
 80144fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014502:	2a0d      	cmp	r2, #13
 8014504:	d8e6      	bhi.n	80144d4 <_scanf_float+0x60>
 8014506:	a101      	add	r1, pc, #4	; (adr r1, 801450c <_scanf_float+0x98>)
 8014508:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801450c:	0801464b 	.word	0x0801464b
 8014510:	080144d5 	.word	0x080144d5
 8014514:	080144d5 	.word	0x080144d5
 8014518:	080144d5 	.word	0x080144d5
 801451c:	080146ab 	.word	0x080146ab
 8014520:	08014683 	.word	0x08014683
 8014524:	080144d5 	.word	0x080144d5
 8014528:	080144d5 	.word	0x080144d5
 801452c:	08014659 	.word	0x08014659
 8014530:	080144d5 	.word	0x080144d5
 8014534:	080144d5 	.word	0x080144d5
 8014538:	080144d5 	.word	0x080144d5
 801453c:	080144d5 	.word	0x080144d5
 8014540:	08014611 	.word	0x08014611
 8014544:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014548:	e7db      	b.n	8014502 <_scanf_float+0x8e>
 801454a:	290e      	cmp	r1, #14
 801454c:	d8c2      	bhi.n	80144d4 <_scanf_float+0x60>
 801454e:	a001      	add	r0, pc, #4	; (adr r0, 8014554 <_scanf_float+0xe0>)
 8014550:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014554:	08014603 	.word	0x08014603
 8014558:	080144d5 	.word	0x080144d5
 801455c:	08014603 	.word	0x08014603
 8014560:	08014697 	.word	0x08014697
 8014564:	080144d5 	.word	0x080144d5
 8014568:	080145b1 	.word	0x080145b1
 801456c:	080145ed 	.word	0x080145ed
 8014570:	080145ed 	.word	0x080145ed
 8014574:	080145ed 	.word	0x080145ed
 8014578:	080145ed 	.word	0x080145ed
 801457c:	080145ed 	.word	0x080145ed
 8014580:	080145ed 	.word	0x080145ed
 8014584:	080145ed 	.word	0x080145ed
 8014588:	080145ed 	.word	0x080145ed
 801458c:	080145ed 	.word	0x080145ed
 8014590:	2b6e      	cmp	r3, #110	; 0x6e
 8014592:	d809      	bhi.n	80145a8 <_scanf_float+0x134>
 8014594:	2b60      	cmp	r3, #96	; 0x60
 8014596:	d8b2      	bhi.n	80144fe <_scanf_float+0x8a>
 8014598:	2b54      	cmp	r3, #84	; 0x54
 801459a:	d077      	beq.n	801468c <_scanf_float+0x218>
 801459c:	2b59      	cmp	r3, #89	; 0x59
 801459e:	d199      	bne.n	80144d4 <_scanf_float+0x60>
 80145a0:	2d07      	cmp	r5, #7
 80145a2:	d197      	bne.n	80144d4 <_scanf_float+0x60>
 80145a4:	2508      	movs	r5, #8
 80145a6:	e029      	b.n	80145fc <_scanf_float+0x188>
 80145a8:	2b74      	cmp	r3, #116	; 0x74
 80145aa:	d06f      	beq.n	801468c <_scanf_float+0x218>
 80145ac:	2b79      	cmp	r3, #121	; 0x79
 80145ae:	e7f6      	b.n	801459e <_scanf_float+0x12a>
 80145b0:	6821      	ldr	r1, [r4, #0]
 80145b2:	05c8      	lsls	r0, r1, #23
 80145b4:	d51a      	bpl.n	80145ec <_scanf_float+0x178>
 80145b6:	9b02      	ldr	r3, [sp, #8]
 80145b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80145bc:	6021      	str	r1, [r4, #0]
 80145be:	f109 0901 	add.w	r9, r9, #1
 80145c2:	b11b      	cbz	r3, 80145cc <_scanf_float+0x158>
 80145c4:	3b01      	subs	r3, #1
 80145c6:	3201      	adds	r2, #1
 80145c8:	9302      	str	r3, [sp, #8]
 80145ca:	60a2      	str	r2, [r4, #8]
 80145cc:	68a3      	ldr	r3, [r4, #8]
 80145ce:	3b01      	subs	r3, #1
 80145d0:	60a3      	str	r3, [r4, #8]
 80145d2:	6923      	ldr	r3, [r4, #16]
 80145d4:	3301      	adds	r3, #1
 80145d6:	6123      	str	r3, [r4, #16]
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	3b01      	subs	r3, #1
 80145dc:	2b00      	cmp	r3, #0
 80145de:	607b      	str	r3, [r7, #4]
 80145e0:	f340 8084 	ble.w	80146ec <_scanf_float+0x278>
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	3301      	adds	r3, #1
 80145e8:	603b      	str	r3, [r7, #0]
 80145ea:	e766      	b.n	80144ba <_scanf_float+0x46>
 80145ec:	eb1a 0f05 	cmn.w	sl, r5
 80145f0:	f47f af70 	bne.w	80144d4 <_scanf_float+0x60>
 80145f4:	6822      	ldr	r2, [r4, #0]
 80145f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80145fa:	6022      	str	r2, [r4, #0]
 80145fc:	f806 3b01 	strb.w	r3, [r6], #1
 8014600:	e7e4      	b.n	80145cc <_scanf_float+0x158>
 8014602:	6822      	ldr	r2, [r4, #0]
 8014604:	0610      	lsls	r0, r2, #24
 8014606:	f57f af65 	bpl.w	80144d4 <_scanf_float+0x60>
 801460a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801460e:	e7f4      	b.n	80145fa <_scanf_float+0x186>
 8014610:	f1ba 0f00 	cmp.w	sl, #0
 8014614:	d10e      	bne.n	8014634 <_scanf_float+0x1c0>
 8014616:	f1b9 0f00 	cmp.w	r9, #0
 801461a:	d10e      	bne.n	801463a <_scanf_float+0x1c6>
 801461c:	6822      	ldr	r2, [r4, #0]
 801461e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014622:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014626:	d108      	bne.n	801463a <_scanf_float+0x1c6>
 8014628:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801462c:	6022      	str	r2, [r4, #0]
 801462e:	f04f 0a01 	mov.w	sl, #1
 8014632:	e7e3      	b.n	80145fc <_scanf_float+0x188>
 8014634:	f1ba 0f02 	cmp.w	sl, #2
 8014638:	d055      	beq.n	80146e6 <_scanf_float+0x272>
 801463a:	2d01      	cmp	r5, #1
 801463c:	d002      	beq.n	8014644 <_scanf_float+0x1d0>
 801463e:	2d04      	cmp	r5, #4
 8014640:	f47f af48 	bne.w	80144d4 <_scanf_float+0x60>
 8014644:	3501      	adds	r5, #1
 8014646:	b2ed      	uxtb	r5, r5
 8014648:	e7d8      	b.n	80145fc <_scanf_float+0x188>
 801464a:	f1ba 0f01 	cmp.w	sl, #1
 801464e:	f47f af41 	bne.w	80144d4 <_scanf_float+0x60>
 8014652:	f04f 0a02 	mov.w	sl, #2
 8014656:	e7d1      	b.n	80145fc <_scanf_float+0x188>
 8014658:	b97d      	cbnz	r5, 801467a <_scanf_float+0x206>
 801465a:	f1b9 0f00 	cmp.w	r9, #0
 801465e:	f47f af3c 	bne.w	80144da <_scanf_float+0x66>
 8014662:	6822      	ldr	r2, [r4, #0]
 8014664:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014668:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801466c:	f47f af39 	bne.w	80144e2 <_scanf_float+0x6e>
 8014670:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014674:	6022      	str	r2, [r4, #0]
 8014676:	2501      	movs	r5, #1
 8014678:	e7c0      	b.n	80145fc <_scanf_float+0x188>
 801467a:	2d03      	cmp	r5, #3
 801467c:	d0e2      	beq.n	8014644 <_scanf_float+0x1d0>
 801467e:	2d05      	cmp	r5, #5
 8014680:	e7de      	b.n	8014640 <_scanf_float+0x1cc>
 8014682:	2d02      	cmp	r5, #2
 8014684:	f47f af26 	bne.w	80144d4 <_scanf_float+0x60>
 8014688:	2503      	movs	r5, #3
 801468a:	e7b7      	b.n	80145fc <_scanf_float+0x188>
 801468c:	2d06      	cmp	r5, #6
 801468e:	f47f af21 	bne.w	80144d4 <_scanf_float+0x60>
 8014692:	2507      	movs	r5, #7
 8014694:	e7b2      	b.n	80145fc <_scanf_float+0x188>
 8014696:	6822      	ldr	r2, [r4, #0]
 8014698:	0591      	lsls	r1, r2, #22
 801469a:	f57f af1b 	bpl.w	80144d4 <_scanf_float+0x60>
 801469e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80146a2:	6022      	str	r2, [r4, #0]
 80146a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80146a8:	e7a8      	b.n	80145fc <_scanf_float+0x188>
 80146aa:	6822      	ldr	r2, [r4, #0]
 80146ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80146b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80146b4:	d006      	beq.n	80146c4 <_scanf_float+0x250>
 80146b6:	0550      	lsls	r0, r2, #21
 80146b8:	f57f af0c 	bpl.w	80144d4 <_scanf_float+0x60>
 80146bc:	f1b9 0f00 	cmp.w	r9, #0
 80146c0:	f43f af0f 	beq.w	80144e2 <_scanf_float+0x6e>
 80146c4:	0591      	lsls	r1, r2, #22
 80146c6:	bf58      	it	pl
 80146c8:	9901      	ldrpl	r1, [sp, #4]
 80146ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80146ce:	bf58      	it	pl
 80146d0:	eba9 0101 	subpl.w	r1, r9, r1
 80146d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80146d8:	bf58      	it	pl
 80146da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80146de:	6022      	str	r2, [r4, #0]
 80146e0:	f04f 0900 	mov.w	r9, #0
 80146e4:	e78a      	b.n	80145fc <_scanf_float+0x188>
 80146e6:	f04f 0a03 	mov.w	sl, #3
 80146ea:	e787      	b.n	80145fc <_scanf_float+0x188>
 80146ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80146f0:	4639      	mov	r1, r7
 80146f2:	4640      	mov	r0, r8
 80146f4:	4798      	blx	r3
 80146f6:	2800      	cmp	r0, #0
 80146f8:	f43f aedf 	beq.w	80144ba <_scanf_float+0x46>
 80146fc:	e6ea      	b.n	80144d4 <_scanf_float+0x60>
 80146fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014702:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014706:	463a      	mov	r2, r7
 8014708:	4640      	mov	r0, r8
 801470a:	4798      	blx	r3
 801470c:	6923      	ldr	r3, [r4, #16]
 801470e:	3b01      	subs	r3, #1
 8014710:	6123      	str	r3, [r4, #16]
 8014712:	e6ec      	b.n	80144ee <_scanf_float+0x7a>
 8014714:	1e6b      	subs	r3, r5, #1
 8014716:	2b06      	cmp	r3, #6
 8014718:	d825      	bhi.n	8014766 <_scanf_float+0x2f2>
 801471a:	2d02      	cmp	r5, #2
 801471c:	d836      	bhi.n	801478c <_scanf_float+0x318>
 801471e:	455e      	cmp	r6, fp
 8014720:	f67f aee8 	bls.w	80144f4 <_scanf_float+0x80>
 8014724:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014728:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801472c:	463a      	mov	r2, r7
 801472e:	4640      	mov	r0, r8
 8014730:	4798      	blx	r3
 8014732:	6923      	ldr	r3, [r4, #16]
 8014734:	3b01      	subs	r3, #1
 8014736:	6123      	str	r3, [r4, #16]
 8014738:	e7f1      	b.n	801471e <_scanf_float+0x2aa>
 801473a:	9802      	ldr	r0, [sp, #8]
 801473c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014740:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014744:	9002      	str	r0, [sp, #8]
 8014746:	463a      	mov	r2, r7
 8014748:	4640      	mov	r0, r8
 801474a:	4798      	blx	r3
 801474c:	6923      	ldr	r3, [r4, #16]
 801474e:	3b01      	subs	r3, #1
 8014750:	6123      	str	r3, [r4, #16]
 8014752:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8014756:	fa5f fa8a 	uxtb.w	sl, sl
 801475a:	f1ba 0f02 	cmp.w	sl, #2
 801475e:	d1ec      	bne.n	801473a <_scanf_float+0x2c6>
 8014760:	3d03      	subs	r5, #3
 8014762:	b2ed      	uxtb	r5, r5
 8014764:	1b76      	subs	r6, r6, r5
 8014766:	6823      	ldr	r3, [r4, #0]
 8014768:	05da      	lsls	r2, r3, #23
 801476a:	d52f      	bpl.n	80147cc <_scanf_float+0x358>
 801476c:	055b      	lsls	r3, r3, #21
 801476e:	d510      	bpl.n	8014792 <_scanf_float+0x31e>
 8014770:	455e      	cmp	r6, fp
 8014772:	f67f aebf 	bls.w	80144f4 <_scanf_float+0x80>
 8014776:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801477a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801477e:	463a      	mov	r2, r7
 8014780:	4640      	mov	r0, r8
 8014782:	4798      	blx	r3
 8014784:	6923      	ldr	r3, [r4, #16]
 8014786:	3b01      	subs	r3, #1
 8014788:	6123      	str	r3, [r4, #16]
 801478a:	e7f1      	b.n	8014770 <_scanf_float+0x2fc>
 801478c:	46aa      	mov	sl, r5
 801478e:	9602      	str	r6, [sp, #8]
 8014790:	e7df      	b.n	8014752 <_scanf_float+0x2de>
 8014792:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014796:	6923      	ldr	r3, [r4, #16]
 8014798:	2965      	cmp	r1, #101	; 0x65
 801479a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801479e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80147a2:	6123      	str	r3, [r4, #16]
 80147a4:	d00c      	beq.n	80147c0 <_scanf_float+0x34c>
 80147a6:	2945      	cmp	r1, #69	; 0x45
 80147a8:	d00a      	beq.n	80147c0 <_scanf_float+0x34c>
 80147aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80147ae:	463a      	mov	r2, r7
 80147b0:	4640      	mov	r0, r8
 80147b2:	4798      	blx	r3
 80147b4:	6923      	ldr	r3, [r4, #16]
 80147b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80147ba:	3b01      	subs	r3, #1
 80147bc:	1eb5      	subs	r5, r6, #2
 80147be:	6123      	str	r3, [r4, #16]
 80147c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80147c4:	463a      	mov	r2, r7
 80147c6:	4640      	mov	r0, r8
 80147c8:	4798      	blx	r3
 80147ca:	462e      	mov	r6, r5
 80147cc:	6825      	ldr	r5, [r4, #0]
 80147ce:	f015 0510 	ands.w	r5, r5, #16
 80147d2:	d158      	bne.n	8014886 <_scanf_float+0x412>
 80147d4:	7035      	strb	r5, [r6, #0]
 80147d6:	6823      	ldr	r3, [r4, #0]
 80147d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80147dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80147e0:	d11c      	bne.n	801481c <_scanf_float+0x3a8>
 80147e2:	9b01      	ldr	r3, [sp, #4]
 80147e4:	454b      	cmp	r3, r9
 80147e6:	eba3 0209 	sub.w	r2, r3, r9
 80147ea:	d124      	bne.n	8014836 <_scanf_float+0x3c2>
 80147ec:	2200      	movs	r2, #0
 80147ee:	4659      	mov	r1, fp
 80147f0:	4640      	mov	r0, r8
 80147f2:	f000 ff0d 	bl	8015610 <_strtod_r>
 80147f6:	9b03      	ldr	r3, [sp, #12]
 80147f8:	6821      	ldr	r1, [r4, #0]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	f011 0f02 	tst.w	r1, #2
 8014800:	ec57 6b10 	vmov	r6, r7, d0
 8014804:	f103 0204 	add.w	r2, r3, #4
 8014808:	d020      	beq.n	801484c <_scanf_float+0x3d8>
 801480a:	9903      	ldr	r1, [sp, #12]
 801480c:	600a      	str	r2, [r1, #0]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	e9c3 6700 	strd	r6, r7, [r3]
 8014814:	68e3      	ldr	r3, [r4, #12]
 8014816:	3301      	adds	r3, #1
 8014818:	60e3      	str	r3, [r4, #12]
 801481a:	e66c      	b.n	80144f6 <_scanf_float+0x82>
 801481c:	9b04      	ldr	r3, [sp, #16]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d0e4      	beq.n	80147ec <_scanf_float+0x378>
 8014822:	9905      	ldr	r1, [sp, #20]
 8014824:	230a      	movs	r3, #10
 8014826:	462a      	mov	r2, r5
 8014828:	3101      	adds	r1, #1
 801482a:	4640      	mov	r0, r8
 801482c:	f000 ff78 	bl	8015720 <_strtol_r>
 8014830:	9b04      	ldr	r3, [sp, #16]
 8014832:	9e05      	ldr	r6, [sp, #20]
 8014834:	1ac2      	subs	r2, r0, r3
 8014836:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801483a:	429e      	cmp	r6, r3
 801483c:	bf28      	it	cs
 801483e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8014842:	4912      	ldr	r1, [pc, #72]	; (801488c <_scanf_float+0x418>)
 8014844:	4630      	mov	r0, r6
 8014846:	f000 f825 	bl	8014894 <siprintf>
 801484a:	e7cf      	b.n	80147ec <_scanf_float+0x378>
 801484c:	f011 0f04 	tst.w	r1, #4
 8014850:	9903      	ldr	r1, [sp, #12]
 8014852:	600a      	str	r2, [r1, #0]
 8014854:	d1db      	bne.n	801480e <_scanf_float+0x39a>
 8014856:	f8d3 8000 	ldr.w	r8, [r3]
 801485a:	ee10 2a10 	vmov	r2, s0
 801485e:	ee10 0a10 	vmov	r0, s0
 8014862:	463b      	mov	r3, r7
 8014864:	4639      	mov	r1, r7
 8014866:	f7ec f961 	bl	8000b2c <__aeabi_dcmpun>
 801486a:	b128      	cbz	r0, 8014878 <_scanf_float+0x404>
 801486c:	4808      	ldr	r0, [pc, #32]	; (8014890 <_scanf_float+0x41c>)
 801486e:	f000 ffe3 	bl	8015838 <nanf>
 8014872:	ed88 0a00 	vstr	s0, [r8]
 8014876:	e7cd      	b.n	8014814 <_scanf_float+0x3a0>
 8014878:	4630      	mov	r0, r6
 801487a:	4639      	mov	r1, r7
 801487c:	f7ec f9b4 	bl	8000be8 <__aeabi_d2f>
 8014880:	f8c8 0000 	str.w	r0, [r8]
 8014884:	e7c6      	b.n	8014814 <_scanf_float+0x3a0>
 8014886:	2500      	movs	r5, #0
 8014888:	e635      	b.n	80144f6 <_scanf_float+0x82>
 801488a:	bf00      	nop
 801488c:	0801adc4 	.word	0x0801adc4
 8014890:	0801b1b7 	.word	0x0801b1b7

08014894 <siprintf>:
 8014894:	b40e      	push	{r1, r2, r3}
 8014896:	b500      	push	{lr}
 8014898:	b09c      	sub	sp, #112	; 0x70
 801489a:	ab1d      	add	r3, sp, #116	; 0x74
 801489c:	9002      	str	r0, [sp, #8]
 801489e:	9006      	str	r0, [sp, #24]
 80148a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80148a4:	4809      	ldr	r0, [pc, #36]	; (80148cc <siprintf+0x38>)
 80148a6:	9107      	str	r1, [sp, #28]
 80148a8:	9104      	str	r1, [sp, #16]
 80148aa:	4909      	ldr	r1, [pc, #36]	; (80148d0 <siprintf+0x3c>)
 80148ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80148b0:	9105      	str	r1, [sp, #20]
 80148b2:	6800      	ldr	r0, [r0, #0]
 80148b4:	9301      	str	r3, [sp, #4]
 80148b6:	a902      	add	r1, sp, #8
 80148b8:	f002 f9f2 	bl	8016ca0 <_svfiprintf_r>
 80148bc:	9b02      	ldr	r3, [sp, #8]
 80148be:	2200      	movs	r2, #0
 80148c0:	701a      	strb	r2, [r3, #0]
 80148c2:	b01c      	add	sp, #112	; 0x70
 80148c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80148c8:	b003      	add	sp, #12
 80148ca:	4770      	bx	lr
 80148cc:	200001ec 	.word	0x200001ec
 80148d0:	ffff0208 	.word	0xffff0208

080148d4 <std>:
 80148d4:	2300      	movs	r3, #0
 80148d6:	b510      	push	{r4, lr}
 80148d8:	4604      	mov	r4, r0
 80148da:	e9c0 3300 	strd	r3, r3, [r0]
 80148de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148e2:	6083      	str	r3, [r0, #8]
 80148e4:	8181      	strh	r1, [r0, #12]
 80148e6:	6643      	str	r3, [r0, #100]	; 0x64
 80148e8:	81c2      	strh	r2, [r0, #14]
 80148ea:	6183      	str	r3, [r0, #24]
 80148ec:	4619      	mov	r1, r3
 80148ee:	2208      	movs	r2, #8
 80148f0:	305c      	adds	r0, #92	; 0x5c
 80148f2:	f000 ff51 	bl	8015798 <memset>
 80148f6:	4b05      	ldr	r3, [pc, #20]	; (801490c <std+0x38>)
 80148f8:	6263      	str	r3, [r4, #36]	; 0x24
 80148fa:	4b05      	ldr	r3, [pc, #20]	; (8014910 <std+0x3c>)
 80148fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80148fe:	4b05      	ldr	r3, [pc, #20]	; (8014914 <std+0x40>)
 8014900:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014902:	4b05      	ldr	r3, [pc, #20]	; (8014918 <std+0x44>)
 8014904:	6224      	str	r4, [r4, #32]
 8014906:	6323      	str	r3, [r4, #48]	; 0x30
 8014908:	bd10      	pop	{r4, pc}
 801490a:	bf00      	nop
 801490c:	08017adf 	.word	0x08017adf
 8014910:	08017b01 	.word	0x08017b01
 8014914:	08017b39 	.word	0x08017b39
 8014918:	08017b5d 	.word	0x08017b5d

0801491c <stdio_exit_handler>:
 801491c:	4a02      	ldr	r2, [pc, #8]	; (8014928 <stdio_exit_handler+0xc>)
 801491e:	4903      	ldr	r1, [pc, #12]	; (801492c <stdio_exit_handler+0x10>)
 8014920:	4803      	ldr	r0, [pc, #12]	; (8014930 <stdio_exit_handler+0x14>)
 8014922:	f000 bf09 	b.w	8015738 <_fwalk_sglue>
 8014926:	bf00      	nop
 8014928:	20000028 	.word	0x20000028
 801492c:	0801711d 	.word	0x0801711d
 8014930:	200001a0 	.word	0x200001a0

08014934 <cleanup_stdio>:
 8014934:	6841      	ldr	r1, [r0, #4]
 8014936:	4b0c      	ldr	r3, [pc, #48]	; (8014968 <cleanup_stdio+0x34>)
 8014938:	4299      	cmp	r1, r3
 801493a:	b510      	push	{r4, lr}
 801493c:	4604      	mov	r4, r0
 801493e:	d001      	beq.n	8014944 <cleanup_stdio+0x10>
 8014940:	f002 fbec 	bl	801711c <_fflush_r>
 8014944:	68a1      	ldr	r1, [r4, #8]
 8014946:	4b09      	ldr	r3, [pc, #36]	; (801496c <cleanup_stdio+0x38>)
 8014948:	4299      	cmp	r1, r3
 801494a:	d002      	beq.n	8014952 <cleanup_stdio+0x1e>
 801494c:	4620      	mov	r0, r4
 801494e:	f002 fbe5 	bl	801711c <_fflush_r>
 8014952:	68e1      	ldr	r1, [r4, #12]
 8014954:	4b06      	ldr	r3, [pc, #24]	; (8014970 <cleanup_stdio+0x3c>)
 8014956:	4299      	cmp	r1, r3
 8014958:	d004      	beq.n	8014964 <cleanup_stdio+0x30>
 801495a:	4620      	mov	r0, r4
 801495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014960:	f002 bbdc 	b.w	801711c <_fflush_r>
 8014964:	bd10      	pop	{r4, pc}
 8014966:	bf00      	nop
 8014968:	20003f28 	.word	0x20003f28
 801496c:	20003f90 	.word	0x20003f90
 8014970:	20003ff8 	.word	0x20003ff8

08014974 <global_stdio_init.part.0>:
 8014974:	b510      	push	{r4, lr}
 8014976:	4b0b      	ldr	r3, [pc, #44]	; (80149a4 <global_stdio_init.part.0+0x30>)
 8014978:	4c0b      	ldr	r4, [pc, #44]	; (80149a8 <global_stdio_init.part.0+0x34>)
 801497a:	4a0c      	ldr	r2, [pc, #48]	; (80149ac <global_stdio_init.part.0+0x38>)
 801497c:	601a      	str	r2, [r3, #0]
 801497e:	4620      	mov	r0, r4
 8014980:	2200      	movs	r2, #0
 8014982:	2104      	movs	r1, #4
 8014984:	f7ff ffa6 	bl	80148d4 <std>
 8014988:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801498c:	2201      	movs	r2, #1
 801498e:	2109      	movs	r1, #9
 8014990:	f7ff ffa0 	bl	80148d4 <std>
 8014994:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014998:	2202      	movs	r2, #2
 801499a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801499e:	2112      	movs	r1, #18
 80149a0:	f7ff bf98 	b.w	80148d4 <std>
 80149a4:	20004060 	.word	0x20004060
 80149a8:	20003f28 	.word	0x20003f28
 80149ac:	0801491d 	.word	0x0801491d

080149b0 <__sfp_lock_acquire>:
 80149b0:	4801      	ldr	r0, [pc, #4]	; (80149b8 <__sfp_lock_acquire+0x8>)
 80149b2:	f000 bf27 	b.w	8015804 <__retarget_lock_acquire_recursive>
 80149b6:	bf00      	nop
 80149b8:	20004065 	.word	0x20004065

080149bc <__sfp_lock_release>:
 80149bc:	4801      	ldr	r0, [pc, #4]	; (80149c4 <__sfp_lock_release+0x8>)
 80149be:	f000 bf22 	b.w	8015806 <__retarget_lock_release_recursive>
 80149c2:	bf00      	nop
 80149c4:	20004065 	.word	0x20004065

080149c8 <__sinit>:
 80149c8:	b510      	push	{r4, lr}
 80149ca:	4604      	mov	r4, r0
 80149cc:	f7ff fff0 	bl	80149b0 <__sfp_lock_acquire>
 80149d0:	6a23      	ldr	r3, [r4, #32]
 80149d2:	b11b      	cbz	r3, 80149dc <__sinit+0x14>
 80149d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149d8:	f7ff bff0 	b.w	80149bc <__sfp_lock_release>
 80149dc:	4b04      	ldr	r3, [pc, #16]	; (80149f0 <__sinit+0x28>)
 80149de:	6223      	str	r3, [r4, #32]
 80149e0:	4b04      	ldr	r3, [pc, #16]	; (80149f4 <__sinit+0x2c>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d1f5      	bne.n	80149d4 <__sinit+0xc>
 80149e8:	f7ff ffc4 	bl	8014974 <global_stdio_init.part.0>
 80149ec:	e7f2      	b.n	80149d4 <__sinit+0xc>
 80149ee:	bf00      	nop
 80149f0:	08014935 	.word	0x08014935
 80149f4:	20004060 	.word	0x20004060

080149f8 <sulp>:
 80149f8:	b570      	push	{r4, r5, r6, lr}
 80149fa:	4604      	mov	r4, r0
 80149fc:	460d      	mov	r5, r1
 80149fe:	ec45 4b10 	vmov	d0, r4, r5
 8014a02:	4616      	mov	r6, r2
 8014a04:	f002 ff2a 	bl	801785c <__ulp>
 8014a08:	ec51 0b10 	vmov	r0, r1, d0
 8014a0c:	b17e      	cbz	r6, 8014a2e <sulp+0x36>
 8014a0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014a12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	dd09      	ble.n	8014a2e <sulp+0x36>
 8014a1a:	051b      	lsls	r3, r3, #20
 8014a1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014a20:	2400      	movs	r4, #0
 8014a22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014a26:	4622      	mov	r2, r4
 8014a28:	462b      	mov	r3, r5
 8014a2a:	f7eb fde5 	bl	80005f8 <__aeabi_dmul>
 8014a2e:	bd70      	pop	{r4, r5, r6, pc}

08014a30 <_strtod_l>:
 8014a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a34:	ed2d 8b02 	vpush	{d8}
 8014a38:	b09b      	sub	sp, #108	; 0x6c
 8014a3a:	4604      	mov	r4, r0
 8014a3c:	9213      	str	r2, [sp, #76]	; 0x4c
 8014a3e:	2200      	movs	r2, #0
 8014a40:	9216      	str	r2, [sp, #88]	; 0x58
 8014a42:	460d      	mov	r5, r1
 8014a44:	f04f 0800 	mov.w	r8, #0
 8014a48:	f04f 0900 	mov.w	r9, #0
 8014a4c:	460a      	mov	r2, r1
 8014a4e:	9215      	str	r2, [sp, #84]	; 0x54
 8014a50:	7811      	ldrb	r1, [r2, #0]
 8014a52:	292b      	cmp	r1, #43	; 0x2b
 8014a54:	d04c      	beq.n	8014af0 <_strtod_l+0xc0>
 8014a56:	d83a      	bhi.n	8014ace <_strtod_l+0x9e>
 8014a58:	290d      	cmp	r1, #13
 8014a5a:	d834      	bhi.n	8014ac6 <_strtod_l+0x96>
 8014a5c:	2908      	cmp	r1, #8
 8014a5e:	d834      	bhi.n	8014aca <_strtod_l+0x9a>
 8014a60:	2900      	cmp	r1, #0
 8014a62:	d03d      	beq.n	8014ae0 <_strtod_l+0xb0>
 8014a64:	2200      	movs	r2, #0
 8014a66:	920a      	str	r2, [sp, #40]	; 0x28
 8014a68:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014a6a:	7832      	ldrb	r2, [r6, #0]
 8014a6c:	2a30      	cmp	r2, #48	; 0x30
 8014a6e:	f040 80b4 	bne.w	8014bda <_strtod_l+0x1aa>
 8014a72:	7872      	ldrb	r2, [r6, #1]
 8014a74:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014a78:	2a58      	cmp	r2, #88	; 0x58
 8014a7a:	d170      	bne.n	8014b5e <_strtod_l+0x12e>
 8014a7c:	9302      	str	r3, [sp, #8]
 8014a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a80:	9301      	str	r3, [sp, #4]
 8014a82:	ab16      	add	r3, sp, #88	; 0x58
 8014a84:	9300      	str	r3, [sp, #0]
 8014a86:	4a8e      	ldr	r2, [pc, #568]	; (8014cc0 <_strtod_l+0x290>)
 8014a88:	ab17      	add	r3, sp, #92	; 0x5c
 8014a8a:	a915      	add	r1, sp, #84	; 0x54
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	f001 fdbd 	bl	801660c <__gethex>
 8014a92:	f010 070f 	ands.w	r7, r0, #15
 8014a96:	4605      	mov	r5, r0
 8014a98:	d005      	beq.n	8014aa6 <_strtod_l+0x76>
 8014a9a:	2f06      	cmp	r7, #6
 8014a9c:	d12a      	bne.n	8014af4 <_strtod_l+0xc4>
 8014a9e:	3601      	adds	r6, #1
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	9615      	str	r6, [sp, #84]	; 0x54
 8014aa4:	930a      	str	r3, [sp, #40]	; 0x28
 8014aa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	f040 857f 	bne.w	80155ac <_strtod_l+0xb7c>
 8014aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ab0:	b1db      	cbz	r3, 8014aea <_strtod_l+0xba>
 8014ab2:	4642      	mov	r2, r8
 8014ab4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014ab8:	ec43 2b10 	vmov	d0, r2, r3
 8014abc:	b01b      	add	sp, #108	; 0x6c
 8014abe:	ecbd 8b02 	vpop	{d8}
 8014ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac6:	2920      	cmp	r1, #32
 8014ac8:	d1cc      	bne.n	8014a64 <_strtod_l+0x34>
 8014aca:	3201      	adds	r2, #1
 8014acc:	e7bf      	b.n	8014a4e <_strtod_l+0x1e>
 8014ace:	292d      	cmp	r1, #45	; 0x2d
 8014ad0:	d1c8      	bne.n	8014a64 <_strtod_l+0x34>
 8014ad2:	2101      	movs	r1, #1
 8014ad4:	910a      	str	r1, [sp, #40]	; 0x28
 8014ad6:	1c51      	adds	r1, r2, #1
 8014ad8:	9115      	str	r1, [sp, #84]	; 0x54
 8014ada:	7852      	ldrb	r2, [r2, #1]
 8014adc:	2a00      	cmp	r2, #0
 8014ade:	d1c3      	bne.n	8014a68 <_strtod_l+0x38>
 8014ae0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ae2:	9515      	str	r5, [sp, #84]	; 0x54
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	f040 855f 	bne.w	80155a8 <_strtod_l+0xb78>
 8014aea:	4642      	mov	r2, r8
 8014aec:	464b      	mov	r3, r9
 8014aee:	e7e3      	b.n	8014ab8 <_strtod_l+0x88>
 8014af0:	2100      	movs	r1, #0
 8014af2:	e7ef      	b.n	8014ad4 <_strtod_l+0xa4>
 8014af4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014af6:	b13a      	cbz	r2, 8014b08 <_strtod_l+0xd8>
 8014af8:	2135      	movs	r1, #53	; 0x35
 8014afa:	a818      	add	r0, sp, #96	; 0x60
 8014afc:	f002 ffab 	bl	8017a56 <__copybits>
 8014b00:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014b02:	4620      	mov	r0, r4
 8014b04:	f002 fb7e 	bl	8017204 <_Bfree>
 8014b08:	3f01      	subs	r7, #1
 8014b0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014b0c:	2f04      	cmp	r7, #4
 8014b0e:	d806      	bhi.n	8014b1e <_strtod_l+0xee>
 8014b10:	e8df f007 	tbb	[pc, r7]
 8014b14:	201d0314 	.word	0x201d0314
 8014b18:	14          	.byte	0x14
 8014b19:	00          	.byte	0x00
 8014b1a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8014b1e:	05e9      	lsls	r1, r5, #23
 8014b20:	bf48      	it	mi
 8014b22:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014b26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014b2a:	0d1b      	lsrs	r3, r3, #20
 8014b2c:	051b      	lsls	r3, r3, #20
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d1b9      	bne.n	8014aa6 <_strtod_l+0x76>
 8014b32:	f000 fe3d 	bl	80157b0 <__errno>
 8014b36:	2322      	movs	r3, #34	; 0x22
 8014b38:	6003      	str	r3, [r0, #0]
 8014b3a:	e7b4      	b.n	8014aa6 <_strtod_l+0x76>
 8014b3c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8014b40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014b44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014b48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014b4c:	e7e7      	b.n	8014b1e <_strtod_l+0xee>
 8014b4e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014cc8 <_strtod_l+0x298>
 8014b52:	e7e4      	b.n	8014b1e <_strtod_l+0xee>
 8014b54:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014b58:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8014b5c:	e7df      	b.n	8014b1e <_strtod_l+0xee>
 8014b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b60:	1c5a      	adds	r2, r3, #1
 8014b62:	9215      	str	r2, [sp, #84]	; 0x54
 8014b64:	785b      	ldrb	r3, [r3, #1]
 8014b66:	2b30      	cmp	r3, #48	; 0x30
 8014b68:	d0f9      	beq.n	8014b5e <_strtod_l+0x12e>
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d09b      	beq.n	8014aa6 <_strtod_l+0x76>
 8014b6e:	2301      	movs	r3, #1
 8014b70:	f04f 0a00 	mov.w	sl, #0
 8014b74:	9304      	str	r3, [sp, #16]
 8014b76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b78:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b7a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014b7e:	46d3      	mov	fp, sl
 8014b80:	220a      	movs	r2, #10
 8014b82:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014b84:	7806      	ldrb	r6, [r0, #0]
 8014b86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014b8a:	b2d9      	uxtb	r1, r3
 8014b8c:	2909      	cmp	r1, #9
 8014b8e:	d926      	bls.n	8014bde <_strtod_l+0x1ae>
 8014b90:	494c      	ldr	r1, [pc, #304]	; (8014cc4 <_strtod_l+0x294>)
 8014b92:	2201      	movs	r2, #1
 8014b94:	f000 fdee 	bl	8015774 <strncmp>
 8014b98:	2800      	cmp	r0, #0
 8014b9a:	d030      	beq.n	8014bfe <_strtod_l+0x1ce>
 8014b9c:	2000      	movs	r0, #0
 8014b9e:	4632      	mov	r2, r6
 8014ba0:	9005      	str	r0, [sp, #20]
 8014ba2:	465e      	mov	r6, fp
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	2a65      	cmp	r2, #101	; 0x65
 8014ba8:	d001      	beq.n	8014bae <_strtod_l+0x17e>
 8014baa:	2a45      	cmp	r2, #69	; 0x45
 8014bac:	d113      	bne.n	8014bd6 <_strtod_l+0x1a6>
 8014bae:	b91e      	cbnz	r6, 8014bb8 <_strtod_l+0x188>
 8014bb0:	9a04      	ldr	r2, [sp, #16]
 8014bb2:	4302      	orrs	r2, r0
 8014bb4:	d094      	beq.n	8014ae0 <_strtod_l+0xb0>
 8014bb6:	2600      	movs	r6, #0
 8014bb8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014bba:	1c6a      	adds	r2, r5, #1
 8014bbc:	9215      	str	r2, [sp, #84]	; 0x54
 8014bbe:	786a      	ldrb	r2, [r5, #1]
 8014bc0:	2a2b      	cmp	r2, #43	; 0x2b
 8014bc2:	d074      	beq.n	8014cae <_strtod_l+0x27e>
 8014bc4:	2a2d      	cmp	r2, #45	; 0x2d
 8014bc6:	d078      	beq.n	8014cba <_strtod_l+0x28a>
 8014bc8:	f04f 0c00 	mov.w	ip, #0
 8014bcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014bd0:	2909      	cmp	r1, #9
 8014bd2:	d97f      	bls.n	8014cd4 <_strtod_l+0x2a4>
 8014bd4:	9515      	str	r5, [sp, #84]	; 0x54
 8014bd6:	2700      	movs	r7, #0
 8014bd8:	e09e      	b.n	8014d18 <_strtod_l+0x2e8>
 8014bda:	2300      	movs	r3, #0
 8014bdc:	e7c8      	b.n	8014b70 <_strtod_l+0x140>
 8014bde:	f1bb 0f08 	cmp.w	fp, #8
 8014be2:	bfd8      	it	le
 8014be4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014be6:	f100 0001 	add.w	r0, r0, #1
 8014bea:	bfda      	itte	le
 8014bec:	fb02 3301 	mlale	r3, r2, r1, r3
 8014bf0:	9309      	strle	r3, [sp, #36]	; 0x24
 8014bf2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014bf6:	f10b 0b01 	add.w	fp, fp, #1
 8014bfa:	9015      	str	r0, [sp, #84]	; 0x54
 8014bfc:	e7c1      	b.n	8014b82 <_strtod_l+0x152>
 8014bfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c00:	1c5a      	adds	r2, r3, #1
 8014c02:	9215      	str	r2, [sp, #84]	; 0x54
 8014c04:	785a      	ldrb	r2, [r3, #1]
 8014c06:	f1bb 0f00 	cmp.w	fp, #0
 8014c0a:	d037      	beq.n	8014c7c <_strtod_l+0x24c>
 8014c0c:	9005      	str	r0, [sp, #20]
 8014c0e:	465e      	mov	r6, fp
 8014c10:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014c14:	2b09      	cmp	r3, #9
 8014c16:	d912      	bls.n	8014c3e <_strtod_l+0x20e>
 8014c18:	2301      	movs	r3, #1
 8014c1a:	e7c4      	b.n	8014ba6 <_strtod_l+0x176>
 8014c1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c1e:	1c5a      	adds	r2, r3, #1
 8014c20:	9215      	str	r2, [sp, #84]	; 0x54
 8014c22:	785a      	ldrb	r2, [r3, #1]
 8014c24:	3001      	adds	r0, #1
 8014c26:	2a30      	cmp	r2, #48	; 0x30
 8014c28:	d0f8      	beq.n	8014c1c <_strtod_l+0x1ec>
 8014c2a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014c2e:	2b08      	cmp	r3, #8
 8014c30:	f200 84c1 	bhi.w	80155b6 <_strtod_l+0xb86>
 8014c34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c36:	9005      	str	r0, [sp, #20]
 8014c38:	2000      	movs	r0, #0
 8014c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c3c:	4606      	mov	r6, r0
 8014c3e:	3a30      	subs	r2, #48	; 0x30
 8014c40:	f100 0301 	add.w	r3, r0, #1
 8014c44:	d014      	beq.n	8014c70 <_strtod_l+0x240>
 8014c46:	9905      	ldr	r1, [sp, #20]
 8014c48:	4419      	add	r1, r3
 8014c4a:	9105      	str	r1, [sp, #20]
 8014c4c:	4633      	mov	r3, r6
 8014c4e:	eb00 0c06 	add.w	ip, r0, r6
 8014c52:	210a      	movs	r1, #10
 8014c54:	4563      	cmp	r3, ip
 8014c56:	d113      	bne.n	8014c80 <_strtod_l+0x250>
 8014c58:	1833      	adds	r3, r6, r0
 8014c5a:	2b08      	cmp	r3, #8
 8014c5c:	f106 0601 	add.w	r6, r6, #1
 8014c60:	4406      	add	r6, r0
 8014c62:	dc1a      	bgt.n	8014c9a <_strtod_l+0x26a>
 8014c64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c66:	230a      	movs	r3, #10
 8014c68:	fb03 2301 	mla	r3, r3, r1, r2
 8014c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8014c6e:	2300      	movs	r3, #0
 8014c70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014c72:	1c51      	adds	r1, r2, #1
 8014c74:	9115      	str	r1, [sp, #84]	; 0x54
 8014c76:	7852      	ldrb	r2, [r2, #1]
 8014c78:	4618      	mov	r0, r3
 8014c7a:	e7c9      	b.n	8014c10 <_strtod_l+0x1e0>
 8014c7c:	4658      	mov	r0, fp
 8014c7e:	e7d2      	b.n	8014c26 <_strtod_l+0x1f6>
 8014c80:	2b08      	cmp	r3, #8
 8014c82:	f103 0301 	add.w	r3, r3, #1
 8014c86:	dc03      	bgt.n	8014c90 <_strtod_l+0x260>
 8014c88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014c8a:	434f      	muls	r7, r1
 8014c8c:	9709      	str	r7, [sp, #36]	; 0x24
 8014c8e:	e7e1      	b.n	8014c54 <_strtod_l+0x224>
 8014c90:	2b10      	cmp	r3, #16
 8014c92:	bfd8      	it	le
 8014c94:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014c98:	e7dc      	b.n	8014c54 <_strtod_l+0x224>
 8014c9a:	2e10      	cmp	r6, #16
 8014c9c:	bfdc      	itt	le
 8014c9e:	230a      	movle	r3, #10
 8014ca0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8014ca4:	e7e3      	b.n	8014c6e <_strtod_l+0x23e>
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	9305      	str	r3, [sp, #20]
 8014caa:	2301      	movs	r3, #1
 8014cac:	e780      	b.n	8014bb0 <_strtod_l+0x180>
 8014cae:	f04f 0c00 	mov.w	ip, #0
 8014cb2:	1caa      	adds	r2, r5, #2
 8014cb4:	9215      	str	r2, [sp, #84]	; 0x54
 8014cb6:	78aa      	ldrb	r2, [r5, #2]
 8014cb8:	e788      	b.n	8014bcc <_strtod_l+0x19c>
 8014cba:	f04f 0c01 	mov.w	ip, #1
 8014cbe:	e7f8      	b.n	8014cb2 <_strtod_l+0x282>
 8014cc0:	0801adcc 	.word	0x0801adcc
 8014cc4:	0801adc9 	.word	0x0801adc9
 8014cc8:	7ff00000 	.word	0x7ff00000
 8014ccc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014cce:	1c51      	adds	r1, r2, #1
 8014cd0:	9115      	str	r1, [sp, #84]	; 0x54
 8014cd2:	7852      	ldrb	r2, [r2, #1]
 8014cd4:	2a30      	cmp	r2, #48	; 0x30
 8014cd6:	d0f9      	beq.n	8014ccc <_strtod_l+0x29c>
 8014cd8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014cdc:	2908      	cmp	r1, #8
 8014cde:	f63f af7a 	bhi.w	8014bd6 <_strtod_l+0x1a6>
 8014ce2:	3a30      	subs	r2, #48	; 0x30
 8014ce4:	9208      	str	r2, [sp, #32]
 8014ce6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014ce8:	920c      	str	r2, [sp, #48]	; 0x30
 8014cea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014cec:	1c57      	adds	r7, r2, #1
 8014cee:	9715      	str	r7, [sp, #84]	; 0x54
 8014cf0:	7852      	ldrb	r2, [r2, #1]
 8014cf2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014cf6:	f1be 0f09 	cmp.w	lr, #9
 8014cfa:	d938      	bls.n	8014d6e <_strtod_l+0x33e>
 8014cfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014cfe:	1a7f      	subs	r7, r7, r1
 8014d00:	2f08      	cmp	r7, #8
 8014d02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014d06:	dc03      	bgt.n	8014d10 <_strtod_l+0x2e0>
 8014d08:	9908      	ldr	r1, [sp, #32]
 8014d0a:	428f      	cmp	r7, r1
 8014d0c:	bfa8      	it	ge
 8014d0e:	460f      	movge	r7, r1
 8014d10:	f1bc 0f00 	cmp.w	ip, #0
 8014d14:	d000      	beq.n	8014d18 <_strtod_l+0x2e8>
 8014d16:	427f      	negs	r7, r7
 8014d18:	2e00      	cmp	r6, #0
 8014d1a:	d14f      	bne.n	8014dbc <_strtod_l+0x38c>
 8014d1c:	9904      	ldr	r1, [sp, #16]
 8014d1e:	4301      	orrs	r1, r0
 8014d20:	f47f aec1 	bne.w	8014aa6 <_strtod_l+0x76>
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	f47f aedb 	bne.w	8014ae0 <_strtod_l+0xb0>
 8014d2a:	2a69      	cmp	r2, #105	; 0x69
 8014d2c:	d029      	beq.n	8014d82 <_strtod_l+0x352>
 8014d2e:	dc26      	bgt.n	8014d7e <_strtod_l+0x34e>
 8014d30:	2a49      	cmp	r2, #73	; 0x49
 8014d32:	d026      	beq.n	8014d82 <_strtod_l+0x352>
 8014d34:	2a4e      	cmp	r2, #78	; 0x4e
 8014d36:	f47f aed3 	bne.w	8014ae0 <_strtod_l+0xb0>
 8014d3a:	499b      	ldr	r1, [pc, #620]	; (8014fa8 <_strtod_l+0x578>)
 8014d3c:	a815      	add	r0, sp, #84	; 0x54
 8014d3e:	f001 fea5 	bl	8016a8c <__match>
 8014d42:	2800      	cmp	r0, #0
 8014d44:	f43f aecc 	beq.w	8014ae0 <_strtod_l+0xb0>
 8014d48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	2b28      	cmp	r3, #40	; 0x28
 8014d4e:	d12f      	bne.n	8014db0 <_strtod_l+0x380>
 8014d50:	4996      	ldr	r1, [pc, #600]	; (8014fac <_strtod_l+0x57c>)
 8014d52:	aa18      	add	r2, sp, #96	; 0x60
 8014d54:	a815      	add	r0, sp, #84	; 0x54
 8014d56:	f001 fead 	bl	8016ab4 <__hexnan>
 8014d5a:	2805      	cmp	r0, #5
 8014d5c:	d128      	bne.n	8014db0 <_strtod_l+0x380>
 8014d5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014d64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014d68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014d6c:	e69b      	b.n	8014aa6 <_strtod_l+0x76>
 8014d6e:	9f08      	ldr	r7, [sp, #32]
 8014d70:	210a      	movs	r1, #10
 8014d72:	fb01 2107 	mla	r1, r1, r7, r2
 8014d76:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014d7a:	9208      	str	r2, [sp, #32]
 8014d7c:	e7b5      	b.n	8014cea <_strtod_l+0x2ba>
 8014d7e:	2a6e      	cmp	r2, #110	; 0x6e
 8014d80:	e7d9      	b.n	8014d36 <_strtod_l+0x306>
 8014d82:	498b      	ldr	r1, [pc, #556]	; (8014fb0 <_strtod_l+0x580>)
 8014d84:	a815      	add	r0, sp, #84	; 0x54
 8014d86:	f001 fe81 	bl	8016a8c <__match>
 8014d8a:	2800      	cmp	r0, #0
 8014d8c:	f43f aea8 	beq.w	8014ae0 <_strtod_l+0xb0>
 8014d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d92:	4988      	ldr	r1, [pc, #544]	; (8014fb4 <_strtod_l+0x584>)
 8014d94:	3b01      	subs	r3, #1
 8014d96:	a815      	add	r0, sp, #84	; 0x54
 8014d98:	9315      	str	r3, [sp, #84]	; 0x54
 8014d9a:	f001 fe77 	bl	8016a8c <__match>
 8014d9e:	b910      	cbnz	r0, 8014da6 <_strtod_l+0x376>
 8014da0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014da2:	3301      	adds	r3, #1
 8014da4:	9315      	str	r3, [sp, #84]	; 0x54
 8014da6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014fc4 <_strtod_l+0x594>
 8014daa:	f04f 0800 	mov.w	r8, #0
 8014dae:	e67a      	b.n	8014aa6 <_strtod_l+0x76>
 8014db0:	4881      	ldr	r0, [pc, #516]	; (8014fb8 <_strtod_l+0x588>)
 8014db2:	f000 fd39 	bl	8015828 <nan>
 8014db6:	ec59 8b10 	vmov	r8, r9, d0
 8014dba:	e674      	b.n	8014aa6 <_strtod_l+0x76>
 8014dbc:	9b05      	ldr	r3, [sp, #20]
 8014dbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014dc0:	1afb      	subs	r3, r7, r3
 8014dc2:	f1bb 0f00 	cmp.w	fp, #0
 8014dc6:	bf08      	it	eq
 8014dc8:	46b3      	moveq	fp, r6
 8014dca:	2e10      	cmp	r6, #16
 8014dcc:	9308      	str	r3, [sp, #32]
 8014dce:	4635      	mov	r5, r6
 8014dd0:	bfa8      	it	ge
 8014dd2:	2510      	movge	r5, #16
 8014dd4:	f7eb fb96 	bl	8000504 <__aeabi_ui2d>
 8014dd8:	2e09      	cmp	r6, #9
 8014dda:	4680      	mov	r8, r0
 8014ddc:	4689      	mov	r9, r1
 8014dde:	dd13      	ble.n	8014e08 <_strtod_l+0x3d8>
 8014de0:	4b76      	ldr	r3, [pc, #472]	; (8014fbc <_strtod_l+0x58c>)
 8014de2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014de6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014dea:	f7eb fc05 	bl	80005f8 <__aeabi_dmul>
 8014dee:	4680      	mov	r8, r0
 8014df0:	4650      	mov	r0, sl
 8014df2:	4689      	mov	r9, r1
 8014df4:	f7eb fb86 	bl	8000504 <__aeabi_ui2d>
 8014df8:	4602      	mov	r2, r0
 8014dfa:	460b      	mov	r3, r1
 8014dfc:	4640      	mov	r0, r8
 8014dfe:	4649      	mov	r1, r9
 8014e00:	f7eb fa44 	bl	800028c <__adddf3>
 8014e04:	4680      	mov	r8, r0
 8014e06:	4689      	mov	r9, r1
 8014e08:	2e0f      	cmp	r6, #15
 8014e0a:	dc38      	bgt.n	8014e7e <_strtod_l+0x44e>
 8014e0c:	9b08      	ldr	r3, [sp, #32]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	f43f ae49 	beq.w	8014aa6 <_strtod_l+0x76>
 8014e14:	dd24      	ble.n	8014e60 <_strtod_l+0x430>
 8014e16:	2b16      	cmp	r3, #22
 8014e18:	dc0b      	bgt.n	8014e32 <_strtod_l+0x402>
 8014e1a:	4968      	ldr	r1, [pc, #416]	; (8014fbc <_strtod_l+0x58c>)
 8014e1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e24:	4642      	mov	r2, r8
 8014e26:	464b      	mov	r3, r9
 8014e28:	f7eb fbe6 	bl	80005f8 <__aeabi_dmul>
 8014e2c:	4680      	mov	r8, r0
 8014e2e:	4689      	mov	r9, r1
 8014e30:	e639      	b.n	8014aa6 <_strtod_l+0x76>
 8014e32:	9a08      	ldr	r2, [sp, #32]
 8014e34:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014e38:	4293      	cmp	r3, r2
 8014e3a:	db20      	blt.n	8014e7e <_strtod_l+0x44e>
 8014e3c:	4c5f      	ldr	r4, [pc, #380]	; (8014fbc <_strtod_l+0x58c>)
 8014e3e:	f1c6 060f 	rsb	r6, r6, #15
 8014e42:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014e46:	4642      	mov	r2, r8
 8014e48:	464b      	mov	r3, r9
 8014e4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e4e:	f7eb fbd3 	bl	80005f8 <__aeabi_dmul>
 8014e52:	9b08      	ldr	r3, [sp, #32]
 8014e54:	1b9e      	subs	r6, r3, r6
 8014e56:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8014e5a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014e5e:	e7e3      	b.n	8014e28 <_strtod_l+0x3f8>
 8014e60:	9b08      	ldr	r3, [sp, #32]
 8014e62:	3316      	adds	r3, #22
 8014e64:	db0b      	blt.n	8014e7e <_strtod_l+0x44e>
 8014e66:	9b05      	ldr	r3, [sp, #20]
 8014e68:	1bdf      	subs	r7, r3, r7
 8014e6a:	4b54      	ldr	r3, [pc, #336]	; (8014fbc <_strtod_l+0x58c>)
 8014e6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014e74:	4640      	mov	r0, r8
 8014e76:	4649      	mov	r1, r9
 8014e78:	f7eb fce8 	bl	800084c <__aeabi_ddiv>
 8014e7c:	e7d6      	b.n	8014e2c <_strtod_l+0x3fc>
 8014e7e:	9b08      	ldr	r3, [sp, #32]
 8014e80:	1b75      	subs	r5, r6, r5
 8014e82:	441d      	add	r5, r3
 8014e84:	2d00      	cmp	r5, #0
 8014e86:	dd70      	ble.n	8014f6a <_strtod_l+0x53a>
 8014e88:	f015 030f 	ands.w	r3, r5, #15
 8014e8c:	d00a      	beq.n	8014ea4 <_strtod_l+0x474>
 8014e8e:	494b      	ldr	r1, [pc, #300]	; (8014fbc <_strtod_l+0x58c>)
 8014e90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014e94:	4642      	mov	r2, r8
 8014e96:	464b      	mov	r3, r9
 8014e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e9c:	f7eb fbac 	bl	80005f8 <__aeabi_dmul>
 8014ea0:	4680      	mov	r8, r0
 8014ea2:	4689      	mov	r9, r1
 8014ea4:	f035 050f 	bics.w	r5, r5, #15
 8014ea8:	d04d      	beq.n	8014f46 <_strtod_l+0x516>
 8014eaa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8014eae:	dd22      	ble.n	8014ef6 <_strtod_l+0x4c6>
 8014eb0:	2500      	movs	r5, #0
 8014eb2:	46ab      	mov	fp, r5
 8014eb4:	9509      	str	r5, [sp, #36]	; 0x24
 8014eb6:	9505      	str	r5, [sp, #20]
 8014eb8:	2322      	movs	r3, #34	; 0x22
 8014eba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014fc4 <_strtod_l+0x594>
 8014ebe:	6023      	str	r3, [r4, #0]
 8014ec0:	f04f 0800 	mov.w	r8, #0
 8014ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	f43f aded 	beq.w	8014aa6 <_strtod_l+0x76>
 8014ecc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014ece:	4620      	mov	r0, r4
 8014ed0:	f002 f998 	bl	8017204 <_Bfree>
 8014ed4:	9905      	ldr	r1, [sp, #20]
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	f002 f994 	bl	8017204 <_Bfree>
 8014edc:	4659      	mov	r1, fp
 8014ede:	4620      	mov	r0, r4
 8014ee0:	f002 f990 	bl	8017204 <_Bfree>
 8014ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f002 f98c 	bl	8017204 <_Bfree>
 8014eec:	4629      	mov	r1, r5
 8014eee:	4620      	mov	r0, r4
 8014ef0:	f002 f988 	bl	8017204 <_Bfree>
 8014ef4:	e5d7      	b.n	8014aa6 <_strtod_l+0x76>
 8014ef6:	4b32      	ldr	r3, [pc, #200]	; (8014fc0 <_strtod_l+0x590>)
 8014ef8:	9304      	str	r3, [sp, #16]
 8014efa:	2300      	movs	r3, #0
 8014efc:	112d      	asrs	r5, r5, #4
 8014efe:	4640      	mov	r0, r8
 8014f00:	4649      	mov	r1, r9
 8014f02:	469a      	mov	sl, r3
 8014f04:	2d01      	cmp	r5, #1
 8014f06:	dc21      	bgt.n	8014f4c <_strtod_l+0x51c>
 8014f08:	b10b      	cbz	r3, 8014f0e <_strtod_l+0x4de>
 8014f0a:	4680      	mov	r8, r0
 8014f0c:	4689      	mov	r9, r1
 8014f0e:	492c      	ldr	r1, [pc, #176]	; (8014fc0 <_strtod_l+0x590>)
 8014f10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014f14:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014f18:	4642      	mov	r2, r8
 8014f1a:	464b      	mov	r3, r9
 8014f1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f20:	f7eb fb6a 	bl	80005f8 <__aeabi_dmul>
 8014f24:	4b27      	ldr	r3, [pc, #156]	; (8014fc4 <_strtod_l+0x594>)
 8014f26:	460a      	mov	r2, r1
 8014f28:	400b      	ands	r3, r1
 8014f2a:	4927      	ldr	r1, [pc, #156]	; (8014fc8 <_strtod_l+0x598>)
 8014f2c:	428b      	cmp	r3, r1
 8014f2e:	4680      	mov	r8, r0
 8014f30:	d8be      	bhi.n	8014eb0 <_strtod_l+0x480>
 8014f32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014f36:	428b      	cmp	r3, r1
 8014f38:	bf86      	itte	hi
 8014f3a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8014fcc <_strtod_l+0x59c>
 8014f3e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8014f42:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014f46:	2300      	movs	r3, #0
 8014f48:	9304      	str	r3, [sp, #16]
 8014f4a:	e07b      	b.n	8015044 <_strtod_l+0x614>
 8014f4c:	07ea      	lsls	r2, r5, #31
 8014f4e:	d505      	bpl.n	8014f5c <_strtod_l+0x52c>
 8014f50:	9b04      	ldr	r3, [sp, #16]
 8014f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f56:	f7eb fb4f 	bl	80005f8 <__aeabi_dmul>
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	9a04      	ldr	r2, [sp, #16]
 8014f5e:	3208      	adds	r2, #8
 8014f60:	f10a 0a01 	add.w	sl, sl, #1
 8014f64:	106d      	asrs	r5, r5, #1
 8014f66:	9204      	str	r2, [sp, #16]
 8014f68:	e7cc      	b.n	8014f04 <_strtod_l+0x4d4>
 8014f6a:	d0ec      	beq.n	8014f46 <_strtod_l+0x516>
 8014f6c:	426d      	negs	r5, r5
 8014f6e:	f015 020f 	ands.w	r2, r5, #15
 8014f72:	d00a      	beq.n	8014f8a <_strtod_l+0x55a>
 8014f74:	4b11      	ldr	r3, [pc, #68]	; (8014fbc <_strtod_l+0x58c>)
 8014f76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f7a:	4640      	mov	r0, r8
 8014f7c:	4649      	mov	r1, r9
 8014f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f82:	f7eb fc63 	bl	800084c <__aeabi_ddiv>
 8014f86:	4680      	mov	r8, r0
 8014f88:	4689      	mov	r9, r1
 8014f8a:	112d      	asrs	r5, r5, #4
 8014f8c:	d0db      	beq.n	8014f46 <_strtod_l+0x516>
 8014f8e:	2d1f      	cmp	r5, #31
 8014f90:	dd1e      	ble.n	8014fd0 <_strtod_l+0x5a0>
 8014f92:	2500      	movs	r5, #0
 8014f94:	46ab      	mov	fp, r5
 8014f96:	9509      	str	r5, [sp, #36]	; 0x24
 8014f98:	9505      	str	r5, [sp, #20]
 8014f9a:	2322      	movs	r3, #34	; 0x22
 8014f9c:	f04f 0800 	mov.w	r8, #0
 8014fa0:	f04f 0900 	mov.w	r9, #0
 8014fa4:	6023      	str	r3, [r4, #0]
 8014fa6:	e78d      	b.n	8014ec4 <_strtod_l+0x494>
 8014fa8:	0801ad9d 	.word	0x0801ad9d
 8014fac:	0801ade0 	.word	0x0801ade0
 8014fb0:	0801ad95 	.word	0x0801ad95
 8014fb4:	0801af2c 	.word	0x0801af2c
 8014fb8:	0801b1b7 	.word	0x0801b1b7
 8014fbc:	0801b0a8 	.word	0x0801b0a8
 8014fc0:	0801b080 	.word	0x0801b080
 8014fc4:	7ff00000 	.word	0x7ff00000
 8014fc8:	7ca00000 	.word	0x7ca00000
 8014fcc:	7fefffff 	.word	0x7fefffff
 8014fd0:	f015 0310 	ands.w	r3, r5, #16
 8014fd4:	bf18      	it	ne
 8014fd6:	236a      	movne	r3, #106	; 0x6a
 8014fd8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801537c <_strtod_l+0x94c>
 8014fdc:	9304      	str	r3, [sp, #16]
 8014fde:	4640      	mov	r0, r8
 8014fe0:	4649      	mov	r1, r9
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	07ea      	lsls	r2, r5, #31
 8014fe6:	d504      	bpl.n	8014ff2 <_strtod_l+0x5c2>
 8014fe8:	e9da 2300 	ldrd	r2, r3, [sl]
 8014fec:	f7eb fb04 	bl	80005f8 <__aeabi_dmul>
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	106d      	asrs	r5, r5, #1
 8014ff4:	f10a 0a08 	add.w	sl, sl, #8
 8014ff8:	d1f4      	bne.n	8014fe4 <_strtod_l+0x5b4>
 8014ffa:	b10b      	cbz	r3, 8015000 <_strtod_l+0x5d0>
 8014ffc:	4680      	mov	r8, r0
 8014ffe:	4689      	mov	r9, r1
 8015000:	9b04      	ldr	r3, [sp, #16]
 8015002:	b1bb      	cbz	r3, 8015034 <_strtod_l+0x604>
 8015004:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8015008:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801500c:	2b00      	cmp	r3, #0
 801500e:	4649      	mov	r1, r9
 8015010:	dd10      	ble.n	8015034 <_strtod_l+0x604>
 8015012:	2b1f      	cmp	r3, #31
 8015014:	f340 811e 	ble.w	8015254 <_strtod_l+0x824>
 8015018:	2b34      	cmp	r3, #52	; 0x34
 801501a:	bfde      	ittt	le
 801501c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8015020:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8015024:	4093      	lslle	r3, r2
 8015026:	f04f 0800 	mov.w	r8, #0
 801502a:	bfcc      	ite	gt
 801502c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015030:	ea03 0901 	andle.w	r9, r3, r1
 8015034:	2200      	movs	r2, #0
 8015036:	2300      	movs	r3, #0
 8015038:	4640      	mov	r0, r8
 801503a:	4649      	mov	r1, r9
 801503c:	f7eb fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 8015040:	2800      	cmp	r0, #0
 8015042:	d1a6      	bne.n	8014f92 <_strtod_l+0x562>
 8015044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015046:	9300      	str	r3, [sp, #0]
 8015048:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801504a:	4633      	mov	r3, r6
 801504c:	465a      	mov	r2, fp
 801504e:	4620      	mov	r0, r4
 8015050:	f002 f940 	bl	80172d4 <__s2b>
 8015054:	9009      	str	r0, [sp, #36]	; 0x24
 8015056:	2800      	cmp	r0, #0
 8015058:	f43f af2a 	beq.w	8014eb0 <_strtod_l+0x480>
 801505c:	9a08      	ldr	r2, [sp, #32]
 801505e:	9b05      	ldr	r3, [sp, #20]
 8015060:	2a00      	cmp	r2, #0
 8015062:	eba3 0307 	sub.w	r3, r3, r7
 8015066:	bfa8      	it	ge
 8015068:	2300      	movge	r3, #0
 801506a:	930c      	str	r3, [sp, #48]	; 0x30
 801506c:	2500      	movs	r5, #0
 801506e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015072:	9312      	str	r3, [sp, #72]	; 0x48
 8015074:	46ab      	mov	fp, r5
 8015076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015078:	4620      	mov	r0, r4
 801507a:	6859      	ldr	r1, [r3, #4]
 801507c:	f002 f882 	bl	8017184 <_Balloc>
 8015080:	9005      	str	r0, [sp, #20]
 8015082:	2800      	cmp	r0, #0
 8015084:	f43f af18 	beq.w	8014eb8 <_strtod_l+0x488>
 8015088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801508a:	691a      	ldr	r2, [r3, #16]
 801508c:	3202      	adds	r2, #2
 801508e:	f103 010c 	add.w	r1, r3, #12
 8015092:	0092      	lsls	r2, r2, #2
 8015094:	300c      	adds	r0, #12
 8015096:	f000 fbb7 	bl	8015808 <memcpy>
 801509a:	ec49 8b10 	vmov	d0, r8, r9
 801509e:	aa18      	add	r2, sp, #96	; 0x60
 80150a0:	a917      	add	r1, sp, #92	; 0x5c
 80150a2:	4620      	mov	r0, r4
 80150a4:	f002 fc4a 	bl	801793c <__d2b>
 80150a8:	ec49 8b18 	vmov	d8, r8, r9
 80150ac:	9016      	str	r0, [sp, #88]	; 0x58
 80150ae:	2800      	cmp	r0, #0
 80150b0:	f43f af02 	beq.w	8014eb8 <_strtod_l+0x488>
 80150b4:	2101      	movs	r1, #1
 80150b6:	4620      	mov	r0, r4
 80150b8:	f002 f9a4 	bl	8017404 <__i2b>
 80150bc:	4683      	mov	fp, r0
 80150be:	2800      	cmp	r0, #0
 80150c0:	f43f aefa 	beq.w	8014eb8 <_strtod_l+0x488>
 80150c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80150c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80150c8:	2e00      	cmp	r6, #0
 80150ca:	bfab      	itete	ge
 80150cc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80150ce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80150d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80150d2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80150d6:	bfac      	ite	ge
 80150d8:	eb06 0a03 	addge.w	sl, r6, r3
 80150dc:	1b9f      	sublt	r7, r3, r6
 80150de:	9b04      	ldr	r3, [sp, #16]
 80150e0:	1af6      	subs	r6, r6, r3
 80150e2:	4416      	add	r6, r2
 80150e4:	4ba0      	ldr	r3, [pc, #640]	; (8015368 <_strtod_l+0x938>)
 80150e6:	3e01      	subs	r6, #1
 80150e8:	429e      	cmp	r6, r3
 80150ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80150ee:	f280 80c4 	bge.w	801527a <_strtod_l+0x84a>
 80150f2:	1b9b      	subs	r3, r3, r6
 80150f4:	2b1f      	cmp	r3, #31
 80150f6:	eba2 0203 	sub.w	r2, r2, r3
 80150fa:	f04f 0101 	mov.w	r1, #1
 80150fe:	f300 80b0 	bgt.w	8015262 <_strtod_l+0x832>
 8015102:	fa01 f303 	lsl.w	r3, r1, r3
 8015106:	930e      	str	r3, [sp, #56]	; 0x38
 8015108:	2300      	movs	r3, #0
 801510a:	930d      	str	r3, [sp, #52]	; 0x34
 801510c:	eb0a 0602 	add.w	r6, sl, r2
 8015110:	9b04      	ldr	r3, [sp, #16]
 8015112:	45b2      	cmp	sl, r6
 8015114:	4417      	add	r7, r2
 8015116:	441f      	add	r7, r3
 8015118:	4653      	mov	r3, sl
 801511a:	bfa8      	it	ge
 801511c:	4633      	movge	r3, r6
 801511e:	42bb      	cmp	r3, r7
 8015120:	bfa8      	it	ge
 8015122:	463b      	movge	r3, r7
 8015124:	2b00      	cmp	r3, #0
 8015126:	bfc2      	ittt	gt
 8015128:	1af6      	subgt	r6, r6, r3
 801512a:	1aff      	subgt	r7, r7, r3
 801512c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015130:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015132:	2b00      	cmp	r3, #0
 8015134:	dd17      	ble.n	8015166 <_strtod_l+0x736>
 8015136:	4659      	mov	r1, fp
 8015138:	461a      	mov	r2, r3
 801513a:	4620      	mov	r0, r4
 801513c:	f002 fa22 	bl	8017584 <__pow5mult>
 8015140:	4683      	mov	fp, r0
 8015142:	2800      	cmp	r0, #0
 8015144:	f43f aeb8 	beq.w	8014eb8 <_strtod_l+0x488>
 8015148:	4601      	mov	r1, r0
 801514a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801514c:	4620      	mov	r0, r4
 801514e:	f002 f96f 	bl	8017430 <__multiply>
 8015152:	900b      	str	r0, [sp, #44]	; 0x2c
 8015154:	2800      	cmp	r0, #0
 8015156:	f43f aeaf 	beq.w	8014eb8 <_strtod_l+0x488>
 801515a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801515c:	4620      	mov	r0, r4
 801515e:	f002 f851 	bl	8017204 <_Bfree>
 8015162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015164:	9316      	str	r3, [sp, #88]	; 0x58
 8015166:	2e00      	cmp	r6, #0
 8015168:	f300 808c 	bgt.w	8015284 <_strtod_l+0x854>
 801516c:	9b08      	ldr	r3, [sp, #32]
 801516e:	2b00      	cmp	r3, #0
 8015170:	dd08      	ble.n	8015184 <_strtod_l+0x754>
 8015172:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015174:	9905      	ldr	r1, [sp, #20]
 8015176:	4620      	mov	r0, r4
 8015178:	f002 fa04 	bl	8017584 <__pow5mult>
 801517c:	9005      	str	r0, [sp, #20]
 801517e:	2800      	cmp	r0, #0
 8015180:	f43f ae9a 	beq.w	8014eb8 <_strtod_l+0x488>
 8015184:	2f00      	cmp	r7, #0
 8015186:	dd08      	ble.n	801519a <_strtod_l+0x76a>
 8015188:	9905      	ldr	r1, [sp, #20]
 801518a:	463a      	mov	r2, r7
 801518c:	4620      	mov	r0, r4
 801518e:	f002 fa53 	bl	8017638 <__lshift>
 8015192:	9005      	str	r0, [sp, #20]
 8015194:	2800      	cmp	r0, #0
 8015196:	f43f ae8f 	beq.w	8014eb8 <_strtod_l+0x488>
 801519a:	f1ba 0f00 	cmp.w	sl, #0
 801519e:	dd08      	ble.n	80151b2 <_strtod_l+0x782>
 80151a0:	4659      	mov	r1, fp
 80151a2:	4652      	mov	r2, sl
 80151a4:	4620      	mov	r0, r4
 80151a6:	f002 fa47 	bl	8017638 <__lshift>
 80151aa:	4683      	mov	fp, r0
 80151ac:	2800      	cmp	r0, #0
 80151ae:	f43f ae83 	beq.w	8014eb8 <_strtod_l+0x488>
 80151b2:	9a05      	ldr	r2, [sp, #20]
 80151b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80151b6:	4620      	mov	r0, r4
 80151b8:	f002 fac6 	bl	8017748 <__mdiff>
 80151bc:	4605      	mov	r5, r0
 80151be:	2800      	cmp	r0, #0
 80151c0:	f43f ae7a 	beq.w	8014eb8 <_strtod_l+0x488>
 80151c4:	68c3      	ldr	r3, [r0, #12]
 80151c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80151c8:	2300      	movs	r3, #0
 80151ca:	60c3      	str	r3, [r0, #12]
 80151cc:	4659      	mov	r1, fp
 80151ce:	f002 fa9f 	bl	8017710 <__mcmp>
 80151d2:	2800      	cmp	r0, #0
 80151d4:	da60      	bge.n	8015298 <_strtod_l+0x868>
 80151d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151d8:	ea53 0308 	orrs.w	r3, r3, r8
 80151dc:	f040 8084 	bne.w	80152e8 <_strtod_l+0x8b8>
 80151e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d17f      	bne.n	80152e8 <_strtod_l+0x8b8>
 80151e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80151ec:	0d1b      	lsrs	r3, r3, #20
 80151ee:	051b      	lsls	r3, r3, #20
 80151f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80151f4:	d978      	bls.n	80152e8 <_strtod_l+0x8b8>
 80151f6:	696b      	ldr	r3, [r5, #20]
 80151f8:	b913      	cbnz	r3, 8015200 <_strtod_l+0x7d0>
 80151fa:	692b      	ldr	r3, [r5, #16]
 80151fc:	2b01      	cmp	r3, #1
 80151fe:	dd73      	ble.n	80152e8 <_strtod_l+0x8b8>
 8015200:	4629      	mov	r1, r5
 8015202:	2201      	movs	r2, #1
 8015204:	4620      	mov	r0, r4
 8015206:	f002 fa17 	bl	8017638 <__lshift>
 801520a:	4659      	mov	r1, fp
 801520c:	4605      	mov	r5, r0
 801520e:	f002 fa7f 	bl	8017710 <__mcmp>
 8015212:	2800      	cmp	r0, #0
 8015214:	dd68      	ble.n	80152e8 <_strtod_l+0x8b8>
 8015216:	9904      	ldr	r1, [sp, #16]
 8015218:	4a54      	ldr	r2, [pc, #336]	; (801536c <_strtod_l+0x93c>)
 801521a:	464b      	mov	r3, r9
 801521c:	2900      	cmp	r1, #0
 801521e:	f000 8084 	beq.w	801532a <_strtod_l+0x8fa>
 8015222:	ea02 0109 	and.w	r1, r2, r9
 8015226:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801522a:	dc7e      	bgt.n	801532a <_strtod_l+0x8fa>
 801522c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015230:	f77f aeb3 	ble.w	8014f9a <_strtod_l+0x56a>
 8015234:	4b4e      	ldr	r3, [pc, #312]	; (8015370 <_strtod_l+0x940>)
 8015236:	4640      	mov	r0, r8
 8015238:	4649      	mov	r1, r9
 801523a:	2200      	movs	r2, #0
 801523c:	f7eb f9dc 	bl	80005f8 <__aeabi_dmul>
 8015240:	4b4a      	ldr	r3, [pc, #296]	; (801536c <_strtod_l+0x93c>)
 8015242:	400b      	ands	r3, r1
 8015244:	4680      	mov	r8, r0
 8015246:	4689      	mov	r9, r1
 8015248:	2b00      	cmp	r3, #0
 801524a:	f47f ae3f 	bne.w	8014ecc <_strtod_l+0x49c>
 801524e:	2322      	movs	r3, #34	; 0x22
 8015250:	6023      	str	r3, [r4, #0]
 8015252:	e63b      	b.n	8014ecc <_strtod_l+0x49c>
 8015254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015258:	fa02 f303 	lsl.w	r3, r2, r3
 801525c:	ea03 0808 	and.w	r8, r3, r8
 8015260:	e6e8      	b.n	8015034 <_strtod_l+0x604>
 8015262:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015266:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801526a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801526e:	36e2      	adds	r6, #226	; 0xe2
 8015270:	fa01 f306 	lsl.w	r3, r1, r6
 8015274:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015278:	e748      	b.n	801510c <_strtod_l+0x6dc>
 801527a:	2100      	movs	r1, #0
 801527c:	2301      	movs	r3, #1
 801527e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8015282:	e743      	b.n	801510c <_strtod_l+0x6dc>
 8015284:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015286:	4632      	mov	r2, r6
 8015288:	4620      	mov	r0, r4
 801528a:	f002 f9d5 	bl	8017638 <__lshift>
 801528e:	9016      	str	r0, [sp, #88]	; 0x58
 8015290:	2800      	cmp	r0, #0
 8015292:	f47f af6b 	bne.w	801516c <_strtod_l+0x73c>
 8015296:	e60f      	b.n	8014eb8 <_strtod_l+0x488>
 8015298:	46ca      	mov	sl, r9
 801529a:	d171      	bne.n	8015380 <_strtod_l+0x950>
 801529c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801529e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80152a2:	b352      	cbz	r2, 80152fa <_strtod_l+0x8ca>
 80152a4:	4a33      	ldr	r2, [pc, #204]	; (8015374 <_strtod_l+0x944>)
 80152a6:	4293      	cmp	r3, r2
 80152a8:	d12a      	bne.n	8015300 <_strtod_l+0x8d0>
 80152aa:	9b04      	ldr	r3, [sp, #16]
 80152ac:	4641      	mov	r1, r8
 80152ae:	b1fb      	cbz	r3, 80152f0 <_strtod_l+0x8c0>
 80152b0:	4b2e      	ldr	r3, [pc, #184]	; (801536c <_strtod_l+0x93c>)
 80152b2:	ea09 0303 	and.w	r3, r9, r3
 80152b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80152ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80152be:	d81a      	bhi.n	80152f6 <_strtod_l+0x8c6>
 80152c0:	0d1b      	lsrs	r3, r3, #20
 80152c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80152c6:	fa02 f303 	lsl.w	r3, r2, r3
 80152ca:	4299      	cmp	r1, r3
 80152cc:	d118      	bne.n	8015300 <_strtod_l+0x8d0>
 80152ce:	4b2a      	ldr	r3, [pc, #168]	; (8015378 <_strtod_l+0x948>)
 80152d0:	459a      	cmp	sl, r3
 80152d2:	d102      	bne.n	80152da <_strtod_l+0x8aa>
 80152d4:	3101      	adds	r1, #1
 80152d6:	f43f adef 	beq.w	8014eb8 <_strtod_l+0x488>
 80152da:	4b24      	ldr	r3, [pc, #144]	; (801536c <_strtod_l+0x93c>)
 80152dc:	ea0a 0303 	and.w	r3, sl, r3
 80152e0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80152e4:	f04f 0800 	mov.w	r8, #0
 80152e8:	9b04      	ldr	r3, [sp, #16]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d1a2      	bne.n	8015234 <_strtod_l+0x804>
 80152ee:	e5ed      	b.n	8014ecc <_strtod_l+0x49c>
 80152f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80152f4:	e7e9      	b.n	80152ca <_strtod_l+0x89a>
 80152f6:	4613      	mov	r3, r2
 80152f8:	e7e7      	b.n	80152ca <_strtod_l+0x89a>
 80152fa:	ea53 0308 	orrs.w	r3, r3, r8
 80152fe:	d08a      	beq.n	8015216 <_strtod_l+0x7e6>
 8015300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015302:	b1e3      	cbz	r3, 801533e <_strtod_l+0x90e>
 8015304:	ea13 0f0a 	tst.w	r3, sl
 8015308:	d0ee      	beq.n	80152e8 <_strtod_l+0x8b8>
 801530a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801530c:	9a04      	ldr	r2, [sp, #16]
 801530e:	4640      	mov	r0, r8
 8015310:	4649      	mov	r1, r9
 8015312:	b1c3      	cbz	r3, 8015346 <_strtod_l+0x916>
 8015314:	f7ff fb70 	bl	80149f8 <sulp>
 8015318:	4602      	mov	r2, r0
 801531a:	460b      	mov	r3, r1
 801531c:	ec51 0b18 	vmov	r0, r1, d8
 8015320:	f7ea ffb4 	bl	800028c <__adddf3>
 8015324:	4680      	mov	r8, r0
 8015326:	4689      	mov	r9, r1
 8015328:	e7de      	b.n	80152e8 <_strtod_l+0x8b8>
 801532a:	4013      	ands	r3, r2
 801532c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015330:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8015334:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015338:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801533c:	e7d4      	b.n	80152e8 <_strtod_l+0x8b8>
 801533e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015340:	ea13 0f08 	tst.w	r3, r8
 8015344:	e7e0      	b.n	8015308 <_strtod_l+0x8d8>
 8015346:	f7ff fb57 	bl	80149f8 <sulp>
 801534a:	4602      	mov	r2, r0
 801534c:	460b      	mov	r3, r1
 801534e:	ec51 0b18 	vmov	r0, r1, d8
 8015352:	f7ea ff99 	bl	8000288 <__aeabi_dsub>
 8015356:	2200      	movs	r2, #0
 8015358:	2300      	movs	r3, #0
 801535a:	4680      	mov	r8, r0
 801535c:	4689      	mov	r9, r1
 801535e:	f7eb fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8015362:	2800      	cmp	r0, #0
 8015364:	d0c0      	beq.n	80152e8 <_strtod_l+0x8b8>
 8015366:	e618      	b.n	8014f9a <_strtod_l+0x56a>
 8015368:	fffffc02 	.word	0xfffffc02
 801536c:	7ff00000 	.word	0x7ff00000
 8015370:	39500000 	.word	0x39500000
 8015374:	000fffff 	.word	0x000fffff
 8015378:	7fefffff 	.word	0x7fefffff
 801537c:	0801adf8 	.word	0x0801adf8
 8015380:	4659      	mov	r1, fp
 8015382:	4628      	mov	r0, r5
 8015384:	f002 fb34 	bl	80179f0 <__ratio>
 8015388:	ec57 6b10 	vmov	r6, r7, d0
 801538c:	ee10 0a10 	vmov	r0, s0
 8015390:	2200      	movs	r2, #0
 8015392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015396:	4639      	mov	r1, r7
 8015398:	f7eb fbaa 	bl	8000af0 <__aeabi_dcmple>
 801539c:	2800      	cmp	r0, #0
 801539e:	d071      	beq.n	8015484 <_strtod_l+0xa54>
 80153a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d17c      	bne.n	80154a0 <_strtod_l+0xa70>
 80153a6:	f1b8 0f00 	cmp.w	r8, #0
 80153aa:	d15a      	bne.n	8015462 <_strtod_l+0xa32>
 80153ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d15d      	bne.n	8015470 <_strtod_l+0xa40>
 80153b4:	4b90      	ldr	r3, [pc, #576]	; (80155f8 <_strtod_l+0xbc8>)
 80153b6:	2200      	movs	r2, #0
 80153b8:	4630      	mov	r0, r6
 80153ba:	4639      	mov	r1, r7
 80153bc:	f7eb fb8e 	bl	8000adc <__aeabi_dcmplt>
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d15c      	bne.n	801547e <_strtod_l+0xa4e>
 80153c4:	4630      	mov	r0, r6
 80153c6:	4639      	mov	r1, r7
 80153c8:	4b8c      	ldr	r3, [pc, #560]	; (80155fc <_strtod_l+0xbcc>)
 80153ca:	2200      	movs	r2, #0
 80153cc:	f7eb f914 	bl	80005f8 <__aeabi_dmul>
 80153d0:	4606      	mov	r6, r0
 80153d2:	460f      	mov	r7, r1
 80153d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80153d8:	9606      	str	r6, [sp, #24]
 80153da:	9307      	str	r3, [sp, #28]
 80153dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80153e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80153e4:	4b86      	ldr	r3, [pc, #536]	; (8015600 <_strtod_l+0xbd0>)
 80153e6:	ea0a 0303 	and.w	r3, sl, r3
 80153ea:	930d      	str	r3, [sp, #52]	; 0x34
 80153ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80153ee:	4b85      	ldr	r3, [pc, #532]	; (8015604 <_strtod_l+0xbd4>)
 80153f0:	429a      	cmp	r2, r3
 80153f2:	f040 8090 	bne.w	8015516 <_strtod_l+0xae6>
 80153f6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80153fa:	ec49 8b10 	vmov	d0, r8, r9
 80153fe:	f002 fa2d 	bl	801785c <__ulp>
 8015402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015406:	ec51 0b10 	vmov	r0, r1, d0
 801540a:	f7eb f8f5 	bl	80005f8 <__aeabi_dmul>
 801540e:	4642      	mov	r2, r8
 8015410:	464b      	mov	r3, r9
 8015412:	f7ea ff3b 	bl	800028c <__adddf3>
 8015416:	460b      	mov	r3, r1
 8015418:	4979      	ldr	r1, [pc, #484]	; (8015600 <_strtod_l+0xbd0>)
 801541a:	4a7b      	ldr	r2, [pc, #492]	; (8015608 <_strtod_l+0xbd8>)
 801541c:	4019      	ands	r1, r3
 801541e:	4291      	cmp	r1, r2
 8015420:	4680      	mov	r8, r0
 8015422:	d944      	bls.n	80154ae <_strtod_l+0xa7e>
 8015424:	ee18 2a90 	vmov	r2, s17
 8015428:	4b78      	ldr	r3, [pc, #480]	; (801560c <_strtod_l+0xbdc>)
 801542a:	429a      	cmp	r2, r3
 801542c:	d104      	bne.n	8015438 <_strtod_l+0xa08>
 801542e:	ee18 3a10 	vmov	r3, s16
 8015432:	3301      	adds	r3, #1
 8015434:	f43f ad40 	beq.w	8014eb8 <_strtod_l+0x488>
 8015438:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801560c <_strtod_l+0xbdc>
 801543c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015440:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015442:	4620      	mov	r0, r4
 8015444:	f001 fede 	bl	8017204 <_Bfree>
 8015448:	9905      	ldr	r1, [sp, #20]
 801544a:	4620      	mov	r0, r4
 801544c:	f001 feda 	bl	8017204 <_Bfree>
 8015450:	4659      	mov	r1, fp
 8015452:	4620      	mov	r0, r4
 8015454:	f001 fed6 	bl	8017204 <_Bfree>
 8015458:	4629      	mov	r1, r5
 801545a:	4620      	mov	r0, r4
 801545c:	f001 fed2 	bl	8017204 <_Bfree>
 8015460:	e609      	b.n	8015076 <_strtod_l+0x646>
 8015462:	f1b8 0f01 	cmp.w	r8, #1
 8015466:	d103      	bne.n	8015470 <_strtod_l+0xa40>
 8015468:	f1b9 0f00 	cmp.w	r9, #0
 801546c:	f43f ad95 	beq.w	8014f9a <_strtod_l+0x56a>
 8015470:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80155c8 <_strtod_l+0xb98>
 8015474:	4f60      	ldr	r7, [pc, #384]	; (80155f8 <_strtod_l+0xbc8>)
 8015476:	ed8d 7b06 	vstr	d7, [sp, #24]
 801547a:	2600      	movs	r6, #0
 801547c:	e7ae      	b.n	80153dc <_strtod_l+0x9ac>
 801547e:	4f5f      	ldr	r7, [pc, #380]	; (80155fc <_strtod_l+0xbcc>)
 8015480:	2600      	movs	r6, #0
 8015482:	e7a7      	b.n	80153d4 <_strtod_l+0x9a4>
 8015484:	4b5d      	ldr	r3, [pc, #372]	; (80155fc <_strtod_l+0xbcc>)
 8015486:	4630      	mov	r0, r6
 8015488:	4639      	mov	r1, r7
 801548a:	2200      	movs	r2, #0
 801548c:	f7eb f8b4 	bl	80005f8 <__aeabi_dmul>
 8015490:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015492:	4606      	mov	r6, r0
 8015494:	460f      	mov	r7, r1
 8015496:	2b00      	cmp	r3, #0
 8015498:	d09c      	beq.n	80153d4 <_strtod_l+0x9a4>
 801549a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801549e:	e79d      	b.n	80153dc <_strtod_l+0x9ac>
 80154a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80155d0 <_strtod_l+0xba0>
 80154a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80154a8:	ec57 6b17 	vmov	r6, r7, d7
 80154ac:	e796      	b.n	80153dc <_strtod_l+0x9ac>
 80154ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80154b2:	9b04      	ldr	r3, [sp, #16]
 80154b4:	46ca      	mov	sl, r9
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d1c2      	bne.n	8015440 <_strtod_l+0xa10>
 80154ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80154be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154c0:	0d1b      	lsrs	r3, r3, #20
 80154c2:	051b      	lsls	r3, r3, #20
 80154c4:	429a      	cmp	r2, r3
 80154c6:	d1bb      	bne.n	8015440 <_strtod_l+0xa10>
 80154c8:	4630      	mov	r0, r6
 80154ca:	4639      	mov	r1, r7
 80154cc:	f7eb fbf4 	bl	8000cb8 <__aeabi_d2lz>
 80154d0:	f7eb f864 	bl	800059c <__aeabi_l2d>
 80154d4:	4602      	mov	r2, r0
 80154d6:	460b      	mov	r3, r1
 80154d8:	4630      	mov	r0, r6
 80154da:	4639      	mov	r1, r7
 80154dc:	f7ea fed4 	bl	8000288 <__aeabi_dsub>
 80154e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80154e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80154e6:	ea43 0308 	orr.w	r3, r3, r8
 80154ea:	4313      	orrs	r3, r2
 80154ec:	4606      	mov	r6, r0
 80154ee:	460f      	mov	r7, r1
 80154f0:	d054      	beq.n	801559c <_strtod_l+0xb6c>
 80154f2:	a339      	add	r3, pc, #228	; (adr r3, 80155d8 <_strtod_l+0xba8>)
 80154f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f8:	f7eb faf0 	bl	8000adc <__aeabi_dcmplt>
 80154fc:	2800      	cmp	r0, #0
 80154fe:	f47f ace5 	bne.w	8014ecc <_strtod_l+0x49c>
 8015502:	a337      	add	r3, pc, #220	; (adr r3, 80155e0 <_strtod_l+0xbb0>)
 8015504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015508:	4630      	mov	r0, r6
 801550a:	4639      	mov	r1, r7
 801550c:	f7eb fb04 	bl	8000b18 <__aeabi_dcmpgt>
 8015510:	2800      	cmp	r0, #0
 8015512:	d095      	beq.n	8015440 <_strtod_l+0xa10>
 8015514:	e4da      	b.n	8014ecc <_strtod_l+0x49c>
 8015516:	9b04      	ldr	r3, [sp, #16]
 8015518:	b333      	cbz	r3, 8015568 <_strtod_l+0xb38>
 801551a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801551c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015520:	d822      	bhi.n	8015568 <_strtod_l+0xb38>
 8015522:	a331      	add	r3, pc, #196	; (adr r3, 80155e8 <_strtod_l+0xbb8>)
 8015524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015528:	4630      	mov	r0, r6
 801552a:	4639      	mov	r1, r7
 801552c:	f7eb fae0 	bl	8000af0 <__aeabi_dcmple>
 8015530:	b1a0      	cbz	r0, 801555c <_strtod_l+0xb2c>
 8015532:	4639      	mov	r1, r7
 8015534:	4630      	mov	r0, r6
 8015536:	f7eb fb37 	bl	8000ba8 <__aeabi_d2uiz>
 801553a:	2801      	cmp	r0, #1
 801553c:	bf38      	it	cc
 801553e:	2001      	movcc	r0, #1
 8015540:	f7ea ffe0 	bl	8000504 <__aeabi_ui2d>
 8015544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015546:	4606      	mov	r6, r0
 8015548:	460f      	mov	r7, r1
 801554a:	bb23      	cbnz	r3, 8015596 <_strtod_l+0xb66>
 801554c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015550:	9010      	str	r0, [sp, #64]	; 0x40
 8015552:	9311      	str	r3, [sp, #68]	; 0x44
 8015554:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015558:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801555c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801555e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015560:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015564:	1a9b      	subs	r3, r3, r2
 8015566:	930f      	str	r3, [sp, #60]	; 0x3c
 8015568:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801556c:	eeb0 0a48 	vmov.f32	s0, s16
 8015570:	eef0 0a68 	vmov.f32	s1, s17
 8015574:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015578:	f002 f970 	bl	801785c <__ulp>
 801557c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015580:	ec53 2b10 	vmov	r2, r3, d0
 8015584:	f7eb f838 	bl	80005f8 <__aeabi_dmul>
 8015588:	ec53 2b18 	vmov	r2, r3, d8
 801558c:	f7ea fe7e 	bl	800028c <__adddf3>
 8015590:	4680      	mov	r8, r0
 8015592:	4689      	mov	r9, r1
 8015594:	e78d      	b.n	80154b2 <_strtod_l+0xa82>
 8015596:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801559a:	e7db      	b.n	8015554 <_strtod_l+0xb24>
 801559c:	a314      	add	r3, pc, #80	; (adr r3, 80155f0 <_strtod_l+0xbc0>)
 801559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a2:	f7eb fa9b 	bl	8000adc <__aeabi_dcmplt>
 80155a6:	e7b3      	b.n	8015510 <_strtod_l+0xae0>
 80155a8:	2300      	movs	r3, #0
 80155aa:	930a      	str	r3, [sp, #40]	; 0x28
 80155ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80155ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155b0:	6013      	str	r3, [r2, #0]
 80155b2:	f7ff ba7c 	b.w	8014aae <_strtod_l+0x7e>
 80155b6:	2a65      	cmp	r2, #101	; 0x65
 80155b8:	f43f ab75 	beq.w	8014ca6 <_strtod_l+0x276>
 80155bc:	2a45      	cmp	r2, #69	; 0x45
 80155be:	f43f ab72 	beq.w	8014ca6 <_strtod_l+0x276>
 80155c2:	2301      	movs	r3, #1
 80155c4:	f7ff bbaa 	b.w	8014d1c <_strtod_l+0x2ec>
 80155c8:	00000000 	.word	0x00000000
 80155cc:	bff00000 	.word	0xbff00000
 80155d0:	00000000 	.word	0x00000000
 80155d4:	3ff00000 	.word	0x3ff00000
 80155d8:	94a03595 	.word	0x94a03595
 80155dc:	3fdfffff 	.word	0x3fdfffff
 80155e0:	35afe535 	.word	0x35afe535
 80155e4:	3fe00000 	.word	0x3fe00000
 80155e8:	ffc00000 	.word	0xffc00000
 80155ec:	41dfffff 	.word	0x41dfffff
 80155f0:	94a03595 	.word	0x94a03595
 80155f4:	3fcfffff 	.word	0x3fcfffff
 80155f8:	3ff00000 	.word	0x3ff00000
 80155fc:	3fe00000 	.word	0x3fe00000
 8015600:	7ff00000 	.word	0x7ff00000
 8015604:	7fe00000 	.word	0x7fe00000
 8015608:	7c9fffff 	.word	0x7c9fffff
 801560c:	7fefffff 	.word	0x7fefffff

08015610 <_strtod_r>:
 8015610:	4b01      	ldr	r3, [pc, #4]	; (8015618 <_strtod_r+0x8>)
 8015612:	f7ff ba0d 	b.w	8014a30 <_strtod_l>
 8015616:	bf00      	nop
 8015618:	20000034 	.word	0x20000034

0801561c <_strtol_l.constprop.0>:
 801561c:	2b01      	cmp	r3, #1
 801561e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015622:	d001      	beq.n	8015628 <_strtol_l.constprop.0+0xc>
 8015624:	2b24      	cmp	r3, #36	; 0x24
 8015626:	d906      	bls.n	8015636 <_strtol_l.constprop.0+0x1a>
 8015628:	f000 f8c2 	bl	80157b0 <__errno>
 801562c:	2316      	movs	r3, #22
 801562e:	6003      	str	r3, [r0, #0]
 8015630:	2000      	movs	r0, #0
 8015632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015636:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801571c <_strtol_l.constprop.0+0x100>
 801563a:	460d      	mov	r5, r1
 801563c:	462e      	mov	r6, r5
 801563e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015642:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8015646:	f017 0708 	ands.w	r7, r7, #8
 801564a:	d1f7      	bne.n	801563c <_strtol_l.constprop.0+0x20>
 801564c:	2c2d      	cmp	r4, #45	; 0x2d
 801564e:	d132      	bne.n	80156b6 <_strtol_l.constprop.0+0x9a>
 8015650:	782c      	ldrb	r4, [r5, #0]
 8015652:	2701      	movs	r7, #1
 8015654:	1cb5      	adds	r5, r6, #2
 8015656:	2b00      	cmp	r3, #0
 8015658:	d05b      	beq.n	8015712 <_strtol_l.constprop.0+0xf6>
 801565a:	2b10      	cmp	r3, #16
 801565c:	d109      	bne.n	8015672 <_strtol_l.constprop.0+0x56>
 801565e:	2c30      	cmp	r4, #48	; 0x30
 8015660:	d107      	bne.n	8015672 <_strtol_l.constprop.0+0x56>
 8015662:	782c      	ldrb	r4, [r5, #0]
 8015664:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015668:	2c58      	cmp	r4, #88	; 0x58
 801566a:	d14d      	bne.n	8015708 <_strtol_l.constprop.0+0xec>
 801566c:	786c      	ldrb	r4, [r5, #1]
 801566e:	2310      	movs	r3, #16
 8015670:	3502      	adds	r5, #2
 8015672:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8015676:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801567a:	f04f 0e00 	mov.w	lr, #0
 801567e:	fbb8 f9f3 	udiv	r9, r8, r3
 8015682:	4676      	mov	r6, lr
 8015684:	fb03 8a19 	mls	sl, r3, r9, r8
 8015688:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801568c:	f1bc 0f09 	cmp.w	ip, #9
 8015690:	d816      	bhi.n	80156c0 <_strtol_l.constprop.0+0xa4>
 8015692:	4664      	mov	r4, ip
 8015694:	42a3      	cmp	r3, r4
 8015696:	dd24      	ble.n	80156e2 <_strtol_l.constprop.0+0xc6>
 8015698:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801569c:	d008      	beq.n	80156b0 <_strtol_l.constprop.0+0x94>
 801569e:	45b1      	cmp	r9, r6
 80156a0:	d31c      	bcc.n	80156dc <_strtol_l.constprop.0+0xc0>
 80156a2:	d101      	bne.n	80156a8 <_strtol_l.constprop.0+0x8c>
 80156a4:	45a2      	cmp	sl, r4
 80156a6:	db19      	blt.n	80156dc <_strtol_l.constprop.0+0xc0>
 80156a8:	fb06 4603 	mla	r6, r6, r3, r4
 80156ac:	f04f 0e01 	mov.w	lr, #1
 80156b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80156b4:	e7e8      	b.n	8015688 <_strtol_l.constprop.0+0x6c>
 80156b6:	2c2b      	cmp	r4, #43	; 0x2b
 80156b8:	bf04      	itt	eq
 80156ba:	782c      	ldrbeq	r4, [r5, #0]
 80156bc:	1cb5      	addeq	r5, r6, #2
 80156be:	e7ca      	b.n	8015656 <_strtol_l.constprop.0+0x3a>
 80156c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80156c4:	f1bc 0f19 	cmp.w	ip, #25
 80156c8:	d801      	bhi.n	80156ce <_strtol_l.constprop.0+0xb2>
 80156ca:	3c37      	subs	r4, #55	; 0x37
 80156cc:	e7e2      	b.n	8015694 <_strtol_l.constprop.0+0x78>
 80156ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80156d2:	f1bc 0f19 	cmp.w	ip, #25
 80156d6:	d804      	bhi.n	80156e2 <_strtol_l.constprop.0+0xc6>
 80156d8:	3c57      	subs	r4, #87	; 0x57
 80156da:	e7db      	b.n	8015694 <_strtol_l.constprop.0+0x78>
 80156dc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80156e0:	e7e6      	b.n	80156b0 <_strtol_l.constprop.0+0x94>
 80156e2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80156e6:	d105      	bne.n	80156f4 <_strtol_l.constprop.0+0xd8>
 80156e8:	2322      	movs	r3, #34	; 0x22
 80156ea:	6003      	str	r3, [r0, #0]
 80156ec:	4646      	mov	r6, r8
 80156ee:	b942      	cbnz	r2, 8015702 <_strtol_l.constprop.0+0xe6>
 80156f0:	4630      	mov	r0, r6
 80156f2:	e79e      	b.n	8015632 <_strtol_l.constprop.0+0x16>
 80156f4:	b107      	cbz	r7, 80156f8 <_strtol_l.constprop.0+0xdc>
 80156f6:	4276      	negs	r6, r6
 80156f8:	2a00      	cmp	r2, #0
 80156fa:	d0f9      	beq.n	80156f0 <_strtol_l.constprop.0+0xd4>
 80156fc:	f1be 0f00 	cmp.w	lr, #0
 8015700:	d000      	beq.n	8015704 <_strtol_l.constprop.0+0xe8>
 8015702:	1e69      	subs	r1, r5, #1
 8015704:	6011      	str	r1, [r2, #0]
 8015706:	e7f3      	b.n	80156f0 <_strtol_l.constprop.0+0xd4>
 8015708:	2430      	movs	r4, #48	; 0x30
 801570a:	2b00      	cmp	r3, #0
 801570c:	d1b1      	bne.n	8015672 <_strtol_l.constprop.0+0x56>
 801570e:	2308      	movs	r3, #8
 8015710:	e7af      	b.n	8015672 <_strtol_l.constprop.0+0x56>
 8015712:	2c30      	cmp	r4, #48	; 0x30
 8015714:	d0a5      	beq.n	8015662 <_strtol_l.constprop.0+0x46>
 8015716:	230a      	movs	r3, #10
 8015718:	e7ab      	b.n	8015672 <_strtol_l.constprop.0+0x56>
 801571a:	bf00      	nop
 801571c:	0801ae29 	.word	0x0801ae29

08015720 <_strtol_r>:
 8015720:	f7ff bf7c 	b.w	801561c <_strtol_l.constprop.0>

08015724 <strtol>:
 8015724:	4613      	mov	r3, r2
 8015726:	460a      	mov	r2, r1
 8015728:	4601      	mov	r1, r0
 801572a:	4802      	ldr	r0, [pc, #8]	; (8015734 <strtol+0x10>)
 801572c:	6800      	ldr	r0, [r0, #0]
 801572e:	f7ff bf75 	b.w	801561c <_strtol_l.constprop.0>
 8015732:	bf00      	nop
 8015734:	200001ec 	.word	0x200001ec

08015738 <_fwalk_sglue>:
 8015738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801573c:	4607      	mov	r7, r0
 801573e:	4688      	mov	r8, r1
 8015740:	4614      	mov	r4, r2
 8015742:	2600      	movs	r6, #0
 8015744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015748:	f1b9 0901 	subs.w	r9, r9, #1
 801574c:	d505      	bpl.n	801575a <_fwalk_sglue+0x22>
 801574e:	6824      	ldr	r4, [r4, #0]
 8015750:	2c00      	cmp	r4, #0
 8015752:	d1f7      	bne.n	8015744 <_fwalk_sglue+0xc>
 8015754:	4630      	mov	r0, r6
 8015756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801575a:	89ab      	ldrh	r3, [r5, #12]
 801575c:	2b01      	cmp	r3, #1
 801575e:	d907      	bls.n	8015770 <_fwalk_sglue+0x38>
 8015760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015764:	3301      	adds	r3, #1
 8015766:	d003      	beq.n	8015770 <_fwalk_sglue+0x38>
 8015768:	4629      	mov	r1, r5
 801576a:	4638      	mov	r0, r7
 801576c:	47c0      	blx	r8
 801576e:	4306      	orrs	r6, r0
 8015770:	3568      	adds	r5, #104	; 0x68
 8015772:	e7e9      	b.n	8015748 <_fwalk_sglue+0x10>

08015774 <strncmp>:
 8015774:	b510      	push	{r4, lr}
 8015776:	b16a      	cbz	r2, 8015794 <strncmp+0x20>
 8015778:	3901      	subs	r1, #1
 801577a:	1884      	adds	r4, r0, r2
 801577c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015780:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015784:	429a      	cmp	r2, r3
 8015786:	d103      	bne.n	8015790 <strncmp+0x1c>
 8015788:	42a0      	cmp	r0, r4
 801578a:	d001      	beq.n	8015790 <strncmp+0x1c>
 801578c:	2a00      	cmp	r2, #0
 801578e:	d1f5      	bne.n	801577c <strncmp+0x8>
 8015790:	1ad0      	subs	r0, r2, r3
 8015792:	bd10      	pop	{r4, pc}
 8015794:	4610      	mov	r0, r2
 8015796:	e7fc      	b.n	8015792 <strncmp+0x1e>

08015798 <memset>:
 8015798:	4402      	add	r2, r0
 801579a:	4603      	mov	r3, r0
 801579c:	4293      	cmp	r3, r2
 801579e:	d100      	bne.n	80157a2 <memset+0xa>
 80157a0:	4770      	bx	lr
 80157a2:	f803 1b01 	strb.w	r1, [r3], #1
 80157a6:	e7f9      	b.n	801579c <memset+0x4>

080157a8 <_localeconv_r>:
 80157a8:	4800      	ldr	r0, [pc, #0]	; (80157ac <_localeconv_r+0x4>)
 80157aa:	4770      	bx	lr
 80157ac:	20000124 	.word	0x20000124

080157b0 <__errno>:
 80157b0:	4b01      	ldr	r3, [pc, #4]	; (80157b8 <__errno+0x8>)
 80157b2:	6818      	ldr	r0, [r3, #0]
 80157b4:	4770      	bx	lr
 80157b6:	bf00      	nop
 80157b8:	200001ec 	.word	0x200001ec

080157bc <__libc_init_array>:
 80157bc:	b570      	push	{r4, r5, r6, lr}
 80157be:	4d0d      	ldr	r5, [pc, #52]	; (80157f4 <__libc_init_array+0x38>)
 80157c0:	4c0d      	ldr	r4, [pc, #52]	; (80157f8 <__libc_init_array+0x3c>)
 80157c2:	1b64      	subs	r4, r4, r5
 80157c4:	10a4      	asrs	r4, r4, #2
 80157c6:	2600      	movs	r6, #0
 80157c8:	42a6      	cmp	r6, r4
 80157ca:	d109      	bne.n	80157e0 <__libc_init_array+0x24>
 80157cc:	4d0b      	ldr	r5, [pc, #44]	; (80157fc <__libc_init_array+0x40>)
 80157ce:	4c0c      	ldr	r4, [pc, #48]	; (8015800 <__libc_init_array+0x44>)
 80157d0:	f004 fb48 	bl	8019e64 <_init>
 80157d4:	1b64      	subs	r4, r4, r5
 80157d6:	10a4      	asrs	r4, r4, #2
 80157d8:	2600      	movs	r6, #0
 80157da:	42a6      	cmp	r6, r4
 80157dc:	d105      	bne.n	80157ea <__libc_init_array+0x2e>
 80157de:	bd70      	pop	{r4, r5, r6, pc}
 80157e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80157e4:	4798      	blx	r3
 80157e6:	3601      	adds	r6, #1
 80157e8:	e7ee      	b.n	80157c8 <__libc_init_array+0xc>
 80157ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80157ee:	4798      	blx	r3
 80157f0:	3601      	adds	r6, #1
 80157f2:	e7f2      	b.n	80157da <__libc_init_array+0x1e>
 80157f4:	0801b638 	.word	0x0801b638
 80157f8:	0801b638 	.word	0x0801b638
 80157fc:	0801b638 	.word	0x0801b638
 8015800:	0801b63c 	.word	0x0801b63c

08015804 <__retarget_lock_acquire_recursive>:
 8015804:	4770      	bx	lr

08015806 <__retarget_lock_release_recursive>:
 8015806:	4770      	bx	lr

08015808 <memcpy>:
 8015808:	440a      	add	r2, r1
 801580a:	4291      	cmp	r1, r2
 801580c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015810:	d100      	bne.n	8015814 <memcpy+0xc>
 8015812:	4770      	bx	lr
 8015814:	b510      	push	{r4, lr}
 8015816:	f811 4b01 	ldrb.w	r4, [r1], #1
 801581a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801581e:	4291      	cmp	r1, r2
 8015820:	d1f9      	bne.n	8015816 <memcpy+0xe>
 8015822:	bd10      	pop	{r4, pc}
 8015824:	0000      	movs	r0, r0
	...

08015828 <nan>:
 8015828:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015830 <nan+0x8>
 801582c:	4770      	bx	lr
 801582e:	bf00      	nop
 8015830:	00000000 	.word	0x00000000
 8015834:	7ff80000 	.word	0x7ff80000

08015838 <nanf>:
 8015838:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015840 <nanf+0x8>
 801583c:	4770      	bx	lr
 801583e:	bf00      	nop
 8015840:	7fc00000 	.word	0x7fc00000

08015844 <quorem>:
 8015844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015848:	6903      	ldr	r3, [r0, #16]
 801584a:	690c      	ldr	r4, [r1, #16]
 801584c:	42a3      	cmp	r3, r4
 801584e:	4607      	mov	r7, r0
 8015850:	db7e      	blt.n	8015950 <quorem+0x10c>
 8015852:	3c01      	subs	r4, #1
 8015854:	f101 0814 	add.w	r8, r1, #20
 8015858:	f100 0514 	add.w	r5, r0, #20
 801585c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015860:	9301      	str	r3, [sp, #4]
 8015862:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015866:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801586a:	3301      	adds	r3, #1
 801586c:	429a      	cmp	r2, r3
 801586e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015872:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015876:	fbb2 f6f3 	udiv	r6, r2, r3
 801587a:	d331      	bcc.n	80158e0 <quorem+0x9c>
 801587c:	f04f 0e00 	mov.w	lr, #0
 8015880:	4640      	mov	r0, r8
 8015882:	46ac      	mov	ip, r5
 8015884:	46f2      	mov	sl, lr
 8015886:	f850 2b04 	ldr.w	r2, [r0], #4
 801588a:	b293      	uxth	r3, r2
 801588c:	fb06 e303 	mla	r3, r6, r3, lr
 8015890:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015894:	0c1a      	lsrs	r2, r3, #16
 8015896:	b29b      	uxth	r3, r3
 8015898:	ebaa 0303 	sub.w	r3, sl, r3
 801589c:	f8dc a000 	ldr.w	sl, [ip]
 80158a0:	fa13 f38a 	uxtah	r3, r3, sl
 80158a4:	fb06 220e 	mla	r2, r6, lr, r2
 80158a8:	9300      	str	r3, [sp, #0]
 80158aa:	9b00      	ldr	r3, [sp, #0]
 80158ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80158b0:	b292      	uxth	r2, r2
 80158b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80158b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80158ba:	f8bd 3000 	ldrh.w	r3, [sp]
 80158be:	4581      	cmp	r9, r0
 80158c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80158c4:	f84c 3b04 	str.w	r3, [ip], #4
 80158c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80158cc:	d2db      	bcs.n	8015886 <quorem+0x42>
 80158ce:	f855 300b 	ldr.w	r3, [r5, fp]
 80158d2:	b92b      	cbnz	r3, 80158e0 <quorem+0x9c>
 80158d4:	9b01      	ldr	r3, [sp, #4]
 80158d6:	3b04      	subs	r3, #4
 80158d8:	429d      	cmp	r5, r3
 80158da:	461a      	mov	r2, r3
 80158dc:	d32c      	bcc.n	8015938 <quorem+0xf4>
 80158de:	613c      	str	r4, [r7, #16]
 80158e0:	4638      	mov	r0, r7
 80158e2:	f001 ff15 	bl	8017710 <__mcmp>
 80158e6:	2800      	cmp	r0, #0
 80158e8:	db22      	blt.n	8015930 <quorem+0xec>
 80158ea:	3601      	adds	r6, #1
 80158ec:	4629      	mov	r1, r5
 80158ee:	2000      	movs	r0, #0
 80158f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80158f4:	f8d1 c000 	ldr.w	ip, [r1]
 80158f8:	b293      	uxth	r3, r2
 80158fa:	1ac3      	subs	r3, r0, r3
 80158fc:	0c12      	lsrs	r2, r2, #16
 80158fe:	fa13 f38c 	uxtah	r3, r3, ip
 8015902:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8015906:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801590a:	b29b      	uxth	r3, r3
 801590c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015910:	45c1      	cmp	r9, r8
 8015912:	f841 3b04 	str.w	r3, [r1], #4
 8015916:	ea4f 4022 	mov.w	r0, r2, asr #16
 801591a:	d2e9      	bcs.n	80158f0 <quorem+0xac>
 801591c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015920:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015924:	b922      	cbnz	r2, 8015930 <quorem+0xec>
 8015926:	3b04      	subs	r3, #4
 8015928:	429d      	cmp	r5, r3
 801592a:	461a      	mov	r2, r3
 801592c:	d30a      	bcc.n	8015944 <quorem+0x100>
 801592e:	613c      	str	r4, [r7, #16]
 8015930:	4630      	mov	r0, r6
 8015932:	b003      	add	sp, #12
 8015934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015938:	6812      	ldr	r2, [r2, #0]
 801593a:	3b04      	subs	r3, #4
 801593c:	2a00      	cmp	r2, #0
 801593e:	d1ce      	bne.n	80158de <quorem+0x9a>
 8015940:	3c01      	subs	r4, #1
 8015942:	e7c9      	b.n	80158d8 <quorem+0x94>
 8015944:	6812      	ldr	r2, [r2, #0]
 8015946:	3b04      	subs	r3, #4
 8015948:	2a00      	cmp	r2, #0
 801594a:	d1f0      	bne.n	801592e <quorem+0xea>
 801594c:	3c01      	subs	r4, #1
 801594e:	e7eb      	b.n	8015928 <quorem+0xe4>
 8015950:	2000      	movs	r0, #0
 8015952:	e7ee      	b.n	8015932 <quorem+0xee>
 8015954:	0000      	movs	r0, r0
	...

08015958 <_dtoa_r>:
 8015958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801595c:	ed2d 8b04 	vpush	{d8-d9}
 8015960:	69c5      	ldr	r5, [r0, #28]
 8015962:	b093      	sub	sp, #76	; 0x4c
 8015964:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015968:	ec57 6b10 	vmov	r6, r7, d0
 801596c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015970:	9107      	str	r1, [sp, #28]
 8015972:	4604      	mov	r4, r0
 8015974:	920a      	str	r2, [sp, #40]	; 0x28
 8015976:	930d      	str	r3, [sp, #52]	; 0x34
 8015978:	b975      	cbnz	r5, 8015998 <_dtoa_r+0x40>
 801597a:	2010      	movs	r0, #16
 801597c:	f001 fa8e 	bl	8016e9c <malloc>
 8015980:	4602      	mov	r2, r0
 8015982:	61e0      	str	r0, [r4, #28]
 8015984:	b920      	cbnz	r0, 8015990 <_dtoa_r+0x38>
 8015986:	4bae      	ldr	r3, [pc, #696]	; (8015c40 <_dtoa_r+0x2e8>)
 8015988:	21ef      	movs	r1, #239	; 0xef
 801598a:	48ae      	ldr	r0, [pc, #696]	; (8015c44 <_dtoa_r+0x2ec>)
 801598c:	f002 f996 	bl	8017cbc <__assert_func>
 8015990:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015994:	6005      	str	r5, [r0, #0]
 8015996:	60c5      	str	r5, [r0, #12]
 8015998:	69e3      	ldr	r3, [r4, #28]
 801599a:	6819      	ldr	r1, [r3, #0]
 801599c:	b151      	cbz	r1, 80159b4 <_dtoa_r+0x5c>
 801599e:	685a      	ldr	r2, [r3, #4]
 80159a0:	604a      	str	r2, [r1, #4]
 80159a2:	2301      	movs	r3, #1
 80159a4:	4093      	lsls	r3, r2
 80159a6:	608b      	str	r3, [r1, #8]
 80159a8:	4620      	mov	r0, r4
 80159aa:	f001 fc2b 	bl	8017204 <_Bfree>
 80159ae:	69e3      	ldr	r3, [r4, #28]
 80159b0:	2200      	movs	r2, #0
 80159b2:	601a      	str	r2, [r3, #0]
 80159b4:	1e3b      	subs	r3, r7, #0
 80159b6:	bfbb      	ittet	lt
 80159b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80159bc:	9303      	strlt	r3, [sp, #12]
 80159be:	2300      	movge	r3, #0
 80159c0:	2201      	movlt	r2, #1
 80159c2:	bfac      	ite	ge
 80159c4:	f8c8 3000 	strge.w	r3, [r8]
 80159c8:	f8c8 2000 	strlt.w	r2, [r8]
 80159cc:	4b9e      	ldr	r3, [pc, #632]	; (8015c48 <_dtoa_r+0x2f0>)
 80159ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80159d2:	ea33 0308 	bics.w	r3, r3, r8
 80159d6:	d11b      	bne.n	8015a10 <_dtoa_r+0xb8>
 80159d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80159da:	f242 730f 	movw	r3, #9999	; 0x270f
 80159de:	6013      	str	r3, [r2, #0]
 80159e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80159e4:	4333      	orrs	r3, r6
 80159e6:	f000 8593 	beq.w	8016510 <_dtoa_r+0xbb8>
 80159ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80159ec:	b963      	cbnz	r3, 8015a08 <_dtoa_r+0xb0>
 80159ee:	4b97      	ldr	r3, [pc, #604]	; (8015c4c <_dtoa_r+0x2f4>)
 80159f0:	e027      	b.n	8015a42 <_dtoa_r+0xea>
 80159f2:	4b97      	ldr	r3, [pc, #604]	; (8015c50 <_dtoa_r+0x2f8>)
 80159f4:	9300      	str	r3, [sp, #0]
 80159f6:	3308      	adds	r3, #8
 80159f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80159fa:	6013      	str	r3, [r2, #0]
 80159fc:	9800      	ldr	r0, [sp, #0]
 80159fe:	b013      	add	sp, #76	; 0x4c
 8015a00:	ecbd 8b04 	vpop	{d8-d9}
 8015a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a08:	4b90      	ldr	r3, [pc, #576]	; (8015c4c <_dtoa_r+0x2f4>)
 8015a0a:	9300      	str	r3, [sp, #0]
 8015a0c:	3303      	adds	r3, #3
 8015a0e:	e7f3      	b.n	80159f8 <_dtoa_r+0xa0>
 8015a10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015a14:	2200      	movs	r2, #0
 8015a16:	ec51 0b17 	vmov	r0, r1, d7
 8015a1a:	eeb0 8a47 	vmov.f32	s16, s14
 8015a1e:	eef0 8a67 	vmov.f32	s17, s15
 8015a22:	2300      	movs	r3, #0
 8015a24:	f7eb f850 	bl	8000ac8 <__aeabi_dcmpeq>
 8015a28:	4681      	mov	r9, r0
 8015a2a:	b160      	cbz	r0, 8015a46 <_dtoa_r+0xee>
 8015a2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015a2e:	2301      	movs	r3, #1
 8015a30:	6013      	str	r3, [r2, #0]
 8015a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	f000 8568 	beq.w	801650a <_dtoa_r+0xbb2>
 8015a3a:	4b86      	ldr	r3, [pc, #536]	; (8015c54 <_dtoa_r+0x2fc>)
 8015a3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015a3e:	6013      	str	r3, [r2, #0]
 8015a40:	3b01      	subs	r3, #1
 8015a42:	9300      	str	r3, [sp, #0]
 8015a44:	e7da      	b.n	80159fc <_dtoa_r+0xa4>
 8015a46:	aa10      	add	r2, sp, #64	; 0x40
 8015a48:	a911      	add	r1, sp, #68	; 0x44
 8015a4a:	4620      	mov	r0, r4
 8015a4c:	eeb0 0a48 	vmov.f32	s0, s16
 8015a50:	eef0 0a68 	vmov.f32	s1, s17
 8015a54:	f001 ff72 	bl	801793c <__d2b>
 8015a58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015a5c:	4682      	mov	sl, r0
 8015a5e:	2d00      	cmp	r5, #0
 8015a60:	d07f      	beq.n	8015b62 <_dtoa_r+0x20a>
 8015a62:	ee18 3a90 	vmov	r3, s17
 8015a66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015a6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8015a6e:	ec51 0b18 	vmov	r0, r1, d8
 8015a72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015a76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015a7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015a7e:	4619      	mov	r1, r3
 8015a80:	2200      	movs	r2, #0
 8015a82:	4b75      	ldr	r3, [pc, #468]	; (8015c58 <_dtoa_r+0x300>)
 8015a84:	f7ea fc00 	bl	8000288 <__aeabi_dsub>
 8015a88:	a367      	add	r3, pc, #412	; (adr r3, 8015c28 <_dtoa_r+0x2d0>)
 8015a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a8e:	f7ea fdb3 	bl	80005f8 <__aeabi_dmul>
 8015a92:	a367      	add	r3, pc, #412	; (adr r3, 8015c30 <_dtoa_r+0x2d8>)
 8015a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a98:	f7ea fbf8 	bl	800028c <__adddf3>
 8015a9c:	4606      	mov	r6, r0
 8015a9e:	4628      	mov	r0, r5
 8015aa0:	460f      	mov	r7, r1
 8015aa2:	f7ea fd3f 	bl	8000524 <__aeabi_i2d>
 8015aa6:	a364      	add	r3, pc, #400	; (adr r3, 8015c38 <_dtoa_r+0x2e0>)
 8015aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aac:	f7ea fda4 	bl	80005f8 <__aeabi_dmul>
 8015ab0:	4602      	mov	r2, r0
 8015ab2:	460b      	mov	r3, r1
 8015ab4:	4630      	mov	r0, r6
 8015ab6:	4639      	mov	r1, r7
 8015ab8:	f7ea fbe8 	bl	800028c <__adddf3>
 8015abc:	4606      	mov	r6, r0
 8015abe:	460f      	mov	r7, r1
 8015ac0:	f7eb f84a 	bl	8000b58 <__aeabi_d2iz>
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	4683      	mov	fp, r0
 8015ac8:	2300      	movs	r3, #0
 8015aca:	4630      	mov	r0, r6
 8015acc:	4639      	mov	r1, r7
 8015ace:	f7eb f805 	bl	8000adc <__aeabi_dcmplt>
 8015ad2:	b148      	cbz	r0, 8015ae8 <_dtoa_r+0x190>
 8015ad4:	4658      	mov	r0, fp
 8015ad6:	f7ea fd25 	bl	8000524 <__aeabi_i2d>
 8015ada:	4632      	mov	r2, r6
 8015adc:	463b      	mov	r3, r7
 8015ade:	f7ea fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 8015ae2:	b908      	cbnz	r0, 8015ae8 <_dtoa_r+0x190>
 8015ae4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015ae8:	f1bb 0f16 	cmp.w	fp, #22
 8015aec:	d857      	bhi.n	8015b9e <_dtoa_r+0x246>
 8015aee:	4b5b      	ldr	r3, [pc, #364]	; (8015c5c <_dtoa_r+0x304>)
 8015af0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015af8:	ec51 0b18 	vmov	r0, r1, d8
 8015afc:	f7ea ffee 	bl	8000adc <__aeabi_dcmplt>
 8015b00:	2800      	cmp	r0, #0
 8015b02:	d04e      	beq.n	8015ba2 <_dtoa_r+0x24a>
 8015b04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015b08:	2300      	movs	r3, #0
 8015b0a:	930c      	str	r3, [sp, #48]	; 0x30
 8015b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b0e:	1b5b      	subs	r3, r3, r5
 8015b10:	1e5a      	subs	r2, r3, #1
 8015b12:	bf45      	ittet	mi
 8015b14:	f1c3 0301 	rsbmi	r3, r3, #1
 8015b18:	9305      	strmi	r3, [sp, #20]
 8015b1a:	2300      	movpl	r3, #0
 8015b1c:	2300      	movmi	r3, #0
 8015b1e:	9206      	str	r2, [sp, #24]
 8015b20:	bf54      	ite	pl
 8015b22:	9305      	strpl	r3, [sp, #20]
 8015b24:	9306      	strmi	r3, [sp, #24]
 8015b26:	f1bb 0f00 	cmp.w	fp, #0
 8015b2a:	db3c      	blt.n	8015ba6 <_dtoa_r+0x24e>
 8015b2c:	9b06      	ldr	r3, [sp, #24]
 8015b2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8015b32:	445b      	add	r3, fp
 8015b34:	9306      	str	r3, [sp, #24]
 8015b36:	2300      	movs	r3, #0
 8015b38:	9308      	str	r3, [sp, #32]
 8015b3a:	9b07      	ldr	r3, [sp, #28]
 8015b3c:	2b09      	cmp	r3, #9
 8015b3e:	d868      	bhi.n	8015c12 <_dtoa_r+0x2ba>
 8015b40:	2b05      	cmp	r3, #5
 8015b42:	bfc4      	itt	gt
 8015b44:	3b04      	subgt	r3, #4
 8015b46:	9307      	strgt	r3, [sp, #28]
 8015b48:	9b07      	ldr	r3, [sp, #28]
 8015b4a:	f1a3 0302 	sub.w	r3, r3, #2
 8015b4e:	bfcc      	ite	gt
 8015b50:	2500      	movgt	r5, #0
 8015b52:	2501      	movle	r5, #1
 8015b54:	2b03      	cmp	r3, #3
 8015b56:	f200 8085 	bhi.w	8015c64 <_dtoa_r+0x30c>
 8015b5a:	e8df f003 	tbb	[pc, r3]
 8015b5e:	3b2e      	.short	0x3b2e
 8015b60:	5839      	.short	0x5839
 8015b62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8015b66:	441d      	add	r5, r3
 8015b68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015b6c:	2b20      	cmp	r3, #32
 8015b6e:	bfc1      	itttt	gt
 8015b70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015b74:	fa08 f803 	lslgt.w	r8, r8, r3
 8015b78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8015b7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8015b80:	bfd6      	itet	le
 8015b82:	f1c3 0320 	rsble	r3, r3, #32
 8015b86:	ea48 0003 	orrgt.w	r0, r8, r3
 8015b8a:	fa06 f003 	lslle.w	r0, r6, r3
 8015b8e:	f7ea fcb9 	bl	8000504 <__aeabi_ui2d>
 8015b92:	2201      	movs	r2, #1
 8015b94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8015b98:	3d01      	subs	r5, #1
 8015b9a:	920e      	str	r2, [sp, #56]	; 0x38
 8015b9c:	e76f      	b.n	8015a7e <_dtoa_r+0x126>
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	e7b3      	b.n	8015b0a <_dtoa_r+0x1b2>
 8015ba2:	900c      	str	r0, [sp, #48]	; 0x30
 8015ba4:	e7b2      	b.n	8015b0c <_dtoa_r+0x1b4>
 8015ba6:	9b05      	ldr	r3, [sp, #20]
 8015ba8:	eba3 030b 	sub.w	r3, r3, fp
 8015bac:	9305      	str	r3, [sp, #20]
 8015bae:	f1cb 0300 	rsb	r3, fp, #0
 8015bb2:	9308      	str	r3, [sp, #32]
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8015bb8:	e7bf      	b.n	8015b3a <_dtoa_r+0x1e2>
 8015bba:	2300      	movs	r3, #0
 8015bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8015bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	dc52      	bgt.n	8015c6a <_dtoa_r+0x312>
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	9301      	str	r3, [sp, #4]
 8015bc8:	9304      	str	r3, [sp, #16]
 8015bca:	461a      	mov	r2, r3
 8015bcc:	920a      	str	r2, [sp, #40]	; 0x28
 8015bce:	e00b      	b.n	8015be8 <_dtoa_r+0x290>
 8015bd0:	2301      	movs	r3, #1
 8015bd2:	e7f3      	b.n	8015bbc <_dtoa_r+0x264>
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8015bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bda:	445b      	add	r3, fp
 8015bdc:	9301      	str	r3, [sp, #4]
 8015bde:	3301      	adds	r3, #1
 8015be0:	2b01      	cmp	r3, #1
 8015be2:	9304      	str	r3, [sp, #16]
 8015be4:	bfb8      	it	lt
 8015be6:	2301      	movlt	r3, #1
 8015be8:	69e0      	ldr	r0, [r4, #28]
 8015bea:	2100      	movs	r1, #0
 8015bec:	2204      	movs	r2, #4
 8015bee:	f102 0614 	add.w	r6, r2, #20
 8015bf2:	429e      	cmp	r6, r3
 8015bf4:	d93d      	bls.n	8015c72 <_dtoa_r+0x31a>
 8015bf6:	6041      	str	r1, [r0, #4]
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	f001 fac3 	bl	8017184 <_Balloc>
 8015bfe:	9000      	str	r0, [sp, #0]
 8015c00:	2800      	cmp	r0, #0
 8015c02:	d139      	bne.n	8015c78 <_dtoa_r+0x320>
 8015c04:	4b16      	ldr	r3, [pc, #88]	; (8015c60 <_dtoa_r+0x308>)
 8015c06:	4602      	mov	r2, r0
 8015c08:	f240 11af 	movw	r1, #431	; 0x1af
 8015c0c:	e6bd      	b.n	801598a <_dtoa_r+0x32>
 8015c0e:	2301      	movs	r3, #1
 8015c10:	e7e1      	b.n	8015bd6 <_dtoa_r+0x27e>
 8015c12:	2501      	movs	r5, #1
 8015c14:	2300      	movs	r3, #0
 8015c16:	9307      	str	r3, [sp, #28]
 8015c18:	9509      	str	r5, [sp, #36]	; 0x24
 8015c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c1e:	9301      	str	r3, [sp, #4]
 8015c20:	9304      	str	r3, [sp, #16]
 8015c22:	2200      	movs	r2, #0
 8015c24:	2312      	movs	r3, #18
 8015c26:	e7d1      	b.n	8015bcc <_dtoa_r+0x274>
 8015c28:	636f4361 	.word	0x636f4361
 8015c2c:	3fd287a7 	.word	0x3fd287a7
 8015c30:	8b60c8b3 	.word	0x8b60c8b3
 8015c34:	3fc68a28 	.word	0x3fc68a28
 8015c38:	509f79fb 	.word	0x509f79fb
 8015c3c:	3fd34413 	.word	0x3fd34413
 8015c40:	0801af36 	.word	0x0801af36
 8015c44:	0801af4d 	.word	0x0801af4d
 8015c48:	7ff00000 	.word	0x7ff00000
 8015c4c:	0801af32 	.word	0x0801af32
 8015c50:	0801af29 	.word	0x0801af29
 8015c54:	0801ada1 	.word	0x0801ada1
 8015c58:	3ff80000 	.word	0x3ff80000
 8015c5c:	0801b0a8 	.word	0x0801b0a8
 8015c60:	0801afa5 	.word	0x0801afa5
 8015c64:	2301      	movs	r3, #1
 8015c66:	9309      	str	r3, [sp, #36]	; 0x24
 8015c68:	e7d7      	b.n	8015c1a <_dtoa_r+0x2c2>
 8015c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c6c:	9301      	str	r3, [sp, #4]
 8015c6e:	9304      	str	r3, [sp, #16]
 8015c70:	e7ba      	b.n	8015be8 <_dtoa_r+0x290>
 8015c72:	3101      	adds	r1, #1
 8015c74:	0052      	lsls	r2, r2, #1
 8015c76:	e7ba      	b.n	8015bee <_dtoa_r+0x296>
 8015c78:	69e3      	ldr	r3, [r4, #28]
 8015c7a:	9a00      	ldr	r2, [sp, #0]
 8015c7c:	601a      	str	r2, [r3, #0]
 8015c7e:	9b04      	ldr	r3, [sp, #16]
 8015c80:	2b0e      	cmp	r3, #14
 8015c82:	f200 80a8 	bhi.w	8015dd6 <_dtoa_r+0x47e>
 8015c86:	2d00      	cmp	r5, #0
 8015c88:	f000 80a5 	beq.w	8015dd6 <_dtoa_r+0x47e>
 8015c8c:	f1bb 0f00 	cmp.w	fp, #0
 8015c90:	dd38      	ble.n	8015d04 <_dtoa_r+0x3ac>
 8015c92:	4bc0      	ldr	r3, [pc, #768]	; (8015f94 <_dtoa_r+0x63c>)
 8015c94:	f00b 020f 	and.w	r2, fp, #15
 8015c98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015ca0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015ca4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8015ca8:	d019      	beq.n	8015cde <_dtoa_r+0x386>
 8015caa:	4bbb      	ldr	r3, [pc, #748]	; (8015f98 <_dtoa_r+0x640>)
 8015cac:	ec51 0b18 	vmov	r0, r1, d8
 8015cb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015cb4:	f7ea fdca 	bl	800084c <__aeabi_ddiv>
 8015cb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015cbc:	f008 080f 	and.w	r8, r8, #15
 8015cc0:	2503      	movs	r5, #3
 8015cc2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015f98 <_dtoa_r+0x640>
 8015cc6:	f1b8 0f00 	cmp.w	r8, #0
 8015cca:	d10a      	bne.n	8015ce2 <_dtoa_r+0x38a>
 8015ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015cd0:	4632      	mov	r2, r6
 8015cd2:	463b      	mov	r3, r7
 8015cd4:	f7ea fdba 	bl	800084c <__aeabi_ddiv>
 8015cd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015cdc:	e02b      	b.n	8015d36 <_dtoa_r+0x3de>
 8015cde:	2502      	movs	r5, #2
 8015ce0:	e7ef      	b.n	8015cc2 <_dtoa_r+0x36a>
 8015ce2:	f018 0f01 	tst.w	r8, #1
 8015ce6:	d008      	beq.n	8015cfa <_dtoa_r+0x3a2>
 8015ce8:	4630      	mov	r0, r6
 8015cea:	4639      	mov	r1, r7
 8015cec:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015cf0:	f7ea fc82 	bl	80005f8 <__aeabi_dmul>
 8015cf4:	3501      	adds	r5, #1
 8015cf6:	4606      	mov	r6, r0
 8015cf8:	460f      	mov	r7, r1
 8015cfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015cfe:	f109 0908 	add.w	r9, r9, #8
 8015d02:	e7e0      	b.n	8015cc6 <_dtoa_r+0x36e>
 8015d04:	f000 809f 	beq.w	8015e46 <_dtoa_r+0x4ee>
 8015d08:	f1cb 0600 	rsb	r6, fp, #0
 8015d0c:	4ba1      	ldr	r3, [pc, #644]	; (8015f94 <_dtoa_r+0x63c>)
 8015d0e:	4fa2      	ldr	r7, [pc, #648]	; (8015f98 <_dtoa_r+0x640>)
 8015d10:	f006 020f 	and.w	r2, r6, #15
 8015d14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d1c:	ec51 0b18 	vmov	r0, r1, d8
 8015d20:	f7ea fc6a 	bl	80005f8 <__aeabi_dmul>
 8015d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d28:	1136      	asrs	r6, r6, #4
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	2502      	movs	r5, #2
 8015d2e:	2e00      	cmp	r6, #0
 8015d30:	d17e      	bne.n	8015e30 <_dtoa_r+0x4d8>
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d1d0      	bne.n	8015cd8 <_dtoa_r+0x380>
 8015d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	f000 8084 	beq.w	8015e4a <_dtoa_r+0x4f2>
 8015d42:	4b96      	ldr	r3, [pc, #600]	; (8015f9c <_dtoa_r+0x644>)
 8015d44:	2200      	movs	r2, #0
 8015d46:	4640      	mov	r0, r8
 8015d48:	4649      	mov	r1, r9
 8015d4a:	f7ea fec7 	bl	8000adc <__aeabi_dcmplt>
 8015d4e:	2800      	cmp	r0, #0
 8015d50:	d07b      	beq.n	8015e4a <_dtoa_r+0x4f2>
 8015d52:	9b04      	ldr	r3, [sp, #16]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d078      	beq.n	8015e4a <_dtoa_r+0x4f2>
 8015d58:	9b01      	ldr	r3, [sp, #4]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	dd39      	ble.n	8015dd2 <_dtoa_r+0x47a>
 8015d5e:	4b90      	ldr	r3, [pc, #576]	; (8015fa0 <_dtoa_r+0x648>)
 8015d60:	2200      	movs	r2, #0
 8015d62:	4640      	mov	r0, r8
 8015d64:	4649      	mov	r1, r9
 8015d66:	f7ea fc47 	bl	80005f8 <__aeabi_dmul>
 8015d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d6e:	9e01      	ldr	r6, [sp, #4]
 8015d70:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8015d74:	3501      	adds	r5, #1
 8015d76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015d7a:	4628      	mov	r0, r5
 8015d7c:	f7ea fbd2 	bl	8000524 <__aeabi_i2d>
 8015d80:	4642      	mov	r2, r8
 8015d82:	464b      	mov	r3, r9
 8015d84:	f7ea fc38 	bl	80005f8 <__aeabi_dmul>
 8015d88:	4b86      	ldr	r3, [pc, #536]	; (8015fa4 <_dtoa_r+0x64c>)
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	f7ea fa7e 	bl	800028c <__adddf3>
 8015d90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d98:	9303      	str	r3, [sp, #12]
 8015d9a:	2e00      	cmp	r6, #0
 8015d9c:	d158      	bne.n	8015e50 <_dtoa_r+0x4f8>
 8015d9e:	4b82      	ldr	r3, [pc, #520]	; (8015fa8 <_dtoa_r+0x650>)
 8015da0:	2200      	movs	r2, #0
 8015da2:	4640      	mov	r0, r8
 8015da4:	4649      	mov	r1, r9
 8015da6:	f7ea fa6f 	bl	8000288 <__aeabi_dsub>
 8015daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015dae:	4680      	mov	r8, r0
 8015db0:	4689      	mov	r9, r1
 8015db2:	f7ea feb1 	bl	8000b18 <__aeabi_dcmpgt>
 8015db6:	2800      	cmp	r0, #0
 8015db8:	f040 8296 	bne.w	80162e8 <_dtoa_r+0x990>
 8015dbc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015dc0:	4640      	mov	r0, r8
 8015dc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015dc6:	4649      	mov	r1, r9
 8015dc8:	f7ea fe88 	bl	8000adc <__aeabi_dcmplt>
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	f040 8289 	bne.w	80162e4 <_dtoa_r+0x98c>
 8015dd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015dd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	f2c0 814e 	blt.w	801607a <_dtoa_r+0x722>
 8015dde:	f1bb 0f0e 	cmp.w	fp, #14
 8015de2:	f300 814a 	bgt.w	801607a <_dtoa_r+0x722>
 8015de6:	4b6b      	ldr	r3, [pc, #428]	; (8015f94 <_dtoa_r+0x63c>)
 8015de8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015dec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	f280 80dc 	bge.w	8015fb0 <_dtoa_r+0x658>
 8015df8:	9b04      	ldr	r3, [sp, #16]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	f300 80d8 	bgt.w	8015fb0 <_dtoa_r+0x658>
 8015e00:	f040 826f 	bne.w	80162e2 <_dtoa_r+0x98a>
 8015e04:	4b68      	ldr	r3, [pc, #416]	; (8015fa8 <_dtoa_r+0x650>)
 8015e06:	2200      	movs	r2, #0
 8015e08:	4640      	mov	r0, r8
 8015e0a:	4649      	mov	r1, r9
 8015e0c:	f7ea fbf4 	bl	80005f8 <__aeabi_dmul>
 8015e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015e14:	f7ea fe76 	bl	8000b04 <__aeabi_dcmpge>
 8015e18:	9e04      	ldr	r6, [sp, #16]
 8015e1a:	4637      	mov	r7, r6
 8015e1c:	2800      	cmp	r0, #0
 8015e1e:	f040 8245 	bne.w	80162ac <_dtoa_r+0x954>
 8015e22:	9d00      	ldr	r5, [sp, #0]
 8015e24:	2331      	movs	r3, #49	; 0x31
 8015e26:	f805 3b01 	strb.w	r3, [r5], #1
 8015e2a:	f10b 0b01 	add.w	fp, fp, #1
 8015e2e:	e241      	b.n	80162b4 <_dtoa_r+0x95c>
 8015e30:	07f2      	lsls	r2, r6, #31
 8015e32:	d505      	bpl.n	8015e40 <_dtoa_r+0x4e8>
 8015e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015e38:	f7ea fbde 	bl	80005f8 <__aeabi_dmul>
 8015e3c:	3501      	adds	r5, #1
 8015e3e:	2301      	movs	r3, #1
 8015e40:	1076      	asrs	r6, r6, #1
 8015e42:	3708      	adds	r7, #8
 8015e44:	e773      	b.n	8015d2e <_dtoa_r+0x3d6>
 8015e46:	2502      	movs	r5, #2
 8015e48:	e775      	b.n	8015d36 <_dtoa_r+0x3de>
 8015e4a:	9e04      	ldr	r6, [sp, #16]
 8015e4c:	465f      	mov	r7, fp
 8015e4e:	e792      	b.n	8015d76 <_dtoa_r+0x41e>
 8015e50:	9900      	ldr	r1, [sp, #0]
 8015e52:	4b50      	ldr	r3, [pc, #320]	; (8015f94 <_dtoa_r+0x63c>)
 8015e54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015e58:	4431      	add	r1, r6
 8015e5a:	9102      	str	r1, [sp, #8]
 8015e5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e5e:	eeb0 9a47 	vmov.f32	s18, s14
 8015e62:	eef0 9a67 	vmov.f32	s19, s15
 8015e66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015e6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015e6e:	2900      	cmp	r1, #0
 8015e70:	d044      	beq.n	8015efc <_dtoa_r+0x5a4>
 8015e72:	494e      	ldr	r1, [pc, #312]	; (8015fac <_dtoa_r+0x654>)
 8015e74:	2000      	movs	r0, #0
 8015e76:	f7ea fce9 	bl	800084c <__aeabi_ddiv>
 8015e7a:	ec53 2b19 	vmov	r2, r3, d9
 8015e7e:	f7ea fa03 	bl	8000288 <__aeabi_dsub>
 8015e82:	9d00      	ldr	r5, [sp, #0]
 8015e84:	ec41 0b19 	vmov	d9, r0, r1
 8015e88:	4649      	mov	r1, r9
 8015e8a:	4640      	mov	r0, r8
 8015e8c:	f7ea fe64 	bl	8000b58 <__aeabi_d2iz>
 8015e90:	4606      	mov	r6, r0
 8015e92:	f7ea fb47 	bl	8000524 <__aeabi_i2d>
 8015e96:	4602      	mov	r2, r0
 8015e98:	460b      	mov	r3, r1
 8015e9a:	4640      	mov	r0, r8
 8015e9c:	4649      	mov	r1, r9
 8015e9e:	f7ea f9f3 	bl	8000288 <__aeabi_dsub>
 8015ea2:	3630      	adds	r6, #48	; 0x30
 8015ea4:	f805 6b01 	strb.w	r6, [r5], #1
 8015ea8:	ec53 2b19 	vmov	r2, r3, d9
 8015eac:	4680      	mov	r8, r0
 8015eae:	4689      	mov	r9, r1
 8015eb0:	f7ea fe14 	bl	8000adc <__aeabi_dcmplt>
 8015eb4:	2800      	cmp	r0, #0
 8015eb6:	d164      	bne.n	8015f82 <_dtoa_r+0x62a>
 8015eb8:	4642      	mov	r2, r8
 8015eba:	464b      	mov	r3, r9
 8015ebc:	4937      	ldr	r1, [pc, #220]	; (8015f9c <_dtoa_r+0x644>)
 8015ebe:	2000      	movs	r0, #0
 8015ec0:	f7ea f9e2 	bl	8000288 <__aeabi_dsub>
 8015ec4:	ec53 2b19 	vmov	r2, r3, d9
 8015ec8:	f7ea fe08 	bl	8000adc <__aeabi_dcmplt>
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	f040 80b6 	bne.w	801603e <_dtoa_r+0x6e6>
 8015ed2:	9b02      	ldr	r3, [sp, #8]
 8015ed4:	429d      	cmp	r5, r3
 8015ed6:	f43f af7c 	beq.w	8015dd2 <_dtoa_r+0x47a>
 8015eda:	4b31      	ldr	r3, [pc, #196]	; (8015fa0 <_dtoa_r+0x648>)
 8015edc:	ec51 0b19 	vmov	r0, r1, d9
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	f7ea fb89 	bl	80005f8 <__aeabi_dmul>
 8015ee6:	4b2e      	ldr	r3, [pc, #184]	; (8015fa0 <_dtoa_r+0x648>)
 8015ee8:	ec41 0b19 	vmov	d9, r0, r1
 8015eec:	2200      	movs	r2, #0
 8015eee:	4640      	mov	r0, r8
 8015ef0:	4649      	mov	r1, r9
 8015ef2:	f7ea fb81 	bl	80005f8 <__aeabi_dmul>
 8015ef6:	4680      	mov	r8, r0
 8015ef8:	4689      	mov	r9, r1
 8015efa:	e7c5      	b.n	8015e88 <_dtoa_r+0x530>
 8015efc:	ec51 0b17 	vmov	r0, r1, d7
 8015f00:	f7ea fb7a 	bl	80005f8 <__aeabi_dmul>
 8015f04:	9b02      	ldr	r3, [sp, #8]
 8015f06:	9d00      	ldr	r5, [sp, #0]
 8015f08:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f0a:	ec41 0b19 	vmov	d9, r0, r1
 8015f0e:	4649      	mov	r1, r9
 8015f10:	4640      	mov	r0, r8
 8015f12:	f7ea fe21 	bl	8000b58 <__aeabi_d2iz>
 8015f16:	4606      	mov	r6, r0
 8015f18:	f7ea fb04 	bl	8000524 <__aeabi_i2d>
 8015f1c:	3630      	adds	r6, #48	; 0x30
 8015f1e:	4602      	mov	r2, r0
 8015f20:	460b      	mov	r3, r1
 8015f22:	4640      	mov	r0, r8
 8015f24:	4649      	mov	r1, r9
 8015f26:	f7ea f9af 	bl	8000288 <__aeabi_dsub>
 8015f2a:	f805 6b01 	strb.w	r6, [r5], #1
 8015f2e:	9b02      	ldr	r3, [sp, #8]
 8015f30:	429d      	cmp	r5, r3
 8015f32:	4680      	mov	r8, r0
 8015f34:	4689      	mov	r9, r1
 8015f36:	f04f 0200 	mov.w	r2, #0
 8015f3a:	d124      	bne.n	8015f86 <_dtoa_r+0x62e>
 8015f3c:	4b1b      	ldr	r3, [pc, #108]	; (8015fac <_dtoa_r+0x654>)
 8015f3e:	ec51 0b19 	vmov	r0, r1, d9
 8015f42:	f7ea f9a3 	bl	800028c <__adddf3>
 8015f46:	4602      	mov	r2, r0
 8015f48:	460b      	mov	r3, r1
 8015f4a:	4640      	mov	r0, r8
 8015f4c:	4649      	mov	r1, r9
 8015f4e:	f7ea fde3 	bl	8000b18 <__aeabi_dcmpgt>
 8015f52:	2800      	cmp	r0, #0
 8015f54:	d173      	bne.n	801603e <_dtoa_r+0x6e6>
 8015f56:	ec53 2b19 	vmov	r2, r3, d9
 8015f5a:	4914      	ldr	r1, [pc, #80]	; (8015fac <_dtoa_r+0x654>)
 8015f5c:	2000      	movs	r0, #0
 8015f5e:	f7ea f993 	bl	8000288 <__aeabi_dsub>
 8015f62:	4602      	mov	r2, r0
 8015f64:	460b      	mov	r3, r1
 8015f66:	4640      	mov	r0, r8
 8015f68:	4649      	mov	r1, r9
 8015f6a:	f7ea fdb7 	bl	8000adc <__aeabi_dcmplt>
 8015f6e:	2800      	cmp	r0, #0
 8015f70:	f43f af2f 	beq.w	8015dd2 <_dtoa_r+0x47a>
 8015f74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015f76:	1e6b      	subs	r3, r5, #1
 8015f78:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015f7e:	2b30      	cmp	r3, #48	; 0x30
 8015f80:	d0f8      	beq.n	8015f74 <_dtoa_r+0x61c>
 8015f82:	46bb      	mov	fp, r7
 8015f84:	e04a      	b.n	801601c <_dtoa_r+0x6c4>
 8015f86:	4b06      	ldr	r3, [pc, #24]	; (8015fa0 <_dtoa_r+0x648>)
 8015f88:	f7ea fb36 	bl	80005f8 <__aeabi_dmul>
 8015f8c:	4680      	mov	r8, r0
 8015f8e:	4689      	mov	r9, r1
 8015f90:	e7bd      	b.n	8015f0e <_dtoa_r+0x5b6>
 8015f92:	bf00      	nop
 8015f94:	0801b0a8 	.word	0x0801b0a8
 8015f98:	0801b080 	.word	0x0801b080
 8015f9c:	3ff00000 	.word	0x3ff00000
 8015fa0:	40240000 	.word	0x40240000
 8015fa4:	401c0000 	.word	0x401c0000
 8015fa8:	40140000 	.word	0x40140000
 8015fac:	3fe00000 	.word	0x3fe00000
 8015fb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015fb4:	9d00      	ldr	r5, [sp, #0]
 8015fb6:	4642      	mov	r2, r8
 8015fb8:	464b      	mov	r3, r9
 8015fba:	4630      	mov	r0, r6
 8015fbc:	4639      	mov	r1, r7
 8015fbe:	f7ea fc45 	bl	800084c <__aeabi_ddiv>
 8015fc2:	f7ea fdc9 	bl	8000b58 <__aeabi_d2iz>
 8015fc6:	9001      	str	r0, [sp, #4]
 8015fc8:	f7ea faac 	bl	8000524 <__aeabi_i2d>
 8015fcc:	4642      	mov	r2, r8
 8015fce:	464b      	mov	r3, r9
 8015fd0:	f7ea fb12 	bl	80005f8 <__aeabi_dmul>
 8015fd4:	4602      	mov	r2, r0
 8015fd6:	460b      	mov	r3, r1
 8015fd8:	4630      	mov	r0, r6
 8015fda:	4639      	mov	r1, r7
 8015fdc:	f7ea f954 	bl	8000288 <__aeabi_dsub>
 8015fe0:	9e01      	ldr	r6, [sp, #4]
 8015fe2:	9f04      	ldr	r7, [sp, #16]
 8015fe4:	3630      	adds	r6, #48	; 0x30
 8015fe6:	f805 6b01 	strb.w	r6, [r5], #1
 8015fea:	9e00      	ldr	r6, [sp, #0]
 8015fec:	1bae      	subs	r6, r5, r6
 8015fee:	42b7      	cmp	r7, r6
 8015ff0:	4602      	mov	r2, r0
 8015ff2:	460b      	mov	r3, r1
 8015ff4:	d134      	bne.n	8016060 <_dtoa_r+0x708>
 8015ff6:	f7ea f949 	bl	800028c <__adddf3>
 8015ffa:	4642      	mov	r2, r8
 8015ffc:	464b      	mov	r3, r9
 8015ffe:	4606      	mov	r6, r0
 8016000:	460f      	mov	r7, r1
 8016002:	f7ea fd89 	bl	8000b18 <__aeabi_dcmpgt>
 8016006:	b9c8      	cbnz	r0, 801603c <_dtoa_r+0x6e4>
 8016008:	4642      	mov	r2, r8
 801600a:	464b      	mov	r3, r9
 801600c:	4630      	mov	r0, r6
 801600e:	4639      	mov	r1, r7
 8016010:	f7ea fd5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8016014:	b110      	cbz	r0, 801601c <_dtoa_r+0x6c4>
 8016016:	9b01      	ldr	r3, [sp, #4]
 8016018:	07db      	lsls	r3, r3, #31
 801601a:	d40f      	bmi.n	801603c <_dtoa_r+0x6e4>
 801601c:	4651      	mov	r1, sl
 801601e:	4620      	mov	r0, r4
 8016020:	f001 f8f0 	bl	8017204 <_Bfree>
 8016024:	2300      	movs	r3, #0
 8016026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016028:	702b      	strb	r3, [r5, #0]
 801602a:	f10b 0301 	add.w	r3, fp, #1
 801602e:	6013      	str	r3, [r2, #0]
 8016030:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016032:	2b00      	cmp	r3, #0
 8016034:	f43f ace2 	beq.w	80159fc <_dtoa_r+0xa4>
 8016038:	601d      	str	r5, [r3, #0]
 801603a:	e4df      	b.n	80159fc <_dtoa_r+0xa4>
 801603c:	465f      	mov	r7, fp
 801603e:	462b      	mov	r3, r5
 8016040:	461d      	mov	r5, r3
 8016042:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016046:	2a39      	cmp	r2, #57	; 0x39
 8016048:	d106      	bne.n	8016058 <_dtoa_r+0x700>
 801604a:	9a00      	ldr	r2, [sp, #0]
 801604c:	429a      	cmp	r2, r3
 801604e:	d1f7      	bne.n	8016040 <_dtoa_r+0x6e8>
 8016050:	9900      	ldr	r1, [sp, #0]
 8016052:	2230      	movs	r2, #48	; 0x30
 8016054:	3701      	adds	r7, #1
 8016056:	700a      	strb	r2, [r1, #0]
 8016058:	781a      	ldrb	r2, [r3, #0]
 801605a:	3201      	adds	r2, #1
 801605c:	701a      	strb	r2, [r3, #0]
 801605e:	e790      	b.n	8015f82 <_dtoa_r+0x62a>
 8016060:	4ba3      	ldr	r3, [pc, #652]	; (80162f0 <_dtoa_r+0x998>)
 8016062:	2200      	movs	r2, #0
 8016064:	f7ea fac8 	bl	80005f8 <__aeabi_dmul>
 8016068:	2200      	movs	r2, #0
 801606a:	2300      	movs	r3, #0
 801606c:	4606      	mov	r6, r0
 801606e:	460f      	mov	r7, r1
 8016070:	f7ea fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8016074:	2800      	cmp	r0, #0
 8016076:	d09e      	beq.n	8015fb6 <_dtoa_r+0x65e>
 8016078:	e7d0      	b.n	801601c <_dtoa_r+0x6c4>
 801607a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801607c:	2a00      	cmp	r2, #0
 801607e:	f000 80ca 	beq.w	8016216 <_dtoa_r+0x8be>
 8016082:	9a07      	ldr	r2, [sp, #28]
 8016084:	2a01      	cmp	r2, #1
 8016086:	f300 80ad 	bgt.w	80161e4 <_dtoa_r+0x88c>
 801608a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801608c:	2a00      	cmp	r2, #0
 801608e:	f000 80a5 	beq.w	80161dc <_dtoa_r+0x884>
 8016092:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016096:	9e08      	ldr	r6, [sp, #32]
 8016098:	9d05      	ldr	r5, [sp, #20]
 801609a:	9a05      	ldr	r2, [sp, #20]
 801609c:	441a      	add	r2, r3
 801609e:	9205      	str	r2, [sp, #20]
 80160a0:	9a06      	ldr	r2, [sp, #24]
 80160a2:	2101      	movs	r1, #1
 80160a4:	441a      	add	r2, r3
 80160a6:	4620      	mov	r0, r4
 80160a8:	9206      	str	r2, [sp, #24]
 80160aa:	f001 f9ab 	bl	8017404 <__i2b>
 80160ae:	4607      	mov	r7, r0
 80160b0:	b165      	cbz	r5, 80160cc <_dtoa_r+0x774>
 80160b2:	9b06      	ldr	r3, [sp, #24]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	dd09      	ble.n	80160cc <_dtoa_r+0x774>
 80160b8:	42ab      	cmp	r3, r5
 80160ba:	9a05      	ldr	r2, [sp, #20]
 80160bc:	bfa8      	it	ge
 80160be:	462b      	movge	r3, r5
 80160c0:	1ad2      	subs	r2, r2, r3
 80160c2:	9205      	str	r2, [sp, #20]
 80160c4:	9a06      	ldr	r2, [sp, #24]
 80160c6:	1aed      	subs	r5, r5, r3
 80160c8:	1ad3      	subs	r3, r2, r3
 80160ca:	9306      	str	r3, [sp, #24]
 80160cc:	9b08      	ldr	r3, [sp, #32]
 80160ce:	b1f3      	cbz	r3, 801610e <_dtoa_r+0x7b6>
 80160d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	f000 80a3 	beq.w	801621e <_dtoa_r+0x8c6>
 80160d8:	2e00      	cmp	r6, #0
 80160da:	dd10      	ble.n	80160fe <_dtoa_r+0x7a6>
 80160dc:	4639      	mov	r1, r7
 80160de:	4632      	mov	r2, r6
 80160e0:	4620      	mov	r0, r4
 80160e2:	f001 fa4f 	bl	8017584 <__pow5mult>
 80160e6:	4652      	mov	r2, sl
 80160e8:	4601      	mov	r1, r0
 80160ea:	4607      	mov	r7, r0
 80160ec:	4620      	mov	r0, r4
 80160ee:	f001 f99f 	bl	8017430 <__multiply>
 80160f2:	4651      	mov	r1, sl
 80160f4:	4680      	mov	r8, r0
 80160f6:	4620      	mov	r0, r4
 80160f8:	f001 f884 	bl	8017204 <_Bfree>
 80160fc:	46c2      	mov	sl, r8
 80160fe:	9b08      	ldr	r3, [sp, #32]
 8016100:	1b9a      	subs	r2, r3, r6
 8016102:	d004      	beq.n	801610e <_dtoa_r+0x7b6>
 8016104:	4651      	mov	r1, sl
 8016106:	4620      	mov	r0, r4
 8016108:	f001 fa3c 	bl	8017584 <__pow5mult>
 801610c:	4682      	mov	sl, r0
 801610e:	2101      	movs	r1, #1
 8016110:	4620      	mov	r0, r4
 8016112:	f001 f977 	bl	8017404 <__i2b>
 8016116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016118:	2b00      	cmp	r3, #0
 801611a:	4606      	mov	r6, r0
 801611c:	f340 8081 	ble.w	8016222 <_dtoa_r+0x8ca>
 8016120:	461a      	mov	r2, r3
 8016122:	4601      	mov	r1, r0
 8016124:	4620      	mov	r0, r4
 8016126:	f001 fa2d 	bl	8017584 <__pow5mult>
 801612a:	9b07      	ldr	r3, [sp, #28]
 801612c:	2b01      	cmp	r3, #1
 801612e:	4606      	mov	r6, r0
 8016130:	dd7a      	ble.n	8016228 <_dtoa_r+0x8d0>
 8016132:	f04f 0800 	mov.w	r8, #0
 8016136:	6933      	ldr	r3, [r6, #16]
 8016138:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801613c:	6918      	ldr	r0, [r3, #16]
 801613e:	f001 f913 	bl	8017368 <__hi0bits>
 8016142:	f1c0 0020 	rsb	r0, r0, #32
 8016146:	9b06      	ldr	r3, [sp, #24]
 8016148:	4418      	add	r0, r3
 801614a:	f010 001f 	ands.w	r0, r0, #31
 801614e:	f000 8094 	beq.w	801627a <_dtoa_r+0x922>
 8016152:	f1c0 0320 	rsb	r3, r0, #32
 8016156:	2b04      	cmp	r3, #4
 8016158:	f340 8085 	ble.w	8016266 <_dtoa_r+0x90e>
 801615c:	9b05      	ldr	r3, [sp, #20]
 801615e:	f1c0 001c 	rsb	r0, r0, #28
 8016162:	4403      	add	r3, r0
 8016164:	9305      	str	r3, [sp, #20]
 8016166:	9b06      	ldr	r3, [sp, #24]
 8016168:	4403      	add	r3, r0
 801616a:	4405      	add	r5, r0
 801616c:	9306      	str	r3, [sp, #24]
 801616e:	9b05      	ldr	r3, [sp, #20]
 8016170:	2b00      	cmp	r3, #0
 8016172:	dd05      	ble.n	8016180 <_dtoa_r+0x828>
 8016174:	4651      	mov	r1, sl
 8016176:	461a      	mov	r2, r3
 8016178:	4620      	mov	r0, r4
 801617a:	f001 fa5d 	bl	8017638 <__lshift>
 801617e:	4682      	mov	sl, r0
 8016180:	9b06      	ldr	r3, [sp, #24]
 8016182:	2b00      	cmp	r3, #0
 8016184:	dd05      	ble.n	8016192 <_dtoa_r+0x83a>
 8016186:	4631      	mov	r1, r6
 8016188:	461a      	mov	r2, r3
 801618a:	4620      	mov	r0, r4
 801618c:	f001 fa54 	bl	8017638 <__lshift>
 8016190:	4606      	mov	r6, r0
 8016192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016194:	2b00      	cmp	r3, #0
 8016196:	d072      	beq.n	801627e <_dtoa_r+0x926>
 8016198:	4631      	mov	r1, r6
 801619a:	4650      	mov	r0, sl
 801619c:	f001 fab8 	bl	8017710 <__mcmp>
 80161a0:	2800      	cmp	r0, #0
 80161a2:	da6c      	bge.n	801627e <_dtoa_r+0x926>
 80161a4:	2300      	movs	r3, #0
 80161a6:	4651      	mov	r1, sl
 80161a8:	220a      	movs	r2, #10
 80161aa:	4620      	mov	r0, r4
 80161ac:	f001 f84c 	bl	8017248 <__multadd>
 80161b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80161b6:	4682      	mov	sl, r0
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	f000 81b0 	beq.w	801651e <_dtoa_r+0xbc6>
 80161be:	2300      	movs	r3, #0
 80161c0:	4639      	mov	r1, r7
 80161c2:	220a      	movs	r2, #10
 80161c4:	4620      	mov	r0, r4
 80161c6:	f001 f83f 	bl	8017248 <__multadd>
 80161ca:	9b01      	ldr	r3, [sp, #4]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	4607      	mov	r7, r0
 80161d0:	f300 8096 	bgt.w	8016300 <_dtoa_r+0x9a8>
 80161d4:	9b07      	ldr	r3, [sp, #28]
 80161d6:	2b02      	cmp	r3, #2
 80161d8:	dc59      	bgt.n	801628e <_dtoa_r+0x936>
 80161da:	e091      	b.n	8016300 <_dtoa_r+0x9a8>
 80161dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80161de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80161e2:	e758      	b.n	8016096 <_dtoa_r+0x73e>
 80161e4:	9b04      	ldr	r3, [sp, #16]
 80161e6:	1e5e      	subs	r6, r3, #1
 80161e8:	9b08      	ldr	r3, [sp, #32]
 80161ea:	42b3      	cmp	r3, r6
 80161ec:	bfbf      	itttt	lt
 80161ee:	9b08      	ldrlt	r3, [sp, #32]
 80161f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80161f2:	9608      	strlt	r6, [sp, #32]
 80161f4:	1af3      	sublt	r3, r6, r3
 80161f6:	bfb4      	ite	lt
 80161f8:	18d2      	addlt	r2, r2, r3
 80161fa:	1b9e      	subge	r6, r3, r6
 80161fc:	9b04      	ldr	r3, [sp, #16]
 80161fe:	bfbc      	itt	lt
 8016200:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8016202:	2600      	movlt	r6, #0
 8016204:	2b00      	cmp	r3, #0
 8016206:	bfb7      	itett	lt
 8016208:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801620c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8016210:	1a9d      	sublt	r5, r3, r2
 8016212:	2300      	movlt	r3, #0
 8016214:	e741      	b.n	801609a <_dtoa_r+0x742>
 8016216:	9e08      	ldr	r6, [sp, #32]
 8016218:	9d05      	ldr	r5, [sp, #20]
 801621a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801621c:	e748      	b.n	80160b0 <_dtoa_r+0x758>
 801621e:	9a08      	ldr	r2, [sp, #32]
 8016220:	e770      	b.n	8016104 <_dtoa_r+0x7ac>
 8016222:	9b07      	ldr	r3, [sp, #28]
 8016224:	2b01      	cmp	r3, #1
 8016226:	dc19      	bgt.n	801625c <_dtoa_r+0x904>
 8016228:	9b02      	ldr	r3, [sp, #8]
 801622a:	b9bb      	cbnz	r3, 801625c <_dtoa_r+0x904>
 801622c:	9b03      	ldr	r3, [sp, #12]
 801622e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016232:	b99b      	cbnz	r3, 801625c <_dtoa_r+0x904>
 8016234:	9b03      	ldr	r3, [sp, #12]
 8016236:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801623a:	0d1b      	lsrs	r3, r3, #20
 801623c:	051b      	lsls	r3, r3, #20
 801623e:	b183      	cbz	r3, 8016262 <_dtoa_r+0x90a>
 8016240:	9b05      	ldr	r3, [sp, #20]
 8016242:	3301      	adds	r3, #1
 8016244:	9305      	str	r3, [sp, #20]
 8016246:	9b06      	ldr	r3, [sp, #24]
 8016248:	3301      	adds	r3, #1
 801624a:	9306      	str	r3, [sp, #24]
 801624c:	f04f 0801 	mov.w	r8, #1
 8016250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016252:	2b00      	cmp	r3, #0
 8016254:	f47f af6f 	bne.w	8016136 <_dtoa_r+0x7de>
 8016258:	2001      	movs	r0, #1
 801625a:	e774      	b.n	8016146 <_dtoa_r+0x7ee>
 801625c:	f04f 0800 	mov.w	r8, #0
 8016260:	e7f6      	b.n	8016250 <_dtoa_r+0x8f8>
 8016262:	4698      	mov	r8, r3
 8016264:	e7f4      	b.n	8016250 <_dtoa_r+0x8f8>
 8016266:	d082      	beq.n	801616e <_dtoa_r+0x816>
 8016268:	9a05      	ldr	r2, [sp, #20]
 801626a:	331c      	adds	r3, #28
 801626c:	441a      	add	r2, r3
 801626e:	9205      	str	r2, [sp, #20]
 8016270:	9a06      	ldr	r2, [sp, #24]
 8016272:	441a      	add	r2, r3
 8016274:	441d      	add	r5, r3
 8016276:	9206      	str	r2, [sp, #24]
 8016278:	e779      	b.n	801616e <_dtoa_r+0x816>
 801627a:	4603      	mov	r3, r0
 801627c:	e7f4      	b.n	8016268 <_dtoa_r+0x910>
 801627e:	9b04      	ldr	r3, [sp, #16]
 8016280:	2b00      	cmp	r3, #0
 8016282:	dc37      	bgt.n	80162f4 <_dtoa_r+0x99c>
 8016284:	9b07      	ldr	r3, [sp, #28]
 8016286:	2b02      	cmp	r3, #2
 8016288:	dd34      	ble.n	80162f4 <_dtoa_r+0x99c>
 801628a:	9b04      	ldr	r3, [sp, #16]
 801628c:	9301      	str	r3, [sp, #4]
 801628e:	9b01      	ldr	r3, [sp, #4]
 8016290:	b963      	cbnz	r3, 80162ac <_dtoa_r+0x954>
 8016292:	4631      	mov	r1, r6
 8016294:	2205      	movs	r2, #5
 8016296:	4620      	mov	r0, r4
 8016298:	f000 ffd6 	bl	8017248 <__multadd>
 801629c:	4601      	mov	r1, r0
 801629e:	4606      	mov	r6, r0
 80162a0:	4650      	mov	r0, sl
 80162a2:	f001 fa35 	bl	8017710 <__mcmp>
 80162a6:	2800      	cmp	r0, #0
 80162a8:	f73f adbb 	bgt.w	8015e22 <_dtoa_r+0x4ca>
 80162ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162ae:	9d00      	ldr	r5, [sp, #0]
 80162b0:	ea6f 0b03 	mvn.w	fp, r3
 80162b4:	f04f 0800 	mov.w	r8, #0
 80162b8:	4631      	mov	r1, r6
 80162ba:	4620      	mov	r0, r4
 80162bc:	f000 ffa2 	bl	8017204 <_Bfree>
 80162c0:	2f00      	cmp	r7, #0
 80162c2:	f43f aeab 	beq.w	801601c <_dtoa_r+0x6c4>
 80162c6:	f1b8 0f00 	cmp.w	r8, #0
 80162ca:	d005      	beq.n	80162d8 <_dtoa_r+0x980>
 80162cc:	45b8      	cmp	r8, r7
 80162ce:	d003      	beq.n	80162d8 <_dtoa_r+0x980>
 80162d0:	4641      	mov	r1, r8
 80162d2:	4620      	mov	r0, r4
 80162d4:	f000 ff96 	bl	8017204 <_Bfree>
 80162d8:	4639      	mov	r1, r7
 80162da:	4620      	mov	r0, r4
 80162dc:	f000 ff92 	bl	8017204 <_Bfree>
 80162e0:	e69c      	b.n	801601c <_dtoa_r+0x6c4>
 80162e2:	2600      	movs	r6, #0
 80162e4:	4637      	mov	r7, r6
 80162e6:	e7e1      	b.n	80162ac <_dtoa_r+0x954>
 80162e8:	46bb      	mov	fp, r7
 80162ea:	4637      	mov	r7, r6
 80162ec:	e599      	b.n	8015e22 <_dtoa_r+0x4ca>
 80162ee:	bf00      	nop
 80162f0:	40240000 	.word	0x40240000
 80162f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	f000 80c8 	beq.w	801648c <_dtoa_r+0xb34>
 80162fc:	9b04      	ldr	r3, [sp, #16]
 80162fe:	9301      	str	r3, [sp, #4]
 8016300:	2d00      	cmp	r5, #0
 8016302:	dd05      	ble.n	8016310 <_dtoa_r+0x9b8>
 8016304:	4639      	mov	r1, r7
 8016306:	462a      	mov	r2, r5
 8016308:	4620      	mov	r0, r4
 801630a:	f001 f995 	bl	8017638 <__lshift>
 801630e:	4607      	mov	r7, r0
 8016310:	f1b8 0f00 	cmp.w	r8, #0
 8016314:	d05b      	beq.n	80163ce <_dtoa_r+0xa76>
 8016316:	6879      	ldr	r1, [r7, #4]
 8016318:	4620      	mov	r0, r4
 801631a:	f000 ff33 	bl	8017184 <_Balloc>
 801631e:	4605      	mov	r5, r0
 8016320:	b928      	cbnz	r0, 801632e <_dtoa_r+0x9d6>
 8016322:	4b83      	ldr	r3, [pc, #524]	; (8016530 <_dtoa_r+0xbd8>)
 8016324:	4602      	mov	r2, r0
 8016326:	f240 21ef 	movw	r1, #751	; 0x2ef
 801632a:	f7ff bb2e 	b.w	801598a <_dtoa_r+0x32>
 801632e:	693a      	ldr	r2, [r7, #16]
 8016330:	3202      	adds	r2, #2
 8016332:	0092      	lsls	r2, r2, #2
 8016334:	f107 010c 	add.w	r1, r7, #12
 8016338:	300c      	adds	r0, #12
 801633a:	f7ff fa65 	bl	8015808 <memcpy>
 801633e:	2201      	movs	r2, #1
 8016340:	4629      	mov	r1, r5
 8016342:	4620      	mov	r0, r4
 8016344:	f001 f978 	bl	8017638 <__lshift>
 8016348:	9b00      	ldr	r3, [sp, #0]
 801634a:	3301      	adds	r3, #1
 801634c:	9304      	str	r3, [sp, #16]
 801634e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016352:	4413      	add	r3, r2
 8016354:	9308      	str	r3, [sp, #32]
 8016356:	9b02      	ldr	r3, [sp, #8]
 8016358:	f003 0301 	and.w	r3, r3, #1
 801635c:	46b8      	mov	r8, r7
 801635e:	9306      	str	r3, [sp, #24]
 8016360:	4607      	mov	r7, r0
 8016362:	9b04      	ldr	r3, [sp, #16]
 8016364:	4631      	mov	r1, r6
 8016366:	3b01      	subs	r3, #1
 8016368:	4650      	mov	r0, sl
 801636a:	9301      	str	r3, [sp, #4]
 801636c:	f7ff fa6a 	bl	8015844 <quorem>
 8016370:	4641      	mov	r1, r8
 8016372:	9002      	str	r0, [sp, #8]
 8016374:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016378:	4650      	mov	r0, sl
 801637a:	f001 f9c9 	bl	8017710 <__mcmp>
 801637e:	463a      	mov	r2, r7
 8016380:	9005      	str	r0, [sp, #20]
 8016382:	4631      	mov	r1, r6
 8016384:	4620      	mov	r0, r4
 8016386:	f001 f9df 	bl	8017748 <__mdiff>
 801638a:	68c2      	ldr	r2, [r0, #12]
 801638c:	4605      	mov	r5, r0
 801638e:	bb02      	cbnz	r2, 80163d2 <_dtoa_r+0xa7a>
 8016390:	4601      	mov	r1, r0
 8016392:	4650      	mov	r0, sl
 8016394:	f001 f9bc 	bl	8017710 <__mcmp>
 8016398:	4602      	mov	r2, r0
 801639a:	4629      	mov	r1, r5
 801639c:	4620      	mov	r0, r4
 801639e:	9209      	str	r2, [sp, #36]	; 0x24
 80163a0:	f000 ff30 	bl	8017204 <_Bfree>
 80163a4:	9b07      	ldr	r3, [sp, #28]
 80163a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163a8:	9d04      	ldr	r5, [sp, #16]
 80163aa:	ea43 0102 	orr.w	r1, r3, r2
 80163ae:	9b06      	ldr	r3, [sp, #24]
 80163b0:	4319      	orrs	r1, r3
 80163b2:	d110      	bne.n	80163d6 <_dtoa_r+0xa7e>
 80163b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80163b8:	d029      	beq.n	801640e <_dtoa_r+0xab6>
 80163ba:	9b05      	ldr	r3, [sp, #20]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	dd02      	ble.n	80163c6 <_dtoa_r+0xa6e>
 80163c0:	9b02      	ldr	r3, [sp, #8]
 80163c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80163c6:	9b01      	ldr	r3, [sp, #4]
 80163c8:	f883 9000 	strb.w	r9, [r3]
 80163cc:	e774      	b.n	80162b8 <_dtoa_r+0x960>
 80163ce:	4638      	mov	r0, r7
 80163d0:	e7ba      	b.n	8016348 <_dtoa_r+0x9f0>
 80163d2:	2201      	movs	r2, #1
 80163d4:	e7e1      	b.n	801639a <_dtoa_r+0xa42>
 80163d6:	9b05      	ldr	r3, [sp, #20]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	db04      	blt.n	80163e6 <_dtoa_r+0xa8e>
 80163dc:	9907      	ldr	r1, [sp, #28]
 80163de:	430b      	orrs	r3, r1
 80163e0:	9906      	ldr	r1, [sp, #24]
 80163e2:	430b      	orrs	r3, r1
 80163e4:	d120      	bne.n	8016428 <_dtoa_r+0xad0>
 80163e6:	2a00      	cmp	r2, #0
 80163e8:	dded      	ble.n	80163c6 <_dtoa_r+0xa6e>
 80163ea:	4651      	mov	r1, sl
 80163ec:	2201      	movs	r2, #1
 80163ee:	4620      	mov	r0, r4
 80163f0:	f001 f922 	bl	8017638 <__lshift>
 80163f4:	4631      	mov	r1, r6
 80163f6:	4682      	mov	sl, r0
 80163f8:	f001 f98a 	bl	8017710 <__mcmp>
 80163fc:	2800      	cmp	r0, #0
 80163fe:	dc03      	bgt.n	8016408 <_dtoa_r+0xab0>
 8016400:	d1e1      	bne.n	80163c6 <_dtoa_r+0xa6e>
 8016402:	f019 0f01 	tst.w	r9, #1
 8016406:	d0de      	beq.n	80163c6 <_dtoa_r+0xa6e>
 8016408:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801640c:	d1d8      	bne.n	80163c0 <_dtoa_r+0xa68>
 801640e:	9a01      	ldr	r2, [sp, #4]
 8016410:	2339      	movs	r3, #57	; 0x39
 8016412:	7013      	strb	r3, [r2, #0]
 8016414:	462b      	mov	r3, r5
 8016416:	461d      	mov	r5, r3
 8016418:	3b01      	subs	r3, #1
 801641a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801641e:	2a39      	cmp	r2, #57	; 0x39
 8016420:	d06c      	beq.n	80164fc <_dtoa_r+0xba4>
 8016422:	3201      	adds	r2, #1
 8016424:	701a      	strb	r2, [r3, #0]
 8016426:	e747      	b.n	80162b8 <_dtoa_r+0x960>
 8016428:	2a00      	cmp	r2, #0
 801642a:	dd07      	ble.n	801643c <_dtoa_r+0xae4>
 801642c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016430:	d0ed      	beq.n	801640e <_dtoa_r+0xab6>
 8016432:	9a01      	ldr	r2, [sp, #4]
 8016434:	f109 0301 	add.w	r3, r9, #1
 8016438:	7013      	strb	r3, [r2, #0]
 801643a:	e73d      	b.n	80162b8 <_dtoa_r+0x960>
 801643c:	9b04      	ldr	r3, [sp, #16]
 801643e:	9a08      	ldr	r2, [sp, #32]
 8016440:	f803 9c01 	strb.w	r9, [r3, #-1]
 8016444:	4293      	cmp	r3, r2
 8016446:	d043      	beq.n	80164d0 <_dtoa_r+0xb78>
 8016448:	4651      	mov	r1, sl
 801644a:	2300      	movs	r3, #0
 801644c:	220a      	movs	r2, #10
 801644e:	4620      	mov	r0, r4
 8016450:	f000 fefa 	bl	8017248 <__multadd>
 8016454:	45b8      	cmp	r8, r7
 8016456:	4682      	mov	sl, r0
 8016458:	f04f 0300 	mov.w	r3, #0
 801645c:	f04f 020a 	mov.w	r2, #10
 8016460:	4641      	mov	r1, r8
 8016462:	4620      	mov	r0, r4
 8016464:	d107      	bne.n	8016476 <_dtoa_r+0xb1e>
 8016466:	f000 feef 	bl	8017248 <__multadd>
 801646a:	4680      	mov	r8, r0
 801646c:	4607      	mov	r7, r0
 801646e:	9b04      	ldr	r3, [sp, #16]
 8016470:	3301      	adds	r3, #1
 8016472:	9304      	str	r3, [sp, #16]
 8016474:	e775      	b.n	8016362 <_dtoa_r+0xa0a>
 8016476:	f000 fee7 	bl	8017248 <__multadd>
 801647a:	4639      	mov	r1, r7
 801647c:	4680      	mov	r8, r0
 801647e:	2300      	movs	r3, #0
 8016480:	220a      	movs	r2, #10
 8016482:	4620      	mov	r0, r4
 8016484:	f000 fee0 	bl	8017248 <__multadd>
 8016488:	4607      	mov	r7, r0
 801648a:	e7f0      	b.n	801646e <_dtoa_r+0xb16>
 801648c:	9b04      	ldr	r3, [sp, #16]
 801648e:	9301      	str	r3, [sp, #4]
 8016490:	9d00      	ldr	r5, [sp, #0]
 8016492:	4631      	mov	r1, r6
 8016494:	4650      	mov	r0, sl
 8016496:	f7ff f9d5 	bl	8015844 <quorem>
 801649a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801649e:	9b00      	ldr	r3, [sp, #0]
 80164a0:	f805 9b01 	strb.w	r9, [r5], #1
 80164a4:	1aea      	subs	r2, r5, r3
 80164a6:	9b01      	ldr	r3, [sp, #4]
 80164a8:	4293      	cmp	r3, r2
 80164aa:	dd07      	ble.n	80164bc <_dtoa_r+0xb64>
 80164ac:	4651      	mov	r1, sl
 80164ae:	2300      	movs	r3, #0
 80164b0:	220a      	movs	r2, #10
 80164b2:	4620      	mov	r0, r4
 80164b4:	f000 fec8 	bl	8017248 <__multadd>
 80164b8:	4682      	mov	sl, r0
 80164ba:	e7ea      	b.n	8016492 <_dtoa_r+0xb3a>
 80164bc:	9b01      	ldr	r3, [sp, #4]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	bfc8      	it	gt
 80164c2:	461d      	movgt	r5, r3
 80164c4:	9b00      	ldr	r3, [sp, #0]
 80164c6:	bfd8      	it	le
 80164c8:	2501      	movle	r5, #1
 80164ca:	441d      	add	r5, r3
 80164cc:	f04f 0800 	mov.w	r8, #0
 80164d0:	4651      	mov	r1, sl
 80164d2:	2201      	movs	r2, #1
 80164d4:	4620      	mov	r0, r4
 80164d6:	f001 f8af 	bl	8017638 <__lshift>
 80164da:	4631      	mov	r1, r6
 80164dc:	4682      	mov	sl, r0
 80164de:	f001 f917 	bl	8017710 <__mcmp>
 80164e2:	2800      	cmp	r0, #0
 80164e4:	dc96      	bgt.n	8016414 <_dtoa_r+0xabc>
 80164e6:	d102      	bne.n	80164ee <_dtoa_r+0xb96>
 80164e8:	f019 0f01 	tst.w	r9, #1
 80164ec:	d192      	bne.n	8016414 <_dtoa_r+0xabc>
 80164ee:	462b      	mov	r3, r5
 80164f0:	461d      	mov	r5, r3
 80164f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80164f6:	2a30      	cmp	r2, #48	; 0x30
 80164f8:	d0fa      	beq.n	80164f0 <_dtoa_r+0xb98>
 80164fa:	e6dd      	b.n	80162b8 <_dtoa_r+0x960>
 80164fc:	9a00      	ldr	r2, [sp, #0]
 80164fe:	429a      	cmp	r2, r3
 8016500:	d189      	bne.n	8016416 <_dtoa_r+0xabe>
 8016502:	f10b 0b01 	add.w	fp, fp, #1
 8016506:	2331      	movs	r3, #49	; 0x31
 8016508:	e796      	b.n	8016438 <_dtoa_r+0xae0>
 801650a:	4b0a      	ldr	r3, [pc, #40]	; (8016534 <_dtoa_r+0xbdc>)
 801650c:	f7ff ba99 	b.w	8015a42 <_dtoa_r+0xea>
 8016510:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016512:	2b00      	cmp	r3, #0
 8016514:	f47f aa6d 	bne.w	80159f2 <_dtoa_r+0x9a>
 8016518:	4b07      	ldr	r3, [pc, #28]	; (8016538 <_dtoa_r+0xbe0>)
 801651a:	f7ff ba92 	b.w	8015a42 <_dtoa_r+0xea>
 801651e:	9b01      	ldr	r3, [sp, #4]
 8016520:	2b00      	cmp	r3, #0
 8016522:	dcb5      	bgt.n	8016490 <_dtoa_r+0xb38>
 8016524:	9b07      	ldr	r3, [sp, #28]
 8016526:	2b02      	cmp	r3, #2
 8016528:	f73f aeb1 	bgt.w	801628e <_dtoa_r+0x936>
 801652c:	e7b0      	b.n	8016490 <_dtoa_r+0xb38>
 801652e:	bf00      	nop
 8016530:	0801afa5 	.word	0x0801afa5
 8016534:	0801ada0 	.word	0x0801ada0
 8016538:	0801af29 	.word	0x0801af29

0801653c <rshift>:
 801653c:	6903      	ldr	r3, [r0, #16]
 801653e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016542:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016546:	ea4f 1261 	mov.w	r2, r1, asr #5
 801654a:	f100 0414 	add.w	r4, r0, #20
 801654e:	dd45      	ble.n	80165dc <rshift+0xa0>
 8016550:	f011 011f 	ands.w	r1, r1, #31
 8016554:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016558:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801655c:	d10c      	bne.n	8016578 <rshift+0x3c>
 801655e:	f100 0710 	add.w	r7, r0, #16
 8016562:	4629      	mov	r1, r5
 8016564:	42b1      	cmp	r1, r6
 8016566:	d334      	bcc.n	80165d2 <rshift+0x96>
 8016568:	1a9b      	subs	r3, r3, r2
 801656a:	009b      	lsls	r3, r3, #2
 801656c:	1eea      	subs	r2, r5, #3
 801656e:	4296      	cmp	r6, r2
 8016570:	bf38      	it	cc
 8016572:	2300      	movcc	r3, #0
 8016574:	4423      	add	r3, r4
 8016576:	e015      	b.n	80165a4 <rshift+0x68>
 8016578:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801657c:	f1c1 0820 	rsb	r8, r1, #32
 8016580:	40cf      	lsrs	r7, r1
 8016582:	f105 0e04 	add.w	lr, r5, #4
 8016586:	46a1      	mov	r9, r4
 8016588:	4576      	cmp	r6, lr
 801658a:	46f4      	mov	ip, lr
 801658c:	d815      	bhi.n	80165ba <rshift+0x7e>
 801658e:	1a9a      	subs	r2, r3, r2
 8016590:	0092      	lsls	r2, r2, #2
 8016592:	3a04      	subs	r2, #4
 8016594:	3501      	adds	r5, #1
 8016596:	42ae      	cmp	r6, r5
 8016598:	bf38      	it	cc
 801659a:	2200      	movcc	r2, #0
 801659c:	18a3      	adds	r3, r4, r2
 801659e:	50a7      	str	r7, [r4, r2]
 80165a0:	b107      	cbz	r7, 80165a4 <rshift+0x68>
 80165a2:	3304      	adds	r3, #4
 80165a4:	1b1a      	subs	r2, r3, r4
 80165a6:	42a3      	cmp	r3, r4
 80165a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80165ac:	bf08      	it	eq
 80165ae:	2300      	moveq	r3, #0
 80165b0:	6102      	str	r2, [r0, #16]
 80165b2:	bf08      	it	eq
 80165b4:	6143      	streq	r3, [r0, #20]
 80165b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165ba:	f8dc c000 	ldr.w	ip, [ip]
 80165be:	fa0c fc08 	lsl.w	ip, ip, r8
 80165c2:	ea4c 0707 	orr.w	r7, ip, r7
 80165c6:	f849 7b04 	str.w	r7, [r9], #4
 80165ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80165ce:	40cf      	lsrs	r7, r1
 80165d0:	e7da      	b.n	8016588 <rshift+0x4c>
 80165d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80165d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80165da:	e7c3      	b.n	8016564 <rshift+0x28>
 80165dc:	4623      	mov	r3, r4
 80165de:	e7e1      	b.n	80165a4 <rshift+0x68>

080165e0 <__hexdig_fun>:
 80165e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80165e4:	2b09      	cmp	r3, #9
 80165e6:	d802      	bhi.n	80165ee <__hexdig_fun+0xe>
 80165e8:	3820      	subs	r0, #32
 80165ea:	b2c0      	uxtb	r0, r0
 80165ec:	4770      	bx	lr
 80165ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80165f2:	2b05      	cmp	r3, #5
 80165f4:	d801      	bhi.n	80165fa <__hexdig_fun+0x1a>
 80165f6:	3847      	subs	r0, #71	; 0x47
 80165f8:	e7f7      	b.n	80165ea <__hexdig_fun+0xa>
 80165fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80165fe:	2b05      	cmp	r3, #5
 8016600:	d801      	bhi.n	8016606 <__hexdig_fun+0x26>
 8016602:	3827      	subs	r0, #39	; 0x27
 8016604:	e7f1      	b.n	80165ea <__hexdig_fun+0xa>
 8016606:	2000      	movs	r0, #0
 8016608:	4770      	bx	lr
	...

0801660c <__gethex>:
 801660c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016610:	4617      	mov	r7, r2
 8016612:	680a      	ldr	r2, [r1, #0]
 8016614:	b085      	sub	sp, #20
 8016616:	f102 0b02 	add.w	fp, r2, #2
 801661a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801661e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016622:	4681      	mov	r9, r0
 8016624:	468a      	mov	sl, r1
 8016626:	9302      	str	r3, [sp, #8]
 8016628:	32fe      	adds	r2, #254	; 0xfe
 801662a:	eb02 030b 	add.w	r3, r2, fp
 801662e:	46d8      	mov	r8, fp
 8016630:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8016634:	9301      	str	r3, [sp, #4]
 8016636:	2830      	cmp	r0, #48	; 0x30
 8016638:	d0f7      	beq.n	801662a <__gethex+0x1e>
 801663a:	f7ff ffd1 	bl	80165e0 <__hexdig_fun>
 801663e:	4604      	mov	r4, r0
 8016640:	2800      	cmp	r0, #0
 8016642:	d138      	bne.n	80166b6 <__gethex+0xaa>
 8016644:	49a7      	ldr	r1, [pc, #668]	; (80168e4 <__gethex+0x2d8>)
 8016646:	2201      	movs	r2, #1
 8016648:	4640      	mov	r0, r8
 801664a:	f7ff f893 	bl	8015774 <strncmp>
 801664e:	4606      	mov	r6, r0
 8016650:	2800      	cmp	r0, #0
 8016652:	d169      	bne.n	8016728 <__gethex+0x11c>
 8016654:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016658:	465d      	mov	r5, fp
 801665a:	f7ff ffc1 	bl	80165e0 <__hexdig_fun>
 801665e:	2800      	cmp	r0, #0
 8016660:	d064      	beq.n	801672c <__gethex+0x120>
 8016662:	465a      	mov	r2, fp
 8016664:	7810      	ldrb	r0, [r2, #0]
 8016666:	2830      	cmp	r0, #48	; 0x30
 8016668:	4690      	mov	r8, r2
 801666a:	f102 0201 	add.w	r2, r2, #1
 801666e:	d0f9      	beq.n	8016664 <__gethex+0x58>
 8016670:	f7ff ffb6 	bl	80165e0 <__hexdig_fun>
 8016674:	2301      	movs	r3, #1
 8016676:	fab0 f480 	clz	r4, r0
 801667a:	0964      	lsrs	r4, r4, #5
 801667c:	465e      	mov	r6, fp
 801667e:	9301      	str	r3, [sp, #4]
 8016680:	4642      	mov	r2, r8
 8016682:	4615      	mov	r5, r2
 8016684:	3201      	adds	r2, #1
 8016686:	7828      	ldrb	r0, [r5, #0]
 8016688:	f7ff ffaa 	bl	80165e0 <__hexdig_fun>
 801668c:	2800      	cmp	r0, #0
 801668e:	d1f8      	bne.n	8016682 <__gethex+0x76>
 8016690:	4994      	ldr	r1, [pc, #592]	; (80168e4 <__gethex+0x2d8>)
 8016692:	2201      	movs	r2, #1
 8016694:	4628      	mov	r0, r5
 8016696:	f7ff f86d 	bl	8015774 <strncmp>
 801669a:	b978      	cbnz	r0, 80166bc <__gethex+0xb0>
 801669c:	b946      	cbnz	r6, 80166b0 <__gethex+0xa4>
 801669e:	1c6e      	adds	r6, r5, #1
 80166a0:	4632      	mov	r2, r6
 80166a2:	4615      	mov	r5, r2
 80166a4:	3201      	adds	r2, #1
 80166a6:	7828      	ldrb	r0, [r5, #0]
 80166a8:	f7ff ff9a 	bl	80165e0 <__hexdig_fun>
 80166ac:	2800      	cmp	r0, #0
 80166ae:	d1f8      	bne.n	80166a2 <__gethex+0x96>
 80166b0:	1b73      	subs	r3, r6, r5
 80166b2:	009e      	lsls	r6, r3, #2
 80166b4:	e004      	b.n	80166c0 <__gethex+0xb4>
 80166b6:	2400      	movs	r4, #0
 80166b8:	4626      	mov	r6, r4
 80166ba:	e7e1      	b.n	8016680 <__gethex+0x74>
 80166bc:	2e00      	cmp	r6, #0
 80166be:	d1f7      	bne.n	80166b0 <__gethex+0xa4>
 80166c0:	782b      	ldrb	r3, [r5, #0]
 80166c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80166c6:	2b50      	cmp	r3, #80	; 0x50
 80166c8:	d13d      	bne.n	8016746 <__gethex+0x13a>
 80166ca:	786b      	ldrb	r3, [r5, #1]
 80166cc:	2b2b      	cmp	r3, #43	; 0x2b
 80166ce:	d02f      	beq.n	8016730 <__gethex+0x124>
 80166d0:	2b2d      	cmp	r3, #45	; 0x2d
 80166d2:	d031      	beq.n	8016738 <__gethex+0x12c>
 80166d4:	1c69      	adds	r1, r5, #1
 80166d6:	f04f 0b00 	mov.w	fp, #0
 80166da:	7808      	ldrb	r0, [r1, #0]
 80166dc:	f7ff ff80 	bl	80165e0 <__hexdig_fun>
 80166e0:	1e42      	subs	r2, r0, #1
 80166e2:	b2d2      	uxtb	r2, r2
 80166e4:	2a18      	cmp	r2, #24
 80166e6:	d82e      	bhi.n	8016746 <__gethex+0x13a>
 80166e8:	f1a0 0210 	sub.w	r2, r0, #16
 80166ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80166f0:	f7ff ff76 	bl	80165e0 <__hexdig_fun>
 80166f4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80166f8:	fa5f fc8c 	uxtb.w	ip, ip
 80166fc:	f1bc 0f18 	cmp.w	ip, #24
 8016700:	d91d      	bls.n	801673e <__gethex+0x132>
 8016702:	f1bb 0f00 	cmp.w	fp, #0
 8016706:	d000      	beq.n	801670a <__gethex+0xfe>
 8016708:	4252      	negs	r2, r2
 801670a:	4416      	add	r6, r2
 801670c:	f8ca 1000 	str.w	r1, [sl]
 8016710:	b1dc      	cbz	r4, 801674a <__gethex+0x13e>
 8016712:	9b01      	ldr	r3, [sp, #4]
 8016714:	2b00      	cmp	r3, #0
 8016716:	bf14      	ite	ne
 8016718:	f04f 0800 	movne.w	r8, #0
 801671c:	f04f 0806 	moveq.w	r8, #6
 8016720:	4640      	mov	r0, r8
 8016722:	b005      	add	sp, #20
 8016724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016728:	4645      	mov	r5, r8
 801672a:	4626      	mov	r6, r4
 801672c:	2401      	movs	r4, #1
 801672e:	e7c7      	b.n	80166c0 <__gethex+0xb4>
 8016730:	f04f 0b00 	mov.w	fp, #0
 8016734:	1ca9      	adds	r1, r5, #2
 8016736:	e7d0      	b.n	80166da <__gethex+0xce>
 8016738:	f04f 0b01 	mov.w	fp, #1
 801673c:	e7fa      	b.n	8016734 <__gethex+0x128>
 801673e:	230a      	movs	r3, #10
 8016740:	fb03 0002 	mla	r0, r3, r2, r0
 8016744:	e7d0      	b.n	80166e8 <__gethex+0xdc>
 8016746:	4629      	mov	r1, r5
 8016748:	e7e0      	b.n	801670c <__gethex+0x100>
 801674a:	eba5 0308 	sub.w	r3, r5, r8
 801674e:	3b01      	subs	r3, #1
 8016750:	4621      	mov	r1, r4
 8016752:	2b07      	cmp	r3, #7
 8016754:	dc0a      	bgt.n	801676c <__gethex+0x160>
 8016756:	4648      	mov	r0, r9
 8016758:	f000 fd14 	bl	8017184 <_Balloc>
 801675c:	4604      	mov	r4, r0
 801675e:	b940      	cbnz	r0, 8016772 <__gethex+0x166>
 8016760:	4b61      	ldr	r3, [pc, #388]	; (80168e8 <__gethex+0x2dc>)
 8016762:	4602      	mov	r2, r0
 8016764:	21e4      	movs	r1, #228	; 0xe4
 8016766:	4861      	ldr	r0, [pc, #388]	; (80168ec <__gethex+0x2e0>)
 8016768:	f001 faa8 	bl	8017cbc <__assert_func>
 801676c:	3101      	adds	r1, #1
 801676e:	105b      	asrs	r3, r3, #1
 8016770:	e7ef      	b.n	8016752 <__gethex+0x146>
 8016772:	f100 0a14 	add.w	sl, r0, #20
 8016776:	2300      	movs	r3, #0
 8016778:	495a      	ldr	r1, [pc, #360]	; (80168e4 <__gethex+0x2d8>)
 801677a:	f8cd a004 	str.w	sl, [sp, #4]
 801677e:	469b      	mov	fp, r3
 8016780:	45a8      	cmp	r8, r5
 8016782:	d342      	bcc.n	801680a <__gethex+0x1fe>
 8016784:	9801      	ldr	r0, [sp, #4]
 8016786:	f840 bb04 	str.w	fp, [r0], #4
 801678a:	eba0 000a 	sub.w	r0, r0, sl
 801678e:	1080      	asrs	r0, r0, #2
 8016790:	6120      	str	r0, [r4, #16]
 8016792:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8016796:	4658      	mov	r0, fp
 8016798:	f000 fde6 	bl	8017368 <__hi0bits>
 801679c:	683d      	ldr	r5, [r7, #0]
 801679e:	eba8 0000 	sub.w	r0, r8, r0
 80167a2:	42a8      	cmp	r0, r5
 80167a4:	dd59      	ble.n	801685a <__gethex+0x24e>
 80167a6:	eba0 0805 	sub.w	r8, r0, r5
 80167aa:	4641      	mov	r1, r8
 80167ac:	4620      	mov	r0, r4
 80167ae:	f001 f975 	bl	8017a9c <__any_on>
 80167b2:	4683      	mov	fp, r0
 80167b4:	b1b8      	cbz	r0, 80167e6 <__gethex+0x1da>
 80167b6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80167ba:	1159      	asrs	r1, r3, #5
 80167bc:	f003 021f 	and.w	r2, r3, #31
 80167c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80167c4:	f04f 0b01 	mov.w	fp, #1
 80167c8:	fa0b f202 	lsl.w	r2, fp, r2
 80167cc:	420a      	tst	r2, r1
 80167ce:	d00a      	beq.n	80167e6 <__gethex+0x1da>
 80167d0:	455b      	cmp	r3, fp
 80167d2:	dd06      	ble.n	80167e2 <__gethex+0x1d6>
 80167d4:	f1a8 0102 	sub.w	r1, r8, #2
 80167d8:	4620      	mov	r0, r4
 80167da:	f001 f95f 	bl	8017a9c <__any_on>
 80167de:	2800      	cmp	r0, #0
 80167e0:	d138      	bne.n	8016854 <__gethex+0x248>
 80167e2:	f04f 0b02 	mov.w	fp, #2
 80167e6:	4641      	mov	r1, r8
 80167e8:	4620      	mov	r0, r4
 80167ea:	f7ff fea7 	bl	801653c <rshift>
 80167ee:	4446      	add	r6, r8
 80167f0:	68bb      	ldr	r3, [r7, #8]
 80167f2:	42b3      	cmp	r3, r6
 80167f4:	da41      	bge.n	801687a <__gethex+0x26e>
 80167f6:	4621      	mov	r1, r4
 80167f8:	4648      	mov	r0, r9
 80167fa:	f000 fd03 	bl	8017204 <_Bfree>
 80167fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016800:	2300      	movs	r3, #0
 8016802:	6013      	str	r3, [r2, #0]
 8016804:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8016808:	e78a      	b.n	8016720 <__gethex+0x114>
 801680a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801680e:	2a2e      	cmp	r2, #46	; 0x2e
 8016810:	d014      	beq.n	801683c <__gethex+0x230>
 8016812:	2b20      	cmp	r3, #32
 8016814:	d106      	bne.n	8016824 <__gethex+0x218>
 8016816:	9b01      	ldr	r3, [sp, #4]
 8016818:	f843 bb04 	str.w	fp, [r3], #4
 801681c:	f04f 0b00 	mov.w	fp, #0
 8016820:	9301      	str	r3, [sp, #4]
 8016822:	465b      	mov	r3, fp
 8016824:	7828      	ldrb	r0, [r5, #0]
 8016826:	9303      	str	r3, [sp, #12]
 8016828:	f7ff feda 	bl	80165e0 <__hexdig_fun>
 801682c:	9b03      	ldr	r3, [sp, #12]
 801682e:	f000 000f 	and.w	r0, r0, #15
 8016832:	4098      	lsls	r0, r3
 8016834:	ea4b 0b00 	orr.w	fp, fp, r0
 8016838:	3304      	adds	r3, #4
 801683a:	e7a1      	b.n	8016780 <__gethex+0x174>
 801683c:	45a8      	cmp	r8, r5
 801683e:	d8e8      	bhi.n	8016812 <__gethex+0x206>
 8016840:	2201      	movs	r2, #1
 8016842:	4628      	mov	r0, r5
 8016844:	9303      	str	r3, [sp, #12]
 8016846:	f7fe ff95 	bl	8015774 <strncmp>
 801684a:	4926      	ldr	r1, [pc, #152]	; (80168e4 <__gethex+0x2d8>)
 801684c:	9b03      	ldr	r3, [sp, #12]
 801684e:	2800      	cmp	r0, #0
 8016850:	d1df      	bne.n	8016812 <__gethex+0x206>
 8016852:	e795      	b.n	8016780 <__gethex+0x174>
 8016854:	f04f 0b03 	mov.w	fp, #3
 8016858:	e7c5      	b.n	80167e6 <__gethex+0x1da>
 801685a:	da0b      	bge.n	8016874 <__gethex+0x268>
 801685c:	eba5 0800 	sub.w	r8, r5, r0
 8016860:	4621      	mov	r1, r4
 8016862:	4642      	mov	r2, r8
 8016864:	4648      	mov	r0, r9
 8016866:	f000 fee7 	bl	8017638 <__lshift>
 801686a:	eba6 0608 	sub.w	r6, r6, r8
 801686e:	4604      	mov	r4, r0
 8016870:	f100 0a14 	add.w	sl, r0, #20
 8016874:	f04f 0b00 	mov.w	fp, #0
 8016878:	e7ba      	b.n	80167f0 <__gethex+0x1e4>
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	42b3      	cmp	r3, r6
 801687e:	dd73      	ble.n	8016968 <__gethex+0x35c>
 8016880:	1b9e      	subs	r6, r3, r6
 8016882:	42b5      	cmp	r5, r6
 8016884:	dc34      	bgt.n	80168f0 <__gethex+0x2e4>
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	2b02      	cmp	r3, #2
 801688a:	d023      	beq.n	80168d4 <__gethex+0x2c8>
 801688c:	2b03      	cmp	r3, #3
 801688e:	d025      	beq.n	80168dc <__gethex+0x2d0>
 8016890:	2b01      	cmp	r3, #1
 8016892:	d115      	bne.n	80168c0 <__gethex+0x2b4>
 8016894:	42b5      	cmp	r5, r6
 8016896:	d113      	bne.n	80168c0 <__gethex+0x2b4>
 8016898:	2d01      	cmp	r5, #1
 801689a:	d10b      	bne.n	80168b4 <__gethex+0x2a8>
 801689c:	9a02      	ldr	r2, [sp, #8]
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	6013      	str	r3, [r2, #0]
 80168a2:	2301      	movs	r3, #1
 80168a4:	6123      	str	r3, [r4, #16]
 80168a6:	f8ca 3000 	str.w	r3, [sl]
 80168aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80168ac:	f04f 0862 	mov.w	r8, #98	; 0x62
 80168b0:	601c      	str	r4, [r3, #0]
 80168b2:	e735      	b.n	8016720 <__gethex+0x114>
 80168b4:	1e69      	subs	r1, r5, #1
 80168b6:	4620      	mov	r0, r4
 80168b8:	f001 f8f0 	bl	8017a9c <__any_on>
 80168bc:	2800      	cmp	r0, #0
 80168be:	d1ed      	bne.n	801689c <__gethex+0x290>
 80168c0:	4621      	mov	r1, r4
 80168c2:	4648      	mov	r0, r9
 80168c4:	f000 fc9e 	bl	8017204 <_Bfree>
 80168c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80168ca:	2300      	movs	r3, #0
 80168cc:	6013      	str	r3, [r2, #0]
 80168ce:	f04f 0850 	mov.w	r8, #80	; 0x50
 80168d2:	e725      	b.n	8016720 <__gethex+0x114>
 80168d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d1f2      	bne.n	80168c0 <__gethex+0x2b4>
 80168da:	e7df      	b.n	801689c <__gethex+0x290>
 80168dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d1dc      	bne.n	801689c <__gethex+0x290>
 80168e2:	e7ed      	b.n	80168c0 <__gethex+0x2b4>
 80168e4:	0801adc9 	.word	0x0801adc9
 80168e8:	0801afa5 	.word	0x0801afa5
 80168ec:	0801afb6 	.word	0x0801afb6
 80168f0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80168f4:	f1bb 0f00 	cmp.w	fp, #0
 80168f8:	d133      	bne.n	8016962 <__gethex+0x356>
 80168fa:	f1b8 0f00 	cmp.w	r8, #0
 80168fe:	d004      	beq.n	801690a <__gethex+0x2fe>
 8016900:	4641      	mov	r1, r8
 8016902:	4620      	mov	r0, r4
 8016904:	f001 f8ca 	bl	8017a9c <__any_on>
 8016908:	4683      	mov	fp, r0
 801690a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801690e:	2301      	movs	r3, #1
 8016910:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016914:	f008 081f 	and.w	r8, r8, #31
 8016918:	fa03 f308 	lsl.w	r3, r3, r8
 801691c:	4213      	tst	r3, r2
 801691e:	4631      	mov	r1, r6
 8016920:	4620      	mov	r0, r4
 8016922:	bf18      	it	ne
 8016924:	f04b 0b02 	orrne.w	fp, fp, #2
 8016928:	1bad      	subs	r5, r5, r6
 801692a:	f7ff fe07 	bl	801653c <rshift>
 801692e:	687e      	ldr	r6, [r7, #4]
 8016930:	f04f 0802 	mov.w	r8, #2
 8016934:	f1bb 0f00 	cmp.w	fp, #0
 8016938:	d04a      	beq.n	80169d0 <__gethex+0x3c4>
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	2b02      	cmp	r3, #2
 801693e:	d016      	beq.n	801696e <__gethex+0x362>
 8016940:	2b03      	cmp	r3, #3
 8016942:	d018      	beq.n	8016976 <__gethex+0x36a>
 8016944:	2b01      	cmp	r3, #1
 8016946:	d109      	bne.n	801695c <__gethex+0x350>
 8016948:	f01b 0f02 	tst.w	fp, #2
 801694c:	d006      	beq.n	801695c <__gethex+0x350>
 801694e:	f8da 3000 	ldr.w	r3, [sl]
 8016952:	ea4b 0b03 	orr.w	fp, fp, r3
 8016956:	f01b 0f01 	tst.w	fp, #1
 801695a:	d10f      	bne.n	801697c <__gethex+0x370>
 801695c:	f048 0810 	orr.w	r8, r8, #16
 8016960:	e036      	b.n	80169d0 <__gethex+0x3c4>
 8016962:	f04f 0b01 	mov.w	fp, #1
 8016966:	e7d0      	b.n	801690a <__gethex+0x2fe>
 8016968:	f04f 0801 	mov.w	r8, #1
 801696c:	e7e2      	b.n	8016934 <__gethex+0x328>
 801696e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016970:	f1c3 0301 	rsb	r3, r3, #1
 8016974:	930f      	str	r3, [sp, #60]	; 0x3c
 8016976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016978:	2b00      	cmp	r3, #0
 801697a:	d0ef      	beq.n	801695c <__gethex+0x350>
 801697c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016980:	f104 0214 	add.w	r2, r4, #20
 8016984:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8016988:	9301      	str	r3, [sp, #4]
 801698a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801698e:	2300      	movs	r3, #0
 8016990:	4694      	mov	ip, r2
 8016992:	f852 1b04 	ldr.w	r1, [r2], #4
 8016996:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801699a:	d01e      	beq.n	80169da <__gethex+0x3ce>
 801699c:	3101      	adds	r1, #1
 801699e:	f8cc 1000 	str.w	r1, [ip]
 80169a2:	f1b8 0f02 	cmp.w	r8, #2
 80169a6:	f104 0214 	add.w	r2, r4, #20
 80169aa:	d13d      	bne.n	8016a28 <__gethex+0x41c>
 80169ac:	683b      	ldr	r3, [r7, #0]
 80169ae:	3b01      	subs	r3, #1
 80169b0:	42ab      	cmp	r3, r5
 80169b2:	d10b      	bne.n	80169cc <__gethex+0x3c0>
 80169b4:	1169      	asrs	r1, r5, #5
 80169b6:	2301      	movs	r3, #1
 80169b8:	f005 051f 	and.w	r5, r5, #31
 80169bc:	fa03 f505 	lsl.w	r5, r3, r5
 80169c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80169c4:	421d      	tst	r5, r3
 80169c6:	bf18      	it	ne
 80169c8:	f04f 0801 	movne.w	r8, #1
 80169cc:	f048 0820 	orr.w	r8, r8, #32
 80169d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80169d2:	601c      	str	r4, [r3, #0]
 80169d4:	9b02      	ldr	r3, [sp, #8]
 80169d6:	601e      	str	r6, [r3, #0]
 80169d8:	e6a2      	b.n	8016720 <__gethex+0x114>
 80169da:	4290      	cmp	r0, r2
 80169dc:	f842 3c04 	str.w	r3, [r2, #-4]
 80169e0:	d8d6      	bhi.n	8016990 <__gethex+0x384>
 80169e2:	68a2      	ldr	r2, [r4, #8]
 80169e4:	4593      	cmp	fp, r2
 80169e6:	db17      	blt.n	8016a18 <__gethex+0x40c>
 80169e8:	6861      	ldr	r1, [r4, #4]
 80169ea:	4648      	mov	r0, r9
 80169ec:	3101      	adds	r1, #1
 80169ee:	f000 fbc9 	bl	8017184 <_Balloc>
 80169f2:	4682      	mov	sl, r0
 80169f4:	b918      	cbnz	r0, 80169fe <__gethex+0x3f2>
 80169f6:	4b1b      	ldr	r3, [pc, #108]	; (8016a64 <__gethex+0x458>)
 80169f8:	4602      	mov	r2, r0
 80169fa:	2184      	movs	r1, #132	; 0x84
 80169fc:	e6b3      	b.n	8016766 <__gethex+0x15a>
 80169fe:	6922      	ldr	r2, [r4, #16]
 8016a00:	3202      	adds	r2, #2
 8016a02:	f104 010c 	add.w	r1, r4, #12
 8016a06:	0092      	lsls	r2, r2, #2
 8016a08:	300c      	adds	r0, #12
 8016a0a:	f7fe fefd 	bl	8015808 <memcpy>
 8016a0e:	4621      	mov	r1, r4
 8016a10:	4648      	mov	r0, r9
 8016a12:	f000 fbf7 	bl	8017204 <_Bfree>
 8016a16:	4654      	mov	r4, sl
 8016a18:	6922      	ldr	r2, [r4, #16]
 8016a1a:	1c51      	adds	r1, r2, #1
 8016a1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016a20:	6121      	str	r1, [r4, #16]
 8016a22:	2101      	movs	r1, #1
 8016a24:	6151      	str	r1, [r2, #20]
 8016a26:	e7bc      	b.n	80169a2 <__gethex+0x396>
 8016a28:	6921      	ldr	r1, [r4, #16]
 8016a2a:	4559      	cmp	r1, fp
 8016a2c:	dd0b      	ble.n	8016a46 <__gethex+0x43a>
 8016a2e:	2101      	movs	r1, #1
 8016a30:	4620      	mov	r0, r4
 8016a32:	f7ff fd83 	bl	801653c <rshift>
 8016a36:	68bb      	ldr	r3, [r7, #8]
 8016a38:	3601      	adds	r6, #1
 8016a3a:	42b3      	cmp	r3, r6
 8016a3c:	f6ff aedb 	blt.w	80167f6 <__gethex+0x1ea>
 8016a40:	f04f 0801 	mov.w	r8, #1
 8016a44:	e7c2      	b.n	80169cc <__gethex+0x3c0>
 8016a46:	f015 051f 	ands.w	r5, r5, #31
 8016a4a:	d0f9      	beq.n	8016a40 <__gethex+0x434>
 8016a4c:	9b01      	ldr	r3, [sp, #4]
 8016a4e:	441a      	add	r2, r3
 8016a50:	f1c5 0520 	rsb	r5, r5, #32
 8016a54:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8016a58:	f000 fc86 	bl	8017368 <__hi0bits>
 8016a5c:	42a8      	cmp	r0, r5
 8016a5e:	dbe6      	blt.n	8016a2e <__gethex+0x422>
 8016a60:	e7ee      	b.n	8016a40 <__gethex+0x434>
 8016a62:	bf00      	nop
 8016a64:	0801afa5 	.word	0x0801afa5

08016a68 <L_shift>:
 8016a68:	f1c2 0208 	rsb	r2, r2, #8
 8016a6c:	0092      	lsls	r2, r2, #2
 8016a6e:	b570      	push	{r4, r5, r6, lr}
 8016a70:	f1c2 0620 	rsb	r6, r2, #32
 8016a74:	6843      	ldr	r3, [r0, #4]
 8016a76:	6804      	ldr	r4, [r0, #0]
 8016a78:	fa03 f506 	lsl.w	r5, r3, r6
 8016a7c:	432c      	orrs	r4, r5
 8016a7e:	40d3      	lsrs	r3, r2
 8016a80:	6004      	str	r4, [r0, #0]
 8016a82:	f840 3f04 	str.w	r3, [r0, #4]!
 8016a86:	4288      	cmp	r0, r1
 8016a88:	d3f4      	bcc.n	8016a74 <L_shift+0xc>
 8016a8a:	bd70      	pop	{r4, r5, r6, pc}

08016a8c <__match>:
 8016a8c:	b530      	push	{r4, r5, lr}
 8016a8e:	6803      	ldr	r3, [r0, #0]
 8016a90:	3301      	adds	r3, #1
 8016a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a96:	b914      	cbnz	r4, 8016a9e <__match+0x12>
 8016a98:	6003      	str	r3, [r0, #0]
 8016a9a:	2001      	movs	r0, #1
 8016a9c:	bd30      	pop	{r4, r5, pc}
 8016a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016aa2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016aa6:	2d19      	cmp	r5, #25
 8016aa8:	bf98      	it	ls
 8016aaa:	3220      	addls	r2, #32
 8016aac:	42a2      	cmp	r2, r4
 8016aae:	d0f0      	beq.n	8016a92 <__match+0x6>
 8016ab0:	2000      	movs	r0, #0
 8016ab2:	e7f3      	b.n	8016a9c <__match+0x10>

08016ab4 <__hexnan>:
 8016ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab8:	680b      	ldr	r3, [r1, #0]
 8016aba:	6801      	ldr	r1, [r0, #0]
 8016abc:	115e      	asrs	r6, r3, #5
 8016abe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016ac2:	f013 031f 	ands.w	r3, r3, #31
 8016ac6:	b087      	sub	sp, #28
 8016ac8:	bf18      	it	ne
 8016aca:	3604      	addne	r6, #4
 8016acc:	2500      	movs	r5, #0
 8016ace:	1f37      	subs	r7, r6, #4
 8016ad0:	4682      	mov	sl, r0
 8016ad2:	4690      	mov	r8, r2
 8016ad4:	9301      	str	r3, [sp, #4]
 8016ad6:	f846 5c04 	str.w	r5, [r6, #-4]
 8016ada:	46b9      	mov	r9, r7
 8016adc:	463c      	mov	r4, r7
 8016ade:	9502      	str	r5, [sp, #8]
 8016ae0:	46ab      	mov	fp, r5
 8016ae2:	784a      	ldrb	r2, [r1, #1]
 8016ae4:	1c4b      	adds	r3, r1, #1
 8016ae6:	9303      	str	r3, [sp, #12]
 8016ae8:	b342      	cbz	r2, 8016b3c <__hexnan+0x88>
 8016aea:	4610      	mov	r0, r2
 8016aec:	9105      	str	r1, [sp, #20]
 8016aee:	9204      	str	r2, [sp, #16]
 8016af0:	f7ff fd76 	bl	80165e0 <__hexdig_fun>
 8016af4:	2800      	cmp	r0, #0
 8016af6:	d14f      	bne.n	8016b98 <__hexnan+0xe4>
 8016af8:	9a04      	ldr	r2, [sp, #16]
 8016afa:	9905      	ldr	r1, [sp, #20]
 8016afc:	2a20      	cmp	r2, #32
 8016afe:	d818      	bhi.n	8016b32 <__hexnan+0x7e>
 8016b00:	9b02      	ldr	r3, [sp, #8]
 8016b02:	459b      	cmp	fp, r3
 8016b04:	dd13      	ble.n	8016b2e <__hexnan+0x7a>
 8016b06:	454c      	cmp	r4, r9
 8016b08:	d206      	bcs.n	8016b18 <__hexnan+0x64>
 8016b0a:	2d07      	cmp	r5, #7
 8016b0c:	dc04      	bgt.n	8016b18 <__hexnan+0x64>
 8016b0e:	462a      	mov	r2, r5
 8016b10:	4649      	mov	r1, r9
 8016b12:	4620      	mov	r0, r4
 8016b14:	f7ff ffa8 	bl	8016a68 <L_shift>
 8016b18:	4544      	cmp	r4, r8
 8016b1a:	d950      	bls.n	8016bbe <__hexnan+0x10a>
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	f1a4 0904 	sub.w	r9, r4, #4
 8016b22:	f844 3c04 	str.w	r3, [r4, #-4]
 8016b26:	f8cd b008 	str.w	fp, [sp, #8]
 8016b2a:	464c      	mov	r4, r9
 8016b2c:	461d      	mov	r5, r3
 8016b2e:	9903      	ldr	r1, [sp, #12]
 8016b30:	e7d7      	b.n	8016ae2 <__hexnan+0x2e>
 8016b32:	2a29      	cmp	r2, #41	; 0x29
 8016b34:	d155      	bne.n	8016be2 <__hexnan+0x12e>
 8016b36:	3102      	adds	r1, #2
 8016b38:	f8ca 1000 	str.w	r1, [sl]
 8016b3c:	f1bb 0f00 	cmp.w	fp, #0
 8016b40:	d04f      	beq.n	8016be2 <__hexnan+0x12e>
 8016b42:	454c      	cmp	r4, r9
 8016b44:	d206      	bcs.n	8016b54 <__hexnan+0xa0>
 8016b46:	2d07      	cmp	r5, #7
 8016b48:	dc04      	bgt.n	8016b54 <__hexnan+0xa0>
 8016b4a:	462a      	mov	r2, r5
 8016b4c:	4649      	mov	r1, r9
 8016b4e:	4620      	mov	r0, r4
 8016b50:	f7ff ff8a 	bl	8016a68 <L_shift>
 8016b54:	4544      	cmp	r4, r8
 8016b56:	d934      	bls.n	8016bc2 <__hexnan+0x10e>
 8016b58:	f1a8 0204 	sub.w	r2, r8, #4
 8016b5c:	4623      	mov	r3, r4
 8016b5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8016b62:	f842 1f04 	str.w	r1, [r2, #4]!
 8016b66:	429f      	cmp	r7, r3
 8016b68:	d2f9      	bcs.n	8016b5e <__hexnan+0xaa>
 8016b6a:	1b3b      	subs	r3, r7, r4
 8016b6c:	f023 0303 	bic.w	r3, r3, #3
 8016b70:	3304      	adds	r3, #4
 8016b72:	3e03      	subs	r6, #3
 8016b74:	3401      	adds	r4, #1
 8016b76:	42a6      	cmp	r6, r4
 8016b78:	bf38      	it	cc
 8016b7a:	2304      	movcc	r3, #4
 8016b7c:	4443      	add	r3, r8
 8016b7e:	2200      	movs	r2, #0
 8016b80:	f843 2b04 	str.w	r2, [r3], #4
 8016b84:	429f      	cmp	r7, r3
 8016b86:	d2fb      	bcs.n	8016b80 <__hexnan+0xcc>
 8016b88:	683b      	ldr	r3, [r7, #0]
 8016b8a:	b91b      	cbnz	r3, 8016b94 <__hexnan+0xe0>
 8016b8c:	4547      	cmp	r7, r8
 8016b8e:	d126      	bne.n	8016bde <__hexnan+0x12a>
 8016b90:	2301      	movs	r3, #1
 8016b92:	603b      	str	r3, [r7, #0]
 8016b94:	2005      	movs	r0, #5
 8016b96:	e025      	b.n	8016be4 <__hexnan+0x130>
 8016b98:	3501      	adds	r5, #1
 8016b9a:	2d08      	cmp	r5, #8
 8016b9c:	f10b 0b01 	add.w	fp, fp, #1
 8016ba0:	dd06      	ble.n	8016bb0 <__hexnan+0xfc>
 8016ba2:	4544      	cmp	r4, r8
 8016ba4:	d9c3      	bls.n	8016b2e <__hexnan+0x7a>
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	f844 3c04 	str.w	r3, [r4, #-4]
 8016bac:	2501      	movs	r5, #1
 8016bae:	3c04      	subs	r4, #4
 8016bb0:	6822      	ldr	r2, [r4, #0]
 8016bb2:	f000 000f 	and.w	r0, r0, #15
 8016bb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016bba:	6020      	str	r0, [r4, #0]
 8016bbc:	e7b7      	b.n	8016b2e <__hexnan+0x7a>
 8016bbe:	2508      	movs	r5, #8
 8016bc0:	e7b5      	b.n	8016b2e <__hexnan+0x7a>
 8016bc2:	9b01      	ldr	r3, [sp, #4]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d0df      	beq.n	8016b88 <__hexnan+0xd4>
 8016bc8:	f1c3 0320 	rsb	r3, r3, #32
 8016bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016bd0:	40da      	lsrs	r2, r3
 8016bd2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016bd6:	4013      	ands	r3, r2
 8016bd8:	f846 3c04 	str.w	r3, [r6, #-4]
 8016bdc:	e7d4      	b.n	8016b88 <__hexnan+0xd4>
 8016bde:	3f04      	subs	r7, #4
 8016be0:	e7d2      	b.n	8016b88 <__hexnan+0xd4>
 8016be2:	2004      	movs	r0, #4
 8016be4:	b007      	add	sp, #28
 8016be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016bea <__ssputs_r>:
 8016bea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bee:	688e      	ldr	r6, [r1, #8]
 8016bf0:	461f      	mov	r7, r3
 8016bf2:	42be      	cmp	r6, r7
 8016bf4:	680b      	ldr	r3, [r1, #0]
 8016bf6:	4682      	mov	sl, r0
 8016bf8:	460c      	mov	r4, r1
 8016bfa:	4690      	mov	r8, r2
 8016bfc:	d82c      	bhi.n	8016c58 <__ssputs_r+0x6e>
 8016bfe:	898a      	ldrh	r2, [r1, #12]
 8016c00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016c04:	d026      	beq.n	8016c54 <__ssputs_r+0x6a>
 8016c06:	6965      	ldr	r5, [r4, #20]
 8016c08:	6909      	ldr	r1, [r1, #16]
 8016c0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c0e:	eba3 0901 	sub.w	r9, r3, r1
 8016c12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016c16:	1c7b      	adds	r3, r7, #1
 8016c18:	444b      	add	r3, r9
 8016c1a:	106d      	asrs	r5, r5, #1
 8016c1c:	429d      	cmp	r5, r3
 8016c1e:	bf38      	it	cc
 8016c20:	461d      	movcc	r5, r3
 8016c22:	0553      	lsls	r3, r2, #21
 8016c24:	d527      	bpl.n	8016c76 <__ssputs_r+0x8c>
 8016c26:	4629      	mov	r1, r5
 8016c28:	f000 f960 	bl	8016eec <_malloc_r>
 8016c2c:	4606      	mov	r6, r0
 8016c2e:	b360      	cbz	r0, 8016c8a <__ssputs_r+0xa0>
 8016c30:	6921      	ldr	r1, [r4, #16]
 8016c32:	464a      	mov	r2, r9
 8016c34:	f7fe fde8 	bl	8015808 <memcpy>
 8016c38:	89a3      	ldrh	r3, [r4, #12]
 8016c3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c42:	81a3      	strh	r3, [r4, #12]
 8016c44:	6126      	str	r6, [r4, #16]
 8016c46:	6165      	str	r5, [r4, #20]
 8016c48:	444e      	add	r6, r9
 8016c4a:	eba5 0509 	sub.w	r5, r5, r9
 8016c4e:	6026      	str	r6, [r4, #0]
 8016c50:	60a5      	str	r5, [r4, #8]
 8016c52:	463e      	mov	r6, r7
 8016c54:	42be      	cmp	r6, r7
 8016c56:	d900      	bls.n	8016c5a <__ssputs_r+0x70>
 8016c58:	463e      	mov	r6, r7
 8016c5a:	6820      	ldr	r0, [r4, #0]
 8016c5c:	4632      	mov	r2, r6
 8016c5e:	4641      	mov	r1, r8
 8016c60:	f000 ffbc 	bl	8017bdc <memmove>
 8016c64:	68a3      	ldr	r3, [r4, #8]
 8016c66:	1b9b      	subs	r3, r3, r6
 8016c68:	60a3      	str	r3, [r4, #8]
 8016c6a:	6823      	ldr	r3, [r4, #0]
 8016c6c:	4433      	add	r3, r6
 8016c6e:	6023      	str	r3, [r4, #0]
 8016c70:	2000      	movs	r0, #0
 8016c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c76:	462a      	mov	r2, r5
 8016c78:	f000 ff74 	bl	8017b64 <_realloc_r>
 8016c7c:	4606      	mov	r6, r0
 8016c7e:	2800      	cmp	r0, #0
 8016c80:	d1e0      	bne.n	8016c44 <__ssputs_r+0x5a>
 8016c82:	6921      	ldr	r1, [r4, #16]
 8016c84:	4650      	mov	r0, sl
 8016c86:	f001 f84d 	bl	8017d24 <_free_r>
 8016c8a:	230c      	movs	r3, #12
 8016c8c:	f8ca 3000 	str.w	r3, [sl]
 8016c90:	89a3      	ldrh	r3, [r4, #12]
 8016c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c96:	81a3      	strh	r3, [r4, #12]
 8016c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c9c:	e7e9      	b.n	8016c72 <__ssputs_r+0x88>
	...

08016ca0 <_svfiprintf_r>:
 8016ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca4:	4698      	mov	r8, r3
 8016ca6:	898b      	ldrh	r3, [r1, #12]
 8016ca8:	061b      	lsls	r3, r3, #24
 8016caa:	b09d      	sub	sp, #116	; 0x74
 8016cac:	4607      	mov	r7, r0
 8016cae:	460d      	mov	r5, r1
 8016cb0:	4614      	mov	r4, r2
 8016cb2:	d50e      	bpl.n	8016cd2 <_svfiprintf_r+0x32>
 8016cb4:	690b      	ldr	r3, [r1, #16]
 8016cb6:	b963      	cbnz	r3, 8016cd2 <_svfiprintf_r+0x32>
 8016cb8:	2140      	movs	r1, #64	; 0x40
 8016cba:	f000 f917 	bl	8016eec <_malloc_r>
 8016cbe:	6028      	str	r0, [r5, #0]
 8016cc0:	6128      	str	r0, [r5, #16]
 8016cc2:	b920      	cbnz	r0, 8016cce <_svfiprintf_r+0x2e>
 8016cc4:	230c      	movs	r3, #12
 8016cc6:	603b      	str	r3, [r7, #0]
 8016cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ccc:	e0d0      	b.n	8016e70 <_svfiprintf_r+0x1d0>
 8016cce:	2340      	movs	r3, #64	; 0x40
 8016cd0:	616b      	str	r3, [r5, #20]
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8016cd6:	2320      	movs	r3, #32
 8016cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8016ce0:	2330      	movs	r3, #48	; 0x30
 8016ce2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016e88 <_svfiprintf_r+0x1e8>
 8016ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016cea:	f04f 0901 	mov.w	r9, #1
 8016cee:	4623      	mov	r3, r4
 8016cf0:	469a      	mov	sl, r3
 8016cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016cf6:	b10a      	cbz	r2, 8016cfc <_svfiprintf_r+0x5c>
 8016cf8:	2a25      	cmp	r2, #37	; 0x25
 8016cfa:	d1f9      	bne.n	8016cf0 <_svfiprintf_r+0x50>
 8016cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8016d00:	d00b      	beq.n	8016d1a <_svfiprintf_r+0x7a>
 8016d02:	465b      	mov	r3, fp
 8016d04:	4622      	mov	r2, r4
 8016d06:	4629      	mov	r1, r5
 8016d08:	4638      	mov	r0, r7
 8016d0a:	f7ff ff6e 	bl	8016bea <__ssputs_r>
 8016d0e:	3001      	adds	r0, #1
 8016d10:	f000 80a9 	beq.w	8016e66 <_svfiprintf_r+0x1c6>
 8016d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d16:	445a      	add	r2, fp
 8016d18:	9209      	str	r2, [sp, #36]	; 0x24
 8016d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	f000 80a1 	beq.w	8016e66 <_svfiprintf_r+0x1c6>
 8016d24:	2300      	movs	r3, #0
 8016d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d2e:	f10a 0a01 	add.w	sl, sl, #1
 8016d32:	9304      	str	r3, [sp, #16]
 8016d34:	9307      	str	r3, [sp, #28]
 8016d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8016d3c:	4654      	mov	r4, sl
 8016d3e:	2205      	movs	r2, #5
 8016d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d44:	4850      	ldr	r0, [pc, #320]	; (8016e88 <_svfiprintf_r+0x1e8>)
 8016d46:	f7e9 fa43 	bl	80001d0 <memchr>
 8016d4a:	9a04      	ldr	r2, [sp, #16]
 8016d4c:	b9d8      	cbnz	r0, 8016d86 <_svfiprintf_r+0xe6>
 8016d4e:	06d0      	lsls	r0, r2, #27
 8016d50:	bf44      	itt	mi
 8016d52:	2320      	movmi	r3, #32
 8016d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d58:	0711      	lsls	r1, r2, #28
 8016d5a:	bf44      	itt	mi
 8016d5c:	232b      	movmi	r3, #43	; 0x2b
 8016d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d62:	f89a 3000 	ldrb.w	r3, [sl]
 8016d66:	2b2a      	cmp	r3, #42	; 0x2a
 8016d68:	d015      	beq.n	8016d96 <_svfiprintf_r+0xf6>
 8016d6a:	9a07      	ldr	r2, [sp, #28]
 8016d6c:	4654      	mov	r4, sl
 8016d6e:	2000      	movs	r0, #0
 8016d70:	f04f 0c0a 	mov.w	ip, #10
 8016d74:	4621      	mov	r1, r4
 8016d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d7a:	3b30      	subs	r3, #48	; 0x30
 8016d7c:	2b09      	cmp	r3, #9
 8016d7e:	d94d      	bls.n	8016e1c <_svfiprintf_r+0x17c>
 8016d80:	b1b0      	cbz	r0, 8016db0 <_svfiprintf_r+0x110>
 8016d82:	9207      	str	r2, [sp, #28]
 8016d84:	e014      	b.n	8016db0 <_svfiprintf_r+0x110>
 8016d86:	eba0 0308 	sub.w	r3, r0, r8
 8016d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8016d8e:	4313      	orrs	r3, r2
 8016d90:	9304      	str	r3, [sp, #16]
 8016d92:	46a2      	mov	sl, r4
 8016d94:	e7d2      	b.n	8016d3c <_svfiprintf_r+0x9c>
 8016d96:	9b03      	ldr	r3, [sp, #12]
 8016d98:	1d19      	adds	r1, r3, #4
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	9103      	str	r1, [sp, #12]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	bfbb      	ittet	lt
 8016da2:	425b      	neglt	r3, r3
 8016da4:	f042 0202 	orrlt.w	r2, r2, #2
 8016da8:	9307      	strge	r3, [sp, #28]
 8016daa:	9307      	strlt	r3, [sp, #28]
 8016dac:	bfb8      	it	lt
 8016dae:	9204      	strlt	r2, [sp, #16]
 8016db0:	7823      	ldrb	r3, [r4, #0]
 8016db2:	2b2e      	cmp	r3, #46	; 0x2e
 8016db4:	d10c      	bne.n	8016dd0 <_svfiprintf_r+0x130>
 8016db6:	7863      	ldrb	r3, [r4, #1]
 8016db8:	2b2a      	cmp	r3, #42	; 0x2a
 8016dba:	d134      	bne.n	8016e26 <_svfiprintf_r+0x186>
 8016dbc:	9b03      	ldr	r3, [sp, #12]
 8016dbe:	1d1a      	adds	r2, r3, #4
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	9203      	str	r2, [sp, #12]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	bfb8      	it	lt
 8016dc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016dcc:	3402      	adds	r4, #2
 8016dce:	9305      	str	r3, [sp, #20]
 8016dd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016e98 <_svfiprintf_r+0x1f8>
 8016dd4:	7821      	ldrb	r1, [r4, #0]
 8016dd6:	2203      	movs	r2, #3
 8016dd8:	4650      	mov	r0, sl
 8016dda:	f7e9 f9f9 	bl	80001d0 <memchr>
 8016dde:	b138      	cbz	r0, 8016df0 <_svfiprintf_r+0x150>
 8016de0:	9b04      	ldr	r3, [sp, #16]
 8016de2:	eba0 000a 	sub.w	r0, r0, sl
 8016de6:	2240      	movs	r2, #64	; 0x40
 8016de8:	4082      	lsls	r2, r0
 8016dea:	4313      	orrs	r3, r2
 8016dec:	3401      	adds	r4, #1
 8016dee:	9304      	str	r3, [sp, #16]
 8016df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016df4:	4825      	ldr	r0, [pc, #148]	; (8016e8c <_svfiprintf_r+0x1ec>)
 8016df6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016dfa:	2206      	movs	r2, #6
 8016dfc:	f7e9 f9e8 	bl	80001d0 <memchr>
 8016e00:	2800      	cmp	r0, #0
 8016e02:	d038      	beq.n	8016e76 <_svfiprintf_r+0x1d6>
 8016e04:	4b22      	ldr	r3, [pc, #136]	; (8016e90 <_svfiprintf_r+0x1f0>)
 8016e06:	bb1b      	cbnz	r3, 8016e50 <_svfiprintf_r+0x1b0>
 8016e08:	9b03      	ldr	r3, [sp, #12]
 8016e0a:	3307      	adds	r3, #7
 8016e0c:	f023 0307 	bic.w	r3, r3, #7
 8016e10:	3308      	adds	r3, #8
 8016e12:	9303      	str	r3, [sp, #12]
 8016e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e16:	4433      	add	r3, r6
 8016e18:	9309      	str	r3, [sp, #36]	; 0x24
 8016e1a:	e768      	b.n	8016cee <_svfiprintf_r+0x4e>
 8016e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e20:	460c      	mov	r4, r1
 8016e22:	2001      	movs	r0, #1
 8016e24:	e7a6      	b.n	8016d74 <_svfiprintf_r+0xd4>
 8016e26:	2300      	movs	r3, #0
 8016e28:	3401      	adds	r4, #1
 8016e2a:	9305      	str	r3, [sp, #20]
 8016e2c:	4619      	mov	r1, r3
 8016e2e:	f04f 0c0a 	mov.w	ip, #10
 8016e32:	4620      	mov	r0, r4
 8016e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e38:	3a30      	subs	r2, #48	; 0x30
 8016e3a:	2a09      	cmp	r2, #9
 8016e3c:	d903      	bls.n	8016e46 <_svfiprintf_r+0x1a6>
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d0c6      	beq.n	8016dd0 <_svfiprintf_r+0x130>
 8016e42:	9105      	str	r1, [sp, #20]
 8016e44:	e7c4      	b.n	8016dd0 <_svfiprintf_r+0x130>
 8016e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e4a:	4604      	mov	r4, r0
 8016e4c:	2301      	movs	r3, #1
 8016e4e:	e7f0      	b.n	8016e32 <_svfiprintf_r+0x192>
 8016e50:	ab03      	add	r3, sp, #12
 8016e52:	9300      	str	r3, [sp, #0]
 8016e54:	462a      	mov	r2, r5
 8016e56:	4b0f      	ldr	r3, [pc, #60]	; (8016e94 <_svfiprintf_r+0x1f4>)
 8016e58:	a904      	add	r1, sp, #16
 8016e5a:	4638      	mov	r0, r7
 8016e5c:	f7fc ff44 	bl	8013ce8 <_printf_float>
 8016e60:	1c42      	adds	r2, r0, #1
 8016e62:	4606      	mov	r6, r0
 8016e64:	d1d6      	bne.n	8016e14 <_svfiprintf_r+0x174>
 8016e66:	89ab      	ldrh	r3, [r5, #12]
 8016e68:	065b      	lsls	r3, r3, #25
 8016e6a:	f53f af2d 	bmi.w	8016cc8 <_svfiprintf_r+0x28>
 8016e6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e70:	b01d      	add	sp, #116	; 0x74
 8016e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e76:	ab03      	add	r3, sp, #12
 8016e78:	9300      	str	r3, [sp, #0]
 8016e7a:	462a      	mov	r2, r5
 8016e7c:	4b05      	ldr	r3, [pc, #20]	; (8016e94 <_svfiprintf_r+0x1f4>)
 8016e7e:	a904      	add	r1, sp, #16
 8016e80:	4638      	mov	r0, r7
 8016e82:	f7fd f9d5 	bl	8014230 <_printf_i>
 8016e86:	e7eb      	b.n	8016e60 <_svfiprintf_r+0x1c0>
 8016e88:	0801b016 	.word	0x0801b016
 8016e8c:	0801b020 	.word	0x0801b020
 8016e90:	08013ce9 	.word	0x08013ce9
 8016e94:	08016beb 	.word	0x08016beb
 8016e98:	0801b01c 	.word	0x0801b01c

08016e9c <malloc>:
 8016e9c:	4b02      	ldr	r3, [pc, #8]	; (8016ea8 <malloc+0xc>)
 8016e9e:	4601      	mov	r1, r0
 8016ea0:	6818      	ldr	r0, [r3, #0]
 8016ea2:	f000 b823 	b.w	8016eec <_malloc_r>
 8016ea6:	bf00      	nop
 8016ea8:	200001ec 	.word	0x200001ec

08016eac <sbrk_aligned>:
 8016eac:	b570      	push	{r4, r5, r6, lr}
 8016eae:	4e0e      	ldr	r6, [pc, #56]	; (8016ee8 <sbrk_aligned+0x3c>)
 8016eb0:	460c      	mov	r4, r1
 8016eb2:	6831      	ldr	r1, [r6, #0]
 8016eb4:	4605      	mov	r5, r0
 8016eb6:	b911      	cbnz	r1, 8016ebe <sbrk_aligned+0x12>
 8016eb8:	f000 fede 	bl	8017c78 <_sbrk_r>
 8016ebc:	6030      	str	r0, [r6, #0]
 8016ebe:	4621      	mov	r1, r4
 8016ec0:	4628      	mov	r0, r5
 8016ec2:	f000 fed9 	bl	8017c78 <_sbrk_r>
 8016ec6:	1c43      	adds	r3, r0, #1
 8016ec8:	d00a      	beq.n	8016ee0 <sbrk_aligned+0x34>
 8016eca:	1cc4      	adds	r4, r0, #3
 8016ecc:	f024 0403 	bic.w	r4, r4, #3
 8016ed0:	42a0      	cmp	r0, r4
 8016ed2:	d007      	beq.n	8016ee4 <sbrk_aligned+0x38>
 8016ed4:	1a21      	subs	r1, r4, r0
 8016ed6:	4628      	mov	r0, r5
 8016ed8:	f000 fece 	bl	8017c78 <_sbrk_r>
 8016edc:	3001      	adds	r0, #1
 8016ede:	d101      	bne.n	8016ee4 <sbrk_aligned+0x38>
 8016ee0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	bd70      	pop	{r4, r5, r6, pc}
 8016ee8:	2000406c 	.word	0x2000406c

08016eec <_malloc_r>:
 8016eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ef0:	1ccd      	adds	r5, r1, #3
 8016ef2:	f025 0503 	bic.w	r5, r5, #3
 8016ef6:	3508      	adds	r5, #8
 8016ef8:	2d0c      	cmp	r5, #12
 8016efa:	bf38      	it	cc
 8016efc:	250c      	movcc	r5, #12
 8016efe:	2d00      	cmp	r5, #0
 8016f00:	4607      	mov	r7, r0
 8016f02:	db01      	blt.n	8016f08 <_malloc_r+0x1c>
 8016f04:	42a9      	cmp	r1, r5
 8016f06:	d905      	bls.n	8016f14 <_malloc_r+0x28>
 8016f08:	230c      	movs	r3, #12
 8016f0a:	603b      	str	r3, [r7, #0]
 8016f0c:	2600      	movs	r6, #0
 8016f0e:	4630      	mov	r0, r6
 8016f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016fe8 <_malloc_r+0xfc>
 8016f18:	f000 f928 	bl	801716c <__malloc_lock>
 8016f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8016f20:	461c      	mov	r4, r3
 8016f22:	bb5c      	cbnz	r4, 8016f7c <_malloc_r+0x90>
 8016f24:	4629      	mov	r1, r5
 8016f26:	4638      	mov	r0, r7
 8016f28:	f7ff ffc0 	bl	8016eac <sbrk_aligned>
 8016f2c:	1c43      	adds	r3, r0, #1
 8016f2e:	4604      	mov	r4, r0
 8016f30:	d155      	bne.n	8016fde <_malloc_r+0xf2>
 8016f32:	f8d8 4000 	ldr.w	r4, [r8]
 8016f36:	4626      	mov	r6, r4
 8016f38:	2e00      	cmp	r6, #0
 8016f3a:	d145      	bne.n	8016fc8 <_malloc_r+0xdc>
 8016f3c:	2c00      	cmp	r4, #0
 8016f3e:	d048      	beq.n	8016fd2 <_malloc_r+0xe6>
 8016f40:	6823      	ldr	r3, [r4, #0]
 8016f42:	4631      	mov	r1, r6
 8016f44:	4638      	mov	r0, r7
 8016f46:	eb04 0903 	add.w	r9, r4, r3
 8016f4a:	f000 fe95 	bl	8017c78 <_sbrk_r>
 8016f4e:	4581      	cmp	r9, r0
 8016f50:	d13f      	bne.n	8016fd2 <_malloc_r+0xe6>
 8016f52:	6821      	ldr	r1, [r4, #0]
 8016f54:	1a6d      	subs	r5, r5, r1
 8016f56:	4629      	mov	r1, r5
 8016f58:	4638      	mov	r0, r7
 8016f5a:	f7ff ffa7 	bl	8016eac <sbrk_aligned>
 8016f5e:	3001      	adds	r0, #1
 8016f60:	d037      	beq.n	8016fd2 <_malloc_r+0xe6>
 8016f62:	6823      	ldr	r3, [r4, #0]
 8016f64:	442b      	add	r3, r5
 8016f66:	6023      	str	r3, [r4, #0]
 8016f68:	f8d8 3000 	ldr.w	r3, [r8]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d038      	beq.n	8016fe2 <_malloc_r+0xf6>
 8016f70:	685a      	ldr	r2, [r3, #4]
 8016f72:	42a2      	cmp	r2, r4
 8016f74:	d12b      	bne.n	8016fce <_malloc_r+0xe2>
 8016f76:	2200      	movs	r2, #0
 8016f78:	605a      	str	r2, [r3, #4]
 8016f7a:	e00f      	b.n	8016f9c <_malloc_r+0xb0>
 8016f7c:	6822      	ldr	r2, [r4, #0]
 8016f7e:	1b52      	subs	r2, r2, r5
 8016f80:	d41f      	bmi.n	8016fc2 <_malloc_r+0xd6>
 8016f82:	2a0b      	cmp	r2, #11
 8016f84:	d917      	bls.n	8016fb6 <_malloc_r+0xca>
 8016f86:	1961      	adds	r1, r4, r5
 8016f88:	42a3      	cmp	r3, r4
 8016f8a:	6025      	str	r5, [r4, #0]
 8016f8c:	bf18      	it	ne
 8016f8e:	6059      	strne	r1, [r3, #4]
 8016f90:	6863      	ldr	r3, [r4, #4]
 8016f92:	bf08      	it	eq
 8016f94:	f8c8 1000 	streq.w	r1, [r8]
 8016f98:	5162      	str	r2, [r4, r5]
 8016f9a:	604b      	str	r3, [r1, #4]
 8016f9c:	4638      	mov	r0, r7
 8016f9e:	f104 060b 	add.w	r6, r4, #11
 8016fa2:	f000 f8e9 	bl	8017178 <__malloc_unlock>
 8016fa6:	f026 0607 	bic.w	r6, r6, #7
 8016faa:	1d23      	adds	r3, r4, #4
 8016fac:	1af2      	subs	r2, r6, r3
 8016fae:	d0ae      	beq.n	8016f0e <_malloc_r+0x22>
 8016fb0:	1b9b      	subs	r3, r3, r6
 8016fb2:	50a3      	str	r3, [r4, r2]
 8016fb4:	e7ab      	b.n	8016f0e <_malloc_r+0x22>
 8016fb6:	42a3      	cmp	r3, r4
 8016fb8:	6862      	ldr	r2, [r4, #4]
 8016fba:	d1dd      	bne.n	8016f78 <_malloc_r+0x8c>
 8016fbc:	f8c8 2000 	str.w	r2, [r8]
 8016fc0:	e7ec      	b.n	8016f9c <_malloc_r+0xb0>
 8016fc2:	4623      	mov	r3, r4
 8016fc4:	6864      	ldr	r4, [r4, #4]
 8016fc6:	e7ac      	b.n	8016f22 <_malloc_r+0x36>
 8016fc8:	4634      	mov	r4, r6
 8016fca:	6876      	ldr	r6, [r6, #4]
 8016fcc:	e7b4      	b.n	8016f38 <_malloc_r+0x4c>
 8016fce:	4613      	mov	r3, r2
 8016fd0:	e7cc      	b.n	8016f6c <_malloc_r+0x80>
 8016fd2:	230c      	movs	r3, #12
 8016fd4:	603b      	str	r3, [r7, #0]
 8016fd6:	4638      	mov	r0, r7
 8016fd8:	f000 f8ce 	bl	8017178 <__malloc_unlock>
 8016fdc:	e797      	b.n	8016f0e <_malloc_r+0x22>
 8016fde:	6025      	str	r5, [r4, #0]
 8016fe0:	e7dc      	b.n	8016f9c <_malloc_r+0xb0>
 8016fe2:	605b      	str	r3, [r3, #4]
 8016fe4:	deff      	udf	#255	; 0xff
 8016fe6:	bf00      	nop
 8016fe8:	20004068 	.word	0x20004068

08016fec <__ascii_mbtowc>:
 8016fec:	b082      	sub	sp, #8
 8016fee:	b901      	cbnz	r1, 8016ff2 <__ascii_mbtowc+0x6>
 8016ff0:	a901      	add	r1, sp, #4
 8016ff2:	b142      	cbz	r2, 8017006 <__ascii_mbtowc+0x1a>
 8016ff4:	b14b      	cbz	r3, 801700a <__ascii_mbtowc+0x1e>
 8016ff6:	7813      	ldrb	r3, [r2, #0]
 8016ff8:	600b      	str	r3, [r1, #0]
 8016ffa:	7812      	ldrb	r2, [r2, #0]
 8016ffc:	1e10      	subs	r0, r2, #0
 8016ffe:	bf18      	it	ne
 8017000:	2001      	movne	r0, #1
 8017002:	b002      	add	sp, #8
 8017004:	4770      	bx	lr
 8017006:	4610      	mov	r0, r2
 8017008:	e7fb      	b.n	8017002 <__ascii_mbtowc+0x16>
 801700a:	f06f 0001 	mvn.w	r0, #1
 801700e:	e7f8      	b.n	8017002 <__ascii_mbtowc+0x16>

08017010 <__sflush_r>:
 8017010:	898a      	ldrh	r2, [r1, #12]
 8017012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017016:	4605      	mov	r5, r0
 8017018:	0710      	lsls	r0, r2, #28
 801701a:	460c      	mov	r4, r1
 801701c:	d458      	bmi.n	80170d0 <__sflush_r+0xc0>
 801701e:	684b      	ldr	r3, [r1, #4]
 8017020:	2b00      	cmp	r3, #0
 8017022:	dc05      	bgt.n	8017030 <__sflush_r+0x20>
 8017024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017026:	2b00      	cmp	r3, #0
 8017028:	dc02      	bgt.n	8017030 <__sflush_r+0x20>
 801702a:	2000      	movs	r0, #0
 801702c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017032:	2e00      	cmp	r6, #0
 8017034:	d0f9      	beq.n	801702a <__sflush_r+0x1a>
 8017036:	2300      	movs	r3, #0
 8017038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801703c:	682f      	ldr	r7, [r5, #0]
 801703e:	6a21      	ldr	r1, [r4, #32]
 8017040:	602b      	str	r3, [r5, #0]
 8017042:	d032      	beq.n	80170aa <__sflush_r+0x9a>
 8017044:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017046:	89a3      	ldrh	r3, [r4, #12]
 8017048:	075a      	lsls	r2, r3, #29
 801704a:	d505      	bpl.n	8017058 <__sflush_r+0x48>
 801704c:	6863      	ldr	r3, [r4, #4]
 801704e:	1ac0      	subs	r0, r0, r3
 8017050:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017052:	b10b      	cbz	r3, 8017058 <__sflush_r+0x48>
 8017054:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017056:	1ac0      	subs	r0, r0, r3
 8017058:	2300      	movs	r3, #0
 801705a:	4602      	mov	r2, r0
 801705c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801705e:	6a21      	ldr	r1, [r4, #32]
 8017060:	4628      	mov	r0, r5
 8017062:	47b0      	blx	r6
 8017064:	1c43      	adds	r3, r0, #1
 8017066:	89a3      	ldrh	r3, [r4, #12]
 8017068:	d106      	bne.n	8017078 <__sflush_r+0x68>
 801706a:	6829      	ldr	r1, [r5, #0]
 801706c:	291d      	cmp	r1, #29
 801706e:	d82b      	bhi.n	80170c8 <__sflush_r+0xb8>
 8017070:	4a29      	ldr	r2, [pc, #164]	; (8017118 <__sflush_r+0x108>)
 8017072:	410a      	asrs	r2, r1
 8017074:	07d6      	lsls	r6, r2, #31
 8017076:	d427      	bmi.n	80170c8 <__sflush_r+0xb8>
 8017078:	2200      	movs	r2, #0
 801707a:	6062      	str	r2, [r4, #4]
 801707c:	04d9      	lsls	r1, r3, #19
 801707e:	6922      	ldr	r2, [r4, #16]
 8017080:	6022      	str	r2, [r4, #0]
 8017082:	d504      	bpl.n	801708e <__sflush_r+0x7e>
 8017084:	1c42      	adds	r2, r0, #1
 8017086:	d101      	bne.n	801708c <__sflush_r+0x7c>
 8017088:	682b      	ldr	r3, [r5, #0]
 801708a:	b903      	cbnz	r3, 801708e <__sflush_r+0x7e>
 801708c:	6560      	str	r0, [r4, #84]	; 0x54
 801708e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017090:	602f      	str	r7, [r5, #0]
 8017092:	2900      	cmp	r1, #0
 8017094:	d0c9      	beq.n	801702a <__sflush_r+0x1a>
 8017096:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801709a:	4299      	cmp	r1, r3
 801709c:	d002      	beq.n	80170a4 <__sflush_r+0x94>
 801709e:	4628      	mov	r0, r5
 80170a0:	f000 fe40 	bl	8017d24 <_free_r>
 80170a4:	2000      	movs	r0, #0
 80170a6:	6360      	str	r0, [r4, #52]	; 0x34
 80170a8:	e7c0      	b.n	801702c <__sflush_r+0x1c>
 80170aa:	2301      	movs	r3, #1
 80170ac:	4628      	mov	r0, r5
 80170ae:	47b0      	blx	r6
 80170b0:	1c41      	adds	r1, r0, #1
 80170b2:	d1c8      	bne.n	8017046 <__sflush_r+0x36>
 80170b4:	682b      	ldr	r3, [r5, #0]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d0c5      	beq.n	8017046 <__sflush_r+0x36>
 80170ba:	2b1d      	cmp	r3, #29
 80170bc:	d001      	beq.n	80170c2 <__sflush_r+0xb2>
 80170be:	2b16      	cmp	r3, #22
 80170c0:	d101      	bne.n	80170c6 <__sflush_r+0xb6>
 80170c2:	602f      	str	r7, [r5, #0]
 80170c4:	e7b1      	b.n	801702a <__sflush_r+0x1a>
 80170c6:	89a3      	ldrh	r3, [r4, #12]
 80170c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170cc:	81a3      	strh	r3, [r4, #12]
 80170ce:	e7ad      	b.n	801702c <__sflush_r+0x1c>
 80170d0:	690f      	ldr	r7, [r1, #16]
 80170d2:	2f00      	cmp	r7, #0
 80170d4:	d0a9      	beq.n	801702a <__sflush_r+0x1a>
 80170d6:	0793      	lsls	r3, r2, #30
 80170d8:	680e      	ldr	r6, [r1, #0]
 80170da:	bf08      	it	eq
 80170dc:	694b      	ldreq	r3, [r1, #20]
 80170de:	600f      	str	r7, [r1, #0]
 80170e0:	bf18      	it	ne
 80170e2:	2300      	movne	r3, #0
 80170e4:	eba6 0807 	sub.w	r8, r6, r7
 80170e8:	608b      	str	r3, [r1, #8]
 80170ea:	f1b8 0f00 	cmp.w	r8, #0
 80170ee:	dd9c      	ble.n	801702a <__sflush_r+0x1a>
 80170f0:	6a21      	ldr	r1, [r4, #32]
 80170f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80170f4:	4643      	mov	r3, r8
 80170f6:	463a      	mov	r2, r7
 80170f8:	4628      	mov	r0, r5
 80170fa:	47b0      	blx	r6
 80170fc:	2800      	cmp	r0, #0
 80170fe:	dc06      	bgt.n	801710e <__sflush_r+0xfe>
 8017100:	89a3      	ldrh	r3, [r4, #12]
 8017102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017106:	81a3      	strh	r3, [r4, #12]
 8017108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801710c:	e78e      	b.n	801702c <__sflush_r+0x1c>
 801710e:	4407      	add	r7, r0
 8017110:	eba8 0800 	sub.w	r8, r8, r0
 8017114:	e7e9      	b.n	80170ea <__sflush_r+0xda>
 8017116:	bf00      	nop
 8017118:	dfbffffe 	.word	0xdfbffffe

0801711c <_fflush_r>:
 801711c:	b538      	push	{r3, r4, r5, lr}
 801711e:	690b      	ldr	r3, [r1, #16]
 8017120:	4605      	mov	r5, r0
 8017122:	460c      	mov	r4, r1
 8017124:	b913      	cbnz	r3, 801712c <_fflush_r+0x10>
 8017126:	2500      	movs	r5, #0
 8017128:	4628      	mov	r0, r5
 801712a:	bd38      	pop	{r3, r4, r5, pc}
 801712c:	b118      	cbz	r0, 8017136 <_fflush_r+0x1a>
 801712e:	6a03      	ldr	r3, [r0, #32]
 8017130:	b90b      	cbnz	r3, 8017136 <_fflush_r+0x1a>
 8017132:	f7fd fc49 	bl	80149c8 <__sinit>
 8017136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d0f3      	beq.n	8017126 <_fflush_r+0xa>
 801713e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017140:	07d0      	lsls	r0, r2, #31
 8017142:	d404      	bmi.n	801714e <_fflush_r+0x32>
 8017144:	0599      	lsls	r1, r3, #22
 8017146:	d402      	bmi.n	801714e <_fflush_r+0x32>
 8017148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801714a:	f7fe fb5b 	bl	8015804 <__retarget_lock_acquire_recursive>
 801714e:	4628      	mov	r0, r5
 8017150:	4621      	mov	r1, r4
 8017152:	f7ff ff5d 	bl	8017010 <__sflush_r>
 8017156:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017158:	07da      	lsls	r2, r3, #31
 801715a:	4605      	mov	r5, r0
 801715c:	d4e4      	bmi.n	8017128 <_fflush_r+0xc>
 801715e:	89a3      	ldrh	r3, [r4, #12]
 8017160:	059b      	lsls	r3, r3, #22
 8017162:	d4e1      	bmi.n	8017128 <_fflush_r+0xc>
 8017164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017166:	f7fe fb4e 	bl	8015806 <__retarget_lock_release_recursive>
 801716a:	e7dd      	b.n	8017128 <_fflush_r+0xc>

0801716c <__malloc_lock>:
 801716c:	4801      	ldr	r0, [pc, #4]	; (8017174 <__malloc_lock+0x8>)
 801716e:	f7fe bb49 	b.w	8015804 <__retarget_lock_acquire_recursive>
 8017172:	bf00      	nop
 8017174:	20004064 	.word	0x20004064

08017178 <__malloc_unlock>:
 8017178:	4801      	ldr	r0, [pc, #4]	; (8017180 <__malloc_unlock+0x8>)
 801717a:	f7fe bb44 	b.w	8015806 <__retarget_lock_release_recursive>
 801717e:	bf00      	nop
 8017180:	20004064 	.word	0x20004064

08017184 <_Balloc>:
 8017184:	b570      	push	{r4, r5, r6, lr}
 8017186:	69c6      	ldr	r6, [r0, #28]
 8017188:	4604      	mov	r4, r0
 801718a:	460d      	mov	r5, r1
 801718c:	b976      	cbnz	r6, 80171ac <_Balloc+0x28>
 801718e:	2010      	movs	r0, #16
 8017190:	f7ff fe84 	bl	8016e9c <malloc>
 8017194:	4602      	mov	r2, r0
 8017196:	61e0      	str	r0, [r4, #28]
 8017198:	b920      	cbnz	r0, 80171a4 <_Balloc+0x20>
 801719a:	4b18      	ldr	r3, [pc, #96]	; (80171fc <_Balloc+0x78>)
 801719c:	4818      	ldr	r0, [pc, #96]	; (8017200 <_Balloc+0x7c>)
 801719e:	216b      	movs	r1, #107	; 0x6b
 80171a0:	f000 fd8c 	bl	8017cbc <__assert_func>
 80171a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80171a8:	6006      	str	r6, [r0, #0]
 80171aa:	60c6      	str	r6, [r0, #12]
 80171ac:	69e6      	ldr	r6, [r4, #28]
 80171ae:	68f3      	ldr	r3, [r6, #12]
 80171b0:	b183      	cbz	r3, 80171d4 <_Balloc+0x50>
 80171b2:	69e3      	ldr	r3, [r4, #28]
 80171b4:	68db      	ldr	r3, [r3, #12]
 80171b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80171ba:	b9b8      	cbnz	r0, 80171ec <_Balloc+0x68>
 80171bc:	2101      	movs	r1, #1
 80171be:	fa01 f605 	lsl.w	r6, r1, r5
 80171c2:	1d72      	adds	r2, r6, #5
 80171c4:	0092      	lsls	r2, r2, #2
 80171c6:	4620      	mov	r0, r4
 80171c8:	f000 fd96 	bl	8017cf8 <_calloc_r>
 80171cc:	b160      	cbz	r0, 80171e8 <_Balloc+0x64>
 80171ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80171d2:	e00e      	b.n	80171f2 <_Balloc+0x6e>
 80171d4:	2221      	movs	r2, #33	; 0x21
 80171d6:	2104      	movs	r1, #4
 80171d8:	4620      	mov	r0, r4
 80171da:	f000 fd8d 	bl	8017cf8 <_calloc_r>
 80171de:	69e3      	ldr	r3, [r4, #28]
 80171e0:	60f0      	str	r0, [r6, #12]
 80171e2:	68db      	ldr	r3, [r3, #12]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d1e4      	bne.n	80171b2 <_Balloc+0x2e>
 80171e8:	2000      	movs	r0, #0
 80171ea:	bd70      	pop	{r4, r5, r6, pc}
 80171ec:	6802      	ldr	r2, [r0, #0]
 80171ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80171f2:	2300      	movs	r3, #0
 80171f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80171f8:	e7f7      	b.n	80171ea <_Balloc+0x66>
 80171fa:	bf00      	nop
 80171fc:	0801af36 	.word	0x0801af36
 8017200:	0801b027 	.word	0x0801b027

08017204 <_Bfree>:
 8017204:	b570      	push	{r4, r5, r6, lr}
 8017206:	69c6      	ldr	r6, [r0, #28]
 8017208:	4605      	mov	r5, r0
 801720a:	460c      	mov	r4, r1
 801720c:	b976      	cbnz	r6, 801722c <_Bfree+0x28>
 801720e:	2010      	movs	r0, #16
 8017210:	f7ff fe44 	bl	8016e9c <malloc>
 8017214:	4602      	mov	r2, r0
 8017216:	61e8      	str	r0, [r5, #28]
 8017218:	b920      	cbnz	r0, 8017224 <_Bfree+0x20>
 801721a:	4b09      	ldr	r3, [pc, #36]	; (8017240 <_Bfree+0x3c>)
 801721c:	4809      	ldr	r0, [pc, #36]	; (8017244 <_Bfree+0x40>)
 801721e:	218f      	movs	r1, #143	; 0x8f
 8017220:	f000 fd4c 	bl	8017cbc <__assert_func>
 8017224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017228:	6006      	str	r6, [r0, #0]
 801722a:	60c6      	str	r6, [r0, #12]
 801722c:	b13c      	cbz	r4, 801723e <_Bfree+0x3a>
 801722e:	69eb      	ldr	r3, [r5, #28]
 8017230:	6862      	ldr	r2, [r4, #4]
 8017232:	68db      	ldr	r3, [r3, #12]
 8017234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017238:	6021      	str	r1, [r4, #0]
 801723a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801723e:	bd70      	pop	{r4, r5, r6, pc}
 8017240:	0801af36 	.word	0x0801af36
 8017244:	0801b027 	.word	0x0801b027

08017248 <__multadd>:
 8017248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801724c:	690d      	ldr	r5, [r1, #16]
 801724e:	4607      	mov	r7, r0
 8017250:	460c      	mov	r4, r1
 8017252:	461e      	mov	r6, r3
 8017254:	f101 0c14 	add.w	ip, r1, #20
 8017258:	2000      	movs	r0, #0
 801725a:	f8dc 3000 	ldr.w	r3, [ip]
 801725e:	b299      	uxth	r1, r3
 8017260:	fb02 6101 	mla	r1, r2, r1, r6
 8017264:	0c1e      	lsrs	r6, r3, #16
 8017266:	0c0b      	lsrs	r3, r1, #16
 8017268:	fb02 3306 	mla	r3, r2, r6, r3
 801726c:	b289      	uxth	r1, r1
 801726e:	3001      	adds	r0, #1
 8017270:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017274:	4285      	cmp	r5, r0
 8017276:	f84c 1b04 	str.w	r1, [ip], #4
 801727a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801727e:	dcec      	bgt.n	801725a <__multadd+0x12>
 8017280:	b30e      	cbz	r6, 80172c6 <__multadd+0x7e>
 8017282:	68a3      	ldr	r3, [r4, #8]
 8017284:	42ab      	cmp	r3, r5
 8017286:	dc19      	bgt.n	80172bc <__multadd+0x74>
 8017288:	6861      	ldr	r1, [r4, #4]
 801728a:	4638      	mov	r0, r7
 801728c:	3101      	adds	r1, #1
 801728e:	f7ff ff79 	bl	8017184 <_Balloc>
 8017292:	4680      	mov	r8, r0
 8017294:	b928      	cbnz	r0, 80172a2 <__multadd+0x5a>
 8017296:	4602      	mov	r2, r0
 8017298:	4b0c      	ldr	r3, [pc, #48]	; (80172cc <__multadd+0x84>)
 801729a:	480d      	ldr	r0, [pc, #52]	; (80172d0 <__multadd+0x88>)
 801729c:	21ba      	movs	r1, #186	; 0xba
 801729e:	f000 fd0d 	bl	8017cbc <__assert_func>
 80172a2:	6922      	ldr	r2, [r4, #16]
 80172a4:	3202      	adds	r2, #2
 80172a6:	f104 010c 	add.w	r1, r4, #12
 80172aa:	0092      	lsls	r2, r2, #2
 80172ac:	300c      	adds	r0, #12
 80172ae:	f7fe faab 	bl	8015808 <memcpy>
 80172b2:	4621      	mov	r1, r4
 80172b4:	4638      	mov	r0, r7
 80172b6:	f7ff ffa5 	bl	8017204 <_Bfree>
 80172ba:	4644      	mov	r4, r8
 80172bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80172c0:	3501      	adds	r5, #1
 80172c2:	615e      	str	r6, [r3, #20]
 80172c4:	6125      	str	r5, [r4, #16]
 80172c6:	4620      	mov	r0, r4
 80172c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172cc:	0801afa5 	.word	0x0801afa5
 80172d0:	0801b027 	.word	0x0801b027

080172d4 <__s2b>:
 80172d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80172d8:	460c      	mov	r4, r1
 80172da:	4615      	mov	r5, r2
 80172dc:	461f      	mov	r7, r3
 80172de:	2209      	movs	r2, #9
 80172e0:	3308      	adds	r3, #8
 80172e2:	4606      	mov	r6, r0
 80172e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80172e8:	2100      	movs	r1, #0
 80172ea:	2201      	movs	r2, #1
 80172ec:	429a      	cmp	r2, r3
 80172ee:	db09      	blt.n	8017304 <__s2b+0x30>
 80172f0:	4630      	mov	r0, r6
 80172f2:	f7ff ff47 	bl	8017184 <_Balloc>
 80172f6:	b940      	cbnz	r0, 801730a <__s2b+0x36>
 80172f8:	4602      	mov	r2, r0
 80172fa:	4b19      	ldr	r3, [pc, #100]	; (8017360 <__s2b+0x8c>)
 80172fc:	4819      	ldr	r0, [pc, #100]	; (8017364 <__s2b+0x90>)
 80172fe:	21d3      	movs	r1, #211	; 0xd3
 8017300:	f000 fcdc 	bl	8017cbc <__assert_func>
 8017304:	0052      	lsls	r2, r2, #1
 8017306:	3101      	adds	r1, #1
 8017308:	e7f0      	b.n	80172ec <__s2b+0x18>
 801730a:	9b08      	ldr	r3, [sp, #32]
 801730c:	6143      	str	r3, [r0, #20]
 801730e:	2d09      	cmp	r5, #9
 8017310:	f04f 0301 	mov.w	r3, #1
 8017314:	6103      	str	r3, [r0, #16]
 8017316:	dd16      	ble.n	8017346 <__s2b+0x72>
 8017318:	f104 0909 	add.w	r9, r4, #9
 801731c:	46c8      	mov	r8, r9
 801731e:	442c      	add	r4, r5
 8017320:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017324:	4601      	mov	r1, r0
 8017326:	3b30      	subs	r3, #48	; 0x30
 8017328:	220a      	movs	r2, #10
 801732a:	4630      	mov	r0, r6
 801732c:	f7ff ff8c 	bl	8017248 <__multadd>
 8017330:	45a0      	cmp	r8, r4
 8017332:	d1f5      	bne.n	8017320 <__s2b+0x4c>
 8017334:	f1a5 0408 	sub.w	r4, r5, #8
 8017338:	444c      	add	r4, r9
 801733a:	1b2d      	subs	r5, r5, r4
 801733c:	1963      	adds	r3, r4, r5
 801733e:	42bb      	cmp	r3, r7
 8017340:	db04      	blt.n	801734c <__s2b+0x78>
 8017342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017346:	340a      	adds	r4, #10
 8017348:	2509      	movs	r5, #9
 801734a:	e7f6      	b.n	801733a <__s2b+0x66>
 801734c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017350:	4601      	mov	r1, r0
 8017352:	3b30      	subs	r3, #48	; 0x30
 8017354:	220a      	movs	r2, #10
 8017356:	4630      	mov	r0, r6
 8017358:	f7ff ff76 	bl	8017248 <__multadd>
 801735c:	e7ee      	b.n	801733c <__s2b+0x68>
 801735e:	bf00      	nop
 8017360:	0801afa5 	.word	0x0801afa5
 8017364:	0801b027 	.word	0x0801b027

08017368 <__hi0bits>:
 8017368:	0c03      	lsrs	r3, r0, #16
 801736a:	041b      	lsls	r3, r3, #16
 801736c:	b9d3      	cbnz	r3, 80173a4 <__hi0bits+0x3c>
 801736e:	0400      	lsls	r0, r0, #16
 8017370:	2310      	movs	r3, #16
 8017372:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017376:	bf04      	itt	eq
 8017378:	0200      	lsleq	r0, r0, #8
 801737a:	3308      	addeq	r3, #8
 801737c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017380:	bf04      	itt	eq
 8017382:	0100      	lsleq	r0, r0, #4
 8017384:	3304      	addeq	r3, #4
 8017386:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801738a:	bf04      	itt	eq
 801738c:	0080      	lsleq	r0, r0, #2
 801738e:	3302      	addeq	r3, #2
 8017390:	2800      	cmp	r0, #0
 8017392:	db05      	blt.n	80173a0 <__hi0bits+0x38>
 8017394:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017398:	f103 0301 	add.w	r3, r3, #1
 801739c:	bf08      	it	eq
 801739e:	2320      	moveq	r3, #32
 80173a0:	4618      	mov	r0, r3
 80173a2:	4770      	bx	lr
 80173a4:	2300      	movs	r3, #0
 80173a6:	e7e4      	b.n	8017372 <__hi0bits+0xa>

080173a8 <__lo0bits>:
 80173a8:	6803      	ldr	r3, [r0, #0]
 80173aa:	f013 0207 	ands.w	r2, r3, #7
 80173ae:	d00c      	beq.n	80173ca <__lo0bits+0x22>
 80173b0:	07d9      	lsls	r1, r3, #31
 80173b2:	d422      	bmi.n	80173fa <__lo0bits+0x52>
 80173b4:	079a      	lsls	r2, r3, #30
 80173b6:	bf49      	itett	mi
 80173b8:	085b      	lsrmi	r3, r3, #1
 80173ba:	089b      	lsrpl	r3, r3, #2
 80173bc:	6003      	strmi	r3, [r0, #0]
 80173be:	2201      	movmi	r2, #1
 80173c0:	bf5c      	itt	pl
 80173c2:	6003      	strpl	r3, [r0, #0]
 80173c4:	2202      	movpl	r2, #2
 80173c6:	4610      	mov	r0, r2
 80173c8:	4770      	bx	lr
 80173ca:	b299      	uxth	r1, r3
 80173cc:	b909      	cbnz	r1, 80173d2 <__lo0bits+0x2a>
 80173ce:	0c1b      	lsrs	r3, r3, #16
 80173d0:	2210      	movs	r2, #16
 80173d2:	b2d9      	uxtb	r1, r3
 80173d4:	b909      	cbnz	r1, 80173da <__lo0bits+0x32>
 80173d6:	3208      	adds	r2, #8
 80173d8:	0a1b      	lsrs	r3, r3, #8
 80173da:	0719      	lsls	r1, r3, #28
 80173dc:	bf04      	itt	eq
 80173de:	091b      	lsreq	r3, r3, #4
 80173e0:	3204      	addeq	r2, #4
 80173e2:	0799      	lsls	r1, r3, #30
 80173e4:	bf04      	itt	eq
 80173e6:	089b      	lsreq	r3, r3, #2
 80173e8:	3202      	addeq	r2, #2
 80173ea:	07d9      	lsls	r1, r3, #31
 80173ec:	d403      	bmi.n	80173f6 <__lo0bits+0x4e>
 80173ee:	085b      	lsrs	r3, r3, #1
 80173f0:	f102 0201 	add.w	r2, r2, #1
 80173f4:	d003      	beq.n	80173fe <__lo0bits+0x56>
 80173f6:	6003      	str	r3, [r0, #0]
 80173f8:	e7e5      	b.n	80173c6 <__lo0bits+0x1e>
 80173fa:	2200      	movs	r2, #0
 80173fc:	e7e3      	b.n	80173c6 <__lo0bits+0x1e>
 80173fe:	2220      	movs	r2, #32
 8017400:	e7e1      	b.n	80173c6 <__lo0bits+0x1e>
	...

08017404 <__i2b>:
 8017404:	b510      	push	{r4, lr}
 8017406:	460c      	mov	r4, r1
 8017408:	2101      	movs	r1, #1
 801740a:	f7ff febb 	bl	8017184 <_Balloc>
 801740e:	4602      	mov	r2, r0
 8017410:	b928      	cbnz	r0, 801741e <__i2b+0x1a>
 8017412:	4b05      	ldr	r3, [pc, #20]	; (8017428 <__i2b+0x24>)
 8017414:	4805      	ldr	r0, [pc, #20]	; (801742c <__i2b+0x28>)
 8017416:	f240 1145 	movw	r1, #325	; 0x145
 801741a:	f000 fc4f 	bl	8017cbc <__assert_func>
 801741e:	2301      	movs	r3, #1
 8017420:	6144      	str	r4, [r0, #20]
 8017422:	6103      	str	r3, [r0, #16]
 8017424:	bd10      	pop	{r4, pc}
 8017426:	bf00      	nop
 8017428:	0801afa5 	.word	0x0801afa5
 801742c:	0801b027 	.word	0x0801b027

08017430 <__multiply>:
 8017430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017434:	4691      	mov	r9, r2
 8017436:	690a      	ldr	r2, [r1, #16]
 8017438:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801743c:	429a      	cmp	r2, r3
 801743e:	bfb8      	it	lt
 8017440:	460b      	movlt	r3, r1
 8017442:	460c      	mov	r4, r1
 8017444:	bfbc      	itt	lt
 8017446:	464c      	movlt	r4, r9
 8017448:	4699      	movlt	r9, r3
 801744a:	6927      	ldr	r7, [r4, #16]
 801744c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017450:	68a3      	ldr	r3, [r4, #8]
 8017452:	6861      	ldr	r1, [r4, #4]
 8017454:	eb07 060a 	add.w	r6, r7, sl
 8017458:	42b3      	cmp	r3, r6
 801745a:	b085      	sub	sp, #20
 801745c:	bfb8      	it	lt
 801745e:	3101      	addlt	r1, #1
 8017460:	f7ff fe90 	bl	8017184 <_Balloc>
 8017464:	b930      	cbnz	r0, 8017474 <__multiply+0x44>
 8017466:	4602      	mov	r2, r0
 8017468:	4b44      	ldr	r3, [pc, #272]	; (801757c <__multiply+0x14c>)
 801746a:	4845      	ldr	r0, [pc, #276]	; (8017580 <__multiply+0x150>)
 801746c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8017470:	f000 fc24 	bl	8017cbc <__assert_func>
 8017474:	f100 0514 	add.w	r5, r0, #20
 8017478:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801747c:	462b      	mov	r3, r5
 801747e:	2200      	movs	r2, #0
 8017480:	4543      	cmp	r3, r8
 8017482:	d321      	bcc.n	80174c8 <__multiply+0x98>
 8017484:	f104 0314 	add.w	r3, r4, #20
 8017488:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801748c:	f109 0314 	add.w	r3, r9, #20
 8017490:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017494:	9202      	str	r2, [sp, #8]
 8017496:	1b3a      	subs	r2, r7, r4
 8017498:	3a15      	subs	r2, #21
 801749a:	f022 0203 	bic.w	r2, r2, #3
 801749e:	3204      	adds	r2, #4
 80174a0:	f104 0115 	add.w	r1, r4, #21
 80174a4:	428f      	cmp	r7, r1
 80174a6:	bf38      	it	cc
 80174a8:	2204      	movcc	r2, #4
 80174aa:	9201      	str	r2, [sp, #4]
 80174ac:	9a02      	ldr	r2, [sp, #8]
 80174ae:	9303      	str	r3, [sp, #12]
 80174b0:	429a      	cmp	r2, r3
 80174b2:	d80c      	bhi.n	80174ce <__multiply+0x9e>
 80174b4:	2e00      	cmp	r6, #0
 80174b6:	dd03      	ble.n	80174c0 <__multiply+0x90>
 80174b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d05b      	beq.n	8017578 <__multiply+0x148>
 80174c0:	6106      	str	r6, [r0, #16]
 80174c2:	b005      	add	sp, #20
 80174c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174c8:	f843 2b04 	str.w	r2, [r3], #4
 80174cc:	e7d8      	b.n	8017480 <__multiply+0x50>
 80174ce:	f8b3 a000 	ldrh.w	sl, [r3]
 80174d2:	f1ba 0f00 	cmp.w	sl, #0
 80174d6:	d024      	beq.n	8017522 <__multiply+0xf2>
 80174d8:	f104 0e14 	add.w	lr, r4, #20
 80174dc:	46a9      	mov	r9, r5
 80174de:	f04f 0c00 	mov.w	ip, #0
 80174e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80174e6:	f8d9 1000 	ldr.w	r1, [r9]
 80174ea:	fa1f fb82 	uxth.w	fp, r2
 80174ee:	b289      	uxth	r1, r1
 80174f0:	fb0a 110b 	mla	r1, sl, fp, r1
 80174f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80174f8:	f8d9 2000 	ldr.w	r2, [r9]
 80174fc:	4461      	add	r1, ip
 80174fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017502:	fb0a c20b 	mla	r2, sl, fp, ip
 8017506:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801750a:	b289      	uxth	r1, r1
 801750c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017510:	4577      	cmp	r7, lr
 8017512:	f849 1b04 	str.w	r1, [r9], #4
 8017516:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801751a:	d8e2      	bhi.n	80174e2 <__multiply+0xb2>
 801751c:	9a01      	ldr	r2, [sp, #4]
 801751e:	f845 c002 	str.w	ip, [r5, r2]
 8017522:	9a03      	ldr	r2, [sp, #12]
 8017524:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017528:	3304      	adds	r3, #4
 801752a:	f1b9 0f00 	cmp.w	r9, #0
 801752e:	d021      	beq.n	8017574 <__multiply+0x144>
 8017530:	6829      	ldr	r1, [r5, #0]
 8017532:	f104 0c14 	add.w	ip, r4, #20
 8017536:	46ae      	mov	lr, r5
 8017538:	f04f 0a00 	mov.w	sl, #0
 801753c:	f8bc b000 	ldrh.w	fp, [ip]
 8017540:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017544:	fb09 220b 	mla	r2, r9, fp, r2
 8017548:	4452      	add	r2, sl
 801754a:	b289      	uxth	r1, r1
 801754c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017550:	f84e 1b04 	str.w	r1, [lr], #4
 8017554:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017558:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801755c:	f8be 1000 	ldrh.w	r1, [lr]
 8017560:	fb09 110a 	mla	r1, r9, sl, r1
 8017564:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8017568:	4567      	cmp	r7, ip
 801756a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801756e:	d8e5      	bhi.n	801753c <__multiply+0x10c>
 8017570:	9a01      	ldr	r2, [sp, #4]
 8017572:	50a9      	str	r1, [r5, r2]
 8017574:	3504      	adds	r5, #4
 8017576:	e799      	b.n	80174ac <__multiply+0x7c>
 8017578:	3e01      	subs	r6, #1
 801757a:	e79b      	b.n	80174b4 <__multiply+0x84>
 801757c:	0801afa5 	.word	0x0801afa5
 8017580:	0801b027 	.word	0x0801b027

08017584 <__pow5mult>:
 8017584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017588:	4615      	mov	r5, r2
 801758a:	f012 0203 	ands.w	r2, r2, #3
 801758e:	4606      	mov	r6, r0
 8017590:	460f      	mov	r7, r1
 8017592:	d007      	beq.n	80175a4 <__pow5mult+0x20>
 8017594:	4c25      	ldr	r4, [pc, #148]	; (801762c <__pow5mult+0xa8>)
 8017596:	3a01      	subs	r2, #1
 8017598:	2300      	movs	r3, #0
 801759a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801759e:	f7ff fe53 	bl	8017248 <__multadd>
 80175a2:	4607      	mov	r7, r0
 80175a4:	10ad      	asrs	r5, r5, #2
 80175a6:	d03d      	beq.n	8017624 <__pow5mult+0xa0>
 80175a8:	69f4      	ldr	r4, [r6, #28]
 80175aa:	b97c      	cbnz	r4, 80175cc <__pow5mult+0x48>
 80175ac:	2010      	movs	r0, #16
 80175ae:	f7ff fc75 	bl	8016e9c <malloc>
 80175b2:	4602      	mov	r2, r0
 80175b4:	61f0      	str	r0, [r6, #28]
 80175b6:	b928      	cbnz	r0, 80175c4 <__pow5mult+0x40>
 80175b8:	4b1d      	ldr	r3, [pc, #116]	; (8017630 <__pow5mult+0xac>)
 80175ba:	481e      	ldr	r0, [pc, #120]	; (8017634 <__pow5mult+0xb0>)
 80175bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80175c0:	f000 fb7c 	bl	8017cbc <__assert_func>
 80175c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80175c8:	6004      	str	r4, [r0, #0]
 80175ca:	60c4      	str	r4, [r0, #12]
 80175cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80175d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80175d4:	b94c      	cbnz	r4, 80175ea <__pow5mult+0x66>
 80175d6:	f240 2171 	movw	r1, #625	; 0x271
 80175da:	4630      	mov	r0, r6
 80175dc:	f7ff ff12 	bl	8017404 <__i2b>
 80175e0:	2300      	movs	r3, #0
 80175e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80175e6:	4604      	mov	r4, r0
 80175e8:	6003      	str	r3, [r0, #0]
 80175ea:	f04f 0900 	mov.w	r9, #0
 80175ee:	07eb      	lsls	r3, r5, #31
 80175f0:	d50a      	bpl.n	8017608 <__pow5mult+0x84>
 80175f2:	4639      	mov	r1, r7
 80175f4:	4622      	mov	r2, r4
 80175f6:	4630      	mov	r0, r6
 80175f8:	f7ff ff1a 	bl	8017430 <__multiply>
 80175fc:	4639      	mov	r1, r7
 80175fe:	4680      	mov	r8, r0
 8017600:	4630      	mov	r0, r6
 8017602:	f7ff fdff 	bl	8017204 <_Bfree>
 8017606:	4647      	mov	r7, r8
 8017608:	106d      	asrs	r5, r5, #1
 801760a:	d00b      	beq.n	8017624 <__pow5mult+0xa0>
 801760c:	6820      	ldr	r0, [r4, #0]
 801760e:	b938      	cbnz	r0, 8017620 <__pow5mult+0x9c>
 8017610:	4622      	mov	r2, r4
 8017612:	4621      	mov	r1, r4
 8017614:	4630      	mov	r0, r6
 8017616:	f7ff ff0b 	bl	8017430 <__multiply>
 801761a:	6020      	str	r0, [r4, #0]
 801761c:	f8c0 9000 	str.w	r9, [r0]
 8017620:	4604      	mov	r4, r0
 8017622:	e7e4      	b.n	80175ee <__pow5mult+0x6a>
 8017624:	4638      	mov	r0, r7
 8017626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801762a:	bf00      	nop
 801762c:	0801b170 	.word	0x0801b170
 8017630:	0801af36 	.word	0x0801af36
 8017634:	0801b027 	.word	0x0801b027

08017638 <__lshift>:
 8017638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801763c:	460c      	mov	r4, r1
 801763e:	6849      	ldr	r1, [r1, #4]
 8017640:	6923      	ldr	r3, [r4, #16]
 8017642:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017646:	68a3      	ldr	r3, [r4, #8]
 8017648:	4607      	mov	r7, r0
 801764a:	4691      	mov	r9, r2
 801764c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017650:	f108 0601 	add.w	r6, r8, #1
 8017654:	42b3      	cmp	r3, r6
 8017656:	db0b      	blt.n	8017670 <__lshift+0x38>
 8017658:	4638      	mov	r0, r7
 801765a:	f7ff fd93 	bl	8017184 <_Balloc>
 801765e:	4605      	mov	r5, r0
 8017660:	b948      	cbnz	r0, 8017676 <__lshift+0x3e>
 8017662:	4602      	mov	r2, r0
 8017664:	4b28      	ldr	r3, [pc, #160]	; (8017708 <__lshift+0xd0>)
 8017666:	4829      	ldr	r0, [pc, #164]	; (801770c <__lshift+0xd4>)
 8017668:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801766c:	f000 fb26 	bl	8017cbc <__assert_func>
 8017670:	3101      	adds	r1, #1
 8017672:	005b      	lsls	r3, r3, #1
 8017674:	e7ee      	b.n	8017654 <__lshift+0x1c>
 8017676:	2300      	movs	r3, #0
 8017678:	f100 0114 	add.w	r1, r0, #20
 801767c:	f100 0210 	add.w	r2, r0, #16
 8017680:	4618      	mov	r0, r3
 8017682:	4553      	cmp	r3, sl
 8017684:	db33      	blt.n	80176ee <__lshift+0xb6>
 8017686:	6920      	ldr	r0, [r4, #16]
 8017688:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801768c:	f104 0314 	add.w	r3, r4, #20
 8017690:	f019 091f 	ands.w	r9, r9, #31
 8017694:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017698:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801769c:	d02b      	beq.n	80176f6 <__lshift+0xbe>
 801769e:	f1c9 0e20 	rsb	lr, r9, #32
 80176a2:	468a      	mov	sl, r1
 80176a4:	2200      	movs	r2, #0
 80176a6:	6818      	ldr	r0, [r3, #0]
 80176a8:	fa00 f009 	lsl.w	r0, r0, r9
 80176ac:	4310      	orrs	r0, r2
 80176ae:	f84a 0b04 	str.w	r0, [sl], #4
 80176b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80176b6:	459c      	cmp	ip, r3
 80176b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80176bc:	d8f3      	bhi.n	80176a6 <__lshift+0x6e>
 80176be:	ebac 0304 	sub.w	r3, ip, r4
 80176c2:	3b15      	subs	r3, #21
 80176c4:	f023 0303 	bic.w	r3, r3, #3
 80176c8:	3304      	adds	r3, #4
 80176ca:	f104 0015 	add.w	r0, r4, #21
 80176ce:	4584      	cmp	ip, r0
 80176d0:	bf38      	it	cc
 80176d2:	2304      	movcc	r3, #4
 80176d4:	50ca      	str	r2, [r1, r3]
 80176d6:	b10a      	cbz	r2, 80176dc <__lshift+0xa4>
 80176d8:	f108 0602 	add.w	r6, r8, #2
 80176dc:	3e01      	subs	r6, #1
 80176de:	4638      	mov	r0, r7
 80176e0:	612e      	str	r6, [r5, #16]
 80176e2:	4621      	mov	r1, r4
 80176e4:	f7ff fd8e 	bl	8017204 <_Bfree>
 80176e8:	4628      	mov	r0, r5
 80176ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80176f2:	3301      	adds	r3, #1
 80176f4:	e7c5      	b.n	8017682 <__lshift+0x4a>
 80176f6:	3904      	subs	r1, #4
 80176f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80176fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8017700:	459c      	cmp	ip, r3
 8017702:	d8f9      	bhi.n	80176f8 <__lshift+0xc0>
 8017704:	e7ea      	b.n	80176dc <__lshift+0xa4>
 8017706:	bf00      	nop
 8017708:	0801afa5 	.word	0x0801afa5
 801770c:	0801b027 	.word	0x0801b027

08017710 <__mcmp>:
 8017710:	b530      	push	{r4, r5, lr}
 8017712:	6902      	ldr	r2, [r0, #16]
 8017714:	690c      	ldr	r4, [r1, #16]
 8017716:	1b12      	subs	r2, r2, r4
 8017718:	d10e      	bne.n	8017738 <__mcmp+0x28>
 801771a:	f100 0314 	add.w	r3, r0, #20
 801771e:	3114      	adds	r1, #20
 8017720:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017724:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017728:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801772c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017730:	42a5      	cmp	r5, r4
 8017732:	d003      	beq.n	801773c <__mcmp+0x2c>
 8017734:	d305      	bcc.n	8017742 <__mcmp+0x32>
 8017736:	2201      	movs	r2, #1
 8017738:	4610      	mov	r0, r2
 801773a:	bd30      	pop	{r4, r5, pc}
 801773c:	4283      	cmp	r3, r0
 801773e:	d3f3      	bcc.n	8017728 <__mcmp+0x18>
 8017740:	e7fa      	b.n	8017738 <__mcmp+0x28>
 8017742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017746:	e7f7      	b.n	8017738 <__mcmp+0x28>

08017748 <__mdiff>:
 8017748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801774c:	460c      	mov	r4, r1
 801774e:	4606      	mov	r6, r0
 8017750:	4611      	mov	r1, r2
 8017752:	4620      	mov	r0, r4
 8017754:	4690      	mov	r8, r2
 8017756:	f7ff ffdb 	bl	8017710 <__mcmp>
 801775a:	1e05      	subs	r5, r0, #0
 801775c:	d110      	bne.n	8017780 <__mdiff+0x38>
 801775e:	4629      	mov	r1, r5
 8017760:	4630      	mov	r0, r6
 8017762:	f7ff fd0f 	bl	8017184 <_Balloc>
 8017766:	b930      	cbnz	r0, 8017776 <__mdiff+0x2e>
 8017768:	4b3a      	ldr	r3, [pc, #232]	; (8017854 <__mdiff+0x10c>)
 801776a:	4602      	mov	r2, r0
 801776c:	f240 2137 	movw	r1, #567	; 0x237
 8017770:	4839      	ldr	r0, [pc, #228]	; (8017858 <__mdiff+0x110>)
 8017772:	f000 faa3 	bl	8017cbc <__assert_func>
 8017776:	2301      	movs	r3, #1
 8017778:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801777c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017780:	bfa4      	itt	ge
 8017782:	4643      	movge	r3, r8
 8017784:	46a0      	movge	r8, r4
 8017786:	4630      	mov	r0, r6
 8017788:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801778c:	bfa6      	itte	ge
 801778e:	461c      	movge	r4, r3
 8017790:	2500      	movge	r5, #0
 8017792:	2501      	movlt	r5, #1
 8017794:	f7ff fcf6 	bl	8017184 <_Balloc>
 8017798:	b920      	cbnz	r0, 80177a4 <__mdiff+0x5c>
 801779a:	4b2e      	ldr	r3, [pc, #184]	; (8017854 <__mdiff+0x10c>)
 801779c:	4602      	mov	r2, r0
 801779e:	f240 2145 	movw	r1, #581	; 0x245
 80177a2:	e7e5      	b.n	8017770 <__mdiff+0x28>
 80177a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80177a8:	6926      	ldr	r6, [r4, #16]
 80177aa:	60c5      	str	r5, [r0, #12]
 80177ac:	f104 0914 	add.w	r9, r4, #20
 80177b0:	f108 0514 	add.w	r5, r8, #20
 80177b4:	f100 0e14 	add.w	lr, r0, #20
 80177b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80177bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80177c0:	f108 0210 	add.w	r2, r8, #16
 80177c4:	46f2      	mov	sl, lr
 80177c6:	2100      	movs	r1, #0
 80177c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80177cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80177d0:	fa11 f88b 	uxtah	r8, r1, fp
 80177d4:	b299      	uxth	r1, r3
 80177d6:	0c1b      	lsrs	r3, r3, #16
 80177d8:	eba8 0801 	sub.w	r8, r8, r1
 80177dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80177e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80177e4:	fa1f f888 	uxth.w	r8, r8
 80177e8:	1419      	asrs	r1, r3, #16
 80177ea:	454e      	cmp	r6, r9
 80177ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80177f0:	f84a 3b04 	str.w	r3, [sl], #4
 80177f4:	d8e8      	bhi.n	80177c8 <__mdiff+0x80>
 80177f6:	1b33      	subs	r3, r6, r4
 80177f8:	3b15      	subs	r3, #21
 80177fa:	f023 0303 	bic.w	r3, r3, #3
 80177fe:	3304      	adds	r3, #4
 8017800:	3415      	adds	r4, #21
 8017802:	42a6      	cmp	r6, r4
 8017804:	bf38      	it	cc
 8017806:	2304      	movcc	r3, #4
 8017808:	441d      	add	r5, r3
 801780a:	4473      	add	r3, lr
 801780c:	469e      	mov	lr, r3
 801780e:	462e      	mov	r6, r5
 8017810:	4566      	cmp	r6, ip
 8017812:	d30e      	bcc.n	8017832 <__mdiff+0xea>
 8017814:	f10c 0203 	add.w	r2, ip, #3
 8017818:	1b52      	subs	r2, r2, r5
 801781a:	f022 0203 	bic.w	r2, r2, #3
 801781e:	3d03      	subs	r5, #3
 8017820:	45ac      	cmp	ip, r5
 8017822:	bf38      	it	cc
 8017824:	2200      	movcc	r2, #0
 8017826:	4413      	add	r3, r2
 8017828:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801782c:	b17a      	cbz	r2, 801784e <__mdiff+0x106>
 801782e:	6107      	str	r7, [r0, #16]
 8017830:	e7a4      	b.n	801777c <__mdiff+0x34>
 8017832:	f856 8b04 	ldr.w	r8, [r6], #4
 8017836:	fa11 f288 	uxtah	r2, r1, r8
 801783a:	1414      	asrs	r4, r2, #16
 801783c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017840:	b292      	uxth	r2, r2
 8017842:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017846:	f84e 2b04 	str.w	r2, [lr], #4
 801784a:	1421      	asrs	r1, r4, #16
 801784c:	e7e0      	b.n	8017810 <__mdiff+0xc8>
 801784e:	3f01      	subs	r7, #1
 8017850:	e7ea      	b.n	8017828 <__mdiff+0xe0>
 8017852:	bf00      	nop
 8017854:	0801afa5 	.word	0x0801afa5
 8017858:	0801b027 	.word	0x0801b027

0801785c <__ulp>:
 801785c:	b082      	sub	sp, #8
 801785e:	ed8d 0b00 	vstr	d0, [sp]
 8017862:	9a01      	ldr	r2, [sp, #4]
 8017864:	4b0f      	ldr	r3, [pc, #60]	; (80178a4 <__ulp+0x48>)
 8017866:	4013      	ands	r3, r2
 8017868:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801786c:	2b00      	cmp	r3, #0
 801786e:	dc08      	bgt.n	8017882 <__ulp+0x26>
 8017870:	425b      	negs	r3, r3
 8017872:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8017876:	ea4f 5223 	mov.w	r2, r3, asr #20
 801787a:	da04      	bge.n	8017886 <__ulp+0x2a>
 801787c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017880:	4113      	asrs	r3, r2
 8017882:	2200      	movs	r2, #0
 8017884:	e008      	b.n	8017898 <__ulp+0x3c>
 8017886:	f1a2 0314 	sub.w	r3, r2, #20
 801788a:	2b1e      	cmp	r3, #30
 801788c:	bfda      	itte	le
 801788e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8017892:	40da      	lsrle	r2, r3
 8017894:	2201      	movgt	r2, #1
 8017896:	2300      	movs	r3, #0
 8017898:	4619      	mov	r1, r3
 801789a:	4610      	mov	r0, r2
 801789c:	ec41 0b10 	vmov	d0, r0, r1
 80178a0:	b002      	add	sp, #8
 80178a2:	4770      	bx	lr
 80178a4:	7ff00000 	.word	0x7ff00000

080178a8 <__b2d>:
 80178a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178ac:	6906      	ldr	r6, [r0, #16]
 80178ae:	f100 0814 	add.w	r8, r0, #20
 80178b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80178b6:	1f37      	subs	r7, r6, #4
 80178b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80178bc:	4610      	mov	r0, r2
 80178be:	f7ff fd53 	bl	8017368 <__hi0bits>
 80178c2:	f1c0 0320 	rsb	r3, r0, #32
 80178c6:	280a      	cmp	r0, #10
 80178c8:	600b      	str	r3, [r1, #0]
 80178ca:	491b      	ldr	r1, [pc, #108]	; (8017938 <__b2d+0x90>)
 80178cc:	dc15      	bgt.n	80178fa <__b2d+0x52>
 80178ce:	f1c0 0c0b 	rsb	ip, r0, #11
 80178d2:	fa22 f30c 	lsr.w	r3, r2, ip
 80178d6:	45b8      	cmp	r8, r7
 80178d8:	ea43 0501 	orr.w	r5, r3, r1
 80178dc:	bf34      	ite	cc
 80178de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80178e2:	2300      	movcs	r3, #0
 80178e4:	3015      	adds	r0, #21
 80178e6:	fa02 f000 	lsl.w	r0, r2, r0
 80178ea:	fa23 f30c 	lsr.w	r3, r3, ip
 80178ee:	4303      	orrs	r3, r0
 80178f0:	461c      	mov	r4, r3
 80178f2:	ec45 4b10 	vmov	d0, r4, r5
 80178f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178fa:	45b8      	cmp	r8, r7
 80178fc:	bf3a      	itte	cc
 80178fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017902:	f1a6 0708 	subcc.w	r7, r6, #8
 8017906:	2300      	movcs	r3, #0
 8017908:	380b      	subs	r0, #11
 801790a:	d012      	beq.n	8017932 <__b2d+0x8a>
 801790c:	f1c0 0120 	rsb	r1, r0, #32
 8017910:	fa23 f401 	lsr.w	r4, r3, r1
 8017914:	4082      	lsls	r2, r0
 8017916:	4322      	orrs	r2, r4
 8017918:	4547      	cmp	r7, r8
 801791a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801791e:	bf8c      	ite	hi
 8017920:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017924:	2200      	movls	r2, #0
 8017926:	4083      	lsls	r3, r0
 8017928:	40ca      	lsrs	r2, r1
 801792a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801792e:	4313      	orrs	r3, r2
 8017930:	e7de      	b.n	80178f0 <__b2d+0x48>
 8017932:	ea42 0501 	orr.w	r5, r2, r1
 8017936:	e7db      	b.n	80178f0 <__b2d+0x48>
 8017938:	3ff00000 	.word	0x3ff00000

0801793c <__d2b>:
 801793c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017940:	460f      	mov	r7, r1
 8017942:	2101      	movs	r1, #1
 8017944:	ec59 8b10 	vmov	r8, r9, d0
 8017948:	4616      	mov	r6, r2
 801794a:	f7ff fc1b 	bl	8017184 <_Balloc>
 801794e:	4604      	mov	r4, r0
 8017950:	b930      	cbnz	r0, 8017960 <__d2b+0x24>
 8017952:	4602      	mov	r2, r0
 8017954:	4b24      	ldr	r3, [pc, #144]	; (80179e8 <__d2b+0xac>)
 8017956:	4825      	ldr	r0, [pc, #148]	; (80179ec <__d2b+0xb0>)
 8017958:	f240 310f 	movw	r1, #783	; 0x30f
 801795c:	f000 f9ae 	bl	8017cbc <__assert_func>
 8017960:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017964:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017968:	bb2d      	cbnz	r5, 80179b6 <__d2b+0x7a>
 801796a:	9301      	str	r3, [sp, #4]
 801796c:	f1b8 0300 	subs.w	r3, r8, #0
 8017970:	d026      	beq.n	80179c0 <__d2b+0x84>
 8017972:	4668      	mov	r0, sp
 8017974:	9300      	str	r3, [sp, #0]
 8017976:	f7ff fd17 	bl	80173a8 <__lo0bits>
 801797a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801797e:	b1e8      	cbz	r0, 80179bc <__d2b+0x80>
 8017980:	f1c0 0320 	rsb	r3, r0, #32
 8017984:	fa02 f303 	lsl.w	r3, r2, r3
 8017988:	430b      	orrs	r3, r1
 801798a:	40c2      	lsrs	r2, r0
 801798c:	6163      	str	r3, [r4, #20]
 801798e:	9201      	str	r2, [sp, #4]
 8017990:	9b01      	ldr	r3, [sp, #4]
 8017992:	61a3      	str	r3, [r4, #24]
 8017994:	2b00      	cmp	r3, #0
 8017996:	bf14      	ite	ne
 8017998:	2202      	movne	r2, #2
 801799a:	2201      	moveq	r2, #1
 801799c:	6122      	str	r2, [r4, #16]
 801799e:	b1bd      	cbz	r5, 80179d0 <__d2b+0x94>
 80179a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80179a4:	4405      	add	r5, r0
 80179a6:	603d      	str	r5, [r7, #0]
 80179a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80179ac:	6030      	str	r0, [r6, #0]
 80179ae:	4620      	mov	r0, r4
 80179b0:	b003      	add	sp, #12
 80179b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80179b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80179ba:	e7d6      	b.n	801796a <__d2b+0x2e>
 80179bc:	6161      	str	r1, [r4, #20]
 80179be:	e7e7      	b.n	8017990 <__d2b+0x54>
 80179c0:	a801      	add	r0, sp, #4
 80179c2:	f7ff fcf1 	bl	80173a8 <__lo0bits>
 80179c6:	9b01      	ldr	r3, [sp, #4]
 80179c8:	6163      	str	r3, [r4, #20]
 80179ca:	3020      	adds	r0, #32
 80179cc:	2201      	movs	r2, #1
 80179ce:	e7e5      	b.n	801799c <__d2b+0x60>
 80179d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80179d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80179d8:	6038      	str	r0, [r7, #0]
 80179da:	6918      	ldr	r0, [r3, #16]
 80179dc:	f7ff fcc4 	bl	8017368 <__hi0bits>
 80179e0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80179e4:	e7e2      	b.n	80179ac <__d2b+0x70>
 80179e6:	bf00      	nop
 80179e8:	0801afa5 	.word	0x0801afa5
 80179ec:	0801b027 	.word	0x0801b027

080179f0 <__ratio>:
 80179f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179f4:	4688      	mov	r8, r1
 80179f6:	4669      	mov	r1, sp
 80179f8:	4681      	mov	r9, r0
 80179fa:	f7ff ff55 	bl	80178a8 <__b2d>
 80179fe:	a901      	add	r1, sp, #4
 8017a00:	4640      	mov	r0, r8
 8017a02:	ec55 4b10 	vmov	r4, r5, d0
 8017a06:	f7ff ff4f 	bl	80178a8 <__b2d>
 8017a0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017a0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017a12:	eba3 0c02 	sub.w	ip, r3, r2
 8017a16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017a1a:	1a9b      	subs	r3, r3, r2
 8017a1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017a20:	ec51 0b10 	vmov	r0, r1, d0
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	bfd6      	itet	le
 8017a28:	460a      	movle	r2, r1
 8017a2a:	462a      	movgt	r2, r5
 8017a2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017a30:	468b      	mov	fp, r1
 8017a32:	462f      	mov	r7, r5
 8017a34:	bfd4      	ite	le
 8017a36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8017a3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017a3e:	4620      	mov	r0, r4
 8017a40:	ee10 2a10 	vmov	r2, s0
 8017a44:	465b      	mov	r3, fp
 8017a46:	4639      	mov	r1, r7
 8017a48:	f7e8 ff00 	bl	800084c <__aeabi_ddiv>
 8017a4c:	ec41 0b10 	vmov	d0, r0, r1
 8017a50:	b003      	add	sp, #12
 8017a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a56 <__copybits>:
 8017a56:	3901      	subs	r1, #1
 8017a58:	b570      	push	{r4, r5, r6, lr}
 8017a5a:	1149      	asrs	r1, r1, #5
 8017a5c:	6914      	ldr	r4, [r2, #16]
 8017a5e:	3101      	adds	r1, #1
 8017a60:	f102 0314 	add.w	r3, r2, #20
 8017a64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017a68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017a6c:	1f05      	subs	r5, r0, #4
 8017a6e:	42a3      	cmp	r3, r4
 8017a70:	d30c      	bcc.n	8017a8c <__copybits+0x36>
 8017a72:	1aa3      	subs	r3, r4, r2
 8017a74:	3b11      	subs	r3, #17
 8017a76:	f023 0303 	bic.w	r3, r3, #3
 8017a7a:	3211      	adds	r2, #17
 8017a7c:	42a2      	cmp	r2, r4
 8017a7e:	bf88      	it	hi
 8017a80:	2300      	movhi	r3, #0
 8017a82:	4418      	add	r0, r3
 8017a84:	2300      	movs	r3, #0
 8017a86:	4288      	cmp	r0, r1
 8017a88:	d305      	bcc.n	8017a96 <__copybits+0x40>
 8017a8a:	bd70      	pop	{r4, r5, r6, pc}
 8017a8c:	f853 6b04 	ldr.w	r6, [r3], #4
 8017a90:	f845 6f04 	str.w	r6, [r5, #4]!
 8017a94:	e7eb      	b.n	8017a6e <__copybits+0x18>
 8017a96:	f840 3b04 	str.w	r3, [r0], #4
 8017a9a:	e7f4      	b.n	8017a86 <__copybits+0x30>

08017a9c <__any_on>:
 8017a9c:	f100 0214 	add.w	r2, r0, #20
 8017aa0:	6900      	ldr	r0, [r0, #16]
 8017aa2:	114b      	asrs	r3, r1, #5
 8017aa4:	4298      	cmp	r0, r3
 8017aa6:	b510      	push	{r4, lr}
 8017aa8:	db11      	blt.n	8017ace <__any_on+0x32>
 8017aaa:	dd0a      	ble.n	8017ac2 <__any_on+0x26>
 8017aac:	f011 011f 	ands.w	r1, r1, #31
 8017ab0:	d007      	beq.n	8017ac2 <__any_on+0x26>
 8017ab2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017ab6:	fa24 f001 	lsr.w	r0, r4, r1
 8017aba:	fa00 f101 	lsl.w	r1, r0, r1
 8017abe:	428c      	cmp	r4, r1
 8017ac0:	d10b      	bne.n	8017ada <__any_on+0x3e>
 8017ac2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017ac6:	4293      	cmp	r3, r2
 8017ac8:	d803      	bhi.n	8017ad2 <__any_on+0x36>
 8017aca:	2000      	movs	r0, #0
 8017acc:	bd10      	pop	{r4, pc}
 8017ace:	4603      	mov	r3, r0
 8017ad0:	e7f7      	b.n	8017ac2 <__any_on+0x26>
 8017ad2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017ad6:	2900      	cmp	r1, #0
 8017ad8:	d0f5      	beq.n	8017ac6 <__any_on+0x2a>
 8017ada:	2001      	movs	r0, #1
 8017adc:	e7f6      	b.n	8017acc <__any_on+0x30>

08017ade <__sread>:
 8017ade:	b510      	push	{r4, lr}
 8017ae0:	460c      	mov	r4, r1
 8017ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ae6:	f000 f8b5 	bl	8017c54 <_read_r>
 8017aea:	2800      	cmp	r0, #0
 8017aec:	bfab      	itete	ge
 8017aee:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017af0:	89a3      	ldrhlt	r3, [r4, #12]
 8017af2:	181b      	addge	r3, r3, r0
 8017af4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017af8:	bfac      	ite	ge
 8017afa:	6563      	strge	r3, [r4, #84]	; 0x54
 8017afc:	81a3      	strhlt	r3, [r4, #12]
 8017afe:	bd10      	pop	{r4, pc}

08017b00 <__swrite>:
 8017b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b04:	461f      	mov	r7, r3
 8017b06:	898b      	ldrh	r3, [r1, #12]
 8017b08:	05db      	lsls	r3, r3, #23
 8017b0a:	4605      	mov	r5, r0
 8017b0c:	460c      	mov	r4, r1
 8017b0e:	4616      	mov	r6, r2
 8017b10:	d505      	bpl.n	8017b1e <__swrite+0x1e>
 8017b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b16:	2302      	movs	r3, #2
 8017b18:	2200      	movs	r2, #0
 8017b1a:	f000 f889 	bl	8017c30 <_lseek_r>
 8017b1e:	89a3      	ldrh	r3, [r4, #12]
 8017b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017b28:	81a3      	strh	r3, [r4, #12]
 8017b2a:	4632      	mov	r2, r6
 8017b2c:	463b      	mov	r3, r7
 8017b2e:	4628      	mov	r0, r5
 8017b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b34:	f000 b8b0 	b.w	8017c98 <_write_r>

08017b38 <__sseek>:
 8017b38:	b510      	push	{r4, lr}
 8017b3a:	460c      	mov	r4, r1
 8017b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b40:	f000 f876 	bl	8017c30 <_lseek_r>
 8017b44:	1c43      	adds	r3, r0, #1
 8017b46:	89a3      	ldrh	r3, [r4, #12]
 8017b48:	bf15      	itete	ne
 8017b4a:	6560      	strne	r0, [r4, #84]	; 0x54
 8017b4c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017b50:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017b54:	81a3      	strheq	r3, [r4, #12]
 8017b56:	bf18      	it	ne
 8017b58:	81a3      	strhne	r3, [r4, #12]
 8017b5a:	bd10      	pop	{r4, pc}

08017b5c <__sclose>:
 8017b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b60:	f000 b856 	b.w	8017c10 <_close_r>

08017b64 <_realloc_r>:
 8017b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b68:	4680      	mov	r8, r0
 8017b6a:	4614      	mov	r4, r2
 8017b6c:	460e      	mov	r6, r1
 8017b6e:	b921      	cbnz	r1, 8017b7a <_realloc_r+0x16>
 8017b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b74:	4611      	mov	r1, r2
 8017b76:	f7ff b9b9 	b.w	8016eec <_malloc_r>
 8017b7a:	b92a      	cbnz	r2, 8017b88 <_realloc_r+0x24>
 8017b7c:	f000 f8d2 	bl	8017d24 <_free_r>
 8017b80:	4625      	mov	r5, r4
 8017b82:	4628      	mov	r0, r5
 8017b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b88:	f000 f918 	bl	8017dbc <_malloc_usable_size_r>
 8017b8c:	4284      	cmp	r4, r0
 8017b8e:	4607      	mov	r7, r0
 8017b90:	d802      	bhi.n	8017b98 <_realloc_r+0x34>
 8017b92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017b96:	d812      	bhi.n	8017bbe <_realloc_r+0x5a>
 8017b98:	4621      	mov	r1, r4
 8017b9a:	4640      	mov	r0, r8
 8017b9c:	f7ff f9a6 	bl	8016eec <_malloc_r>
 8017ba0:	4605      	mov	r5, r0
 8017ba2:	2800      	cmp	r0, #0
 8017ba4:	d0ed      	beq.n	8017b82 <_realloc_r+0x1e>
 8017ba6:	42bc      	cmp	r4, r7
 8017ba8:	4622      	mov	r2, r4
 8017baa:	4631      	mov	r1, r6
 8017bac:	bf28      	it	cs
 8017bae:	463a      	movcs	r2, r7
 8017bb0:	f7fd fe2a 	bl	8015808 <memcpy>
 8017bb4:	4631      	mov	r1, r6
 8017bb6:	4640      	mov	r0, r8
 8017bb8:	f000 f8b4 	bl	8017d24 <_free_r>
 8017bbc:	e7e1      	b.n	8017b82 <_realloc_r+0x1e>
 8017bbe:	4635      	mov	r5, r6
 8017bc0:	e7df      	b.n	8017b82 <_realloc_r+0x1e>

08017bc2 <__ascii_wctomb>:
 8017bc2:	b149      	cbz	r1, 8017bd8 <__ascii_wctomb+0x16>
 8017bc4:	2aff      	cmp	r2, #255	; 0xff
 8017bc6:	bf85      	ittet	hi
 8017bc8:	238a      	movhi	r3, #138	; 0x8a
 8017bca:	6003      	strhi	r3, [r0, #0]
 8017bcc:	700a      	strbls	r2, [r1, #0]
 8017bce:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017bd2:	bf98      	it	ls
 8017bd4:	2001      	movls	r0, #1
 8017bd6:	4770      	bx	lr
 8017bd8:	4608      	mov	r0, r1
 8017bda:	4770      	bx	lr

08017bdc <memmove>:
 8017bdc:	4288      	cmp	r0, r1
 8017bde:	b510      	push	{r4, lr}
 8017be0:	eb01 0402 	add.w	r4, r1, r2
 8017be4:	d902      	bls.n	8017bec <memmove+0x10>
 8017be6:	4284      	cmp	r4, r0
 8017be8:	4623      	mov	r3, r4
 8017bea:	d807      	bhi.n	8017bfc <memmove+0x20>
 8017bec:	1e43      	subs	r3, r0, #1
 8017bee:	42a1      	cmp	r1, r4
 8017bf0:	d008      	beq.n	8017c04 <memmove+0x28>
 8017bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017bf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017bfa:	e7f8      	b.n	8017bee <memmove+0x12>
 8017bfc:	4402      	add	r2, r0
 8017bfe:	4601      	mov	r1, r0
 8017c00:	428a      	cmp	r2, r1
 8017c02:	d100      	bne.n	8017c06 <memmove+0x2a>
 8017c04:	bd10      	pop	{r4, pc}
 8017c06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017c0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017c0e:	e7f7      	b.n	8017c00 <memmove+0x24>

08017c10 <_close_r>:
 8017c10:	b538      	push	{r3, r4, r5, lr}
 8017c12:	4d06      	ldr	r5, [pc, #24]	; (8017c2c <_close_r+0x1c>)
 8017c14:	2300      	movs	r3, #0
 8017c16:	4604      	mov	r4, r0
 8017c18:	4608      	mov	r0, r1
 8017c1a:	602b      	str	r3, [r5, #0]
 8017c1c:	f7ed f8c1 	bl	8004da2 <_close>
 8017c20:	1c43      	adds	r3, r0, #1
 8017c22:	d102      	bne.n	8017c2a <_close_r+0x1a>
 8017c24:	682b      	ldr	r3, [r5, #0]
 8017c26:	b103      	cbz	r3, 8017c2a <_close_r+0x1a>
 8017c28:	6023      	str	r3, [r4, #0]
 8017c2a:	bd38      	pop	{r3, r4, r5, pc}
 8017c2c:	20004070 	.word	0x20004070

08017c30 <_lseek_r>:
 8017c30:	b538      	push	{r3, r4, r5, lr}
 8017c32:	4d07      	ldr	r5, [pc, #28]	; (8017c50 <_lseek_r+0x20>)
 8017c34:	4604      	mov	r4, r0
 8017c36:	4608      	mov	r0, r1
 8017c38:	4611      	mov	r1, r2
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	602a      	str	r2, [r5, #0]
 8017c3e:	461a      	mov	r2, r3
 8017c40:	f7ed f8d6 	bl	8004df0 <_lseek>
 8017c44:	1c43      	adds	r3, r0, #1
 8017c46:	d102      	bne.n	8017c4e <_lseek_r+0x1e>
 8017c48:	682b      	ldr	r3, [r5, #0]
 8017c4a:	b103      	cbz	r3, 8017c4e <_lseek_r+0x1e>
 8017c4c:	6023      	str	r3, [r4, #0]
 8017c4e:	bd38      	pop	{r3, r4, r5, pc}
 8017c50:	20004070 	.word	0x20004070

08017c54 <_read_r>:
 8017c54:	b538      	push	{r3, r4, r5, lr}
 8017c56:	4d07      	ldr	r5, [pc, #28]	; (8017c74 <_read_r+0x20>)
 8017c58:	4604      	mov	r4, r0
 8017c5a:	4608      	mov	r0, r1
 8017c5c:	4611      	mov	r1, r2
 8017c5e:	2200      	movs	r2, #0
 8017c60:	602a      	str	r2, [r5, #0]
 8017c62:	461a      	mov	r2, r3
 8017c64:	f7ed f864 	bl	8004d30 <_read>
 8017c68:	1c43      	adds	r3, r0, #1
 8017c6a:	d102      	bne.n	8017c72 <_read_r+0x1e>
 8017c6c:	682b      	ldr	r3, [r5, #0]
 8017c6e:	b103      	cbz	r3, 8017c72 <_read_r+0x1e>
 8017c70:	6023      	str	r3, [r4, #0]
 8017c72:	bd38      	pop	{r3, r4, r5, pc}
 8017c74:	20004070 	.word	0x20004070

08017c78 <_sbrk_r>:
 8017c78:	b538      	push	{r3, r4, r5, lr}
 8017c7a:	4d06      	ldr	r5, [pc, #24]	; (8017c94 <_sbrk_r+0x1c>)
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	4604      	mov	r4, r0
 8017c80:	4608      	mov	r0, r1
 8017c82:	602b      	str	r3, [r5, #0]
 8017c84:	f7ed f8c2 	bl	8004e0c <_sbrk>
 8017c88:	1c43      	adds	r3, r0, #1
 8017c8a:	d102      	bne.n	8017c92 <_sbrk_r+0x1a>
 8017c8c:	682b      	ldr	r3, [r5, #0]
 8017c8e:	b103      	cbz	r3, 8017c92 <_sbrk_r+0x1a>
 8017c90:	6023      	str	r3, [r4, #0]
 8017c92:	bd38      	pop	{r3, r4, r5, pc}
 8017c94:	20004070 	.word	0x20004070

08017c98 <_write_r>:
 8017c98:	b538      	push	{r3, r4, r5, lr}
 8017c9a:	4d07      	ldr	r5, [pc, #28]	; (8017cb8 <_write_r+0x20>)
 8017c9c:	4604      	mov	r4, r0
 8017c9e:	4608      	mov	r0, r1
 8017ca0:	4611      	mov	r1, r2
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	602a      	str	r2, [r5, #0]
 8017ca6:	461a      	mov	r2, r3
 8017ca8:	f7ed f85f 	bl	8004d6a <_write>
 8017cac:	1c43      	adds	r3, r0, #1
 8017cae:	d102      	bne.n	8017cb6 <_write_r+0x1e>
 8017cb0:	682b      	ldr	r3, [r5, #0]
 8017cb2:	b103      	cbz	r3, 8017cb6 <_write_r+0x1e>
 8017cb4:	6023      	str	r3, [r4, #0]
 8017cb6:	bd38      	pop	{r3, r4, r5, pc}
 8017cb8:	20004070 	.word	0x20004070

08017cbc <__assert_func>:
 8017cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017cbe:	4614      	mov	r4, r2
 8017cc0:	461a      	mov	r2, r3
 8017cc2:	4b09      	ldr	r3, [pc, #36]	; (8017ce8 <__assert_func+0x2c>)
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	4605      	mov	r5, r0
 8017cc8:	68d8      	ldr	r0, [r3, #12]
 8017cca:	b14c      	cbz	r4, 8017ce0 <__assert_func+0x24>
 8017ccc:	4b07      	ldr	r3, [pc, #28]	; (8017cec <__assert_func+0x30>)
 8017cce:	9100      	str	r1, [sp, #0]
 8017cd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017cd4:	4906      	ldr	r1, [pc, #24]	; (8017cf0 <__assert_func+0x34>)
 8017cd6:	462b      	mov	r3, r5
 8017cd8:	f000 f878 	bl	8017dcc <fiprintf>
 8017cdc:	f000 f888 	bl	8017df0 <abort>
 8017ce0:	4b04      	ldr	r3, [pc, #16]	; (8017cf4 <__assert_func+0x38>)
 8017ce2:	461c      	mov	r4, r3
 8017ce4:	e7f3      	b.n	8017cce <__assert_func+0x12>
 8017ce6:	bf00      	nop
 8017ce8:	200001ec 	.word	0x200001ec
 8017cec:	0801b17c 	.word	0x0801b17c
 8017cf0:	0801b189 	.word	0x0801b189
 8017cf4:	0801b1b7 	.word	0x0801b1b7

08017cf8 <_calloc_r>:
 8017cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017cfa:	fba1 2402 	umull	r2, r4, r1, r2
 8017cfe:	b94c      	cbnz	r4, 8017d14 <_calloc_r+0x1c>
 8017d00:	4611      	mov	r1, r2
 8017d02:	9201      	str	r2, [sp, #4]
 8017d04:	f7ff f8f2 	bl	8016eec <_malloc_r>
 8017d08:	9a01      	ldr	r2, [sp, #4]
 8017d0a:	4605      	mov	r5, r0
 8017d0c:	b930      	cbnz	r0, 8017d1c <_calloc_r+0x24>
 8017d0e:	4628      	mov	r0, r5
 8017d10:	b003      	add	sp, #12
 8017d12:	bd30      	pop	{r4, r5, pc}
 8017d14:	220c      	movs	r2, #12
 8017d16:	6002      	str	r2, [r0, #0]
 8017d18:	2500      	movs	r5, #0
 8017d1a:	e7f8      	b.n	8017d0e <_calloc_r+0x16>
 8017d1c:	4621      	mov	r1, r4
 8017d1e:	f7fd fd3b 	bl	8015798 <memset>
 8017d22:	e7f4      	b.n	8017d0e <_calloc_r+0x16>

08017d24 <_free_r>:
 8017d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d26:	2900      	cmp	r1, #0
 8017d28:	d044      	beq.n	8017db4 <_free_r+0x90>
 8017d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d2e:	9001      	str	r0, [sp, #4]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	f1a1 0404 	sub.w	r4, r1, #4
 8017d36:	bfb8      	it	lt
 8017d38:	18e4      	addlt	r4, r4, r3
 8017d3a:	f7ff fa17 	bl	801716c <__malloc_lock>
 8017d3e:	4a1e      	ldr	r2, [pc, #120]	; (8017db8 <_free_r+0x94>)
 8017d40:	9801      	ldr	r0, [sp, #4]
 8017d42:	6813      	ldr	r3, [r2, #0]
 8017d44:	b933      	cbnz	r3, 8017d54 <_free_r+0x30>
 8017d46:	6063      	str	r3, [r4, #4]
 8017d48:	6014      	str	r4, [r2, #0]
 8017d4a:	b003      	add	sp, #12
 8017d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d50:	f7ff ba12 	b.w	8017178 <__malloc_unlock>
 8017d54:	42a3      	cmp	r3, r4
 8017d56:	d908      	bls.n	8017d6a <_free_r+0x46>
 8017d58:	6825      	ldr	r5, [r4, #0]
 8017d5a:	1961      	adds	r1, r4, r5
 8017d5c:	428b      	cmp	r3, r1
 8017d5e:	bf01      	itttt	eq
 8017d60:	6819      	ldreq	r1, [r3, #0]
 8017d62:	685b      	ldreq	r3, [r3, #4]
 8017d64:	1949      	addeq	r1, r1, r5
 8017d66:	6021      	streq	r1, [r4, #0]
 8017d68:	e7ed      	b.n	8017d46 <_free_r+0x22>
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	685b      	ldr	r3, [r3, #4]
 8017d6e:	b10b      	cbz	r3, 8017d74 <_free_r+0x50>
 8017d70:	42a3      	cmp	r3, r4
 8017d72:	d9fa      	bls.n	8017d6a <_free_r+0x46>
 8017d74:	6811      	ldr	r1, [r2, #0]
 8017d76:	1855      	adds	r5, r2, r1
 8017d78:	42a5      	cmp	r5, r4
 8017d7a:	d10b      	bne.n	8017d94 <_free_r+0x70>
 8017d7c:	6824      	ldr	r4, [r4, #0]
 8017d7e:	4421      	add	r1, r4
 8017d80:	1854      	adds	r4, r2, r1
 8017d82:	42a3      	cmp	r3, r4
 8017d84:	6011      	str	r1, [r2, #0]
 8017d86:	d1e0      	bne.n	8017d4a <_free_r+0x26>
 8017d88:	681c      	ldr	r4, [r3, #0]
 8017d8a:	685b      	ldr	r3, [r3, #4]
 8017d8c:	6053      	str	r3, [r2, #4]
 8017d8e:	440c      	add	r4, r1
 8017d90:	6014      	str	r4, [r2, #0]
 8017d92:	e7da      	b.n	8017d4a <_free_r+0x26>
 8017d94:	d902      	bls.n	8017d9c <_free_r+0x78>
 8017d96:	230c      	movs	r3, #12
 8017d98:	6003      	str	r3, [r0, #0]
 8017d9a:	e7d6      	b.n	8017d4a <_free_r+0x26>
 8017d9c:	6825      	ldr	r5, [r4, #0]
 8017d9e:	1961      	adds	r1, r4, r5
 8017da0:	428b      	cmp	r3, r1
 8017da2:	bf04      	itt	eq
 8017da4:	6819      	ldreq	r1, [r3, #0]
 8017da6:	685b      	ldreq	r3, [r3, #4]
 8017da8:	6063      	str	r3, [r4, #4]
 8017daa:	bf04      	itt	eq
 8017dac:	1949      	addeq	r1, r1, r5
 8017dae:	6021      	streq	r1, [r4, #0]
 8017db0:	6054      	str	r4, [r2, #4]
 8017db2:	e7ca      	b.n	8017d4a <_free_r+0x26>
 8017db4:	b003      	add	sp, #12
 8017db6:	bd30      	pop	{r4, r5, pc}
 8017db8:	20004068 	.word	0x20004068

08017dbc <_malloc_usable_size_r>:
 8017dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017dc0:	1f18      	subs	r0, r3, #4
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	bfbc      	itt	lt
 8017dc6:	580b      	ldrlt	r3, [r1, r0]
 8017dc8:	18c0      	addlt	r0, r0, r3
 8017dca:	4770      	bx	lr

08017dcc <fiprintf>:
 8017dcc:	b40e      	push	{r1, r2, r3}
 8017dce:	b503      	push	{r0, r1, lr}
 8017dd0:	4601      	mov	r1, r0
 8017dd2:	ab03      	add	r3, sp, #12
 8017dd4:	4805      	ldr	r0, [pc, #20]	; (8017dec <fiprintf+0x20>)
 8017dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017dda:	6800      	ldr	r0, [r0, #0]
 8017ddc:	9301      	str	r3, [sp, #4]
 8017dde:	f000 f837 	bl	8017e50 <_vfiprintf_r>
 8017de2:	b002      	add	sp, #8
 8017de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017de8:	b003      	add	sp, #12
 8017dea:	4770      	bx	lr
 8017dec:	200001ec 	.word	0x200001ec

08017df0 <abort>:
 8017df0:	b508      	push	{r3, lr}
 8017df2:	2006      	movs	r0, #6
 8017df4:	f000 fa88 	bl	8018308 <raise>
 8017df8:	2001      	movs	r0, #1
 8017dfa:	f7ec ff8f 	bl	8004d1c <_exit>

08017dfe <__sfputc_r>:
 8017dfe:	6893      	ldr	r3, [r2, #8]
 8017e00:	3b01      	subs	r3, #1
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	b410      	push	{r4}
 8017e06:	6093      	str	r3, [r2, #8]
 8017e08:	da08      	bge.n	8017e1c <__sfputc_r+0x1e>
 8017e0a:	6994      	ldr	r4, [r2, #24]
 8017e0c:	42a3      	cmp	r3, r4
 8017e0e:	db01      	blt.n	8017e14 <__sfputc_r+0x16>
 8017e10:	290a      	cmp	r1, #10
 8017e12:	d103      	bne.n	8017e1c <__sfputc_r+0x1e>
 8017e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e18:	f000 b934 	b.w	8018084 <__swbuf_r>
 8017e1c:	6813      	ldr	r3, [r2, #0]
 8017e1e:	1c58      	adds	r0, r3, #1
 8017e20:	6010      	str	r0, [r2, #0]
 8017e22:	7019      	strb	r1, [r3, #0]
 8017e24:	4608      	mov	r0, r1
 8017e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e2a:	4770      	bx	lr

08017e2c <__sfputs_r>:
 8017e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e2e:	4606      	mov	r6, r0
 8017e30:	460f      	mov	r7, r1
 8017e32:	4614      	mov	r4, r2
 8017e34:	18d5      	adds	r5, r2, r3
 8017e36:	42ac      	cmp	r4, r5
 8017e38:	d101      	bne.n	8017e3e <__sfputs_r+0x12>
 8017e3a:	2000      	movs	r0, #0
 8017e3c:	e007      	b.n	8017e4e <__sfputs_r+0x22>
 8017e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e42:	463a      	mov	r2, r7
 8017e44:	4630      	mov	r0, r6
 8017e46:	f7ff ffda 	bl	8017dfe <__sfputc_r>
 8017e4a:	1c43      	adds	r3, r0, #1
 8017e4c:	d1f3      	bne.n	8017e36 <__sfputs_r+0xa>
 8017e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017e50 <_vfiprintf_r>:
 8017e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e54:	460d      	mov	r5, r1
 8017e56:	b09d      	sub	sp, #116	; 0x74
 8017e58:	4614      	mov	r4, r2
 8017e5a:	4698      	mov	r8, r3
 8017e5c:	4606      	mov	r6, r0
 8017e5e:	b118      	cbz	r0, 8017e68 <_vfiprintf_r+0x18>
 8017e60:	6a03      	ldr	r3, [r0, #32]
 8017e62:	b90b      	cbnz	r3, 8017e68 <_vfiprintf_r+0x18>
 8017e64:	f7fc fdb0 	bl	80149c8 <__sinit>
 8017e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e6a:	07d9      	lsls	r1, r3, #31
 8017e6c:	d405      	bmi.n	8017e7a <_vfiprintf_r+0x2a>
 8017e6e:	89ab      	ldrh	r3, [r5, #12]
 8017e70:	059a      	lsls	r2, r3, #22
 8017e72:	d402      	bmi.n	8017e7a <_vfiprintf_r+0x2a>
 8017e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e76:	f7fd fcc5 	bl	8015804 <__retarget_lock_acquire_recursive>
 8017e7a:	89ab      	ldrh	r3, [r5, #12]
 8017e7c:	071b      	lsls	r3, r3, #28
 8017e7e:	d501      	bpl.n	8017e84 <_vfiprintf_r+0x34>
 8017e80:	692b      	ldr	r3, [r5, #16]
 8017e82:	b99b      	cbnz	r3, 8017eac <_vfiprintf_r+0x5c>
 8017e84:	4629      	mov	r1, r5
 8017e86:	4630      	mov	r0, r6
 8017e88:	f000 f93a 	bl	8018100 <__swsetup_r>
 8017e8c:	b170      	cbz	r0, 8017eac <_vfiprintf_r+0x5c>
 8017e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e90:	07dc      	lsls	r4, r3, #31
 8017e92:	d504      	bpl.n	8017e9e <_vfiprintf_r+0x4e>
 8017e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017e98:	b01d      	add	sp, #116	; 0x74
 8017e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e9e:	89ab      	ldrh	r3, [r5, #12]
 8017ea0:	0598      	lsls	r0, r3, #22
 8017ea2:	d4f7      	bmi.n	8017e94 <_vfiprintf_r+0x44>
 8017ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017ea6:	f7fd fcae 	bl	8015806 <__retarget_lock_release_recursive>
 8017eaa:	e7f3      	b.n	8017e94 <_vfiprintf_r+0x44>
 8017eac:	2300      	movs	r3, #0
 8017eae:	9309      	str	r3, [sp, #36]	; 0x24
 8017eb0:	2320      	movs	r3, #32
 8017eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8017eba:	2330      	movs	r3, #48	; 0x30
 8017ebc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018070 <_vfiprintf_r+0x220>
 8017ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017ec4:	f04f 0901 	mov.w	r9, #1
 8017ec8:	4623      	mov	r3, r4
 8017eca:	469a      	mov	sl, r3
 8017ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ed0:	b10a      	cbz	r2, 8017ed6 <_vfiprintf_r+0x86>
 8017ed2:	2a25      	cmp	r2, #37	; 0x25
 8017ed4:	d1f9      	bne.n	8017eca <_vfiprintf_r+0x7a>
 8017ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8017eda:	d00b      	beq.n	8017ef4 <_vfiprintf_r+0xa4>
 8017edc:	465b      	mov	r3, fp
 8017ede:	4622      	mov	r2, r4
 8017ee0:	4629      	mov	r1, r5
 8017ee2:	4630      	mov	r0, r6
 8017ee4:	f7ff ffa2 	bl	8017e2c <__sfputs_r>
 8017ee8:	3001      	adds	r0, #1
 8017eea:	f000 80a9 	beq.w	8018040 <_vfiprintf_r+0x1f0>
 8017eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ef0:	445a      	add	r2, fp
 8017ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8017ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	f000 80a1 	beq.w	8018040 <_vfiprintf_r+0x1f0>
 8017efe:	2300      	movs	r3, #0
 8017f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f08:	f10a 0a01 	add.w	sl, sl, #1
 8017f0c:	9304      	str	r3, [sp, #16]
 8017f0e:	9307      	str	r3, [sp, #28]
 8017f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017f14:	931a      	str	r3, [sp, #104]	; 0x68
 8017f16:	4654      	mov	r4, sl
 8017f18:	2205      	movs	r2, #5
 8017f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f1e:	4854      	ldr	r0, [pc, #336]	; (8018070 <_vfiprintf_r+0x220>)
 8017f20:	f7e8 f956 	bl	80001d0 <memchr>
 8017f24:	9a04      	ldr	r2, [sp, #16]
 8017f26:	b9d8      	cbnz	r0, 8017f60 <_vfiprintf_r+0x110>
 8017f28:	06d1      	lsls	r1, r2, #27
 8017f2a:	bf44      	itt	mi
 8017f2c:	2320      	movmi	r3, #32
 8017f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f32:	0713      	lsls	r3, r2, #28
 8017f34:	bf44      	itt	mi
 8017f36:	232b      	movmi	r3, #43	; 0x2b
 8017f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8017f40:	2b2a      	cmp	r3, #42	; 0x2a
 8017f42:	d015      	beq.n	8017f70 <_vfiprintf_r+0x120>
 8017f44:	9a07      	ldr	r2, [sp, #28]
 8017f46:	4654      	mov	r4, sl
 8017f48:	2000      	movs	r0, #0
 8017f4a:	f04f 0c0a 	mov.w	ip, #10
 8017f4e:	4621      	mov	r1, r4
 8017f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f54:	3b30      	subs	r3, #48	; 0x30
 8017f56:	2b09      	cmp	r3, #9
 8017f58:	d94d      	bls.n	8017ff6 <_vfiprintf_r+0x1a6>
 8017f5a:	b1b0      	cbz	r0, 8017f8a <_vfiprintf_r+0x13a>
 8017f5c:	9207      	str	r2, [sp, #28]
 8017f5e:	e014      	b.n	8017f8a <_vfiprintf_r+0x13a>
 8017f60:	eba0 0308 	sub.w	r3, r0, r8
 8017f64:	fa09 f303 	lsl.w	r3, r9, r3
 8017f68:	4313      	orrs	r3, r2
 8017f6a:	9304      	str	r3, [sp, #16]
 8017f6c:	46a2      	mov	sl, r4
 8017f6e:	e7d2      	b.n	8017f16 <_vfiprintf_r+0xc6>
 8017f70:	9b03      	ldr	r3, [sp, #12]
 8017f72:	1d19      	adds	r1, r3, #4
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	9103      	str	r1, [sp, #12]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	bfbb      	ittet	lt
 8017f7c:	425b      	neglt	r3, r3
 8017f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8017f82:	9307      	strge	r3, [sp, #28]
 8017f84:	9307      	strlt	r3, [sp, #28]
 8017f86:	bfb8      	it	lt
 8017f88:	9204      	strlt	r2, [sp, #16]
 8017f8a:	7823      	ldrb	r3, [r4, #0]
 8017f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8017f8e:	d10c      	bne.n	8017faa <_vfiprintf_r+0x15a>
 8017f90:	7863      	ldrb	r3, [r4, #1]
 8017f92:	2b2a      	cmp	r3, #42	; 0x2a
 8017f94:	d134      	bne.n	8018000 <_vfiprintf_r+0x1b0>
 8017f96:	9b03      	ldr	r3, [sp, #12]
 8017f98:	1d1a      	adds	r2, r3, #4
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	9203      	str	r2, [sp, #12]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	bfb8      	it	lt
 8017fa2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017fa6:	3402      	adds	r4, #2
 8017fa8:	9305      	str	r3, [sp, #20]
 8017faa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018080 <_vfiprintf_r+0x230>
 8017fae:	7821      	ldrb	r1, [r4, #0]
 8017fb0:	2203      	movs	r2, #3
 8017fb2:	4650      	mov	r0, sl
 8017fb4:	f7e8 f90c 	bl	80001d0 <memchr>
 8017fb8:	b138      	cbz	r0, 8017fca <_vfiprintf_r+0x17a>
 8017fba:	9b04      	ldr	r3, [sp, #16]
 8017fbc:	eba0 000a 	sub.w	r0, r0, sl
 8017fc0:	2240      	movs	r2, #64	; 0x40
 8017fc2:	4082      	lsls	r2, r0
 8017fc4:	4313      	orrs	r3, r2
 8017fc6:	3401      	adds	r4, #1
 8017fc8:	9304      	str	r3, [sp, #16]
 8017fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fce:	4829      	ldr	r0, [pc, #164]	; (8018074 <_vfiprintf_r+0x224>)
 8017fd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017fd4:	2206      	movs	r2, #6
 8017fd6:	f7e8 f8fb 	bl	80001d0 <memchr>
 8017fda:	2800      	cmp	r0, #0
 8017fdc:	d03f      	beq.n	801805e <_vfiprintf_r+0x20e>
 8017fde:	4b26      	ldr	r3, [pc, #152]	; (8018078 <_vfiprintf_r+0x228>)
 8017fe0:	bb1b      	cbnz	r3, 801802a <_vfiprintf_r+0x1da>
 8017fe2:	9b03      	ldr	r3, [sp, #12]
 8017fe4:	3307      	adds	r3, #7
 8017fe6:	f023 0307 	bic.w	r3, r3, #7
 8017fea:	3308      	adds	r3, #8
 8017fec:	9303      	str	r3, [sp, #12]
 8017fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ff0:	443b      	add	r3, r7
 8017ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ff4:	e768      	b.n	8017ec8 <_vfiprintf_r+0x78>
 8017ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ffa:	460c      	mov	r4, r1
 8017ffc:	2001      	movs	r0, #1
 8017ffe:	e7a6      	b.n	8017f4e <_vfiprintf_r+0xfe>
 8018000:	2300      	movs	r3, #0
 8018002:	3401      	adds	r4, #1
 8018004:	9305      	str	r3, [sp, #20]
 8018006:	4619      	mov	r1, r3
 8018008:	f04f 0c0a 	mov.w	ip, #10
 801800c:	4620      	mov	r0, r4
 801800e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018012:	3a30      	subs	r2, #48	; 0x30
 8018014:	2a09      	cmp	r2, #9
 8018016:	d903      	bls.n	8018020 <_vfiprintf_r+0x1d0>
 8018018:	2b00      	cmp	r3, #0
 801801a:	d0c6      	beq.n	8017faa <_vfiprintf_r+0x15a>
 801801c:	9105      	str	r1, [sp, #20]
 801801e:	e7c4      	b.n	8017faa <_vfiprintf_r+0x15a>
 8018020:	fb0c 2101 	mla	r1, ip, r1, r2
 8018024:	4604      	mov	r4, r0
 8018026:	2301      	movs	r3, #1
 8018028:	e7f0      	b.n	801800c <_vfiprintf_r+0x1bc>
 801802a:	ab03      	add	r3, sp, #12
 801802c:	9300      	str	r3, [sp, #0]
 801802e:	462a      	mov	r2, r5
 8018030:	4b12      	ldr	r3, [pc, #72]	; (801807c <_vfiprintf_r+0x22c>)
 8018032:	a904      	add	r1, sp, #16
 8018034:	4630      	mov	r0, r6
 8018036:	f7fb fe57 	bl	8013ce8 <_printf_float>
 801803a:	4607      	mov	r7, r0
 801803c:	1c78      	adds	r0, r7, #1
 801803e:	d1d6      	bne.n	8017fee <_vfiprintf_r+0x19e>
 8018040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018042:	07d9      	lsls	r1, r3, #31
 8018044:	d405      	bmi.n	8018052 <_vfiprintf_r+0x202>
 8018046:	89ab      	ldrh	r3, [r5, #12]
 8018048:	059a      	lsls	r2, r3, #22
 801804a:	d402      	bmi.n	8018052 <_vfiprintf_r+0x202>
 801804c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801804e:	f7fd fbda 	bl	8015806 <__retarget_lock_release_recursive>
 8018052:	89ab      	ldrh	r3, [r5, #12]
 8018054:	065b      	lsls	r3, r3, #25
 8018056:	f53f af1d 	bmi.w	8017e94 <_vfiprintf_r+0x44>
 801805a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801805c:	e71c      	b.n	8017e98 <_vfiprintf_r+0x48>
 801805e:	ab03      	add	r3, sp, #12
 8018060:	9300      	str	r3, [sp, #0]
 8018062:	462a      	mov	r2, r5
 8018064:	4b05      	ldr	r3, [pc, #20]	; (801807c <_vfiprintf_r+0x22c>)
 8018066:	a904      	add	r1, sp, #16
 8018068:	4630      	mov	r0, r6
 801806a:	f7fc f8e1 	bl	8014230 <_printf_i>
 801806e:	e7e4      	b.n	801803a <_vfiprintf_r+0x1ea>
 8018070:	0801b016 	.word	0x0801b016
 8018074:	0801b020 	.word	0x0801b020
 8018078:	08013ce9 	.word	0x08013ce9
 801807c:	08017e2d 	.word	0x08017e2d
 8018080:	0801b01c 	.word	0x0801b01c

08018084 <__swbuf_r>:
 8018084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018086:	460e      	mov	r6, r1
 8018088:	4614      	mov	r4, r2
 801808a:	4605      	mov	r5, r0
 801808c:	b118      	cbz	r0, 8018096 <__swbuf_r+0x12>
 801808e:	6a03      	ldr	r3, [r0, #32]
 8018090:	b90b      	cbnz	r3, 8018096 <__swbuf_r+0x12>
 8018092:	f7fc fc99 	bl	80149c8 <__sinit>
 8018096:	69a3      	ldr	r3, [r4, #24]
 8018098:	60a3      	str	r3, [r4, #8]
 801809a:	89a3      	ldrh	r3, [r4, #12]
 801809c:	071a      	lsls	r2, r3, #28
 801809e:	d525      	bpl.n	80180ec <__swbuf_r+0x68>
 80180a0:	6923      	ldr	r3, [r4, #16]
 80180a2:	b31b      	cbz	r3, 80180ec <__swbuf_r+0x68>
 80180a4:	6823      	ldr	r3, [r4, #0]
 80180a6:	6922      	ldr	r2, [r4, #16]
 80180a8:	1a98      	subs	r0, r3, r2
 80180aa:	6963      	ldr	r3, [r4, #20]
 80180ac:	b2f6      	uxtb	r6, r6
 80180ae:	4283      	cmp	r3, r0
 80180b0:	4637      	mov	r7, r6
 80180b2:	dc04      	bgt.n	80180be <__swbuf_r+0x3a>
 80180b4:	4621      	mov	r1, r4
 80180b6:	4628      	mov	r0, r5
 80180b8:	f7ff f830 	bl	801711c <_fflush_r>
 80180bc:	b9e0      	cbnz	r0, 80180f8 <__swbuf_r+0x74>
 80180be:	68a3      	ldr	r3, [r4, #8]
 80180c0:	3b01      	subs	r3, #1
 80180c2:	60a3      	str	r3, [r4, #8]
 80180c4:	6823      	ldr	r3, [r4, #0]
 80180c6:	1c5a      	adds	r2, r3, #1
 80180c8:	6022      	str	r2, [r4, #0]
 80180ca:	701e      	strb	r6, [r3, #0]
 80180cc:	6962      	ldr	r2, [r4, #20]
 80180ce:	1c43      	adds	r3, r0, #1
 80180d0:	429a      	cmp	r2, r3
 80180d2:	d004      	beq.n	80180de <__swbuf_r+0x5a>
 80180d4:	89a3      	ldrh	r3, [r4, #12]
 80180d6:	07db      	lsls	r3, r3, #31
 80180d8:	d506      	bpl.n	80180e8 <__swbuf_r+0x64>
 80180da:	2e0a      	cmp	r6, #10
 80180dc:	d104      	bne.n	80180e8 <__swbuf_r+0x64>
 80180de:	4621      	mov	r1, r4
 80180e0:	4628      	mov	r0, r5
 80180e2:	f7ff f81b 	bl	801711c <_fflush_r>
 80180e6:	b938      	cbnz	r0, 80180f8 <__swbuf_r+0x74>
 80180e8:	4638      	mov	r0, r7
 80180ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180ec:	4621      	mov	r1, r4
 80180ee:	4628      	mov	r0, r5
 80180f0:	f000 f806 	bl	8018100 <__swsetup_r>
 80180f4:	2800      	cmp	r0, #0
 80180f6:	d0d5      	beq.n	80180a4 <__swbuf_r+0x20>
 80180f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80180fc:	e7f4      	b.n	80180e8 <__swbuf_r+0x64>
	...

08018100 <__swsetup_r>:
 8018100:	b538      	push	{r3, r4, r5, lr}
 8018102:	4b2a      	ldr	r3, [pc, #168]	; (80181ac <__swsetup_r+0xac>)
 8018104:	4605      	mov	r5, r0
 8018106:	6818      	ldr	r0, [r3, #0]
 8018108:	460c      	mov	r4, r1
 801810a:	b118      	cbz	r0, 8018114 <__swsetup_r+0x14>
 801810c:	6a03      	ldr	r3, [r0, #32]
 801810e:	b90b      	cbnz	r3, 8018114 <__swsetup_r+0x14>
 8018110:	f7fc fc5a 	bl	80149c8 <__sinit>
 8018114:	89a3      	ldrh	r3, [r4, #12]
 8018116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801811a:	0718      	lsls	r0, r3, #28
 801811c:	d422      	bmi.n	8018164 <__swsetup_r+0x64>
 801811e:	06d9      	lsls	r1, r3, #27
 8018120:	d407      	bmi.n	8018132 <__swsetup_r+0x32>
 8018122:	2309      	movs	r3, #9
 8018124:	602b      	str	r3, [r5, #0]
 8018126:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801812a:	81a3      	strh	r3, [r4, #12]
 801812c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018130:	e034      	b.n	801819c <__swsetup_r+0x9c>
 8018132:	0758      	lsls	r0, r3, #29
 8018134:	d512      	bpl.n	801815c <__swsetup_r+0x5c>
 8018136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018138:	b141      	cbz	r1, 801814c <__swsetup_r+0x4c>
 801813a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801813e:	4299      	cmp	r1, r3
 8018140:	d002      	beq.n	8018148 <__swsetup_r+0x48>
 8018142:	4628      	mov	r0, r5
 8018144:	f7ff fdee 	bl	8017d24 <_free_r>
 8018148:	2300      	movs	r3, #0
 801814a:	6363      	str	r3, [r4, #52]	; 0x34
 801814c:	89a3      	ldrh	r3, [r4, #12]
 801814e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018152:	81a3      	strh	r3, [r4, #12]
 8018154:	2300      	movs	r3, #0
 8018156:	6063      	str	r3, [r4, #4]
 8018158:	6923      	ldr	r3, [r4, #16]
 801815a:	6023      	str	r3, [r4, #0]
 801815c:	89a3      	ldrh	r3, [r4, #12]
 801815e:	f043 0308 	orr.w	r3, r3, #8
 8018162:	81a3      	strh	r3, [r4, #12]
 8018164:	6923      	ldr	r3, [r4, #16]
 8018166:	b94b      	cbnz	r3, 801817c <__swsetup_r+0x7c>
 8018168:	89a3      	ldrh	r3, [r4, #12]
 801816a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801816e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018172:	d003      	beq.n	801817c <__swsetup_r+0x7c>
 8018174:	4621      	mov	r1, r4
 8018176:	4628      	mov	r0, r5
 8018178:	f000 f840 	bl	80181fc <__smakebuf_r>
 801817c:	89a0      	ldrh	r0, [r4, #12]
 801817e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018182:	f010 0301 	ands.w	r3, r0, #1
 8018186:	d00a      	beq.n	801819e <__swsetup_r+0x9e>
 8018188:	2300      	movs	r3, #0
 801818a:	60a3      	str	r3, [r4, #8]
 801818c:	6963      	ldr	r3, [r4, #20]
 801818e:	425b      	negs	r3, r3
 8018190:	61a3      	str	r3, [r4, #24]
 8018192:	6923      	ldr	r3, [r4, #16]
 8018194:	b943      	cbnz	r3, 80181a8 <__swsetup_r+0xa8>
 8018196:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801819a:	d1c4      	bne.n	8018126 <__swsetup_r+0x26>
 801819c:	bd38      	pop	{r3, r4, r5, pc}
 801819e:	0781      	lsls	r1, r0, #30
 80181a0:	bf58      	it	pl
 80181a2:	6963      	ldrpl	r3, [r4, #20]
 80181a4:	60a3      	str	r3, [r4, #8]
 80181a6:	e7f4      	b.n	8018192 <__swsetup_r+0x92>
 80181a8:	2000      	movs	r0, #0
 80181aa:	e7f7      	b.n	801819c <__swsetup_r+0x9c>
 80181ac:	200001ec 	.word	0x200001ec

080181b0 <__swhatbuf_r>:
 80181b0:	b570      	push	{r4, r5, r6, lr}
 80181b2:	460c      	mov	r4, r1
 80181b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181b8:	2900      	cmp	r1, #0
 80181ba:	b096      	sub	sp, #88	; 0x58
 80181bc:	4615      	mov	r5, r2
 80181be:	461e      	mov	r6, r3
 80181c0:	da0d      	bge.n	80181de <__swhatbuf_r+0x2e>
 80181c2:	89a3      	ldrh	r3, [r4, #12]
 80181c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80181c8:	f04f 0100 	mov.w	r1, #0
 80181cc:	bf0c      	ite	eq
 80181ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80181d2:	2340      	movne	r3, #64	; 0x40
 80181d4:	2000      	movs	r0, #0
 80181d6:	6031      	str	r1, [r6, #0]
 80181d8:	602b      	str	r3, [r5, #0]
 80181da:	b016      	add	sp, #88	; 0x58
 80181dc:	bd70      	pop	{r4, r5, r6, pc}
 80181de:	466a      	mov	r2, sp
 80181e0:	f000 f848 	bl	8018274 <_fstat_r>
 80181e4:	2800      	cmp	r0, #0
 80181e6:	dbec      	blt.n	80181c2 <__swhatbuf_r+0x12>
 80181e8:	9901      	ldr	r1, [sp, #4]
 80181ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80181ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80181f2:	4259      	negs	r1, r3
 80181f4:	4159      	adcs	r1, r3
 80181f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80181fa:	e7eb      	b.n	80181d4 <__swhatbuf_r+0x24>

080181fc <__smakebuf_r>:
 80181fc:	898b      	ldrh	r3, [r1, #12]
 80181fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018200:	079d      	lsls	r5, r3, #30
 8018202:	4606      	mov	r6, r0
 8018204:	460c      	mov	r4, r1
 8018206:	d507      	bpl.n	8018218 <__smakebuf_r+0x1c>
 8018208:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801820c:	6023      	str	r3, [r4, #0]
 801820e:	6123      	str	r3, [r4, #16]
 8018210:	2301      	movs	r3, #1
 8018212:	6163      	str	r3, [r4, #20]
 8018214:	b002      	add	sp, #8
 8018216:	bd70      	pop	{r4, r5, r6, pc}
 8018218:	ab01      	add	r3, sp, #4
 801821a:	466a      	mov	r2, sp
 801821c:	f7ff ffc8 	bl	80181b0 <__swhatbuf_r>
 8018220:	9900      	ldr	r1, [sp, #0]
 8018222:	4605      	mov	r5, r0
 8018224:	4630      	mov	r0, r6
 8018226:	f7fe fe61 	bl	8016eec <_malloc_r>
 801822a:	b948      	cbnz	r0, 8018240 <__smakebuf_r+0x44>
 801822c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018230:	059a      	lsls	r2, r3, #22
 8018232:	d4ef      	bmi.n	8018214 <__smakebuf_r+0x18>
 8018234:	f023 0303 	bic.w	r3, r3, #3
 8018238:	f043 0302 	orr.w	r3, r3, #2
 801823c:	81a3      	strh	r3, [r4, #12]
 801823e:	e7e3      	b.n	8018208 <__smakebuf_r+0xc>
 8018240:	89a3      	ldrh	r3, [r4, #12]
 8018242:	6020      	str	r0, [r4, #0]
 8018244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018248:	81a3      	strh	r3, [r4, #12]
 801824a:	9b00      	ldr	r3, [sp, #0]
 801824c:	6163      	str	r3, [r4, #20]
 801824e:	9b01      	ldr	r3, [sp, #4]
 8018250:	6120      	str	r0, [r4, #16]
 8018252:	b15b      	cbz	r3, 801826c <__smakebuf_r+0x70>
 8018254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018258:	4630      	mov	r0, r6
 801825a:	f000 f81d 	bl	8018298 <_isatty_r>
 801825e:	b128      	cbz	r0, 801826c <__smakebuf_r+0x70>
 8018260:	89a3      	ldrh	r3, [r4, #12]
 8018262:	f023 0303 	bic.w	r3, r3, #3
 8018266:	f043 0301 	orr.w	r3, r3, #1
 801826a:	81a3      	strh	r3, [r4, #12]
 801826c:	89a3      	ldrh	r3, [r4, #12]
 801826e:	431d      	orrs	r5, r3
 8018270:	81a5      	strh	r5, [r4, #12]
 8018272:	e7cf      	b.n	8018214 <__smakebuf_r+0x18>

08018274 <_fstat_r>:
 8018274:	b538      	push	{r3, r4, r5, lr}
 8018276:	4d07      	ldr	r5, [pc, #28]	; (8018294 <_fstat_r+0x20>)
 8018278:	2300      	movs	r3, #0
 801827a:	4604      	mov	r4, r0
 801827c:	4608      	mov	r0, r1
 801827e:	4611      	mov	r1, r2
 8018280:	602b      	str	r3, [r5, #0]
 8018282:	f7ec fd9a 	bl	8004dba <_fstat>
 8018286:	1c43      	adds	r3, r0, #1
 8018288:	d102      	bne.n	8018290 <_fstat_r+0x1c>
 801828a:	682b      	ldr	r3, [r5, #0]
 801828c:	b103      	cbz	r3, 8018290 <_fstat_r+0x1c>
 801828e:	6023      	str	r3, [r4, #0]
 8018290:	bd38      	pop	{r3, r4, r5, pc}
 8018292:	bf00      	nop
 8018294:	20004070 	.word	0x20004070

08018298 <_isatty_r>:
 8018298:	b538      	push	{r3, r4, r5, lr}
 801829a:	4d06      	ldr	r5, [pc, #24]	; (80182b4 <_isatty_r+0x1c>)
 801829c:	2300      	movs	r3, #0
 801829e:	4604      	mov	r4, r0
 80182a0:	4608      	mov	r0, r1
 80182a2:	602b      	str	r3, [r5, #0]
 80182a4:	f7ec fd99 	bl	8004dda <_isatty>
 80182a8:	1c43      	adds	r3, r0, #1
 80182aa:	d102      	bne.n	80182b2 <_isatty_r+0x1a>
 80182ac:	682b      	ldr	r3, [r5, #0]
 80182ae:	b103      	cbz	r3, 80182b2 <_isatty_r+0x1a>
 80182b0:	6023      	str	r3, [r4, #0]
 80182b2:	bd38      	pop	{r3, r4, r5, pc}
 80182b4:	20004070 	.word	0x20004070

080182b8 <_raise_r>:
 80182b8:	291f      	cmp	r1, #31
 80182ba:	b538      	push	{r3, r4, r5, lr}
 80182bc:	4604      	mov	r4, r0
 80182be:	460d      	mov	r5, r1
 80182c0:	d904      	bls.n	80182cc <_raise_r+0x14>
 80182c2:	2316      	movs	r3, #22
 80182c4:	6003      	str	r3, [r0, #0]
 80182c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182ca:	bd38      	pop	{r3, r4, r5, pc}
 80182cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80182ce:	b112      	cbz	r2, 80182d6 <_raise_r+0x1e>
 80182d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80182d4:	b94b      	cbnz	r3, 80182ea <_raise_r+0x32>
 80182d6:	4620      	mov	r0, r4
 80182d8:	f000 f830 	bl	801833c <_getpid_r>
 80182dc:	462a      	mov	r2, r5
 80182de:	4601      	mov	r1, r0
 80182e0:	4620      	mov	r0, r4
 80182e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80182e6:	f000 b817 	b.w	8018318 <_kill_r>
 80182ea:	2b01      	cmp	r3, #1
 80182ec:	d00a      	beq.n	8018304 <_raise_r+0x4c>
 80182ee:	1c59      	adds	r1, r3, #1
 80182f0:	d103      	bne.n	80182fa <_raise_r+0x42>
 80182f2:	2316      	movs	r3, #22
 80182f4:	6003      	str	r3, [r0, #0]
 80182f6:	2001      	movs	r0, #1
 80182f8:	e7e7      	b.n	80182ca <_raise_r+0x12>
 80182fa:	2400      	movs	r4, #0
 80182fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018300:	4628      	mov	r0, r5
 8018302:	4798      	blx	r3
 8018304:	2000      	movs	r0, #0
 8018306:	e7e0      	b.n	80182ca <_raise_r+0x12>

08018308 <raise>:
 8018308:	4b02      	ldr	r3, [pc, #8]	; (8018314 <raise+0xc>)
 801830a:	4601      	mov	r1, r0
 801830c:	6818      	ldr	r0, [r3, #0]
 801830e:	f7ff bfd3 	b.w	80182b8 <_raise_r>
 8018312:	bf00      	nop
 8018314:	200001ec 	.word	0x200001ec

08018318 <_kill_r>:
 8018318:	b538      	push	{r3, r4, r5, lr}
 801831a:	4d07      	ldr	r5, [pc, #28]	; (8018338 <_kill_r+0x20>)
 801831c:	2300      	movs	r3, #0
 801831e:	4604      	mov	r4, r0
 8018320:	4608      	mov	r0, r1
 8018322:	4611      	mov	r1, r2
 8018324:	602b      	str	r3, [r5, #0]
 8018326:	f7ec fce9 	bl	8004cfc <_kill>
 801832a:	1c43      	adds	r3, r0, #1
 801832c:	d102      	bne.n	8018334 <_kill_r+0x1c>
 801832e:	682b      	ldr	r3, [r5, #0]
 8018330:	b103      	cbz	r3, 8018334 <_kill_r+0x1c>
 8018332:	6023      	str	r3, [r4, #0]
 8018334:	bd38      	pop	{r3, r4, r5, pc}
 8018336:	bf00      	nop
 8018338:	20004070 	.word	0x20004070

0801833c <_getpid_r>:
 801833c:	f7ec bcd6 	b.w	8004cec <_getpid>

08018340 <asinf>:
 8018340:	b508      	push	{r3, lr}
 8018342:	ed2d 8b02 	vpush	{d8}
 8018346:	eeb0 8a40 	vmov.f32	s16, s0
 801834a:	f000 fd0b 	bl	8018d64 <__ieee754_asinf>
 801834e:	eeb4 8a48 	vcmp.f32	s16, s16
 8018352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018356:	eef0 8a40 	vmov.f32	s17, s0
 801835a:	d615      	bvs.n	8018388 <asinf+0x48>
 801835c:	eeb0 0a48 	vmov.f32	s0, s16
 8018360:	f000 f954 	bl	801860c <fabsf>
 8018364:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018368:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801836c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018370:	dd0a      	ble.n	8018388 <asinf+0x48>
 8018372:	f7fd fa1d 	bl	80157b0 <__errno>
 8018376:	ecbd 8b02 	vpop	{d8}
 801837a:	2321      	movs	r3, #33	; 0x21
 801837c:	6003      	str	r3, [r0, #0]
 801837e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018382:	4804      	ldr	r0, [pc, #16]	; (8018394 <asinf+0x54>)
 8018384:	f7fd ba58 	b.w	8015838 <nanf>
 8018388:	eeb0 0a68 	vmov.f32	s0, s17
 801838c:	ecbd 8b02 	vpop	{d8}
 8018390:	bd08      	pop	{r3, pc}
 8018392:	bf00      	nop
 8018394:	0801b1b7 	.word	0x0801b1b7

08018398 <atan2f>:
 8018398:	f000 bdca 	b.w	8018f30 <__ieee754_atan2f>

0801839c <atan2>:
 801839c:	f000 b800 	b.w	80183a0 <__ieee754_atan2>

080183a0 <__ieee754_atan2>:
 80183a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183a4:	ec57 6b11 	vmov	r6, r7, d1
 80183a8:	4273      	negs	r3, r6
 80183aa:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8018528 <__ieee754_atan2+0x188>
 80183ae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80183b2:	4333      	orrs	r3, r6
 80183b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80183b8:	4543      	cmp	r3, r8
 80183ba:	ec51 0b10 	vmov	r0, r1, d0
 80183be:	ee11 5a10 	vmov	r5, s2
 80183c2:	d80a      	bhi.n	80183da <__ieee754_atan2+0x3a>
 80183c4:	4244      	negs	r4, r0
 80183c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80183ca:	4304      	orrs	r4, r0
 80183cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80183d0:	4544      	cmp	r4, r8
 80183d2:	ee10 9a10 	vmov	r9, s0
 80183d6:	468e      	mov	lr, r1
 80183d8:	d907      	bls.n	80183ea <__ieee754_atan2+0x4a>
 80183da:	4632      	mov	r2, r6
 80183dc:	463b      	mov	r3, r7
 80183de:	f7e7 ff55 	bl	800028c <__adddf3>
 80183e2:	ec41 0b10 	vmov	d0, r0, r1
 80183e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80183ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80183f2:	4334      	orrs	r4, r6
 80183f4:	d103      	bne.n	80183fe <__ieee754_atan2+0x5e>
 80183f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80183fa:	f000 b911 	b.w	8018620 <atan>
 80183fe:	17bc      	asrs	r4, r7, #30
 8018400:	f004 0402 	and.w	r4, r4, #2
 8018404:	ea53 0909 	orrs.w	r9, r3, r9
 8018408:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801840c:	d107      	bne.n	801841e <__ieee754_atan2+0x7e>
 801840e:	2c02      	cmp	r4, #2
 8018410:	d05f      	beq.n	80184d2 <__ieee754_atan2+0x132>
 8018412:	2c03      	cmp	r4, #3
 8018414:	d1e5      	bne.n	80183e2 <__ieee754_atan2+0x42>
 8018416:	a140      	add	r1, pc, #256	; (adr r1, 8018518 <__ieee754_atan2+0x178>)
 8018418:	e9d1 0100 	ldrd	r0, r1, [r1]
 801841c:	e7e1      	b.n	80183e2 <__ieee754_atan2+0x42>
 801841e:	4315      	orrs	r5, r2
 8018420:	d106      	bne.n	8018430 <__ieee754_atan2+0x90>
 8018422:	f1be 0f00 	cmp.w	lr, #0
 8018426:	da5f      	bge.n	80184e8 <__ieee754_atan2+0x148>
 8018428:	a13d      	add	r1, pc, #244	; (adr r1, 8018520 <__ieee754_atan2+0x180>)
 801842a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801842e:	e7d8      	b.n	80183e2 <__ieee754_atan2+0x42>
 8018430:	4542      	cmp	r2, r8
 8018432:	d10f      	bne.n	8018454 <__ieee754_atan2+0xb4>
 8018434:	4293      	cmp	r3, r2
 8018436:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801843a:	d107      	bne.n	801844c <__ieee754_atan2+0xac>
 801843c:	2c02      	cmp	r4, #2
 801843e:	d84c      	bhi.n	80184da <__ieee754_atan2+0x13a>
 8018440:	4b33      	ldr	r3, [pc, #204]	; (8018510 <__ieee754_atan2+0x170>)
 8018442:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018446:	e9d3 0100 	ldrd	r0, r1, [r3]
 801844a:	e7ca      	b.n	80183e2 <__ieee754_atan2+0x42>
 801844c:	2c02      	cmp	r4, #2
 801844e:	d848      	bhi.n	80184e2 <__ieee754_atan2+0x142>
 8018450:	4b30      	ldr	r3, [pc, #192]	; (8018514 <__ieee754_atan2+0x174>)
 8018452:	e7f6      	b.n	8018442 <__ieee754_atan2+0xa2>
 8018454:	4543      	cmp	r3, r8
 8018456:	d0e4      	beq.n	8018422 <__ieee754_atan2+0x82>
 8018458:	1a9b      	subs	r3, r3, r2
 801845a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801845e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018462:	da1e      	bge.n	80184a2 <__ieee754_atan2+0x102>
 8018464:	2f00      	cmp	r7, #0
 8018466:	da01      	bge.n	801846c <__ieee754_atan2+0xcc>
 8018468:	323c      	adds	r2, #60	; 0x3c
 801846a:	db1e      	blt.n	80184aa <__ieee754_atan2+0x10a>
 801846c:	4632      	mov	r2, r6
 801846e:	463b      	mov	r3, r7
 8018470:	f7e8 f9ec 	bl	800084c <__aeabi_ddiv>
 8018474:	ec41 0b10 	vmov	d0, r0, r1
 8018478:	f000 fab8 	bl	80189ec <fabs>
 801847c:	f000 f8d0 	bl	8018620 <atan>
 8018480:	ec51 0b10 	vmov	r0, r1, d0
 8018484:	2c01      	cmp	r4, #1
 8018486:	d013      	beq.n	80184b0 <__ieee754_atan2+0x110>
 8018488:	2c02      	cmp	r4, #2
 801848a:	d015      	beq.n	80184b8 <__ieee754_atan2+0x118>
 801848c:	2c00      	cmp	r4, #0
 801848e:	d0a8      	beq.n	80183e2 <__ieee754_atan2+0x42>
 8018490:	a317      	add	r3, pc, #92	; (adr r3, 80184f0 <__ieee754_atan2+0x150>)
 8018492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018496:	f7e7 fef7 	bl	8000288 <__aeabi_dsub>
 801849a:	a317      	add	r3, pc, #92	; (adr r3, 80184f8 <__ieee754_atan2+0x158>)
 801849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184a0:	e014      	b.n	80184cc <__ieee754_atan2+0x12c>
 80184a2:	a117      	add	r1, pc, #92	; (adr r1, 8018500 <__ieee754_atan2+0x160>)
 80184a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184a8:	e7ec      	b.n	8018484 <__ieee754_atan2+0xe4>
 80184aa:	2000      	movs	r0, #0
 80184ac:	2100      	movs	r1, #0
 80184ae:	e7e9      	b.n	8018484 <__ieee754_atan2+0xe4>
 80184b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80184b4:	4619      	mov	r1, r3
 80184b6:	e794      	b.n	80183e2 <__ieee754_atan2+0x42>
 80184b8:	a30d      	add	r3, pc, #52	; (adr r3, 80184f0 <__ieee754_atan2+0x150>)
 80184ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184be:	f7e7 fee3 	bl	8000288 <__aeabi_dsub>
 80184c2:	4602      	mov	r2, r0
 80184c4:	460b      	mov	r3, r1
 80184c6:	a10c      	add	r1, pc, #48	; (adr r1, 80184f8 <__ieee754_atan2+0x158>)
 80184c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184cc:	f7e7 fedc 	bl	8000288 <__aeabi_dsub>
 80184d0:	e787      	b.n	80183e2 <__ieee754_atan2+0x42>
 80184d2:	a109      	add	r1, pc, #36	; (adr r1, 80184f8 <__ieee754_atan2+0x158>)
 80184d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184d8:	e783      	b.n	80183e2 <__ieee754_atan2+0x42>
 80184da:	a10b      	add	r1, pc, #44	; (adr r1, 8018508 <__ieee754_atan2+0x168>)
 80184dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184e0:	e77f      	b.n	80183e2 <__ieee754_atan2+0x42>
 80184e2:	2000      	movs	r0, #0
 80184e4:	2100      	movs	r1, #0
 80184e6:	e77c      	b.n	80183e2 <__ieee754_atan2+0x42>
 80184e8:	a105      	add	r1, pc, #20	; (adr r1, 8018500 <__ieee754_atan2+0x160>)
 80184ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184ee:	e778      	b.n	80183e2 <__ieee754_atan2+0x42>
 80184f0:	33145c07 	.word	0x33145c07
 80184f4:	3ca1a626 	.word	0x3ca1a626
 80184f8:	54442d18 	.word	0x54442d18
 80184fc:	400921fb 	.word	0x400921fb
 8018500:	54442d18 	.word	0x54442d18
 8018504:	3ff921fb 	.word	0x3ff921fb
 8018508:	54442d18 	.word	0x54442d18
 801850c:	3fe921fb 	.word	0x3fe921fb
 8018510:	0801b1b8 	.word	0x0801b1b8
 8018514:	0801b1d0 	.word	0x0801b1d0
 8018518:	54442d18 	.word	0x54442d18
 801851c:	c00921fb 	.word	0xc00921fb
 8018520:	54442d18 	.word	0x54442d18
 8018524:	bff921fb 	.word	0xbff921fb
 8018528:	7ff00000 	.word	0x7ff00000

0801852c <cosf>:
 801852c:	ee10 3a10 	vmov	r3, s0
 8018530:	b507      	push	{r0, r1, r2, lr}
 8018532:	4a1e      	ldr	r2, [pc, #120]	; (80185ac <cosf+0x80>)
 8018534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018538:	4293      	cmp	r3, r2
 801853a:	dc06      	bgt.n	801854a <cosf+0x1e>
 801853c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80185b0 <cosf+0x84>
 8018540:	b003      	add	sp, #12
 8018542:	f85d eb04 	ldr.w	lr, [sp], #4
 8018546:	f000 ba87 	b.w	8018a58 <__kernel_cosf>
 801854a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801854e:	db04      	blt.n	801855a <cosf+0x2e>
 8018550:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018554:	b003      	add	sp, #12
 8018556:	f85d fb04 	ldr.w	pc, [sp], #4
 801855a:	4668      	mov	r0, sp
 801855c:	f000 ff68 	bl	8019430 <__ieee754_rem_pio2f>
 8018560:	f000 0003 	and.w	r0, r0, #3
 8018564:	2801      	cmp	r0, #1
 8018566:	d009      	beq.n	801857c <cosf+0x50>
 8018568:	2802      	cmp	r0, #2
 801856a:	d010      	beq.n	801858e <cosf+0x62>
 801856c:	b9b0      	cbnz	r0, 801859c <cosf+0x70>
 801856e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018572:	ed9d 0a00 	vldr	s0, [sp]
 8018576:	f000 fa6f 	bl	8018a58 <__kernel_cosf>
 801857a:	e7eb      	b.n	8018554 <cosf+0x28>
 801857c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018580:	ed9d 0a00 	vldr	s0, [sp]
 8018584:	f000 fac6 	bl	8018b14 <__kernel_sinf>
 8018588:	eeb1 0a40 	vneg.f32	s0, s0
 801858c:	e7e2      	b.n	8018554 <cosf+0x28>
 801858e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018592:	ed9d 0a00 	vldr	s0, [sp]
 8018596:	f000 fa5f 	bl	8018a58 <__kernel_cosf>
 801859a:	e7f5      	b.n	8018588 <cosf+0x5c>
 801859c:	eddd 0a01 	vldr	s1, [sp, #4]
 80185a0:	ed9d 0a00 	vldr	s0, [sp]
 80185a4:	2001      	movs	r0, #1
 80185a6:	f000 fab5 	bl	8018b14 <__kernel_sinf>
 80185aa:	e7d3      	b.n	8018554 <cosf+0x28>
 80185ac:	3f490fd8 	.word	0x3f490fd8
 80185b0:	00000000 	.word	0x00000000

080185b4 <sqrt>:
 80185b4:	b538      	push	{r3, r4, r5, lr}
 80185b6:	ed2d 8b02 	vpush	{d8}
 80185ba:	ec55 4b10 	vmov	r4, r5, d0
 80185be:	f000 fd57 	bl	8019070 <__ieee754_sqrt>
 80185c2:	4622      	mov	r2, r4
 80185c4:	462b      	mov	r3, r5
 80185c6:	4620      	mov	r0, r4
 80185c8:	4629      	mov	r1, r5
 80185ca:	eeb0 8a40 	vmov.f32	s16, s0
 80185ce:	eef0 8a60 	vmov.f32	s17, s1
 80185d2:	f7e8 faab 	bl	8000b2c <__aeabi_dcmpun>
 80185d6:	b990      	cbnz	r0, 80185fe <sqrt+0x4a>
 80185d8:	2200      	movs	r2, #0
 80185da:	2300      	movs	r3, #0
 80185dc:	4620      	mov	r0, r4
 80185de:	4629      	mov	r1, r5
 80185e0:	f7e8 fa7c 	bl	8000adc <__aeabi_dcmplt>
 80185e4:	b158      	cbz	r0, 80185fe <sqrt+0x4a>
 80185e6:	f7fd f8e3 	bl	80157b0 <__errno>
 80185ea:	2321      	movs	r3, #33	; 0x21
 80185ec:	6003      	str	r3, [r0, #0]
 80185ee:	2200      	movs	r2, #0
 80185f0:	2300      	movs	r3, #0
 80185f2:	4610      	mov	r0, r2
 80185f4:	4619      	mov	r1, r3
 80185f6:	f7e8 f929 	bl	800084c <__aeabi_ddiv>
 80185fa:	ec41 0b18 	vmov	d8, r0, r1
 80185fe:	eeb0 0a48 	vmov.f32	s0, s16
 8018602:	eef0 0a68 	vmov.f32	s1, s17
 8018606:	ecbd 8b02 	vpop	{d8}
 801860a:	bd38      	pop	{r3, r4, r5, pc}

0801860c <fabsf>:
 801860c:	ee10 3a10 	vmov	r3, s0
 8018610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018614:	ee00 3a10 	vmov	s0, r3
 8018618:	4770      	bx	lr
 801861a:	0000      	movs	r0, r0
 801861c:	0000      	movs	r0, r0
	...

08018620 <atan>:
 8018620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018624:	ec55 4b10 	vmov	r4, r5, d0
 8018628:	4bc3      	ldr	r3, [pc, #780]	; (8018938 <atan+0x318>)
 801862a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801862e:	429e      	cmp	r6, r3
 8018630:	46ab      	mov	fp, r5
 8018632:	dd18      	ble.n	8018666 <atan+0x46>
 8018634:	4bc1      	ldr	r3, [pc, #772]	; (801893c <atan+0x31c>)
 8018636:	429e      	cmp	r6, r3
 8018638:	dc01      	bgt.n	801863e <atan+0x1e>
 801863a:	d109      	bne.n	8018650 <atan+0x30>
 801863c:	b144      	cbz	r4, 8018650 <atan+0x30>
 801863e:	4622      	mov	r2, r4
 8018640:	462b      	mov	r3, r5
 8018642:	4620      	mov	r0, r4
 8018644:	4629      	mov	r1, r5
 8018646:	f7e7 fe21 	bl	800028c <__adddf3>
 801864a:	4604      	mov	r4, r0
 801864c:	460d      	mov	r5, r1
 801864e:	e006      	b.n	801865e <atan+0x3e>
 8018650:	f1bb 0f00 	cmp.w	fp, #0
 8018654:	f300 8131 	bgt.w	80188ba <atan+0x29a>
 8018658:	a59b      	add	r5, pc, #620	; (adr r5, 80188c8 <atan+0x2a8>)
 801865a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801865e:	ec45 4b10 	vmov	d0, r4, r5
 8018662:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018666:	4bb6      	ldr	r3, [pc, #728]	; (8018940 <atan+0x320>)
 8018668:	429e      	cmp	r6, r3
 801866a:	dc14      	bgt.n	8018696 <atan+0x76>
 801866c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8018670:	429e      	cmp	r6, r3
 8018672:	dc0d      	bgt.n	8018690 <atan+0x70>
 8018674:	a396      	add	r3, pc, #600	; (adr r3, 80188d0 <atan+0x2b0>)
 8018676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801867a:	ee10 0a10 	vmov	r0, s0
 801867e:	4629      	mov	r1, r5
 8018680:	f7e7 fe04 	bl	800028c <__adddf3>
 8018684:	4baf      	ldr	r3, [pc, #700]	; (8018944 <atan+0x324>)
 8018686:	2200      	movs	r2, #0
 8018688:	f7e8 fa46 	bl	8000b18 <__aeabi_dcmpgt>
 801868c:	2800      	cmp	r0, #0
 801868e:	d1e6      	bne.n	801865e <atan+0x3e>
 8018690:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018694:	e02b      	b.n	80186ee <atan+0xce>
 8018696:	f000 f9a9 	bl	80189ec <fabs>
 801869a:	4bab      	ldr	r3, [pc, #684]	; (8018948 <atan+0x328>)
 801869c:	429e      	cmp	r6, r3
 801869e:	ec55 4b10 	vmov	r4, r5, d0
 80186a2:	f300 80bf 	bgt.w	8018824 <atan+0x204>
 80186a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80186aa:	429e      	cmp	r6, r3
 80186ac:	f300 80a0 	bgt.w	80187f0 <atan+0x1d0>
 80186b0:	ee10 2a10 	vmov	r2, s0
 80186b4:	ee10 0a10 	vmov	r0, s0
 80186b8:	462b      	mov	r3, r5
 80186ba:	4629      	mov	r1, r5
 80186bc:	f7e7 fde6 	bl	800028c <__adddf3>
 80186c0:	4ba0      	ldr	r3, [pc, #640]	; (8018944 <atan+0x324>)
 80186c2:	2200      	movs	r2, #0
 80186c4:	f7e7 fde0 	bl	8000288 <__aeabi_dsub>
 80186c8:	2200      	movs	r2, #0
 80186ca:	4606      	mov	r6, r0
 80186cc:	460f      	mov	r7, r1
 80186ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80186d2:	4620      	mov	r0, r4
 80186d4:	4629      	mov	r1, r5
 80186d6:	f7e7 fdd9 	bl	800028c <__adddf3>
 80186da:	4602      	mov	r2, r0
 80186dc:	460b      	mov	r3, r1
 80186de:	4630      	mov	r0, r6
 80186e0:	4639      	mov	r1, r7
 80186e2:	f7e8 f8b3 	bl	800084c <__aeabi_ddiv>
 80186e6:	f04f 0a00 	mov.w	sl, #0
 80186ea:	4604      	mov	r4, r0
 80186ec:	460d      	mov	r5, r1
 80186ee:	4622      	mov	r2, r4
 80186f0:	462b      	mov	r3, r5
 80186f2:	4620      	mov	r0, r4
 80186f4:	4629      	mov	r1, r5
 80186f6:	f7e7 ff7f 	bl	80005f8 <__aeabi_dmul>
 80186fa:	4602      	mov	r2, r0
 80186fc:	460b      	mov	r3, r1
 80186fe:	4680      	mov	r8, r0
 8018700:	4689      	mov	r9, r1
 8018702:	f7e7 ff79 	bl	80005f8 <__aeabi_dmul>
 8018706:	a374      	add	r3, pc, #464	; (adr r3, 80188d8 <atan+0x2b8>)
 8018708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801870c:	4606      	mov	r6, r0
 801870e:	460f      	mov	r7, r1
 8018710:	f7e7 ff72 	bl	80005f8 <__aeabi_dmul>
 8018714:	a372      	add	r3, pc, #456	; (adr r3, 80188e0 <atan+0x2c0>)
 8018716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801871a:	f7e7 fdb7 	bl	800028c <__adddf3>
 801871e:	4632      	mov	r2, r6
 8018720:	463b      	mov	r3, r7
 8018722:	f7e7 ff69 	bl	80005f8 <__aeabi_dmul>
 8018726:	a370      	add	r3, pc, #448	; (adr r3, 80188e8 <atan+0x2c8>)
 8018728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801872c:	f7e7 fdae 	bl	800028c <__adddf3>
 8018730:	4632      	mov	r2, r6
 8018732:	463b      	mov	r3, r7
 8018734:	f7e7 ff60 	bl	80005f8 <__aeabi_dmul>
 8018738:	a36d      	add	r3, pc, #436	; (adr r3, 80188f0 <atan+0x2d0>)
 801873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801873e:	f7e7 fda5 	bl	800028c <__adddf3>
 8018742:	4632      	mov	r2, r6
 8018744:	463b      	mov	r3, r7
 8018746:	f7e7 ff57 	bl	80005f8 <__aeabi_dmul>
 801874a:	a36b      	add	r3, pc, #428	; (adr r3, 80188f8 <atan+0x2d8>)
 801874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018750:	f7e7 fd9c 	bl	800028c <__adddf3>
 8018754:	4632      	mov	r2, r6
 8018756:	463b      	mov	r3, r7
 8018758:	f7e7 ff4e 	bl	80005f8 <__aeabi_dmul>
 801875c:	a368      	add	r3, pc, #416	; (adr r3, 8018900 <atan+0x2e0>)
 801875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018762:	f7e7 fd93 	bl	800028c <__adddf3>
 8018766:	4642      	mov	r2, r8
 8018768:	464b      	mov	r3, r9
 801876a:	f7e7 ff45 	bl	80005f8 <__aeabi_dmul>
 801876e:	a366      	add	r3, pc, #408	; (adr r3, 8018908 <atan+0x2e8>)
 8018770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018774:	4680      	mov	r8, r0
 8018776:	4689      	mov	r9, r1
 8018778:	4630      	mov	r0, r6
 801877a:	4639      	mov	r1, r7
 801877c:	f7e7 ff3c 	bl	80005f8 <__aeabi_dmul>
 8018780:	a363      	add	r3, pc, #396	; (adr r3, 8018910 <atan+0x2f0>)
 8018782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018786:	f7e7 fd7f 	bl	8000288 <__aeabi_dsub>
 801878a:	4632      	mov	r2, r6
 801878c:	463b      	mov	r3, r7
 801878e:	f7e7 ff33 	bl	80005f8 <__aeabi_dmul>
 8018792:	a361      	add	r3, pc, #388	; (adr r3, 8018918 <atan+0x2f8>)
 8018794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018798:	f7e7 fd76 	bl	8000288 <__aeabi_dsub>
 801879c:	4632      	mov	r2, r6
 801879e:	463b      	mov	r3, r7
 80187a0:	f7e7 ff2a 	bl	80005f8 <__aeabi_dmul>
 80187a4:	a35e      	add	r3, pc, #376	; (adr r3, 8018920 <atan+0x300>)
 80187a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187aa:	f7e7 fd6d 	bl	8000288 <__aeabi_dsub>
 80187ae:	4632      	mov	r2, r6
 80187b0:	463b      	mov	r3, r7
 80187b2:	f7e7 ff21 	bl	80005f8 <__aeabi_dmul>
 80187b6:	a35c      	add	r3, pc, #368	; (adr r3, 8018928 <atan+0x308>)
 80187b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187bc:	f7e7 fd64 	bl	8000288 <__aeabi_dsub>
 80187c0:	4632      	mov	r2, r6
 80187c2:	463b      	mov	r3, r7
 80187c4:	f7e7 ff18 	bl	80005f8 <__aeabi_dmul>
 80187c8:	4602      	mov	r2, r0
 80187ca:	460b      	mov	r3, r1
 80187cc:	4640      	mov	r0, r8
 80187ce:	4649      	mov	r1, r9
 80187d0:	f7e7 fd5c 	bl	800028c <__adddf3>
 80187d4:	4622      	mov	r2, r4
 80187d6:	462b      	mov	r3, r5
 80187d8:	f7e7 ff0e 	bl	80005f8 <__aeabi_dmul>
 80187dc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80187e0:	4602      	mov	r2, r0
 80187e2:	460b      	mov	r3, r1
 80187e4:	d14b      	bne.n	801887e <atan+0x25e>
 80187e6:	4620      	mov	r0, r4
 80187e8:	4629      	mov	r1, r5
 80187ea:	f7e7 fd4d 	bl	8000288 <__aeabi_dsub>
 80187ee:	e72c      	b.n	801864a <atan+0x2a>
 80187f0:	ee10 0a10 	vmov	r0, s0
 80187f4:	4b53      	ldr	r3, [pc, #332]	; (8018944 <atan+0x324>)
 80187f6:	2200      	movs	r2, #0
 80187f8:	4629      	mov	r1, r5
 80187fa:	f7e7 fd45 	bl	8000288 <__aeabi_dsub>
 80187fe:	4b51      	ldr	r3, [pc, #324]	; (8018944 <atan+0x324>)
 8018800:	4606      	mov	r6, r0
 8018802:	460f      	mov	r7, r1
 8018804:	2200      	movs	r2, #0
 8018806:	4620      	mov	r0, r4
 8018808:	4629      	mov	r1, r5
 801880a:	f7e7 fd3f 	bl	800028c <__adddf3>
 801880e:	4602      	mov	r2, r0
 8018810:	460b      	mov	r3, r1
 8018812:	4630      	mov	r0, r6
 8018814:	4639      	mov	r1, r7
 8018816:	f7e8 f819 	bl	800084c <__aeabi_ddiv>
 801881a:	f04f 0a01 	mov.w	sl, #1
 801881e:	4604      	mov	r4, r0
 8018820:	460d      	mov	r5, r1
 8018822:	e764      	b.n	80186ee <atan+0xce>
 8018824:	4b49      	ldr	r3, [pc, #292]	; (801894c <atan+0x32c>)
 8018826:	429e      	cmp	r6, r3
 8018828:	da1d      	bge.n	8018866 <atan+0x246>
 801882a:	ee10 0a10 	vmov	r0, s0
 801882e:	4b48      	ldr	r3, [pc, #288]	; (8018950 <atan+0x330>)
 8018830:	2200      	movs	r2, #0
 8018832:	4629      	mov	r1, r5
 8018834:	f7e7 fd28 	bl	8000288 <__aeabi_dsub>
 8018838:	4b45      	ldr	r3, [pc, #276]	; (8018950 <atan+0x330>)
 801883a:	4606      	mov	r6, r0
 801883c:	460f      	mov	r7, r1
 801883e:	2200      	movs	r2, #0
 8018840:	4620      	mov	r0, r4
 8018842:	4629      	mov	r1, r5
 8018844:	f7e7 fed8 	bl	80005f8 <__aeabi_dmul>
 8018848:	4b3e      	ldr	r3, [pc, #248]	; (8018944 <atan+0x324>)
 801884a:	2200      	movs	r2, #0
 801884c:	f7e7 fd1e 	bl	800028c <__adddf3>
 8018850:	4602      	mov	r2, r0
 8018852:	460b      	mov	r3, r1
 8018854:	4630      	mov	r0, r6
 8018856:	4639      	mov	r1, r7
 8018858:	f7e7 fff8 	bl	800084c <__aeabi_ddiv>
 801885c:	f04f 0a02 	mov.w	sl, #2
 8018860:	4604      	mov	r4, r0
 8018862:	460d      	mov	r5, r1
 8018864:	e743      	b.n	80186ee <atan+0xce>
 8018866:	462b      	mov	r3, r5
 8018868:	ee10 2a10 	vmov	r2, s0
 801886c:	4939      	ldr	r1, [pc, #228]	; (8018954 <atan+0x334>)
 801886e:	2000      	movs	r0, #0
 8018870:	f7e7 ffec 	bl	800084c <__aeabi_ddiv>
 8018874:	f04f 0a03 	mov.w	sl, #3
 8018878:	4604      	mov	r4, r0
 801887a:	460d      	mov	r5, r1
 801887c:	e737      	b.n	80186ee <atan+0xce>
 801887e:	4b36      	ldr	r3, [pc, #216]	; (8018958 <atan+0x338>)
 8018880:	4e36      	ldr	r6, [pc, #216]	; (801895c <atan+0x33c>)
 8018882:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801888a:	f7e7 fcfd 	bl	8000288 <__aeabi_dsub>
 801888e:	4622      	mov	r2, r4
 8018890:	462b      	mov	r3, r5
 8018892:	f7e7 fcf9 	bl	8000288 <__aeabi_dsub>
 8018896:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801889a:	4602      	mov	r2, r0
 801889c:	460b      	mov	r3, r1
 801889e:	e9d6 0100 	ldrd	r0, r1, [r6]
 80188a2:	f7e7 fcf1 	bl	8000288 <__aeabi_dsub>
 80188a6:	f1bb 0f00 	cmp.w	fp, #0
 80188aa:	4604      	mov	r4, r0
 80188ac:	460d      	mov	r5, r1
 80188ae:	f6bf aed6 	bge.w	801865e <atan+0x3e>
 80188b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80188b6:	461d      	mov	r5, r3
 80188b8:	e6d1      	b.n	801865e <atan+0x3e>
 80188ba:	a51d      	add	r5, pc, #116	; (adr r5, 8018930 <atan+0x310>)
 80188bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80188c0:	e6cd      	b.n	801865e <atan+0x3e>
 80188c2:	bf00      	nop
 80188c4:	f3af 8000 	nop.w
 80188c8:	54442d18 	.word	0x54442d18
 80188cc:	bff921fb 	.word	0xbff921fb
 80188d0:	8800759c 	.word	0x8800759c
 80188d4:	7e37e43c 	.word	0x7e37e43c
 80188d8:	e322da11 	.word	0xe322da11
 80188dc:	3f90ad3a 	.word	0x3f90ad3a
 80188e0:	24760deb 	.word	0x24760deb
 80188e4:	3fa97b4b 	.word	0x3fa97b4b
 80188e8:	a0d03d51 	.word	0xa0d03d51
 80188ec:	3fb10d66 	.word	0x3fb10d66
 80188f0:	c54c206e 	.word	0xc54c206e
 80188f4:	3fb745cd 	.word	0x3fb745cd
 80188f8:	920083ff 	.word	0x920083ff
 80188fc:	3fc24924 	.word	0x3fc24924
 8018900:	5555550d 	.word	0x5555550d
 8018904:	3fd55555 	.word	0x3fd55555
 8018908:	2c6a6c2f 	.word	0x2c6a6c2f
 801890c:	bfa2b444 	.word	0xbfa2b444
 8018910:	52defd9a 	.word	0x52defd9a
 8018914:	3fadde2d 	.word	0x3fadde2d
 8018918:	af749a6d 	.word	0xaf749a6d
 801891c:	3fb3b0f2 	.word	0x3fb3b0f2
 8018920:	fe231671 	.word	0xfe231671
 8018924:	3fbc71c6 	.word	0x3fbc71c6
 8018928:	9998ebc4 	.word	0x9998ebc4
 801892c:	3fc99999 	.word	0x3fc99999
 8018930:	54442d18 	.word	0x54442d18
 8018934:	3ff921fb 	.word	0x3ff921fb
 8018938:	440fffff 	.word	0x440fffff
 801893c:	7ff00000 	.word	0x7ff00000
 8018940:	3fdbffff 	.word	0x3fdbffff
 8018944:	3ff00000 	.word	0x3ff00000
 8018948:	3ff2ffff 	.word	0x3ff2ffff
 801894c:	40038000 	.word	0x40038000
 8018950:	3ff80000 	.word	0x3ff80000
 8018954:	bff00000 	.word	0xbff00000
 8018958:	0801b208 	.word	0x0801b208
 801895c:	0801b1e8 	.word	0x0801b1e8

08018960 <sinf>:
 8018960:	ee10 3a10 	vmov	r3, s0
 8018964:	b507      	push	{r0, r1, r2, lr}
 8018966:	4a1f      	ldr	r2, [pc, #124]	; (80189e4 <sinf+0x84>)
 8018968:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801896c:	4293      	cmp	r3, r2
 801896e:	dc07      	bgt.n	8018980 <sinf+0x20>
 8018970:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80189e8 <sinf+0x88>
 8018974:	2000      	movs	r0, #0
 8018976:	b003      	add	sp, #12
 8018978:	f85d eb04 	ldr.w	lr, [sp], #4
 801897c:	f000 b8ca 	b.w	8018b14 <__kernel_sinf>
 8018980:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018984:	db04      	blt.n	8018990 <sinf+0x30>
 8018986:	ee30 0a40 	vsub.f32	s0, s0, s0
 801898a:	b003      	add	sp, #12
 801898c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018990:	4668      	mov	r0, sp
 8018992:	f000 fd4d 	bl	8019430 <__ieee754_rem_pio2f>
 8018996:	f000 0003 	and.w	r0, r0, #3
 801899a:	2801      	cmp	r0, #1
 801899c:	d00a      	beq.n	80189b4 <sinf+0x54>
 801899e:	2802      	cmp	r0, #2
 80189a0:	d00f      	beq.n	80189c2 <sinf+0x62>
 80189a2:	b9c0      	cbnz	r0, 80189d6 <sinf+0x76>
 80189a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80189a8:	ed9d 0a00 	vldr	s0, [sp]
 80189ac:	2001      	movs	r0, #1
 80189ae:	f000 f8b1 	bl	8018b14 <__kernel_sinf>
 80189b2:	e7ea      	b.n	801898a <sinf+0x2a>
 80189b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80189b8:	ed9d 0a00 	vldr	s0, [sp]
 80189bc:	f000 f84c 	bl	8018a58 <__kernel_cosf>
 80189c0:	e7e3      	b.n	801898a <sinf+0x2a>
 80189c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80189c6:	ed9d 0a00 	vldr	s0, [sp]
 80189ca:	2001      	movs	r0, #1
 80189cc:	f000 f8a2 	bl	8018b14 <__kernel_sinf>
 80189d0:	eeb1 0a40 	vneg.f32	s0, s0
 80189d4:	e7d9      	b.n	801898a <sinf+0x2a>
 80189d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80189da:	ed9d 0a00 	vldr	s0, [sp]
 80189de:	f000 f83b 	bl	8018a58 <__kernel_cosf>
 80189e2:	e7f5      	b.n	80189d0 <sinf+0x70>
 80189e4:	3f490fd8 	.word	0x3f490fd8
 80189e8:	00000000 	.word	0x00000000

080189ec <fabs>:
 80189ec:	ec51 0b10 	vmov	r0, r1, d0
 80189f0:	ee10 2a10 	vmov	r2, s0
 80189f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80189f8:	ec43 2b10 	vmov	d0, r2, r3
 80189fc:	4770      	bx	lr
	...

08018a00 <tanf>:
 8018a00:	ee10 3a10 	vmov	r3, s0
 8018a04:	b507      	push	{r0, r1, r2, lr}
 8018a06:	4a12      	ldr	r2, [pc, #72]	; (8018a50 <tanf+0x50>)
 8018a08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018a0c:	4293      	cmp	r3, r2
 8018a0e:	dc07      	bgt.n	8018a20 <tanf+0x20>
 8018a10:	eddf 0a10 	vldr	s1, [pc, #64]	; 8018a54 <tanf+0x54>
 8018a14:	2001      	movs	r0, #1
 8018a16:	b003      	add	sp, #12
 8018a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a1c:	f000 b8c2 	b.w	8018ba4 <__kernel_tanf>
 8018a20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018a24:	db04      	blt.n	8018a30 <tanf+0x30>
 8018a26:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018a2a:	b003      	add	sp, #12
 8018a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018a30:	4668      	mov	r0, sp
 8018a32:	f000 fcfd 	bl	8019430 <__ieee754_rem_pio2f>
 8018a36:	0040      	lsls	r0, r0, #1
 8018a38:	f000 0002 	and.w	r0, r0, #2
 8018a3c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018a40:	ed9d 0a00 	vldr	s0, [sp]
 8018a44:	f1c0 0001 	rsb	r0, r0, #1
 8018a48:	f000 f8ac 	bl	8018ba4 <__kernel_tanf>
 8018a4c:	e7ed      	b.n	8018a2a <tanf+0x2a>
 8018a4e:	bf00      	nop
 8018a50:	3f490fda 	.word	0x3f490fda
 8018a54:	00000000 	.word	0x00000000

08018a58 <__kernel_cosf>:
 8018a58:	ee10 3a10 	vmov	r3, s0
 8018a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018a60:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8018a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018a68:	da05      	bge.n	8018a76 <__kernel_cosf+0x1e>
 8018a6a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018a6e:	ee17 2a90 	vmov	r2, s15
 8018a72:	2a00      	cmp	r2, #0
 8018a74:	d03b      	beq.n	8018aee <__kernel_cosf+0x96>
 8018a76:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018a7a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8018af4 <__kernel_cosf+0x9c>
 8018a7e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8018af8 <__kernel_cosf+0xa0>
 8018a82:	4a1e      	ldr	r2, [pc, #120]	; (8018afc <__kernel_cosf+0xa4>)
 8018a84:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018a88:	4293      	cmp	r3, r2
 8018a8a:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8018b00 <__kernel_cosf+0xa8>
 8018a8e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018a92:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8018b04 <__kernel_cosf+0xac>
 8018a96:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018a9a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8018b08 <__kernel_cosf+0xb0>
 8018a9e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018aa2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8018b0c <__kernel_cosf+0xb4>
 8018aa6:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018aaa:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8018aae:	ee26 6a07 	vmul.f32	s12, s12, s14
 8018ab2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018ab6:	eee7 0a06 	vfma.f32	s1, s14, s12
 8018aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018abe:	dc04      	bgt.n	8018aca <__kernel_cosf+0x72>
 8018ac0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018ac4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8018ac8:	4770      	bx	lr
 8018aca:	4a11      	ldr	r2, [pc, #68]	; (8018b10 <__kernel_cosf+0xb8>)
 8018acc:	4293      	cmp	r3, r2
 8018ace:	bfda      	itte	le
 8018ad0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8018ad4:	ee07 3a10 	vmovle	s14, r3
 8018ad8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8018adc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018ae0:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8018ae4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018ae8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018aec:	4770      	bx	lr
 8018aee:	eeb0 0a66 	vmov.f32	s0, s13
 8018af2:	4770      	bx	lr
 8018af4:	ad47d74e 	.word	0xad47d74e
 8018af8:	310f74f6 	.word	0x310f74f6
 8018afc:	3e999999 	.word	0x3e999999
 8018b00:	b493f27c 	.word	0xb493f27c
 8018b04:	37d00d01 	.word	0x37d00d01
 8018b08:	bab60b61 	.word	0xbab60b61
 8018b0c:	3d2aaaab 	.word	0x3d2aaaab
 8018b10:	3f480000 	.word	0x3f480000

08018b14 <__kernel_sinf>:
 8018b14:	ee10 3a10 	vmov	r3, s0
 8018b18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018b1c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8018b20:	da04      	bge.n	8018b2c <__kernel_sinf+0x18>
 8018b22:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018b26:	ee17 3a90 	vmov	r3, s15
 8018b2a:	b35b      	cbz	r3, 8018b84 <__kernel_sinf+0x70>
 8018b2c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018b30:	eddf 7a15 	vldr	s15, [pc, #84]	; 8018b88 <__kernel_sinf+0x74>
 8018b34:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8018b8c <__kernel_sinf+0x78>
 8018b38:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018b3c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8018b90 <__kernel_sinf+0x7c>
 8018b40:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018b44:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8018b94 <__kernel_sinf+0x80>
 8018b48:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018b4c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8018b98 <__kernel_sinf+0x84>
 8018b50:	ee60 6a07 	vmul.f32	s13, s0, s14
 8018b54:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018b58:	b930      	cbnz	r0, 8018b68 <__kernel_sinf+0x54>
 8018b5a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8018b9c <__kernel_sinf+0x88>
 8018b5e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018b62:	eea6 0a26 	vfma.f32	s0, s12, s13
 8018b66:	4770      	bx	lr
 8018b68:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018b6c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8018b70:	eee0 7a86 	vfma.f32	s15, s1, s12
 8018b74:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8018b78:	eddf 7a09 	vldr	s15, [pc, #36]	; 8018ba0 <__kernel_sinf+0x8c>
 8018b7c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8018b80:	ee30 0a60 	vsub.f32	s0, s0, s1
 8018b84:	4770      	bx	lr
 8018b86:	bf00      	nop
 8018b88:	2f2ec9d3 	.word	0x2f2ec9d3
 8018b8c:	b2d72f34 	.word	0xb2d72f34
 8018b90:	3638ef1b 	.word	0x3638ef1b
 8018b94:	b9500d01 	.word	0xb9500d01
 8018b98:	3c088889 	.word	0x3c088889
 8018b9c:	be2aaaab 	.word	0xbe2aaaab
 8018ba0:	3e2aaaab 	.word	0x3e2aaaab

08018ba4 <__kernel_tanf>:
 8018ba4:	b508      	push	{r3, lr}
 8018ba6:	ee10 3a10 	vmov	r3, s0
 8018baa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018bae:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8018bb2:	eef0 7a40 	vmov.f32	s15, s0
 8018bb6:	da17      	bge.n	8018be8 <__kernel_tanf+0x44>
 8018bb8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8018bbc:	ee17 1a10 	vmov	r1, s14
 8018bc0:	bb41      	cbnz	r1, 8018c14 <__kernel_tanf+0x70>
 8018bc2:	1c43      	adds	r3, r0, #1
 8018bc4:	4313      	orrs	r3, r2
 8018bc6:	d108      	bne.n	8018bda <__kernel_tanf+0x36>
 8018bc8:	f7ff fd20 	bl	801860c <fabsf>
 8018bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018bd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8018bd8:	bd08      	pop	{r3, pc}
 8018bda:	2801      	cmp	r0, #1
 8018bdc:	d0fa      	beq.n	8018bd4 <__kernel_tanf+0x30>
 8018bde:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8018be2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018be6:	e7f5      	b.n	8018bd4 <__kernel_tanf+0x30>
 8018be8:	494c      	ldr	r1, [pc, #304]	; (8018d1c <__kernel_tanf+0x178>)
 8018bea:	428a      	cmp	r2, r1
 8018bec:	db12      	blt.n	8018c14 <__kernel_tanf+0x70>
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8018d20 <__kernel_tanf+0x17c>
 8018bf4:	bfb8      	it	lt
 8018bf6:	eef1 7a40 	vneglt.f32	s15, s0
 8018bfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018bfe:	eddf 7a49 	vldr	s15, [pc, #292]	; 8018d24 <__kernel_tanf+0x180>
 8018c02:	bfb8      	it	lt
 8018c04:	eef1 0a60 	vneglt.f32	s1, s1
 8018c08:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018c0c:	eddf 0a46 	vldr	s1, [pc, #280]	; 8018d28 <__kernel_tanf+0x184>
 8018c10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018c14:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8018c18:	eddf 5a44 	vldr	s11, [pc, #272]	; 8018d2c <__kernel_tanf+0x188>
 8018c1c:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8018d30 <__kernel_tanf+0x18c>
 8018c20:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8018d34 <__kernel_tanf+0x190>
 8018c24:	493d      	ldr	r1, [pc, #244]	; (8018d1c <__kernel_tanf+0x178>)
 8018c26:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018c2a:	428a      	cmp	r2, r1
 8018c2c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8018c30:	eddf 5a41 	vldr	s11, [pc, #260]	; 8018d38 <__kernel_tanf+0x194>
 8018c34:	eee6 5a07 	vfma.f32	s11, s12, s14
 8018c38:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8018d3c <__kernel_tanf+0x198>
 8018c3c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018c40:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8018d40 <__kernel_tanf+0x19c>
 8018c44:	eee6 5a07 	vfma.f32	s11, s12, s14
 8018c48:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8018d44 <__kernel_tanf+0x1a0>
 8018c4c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018c50:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8018d48 <__kernel_tanf+0x1a4>
 8018c54:	eee7 5a05 	vfma.f32	s11, s14, s10
 8018c58:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8018d4c <__kernel_tanf+0x1a8>
 8018c5c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018c60:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8018d50 <__kernel_tanf+0x1ac>
 8018c64:	eee5 5a07 	vfma.f32	s11, s10, s14
 8018c68:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8018d54 <__kernel_tanf+0x1b0>
 8018c6c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018c70:	eddf 5a39 	vldr	s11, [pc, #228]	; 8018d58 <__kernel_tanf+0x1b4>
 8018c74:	eee5 5a07 	vfma.f32	s11, s10, s14
 8018c78:	eeb0 7a46 	vmov.f32	s14, s12
 8018c7c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8018c80:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8018c84:	eeb0 6a60 	vmov.f32	s12, s1
 8018c88:	eea7 6a05 	vfma.f32	s12, s14, s10
 8018c8c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8018d5c <__kernel_tanf+0x1b8>
 8018c90:	eee6 0a26 	vfma.f32	s1, s12, s13
 8018c94:	eee5 0a07 	vfma.f32	s1, s10, s14
 8018c98:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8018c9c:	db1d      	blt.n	8018cda <__kernel_tanf+0x136>
 8018c9e:	ee07 0a10 	vmov	s14, r0
 8018ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018ca6:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8018caa:	ee76 6a87 	vadd.f32	s13, s13, s14
 8018cae:	179b      	asrs	r3, r3, #30
 8018cb0:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8018cb4:	f003 0302 	and.w	r3, r3, #2
 8018cb8:	f1c3 0301 	rsb	r3, r3, #1
 8018cbc:	ee76 6a60 	vsub.f32	s13, s12, s1
 8018cc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018cc4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018cc8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018ccc:	ee07 3a90 	vmov	s15, r3
 8018cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018cd8:	e77c      	b.n	8018bd4 <__kernel_tanf+0x30>
 8018cda:	2801      	cmp	r0, #1
 8018cdc:	d01b      	beq.n	8018d16 <__kernel_tanf+0x172>
 8018cde:	4b20      	ldr	r3, [pc, #128]	; (8018d60 <__kernel_tanf+0x1bc>)
 8018ce0:	ee16 2a90 	vmov	r2, s13
 8018ce4:	401a      	ands	r2, r3
 8018ce6:	ee05 2a90 	vmov	s11, r2
 8018cea:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8018cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018cf2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018cf6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8018cfa:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8018cfe:	ee16 2a10 	vmov	r2, s12
 8018d02:	4013      	ands	r3, r2
 8018d04:	ee07 3a90 	vmov	s15, r3
 8018d08:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018d0c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8018d10:	eee7 7a06 	vfma.f32	s15, s14, s12
 8018d14:	e75e      	b.n	8018bd4 <__kernel_tanf+0x30>
 8018d16:	eef0 7a66 	vmov.f32	s15, s13
 8018d1a:	e75b      	b.n	8018bd4 <__kernel_tanf+0x30>
 8018d1c:	3f2ca140 	.word	0x3f2ca140
 8018d20:	3f490fda 	.word	0x3f490fda
 8018d24:	33222168 	.word	0x33222168
 8018d28:	00000000 	.word	0x00000000
 8018d2c:	b79bae5f 	.word	0xb79bae5f
 8018d30:	38a3f445 	.word	0x38a3f445
 8018d34:	37d95384 	.word	0x37d95384
 8018d38:	3a1a26c8 	.word	0x3a1a26c8
 8018d3c:	3b6b6916 	.word	0x3b6b6916
 8018d40:	3cb327a4 	.word	0x3cb327a4
 8018d44:	3e088889 	.word	0x3e088889
 8018d48:	3895c07a 	.word	0x3895c07a
 8018d4c:	398137b9 	.word	0x398137b9
 8018d50:	3abede48 	.word	0x3abede48
 8018d54:	3c11371f 	.word	0x3c11371f
 8018d58:	3d5d0dd1 	.word	0x3d5d0dd1
 8018d5c:	3eaaaaab 	.word	0x3eaaaaab
 8018d60:	fffff000 	.word	0xfffff000

08018d64 <__ieee754_asinf>:
 8018d64:	b538      	push	{r3, r4, r5, lr}
 8018d66:	ee10 5a10 	vmov	r5, s0
 8018d6a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8018d6e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8018d72:	ed2d 8b04 	vpush	{d8-d9}
 8018d76:	d10c      	bne.n	8018d92 <__ieee754_asinf+0x2e>
 8018d78:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8018ef0 <__ieee754_asinf+0x18c>
 8018d7c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8018ef4 <__ieee754_asinf+0x190>
 8018d80:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018d84:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018d88:	eeb0 0a67 	vmov.f32	s0, s15
 8018d8c:	ecbd 8b04 	vpop	{d8-d9}
 8018d90:	bd38      	pop	{r3, r4, r5, pc}
 8018d92:	dd04      	ble.n	8018d9e <__ieee754_asinf+0x3a>
 8018d94:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018d98:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018d9c:	e7f6      	b.n	8018d8c <__ieee754_asinf+0x28>
 8018d9e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8018da2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018da6:	da0b      	bge.n	8018dc0 <__ieee754_asinf+0x5c>
 8018da8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8018dac:	da52      	bge.n	8018e54 <__ieee754_asinf+0xf0>
 8018dae:	eddf 7a52 	vldr	s15, [pc, #328]	; 8018ef8 <__ieee754_asinf+0x194>
 8018db2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018db6:	eef4 7ae8 	vcmpe.f32	s15, s17
 8018dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dbe:	dce5      	bgt.n	8018d8c <__ieee754_asinf+0x28>
 8018dc0:	f7ff fc24 	bl	801860c <fabsf>
 8018dc4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8018dc8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018dcc:	ee20 8a27 	vmul.f32	s16, s0, s15
 8018dd0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8018efc <__ieee754_asinf+0x198>
 8018dd4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8018f00 <__ieee754_asinf+0x19c>
 8018dd8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8018f04 <__ieee754_asinf+0x1a0>
 8018ddc:	eea8 7a27 	vfma.f32	s14, s16, s15
 8018de0:	eddf 7a49 	vldr	s15, [pc, #292]	; 8018f08 <__ieee754_asinf+0x1a4>
 8018de4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018de8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8018f0c <__ieee754_asinf+0x1a8>
 8018dec:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018df0:	eddf 7a47 	vldr	s15, [pc, #284]	; 8018f10 <__ieee754_asinf+0x1ac>
 8018df4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018df8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8018f14 <__ieee754_asinf+0x1b0>
 8018dfc:	eea7 9a88 	vfma.f32	s18, s15, s16
 8018e00:	eddf 7a45 	vldr	s15, [pc, #276]	; 8018f18 <__ieee754_asinf+0x1b4>
 8018e04:	eee8 7a07 	vfma.f32	s15, s16, s14
 8018e08:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8018f1c <__ieee754_asinf+0x1b8>
 8018e0c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018e10:	eddf 7a43 	vldr	s15, [pc, #268]	; 8018f20 <__ieee754_asinf+0x1bc>
 8018e14:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018e18:	eeb0 0a48 	vmov.f32	s0, s16
 8018e1c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8018e20:	f000 fa00 	bl	8019224 <__ieee754_sqrtf>
 8018e24:	4b3f      	ldr	r3, [pc, #252]	; (8018f24 <__ieee754_asinf+0x1c0>)
 8018e26:	ee29 9a08 	vmul.f32	s18, s18, s16
 8018e2a:	429c      	cmp	r4, r3
 8018e2c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8018e30:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018e34:	dd3d      	ble.n	8018eb2 <__ieee754_asinf+0x14e>
 8018e36:	eea0 0a06 	vfma.f32	s0, s0, s12
 8018e3a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8018f28 <__ieee754_asinf+0x1c4>
 8018e3e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8018e42:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8018ef4 <__ieee754_asinf+0x190>
 8018e46:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018e4a:	2d00      	cmp	r5, #0
 8018e4c:	bfd8      	it	le
 8018e4e:	eeb1 0a40 	vnegle.f32	s0, s0
 8018e52:	e79b      	b.n	8018d8c <__ieee754_asinf+0x28>
 8018e54:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018e58:	eddf 6a29 	vldr	s13, [pc, #164]	; 8018f00 <__ieee754_asinf+0x19c>
 8018e5c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8018efc <__ieee754_asinf+0x198>
 8018e60:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8018f14 <__ieee754_asinf+0x1b0>
 8018e64:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018e68:	eddf 6a27 	vldr	s13, [pc, #156]	; 8018f08 <__ieee754_asinf+0x1a4>
 8018e6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018e70:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8018f0c <__ieee754_asinf+0x1a8>
 8018e74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018e78:	eddf 6a25 	vldr	s13, [pc, #148]	; 8018f10 <__ieee754_asinf+0x1ac>
 8018e7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018e80:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8018f04 <__ieee754_asinf+0x1a0>
 8018e84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018e88:	eddf 6a23 	vldr	s13, [pc, #140]	; 8018f18 <__ieee754_asinf+0x1b4>
 8018e8c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8018e90:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8018f1c <__ieee754_asinf+0x1b8>
 8018e94:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8018e98:	eddf 6a21 	vldr	s13, [pc, #132]	; 8018f20 <__ieee754_asinf+0x1bc>
 8018e9c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018ea4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8018ea8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8018eac:	eea0 0a27 	vfma.f32	s0, s0, s15
 8018eb0:	e76c      	b.n	8018d8c <__ieee754_asinf+0x28>
 8018eb2:	ee10 3a10 	vmov	r3, s0
 8018eb6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018eba:	f023 030f 	bic.w	r3, r3, #15
 8018ebe:	ee07 3a10 	vmov	s14, r3
 8018ec2:	eea7 8a47 	vfms.f32	s16, s14, s14
 8018ec6:	ee70 7a07 	vadd.f32	s15, s0, s14
 8018eca:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018ece:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8018ed2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8018ef0 <__ieee754_asinf+0x18c>
 8018ed6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8018eda:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8018ede:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8018f2c <__ieee754_asinf+0x1c8>
 8018ee2:	eeb0 6a40 	vmov.f32	s12, s0
 8018ee6:	eea7 6a66 	vfms.f32	s12, s14, s13
 8018eea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018eee:	e7aa      	b.n	8018e46 <__ieee754_asinf+0xe2>
 8018ef0:	b33bbd2e 	.word	0xb33bbd2e
 8018ef4:	3fc90fdb 	.word	0x3fc90fdb
 8018ef8:	7149f2ca 	.word	0x7149f2ca
 8018efc:	3a4f7f04 	.word	0x3a4f7f04
 8018f00:	3811ef08 	.word	0x3811ef08
 8018f04:	3e2aaaab 	.word	0x3e2aaaab
 8018f08:	bd241146 	.word	0xbd241146
 8018f0c:	3e4e0aa8 	.word	0x3e4e0aa8
 8018f10:	bea6b090 	.word	0xbea6b090
 8018f14:	3d9dc62e 	.word	0x3d9dc62e
 8018f18:	bf303361 	.word	0xbf303361
 8018f1c:	4001572d 	.word	0x4001572d
 8018f20:	c019d139 	.word	0xc019d139
 8018f24:	3f799999 	.word	0x3f799999
 8018f28:	333bbd2e 	.word	0x333bbd2e
 8018f2c:	3f490fdb 	.word	0x3f490fdb

08018f30 <__ieee754_atan2f>:
 8018f30:	ee10 2a90 	vmov	r2, s1
 8018f34:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8018f38:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018f3c:	b510      	push	{r4, lr}
 8018f3e:	eef0 7a40 	vmov.f32	s15, s0
 8018f42:	dc06      	bgt.n	8018f52 <__ieee754_atan2f+0x22>
 8018f44:	ee10 0a10 	vmov	r0, s0
 8018f48:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8018f4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018f50:	dd04      	ble.n	8018f5c <__ieee754_atan2f+0x2c>
 8018f52:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8018f56:	eeb0 0a67 	vmov.f32	s0, s15
 8018f5a:	bd10      	pop	{r4, pc}
 8018f5c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018f60:	d103      	bne.n	8018f6a <__ieee754_atan2f+0x3a>
 8018f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f66:	f000 bb8f 	b.w	8019688 <atanf>
 8018f6a:	1794      	asrs	r4, r2, #30
 8018f6c:	f004 0402 	and.w	r4, r4, #2
 8018f70:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8018f74:	b943      	cbnz	r3, 8018f88 <__ieee754_atan2f+0x58>
 8018f76:	2c02      	cmp	r4, #2
 8018f78:	d05e      	beq.n	8019038 <__ieee754_atan2f+0x108>
 8018f7a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801904c <__ieee754_atan2f+0x11c>
 8018f7e:	2c03      	cmp	r4, #3
 8018f80:	bf08      	it	eq
 8018f82:	eef0 7a47 	vmoveq.f32	s15, s14
 8018f86:	e7e6      	b.n	8018f56 <__ieee754_atan2f+0x26>
 8018f88:	b941      	cbnz	r1, 8018f9c <__ieee754_atan2f+0x6c>
 8018f8a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8019050 <__ieee754_atan2f+0x120>
 8018f8e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8019054 <__ieee754_atan2f+0x124>
 8018f92:	2800      	cmp	r0, #0
 8018f94:	bfb8      	it	lt
 8018f96:	eef0 7a47 	vmovlt.f32	s15, s14
 8018f9a:	e7dc      	b.n	8018f56 <__ieee754_atan2f+0x26>
 8018f9c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018fa0:	d110      	bne.n	8018fc4 <__ieee754_atan2f+0x94>
 8018fa2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018fa6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8018faa:	d107      	bne.n	8018fbc <__ieee754_atan2f+0x8c>
 8018fac:	2c02      	cmp	r4, #2
 8018fae:	d846      	bhi.n	801903e <__ieee754_atan2f+0x10e>
 8018fb0:	4b29      	ldr	r3, [pc, #164]	; (8019058 <__ieee754_atan2f+0x128>)
 8018fb2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018fb6:	edd3 7a00 	vldr	s15, [r3]
 8018fba:	e7cc      	b.n	8018f56 <__ieee754_atan2f+0x26>
 8018fbc:	2c02      	cmp	r4, #2
 8018fbe:	d841      	bhi.n	8019044 <__ieee754_atan2f+0x114>
 8018fc0:	4b26      	ldr	r3, [pc, #152]	; (801905c <__ieee754_atan2f+0x12c>)
 8018fc2:	e7f6      	b.n	8018fb2 <__ieee754_atan2f+0x82>
 8018fc4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018fc8:	d0df      	beq.n	8018f8a <__ieee754_atan2f+0x5a>
 8018fca:	1a5b      	subs	r3, r3, r1
 8018fcc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8018fd0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8018fd4:	da1a      	bge.n	801900c <__ieee754_atan2f+0xdc>
 8018fd6:	2a00      	cmp	r2, #0
 8018fd8:	da01      	bge.n	8018fde <__ieee754_atan2f+0xae>
 8018fda:	313c      	adds	r1, #60	; 0x3c
 8018fdc:	db19      	blt.n	8019012 <__ieee754_atan2f+0xe2>
 8018fde:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8018fe2:	f7ff fb13 	bl	801860c <fabsf>
 8018fe6:	f000 fb4f 	bl	8019688 <atanf>
 8018fea:	eef0 7a40 	vmov.f32	s15, s0
 8018fee:	2c01      	cmp	r4, #1
 8018ff0:	d012      	beq.n	8019018 <__ieee754_atan2f+0xe8>
 8018ff2:	2c02      	cmp	r4, #2
 8018ff4:	d017      	beq.n	8019026 <__ieee754_atan2f+0xf6>
 8018ff6:	2c00      	cmp	r4, #0
 8018ff8:	d0ad      	beq.n	8018f56 <__ieee754_atan2f+0x26>
 8018ffa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8019060 <__ieee754_atan2f+0x130>
 8018ffe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019002:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8019064 <__ieee754_atan2f+0x134>
 8019006:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801900a:	e7a4      	b.n	8018f56 <__ieee754_atan2f+0x26>
 801900c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8019050 <__ieee754_atan2f+0x120>
 8019010:	e7ed      	b.n	8018fee <__ieee754_atan2f+0xbe>
 8019012:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019068 <__ieee754_atan2f+0x138>
 8019016:	e7ea      	b.n	8018fee <__ieee754_atan2f+0xbe>
 8019018:	ee17 3a90 	vmov	r3, s15
 801901c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019020:	ee07 3a90 	vmov	s15, r3
 8019024:	e797      	b.n	8018f56 <__ieee754_atan2f+0x26>
 8019026:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8019060 <__ieee754_atan2f+0x130>
 801902a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801902e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8019064 <__ieee754_atan2f+0x134>
 8019032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019036:	e78e      	b.n	8018f56 <__ieee754_atan2f+0x26>
 8019038:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8019064 <__ieee754_atan2f+0x134>
 801903c:	e78b      	b.n	8018f56 <__ieee754_atan2f+0x26>
 801903e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801906c <__ieee754_atan2f+0x13c>
 8019042:	e788      	b.n	8018f56 <__ieee754_atan2f+0x26>
 8019044:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019068 <__ieee754_atan2f+0x138>
 8019048:	e785      	b.n	8018f56 <__ieee754_atan2f+0x26>
 801904a:	bf00      	nop
 801904c:	c0490fdb 	.word	0xc0490fdb
 8019050:	3fc90fdb 	.word	0x3fc90fdb
 8019054:	bfc90fdb 	.word	0xbfc90fdb
 8019058:	0801b228 	.word	0x0801b228
 801905c:	0801b234 	.word	0x0801b234
 8019060:	33bbbd2e 	.word	0x33bbbd2e
 8019064:	40490fdb 	.word	0x40490fdb
 8019068:	00000000 	.word	0x00000000
 801906c:	3f490fdb 	.word	0x3f490fdb

08019070 <__ieee754_sqrt>:
 8019070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019074:	ec55 4b10 	vmov	r4, r5, d0
 8019078:	4e67      	ldr	r6, [pc, #412]	; (8019218 <__ieee754_sqrt+0x1a8>)
 801907a:	43ae      	bics	r6, r5
 801907c:	ee10 0a10 	vmov	r0, s0
 8019080:	ee10 2a10 	vmov	r2, s0
 8019084:	4629      	mov	r1, r5
 8019086:	462b      	mov	r3, r5
 8019088:	d10d      	bne.n	80190a6 <__ieee754_sqrt+0x36>
 801908a:	f7e7 fab5 	bl	80005f8 <__aeabi_dmul>
 801908e:	4602      	mov	r2, r0
 8019090:	460b      	mov	r3, r1
 8019092:	4620      	mov	r0, r4
 8019094:	4629      	mov	r1, r5
 8019096:	f7e7 f8f9 	bl	800028c <__adddf3>
 801909a:	4604      	mov	r4, r0
 801909c:	460d      	mov	r5, r1
 801909e:	ec45 4b10 	vmov	d0, r4, r5
 80190a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190a6:	2d00      	cmp	r5, #0
 80190a8:	dc0b      	bgt.n	80190c2 <__ieee754_sqrt+0x52>
 80190aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80190ae:	4326      	orrs	r6, r4
 80190b0:	d0f5      	beq.n	801909e <__ieee754_sqrt+0x2e>
 80190b2:	b135      	cbz	r5, 80190c2 <__ieee754_sqrt+0x52>
 80190b4:	f7e7 f8e8 	bl	8000288 <__aeabi_dsub>
 80190b8:	4602      	mov	r2, r0
 80190ba:	460b      	mov	r3, r1
 80190bc:	f7e7 fbc6 	bl	800084c <__aeabi_ddiv>
 80190c0:	e7eb      	b.n	801909a <__ieee754_sqrt+0x2a>
 80190c2:	1509      	asrs	r1, r1, #20
 80190c4:	f000 808d 	beq.w	80191e2 <__ieee754_sqrt+0x172>
 80190c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80190cc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80190d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80190d4:	07c9      	lsls	r1, r1, #31
 80190d6:	bf5c      	itt	pl
 80190d8:	005b      	lslpl	r3, r3, #1
 80190da:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80190de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80190e2:	bf58      	it	pl
 80190e4:	0052      	lslpl	r2, r2, #1
 80190e6:	2500      	movs	r5, #0
 80190e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80190ec:	1076      	asrs	r6, r6, #1
 80190ee:	0052      	lsls	r2, r2, #1
 80190f0:	f04f 0e16 	mov.w	lr, #22
 80190f4:	46ac      	mov	ip, r5
 80190f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80190fa:	eb0c 0001 	add.w	r0, ip, r1
 80190fe:	4298      	cmp	r0, r3
 8019100:	bfde      	ittt	le
 8019102:	1a1b      	suble	r3, r3, r0
 8019104:	eb00 0c01 	addle.w	ip, r0, r1
 8019108:	186d      	addle	r5, r5, r1
 801910a:	005b      	lsls	r3, r3, #1
 801910c:	f1be 0e01 	subs.w	lr, lr, #1
 8019110:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019114:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019118:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801911c:	d1ed      	bne.n	80190fa <__ieee754_sqrt+0x8a>
 801911e:	4674      	mov	r4, lr
 8019120:	2720      	movs	r7, #32
 8019122:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019126:	4563      	cmp	r3, ip
 8019128:	eb01 000e 	add.w	r0, r1, lr
 801912c:	dc02      	bgt.n	8019134 <__ieee754_sqrt+0xc4>
 801912e:	d113      	bne.n	8019158 <__ieee754_sqrt+0xe8>
 8019130:	4290      	cmp	r0, r2
 8019132:	d811      	bhi.n	8019158 <__ieee754_sqrt+0xe8>
 8019134:	2800      	cmp	r0, #0
 8019136:	eb00 0e01 	add.w	lr, r0, r1
 801913a:	da57      	bge.n	80191ec <__ieee754_sqrt+0x17c>
 801913c:	f1be 0f00 	cmp.w	lr, #0
 8019140:	db54      	blt.n	80191ec <__ieee754_sqrt+0x17c>
 8019142:	f10c 0801 	add.w	r8, ip, #1
 8019146:	eba3 030c 	sub.w	r3, r3, ip
 801914a:	4290      	cmp	r0, r2
 801914c:	bf88      	it	hi
 801914e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8019152:	1a12      	subs	r2, r2, r0
 8019154:	440c      	add	r4, r1
 8019156:	46c4      	mov	ip, r8
 8019158:	005b      	lsls	r3, r3, #1
 801915a:	3f01      	subs	r7, #1
 801915c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8019160:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019164:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8019168:	d1dd      	bne.n	8019126 <__ieee754_sqrt+0xb6>
 801916a:	4313      	orrs	r3, r2
 801916c:	d01b      	beq.n	80191a6 <__ieee754_sqrt+0x136>
 801916e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801921c <__ieee754_sqrt+0x1ac>
 8019172:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8019220 <__ieee754_sqrt+0x1b0>
 8019176:	e9da 0100 	ldrd	r0, r1, [sl]
 801917a:	e9db 2300 	ldrd	r2, r3, [fp]
 801917e:	f7e7 f883 	bl	8000288 <__aeabi_dsub>
 8019182:	e9da 8900 	ldrd	r8, r9, [sl]
 8019186:	4602      	mov	r2, r0
 8019188:	460b      	mov	r3, r1
 801918a:	4640      	mov	r0, r8
 801918c:	4649      	mov	r1, r9
 801918e:	f7e7 fcaf 	bl	8000af0 <__aeabi_dcmple>
 8019192:	b140      	cbz	r0, 80191a6 <__ieee754_sqrt+0x136>
 8019194:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8019198:	e9da 0100 	ldrd	r0, r1, [sl]
 801919c:	e9db 2300 	ldrd	r2, r3, [fp]
 80191a0:	d126      	bne.n	80191f0 <__ieee754_sqrt+0x180>
 80191a2:	3501      	adds	r5, #1
 80191a4:	463c      	mov	r4, r7
 80191a6:	106a      	asrs	r2, r5, #1
 80191a8:	0863      	lsrs	r3, r4, #1
 80191aa:	07e9      	lsls	r1, r5, #31
 80191ac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80191b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80191b4:	bf48      	it	mi
 80191b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80191ba:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80191be:	461c      	mov	r4, r3
 80191c0:	e76d      	b.n	801909e <__ieee754_sqrt+0x2e>
 80191c2:	0ad3      	lsrs	r3, r2, #11
 80191c4:	3815      	subs	r0, #21
 80191c6:	0552      	lsls	r2, r2, #21
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d0fa      	beq.n	80191c2 <__ieee754_sqrt+0x152>
 80191cc:	02dc      	lsls	r4, r3, #11
 80191ce:	d50a      	bpl.n	80191e6 <__ieee754_sqrt+0x176>
 80191d0:	f1c1 0420 	rsb	r4, r1, #32
 80191d4:	fa22 f404 	lsr.w	r4, r2, r4
 80191d8:	1e4d      	subs	r5, r1, #1
 80191da:	408a      	lsls	r2, r1
 80191dc:	4323      	orrs	r3, r4
 80191de:	1b41      	subs	r1, r0, r5
 80191e0:	e772      	b.n	80190c8 <__ieee754_sqrt+0x58>
 80191e2:	4608      	mov	r0, r1
 80191e4:	e7f0      	b.n	80191c8 <__ieee754_sqrt+0x158>
 80191e6:	005b      	lsls	r3, r3, #1
 80191e8:	3101      	adds	r1, #1
 80191ea:	e7ef      	b.n	80191cc <__ieee754_sqrt+0x15c>
 80191ec:	46e0      	mov	r8, ip
 80191ee:	e7aa      	b.n	8019146 <__ieee754_sqrt+0xd6>
 80191f0:	f7e7 f84c 	bl	800028c <__adddf3>
 80191f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80191f8:	4602      	mov	r2, r0
 80191fa:	460b      	mov	r3, r1
 80191fc:	4640      	mov	r0, r8
 80191fe:	4649      	mov	r1, r9
 8019200:	f7e7 fc6c 	bl	8000adc <__aeabi_dcmplt>
 8019204:	b120      	cbz	r0, 8019210 <__ieee754_sqrt+0x1a0>
 8019206:	1ca0      	adds	r0, r4, #2
 8019208:	bf08      	it	eq
 801920a:	3501      	addeq	r5, #1
 801920c:	3402      	adds	r4, #2
 801920e:	e7ca      	b.n	80191a6 <__ieee754_sqrt+0x136>
 8019210:	3401      	adds	r4, #1
 8019212:	f024 0401 	bic.w	r4, r4, #1
 8019216:	e7c6      	b.n	80191a6 <__ieee754_sqrt+0x136>
 8019218:	7ff00000 	.word	0x7ff00000
 801921c:	200001f0 	.word	0x200001f0
 8019220:	200001f8 	.word	0x200001f8

08019224 <__ieee754_sqrtf>:
 8019224:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019228:	4770      	bx	lr
 801922a:	0000      	movs	r0, r0
 801922c:	0000      	movs	r0, r0
	...

08019230 <ceil>:
 8019230:	ec51 0b10 	vmov	r0, r1, d0
 8019234:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801923c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8019240:	2e13      	cmp	r6, #19
 8019242:	ee10 5a10 	vmov	r5, s0
 8019246:	ee10 8a10 	vmov	r8, s0
 801924a:	460c      	mov	r4, r1
 801924c:	dc2f      	bgt.n	80192ae <ceil+0x7e>
 801924e:	2e00      	cmp	r6, #0
 8019250:	da12      	bge.n	8019278 <ceil+0x48>
 8019252:	a333      	add	r3, pc, #204	; (adr r3, 8019320 <ceil+0xf0>)
 8019254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019258:	f7e7 f818 	bl	800028c <__adddf3>
 801925c:	2200      	movs	r2, #0
 801925e:	2300      	movs	r3, #0
 8019260:	f7e7 fc5a 	bl	8000b18 <__aeabi_dcmpgt>
 8019264:	b128      	cbz	r0, 8019272 <ceil+0x42>
 8019266:	2c00      	cmp	r4, #0
 8019268:	db51      	blt.n	801930e <ceil+0xde>
 801926a:	432c      	orrs	r4, r5
 801926c:	d053      	beq.n	8019316 <ceil+0xe6>
 801926e:	4c2e      	ldr	r4, [pc, #184]	; (8019328 <ceil+0xf8>)
 8019270:	2500      	movs	r5, #0
 8019272:	4621      	mov	r1, r4
 8019274:	4628      	mov	r0, r5
 8019276:	e024      	b.n	80192c2 <ceil+0x92>
 8019278:	4f2c      	ldr	r7, [pc, #176]	; (801932c <ceil+0xfc>)
 801927a:	4137      	asrs	r7, r6
 801927c:	ea01 0307 	and.w	r3, r1, r7
 8019280:	4303      	orrs	r3, r0
 8019282:	d01e      	beq.n	80192c2 <ceil+0x92>
 8019284:	a326      	add	r3, pc, #152	; (adr r3, 8019320 <ceil+0xf0>)
 8019286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801928a:	f7e6 ffff 	bl	800028c <__adddf3>
 801928e:	2200      	movs	r2, #0
 8019290:	2300      	movs	r3, #0
 8019292:	f7e7 fc41 	bl	8000b18 <__aeabi_dcmpgt>
 8019296:	2800      	cmp	r0, #0
 8019298:	d0eb      	beq.n	8019272 <ceil+0x42>
 801929a:	2c00      	cmp	r4, #0
 801929c:	bfc2      	ittt	gt
 801929e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80192a2:	4133      	asrgt	r3, r6
 80192a4:	18e4      	addgt	r4, r4, r3
 80192a6:	ea24 0407 	bic.w	r4, r4, r7
 80192aa:	2500      	movs	r5, #0
 80192ac:	e7e1      	b.n	8019272 <ceil+0x42>
 80192ae:	2e33      	cmp	r6, #51	; 0x33
 80192b0:	dd0b      	ble.n	80192ca <ceil+0x9a>
 80192b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80192b6:	d104      	bne.n	80192c2 <ceil+0x92>
 80192b8:	ee10 2a10 	vmov	r2, s0
 80192bc:	460b      	mov	r3, r1
 80192be:	f7e6 ffe5 	bl	800028c <__adddf3>
 80192c2:	ec41 0b10 	vmov	d0, r0, r1
 80192c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192ca:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80192ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80192d2:	40df      	lsrs	r7, r3
 80192d4:	4238      	tst	r0, r7
 80192d6:	d0f4      	beq.n	80192c2 <ceil+0x92>
 80192d8:	a311      	add	r3, pc, #68	; (adr r3, 8019320 <ceil+0xf0>)
 80192da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192de:	f7e6 ffd5 	bl	800028c <__adddf3>
 80192e2:	2200      	movs	r2, #0
 80192e4:	2300      	movs	r3, #0
 80192e6:	f7e7 fc17 	bl	8000b18 <__aeabi_dcmpgt>
 80192ea:	2800      	cmp	r0, #0
 80192ec:	d0c1      	beq.n	8019272 <ceil+0x42>
 80192ee:	2c00      	cmp	r4, #0
 80192f0:	dd0a      	ble.n	8019308 <ceil+0xd8>
 80192f2:	2e14      	cmp	r6, #20
 80192f4:	d101      	bne.n	80192fa <ceil+0xca>
 80192f6:	3401      	adds	r4, #1
 80192f8:	e006      	b.n	8019308 <ceil+0xd8>
 80192fa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80192fe:	2301      	movs	r3, #1
 8019300:	40b3      	lsls	r3, r6
 8019302:	441d      	add	r5, r3
 8019304:	45a8      	cmp	r8, r5
 8019306:	d8f6      	bhi.n	80192f6 <ceil+0xc6>
 8019308:	ea25 0507 	bic.w	r5, r5, r7
 801930c:	e7b1      	b.n	8019272 <ceil+0x42>
 801930e:	2500      	movs	r5, #0
 8019310:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019314:	e7ad      	b.n	8019272 <ceil+0x42>
 8019316:	4625      	mov	r5, r4
 8019318:	e7ab      	b.n	8019272 <ceil+0x42>
 801931a:	bf00      	nop
 801931c:	f3af 8000 	nop.w
 8019320:	8800759c 	.word	0x8800759c
 8019324:	7e37e43c 	.word	0x7e37e43c
 8019328:	3ff00000 	.word	0x3ff00000
 801932c:	000fffff 	.word	0x000fffff

08019330 <floor>:
 8019330:	ec51 0b10 	vmov	r0, r1, d0
 8019334:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801933c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8019340:	2e13      	cmp	r6, #19
 8019342:	ee10 5a10 	vmov	r5, s0
 8019346:	ee10 8a10 	vmov	r8, s0
 801934a:	460c      	mov	r4, r1
 801934c:	dc31      	bgt.n	80193b2 <floor+0x82>
 801934e:	2e00      	cmp	r6, #0
 8019350:	da14      	bge.n	801937c <floor+0x4c>
 8019352:	a333      	add	r3, pc, #204	; (adr r3, 8019420 <floor+0xf0>)
 8019354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019358:	f7e6 ff98 	bl	800028c <__adddf3>
 801935c:	2200      	movs	r2, #0
 801935e:	2300      	movs	r3, #0
 8019360:	f7e7 fbda 	bl	8000b18 <__aeabi_dcmpgt>
 8019364:	b138      	cbz	r0, 8019376 <floor+0x46>
 8019366:	2c00      	cmp	r4, #0
 8019368:	da53      	bge.n	8019412 <floor+0xe2>
 801936a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801936e:	4325      	orrs	r5, r4
 8019370:	d052      	beq.n	8019418 <floor+0xe8>
 8019372:	4c2d      	ldr	r4, [pc, #180]	; (8019428 <floor+0xf8>)
 8019374:	2500      	movs	r5, #0
 8019376:	4621      	mov	r1, r4
 8019378:	4628      	mov	r0, r5
 801937a:	e024      	b.n	80193c6 <floor+0x96>
 801937c:	4f2b      	ldr	r7, [pc, #172]	; (801942c <floor+0xfc>)
 801937e:	4137      	asrs	r7, r6
 8019380:	ea01 0307 	and.w	r3, r1, r7
 8019384:	4303      	orrs	r3, r0
 8019386:	d01e      	beq.n	80193c6 <floor+0x96>
 8019388:	a325      	add	r3, pc, #148	; (adr r3, 8019420 <floor+0xf0>)
 801938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801938e:	f7e6 ff7d 	bl	800028c <__adddf3>
 8019392:	2200      	movs	r2, #0
 8019394:	2300      	movs	r3, #0
 8019396:	f7e7 fbbf 	bl	8000b18 <__aeabi_dcmpgt>
 801939a:	2800      	cmp	r0, #0
 801939c:	d0eb      	beq.n	8019376 <floor+0x46>
 801939e:	2c00      	cmp	r4, #0
 80193a0:	bfbe      	ittt	lt
 80193a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80193a6:	4133      	asrlt	r3, r6
 80193a8:	18e4      	addlt	r4, r4, r3
 80193aa:	ea24 0407 	bic.w	r4, r4, r7
 80193ae:	2500      	movs	r5, #0
 80193b0:	e7e1      	b.n	8019376 <floor+0x46>
 80193b2:	2e33      	cmp	r6, #51	; 0x33
 80193b4:	dd0b      	ble.n	80193ce <floor+0x9e>
 80193b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80193ba:	d104      	bne.n	80193c6 <floor+0x96>
 80193bc:	ee10 2a10 	vmov	r2, s0
 80193c0:	460b      	mov	r3, r1
 80193c2:	f7e6 ff63 	bl	800028c <__adddf3>
 80193c6:	ec41 0b10 	vmov	d0, r0, r1
 80193ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193ce:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80193d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80193d6:	40df      	lsrs	r7, r3
 80193d8:	4238      	tst	r0, r7
 80193da:	d0f4      	beq.n	80193c6 <floor+0x96>
 80193dc:	a310      	add	r3, pc, #64	; (adr r3, 8019420 <floor+0xf0>)
 80193de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193e2:	f7e6 ff53 	bl	800028c <__adddf3>
 80193e6:	2200      	movs	r2, #0
 80193e8:	2300      	movs	r3, #0
 80193ea:	f7e7 fb95 	bl	8000b18 <__aeabi_dcmpgt>
 80193ee:	2800      	cmp	r0, #0
 80193f0:	d0c1      	beq.n	8019376 <floor+0x46>
 80193f2:	2c00      	cmp	r4, #0
 80193f4:	da0a      	bge.n	801940c <floor+0xdc>
 80193f6:	2e14      	cmp	r6, #20
 80193f8:	d101      	bne.n	80193fe <floor+0xce>
 80193fa:	3401      	adds	r4, #1
 80193fc:	e006      	b.n	801940c <floor+0xdc>
 80193fe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019402:	2301      	movs	r3, #1
 8019404:	40b3      	lsls	r3, r6
 8019406:	441d      	add	r5, r3
 8019408:	45a8      	cmp	r8, r5
 801940a:	d8f6      	bhi.n	80193fa <floor+0xca>
 801940c:	ea25 0507 	bic.w	r5, r5, r7
 8019410:	e7b1      	b.n	8019376 <floor+0x46>
 8019412:	2500      	movs	r5, #0
 8019414:	462c      	mov	r4, r5
 8019416:	e7ae      	b.n	8019376 <floor+0x46>
 8019418:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801941c:	e7ab      	b.n	8019376 <floor+0x46>
 801941e:	bf00      	nop
 8019420:	8800759c 	.word	0x8800759c
 8019424:	7e37e43c 	.word	0x7e37e43c
 8019428:	bff00000 	.word	0xbff00000
 801942c:	000fffff 	.word	0x000fffff

08019430 <__ieee754_rem_pio2f>:
 8019430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019432:	ee10 6a10 	vmov	r6, s0
 8019436:	4b86      	ldr	r3, [pc, #536]	; (8019650 <__ieee754_rem_pio2f+0x220>)
 8019438:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801943c:	429d      	cmp	r5, r3
 801943e:	b087      	sub	sp, #28
 8019440:	4604      	mov	r4, r0
 8019442:	dc05      	bgt.n	8019450 <__ieee754_rem_pio2f+0x20>
 8019444:	2300      	movs	r3, #0
 8019446:	ed80 0a00 	vstr	s0, [r0]
 801944a:	6043      	str	r3, [r0, #4]
 801944c:	2000      	movs	r0, #0
 801944e:	e020      	b.n	8019492 <__ieee754_rem_pio2f+0x62>
 8019450:	4b80      	ldr	r3, [pc, #512]	; (8019654 <__ieee754_rem_pio2f+0x224>)
 8019452:	429d      	cmp	r5, r3
 8019454:	dc38      	bgt.n	80194c8 <__ieee754_rem_pio2f+0x98>
 8019456:	2e00      	cmp	r6, #0
 8019458:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8019658 <__ieee754_rem_pio2f+0x228>
 801945c:	4b7f      	ldr	r3, [pc, #508]	; (801965c <__ieee754_rem_pio2f+0x22c>)
 801945e:	f025 050f 	bic.w	r5, r5, #15
 8019462:	dd18      	ble.n	8019496 <__ieee754_rem_pio2f+0x66>
 8019464:	429d      	cmp	r5, r3
 8019466:	ee70 7a47 	vsub.f32	s15, s0, s14
 801946a:	bf09      	itett	eq
 801946c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8019660 <__ieee754_rem_pio2f+0x230>
 8019470:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8019664 <__ieee754_rem_pio2f+0x234>
 8019474:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019478:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8019668 <__ieee754_rem_pio2f+0x238>
 801947c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019480:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019484:	edc0 6a00 	vstr	s13, [r0]
 8019488:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801948c:	edc0 7a01 	vstr	s15, [r0, #4]
 8019490:	2001      	movs	r0, #1
 8019492:	b007      	add	sp, #28
 8019494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019496:	429d      	cmp	r5, r3
 8019498:	ee70 7a07 	vadd.f32	s15, s0, s14
 801949c:	bf09      	itett	eq
 801949e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8019660 <__ieee754_rem_pio2f+0x230>
 80194a2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8019664 <__ieee754_rem_pio2f+0x234>
 80194a6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80194aa:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8019668 <__ieee754_rem_pio2f+0x238>
 80194ae:	ee77 6a87 	vadd.f32	s13, s15, s14
 80194b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80194b6:	edc0 6a00 	vstr	s13, [r0]
 80194ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80194be:	edc0 7a01 	vstr	s15, [r0, #4]
 80194c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80194c6:	e7e4      	b.n	8019492 <__ieee754_rem_pio2f+0x62>
 80194c8:	4b68      	ldr	r3, [pc, #416]	; (801966c <__ieee754_rem_pio2f+0x23c>)
 80194ca:	429d      	cmp	r5, r3
 80194cc:	dc71      	bgt.n	80195b2 <__ieee754_rem_pio2f+0x182>
 80194ce:	f7ff f89d 	bl	801860c <fabsf>
 80194d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8019670 <__ieee754_rem_pio2f+0x240>
 80194d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80194da:	eee0 7a07 	vfma.f32	s15, s0, s14
 80194de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80194e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80194e6:	ee17 0a90 	vmov	r0, s15
 80194ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019658 <__ieee754_rem_pio2f+0x228>
 80194ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 80194f2:	281f      	cmp	r0, #31
 80194f4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019664 <__ieee754_rem_pio2f+0x234>
 80194f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80194fc:	eeb1 6a47 	vneg.f32	s12, s14
 8019500:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019504:	ee16 2a90 	vmov	r2, s13
 8019508:	dc1c      	bgt.n	8019544 <__ieee754_rem_pio2f+0x114>
 801950a:	495a      	ldr	r1, [pc, #360]	; (8019674 <__ieee754_rem_pio2f+0x244>)
 801950c:	1e47      	subs	r7, r0, #1
 801950e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8019512:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019516:	428b      	cmp	r3, r1
 8019518:	d014      	beq.n	8019544 <__ieee754_rem_pio2f+0x114>
 801951a:	6022      	str	r2, [r4, #0]
 801951c:	ed94 7a00 	vldr	s14, [r4]
 8019520:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019524:	2e00      	cmp	r6, #0
 8019526:	ee30 0a67 	vsub.f32	s0, s0, s15
 801952a:	ed84 0a01 	vstr	s0, [r4, #4]
 801952e:	dab0      	bge.n	8019492 <__ieee754_rem_pio2f+0x62>
 8019530:	eeb1 7a47 	vneg.f32	s14, s14
 8019534:	eeb1 0a40 	vneg.f32	s0, s0
 8019538:	ed84 7a00 	vstr	s14, [r4]
 801953c:	ed84 0a01 	vstr	s0, [r4, #4]
 8019540:	4240      	negs	r0, r0
 8019542:	e7a6      	b.n	8019492 <__ieee754_rem_pio2f+0x62>
 8019544:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019548:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801954c:	2908      	cmp	r1, #8
 801954e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8019552:	dde2      	ble.n	801951a <__ieee754_rem_pio2f+0xea>
 8019554:	eddf 5a42 	vldr	s11, [pc, #264]	; 8019660 <__ieee754_rem_pio2f+0x230>
 8019558:	eef0 6a40 	vmov.f32	s13, s0
 801955c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019560:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019564:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019568:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8019668 <__ieee754_rem_pio2f+0x238>
 801956c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8019570:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8019574:	ee15 2a90 	vmov	r2, s11
 8019578:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801957c:	1a5b      	subs	r3, r3, r1
 801957e:	2b19      	cmp	r3, #25
 8019580:	dc04      	bgt.n	801958c <__ieee754_rem_pio2f+0x15c>
 8019582:	edc4 5a00 	vstr	s11, [r4]
 8019586:	eeb0 0a66 	vmov.f32	s0, s13
 801958a:	e7c7      	b.n	801951c <__ieee754_rem_pio2f+0xec>
 801958c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019678 <__ieee754_rem_pio2f+0x248>
 8019590:	eeb0 0a66 	vmov.f32	s0, s13
 8019594:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019598:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801959c:	eddf 6a37 	vldr	s13, [pc, #220]	; 801967c <__ieee754_rem_pio2f+0x24c>
 80195a0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80195a4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80195a8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80195ac:	ed84 7a00 	vstr	s14, [r4]
 80195b0:	e7b4      	b.n	801951c <__ieee754_rem_pio2f+0xec>
 80195b2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80195b6:	db06      	blt.n	80195c6 <__ieee754_rem_pio2f+0x196>
 80195b8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80195bc:	edc0 7a01 	vstr	s15, [r0, #4]
 80195c0:	edc0 7a00 	vstr	s15, [r0]
 80195c4:	e742      	b.n	801944c <__ieee754_rem_pio2f+0x1c>
 80195c6:	15ea      	asrs	r2, r5, #23
 80195c8:	3a86      	subs	r2, #134	; 0x86
 80195ca:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80195ce:	ee07 3a90 	vmov	s15, r3
 80195d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80195d6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8019680 <__ieee754_rem_pio2f+0x250>
 80195da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80195de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80195e2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80195e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80195ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80195ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80195f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80195f6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80195fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80195fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019606:	edcd 7a05 	vstr	s15, [sp, #20]
 801960a:	d11e      	bne.n	801964a <__ieee754_rem_pio2f+0x21a>
 801960c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019614:	bf14      	ite	ne
 8019616:	2302      	movne	r3, #2
 8019618:	2301      	moveq	r3, #1
 801961a:	491a      	ldr	r1, [pc, #104]	; (8019684 <__ieee754_rem_pio2f+0x254>)
 801961c:	9101      	str	r1, [sp, #4]
 801961e:	2102      	movs	r1, #2
 8019620:	9100      	str	r1, [sp, #0]
 8019622:	a803      	add	r0, sp, #12
 8019624:	4621      	mov	r1, r4
 8019626:	f000 f903 	bl	8019830 <__kernel_rem_pio2f>
 801962a:	2e00      	cmp	r6, #0
 801962c:	f6bf af31 	bge.w	8019492 <__ieee754_rem_pio2f+0x62>
 8019630:	edd4 7a00 	vldr	s15, [r4]
 8019634:	eef1 7a67 	vneg.f32	s15, s15
 8019638:	edc4 7a00 	vstr	s15, [r4]
 801963c:	edd4 7a01 	vldr	s15, [r4, #4]
 8019640:	eef1 7a67 	vneg.f32	s15, s15
 8019644:	edc4 7a01 	vstr	s15, [r4, #4]
 8019648:	e77a      	b.n	8019540 <__ieee754_rem_pio2f+0x110>
 801964a:	2303      	movs	r3, #3
 801964c:	e7e5      	b.n	801961a <__ieee754_rem_pio2f+0x1ea>
 801964e:	bf00      	nop
 8019650:	3f490fd8 	.word	0x3f490fd8
 8019654:	4016cbe3 	.word	0x4016cbe3
 8019658:	3fc90f80 	.word	0x3fc90f80
 801965c:	3fc90fd0 	.word	0x3fc90fd0
 8019660:	37354400 	.word	0x37354400
 8019664:	37354443 	.word	0x37354443
 8019668:	2e85a308 	.word	0x2e85a308
 801966c:	43490f80 	.word	0x43490f80
 8019670:	3f22f984 	.word	0x3f22f984
 8019674:	0801b240 	.word	0x0801b240
 8019678:	2e85a300 	.word	0x2e85a300
 801967c:	248d3132 	.word	0x248d3132
 8019680:	43800000 	.word	0x43800000
 8019684:	0801b2c0 	.word	0x0801b2c0

08019688 <atanf>:
 8019688:	b538      	push	{r3, r4, r5, lr}
 801968a:	ee10 5a10 	vmov	r5, s0
 801968e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8019692:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8019696:	eef0 7a40 	vmov.f32	s15, s0
 801969a:	db10      	blt.n	80196be <atanf+0x36>
 801969c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80196a0:	dd04      	ble.n	80196ac <atanf+0x24>
 80196a2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80196a6:	eeb0 0a67 	vmov.f32	s0, s15
 80196aa:	bd38      	pop	{r3, r4, r5, pc}
 80196ac:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80197e4 <atanf+0x15c>
 80196b0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80197e8 <atanf+0x160>
 80196b4:	2d00      	cmp	r5, #0
 80196b6:	bfd8      	it	le
 80196b8:	eef0 7a47 	vmovle.f32	s15, s14
 80196bc:	e7f3      	b.n	80196a6 <atanf+0x1e>
 80196be:	4b4b      	ldr	r3, [pc, #300]	; (80197ec <atanf+0x164>)
 80196c0:	429c      	cmp	r4, r3
 80196c2:	dc10      	bgt.n	80196e6 <atanf+0x5e>
 80196c4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80196c8:	da0a      	bge.n	80196e0 <atanf+0x58>
 80196ca:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80197f0 <atanf+0x168>
 80196ce:	ee30 7a07 	vadd.f32	s14, s0, s14
 80196d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80196d6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80196da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196de:	dce2      	bgt.n	80196a6 <atanf+0x1e>
 80196e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80196e4:	e013      	b.n	801970e <atanf+0x86>
 80196e6:	f7fe ff91 	bl	801860c <fabsf>
 80196ea:	4b42      	ldr	r3, [pc, #264]	; (80197f4 <atanf+0x16c>)
 80196ec:	429c      	cmp	r4, r3
 80196ee:	dc4f      	bgt.n	8019790 <atanf+0x108>
 80196f0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80196f4:	429c      	cmp	r4, r3
 80196f6:	dc41      	bgt.n	801977c <atanf+0xf4>
 80196f8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80196fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019700:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019704:	2300      	movs	r3, #0
 8019706:	ee30 0a27 	vadd.f32	s0, s0, s15
 801970a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801970e:	1c5a      	adds	r2, r3, #1
 8019710:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8019714:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80197f8 <atanf+0x170>
 8019718:	eddf 5a38 	vldr	s11, [pc, #224]	; 80197fc <atanf+0x174>
 801971c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8019800 <atanf+0x178>
 8019720:	ee66 6a06 	vmul.f32	s13, s12, s12
 8019724:	eee6 5a87 	vfma.f32	s11, s13, s14
 8019728:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8019804 <atanf+0x17c>
 801972c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019730:	eddf 5a35 	vldr	s11, [pc, #212]	; 8019808 <atanf+0x180>
 8019734:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019738:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801980c <atanf+0x184>
 801973c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019740:	eddf 5a33 	vldr	s11, [pc, #204]	; 8019810 <atanf+0x188>
 8019744:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019748:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8019814 <atanf+0x18c>
 801974c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8019750:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8019818 <atanf+0x190>
 8019754:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019758:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801981c <atanf+0x194>
 801975c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8019760:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8019820 <atanf+0x198>
 8019764:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019768:	ee27 7a26 	vmul.f32	s14, s14, s13
 801976c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8019770:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019774:	d121      	bne.n	80197ba <atanf+0x132>
 8019776:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801977a:	e794      	b.n	80196a6 <atanf+0x1e>
 801977c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019780:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019784:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019788:	2301      	movs	r3, #1
 801978a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801978e:	e7be      	b.n	801970e <atanf+0x86>
 8019790:	4b24      	ldr	r3, [pc, #144]	; (8019824 <atanf+0x19c>)
 8019792:	429c      	cmp	r4, r3
 8019794:	dc0b      	bgt.n	80197ae <atanf+0x126>
 8019796:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801979a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801979e:	eea0 7a27 	vfma.f32	s14, s0, s15
 80197a2:	2302      	movs	r3, #2
 80197a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80197a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80197ac:	e7af      	b.n	801970e <atanf+0x86>
 80197ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80197b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80197b6:	2303      	movs	r3, #3
 80197b8:	e7a9      	b.n	801970e <atanf+0x86>
 80197ba:	4a1b      	ldr	r2, [pc, #108]	; (8019828 <atanf+0x1a0>)
 80197bc:	491b      	ldr	r1, [pc, #108]	; (801982c <atanf+0x1a4>)
 80197be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80197c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80197c6:	edd3 6a00 	vldr	s13, [r3]
 80197ca:	ee37 7a66 	vsub.f32	s14, s14, s13
 80197ce:	2d00      	cmp	r5, #0
 80197d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80197d4:	edd2 7a00 	vldr	s15, [r2]
 80197d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80197dc:	bfb8      	it	lt
 80197de:	eef1 7a67 	vneglt.f32	s15, s15
 80197e2:	e760      	b.n	80196a6 <atanf+0x1e>
 80197e4:	3fc90fdb 	.word	0x3fc90fdb
 80197e8:	bfc90fdb 	.word	0xbfc90fdb
 80197ec:	3edfffff 	.word	0x3edfffff
 80197f0:	7149f2ca 	.word	0x7149f2ca
 80197f4:	3f97ffff 	.word	0x3f97ffff
 80197f8:	3c8569d7 	.word	0x3c8569d7
 80197fc:	3d4bda59 	.word	0x3d4bda59
 8019800:	bd6ef16b 	.word	0xbd6ef16b
 8019804:	3d886b35 	.word	0x3d886b35
 8019808:	3dba2e6e 	.word	0x3dba2e6e
 801980c:	3e124925 	.word	0x3e124925
 8019810:	3eaaaaab 	.word	0x3eaaaaab
 8019814:	bd15a221 	.word	0xbd15a221
 8019818:	bd9d8795 	.word	0xbd9d8795
 801981c:	bde38e38 	.word	0xbde38e38
 8019820:	be4ccccd 	.word	0xbe4ccccd
 8019824:	401bffff 	.word	0x401bffff
 8019828:	0801b5d8 	.word	0x0801b5d8
 801982c:	0801b5e8 	.word	0x0801b5e8

08019830 <__kernel_rem_pio2f>:
 8019830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019834:	ed2d 8b04 	vpush	{d8-d9}
 8019838:	b0d9      	sub	sp, #356	; 0x164
 801983a:	4688      	mov	r8, r1
 801983c:	9002      	str	r0, [sp, #8]
 801983e:	49b8      	ldr	r1, [pc, #736]	; (8019b20 <__kernel_rem_pio2f+0x2f0>)
 8019840:	9866      	ldr	r0, [sp, #408]	; 0x198
 8019842:	9301      	str	r3, [sp, #4]
 8019844:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8019848:	9901      	ldr	r1, [sp, #4]
 801984a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801984c:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8019850:	1d11      	adds	r1, r2, #4
 8019852:	db25      	blt.n	80198a0 <__kernel_rem_pio2f+0x70>
 8019854:	1ed0      	subs	r0, r2, #3
 8019856:	bf48      	it	mi
 8019858:	1d10      	addmi	r0, r2, #4
 801985a:	10c0      	asrs	r0, r0, #3
 801985c:	1c45      	adds	r5, r0, #1
 801985e:	00e9      	lsls	r1, r5, #3
 8019860:	eba0 070b 	sub.w	r7, r0, fp
 8019864:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8019b30 <__kernel_rem_pio2f+0x300>
 8019868:	9103      	str	r1, [sp, #12]
 801986a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801986e:	eb0a 0c0b 	add.w	ip, sl, fp
 8019872:	ae1c      	add	r6, sp, #112	; 0x70
 8019874:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8019878:	2400      	movs	r4, #0
 801987a:	4564      	cmp	r4, ip
 801987c:	dd12      	ble.n	80198a4 <__kernel_rem_pio2f+0x74>
 801987e:	9901      	ldr	r1, [sp, #4]
 8019880:	ac1c      	add	r4, sp, #112	; 0x70
 8019882:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019886:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801988a:	f04f 0c00 	mov.w	ip, #0
 801988e:	45d4      	cmp	ip, sl
 8019890:	dc27      	bgt.n	80198e2 <__kernel_rem_pio2f+0xb2>
 8019892:	f8dd e008 	ldr.w	lr, [sp, #8]
 8019896:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8019b30 <__kernel_rem_pio2f+0x300>
 801989a:	4627      	mov	r7, r4
 801989c:	2600      	movs	r6, #0
 801989e:	e016      	b.n	80198ce <__kernel_rem_pio2f+0x9e>
 80198a0:	2000      	movs	r0, #0
 80198a2:	e7db      	b.n	801985c <__kernel_rem_pio2f+0x2c>
 80198a4:	42e7      	cmn	r7, r4
 80198a6:	bf5d      	ittte	pl
 80198a8:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80198ac:	ee07 1a90 	vmovpl	s15, r1
 80198b0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80198b4:	eef0 7a47 	vmovmi.f32	s15, s14
 80198b8:	ece6 7a01 	vstmia	r6!, {s15}
 80198bc:	3401      	adds	r4, #1
 80198be:	e7dc      	b.n	801987a <__kernel_rem_pio2f+0x4a>
 80198c0:	ecfe 6a01 	vldmia	lr!, {s13}
 80198c4:	ed97 7a00 	vldr	s14, [r7]
 80198c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80198cc:	3601      	adds	r6, #1
 80198ce:	455e      	cmp	r6, fp
 80198d0:	f1a7 0704 	sub.w	r7, r7, #4
 80198d4:	ddf4      	ble.n	80198c0 <__kernel_rem_pio2f+0x90>
 80198d6:	ece9 7a01 	vstmia	r9!, {s15}
 80198da:	f10c 0c01 	add.w	ip, ip, #1
 80198de:	3404      	adds	r4, #4
 80198e0:	e7d5      	b.n	801988e <__kernel_rem_pio2f+0x5e>
 80198e2:	a908      	add	r1, sp, #32
 80198e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80198e8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80198ec:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8019b2c <__kernel_rem_pio2f+0x2fc>
 80198f0:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8019b28 <__kernel_rem_pio2f+0x2f8>
 80198f4:	9105      	str	r1, [sp, #20]
 80198f6:	9304      	str	r3, [sp, #16]
 80198f8:	4656      	mov	r6, sl
 80198fa:	00b3      	lsls	r3, r6, #2
 80198fc:	9306      	str	r3, [sp, #24]
 80198fe:	ab58      	add	r3, sp, #352	; 0x160
 8019900:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8019904:	ac08      	add	r4, sp, #32
 8019906:	ab44      	add	r3, sp, #272	; 0x110
 8019908:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801990c:	46a4      	mov	ip, r4
 801990e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8019912:	4637      	mov	r7, r6
 8019914:	2f00      	cmp	r7, #0
 8019916:	f1a0 0004 	sub.w	r0, r0, #4
 801991a:	dc4a      	bgt.n	80199b2 <__kernel_rem_pio2f+0x182>
 801991c:	4628      	mov	r0, r5
 801991e:	9207      	str	r2, [sp, #28]
 8019920:	f000 fa3a 	bl	8019d98 <scalbnf>
 8019924:	eeb0 8a40 	vmov.f32	s16, s0
 8019928:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801992c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019930:	f000 f9f0 	bl	8019d14 <floorf>
 8019934:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8019938:	eea0 8a67 	vfms.f32	s16, s0, s15
 801993c:	2d00      	cmp	r5, #0
 801993e:	9a07      	ldr	r2, [sp, #28]
 8019940:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019944:	ee17 9a90 	vmov	r9, s15
 8019948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801994c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019950:	dd41      	ble.n	80199d6 <__kernel_rem_pio2f+0x1a6>
 8019952:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8019956:	ab08      	add	r3, sp, #32
 8019958:	f1c5 0e08 	rsb	lr, r5, #8
 801995c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8019960:	fa47 f00e 	asr.w	r0, r7, lr
 8019964:	4481      	add	r9, r0
 8019966:	fa00 f00e 	lsl.w	r0, r0, lr
 801996a:	1a3f      	subs	r7, r7, r0
 801996c:	f1c5 0007 	rsb	r0, r5, #7
 8019970:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8019974:	4107      	asrs	r7, r0
 8019976:	2f00      	cmp	r7, #0
 8019978:	dd3c      	ble.n	80199f4 <__kernel_rem_pio2f+0x1c4>
 801997a:	f04f 0e00 	mov.w	lr, #0
 801997e:	f109 0901 	add.w	r9, r9, #1
 8019982:	4671      	mov	r1, lr
 8019984:	4576      	cmp	r6, lr
 8019986:	dc67      	bgt.n	8019a58 <__kernel_rem_pio2f+0x228>
 8019988:	2d00      	cmp	r5, #0
 801998a:	dd03      	ble.n	8019994 <__kernel_rem_pio2f+0x164>
 801998c:	2d01      	cmp	r5, #1
 801998e:	d074      	beq.n	8019a7a <__kernel_rem_pio2f+0x24a>
 8019990:	2d02      	cmp	r5, #2
 8019992:	d07b      	beq.n	8019a8c <__kernel_rem_pio2f+0x25c>
 8019994:	2f02      	cmp	r7, #2
 8019996:	d12d      	bne.n	80199f4 <__kernel_rem_pio2f+0x1c4>
 8019998:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801999c:	ee30 8a48 	vsub.f32	s16, s0, s16
 80199a0:	b341      	cbz	r1, 80199f4 <__kernel_rem_pio2f+0x1c4>
 80199a2:	4628      	mov	r0, r5
 80199a4:	9207      	str	r2, [sp, #28]
 80199a6:	f000 f9f7 	bl	8019d98 <scalbnf>
 80199aa:	9a07      	ldr	r2, [sp, #28]
 80199ac:	ee38 8a40 	vsub.f32	s16, s16, s0
 80199b0:	e020      	b.n	80199f4 <__kernel_rem_pio2f+0x1c4>
 80199b2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80199b6:	3f01      	subs	r7, #1
 80199b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80199bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199c0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80199c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80199c8:	ecac 0a01 	vstmia	ip!, {s0}
 80199cc:	ed90 0a00 	vldr	s0, [r0]
 80199d0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80199d4:	e79e      	b.n	8019914 <__kernel_rem_pio2f+0xe4>
 80199d6:	d105      	bne.n	80199e4 <__kernel_rem_pio2f+0x1b4>
 80199d8:	1e70      	subs	r0, r6, #1
 80199da:	ab08      	add	r3, sp, #32
 80199dc:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80199e0:	11ff      	asrs	r7, r7, #7
 80199e2:	e7c8      	b.n	8019976 <__kernel_rem_pio2f+0x146>
 80199e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80199e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80199ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199f0:	da30      	bge.n	8019a54 <__kernel_rem_pio2f+0x224>
 80199f2:	2700      	movs	r7, #0
 80199f4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80199f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199fc:	f040 809a 	bne.w	8019b34 <__kernel_rem_pio2f+0x304>
 8019a00:	1e74      	subs	r4, r6, #1
 8019a02:	46a4      	mov	ip, r4
 8019a04:	2100      	movs	r1, #0
 8019a06:	45d4      	cmp	ip, sl
 8019a08:	da47      	bge.n	8019a9a <__kernel_rem_pio2f+0x26a>
 8019a0a:	2900      	cmp	r1, #0
 8019a0c:	d063      	beq.n	8019ad6 <__kernel_rem_pio2f+0x2a6>
 8019a0e:	ab08      	add	r3, sp, #32
 8019a10:	3d08      	subs	r5, #8
 8019a12:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d07f      	beq.n	8019b1a <__kernel_rem_pio2f+0x2ea>
 8019a1a:	4628      	mov	r0, r5
 8019a1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019a20:	f000 f9ba 	bl	8019d98 <scalbnf>
 8019a24:	1c63      	adds	r3, r4, #1
 8019a26:	aa44      	add	r2, sp, #272	; 0x110
 8019a28:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8019b2c <__kernel_rem_pio2f+0x2fc>
 8019a2c:	0099      	lsls	r1, r3, #2
 8019a2e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019a32:	4623      	mov	r3, r4
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	f280 80ad 	bge.w	8019b94 <__kernel_rem_pio2f+0x364>
 8019a3a:	4623      	mov	r3, r4
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	f2c0 80cb 	blt.w	8019bd8 <__kernel_rem_pio2f+0x3a8>
 8019a42:	aa44      	add	r2, sp, #272	; 0x110
 8019a44:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019a48:	4e36      	ldr	r6, [pc, #216]	; (8019b24 <__kernel_rem_pio2f+0x2f4>)
 8019a4a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8019b30 <__kernel_rem_pio2f+0x300>
 8019a4e:	2000      	movs	r0, #0
 8019a50:	1ae2      	subs	r2, r4, r3
 8019a52:	e0b6      	b.n	8019bc2 <__kernel_rem_pio2f+0x392>
 8019a54:	2702      	movs	r7, #2
 8019a56:	e790      	b.n	801997a <__kernel_rem_pio2f+0x14a>
 8019a58:	6820      	ldr	r0, [r4, #0]
 8019a5a:	b949      	cbnz	r1, 8019a70 <__kernel_rem_pio2f+0x240>
 8019a5c:	b118      	cbz	r0, 8019a66 <__kernel_rem_pio2f+0x236>
 8019a5e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8019a62:	6020      	str	r0, [r4, #0]
 8019a64:	2001      	movs	r0, #1
 8019a66:	f10e 0e01 	add.w	lr, lr, #1
 8019a6a:	3404      	adds	r4, #4
 8019a6c:	4601      	mov	r1, r0
 8019a6e:	e789      	b.n	8019984 <__kernel_rem_pio2f+0x154>
 8019a70:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8019a74:	6020      	str	r0, [r4, #0]
 8019a76:	4608      	mov	r0, r1
 8019a78:	e7f5      	b.n	8019a66 <__kernel_rem_pio2f+0x236>
 8019a7a:	1e74      	subs	r4, r6, #1
 8019a7c:	ab08      	add	r3, sp, #32
 8019a7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019a82:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8019a86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019a8a:	e783      	b.n	8019994 <__kernel_rem_pio2f+0x164>
 8019a8c:	1e74      	subs	r4, r6, #1
 8019a8e:	ab08      	add	r3, sp, #32
 8019a90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019a94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8019a98:	e7f5      	b.n	8019a86 <__kernel_rem_pio2f+0x256>
 8019a9a:	ab08      	add	r3, sp, #32
 8019a9c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8019aa0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8019aa4:	4301      	orrs	r1, r0
 8019aa6:	e7ae      	b.n	8019a06 <__kernel_rem_pio2f+0x1d6>
 8019aa8:	3001      	adds	r0, #1
 8019aaa:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8019aae:	2f00      	cmp	r7, #0
 8019ab0:	d0fa      	beq.n	8019aa8 <__kernel_rem_pio2f+0x278>
 8019ab2:	9b06      	ldr	r3, [sp, #24]
 8019ab4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8019ab8:	eb0d 0403 	add.w	r4, sp, r3
 8019abc:	9b01      	ldr	r3, [sp, #4]
 8019abe:	18f7      	adds	r7, r6, r3
 8019ac0:	ab1c      	add	r3, sp, #112	; 0x70
 8019ac2:	f106 0c01 	add.w	ip, r6, #1
 8019ac6:	3c4c      	subs	r4, #76	; 0x4c
 8019ac8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019acc:	4430      	add	r0, r6
 8019ace:	4560      	cmp	r0, ip
 8019ad0:	da04      	bge.n	8019adc <__kernel_rem_pio2f+0x2ac>
 8019ad2:	4606      	mov	r6, r0
 8019ad4:	e711      	b.n	80198fa <__kernel_rem_pio2f+0xca>
 8019ad6:	9c05      	ldr	r4, [sp, #20]
 8019ad8:	2001      	movs	r0, #1
 8019ada:	e7e6      	b.n	8019aaa <__kernel_rem_pio2f+0x27a>
 8019adc:	9b04      	ldr	r3, [sp, #16]
 8019ade:	f8dd e008 	ldr.w	lr, [sp, #8]
 8019ae2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019ae6:	9306      	str	r3, [sp, #24]
 8019ae8:	ee07 3a90 	vmov	s15, r3
 8019aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019af0:	2600      	movs	r6, #0
 8019af2:	ece7 7a01 	vstmia	r7!, {s15}
 8019af6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8019b30 <__kernel_rem_pio2f+0x300>
 8019afa:	46b9      	mov	r9, r7
 8019afc:	455e      	cmp	r6, fp
 8019afe:	dd04      	ble.n	8019b0a <__kernel_rem_pio2f+0x2da>
 8019b00:	ece4 7a01 	vstmia	r4!, {s15}
 8019b04:	f10c 0c01 	add.w	ip, ip, #1
 8019b08:	e7e1      	b.n	8019ace <__kernel_rem_pio2f+0x29e>
 8019b0a:	ecfe 6a01 	vldmia	lr!, {s13}
 8019b0e:	ed39 7a01 	vldmdb	r9!, {s14}
 8019b12:	3601      	adds	r6, #1
 8019b14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019b18:	e7f0      	b.n	8019afc <__kernel_rem_pio2f+0x2cc>
 8019b1a:	3c01      	subs	r4, #1
 8019b1c:	e777      	b.n	8019a0e <__kernel_rem_pio2f+0x1de>
 8019b1e:	bf00      	nop
 8019b20:	0801b624 	.word	0x0801b624
 8019b24:	0801b5f8 	.word	0x0801b5f8
 8019b28:	43800000 	.word	0x43800000
 8019b2c:	3b800000 	.word	0x3b800000
 8019b30:	00000000 	.word	0x00000000
 8019b34:	9b03      	ldr	r3, [sp, #12]
 8019b36:	eeb0 0a48 	vmov.f32	s0, s16
 8019b3a:	1a98      	subs	r0, r3, r2
 8019b3c:	f000 f92c 	bl	8019d98 <scalbnf>
 8019b40:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8019b28 <__kernel_rem_pio2f+0x2f8>
 8019b44:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b4c:	db19      	blt.n	8019b82 <__kernel_rem_pio2f+0x352>
 8019b4e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8019b2c <__kernel_rem_pio2f+0x2fc>
 8019b52:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019b56:	aa08      	add	r2, sp, #32
 8019b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b5c:	1c74      	adds	r4, r6, #1
 8019b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b62:	3508      	adds	r5, #8
 8019b64:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019b70:	ee10 3a10 	vmov	r3, s0
 8019b74:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8019b78:	ee17 3a90 	vmov	r3, s15
 8019b7c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019b80:	e74b      	b.n	8019a1a <__kernel_rem_pio2f+0x1ea>
 8019b82:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019b86:	aa08      	add	r2, sp, #32
 8019b88:	ee10 3a10 	vmov	r3, s0
 8019b8c:	4634      	mov	r4, r6
 8019b8e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8019b92:	e742      	b.n	8019a1a <__kernel_rem_pio2f+0x1ea>
 8019b94:	a808      	add	r0, sp, #32
 8019b96:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019b9a:	9001      	str	r0, [sp, #4]
 8019b9c:	ee07 0a90 	vmov	s15, r0
 8019ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ba4:	3b01      	subs	r3, #1
 8019ba6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019baa:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019bae:	ed62 7a01 	vstmdb	r2!, {s15}
 8019bb2:	e73f      	b.n	8019a34 <__kernel_rem_pio2f+0x204>
 8019bb4:	ecf6 6a01 	vldmia	r6!, {s13}
 8019bb8:	ecb5 7a01 	vldmia	r5!, {s14}
 8019bbc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019bc0:	3001      	adds	r0, #1
 8019bc2:	4550      	cmp	r0, sl
 8019bc4:	dc01      	bgt.n	8019bca <__kernel_rem_pio2f+0x39a>
 8019bc6:	4290      	cmp	r0, r2
 8019bc8:	ddf4      	ble.n	8019bb4 <__kernel_rem_pio2f+0x384>
 8019bca:	a858      	add	r0, sp, #352	; 0x160
 8019bcc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8019bd0:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8019bd4:	3b01      	subs	r3, #1
 8019bd6:	e731      	b.n	8019a3c <__kernel_rem_pio2f+0x20c>
 8019bd8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8019bda:	2b02      	cmp	r3, #2
 8019bdc:	dc09      	bgt.n	8019bf2 <__kernel_rem_pio2f+0x3c2>
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	dc2b      	bgt.n	8019c3a <__kernel_rem_pio2f+0x40a>
 8019be2:	d044      	beq.n	8019c6e <__kernel_rem_pio2f+0x43e>
 8019be4:	f009 0007 	and.w	r0, r9, #7
 8019be8:	b059      	add	sp, #356	; 0x164
 8019bea:	ecbd 8b04 	vpop	{d8-d9}
 8019bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bf2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8019bf4:	2b03      	cmp	r3, #3
 8019bf6:	d1f5      	bne.n	8019be4 <__kernel_rem_pio2f+0x3b4>
 8019bf8:	aa30      	add	r2, sp, #192	; 0xc0
 8019bfa:	1f0b      	subs	r3, r1, #4
 8019bfc:	4413      	add	r3, r2
 8019bfe:	461a      	mov	r2, r3
 8019c00:	4620      	mov	r0, r4
 8019c02:	2800      	cmp	r0, #0
 8019c04:	f1a2 0204 	sub.w	r2, r2, #4
 8019c08:	dc52      	bgt.n	8019cb0 <__kernel_rem_pio2f+0x480>
 8019c0a:	4622      	mov	r2, r4
 8019c0c:	2a01      	cmp	r2, #1
 8019c0e:	f1a3 0304 	sub.w	r3, r3, #4
 8019c12:	dc5d      	bgt.n	8019cd0 <__kernel_rem_pio2f+0x4a0>
 8019c14:	ab30      	add	r3, sp, #192	; 0xc0
 8019c16:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8019b30 <__kernel_rem_pio2f+0x300>
 8019c1a:	440b      	add	r3, r1
 8019c1c:	2c01      	cmp	r4, #1
 8019c1e:	dc67      	bgt.n	8019cf0 <__kernel_rem_pio2f+0x4c0>
 8019c20:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8019c24:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8019c28:	2f00      	cmp	r7, #0
 8019c2a:	d167      	bne.n	8019cfc <__kernel_rem_pio2f+0x4cc>
 8019c2c:	edc8 6a00 	vstr	s13, [r8]
 8019c30:	ed88 7a01 	vstr	s14, [r8, #4]
 8019c34:	edc8 7a02 	vstr	s15, [r8, #8]
 8019c38:	e7d4      	b.n	8019be4 <__kernel_rem_pio2f+0x3b4>
 8019c3a:	ab30      	add	r3, sp, #192	; 0xc0
 8019c3c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8019b30 <__kernel_rem_pio2f+0x300>
 8019c40:	440b      	add	r3, r1
 8019c42:	4622      	mov	r2, r4
 8019c44:	2a00      	cmp	r2, #0
 8019c46:	da24      	bge.n	8019c92 <__kernel_rem_pio2f+0x462>
 8019c48:	b34f      	cbz	r7, 8019c9e <__kernel_rem_pio2f+0x46e>
 8019c4a:	eef1 7a47 	vneg.f32	s15, s14
 8019c4e:	edc8 7a00 	vstr	s15, [r8]
 8019c52:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8019c56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019c5a:	aa31      	add	r2, sp, #196	; 0xc4
 8019c5c:	2301      	movs	r3, #1
 8019c5e:	429c      	cmp	r4, r3
 8019c60:	da20      	bge.n	8019ca4 <__kernel_rem_pio2f+0x474>
 8019c62:	b10f      	cbz	r7, 8019c68 <__kernel_rem_pio2f+0x438>
 8019c64:	eef1 7a67 	vneg.f32	s15, s15
 8019c68:	edc8 7a01 	vstr	s15, [r8, #4]
 8019c6c:	e7ba      	b.n	8019be4 <__kernel_rem_pio2f+0x3b4>
 8019c6e:	ab30      	add	r3, sp, #192	; 0xc0
 8019c70:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8019b30 <__kernel_rem_pio2f+0x300>
 8019c74:	440b      	add	r3, r1
 8019c76:	2c00      	cmp	r4, #0
 8019c78:	da05      	bge.n	8019c86 <__kernel_rem_pio2f+0x456>
 8019c7a:	b10f      	cbz	r7, 8019c80 <__kernel_rem_pio2f+0x450>
 8019c7c:	eef1 7a67 	vneg.f32	s15, s15
 8019c80:	edc8 7a00 	vstr	s15, [r8]
 8019c84:	e7ae      	b.n	8019be4 <__kernel_rem_pio2f+0x3b4>
 8019c86:	ed33 7a01 	vldmdb	r3!, {s14}
 8019c8a:	3c01      	subs	r4, #1
 8019c8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019c90:	e7f1      	b.n	8019c76 <__kernel_rem_pio2f+0x446>
 8019c92:	ed73 7a01 	vldmdb	r3!, {s15}
 8019c96:	3a01      	subs	r2, #1
 8019c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019c9c:	e7d2      	b.n	8019c44 <__kernel_rem_pio2f+0x414>
 8019c9e:	eef0 7a47 	vmov.f32	s15, s14
 8019ca2:	e7d4      	b.n	8019c4e <__kernel_rem_pio2f+0x41e>
 8019ca4:	ecb2 7a01 	vldmia	r2!, {s14}
 8019ca8:	3301      	adds	r3, #1
 8019caa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019cae:	e7d6      	b.n	8019c5e <__kernel_rem_pio2f+0x42e>
 8019cb0:	edd2 7a00 	vldr	s15, [r2]
 8019cb4:	edd2 6a01 	vldr	s13, [r2, #4]
 8019cb8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019cbc:	3801      	subs	r0, #1
 8019cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019cc2:	ed82 7a00 	vstr	s14, [r2]
 8019cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019cca:	edc2 7a01 	vstr	s15, [r2, #4]
 8019cce:	e798      	b.n	8019c02 <__kernel_rem_pio2f+0x3d2>
 8019cd0:	edd3 7a00 	vldr	s15, [r3]
 8019cd4:	edd3 6a01 	vldr	s13, [r3, #4]
 8019cd8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019cdc:	3a01      	subs	r2, #1
 8019cde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ce2:	ed83 7a00 	vstr	s14, [r3]
 8019ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019cea:	edc3 7a01 	vstr	s15, [r3, #4]
 8019cee:	e78d      	b.n	8019c0c <__kernel_rem_pio2f+0x3dc>
 8019cf0:	ed33 7a01 	vldmdb	r3!, {s14}
 8019cf4:	3c01      	subs	r4, #1
 8019cf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019cfa:	e78f      	b.n	8019c1c <__kernel_rem_pio2f+0x3ec>
 8019cfc:	eef1 6a66 	vneg.f32	s13, s13
 8019d00:	eeb1 7a47 	vneg.f32	s14, s14
 8019d04:	edc8 6a00 	vstr	s13, [r8]
 8019d08:	ed88 7a01 	vstr	s14, [r8, #4]
 8019d0c:	eef1 7a67 	vneg.f32	s15, s15
 8019d10:	e790      	b.n	8019c34 <__kernel_rem_pio2f+0x404>
 8019d12:	bf00      	nop

08019d14 <floorf>:
 8019d14:	ee10 3a10 	vmov	r3, s0
 8019d18:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019d1c:	3a7f      	subs	r2, #127	; 0x7f
 8019d1e:	2a16      	cmp	r2, #22
 8019d20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019d24:	dc2a      	bgt.n	8019d7c <floorf+0x68>
 8019d26:	2a00      	cmp	r2, #0
 8019d28:	da11      	bge.n	8019d4e <floorf+0x3a>
 8019d2a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019d8c <floorf+0x78>
 8019d2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019d32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d3a:	dd05      	ble.n	8019d48 <floorf+0x34>
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	da23      	bge.n	8019d88 <floorf+0x74>
 8019d40:	4a13      	ldr	r2, [pc, #76]	; (8019d90 <floorf+0x7c>)
 8019d42:	2900      	cmp	r1, #0
 8019d44:	bf18      	it	ne
 8019d46:	4613      	movne	r3, r2
 8019d48:	ee00 3a10 	vmov	s0, r3
 8019d4c:	4770      	bx	lr
 8019d4e:	4911      	ldr	r1, [pc, #68]	; (8019d94 <floorf+0x80>)
 8019d50:	4111      	asrs	r1, r2
 8019d52:	420b      	tst	r3, r1
 8019d54:	d0fa      	beq.n	8019d4c <floorf+0x38>
 8019d56:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019d8c <floorf+0x78>
 8019d5a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019d5e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d66:	ddef      	ble.n	8019d48 <floorf+0x34>
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	bfbe      	ittt	lt
 8019d6c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8019d70:	fa40 f202 	asrlt.w	r2, r0, r2
 8019d74:	189b      	addlt	r3, r3, r2
 8019d76:	ea23 0301 	bic.w	r3, r3, r1
 8019d7a:	e7e5      	b.n	8019d48 <floorf+0x34>
 8019d7c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019d80:	d3e4      	bcc.n	8019d4c <floorf+0x38>
 8019d82:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019d86:	4770      	bx	lr
 8019d88:	2300      	movs	r3, #0
 8019d8a:	e7dd      	b.n	8019d48 <floorf+0x34>
 8019d8c:	7149f2ca 	.word	0x7149f2ca
 8019d90:	bf800000 	.word	0xbf800000
 8019d94:	007fffff 	.word	0x007fffff

08019d98 <scalbnf>:
 8019d98:	ee10 3a10 	vmov	r3, s0
 8019d9c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019da0:	d02b      	beq.n	8019dfa <scalbnf+0x62>
 8019da2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019da6:	d302      	bcc.n	8019dae <scalbnf+0x16>
 8019da8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019dac:	4770      	bx	lr
 8019dae:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8019db2:	d123      	bne.n	8019dfc <scalbnf+0x64>
 8019db4:	4b24      	ldr	r3, [pc, #144]	; (8019e48 <scalbnf+0xb0>)
 8019db6:	eddf 7a25 	vldr	s15, [pc, #148]	; 8019e4c <scalbnf+0xb4>
 8019dba:	4298      	cmp	r0, r3
 8019dbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019dc0:	db17      	blt.n	8019df2 <scalbnf+0x5a>
 8019dc2:	ee10 3a10 	vmov	r3, s0
 8019dc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019dca:	3a19      	subs	r2, #25
 8019dcc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8019dd0:	4288      	cmp	r0, r1
 8019dd2:	dd15      	ble.n	8019e00 <scalbnf+0x68>
 8019dd4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8019e50 <scalbnf+0xb8>
 8019dd8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8019e54 <scalbnf+0xbc>
 8019ddc:	ee10 3a10 	vmov	r3, s0
 8019de0:	eeb0 7a67 	vmov.f32	s14, s15
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	bfb8      	it	lt
 8019de8:	eef0 7a66 	vmovlt.f32	s15, s13
 8019dec:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019df0:	4770      	bx	lr
 8019df2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8019e58 <scalbnf+0xc0>
 8019df6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019dfa:	4770      	bx	lr
 8019dfc:	0dd2      	lsrs	r2, r2, #23
 8019dfe:	e7e5      	b.n	8019dcc <scalbnf+0x34>
 8019e00:	4410      	add	r0, r2
 8019e02:	28fe      	cmp	r0, #254	; 0xfe
 8019e04:	dce6      	bgt.n	8019dd4 <scalbnf+0x3c>
 8019e06:	2800      	cmp	r0, #0
 8019e08:	dd06      	ble.n	8019e18 <scalbnf+0x80>
 8019e0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019e0e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019e12:	ee00 3a10 	vmov	s0, r3
 8019e16:	4770      	bx	lr
 8019e18:	f110 0f16 	cmn.w	r0, #22
 8019e1c:	da09      	bge.n	8019e32 <scalbnf+0x9a>
 8019e1e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8019e58 <scalbnf+0xc0>
 8019e22:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8019e5c <scalbnf+0xc4>
 8019e26:	ee10 3a10 	vmov	r3, s0
 8019e2a:	eeb0 7a67 	vmov.f32	s14, s15
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	e7d9      	b.n	8019de6 <scalbnf+0x4e>
 8019e32:	3019      	adds	r0, #25
 8019e34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019e38:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019e3c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8019e60 <scalbnf+0xc8>
 8019e40:	ee07 3a90 	vmov	s15, r3
 8019e44:	e7d7      	b.n	8019df6 <scalbnf+0x5e>
 8019e46:	bf00      	nop
 8019e48:	ffff3cb0 	.word	0xffff3cb0
 8019e4c:	4c000000 	.word	0x4c000000
 8019e50:	7149f2ca 	.word	0x7149f2ca
 8019e54:	f149f2ca 	.word	0xf149f2ca
 8019e58:	0da24260 	.word	0x0da24260
 8019e5c:	8da24260 	.word	0x8da24260
 8019e60:	33000000 	.word	0x33000000

08019e64 <_init>:
 8019e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e66:	bf00      	nop
 8019e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e6a:	bc08      	pop	{r3}
 8019e6c:	469e      	mov	lr, r3
 8019e6e:	4770      	bx	lr

08019e70 <_fini>:
 8019e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e72:	bf00      	nop
 8019e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e76:	bc08      	pop	{r3}
 8019e78:	469e      	mov	lr, r3
 8019e7a:	4770      	bx	lr
