
AeroSentinel Flight Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d80c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d10  0801d9a0  0801d9a0  0002d9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f6b0  0801f6b0  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  0801f6b0  0801f6b0  0002f6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f6b8  0801f6b8  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f6b8  0801f6b8  0002f6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f6bc  0801f6bc  0002f6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0801f6c0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030208  2**0
                  CONTENTS
 10 .bss          00008674  20000208  20000208  00030208  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000887c  2000887c  00030208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .comment      00000093  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 14 .debug_info   00032722  00000000  00000000  000302cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000062ee  00000000  00000000  000629ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002b08  00000000  00000000  00068ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002166  00000000  00000000  0006b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a3fe  00000000  00000000  0006d94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00031d13  00000000  00000000  00097d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000edee0  00000000  00000000  000c9a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000d0d8  00000000  00000000  001b7940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  001c4a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d984 	.word	0x0801d984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0801d984 	.word	0x0801d984

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f000 b9a6 	b.w	8001000 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f83c 	bl	8000d38 <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_d2lz>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	f7ff ff0b 	bl	8000af0 <__aeabi_dcmplt>
 8000cda:	b928      	cbnz	r0, 8000ce8 <__aeabi_d2lz+0x1c>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	4629      	mov	r1, r5
 8000ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce4:	f000 b80a 	b.w	8000cfc <__aeabi_d2ulz>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cee:	f000 f805 	bl	8000cfc <__aeabi_d2ulz>
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop

08000cfc <__aeabi_d2ulz>:
 8000cfc:	b5d0      	push	{r4, r6, r7, lr}
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__aeabi_d2ulz+0x34>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	4606      	mov	r6, r0
 8000d04:	460f      	mov	r7, r1
 8000d06:	f7ff fc81 	bl	800060c <__aeabi_dmul>
 8000d0a:	f7ff ff57 	bl	8000bbc <__aeabi_d2uiz>
 8000d0e:	4604      	mov	r4, r0
 8000d10:	f7ff fc02 	bl	8000518 <__aeabi_ui2d>
 8000d14:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <__aeabi_d2ulz+0x38>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f7ff fc78 	bl	800060c <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4630      	mov	r0, r6
 8000d22:	4639      	mov	r1, r7
 8000d24:	f7ff faba 	bl	800029c <__aeabi_dsub>
 8000d28:	f7ff ff48 	bl	8000bbc <__aeabi_d2uiz>
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d30:	3df00000 	.word	0x3df00000
 8000d34:	41f00000 	.word	0x41f00000

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9e08      	ldr	r6, [sp, #32]
 8000d3e:	460d      	mov	r5, r1
 8000d40:	4604      	mov	r4, r0
 8000d42:	460f      	mov	r7, r1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d14a      	bne.n	8000dde <__udivmoddi4+0xa6>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4694      	mov	ip, r2
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0xe2>
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	b143      	cbz	r3, 8000d66 <__udivmoddi4+0x2e>
 8000d54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d58:	f1c3 0220 	rsb	r2, r3, #32
 8000d5c:	409f      	lsls	r7, r3
 8000d5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d62:	4317      	orrs	r7, r2
 8000d64:	409c      	lsls	r4, r3
 8000d66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d6a:	fa1f f58c 	uxth.w	r5, ip
 8000d6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d72:	0c22      	lsrs	r2, r4, #16
 8000d74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d7c:	fb01 f005 	mul.w	r0, r1, r5
 8000d80:	4290      	cmp	r0, r2
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x62>
 8000d84:	eb1c 0202 	adds.w	r2, ip, r2
 8000d88:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d8c:	f080 811c 	bcs.w	8000fc8 <__udivmoddi4+0x290>
 8000d90:	4290      	cmp	r0, r2
 8000d92:	f240 8119 	bls.w	8000fc8 <__udivmoddi4+0x290>
 8000d96:	3902      	subs	r1, #2
 8000d98:	4462      	add	r2, ip
 8000d9a:	1a12      	subs	r2, r2, r0
 8000d9c:	b2a4      	uxth	r4, r4
 8000d9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000da2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000daa:	fb00 f505 	mul.w	r5, r0, r5
 8000dae:	42a5      	cmp	r5, r4
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x90>
 8000db2:	eb1c 0404 	adds.w	r4, ip, r4
 8000db6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dba:	f080 8107 	bcs.w	8000fcc <__udivmoddi4+0x294>
 8000dbe:	42a5      	cmp	r5, r4
 8000dc0:	f240 8104 	bls.w	8000fcc <__udivmoddi4+0x294>
 8000dc4:	4464      	add	r4, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dcc:	1b64      	subs	r4, r4, r5
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11e      	cbz	r6, 8000dda <__udivmoddi4+0xa2>
 8000dd2:	40dc      	lsrs	r4, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0xbc>
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	f000 80ed 	beq.w	8000fc2 <__udivmoddi4+0x28a>
 8000de8:	2100      	movs	r1, #0
 8000dea:	e9c6 0500 	strd	r0, r5, [r6]
 8000dee:	4608      	mov	r0, r1
 8000df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df4:	fab3 f183 	clz	r1, r3
 8000df8:	2900      	cmp	r1, #0
 8000dfa:	d149      	bne.n	8000e90 <__udivmoddi4+0x158>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	d302      	bcc.n	8000e06 <__udivmoddi4+0xce>
 8000e00:	4282      	cmp	r2, r0
 8000e02:	f200 80f8 	bhi.w	8000ff6 <__udivmoddi4+0x2be>
 8000e06:	1a84      	subs	r4, r0, r2
 8000e08:	eb65 0203 	sbc.w	r2, r5, r3
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	4617      	mov	r7, r2
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d0e2      	beq.n	8000dda <__udivmoddi4+0xa2>
 8000e14:	e9c6 4700 	strd	r4, r7, [r6]
 8000e18:	e7df      	b.n	8000dda <__udivmoddi4+0xa2>
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xe6>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f382 	clz	r3, r2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x210>
 8000e28:	1a8a      	subs	r2, r1, r2
 8000e2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2e:	fa1f fe8c 	uxth.w	lr, ip
 8000e32:	2101      	movs	r1, #1
 8000e34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e38:	fb07 2015 	mls	r0, r7, r5, r2
 8000e3c:	0c22      	lsrs	r2, r4, #16
 8000e3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e42:	fb0e f005 	mul.w	r0, lr, r5
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x124>
 8000e4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x122>
 8000e54:	4290      	cmp	r0, r2
 8000e56:	f200 80cb 	bhi.w	8000ff0 <__udivmoddi4+0x2b8>
 8000e5a:	4645      	mov	r5, r8
 8000e5c:	1a12      	subs	r2, r2, r0
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e64:	fb07 2210 	mls	r2, r7, r0, r2
 8000e68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e70:	45a6      	cmp	lr, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x14e>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e7c:	d202      	bcs.n	8000e84 <__udivmoddi4+0x14c>
 8000e7e:	45a6      	cmp	lr, r4
 8000e80:	f200 80bb 	bhi.w	8000ffa <__udivmoddi4+0x2c2>
 8000e84:	4610      	mov	r0, r2
 8000e86:	eba4 040e 	sub.w	r4, r4, lr
 8000e8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8e:	e79f      	b.n	8000dd0 <__udivmoddi4+0x98>
 8000e90:	f1c1 0720 	rsb	r7, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000ea2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea6:	40fd      	lsrs	r5, r7
 8000ea8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	fb09 5518 	mls	r5, r9, r8, r5
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ec0:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec4:	42a5      	cmp	r5, r4
 8000ec6:	fa02 f201 	lsl.w	r2, r2, r1
 8000eca:	fa00 f001 	lsl.w	r0, r0, r1
 8000ece:	d90b      	bls.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed8:	f080 8088 	bcs.w	8000fec <__udivmoddi4+0x2b4>
 8000edc:	42a5      	cmp	r5, r4
 8000ede:	f240 8085 	bls.w	8000fec <__udivmoddi4+0x2b4>
 8000ee2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee6:	4464      	add	r4, ip
 8000ee8:	1b64      	subs	r4, r4, r5
 8000eea:	b29d      	uxth	r5, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1da>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f08:	d26c      	bcs.n	8000fe4 <__udivmoddi4+0x2ac>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	d96a      	bls.n	8000fe4 <__udivmoddi4+0x2ac>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	4464      	add	r4, ip
 8000f12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f16:	fba3 9502 	umull	r9, r5, r3, r2
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	42ac      	cmp	r4, r5
 8000f20:	46c8      	mov	r8, r9
 8000f22:	46ae      	mov	lr, r5
 8000f24:	d356      	bcc.n	8000fd4 <__udivmoddi4+0x29c>
 8000f26:	d053      	beq.n	8000fd0 <__udivmoddi4+0x298>
 8000f28:	b156      	cbz	r6, 8000f40 <__udivmoddi4+0x208>
 8000f2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f32:	fa04 f707 	lsl.w	r7, r4, r7
 8000f36:	40ca      	lsrs	r2, r1
 8000f38:	40cc      	lsrs	r4, r1
 8000f3a:	4317      	orrs	r7, r2
 8000f3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f40:	4618      	mov	r0, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f48:	f1c3 0120 	rsb	r1, r3, #32
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	fa20 f201 	lsr.w	r2, r0, r1
 8000f54:	fa25 f101 	lsr.w	r1, r5, r1
 8000f58:	409d      	lsls	r5, r3
 8000f5a:	432a      	orrs	r2, r5
 8000f5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f60:	fa1f fe8c 	uxth.w	lr, ip
 8000f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f68:	fb07 1510 	mls	r5, r7, r0, r1
 8000f6c:	0c11      	lsrs	r1, r2, #16
 8000f6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f72:	fb00 f50e 	mul.w	r5, r0, lr
 8000f76:	428d      	cmp	r5, r1
 8000f78:	fa04 f403 	lsl.w	r4, r4, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x258>
 8000f7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f82:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f86:	d22f      	bcs.n	8000fe8 <__udivmoddi4+0x2b0>
 8000f88:	428d      	cmp	r5, r1
 8000f8a:	d92d      	bls.n	8000fe8 <__udivmoddi4+0x2b0>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4461      	add	r1, ip
 8000f90:	1b49      	subs	r1, r1, r5
 8000f92:	b292      	uxth	r2, r2
 8000f94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f98:	fb07 1115 	mls	r1, r7, r5, r1
 8000f9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fa0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa4:	4291      	cmp	r1, r2
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x282>
 8000fa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fb0:	d216      	bcs.n	8000fe0 <__udivmoddi4+0x2a8>
 8000fb2:	4291      	cmp	r1, r2
 8000fb4:	d914      	bls.n	8000fe0 <__udivmoddi4+0x2a8>
 8000fb6:	3d02      	subs	r5, #2
 8000fb8:	4462      	add	r2, ip
 8000fba:	1a52      	subs	r2, r2, r1
 8000fbc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fc0:	e738      	b.n	8000e34 <__udivmoddi4+0xfc>
 8000fc2:	4631      	mov	r1, r6
 8000fc4:	4630      	mov	r0, r6
 8000fc6:	e708      	b.n	8000dda <__udivmoddi4+0xa2>
 8000fc8:	4639      	mov	r1, r7
 8000fca:	e6e6      	b.n	8000d9a <__udivmoddi4+0x62>
 8000fcc:	4610      	mov	r0, r2
 8000fce:	e6fb      	b.n	8000dc8 <__udivmoddi4+0x90>
 8000fd0:	4548      	cmp	r0, r9
 8000fd2:	d2a9      	bcs.n	8000f28 <__udivmoddi4+0x1f0>
 8000fd4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	e7a3      	b.n	8000f28 <__udivmoddi4+0x1f0>
 8000fe0:	4645      	mov	r5, r8
 8000fe2:	e7ea      	b.n	8000fba <__udivmoddi4+0x282>
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	e794      	b.n	8000f12 <__udivmoddi4+0x1da>
 8000fe8:	4640      	mov	r0, r8
 8000fea:	e7d1      	b.n	8000f90 <__udivmoddi4+0x258>
 8000fec:	46d0      	mov	r8, sl
 8000fee:	e77b      	b.n	8000ee8 <__udivmoddi4+0x1b0>
 8000ff0:	3d02      	subs	r5, #2
 8000ff2:	4462      	add	r2, ip
 8000ff4:	e732      	b.n	8000e5c <__udivmoddi4+0x124>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e70a      	b.n	8000e10 <__udivmoddi4+0xd8>
 8000ffa:	4464      	add	r4, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e742      	b.n	8000e86 <__udivmoddi4+0x14e>

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <UART_Transmit_Messages_BlackBox>:

extern UART_HandleTypeDef huart1;


void UART_Transmit_Messages_BlackBox(const char* str)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff f92f 	bl	8000270 <strlen>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <UART_Transmit_Messages_BlackBox+0x28>)
 800101e:	f008 fc12 	bl	8009846 <HAL_UART_Transmit>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20003be0 	.word	0x20003be0

08001030 <file_exists>:



bool file_exists(const char* filename) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    FILINFO fno;
    FRESULT result = f_stat(filename, &fno);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4619      	mov	r1, r3
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f00b fbda 	bl	800c7f8 <f_stat>
 8001044:	4603      	mov	r3, r0
 8001046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    return result == FR_OK && !(fno.fattrib & AM_DIR);
 800104a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <file_exists+0x30>
 8001052:	7d3b      	ldrb	r3, [r7, #20]
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <file_exists+0x30>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <file_exists+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <buf_clear>:
	while(*buf++ != '\0') i++;
	return i;

}

void buf_clear(void){
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++ ){
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	e007      	b.n	800108c <buf_clear+0x1c>
		data_buffer[i] = '\0';
 800107c:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <buf_clear+0x34>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++ ){
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3301      	adds	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001092:	dbf3      	blt.n	800107c <buf_clear+0xc>
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20002aec 	.word	0x20002aec

080010a8 <mount_sd_card>:


void mount_sd_card(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "",0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	490a      	ldr	r1, [pc, #40]	; (80010d8 <mount_sd_card+0x30>)
 80010b0:	480a      	ldr	r0, [pc, #40]	; (80010dc <mount_sd_card+0x34>)
 80010b2:	f00a feef 	bl	800be94 <f_mount>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <mount_sd_card+0x38>)
 80010bc:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <mount_sd_card+0x38>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <mount_sd_card+0x26>
	{
		UART_Transmit_Messages_BlackBox("*               Error mounting the SD Card              *\r\n");
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <mount_sd_card+0x3c>)
 80010c8:	f7ff ff9c 	bl	8001004 <UART_Transmit_Messages_BlackBox>
	} else {
		UART_Transmit_Messages_BlackBox("*              SD Card mounted successfully!            *\r\n");
	}
}
 80010cc:	e002      	b.n	80010d4 <mount_sd_card+0x2c>
		UART_Transmit_Messages_BlackBox("*              SD Card mounted successfully!            *\r\n");
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <mount_sd_card+0x40>)
 80010d0:	f7ff ff98 	bl	8001004 <UART_Transmit_Messages_BlackBox>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	0801d9a0 	.word	0x0801d9a0
 80010dc:	20000a80 	.word	0x20000a80
 80010e0:	20002ae8 	.word	0x20002ae8
 80010e4:	0801d9a4 	.word	0x0801d9a4
 80010e8:	0801d9e0 	.word	0x0801d9e0

080010ec <check_free_space>:

void check_free_space() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
    f_getfree("", &fre_clust, &pfs);
 80010f2:	4a38      	ldr	r2, [pc, #224]	; (80011d4 <check_free_space+0xe8>)
 80010f4:	4938      	ldr	r1, [pc, #224]	; (80011d8 <check_free_space+0xec>)
 80010f6:	4839      	ldr	r0, [pc, #228]	; (80011dc <check_free_space+0xf0>)
 80010f8:	f00b fbbe 	bl	800c878 <f_getfree>

    total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80010fc:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <check_free_space+0xe8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	3b02      	subs	r3, #2
 8001104:	4a33      	ldr	r2, [pc, #204]	; (80011d4 <check_free_space+0xe8>)
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	8952      	ldrh	r2, [r2, #10]
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa02 	bl	8000518 <__aeabi_ui2d>
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <check_free_space+0xf4>)
 800111a:	f7ff fa77 	bl	800060c <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fd49 	bl	8000bbc <__aeabi_d2uiz>
 800112a:	4603      	mov	r3, r0
 800112c:	4a2d      	ldr	r2, [pc, #180]	; (80011e4 <check_free_space+0xf8>)
 800112e:	6013      	str	r3, [r2, #0]
    float total_GB = (float)total / (1024.0 * 1024.0);
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <check_free_space+0xf8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800113c:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80011e8 <check_free_space+0xfc>
 8001140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001144:	edc7 7a01 	vstr	s15, [r7, #4]
    sprintf(data_buffer, "*              SD CARD Total Size: \t%.2f GB        *\r\n", total_GB);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fa07 	bl	800055c <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4926      	ldr	r1, [pc, #152]	; (80011ec <check_free_space+0x100>)
 8001154:	4826      	ldr	r0, [pc, #152]	; (80011f0 <check_free_space+0x104>)
 8001156:	f017 f8d9 	bl	801830c <siprintf>

    UART_Transmit_Messages_BlackBox(data_buffer);
 800115a:	4825      	ldr	r0, [pc, #148]	; (80011f0 <check_free_space+0x104>)
 800115c:	f7ff ff52 	bl	8001004 <UART_Transmit_Messages_BlackBox>
    buf_clear();
 8001160:	f7ff ff86 	bl	8001070 <buf_clear>

    free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <check_free_space+0xe8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	895b      	ldrh	r3, [r3, #10]
 800116a:	461a      	mov	r2, r3
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <check_free_space+0xec>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9cf 	bl	8000518 <__aeabi_ui2d>
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <check_free_space+0xf4>)
 8001180:	f7ff fa44 	bl	800060c <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fd16 	bl	8000bbc <__aeabi_d2uiz>
 8001190:	4603      	mov	r3, r0
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <check_free_space+0x108>)
 8001194:	6013      	str	r3, [r2, #0]
    float free_space_GB = (float)free_space / (1024.0 * 1024.0);
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <check_free_space+0x108>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011a2:	eddf 6a11 	vldr	s13, [pc, #68]	; 80011e8 <check_free_space+0xfc>
 80011a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011aa:	edc7 7a00 	vstr	s15, [r7]
    sprintf(data_buffer, "*              SD CARD Free Space: \t%.2f GB        *\r\n", free_space_GB);
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f7ff f9d4 	bl	800055c <__aeabi_f2d>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	490f      	ldr	r1, [pc, #60]	; (80011f8 <check_free_space+0x10c>)
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <check_free_space+0x104>)
 80011bc:	f017 f8a6 	bl	801830c <siprintf>
    UART_Transmit_Messages_BlackBox(data_buffer);
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <check_free_space+0x104>)
 80011c2:	f7ff ff1f 	bl	8001004 <UART_Transmit_Messages_BlackBox>
	UART_Transmit_Messages_BlackBox("*********************************************************\r\n");
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <check_free_space+0x110>)
 80011c8:	f7ff ff1c 	bl	8001004 <UART_Transmit_Messages_BlackBox>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20002eec 	.word	0x20002eec
 80011d8:	20002ef0 	.word	0x20002ef0
 80011dc:	0801d9a0 	.word	0x0801d9a0
 80011e0:	3fe00000 	.word	0x3fe00000
 80011e4:	20002ef4 	.word	0x20002ef4
 80011e8:	49800000 	.word	0x49800000
 80011ec:	0801da1c 	.word	0x0801da1c
 80011f0:	20002aec 	.word	0x20002aec
 80011f4:	20002ef8 	.word	0x20002ef8
 80011f8:	0801da54 	.word	0x0801da54
 80011fc:	0801da8c 	.word	0x0801da8c

08001200 <create_file>:





void create_file(const char* filename) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b09c      	sub	sp, #112	; 0x70
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
    // Open file to write OR create it if it does not exist
    fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001208:	220b      	movs	r2, #11
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4811      	ldr	r0, [pc, #68]	; (8001254 <create_file+0x54>)
 800120e:	f00a fea5 	bl	800bf5c <f_open>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <create_file+0x58>)
 8001218:	701a      	strb	r2, [r3, #0]
    char err[100];

    if (fresult == FR_OK) {
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <create_file+0x58>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <create_file+0x30>
        UART_Transmit_Messages_BlackBox("File created successfully! \r\n");
 8001222:	480e      	ldr	r0, [pc, #56]	; (800125c <create_file+0x5c>)
 8001224:	f7ff feee 	bl	8001004 <UART_Transmit_Messages_BlackBox>
        f_close(&fil);
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <create_file+0x54>)
 800122a:	f00b fab6 	bl	800c79a <f_close>
    } else {
    	sprintf(err,"Error creating the file:  %d \r\n", fresult);
        UART_Transmit_Messages_BlackBox(err);
    }
}
 800122e:	e00d      	b.n	800124c <create_file+0x4c>
    	sprintf(err,"Error creating the file:  %d \r\n", fresult);
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <create_file+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	4909      	ldr	r1, [pc, #36]	; (8001260 <create_file+0x60>)
 800123c:	4618      	mov	r0, r3
 800123e:	f017 f865 	bl	801830c <siprintf>
        UART_Transmit_Messages_BlackBox(err);
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fedc 	bl	8001004 <UART_Transmit_Messages_BlackBox>
}
 800124c:	bf00      	nop
 800124e:	3770      	adds	r7, #112	; 0x70
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20001ab8 	.word	0x20001ab8
 8001258:	20002ae8 	.word	0x20002ae8
 800125c:	0801dac8 	.word	0x0801dac8
 8001260:	0801dae8 	.word	0x0801dae8

08001264 <append_data_to_file>:

void append_data_to_file(const char* filename, const char* data) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
    if (file_exists(filename)) {
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fede 	bl	8001030 <file_exists>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d009      	beq.n	800128e <append_data_to_file+0x2a>
        // Open file to append data at the end
        fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_READ | FA_WRITE);
 800127a:	2233      	movs	r2, #51	; 0x33
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	482d      	ldr	r0, [pc, #180]	; (8001334 <append_data_to_file+0xd0>)
 8001280:	f00a fe6c 	bl	800bf5c <f_open>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <append_data_to_file+0xd4>)
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	e00b      	b.n	80012a6 <append_data_to_file+0x42>
    } else {
    	create_file(filename);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffb6 	bl	8001200 <create_file>
        // Open file to write OR create it if it does not exist
        fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001294:	220b      	movs	r2, #11
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4826      	ldr	r0, [pc, #152]	; (8001334 <append_data_to_file+0xd0>)
 800129a:	f00a fe5f 	bl	800bf5c <f_open>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <append_data_to_file+0xd4>)
 80012a4:	701a      	strb	r2, [r3, #0]
    }

    if (fresult == FR_OK) {
 80012a6:	4b24      	ldr	r3, [pc, #144]	; (8001338 <append_data_to_file+0xd4>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d13b      	bne.n	8001326 <append_data_to_file+0xc2>
        // Write data to the file
        UINT bytes_written;
        fresult = f_write(&fil, data, strlen(data), &bytes_written);
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f7fe ffde 	bl	8000270 <strlen>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	481d      	ldr	r0, [pc, #116]	; (8001334 <append_data_to_file+0xd0>)
 80012be:	f00b f820 	bl	800c302 <f_write>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <append_data_to_file+0xd4>)
 80012c8:	701a      	strb	r2, [r3, #0]

        if (fresult == FR_OK && bytes_written == strlen(data)) {
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <append_data_to_file+0xd4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10a      	bne.n	80012e8 <append_data_to_file+0x84>
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7fe ffcc 	bl	8000270 <strlen>
 80012d8:	4602      	mov	r2, r0
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d103      	bne.n	80012e8 <append_data_to_file+0x84>
            //UART_Transmit_Messages_BlackBox("Data written to the file successfully! \r\n");
            // Synchronize file information with the disk
            f_sync(&fil);
 80012e0:	4814      	ldr	r0, [pc, #80]	; (8001334 <append_data_to_file+0xd0>)
 80012e2:	f00b f9d1 	bl	800c688 <f_sync>
 80012e6:	e01a      	b.n	800131e <append_data_to_file+0xba>
        } else {
            if (fresult != FR_OK) {
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <append_data_to_file+0xd4>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00a      	beq.n	8001306 <append_data_to_file+0xa2>
                sprintf(data_buffer, "Error writing data to the file. Error code: %d \r\n", fresult);
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <append_data_to_file+0xd4>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4911      	ldr	r1, [pc, #68]	; (800133c <append_data_to_file+0xd8>)
 80012f8:	4811      	ldr	r0, [pc, #68]	; (8001340 <append_data_to_file+0xdc>)
 80012fa:	f017 f807 	bl	801830c <siprintf>
                UART_Transmit_Messages_BlackBox(data_buffer);
 80012fe:	4810      	ldr	r0, [pc, #64]	; (8001340 <append_data_to_file+0xdc>)
 8001300:	f7ff fe80 	bl	8001004 <UART_Transmit_Messages_BlackBox>
 8001304:	e00b      	b.n	800131e <append_data_to_file+0xba>
            } else {
                sprintf(data_buffer, "Error: Incorrect number of bytes written. Expected: %d, Actual: %d \r\n",
 8001306:	6838      	ldr	r0, [r7, #0]
 8001308:	f7fe ffb2 	bl	8000270 <strlen>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <append_data_to_file+0xe0>)
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <append_data_to_file+0xdc>)
 8001314:	f016 fffa 	bl	801830c <siprintf>
                        strlen(data), bytes_written);
                UART_Transmit_Messages_BlackBox(data_buffer);
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <append_data_to_file+0xdc>)
 800131a:	f7ff fe73 	bl	8001004 <UART_Transmit_Messages_BlackBox>
            }
        }

        // Close file
        f_close(&fil);
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <append_data_to_file+0xd0>)
 8001320:	f00b fa3b 	bl	800c79a <f_close>
    } else {
        UART_Transmit_Messages_BlackBox("Error opening the file for writing. \r\n");
    }
}
 8001324:	e002      	b.n	800132c <append_data_to_file+0xc8>
        UART_Transmit_Messages_BlackBox("Error opening the file for writing. \r\n");
 8001326:	4808      	ldr	r0, [pc, #32]	; (8001348 <append_data_to_file+0xe4>)
 8001328:	f7ff fe6c 	bl	8001004 <UART_Transmit_Messages_BlackBox>
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20001ab8 	.word	0x20001ab8
 8001338:	20002ae8 	.word	0x20002ae8
 800133c:	0801db08 	.word	0x0801db08
 8001340:	20002aec 	.word	0x20002aec
 8001344:	0801db3c 	.word	0x0801db3c
 8001348:	0801db84 	.word	0x0801db84

0800134c <QMC_init>:



//###############################################################################################################
uint32_t QMC_init(I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af04      	add	r7, sp, #16
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	uint8_t array[2];
	magneto_sensor.i2c=i2c;
 8001358:	4a33      	ldr	r2, [pc, #204]	; (8001428 <QMC_init+0xdc>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
	magneto_sensor.Control_Register=0x11;
 800135e:	4b32      	ldr	r3, [pc, #200]	; (8001428 <QMC_init+0xdc>)
 8001360:	2211      	movs	r2, #17
 8001362:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 8001364:	2301      	movs	r3, #1
 8001366:	733b      	strb	r3, [r7, #12]
	array[1]=magneto_sensor.Control_Register;
 8001368:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <QMC_init+0xdc>)
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	737b      	strb	r3, [r7, #13]

	if(Output_Data_Rate==200)magneto_sensor.Control_Register|=0b00001100;
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	2bc8      	cmp	r3, #200	; 0xc8
 8001372:	d107      	bne.n	8001384 <QMC_init+0x38>
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <QMC_init+0xdc>)
 8001376:	791b      	ldrb	r3, [r3, #4]
 8001378:	f043 030c 	orr.w	r3, r3, #12
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <QMC_init+0xdc>)
 8001380:	711a      	strb	r2, [r3, #4]
 8001382:	e024      	b.n	80013ce <QMC_init+0x82>
	else if(Output_Data_Rate==100)magneto_sensor.Control_Register|=0b00001000;
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d107      	bne.n	800139a <QMC_init+0x4e>
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <QMC_init+0xdc>)
 800138c:	791b      	ldrb	r3, [r3, #4]
 800138e:	f043 0308 	orr.w	r3, r3, #8
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <QMC_init+0xdc>)
 8001396:	711a      	strb	r2, [r3, #4]
 8001398:	e019      	b.n	80013ce <QMC_init+0x82>
	else if(Output_Data_Rate==50)magneto_sensor.Control_Register|=0b00000100;
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	2b32      	cmp	r3, #50	; 0x32
 800139e:	d107      	bne.n	80013b0 <QMC_init+0x64>
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <QMC_init+0xdc>)
 80013a2:	791b      	ldrb	r3, [r3, #4]
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <QMC_init+0xdc>)
 80013ac:	711a      	strb	r2, [r3, #4]
 80013ae:	e00e      	b.n	80013ce <QMC_init+0x82>
	else if(Output_Data_Rate==10)magneto_sensor.Control_Register|=0b00000000;
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b0a      	cmp	r3, #10
 80013b4:	d104      	bne.n	80013c0 <QMC_init+0x74>
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <QMC_init+0xdc>)
 80013b8:	791a      	ldrb	r2, [r3, #4]
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <QMC_init+0xdc>)
 80013bc:	711a      	strb	r2, [r3, #4]
 80013be:	e006      	b.n	80013ce <QMC_init+0x82>
	else magneto_sensor.Control_Register|=0b00001100;
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <QMC_init+0xdc>)
 80013c2:	791b      	ldrb	r3, [r3, #4]
 80013c4:	f043 030c 	orr.w	r3, r3, #12
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <QMC_init+0xdc>)
 80013cc:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <QMC_init+0xdc>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	2364      	movs	r3, #100	; 0x64
 80013d4:	9302      	str	r3, [sp, #8]
 80013d6:	2301      	movs	r3, #1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2301      	movs	r3, #1
 80013e2:	220b      	movs	r2, #11
 80013e4:	211a      	movs	r1, #26
 80013e6:	f005 fa17 	bl	8006818 <HAL_I2C_Mem_Write>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <QMC_init+0xa8>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e014      	b.n	800141e <QMC_init+0xd2>
	if(HAL_I2C_Mem_Write(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <QMC_init+0xdc>)
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	2364      	movs	r3, #100	; 0x64
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2301      	movs	r3, #1
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	3301      	adds	r3, #1
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	2209      	movs	r2, #9
 800140c:	211a      	movs	r1, #26
 800140e:	f005 fa03 	bl	8006818 <HAL_I2C_Mem_Write>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <QMC_init+0xd0>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <QMC_init+0xd2>

	return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20002efc 	.word	0x20002efc
 800142c:	00000000 	.word	0x00000000

08001430 <QMC_read>:

uint8_t QMC_read()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af04      	add	r7, sp, #16
	  magneto_sensor.datas[0]=0;
 8001436:	4b4c      	ldr	r3, [pc, #304]	; (8001568 <QMC_read+0x138>)
 8001438:	2200      	movs	r2, #0
 800143a:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x06, 1, magneto_sensor.datas, 1, 100);
 800143c:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <QMC_read+0x138>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	2364      	movs	r3, #100	; 0x64
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	4b48      	ldr	r3, [pc, #288]	; (800156c <QMC_read+0x13c>)
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	2206      	movs	r2, #6
 8001450:	211a      	movs	r1, #26
 8001452:	f005 fadb 	bl	8006a0c <HAL_I2C_Mem_Read>

	  if((magneto_sensor.datas[0]&0x01)==1)
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <QMC_read+0x138>)
 8001458:	795b      	ldrb	r3, [r3, #5]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d075      	beq.n	800154e <QMC_read+0x11e>
	  {
		  HAL_I2C_Mem_Read(magneto_sensor.i2c, MAGNETOMETER_ADDRESS << 1, 0x00, 1, magneto_sensor.datas, 6, 100);
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <QMC_read+0x138>)
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	2364      	movs	r3, #100	; 0x64
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	2306      	movs	r3, #6
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	4b3f      	ldr	r3, [pc, #252]	; (800156c <QMC_read+0x13c>)
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2301      	movs	r3, #1
 8001474:	2200      	movs	r2, #0
 8001476:	211a      	movs	r1, #26
 8001478:	f005 fac8 	bl	8006a0c <HAL_I2C_Mem_Read>
		  magneto_sensor.Xaxis= (magneto_sensor.datas[1]<<8) | magneto_sensor.datas[0];
 800147c:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <QMC_read+0x138>)
 800147e:	799b      	ldrb	r3, [r3, #6]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	b21a      	sxth	r2, r3
 8001484:	4b38      	ldr	r3, [pc, #224]	; (8001568 <QMC_read+0x138>)
 8001486:	795b      	ldrb	r3, [r3, #5]
 8001488:	b21b      	sxth	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <QMC_read+0x138>)
 8001490:	819a      	strh	r2, [r3, #12]
		  magneto_sensor.Yaxis= (magneto_sensor.datas[3]<<8) | magneto_sensor.datas[2];
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <QMC_read+0x138>)
 8001494:	7a1b      	ldrb	r3, [r3, #8]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <QMC_read+0x138>)
 800149c:	79db      	ldrb	r3, [r3, #7]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	4b30      	ldr	r3, [pc, #192]	; (8001568 <QMC_read+0x138>)
 80014a6:	81da      	strh	r2, [r3, #14]
		  magneto_sensor.Zaxis= (magneto_sensor.datas[5]<<8) | magneto_sensor.datas[4];
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <QMC_read+0x138>)
 80014aa:	7a9b      	ldrb	r3, [r3, #10]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <QMC_read+0x138>)
 80014b2:	7a5b      	ldrb	r3, [r3, #9]
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21a      	sxth	r2, r3
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <QMC_read+0x138>)
 80014bc:	821a      	strh	r2, [r3, #16]

		  magneto_sensor.compas=atan2f(magneto_sensor.Yaxis,magneto_sensor.Xaxis)*180.00/M_PI;
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <QMC_read+0x138>)
 80014c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <QMC_read+0x138>)
 80014ce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014d2:	ee07 3a10 	vmov	s14, r3
 80014d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014da:	eef0 0a47 	vmov.f32	s1, s14
 80014de:	eeb0 0a67 	vmov.f32	s0, s15
 80014e2:	f01a fce9 	bl	801beb8 <atan2f>
 80014e6:	ee10 3a10 	vmov	r3, s0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f836 	bl	800055c <__aeabi_f2d>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <QMC_read+0x140>)
 80014f6:	f7ff f889 	bl	800060c <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	a317      	add	r3, pc, #92	; (adr r3, 8001560 <QMC_read+0x130>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f9aa 	bl	8000860 <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb72 	bl	8000bfc <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <QMC_read+0x138>)
 800151c:	6193      	str	r3, [r2, #24]

		  if(magneto_sensor.compas>0)
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <QMC_read+0x138>)
 8001520:	edd3 7a06 	vldr	s15, [r3, #24]
 8001524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	dd04      	ble.n	8001538 <QMC_read+0x108>
		  {
			  magneto_sensor.heading= magneto_sensor.compas;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <QMC_read+0x138>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <QMC_read+0x138>)
 8001534:	6153      	str	r3, [r2, #20]
 8001536:	e00c      	b.n	8001552 <QMC_read+0x122>
		  }
		  else
		  {
			  magneto_sensor.heading=360+magneto_sensor.compas;
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <QMC_read+0x138>)
 800153a:	edd3 7a06 	vldr	s15, [r3, #24]
 800153e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001574 <QMC_read+0x144>
 8001542:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <QMC_read+0x138>)
 8001548:	edc3 7a05 	vstr	s15, [r3, #20]
 800154c:	e001      	b.n	8001552 <QMC_read+0x122>
		  }
	  }
	  else
	  {
		  return 1;
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <QMC_read+0x124>
	  }
return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	f3af 8000 	nop.w
 8001560:	54442d18 	.word	0x54442d18
 8001564:	400921fb 	.word	0x400921fb
 8001568:	20002efc 	.word	0x20002efc
 800156c:	20002f01 	.word	0x20002f01
 8001570:	40668000 	.word	0x40668000
 8001574:	43b40000 	.word	0x43b40000

08001578 <Transmit_Compass_Data>:
}




CompassData Transmit_Compass_Data(){
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]


		if(QMC_read() == 0)
 8001580:	f7ff ff56 	bl	8001430 <QMC_read>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 8082 	bne.w	8001690 <Transmit_Compass_Data+0x118>
		{
			float heading = magneto_sensor.heading;
 800158c:	4b4e      	ldr	r3, [pc, #312]	; (80016c8 <Transmit_Compass_Data+0x150>)
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	61fb      	str	r3, [r7, #28]


	        // Calculate magDecRad based on your requirements
			double calculatedMagDecRad = heading * (M_PI / 180.0);
 8001592:	69f8      	ldr	r0, [r7, #28]
 8001594:	f7fe ffe2 	bl	800055c <__aeabi_f2d>
 8001598:	a349      	add	r3, pc, #292	; (adr r3, 80016c0 <Transmit_Compass_Data+0x148>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7ff f835 	bl	800060c <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	e9c7 2304 	strd	r2, r3, [r7, #16]


			//Compas_Value=magneto_sensor.heading;
			//char mag_buffer[100];
			compass_data.mag_unit_x = (double)magneto_sensor.Xaxis;
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <Transmit_Compass_Data+0x150>)
 80015ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffc1 	bl	8000538 <__aeabi_i2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4944      	ldr	r1, [pc, #272]	; (80016cc <Transmit_Compass_Data+0x154>)
 80015bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
			compass_data.mag_unit_y = (double)magneto_sensor.Yaxis;
 80015c0:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <Transmit_Compass_Data+0x150>)
 80015c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffb6 	bl	8000538 <__aeabi_i2d>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	493e      	ldr	r1, [pc, #248]	; (80016cc <Transmit_Compass_Data+0x154>)
 80015d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
			compass_data.mag_unit_z = (double)magneto_sensor.Zaxis;
 80015d6:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <Transmit_Compass_Data+0x150>)
 80015d8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffab 	bl	8000538 <__aeabi_i2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4939      	ldr	r1, [pc, #228]	; (80016cc <Transmit_Compass_Data+0x154>)
 80015e8:	e9c1 2308 	strd	r2, r3, [r1, #32]
			//sprintf(mag_buffer, "X=%d, Y=%d, Z=%d \r\n", magneto_sensor.Xaxis, magneto_sensor.Yaxis, magneto_sensor.Zaxis);
			//sprintf(mag_heading_buffer, "HEADING : %.1f\r\n",magneto_sensor.heading);
			//UART_Transmit_Messages_Magnetometer(mag_buffer);
			//UART_Transmit_Messages_Magnetometer(mag_heading_buffer);

	        const int numDirections = sizeof(directions) / sizeof(directions[0]);
 80015ec:	2309      	movs	r3, #9
 80015ee:	60fb      	str	r3, [r7, #12]
	        const char* direction = "Unknown";
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <Transmit_Compass_Data+0x158>)
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24

	        for (int i = 0; i < numDirections; ++i) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
 80015f8:	e02e      	b.n	8001658 <Transmit_Compass_Data+0xe0>
	            if (heading >= directions[i].min && heading <= directions[i].max) {
 80015fa:	4936      	ldr	r1, [pc, #216]	; (80016d4 <Transmit_Compass_Data+0x15c>)
 80015fc:	6a3a      	ldr	r2, [r7, #32]
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	db1b      	blt.n	8001652 <Transmit_Compass_Data+0xda>
 800161a:	492e      	ldr	r1, [pc, #184]	; (80016d4 <Transmit_Compass_Data+0x15c>)
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3304      	adds	r3, #4
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	d80a      	bhi.n	8001652 <Transmit_Compass_Data+0xda>
	                direction = directions[i].direction;
 800163c:	4925      	ldr	r1, [pc, #148]	; (80016d4 <Transmit_Compass_Data+0x15c>)
 800163e:	6a3a      	ldr	r2, [r7, #32]
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	3308      	adds	r3, #8
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
	                break;
 8001650:	e006      	b.n	8001660 <Transmit_Compass_Data+0xe8>
	        for (int i = 0; i < numDirections; ++i) {
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	3301      	adds	r3, #1
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	6a3a      	ldr	r2, [r7, #32]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	429a      	cmp	r2, r3
 800165e:	dbcc      	blt.n	80015fa <Transmit_Compass_Data+0x82>
	            }
	        }

	        compass_data.heading = heading;
 8001660:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <Transmit_Compass_Data+0x154>)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	6013      	str	r3, [r2, #0]
	        compass_data.direction = direction;
 8001666:	4a19      	ldr	r2, [pc, #100]	; (80016cc <Transmit_Compass_Data+0x154>)
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	6293      	str	r3, [r2, #40]	; 0x28
	        compass_data.magDecRad = calculatedMagDecRad;
 800166c:	4917      	ldr	r1, [pc, #92]	; (80016cc <Transmit_Compass_Data+0x154>)
 800166e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001672:	e9c1 2302 	strd	r2, r3, [r1, #8]



	        return compass_data;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <Transmit_Compass_Data+0x154>)
 800167a:	461c      	mov	r4, r3
 800167c:	4615      	mov	r5, r2
 800167e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001686:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800168a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800168e:	e012      	b.n	80016b6 <Transmit_Compass_Data+0x13e>

		}
		else
		{
	        compass_data.heading = 0;
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <Transmit_Compass_Data+0x154>)
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
	        compass_data.direction = "ERR";
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <Transmit_Compass_Data+0x154>)
 800169a:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <Transmit_Compass_Data+0x160>)
 800169c:	629a      	str	r2, [r3, #40]	; 0x28

	        return compass_data;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <Transmit_Compass_Data+0x154>)
 80016a2:	461c      	mov	r4, r3
 80016a4:	4615      	mov	r5, r2
 80016a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}

}
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bdb0      	pop	{r4, r5, r7, pc}
 80016be:	bf00      	nop
 80016c0:	a2529d39 	.word	0xa2529d39
 80016c4:	3f91df46 	.word	0x3f91df46
 80016c8:	20002efc 	.word	0x20002efc
 80016cc:	20002f18 	.word	0x20002f18
 80016d0:	0801dc34 	.word	0x0801dc34
 80016d4:	0801eca8 	.word	0x0801eca8
 80016d8:	0801dc3c 	.word	0x0801dc3c

080016dc <UART_Transmit_String>:
	uint8_t all_reg_rx[8];
	struct LoRa_Handler LoraRX={0};


void UART_Transmit_String(const char* str)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7fe fdc3 	bl	8000270 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <UART_Transmit_String+0x28>)
 80016f6:	f008 f8a6 	bl	8009846 <HAL_UART_Transmit>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20003be0 	.word	0x20003be0

08001708 <UART_Transmit_Logo>:


// Function to read and transmit the ASCII art from a .ans file
void UART_Transmit_Logo() {
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0





    UART_Transmit_String("                                                                \r\n");
 800170c:	482d      	ldr	r0, [pc, #180]	; (80017c4 <UART_Transmit_Logo+0xbc>)
 800170e:	f7ff ffe5 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                                                                \r\n");
 8001712:	482c      	ldr	r0, [pc, #176]	; (80017c4 <UART_Transmit_Logo+0xbc>)
 8001714:	f7ff ffe2 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                            ,,								  \r\n");
 8001718:	482b      	ldr	r0, [pc, #172]	; (80017c8 <UART_Transmit_Logo+0xc0>)
 800171a:	f7ff ffdf 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                           ^B$~								  \r\n");
 800171e:	482b      	ldr	r0, [pc, #172]	; (80017cc <UART_Transmit_Logo+0xc4>)
 8001720:	f7ff ffdc 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                          '$$$$|								  \r\n");
 8001724:	482a      	ldr	r0, [pc, #168]	; (80017d0 <UART_Transmit_Logo+0xc8>)
 8001726:	f7ff ffd9 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                           ,$$$$/							      \r\n");
 800172a:	482a      	ldr	r0, [pc, #168]	; (80017d4 <UART_Transmit_Logo+0xcc>)
 800172c:	f7ff ffd6 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                            _$$$$j							  \r\n");
 8001730:	4829      	ldr	r0, [pc, #164]	; (80017d8 <UART_Transmit_Logo+0xd0>)
 8001732:	f7ff ffd3 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                             {$$$$v'							  \r\n");
 8001736:	4829      	ldr	r0, [pc, #164]	; (80017dc <UART_Transmit_Logo+0xd4>)
 8001738:	f7ff ffd0 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                              <$$$$8.						      \r\n");
 800173c:	4828      	ldr	r0, [pc, #160]	; (80017e0 <UART_Transmit_Logo+0xd8>)
 800173e:	f7ff ffcd 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                               i$$$$x						      \r\n");
 8001742:	4828      	ldr	r0, [pc, #160]	; (80017e4 <UART_Transmit_Logo+0xdc>)
 8001744:	f7ff ffca 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                    ,'          I$$$$'						  \r\n");
 8001748:	4827      	ldr	r0, [pc, #156]	; (80017e8 <UART_Transmit_Logo+0xe0>)
 800174a:	f7ff ffc7 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                   +$8`     |M`  %$$$n.						  \r\n");
 800174e:	4827      	ldr	r0, [pc, #156]	; (80017ec <UART_Transmit_Logo+0xe4>)
 8001750:	f7ff ffc4 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                  |$$$@.   1$$@`  'W$$$W'					      \r\n");
 8001754:	4826      	ldr	r0, [pc, #152]	; (80017f0 <UART_Transmit_Logo+0xe8>)
 8001756:	f7ff ffc1 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("                 t$$$$:   '*}|[M   '&$$$8'				      \r\n");
 800175a:	4826      	ldr	r0, [pc, #152]	; (80017f4 <UART_Transmit_Logo+0xec>)
 800175c:	f7ff ffbe 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("               .u$$$$!    x8/fx$,   `@$$$%,					  \r\n");
 8001760:	4825      	ldr	r0, [pc, #148]	; (80017f8 <UART_Transmit_Logo+0xf0>)
 8001762:	f7ff ffbb 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("              '&$$$$+     $$$$$${    `%$$$$'					  \r\n");
 8001766:	4825      	ldr	r0, [pc, #148]	; (80017fc <UART_Transmit_Logo+0xf4>)
 8001768:	f7ff ffb8 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("             .8$$$$>      $$$$$$|     `8$$$&.				      \r\n");
 800176c:	4824      	ldr	r0, [pc, #144]	; (8001800 <UART_Transmit_Logo+0xf8>)
 800176e:	f7ff ffb5 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("             x$$$$l       $$$$$$}      '&$$$W'				  \r\n");
 8001772:	4824      	ldr	r0, [pc, #144]	; (8001804 <UART_Transmit_Logo+0xfc>)
 8001774:	f7ff ffb2 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("           .r$$$%'        #$$$$$:       .n$$$8^				  \r\n");
 8001778:	4823      	ldr	r0, [pc, #140]	; (8001808 <UART_Transmit_Logo+0x100>)
 800177a:	f7ff ffaf 	bl	80016dc <UART_Transmit_String>
 	UART_Transmit_String("          'M$$$&'       .t+$$$$@>].       /$$$$;				  \r\n");
 800177e:	4823      	ldr	r0, [pc, #140]	; (800180c <UART_Transmit_Logo+0x104>)
 8001780:	f7ff ffac 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("         '&$$$W'       ,$$,$$$$)f$W        x$$$$!			      \r\n");
 8001784:	4822      	ldr	r0, [pc, #136]	; (8001810 <UART_Transmit_Logo+0x108>)
 8001786:	f7ff ffa9 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("        '8$$$&.        !$$;t$$$`@$$        '8$$$$<			  \r\n");
 800178a:	4822      	ldr	r0, [pc, #136]	; (8001814 <UART_Transmit_Logo+0x10c>)
 800178c:	f7ff ffa6 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("       ,B$$$B`         !$$>.^;..$$$         'c$$$$1			  \r\n");
 8001790:	4821      	ldr	r0, [pc, #132]	; (8001818 <UART_Transmit_Logo+0x110>)
 8001792:	f7ff ffa3 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("      '$$$$%`          '+^. ^>  ':{           j$$$$-			  \r\n");
 8001796:	4821      	ldr	r0, [pc, #132]	; (800181c <UART_Transmit_Logo+0x114>)
 8001798:	f7ff ffa0 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("     .&$$$8'            .^' ^!  '`             t$$$$:		      \r\n");
 800179c:	4820      	ldr	r0, [pc, #128]	; (8001820 <UART_Transmit_Logo+0x118>)
 800179e:	f7ff ff9d 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("    'W$$$&'            '`   `;   .^             /$$$$I		  \r\n");
 80017a2:	4820      	ldr	r0, [pc, #128]	; (8001824 <UART_Transmit_Logo+0x11c>)
 80017a4:	f7ff ff9a 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("   ^8$$$n.                  `,                   +$$$$]		  \r\n");
 80017a8:	481f      	ldr	r0, [pc, #124]	; (8001828 <UART_Transmit_Logo+0x120>)
 80017aa:	f7ff ff97 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String("  ;$$$$/                    .^                    ,$$$$j		  \r\n");
 80017ae:	481f      	ldr	r0, [pc, #124]	; (800182c <UART_Transmit_Logo+0x124>)
 80017b0:	f7ff ff94 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String(" !$$$$x                     .'                     _$$$$x.	  \r\n");
 80017b4:	481e      	ldr	r0, [pc, #120]	; (8001830 <UART_Transmit_Logo+0x128>)
 80017b6:	f7ff ff91 	bl	80016dc <UART_Transmit_String>
	UART_Transmit_String(" .....                       .                      .....	      \r\n");
 80017ba:	481e      	ldr	r0, [pc, #120]	; (8001834 <UART_Transmit_Logo+0x12c>)
 80017bc:	f7ff ff8e 	bl	80016dc <UART_Transmit_String>

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	0801dc40 	.word	0x0801dc40
 80017c8:	0801dc84 	.word	0x0801dc84
 80017cc:	0801dcb0 	.word	0x0801dcb0
 80017d0:	0801dcdc 	.word	0x0801dcdc
 80017d4:	0801dd0c 	.word	0x0801dd0c
 80017d8:	0801dd40 	.word	0x0801dd40
 80017dc:	0801dd70 	.word	0x0801dd70
 80017e0:	0801dda0 	.word	0x0801dda0
 80017e4:	0801ddd4 	.word	0x0801ddd4
 80017e8:	0801de08 	.word	0x0801de08
 80017ec:	0801de3c 	.word	0x0801de3c
 80017f0:	0801de70 	.word	0x0801de70
 80017f4:	0801dea8 	.word	0x0801dea8
 80017f8:	0801dee0 	.word	0x0801dee0
 80017fc:	0801df18 	.word	0x0801df18
 8001800:	0801df50 	.word	0x0801df50
 8001804:	0801df8c 	.word	0x0801df8c
 8001808:	0801dfc4 	.word	0x0801dfc4
 800180c:	0801dffc 	.word	0x0801dffc
 8001810:	0801e038 	.word	0x0801e038
 8001814:	0801e078 	.word	0x0801e078
 8001818:	0801e0b4 	.word	0x0801e0b4
 800181c:	0801e0f0 	.word	0x0801e0f0
 8001820:	0801e12c 	.word	0x0801e12c
 8001824:	0801e16c 	.word	0x0801e16c
 8001828:	0801e1ac 	.word	0x0801e1ac
 800182c:	0801e1ec 	.word	0x0801e1ec
 8001830:	0801e22c 	.word	0x0801e22c
 8001834:	0801e26c 	.word	0x0801e26c

08001838 <waitForStartCommand>:

//-------------------------   RTOS DEDICATED FUNCTIONS --------------------------------//


// Function to wait for the start command ('00$')
bool waitForStartCommand(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
    char inputBuffer[4] = {0}; // Buffer to store received command
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]

    // Read user input character by character until we encounter '$'
    for (int bufferIndex = 0; bufferIndex < 3; bufferIndex++) {
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	e00b      	b.n	8001860 <waitForStartCommand+0x28>
        HAL_UART_Receive(&huart1, (uint8_t *)&inputBuffer[bufferIndex], sizeof(char), HAL_MAX_DELAY);
 8001848:	463a      	mov	r2, r7
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	18d1      	adds	r1, r2, r3
 800184e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001852:	2201      	movs	r2, #1
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <waitForStartCommand+0x50>)
 8001856:	f008 f888 	bl	800996a <HAL_UART_Receive>
    for (int bufferIndex = 0; bufferIndex < 3; bufferIndex++) {
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3301      	adds	r3, #1
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	ddf0      	ble.n	8001848 <waitForStartCommand+0x10>
    }

    // Null-terminate the input buffer
    inputBuffer[3] = '\0';
 8001866:	2300      	movs	r3, #0
 8001868:	70fb      	strb	r3, [r7, #3]

    // Check if the received command is '00$'
    if (strcmp(inputBuffer, "00$") == 0) {
 800186a:	463b      	mov	r3, r7
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <waitForStartCommand+0x54>)
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fd06 	bl	8000280 <strcmp>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <waitForStartCommand+0x46>
        return true; // If '00$' is received, return true
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <waitForStartCommand+0x48>
    } else {
        return false; // If not received, return false
 800187e:	2300      	movs	r3, #0
    }
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20003be0 	.word	0x20003be0
 800188c:	0801e2b0 	.word	0x0801e2b0

08001890 <waitForUserInput>:



// Function to wait for user input
char waitForUserInput(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
    char userInput = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	71fb      	strb	r3, [r7, #7]

    // Wait for user input (single character)
    HAL_UART_Receive(&huart1, (uint8_t*)&userInput, 1, HAL_MAX_DELAY);
 800189a:	1df9      	adds	r1, r7, #7
 800189c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a0:	2201      	movs	r2, #1
 80018a2:	4804      	ldr	r0, [pc, #16]	; (80018b4 <waitForUserInput+0x24>)
 80018a4:	f008 f861 	bl	800996a <HAL_UART_Receive>

    // Return the received character
    return userInput;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20003be0 	.word	0x20003be0

080018b8 <printMenu>:



// Function to print the menu based on the current state
void printMenu(enum MenuState state) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b06      	cmp	r3, #6
 80018c6:	d842      	bhi.n	800194e <printMenu+0x96>
 80018c8:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <printMenu+0x18>)
 80018ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ce:	bf00      	nop
 80018d0:	080018ed 	.word	0x080018ed
 80018d4:	0800191f 	.word	0x0800191f
 80018d8:	08001927 	.word	0x08001927
 80018dc:	0800192f 	.word	0x0800192f
 80018e0:	08001937 	.word	0x08001937
 80018e4:	0800193f 	.word	0x0800193f
 80018e8:	08001947 	.word	0x08001947
        case MENU_MAIN:
        	UART_Transmit_String("\r\n");
 80018ec:	481a      	ldr	r0, [pc, #104]	; (8001958 <printMenu+0xa0>)
 80018ee:	f7ff fef5 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("0 - Initialize Flight Computer\r\n");
 80018f2:	481a      	ldr	r0, [pc, #104]	; (800195c <printMenu+0xa4>)
 80018f4:	f7ff fef2 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("1 - Read All Sensors\r\n");
 80018f8:	4819      	ldr	r0, [pc, #100]	; (8001960 <printMenu+0xa8>)
 80018fa:	f7ff feef 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("2 - LoRa Test (Sender/Receiver)\r\n");
 80018fe:	4819      	ldr	r0, [pc, #100]	; (8001964 <printMenu+0xac>)
 8001900:	f7ff feec 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("3 - Execute Pyro Test (Ignition)\r\n");
 8001904:	4818      	ldr	r0, [pc, #96]	; (8001968 <printMenu+0xb0>)
 8001906:	f7ff fee9 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("4 - Execute Pyro Test (Parachute)\r\n");
 800190a:	4818      	ldr	r0, [pc, #96]	; (800196c <printMenu+0xb4>)
 800190c:	f7ff fee6 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("5 - Launch Procedure\r\n");
 8001910:	4817      	ldr	r0, [pc, #92]	; (8001970 <printMenu+0xb8>)
 8001912:	f7ff fee3 	bl	80016dc <UART_Transmit_String>
            UART_Transmit_String("\r\n");
 8001916:	4810      	ldr	r0, [pc, #64]	; (8001958 <printMenu+0xa0>)
 8001918:	f7ff fee0 	bl	80016dc <UART_Transmit_String>
            break;
 800191c:	e018      	b.n	8001950 <printMenu+0x98>
        case MENU_INIT:
            UART_Transmit_String("Initializing the Flight Controller...\r\n");
 800191e:	4815      	ldr	r0, [pc, #84]	; (8001974 <printMenu+0xbc>)
 8001920:	f7ff fedc 	bl	80016dc <UART_Transmit_String>
            break;
 8001924:	e014      	b.n	8001950 <printMenu+0x98>
        case MENU_SENSOR_READINGS:
            UART_Transmit_String("Reading Sensors...\r\n");
 8001926:	4814      	ldr	r0, [pc, #80]	; (8001978 <printMenu+0xc0>)
 8001928:	f7ff fed8 	bl	80016dc <UART_Transmit_String>
            break;
 800192c:	e010      	b.n	8001950 <printMenu+0x98>
        case MENU_LORA:
            UART_Transmit_String("Running LoRa Test...\r\n");
 800192e:	4813      	ldr	r0, [pc, #76]	; (800197c <printMenu+0xc4>)
 8001930:	f7ff fed4 	bl	80016dc <UART_Transmit_String>
            break;
 8001934:	e00c      	b.n	8001950 <printMenu+0x98>
        case MENU_IGNITION:
            UART_Transmit_String("Starting Firing test (Ignition)...\r\n");
 8001936:	4812      	ldr	r0, [pc, #72]	; (8001980 <printMenu+0xc8>)
 8001938:	f7ff fed0 	bl	80016dc <UART_Transmit_String>
            break;
 800193c:	e008      	b.n	8001950 <printMenu+0x98>
        case MENU_PARACHUTE:
            UART_Transmit_String("Starting Firing test (Parachute)...\r\n");
 800193e:	4811      	ldr	r0, [pc, #68]	; (8001984 <printMenu+0xcc>)
 8001940:	f7ff fecc 	bl	80016dc <UART_Transmit_String>
            break;
 8001944:	e004      	b.n	8001950 <printMenu+0x98>
        case MENU_LAUNCH:
            UART_Transmit_String("Launching Procedure...\r\n");
 8001946:	4810      	ldr	r0, [pc, #64]	; (8001988 <printMenu+0xd0>)
 8001948:	f7ff fec8 	bl	80016dc <UART_Transmit_String>
            break;
 800194c:	e000      	b.n	8001950 <printMenu+0x98>
        default:
            break;
 800194e:	bf00      	nop
    }
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	0801e2b4 	.word	0x0801e2b4
 800195c:	0801e2b8 	.word	0x0801e2b8
 8001960:	0801e2dc 	.word	0x0801e2dc
 8001964:	0801e2f4 	.word	0x0801e2f4
 8001968:	0801e318 	.word	0x0801e318
 800196c:	0801e33c 	.word	0x0801e33c
 8001970:	0801e360 	.word	0x0801e360
 8001974:	0801e378 	.word	0x0801e378
 8001978:	0801e3a0 	.word	0x0801e3a0
 800197c:	0801e3b8 	.word	0x0801e3b8
 8001980:	0801e3d0 	.word	0x0801e3d0
 8001984:	0801e3f8 	.word	0x0801e3f8
 8001988:	0801e420 	.word	0x0801e420

0800198c <handleUserInput>:



// Function to handle user input and change the current state
void handleUserInput(char command) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
    switch (command) {
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	3b30      	subs	r3, #48	; 0x30
 800199a:	2b05      	cmp	r3, #5
 800199c:	d826      	bhi.n	80019ec <handleUserInput+0x60>
 800199e:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <handleUserInput+0x18>)
 80019a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a4:	080019bd 	.word	0x080019bd
 80019a8:	080019c5 	.word	0x080019c5
 80019ac:	080019cd 	.word	0x080019cd
 80019b0:	080019d5 	.word	0x080019d5
 80019b4:	080019dd 	.word	0x080019dd
 80019b8:	080019e5 	.word	0x080019e5
        case '0':
            currentMenuState = MENU_INIT;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <handleUserInput+0x70>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
            break;
 80019c2:	e017      	b.n	80019f4 <handleUserInput+0x68>
        case '1':
            currentMenuState = MENU_SENSOR_READINGS;
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <handleUserInput+0x70>)
 80019c6:	2202      	movs	r2, #2
 80019c8:	701a      	strb	r2, [r3, #0]
            break;
 80019ca:	e013      	b.n	80019f4 <handleUserInput+0x68>
        case '2':
            currentMenuState = MENU_LORA;
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <handleUserInput+0x70>)
 80019ce:	2203      	movs	r2, #3
 80019d0:	701a      	strb	r2, [r3, #0]
            break;
 80019d2:	e00f      	b.n	80019f4 <handleUserInput+0x68>
        case '3':
            currentMenuState = MENU_IGNITION;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <handleUserInput+0x70>)
 80019d6:	2204      	movs	r2, #4
 80019d8:	701a      	strb	r2, [r3, #0]
            break;
 80019da:	e00b      	b.n	80019f4 <handleUserInput+0x68>
        case '4':
            currentMenuState = MENU_PARACHUTE;
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <handleUserInput+0x70>)
 80019de:	2205      	movs	r2, #5
 80019e0:	701a      	strb	r2, [r3, #0]
            break;
 80019e2:	e007      	b.n	80019f4 <handleUserInput+0x68>
        case '5':
            currentMenuState = MENU_LAUNCH;
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <handleUserInput+0x70>)
 80019e6:	2206      	movs	r2, #6
 80019e8:	701a      	strb	r2, [r3, #0]
            break;
 80019ea:	e003      	b.n	80019f4 <handleUserInput+0x68>
        default:
            UART_Transmit_String("Invalid command! Try again.\r\n");
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <handleUserInput+0x74>)
 80019ee:	f7ff fe75 	bl	80016dc <UART_Transmit_String>
            break;
 80019f2:	bf00      	nop
    }
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20002f48 	.word	0x20002f48
 8001a00:	0801e43c 	.word	0x0801e43c

08001a04 <printIntroTitle>:
//-------------------------   END RTOS DEDICATED FUNCTIONS --------------------------------//



void printIntroTitle()
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	UART_Transmit_Logo();
 8001a08:	f7ff fe7e 	bl	8001708 <UART_Transmit_Logo>
    UART_Transmit_String("*********************************************************\r\n");
 8001a0c:	4808      	ldr	r0, [pc, #32]	; (8001a30 <printIntroTitle+0x2c>)
 8001a0e:	f7ff fe65 	bl	80016dc <UART_Transmit_String>
    UART_Transmit_String("*               AEROSENTINEL Flight OS                  *\r\n");
 8001a12:	4808      	ldr	r0, [pc, #32]	; (8001a34 <printIntroTitle+0x30>)
 8001a14:	f7ff fe62 	bl	80016dc <UART_Transmit_String>
    UART_Transmit_String("*    A versatile flight control system for your rocket  *\r\n");
 8001a18:	4807      	ldr	r0, [pc, #28]	; (8001a38 <printIntroTitle+0x34>)
 8001a1a:	f7ff fe5f 	bl	80016dc <UART_Transmit_String>
    UART_Transmit_String("*********************************************************\r\n");
 8001a1e:	4804      	ldr	r0, [pc, #16]	; (8001a30 <printIntroTitle+0x2c>)
 8001a20:	f7ff fe5c 	bl	80016dc <UART_Transmit_String>
    mount_sd_card();
 8001a24:	f7ff fb40 	bl	80010a8 <mount_sd_card>
    check_free_space();
 8001a28:	f7ff fb60 	bl	80010ec <check_free_space>


    //scanSingleUARTDevice(&huart1); // Checks for UART devices connected


}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	0801e45c 	.word	0x0801e45c
 8001a34:	0801e498 	.word	0x0801e498
 8001a38:	0801e4d4 	.word	0x0801e4d4

08001a3c <initialization_procedure>:

int32_t initialization_procedure(){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b0d0      	sub	sp, #320	; 0x140
 8001a40:	af00      	add	r7, sp, #0


	  int32_t fc_initialization_state;


	  UART_Transmit_String("Starting initialization process.. \r\n");
 8001a42:	482a      	ldr	r0, [pc, #168]	; (8001aec <initialization_procedure+0xb0>)
 8001a44:	f7ff fe4a 	bl	80016dc <UART_Transmit_String>
	  int32_t imu_init_state = IMU_Initialization();
 8001a48:	f000 fc18 	bl	800227c <IMU_Initialization>
 8001a4c:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	  char imu_buffer[100];

	  HAL_Delay(100);
 8001a50:	2064      	movs	r0, #100	; 0x64
 8001a52:	f003 fceb 	bl	800542c <HAL_Delay>

	  sprintf(imu_buffer, "IMU Initialization. Code : %ld  \r\n", imu_init_state);
 8001a56:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a5a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001a5e:	4924      	ldr	r1, [pc, #144]	; (8001af0 <initialization_procedure+0xb4>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f016 fc53 	bl	801830c <siprintf>
	  UART_Transmit_String(imu_buffer);
 8001a66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fe36 	bl	80016dc <UART_Transmit_String>

	  HAL_Delay(100);
 8001a70:	2064      	movs	r0, #100	; 0x64
 8001a72:	f003 fcdb 	bl	800542c <HAL_Delay>

	  int32_t pressure_init_state = Pressure_Init();
 8001a76:	f000 fe0d 	bl	8002694 <Pressure_Init>
 8001a7a:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
	  char pressure_buffer[100];
	  sprintf(pressure_buffer, "Pressure Initialization. Code : %ld  \r\n", pressure_init_state);
 8001a7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a82:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8001a86:	491b      	ldr	r1, [pc, #108]	; (8001af4 <initialization_procedure+0xb8>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f016 fc3f 	bl	801830c <siprintf>
	  UART_Transmit_String(pressure_buffer);
 8001a8e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fe22 	bl	80016dc <UART_Transmit_String>

	  HAL_Delay(100);
 8001a98:	2064      	movs	r0, #100	; 0x64
 8001a9a:	f003 fcc7 	bl	800542c <HAL_Delay>

	  int32_t magnetometer_init_state = QMC_init(&hi2c1, 200);
 8001a9e:	21c8      	movs	r1, #200	; 0xc8
 8001aa0:	4815      	ldr	r0, [pc, #84]	; (8001af8 <initialization_procedure+0xbc>)
 8001aa2:	f7ff fc53 	bl	800134c <QMC_init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	  char magneto_buffer[100];
	  sprintf(magneto_buffer, "Magnetometer Initialization. Code : %ld  \r\n", magnetometer_init_state);
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001ab2:	4912      	ldr	r1, [pc, #72]	; (8001afc <initialization_procedure+0xc0>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f016 fc29 	bl	801830c <siprintf>
	  UART_Transmit_String(magneto_buffer);
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fe0d 	bl	80016dc <UART_Transmit_String>

	  HAL_Delay(100);
 8001ac2:	2064      	movs	r0, #100	; 0x64
 8001ac4:	f003 fcb2 	bl	800542c <HAL_Delay>




	  fc_initialization_state = imu_init_state + pressure_init_state + magnetometer_init_state;
 8001ac8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001acc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	  return fc_initialization_state;
 8001adc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0801e510 	.word	0x0801e510
 8001af0:	0801e538 	.word	0x0801e538
 8001af4:	0801e55c 	.word	0x0801e55c
 8001af8:	200039e8 	.word	0x200039e8
 8001afc:	0801e584 	.word	0x0801e584

08001b00 <sensors_readings>:


void sensors_readings() {
 8001b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b04:	b0e0      	sub	sp, #384	; 0x180
 8001b06:	af0e      	add	r7, sp, #56	; 0x38
    // Call each sensor function and receive the data structures


    IMUData imu_data = IMU_Data_Read();
 8001b08:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fc89 	bl	8002424 <IMU_Data_Read>
    TemperatureData temperature_data = Transmit_Temperature();
 8001b12:	f001 f9f7 	bl	8002f04 <Transmit_Temperature>
 8001b16:	eef0 7a40 	vmov.f32	s15, s0
 8001b1a:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
    PressureTempData pressure_temp_data = Transmit_Pressure_Temp_Data();
 8001b1e:	f001 f92b 	bl	8002d78 <Transmit_Pressure_Temp_Data>
 8001b22:	eeb0 7a40 	vmov.f32	s14, s0
 8001b26:	eef0 7a60 	vmov.f32	s15, s1
 8001b2a:	ed87 7a46 	vstr	s14, [r7, #280]	; 0x118
 8001b2e:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
    CompassData compass_data = Transmit_Compass_Data();
 8001b32:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fd1e 	bl	8001578 <Transmit_Compass_Data>

    // Format IMU data into the buffer
    sprintf(buffer,"----------------------"
    		"Roll=%.3f°, \r\n"
    		"Pitch=%.3f° , \r\n"
    		"Yaw=%.3f \r\n",imu_data.roll, imu_data.pitch, compass_data.heading);
 8001b3c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
    sprintf(buffer,"----------------------"
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fd0b 	bl	800055c <__aeabi_f2d>
 8001b46:	4680      	mov	r8, r0
 8001b48:	4689      	mov	r9, r1
    		"Yaw=%.3f \r\n",imu_data.roll, imu_data.pitch, compass_data.heading);
 8001b4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
    sprintf(buffer,"----------------------"
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd04 	bl	800055c <__aeabi_f2d>
 8001b54:	4604      	mov	r4, r0
 8001b56:	460d      	mov	r5, r1
    		"Yaw=%.3f \r\n",imu_data.roll, imu_data.pitch, compass_data.heading);
 8001b58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    sprintf(buffer,"----------------------"
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcfd 	bl	800055c <__aeabi_f2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	f107 0020 	add.w	r0, r7, #32
 8001b6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b6e:	e9cd 4500 	strd	r4, r5, [sp]
 8001b72:	4642      	mov	r2, r8
 8001b74:	464b      	mov	r3, r9
 8001b76:	4964      	ldr	r1, [pc, #400]	; (8001d08 <sensors_readings+0x208>)
 8001b78:	f016 fbc8 	bl	801830c <siprintf>
    UART_Transmit_String(buffer);
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fdab 	bl	80016dc <UART_Transmit_String>

	sprintf(buffer, "IMU Data: \n"
		"Acceleration (X=%.3f g, Y=%.3f g, Z=%.3f g), \r\n"
		"Angular Rate (X=%4.2f dps, Y=%4.2f dps, Z=%4.2f dps), \r\n"
		"Roll=%.3f°, Pitch=%.3f°\r\n", // Note the '\r' to return to the beginning of the line
		imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001b86:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
	sprintf(buffer, "IMU Data: \n"
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fce6 	bl	800055c <__aeabi_f2d>
 8001b90:	e9c7 0106 	strd	r0, r1, [r7, #24]
		imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001b94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
	sprintf(buffer, "IMU Data: \n"
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcdf 	bl	800055c <__aeabi_f2d>
 8001b9e:	4682      	mov	sl, r0
 8001ba0:	468b      	mov	fp, r1
		imu_data.acceleration_x, imu_data.acceleration_y, imu_data.acceleration_z,
 8001ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
	sprintf(buffer, "IMU Data: \n"
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcd8 	bl	800055c <__aeabi_f2d>
 8001bac:	e9c7 0104 	strd	r0, r1, [r7, #16]
		imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z,
 8001bb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
	sprintf(buffer, "IMU Data: \n"
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fcd1 	bl	800055c <__aeabi_f2d>
 8001bba:	e9c7 0102 	strd	r0, r1, [r7, #8]
		imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z,
 8001bbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
	sprintf(buffer, "IMU Data: \n"
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fcca 	bl	800055c <__aeabi_f2d>
 8001bc8:	e9c7 0100 	strd	r0, r1, [r7]
		imu_data.angular_rate_x, imu_data.angular_rate_y, imu_data.angular_rate_z,
 8001bcc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
	sprintf(buffer, "IMU Data: \n"
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fcc3 	bl	800055c <__aeabi_f2d>
 8001bd6:	4680      	mov	r8, r0
 8001bd8:	4689      	mov	r9, r1
		imu_data.roll, imu_data.pitch);
 8001bda:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
	sprintf(buffer, "IMU Data: \n"
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fcbc 	bl	800055c <__aeabi_f2d>
 8001be4:	4604      	mov	r4, r0
 8001be6:	460d      	mov	r5, r1
		imu_data.roll, imu_data.pitch);
 8001be8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
	sprintf(buffer, "IMU Data: \n"
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcb5 	bl	800055c <__aeabi_f2d>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	f107 0020 	add.w	r0, r7, #32
 8001bfa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001bfe:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001c02:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001c06:	ed97 7b00 	vldr	d7, [r7]
 8001c0a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001c0e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001c12:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001c16:	ed97 7b04 	vldr	d7, [r7, #16]
 8001c1a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001c1e:	e9cd ab00 	strd	sl, fp, [sp]
 8001c22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c26:	4939      	ldr	r1, [pc, #228]	; (8001d0c <sensors_readings+0x20c>)
 8001c28:	f016 fb70 	bl	801830c <siprintf>
    UART_Transmit_String(buffer);
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fd53 	bl	80016dc <UART_Transmit_String>
    append_data_to_file("data.txt", buffer);
 8001c36:	f107 0320 	add.w	r3, r7, #32
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4834      	ldr	r0, [pc, #208]	; (8001d10 <sensors_readings+0x210>)
 8001c3e:	f7ff fb11 	bl	8001264 <append_data_to_file>

    // Concatenate temperature data to buffer
    sprintf(buffer, "Temperature: %.2f°C \r\n", temperature_data.temperature_celsius/100);
 8001c42:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8001c46:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001d14 <sensors_readings+0x214>
 8001c4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c4e:	ee16 0a90 	vmov	r0, s13
 8001c52:	f7fe fc83 	bl	800055c <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	f107 0020 	add.w	r0, r7, #32
 8001c5e:	492e      	ldr	r1, [pc, #184]	; (8001d18 <sensors_readings+0x218>)
 8001c60:	f016 fb54 	bl	801830c <siprintf>
    UART_Transmit_String(buffer);
 8001c64:	f107 0320 	add.w	r3, r7, #32
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fd37 	bl	80016dc <UART_Transmit_String>
    append_data_to_file("data.txt", buffer);
 8001c6e:	f107 0320 	add.w	r3, r7, #32
 8001c72:	4619      	mov	r1, r3
 8001c74:	4826      	ldr	r0, [pc, #152]	; (8001d10 <sensors_readings+0x210>)
 8001c76:	f7ff faf5 	bl	8001264 <append_data_to_file>

    // Concatenate pressure and temperature data to buffer
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
            pressure_temp_data.pressure_hpa, pressure_temp_data.temperature_celsius);
 8001c7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc6c 	bl	800055c <__aeabi_f2d>
 8001c84:	4604      	mov	r4, r0
 8001c86:	460d      	mov	r5, r1
            pressure_temp_data.pressure_hpa, pressure_temp_data.temperature_celsius);
 8001c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
    sprintf(buffer, "PRESSURE : %.2f hPa, TEMPERATURE : %.2f°C\r\n",
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc65 	bl	800055c <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	f107 0020 	add.w	r0, r7, #32
 8001c9a:	e9cd 2300 	strd	r2, r3, [sp]
 8001c9e:	4622      	mov	r2, r4
 8001ca0:	462b      	mov	r3, r5
 8001ca2:	491e      	ldr	r1, [pc, #120]	; (8001d1c <sensors_readings+0x21c>)
 8001ca4:	f016 fb32 	bl	801830c <siprintf>
    UART_Transmit_String(buffer);
 8001ca8:	f107 0320 	add.w	r3, r7, #32
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fd15 	bl	80016dc <UART_Transmit_String>
    append_data_to_file("data.txt", buffer);
 8001cb2:	f107 0320 	add.w	r3, r7, #32
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4815      	ldr	r0, [pc, #84]	; (8001d10 <sensors_readings+0x210>)
 8001cba:	f7ff fad3 	bl	8001264 <append_data_to_file>

    // Concatenate compass data to buffer
    sprintf(buffer, "HEADING (YAW): %.1f\r\n", compass_data.heading);
 8001cbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc4a 	bl	800055c <__aeabi_f2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	f107 0020 	add.w	r0, r7, #32
 8001cd0:	4913      	ldr	r1, [pc, #76]	; (8001d20 <sensors_readings+0x220>)
 8001cd2:	f016 fb1b 	bl	801830c <siprintf>
    UART_Transmit_String(buffer);
 8001cd6:	f107 0320 	add.w	r3, r7, #32
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fcfe 	bl	80016dc <UART_Transmit_String>
    append_data_to_file("data.txt", buffer);
 8001ce0:	f107 0320 	add.w	r3, r7, #32
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480a      	ldr	r0, [pc, #40]	; (8001d10 <sensors_readings+0x210>)
 8001ce8:	f7ff fabc 	bl	8001264 <append_data_to_file>

    UART_Transmit_String("------------------------------------------------------ \r\n");
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <sensors_readings+0x224>)
 8001cee:	f7ff fcf5 	bl	80016dc <UART_Transmit_String>
    // Append the separator to the file
    append_data_to_file("data.txt", "------------------------------------------------------ \r\n");
 8001cf2:	490c      	ldr	r1, [pc, #48]	; (8001d24 <sensors_readings+0x224>)
 8001cf4:	4806      	ldr	r0, [pc, #24]	; (8001d10 <sensors_readings+0x210>)
 8001cf6:	f7ff fab5 	bl	8001264 <append_data_to_file>
}
 8001cfa:	bf00      	nop
 8001cfc:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001d00:	46bd      	mov	sp, r7
 8001d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d06:	bf00      	nop
 8001d08:	0801e5b0 	.word	0x0801e5b0
 8001d0c:	0801e5f4 	.word	0x0801e5f4
 8001d10:	0801e684 	.word	0x0801e684
 8001d14:	42c80000 	.word	0x42c80000
 8001d18:	0801e690 	.word	0x0801e690
 8001d1c:	0801e6a8 	.word	0x0801e6a8
 8001d20:	0801e6d8 	.word	0x0801e6d8
 8001d24:	0801e6f0 	.word	0x0801e6f0

08001d28 <send_data_to_gcs>:




// Send data to Ground Control System Software
void send_data_to_gcs(int datatype, float value) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0b6      	sub	sp, #216	; 0xd8
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	ed87 0a00 	vstr	s0, [r7]
	// Print the data for each sensor and append to the file
	char gcs_buffer[200];


    // Print data in the specified format
    sprintf(gcs_buffer, "%d, %.2f;\r\n",
 8001d34:	6838      	ldr	r0, [r7, #0]
 8001d36:	f7fe fc11 	bl	800055c <__aeabi_f2d>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	f107 0008 	add.w	r0, r7, #8
 8001d42:	e9cd 2300 	strd	r2, r3, [sp]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4907      	ldr	r1, [pc, #28]	; (8001d68 <send_data_to_gcs+0x40>)
 8001d4a:	f016 fadf 	bl	801830c <siprintf>
            datatype, value);

    UART_Transmit_String(gcs_buffer);
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fcc2 	bl	80016dc <UART_Transmit_String>

    HAL_Delay(15);
 8001d58:	200f      	movs	r0, #15
 8001d5a:	f003 fb67 	bl	800542c <HAL_Delay>


}
 8001d5e:	bf00      	nop
 8001d60:	37d0      	adds	r7, #208	; 0xd0
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	0801e72c 	.word	0x0801e72c

08001d6c <sensors_readings_graphs>:

void sensors_readings_graphs() {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b098      	sub	sp, #96	; 0x60
 8001d70:	af00      	add	r7, sp, #0
    // Call each sensor function and receive the data structures
    IMUData imu_data = IMU_Data_Read();
 8001d72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fb54 	bl	8002424 <IMU_Data_Read>
    TemperatureData temperature_data = Transmit_Temperature();
 8001d7c:	f001 f8c2 	bl	8002f04 <Transmit_Temperature>
 8001d80:	eef0 7a40 	vmov.f32	s15, s0
 8001d84:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    PressureTempData pressure_temp_data = Transmit_Pressure_Temp_Data();
 8001d88:	f000 fff6 	bl	8002d78 <Transmit_Pressure_Temp_Data>
 8001d8c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d90:	eef0 7a60 	vmov.f32	s15, s1
 8001d94:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8001d98:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    CompassData compass_data = Transmit_Compass_Data();
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fbea 	bl	8001578 <Transmit_Compass_Data>


    // Print IMU data
    send_data_to_gcs(1, imu_data.acceleration_x);
 8001da4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001da8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dac:	2001      	movs	r0, #1
 8001dae:	f7ff ffbb 	bl	8001d28 <send_data_to_gcs>
    send_data_to_gcs(2, imu_data.acceleration_y);
 8001db2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001db6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dba:	2002      	movs	r0, #2
 8001dbc:	f7ff ffb4 	bl	8001d28 <send_data_to_gcs>
    send_data_to_gcs(3, imu_data.acceleration_z);
 8001dc0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f7ff ffad 	bl	8001d28 <send_data_to_gcs>
    send_data_to_gcs(4, imu_data.angular_rate_x);
 8001dce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd6:	2004      	movs	r0, #4
 8001dd8:	f7ff ffa6 	bl	8001d28 <send_data_to_gcs>
    send_data_to_gcs(5, imu_data.angular_rate_y);
 8001ddc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001de0:	eeb0 0a67 	vmov.f32	s0, s15
 8001de4:	2005      	movs	r0, #5
 8001de6:	f7ff ff9f 	bl	8001d28 <send_data_to_gcs>
    send_data_to_gcs(6, imu_data.angular_rate_z);
 8001dea:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001dee:	eeb0 0a67 	vmov.f32	s0, s15
 8001df2:	2006      	movs	r0, #6
 8001df4:	f7ff ff98 	bl	8001d28 <send_data_to_gcs>

    //Print Roll and Pitch data
    send_data_to_gcs(7, imu_data.roll);
 8001df8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001e00:	2007      	movs	r0, #7
 8001e02:	f7ff ff91 	bl	8001d28 <send_data_to_gcs>
    send_data_to_gcs(8, imu_data.pitch);
 8001e06:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0e:	2008      	movs	r0, #8
 8001e10:	f7ff ff8a 	bl	8001d28 <send_data_to_gcs>

    // Print temperature data
    send_data_to_gcs(9, temperature_data.temperature_celsius / 100);
 8001e14:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e18:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001e5c <sensors_readings_graphs+0xf0>
 8001e1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e20:	eeb0 0a47 	vmov.f32	s0, s14
 8001e24:	2009      	movs	r0, #9
 8001e26:	f7ff ff7f 	bl	8001d28 <send_data_to_gcs>

    // Print pressure and temperature data
    send_data_to_gcs(10, pressure_temp_data.pressure_hpa);
 8001e2a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e32:	200a      	movs	r0, #10
 8001e34:	f7ff ff78 	bl	8001d28 <send_data_to_gcs>
    send_data_to_gcs(11, pressure_temp_data.temperature_celsius);
 8001e38:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e40:	200b      	movs	r0, #11
 8001e42:	f7ff ff71 	bl	8001d28 <send_data_to_gcs>

    // Print compass data
    send_data_to_gcs(12, compass_data.heading);
 8001e46:	edd7 7a00 	vldr	s15, [r7]
 8001e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4e:	200c      	movs	r0, #12
 8001e50:	f7ff ff6a 	bl	8001d28 <send_data_to_gcs>
}
 8001e54:	bf00      	nop
 8001e56:	3760      	adds	r7, #96	; 0x60
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	42c80000 	.word	0x42c80000

08001e60 <menu>:




// Modify the menu function to use the current state
void menu(char command) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
    int transmission_delay = 50; // In Milliseconds
 8001e6a:	2332      	movs	r3, #50	; 0x32
 8001e6c:	613b      	str	r3, [r7, #16]
    handleUserInput(command);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fd8b 	bl	800198c <handleUserInput>
    switch (currentMenuState) {
 8001e76:	4b55      	ldr	r3, [pc, #340]	; (8001fcc <menu+0x16c>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	f200 808f 	bhi.w	8001f9e <menu+0x13e>
 8001e80:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <menu+0x28>)
 8001e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e86:	bf00      	nop
 8001e88:	08001f9f 	.word	0x08001f9f
 8001e8c:	08001ea5 	.word	0x08001ea5
 8001e90:	08001ecb 	.word	0x08001ecb
 8001e94:	08001f9f 	.word	0x08001f9f
 8001e98:	08001f01 	.word	0x08001f01
 8001e9c:	08001f45 	.word	0x08001f45
 8001ea0:	08001f89 	.word	0x08001f89
        case MENU_MAIN:

            break;
        case MENU_INIT:
            if (currentMenuState == MENU_INIT) {
 8001ea4:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <menu+0x16c>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d17a      	bne.n	8001fa2 <menu+0x142>
                uint32_t initialization_state = initialization_procedure();
 8001eac:	f7ff fdc6 	bl	8001a3c <initialization_procedure>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60bb      	str	r3, [r7, #8]
                if (initialization_state != 0) {
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <menu+0x62>
                    UART_Transmit_String("Error initializing the Flight Controller.\r\n");
 8001eba:	4845      	ldr	r0, [pc, #276]	; (8001fd0 <menu+0x170>)
 8001ebc:	f7ff fc0e 	bl	80016dc <UART_Transmit_String>
                } else {
                    UART_Transmit_String("Flight Controller Initialized successfully!\r\n");
                }
            }
            break;
 8001ec0:	e06f      	b.n	8001fa2 <menu+0x142>
                    UART_Transmit_String("Flight Controller Initialized successfully!\r\n");
 8001ec2:	4844      	ldr	r0, [pc, #272]	; (8001fd4 <menu+0x174>)
 8001ec4:	f7ff fc0a 	bl	80016dc <UART_Transmit_String>
            break;
 8001ec8:	e06b      	b.n	8001fa2 <menu+0x142>
        case MENU_SENSOR_READINGS:
            if (currentMenuState == MENU_SENSOR_READINGS) {
 8001eca:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <menu+0x16c>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d169      	bne.n	8001fa6 <menu+0x146>
                uint32_t numIterations = getNumberOfIterations();
 8001ed2:	f000 f88d 	bl	8001ff0 <getNumberOfIterations>
 8001ed6:	60f8      	str	r0, [r7, #12]
                UART_Transmit_String("\r\n");
 8001ed8:	483f      	ldr	r0, [pc, #252]	; (8001fd8 <menu+0x178>)
 8001eda:	f7ff fbff 	bl	80016dc <UART_Transmit_String>
                for (uint32_t i = 0; i < numIterations; i++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e008      	b.n	8001ef6 <menu+0x96>
                    sensors_readings();
 8001ee4:	f7ff fe0c 	bl	8001b00 <sensors_readings>
                    HAL_Delay(transmission_delay);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 fa9e 	bl	800542c <HAL_Delay>
                for (uint32_t i = 0; i < numIterations; i++) {
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d3f2      	bcc.n	8001ee4 <menu+0x84>
                }
            }
            break;
 8001efe:	e052      	b.n	8001fa6 <menu+0x146>
        case MENU_LORA:
            // TODO: Implement LoRa Test
            break;
        case MENU_IGNITION:
            if (currentMenuState == MENU_IGNITION) {
 8001f00:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <menu+0x16c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d150      	bne.n	8001faa <menu+0x14a>
                UART_Transmit_String("\r\n");
 8001f08:	4833      	ldr	r0, [pc, #204]	; (8001fd8 <menu+0x178>)
 8001f0a:	f7ff fbe7 	bl	80016dc <UART_Transmit_String>
                UART_Transmit_String("Starting Firing test (Ignition)\r\n");
 8001f0e:	4833      	ldr	r0, [pc, #204]	; (8001fdc <menu+0x17c>)
 8001f10:	f7ff fbe4 	bl	80016dc <UART_Transmit_String>
                UART_Transmit_String("Arming the igniter...");
 8001f14:	4832      	ldr	r0, [pc, #200]	; (8001fe0 <menu+0x180>)
 8001f16:	f7ff fbe1 	bl	80016dc <UART_Transmit_String>
                pyro_arm(1);
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f000 ff94 	bl	8002e48 <pyro_arm>
                UART_Transmit_String("Armed\r\n");
 8001f20:	4830      	ldr	r0, [pc, #192]	; (8001fe4 <menu+0x184>)
 8001f22:	f7ff fbdb 	bl	80016dc <UART_Transmit_String>
                count_down_sequence_fire_test(5000);
 8001f26:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f2a:	f000 f8f7 	bl	800211c <count_down_sequence_fire_test>
                pyro_fire(1);
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f000 ffa8 	bl	8002e84 <pyro_fire>
                UART_Transmit_String("Test Completed Successfully!\r\n");
 8001f34:	482c      	ldr	r0, [pc, #176]	; (8001fe8 <menu+0x188>)
 8001f36:	f7ff fbd1 	bl	80016dc <UART_Transmit_String>
                HAL_Delay(1000);
 8001f3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f3e:	f003 fa75 	bl	800542c <HAL_Delay>
            }
            break;
 8001f42:	e032      	b.n	8001faa <menu+0x14a>
        case MENU_PARACHUTE:
            if (currentMenuState == MENU_PARACHUTE) {
 8001f44:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <menu+0x16c>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d130      	bne.n	8001fae <menu+0x14e>
                UART_Transmit_String("\r\n");
 8001f4c:	4822      	ldr	r0, [pc, #136]	; (8001fd8 <menu+0x178>)
 8001f4e:	f7ff fbc5 	bl	80016dc <UART_Transmit_String>
                UART_Transmit_String("Starting Firing test (Parachute)\r\n");
 8001f52:	4826      	ldr	r0, [pc, #152]	; (8001fec <menu+0x18c>)
 8001f54:	f7ff fbc2 	bl	80016dc <UART_Transmit_String>
                UART_Transmit_String("Arming the igniter...");
 8001f58:	4821      	ldr	r0, [pc, #132]	; (8001fe0 <menu+0x180>)
 8001f5a:	f7ff fbbf 	bl	80016dc <UART_Transmit_String>
                pyro_arm(2);
 8001f5e:	2002      	movs	r0, #2
 8001f60:	f000 ff72 	bl	8002e48 <pyro_arm>
                UART_Transmit_String("Armed\r\n");
 8001f64:	481f      	ldr	r0, [pc, #124]	; (8001fe4 <menu+0x184>)
 8001f66:	f7ff fbb9 	bl	80016dc <UART_Transmit_String>
                count_down_sequence_fire_test(5000);
 8001f6a:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f6e:	f000 f8d5 	bl	800211c <count_down_sequence_fire_test>
                pyro_fire(2);
 8001f72:	2002      	movs	r0, #2
 8001f74:	f000 ff86 	bl	8002e84 <pyro_fire>
                UART_Transmit_String("Test Completed Successfully!\r\n");
 8001f78:	481b      	ldr	r0, [pc, #108]	; (8001fe8 <menu+0x188>)
 8001f7a:	f7ff fbaf 	bl	80016dc <UART_Transmit_String>
                HAL_Delay(1000);
 8001f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f82:	f003 fa53 	bl	800542c <HAL_Delay>
            }
            break;
 8001f86:	e012      	b.n	8001fae <menu+0x14e>
        case MENU_LAUNCH:
            if (currentMenuState == MENU_LAUNCH) {
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <menu+0x16c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b06      	cmp	r3, #6
 8001f8e:	d110      	bne.n	8001fb2 <menu+0x152>
                launch_procedure(10000);
 8001f90:	f242 7010 	movw	r0, #10000	; 0x2710
 8001f94:	f000 f85a 	bl	800204c <launch_procedure>
                while (1) {
                    sensors_readings_graphs();
 8001f98:	f7ff fee8 	bl	8001d6c <sensors_readings_graphs>
 8001f9c:	e7fc      	b.n	8001f98 <menu+0x138>
                }

            }
            break;
        default:
            break;
 8001f9e:	bf00      	nop
 8001fa0:	e008      	b.n	8001fb4 <menu+0x154>
            break;
 8001fa2:	bf00      	nop
 8001fa4:	e006      	b.n	8001fb4 <menu+0x154>
            break;
 8001fa6:	bf00      	nop
 8001fa8:	e004      	b.n	8001fb4 <menu+0x154>
            break;
 8001faa:	bf00      	nop
 8001fac:	e002      	b.n	8001fb4 <menu+0x154>
            break;
 8001fae:	bf00      	nop
 8001fb0:	e000      	b.n	8001fb4 <menu+0x154>
            break;
 8001fb2:	bf00      	nop
    }

    currentMenuState = MENU_MAIN; // Return to the main menu
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <menu+0x16c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
    printMenu(currentMenuState);
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <menu+0x16c>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fc7a 	bl	80018b8 <printMenu>
}
 8001fc4:	bf00      	nop
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20002f48 	.word	0x20002f48
 8001fd0:	0801e738 	.word	0x0801e738
 8001fd4:	0801e764 	.word	0x0801e764
 8001fd8:	0801e2b4 	.word	0x0801e2b4
 8001fdc:	0801e794 	.word	0x0801e794
 8001fe0:	0801e7b8 	.word	0x0801e7b8
 8001fe4:	0801e7d0 	.word	0x0801e7d0
 8001fe8:	0801e7d8 	.word	0x0801e7d8
 8001fec:	0801e7f8 	.word	0x0801e7f8

08001ff0 <getNumberOfIterations>:



// Function to get the number of iterations from the user
uint32_t getNumberOfIterations()
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
    char inputBuffer[10];
    char inputChar;
    int bufferIndex = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]

    // Ask for the number of iterations
    UART_Transmit_String("\r\nEnter the number of iterations[Finish the integer with '$']: ");
 8001ffa:	4812      	ldr	r0, [pc, #72]	; (8002044 <getNumberOfIterations+0x54>)
 8001ffc:	f7ff fb6e 	bl	80016dc <UART_Transmit_String>

    // Read user input character by character until we encounter '\n'
    do
    {
        HAL_UART_Receive(&huart1, (uint8_t *)&inputChar, sizeof(inputChar), HAL_MAX_DELAY);
 8002000:	1cf9      	adds	r1, r7, #3
 8002002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002006:	2201      	movs	r2, #1
 8002008:	480f      	ldr	r0, [pc, #60]	; (8002048 <getNumberOfIterations+0x58>)
 800200a:	f007 fcae 	bl	800996a <HAL_UART_Receive>
        inputBuffer[bufferIndex++] = inputChar;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	617a      	str	r2, [r7, #20]
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	3318      	adds	r3, #24
 8002018:	443b      	add	r3, r7
 800201a:	f803 2c14 	strb.w	r2, [r3, #-20]
    } while (inputChar != '$');
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	2b24      	cmp	r3, #36	; 0x24
 8002022:	d1ed      	bne.n	8002000 <getNumberOfIterations+0x10>

    // Null-terminate the input buffer
    inputBuffer[bufferIndex] = '\0';
 8002024:	1d3a      	adds	r2, r7, #4
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	4413      	add	r3, r2
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]

    // Convert the input string to an integer using atoi
    int userInput = atoi(inputBuffer);
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	4618      	mov	r0, r3
 8002032:	f015 faf1 	bl	8017618 <atoi>
 8002036:	6138      	str	r0, [r7, #16]

    return userInput;
 8002038:	693b      	ldr	r3, [r7, #16]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	0801e81c 	.word	0x0801e81c
 8002048:	20003be0 	.word	0x20003be0

0800204c <launch_procedure>:


void launch_procedure(int countdown_duration_ms) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

	UART_Transmit_String("Launch procedure starting.... \r\n");
 8002054:	482d      	ldr	r0, [pc, #180]	; (800210c <launch_procedure+0xc0>)
 8002056:	f7ff fb41 	bl	80016dc <UART_Transmit_String>

    int count_down_print = countdown_duration_ms / 1000;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a2c      	ldr	r2, [pc, #176]	; (8002110 <launch_procedure+0xc4>)
 800205e:	fb82 1203 	smull	r1, r2, r2, r3
 8002062:	1192      	asrs	r2, r2, #6
 8002064:	17db      	asrs	r3, r3, #31
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	61fb      	str	r3, [r7, #28]

    // Calculate the number of SysTick ticks required for the countdown
    uint32_t ticks_start = HAL_GetTick();
 800206a:	f003 f9d3 	bl	8005414 <HAL_GetTick>
 800206e:	61b8      	str	r0, [r7, #24]
    uint32_t ticks_end = ticks_start + countdown_duration_ms;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4413      	add	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

    char count_down_str[5]; // Buffer to store the countdown value as a string

    // Loop until the countdown duration is over
    while (HAL_GetTick() < ticks_end) {
 8002078:	e029      	b.n	80020ce <launch_procedure+0x82>
    	if(count_down_print <= (countdown_duration_ms / 1000)) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a24      	ldr	r2, [pc, #144]	; (8002110 <launch_procedure+0xc4>)
 800207e:	fb82 1203 	smull	r1, r2, r2, r3
 8002082:	1192      	asrs	r2, r2, #6
 8002084:	17db      	asrs	r3, r3, #31
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	429a      	cmp	r2, r3
 800208c:	dc1c      	bgt.n	80020c8 <launch_procedure+0x7c>
        // Toggle the buzzer (set the GPIO pin high and then low with a delay to produce sound)
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800208e:	2201      	movs	r2, #1
 8002090:	2120      	movs	r1, #32
 8002092:	4820      	ldr	r0, [pc, #128]	; (8002114 <launch_procedure+0xc8>)
 8002094:	f003 ff1a 	bl	8005ecc <HAL_GPIO_WritePin>

        // Convert the countdown value to a string
        sprintf(count_down_str, "%d...", count_down_print);
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	491e      	ldr	r1, [pc, #120]	; (8002118 <launch_procedure+0xcc>)
 80020a0:	4618      	mov	r0, r3
 80020a2:	f016 f933 	bl	801830c <siprintf>

        // Transmit the countdown value via UART
        UART_Transmit_String(count_down_str);
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fb16 	bl	80016dc <UART_Transmit_String>

        HAL_Delay(200); // Delay for 200 milliseconds (adjust the value as needed)
 80020b0:	20c8      	movs	r0, #200	; 0xc8
 80020b2:	f003 f9bb 	bl	800542c <HAL_Delay>

        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2120      	movs	r1, #32
 80020ba:	4816      	ldr	r0, [pc, #88]	; (8002114 <launch_procedure+0xc8>)
 80020bc:	f003 ff06 	bl	8005ecc <HAL_GPIO_WritePin>
        HAL_Delay(800); // Delay for 800 milliseconds (adjust the value as needed)
 80020c0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80020c4:	f003 f9b2 	bl	800542c <HAL_Delay>
    	}
        count_down_print--;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	61fb      	str	r3, [r7, #28]
    while (HAL_GetTick() < ticks_end) {
 80020ce:	f003 f9a1 	bl	8005414 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d8cf      	bhi.n	800207a <launch_procedure+0x2e>
    }

    pyro_arm(1);
 80020da:	2001      	movs	r0, #1
 80020dc:	f000 feb4 	bl	8002e48 <pyro_arm>
    // Enable the buzzer at the end of the countdown (Launching the test!!!)
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	2120      	movs	r1, #32
 80020e4:	480b      	ldr	r0, [pc, #44]	; (8002114 <launch_procedure+0xc8>)
 80020e6:	f003 fef1 	bl	8005ecc <HAL_GPIO_WritePin>
    pyro_fire(1);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f000 feca 	bl	8002e84 <pyro_fire>
    HAL_Delay(800);
 80020f0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80020f4:	f003 f99a 	bl	800542c <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2120      	movs	r1, #32
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <launch_procedure+0xc8>)
 80020fe:	f003 fee5 	bl	8005ecc <HAL_GPIO_WritePin>

}
 8002102:	bf00      	nop
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	0801e85c 	.word	0x0801e85c
 8002110:	10624dd3 	.word	0x10624dd3
 8002114:	40020800 	.word	0x40020800
 8002118:	0801e880 	.word	0x0801e880

0800211c <count_down_sequence_fire_test>:


void count_down_sequence_fire_test(int countdown_duration_ms) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

    int count_down_print = countdown_duration_ms / 1000;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a23      	ldr	r2, [pc, #140]	; (80021b4 <count_down_sequence_fire_test+0x98>)
 8002128:	fb82 1203 	smull	r1, r2, r2, r3
 800212c:	1192      	asrs	r2, r2, #6
 800212e:	17db      	asrs	r3, r3, #31
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	61fb      	str	r3, [r7, #28]

    // Calculate the number of SysTick ticks required for the countdown
    uint32_t ticks_start = HAL_GetTick();
 8002134:	f003 f96e 	bl	8005414 <HAL_GetTick>
 8002138:	61b8      	str	r0, [r7, #24]
    uint32_t ticks_end = ticks_start + countdown_duration_ms;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4413      	add	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

    char count_down_str[5]; // Buffer to store the countdown value as a string

    // Loop until the countdown duration is over
    while (HAL_GetTick() < ticks_end) {
 8002142:	e01f      	b.n	8002184 <count_down_sequence_fire_test+0x68>
        // Toggle the buzzer (set the GPIO pin high and then low with a delay to produce sound)
        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002144:	2201      	movs	r2, #1
 8002146:	2120      	movs	r1, #32
 8002148:	481b      	ldr	r0, [pc, #108]	; (80021b8 <count_down_sequence_fire_test+0x9c>)
 800214a:	f003 febf 	bl	8005ecc <HAL_GPIO_WritePin>

        // Convert the countdown value to a string
        sprintf(count_down_str, "%d...", count_down_print);
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	4919      	ldr	r1, [pc, #100]	; (80021bc <count_down_sequence_fire_test+0xa0>)
 8002156:	4618      	mov	r0, r3
 8002158:	f016 f8d8 	bl	801830c <siprintf>

        // Transmit the countdown value via UART
        UART_Transmit_String(count_down_str);
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fabb 	bl	80016dc <UART_Transmit_String>

        HAL_Delay(200); // Delay for 200 milliseconds (adjust the value as needed)
 8002166:	20c8      	movs	r0, #200	; 0xc8
 8002168:	f003 f960 	bl	800542c <HAL_Delay>

        HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	2120      	movs	r1, #32
 8002170:	4811      	ldr	r0, [pc, #68]	; (80021b8 <count_down_sequence_fire_test+0x9c>)
 8002172:	f003 feab 	bl	8005ecc <HAL_GPIO_WritePin>
        HAL_Delay(800); // Delay for 800 milliseconds (adjust the value as needed)
 8002176:	f44f 7048 	mov.w	r0, #800	; 0x320
 800217a:	f003 f957 	bl	800542c <HAL_Delay>
        count_down_print--;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b01      	subs	r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
    while (HAL_GetTick() < ticks_end) {
 8002184:	f003 f946 	bl	8005414 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	4293      	cmp	r3, r2
 800218e:	d8d9      	bhi.n	8002144 <count_down_sequence_fire_test+0x28>
    }

    // Enable the buzzer at the end of the countdown (Launching the test!!!)
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002190:	2201      	movs	r2, #1
 8002192:	2120      	movs	r1, #32
 8002194:	4808      	ldr	r0, [pc, #32]	; (80021b8 <count_down_sequence_fire_test+0x9c>)
 8002196:	f003 fe99 	bl	8005ecc <HAL_GPIO_WritePin>
    HAL_Delay(800);
 800219a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800219e:	f003 f945 	bl	800542c <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2120      	movs	r1, #32
 80021a6:	4804      	ldr	r0, [pc, #16]	; (80021b8 <count_down_sequence_fire_test+0x9c>)
 80021a8:	f003 fe90 	bl	8005ecc <HAL_GPIO_WritePin>

}
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	10624dd3 	.word	0x10624dd3
 80021b8:	40020800 	.word	0x40020800
 80021bc:	0801e880 	.word	0x0801e880

080021c0 <UART_Transmit_Messages_IMU>:
static uint8_t mfxstate[STATE_SIZE];


// TRASMIT MESSAGES VIA UART FUNCTION
void UART_Transmit_Messages_IMU(const char* str)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7fe f851 	bl	8000270 <strlen>
 80021ce:	4603      	mov	r3, r0
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4803      	ldr	r0, [pc, #12]	; (80021e8 <UART_Transmit_Messages_IMU+0x28>)
 80021da:	f007 fb34 	bl	8009846 <HAL_UART_Transmit>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20003be0 	.word	0x20003be0

080021ec <platform_read>:

// SENSOR READING FUNCTION DEFINITION
int32_t platform_read(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af04      	add	r7, sp, #16
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	461a      	mov	r2, r3
 80021f8:	460b      	mov	r3, r1
 80021fa:	72fb      	strb	r3, [r7, #11]
 80021fc:	4613      	mov	r3, r2
 80021fe:	813b      	strh	r3, [r7, #8]
  // Perform the I2C read operation using HAL_I2C_Mem_Read
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8002200:	7afb      	ldrb	r3, [r7, #11]
 8002202:	b29a      	uxth	r2, r3
 8002204:	2364      	movs	r3, #100	; 0x64
 8002206:	9302      	str	r3, [sp, #8]
 8002208:	893b      	ldrh	r3, [r7, #8]
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2301      	movs	r3, #1
 8002212:	21d6      	movs	r1, #214	; 0xd6
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f004 fbf9 	bl	8006a0c <HAL_I2C_Mem_Read>
 800221a:	4603      	mov	r3, r0
 800221c:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <platform_read+0x3c>
 8002224:	2300      	movs	r3, #0
 8002226:	e001      	b.n	800222c <platform_read+0x40>
 8002228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <platform_write>:

// SENSOR WRITING FUNCTION DEFINITION
int32_t platform_write(I2C_HandleTypeDef *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af04      	add	r7, sp, #16
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	461a      	mov	r2, r3
 8002240:	460b      	mov	r3, r1
 8002242:	72fb      	strb	r3, [r7, #11]
 8002244:	4613      	mov	r3, r2
 8002246:	813b      	strh	r3, [r7, #8]
  // Perform the I2C write operation using HAL_I2C_Mem_Write
  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(handle, LSM6DS3TRC_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 100);
 8002248:	7afb      	ldrb	r3, [r7, #11]
 800224a:	b29a      	uxth	r2, r3
 800224c:	2364      	movs	r3, #100	; 0x64
 800224e:	9302      	str	r3, [sp, #8]
 8002250:	893b      	ldrh	r3, [r7, #8]
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2301      	movs	r3, #1
 800225a:	21d6      	movs	r1, #214	; 0xd6
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f004 fadb 	bl	8006818 <HAL_I2C_Mem_Write>
 8002262:	4603      	mov	r3, r0
 8002264:	75fb      	strb	r3, [r7, #23]
  // Return the appropriate value based on the HAL status
  return (status == HAL_OK) ? 0 : -1;
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <platform_write+0x3c>
 800226c:	2300      	movs	r3, #0
 800226e:	e001      	b.n	8002274 <platform_write+0x40>
 8002270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <IMU_Initialization>:


// IMU INITIALIZATION FUNCTION
int32_t IMU_Initialization(){
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0


	/* Initialize MEMS driver interface */
	device.write_reg = platform_write;
 8002282:	4b5b      	ldr	r3, [pc, #364]	; (80023f0 <IMU_Initialization+0x174>)
 8002284:	4a5b      	ldr	r2, [pc, #364]	; (80023f4 <IMU_Initialization+0x178>)
 8002286:	601a      	str	r2, [r3, #0]
	device.read_reg = platform_read;
 8002288:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <IMU_Initialization+0x174>)
 800228a:	4a5b      	ldr	r2, [pc, #364]	; (80023f8 <IMU_Initialization+0x17c>)
 800228c:	605a      	str	r2, [r3, #4]
	device.handle = &hi2c1;
 800228e:	4b58      	ldr	r3, [pc, #352]	; (80023f0 <IMU_Initialization+0x174>)
 8002290:	4a5a      	ldr	r2, [pc, #360]	; (80023fc <IMU_Initialization+0x180>)
 8002292:	60da      	str	r2, [r3, #12]

	//char init_state_buffer[200];

	/* Check device ID */
	whoamI = 0;
 8002294:	4b5a      	ldr	r3, [pc, #360]	; (8002400 <IMU_Initialization+0x184>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
	lsm6ds3tr_c_device_id_get(&device, &whoamI);
 800229a:	4959      	ldr	r1, [pc, #356]	; (8002400 <IMU_Initialization+0x184>)
 800229c:	4854      	ldr	r0, [pc, #336]	; (80023f0 <IMU_Initialization+0x174>)
 800229e:	f001 fd4b 	bl	8003d38 <lsm6ds3tr_c_device_id_get>

	if ( whoamI != LSM6DS3TR_C_ID ) {
 80022a2:	4b57      	ldr	r3, [pc, #348]	; (8002400 <IMU_Initialization+0x184>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b6a      	cmp	r3, #106	; 0x6a
 80022a8:	d005      	beq.n	80022b6 <IMU_Initialization+0x3a>
		UART_Transmit_Messages_IMU("ERROR: IMU MALFUNCTION");
 80022aa:	4856      	ldr	r0, [pc, #344]	; (8002404 <IMU_Initialization+0x188>)
 80022ac:	f7ff ff88 	bl	80021c0 <UART_Transmit_Messages_IMU>
		return -1;
 80022b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022b4:	e098      	b.n	80023e8 <IMU_Initialization+0x16c>
	}



	/* Restore default configuration */
	lsm6ds3tr_c_reset_set(&device, PROPERTY_ENABLE);
 80022b6:	2101      	movs	r1, #1
 80022b8:	484d      	ldr	r0, [pc, #308]	; (80023f0 <IMU_Initialization+0x174>)
 80022ba:	f001 fd4e 	bl	8003d5a <lsm6ds3tr_c_reset_set>

	do {
    lsm6ds3tr_c_reset_get(&device, &rst);
 80022be:	4952      	ldr	r1, [pc, #328]	; (8002408 <IMU_Initialization+0x18c>)
 80022c0:	484b      	ldr	r0, [pc, #300]	; (80023f0 <IMU_Initialization+0x174>)
 80022c2:	f001 fd70 	bl	8003da6 <lsm6ds3tr_c_reset_get>
	} while (rst);
 80022c6:	4b50      	ldr	r3, [pc, #320]	; (8002408 <IMU_Initialization+0x18c>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f7      	bne.n	80022be <IMU_Initialization+0x42>

	int32_t int_set,xl_fs,xl_dr,gy_fs,gy_dr,bdu,xl_fas,xl_lp,gy_bps,state;
	//int32_t dev_round_status,dev_round_mode;

	//Enabling I2C Communication
	int_set = lsm6ds3tr_c_i2c_interface_set(&device,LSM6DS3TR_C_I2C_ENABLE);
 80022ce:	2100      	movs	r1, #0
 80022d0:	4847      	ldr	r0, [pc, #284]	; (80023f0 <IMU_Initialization+0x174>)
 80022d2:	f001 fe4c 	bl	8003f6e <lsm6ds3tr_c_i2c_interface_set>
 80022d6:	6278      	str	r0, [r7, #36]	; 0x24

	  /* Enable Block Data Update */
	  bdu = lsm6ds3tr_c_block_data_update_set(&device, PROPERTY_ENABLE);
 80022d8:	2101      	movs	r1, #1
 80022da:	4845      	ldr	r0, [pc, #276]	; (80023f0 <IMU_Initialization+0x174>)
 80022dc:	f001 fc70 	bl	8003bc0 <lsm6ds3tr_c_block_data_update_set>
 80022e0:	6238      	str	r0, [r7, #32]
	  /* Set Output Data Rate */
	  xl_dr= lsm6ds3tr_c_xl_data_rate_set(&device, LSM6DS3TR_C_XL_ODR_833Hz);
 80022e2:	2107      	movs	r1, #7
 80022e4:	4842      	ldr	r0, [pc, #264]	; (80023f0 <IMU_Initialization+0x174>)
 80022e6:	f001 fbf9 	bl	8003adc <lsm6ds3tr_c_xl_data_rate_set>
 80022ea:	61f8      	str	r0, [r7, #28]
	  gy_dr= lsm6ds3tr_c_gy_data_rate_set(&device, LSM6DS3TR_C_GY_ODR_833Hz);
 80022ec:	2107      	movs	r1, #7
 80022ee:	4840      	ldr	r0, [pc, #256]	; (80023f0 <IMU_Initialization+0x174>)
 80022f0:	f001 fc40 	bl	8003b74 <lsm6ds3tr_c_gy_data_rate_set>
 80022f4:	61b8      	str	r0, [r7, #24]
	  /* Set full scale */
	  xl_fs= lsm6ds3tr_c_xl_full_scale_set(&device, LSM6DS3TR_C_2g);
 80022f6:	2100      	movs	r1, #0
 80022f8:	483d      	ldr	r0, [pc, #244]	; (80023f0 <IMU_Initialization+0x174>)
 80022fa:	f001 fbc9 	bl	8003a90 <lsm6ds3tr_c_xl_full_scale_set>
 80022fe:	6178      	str	r0, [r7, #20]
	  gy_fs= lsm6ds3tr_c_gy_full_scale_set(&device, LSM6DS3TR_C_500dps);
 8002300:	2102      	movs	r1, #2
 8002302:	483b      	ldr	r0, [pc, #236]	; (80023f0 <IMU_Initialization+0x174>)
 8002304:	f001 fc10 	bl	8003b28 <lsm6ds3tr_c_gy_full_scale_set>
 8002308:	6138      	str	r0, [r7, #16]


	  /* Configure filtering chain(No aux interface) */
	  /* Accelerometer - analog filter */
	  xl_fas= lsm6ds3tr_c_xl_filter_analog_set(&device,
 800230a:	2101      	movs	r1, #1
 800230c:	4838      	ldr	r0, [pc, #224]	; (80023f0 <IMU_Initialization+0x174>)
 800230e:	f001 fd63 	bl	8003dd8 <lsm6ds3tr_c_xl_filter_analog_set>
 8002312:	60f8      	str	r0, [r7, #12]
	                                   LSM6DS3TR_C_XL_ANA_BW_400Hz);
	  /* Accelerometer - LPF1 path ( LPF2 not used )*/
	  //xl_lp = lsm6ds3tr_c_xl_lp1_bandwidth_set(&device, LSM6DS3TR_C_XL_LP1_ODR_DIV_4);
	  /* Accelerometer - LPF1 + LPF2 path */
	  xl_lp= lsm6ds3tr_c_xl_lp2_bandwidth_set(&device,LSM6DS3TR_C_XL_LOW_NOISE_LP_ODR_DIV_100);
 8002314:	2111      	movs	r1, #17
 8002316:	4836      	ldr	r0, [pc, #216]	; (80023f0 <IMU_Initialization+0x174>)
 8002318:	f001 fd84 	bl	8003e24 <lsm6ds3tr_c_xl_lp2_bandwidth_set>
 800231c:	60b8      	str	r0, [r7, #8]
	  /* Accelerometer - High Pass / Slope path */
	  //lsm6ds3tr_c_xl_reference_mode_set(&device, PROPERTY_DISABLE);
	  //lsm6ds3tr_c_xl_hp_bandwidth_set(&device, LSM6DS3TR_C_XL_HP_ODR_DIV_100);
	  /* Gyroscope - filtering chain */
	  gy_bps= lsm6ds3tr_c_gy_band_pass_set(&device,
 800231e:	21a8      	movs	r1, #168	; 0xa8
 8002320:	4833      	ldr	r0, [pc, #204]	; (80023f0 <IMU_Initialization+0x174>)
 8002322:	f001 fdb6 	bl	8003e92 <lsm6ds3tr_c_gy_band_pass_set>
 8002326:	6078      	str	r0, [r7, #4]

	  //dev_round_status = lsm6ds3tr_c_rounding_on_status_set(&device,PROPERTY_ENABLE);
	  //dev_round_mode= lsm6ds3tr_c_rounding_mode_set(&device,LSM6DS3TR_C_ROUND_GY_XL);


		state = int_set + xl_fs + xl_dr + gy_fs + gy_dr + bdu + xl_fas + xl_lp + gy_bps;
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	441a      	add	r2, r3
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	441a      	add	r2, r3
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	441a      	add	r2, r3
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	441a      	add	r2, r3
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	441a      	add	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	441a      	add	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4413      	add	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	603b      	str	r3, [r7, #0]

		//sprintf(init_state_buffer,"int_set: %ld | xl_fs: %ld | xl_dr: %ld | gy_fs: %ld | gy_dr: %ld | bdu: %ld | xl_fas: %ld | xl_lp: %ld | gy_bps: %ld \r\n",int_set,xl_fs, xl_dr, gy_fs, gy_dr, bdu, xl_fas, xl_lp, gy_bps);
		//UART_Transmit_Messages_IMU(init_state_buffer);

		UART_Transmit_Messages_IMU("Kalman Filter initialization..!");
 800234c:	482f      	ldr	r0, [pc, #188]	; (800240c <IMU_Initialization+0x190>)
 800234e:	f7ff ff37 	bl	80021c0 <UART_Transmit_Messages_IMU>

		  MotionFX_initialize((MFXState_t *)mfxstate);
 8002352:	482f      	ldr	r0, [pc, #188]	; (8002410 <IMU_Initialization+0x194>)
 8002354:	f014 fe7c 	bl	8017050 <MotionFX_initialize>



		  MotionFX_getKnobs(mfxstate, ipKnobs);
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <IMU_Initialization+0x198>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	482c      	ldr	r0, [pc, #176]	; (8002410 <IMU_Initialization+0x194>)
 8002360:	f014 ff7c 	bl	801725c <MotionFX_getKnobs>



		  ipKnobs->acc_orientation[0] = 'u';
 8002364:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <IMU_Initialization+0x198>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2275      	movs	r2, #117	; 0x75
 800236a:	775a      	strb	r2, [r3, #29]
		  ipKnobs->acc_orientation[1] = 'w';
 800236c:	4b29      	ldr	r3, [pc, #164]	; (8002414 <IMU_Initialization+0x198>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2277      	movs	r2, #119	; 0x77
 8002372:	779a      	strb	r2, [r3, #30]
		  ipKnobs->acc_orientation[2] = 'n';
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <IMU_Initialization+0x198>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	226e      	movs	r2, #110	; 0x6e
 800237a:	77da      	strb	r2, [r3, #31]
		  ipKnobs->gyro_orientation[0] = 'u';
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <IMU_Initialization+0x198>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2275      	movs	r2, #117	; 0x75
 8002382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		  ipKnobs->gyro_orientation[1] = 'w';
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <IMU_Initialization+0x198>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2277      	movs	r2, #119	; 0x77
 800238c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		  ipKnobs->gyro_orientation[2] = 'n';
 8002390:	4b20      	ldr	r3, [pc, #128]	; (8002414 <IMU_Initialization+0x198>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	226e      	movs	r2, #110	; 0x6e
 8002396:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <IMU_Initialization+0x198>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <IMU_Initialization+0x19c>)
 80023a0:	615a      	str	r2, [r3, #20]
		  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <IMU_Initialization+0x198>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1d      	ldr	r2, [pc, #116]	; (800241c <IMU_Initialization+0x1a0>)
 80023a8:	619a      	str	r2, [r3, #24]

		  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <IMU_Initialization+0x198>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		  ipKnobs->LMode = 1;
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <IMU_Initialization+0x198>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2201      	movs	r2, #1
 80023ba:	731a      	strb	r2, [r3, #12]
		  ipKnobs->modx = DECIMATION;
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <IMU_Initialization+0x198>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	771a      	strb	r2, [r3, #28]

		  MotionFX_setKnobs(mfxstate, ipKnobs);
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <IMU_Initialization+0x198>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4619      	mov	r1, r3
 80023ca:	4811      	ldr	r0, [pc, #68]	; (8002410 <IMU_Initialization+0x194>)
 80023cc:	f014 fefa 	bl	80171c4 <MotionFX_setKnobs>
		  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 80023d0:	2101      	movs	r1, #1
 80023d2:	480f      	ldr	r0, [pc, #60]	; (8002410 <IMU_Initialization+0x194>)
 80023d4:	f014 ff80 	bl	80172d8 <MotionFX_enable_6X>
		  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 80023d8:	2100      	movs	r1, #0
 80023da:	480d      	ldr	r0, [pc, #52]	; (8002410 <IMU_Initialization+0x194>)
 80023dc:	f014 ff9c 	bl	8017318 <MotionFX_enable_9X>

		  UART_Transmit_Messages_IMU("Done! \r\n");
 80023e0:	480f      	ldr	r0, [pc, #60]	; (8002420 <IMU_Initialization+0x1a4>)
 80023e2:	f7ff feed 	bl	80021c0 <UART_Transmit_Messages_IMU>
		return state;
 80023e6:	683b      	ldr	r3, [r7, #0]


}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3728      	adds	r7, #40	; 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20002f5c 	.word	0x20002f5c
 80023f4:	08002235 	.word	0x08002235
 80023f8:	080021ed 	.word	0x080021ed
 80023fc:	200039e8 	.word	0x200039e8
 8002400:	20002f5a 	.word	0x20002f5a
 8002404:	0801eaa4 	.word	0x0801eaa4
 8002408:	20002f5b 	.word	0x20002f5b
 800240c:	0801eabc 	.word	0x0801eabc
 8002410:	20002fc0 	.word	0x20002fc0
 8002414:	20000000 	.word	0x20000000
 8002418:	3ac88a48 	.word	0x3ac88a48
 800241c:	3b83126f 	.word	0x3b83126f
 8002420:	0801eadc 	.word	0x0801eadc

08002424 <IMU_Data_Read>:


//IMU DATA READING FUNCTION
IMUData IMU_Data_Read(){
 8002424:	b5b0      	push	{r4, r5, r7, lr}
 8002426:	b0a0      	sub	sp, #128	; 0x80
 8002428:	af02      	add	r7, sp, #8
 800242a:	6078      	str	r0, [r7, #4]

	int32_t reading_state, gyro_reading, acc_reading;
    MFX_input_t data_in;
    MFX_output_t data_out;
    float delta_time = TIME_ODR_104Hz;
 800242c:	4b6a      	ldr	r3, [pc, #424]	; (80025d8 <IMU_Data_Read+0x1b4>)
 800242e:	60bb      	str	r3, [r7, #8]
	//char test[100];


	//ACCELEROMETER RAW DATA READING
	acc_reading = lsm6ds3tr_c_acceleration_raw_get(&device,data_raw_acceleration);
 8002430:	496a      	ldr	r1, [pc, #424]	; (80025dc <IMU_Data_Read+0x1b8>)
 8002432:	486b      	ldr	r0, [pc, #428]	; (80025e0 <IMU_Data_Read+0x1bc>)
 8002434:	f001 fc35 	bl	8003ca2 <lsm6ds3tr_c_acceleration_raw_get>
 8002438:	6778      	str	r0, [r7, #116]	; 0x74
	//GYROSCOPE
	gyro_reading = lsm6ds3tr_c_angular_rate_raw_get(&device,data_raw_angular_rate);
 800243a:	496a      	ldr	r1, [pc, #424]	; (80025e4 <IMU_Data_Read+0x1c0>)
 800243c:	4868      	ldr	r0, [pc, #416]	; (80025e0 <IMU_Data_Read+0x1bc>)
 800243e:	f001 fbe5 	bl	8003c0c <lsm6ds3tr_c_angular_rate_raw_get>
 8002442:	6738      	str	r0, [r7, #112]	; 0x70
	// COMPASS
    //CompassData compass_data = Transmit_Compass_Data();


	reading_state = gyro_reading + acc_reading; // If 0 -> Success | Otherwise error code
 8002444:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002448:	4413      	add	r3, r2
 800244a:	66fb      	str	r3, [r7, #108]	; 0x6c



	  if (reading_state == 0){
 800244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244e:	2b00      	cmp	r3, #0
 8002450:	f040 8094 	bne.w	800257c <IMU_Data_Read+0x158>

			data_in.acc[0] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[0]) * FROM_MG_TO_G);
 8002454:	4b61      	ldr	r3, [pc, #388]	; (80025dc <IMU_Data_Read+0x1b8>)
 8002456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245a:	4618      	mov	r0, r3
 800245c:	f001 fae8 	bl	8003a30 <lsm6ds3tr_c_from_fs2g_to_mg>
 8002460:	eef0 7a40 	vmov.f32	s15, s0
 8002464:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80025e8 <IMU_Data_Read+0x1c4>
 8002468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
			data_in.acc[1] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[1]) * FROM_MG_TO_G);
 8002470:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <IMU_Data_Read+0x1b8>)
 8002472:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002476:	4618      	mov	r0, r3
 8002478:	f001 fada 	bl	8003a30 <lsm6ds3tr_c_from_fs2g_to_mg>
 800247c:	eef0 7a40 	vmov.f32	s15, s0
 8002480:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80025e8 <IMU_Data_Read+0x1c4>
 8002484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002488:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
			data_in.acc[2] = (lsm6ds3tr_c_from_fs2g_to_mg(data_raw_acceleration[2]) * FROM_MG_TO_G);
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <IMU_Data_Read+0x1b8>)
 800248e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002492:	4618      	mov	r0, r3
 8002494:	f001 facc 	bl	8003a30 <lsm6ds3tr_c_from_fs2g_to_mg>
 8002498:	eef0 7a40 	vmov.f32	s15, s0
 800249c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80025e8 <IMU_Data_Read+0x1c4>
 80024a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c


			data_in.gyro[0] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[0]) * FROM_MDPS_TO_DPS) ;
 80024a8:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <IMU_Data_Read+0x1c0>)
 80024aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f001 fad6 	bl	8003a60 <lsm6ds3tr_c_from_fs500dps_to_mdps>
 80024b4:	eef0 7a40 	vmov.f32	s15, s0
 80024b8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80025e8 <IMU_Data_Read+0x1c4>
 80024bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			data_in.gyro[1] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[1]) * FROM_MDPS_TO_DPS) ;
 80024c4:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <IMU_Data_Read+0x1c0>)
 80024c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 fac8 	bl	8003a60 <lsm6ds3tr_c_from_fs500dps_to_mdps>
 80024d0:	eef0 7a40 	vmov.f32	s15, s0
 80024d4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80025e8 <IMU_Data_Read+0x1c4>
 80024d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024dc:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
			data_in.gyro[2] = (lsm6ds3tr_c_from_fs500dps_to_mdps(data_raw_angular_rate[2]) * FROM_MDPS_TO_DPS) ;
 80024e0:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <IMU_Data_Read+0x1c0>)
 80024e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f001 faba 	bl	8003a60 <lsm6ds3tr_c_from_fs500dps_to_mdps>
 80024ec:	eef0 7a40 	vmov.f32	s15, s0
 80024f0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80025e8 <IMU_Data_Read+0x1c4>
 80024f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68


		    /* Don't set mag values because we use only acc and gyro */
		    data_in.mag[0] = 0.0;
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	64bb      	str	r3, [r7, #72]	; 0x48
		    data_in.mag[1] = 0.0;
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	64fb      	str	r3, [r7, #76]	; 0x4c
		    data_in.mag[2] = 0.0;
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	653b      	str	r3, [r7, #80]	; 0x50



	      MotionFX_propagate(mfxstate, &data_out, &data_in, &delta_time);
 800250e:	f107 0308 	add.w	r3, r7, #8
 8002512:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002516:	f107 010c 	add.w	r1, r7, #12
 800251a:	4834      	ldr	r0, [pc, #208]	; (80025ec <IMU_Data_Read+0x1c8>)
 800251c:	f014 ff2c 	bl	8017378 <MotionFX_propagate>
	      MotionFX_update(mfxstate, &data_out, &data_in, &delta_time, NULL);
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002528:	f107 010c 	add.w	r1, r7, #12
 800252c:	2000      	movs	r0, #0
 800252e:	9000      	str	r0, [sp, #0]
 8002530:	482e      	ldr	r0, [pc, #184]	; (80025ec <IMU_Data_Read+0x1c8>)
 8002532:	f014 ff11 	bl	8017358 <MotionFX_update>

	        // Update imu_data
	        imu_data.acceleration_x = data_out.gravity[0];
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	4a2d      	ldr	r2, [pc, #180]	; (80025f0 <IMU_Data_Read+0x1cc>)
 800253a:	6013      	str	r3, [r2, #0]
	        imu_data.acceleration_y = data_out.gravity[1];
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	4a2c      	ldr	r2, [pc, #176]	; (80025f0 <IMU_Data_Read+0x1cc>)
 8002540:	6053      	str	r3, [r2, #4]
	        imu_data.acceleration_z = data_out.gravity[2];
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	4a2a      	ldr	r2, [pc, #168]	; (80025f0 <IMU_Data_Read+0x1cc>)
 8002546:	6093      	str	r3, [r2, #8]
	        imu_data.angular_rate_x = data_out.linear_acceleration[0];
 8002548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254a:	4a29      	ldr	r2, [pc, #164]	; (80025f0 <IMU_Data_Read+0x1cc>)
 800254c:	60d3      	str	r3, [r2, #12]
	        imu_data.angular_rate_y = data_out.linear_acceleration[1];
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	4a27      	ldr	r2, [pc, #156]	; (80025f0 <IMU_Data_Read+0x1cc>)
 8002552:	6113      	str	r3, [r2, #16]
	        imu_data.angular_rate_z = data_out.linear_acceleration[2];
 8002554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002556:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <IMU_Data_Read+0x1cc>)
 8002558:	6153      	str	r3, [r2, #20]
	        //imu_data.yaw = (float)compass_data.heading;
	        imu_data.pitch = data_out.rotation[1];
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4a24      	ldr	r2, [pc, #144]	; (80025f0 <IMU_Data_Read+0x1cc>)
 800255e:	6213      	str	r3, [r2, #32]
	        imu_data.roll = data_out.rotation[2];
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <IMU_Data_Read+0x1cc>)
 8002564:	61d3      	str	r3, [r2, #28]


	        return imu_data;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <IMU_Data_Read+0x1cc>)
 800256a:	461c      	mov	r4, r3
 800256c:	4615      	mov	r5, r2
 800256e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002576:	682b      	ldr	r3, [r5, #0]
 8002578:	6023      	str	r3, [r4, #0]
 800257a:	e029      	b.n	80025d0 <IMU_Data_Read+0x1ac>
	  }	else	{

		  //Error State
		  imu_data.acceleration_x = 0.0;
 800257c:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <IMU_Data_Read+0x1cc>)
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
		  imu_data.acceleration_y = 0.0;
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <IMU_Data_Read+0x1cc>)
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	605a      	str	r2, [r3, #4]
		  imu_data.acceleration_z = 0.0;
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <IMU_Data_Read+0x1cc>)
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
		  imu_data.angular_rate_x = 0.0;
 8002594:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <IMU_Data_Read+0x1cc>)
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	60da      	str	r2, [r3, #12]
		  imu_data.angular_rate_y = 0.0;
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <IMU_Data_Read+0x1cc>)
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
		  imu_data.angular_rate_z = 0.0;
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <IMU_Data_Read+0x1cc>)
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	615a      	str	r2, [r3, #20]
		  imu_data.pitch = 0.0;
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <IMU_Data_Read+0x1cc>)
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	621a      	str	r2, [r3, #32]
		  imu_data.roll = 0.0;
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <IMU_Data_Read+0x1cc>)
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	61da      	str	r2, [r3, #28]

	        return imu_data;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a0c      	ldr	r2, [pc, #48]	; (80025f0 <IMU_Data_Read+0x1cc>)
 80025c0:	461c      	mov	r4, r3
 80025c2:	4615      	mov	r5, r2
 80025c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025cc:	682b      	ldr	r3, [r5, #0]
 80025ce:	6023      	str	r3, [r4, #0]
		}

}
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	3778      	adds	r7, #120	; 0x78
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bdb0      	pop	{r4, r5, r7, pc}
 80025d8:	3c1d4952 	.word	0x3c1d4952
 80025dc:	20002f4c 	.word	0x20002f4c
 80025e0:	20002f5c 	.word	0x20002f5c
 80025e4:	20002f54 	.word	0x20002f54
 80025e8:	3a83126f 	.word	0x3a83126f
 80025ec:	20002fc0 	.word	0x20002fc0
 80025f0:	20002f6c 	.word	0x20002f6c

080025f4 <dps310_i2c_read>:
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}



int8_t dps310_i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af04      	add	r7, sp, #16
 80025fa:	603a      	str	r2, [r7, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
 8002602:	460b      	mov	r3, r1
 8002604:	71bb      	strb	r3, [r7, #6]
 8002606:	4613      	mov	r3, r2
 8002608:	80bb      	strh	r3, [r7, #4]


	  // Perform the I2C read operation using HAL_I2C_Mem_Read
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	b299      	uxth	r1, r3
 800260e:	79bb      	ldrb	r3, [r7, #6]
 8002610:	b29a      	uxth	r2, r3
 8002612:	2364      	movs	r3, #100	; 0x64
 8002614:	9302      	str	r3, [sp, #8]
 8002616:	88bb      	ldrh	r3, [r7, #4]
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2301      	movs	r3, #1
 8002620:	4807      	ldr	r0, [pc, #28]	; (8002640 <dps310_i2c_read+0x4c>)
 8002622:	f004 f9f3 	bl	8006a0c <HAL_I2C_Mem_Read>
 8002626:	4603      	mov	r3, r0
 8002628:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <dps310_i2c_read+0x40>
 8002630:	2300      	movs	r3, #0
 8002632:	e001      	b.n	8002638 <dps310_i2c_read+0x44>
 8002634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff


}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200039e8 	.word	0x200039e8

08002644 <dps310_i2c_write>:

int8_t dps310_i2c_write(uint8_t address, uint8_t reg, uint8_t *data, uint16_t count){
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af04      	add	r7, sp, #16
 800264a:	603a      	str	r2, [r7, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
 8002652:	460b      	mov	r3, r1
 8002654:	71bb      	strb	r3, [r7, #6]
 8002656:	4613      	mov	r3, r2
 8002658:	80bb      	strh	r3, [r7, #4]

	  // Perform the I2C write operation using HAL_I2C_Mem_Write
	  HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, address, reg, I2C_MEMADD_SIZE_8BIT, data, count, 100);
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	b299      	uxth	r1, r3
 800265e:	79bb      	ldrb	r3, [r7, #6]
 8002660:	b29a      	uxth	r2, r3
 8002662:	2364      	movs	r3, #100	; 0x64
 8002664:	9302      	str	r3, [sp, #8]
 8002666:	88bb      	ldrh	r3, [r7, #4]
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2301      	movs	r3, #1
 8002670:	4807      	ldr	r0, [pc, #28]	; (8002690 <dps310_i2c_write+0x4c>)
 8002672:	f004 f8d1 	bl	8006818 <HAL_I2C_Mem_Write>
 8002676:	4603      	mov	r3, r0
 8002678:	73fb      	strb	r3, [r7, #15]

	  // Return the appropriate value based on the HAL status
	  return (status == HAL_OK) ? 0 : -1;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <dps310_i2c_write+0x40>
 8002680:	2300      	movs	r3, #0
 8002682:	e001      	b.n	8002688 <dps310_i2c_write+0x44>
 8002684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200039e8 	.word	0x200039e8

08002694 <Pressure_Init>:



int32_t Pressure_Init(){
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0

    int16_t ret;

    ret = product_id_check();
 800269a:	f000 fb21 	bl	8002ce0 <product_id_check>
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 80026a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <Pressure_Init+0x1c>
 80026aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ae:	e011      	b.n	80026d4 <Pressure_Init+0x40>

    dps310_configure_temperature(
 80026b0:	2000      	movs	r0, #0
 80026b2:	f000 f8b1 	bl	8002818 <dps310_configure_temperature>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_TMP_CFG_TMP_PRC_SINGLE);

    dps310_configure_pressure(
 80026b6:	2001      	movs	r0, #1
 80026b8:	f000 f8da 	bl	8002870 <dps310_configure_pressure>
            DPS310_CFG_RATE_1_MEAS |
            DPS310_PRS_CFG_PM_PRC_2_TIMES);

    ret = read_coefs();
 80026bc:	f000 f80e 	bl	80026dc <read_coefs>
 80026c0:	4603      	mov	r3, r0
 80026c2:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 80026c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <Pressure_Init+0x3e>
 80026cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d0:	e000      	b.n	80026d4 <Pressure_Init+0x40>

    return 0;
 80026d2:	2300      	movs	r3, #0

}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <read_coefs>:

int16_t dps310_reset() {
    return write_byte_to_reg(DPS310_RESET_REG, DPS310_RESET_SOFT_RST_VALUE);
}

int16_t read_coefs() {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[18];

    ret = wait_for_reg_value(
 80026e2:	2280      	movs	r2, #128	; 0x80
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	2008      	movs	r0, #8
 80026e8:	f000 fa3e 	bl	8002b68 <wait_for_reg_value>
 80026ec:	4603      	mov	r3, r0
 80026ee:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE,
            DPS310_MEAS_CFG_COEF_RDY_AVAILABLE);

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_COEF_REG, buff, 18);
 80026f0:	1d3a      	adds	r2, r7, #4
 80026f2:	2312      	movs	r3, #18
 80026f4:	2110      	movs	r1, #16
 80026f6:	20ee      	movs	r0, #238	; 0xee
 80026f8:	f7ff ff7c 	bl	80025f4 <dps310_i2c_read>
 80026fc:	4603      	mov	r3, r0
 80026fe:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002700:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <read_coefs+0x32>
 8002708:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800270c:	e07d      	b.n	800280a <read_coefs+0x12e>

    g_coefs.c0 = get_two_complement_of(
            ((uint16_t) buff[0] << 4u) | (((uint16_t) buff[1] >> 4u) & 0x0Fu),
 800270e:	793b      	ldrb	r3, [r7, #4]
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	461a      	mov	r2, r3
 8002714:	797b      	ldrb	r3, [r7, #5]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	4313      	orrs	r3, r2
    g_coefs.c0 = get_two_complement_of(
 8002720:	210c      	movs	r1, #12
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fab8 	bl	8002c98 <get_two_complement_of>
 8002728:	4603      	mov	r3, r0
 800272a:	b21a      	sxth	r2, r3
 800272c:	4b39      	ldr	r3, [pc, #228]	; (8002814 <read_coefs+0x138>)
 800272e:	801a      	strh	r2, [r3, #0]
            12);

    g_coefs.c1 = get_two_complement_of(
            ((((uint16_t) buff[1] & 0x0Fu) << 8u) | (uint16_t) buff[2]),
 8002730:	797b      	ldrb	r3, [r7, #5]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002738:	79ba      	ldrb	r2, [r7, #6]
 800273a:	4313      	orrs	r3, r2
    g_coefs.c1 = get_two_complement_of(
 800273c:	210c      	movs	r1, #12
 800273e:	4618      	mov	r0, r3
 8002740:	f000 faaa 	bl	8002c98 <get_two_complement_of>
 8002744:	4603      	mov	r3, r0
 8002746:	b21a      	sxth	r2, r3
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <read_coefs+0x138>)
 800274a:	805a      	strh	r2, [r3, #2]
            12);

    g_coefs.c00 = get_two_complement_of(
            ((uint32_t) buff[3] << 12u) | ((uint32_t) buff[4] << 4u) | (((uint32_t) buff[5] >> 4u) & 0x0Fu),
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	031a      	lsls	r2, r3, #12
 8002750:	7a3b      	ldrb	r3, [r7, #8]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	431a      	orrs	r2, r3
 8002756:	7a7b      	ldrb	r3, [r7, #9]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f003 030f 	and.w	r3, r3, #15
    g_coefs.c00 = get_two_complement_of(
 8002760:	4313      	orrs	r3, r2
 8002762:	2114      	movs	r1, #20
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fa97 	bl	8002c98 <get_two_complement_of>
 800276a:	4603      	mov	r3, r0
 800276c:	4a29      	ldr	r2, [pc, #164]	; (8002814 <read_coefs+0x138>)
 800276e:	6053      	str	r3, [r2, #4]
            20);

    g_coefs.c10 = get_two_complement_of(
            (((uint32_t) buff[5] & 0x0Fu) << 16u) | ((uint32_t) buff[6] << 8u) | (uint32_t) buff[7],
 8002770:	7a7b      	ldrb	r3, [r7, #9]
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002778:	7abb      	ldrb	r3, [r7, #10]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	4313      	orrs	r3, r2
 800277e:	7afa      	ldrb	r2, [r7, #11]
    g_coefs.c10 = get_two_complement_of(
 8002780:	4313      	orrs	r3, r2
 8002782:	2114      	movs	r1, #20
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fa87 	bl	8002c98 <get_two_complement_of>
 800278a:	4603      	mov	r3, r0
 800278c:	4a21      	ldr	r2, [pc, #132]	; (8002814 <read_coefs+0x138>)
 800278e:	6093      	str	r3, [r2, #8]
            20);

    g_coefs.c01 = get_two_complement_of(
            ((uint16_t) buff[8] << 8u) | (uint16_t) buff[9],
 8002790:	7b3b      	ldrb	r3, [r7, #12]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	7b7a      	ldrb	r2, [r7, #13]
 8002796:	4313      	orrs	r3, r2
    g_coefs.c01 = get_two_complement_of(
 8002798:	2110      	movs	r1, #16
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fa7c 	bl	8002c98 <get_two_complement_of>
 80027a0:	4603      	mov	r3, r0
 80027a2:	b21a      	sxth	r2, r3
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <read_coefs+0x138>)
 80027a6:	819a      	strh	r2, [r3, #12]
            16);

    g_coefs.c11 = get_two_complement_of(
            ((uint16_t) buff[10] << 8u) | (uint16_t) buff[11],
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	4313      	orrs	r3, r2
    g_coefs.c11 = get_two_complement_of(
 80027b0:	2110      	movs	r1, #16
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fa70 	bl	8002c98 <get_two_complement_of>
 80027b8:	4603      	mov	r3, r0
 80027ba:	b21a      	sxth	r2, r3
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <read_coefs+0x138>)
 80027be:	81da      	strh	r2, [r3, #14]
            16);

    g_coefs.c20 = get_two_complement_of(
            ((uint16_t) buff[12] << 8u) | (uint16_t) buff[13],
 80027c0:	7c3b      	ldrb	r3, [r7, #16]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	7c7a      	ldrb	r2, [r7, #17]
 80027c6:	4313      	orrs	r3, r2
    g_coefs.c20 = get_two_complement_of(
 80027c8:	2110      	movs	r1, #16
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fa64 	bl	8002c98 <get_two_complement_of>
 80027d0:	4603      	mov	r3, r0
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <read_coefs+0x138>)
 80027d6:	821a      	strh	r2, [r3, #16]
            16);

    g_coefs.c21 = get_two_complement_of(
            ((uint16_t) buff[14] << 8u) | (uint16_t) buff[15],
 80027d8:	7cbb      	ldrb	r3, [r7, #18]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	7cfa      	ldrb	r2, [r7, #19]
 80027de:	4313      	orrs	r3, r2
    g_coefs.c21 = get_two_complement_of(
 80027e0:	2110      	movs	r1, #16
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fa58 	bl	8002c98 <get_two_complement_of>
 80027e8:	4603      	mov	r3, r0
 80027ea:	b21a      	sxth	r2, r3
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <read_coefs+0x138>)
 80027ee:	825a      	strh	r2, [r3, #18]
            16);

    g_coefs.c30 = get_two_complement_of(
            ((uint16_t) buff[16] << 8u) | (uint16_t) buff[17],
 80027f0:	7d3b      	ldrb	r3, [r7, #20]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	7d7a      	ldrb	r2, [r7, #21]
 80027f6:	4313      	orrs	r3, r2
    g_coefs.c30 = get_two_complement_of(
 80027f8:	2110      	movs	r1, #16
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fa4c 	bl	8002c98 <get_two_complement_of>
 8002800:	4603      	mov	r3, r0
 8002802:	b21a      	sxth	r2, r3
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <read_coefs+0x138>)
 8002806:	829a      	strh	r2, [r3, #20]
            16);

    return DPS310_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20003940 	.word	0x20003940

08002818 <dps310_configure_temperature>:

int16_t dps310_configure_temperature(uint8_t data) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
    int16_t ret;
    uint8_t temperature_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	737b      	strb	r3, [r7, #13]

    ret = get_temperature_sensor(&temperature_sensor);
 8002826:	f107 030d 	add.w	r3, r7, #13
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fa7e 	bl	8002d2c <get_temperature_sensor>
 8002830:	4603      	mov	r3, r0
 8002832:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 8002834:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <dps310_configure_temperature+0x2a>
 800283c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002840:	e00f      	b.n	8002862 <dps310_configure_temperature+0x4a>

    g_temperature_rate = DPS310_TMP_CFG_TMP_RATE_MASK & data;
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <dps310_configure_temperature+0x54>)
 800284c:	701a      	strb	r2, [r3, #0]
    data |= temperature_sensor;
 800284e:	7b7a      	ldrb	r2, [r7, #13]
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	4313      	orrs	r3, r2
 8002854:	71fb      	strb	r3, [r7, #7]

    return write_byte_to_reg(DPS310_TMP_CFG_REG, data);
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	4619      	mov	r1, r3
 800285a:	2007      	movs	r0, #7
 800285c:	f000 f820 	bl	80028a0 <write_byte_to_reg>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20003959 	.word	0x20003959

08002870 <dps310_configure_pressure>:

int16_t dps310_configure_pressure(uint8_t data) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
    g_pressure_rate = DPS310_PRS_CFG_PM_RATE_MASK & data;
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <dps310_configure_pressure+0x2c>)
 8002884:	701a      	strb	r2, [r3, #0]
    return write_byte_to_reg(DPS310_PRS_CFG_REG, data);
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	4619      	mov	r1, r3
 800288a:	2006      	movs	r0, #6
 800288c:	f000 f808 	bl	80028a0 <write_byte_to_reg>
 8002890:	4603      	mov	r3, r0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20003958 	.word	0x20003958

080028a0 <write_byte_to_reg>:

int16_t write_byte_to_reg(uint8_t reg_addr, uint8_t data) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	460a      	mov	r2, r1
 80028aa:	71fb      	strb	r3, [r7, #7]
 80028ac:	4613      	mov	r3, r2
 80028ae:	71bb      	strb	r3, [r7, #6]
    int16_t ret;
    uint8_t buff[1];

    buff[0] = data;
 80028b0:	79bb      	ldrb	r3, [r7, #6]
 80028b2:	733b      	strb	r3, [r7, #12]
    ret = dps310_i2c_write(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 80028b4:	f107 020c 	add.w	r2, r7, #12
 80028b8:	79f9      	ldrb	r1, [r7, #7]
 80028ba:	2301      	movs	r3, #1
 80028bc:	20ee      	movs	r0, #238	; 0xee
 80028be:	f7ff fec1 	bl	8002644 <dps310_i2c_write>
 80028c2:	4603      	mov	r3, r0
 80028c4:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 80028c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <write_byte_to_reg+0x34>
 80028ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028d2:	e000      	b.n	80028d6 <write_byte_to_reg+0x36>

    return DPS310_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <read_temperature>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t read_temperature(float *p_temperature) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_TMP);
 80028e8:	2102      	movs	r1, #2
 80028ea:	2008      	movs	r0, #8
 80028ec:	f7ff ffd8 	bl	80028a0 <write_byte_to_reg>
 80028f0:	4603      	mov	r3, r0
 80028f2:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 80028f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <read_temperature+0x22>
 80028fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002900:	e066      	b.n	80029d0 <read_temperature+0xf0>

    ret = wait_for_reg_value(
 8002902:	2267      	movs	r2, #103	; 0x67
 8002904:	2160      	movs	r1, #96	; 0x60
 8002906:	2008      	movs	r0, #8
 8002908:	f000 f92e 	bl	8002b68 <wait_for_reg_value>
 800290c:	4603      	mov	r3, r0
 800290e:	82fb      	strh	r3, [r7, #22]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_TMP_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 8002910:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <read_temperature+0x3e>
 8002918:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800291c:	e058      	b.n	80029d0 <read_temperature+0xf0>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_B2_REG, buff, 3);
 800291e:	f107 020c 	add.w	r2, r7, #12
 8002922:	2303      	movs	r3, #3
 8002924:	2103      	movs	r1, #3
 8002926:	20ee      	movs	r0, #238	; 0xee
 8002928:	f7ff fe64 	bl	80025f4 <dps310_i2c_read>
 800292c:	4603      	mov	r3, r0
 800292e:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 8002930:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <read_temperature+0x5e>
 8002938:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800293c:	e048      	b.n	80029d0 <read_temperature+0xf0>

    int32_t temp_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 800293e:	7b3b      	ldrb	r3, [r7, #12]
 8002940:	041a      	lsls	r2, r3, #16
 8002942:	7b7b      	ldrb	r3, [r7, #13]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	4313      	orrs	r3, r2
 8002948:	7bba      	ldrb	r2, [r7, #14]
    int32_t temp_raw = get_two_complement_of(
 800294a:	4313      	orrs	r3, r2
 800294c:	2118      	movs	r1, #24
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f9a2 	bl	8002c98 <get_two_complement_of>
 8002954:	6138      	str	r0, [r7, #16]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_temperature_rate, &factor);
 8002956:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <read_temperature+0xf8>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	f107 0208 	add.w	r2, r7, #8
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f940 	bl	8002be6 <get_scale_factor_for>
 8002966:	4603      	mov	r3, r0
 8002968:	82fb      	strh	r3, [r7, #22]
    if (ret != DPS310_OK) return ret;
 800296a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <read_temperature+0x98>
 8002972:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002976:	e02b      	b.n	80029d0 <read_temperature+0xf0>

    g_last_temp_raw_sc = (float) temp_raw / factor;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800298c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <read_temperature+0xfc>)
 8002992:	edc3 7a00 	vstr	s15, [r3]
    *p_temperature = (float) g_coefs.c0 * 0.5f + (float) g_coefs.c1 * g_last_temp_raw_sc;
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <read_temperature+0x100>)
 8002998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <read_temperature+0x100>)
 80029ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <read_temperature+0xfc>)
 80029bc:	edd3 7a00 	vldr	s15, [r3]
 80029c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20003959 	.word	0x20003959
 80029dc:	2000395c 	.word	0x2000395c
 80029e0:	20003940 	.word	0x20003940

080029e4 <read_pressure>:

int16_t read_pressure(float *p_pressure) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    int16_t ret;
    uint8_t buff[3];

    ret = write_byte_to_reg(DPS310_MEAS_CFG_REG, DPS310_MEAS_CFG_MEAS_CTRL_PRS);
 80029ec:	2101      	movs	r1, #1
 80029ee:	2008      	movs	r0, #8
 80029f0:	f7ff ff56 	bl	80028a0 <write_byte_to_reg>
 80029f4:	4603      	mov	r3, r0
 80029f6:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 80029f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <read_pressure+0x22>
 8002a00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a04:	e0a4      	b.n	8002b50 <read_pressure+0x16c>

    ret = wait_for_reg_value(
 8002a06:	2257      	movs	r2, #87	; 0x57
 8002a08:	2150      	movs	r1, #80	; 0x50
 8002a0a:	2008      	movs	r0, #8
 8002a0c:	f000 f8ac 	bl	8002b68 <wait_for_reg_value>
 8002a10:	4603      	mov	r3, r0
 8002a12:	83fb      	strh	r3, [r7, #30]
            DPS310_MEAS_CFG_REG,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_IDLE,
            DPS310_MEAS_CFG_SENSOR_RDY_COMPLETE | DPS310_MEAS_CFG_PRS_RDY | DPS310_MEAS_CFG_MEAS_CTRL_MASK);
    if (ret != DPS310_OK) return ret;
 8002a14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <read_pressure+0x3e>
 8002a1c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a20:	e096      	b.n	8002b50 <read_pressure+0x16c>

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PSR_B2_REG, buff, 3);
 8002a22:	f107 0210 	add.w	r2, r7, #16
 8002a26:	2303      	movs	r3, #3
 8002a28:	2100      	movs	r1, #0
 8002a2a:	20ee      	movs	r0, #238	; 0xee
 8002a2c:	f7ff fde2 	bl	80025f4 <dps310_i2c_read>
 8002a30:	4603      	mov	r3, r0
 8002a32:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8002a34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <read_pressure+0x5e>
 8002a3c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a40:	e086      	b.n	8002b50 <read_pressure+0x16c>

    int32_t pressure_raw = get_two_complement_of(
            ((uint32_t) buff[0] << 16u) | ((uint32_t) buff[1] << 8u) | (uint32_t) buff[2],
 8002a42:	7c3b      	ldrb	r3, [r7, #16]
 8002a44:	041a      	lsls	r2, r3, #16
 8002a46:	7c7b      	ldrb	r3, [r7, #17]
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	7cba      	ldrb	r2, [r7, #18]
    int32_t pressure_raw = get_two_complement_of(
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	2118      	movs	r1, #24
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f920 	bl	8002c98 <get_two_complement_of>
 8002a58:	61b8      	str	r0, [r7, #24]
            24);

    uint32_t factor;
    ret = get_scale_factor_for(g_pressure_rate, &factor);
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <read_pressure+0x174>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	f107 020c 	add.w	r2, r7, #12
 8002a62:	4611      	mov	r1, r2
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 f8be 	bl	8002be6 <get_scale_factor_for>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	83fb      	strh	r3, [r7, #30]
    if (ret != DPS310_OK) return ret;
 8002a6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <read_pressure+0x98>
 8002a76:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a7a:	e069      	b.n	8002b50 <read_pressure+0x16c>

    float pressure_raw_sc = (float) pressure_raw / factor;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a94:	edc7 7a05 	vstr	s15, [r7, #20]

    // *0.01f -> Convert compensated pressure measurement from Pa to hPa
    *p_pressure = (g_coefs.c00 +
 8002a98:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <read_pressure+0x178>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <read_pressure+0x178>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ab0:	4b2a      	ldr	r3, [pc, #168]	; (8002b5c <read_pressure+0x178>)
 8002ab2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002ab6:	ee07 3a90 	vmov	s15, r3
 8002aba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002abe:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <read_pressure+0x178>)
 8002ac0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ad0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ad4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002ad8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002adc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ae0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ae4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ae8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    *p_pressure = (g_coefs.c00 +
 8002aec:	ee37 7a27 	vadd.f32	s14, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <read_pressure+0x178>)
 8002af2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <read_pressure+0x178>)
 8002b00:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <read_pressure+0x178>)
 8002b0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002b1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b1e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b22:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b26:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <read_pressure+0x17c>)
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
                  pressure_raw_sc * (g_coefs.c10 + pressure_raw_sc * (g_coefs.c20 + pressure_raw_sc * g_coefs.c30)) +
 8002b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
                  g_last_temp_raw_sc * (g_coefs.c01 + pressure_raw_sc * (g_coefs.c11 + pressure_raw_sc * g_coefs.c21))) * PRESSURE_HECTO_PASCAL_CONVERSION;
 8002b40:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002b64 <read_pressure+0x180>
 8002b44:	ee67 7a87 	vmul.f32	s15, s15, s14
    *p_pressure = (g_coefs.c00 +
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	edc3 7a00 	vstr	s15, [r3]

    return DPS310_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20003958 	.word	0x20003958
 8002b5c:	20003940 	.word	0x20003940
 8002b60:	2000395c 	.word	0x2000395c
 8002b64:	3c23d70a 	.word	0x3c23d70a

08002b68 <wait_for_reg_value>:

int16_t wait_for_reg_value(uint8_t reg_addr, uint8_t reg_value, uint8_t mask) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
 8002b72:	460b      	mov	r3, r1
 8002b74:	71bb      	strb	r3, [r7, #6]
 8002b76:	4613      	mov	r3, r2
 8002b78:	717b      	strb	r3, [r7, #5]
    int16_t ret;
    uint8_t buff[1];
    uint16_t attempts = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	81fb      	strh	r3, [r7, #14]

    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8002b7e:	e024      	b.n	8002bca <wait_for_reg_value+0x62>
        attempts++;
 8002b80:	89fb      	ldrh	r3, [r7, #14]
 8002b82:	3301      	adds	r3, #1
 8002b84:	81fb      	strh	r3, [r7, #14]

        ret = dps310_i2c_read(I2C_DPS310_ADDRESS, reg_addr, buff, 1);
 8002b86:	f107 0208 	add.w	r2, r7, #8
 8002b8a:	79f9      	ldrb	r1, [r7, #7]
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	20ee      	movs	r0, #238	; 0xee
 8002b90:	f7ff fd30 	bl	80025f4 <dps310_i2c_read>
 8002b94:	4603      	mov	r3, r0
 8002b96:	81bb      	strh	r3, [r7, #12]
        if (ret != DPS310_OK) return ret;
 8002b98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <wait_for_reg_value+0x3e>
 8002ba0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ba4:	e01b      	b.n	8002bde <wait_for_reg_value+0x76>

        bool b_is_expected_value = ((buff[0] & mask) == reg_value);
 8002ba6:	7a3a      	ldrb	r2, [r7, #8]
 8002ba8:	797b      	ldrb	r3, [r7, #5]
 8002baa:	4013      	ands	r3, r2
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	79ba      	ldrb	r2, [r7, #6]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	72fb      	strb	r3, [r7, #11]
        if (b_is_expected_value) return DPS310_OK;
 8002bba:	7afb      	ldrb	r3, [r7, #11]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <wait_for_reg_value+0x5c>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e00c      	b.n	8002bde <wait_for_reg_value+0x76>

        HAL_Delay(10);
 8002bc4:	200a      	movs	r0, #10
 8002bc6:	f002 fc31 	bl	800542c <HAL_Delay>
    while (attempts < DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8002bca:	89fb      	ldrh	r3, [r7, #14]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d9d7      	bls.n	8002b80 <wait_for_reg_value+0x18>
    }

    if (attempts == DPS310_READ_WAIT_FOR_REG_ATTEMPTS) {
 8002bd0:	89fb      	ldrh	r3, [r7, #14]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d102      	bne.n	8002bdc <wait_for_reg_value+0x74>
        return DPS310_WAIT_TIMEOUT_ERROR;
 8002bd6:	f06f 0303 	mvn.w	r3, #3
 8002bda:	e000      	b.n	8002bde <wait_for_reg_value+0x76>
    }

    return DPS310_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <get_scale_factor_for>:

int16_t get_scale_factor_for(uint8_t rate, uint32_t *p_factor) {
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	6039      	str	r1, [r7, #0]
 8002bf0:	71fb      	strb	r3, [r7, #7]
    uint32_t ret = DPS310_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]

    switch (rate) {
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2b70      	cmp	r3, #112	; 0x70
 8002bfa:	d03d      	beq.n	8002c78 <get_scale_factor_for+0x92>
 8002bfc:	2b70      	cmp	r3, #112	; 0x70
 8002bfe:	dc40      	bgt.n	8002c82 <get_scale_factor_for+0x9c>
 8002c00:	2b60      	cmp	r3, #96	; 0x60
 8002c02:	d034      	beq.n	8002c6e <get_scale_factor_for+0x88>
 8002c04:	2b60      	cmp	r3, #96	; 0x60
 8002c06:	dc3c      	bgt.n	8002c82 <get_scale_factor_for+0x9c>
 8002c08:	2b50      	cmp	r3, #80	; 0x50
 8002c0a:	d02b      	beq.n	8002c64 <get_scale_factor_for+0x7e>
 8002c0c:	2b50      	cmp	r3, #80	; 0x50
 8002c0e:	dc38      	bgt.n	8002c82 <get_scale_factor_for+0x9c>
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	d022      	beq.n	8002c5a <get_scale_factor_for+0x74>
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	dc34      	bgt.n	8002c82 <get_scale_factor_for+0x9c>
 8002c18:	2b30      	cmp	r3, #48	; 0x30
 8002c1a:	d019      	beq.n	8002c50 <get_scale_factor_for+0x6a>
 8002c1c:	2b30      	cmp	r3, #48	; 0x30
 8002c1e:	dc30      	bgt.n	8002c82 <get_scale_factor_for+0x9c>
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d010      	beq.n	8002c46 <get_scale_factor_for+0x60>
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	dc2c      	bgt.n	8002c82 <get_scale_factor_for+0x9c>
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <get_scale_factor_for+0x4c>
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d005      	beq.n	8002c3c <get_scale_factor_for+0x56>
 8002c30:	e027      	b.n	8002c82 <get_scale_factor_for+0x9c>
        case DPS310_CFG_RATE_1_MEAS:
            *p_factor = 524288;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c38:	601a      	str	r2, [r3, #0]
            break;
 8002c3a:	e025      	b.n	8002c88 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_2_MEAS:
            *p_factor = 1572864;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8002c42:	601a      	str	r2, [r3, #0]
            break;
 8002c44:	e020      	b.n	8002c88 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_4_MEAS:
            *p_factor = 3670016;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8002c4c:	601a      	str	r2, [r3, #0]
            break;
 8002c4e:	e01b      	b.n	8002c88 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_8_MEAS:
            *p_factor = 7864320;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002c56:	601a      	str	r2, [r3, #0]
            break;
 8002c58:	e016      	b.n	8002c88 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_16_MEAS:
            *p_factor = 253952;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 8002c60:	601a      	str	r2, [r3, #0]
            break;
 8002c62:	e011      	b.n	8002c88 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_32_MEAS:
            *p_factor = 516096;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 8002c6a:	601a      	str	r2, [r3, #0]
            break;
 8002c6c:	e00c      	b.n	8002c88 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_64_MEAS:
            *p_factor = 1040384;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 8002c74:	601a      	str	r2, [r3, #0]
            break;
 8002c76:	e007      	b.n	8002c88 <get_scale_factor_for+0xa2>
        case DPS310_CFG_RATE_128_MEAS:
            *p_factor = 2088960;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8002c7e:	601a      	str	r2, [r3, #0]
            break;
 8002c80:	e002      	b.n	8002c88 <get_scale_factor_for+0xa2>
        default:
            ret = DPS310_UNKNOWN_RATE_ERROR;
 8002c82:	f06f 0304 	mvn.w	r3, #4
 8002c86:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	b21b      	sxth	r3, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <get_two_complement_of>:

int32_t get_two_complement_of(uint32_t value, uint8_t length) {
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
    int32_t ret = value;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	60fb      	str	r3, [r7, #12]
    bool b_is_negative = value & (1u << (length - 1u));
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	2201      	movs	r2, #1
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bf14      	ite	ne
 8002cb8:	2301      	movne	r3, #1
 8002cba:	2300      	moveq	r3, #0
 8002cbc:	72fb      	strb	r3, [r7, #11]

    if (b_is_negative) {
 8002cbe:	7afb      	ldrb	r3, [r7, #11]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <get_two_complement_of+0x3a>
        ret -= ((uint32_t) 1 << length);
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <product_id_check>:
    if (ret != DPS310_OK) return ret;

    return DPS310_OK;
}

int16_t product_id_check() {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
    int16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_PRODUCT_ID_REG, buff, 1);
 8002ce6:	1d3a      	adds	r2, r7, #4
 8002ce8:	2301      	movs	r3, #1
 8002cea:	210d      	movs	r1, #13
 8002cec:	20ee      	movs	r0, #238	; 0xee
 8002cee:	f7ff fc81 	bl	80025f4 <dps310_i2c_read>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	80fb      	strh	r3, [r7, #6]
    if (ret != DPS310_OK) return ret;
 8002cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <product_id_check+0x24>
 8002cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d02:	e00f      	b.n	8002d24 <product_id_check+0x44>

    bool b_is_product_id_valid = buff[0] == DPS310_PRODUCT_ID_VALUE;
 8002d04:	793b      	ldrb	r3, [r7, #4]
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	717b      	strb	r3, [r7, #5]
    if (!b_is_product_id_valid) return DPS310_PRODUCT_ID_ERROR;
 8002d10:	797b      	ldrb	r3, [r7, #5]
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <product_id_check+0x42>
 8002d1c:	f06f 0301 	mvn.w	r3, #1
 8002d20:	e000      	b.n	8002d24 <product_id_check+0x44>

    return DPS310_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <get_temperature_sensor>:

int16_t get_temperature_sensor(uint8_t *p_sensor) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
    uint16_t ret;
    uint8_t buff[1];

    ret = dps310_i2c_read(I2C_DPS310_ADDRESS, DPS310_TMP_COEF_SRCE, buff, 1);
 8002d34:	f107 020c 	add.w	r2, r7, #12
 8002d38:	2301      	movs	r3, #1
 8002d3a:	2128      	movs	r1, #40	; 0x28
 8002d3c:	20ee      	movs	r0, #238	; 0xee
 8002d3e:	f7ff fc59 	bl	80025f4 <dps310_i2c_read>
 8002d42:	4603      	mov	r3, r0
 8002d44:	81fb      	strh	r3, [r7, #14]
    if (ret != DPS310_OK) return ret;
 8002d46:	89fb      	ldrh	r3, [r7, #14]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <get_temperature_sensor+0x26>
 8002d4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d50:	e00e      	b.n	8002d70 <get_temperature_sensor+0x44>

    uint8_t value = buff[0] & DPS310_TMP_COEF_SRCE_MASK;
 8002d52:	7b3b      	ldrb	r3, [r7, #12]
 8002d54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d58:	737b      	strb	r3, [r7, #13]

    if (value) {
 8002d5a:	7b7b      	ldrb	r3, [r7, #13]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <get_temperature_sensor+0x3c>
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_EXTERNAL;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2280      	movs	r2, #128	; 0x80
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	e002      	b.n	8002d6e <get_temperature_sensor+0x42>
    } else {
        *p_sensor = DPS310_TMP_CFG_REG_TMP_EXT_INTERNAL;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
    }

    return DPS310_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <Transmit_Pressure_Temp_Data>:


PressureTempData Transmit_Pressure_Temp_Data(){
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0


	  pressure_read_state = read_pressure(&pressure_value);
 8002d7e:	4822      	ldr	r0, [pc, #136]	; (8002e08 <Transmit_Pressure_Temp_Data+0x90>)
 8002d80:	f7ff fe30 	bl	80029e4 <read_pressure>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <Transmit_Pressure_Temp_Data+0x94>)
 8002d8a:	801a      	strh	r2, [r3, #0]
	  temperature_p_state = read_temperature(&temperature_p_value);
 8002d8c:	4820      	ldr	r0, [pc, #128]	; (8002e10 <Transmit_Pressure_Temp_Data+0x98>)
 8002d8e:	f7ff fda7 	bl	80028e0 <read_temperature>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <Transmit_Pressure_Temp_Data+0x9c>)
 8002d98:	801a      	strh	r2, [r3, #0]

	  if(pressure_read_state == 0 && temperature_p_state == 0){
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	; (8002e0c <Transmit_Pressure_Temp_Data+0x94>)
 8002d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d114      	bne.n	8002dce <Transmit_Pressure_Temp_Data+0x56>
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <Transmit_Pressure_Temp_Data+0x9c>)
 8002da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10f      	bne.n	8002dce <Transmit_Pressure_Temp_Data+0x56>
		    pressure_temp_data.pressure_hpa = pressure_value;
 8002dae:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <Transmit_Pressure_Temp_Data+0x90>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <Transmit_Pressure_Temp_Data+0xa0>)
 8002db4:	6013      	str	r3, [r2, #0]
		    pressure_temp_data.temperature_celsius = temperature_p_value;
 8002db6:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <Transmit_Pressure_Temp_Data+0x98>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a17      	ldr	r2, [pc, #92]	; (8002e18 <Transmit_Pressure_Temp_Data+0xa0>)
 8002dbc:	6053      	str	r3, [r2, #4]

		    return pressure_temp_data;
 8002dbe:	4a16      	ldr	r2, [pc, #88]	; (8002e18 <Transmit_Pressure_Temp_Data+0xa0>)
 8002dc0:	f107 0308 	add.w	r3, r7, #8
 8002dc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002dcc:	e00e      	b.n	8002dec <Transmit_Pressure_Temp_Data+0x74>
	  } else {
		    pressure_temp_data.pressure_hpa = 0;
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <Transmit_Pressure_Temp_Data+0xa0>)
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
		    pressure_temp_data.temperature_celsius = 0;
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <Transmit_Pressure_Temp_Data+0xa0>)
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	605a      	str	r2, [r3, #4]

		    return pressure_temp_data;
 8002dde:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <Transmit_Pressure_Temp_Data+0xa0>)
 8002de0:	f107 0308 	add.w	r3, r7, #8
 8002de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002de8:	e883 0003 	stmia.w	r3, {r0, r1}
	  }


}
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	ee07 2a10 	vmov	s14, r2
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eeb0 0a47 	vmov.f32	s0, s14
 8002dfc:	eef0 0a67 	vmov.f32	s1, s15
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20003960 	.word	0x20003960
 8002e0c:	20003968 	.word	0x20003968
 8002e10:	20003964 	.word	0x20003964
 8002e14:	2000396a 	.word	0x2000396a
 8002e18:	2000396c 	.word	0x2000396c

08002e1c <UART_Transmit_Pyro>:
 */

#include "pyro.h"

void UART_Transmit_Pyro(const char* str)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7fd fa23 	bl	8000270 <strlen>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4803      	ldr	r0, [pc, #12]	; (8002e44 <UART_Transmit_Pyro+0x28>)
 8002e36:	f006 fd06 	bl	8009846 <HAL_UART_Transmit>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20003be0 	.word	0x20003be0

08002e48 <pyro_arm>:

// Function to arm the pyro charge
void pyro_arm(int pyroSlot) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
    if (pyroSlot == 1) {
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d105      	bne.n	8002e62 <pyro_arm+0x1a>
        // Arm Pyro 1 (set the GPIO pin low)
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_RESET);
 8002e56:	2200      	movs	r2, #0
 8002e58:	2140      	movs	r1, #64	; 0x40
 8002e5a:	4808      	ldr	r0, [pc, #32]	; (8002e7c <pyro_arm+0x34>)
 8002e5c:	f003 f836 	bl	8005ecc <HAL_GPIO_WritePin>
    } else if (pyroSlot == 2) {
        // Arm Pyro 2 (set the GPIO pin low)
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
    }
}
 8002e60:	e007      	b.n	8002e72 <pyro_arm+0x2a>
    } else if (pyroSlot == 2) {
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d104      	bne.n	8002e72 <pyro_arm+0x2a>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4804      	ldr	r0, [pc, #16]	; (8002e80 <pyro_arm+0x38>)
 8002e6e:	f003 f82d 	bl	8005ecc <HAL_GPIO_WritePin>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40020000 	.word	0x40020000

08002e84 <pyro_fire>:

// Function to fire the pyro charge
void pyro_fire(int pyroSlot) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
    if (pyroSlot == 1) {
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d114      	bne.n	8002ebc <pyro_fire+0x38>
        // Fire Pyro 1 (set the GPIO pin high)
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_SET);
 8002e92:	2201      	movs	r2, #1
 8002e94:	2140      	movs	r1, #64	; 0x40
 8002e96:	4817      	ldr	r0, [pc, #92]	; (8002ef4 <pyro_fire+0x70>)
 8002e98:	f003 f818 	bl	8005ecc <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Ignition..");
 8002e9c:	4816      	ldr	r0, [pc, #88]	; (8002ef8 <pyro_fire+0x74>)
 8002e9e:	f7ff ffbd 	bl	8002e1c <UART_Transmit_Pyro>
        HAL_Delay(PYRO_IGNITION_TIME);
 8002ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ea6:	f002 fac1 	bl	800542c <HAL_Delay>
        HAL_GPIO_WritePin(PYRO_1_PORT, PYRO_1_PIN, GPIO_PIN_RESET);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2140      	movs	r1, #64	; 0x40
 8002eae:	4811      	ldr	r0, [pc, #68]	; (8002ef4 <pyro_fire+0x70>)
 8002eb0:	f003 f80c 	bl	8005ecc <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Finished.\r\n");
 8002eb4:	4811      	ldr	r0, [pc, #68]	; (8002efc <pyro_fire+0x78>)
 8002eb6:	f7ff ffb1 	bl	8002e1c <UART_Transmit_Pyro>
        UART_Transmit_Pyro("Ignition..");
        HAL_Delay(PYRO_IGNITION_TIME);
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
        UART_Transmit_Pyro("Finished.\r\n");
    }
}
 8002eba:	e016      	b.n	8002eea <pyro_fire+0x66>
    } else if (pyroSlot == 2) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d113      	bne.n	8002eea <pyro_fire+0x66>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_SET);
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	480e      	ldr	r0, [pc, #56]	; (8002f00 <pyro_fire+0x7c>)
 8002ec8:	f003 f800 	bl	8005ecc <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Ignition..");
 8002ecc:	480a      	ldr	r0, [pc, #40]	; (8002ef8 <pyro_fire+0x74>)
 8002ece:	f7ff ffa5 	bl	8002e1c <UART_Transmit_Pyro>
        HAL_Delay(PYRO_IGNITION_TIME);
 8002ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ed6:	f002 faa9 	bl	800542c <HAL_Delay>
        HAL_GPIO_WritePin(PYRO_2_PORT, PYRO_2_PIN, GPIO_PIN_RESET);
 8002eda:	2200      	movs	r2, #0
 8002edc:	2101      	movs	r1, #1
 8002ede:	4808      	ldr	r0, [pc, #32]	; (8002f00 <pyro_fire+0x7c>)
 8002ee0:	f002 fff4 	bl	8005ecc <HAL_GPIO_WritePin>
        UART_Transmit_Pyro("Finished.\r\n");
 8002ee4:	4805      	ldr	r0, [pc, #20]	; (8002efc <pyro_fire+0x78>)
 8002ee6:	f7ff ff99 	bl	8002e1c <UART_Transmit_Pyro>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	0801eae8 	.word	0x0801eae8
 8002efc:	0801eaf4 	.word	0x0801eaf4
 8002f00:	40020000 	.word	0x40020000

08002f04 <Transmit_Temperature>:
{
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}


TemperatureData Transmit_Temperature(){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af02      	add	r7, sp, #8


	buffer[0] = TEMP_READ_ADDRESS;
 8002f0a:	4b40      	ldr	r3, [pc, #256]	; (800300c <Transmit_Temperature+0x108>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
	//UART_Transmit_String("Reading temperature..\r\n");
	ret = HAL_I2C_Master_Transmit(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,1,HAL_MAX_DELAY);
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2301      	movs	r3, #1
 8002f18:	4a3c      	ldr	r2, [pc, #240]	; (800300c <Transmit_Temperature+0x108>)
 8002f1a:	2190      	movs	r1, #144	; 0x90
 8002f1c:	483c      	ldr	r0, [pc, #240]	; (8003010 <Transmit_Temperature+0x10c>)
 8002f1e:	f003 f957 	bl	80061d0 <HAL_I2C_Master_Transmit>
 8002f22:	4603      	mov	r3, r0
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <Transmit_Temperature+0x110>)
 8002f28:	701a      	strb	r2, [r3, #0]
	if (ret != HAL_OK){
 8002f2a:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <Transmit_Temperature+0x110>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d006      	beq.n	8002f40 <Transmit_Temperature+0x3c>
		UART_Transmit_String("Error communicating with Temperature sensor");
 8002f32:	4839      	ldr	r0, [pc, #228]	; (8003018 <Transmit_Temperature+0x114>)
 8002f34:	f7fe fbd2 	bl	80016dc <UART_Transmit_String>
		UART_Transmit_String("\r\n");
 8002f38:	4838      	ldr	r0, [pc, #224]	; (800301c <Transmit_Temperature+0x118>)
 8002f3a:	f7fe fbcf 	bl	80016dc <UART_Transmit_String>
 8002f3e:	e059      	b.n	8002ff4 <Transmit_Temperature+0xf0>
	} else{
		ret = HAL_I2C_Master_Receive(&hi2c1,TEMP_SENSOR_ADDRESS,buffer,2,HAL_MAX_DELAY);
 8002f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2302      	movs	r3, #2
 8002f48:	4a30      	ldr	r2, [pc, #192]	; (800300c <Transmit_Temperature+0x108>)
 8002f4a:	2190      	movs	r1, #144	; 0x90
 8002f4c:	4830      	ldr	r0, [pc, #192]	; (8003010 <Transmit_Temperature+0x10c>)
 8002f4e:	f003 fa3d 	bl	80063cc <HAL_I2C_Master_Receive>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <Transmit_Temperature+0x110>)
 8002f58:	701a      	strb	r2, [r3, #0]
		if (ret != HAL_OK){
 8002f5a:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <Transmit_Temperature+0x110>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d006      	beq.n	8002f70 <Transmit_Temperature+0x6c>
			UART_Transmit_String("Error receiving data from Temperature sensor");
 8002f62:	482f      	ldr	r0, [pc, #188]	; (8003020 <Transmit_Temperature+0x11c>)
 8002f64:	f7fe fbba 	bl	80016dc <UART_Transmit_String>
			UART_Transmit_String("\r\n");
 8002f68:	482c      	ldr	r0, [pc, #176]	; (800301c <Transmit_Temperature+0x118>)
 8002f6a:	f7fe fbb7 	bl	80016dc <UART_Transmit_String>
 8002f6e:	e041      	b.n	8002ff4 <Transmit_Temperature+0xf0>
		} else {
			//Combine the bytes
			val = ((int16_t)buffer[0] << 4) | (buffer[1] >> 4);
 8002f70:	4b26      	ldr	r3, [pc, #152]	; (800300c <Transmit_Temperature+0x108>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	b21a      	sxth	r2, r3
 8002f78:	4b24      	ldr	r3, [pc, #144]	; (800300c <Transmit_Temperature+0x108>)
 8002f7a:	785b      	ldrb	r3, [r3, #1]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	b21b      	sxth	r3, r3
 8002f82:	4313      	orrs	r3, r2
 8002f84:	b21a      	sxth	r2, r3
 8002f86:	4b27      	ldr	r3, [pc, #156]	; (8003024 <Transmit_Temperature+0x120>)
 8002f88:	801a      	strh	r2, [r3, #0]

			//Convert to 2's complement (temperature can be negative)
			if(val > 0x7FF){
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <Transmit_Temperature+0x120>)
 8002f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f94:	db09      	blt.n	8002faa <Transmit_Temperature+0xa6>
				val |= 0xF000;
 8002f96:	4b23      	ldr	r3, [pc, #140]	; (8003024 <Transmit_Temperature+0x120>)
 8002f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f9c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002fa0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002fa4:	b21a      	sxth	r2, r3
 8002fa6:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <Transmit_Temperature+0x120>)
 8002fa8:	801a      	strh	r2, [r3, #0]
			}

			//Convert to float temperature value (Celsius)
			temp_c = val * 0.0625; // 0.0625 can be retreived into the datasheet
 8002faa:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <Transmit_Temperature+0x120>)
 8002fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd fac1 	bl	8000538 <__aeabi_i2d>
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <Transmit_Temperature+0x124>)
 8002fbc:	f7fd fb26 	bl	800060c <__aeabi_dmul>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7fd fe18 	bl	8000bfc <__aeabi_d2f>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <Transmit_Temperature+0x128>)
 8002fd0:	6013      	str	r3, [r2, #0]

			//Convert to temperature to decimal format
			temp_c *= 100;
 8002fd2:	4b16      	ldr	r3, [pc, #88]	; (800302c <Transmit_Temperature+0x128>)
 8002fd4:	edd3 7a00 	vldr	s15, [r3]
 8002fd8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003030 <Transmit_Temperature+0x12c>
 8002fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <Transmit_Temperature+0x128>)
 8002fe2:	edc3 7a00 	vstr	s15, [r3]

			temperature_data.temperature_celsius = temp_c;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <Transmit_Temperature+0x128>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a12      	ldr	r2, [pc, #72]	; (8003034 <Transmit_Temperature+0x130>)
 8002fec:	6013      	str	r3, [r2, #0]

			return temperature_data;
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <Transmit_Temperature+0x130>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	e004      	b.n	8002ffe <Transmit_Temperature+0xfa>

		}
	}

	//Error State
	temperature_data.temperature_celsius = -100.00;
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <Transmit_Temperature+0x130>)
 8002ff6:	4a10      	ldr	r2, [pc, #64]	; (8003038 <Transmit_Temperature+0x134>)
 8002ff8:	601a      	str	r2, [r3, #0]
	return temperature_data;
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <Transmit_Temperature+0x130>)
 8002ffc:	681b      	ldr	r3, [r3, #0]

}
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eeb0 0a67 	vmov.f32	s0, s15
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20003978 	.word	0x20003978
 8003010:	200039e8 	.word	0x200039e8
 8003014:	20003974 	.word	0x20003974
 8003018:	0801eb00 	.word	0x0801eb00
 800301c:	0801eb2c 	.word	0x0801eb2c
 8003020:	0801eb30 	.word	0x0801eb30
 8003024:	20003984 	.word	0x20003984
 8003028:	3fb00000 	.word	0x3fb00000
 800302c:	20003988 	.word	0x20003988
 8003030:	42c80000 	.word	0x42c80000
 8003034:	2000398c 	.word	0x2000398c
 8003038:	c2c80000 	.word	0xc2c80000

0800303c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003040:	2200      	movs	r2, #0
 8003042:	2110      	movs	r1, #16
 8003044:	4803      	ldr	r0, [pc, #12]	; (8003054 <SELECT+0x18>)
 8003046:	f002 ff41 	bl	8005ecc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800304a:	2001      	movs	r0, #1
 800304c:	f002 f9ee 	bl	800542c <HAL_Delay>
}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40020000 	.word	0x40020000

08003058 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800305c:	2201      	movs	r2, #1
 800305e:	2110      	movs	r1, #16
 8003060:	4803      	ldr	r0, [pc, #12]	; (8003070 <DESELECT+0x18>)
 8003062:	f002 ff33 	bl	8005ecc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003066:	2001      	movs	r0, #1
 8003068:	f002 f9e0 	bl	800542c <HAL_Delay>
}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40020000 	.word	0x40020000

08003074 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800307e:	bf00      	nop
 8003080:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <SPI_TxByte+0x30>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	d1f8      	bne.n	8003080 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800308e:	1df9      	adds	r1, r7, #7
 8003090:	2364      	movs	r3, #100	; 0x64
 8003092:	2201      	movs	r2, #1
 8003094:	4803      	ldr	r0, [pc, #12]	; (80030a4 <SPI_TxByte+0x30>)
 8003096:	f005 fa48 	bl	800852a <HAL_SPI_Transmit>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20003ab0 	.word	0x20003ab0

080030a8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80030b4:	bf00      	nop
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <SPI_TxBuffer+0x30>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d1f8      	bne.n	80030b6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80030c4:	887a      	ldrh	r2, [r7, #2]
 80030c6:	2364      	movs	r3, #100	; 0x64
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4803      	ldr	r0, [pc, #12]	; (80030d8 <SPI_TxBuffer+0x30>)
 80030cc:	f005 fa2d 	bl	800852a <HAL_SPI_Transmit>
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20003ab0 	.word	0x20003ab0

080030dc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80030e2:	23ff      	movs	r3, #255	; 0xff
 80030e4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80030e6:	bf00      	nop
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <SPI_RxByte+0x34>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d1f8      	bne.n	80030e8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80030f6:	1dba      	adds	r2, r7, #6
 80030f8:	1df9      	adds	r1, r7, #7
 80030fa:	2364      	movs	r3, #100	; 0x64
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2301      	movs	r3, #1
 8003100:	4803      	ldr	r0, [pc, #12]	; (8003110 <SPI_RxByte+0x34>)
 8003102:	f005 fb4e 	bl	80087a2 <HAL_SPI_TransmitReceive>

	return data;
 8003106:	79bb      	ldrb	r3, [r7, #6]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20003ab0 	.word	0x20003ab0

08003114 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800311c:	f7ff ffde 	bl	80030dc <SPI_RxByte>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	701a      	strb	r2, [r3, #0]
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <SD_ReadyWait+0x30>)
 8003138:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800313c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800313e:	f7ff ffcd 	bl	80030dc <SPI_RxByte>
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	2bff      	cmp	r3, #255	; 0xff
 800314a:	d003      	beq.n	8003154 <SD_ReadyWait+0x24>
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <SD_ReadyWait+0x30>)
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f4      	bne.n	800313e <SD_ReadyWait+0xe>

	return res;
 8003154:	79fb      	ldrb	r3, [r7, #7]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20003992 	.word	0x20003992

08003164 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800316a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800316e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8003170:	f7ff ff72 	bl	8003058 <DESELECT>
	for(int i = 0; i < 10; i++)
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	e005      	b.n	8003186 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800317a:	20ff      	movs	r0, #255	; 0xff
 800317c:	f7ff ff7a 	bl	8003074 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	3301      	adds	r3, #1
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b09      	cmp	r3, #9
 800318a:	ddf6      	ble.n	800317a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800318c:	f7ff ff56 	bl	800303c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8003190:	2340      	movs	r3, #64	; 0x40
 8003192:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80031a4:	2395      	movs	r3, #149	; 0x95
 80031a6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80031a8:	463b      	mov	r3, r7
 80031aa:	2106      	movs	r1, #6
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff7b 	bl	80030a8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80031b2:	e002      	b.n	80031ba <SD_PowerOn+0x56>
	{
		cnt--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80031ba:	f7ff ff8f 	bl	80030dc <SPI_RxByte>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d002      	beq.n	80031ca <SD_PowerOn+0x66>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f4      	bne.n	80031b4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80031ca:	f7ff ff45 	bl	8003058 <DESELECT>
	SPI_TxByte(0XFF);
 80031ce:	20ff      	movs	r0, #255	; 0xff
 80031d0:	f7ff ff50 	bl	8003074 <SPI_TxByte>

	PowerFlag = 1;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <SD_PowerOn+0x80>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
}
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20003995 	.word	0x20003995

080031e8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <SD_PowerOff+0x14>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	20003995 	.word	0x20003995

08003200 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
	return PowerFlag;
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <SD_CheckPower+0x14>)
 8003206:	781b      	ldrb	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20003995 	.word	0x20003995

08003218 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <SD_RxDataBlock+0x58>)
 8003224:	22c8      	movs	r2, #200	; 0xc8
 8003226:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8003228:	f7ff ff58 	bl	80030dc <SPI_RxByte>
 800322c:	4603      	mov	r3, r0
 800322e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2bff      	cmp	r3, #255	; 0xff
 8003234:	d103      	bne.n	800323e <SD_RxDataBlock+0x26>
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <SD_RxDataBlock+0x58>)
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f4      	bne.n	8003228 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2bfe      	cmp	r3, #254	; 0xfe
 8003242:	d001      	beq.n	8003248 <SD_RxDataBlock+0x30>
 8003244:	2300      	movs	r3, #0
 8003246:	e00f      	b.n	8003268 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff60 	bl	8003114 <SPI_RxBytePtr>
	} while(len--);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	1e5a      	subs	r2, r3, #1
 8003258:	603a      	str	r2, [r7, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f4      	bne.n	8003248 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800325e:	f7ff ff3d 	bl	80030dc <SPI_RxByte>
	SPI_RxByte();
 8003262:	f7ff ff3b 	bl	80030dc <SPI_RxByte>

	return TRUE;
 8003266:	2301      	movs	r3, #1
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20003990 	.word	0x20003990

08003274 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003284:	f7ff ff54 	bl	8003130 <SD_ReadyWait>
 8003288:	4603      	mov	r3, r0
 800328a:	2bff      	cmp	r3, #255	; 0xff
 800328c:	d001      	beq.n	8003292 <SD_TxDataBlock+0x1e>
 800328e:	2300      	movs	r3, #0
 8003290:	e02f      	b.n	80032f2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff feed 	bl	8003074 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	2bfd      	cmp	r3, #253	; 0xfd
 800329e:	d020      	beq.n	80032e2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80032a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff feff 	bl	80030a8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80032aa:	f7ff ff17 	bl	80030dc <SPI_RxByte>
		SPI_RxByte();
 80032ae:	f7ff ff15 	bl	80030dc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80032b2:	e00b      	b.n	80032cc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80032b4:	f7ff ff12 	bl	80030dc <SPI_RxByte>
 80032b8:	4603      	mov	r3, r0
 80032ba:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d006      	beq.n	80032d4 <SD_TxDataBlock+0x60>
			i++;
 80032c6:	7bbb      	ldrb	r3, [r7, #14]
 80032c8:	3301      	adds	r3, #1
 80032ca:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80032cc:	7bbb      	ldrb	r3, [r7, #14]
 80032ce:	2b40      	cmp	r3, #64	; 0x40
 80032d0:	d9f0      	bls.n	80032b4 <SD_TxDataBlock+0x40>
 80032d2:	e000      	b.n	80032d6 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80032d4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80032d6:	bf00      	nop
 80032d8:	f7ff ff00 	bl	80030dc <SPI_RxByte>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0fa      	beq.n	80032d8 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d101      	bne.n	80032f0 <SD_TxDataBlock+0x7c>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	6039      	str	r1, [r7, #0]
 8003304:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003306:	f7ff ff13 	bl	8003130 <SD_ReadyWait>
 800330a:	4603      	mov	r3, r0
 800330c:	2bff      	cmp	r3, #255	; 0xff
 800330e:	d001      	beq.n	8003314 <SD_SendCmd+0x1a>
 8003310:	23ff      	movs	r3, #255	; 0xff
 8003312:	e042      	b.n	800339a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff feac 	bl	8003074 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	0e1b      	lsrs	r3, r3, #24
 8003320:	b2db      	uxtb	r3, r3
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fea6 	bl	8003074 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	0c1b      	lsrs	r3, r3, #16
 800332c:	b2db      	uxtb	r3, r3
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fea0 	bl	8003074 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	b2db      	uxtb	r3, r3
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fe9a 	bl	8003074 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fe95 	bl	8003074 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d102      	bne.n	8003356 <SD_SendCmd+0x5c>
 8003350:	2395      	movs	r3, #149	; 0x95
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e007      	b.n	8003366 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	2b48      	cmp	r3, #72	; 0x48
 800335a:	d102      	bne.n	8003362 <SD_SendCmd+0x68>
 800335c:	2387      	movs	r3, #135	; 0x87
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	e001      	b.n	8003366 <SD_SendCmd+0x6c>
	else crc = 1;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fe83 	bl	8003074 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	2b4c      	cmp	r3, #76	; 0x4c
 8003372:	d101      	bne.n	8003378 <SD_SendCmd+0x7e>
 8003374:	f7ff feb2 	bl	80030dc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8003378:	230a      	movs	r3, #10
 800337a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800337c:	f7ff feae 	bl	80030dc <SPI_RxByte>
 8003380:	4603      	mov	r3, r0
 8003382:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8003384:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003388:	2b00      	cmp	r3, #0
 800338a:	da05      	bge.n	8003398 <SD_SendCmd+0x9e>
 800338c:	7bbb      	ldrb	r3, [r7, #14]
 800338e:	3b01      	subs	r3, #1
 8003390:	73bb      	strb	r3, [r7, #14]
 8003392:	7bbb      	ldrb	r3, [r7, #14]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f1      	bne.n	800337c <SD_SendCmd+0x82>

	return res;
 8003398:	7b7b      	ldrb	r3, [r7, #13]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <SD_disk_initialize+0x14>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0d1      	b.n	800355c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80033b8:	4b6a      	ldr	r3, [pc, #424]	; (8003564 <SD_disk_initialize+0x1c0>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <SD_disk_initialize+0x2a>
 80033c6:	4b67      	ldr	r3, [pc, #412]	; (8003564 <SD_disk_initialize+0x1c0>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	e0c6      	b.n	800355c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80033ce:	f7ff fec9 	bl	8003164 <SD_PowerOn>

	/* slave select */
	SELECT();
 80033d2:	f7ff fe33 	bl	800303c <SELECT>

	/* check disk type */
	type = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80033da:	2100      	movs	r1, #0
 80033dc:	2040      	movs	r0, #64	; 0x40
 80033de:	f7ff ff8c 	bl	80032fa <SD_SendCmd>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	f040 80a1 	bne.w	800352c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80033ea:	4b5f      	ldr	r3, [pc, #380]	; (8003568 <SD_disk_initialize+0x1c4>)
 80033ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033f0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80033f2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80033f6:	2048      	movs	r0, #72	; 0x48
 80033f8:	f7ff ff7f 	bl	80032fa <SD_SendCmd>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d155      	bne.n	80034ae <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8003402:	2300      	movs	r3, #0
 8003404:	73fb      	strb	r3, [r7, #15]
 8003406:	e00c      	b.n	8003422 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8003408:	7bfc      	ldrb	r4, [r7, #15]
 800340a:	f7ff fe67 	bl	80030dc <SPI_RxByte>
 800340e:	4603      	mov	r3, r0
 8003410:	461a      	mov	r2, r3
 8003412:	f104 0310 	add.w	r3, r4, #16
 8003416:	443b      	add	r3, r7
 8003418:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	3301      	adds	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d9ef      	bls.n	8003408 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003428:	7abb      	ldrb	r3, [r7, #10]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d17e      	bne.n	800352c <SD_disk_initialize+0x188>
 800342e:	7afb      	ldrb	r3, [r7, #11]
 8003430:	2baa      	cmp	r3, #170	; 0xaa
 8003432:	d17b      	bne.n	800352c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003434:	2100      	movs	r1, #0
 8003436:	2077      	movs	r0, #119	; 0x77
 8003438:	f7ff ff5f 	bl	80032fa <SD_SendCmd>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d807      	bhi.n	8003452 <SD_disk_initialize+0xae>
 8003442:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003446:	2069      	movs	r0, #105	; 0x69
 8003448:	f7ff ff57 	bl	80032fa <SD_SendCmd>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d004      	beq.n	800345c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8003452:	4b45      	ldr	r3, [pc, #276]	; (8003568 <SD_disk_initialize+0x1c4>)
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ec      	bne.n	8003434 <SD_disk_initialize+0x90>
 800345a:	e000      	b.n	800345e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800345c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800345e:	4b42      	ldr	r3, [pc, #264]	; (8003568 <SD_disk_initialize+0x1c4>)
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d062      	beq.n	800352c <SD_disk_initialize+0x188>
 8003466:	2100      	movs	r1, #0
 8003468:	207a      	movs	r0, #122	; 0x7a
 800346a:	f7ff ff46 	bl	80032fa <SD_SendCmd>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d15b      	bne.n	800352c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	e00c      	b.n	8003494 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800347a:	7bfc      	ldrb	r4, [r7, #15]
 800347c:	f7ff fe2e 	bl	80030dc <SPI_RxByte>
 8003480:	4603      	mov	r3, r0
 8003482:	461a      	mov	r2, r3
 8003484:	f104 0310 	add.w	r3, r4, #16
 8003488:	443b      	add	r3, r7
 800348a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	3301      	adds	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d9ef      	bls.n	800347a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800349a:	7a3b      	ldrb	r3, [r7, #8]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <SD_disk_initialize+0x104>
 80034a4:	230c      	movs	r3, #12
 80034a6:	e000      	b.n	80034aa <SD_disk_initialize+0x106>
 80034a8:	2304      	movs	r3, #4
 80034aa:	73bb      	strb	r3, [r7, #14]
 80034ac:	e03e      	b.n	800352c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80034ae:	2100      	movs	r1, #0
 80034b0:	2077      	movs	r0, #119	; 0x77
 80034b2:	f7ff ff22 	bl	80032fa <SD_SendCmd>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d808      	bhi.n	80034ce <SD_disk_initialize+0x12a>
 80034bc:	2100      	movs	r1, #0
 80034be:	2069      	movs	r0, #105	; 0x69
 80034c0:	f7ff ff1b 	bl	80032fa <SD_SendCmd>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d801      	bhi.n	80034ce <SD_disk_initialize+0x12a>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e000      	b.n	80034d0 <SD_disk_initialize+0x12c>
 80034ce:	2301      	movs	r3, #1
 80034d0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80034d2:	7bbb      	ldrb	r3, [r7, #14]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d10e      	bne.n	80034f6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80034d8:	2100      	movs	r1, #0
 80034da:	2077      	movs	r0, #119	; 0x77
 80034dc:	f7ff ff0d 	bl	80032fa <SD_SendCmd>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d80e      	bhi.n	8003504 <SD_disk_initialize+0x160>
 80034e6:	2100      	movs	r1, #0
 80034e8:	2069      	movs	r0, #105	; 0x69
 80034ea:	f7ff ff06 	bl	80032fa <SD_SendCmd>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d107      	bne.n	8003504 <SD_disk_initialize+0x160>
 80034f4:	e00c      	b.n	8003510 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80034f6:	2100      	movs	r1, #0
 80034f8:	2041      	movs	r0, #65	; 0x41
 80034fa:	f7ff fefe 	bl	80032fa <SD_SendCmd>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8003504:	4b18      	ldr	r3, [pc, #96]	; (8003568 <SD_disk_initialize+0x1c4>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e2      	bne.n	80034d2 <SD_disk_initialize+0x12e>
 800350c:	e000      	b.n	8003510 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800350e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8003510:	4b15      	ldr	r3, [pc, #84]	; (8003568 <SD_disk_initialize+0x1c4>)
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <SD_disk_initialize+0x184>
 8003518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800351c:	2050      	movs	r0, #80	; 0x50
 800351e:	f7ff feec 	bl	80032fa <SD_SendCmd>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <SD_disk_initialize+0x188>
 8003528:	2300      	movs	r3, #0
 800352a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800352c:	4a0f      	ldr	r2, [pc, #60]	; (800356c <SD_disk_initialize+0x1c8>)
 800352e:	7bbb      	ldrb	r3, [r7, #14]
 8003530:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8003532:	f7ff fd91 	bl	8003058 <DESELECT>
	SPI_RxByte();
 8003536:	f7ff fdd1 	bl	80030dc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800353a:	7bbb      	ldrb	r3, [r7, #14]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <SD_disk_initialize+0x1c0>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	b2da      	uxtb	r2, r3
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <SD_disk_initialize+0x1c0>)
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e001      	b.n	8003556 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8003552:	f7ff fe49 	bl	80031e8 <SD_PowerOff>
	}

	return Stat;
 8003556:	4b03      	ldr	r3, [pc, #12]	; (8003564 <SD_disk_initialize+0x1c0>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b2db      	uxtb	r3, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	bd90      	pop	{r4, r7, pc}
 8003564:	20000004 	.word	0x20000004
 8003568:	20003990 	.word	0x20003990
 800356c:	20003994 	.word	0x20003994

08003570 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <SD_disk_status+0x14>
 8003580:	2301      	movs	r3, #1
 8003582:	e002      	b.n	800358a <SD_disk_status+0x1a>
	return Stat;
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <SD_disk_status+0x28>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000004 	.word	0x20000004

0800359c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4603      	mov	r3, r0
 80035aa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <SD_disk_read+0x1c>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <SD_disk_read+0x20>
 80035b8:	2304      	movs	r3, #4
 80035ba:	e051      	b.n	8003660 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80035bc:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <SD_disk_read+0xcc>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <SD_disk_read+0x32>
 80035ca:	2303      	movs	r3, #3
 80035cc:	e048      	b.n	8003660 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80035ce:	4b27      	ldr	r3, [pc, #156]	; (800366c <SD_disk_read+0xd0>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <SD_disk_read+0x44>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	025b      	lsls	r3, r3, #9
 80035de:	607b      	str	r3, [r7, #4]

	SELECT();
 80035e0:	f7ff fd2c 	bl	800303c <SELECT>

	if (count == 1)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d111      	bne.n	800360e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	2051      	movs	r0, #81	; 0x51
 80035ee:	f7ff fe84 	bl	80032fa <SD_SendCmd>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d129      	bne.n	800364c <SD_disk_read+0xb0>
 80035f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035fc:	68b8      	ldr	r0, [r7, #8]
 80035fe:	f7ff fe0b 	bl	8003218 <SD_RxDataBlock>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d021      	beq.n	800364c <SD_disk_read+0xb0>
 8003608:	2300      	movs	r3, #0
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	e01e      	b.n	800364c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	2052      	movs	r0, #82	; 0x52
 8003612:	f7ff fe72 	bl	80032fa <SD_SendCmd>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d117      	bne.n	800364c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800361c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003620:	68b8      	ldr	r0, [r7, #8]
 8003622:	f7ff fdf9 	bl	8003218 <SD_RxDataBlock>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <SD_disk_read+0xa6>
				buff += 512;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003632:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	3b01      	subs	r3, #1
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ed      	bne.n	800361c <SD_disk_read+0x80>
 8003640:	e000      	b.n	8003644 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8003642:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8003644:	2100      	movs	r1, #0
 8003646:	204c      	movs	r0, #76	; 0x4c
 8003648:	f7ff fe57 	bl	80032fa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800364c:	f7ff fd04 	bl	8003058 <DESELECT>
	SPI_RxByte();
 8003650:	f7ff fd44 	bl	80030dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf14      	ite	ne
 800365a:	2301      	movne	r3, #1
 800365c:	2300      	moveq	r3, #0
 800365e:	b2db      	uxtb	r3, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000004 	.word	0x20000004
 800366c:	20003994 	.word	0x20003994

08003670 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	4603      	mov	r3, r0
 800367e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <SD_disk_write+0x1c>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <SD_disk_write+0x20>
 800368c:	2304      	movs	r3, #4
 800368e:	e06b      	b.n	8003768 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003690:	4b37      	ldr	r3, [pc, #220]	; (8003770 <SD_disk_write+0x100>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <SD_disk_write+0x32>
 800369e:	2303      	movs	r3, #3
 80036a0:	e062      	b.n	8003768 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80036a2:	4b33      	ldr	r3, [pc, #204]	; (8003770 <SD_disk_write+0x100>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <SD_disk_write+0x44>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e059      	b.n	8003768 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80036b4:	4b2f      	ldr	r3, [pc, #188]	; (8003774 <SD_disk_write+0x104>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <SD_disk_write+0x56>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	025b      	lsls	r3, r3, #9
 80036c4:	607b      	str	r3, [r7, #4]

	SELECT();
 80036c6:	f7ff fcb9 	bl	800303c <SELECT>

	if (count == 1)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d110      	bne.n	80036f2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	2058      	movs	r0, #88	; 0x58
 80036d4:	f7ff fe11 	bl	80032fa <SD_SendCmd>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d13a      	bne.n	8003754 <SD_disk_write+0xe4>
 80036de:	21fe      	movs	r1, #254	; 0xfe
 80036e0:	68b8      	ldr	r0, [r7, #8]
 80036e2:	f7ff fdc7 	bl	8003274 <SD_TxDataBlock>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d033      	beq.n	8003754 <SD_disk_write+0xe4>
			count = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	e030      	b.n	8003754 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <SD_disk_write+0x104>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80036fe:	2100      	movs	r1, #0
 8003700:	2077      	movs	r0, #119	; 0x77
 8003702:	f7ff fdfa 	bl	80032fa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	2057      	movs	r0, #87	; 0x57
 800370a:	f7ff fdf6 	bl	80032fa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	2059      	movs	r0, #89	; 0x59
 8003712:	f7ff fdf2 	bl	80032fa <SD_SendCmd>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d11b      	bne.n	8003754 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800371c:	21fc      	movs	r1, #252	; 0xfc
 800371e:	68b8      	ldr	r0, [r7, #8]
 8003720:	f7ff fda8 	bl	8003274 <SD_TxDataBlock>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <SD_disk_write+0xd0>
				buff += 512;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003730:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	3b01      	subs	r3, #1
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1ee      	bne.n	800371c <SD_disk_write+0xac>
 800373e:	e000      	b.n	8003742 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003740:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8003742:	21fd      	movs	r1, #253	; 0xfd
 8003744:	2000      	movs	r0, #0
 8003746:	f7ff fd95 	bl	8003274 <SD_TxDataBlock>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <SD_disk_write+0xe4>
			{
				count = 1;
 8003750:	2301      	movs	r3, #1
 8003752:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8003754:	f7ff fc80 	bl	8003058 <DESELECT>
	SPI_RxByte();
 8003758:	f7ff fcc0 	bl	80030dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20000004 	.word	0x20000004
 8003774:	20003994 	.word	0x20003994

08003778 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b08b      	sub	sp, #44	; 0x2c
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	603a      	str	r2, [r7, #0]
 8003782:	71fb      	strb	r3, [r7, #7]
 8003784:	460b      	mov	r3, r1
 8003786:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <SD_disk_ioctl+0x1e>
 8003792:	2304      	movs	r3, #4
 8003794:	e115      	b.n	80039c2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 800379c:	79bb      	ldrb	r3, [r7, #6]
 800379e:	2b05      	cmp	r3, #5
 80037a0:	d124      	bne.n	80037ec <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d012      	beq.n	80037d0 <SD_disk_ioctl+0x58>
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	dc1a      	bgt.n	80037e4 <SD_disk_ioctl+0x6c>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <SD_disk_ioctl+0x40>
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d006      	beq.n	80037c4 <SD_disk_ioctl+0x4c>
 80037b6:	e015      	b.n	80037e4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80037b8:	f7ff fd16 	bl	80031e8 <SD_PowerOff>
			res = RES_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80037c2:	e0fc      	b.n	80039be <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80037c4:	f7ff fcce 	bl	8003164 <SD_PowerOn>
			res = RES_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80037ce:	e0f6      	b.n	80039be <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	1c5c      	adds	r4, r3, #1
 80037d4:	f7ff fd14 	bl	8003200 <SD_CheckPower>
 80037d8:	4603      	mov	r3, r0
 80037da:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80037dc:	2300      	movs	r3, #0
 80037de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80037e2:	e0ec      	b.n	80039be <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80037e4:	2304      	movs	r3, #4
 80037e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037ea:	e0e8      	b.n	80039be <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80037ec:	4b77      	ldr	r3, [pc, #476]	; (80039cc <SD_disk_ioctl+0x254>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <SD_disk_ioctl+0x86>
 80037fa:	2303      	movs	r3, #3
 80037fc:	e0e1      	b.n	80039c2 <SD_disk_ioctl+0x24a>

		SELECT();
 80037fe:	f7ff fc1d 	bl	800303c <SELECT>

		switch (ctrl)
 8003802:	79bb      	ldrb	r3, [r7, #6]
 8003804:	2b0d      	cmp	r3, #13
 8003806:	f200 80cb 	bhi.w	80039a0 <SD_disk_ioctl+0x228>
 800380a:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <SD_disk_ioctl+0x98>)
 800380c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003810:	0800390b 	.word	0x0800390b
 8003814:	08003849 	.word	0x08003849
 8003818:	080038fb 	.word	0x080038fb
 800381c:	080039a1 	.word	0x080039a1
 8003820:	080039a1 	.word	0x080039a1
 8003824:	080039a1 	.word	0x080039a1
 8003828:	080039a1 	.word	0x080039a1
 800382c:	080039a1 	.word	0x080039a1
 8003830:	080039a1 	.word	0x080039a1
 8003834:	080039a1 	.word	0x080039a1
 8003838:	080039a1 	.word	0x080039a1
 800383c:	0800391d 	.word	0x0800391d
 8003840:	08003941 	.word	0x08003941
 8003844:	08003965 	.word	0x08003965
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003848:	2100      	movs	r1, #0
 800384a:	2049      	movs	r0, #73	; 0x49
 800384c:	f7ff fd55 	bl	80032fa <SD_SendCmd>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 80a8 	bne.w	80039a8 <SD_disk_ioctl+0x230>
 8003858:	f107 030c 	add.w	r3, r7, #12
 800385c:	2110      	movs	r1, #16
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fcda 	bl	8003218 <SD_RxDataBlock>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 809e 	beq.w	80039a8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800386c:	7b3b      	ldrb	r3, [r7, #12]
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10e      	bne.n	8003894 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003876:	7d7b      	ldrb	r3, [r7, #21]
 8003878:	b29a      	uxth	r2, r3
 800387a:	7d3b      	ldrb	r3, [r7, #20]
 800387c:	b29b      	uxth	r3, r3
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	b29b      	uxth	r3, r3
 8003882:	4413      	add	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	3301      	adds	r3, #1
 8003888:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800388a:	8bfb      	ldrh	r3, [r7, #30]
 800388c:	029a      	lsls	r2, r3, #10
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e02e      	b.n	80038f2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003894:	7c7b      	ldrb	r3, [r7, #17]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	b2da      	uxtb	r2, r3
 800389c:	7dbb      	ldrb	r3, [r7, #22]
 800389e:	09db      	lsrs	r3, r3, #7
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	7d7b      	ldrb	r3, [r7, #21]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f003 0306 	and.w	r3, r3, #6
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	3302      	adds	r3, #2
 80038b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80038bc:	7d3b      	ldrb	r3, [r7, #20]
 80038be:	099b      	lsrs	r3, r3, #6
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	7cbb      	ldrb	r3, [r7, #18]
 80038d2:	029b      	lsls	r3, r3, #10
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038da:	b29b      	uxth	r3, r3
 80038dc:	4413      	add	r3, r2
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3301      	adds	r3, #1
 80038e2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80038e4:	8bfa      	ldrh	r2, [r7, #30]
 80038e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80038ea:	3b09      	subs	r3, #9
 80038ec:	409a      	lsls	r2, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80038f8:	e056      	b.n	80039a8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003900:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003908:	e055      	b.n	80039b6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800390a:	f7ff fc11 	bl	8003130 <SD_ReadyWait>
 800390e:	4603      	mov	r3, r0
 8003910:	2bff      	cmp	r3, #255	; 0xff
 8003912:	d14b      	bne.n	80039ac <SD_disk_ioctl+0x234>
 8003914:	2300      	movs	r3, #0
 8003916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800391a:	e047      	b.n	80039ac <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800391c:	2100      	movs	r1, #0
 800391e:	2049      	movs	r0, #73	; 0x49
 8003920:	f7ff fceb 	bl	80032fa <SD_SendCmd>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d142      	bne.n	80039b0 <SD_disk_ioctl+0x238>
 800392a:	2110      	movs	r1, #16
 800392c:	6a38      	ldr	r0, [r7, #32]
 800392e:	f7ff fc73 	bl	8003218 <SD_RxDataBlock>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d03b      	beq.n	80039b0 <SD_disk_ioctl+0x238>
 8003938:	2300      	movs	r3, #0
 800393a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800393e:	e037      	b.n	80039b0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003940:	2100      	movs	r1, #0
 8003942:	204a      	movs	r0, #74	; 0x4a
 8003944:	f7ff fcd9 	bl	80032fa <SD_SendCmd>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d132      	bne.n	80039b4 <SD_disk_ioctl+0x23c>
 800394e:	2110      	movs	r1, #16
 8003950:	6a38      	ldr	r0, [r7, #32]
 8003952:	f7ff fc61 	bl	8003218 <SD_RxDataBlock>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d02b      	beq.n	80039b4 <SD_disk_ioctl+0x23c>
 800395c:	2300      	movs	r3, #0
 800395e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8003962:	e027      	b.n	80039b4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8003964:	2100      	movs	r1, #0
 8003966:	207a      	movs	r0, #122	; 0x7a
 8003968:	f7ff fcc7 	bl	80032fa <SD_SendCmd>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d116      	bne.n	80039a0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8003972:	2300      	movs	r3, #0
 8003974:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003978:	e00b      	b.n	8003992 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800397a:	6a3c      	ldr	r4, [r7, #32]
 800397c:	1c63      	adds	r3, r4, #1
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	f7ff fbac 	bl	80030dc <SPI_RxByte>
 8003984:	4603      	mov	r3, r0
 8003986:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800398c:	3301      	adds	r3, #1
 800398e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003996:	2b03      	cmp	r3, #3
 8003998:	d9ef      	bls.n	800397a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80039a0:	2304      	movs	r3, #4
 80039a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039a6:	e006      	b.n	80039b6 <SD_disk_ioctl+0x23e>
			break;
 80039a8:	bf00      	nop
 80039aa:	e004      	b.n	80039b6 <SD_disk_ioctl+0x23e>
			break;
 80039ac:	bf00      	nop
 80039ae:	e002      	b.n	80039b6 <SD_disk_ioctl+0x23e>
			break;
 80039b0:	bf00      	nop
 80039b2:	e000      	b.n	80039b6 <SD_disk_ioctl+0x23e>
			break;
 80039b4:	bf00      	nop
		}

		DESELECT();
 80039b6:	f7ff fb4f 	bl	8003058 <DESELECT>
		SPI_RxByte();
 80039ba:	f7ff fb8f 	bl	80030dc <SPI_RxByte>
	}

	return res;
 80039be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	372c      	adds	r7, #44	; 0x2c
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd90      	pop	{r4, r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000004 	.word	0x20000004

080039d0 <lsm6ds3tr_c_read_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	461a      	mov	r2, r3
 80039dc:	460b      	mov	r3, r1
 80039de:	72fb      	strb	r3, [r7, #11]
 80039e0:	4613      	mov	r3, r2
 80039e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685c      	ldr	r4, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68d8      	ldr	r0, [r3, #12]
 80039ec:	893b      	ldrh	r3, [r7, #8]
 80039ee:	7af9      	ldrb	r1, [r7, #11]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	47a0      	blx	r4
 80039f4:	6178      	str	r0, [r7, #20]

  return ret;
 80039f6:	697b      	ldr	r3, [r7, #20]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd90      	pop	{r4, r7, pc}

08003a00 <lsm6ds3tr_c_write_reg>:
  *
  */
int32_t __weak lsm6ds3tr_c_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	72fb      	strb	r3, [r7, #11]
 8003a10:	4613      	mov	r3, r2
 8003a12:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681c      	ldr	r4, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68d8      	ldr	r0, [r3, #12]
 8003a1c:	893b      	ldrh	r3, [r7, #8]
 8003a1e:	7af9      	ldrb	r1, [r7, #11]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	47a0      	blx	r4
 8003a24:	6178      	str	r0, [r7, #20]

  return ret;
 8003a26:	697b      	ldr	r3, [r7, #20]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd90      	pop	{r4, r7, pc}

08003a30 <lsm6ds3tr_c_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6ds3tr_c_from_fs2g_to_mg(int16_t lsb)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8003a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a46:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003a5c <lsm6ds3tr_c_from_fs2g_to_mg+0x2c>
 8003a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	3d79db23 	.word	0x3d79db23

08003a60 <lsm6ds3tr_c_from_fs500dps_to_mdps>:
{
  return ((float_t)lsb * 8.750f);
}

float_t lsm6ds3tr_c_from_fs500dps_to_mdps(int16_t lsb)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 17.50f);
 8003a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a76:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003a8c <lsm6ds3tr_c_from_fs500dps_to_mdps+0x2c>
 8003a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	418c0000 	.word	0x418c0000

08003a90 <lsm6ds3tr_c_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_xl_t val)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003a9c:	f107 0208 	add.w	r2, r7, #8
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	2110      	movs	r1, #16
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ff93 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003aaa:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10f      	bne.n	8003ad2 <lsm6ds3tr_c_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	7a3b      	ldrb	r3, [r7, #8]
 8003abc:	f362 0383 	bfi	r3, r2, #2, #2
 8003ac0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003ac2:	f107 0208 	add.w	r2, r7, #8
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	2110      	movs	r1, #16
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ff98 	bl	8003a00 <lsm6ds3tr_c_write_reg>
 8003ad0:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <lsm6ds3tr_c_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_xl_t val)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003ae8:	f107 0208 	add.w	r2, r7, #8
 8003aec:	2301      	movs	r3, #1
 8003aee:	2110      	movs	r1, #16
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ff6d 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003af6:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <lsm6ds3tr_c_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	7a3b      	ldrb	r3, [r7, #8]
 8003b08:	f362 1307 	bfi	r3, r2, #4, #4
 8003b0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003b0e:	f107 0208 	add.w	r2, r7, #8
 8003b12:	2301      	movs	r3, #1
 8003b14:	2110      	movs	r1, #16
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ff72 	bl	8003a00 <lsm6ds3tr_c_write_reg>
 8003b1c:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <lsm6ds3tr_c_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_full_scale_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_fs_g_t val)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003b34:	f107 0208 	add.w	r2, r7, #8
 8003b38:	2301      	movs	r3, #1
 8003b3a:	2111      	movs	r1, #17
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ff47 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003b42:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10f      	bne.n	8003b6a <lsm6ds3tr_c_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	7a3b      	ldrb	r3, [r7, #8]
 8003b54:	f362 0343 	bfi	r3, r2, #1, #3
 8003b58:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003b5a:	f107 0208 	add.w	r2, r7, #8
 8003b5e:	2301      	movs	r3, #1
 8003b60:	2111      	movs	r1, #17
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff ff4c 	bl	8003a00 <lsm6ds3tr_c_write_reg>
 8003b68:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <lsm6ds3tr_c_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_data_rate_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_odr_g_t val)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003b80:	f107 0208 	add.w	r2, r7, #8
 8003b84:	2301      	movs	r3, #1
 8003b86:	2111      	movs	r1, #17
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ff21 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003b8e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <lsm6ds3tr_c_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	7a3b      	ldrb	r3, [r7, #8]
 8003ba0:	f362 1307 	bfi	r3, r2, #4, #4
 8003ba4:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL2_G,
 8003ba6:	f107 0208 	add.w	r2, r7, #8
 8003baa:	2301      	movs	r3, #1
 8003bac:	2111      	movs	r1, #17
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ff26 	bl	8003a00 <lsm6ds3tr_c_write_reg>
 8003bb4:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <lsm6ds3tr_c_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_block_data_update_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8003bcc:	f107 0208 	add.w	r2, r7, #8
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	2112      	movs	r1, #18
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fefb 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003bda:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <lsm6ds3tr_c_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	7a3b      	ldrb	r3, [r7, #8]
 8003bec:	f362 1386 	bfi	r3, r2, #6, #1
 8003bf0:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8003bf2:	f107 0208 	add.w	r2, r7, #8
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	2112      	movs	r1, #18
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff ff00 	bl	8003a00 <lsm6ds3tr_c_write_reg>
 8003c00:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8003c02:	68fb      	ldr	r3, [r7, #12]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <lsm6ds3tr_c_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_G, buff, 6);
 8003c16:	f107 020c 	add.w	r2, r7, #12
 8003c1a:	2306      	movs	r3, #6
 8003c1c:	2122      	movs	r1, #34	; 0x22
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fed6 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003c24:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003c26:	7b7b      	ldrb	r3, [r7, #13]
 8003c28:	b21a      	sxth	r2, r3
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	7b3b      	ldrb	r3, [r7, #12]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b21a      	sxth	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	b212      	sxth	r2, r2
 8003c50:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	3302      	adds	r3, #2
 8003c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	7bbb      	ldrb	r3, [r7, #14]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	3302      	adds	r3, #2
 8003c6c:	b212      	sxth	r2, r2
 8003c6e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003c70:	7c7a      	ldrb	r2, [r7, #17]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	3304      	adds	r3, #4
 8003c76:	b212      	sxth	r2, r2
 8003c78:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	7c3b      	ldrb	r3, [r7, #16]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	3304      	adds	r3, #4
 8003c94:	b212      	sxth	r2, r2
 8003c96:	801a      	strh	r2, [r3, #0]

  return ret;
 8003c98:	697b      	ldr	r3, [r7, #20]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <lsm6ds3tr_c_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_acceleration_raw_get(stmdev_ctx_t *ctx,
                                         int16_t *val)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b086      	sub	sp, #24
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_OUTX_L_XL, buff, 6);
 8003cac:	f107 020c 	add.w	r2, r7, #12
 8003cb0:	2306      	movs	r3, #6
 8003cb2:	2128      	movs	r1, #40	; 0x28
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fe8b 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003cba:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003cbc:	7b7b      	ldrb	r3, [r7, #13]
 8003cbe:	b21a      	sxth	r2, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	7b3b      	ldrb	r3, [r7, #12]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	b21a      	sxth	r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	b212      	sxth	r2, r2
 8003ce6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	3302      	adds	r3, #2
 8003cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	7bbb      	ldrb	r3, [r7, #14]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	3302      	adds	r3, #2
 8003d02:	b212      	sxth	r2, r2
 8003d04:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003d06:	7c7a      	ldrb	r2, [r7, #17]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	b212      	sxth	r2, r2
 8003d0e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	3304      	adds	r3, #4
 8003d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	7c3b      	ldrb	r3, [r7, #16]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	b212      	sxth	r2, r2
 8003d2c:	801a      	strh	r2, [r3, #0]

  return ret;
 8003d2e:	697b      	ldr	r3, [r7, #20]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <lsm6ds3tr_c_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_WHO_AM_I, buff, 1);
 8003d42:	2301      	movs	r3, #1
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	210f      	movs	r1, #15
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff fe41 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003d4e:	60f8      	str	r0, [r7, #12]

  return ret;
 8003d50:	68fb      	ldr	r3, [r7, #12]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <lsm6ds3tr_c_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	460b      	mov	r3, r1
 8003d64:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8003d66:	f107 0208 	add.w	r2, r7, #8
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	2112      	movs	r1, #18
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fe2e 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003d74:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10f      	bne.n	8003d9c <lsm6ds3tr_c_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	7a3b      	ldrb	r3, [r7, #8]
 8003d86:	f362 0300 	bfi	r3, r2, #0, #1
 8003d8a:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8003d8c:	f107 0208 	add.w	r2, r7, #8
 8003d90:	2301      	movs	r3, #1
 8003d92:	2112      	movs	r1, #18
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fe33 	bl	8003a00 <lsm6ds3tr_c_write_reg>
 8003d9a:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <lsm6ds3tr_c_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  lsm6ds3tr_c_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL3_C,
 8003db0:	f107 0208 	add.w	r2, r7, #8
 8003db4:	2301      	movs	r3, #1
 8003db6:	2112      	movs	r1, #18
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fe09 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003dbe:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 8003dc0:	7a3b      	ldrb	r3, [r7, #8]
 8003dc2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	701a      	strb	r2, [r3, #0]

  return ret;
 8003dce:	68fb      	ldr	r3, [r7, #12]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <lsm6ds3tr_c_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_bw0_xl_t val)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003de4:	f107 0208 	add.w	r2, r7, #8
 8003de8:	2301      	movs	r3, #1
 8003dea:	2110      	movs	r1, #16
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fdef 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003df2:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10f      	bne.n	8003e1a <lsm6ds3tr_c_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	7a3b      	ldrb	r3, [r7, #8]
 8003e04:	f362 0300 	bfi	r3, r2, #0, #1
 8003e08:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL1_XL,
 8003e0a:	f107 0208 	add.w	r2, r7, #8
 8003e0e:	2301      	movs	r3, #1
 8003e10:	2110      	movs	r1, #16
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff fdf4 	bl	8003a00 <lsm6ds3tr_c_write_reg>
 8003e18:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <lsm6ds3tr_c_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                         lsm6ds3tr_c_input_composite_t val)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 8003e30:	f107 0208 	add.w	r2, r7, #8
 8003e34:	2301      	movs	r3, #1
 8003e36:	2117      	movs	r1, #23
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fdc9 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003e3e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d120      	bne.n	8003e88 <lsm6ds3tr_c_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8003e46:	78fb      	ldrb	r3, [r7, #3]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	7a3b      	ldrb	r3, [r7, #8]
 8003e52:	f362 03c3 	bfi	r3, r2, #3, #1
 8003e56:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	7a3b      	ldrb	r3, [r7, #8]
 8003e62:	f362 1346 	bfi	r3, r2, #5, #2
 8003e66:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8003e68:	7a3b      	ldrb	r3, [r7, #8]
 8003e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6e:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8003e70:	7a3b      	ldrb	r3, [r7, #8]
 8003e72:	f36f 0382 	bfc	r3, #2, #1
 8003e76:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL8_XL,
 8003e78:	f107 0208 	add.w	r2, r7, #8
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	2117      	movs	r1, #23
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fdbd 	bl	8003a00 <lsm6ds3tr_c_write_reg>
 8003e86:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8003e88:	68fb      	ldr	r3, [r7, #12]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <lsm6ds3tr_c_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_gy_band_pass_set(stmdev_ctx_t *ctx,
                                     lsm6ds3tr_c_lpf1_sel_g_t val)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b086      	sub	sp, #24
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  lsm6ds3tr_c_ctrl6_c_t ctrl6_c;
  lsm6ds3tr_c_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 8003e9e:	f107 0208 	add.w	r2, r7, #8
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	2116      	movs	r1, #22
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff fd92 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003eac:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl7_g, 1);

  if (ret == 0)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d157      	bne.n	8003f64 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	7a3b      	ldrb	r3, [r7, #8]
 8003ec0:	f362 1305 	bfi	r3, r2, #4, #2
 8003ec4:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	09db      	lsrs	r3, r3, #7
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	7a3b      	ldrb	r3, [r7, #8]
 8003ed4:	f362 1386 	bfi	r3, r2, #6, #1
 8003ed8:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL7_G,
 8003eda:	f107 0208 	add.w	r2, r7, #8
 8003ede:	2301      	movs	r3, #1
 8003ee0:	2116      	movs	r1, #22
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fd8c 	bl	8003a00 <lsm6ds3tr_c_write_reg>
 8003ee8:	6178      	str	r0, [r7, #20]
                                (uint8_t *)&ctrl7_g, 1);

    if (ret == 0)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d139      	bne.n	8003f64 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
    {
      ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 8003ef0:	f107 020c 	add.w	r2, r7, #12
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	2115      	movs	r1, #21
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fd69 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003efe:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl6_c, 1);

      if (ret == 0)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d12e      	bne.n	8003f64 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	7b3b      	ldrb	r3, [r7, #12]
 8003f10:	f362 0301 	bfi	r3, r2, #0, #2
 8003f14:	733b      	strb	r3, [r7, #12]
        ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL6_C,
 8003f16:	f107 020c 	add.w	r2, r7, #12
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	2115      	movs	r1, #21
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff fd6e 	bl	8003a00 <lsm6ds3tr_c_write_reg>
 8003f24:	6178      	str	r0, [r7, #20]
                                    (uint8_t *)&ctrl6_c, 1);

        if (ret == 0)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d11b      	bne.n	8003f64 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
        {
          ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8003f2c:	f107 0210 	add.w	r2, r7, #16
 8003f30:	2301      	movs	r3, #1
 8003f32:	2113      	movs	r1, #19
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff fd4b 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003f3a:	6178      	str	r0, [r7, #20]
                                     (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d110      	bne.n	8003f64 <lsm6ds3tr_c_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8003f42:	78fb      	ldrb	r3, [r7, #3]
 8003f44:	08db      	lsrs	r3, r3, #3
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	7c3b      	ldrb	r3, [r7, #16]
 8003f4e:	f362 0341 	bfi	r3, r2, #1, #1
 8003f52:	743b      	strb	r3, [r7, #16]
            ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8003f54:	f107 0210 	add.w	r2, r7, #16
 8003f58:	2301      	movs	r3, #1
 8003f5a:	2113      	movs	r1, #19
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff fd4f 	bl	8003a00 <lsm6ds3tr_c_write_reg>
 8003f62:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8003f64:	697b      	ldr	r3, [r7, #20]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <lsm6ds3tr_c_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6ds3tr_c_i2c_interface_set(stmdev_ctx_t *ctx,
                                      lsm6ds3tr_c_i2c_disable_t val)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	460b      	mov	r3, r1
 8003f78:	70fb      	strb	r3, [r7, #3]
  lsm6ds3tr_c_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6ds3tr_c_read_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8003f7a:	f107 0208 	add.w	r2, r7, #8
 8003f7e:	2301      	movs	r3, #1
 8003f80:	2113      	movs	r1, #19
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff fd24 	bl	80039d0 <lsm6ds3tr_c_read_reg>
 8003f88:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl4_c, 1);

  if (ret == 0)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10f      	bne.n	8003fb0 <lsm6ds3tr_c_i2c_interface_set+0x42>
  {
    ctrl4_c.i2c_disable = (uint8_t)val;
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	7a3b      	ldrb	r3, [r7, #8]
 8003f9a:	f362 0382 	bfi	r3, r2, #2, #1
 8003f9e:	723b      	strb	r3, [r7, #8]
    ret = lsm6ds3tr_c_write_reg(ctx, LSM6DS3TR_C_CTRL4_C,
 8003fa0:	f107 0208 	add.w	r2, r7, #8
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	2113      	movs	r1, #19
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff fd29 	bl	8003a00 <lsm6ds3tr_c_write_reg>
 8003fae:	60f8      	str	r0, [r7, #12]
                                (uint8_t *)&ctrl4_c, 1);
  }

  return ret;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fc2:	f001 f9c1 	bl	8005348 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fc6:	f000 f881 	bl	80040cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fca:	f000 fbe1 	bl	8004790 <MX_GPIO_Init>
  MX_ADC3_Init();
 8003fce:	f000 f8eb 	bl	80041a8 <MX_ADC3_Init>
  MX_I2C1_Init();
 8003fd2:	f000 f94f 	bl	8004274 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003fd6:	f000 f97b 	bl	80042d0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8003fda:	f000 f9cd 	bl	8004378 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003fde:	f000 fb27 	bl	8004630 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003fe2:	f000 fb4f 	bl	8004684 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003fe6:	f000 fb77 	bl	80046d8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8003fea:	f000 fb9f 	bl	800472c <MX_USART6_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8003fee:	f000 fbc7 	bl	8004780 <MX_USB_OTG_FS_USB_Init>
  MX_TIM2_Init();
 8003ff2:	f000 f9f7 	bl	80043e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003ff6:	f000 fa41 	bl	800447c <MX_TIM3_Init>
  MX_TIM5_Init();
 8003ffa:	f000 facb 	bl	8004594 <MX_TIM5_Init>
  MX_FATFS_Init();
 8003ffe:	f006 f839 	bl	800a074 <MX_FATFS_Init>
  MX_RTC_Init();
 8004002:	f000 f993 	bl	800432c <MX_RTC_Init>
  MX_CRC_Init();
 8004006:	f000 f921 	bl	800424c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin, GPIO_PIN_SET); // LED_ON Pin enabled
 800400a:	2201      	movs	r2, #1
 800400c:	2101      	movs	r1, #1
 800400e:	4821      	ldr	r0, [pc, #132]	; (8004094 <main+0xd8>)
 8004010:	f001 ff5c 	bl	8005ecc <HAL_GPIO_WritePin>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004014:	f008 fdc2 	bl	800cb9c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of menuSemaphore */
  menuSemaphoreHandle = osSemaphoreNew(1, 1, &menuSemaphore_attributes);
 8004018:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <main+0xdc>)
 800401a:	2101      	movs	r1, #1
 800401c:	2001      	movs	r0, #1
 800401e:	f008 ffa3 	bl	800cf68 <osSemaphoreNew>
 8004022:	4603      	mov	r3, r0
 8004024:	4a1d      	ldr	r2, [pc, #116]	; (800409c <main+0xe0>)
 8004026:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartCommand */
  StartCommandHandle = osThreadNew(StartCommandWaitTask, NULL, &StartCommand_attributes);
 8004028:	4a1d      	ldr	r2, [pc, #116]	; (80040a0 <main+0xe4>)
 800402a:	2100      	movs	r1, #0
 800402c:	481d      	ldr	r0, [pc, #116]	; (80040a4 <main+0xe8>)
 800402e:	f008 fdff 	bl	800cc30 <osThreadNew>
 8004032:	4603      	mov	r3, r0
 8004034:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <main+0xec>)
 8004036:	6013      	str	r3, [r2, #0]

  /* creation of Menu */
  MenuHandle = osThreadNew(MenuTask, NULL, &Menu_attributes);
 8004038:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <main+0xf0>)
 800403a:	2100      	movs	r1, #0
 800403c:	481c      	ldr	r0, [pc, #112]	; (80040b0 <main+0xf4>)
 800403e:	f008 fdf7 	bl	800cc30 <osThreadNew>
 8004042:	4603      	mov	r3, r0
 8004044:	4a1b      	ldr	r2, [pc, #108]	; (80040b4 <main+0xf8>)
 8004046:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of startCommandEvent */
  startCommandEventHandle = osEventFlagsNew(&startCommandEvent_attributes);
 8004048:	481b      	ldr	r0, [pc, #108]	; (80040b8 <main+0xfc>)
 800404a:	f008 fea4 	bl	800cd96 <osEventFlagsNew>
 800404e:	4603      	mov	r3, r0
 8004050:	4a1a      	ldr	r2, [pc, #104]	; (80040bc <main+0x100>)
 8004052:	6013      	str	r3, [r2, #0]

  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8004054:	f008 fdc6 	bl	800cbe4 <osKernelStart>
	  // Usage : screen /dev/tty.usbserial-1120 (OR tty.usbserial-1130)  115200
	  //MENU SECTOR ------------------------------------------------------------------------


	  char userInput;
	  UART_Transmit_String("\r\nChoice: ");
 8004058:	4819      	ldr	r0, [pc, #100]	; (80040c0 <main+0x104>)
 800405a:	f7fd fb3f 	bl	80016dc <UART_Transmit_String>
	         HAL_UART_Receive(&huart1, (uint8_t *)&userInput, sizeof(userInput), HAL_MAX_DELAY);
 800405e:	1df9      	adds	r1, r7, #7
 8004060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004064:	2201      	movs	r2, #1
 8004066:	4817      	ldr	r0, [pc, #92]	; (80040c4 <main+0x108>)
 8004068:	f005 fc7f 	bl	800996a <HAL_UART_Receive>

	         switch (userInput)
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	2b0a      	cmp	r3, #10
 8004070:	d002      	beq.n	8004078 <main+0xbc>
 8004072:	2b0d      	cmp	r3, #13
 8004074:	d104      	bne.n	8004080 <main+0xc4>
	         {
	         case '\r': // Ignore carriage return characters
	             break;
 8004076:	e008      	b.n	800408a <main+0xce>
	         case '\n': // Process command on new line (Enter pressed)
	             UART_Transmit_String("\r\n"); // Move to a new line after the command
 8004078:	4813      	ldr	r0, [pc, #76]	; (80040c8 <main+0x10c>)
 800407a:	f7fd fb2f 	bl	80016dc <UART_Transmit_String>
	             break;
 800407e:	e004      	b.n	800408a <main+0xce>
	         default:
	             menu(userInput);
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fd feec 	bl	8001e60 <menu>
	             break;
 8004088:	bf00      	nop
	         }

	         HAL_Delay(100);
 800408a:	2064      	movs	r0, #100	; 0x64
 800408c:	f001 f9ce 	bl	800542c <HAL_Delay>
  {
 8004090:	e7e2      	b.n	8004058 <main+0x9c>
 8004092:	bf00      	nop
 8004094:	40020400 	.word	0x40020400
 8004098:	0801ed5c 	.word	0x0801ed5c
 800409c:	20003cf8 	.word	0x20003cf8
 80040a0:	0801ed14 	.word	0x0801ed14
 80040a4:	08004975 	.word	0x08004975
 80040a8:	20003cf0 	.word	0x20003cf0
 80040ac:	0801ed38 	.word	0x0801ed38
 80040b0:	080049ad 	.word	0x080049ad
 80040b4:	20003cf4 	.word	0x20003cf4
 80040b8:	0801ed6c 	.word	0x0801ed6c
 80040bc:	20003cfc 	.word	0x20003cfc
 80040c0:	0801ebc8 	.word	0x0801ebc8
 80040c4:	20003be0 	.word	0x20003be0
 80040c8:	0801ebd4 	.word	0x0801ebd4

080040cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b094      	sub	sp, #80	; 0x50
 80040d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040d2:	f107 0320 	add.w	r3, r7, #32
 80040d6:	2230      	movs	r2, #48	; 0x30
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f015 f898 	bl	8019210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040f0:	2300      	movs	r3, #0
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	4b2a      	ldr	r3, [pc, #168]	; (80041a0 <SystemClock_Config+0xd4>)
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	4a29      	ldr	r2, [pc, #164]	; (80041a0 <SystemClock_Config+0xd4>)
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004100:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <SystemClock_Config+0xd4>)
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800410c:	2300      	movs	r3, #0
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <SystemClock_Config+0xd8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a23      	ldr	r2, [pc, #140]	; (80041a4 <SystemClock_Config+0xd8>)
 8004116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4b21      	ldr	r3, [pc, #132]	; (80041a4 <SystemClock_Config+0xd8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8004128:	230b      	movs	r3, #11
 800412a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800412c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004132:	2301      	movs	r3, #1
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004136:	2310      	movs	r3, #16
 8004138:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800413a:	2301      	movs	r3, #1
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800413e:	2302      	movs	r3, #2
 8004140:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8004148:	230f      	movs	r3, #15
 800414a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800414c:	2390      	movs	r3, #144	; 0x90
 800414e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004150:	2302      	movs	r3, #2
 8004152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8004154:	2305      	movs	r3, #5
 8004156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004158:	f107 0320 	add.w	r3, r7, #32
 800415c:	4618      	mov	r0, r3
 800415e:	f003 fb27 	bl	80077b0 <HAL_RCC_OscConfig>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8004168:	f000 fc40 	bl	80049ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800416c:	230f      	movs	r3, #15
 800416e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004178:	2300      	movs	r3, #0
 800417a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800417c:	2300      	movs	r3, #0
 800417e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004180:	f107 030c 	add.w	r3, r7, #12
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f003 fd8a 	bl	8007ca0 <HAL_RCC_ClockConfig>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8004192:	f000 fc2b 	bl	80049ec <Error_Handler>
  }
}
 8004196:	bf00      	nop
 8004198:	3750      	adds	r7, #80	; 0x50
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40007000 	.word	0x40007000

080041a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80041ae:	463b      	mov	r3, r7
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80041ba:	4b21      	ldr	r3, [pc, #132]	; (8004240 <MX_ADC3_Init+0x98>)
 80041bc:	4a21      	ldr	r2, [pc, #132]	; (8004244 <MX_ADC3_Init+0x9c>)
 80041be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80041c0:	4b1f      	ldr	r3, [pc, #124]	; (8004240 <MX_ADC3_Init+0x98>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80041c6:	4b1e      	ldr	r3, [pc, #120]	; (8004240 <MX_ADC3_Init+0x98>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80041cc:	4b1c      	ldr	r3, [pc, #112]	; (8004240 <MX_ADC3_Init+0x98>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80041d2:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <MX_ADC3_Init+0x98>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80041d8:	4b19      	ldr	r3, [pc, #100]	; (8004240 <MX_ADC3_Init+0x98>)
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041e0:	4b17      	ldr	r3, [pc, #92]	; (8004240 <MX_ADC3_Init+0x98>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041e6:	4b16      	ldr	r3, [pc, #88]	; (8004240 <MX_ADC3_Init+0x98>)
 80041e8:	4a17      	ldr	r2, [pc, #92]	; (8004248 <MX_ADC3_Init+0xa0>)
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041ec:	4b14      	ldr	r3, [pc, #80]	; (8004240 <MX_ADC3_Init+0x98>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80041f2:	4b13      	ldr	r3, [pc, #76]	; (8004240 <MX_ADC3_Init+0x98>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80041f8:	4b11      	ldr	r3, [pc, #68]	; (8004240 <MX_ADC3_Init+0x98>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <MX_ADC3_Init+0x98>)
 8004202:	2201      	movs	r2, #1
 8004204:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004206:	480e      	ldr	r0, [pc, #56]	; (8004240 <MX_ADC3_Init+0x98>)
 8004208:	f001 f934 	bl	8005474 <HAL_ADC_Init>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8004212:	f000 fbeb 	bl	80049ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004216:	230c      	movs	r3, #12
 8004218:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800421a:	2301      	movs	r3, #1
 800421c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004222:	463b      	mov	r3, r7
 8004224:	4619      	mov	r1, r3
 8004226:	4806      	ldr	r0, [pc, #24]	; (8004240 <MX_ADC3_Init+0x98>)
 8004228:	f001 f968 	bl	80054fc <HAL_ADC_ConfigChannel>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8004232:	f000 fbdb 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	20003998 	.word	0x20003998
 8004244:	40012200 	.word	0x40012200
 8004248:	0f000001 	.word	0x0f000001

0800424c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <MX_CRC_Init+0x20>)
 8004252:	4a07      	ldr	r2, [pc, #28]	; (8004270 <MX_CRC_Init+0x24>)
 8004254:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004256:	4805      	ldr	r0, [pc, #20]	; (800426c <MX_CRC_Init+0x20>)
 8004258:	f001 fc7f 	bl	8005b5a <HAL_CRC_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8004262:	f000 fbc3 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	200039e0 	.word	0x200039e0
 8004270:	40023000 	.word	0x40023000

08004274 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004278:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <MX_I2C1_Init+0x50>)
 800427a:	4a13      	ldr	r2, [pc, #76]	; (80042c8 <MX_I2C1_Init+0x54>)
 800427c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <MX_I2C1_Init+0x50>)
 8004280:	4a12      	ldr	r2, [pc, #72]	; (80042cc <MX_I2C1_Init+0x58>)
 8004282:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <MX_I2C1_Init+0x50>)
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800428a:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <MX_I2C1_Init+0x50>)
 800428c:	2200      	movs	r2, #0
 800428e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <MX_I2C1_Init+0x50>)
 8004292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004296:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <MX_I2C1_Init+0x50>)
 800429a:	2200      	movs	r2, #0
 800429c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <MX_I2C1_Init+0x50>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042a4:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <MX_I2C1_Init+0x50>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <MX_I2C1_Init+0x50>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042b0:	4804      	ldr	r0, [pc, #16]	; (80042c4 <MX_I2C1_Init+0x50>)
 80042b2:	f001 fe49 	bl	8005f48 <HAL_I2C_Init>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80042bc:	f000 fb96 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80042c0:	bf00      	nop
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	200039e8 	.word	0x200039e8
 80042c8:	40005400 	.word	0x40005400
 80042cc:	000186a0 	.word	0x000186a0

080042d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80042d4:	4b12      	ldr	r3, [pc, #72]	; (8004320 <MX_I2C2_Init+0x50>)
 80042d6:	4a13      	ldr	r2, [pc, #76]	; (8004324 <MX_I2C2_Init+0x54>)
 80042d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80042da:	4b11      	ldr	r3, [pc, #68]	; (8004320 <MX_I2C2_Init+0x50>)
 80042dc:	4a12      	ldr	r2, [pc, #72]	; (8004328 <MX_I2C2_Init+0x58>)
 80042de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042e0:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <MX_I2C2_Init+0x50>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80042e6:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <MX_I2C2_Init+0x50>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <MX_I2C2_Init+0x50>)
 80042ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042f4:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <MX_I2C2_Init+0x50>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <MX_I2C2_Init+0x50>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <MX_I2C2_Init+0x50>)
 8004302:	2200      	movs	r2, #0
 8004304:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <MX_I2C2_Init+0x50>)
 8004308:	2200      	movs	r2, #0
 800430a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800430c:	4804      	ldr	r0, [pc, #16]	; (8004320 <MX_I2C2_Init+0x50>)
 800430e:	f001 fe1b 	bl	8005f48 <HAL_I2C_Init>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004318:	f000 fb68 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800431c:	bf00      	nop
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20003a3c 	.word	0x20003a3c
 8004324:	40005800 	.word	0x40005800
 8004328:	000186a0 	.word	0x000186a0

0800432c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004330:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <MX_RTC_Init+0x44>)
 8004332:	4a10      	ldr	r2, [pc, #64]	; (8004374 <MX_RTC_Init+0x48>)
 8004334:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004336:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <MX_RTC_Init+0x44>)
 8004338:	2200      	movs	r2, #0
 800433a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <MX_RTC_Init+0x44>)
 800433e:	227f      	movs	r2, #127	; 0x7f
 8004340:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004342:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <MX_RTC_Init+0x44>)
 8004344:	22ff      	movs	r2, #255	; 0xff
 8004346:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <MX_RTC_Init+0x44>)
 800434a:	2200      	movs	r2, #0
 800434c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <MX_RTC_Init+0x44>)
 8004350:	2200      	movs	r2, #0
 8004352:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <MX_RTC_Init+0x44>)
 8004356:	2200      	movs	r2, #0
 8004358:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800435a:	4805      	ldr	r0, [pc, #20]	; (8004370 <MX_RTC_Init+0x44>)
 800435c:	f003 ff62 	bl	8008224 <HAL_RTC_Init>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8004366:	f000 fb41 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20003a90 	.word	0x20003a90
 8004374:	40002800 	.word	0x40002800

08004378 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800437c:	4b17      	ldr	r3, [pc, #92]	; (80043dc <MX_SPI1_Init+0x64>)
 800437e:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <MX_SPI1_Init+0x68>)
 8004380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004382:	4b16      	ldr	r3, [pc, #88]	; (80043dc <MX_SPI1_Init+0x64>)
 8004384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004388:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800438a:	4b14      	ldr	r3, [pc, #80]	; (80043dc <MX_SPI1_Init+0x64>)
 800438c:	2200      	movs	r2, #0
 800438e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004390:	4b12      	ldr	r3, [pc, #72]	; (80043dc <MX_SPI1_Init+0x64>)
 8004392:	2200      	movs	r2, #0
 8004394:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004396:	4b11      	ldr	r3, [pc, #68]	; (80043dc <MX_SPI1_Init+0x64>)
 8004398:	2200      	movs	r2, #0
 800439a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800439c:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <MX_SPI1_Init+0x64>)
 800439e:	2200      	movs	r2, #0
 80043a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043a2:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <MX_SPI1_Init+0x64>)
 80043a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80043aa:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <MX_SPI1_Init+0x64>)
 80043ac:	2230      	movs	r2, #48	; 0x30
 80043ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <MX_SPI1_Init+0x64>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <MX_SPI1_Init+0x64>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043bc:	4b07      	ldr	r3, [pc, #28]	; (80043dc <MX_SPI1_Init+0x64>)
 80043be:	2200      	movs	r2, #0
 80043c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <MX_SPI1_Init+0x64>)
 80043c4:	220a      	movs	r2, #10
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043c8:	4804      	ldr	r0, [pc, #16]	; (80043dc <MX_SPI1_Init+0x64>)
 80043ca:	f004 f825 	bl	8008418 <HAL_SPI_Init>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80043d4:	f000 fb0a 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043d8:	bf00      	nop
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20003ab0 	.word	0x20003ab0
 80043e0:	40013000 	.word	0x40013000

080043e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	609a      	str	r2, [r3, #8]
 80043f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043f8:	463b      	mov	r3, r7
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004400:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <MX_TIM2_Init+0x94>)
 8004402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <MX_TIM2_Init+0x94>)
 800440a:	2200      	movs	r2, #0
 800440c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800440e:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <MX_TIM2_Init+0x94>)
 8004410:	2200      	movs	r2, #0
 8004412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004414:	4b18      	ldr	r3, [pc, #96]	; (8004478 <MX_TIM2_Init+0x94>)
 8004416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800441a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800441c:	4b16      	ldr	r3, [pc, #88]	; (8004478 <MX_TIM2_Init+0x94>)
 800441e:	2200      	movs	r2, #0
 8004420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004422:	4b15      	ldr	r3, [pc, #84]	; (8004478 <MX_TIM2_Init+0x94>)
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004428:	4813      	ldr	r0, [pc, #76]	; (8004478 <MX_TIM2_Init+0x94>)
 800442a:	f004 fc27 	bl	8008c7c <HAL_TIM_Base_Init>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004434:	f000 fada 	bl	80049ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800443c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800443e:	f107 0308 	add.w	r3, r7, #8
 8004442:	4619      	mov	r1, r3
 8004444:	480c      	ldr	r0, [pc, #48]	; (8004478 <MX_TIM2_Init+0x94>)
 8004446:	f004 fd83 	bl	8008f50 <HAL_TIM_ConfigClockSource>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004450:	f000 facc 	bl	80049ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004454:	2300      	movs	r3, #0
 8004456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004458:	2300      	movs	r3, #0
 800445a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800445c:	463b      	mov	r3, r7
 800445e:	4619      	mov	r1, r3
 8004460:	4805      	ldr	r0, [pc, #20]	; (8004478 <MX_TIM2_Init+0x94>)
 8004462:	f005 f927 	bl	80096b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800446c:	f000 fabe 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004470:	bf00      	nop
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20003b08 	.word	0x20003b08

0800447c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08e      	sub	sp, #56	; 0x38
 8004480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	609a      	str	r2, [r3, #8]
 800448e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004490:	f107 0320 	add.w	r3, r7, #32
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800449a:	1d3b      	adds	r3, r7, #4
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	611a      	str	r2, [r3, #16]
 80044a8:	615a      	str	r2, [r3, #20]
 80044aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044ac:	4b37      	ldr	r3, [pc, #220]	; (800458c <MX_TIM3_Init+0x110>)
 80044ae:	4a38      	ldr	r2, [pc, #224]	; (8004590 <MX_TIM3_Init+0x114>)
 80044b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80044b2:	4b36      	ldr	r3, [pc, #216]	; (800458c <MX_TIM3_Init+0x110>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044b8:	4b34      	ldr	r3, [pc, #208]	; (800458c <MX_TIM3_Init+0x110>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80044be:	4b33      	ldr	r3, [pc, #204]	; (800458c <MX_TIM3_Init+0x110>)
 80044c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044c6:	4b31      	ldr	r3, [pc, #196]	; (800458c <MX_TIM3_Init+0x110>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044cc:	4b2f      	ldr	r3, [pc, #188]	; (800458c <MX_TIM3_Init+0x110>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80044d2:	482e      	ldr	r0, [pc, #184]	; (800458c <MX_TIM3_Init+0x110>)
 80044d4:	f004 fbd2 	bl	8008c7c <HAL_TIM_Base_Init>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80044de:	f000 fa85 	bl	80049ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80044e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ec:	4619      	mov	r1, r3
 80044ee:	4827      	ldr	r0, [pc, #156]	; (800458c <MX_TIM3_Init+0x110>)
 80044f0:	f004 fd2e 	bl	8008f50 <HAL_TIM_ConfigClockSource>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80044fa:	f000 fa77 	bl	80049ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80044fe:	4823      	ldr	r0, [pc, #140]	; (800458c <MX_TIM3_Init+0x110>)
 8004500:	f004 fc0b 	bl	8008d1a <HAL_TIM_PWM_Init>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800450a:	f000 fa6f 	bl	80049ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004516:	f107 0320 	add.w	r3, r7, #32
 800451a:	4619      	mov	r1, r3
 800451c:	481b      	ldr	r0, [pc, #108]	; (800458c <MX_TIM3_Init+0x110>)
 800451e:	f005 f8c9 	bl	80096b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004528:	f000 fa60 	bl	80049ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800452c:	2360      	movs	r3, #96	; 0x60
 800452e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800453c:	1d3b      	adds	r3, r7, #4
 800453e:	2204      	movs	r2, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4812      	ldr	r0, [pc, #72]	; (800458c <MX_TIM3_Init+0x110>)
 8004544:	f004 fc42 	bl	8008dcc <HAL_TIM_PWM_ConfigChannel>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800454e:	f000 fa4d 	bl	80049ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004552:	1d3b      	adds	r3, r7, #4
 8004554:	2208      	movs	r2, #8
 8004556:	4619      	mov	r1, r3
 8004558:	480c      	ldr	r0, [pc, #48]	; (800458c <MX_TIM3_Init+0x110>)
 800455a:	f004 fc37 	bl	8008dcc <HAL_TIM_PWM_ConfigChannel>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004564:	f000 fa42 	bl	80049ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004568:	1d3b      	adds	r3, r7, #4
 800456a:	220c      	movs	r2, #12
 800456c:	4619      	mov	r1, r3
 800456e:	4807      	ldr	r0, [pc, #28]	; (800458c <MX_TIM3_Init+0x110>)
 8004570:	f004 fc2c 	bl	8008dcc <HAL_TIM_PWM_ConfigChannel>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800457a:	f000 fa37 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800457e:	4803      	ldr	r0, [pc, #12]	; (800458c <MX_TIM3_Init+0x110>)
 8004580:	f000 fc08 	bl	8004d94 <HAL_TIM_MspPostInit>

}
 8004584:	bf00      	nop
 8004586:	3738      	adds	r7, #56	; 0x38
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20003b50 	.word	0x20003b50
 8004590:	40000400 	.word	0x40000400

08004594 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800459a:	f107 0308 	add.w	r3, r7, #8
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	605a      	str	r2, [r3, #4]
 80045a4:	609a      	str	r2, [r3, #8]
 80045a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045a8:	463b      	mov	r3, r7
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80045b0:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <MX_TIM5_Init+0x94>)
 80045b2:	4a1e      	ldr	r2, [pc, #120]	; (800462c <MX_TIM5_Init+0x98>)
 80045b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80045b6:	4b1c      	ldr	r3, [pc, #112]	; (8004628 <MX_TIM5_Init+0x94>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045bc:	4b1a      	ldr	r3, [pc, #104]	; (8004628 <MX_TIM5_Init+0x94>)
 80045be:	2200      	movs	r2, #0
 80045c0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80045c2:	4b19      	ldr	r3, [pc, #100]	; (8004628 <MX_TIM5_Init+0x94>)
 80045c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045c8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045ca:	4b17      	ldr	r3, [pc, #92]	; (8004628 <MX_TIM5_Init+0x94>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045d0:	4b15      	ldr	r3, [pc, #84]	; (8004628 <MX_TIM5_Init+0x94>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80045d6:	4814      	ldr	r0, [pc, #80]	; (8004628 <MX_TIM5_Init+0x94>)
 80045d8:	f004 fb50 	bl	8008c7c <HAL_TIM_Base_Init>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80045e2:	f000 fa03 	bl	80049ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80045ec:	f107 0308 	add.w	r3, r7, #8
 80045f0:	4619      	mov	r1, r3
 80045f2:	480d      	ldr	r0, [pc, #52]	; (8004628 <MX_TIM5_Init+0x94>)
 80045f4:	f004 fcac 	bl	8008f50 <HAL_TIM_ConfigClockSource>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80045fe:	f000 f9f5 	bl	80049ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004602:	2300      	movs	r3, #0
 8004604:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004606:	2300      	movs	r3, #0
 8004608:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800460a:	463b      	mov	r3, r7
 800460c:	4619      	mov	r1, r3
 800460e:	4806      	ldr	r0, [pc, #24]	; (8004628 <MX_TIM5_Init+0x94>)
 8004610:	f005 f850 	bl	80096b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800461a:	f000 f9e7 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20003b98 	.word	0x20003b98
 800462c:	40000c00 	.word	0x40000c00

08004630 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <MX_USART1_UART_Init+0x4c>)
 8004636:	4a12      	ldr	r2, [pc, #72]	; (8004680 <MX_USART1_UART_Init+0x50>)
 8004638:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <MX_USART1_UART_Init+0x4c>)
 800463c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004640:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004642:	4b0e      	ldr	r3, [pc, #56]	; (800467c <MX_USART1_UART_Init+0x4c>)
 8004644:	2200      	movs	r2, #0
 8004646:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004648:	4b0c      	ldr	r3, [pc, #48]	; (800467c <MX_USART1_UART_Init+0x4c>)
 800464a:	2200      	movs	r2, #0
 800464c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <MX_USART1_UART_Init+0x4c>)
 8004650:	2200      	movs	r2, #0
 8004652:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <MX_USART1_UART_Init+0x4c>)
 8004656:	220c      	movs	r2, #12
 8004658:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <MX_USART1_UART_Init+0x4c>)
 800465c:	2200      	movs	r2, #0
 800465e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <MX_USART1_UART_Init+0x4c>)
 8004662:	2200      	movs	r2, #0
 8004664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004666:	4805      	ldr	r0, [pc, #20]	; (800467c <MX_USART1_UART_Init+0x4c>)
 8004668:	f005 f8a0 	bl	80097ac <HAL_UART_Init>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004672:	f000 f9bb 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20003be0 	.word	0x20003be0
 8004680:	40011000 	.word	0x40011000

08004684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <MX_USART2_UART_Init+0x4c>)
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <MX_USART2_UART_Init+0x50>)
 800468c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800468e:	4b10      	ldr	r3, [pc, #64]	; (80046d0 <MX_USART2_UART_Init+0x4c>)
 8004690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004696:	4b0e      	ldr	r3, [pc, #56]	; (80046d0 <MX_USART2_UART_Init+0x4c>)
 8004698:	2200      	movs	r2, #0
 800469a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800469c:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <MX_USART2_UART_Init+0x4c>)
 800469e:	2200      	movs	r2, #0
 80046a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046a2:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <MX_USART2_UART_Init+0x4c>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <MX_USART2_UART_Init+0x4c>)
 80046aa:	220c      	movs	r2, #12
 80046ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046ae:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <MX_USART2_UART_Init+0x4c>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046b4:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <MX_USART2_UART_Init+0x4c>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046ba:	4805      	ldr	r0, [pc, #20]	; (80046d0 <MX_USART2_UART_Init+0x4c>)
 80046bc:	f005 f876 	bl	80097ac <HAL_UART_Init>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80046c6:	f000 f991 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80046ca:	bf00      	nop
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20003c24 	.word	0x20003c24
 80046d4:	40004400 	.word	0x40004400

080046d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <MX_USART3_UART_Init+0x4c>)
 80046de:	4a12      	ldr	r2, [pc, #72]	; (8004728 <MX_USART3_UART_Init+0x50>)
 80046e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80046e2:	4b10      	ldr	r3, [pc, #64]	; (8004724 <MX_USART3_UART_Init+0x4c>)
 80046e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80046ea:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <MX_USART3_UART_Init+0x4c>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <MX_USART3_UART_Init+0x4c>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <MX_USART3_UART_Init+0x4c>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80046fc:	4b09      	ldr	r3, [pc, #36]	; (8004724 <MX_USART3_UART_Init+0x4c>)
 80046fe:	220c      	movs	r2, #12
 8004700:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004702:	4b08      	ldr	r3, [pc, #32]	; (8004724 <MX_USART3_UART_Init+0x4c>)
 8004704:	2200      	movs	r2, #0
 8004706:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <MX_USART3_UART_Init+0x4c>)
 800470a:	2200      	movs	r2, #0
 800470c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800470e:	4805      	ldr	r0, [pc, #20]	; (8004724 <MX_USART3_UART_Init+0x4c>)
 8004710:	f005 f84c 	bl	80097ac <HAL_UART_Init>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800471a:	f000 f967 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800471e:	bf00      	nop
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20003c68 	.word	0x20003c68
 8004728:	40004800 	.word	0x40004800

0800472c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <MX_USART6_UART_Init+0x4c>)
 8004732:	4a12      	ldr	r2, [pc, #72]	; (800477c <MX_USART6_UART_Init+0x50>)
 8004734:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <MX_USART6_UART_Init+0x4c>)
 8004738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800473c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800473e:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <MX_USART6_UART_Init+0x4c>)
 8004740:	2200      	movs	r2, #0
 8004742:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <MX_USART6_UART_Init+0x4c>)
 8004746:	2200      	movs	r2, #0
 8004748:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <MX_USART6_UART_Init+0x4c>)
 800474c:	2200      	movs	r2, #0
 800474e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <MX_USART6_UART_Init+0x4c>)
 8004752:	220c      	movs	r2, #12
 8004754:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <MX_USART6_UART_Init+0x4c>)
 8004758:	2200      	movs	r2, #0
 800475a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <MX_USART6_UART_Init+0x4c>)
 800475e:	2200      	movs	r2, #0
 8004760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004762:	4805      	ldr	r0, [pc, #20]	; (8004778 <MX_USART6_UART_Init+0x4c>)
 8004764:	f005 f822 	bl	80097ac <HAL_UART_Init>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800476e:	f000 f93d 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004772:	bf00      	nop
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20003cac 	.word	0x20003cac
 800477c:	40011400 	.word	0x40011400

08004780 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004796:	f107 0314 	add.w	r3, r7, #20
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	605a      	str	r2, [r3, #4]
 80047a0:	609a      	str	r2, [r3, #8]
 80047a2:	60da      	str	r2, [r3, #12]
 80047a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	4b6e      	ldr	r3, [pc, #440]	; (8004964 <MX_GPIO_Init+0x1d4>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	4a6d      	ldr	r2, [pc, #436]	; (8004964 <MX_GPIO_Init+0x1d4>)
 80047b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b4:	6313      	str	r3, [r2, #48]	; 0x30
 80047b6:	4b6b      	ldr	r3, [pc, #428]	; (8004964 <MX_GPIO_Init+0x1d4>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	4b67      	ldr	r3, [pc, #412]	; (8004964 <MX_GPIO_Init+0x1d4>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	4a66      	ldr	r2, [pc, #408]	; (8004964 <MX_GPIO_Init+0x1d4>)
 80047cc:	f043 0304 	orr.w	r3, r3, #4
 80047d0:	6313      	str	r3, [r2, #48]	; 0x30
 80047d2:	4b64      	ldr	r3, [pc, #400]	; (8004964 <MX_GPIO_Init+0x1d4>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	4b60      	ldr	r3, [pc, #384]	; (8004964 <MX_GPIO_Init+0x1d4>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a5f      	ldr	r2, [pc, #380]	; (8004964 <MX_GPIO_Init+0x1d4>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b5d      	ldr	r3, [pc, #372]	; (8004964 <MX_GPIO_Init+0x1d4>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	607b      	str	r3, [r7, #4]
 80047fe:	4b59      	ldr	r3, [pc, #356]	; (8004964 <MX_GPIO_Init+0x1d4>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	4a58      	ldr	r2, [pc, #352]	; (8004964 <MX_GPIO_Init+0x1d4>)
 8004804:	f043 0302 	orr.w	r3, r3, #2
 8004808:	6313      	str	r3, [r2, #48]	; 0x30
 800480a:	4b56      	ldr	r3, [pc, #344]	; (8004964 <MX_GPIO_Init+0x1d4>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 8004816:	2200      	movs	r2, #0
 8004818:	f248 0103 	movw	r1, #32771	; 0x8003
 800481c:	4852      	ldr	r0, [pc, #328]	; (8004968 <MX_GPIO_Init+0x1d8>)
 800481e:	f001 fb55 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004822:	2201      	movs	r2, #1
 8004824:	2110      	movs	r1, #16
 8004826:	4850      	ldr	r0, [pc, #320]	; (8004968 <MX_GPIO_Init+0x1d8>)
 8004828:	f001 fb50 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800482c:	2200      	movs	r2, #0
 800482e:	2120      	movs	r1, #32
 8004830:	484e      	ldr	r0, [pc, #312]	; (800496c <MX_GPIO_Init+0x1dc>)
 8004832:	f001 fb4b 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8004836:	2200      	movs	r2, #0
 8004838:	2147      	movs	r1, #71	; 0x47
 800483a:	484d      	ldr	r0, [pc, #308]	; (8004970 <MX_GPIO_Init+0x1e0>)
 800483c:	f001 fb46 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8004840:	2313      	movs	r3, #19
 8004842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004844:	2303      	movs	r3, #3
 8004846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004848:	2300      	movs	r3, #0
 800484a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800484c:	f107 0314 	add.w	r3, r7, #20
 8004850:	4619      	mov	r1, r3
 8004852:	4846      	ldr	r0, [pc, #280]	; (800496c <MX_GPIO_Init+0x1dc>)
 8004854:	f001 f99e 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15;
 8004858:	f248 0303 	movw	r3, #32771	; 0x8003
 800485c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800485e:	2301      	movs	r3, #1
 8004860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004862:	2300      	movs	r3, #0
 8004864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004866:	2300      	movs	r3, #0
 8004868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800486a:	f107 0314 	add.w	r3, r7, #20
 800486e:	4619      	mov	r1, r3
 8004870:	483d      	ldr	r0, [pc, #244]	; (8004968 <MX_GPIO_Init+0x1d8>)
 8004872:	f001 f98f 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004876:	2310      	movs	r3, #16
 8004878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800487a:	2301      	movs	r3, #1
 800487c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004882:	2301      	movs	r3, #1
 8004884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004886:	f107 0314 	add.w	r3, r7, #20
 800488a:	4619      	mov	r1, r3
 800488c:	4836      	ldr	r0, [pc, #216]	; (8004968 <MX_GPIO_Init+0x1d8>)
 800488e:	f001 f981 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8004892:	2320      	movs	r3, #32
 8004894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004896:	2301      	movs	r3, #1
 8004898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489e:	2300      	movs	r3, #0
 80048a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80048a2:	f107 0314 	add.w	r3, r7, #20
 80048a6:	4619      	mov	r1, r3
 80048a8:	4830      	ldr	r0, [pc, #192]	; (800496c <MX_GPIO_Init+0x1dc>)
 80048aa:	f001 f973 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ON_Pin PB1 PB2 PB6 */
  GPIO_InitStruct.Pin = LED_ON_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 80048ae:	2347      	movs	r3, #71	; 0x47
 80048b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048b2:	2301      	movs	r3, #1
 80048b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ba:	2300      	movs	r3, #0
 80048bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048be:	f107 0314 	add.w	r3, r7, #20
 80048c2:	4619      	mov	r1, r3
 80048c4:	482a      	ldr	r0, [pc, #168]	; (8004970 <MX_GPIO_Init+0x1e0>)
 80048c6:	f001 f965 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80048ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80048ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80048d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048da:	f107 0314 	add.w	r3, r7, #20
 80048de:	4619      	mov	r1, r3
 80048e0:	4823      	ldr	r0, [pc, #140]	; (8004970 <MX_GPIO_Init+0x1e0>)
 80048e2:	f001 f957 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80048e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80048f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048f6:	f107 0314 	add.w	r3, r7, #20
 80048fa:	4619      	mov	r1, r3
 80048fc:	481a      	ldr	r0, [pc, #104]	; (8004968 <MX_GPIO_Init+0x1d8>)
 80048fe:	f001 f949 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004902:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004908:	2302      	movs	r3, #2
 800490a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490c:	2300      	movs	r3, #0
 800490e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004910:	2303      	movs	r3, #3
 8004912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004914:	230a      	movs	r3, #10
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004918:	f107 0314 	add.w	r3, r7, #20
 800491c:	4619      	mov	r1, r3
 800491e:	4812      	ldr	r0, [pc, #72]	; (8004968 <MX_GPIO_Init+0x1d8>)
 8004920:	f001 f938 	bl	8005b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004924:	2310      	movs	r3, #16
 8004926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004928:	2300      	movs	r3, #0
 800492a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004930:	f107 0314 	add.w	r3, r7, #20
 8004934:	4619      	mov	r1, r3
 8004936:	480e      	ldr	r0, [pc, #56]	; (8004970 <MX_GPIO_Init+0x1e0>)
 8004938:	f001 f92c 	bl	8005b94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800493c:	2200      	movs	r2, #0
 800493e:	2105      	movs	r1, #5
 8004940:	2017      	movs	r0, #23
 8004942:	f001 f8d4 	bl	8005aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004946:	2017      	movs	r0, #23
 8004948:	f001 f8ed 	bl	8005b26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800494c:	2200      	movs	r2, #0
 800494e:	2105      	movs	r1, #5
 8004950:	2028      	movs	r0, #40	; 0x28
 8004952:	f001 f8cc 	bl	8005aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004956:	2028      	movs	r0, #40	; 0x28
 8004958:	f001 f8e5 	bl	8005b26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800495c:	bf00      	nop
 800495e:	3728      	adds	r7, #40	; 0x28
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40023800 	.word	0x40023800
 8004968:	40020000 	.word	0x40020000
 800496c:	40020800 	.word	0x40020800
 8004970:	40020400 	.word	0x40020400

08004974 <StartCommandWaitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCommandWaitTask */
void StartCommandWaitTask(void *argument)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  if (waitForStartCommand()){
 800497c:	f7fc ff5c 	bl	8001838 <waitForStartCommand>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d104      	bne.n	8004990 <StartCommandWaitTask+0x1c>
		  break;
	  }
      osDelay(1000);
 8004986:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800498a:	f008 f9e9 	bl	800cd60 <osDelay>
	  if (waitForStartCommand()){
 800498e:	e7f5      	b.n	800497c <StartCommandWaitTask+0x8>
		  break;
 8004990:	bf00      	nop
  }

  // Start your main program here
  printIntroTitle();
 8004992:	f7fd f837 	bl	8001a04 <printIntroTitle>

  // Set the event flag to signal that the start command has been received
  osEventFlagsSet(startCommandEventHandle, 0x0001U);
 8004996:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <StartCommandWaitTask+0x34>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2101      	movs	r1, #1
 800499c:	4618      	mov	r0, r3
 800499e:	f008 fa39 	bl	800ce14 <osEventFlagsSet>


  // Exit this task
  osThreadExit();
 80049a2:	f008 f9d7 	bl	800cd54 <osThreadExit>
 80049a6:	bf00      	nop
 80049a8:	20003cfc 	.word	0x20003cfc

080049ac <MenuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MenuTask */
void MenuTask(void *argument)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MenuTask */
	  // Wait for the start command event to be set
	  osEventFlagsWait(startCommandEventHandle, 0x0001U, osFlagsWaitAny, osWaitForever);
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <MenuTask+0x38>)
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049bc:	2200      	movs	r2, #0
 80049be:	2101      	movs	r1, #1
 80049c0:	f008 fa6c 	bl	800ce9c <osEventFlagsWait>

      // Print menu options and handle user input
      printMenu(MENU_MAIN);
 80049c4:	2000      	movs	r0, #0
 80049c6:	f7fc ff77 	bl	80018b8 <printMenu>


  /* Infinite loop */
  for(;;)
  {
	  UART_Transmit_String("Choose an option:\r\n");
 80049ca:	4807      	ldr	r0, [pc, #28]	; (80049e8 <MenuTask+0x3c>)
 80049cc:	f7fc fe86 	bl	80016dc <UART_Transmit_String>
      // Wait for user input and execute the corresponding command
      char userInput = waitForUserInput(); // Implement this function to get user input
 80049d0:	f7fc ff5e 	bl	8001890 <waitForUserInput>
 80049d4:	4603      	mov	r3, r0
 80049d6:	73fb      	strb	r3, [r7, #15]
      menu(userInput);
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fd fa40 	bl	8001e60 <menu>
  {
 80049e0:	e7f3      	b.n	80049ca <MenuTask+0x1e>
 80049e2:	bf00      	nop
 80049e4:	20003cfc 	.word	0x20003cfc
 80049e8:	0801ebd8 	.word	0x0801ebd8

080049ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049f0:	b672      	cpsid	i
}
 80049f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049f4:	e7fe      	b.n	80049f4 <Error_Handler+0x8>
	...

080049f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <HAL_MspInit+0x54>)
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	4a11      	ldr	r2, [pc, #68]	; (8004a4c <HAL_MspInit+0x54>)
 8004a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <HAL_MspInit+0x54>)
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a16:	607b      	str	r3, [r7, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_MspInit+0x54>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	4a0a      	ldr	r2, [pc, #40]	; (8004a4c <HAL_MspInit+0x54>)
 8004a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a28:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2a:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <HAL_MspInit+0x54>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a36:	2200      	movs	r2, #0
 8004a38:	210f      	movs	r1, #15
 8004a3a:	f06f 0001 	mvn.w	r0, #1
 8004a3e:	f001 f856 	bl	8005aee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800

08004a50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08a      	sub	sp, #40	; 0x28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a58:	f107 0314 	add.w	r3, r7, #20
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	60da      	str	r2, [r3, #12]
 8004a66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a17      	ldr	r2, [pc, #92]	; (8004acc <HAL_ADC_MspInit+0x7c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d127      	bne.n	8004ac2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	4b16      	ldr	r3, [pc, #88]	; (8004ad0 <HAL_ADC_MspInit+0x80>)
 8004a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7a:	4a15      	ldr	r2, [pc, #84]	; (8004ad0 <HAL_ADC_MspInit+0x80>)
 8004a7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a80:	6453      	str	r3, [r2, #68]	; 0x44
 8004a82:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <HAL_ADC_MspInit+0x80>)
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <HAL_ADC_MspInit+0x80>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	4a0e      	ldr	r2, [pc, #56]	; (8004ad0 <HAL_ADC_MspInit+0x80>)
 8004a98:	f043 0304 	orr.w	r3, r3, #4
 8004a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <HAL_ADC_MspInit+0x80>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC2     ------> ADC3_IN12
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004aaa:	230c      	movs	r3, #12
 8004aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ab6:	f107 0314 	add.w	r3, r7, #20
 8004aba:	4619      	mov	r1, r3
 8004abc:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <HAL_ADC_MspInit+0x84>)
 8004abe:	f001 f869 	bl	8005b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004ac2:	bf00      	nop
 8004ac4:	3728      	adds	r7, #40	; 0x28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40012200 	.word	0x40012200
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	40020800 	.word	0x40020800

08004ad8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a0b      	ldr	r2, [pc, #44]	; (8004b14 <HAL_CRC_MspInit+0x3c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10d      	bne.n	8004b06 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <HAL_CRC_MspInit+0x40>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <HAL_CRC_MspInit+0x40>)
 8004af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004af8:	6313      	str	r3, [r2, #48]	; 0x30
 8004afa:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <HAL_CRC_MspInit+0x40>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40023000 	.word	0x40023000
 8004b18:	40023800 	.word	0x40023800

08004b1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08c      	sub	sp, #48	; 0x30
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b24:	f107 031c 	add.w	r3, r7, #28
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	60da      	str	r2, [r3, #12]
 8004b32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a33      	ldr	r2, [pc, #204]	; (8004c08 <HAL_I2C_MspInit+0xec>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d12d      	bne.n	8004b9a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	4b32      	ldr	r3, [pc, #200]	; (8004c0c <HAL_I2C_MspInit+0xf0>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	4a31      	ldr	r2, [pc, #196]	; (8004c0c <HAL_I2C_MspInit+0xf0>)
 8004b48:	f043 0302 	orr.w	r3, r3, #2
 8004b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4e:	4b2f      	ldr	r3, [pc, #188]	; (8004c0c <HAL_I2C_MspInit+0xf0>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b60:	2312      	movs	r3, #18
 8004b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b70:	f107 031c 	add.w	r3, r7, #28
 8004b74:	4619      	mov	r1, r3
 8004b76:	4826      	ldr	r0, [pc, #152]	; (8004c10 <HAL_I2C_MspInit+0xf4>)
 8004b78:	f001 f80c 	bl	8005b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <HAL_I2C_MspInit+0xf0>)
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	4a21      	ldr	r2, [pc, #132]	; (8004c0c <HAL_I2C_MspInit+0xf0>)
 8004b86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8c:	4b1f      	ldr	r3, [pc, #124]	; (8004c0c <HAL_I2C_MspInit+0xf0>)
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004b98:	e031      	b.n	8004bfe <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <HAL_I2C_MspInit+0xf8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d12c      	bne.n	8004bfe <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	4b18      	ldr	r3, [pc, #96]	; (8004c0c <HAL_I2C_MspInit+0xf0>)
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <HAL_I2C_MspInit+0xf0>)
 8004bae:	f043 0302 	orr.w	r3, r3, #2
 8004bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb4:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <HAL_I2C_MspInit+0xf0>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004bc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bc6:	2312      	movs	r3, #18
 8004bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004bd2:	2304      	movs	r3, #4
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bd6:	f107 031c 	add.w	r3, r7, #28
 8004bda:	4619      	mov	r1, r3
 8004bdc:	480c      	ldr	r0, [pc, #48]	; (8004c10 <HAL_I2C_MspInit+0xf4>)
 8004bde:	f000 ffd9 	bl	8005b94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_I2C_MspInit+0xf0>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <HAL_I2C_MspInit+0xf0>)
 8004bec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_I2C_MspInit+0xf0>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
}
 8004bfe:	bf00      	nop
 8004c00:	3730      	adds	r7, #48	; 0x30
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40005400 	.word	0x40005400
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40020400 	.word	0x40020400
 8004c14:	40005800 	.word	0x40005800

08004c18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c20:	f107 0308 	add.w	r3, r7, #8
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a0c      	ldr	r2, [pc, #48]	; (8004c64 <HAL_RTC_MspInit+0x4c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d111      	bne.n	8004c5c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c40:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c42:	f107 0308 	add.w	r3, r7, #8
 8004c46:	4618      	mov	r0, r3
 8004c48:	f003 fa0a 	bl	8008060 <HAL_RCCEx_PeriphCLKConfig>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004c52:	f7ff fecb 	bl	80049ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004c56:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <HAL_RTC_MspInit+0x50>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004c5c:	bf00      	nop
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40002800 	.word	0x40002800
 8004c68:	42470e3c 	.word	0x42470e3c

08004c6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08a      	sub	sp, #40	; 0x28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c74:	f107 0314 	add.w	r3, r7, #20
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a19      	ldr	r2, [pc, #100]	; (8004cf0 <HAL_SPI_MspInit+0x84>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d12b      	bne.n	8004ce6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c8e:	2300      	movs	r3, #0
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <HAL_SPI_MspInit+0x88>)
 8004c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c96:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <HAL_SPI_MspInit+0x88>)
 8004c98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c9e:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <HAL_SPI_MspInit+0x88>)
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <HAL_SPI_MspInit+0x88>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <HAL_SPI_MspInit+0x88>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cba:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <HAL_SPI_MspInit+0x88>)
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004cc6:	23e0      	movs	r3, #224	; 0xe0
 8004cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cca:	2302      	movs	r3, #2
 8004ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004cd6:	2305      	movs	r3, #5
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cda:	f107 0314 	add.w	r3, r7, #20
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4805      	ldr	r0, [pc, #20]	; (8004cf8 <HAL_SPI_MspInit+0x8c>)
 8004ce2:	f000 ff57 	bl	8005b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004ce6:	bf00      	nop
 8004ce8:	3728      	adds	r7, #40	; 0x28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40013000 	.word	0x40013000
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40020000 	.word	0x40020000

08004cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0c:	d10e      	bne.n	8004d2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	4b1d      	ldr	r3, [pc, #116]	; (8004d88 <HAL_TIM_Base_MspInit+0x8c>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <HAL_TIM_Base_MspInit+0x8c>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d1e:	4b1a      	ldr	r3, [pc, #104]	; (8004d88 <HAL_TIM_Base_MspInit+0x8c>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004d2a:	e026      	b.n	8004d7a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a16      	ldr	r2, [pc, #88]	; (8004d8c <HAL_TIM_Base_MspInit+0x90>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10e      	bne.n	8004d54 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d36:	2300      	movs	r3, #0
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <HAL_TIM_Base_MspInit+0x8c>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	4a12      	ldr	r2, [pc, #72]	; (8004d88 <HAL_TIM_Base_MspInit+0x8c>)
 8004d40:	f043 0302 	orr.w	r3, r3, #2
 8004d44:	6413      	str	r3, [r2, #64]	; 0x40
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <HAL_TIM_Base_MspInit+0x8c>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]
}
 8004d52:	e012      	b.n	8004d7a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM5)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <HAL_TIM_Base_MspInit+0x94>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d10d      	bne.n	8004d7a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <HAL_TIM_Base_MspInit+0x8c>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <HAL_TIM_Base_MspInit+0x8c>)
 8004d68:	f043 0308 	orr.w	r3, r3, #8
 8004d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6e:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <HAL_TIM_Base_MspInit+0x8c>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40000400 	.word	0x40000400
 8004d90:	40000c00 	.word	0x40000c00

08004d94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d9c:	f107 0314 	add.w	r3, r7, #20
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <HAL_TIM_MspPostInit+0xa4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d13c      	bne.n	8004e30 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	4b20      	ldr	r3, [pc, #128]	; (8004e3c <HAL_TIM_MspPostInit+0xa8>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <HAL_TIM_MspPostInit+0xa8>)
 8004dc0:	f043 0304 	orr.w	r3, r3, #4
 8004dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <HAL_TIM_MspPostInit+0xa8>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_TIM_MspPostInit+0xa8>)
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <HAL_TIM_MspPostInit+0xa8>)
 8004ddc:	f043 0302 	orr.w	r3, r3, #2
 8004de0:	6313      	str	r3, [r2, #48]	; 0x30
 8004de2:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <HAL_TIM_MspPostInit+0xa8>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004dee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df4:	2302      	movs	r3, #2
 8004df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e00:	2302      	movs	r3, #2
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e04:	f107 0314 	add.w	r3, r7, #20
 8004e08:	4619      	mov	r1, r3
 8004e0a:	480d      	ldr	r0, [pc, #52]	; (8004e40 <HAL_TIM_MspPostInit+0xac>)
 8004e0c:	f000 fec2 	bl	8005b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004e10:	2320      	movs	r3, #32
 8004e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e14:	2302      	movs	r3, #2
 8004e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e20:	2302      	movs	r3, #2
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e24:	f107 0314 	add.w	r3, r7, #20
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4806      	ldr	r0, [pc, #24]	; (8004e44 <HAL_TIM_MspPostInit+0xb0>)
 8004e2c:	f000 feb2 	bl	8005b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004e30:	bf00      	nop
 8004e32:	3728      	adds	r7, #40	; 0x28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	40020800 	.word	0x40020800
 8004e44:	40020400 	.word	0x40020400

08004e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b090      	sub	sp, #64	; 0x40
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	605a      	str	r2, [r3, #4]
 8004e5a:	609a      	str	r2, [r3, #8]
 8004e5c:	60da      	str	r2, [r3, #12]
 8004e5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a74      	ldr	r2, [pc, #464]	; (8005038 <HAL_UART_MspInit+0x1f0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d14b      	bne.n	8004f02 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e6e:	4b73      	ldr	r3, [pc, #460]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	4a72      	ldr	r2, [pc, #456]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004e74:	f043 0310 	orr.w	r3, r3, #16
 8004e78:	6453      	str	r3, [r2, #68]	; 0x44
 8004e7a:	4b70      	ldr	r3, [pc, #448]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8a:	4b6c      	ldr	r3, [pc, #432]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	4a6b      	ldr	r2, [pc, #428]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	6313      	str	r3, [r2, #48]	; 0x30
 8004e96:	4b69      	ldr	r3, [pc, #420]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	623b      	str	r3, [r7, #32]
 8004ea6:	4b65      	ldr	r3, [pc, #404]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eaa:	4a64      	ldr	r2, [pc, #400]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004eac:	f043 0302 	orr.w	r3, r3, #2
 8004eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb2:	4b62      	ldr	r3, [pc, #392]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	623b      	str	r3, [r7, #32]
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ed0:	2307      	movs	r3, #7
 8004ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4859      	ldr	r0, [pc, #356]	; (8005040 <HAL_UART_MspInit+0x1f8>)
 8004edc:	f000 fe5a 	bl	8005b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eec:	2303      	movs	r3, #3
 8004eee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ef0:	2307      	movs	r3, #7
 8004ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4852      	ldr	r0, [pc, #328]	; (8005044 <HAL_UART_MspInit+0x1fc>)
 8004efc:	f000 fe4a 	bl	8005b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004f00:	e095      	b.n	800502e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a50      	ldr	r2, [pc, #320]	; (8005048 <HAL_UART_MspInit+0x200>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d12c      	bne.n	8004f66 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	4b4a      	ldr	r3, [pc, #296]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	4a49      	ldr	r2, [pc, #292]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f1c:	4b47      	ldr	r3, [pc, #284]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	4b43      	ldr	r3, [pc, #268]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	4a42      	ldr	r2, [pc, #264]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004f32:	f043 0301 	orr.w	r3, r3, #1
 8004f36:	6313      	str	r3, [r2, #48]	; 0x30
 8004f38:	4b40      	ldr	r3, [pc, #256]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004f44:	230c      	movs	r3, #12
 8004f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f50:	2303      	movs	r3, #3
 8004f52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f54:	2307      	movs	r3, #7
 8004f56:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4838      	ldr	r0, [pc, #224]	; (8005040 <HAL_UART_MspInit+0x1f8>)
 8004f60:	f000 fe18 	bl	8005b94 <HAL_GPIO_Init>
}
 8004f64:	e063      	b.n	800502e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART3)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a38      	ldr	r2, [pc, #224]	; (800504c <HAL_UART_MspInit+0x204>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d12d      	bne.n	8004fcc <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	4b31      	ldr	r3, [pc, #196]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	4a30      	ldr	r2, [pc, #192]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004f7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8004f80:	4b2e      	ldr	r3, [pc, #184]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	4b2a      	ldr	r3, [pc, #168]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	4a29      	ldr	r2, [pc, #164]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004f96:	f043 0304 	orr.w	r3, r3, #4
 8004f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f9c:	4b27      	ldr	r3, [pc, #156]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004fa8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004fba:	2307      	movs	r3, #7
 8004fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4822      	ldr	r0, [pc, #136]	; (8005050 <HAL_UART_MspInit+0x208>)
 8004fc6:	f000 fde5 	bl	8005b94 <HAL_GPIO_Init>
}
 8004fca:	e030      	b.n	800502e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART6)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	; (8005054 <HAL_UART_MspInit+0x20c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d12b      	bne.n	800502e <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	4b18      	ldr	r3, [pc, #96]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	4a17      	ldr	r2, [pc, #92]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004fe0:	f043 0320 	orr.w	r3, r3, #32
 8004fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fe6:	4b15      	ldr	r3, [pc, #84]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	4b11      	ldr	r3, [pc, #68]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	4a10      	ldr	r2, [pc, #64]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8004ffc:	f043 0304 	orr.w	r3, r3, #4
 8005000:	6313      	str	r3, [r2, #48]	; 0x30
 8005002:	4b0e      	ldr	r3, [pc, #56]	; (800503c <HAL_UART_MspInit+0x1f4>)
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800500e:	23c0      	movs	r3, #192	; 0xc0
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005012:	2302      	movs	r3, #2
 8005014:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005016:	2300      	movs	r3, #0
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800501a:	2303      	movs	r3, #3
 800501c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800501e:	2308      	movs	r3, #8
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005026:	4619      	mov	r1, r3
 8005028:	4809      	ldr	r0, [pc, #36]	; (8005050 <HAL_UART_MspInit+0x208>)
 800502a:	f000 fdb3 	bl	8005b94 <HAL_GPIO_Init>
}
 800502e:	bf00      	nop
 8005030:	3740      	adds	r7, #64	; 0x40
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40011000 	.word	0x40011000
 800503c:	40023800 	.word	0x40023800
 8005040:	40020000 	.word	0x40020000
 8005044:	40020400 	.word	0x40020400
 8005048:	40004400 	.word	0x40004400
 800504c:	40004800 	.word	0x40004800
 8005050:	40020800 	.word	0x40020800
 8005054:	40011400 	.word	0x40011400

08005058 <SDTimer_Handler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDTimer_Handler(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800505c:	4b0e      	ldr	r3, [pc, #56]	; (8005098 <SDTimer_Handler+0x40>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d006      	beq.n	8005074 <SDTimer_Handler+0x1c>
    Timer1--;
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <SDTimer_Handler+0x40>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	4b09      	ldr	r3, [pc, #36]	; (8005098 <SDTimer_Handler+0x40>)
 8005072:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8005074:	4b09      	ldr	r3, [pc, #36]	; (800509c <SDTimer_Handler+0x44>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d006      	beq.n	800508c <SDTimer_Handler+0x34>
    Timer2--;
 800507e:	4b07      	ldr	r3, [pc, #28]	; (800509c <SDTimer_Handler+0x44>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b2da      	uxtb	r2, r3
 8005088:	4b04      	ldr	r3, [pc, #16]	; (800509c <SDTimer_Handler+0x44>)
 800508a:	701a      	strb	r2, [r3, #0]
}
 800508c:	bf00      	nop
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	20003990 	.word	0x20003990
 800509c:	20003992 	.word	0x20003992

080050a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050a4:	e7fe      	b.n	80050a4 <NMI_Handler+0x4>

080050a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050a6:	b480      	push	{r7}
 80050a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050aa:	e7fe      	b.n	80050aa <HardFault_Handler+0x4>

080050ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050b0:	e7fe      	b.n	80050b0 <MemManage_Handler+0x4>

080050b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050b6:	e7fe      	b.n	80050b6 <BusFault_Handler+0x4>

080050b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050bc:	e7fe      	b.n	80050bc <UsageFault_Handler+0x4>

080050be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050be:	b480      	push	{r7}
 80050c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050c2:	bf00      	nop
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80050d0:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <SysTick_Handler+0x3c>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	3301      	adds	r3, #1
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <SysTick_Handler+0x3c>)
 80050dc:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80050de:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <SysTick_Handler+0x3c>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b09      	cmp	r3, #9
 80050e6:	d904      	bls.n	80050f2 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 80050e8:	4b07      	ldr	r3, [pc, #28]	; (8005108 <SysTick_Handler+0x3c>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80050ee:	f7ff ffb3 	bl	8005058 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050f2:	f000 f97b 	bl	80053ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80050f6:	f00a fab7 	bl	800f668 <xTaskGetSchedulerState>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d001      	beq.n	8005104 <SysTick_Handler+0x38>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005100:	f00b f9d2 	bl	80104a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005104:	bf00      	nop
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20003d00 	.word	0x20003d00

0800510c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005110:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005114:	f000 fef4 	bl	8005f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005118:	bf00      	nop
 800511a:	bd80      	pop	{r7, pc}

0800511c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005120:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005124:	f000 feec 	bl	8005f00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005128:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800512c:	f000 fee8 	bl	8005f00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005130:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005134:	f000 fee4 	bl	8005f00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005138:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800513c:	f000 fee0 	bl	8005f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005140:	bf00      	nop
 8005142:	bd80      	pop	{r7, pc}

08005144 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  return 1;
 8005148:	2301      	movs	r3, #1
}
 800514a:	4618      	mov	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <_kill>:

int _kill(int pid, int sig)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800515e:	f014 f8b9 	bl	80192d4 <__errno>
 8005162:	4603      	mov	r3, r0
 8005164:	2216      	movs	r2, #22
 8005166:	601a      	str	r2, [r3, #0]
  return -1;
 8005168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <_exit>:

void _exit (int status)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800517c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ffe7 	bl	8005154 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005186:	e7fe      	b.n	8005186 <_exit+0x12>

08005188 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e00a      	b.n	80051b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800519a:	f3af 8000 	nop.w
 800519e:	4601      	mov	r1, r0
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	60ba      	str	r2, [r7, #8]
 80051a6:	b2ca      	uxtb	r2, r1
 80051a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	3301      	adds	r3, #1
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	dbf0      	blt.n	800519a <_read+0x12>
  }

  return len;
 80051b8:	687b      	ldr	r3, [r7, #4]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e009      	b.n	80051e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	60ba      	str	r2, [r7, #8]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	3301      	adds	r3, #1
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	dbf1      	blt.n	80051d4 <_write+0x12>
  }
  return len;
 80051f0:	687b      	ldr	r3, [r7, #4]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <_close>:

int _close(int file)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005222:	605a      	str	r2, [r3, #4]
  return 0;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <_isatty>:

int _isatty(int file)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800523a:	2301      	movs	r3, #1
}
 800523c:	4618      	mov	r0, r3
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800526c:	4a14      	ldr	r2, [pc, #80]	; (80052c0 <_sbrk+0x5c>)
 800526e:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <_sbrk+0x60>)
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005278:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <_sbrk+0x64>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005280:	4b11      	ldr	r3, [pc, #68]	; (80052c8 <_sbrk+0x64>)
 8005282:	4a12      	ldr	r2, [pc, #72]	; (80052cc <_sbrk+0x68>)
 8005284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005286:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <_sbrk+0x64>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	429a      	cmp	r2, r3
 8005292:	d207      	bcs.n	80052a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005294:	f014 f81e 	bl	80192d4 <__errno>
 8005298:	4603      	mov	r3, r0
 800529a:	220c      	movs	r2, #12
 800529c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800529e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052a2:	e009      	b.n	80052b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052a4:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <_sbrk+0x64>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052aa:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <_sbrk+0x64>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	4a05      	ldr	r2, [pc, #20]	; (80052c8 <_sbrk+0x64>)
 80052b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052b6:	68fb      	ldr	r3, [r7, #12]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20020000 	.word	0x20020000
 80052c4:	00000400 	.word	0x00000400
 80052c8:	20003d04 	.word	0x20003d04
 80052cc:	20008880 	.word	0x20008880

080052d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052d4:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <SystemInit+0x20>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052da:	4a05      	ldr	r2, [pc, #20]	; (80052f0 <SystemInit+0x20>)
 80052dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80052f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800532c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80052f8:	480d      	ldr	r0, [pc, #52]	; (8005330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80052fa:	490e      	ldr	r1, [pc, #56]	; (8005334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80052fc:	4a0e      	ldr	r2, [pc, #56]	; (8005338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80052fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005300:	e002      	b.n	8005308 <LoopCopyDataInit>

08005302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005306:	3304      	adds	r3, #4

08005308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800530a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800530c:	d3f9      	bcc.n	8005302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800530e:	4a0b      	ldr	r2, [pc, #44]	; (800533c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005310:	4c0b      	ldr	r4, [pc, #44]	; (8005340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005314:	e001      	b.n	800531a <LoopFillZerobss>

08005316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005318:	3204      	adds	r2, #4

0800531a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800531a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800531c:	d3fb      	bcc.n	8005316 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800531e:	f7ff ffd7 	bl	80052d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005322:	f013 ffdd 	bl	80192e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005326:	f7fe fe49 	bl	8003fbc <main>
  bx  lr    
 800532a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800532c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005334:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8005338:	0801f6c0 	.word	0x0801f6c0
  ldr r2, =_sbss
 800533c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8005340:	2000887c 	.word	0x2000887c

08005344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005344:	e7fe      	b.n	8005344 <ADC_IRQHandler>
	...

08005348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800534c:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <HAL_Init+0x40>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a0d      	ldr	r2, [pc, #52]	; (8005388 <HAL_Init+0x40>)
 8005352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <HAL_Init+0x40>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <HAL_Init+0x40>)
 800535e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005364:	4b08      	ldr	r3, [pc, #32]	; (8005388 <HAL_Init+0x40>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a07      	ldr	r2, [pc, #28]	; (8005388 <HAL_Init+0x40>)
 800536a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800536e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005370:	2003      	movs	r0, #3
 8005372:	f000 fbb1 	bl	8005ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005376:	200f      	movs	r0, #15
 8005378:	f000 f808 	bl	800538c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800537c:	f7ff fb3c 	bl	80049f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40023c00 	.word	0x40023c00

0800538c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005394:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <HAL_InitTick+0x54>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <HAL_InitTick+0x58>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	4619      	mov	r1, r3
 800539e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fbc9 	bl	8005b42 <HAL_SYSTICK_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e00e      	b.n	80053d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b0f      	cmp	r3, #15
 80053be:	d80a      	bhi.n	80053d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053c0:	2200      	movs	r2, #0
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053c8:	f000 fb91 	bl	8005aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053cc:	4a06      	ldr	r2, [pc, #24]	; (80053e8 <HAL_InitTick+0x5c>)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e000      	b.n	80053d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20000008 	.word	0x20000008
 80053e4:	20000010 	.word	0x20000010
 80053e8:	2000000c 	.word	0x2000000c

080053ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053f0:	4b06      	ldr	r3, [pc, #24]	; (800540c <HAL_IncTick+0x20>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b06      	ldr	r3, [pc, #24]	; (8005410 <HAL_IncTick+0x24>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4413      	add	r3, r2
 80053fc:	4a04      	ldr	r2, [pc, #16]	; (8005410 <HAL_IncTick+0x24>)
 80053fe:	6013      	str	r3, [r2, #0]
}
 8005400:	bf00      	nop
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20000010 	.word	0x20000010
 8005410:	20003d08 	.word	0x20003d08

08005414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  return uwTick;
 8005418:	4b03      	ldr	r3, [pc, #12]	; (8005428 <HAL_GetTick+0x14>)
 800541a:	681b      	ldr	r3, [r3, #0]
}
 800541c:	4618      	mov	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20003d08 	.word	0x20003d08

0800542c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005434:	f7ff ffee 	bl	8005414 <HAL_GetTick>
 8005438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005444:	d005      	beq.n	8005452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005446:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <HAL_Delay+0x44>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005452:	bf00      	nop
 8005454:	f7ff ffde 	bl	8005414 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	429a      	cmp	r2, r3
 8005462:	d8f7      	bhi.n	8005454 <HAL_Delay+0x28>
  {
  }
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000010 	.word	0x20000010

08005474 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e033      	b.n	80054f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d109      	bne.n	80054a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff fadc 	bl	8004a50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d118      	bne.n	80054e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80054ba:	f023 0302 	bic.w	r3, r3, #2
 80054be:	f043 0202 	orr.w	r2, r3, #2
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f93a 	bl	8005740 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f023 0303 	bic.w	r3, r3, #3
 80054da:	f043 0201 	orr.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40
 80054e2:	e001      	b.n	80054e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x1c>
 8005514:	2302      	movs	r3, #2
 8005516:	e105      	b.n	8005724 <HAL_ADC_ConfigChannel+0x228>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b09      	cmp	r3, #9
 8005526:	d925      	bls.n	8005574 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68d9      	ldr	r1, [r3, #12]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	4613      	mov	r3, r2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	4413      	add	r3, r2
 800553c:	3b1e      	subs	r3, #30
 800553e:	2207      	movs	r2, #7
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	43da      	mvns	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	400a      	ands	r2, r1
 800554c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68d9      	ldr	r1, [r3, #12]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	4618      	mov	r0, r3
 8005560:	4603      	mov	r3, r0
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	4403      	add	r3, r0
 8005566:	3b1e      	subs	r3, #30
 8005568:	409a      	lsls	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	60da      	str	r2, [r3, #12]
 8005572:	e022      	b.n	80055ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6919      	ldr	r1, [r3, #16]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	4613      	mov	r3, r2
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	4413      	add	r3, r2
 8005588:	2207      	movs	r2, #7
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43da      	mvns	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	400a      	ands	r2, r1
 8005596:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6919      	ldr	r1, [r3, #16]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	4618      	mov	r0, r3
 80055aa:	4603      	mov	r3, r0
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	4403      	add	r3, r0
 80055b0:	409a      	lsls	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b06      	cmp	r3, #6
 80055c0:	d824      	bhi.n	800560c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	3b05      	subs	r3, #5
 80055d4:	221f      	movs	r2, #31
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43da      	mvns	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	400a      	ands	r2, r1
 80055e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	4618      	mov	r0, r3
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	3b05      	subs	r3, #5
 80055fe:	fa00 f203 	lsl.w	r2, r0, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	635a      	str	r2, [r3, #52]	; 0x34
 800560a:	e04c      	b.n	80056a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b0c      	cmp	r3, #12
 8005612:	d824      	bhi.n	800565e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	3b23      	subs	r3, #35	; 0x23
 8005626:	221f      	movs	r2, #31
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	43da      	mvns	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	400a      	ands	r2, r1
 8005634:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	4618      	mov	r0, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	3b23      	subs	r3, #35	; 0x23
 8005650:	fa00 f203 	lsl.w	r2, r0, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
 800565c:	e023      	b.n	80056a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	3b41      	subs	r3, #65	; 0x41
 8005670:	221f      	movs	r2, #31
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	43da      	mvns	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	400a      	ands	r2, r1
 800567e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	4618      	mov	r0, r3
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	3b41      	subs	r3, #65	; 0x41
 800569a:	fa00 f203 	lsl.w	r2, r0, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056a6:	4b22      	ldr	r3, [pc, #136]	; (8005730 <HAL_ADC_ConfigChannel+0x234>)
 80056a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a21      	ldr	r2, [pc, #132]	; (8005734 <HAL_ADC_ConfigChannel+0x238>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d109      	bne.n	80056c8 <HAL_ADC_ConfigChannel+0x1cc>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b12      	cmp	r3, #18
 80056ba:	d105      	bne.n	80056c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a19      	ldr	r2, [pc, #100]	; (8005734 <HAL_ADC_ConfigChannel+0x238>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d123      	bne.n	800571a <HAL_ADC_ConfigChannel+0x21e>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b10      	cmp	r3, #16
 80056d8:	d003      	beq.n	80056e2 <HAL_ADC_ConfigChannel+0x1e6>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b11      	cmp	r3, #17
 80056e0:	d11b      	bne.n	800571a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b10      	cmp	r3, #16
 80056f4:	d111      	bne.n	800571a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056f6:	4b10      	ldr	r3, [pc, #64]	; (8005738 <HAL_ADC_ConfigChannel+0x23c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a10      	ldr	r2, [pc, #64]	; (800573c <HAL_ADC_ConfigChannel+0x240>)
 80056fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005700:	0c9a      	lsrs	r2, r3, #18
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800570c:	e002      	b.n	8005714 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	3b01      	subs	r3, #1
 8005712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f9      	bne.n	800570e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40012300 	.word	0x40012300
 8005734:	40012000 	.word	0x40012000
 8005738:	20000008 	.word	0x20000008
 800573c:	431bde83 	.word	0x431bde83

08005740 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005748:	4b79      	ldr	r3, [pc, #484]	; (8005930 <ADC_Init+0x1f0>)
 800574a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	431a      	orrs	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005774:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6859      	ldr	r1, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	021a      	lsls	r2, r3, #8
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005798:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6859      	ldr	r1, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6899      	ldr	r1, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	4a58      	ldr	r2, [pc, #352]	; (8005934 <ADC_Init+0x1f4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d022      	beq.n	800581e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6899      	ldr	r1, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005808:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6899      	ldr	r1, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	609a      	str	r2, [r3, #8]
 800581c:	e00f      	b.n	800583e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800582c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800583c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0202 	bic.w	r2, r2, #2
 800584c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6899      	ldr	r1, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	7e1b      	ldrb	r3, [r3, #24]
 8005858:	005a      	lsls	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d01b      	beq.n	80058a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800587a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800588a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6859      	ldr	r1, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	3b01      	subs	r3, #1
 8005898:	035a      	lsls	r2, r3, #13
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
 80058a2:	e007      	b.n	80058b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	051a      	lsls	r2, r3, #20
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6899      	ldr	r1, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058f6:	025a      	lsls	r2, r3, #9
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800590e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6899      	ldr	r1, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	029a      	lsls	r2, r3, #10
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	609a      	str	r2, [r3, #8]
}
 8005924:	bf00      	nop
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40012300 	.word	0x40012300
 8005934:	0f000001 	.word	0x0f000001

08005938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005948:	4b0c      	ldr	r3, [pc, #48]	; (800597c <__NVIC_SetPriorityGrouping+0x44>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005954:	4013      	ands	r3, r2
 8005956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800596a:	4a04      	ldr	r2, [pc, #16]	; (800597c <__NVIC_SetPriorityGrouping+0x44>)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	60d3      	str	r3, [r2, #12]
}
 8005970:	bf00      	nop
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	e000ed00 	.word	0xe000ed00

08005980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005984:	4b04      	ldr	r3, [pc, #16]	; (8005998 <__NVIC_GetPriorityGrouping+0x18>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	0a1b      	lsrs	r3, r3, #8
 800598a:	f003 0307 	and.w	r3, r3, #7
}
 800598e:	4618      	mov	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	e000ed00 	.word	0xe000ed00

0800599c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	4603      	mov	r3, r0
 80059a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	db0b      	blt.n	80059c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	f003 021f 	and.w	r2, r3, #31
 80059b4:	4907      	ldr	r1, [pc, #28]	; (80059d4 <__NVIC_EnableIRQ+0x38>)
 80059b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	2001      	movs	r0, #1
 80059be:	fa00 f202 	lsl.w	r2, r0, r2
 80059c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	e000e100 	.word	0xe000e100

080059d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	6039      	str	r1, [r7, #0]
 80059e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	db0a      	blt.n	8005a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	490c      	ldr	r1, [pc, #48]	; (8005a24 <__NVIC_SetPriority+0x4c>)
 80059f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f6:	0112      	lsls	r2, r2, #4
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	440b      	add	r3, r1
 80059fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a00:	e00a      	b.n	8005a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	4908      	ldr	r1, [pc, #32]	; (8005a28 <__NVIC_SetPriority+0x50>)
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	3b04      	subs	r3, #4
 8005a10:	0112      	lsls	r2, r2, #4
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	440b      	add	r3, r1
 8005a16:	761a      	strb	r2, [r3, #24]
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	e000e100 	.word	0xe000e100
 8005a28:	e000ed00 	.word	0xe000ed00

08005a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b089      	sub	sp, #36	; 0x24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f1c3 0307 	rsb	r3, r3, #7
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	bf28      	it	cs
 8005a4a:	2304      	movcs	r3, #4
 8005a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3304      	adds	r3, #4
 8005a52:	2b06      	cmp	r3, #6
 8005a54:	d902      	bls.n	8005a5c <NVIC_EncodePriority+0x30>
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	3b03      	subs	r3, #3
 8005a5a:	e000      	b.n	8005a5e <NVIC_EncodePriority+0x32>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43da      	mvns	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	401a      	ands	r2, r3
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7e:	43d9      	mvns	r1, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a84:	4313      	orrs	r3, r2
         );
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3724      	adds	r7, #36	; 0x24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005aa4:	d301      	bcc.n	8005aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e00f      	b.n	8005aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <SysTick_Config+0x40>)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ab2:	210f      	movs	r1, #15
 8005ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ab8:	f7ff ff8e 	bl	80059d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005abc:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <SysTick_Config+0x40>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ac2:	4b04      	ldr	r3, [pc, #16]	; (8005ad4 <SysTick_Config+0x40>)
 8005ac4:	2207      	movs	r2, #7
 8005ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	e000e010 	.word	0xe000e010

08005ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff ff29 	bl	8005938 <__NVIC_SetPriorityGrouping>
}
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b086      	sub	sp, #24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	4603      	mov	r3, r0
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
 8005afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b00:	f7ff ff3e 	bl	8005980 <__NVIC_GetPriorityGrouping>
 8005b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	6978      	ldr	r0, [r7, #20]
 8005b0c:	f7ff ff8e 	bl	8005a2c <NVIC_EncodePriority>
 8005b10:	4602      	mov	r2, r0
 8005b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b16:	4611      	mov	r1, r2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff ff5d 	bl	80059d8 <__NVIC_SetPriority>
}
 8005b1e:	bf00      	nop
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff ff31 	bl	800599c <__NVIC_EnableIRQ>
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff ffa2 	bl	8005a94 <SysTick_Config>
 8005b50:	4603      	mov	r3, r0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b082      	sub	sp, #8
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e00e      	b.n	8005b8a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	795b      	ldrb	r3, [r3, #5]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d105      	bne.n	8005b82 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7fe ffab 	bl	8004ad8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b089      	sub	sp, #36	; 0x24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005baa:	2300      	movs	r3, #0
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	e16b      	b.n	8005e88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	f040 815a 	bne.w	8005e82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d005      	beq.n	8005be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d130      	bne.n	8005c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	43db      	mvns	r3, r3
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	091b      	lsrs	r3, r3, #4
 8005c32:	f003 0201 	and.w	r2, r3, #1
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d017      	beq.n	8005c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	2203      	movs	r2, #3
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	43db      	mvns	r3, r3
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f003 0303 	and.w	r3, r3, #3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d123      	bne.n	8005cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	08da      	lsrs	r2, r3, #3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3208      	adds	r2, #8
 8005c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	220f      	movs	r2, #15
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	43db      	mvns	r3, r3
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	08da      	lsrs	r2, r3, #3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3208      	adds	r2, #8
 8005cd2:	69b9      	ldr	r1, [r7, #24]
 8005cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4013      	ands	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f003 0203 	and.w	r2, r3, #3
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 80b4 	beq.w	8005e82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	4b60      	ldr	r3, [pc, #384]	; (8005ea0 <HAL_GPIO_Init+0x30c>)
 8005d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d22:	4a5f      	ldr	r2, [pc, #380]	; (8005ea0 <HAL_GPIO_Init+0x30c>)
 8005d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d28:	6453      	str	r3, [r2, #68]	; 0x44
 8005d2a:	4b5d      	ldr	r3, [pc, #372]	; (8005ea0 <HAL_GPIO_Init+0x30c>)
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d36:	4a5b      	ldr	r2, [pc, #364]	; (8005ea4 <HAL_GPIO_Init+0x310>)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	089b      	lsrs	r3, r3, #2
 8005d3c:	3302      	adds	r3, #2
 8005d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	220f      	movs	r2, #15
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43db      	mvns	r3, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4013      	ands	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a52      	ldr	r2, [pc, #328]	; (8005ea8 <HAL_GPIO_Init+0x314>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d02b      	beq.n	8005dba <HAL_GPIO_Init+0x226>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a51      	ldr	r2, [pc, #324]	; (8005eac <HAL_GPIO_Init+0x318>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d025      	beq.n	8005db6 <HAL_GPIO_Init+0x222>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a50      	ldr	r2, [pc, #320]	; (8005eb0 <HAL_GPIO_Init+0x31c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01f      	beq.n	8005db2 <HAL_GPIO_Init+0x21e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a4f      	ldr	r2, [pc, #316]	; (8005eb4 <HAL_GPIO_Init+0x320>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d019      	beq.n	8005dae <HAL_GPIO_Init+0x21a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a4e      	ldr	r2, [pc, #312]	; (8005eb8 <HAL_GPIO_Init+0x324>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <HAL_GPIO_Init+0x216>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a4d      	ldr	r2, [pc, #308]	; (8005ebc <HAL_GPIO_Init+0x328>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00d      	beq.n	8005da6 <HAL_GPIO_Init+0x212>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a4c      	ldr	r2, [pc, #304]	; (8005ec0 <HAL_GPIO_Init+0x32c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d007      	beq.n	8005da2 <HAL_GPIO_Init+0x20e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a4b      	ldr	r2, [pc, #300]	; (8005ec4 <HAL_GPIO_Init+0x330>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d101      	bne.n	8005d9e <HAL_GPIO_Init+0x20a>
 8005d9a:	2307      	movs	r3, #7
 8005d9c:	e00e      	b.n	8005dbc <HAL_GPIO_Init+0x228>
 8005d9e:	2308      	movs	r3, #8
 8005da0:	e00c      	b.n	8005dbc <HAL_GPIO_Init+0x228>
 8005da2:	2306      	movs	r3, #6
 8005da4:	e00a      	b.n	8005dbc <HAL_GPIO_Init+0x228>
 8005da6:	2305      	movs	r3, #5
 8005da8:	e008      	b.n	8005dbc <HAL_GPIO_Init+0x228>
 8005daa:	2304      	movs	r3, #4
 8005dac:	e006      	b.n	8005dbc <HAL_GPIO_Init+0x228>
 8005dae:	2303      	movs	r3, #3
 8005db0:	e004      	b.n	8005dbc <HAL_GPIO_Init+0x228>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e002      	b.n	8005dbc <HAL_GPIO_Init+0x228>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <HAL_GPIO_Init+0x228>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	f002 0203 	and.w	r2, r2, #3
 8005dc2:	0092      	lsls	r2, r2, #2
 8005dc4:	4093      	lsls	r3, r2
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dcc:	4935      	ldr	r1, [pc, #212]	; (8005ea4 <HAL_GPIO_Init+0x310>)
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	089b      	lsrs	r3, r3, #2
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dda:	4b3b      	ldr	r3, [pc, #236]	; (8005ec8 <HAL_GPIO_Init+0x334>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	43db      	mvns	r3, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	4013      	ands	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dfe:	4a32      	ldr	r2, [pc, #200]	; (8005ec8 <HAL_GPIO_Init+0x334>)
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e04:	4b30      	ldr	r3, [pc, #192]	; (8005ec8 <HAL_GPIO_Init+0x334>)
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e28:	4a27      	ldr	r2, [pc, #156]	; (8005ec8 <HAL_GPIO_Init+0x334>)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e2e:	4b26      	ldr	r3, [pc, #152]	; (8005ec8 <HAL_GPIO_Init+0x334>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	43db      	mvns	r3, r3
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e52:	4a1d      	ldr	r2, [pc, #116]	; (8005ec8 <HAL_GPIO_Init+0x334>)
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e58:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <HAL_GPIO_Init+0x334>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	43db      	mvns	r3, r3
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4013      	ands	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e7c:	4a12      	ldr	r2, [pc, #72]	; (8005ec8 <HAL_GPIO_Init+0x334>)
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	3301      	adds	r3, #1
 8005e86:	61fb      	str	r3, [r7, #28]
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	2b0f      	cmp	r3, #15
 8005e8c:	f67f ae90 	bls.w	8005bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	3724      	adds	r7, #36	; 0x24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	40013800 	.word	0x40013800
 8005ea8:	40020000 	.word	0x40020000
 8005eac:	40020400 	.word	0x40020400
 8005eb0:	40020800 	.word	0x40020800
 8005eb4:	40020c00 	.word	0x40020c00
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	40021400 	.word	0x40021400
 8005ec0:	40021800 	.word	0x40021800
 8005ec4:	40021c00 	.word	0x40021c00
 8005ec8:	40013c00 	.word	0x40013c00

08005ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	807b      	strh	r3, [r7, #2]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005edc:	787b      	ldrb	r3, [r7, #1]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ee2:	887a      	ldrh	r2, [r7, #2]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ee8:	e003      	b.n	8005ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005eea:	887b      	ldrh	r3, [r7, #2]
 8005eec:	041a      	lsls	r2, r3, #16
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	619a      	str	r2, [r3, #24]
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
	...

08005f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005f0a:	4b08      	ldr	r3, [pc, #32]	; (8005f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f0c:	695a      	ldr	r2, [r3, #20]
 8005f0e:	88fb      	ldrh	r3, [r7, #6]
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d006      	beq.n	8005f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f16:	4a05      	ldr	r2, [pc, #20]	; (8005f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f1c:	88fb      	ldrh	r3, [r7, #6]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 f806 	bl	8005f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f24:	bf00      	nop
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40013c00 	.word	0x40013c00

08005f30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4603      	mov	r3, r0
 8005f38:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e12b      	b.n	80061b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fe fdd4 	bl	8004b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2224      	movs	r2, #36	; 0x24
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0201 	bic.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005faa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fac:	f002 f830 	bl	8008010 <HAL_RCC_GetPCLK1Freq>
 8005fb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	4a81      	ldr	r2, [pc, #516]	; (80061bc <HAL_I2C_Init+0x274>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d807      	bhi.n	8005fcc <HAL_I2C_Init+0x84>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4a80      	ldr	r2, [pc, #512]	; (80061c0 <HAL_I2C_Init+0x278>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	bf94      	ite	ls
 8005fc4:	2301      	movls	r3, #1
 8005fc6:	2300      	movhi	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	e006      	b.n	8005fda <HAL_I2C_Init+0x92>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4a7d      	ldr	r2, [pc, #500]	; (80061c4 <HAL_I2C_Init+0x27c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	bf94      	ite	ls
 8005fd4:	2301      	movls	r3, #1
 8005fd6:	2300      	movhi	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e0e7      	b.n	80061b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4a78      	ldr	r2, [pc, #480]	; (80061c8 <HAL_I2C_Init+0x280>)
 8005fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fea:	0c9b      	lsrs	r3, r3, #18
 8005fec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	4a6a      	ldr	r2, [pc, #424]	; (80061bc <HAL_I2C_Init+0x274>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d802      	bhi.n	800601c <HAL_I2C_Init+0xd4>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	3301      	adds	r3, #1
 800601a:	e009      	b.n	8006030 <HAL_I2C_Init+0xe8>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	4a69      	ldr	r2, [pc, #420]	; (80061cc <HAL_I2C_Init+0x284>)
 8006028:	fba2 2303 	umull	r2, r3, r2, r3
 800602c:	099b      	lsrs	r3, r3, #6
 800602e:	3301      	adds	r3, #1
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	6812      	ldr	r2, [r2, #0]
 8006034:	430b      	orrs	r3, r1
 8006036:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006042:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	495c      	ldr	r1, [pc, #368]	; (80061bc <HAL_I2C_Init+0x274>)
 800604c:	428b      	cmp	r3, r1
 800604e:	d819      	bhi.n	8006084 <HAL_I2C_Init+0x13c>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	1e59      	subs	r1, r3, #1
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	fbb1 f3f3 	udiv	r3, r1, r3
 800605e:	1c59      	adds	r1, r3, #1
 8006060:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006064:	400b      	ands	r3, r1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <HAL_I2C_Init+0x138>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1e59      	subs	r1, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	fbb1 f3f3 	udiv	r3, r1, r3
 8006078:	3301      	adds	r3, #1
 800607a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800607e:	e051      	b.n	8006124 <HAL_I2C_Init+0x1dc>
 8006080:	2304      	movs	r3, #4
 8006082:	e04f      	b.n	8006124 <HAL_I2C_Init+0x1dc>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d111      	bne.n	80060b0 <HAL_I2C_Init+0x168>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	1e58      	subs	r0, r3, #1
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6859      	ldr	r1, [r3, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	440b      	add	r3, r1
 800609a:	fbb0 f3f3 	udiv	r3, r0, r3
 800609e:	3301      	adds	r3, #1
 80060a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bf0c      	ite	eq
 80060a8:	2301      	moveq	r3, #1
 80060aa:	2300      	movne	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	e012      	b.n	80060d6 <HAL_I2C_Init+0x18e>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	1e58      	subs	r0, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6859      	ldr	r1, [r3, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	0099      	lsls	r1, r3, #2
 80060c0:	440b      	add	r3, r1
 80060c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80060c6:	3301      	adds	r3, #1
 80060c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	bf0c      	ite	eq
 80060d0:	2301      	moveq	r3, #1
 80060d2:	2300      	movne	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_I2C_Init+0x196>
 80060da:	2301      	movs	r3, #1
 80060dc:	e022      	b.n	8006124 <HAL_I2C_Init+0x1dc>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10e      	bne.n	8006104 <HAL_I2C_Init+0x1bc>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1e58      	subs	r0, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6859      	ldr	r1, [r3, #4]
 80060ee:	460b      	mov	r3, r1
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	440b      	add	r3, r1
 80060f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80060f8:	3301      	adds	r3, #1
 80060fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006102:	e00f      	b.n	8006124 <HAL_I2C_Init+0x1dc>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	1e58      	subs	r0, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6859      	ldr	r1, [r3, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	0099      	lsls	r1, r3, #2
 8006114:	440b      	add	r3, r1
 8006116:	fbb0 f3f3 	udiv	r3, r0, r3
 800611a:	3301      	adds	r3, #1
 800611c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	6809      	ldr	r1, [r1, #0]
 8006128:	4313      	orrs	r3, r2
 800612a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69da      	ldr	r2, [r3, #28]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6911      	ldr	r1, [r2, #16]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	68d2      	ldr	r2, [r2, #12]
 800615e:	4311      	orrs	r1, r2
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	430b      	orrs	r3, r1
 8006166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695a      	ldr	r2, [r3, #20]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0201 	orr.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	000186a0 	.word	0x000186a0
 80061c0:	001e847f 	.word	0x001e847f
 80061c4:	003d08ff 	.word	0x003d08ff
 80061c8:	431bde83 	.word	0x431bde83
 80061cc:	10624dd3 	.word	0x10624dd3

080061d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	607a      	str	r2, [r7, #4]
 80061da:	461a      	mov	r2, r3
 80061dc:	460b      	mov	r3, r1
 80061de:	817b      	strh	r3, [r7, #10]
 80061e0:	4613      	mov	r3, r2
 80061e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061e4:	f7ff f916 	bl	8005414 <HAL_GetTick>
 80061e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b20      	cmp	r3, #32
 80061f4:	f040 80e0 	bne.w	80063b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	2319      	movs	r3, #25
 80061fe:	2201      	movs	r2, #1
 8006200:	4970      	ldr	r1, [pc, #448]	; (80063c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f001 f8f6 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800620e:	2302      	movs	r3, #2
 8006210:	e0d3      	b.n	80063ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_I2C_Master_Transmit+0x50>
 800621c:	2302      	movs	r3, #2
 800621e:	e0cc      	b.n	80063ba <HAL_I2C_Master_Transmit+0x1ea>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b01      	cmp	r3, #1
 8006234:	d007      	beq.n	8006246 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006254:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2221      	movs	r2, #33	; 0x21
 800625a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2210      	movs	r2, #16
 8006262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	893a      	ldrh	r2, [r7, #8]
 8006276:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a50      	ldr	r2, [pc, #320]	; (80063c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006286:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006288:	8979      	ldrh	r1, [r7, #10]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	6a3a      	ldr	r2, [r7, #32]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fde2 	bl	8006e58 <I2C_MasterRequestWrite>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e08d      	b.n	80063ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800629e:	2300      	movs	r3, #0
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	613b      	str	r3, [r7, #16]
 80062b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80062b4:	e066      	b.n	8006384 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	6a39      	ldr	r1, [r7, #32]
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f001 f970 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00d      	beq.n	80062e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d107      	bne.n	80062de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e06b      	b.n	80063ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	781a      	ldrb	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b04      	cmp	r3, #4
 800631e:	d11b      	bne.n	8006358 <HAL_I2C_Master_Transmit+0x188>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	d017      	beq.n	8006358 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	6a39      	ldr	r1, [r7, #32]
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f001 f960 	bl	8007622 <I2C_WaitOnBTFFlagUntilTimeout>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00d      	beq.n	8006384 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	2b04      	cmp	r3, #4
 800636e:	d107      	bne.n	8006380 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e01a      	b.n	80063ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006388:	2b00      	cmp	r3, #0
 800638a:	d194      	bne.n	80062b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800639a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e000      	b.n	80063ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80063b8:	2302      	movs	r3, #2
  }
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	00100002 	.word	0x00100002
 80063c8:	ffff0000 	.word	0xffff0000

080063cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08c      	sub	sp, #48	; 0x30
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	461a      	mov	r2, r3
 80063d8:	460b      	mov	r3, r1
 80063da:	817b      	strh	r3, [r7, #10]
 80063dc:	4613      	mov	r3, r2
 80063de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063e0:	f7ff f818 	bl	8005414 <HAL_GetTick>
 80063e4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	f040 820b 	bne.w	800680a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	2319      	movs	r3, #25
 80063fa:	2201      	movs	r2, #1
 80063fc:	497c      	ldr	r1, [pc, #496]	; (80065f0 <HAL_I2C_Master_Receive+0x224>)
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f000 fff8 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800640a:	2302      	movs	r3, #2
 800640c:	e1fe      	b.n	800680c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_I2C_Master_Receive+0x50>
 8006418:	2302      	movs	r3, #2
 800641a:	e1f7      	b.n	800680c <HAL_I2C_Master_Receive+0x440>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b01      	cmp	r3, #1
 8006430:	d007      	beq.n	8006442 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 0201 	orr.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006450:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2222      	movs	r2, #34	; 0x22
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2210      	movs	r2, #16
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	893a      	ldrh	r2, [r7, #8]
 8006472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a5c      	ldr	r2, [pc, #368]	; (80065f4 <HAL_I2C_Master_Receive+0x228>)
 8006482:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006484:	8979      	ldrh	r1, [r7, #10]
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fd66 	bl	8006f5c <I2C_MasterRequestRead>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e1b8      	b.n	800680c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d113      	bne.n	80064ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064a2:	2300      	movs	r3, #0
 80064a4:	623b      	str	r3, [r7, #32]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	623b      	str	r3, [r7, #32]
 80064b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	e18c      	b.n	80067e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d11b      	bne.n	800650a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	e16c      	b.n	80067e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650e:	2b02      	cmp	r3, #2
 8006510:	d11b      	bne.n	800654a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006520:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006532:	2300      	movs	r3, #0
 8006534:	61bb      	str	r3, [r7, #24]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	61bb      	str	r3, [r7, #24]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	e14c      	b.n	80067e4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800655a:	2300      	movs	r3, #0
 800655c:	617b      	str	r3, [r7, #20]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006570:	e138      	b.n	80067e4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006576:	2b03      	cmp	r3, #3
 8006578:	f200 80f1 	bhi.w	800675e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006580:	2b01      	cmp	r3, #1
 8006582:	d123      	bne.n	80065cc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006586:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f001 f88b 	bl	80076a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e139      	b.n	800680c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065ca:	e10b      	b.n	80067e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d14e      	bne.n	8006672 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	2200      	movs	r2, #0
 80065dc:	4906      	ldr	r1, [pc, #24]	; (80065f8 <HAL_I2C_Master_Receive+0x22c>)
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 ff08 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d008      	beq.n	80065fc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e10e      	b.n	800680c <HAL_I2C_Master_Receive+0x440>
 80065ee:	bf00      	nop
 80065f0:	00100002 	.word	0x00100002
 80065f4:	ffff0000 	.word	0xffff0000
 80065f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800660a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	3b01      	subs	r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665a:	3b01      	subs	r3, #1
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006670:	e0b8      	b.n	80067e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	2200      	movs	r2, #0
 800667a:	4966      	ldr	r1, [pc, #408]	; (8006814 <HAL_I2C_Master_Receive+0x448>)
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 feb9 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e0bf      	b.n	800680c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800669a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691a      	ldr	r2, [r3, #16]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d4:	2200      	movs	r2, #0
 80066d6:	494f      	ldr	r1, [pc, #316]	; (8006814 <HAL_I2C_Master_Receive+0x448>)
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 fe8b 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e091      	b.n	800680c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691a      	ldr	r2, [r3, #16]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800675c:	e042      	b.n	80067e4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800675e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 ff9e 	bl	80076a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e04c      	b.n	800680c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d118      	bne.n	80067e4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691a      	ldr	r2, [r3, #16]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f47f aec2 	bne.w	8006572 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	e000      	b.n	800680c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800680a:	2302      	movs	r3, #2
  }
}
 800680c:	4618      	mov	r0, r3
 800680e:	3728      	adds	r7, #40	; 0x28
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	00010004 	.word	0x00010004

08006818 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	4608      	mov	r0, r1
 8006822:	4611      	mov	r1, r2
 8006824:	461a      	mov	r2, r3
 8006826:	4603      	mov	r3, r0
 8006828:	817b      	strh	r3, [r7, #10]
 800682a:	460b      	mov	r3, r1
 800682c:	813b      	strh	r3, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006832:	f7fe fdef 	bl	8005414 <HAL_GetTick>
 8006836:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b20      	cmp	r3, #32
 8006842:	f040 80d9 	bne.w	80069f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	2319      	movs	r3, #25
 800684c:	2201      	movs	r2, #1
 800684e:	496d      	ldr	r1, [pc, #436]	; (8006a04 <HAL_I2C_Mem_Write+0x1ec>)
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fdcf 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800685c:	2302      	movs	r3, #2
 800685e:	e0cc      	b.n	80069fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006866:	2b01      	cmp	r3, #1
 8006868:	d101      	bne.n	800686e <HAL_I2C_Mem_Write+0x56>
 800686a:	2302      	movs	r3, #2
 800686c:	e0c5      	b.n	80069fa <HAL_I2C_Mem_Write+0x1e2>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b01      	cmp	r3, #1
 8006882:	d007      	beq.n	8006894 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2221      	movs	r2, #33	; 0x21
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2240      	movs	r2, #64	; 0x40
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a3a      	ldr	r2, [r7, #32]
 80068be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4a4d      	ldr	r2, [pc, #308]	; (8006a08 <HAL_I2C_Mem_Write+0x1f0>)
 80068d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068d6:	88f8      	ldrh	r0, [r7, #6]
 80068d8:	893a      	ldrh	r2, [r7, #8]
 80068da:	8979      	ldrh	r1, [r7, #10]
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	4603      	mov	r3, r0
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fc06 	bl	80070f8 <I2C_RequestMemoryWrite>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d052      	beq.n	8006998 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e081      	b.n	80069fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 fe50 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00d      	beq.n	8006922 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	2b04      	cmp	r3, #4
 800690c:	d107      	bne.n	800691e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800691c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e06b      	b.n	80069fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	781a      	ldrb	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800693c:	3b01      	subs	r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006948:	b29b      	uxth	r3, r3
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b04      	cmp	r3, #4
 800695e:	d11b      	bne.n	8006998 <HAL_I2C_Mem_Write+0x180>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006964:	2b00      	cmp	r3, #0
 8006966:	d017      	beq.n	8006998 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	781a      	ldrb	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1aa      	bne.n	80068f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fe3c 	bl	8007622 <I2C_WaitOnBTFFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00d      	beq.n	80069cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d107      	bne.n	80069c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e016      	b.n	80069fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e000      	b.n	80069fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3718      	adds	r7, #24
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	00100002 	.word	0x00100002
 8006a08:	ffff0000 	.word	0xffff0000

08006a0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08c      	sub	sp, #48	; 0x30
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	4608      	mov	r0, r1
 8006a16:	4611      	mov	r1, r2
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	817b      	strh	r3, [r7, #10]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	813b      	strh	r3, [r7, #8]
 8006a22:	4613      	mov	r3, r2
 8006a24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a26:	f7fe fcf5 	bl	8005414 <HAL_GetTick>
 8006a2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	f040 8208 	bne.w	8006e4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	2319      	movs	r3, #25
 8006a40:	2201      	movs	r2, #1
 8006a42:	497b      	ldr	r1, [pc, #492]	; (8006c30 <HAL_I2C_Mem_Read+0x224>)
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fcd5 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006a50:	2302      	movs	r3, #2
 8006a52:	e1fb      	b.n	8006e4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <HAL_I2C_Mem_Read+0x56>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e1f4      	b.n	8006e4c <HAL_I2C_Mem_Read+0x440>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d007      	beq.n	8006a88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0201 	orr.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2222      	movs	r2, #34	; 0x22
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2240      	movs	r2, #64	; 0x40
 8006aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4a5b      	ldr	r2, [pc, #364]	; (8006c34 <HAL_I2C_Mem_Read+0x228>)
 8006ac8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aca:	88f8      	ldrh	r0, [r7, #6]
 8006acc:	893a      	ldrh	r2, [r7, #8]
 8006ace:	8979      	ldrh	r1, [r7, #10]
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	4603      	mov	r3, r0
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 fba2 	bl	8007224 <I2C_RequestMemoryRead>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e1b0      	b.n	8006e4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d113      	bne.n	8006b1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af2:	2300      	movs	r3, #0
 8006af4:	623b      	str	r3, [r7, #32]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	623b      	str	r3, [r7, #32]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	623b      	str	r3, [r7, #32]
 8006b06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	e184      	b.n	8006e24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d11b      	bne.n	8006b5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b32:	2300      	movs	r3, #0
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e164      	b.n	8006e24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d11b      	bne.n	8006b9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b82:	2300      	movs	r3, #0
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	e144      	b.n	8006e24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	617b      	str	r3, [r7, #20]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006bb0:	e138      	b.n	8006e24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	f200 80f1 	bhi.w	8006d9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d123      	bne.n	8006c0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 fd6b 	bl	80076a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e139      	b.n	8006e4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691a      	ldr	r2, [r3, #16]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	b2d2      	uxtb	r2, r2
 8006be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c0a:	e10b      	b.n	8006e24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d14e      	bne.n	8006cb2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	4906      	ldr	r1, [pc, #24]	; (8006c38 <HAL_I2C_Mem_Read+0x22c>)
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 fbe8 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d008      	beq.n	8006c3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e10e      	b.n	8006e4c <HAL_I2C_Mem_Read+0x440>
 8006c2e:	bf00      	nop
 8006c30:	00100002 	.word	0x00100002
 8006c34:	ffff0000 	.word	0xffff0000
 8006c38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cb0:	e0b8      	b.n	8006e24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	2200      	movs	r2, #0
 8006cba:	4966      	ldr	r1, [pc, #408]	; (8006e54 <HAL_I2C_Mem_Read+0x448>)
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fb99 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0bf      	b.n	8006e4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	691a      	ldr	r2, [r3, #16]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	2200      	movs	r2, #0
 8006d16:	494f      	ldr	r1, [pc, #316]	; (8006e54 <HAL_I2C_Mem_Read+0x448>)
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 fb6b 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e091      	b.n	8006e4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d9c:	e042      	b.n	8006e24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fc7e 	bl	80076a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e04c      	b.n	8006e4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d118      	bne.n	8006e24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f47f aec2 	bne.w	8006bb2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	e000      	b.n	8006e4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006e4a:	2302      	movs	r3, #2
  }
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3728      	adds	r7, #40	; 0x28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	00010004 	.word	0x00010004

08006e58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	607a      	str	r2, [r7, #4]
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	460b      	mov	r3, r1
 8006e66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d006      	beq.n	8006e82 <I2C_MasterRequestWrite+0x2a>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d003      	beq.n	8006e82 <I2C_MasterRequestWrite+0x2a>
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e80:	d108      	bne.n	8006e94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	e00b      	b.n	8006eac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	2b12      	cmp	r3, #18
 8006e9a:	d107      	bne.n	8006eac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 fa9b 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00d      	beq.n	8006ee0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed2:	d103      	bne.n	8006edc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e035      	b.n	8006f4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ee8:	d108      	bne.n	8006efc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006eea:	897b      	ldrh	r3, [r7, #10]
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ef8:	611a      	str	r2, [r3, #16]
 8006efa:	e01b      	b.n	8006f34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006efc:	897b      	ldrh	r3, [r7, #10]
 8006efe:	11db      	asrs	r3, r3, #7
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	f003 0306 	and.w	r3, r3, #6
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	f063 030f 	orn	r3, r3, #15
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	490e      	ldr	r1, [pc, #56]	; (8006f54 <I2C_MasterRequestWrite+0xfc>)
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 fac1 	bl	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e010      	b.n	8006f4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006f2a:	897b      	ldrh	r3, [r7, #10]
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	4907      	ldr	r1, [pc, #28]	; (8006f58 <I2C_MasterRequestWrite+0x100>)
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 fab1 	bl	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e000      	b.n	8006f4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	00010008 	.word	0x00010008
 8006f58:	00010002 	.word	0x00010002

08006f5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d006      	beq.n	8006f96 <I2C_MasterRequestRead+0x3a>
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d003      	beq.n	8006f96 <I2C_MasterRequestRead+0x3a>
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f94:	d108      	bne.n	8006fa8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	e00b      	b.n	8006fc0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	2b11      	cmp	r3, #17
 8006fae:	d107      	bne.n	8006fc0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 fa11 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00d      	beq.n	8006ff4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe6:	d103      	bne.n	8006ff0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e079      	b.n	80070e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ffc:	d108      	bne.n	8007010 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ffe:	897b      	ldrh	r3, [r7, #10]
 8007000:	b2db      	uxtb	r3, r3
 8007002:	f043 0301 	orr.w	r3, r3, #1
 8007006:	b2da      	uxtb	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	611a      	str	r2, [r3, #16]
 800700e:	e05f      	b.n	80070d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007010:	897b      	ldrh	r3, [r7, #10]
 8007012:	11db      	asrs	r3, r3, #7
 8007014:	b2db      	uxtb	r3, r3
 8007016:	f003 0306 	and.w	r3, r3, #6
 800701a:	b2db      	uxtb	r3, r3
 800701c:	f063 030f 	orn	r3, r3, #15
 8007020:	b2da      	uxtb	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	4930      	ldr	r1, [pc, #192]	; (80070f0 <I2C_MasterRequestRead+0x194>)
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 fa37 	bl	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e054      	b.n	80070e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800703e:	897b      	ldrh	r3, [r7, #10]
 8007040:	b2da      	uxtb	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4929      	ldr	r1, [pc, #164]	; (80070f4 <I2C_MasterRequestRead+0x198>)
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 fa27 	bl	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e044      	b.n	80070e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800705e:	2300      	movs	r3, #0
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007082:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 f9af 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00d      	beq.n	80070b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070aa:	d103      	bne.n	80070b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070b2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e017      	b.n	80070e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80070b8:	897b      	ldrh	r3, [r7, #10]
 80070ba:	11db      	asrs	r3, r3, #7
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	f003 0306 	and.w	r3, r3, #6
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	f063 030e 	orn	r3, r3, #14
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	4907      	ldr	r1, [pc, #28]	; (80070f4 <I2C_MasterRequestRead+0x198>)
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f9e3 	bl	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	00010008 	.word	0x00010008
 80070f4:	00010002 	.word	0x00010002

080070f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	4608      	mov	r0, r1
 8007102:	4611      	mov	r1, r2
 8007104:	461a      	mov	r2, r3
 8007106:	4603      	mov	r3, r0
 8007108:	817b      	strh	r3, [r7, #10]
 800710a:	460b      	mov	r3, r1
 800710c:	813b      	strh	r3, [r7, #8]
 800710e:	4613      	mov	r3, r2
 8007110:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007120:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	2200      	movs	r2, #0
 800712a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f960 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00d      	beq.n	8007156 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007148:	d103      	bne.n	8007152 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007150:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e05f      	b.n	8007216 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007156:	897b      	ldrh	r3, [r7, #10]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	461a      	mov	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007164:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	6a3a      	ldr	r2, [r7, #32]
 800716a:	492d      	ldr	r1, [pc, #180]	; (8007220 <I2C_RequestMemoryWrite+0x128>)
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f998 	bl	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e04c      	b.n	8007216 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007194:	6a39      	ldr	r1, [r7, #32]
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 fa02 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d107      	bne.n	80071ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e02b      	b.n	8007216 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d105      	bne.n	80071d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071c4:	893b      	ldrh	r3, [r7, #8]
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	611a      	str	r2, [r3, #16]
 80071ce:	e021      	b.n	8007214 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071d0:	893b      	ldrh	r3, [r7, #8]
 80071d2:	0a1b      	lsrs	r3, r3, #8
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e0:	6a39      	ldr	r1, [r7, #32]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 f9dc 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00d      	beq.n	800720a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d107      	bne.n	8007206 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007204:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e005      	b.n	8007216 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800720a:	893b      	ldrh	r3, [r7, #8]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	00010002 	.word	0x00010002

08007224 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af02      	add	r7, sp, #8
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	4608      	mov	r0, r1
 800722e:	4611      	mov	r1, r2
 8007230:	461a      	mov	r2, r3
 8007232:	4603      	mov	r3, r0
 8007234:	817b      	strh	r3, [r7, #10]
 8007236:	460b      	mov	r3, r1
 8007238:	813b      	strh	r3, [r7, #8]
 800723a:	4613      	mov	r3, r2
 800723c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800724c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800725c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	2200      	movs	r2, #0
 8007266:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 f8c2 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00d      	beq.n	8007292 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007284:	d103      	bne.n	800728e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800728c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e0aa      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007292:	897b      	ldrh	r3, [r7, #10]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	6a3a      	ldr	r2, [r7, #32]
 80072a6:	4952      	ldr	r1, [pc, #328]	; (80073f0 <I2C_RequestMemoryRead+0x1cc>)
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f8fa 	bl	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e097      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d0:	6a39      	ldr	r1, [r7, #32]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 f964 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00d      	beq.n	80072fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d107      	bne.n	80072f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e076      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072fa:	88fb      	ldrh	r3, [r7, #6]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d105      	bne.n	800730c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007300:	893b      	ldrh	r3, [r7, #8]
 8007302:	b2da      	uxtb	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	611a      	str	r2, [r3, #16]
 800730a:	e021      	b.n	8007350 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800730c:	893b      	ldrh	r3, [r7, #8]
 800730e:	0a1b      	lsrs	r3, r3, #8
 8007310:	b29b      	uxth	r3, r3
 8007312:	b2da      	uxtb	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800731a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800731c:	6a39      	ldr	r1, [r7, #32]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f93e 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00d      	beq.n	8007346 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	2b04      	cmp	r3, #4
 8007330:	d107      	bne.n	8007342 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007340:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e050      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007346:	893b      	ldrh	r3, [r7, #8]
 8007348:	b2da      	uxtb	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007352:	6a39      	ldr	r1, [r7, #32]
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f923 	bl	80075a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00d      	beq.n	800737c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	2b04      	cmp	r3, #4
 8007366:	d107      	bne.n	8007378 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007376:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e035      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800738a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	2200      	movs	r2, #0
 8007394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f82b 	bl	80073f4 <I2C_WaitOnFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00d      	beq.n	80073c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073b2:	d103      	bne.n	80073bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e013      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073c0:	897b      	ldrh	r3, [r7, #10]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f043 0301 	orr.w	r3, r3, #1
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	6a3a      	ldr	r2, [r7, #32]
 80073d4:	4906      	ldr	r1, [pc, #24]	; (80073f0 <I2C_RequestMemoryRead+0x1cc>)
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 f863 	bl	80074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	00010002 	.word	0x00010002

080073f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007404:	e025      	b.n	8007452 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800740c:	d021      	beq.n	8007452 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740e:	f7fe f801 	bl	8005414 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d302      	bcc.n	8007424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d116      	bne.n	8007452 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	f043 0220 	orr.w	r2, r3, #32
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e023      	b.n	800749a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	0c1b      	lsrs	r3, r3, #16
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b01      	cmp	r3, #1
 800745a:	d10d      	bne.n	8007478 <I2C_WaitOnFlagUntilTimeout+0x84>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	43da      	mvns	r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4013      	ands	r3, r2
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	bf0c      	ite	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	2300      	movne	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	461a      	mov	r2, r3
 8007476:	e00c      	b.n	8007492 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	43da      	mvns	r2, r3
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	4013      	ands	r3, r2
 8007484:	b29b      	uxth	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	bf0c      	ite	eq
 800748a:	2301      	moveq	r3, #1
 800748c:	2300      	movne	r3, #0
 800748e:	b2db      	uxtb	r3, r3
 8007490:	461a      	mov	r2, r3
 8007492:	79fb      	ldrb	r3, [r7, #7]
 8007494:	429a      	cmp	r2, r3
 8007496:	d0b6      	beq.n	8007406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	607a      	str	r2, [r7, #4]
 80074ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074b0:	e051      	b.n	8007556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c0:	d123      	bne.n	800750a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	f043 0204 	orr.w	r2, r3, #4
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e046      	b.n	8007598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007510:	d021      	beq.n	8007556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007512:	f7fd ff7f 	bl	8005414 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	429a      	cmp	r2, r3
 8007520:	d302      	bcc.n	8007528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d116      	bne.n	8007556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2220      	movs	r2, #32
 8007532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	f043 0220 	orr.w	r2, r3, #32
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e020      	b.n	8007598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	0c1b      	lsrs	r3, r3, #16
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	d10c      	bne.n	800757a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	43da      	mvns	r2, r3
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4013      	ands	r3, r2
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	bf14      	ite	ne
 8007572:	2301      	movne	r3, #1
 8007574:	2300      	moveq	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	e00b      	b.n	8007592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	43da      	mvns	r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	4013      	ands	r3, r2
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	bf14      	ite	ne
 800758c:	2301      	movne	r3, #1
 800758e:	2300      	moveq	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d18d      	bne.n	80074b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075ac:	e02d      	b.n	800760a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 f8ce 	bl	8007750 <I2C_IsAcknowledgeFailed>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e02d      	b.n	800761a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075c4:	d021      	beq.n	800760a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c6:	f7fd ff25 	bl	8005414 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d302      	bcc.n	80075dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d116      	bne.n	800760a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2220      	movs	r2, #32
 80075e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	f043 0220 	orr.w	r2, r3, #32
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e007      	b.n	800761a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007614:	2b80      	cmp	r3, #128	; 0x80
 8007616:	d1ca      	bne.n	80075ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800762e:	e02d      	b.n	800768c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 f88d 	bl	8007750 <I2C_IsAcknowledgeFailed>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e02d      	b.n	800769c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007646:	d021      	beq.n	800768c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007648:	f7fd fee4 	bl	8005414 <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	429a      	cmp	r2, r3
 8007656:	d302      	bcc.n	800765e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d116      	bne.n	800768c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2220      	movs	r2, #32
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	f043 0220 	orr.w	r2, r3, #32
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e007      	b.n	800769c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	f003 0304 	and.w	r3, r3, #4
 8007696:	2b04      	cmp	r3, #4
 8007698:	d1ca      	bne.n	8007630 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076b0:	e042      	b.n	8007738 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	f003 0310 	and.w	r3, r3, #16
 80076bc:	2b10      	cmp	r3, #16
 80076be:	d119      	bne.n	80076f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f06f 0210 	mvn.w	r2, #16
 80076c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e029      	b.n	8007748 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f4:	f7fd fe8e 	bl	8005414 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	429a      	cmp	r2, r3
 8007702:	d302      	bcc.n	800770a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d116      	bne.n	8007738 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	f043 0220 	orr.w	r2, r3, #32
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e007      	b.n	8007748 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d1b5      	bne.n	80076b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007766:	d11b      	bne.n	80077a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007770:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2220      	movs	r2, #32
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778c:	f043 0204 	orr.w	r2, r3, #4
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
	...

080077b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e267      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d075      	beq.n	80078ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077ce:	4b88      	ldr	r3, [pc, #544]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 030c 	and.w	r3, r3, #12
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d00c      	beq.n	80077f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077da:	4b85      	ldr	r3, [pc, #532]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077e2:	2b08      	cmp	r3, #8
 80077e4:	d112      	bne.n	800780c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077e6:	4b82      	ldr	r3, [pc, #520]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077f2:	d10b      	bne.n	800780c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f4:	4b7e      	ldr	r3, [pc, #504]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d05b      	beq.n	80078b8 <HAL_RCC_OscConfig+0x108>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d157      	bne.n	80078b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e242      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007814:	d106      	bne.n	8007824 <HAL_RCC_OscConfig+0x74>
 8007816:	4b76      	ldr	r3, [pc, #472]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a75      	ldr	r2, [pc, #468]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 800781c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	e01d      	b.n	8007860 <HAL_RCC_OscConfig+0xb0>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800782c:	d10c      	bne.n	8007848 <HAL_RCC_OscConfig+0x98>
 800782e:	4b70      	ldr	r3, [pc, #448]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a6f      	ldr	r2, [pc, #444]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 8007834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	4b6d      	ldr	r3, [pc, #436]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a6c      	ldr	r2, [pc, #432]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 8007840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	e00b      	b.n	8007860 <HAL_RCC_OscConfig+0xb0>
 8007848:	4b69      	ldr	r3, [pc, #420]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a68      	ldr	r2, [pc, #416]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 800784e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007852:	6013      	str	r3, [r2, #0]
 8007854:	4b66      	ldr	r3, [pc, #408]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a65      	ldr	r2, [pc, #404]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 800785a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800785e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d013      	beq.n	8007890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007868:	f7fd fdd4 	bl	8005414 <HAL_GetTick>
 800786c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800786e:	e008      	b.n	8007882 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007870:	f7fd fdd0 	bl	8005414 <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b64      	cmp	r3, #100	; 0x64
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e207      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007882:	4b5b      	ldr	r3, [pc, #364]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0f0      	beq.n	8007870 <HAL_RCC_OscConfig+0xc0>
 800788e:	e014      	b.n	80078ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007890:	f7fd fdc0 	bl	8005414 <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007898:	f7fd fdbc 	bl	8005414 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b64      	cmp	r3, #100	; 0x64
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e1f3      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078aa:	4b51      	ldr	r3, [pc, #324]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1f0      	bne.n	8007898 <HAL_RCC_OscConfig+0xe8>
 80078b6:	e000      	b.n	80078ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d063      	beq.n	800798e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078c6:	4b4a      	ldr	r3, [pc, #296]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 030c 	and.w	r3, r3, #12
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078d2:	4b47      	ldr	r3, [pc, #284]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078da:	2b08      	cmp	r3, #8
 80078dc:	d11c      	bne.n	8007918 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078de:	4b44      	ldr	r3, [pc, #272]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d116      	bne.n	8007918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ea:	4b41      	ldr	r3, [pc, #260]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <HAL_RCC_OscConfig+0x152>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d001      	beq.n	8007902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e1c7      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007902:	4b3b      	ldr	r3, [pc, #236]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	4937      	ldr	r1, [pc, #220]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 8007912:	4313      	orrs	r3, r2
 8007914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007916:	e03a      	b.n	800798e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d020      	beq.n	8007962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007920:	4b34      	ldr	r3, [pc, #208]	; (80079f4 <HAL_RCC_OscConfig+0x244>)
 8007922:	2201      	movs	r2, #1
 8007924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007926:	f7fd fd75 	bl	8005414 <HAL_GetTick>
 800792a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800792c:	e008      	b.n	8007940 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800792e:	f7fd fd71 	bl	8005414 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	d901      	bls.n	8007940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e1a8      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007940:	4b2b      	ldr	r3, [pc, #172]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0f0      	beq.n	800792e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800794c:	4b28      	ldr	r3, [pc, #160]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	4925      	ldr	r1, [pc, #148]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 800795c:	4313      	orrs	r3, r2
 800795e:	600b      	str	r3, [r1, #0]
 8007960:	e015      	b.n	800798e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007962:	4b24      	ldr	r3, [pc, #144]	; (80079f4 <HAL_RCC_OscConfig+0x244>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007968:	f7fd fd54 	bl	8005414 <HAL_GetTick>
 800796c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800796e:	e008      	b.n	8007982 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007970:	f7fd fd50 	bl	8005414 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d901      	bls.n	8007982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e187      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007982:	4b1b      	ldr	r3, [pc, #108]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1f0      	bne.n	8007970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	2b00      	cmp	r3, #0
 8007998:	d036      	beq.n	8007a08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d016      	beq.n	80079d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079a2:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <HAL_RCC_OscConfig+0x248>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a8:	f7fd fd34 	bl	8005414 <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079b0:	f7fd fd30 	bl	8005414 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e167      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079c2:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <HAL_RCC_OscConfig+0x240>)
 80079c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0f0      	beq.n	80079b0 <HAL_RCC_OscConfig+0x200>
 80079ce:	e01b      	b.n	8007a08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079d0:	4b09      	ldr	r3, [pc, #36]	; (80079f8 <HAL_RCC_OscConfig+0x248>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079d6:	f7fd fd1d 	bl	8005414 <HAL_GetTick>
 80079da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079dc:	e00e      	b.n	80079fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079de:	f7fd fd19 	bl	8005414 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d907      	bls.n	80079fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e150      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
 80079f0:	40023800 	.word	0x40023800
 80079f4:	42470000 	.word	0x42470000
 80079f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079fc:	4b88      	ldr	r3, [pc, #544]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 80079fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1ea      	bne.n	80079de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0304 	and.w	r3, r3, #4
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 8097 	beq.w	8007b44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a16:	2300      	movs	r3, #0
 8007a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a1a:	4b81      	ldr	r3, [pc, #516]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10f      	bne.n	8007a46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a26:	2300      	movs	r3, #0
 8007a28:	60bb      	str	r3, [r7, #8]
 8007a2a:	4b7d      	ldr	r3, [pc, #500]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2e:	4a7c      	ldr	r2, [pc, #496]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a34:	6413      	str	r3, [r2, #64]	; 0x40
 8007a36:	4b7a      	ldr	r3, [pc, #488]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a3e:	60bb      	str	r3, [r7, #8]
 8007a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a42:	2301      	movs	r3, #1
 8007a44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a46:	4b77      	ldr	r3, [pc, #476]	; (8007c24 <HAL_RCC_OscConfig+0x474>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d118      	bne.n	8007a84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a52:	4b74      	ldr	r3, [pc, #464]	; (8007c24 <HAL_RCC_OscConfig+0x474>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a73      	ldr	r2, [pc, #460]	; (8007c24 <HAL_RCC_OscConfig+0x474>)
 8007a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a5e:	f7fd fcd9 	bl	8005414 <HAL_GetTick>
 8007a62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a64:	e008      	b.n	8007a78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a66:	f7fd fcd5 	bl	8005414 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e10c      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a78:	4b6a      	ldr	r3, [pc, #424]	; (8007c24 <HAL_RCC_OscConfig+0x474>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f0      	beq.n	8007a66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d106      	bne.n	8007a9a <HAL_RCC_OscConfig+0x2ea>
 8007a8c:	4b64      	ldr	r3, [pc, #400]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a90:	4a63      	ldr	r2, [pc, #396]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	6713      	str	r3, [r2, #112]	; 0x70
 8007a98:	e01c      	b.n	8007ad4 <HAL_RCC_OscConfig+0x324>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	d10c      	bne.n	8007abc <HAL_RCC_OscConfig+0x30c>
 8007aa2:	4b5f      	ldr	r3, [pc, #380]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa6:	4a5e      	ldr	r2, [pc, #376]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007aa8:	f043 0304 	orr.w	r3, r3, #4
 8007aac:	6713      	str	r3, [r2, #112]	; 0x70
 8007aae:	4b5c      	ldr	r3, [pc, #368]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab2:	4a5b      	ldr	r2, [pc, #364]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007ab4:	f043 0301 	orr.w	r3, r3, #1
 8007ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aba:	e00b      	b.n	8007ad4 <HAL_RCC_OscConfig+0x324>
 8007abc:	4b58      	ldr	r3, [pc, #352]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac0:	4a57      	ldr	r2, [pc, #348]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007ac2:	f023 0301 	bic.w	r3, r3, #1
 8007ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac8:	4b55      	ldr	r3, [pc, #340]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007acc:	4a54      	ldr	r2, [pc, #336]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007ace:	f023 0304 	bic.w	r3, r3, #4
 8007ad2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d015      	beq.n	8007b08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007adc:	f7fd fc9a 	bl	8005414 <HAL_GetTick>
 8007ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae2:	e00a      	b.n	8007afa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ae4:	f7fd fc96 	bl	8005414 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e0cb      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007afa:	4b49      	ldr	r3, [pc, #292]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0ee      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x334>
 8007b06:	e014      	b.n	8007b32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b08:	f7fd fc84 	bl	8005414 <HAL_GetTick>
 8007b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b0e:	e00a      	b.n	8007b26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b10:	f7fd fc80 	bl	8005414 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e0b5      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b26:	4b3e      	ldr	r3, [pc, #248]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1ee      	bne.n	8007b10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b32:	7dfb      	ldrb	r3, [r7, #23]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d105      	bne.n	8007b44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b38:	4b39      	ldr	r3, [pc, #228]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3c:	4a38      	ldr	r2, [pc, #224]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007b3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 80a1 	beq.w	8007c90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b4e:	4b34      	ldr	r3, [pc, #208]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 030c 	and.w	r3, r3, #12
 8007b56:	2b08      	cmp	r3, #8
 8007b58:	d05c      	beq.n	8007c14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d141      	bne.n	8007be6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b62:	4b31      	ldr	r3, [pc, #196]	; (8007c28 <HAL_RCC_OscConfig+0x478>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b68:	f7fd fc54 	bl	8005414 <HAL_GetTick>
 8007b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b70:	f7fd fc50 	bl	8005414 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e087      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b82:	4b27      	ldr	r3, [pc, #156]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f0      	bne.n	8007b70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	69da      	ldr	r2, [r3, #28]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	019b      	lsls	r3, r3, #6
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	085b      	lsrs	r3, r3, #1
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	041b      	lsls	r3, r3, #16
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	061b      	lsls	r3, r3, #24
 8007bb2:	491b      	ldr	r1, [pc, #108]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bb8:	4b1b      	ldr	r3, [pc, #108]	; (8007c28 <HAL_RCC_OscConfig+0x478>)
 8007bba:	2201      	movs	r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bbe:	f7fd fc29 	bl	8005414 <HAL_GetTick>
 8007bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bc4:	e008      	b.n	8007bd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bc6:	f7fd fc25 	bl	8005414 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d901      	bls.n	8007bd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e05c      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bd8:	4b11      	ldr	r3, [pc, #68]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d0f0      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x416>
 8007be4:	e054      	b.n	8007c90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007be6:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <HAL_RCC_OscConfig+0x478>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bec:	f7fd fc12 	bl	8005414 <HAL_GetTick>
 8007bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf2:	e008      	b.n	8007c06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bf4:	f7fd fc0e 	bl	8005414 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e045      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c06:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <HAL_RCC_OscConfig+0x470>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f0      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x444>
 8007c12:	e03d      	b.n	8007c90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d107      	bne.n	8007c2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e038      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
 8007c20:	40023800 	.word	0x40023800
 8007c24:	40007000 	.word	0x40007000
 8007c28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c2c:	4b1b      	ldr	r3, [pc, #108]	; (8007c9c <HAL_RCC_OscConfig+0x4ec>)
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d028      	beq.n	8007c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d121      	bne.n	8007c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d11a      	bne.n	8007c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d111      	bne.n	8007c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	085b      	lsrs	r3, r3, #1
 8007c74:	3b01      	subs	r3, #1
 8007c76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d107      	bne.n	8007c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d001      	beq.n	8007c90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e000      	b.n	8007c92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3718      	adds	r7, #24
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	40023800 	.word	0x40023800

08007ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e0cc      	b.n	8007e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cb4:	4b68      	ldr	r3, [pc, #416]	; (8007e58 <HAL_RCC_ClockConfig+0x1b8>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d90c      	bls.n	8007cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cc2:	4b65      	ldr	r3, [pc, #404]	; (8007e58 <HAL_RCC_ClockConfig+0x1b8>)
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	b2d2      	uxtb	r2, r2
 8007cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cca:	4b63      	ldr	r3, [pc, #396]	; (8007e58 <HAL_RCC_ClockConfig+0x1b8>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d001      	beq.n	8007cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e0b8      	b.n	8007e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d020      	beq.n	8007d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d005      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cf4:	4b59      	ldr	r3, [pc, #356]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	4a58      	ldr	r2, [pc, #352]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007cfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0308 	and.w	r3, r3, #8
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d005      	beq.n	8007d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d0c:	4b53      	ldr	r3, [pc, #332]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	4a52      	ldr	r2, [pc, #328]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d18:	4b50      	ldr	r3, [pc, #320]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	494d      	ldr	r1, [pc, #308]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d044      	beq.n	8007dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d107      	bne.n	8007d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d3e:	4b47      	ldr	r3, [pc, #284]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d119      	bne.n	8007d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e07f      	b.n	8007e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d003      	beq.n	8007d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d107      	bne.n	8007d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d5e:	4b3f      	ldr	r3, [pc, #252]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e06f      	b.n	8007e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d6e:	4b3b      	ldr	r3, [pc, #236]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e067      	b.n	8007e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d7e:	4b37      	ldr	r3, [pc, #220]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f023 0203 	bic.w	r2, r3, #3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	4934      	ldr	r1, [pc, #208]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d90:	f7fd fb40 	bl	8005414 <HAL_GetTick>
 8007d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d96:	e00a      	b.n	8007dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d98:	f7fd fb3c 	bl	8005414 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e04f      	b.n	8007e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dae:	4b2b      	ldr	r3, [pc, #172]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	f003 020c 	and.w	r2, r3, #12
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d1eb      	bne.n	8007d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007dc0:	4b25      	ldr	r3, [pc, #148]	; (8007e58 <HAL_RCC_ClockConfig+0x1b8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d20c      	bcs.n	8007de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dce:	4b22      	ldr	r3, [pc, #136]	; (8007e58 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dd6:	4b20      	ldr	r3, [pc, #128]	; (8007e58 <HAL_RCC_ClockConfig+0x1b8>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d001      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e032      	b.n	8007e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0304 	and.w	r3, r3, #4
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d008      	beq.n	8007e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007df4:	4b19      	ldr	r3, [pc, #100]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	4916      	ldr	r1, [pc, #88]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0308 	and.w	r3, r3, #8
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d009      	beq.n	8007e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e12:	4b12      	ldr	r3, [pc, #72]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	490e      	ldr	r1, [pc, #56]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e26:	f000 f821 	bl	8007e6c <HAL_RCC_GetSysClockFreq>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <HAL_RCC_ClockConfig+0x1bc>)
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	091b      	lsrs	r3, r3, #4
 8007e32:	f003 030f 	and.w	r3, r3, #15
 8007e36:	490a      	ldr	r1, [pc, #40]	; (8007e60 <HAL_RCC_ClockConfig+0x1c0>)
 8007e38:	5ccb      	ldrb	r3, [r1, r3]
 8007e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3e:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e42:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fd faa0 	bl	800538c <HAL_InitTick>

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	40023c00 	.word	0x40023c00
 8007e5c:	40023800 	.word	0x40023800
 8007e60:	0801ed7c 	.word	0x0801ed7c
 8007e64:	20000008 	.word	0x20000008
 8007e68:	2000000c 	.word	0x2000000c

08007e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e70:	b090      	sub	sp, #64	; 0x40
 8007e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
 8007e78:	2300      	movs	r3, #0
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e84:	4b59      	ldr	r3, [pc, #356]	; (8007fec <HAL_RCC_GetSysClockFreq+0x180>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f003 030c 	and.w	r3, r3, #12
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d00d      	beq.n	8007eac <HAL_RCC_GetSysClockFreq+0x40>
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	f200 80a1 	bhi.w	8007fd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d003      	beq.n	8007ea6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007e9e:	e09b      	b.n	8007fd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ea0:	4b53      	ldr	r3, [pc, #332]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ea2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007ea4:	e09b      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ea6:	4b53      	ldr	r3, [pc, #332]	; (8007ff4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ea8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007eaa:	e098      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007eac:	4b4f      	ldr	r3, [pc, #316]	; (8007fec <HAL_RCC_GetSysClockFreq+0x180>)
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007eb6:	4b4d      	ldr	r3, [pc, #308]	; (8007fec <HAL_RCC_GetSysClockFreq+0x180>)
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d028      	beq.n	8007f14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ec2:	4b4a      	ldr	r3, [pc, #296]	; (8007fec <HAL_RCC_GetSysClockFreq+0x180>)
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	099b      	lsrs	r3, r3, #6
 8007ec8:	2200      	movs	r2, #0
 8007eca:	623b      	str	r3, [r7, #32]
 8007ecc:	627a      	str	r2, [r7, #36]	; 0x24
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	4b47      	ldr	r3, [pc, #284]	; (8007ff4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ed8:	fb03 f201 	mul.w	r2, r3, r1
 8007edc:	2300      	movs	r3, #0
 8007ede:	fb00 f303 	mul.w	r3, r0, r3
 8007ee2:	4413      	add	r3, r2
 8007ee4:	4a43      	ldr	r2, [pc, #268]	; (8007ff4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ee6:	fba0 1202 	umull	r1, r2, r0, r2
 8007eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eec:	460a      	mov	r2, r1
 8007eee:	62ba      	str	r2, [r7, #40]	; 0x28
 8007ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef2:	4413      	add	r3, r2
 8007ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef8:	2200      	movs	r2, #0
 8007efa:	61bb      	str	r3, [r7, #24]
 8007efc:	61fa      	str	r2, [r7, #28]
 8007efe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f06:	f7f8 fec9 	bl	8000c9c <__aeabi_uldivmod>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4613      	mov	r3, r2
 8007f10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f12:	e053      	b.n	8007fbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f14:	4b35      	ldr	r3, [pc, #212]	; (8007fec <HAL_RCC_GetSysClockFreq+0x180>)
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	099b      	lsrs	r3, r3, #6
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	613b      	str	r3, [r7, #16]
 8007f1e:	617a      	str	r2, [r7, #20]
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007f26:	f04f 0b00 	mov.w	fp, #0
 8007f2a:	4652      	mov	r2, sl
 8007f2c:	465b      	mov	r3, fp
 8007f2e:	f04f 0000 	mov.w	r0, #0
 8007f32:	f04f 0100 	mov.w	r1, #0
 8007f36:	0159      	lsls	r1, r3, #5
 8007f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f3c:	0150      	lsls	r0, r2, #5
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	ebb2 080a 	subs.w	r8, r2, sl
 8007f46:	eb63 090b 	sbc.w	r9, r3, fp
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007f56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007f5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007f5e:	ebb2 0408 	subs.w	r4, r2, r8
 8007f62:	eb63 0509 	sbc.w	r5, r3, r9
 8007f66:	f04f 0200 	mov.w	r2, #0
 8007f6a:	f04f 0300 	mov.w	r3, #0
 8007f6e:	00eb      	lsls	r3, r5, #3
 8007f70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f74:	00e2      	lsls	r2, r4, #3
 8007f76:	4614      	mov	r4, r2
 8007f78:	461d      	mov	r5, r3
 8007f7a:	eb14 030a 	adds.w	r3, r4, sl
 8007f7e:	603b      	str	r3, [r7, #0]
 8007f80:	eb45 030b 	adc.w	r3, r5, fp
 8007f84:	607b      	str	r3, [r7, #4]
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f92:	4629      	mov	r1, r5
 8007f94:	028b      	lsls	r3, r1, #10
 8007f96:	4621      	mov	r1, r4
 8007f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	028a      	lsls	r2, r1, #10
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	60bb      	str	r3, [r7, #8]
 8007faa:	60fa      	str	r2, [r7, #12]
 8007fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fb0:	f7f8 fe74 	bl	8000c9c <__aeabi_uldivmod>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4613      	mov	r3, r2
 8007fba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <HAL_RCC_GetSysClockFreq+0x180>)
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	0c1b      	lsrs	r3, r3, #16
 8007fc2:	f003 0303 	and.w	r3, r3, #3
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007fd6:	e002      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fd8:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007fda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3740      	adds	r7, #64	; 0x40
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fea:	bf00      	nop
 8007fec:	40023800 	.word	0x40023800
 8007ff0:	00f42400 	.word	0x00f42400
 8007ff4:	017d7840 	.word	0x017d7840

08007ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ffc:	4b03      	ldr	r3, [pc, #12]	; (800800c <HAL_RCC_GetHCLKFreq+0x14>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
}
 8008000:	4618      	mov	r0, r3
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	20000008 	.word	0x20000008

08008010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008014:	f7ff fff0 	bl	8007ff8 <HAL_RCC_GetHCLKFreq>
 8008018:	4602      	mov	r2, r0
 800801a:	4b05      	ldr	r3, [pc, #20]	; (8008030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	0a9b      	lsrs	r3, r3, #10
 8008020:	f003 0307 	and.w	r3, r3, #7
 8008024:	4903      	ldr	r1, [pc, #12]	; (8008034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008026:	5ccb      	ldrb	r3, [r1, r3]
 8008028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800802c:	4618      	mov	r0, r3
 800802e:	bd80      	pop	{r7, pc}
 8008030:	40023800 	.word	0x40023800
 8008034:	0801ed8c 	.word	0x0801ed8c

08008038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800803c:	f7ff ffdc 	bl	8007ff8 <HAL_RCC_GetHCLKFreq>
 8008040:	4602      	mov	r2, r0
 8008042:	4b05      	ldr	r3, [pc, #20]	; (8008058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	0b5b      	lsrs	r3, r3, #13
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	4903      	ldr	r1, [pc, #12]	; (800805c <HAL_RCC_GetPCLK2Freq+0x24>)
 800804e:	5ccb      	ldrb	r3, [r1, r3]
 8008050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008054:	4618      	mov	r0, r3
 8008056:	bd80      	pop	{r7, pc}
 8008058:	40023800 	.word	0x40023800
 800805c:	0801ed8c 	.word	0x0801ed8c

08008060 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d105      	bne.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008084:	2b00      	cmp	r3, #0
 8008086:	d035      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008088:	4b62      	ldr	r3, [pc, #392]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800808e:	f7fd f9c1 	bl	8005414 <HAL_GetTick>
 8008092:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008094:	e008      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008096:	f7fd f9bd 	bl	8005414 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d901      	bls.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e0b0      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080a8:	4b5b      	ldr	r3, [pc, #364]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1f0      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	019a      	lsls	r2, r3, #6
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	071b      	lsls	r3, r3, #28
 80080c0:	4955      	ldr	r1, [pc, #340]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80080c8:	4b52      	ldr	r3, [pc, #328]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80080ca:	2201      	movs	r2, #1
 80080cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080ce:	f7fd f9a1 	bl	8005414 <HAL_GetTick>
 80080d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080d4:	e008      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80080d6:	f7fd f99d 	bl	8005414 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d901      	bls.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e090      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080e8:	4b4b      	ldr	r3, [pc, #300]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0f0      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 8083 	beq.w	8008208 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	4b44      	ldr	r3, [pc, #272]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	4a43      	ldr	r2, [pc, #268]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800810c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008110:	6413      	str	r3, [r2, #64]	; 0x40
 8008112:	4b41      	ldr	r3, [pc, #260]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800811e:	4b3f      	ldr	r3, [pc, #252]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a3e      	ldr	r2, [pc, #248]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008128:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800812a:	f7fd f973 	bl	8005414 <HAL_GetTick>
 800812e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008130:	e008      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008132:	f7fd f96f 	bl	8005414 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e062      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008144:	4b35      	ldr	r3, [pc, #212]	; (800821c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0f0      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008150:	4b31      	ldr	r3, [pc, #196]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008158:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d02f      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	429a      	cmp	r2, r3
 800816c:	d028      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800816e:	4b2a      	ldr	r3, [pc, #168]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008176:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008178:	4b29      	ldr	r3, [pc, #164]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800817a:	2201      	movs	r2, #1
 800817c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800817e:	4b28      	ldr	r3, [pc, #160]	; (8008220 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008184:	4a24      	ldr	r2, [pc, #144]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800818a:	4b23      	ldr	r3, [pc, #140]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800818c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b01      	cmp	r3, #1
 8008194:	d114      	bne.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008196:	f7fd f93d 	bl	8005414 <HAL_GetTick>
 800819a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800819c:	e00a      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800819e:	f7fd f939 	bl	8005414 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e02a      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081b4:	4b18      	ldr	r3, [pc, #96]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0ee      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081cc:	d10d      	bne.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80081ce:	4b12      	ldr	r3, [pc, #72]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80081de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081e2:	490d      	ldr	r1, [pc, #52]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081e4:	4313      	orrs	r3, r2
 80081e6:	608b      	str	r3, [r1, #8]
 80081e8:	e005      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80081ea:	4b0b      	ldr	r3, [pc, #44]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	4a0a      	ldr	r2, [pc, #40]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80081f4:	6093      	str	r3, [r2, #8]
 80081f6:	4b08      	ldr	r3, [pc, #32]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008202:	4905      	ldr	r1, [pc, #20]	; (8008218 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008204:	4313      	orrs	r3, r2
 8008206:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	42470068 	.word	0x42470068
 8008218:	40023800 	.word	0x40023800
 800821c:	40007000 	.word	0x40007000
 8008220:	42470e40 	.word	0x42470e40

08008224 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e066      	b.n	8008308 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	7f5b      	ldrb	r3, [r3, #29]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d105      	bne.n	8008250 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7fc fce4 	bl	8004c18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	22ca      	movs	r2, #202	; 0xca
 800825c:	625a      	str	r2, [r3, #36]	; 0x24
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2253      	movs	r2, #83	; 0x53
 8008264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f87a 	bl	8008360 <RTC_EnterInitMode>
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d12c      	bne.n	80082d0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	6812      	ldr	r2, [r2, #0]
 8008280:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008288:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6899      	ldr	r1, [r3, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	68d2      	ldr	r2, [r2, #12]
 80082b0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	6919      	ldr	r1, [r3, #16]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	041a      	lsls	r2, r3, #16
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f881 	bl	80083ce <RTC_ExitInitMode>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d113      	bne.n	80082fe <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082e4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699a      	ldr	r2, [r3, #24]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	22ff      	movs	r2, #255	; 0xff
 8008304:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800832a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800832c:	f7fd f872 	bl	8005414 <HAL_GetTick>
 8008330:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008332:	e009      	b.n	8008348 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008334:	f7fd f86e 	bl	8005414 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008342:	d901      	bls.n	8008348 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e007      	b.n	8008358 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0ee      	beq.n	8008334 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837a:	2b00      	cmp	r3, #0
 800837c:	d122      	bne.n	80083c4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800838c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800838e:	f7fd f841 	bl	8005414 <HAL_GetTick>
 8008392:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008394:	e00c      	b.n	80083b0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008396:	f7fd f83d 	bl	8005414 <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083a4:	d904      	bls.n	80083b0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2204      	movs	r2, #4
 80083aa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d102      	bne.n	80083c4 <RTC_EnterInitMode+0x64>
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d1e8      	bne.n	8008396 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68da      	ldr	r2, [r3, #12]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083e8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f7ff ff89 	bl	8008310 <HAL_RTC_WaitForSynchro>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d004      	beq.n	800840e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2204      	movs	r2, #4
 8008408:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e07b      	b.n	8008522 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842e:	2b00      	cmp	r3, #0
 8008430:	d108      	bne.n	8008444 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800843a:	d009      	beq.n	8008450 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	61da      	str	r2, [r3, #28]
 8008442:	e005      	b.n	8008450 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d106      	bne.n	8008470 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7fc fbfe 	bl	8004c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008486:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008498:	431a      	orrs	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084a2:	431a      	orrs	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	431a      	orrs	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084c0:	431a      	orrs	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d4:	ea42 0103 	orr.w	r1, r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	0c1b      	lsrs	r3, r3, #16
 80084ee:	f003 0104 	and.w	r1, r3, #4
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	f003 0210 	and.w	r2, r3, #16
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69da      	ldr	r2, [r3, #28]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008510:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b088      	sub	sp, #32
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	603b      	str	r3, [r7, #0]
 8008536:	4613      	mov	r3, r2
 8008538:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008544:	2b01      	cmp	r3, #1
 8008546:	d101      	bne.n	800854c <HAL_SPI_Transmit+0x22>
 8008548:	2302      	movs	r3, #2
 800854a:	e126      	b.n	800879a <HAL_SPI_Transmit+0x270>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008554:	f7fc ff5e 	bl	8005414 <HAL_GetTick>
 8008558:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b01      	cmp	r3, #1
 8008568:	d002      	beq.n	8008570 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800856a:	2302      	movs	r3, #2
 800856c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800856e:	e10b      	b.n	8008788 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_SPI_Transmit+0x52>
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d102      	bne.n	8008582 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008580:	e102      	b.n	8008788 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2203      	movs	r2, #3
 8008586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	88fa      	ldrh	r2, [r7, #6]
 800859a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	88fa      	ldrh	r2, [r7, #6]
 80085a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085c8:	d10f      	bne.n	80085ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f4:	2b40      	cmp	r3, #64	; 0x40
 80085f6:	d007      	beq.n	8008608 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008606:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008610:	d14b      	bne.n	80086aa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <HAL_SPI_Transmit+0xf6>
 800861a:	8afb      	ldrh	r3, [r7, #22]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d13e      	bne.n	800869e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008624:	881a      	ldrh	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008630:	1c9a      	adds	r2, r3, #2
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800863a:	b29b      	uxth	r3, r3
 800863c:	3b01      	subs	r3, #1
 800863e:	b29a      	uxth	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008644:	e02b      	b.n	800869e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f003 0302 	and.w	r3, r3, #2
 8008650:	2b02      	cmp	r3, #2
 8008652:	d112      	bne.n	800867a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	881a      	ldrh	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008664:	1c9a      	adds	r2, r3, #2
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800866e:	b29b      	uxth	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	b29a      	uxth	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	86da      	strh	r2, [r3, #54]	; 0x36
 8008678:	e011      	b.n	800869e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800867a:	f7fc fecb 	bl	8005414 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	429a      	cmp	r2, r3
 8008688:	d803      	bhi.n	8008692 <HAL_SPI_Transmit+0x168>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008690:	d102      	bne.n	8008698 <HAL_SPI_Transmit+0x16e>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d102      	bne.n	800869e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800869c:	e074      	b.n	8008788 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1ce      	bne.n	8008646 <HAL_SPI_Transmit+0x11c>
 80086a8:	e04c      	b.n	8008744 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <HAL_SPI_Transmit+0x18e>
 80086b2:	8afb      	ldrh	r3, [r7, #22]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d140      	bne.n	800873a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	330c      	adds	r3, #12
 80086c2:	7812      	ldrb	r2, [r2, #0]
 80086c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ca:	1c5a      	adds	r2, r3, #1
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	3b01      	subs	r3, #1
 80086d8:	b29a      	uxth	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80086de:	e02c      	b.n	800873a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d113      	bne.n	8008716 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	330c      	adds	r3, #12
 80086f8:	7812      	ldrb	r2, [r2, #0]
 80086fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800870a:	b29b      	uxth	r3, r3
 800870c:	3b01      	subs	r3, #1
 800870e:	b29a      	uxth	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	86da      	strh	r2, [r3, #54]	; 0x36
 8008714:	e011      	b.n	800873a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008716:	f7fc fe7d 	bl	8005414 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d803      	bhi.n	800872e <HAL_SPI_Transmit+0x204>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800872c:	d102      	bne.n	8008734 <HAL_SPI_Transmit+0x20a>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008738:	e026      	b.n	8008788 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800873e:	b29b      	uxth	r3, r3
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1cd      	bne.n	80086e0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 fa55 	bl	8008bf8 <SPI_EndRxTxTransaction>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2220      	movs	r2, #32
 8008758:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008762:	2300      	movs	r3, #0
 8008764:	613b      	str	r3, [r7, #16]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	613b      	str	r3, [r7, #16]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	613b      	str	r3, [r7, #16]
 8008776:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	77fb      	strb	r3, [r7, #31]
 8008784:	e000      	b.n	8008788 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008786:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008798:	7ffb      	ldrb	r3, [r7, #31]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3720      	adds	r7, #32
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b08c      	sub	sp, #48	; 0x30
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	607a      	str	r2, [r7, #4]
 80087ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80087b0:	2301      	movs	r3, #1
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d101      	bne.n	80087c8 <HAL_SPI_TransmitReceive+0x26>
 80087c4:	2302      	movs	r3, #2
 80087c6:	e18a      	b.n	8008ade <HAL_SPI_TransmitReceive+0x33c>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087d0:	f7fc fe20 	bl	8005414 <HAL_GetTick>
 80087d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80087e6:	887b      	ldrh	r3, [r7, #2]
 80087e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80087ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d00f      	beq.n	8008812 <HAL_SPI_TransmitReceive+0x70>
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087f8:	d107      	bne.n	800880a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d103      	bne.n	800880a <HAL_SPI_TransmitReceive+0x68>
 8008802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008806:	2b04      	cmp	r3, #4
 8008808:	d003      	beq.n	8008812 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800880a:	2302      	movs	r3, #2
 800880c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008810:	e15b      	b.n	8008aca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d005      	beq.n	8008824 <HAL_SPI_TransmitReceive+0x82>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <HAL_SPI_TransmitReceive+0x82>
 800881e:	887b      	ldrh	r3, [r7, #2]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d103      	bne.n	800882c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800882a:	e14e      	b.n	8008aca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b04      	cmp	r3, #4
 8008836:	d003      	beq.n	8008840 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2205      	movs	r2, #5
 800883c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	887a      	ldrh	r2, [r7, #2]
 8008850:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	887a      	ldrh	r2, [r7, #2]
 8008856:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	887a      	ldrh	r2, [r7, #2]
 8008862:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	887a      	ldrh	r2, [r7, #2]
 8008868:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008880:	2b40      	cmp	r3, #64	; 0x40
 8008882:	d007      	beq.n	8008894 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008892:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800889c:	d178      	bne.n	8008990 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <HAL_SPI_TransmitReceive+0x10a>
 80088a6:	8b7b      	ldrh	r3, [r7, #26]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d166      	bne.n	800897a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	881a      	ldrh	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088bc:	1c9a      	adds	r2, r3, #2
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088d0:	e053      	b.n	800897a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d11b      	bne.n	8008918 <HAL_SPI_TransmitReceive+0x176>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d016      	beq.n	8008918 <HAL_SPI_TransmitReceive+0x176>
 80088ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d113      	bne.n	8008918 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f4:	881a      	ldrh	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008900:	1c9a      	adds	r2, r3, #2
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800890a:	b29b      	uxth	r3, r3
 800890c:	3b01      	subs	r3, #1
 800890e:	b29a      	uxth	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b01      	cmp	r3, #1
 8008924:	d119      	bne.n	800895a <HAL_SPI_TransmitReceive+0x1b8>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800892a:	b29b      	uxth	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d014      	beq.n	800895a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68da      	ldr	r2, [r3, #12]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	b292      	uxth	r2, r2
 800893c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	1c9a      	adds	r2, r3, #2
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800894c:	b29b      	uxth	r3, r3
 800894e:	3b01      	subs	r3, #1
 8008950:	b29a      	uxth	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008956:	2301      	movs	r3, #1
 8008958:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800895a:	f7fc fd5b 	bl	8005414 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008966:	429a      	cmp	r2, r3
 8008968:	d807      	bhi.n	800897a <HAL_SPI_TransmitReceive+0x1d8>
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008970:	d003      	beq.n	800897a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008978:	e0a7      	b.n	8008aca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1a6      	bne.n	80088d2 <HAL_SPI_TransmitReceive+0x130>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008988:	b29b      	uxth	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1a1      	bne.n	80088d2 <HAL_SPI_TransmitReceive+0x130>
 800898e:	e07c      	b.n	8008a8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <HAL_SPI_TransmitReceive+0x1fc>
 8008998:	8b7b      	ldrh	r3, [r7, #26]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d16b      	bne.n	8008a76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	330c      	adds	r3, #12
 80089a8:	7812      	ldrb	r2, [r2, #0]
 80089aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	3b01      	subs	r3, #1
 80089be:	b29a      	uxth	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089c4:	e057      	b.n	8008a76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d11c      	bne.n	8008a0e <HAL_SPI_TransmitReceive+0x26c>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089d8:	b29b      	uxth	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d017      	beq.n	8008a0e <HAL_SPI_TransmitReceive+0x26c>
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d114      	bne.n	8008a0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	330c      	adds	r3, #12
 80089ee:	7812      	ldrb	r2, [r2, #0]
 80089f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f6:	1c5a      	adds	r2, r3, #1
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	3b01      	subs	r3, #1
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d119      	bne.n	8008a50 <HAL_SPI_TransmitReceive+0x2ae>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d014      	beq.n	8008a50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68da      	ldr	r2, [r3, #12]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	3b01      	subs	r3, #1
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a50:	f7fc fce0 	bl	8005414 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d803      	bhi.n	8008a68 <HAL_SPI_TransmitReceive+0x2c6>
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a66:	d102      	bne.n	8008a6e <HAL_SPI_TransmitReceive+0x2cc>
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d103      	bne.n	8008a76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008a74:	e029      	b.n	8008aca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1a2      	bne.n	80089c6 <HAL_SPI_TransmitReceive+0x224>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d19d      	bne.n	80089c6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 f8b2 	bl	8008bf8 <SPI_EndRxTxTransaction>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d006      	beq.n	8008aa8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008aa6:	e010      	b.n	8008aca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10b      	bne.n	8008ac8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	617b      	str	r3, [r7, #20]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	e000      	b.n	8008aca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008ac8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ada:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3730      	adds	r7, #48	; 0x30
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b088      	sub	sp, #32
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	603b      	str	r3, [r7, #0]
 8008af4:	4613      	mov	r3, r2
 8008af6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008af8:	f7fc fc8c 	bl	8005414 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	4413      	add	r3, r2
 8008b06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b08:	f7fc fc84 	bl	8005414 <HAL_GetTick>
 8008b0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b0e:	4b39      	ldr	r3, [pc, #228]	; (8008bf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	015b      	lsls	r3, r3, #5
 8008b14:	0d1b      	lsrs	r3, r3, #20
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	fb02 f303 	mul.w	r3, r2, r3
 8008b1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b1e:	e054      	b.n	8008bca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b26:	d050      	beq.n	8008bca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b28:	f7fc fc74 	bl	8005414 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	69fa      	ldr	r2, [r7, #28]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d902      	bls.n	8008b3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d13d      	bne.n	8008bba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b56:	d111      	bne.n	8008b7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b60:	d004      	beq.n	8008b6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b6a:	d107      	bne.n	8008b7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b84:	d10f      	bne.n	8008ba6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e017      	b.n	8008bea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	689a      	ldr	r2, [r3, #8]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	bf0c      	ite	eq
 8008bda:	2301      	moveq	r3, #1
 8008bdc:	2300      	movne	r3, #0
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	461a      	mov	r2, r3
 8008be2:	79fb      	ldrb	r3, [r7, #7]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d19b      	bne.n	8008b20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3720      	adds	r7, #32
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000008 	.word	0x20000008

08008bf8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008c04:	4b1b      	ldr	r3, [pc, #108]	; (8008c74 <SPI_EndRxTxTransaction+0x7c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a1b      	ldr	r2, [pc, #108]	; (8008c78 <SPI_EndRxTxTransaction+0x80>)
 8008c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0e:	0d5b      	lsrs	r3, r3, #21
 8008c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c14:	fb02 f303 	mul.w	r3, r2, r3
 8008c18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c22:	d112      	bne.n	8008c4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2180      	movs	r1, #128	; 0x80
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f7ff ff5a 	bl	8008ae8 <SPI_WaitFlagStateUntilTimeout>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d016      	beq.n	8008c68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c3e:	f043 0220 	orr.w	r2, r3, #32
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e00f      	b.n	8008c6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00a      	beq.n	8008c66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c60:	2b80      	cmp	r3, #128	; 0x80
 8008c62:	d0f2      	beq.n	8008c4a <SPI_EndRxTxTransaction+0x52>
 8008c64:	e000      	b.n	8008c68 <SPI_EndRxTxTransaction+0x70>
        break;
 8008c66:	bf00      	nop
  }

  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000008 	.word	0x20000008
 8008c78:	165e9f81 	.word	0x165e9f81

08008c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e041      	b.n	8008d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7fc f82a 	bl	8004cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4610      	mov	r0, r2
 8008cbc:	f000 fa10 	bl	80090e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e041      	b.n	8008db0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d106      	bne.n	8008d46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f839 	bl	8008db8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3304      	adds	r3, #4
 8008d56:	4619      	mov	r1, r3
 8008d58:	4610      	mov	r0, r2
 8008d5a:	f000 f9c1 	bl	80090e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d101      	bne.n	8008dea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008de6:	2302      	movs	r3, #2
 8008de8:	e0ae      	b.n	8008f48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b0c      	cmp	r3, #12
 8008df6:	f200 809f 	bhi.w	8008f38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008dfa:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008e35 	.word	0x08008e35
 8008e04:	08008f39 	.word	0x08008f39
 8008e08:	08008f39 	.word	0x08008f39
 8008e0c:	08008f39 	.word	0x08008f39
 8008e10:	08008e75 	.word	0x08008e75
 8008e14:	08008f39 	.word	0x08008f39
 8008e18:	08008f39 	.word	0x08008f39
 8008e1c:	08008f39 	.word	0x08008f39
 8008e20:	08008eb7 	.word	0x08008eb7
 8008e24:	08008f39 	.word	0x08008f39
 8008e28:	08008f39 	.word	0x08008f39
 8008e2c:	08008f39 	.word	0x08008f39
 8008e30:	08008ef7 	.word	0x08008ef7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68b9      	ldr	r1, [r7, #8]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 f9f0 	bl	8009220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699a      	ldr	r2, [r3, #24]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f042 0208 	orr.w	r2, r2, #8
 8008e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699a      	ldr	r2, [r3, #24]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0204 	bic.w	r2, r2, #4
 8008e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6999      	ldr	r1, [r3, #24]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	691a      	ldr	r2, [r3, #16]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	619a      	str	r2, [r3, #24]
      break;
 8008e72:	e064      	b.n	8008f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68b9      	ldr	r1, [r7, #8]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 fa40 	bl	8009300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	699a      	ldr	r2, [r3, #24]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	699a      	ldr	r2, [r3, #24]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6999      	ldr	r1, [r3, #24]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	021a      	lsls	r2, r3, #8
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	430a      	orrs	r2, r1
 8008eb2:	619a      	str	r2, [r3, #24]
      break;
 8008eb4:	e043      	b.n	8008f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 fa95 	bl	80093ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69da      	ldr	r2, [r3, #28]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f042 0208 	orr.w	r2, r2, #8
 8008ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f022 0204 	bic.w	r2, r2, #4
 8008ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69d9      	ldr	r1, [r3, #28]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	691a      	ldr	r2, [r3, #16]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	61da      	str	r2, [r3, #28]
      break;
 8008ef4:	e023      	b.n	8008f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 fae9 	bl	80094d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	69da      	ldr	r2, [r3, #28]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69da      	ldr	r2, [r3, #28]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69d9      	ldr	r1, [r3, #28]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	021a      	lsls	r2, r3, #8
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	61da      	str	r2, [r3, #28]
      break;
 8008f36:	e002      	b.n	8008f3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d101      	bne.n	8008f6c <HAL_TIM_ConfigClockSource+0x1c>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e0b4      	b.n	80090d6 <HAL_TIM_ConfigClockSource+0x186>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa4:	d03e      	beq.n	8009024 <HAL_TIM_ConfigClockSource+0xd4>
 8008fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008faa:	f200 8087 	bhi.w	80090bc <HAL_TIM_ConfigClockSource+0x16c>
 8008fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb2:	f000 8086 	beq.w	80090c2 <HAL_TIM_ConfigClockSource+0x172>
 8008fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fba:	d87f      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x16c>
 8008fbc:	2b70      	cmp	r3, #112	; 0x70
 8008fbe:	d01a      	beq.n	8008ff6 <HAL_TIM_ConfigClockSource+0xa6>
 8008fc0:	2b70      	cmp	r3, #112	; 0x70
 8008fc2:	d87b      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x16c>
 8008fc4:	2b60      	cmp	r3, #96	; 0x60
 8008fc6:	d050      	beq.n	800906a <HAL_TIM_ConfigClockSource+0x11a>
 8008fc8:	2b60      	cmp	r3, #96	; 0x60
 8008fca:	d877      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x16c>
 8008fcc:	2b50      	cmp	r3, #80	; 0x50
 8008fce:	d03c      	beq.n	800904a <HAL_TIM_ConfigClockSource+0xfa>
 8008fd0:	2b50      	cmp	r3, #80	; 0x50
 8008fd2:	d873      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x16c>
 8008fd4:	2b40      	cmp	r3, #64	; 0x40
 8008fd6:	d058      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x13a>
 8008fd8:	2b40      	cmp	r3, #64	; 0x40
 8008fda:	d86f      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x16c>
 8008fdc:	2b30      	cmp	r3, #48	; 0x30
 8008fde:	d064      	beq.n	80090aa <HAL_TIM_ConfigClockSource+0x15a>
 8008fe0:	2b30      	cmp	r3, #48	; 0x30
 8008fe2:	d86b      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x16c>
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	d060      	beq.n	80090aa <HAL_TIM_ConfigClockSource+0x15a>
 8008fe8:	2b20      	cmp	r3, #32
 8008fea:	d867      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x16c>
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d05c      	beq.n	80090aa <HAL_TIM_ConfigClockSource+0x15a>
 8008ff0:	2b10      	cmp	r3, #16
 8008ff2:	d05a      	beq.n	80090aa <HAL_TIM_ConfigClockSource+0x15a>
 8008ff4:	e062      	b.n	80090bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	6899      	ldr	r1, [r3, #8]
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f000 fb35 	bl	8009674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	609a      	str	r2, [r3, #8]
      break;
 8009022:	e04f      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6818      	ldr	r0, [r3, #0]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	6899      	ldr	r1, [r3, #8]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f000 fb1e 	bl	8009674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009046:	609a      	str	r2, [r3, #8]
      break;
 8009048:	e03c      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	6859      	ldr	r1, [r3, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	461a      	mov	r2, r3
 8009058:	f000 fa92 	bl	8009580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2150      	movs	r1, #80	; 0x50
 8009062:	4618      	mov	r0, r3
 8009064:	f000 faeb 	bl	800963e <TIM_ITRx_SetConfig>
      break;
 8009068:	e02c      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6818      	ldr	r0, [r3, #0]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	6859      	ldr	r1, [r3, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	461a      	mov	r2, r3
 8009078:	f000 fab1 	bl	80095de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2160      	movs	r1, #96	; 0x60
 8009082:	4618      	mov	r0, r3
 8009084:	f000 fadb 	bl	800963e <TIM_ITRx_SetConfig>
      break;
 8009088:	e01c      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	6859      	ldr	r1, [r3, #4]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	461a      	mov	r2, r3
 8009098:	f000 fa72 	bl	8009580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2140      	movs	r1, #64	; 0x40
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 facb 	bl	800963e <TIM_ITRx_SetConfig>
      break;
 80090a8:	e00c      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4619      	mov	r1, r3
 80090b4:	4610      	mov	r0, r2
 80090b6:	f000 fac2 	bl	800963e <TIM_ITRx_SetConfig>
      break;
 80090ba:	e003      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	73fb      	strb	r3, [r7, #15]
      break;
 80090c0:	e000      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80090c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a40      	ldr	r2, [pc, #256]	; (80091f4 <TIM_Base_SetConfig+0x114>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d013      	beq.n	8009120 <TIM_Base_SetConfig+0x40>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090fe:	d00f      	beq.n	8009120 <TIM_Base_SetConfig+0x40>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a3d      	ldr	r2, [pc, #244]	; (80091f8 <TIM_Base_SetConfig+0x118>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00b      	beq.n	8009120 <TIM_Base_SetConfig+0x40>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a3c      	ldr	r2, [pc, #240]	; (80091fc <TIM_Base_SetConfig+0x11c>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d007      	beq.n	8009120 <TIM_Base_SetConfig+0x40>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a3b      	ldr	r2, [pc, #236]	; (8009200 <TIM_Base_SetConfig+0x120>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d003      	beq.n	8009120 <TIM_Base_SetConfig+0x40>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a3a      	ldr	r2, [pc, #232]	; (8009204 <TIM_Base_SetConfig+0x124>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d108      	bne.n	8009132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	4313      	orrs	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a2f      	ldr	r2, [pc, #188]	; (80091f4 <TIM_Base_SetConfig+0x114>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d02b      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009140:	d027      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a2c      	ldr	r2, [pc, #176]	; (80091f8 <TIM_Base_SetConfig+0x118>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d023      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a2b      	ldr	r2, [pc, #172]	; (80091fc <TIM_Base_SetConfig+0x11c>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d01f      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a2a      	ldr	r2, [pc, #168]	; (8009200 <TIM_Base_SetConfig+0x120>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d01b      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a29      	ldr	r2, [pc, #164]	; (8009204 <TIM_Base_SetConfig+0x124>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d017      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a28      	ldr	r2, [pc, #160]	; (8009208 <TIM_Base_SetConfig+0x128>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d013      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a27      	ldr	r2, [pc, #156]	; (800920c <TIM_Base_SetConfig+0x12c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00f      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a26      	ldr	r2, [pc, #152]	; (8009210 <TIM_Base_SetConfig+0x130>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00b      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a25      	ldr	r2, [pc, #148]	; (8009214 <TIM_Base_SetConfig+0x134>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d007      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a24      	ldr	r2, [pc, #144]	; (8009218 <TIM_Base_SetConfig+0x138>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d003      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a23      	ldr	r2, [pc, #140]	; (800921c <TIM_Base_SetConfig+0x13c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d108      	bne.n	80091a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	689a      	ldr	r2, [r3, #8]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a0a      	ldr	r2, [pc, #40]	; (80091f4 <TIM_Base_SetConfig+0x114>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d003      	beq.n	80091d8 <TIM_Base_SetConfig+0xf8>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a0c      	ldr	r2, [pc, #48]	; (8009204 <TIM_Base_SetConfig+0x124>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d103      	bne.n	80091e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	691a      	ldr	r2, [r3, #16]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	615a      	str	r2, [r3, #20]
}
 80091e6:	bf00      	nop
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	40010000 	.word	0x40010000
 80091f8:	40000400 	.word	0x40000400
 80091fc:	40000800 	.word	0x40000800
 8009200:	40000c00 	.word	0x40000c00
 8009204:	40010400 	.word	0x40010400
 8009208:	40014000 	.word	0x40014000
 800920c:	40014400 	.word	0x40014400
 8009210:	40014800 	.word	0x40014800
 8009214:	40001800 	.word	0x40001800
 8009218:	40001c00 	.word	0x40001c00
 800921c:	40002000 	.word	0x40002000

08009220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	f023 0201 	bic.w	r2, r3, #1
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800924e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f023 0303 	bic.w	r3, r3, #3
 8009256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	4313      	orrs	r3, r2
 8009260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f023 0302 	bic.w	r3, r3, #2
 8009268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	4313      	orrs	r3, r2
 8009272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a20      	ldr	r2, [pc, #128]	; (80092f8 <TIM_OC1_SetConfig+0xd8>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d003      	beq.n	8009284 <TIM_OC1_SetConfig+0x64>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a1f      	ldr	r2, [pc, #124]	; (80092fc <TIM_OC1_SetConfig+0xdc>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d10c      	bne.n	800929e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	f023 0308 	bic.w	r3, r3, #8
 800928a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	4313      	orrs	r3, r2
 8009294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f023 0304 	bic.w	r3, r3, #4
 800929c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a15      	ldr	r2, [pc, #84]	; (80092f8 <TIM_OC1_SetConfig+0xd8>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d003      	beq.n	80092ae <TIM_OC1_SetConfig+0x8e>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a14      	ldr	r2, [pc, #80]	; (80092fc <TIM_OC1_SetConfig+0xdc>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d111      	bne.n	80092d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	621a      	str	r2, [r3, #32]
}
 80092ec:	bf00      	nop
 80092ee:	371c      	adds	r7, #28
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	40010000 	.word	0x40010000
 80092fc:	40010400 	.word	0x40010400

08009300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	f023 0210 	bic.w	r2, r3, #16
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800932e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	021b      	lsls	r3, r3, #8
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	4313      	orrs	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f023 0320 	bic.w	r3, r3, #32
 800934a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	011b      	lsls	r3, r3, #4
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	4313      	orrs	r3, r2
 8009356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a22      	ldr	r2, [pc, #136]	; (80093e4 <TIM_OC2_SetConfig+0xe4>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d003      	beq.n	8009368 <TIM_OC2_SetConfig+0x68>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a21      	ldr	r2, [pc, #132]	; (80093e8 <TIM_OC2_SetConfig+0xe8>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d10d      	bne.n	8009384 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800936e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	011b      	lsls	r3, r3, #4
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	4313      	orrs	r3, r2
 800937a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009382:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a17      	ldr	r2, [pc, #92]	; (80093e4 <TIM_OC2_SetConfig+0xe4>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d003      	beq.n	8009394 <TIM_OC2_SetConfig+0x94>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a16      	ldr	r2, [pc, #88]	; (80093e8 <TIM_OC2_SetConfig+0xe8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d113      	bne.n	80093bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800939a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	621a      	str	r2, [r3, #32]
}
 80093d6:	bf00      	nop
 80093d8:	371c      	adds	r7, #28
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	40010000 	.word	0x40010000
 80093e8:	40010400 	.word	0x40010400

080093ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b087      	sub	sp, #28
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	69db      	ldr	r3, [r3, #28]
 8009412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800941a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f023 0303 	bic.w	r3, r3, #3
 8009422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	4313      	orrs	r3, r2
 800942c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	021b      	lsls	r3, r3, #8
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	4313      	orrs	r3, r2
 8009440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a21      	ldr	r2, [pc, #132]	; (80094cc <TIM_OC3_SetConfig+0xe0>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d003      	beq.n	8009452 <TIM_OC3_SetConfig+0x66>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a20      	ldr	r2, [pc, #128]	; (80094d0 <TIM_OC3_SetConfig+0xe4>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d10d      	bne.n	800946e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	021b      	lsls	r3, r3, #8
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	4313      	orrs	r3, r2
 8009464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800946c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a16      	ldr	r2, [pc, #88]	; (80094cc <TIM_OC3_SetConfig+0xe0>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d003      	beq.n	800947e <TIM_OC3_SetConfig+0x92>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a15      	ldr	r2, [pc, #84]	; (80094d0 <TIM_OC3_SetConfig+0xe4>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d113      	bne.n	80094a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800948c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	011b      	lsls	r3, r3, #4
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	4313      	orrs	r3, r2
 8009498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	011b      	lsls	r3, r3, #4
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	621a      	str	r2, [r3, #32]
}
 80094c0:	bf00      	nop
 80094c2:	371c      	adds	r7, #28
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	40010000 	.word	0x40010000
 80094d0:	40010400 	.word	0x40010400

080094d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800950a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	021b      	lsls	r3, r3, #8
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	4313      	orrs	r3, r2
 8009516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800951e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	031b      	lsls	r3, r3, #12
 8009526:	693a      	ldr	r2, [r7, #16]
 8009528:	4313      	orrs	r3, r2
 800952a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a12      	ldr	r2, [pc, #72]	; (8009578 <TIM_OC4_SetConfig+0xa4>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d003      	beq.n	800953c <TIM_OC4_SetConfig+0x68>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a11      	ldr	r2, [pc, #68]	; (800957c <TIM_OC4_SetConfig+0xa8>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d109      	bne.n	8009550 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	019b      	lsls	r3, r3, #6
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	4313      	orrs	r3, r2
 800954e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	697a      	ldr	r2, [r7, #20]
 8009554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	621a      	str	r2, [r3, #32]
}
 800956a:	bf00      	nop
 800956c:	371c      	adds	r7, #28
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	40010000 	.word	0x40010000
 800957c:	40010400 	.word	0x40010400

08009580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009580:	b480      	push	{r7}
 8009582:	b087      	sub	sp, #28
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	f023 0201 	bic.w	r2, r3, #1
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	011b      	lsls	r3, r3, #4
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f023 030a 	bic.w	r3, r3, #10
 80095bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	621a      	str	r2, [r3, #32]
}
 80095d2:	bf00      	nop
 80095d4:	371c      	adds	r7, #28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095de:	b480      	push	{r7}
 80095e0:	b087      	sub	sp, #28
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60f8      	str	r0, [r7, #12]
 80095e6:	60b9      	str	r1, [r7, #8]
 80095e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	f023 0210 	bic.w	r2, r3, #16
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a1b      	ldr	r3, [r3, #32]
 8009600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	031b      	lsls	r3, r3, #12
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	4313      	orrs	r3, r2
 8009612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800961a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	011b      	lsls	r3, r3, #4
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	4313      	orrs	r3, r2
 8009624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	621a      	str	r2, [r3, #32]
}
 8009632:	bf00      	nop
 8009634:	371c      	adds	r7, #28
 8009636:	46bd      	mov	sp, r7
 8009638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963c:	4770      	bx	lr

0800963e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800963e:	b480      	push	{r7}
 8009640:	b085      	sub	sp, #20
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4313      	orrs	r3, r2
 800965c:	f043 0307 	orr.w	r3, r3, #7
 8009660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	609a      	str	r2, [r3, #8]
}
 8009668:	bf00      	nop
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800968e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	021a      	lsls	r2, r3, #8
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	431a      	orrs	r2, r3
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	4313      	orrs	r3, r2
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	4313      	orrs	r3, r2
 80096a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	697a      	ldr	r2, [r7, #20]
 80096a6:	609a      	str	r2, [r3, #8]
}
 80096a8:	bf00      	nop
 80096aa:	371c      	adds	r7, #28
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d101      	bne.n	80096cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096c8:	2302      	movs	r3, #2
 80096ca:	e05a      	b.n	8009782 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a21      	ldr	r2, [pc, #132]	; (8009790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d022      	beq.n	8009756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009718:	d01d      	beq.n	8009756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a1d      	ldr	r2, [pc, #116]	; (8009794 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d018      	beq.n	8009756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a1b      	ldr	r2, [pc, #108]	; (8009798 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d013      	beq.n	8009756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a1a      	ldr	r2, [pc, #104]	; (800979c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d00e      	beq.n	8009756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a18      	ldr	r2, [pc, #96]	; (80097a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d009      	beq.n	8009756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a17      	ldr	r2, [pc, #92]	; (80097a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d004      	beq.n	8009756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a15      	ldr	r2, [pc, #84]	; (80097a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d10c      	bne.n	8009770 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800975c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	4313      	orrs	r3, r2
 8009766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	40010000 	.word	0x40010000
 8009794:	40000400 	.word	0x40000400
 8009798:	40000800 	.word	0x40000800
 800979c:	40000c00 	.word	0x40000c00
 80097a0:	40010400 	.word	0x40010400
 80097a4:	40014000 	.word	0x40014000
 80097a8:	40001800 	.word	0x40001800

080097ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e03f      	b.n	800983e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d106      	bne.n	80097d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7fb fb38 	bl	8004e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2224      	movs	r2, #36	; 0x24
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68da      	ldr	r2, [r3, #12]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f9cb 	bl	8009b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	691a      	ldr	r2, [r3, #16]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009804:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	695a      	ldr	r2, [r3, #20]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009814:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009824:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2220      	movs	r2, #32
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2220      	movs	r2, #32
 8009838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b08a      	sub	sp, #40	; 0x28
 800984a:	af02      	add	r7, sp, #8
 800984c:	60f8      	str	r0, [r7, #12]
 800984e:	60b9      	str	r1, [r7, #8]
 8009850:	603b      	str	r3, [r7, #0]
 8009852:	4613      	mov	r3, r2
 8009854:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009856:	2300      	movs	r3, #0
 8009858:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009860:	b2db      	uxtb	r3, r3
 8009862:	2b20      	cmp	r3, #32
 8009864:	d17c      	bne.n	8009960 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <HAL_UART_Transmit+0x2c>
 800986c:	88fb      	ldrh	r3, [r7, #6]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d101      	bne.n	8009876 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e075      	b.n	8009962 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800987c:	2b01      	cmp	r3, #1
 800987e:	d101      	bne.n	8009884 <HAL_UART_Transmit+0x3e>
 8009880:	2302      	movs	r3, #2
 8009882:	e06e      	b.n	8009962 <HAL_UART_Transmit+0x11c>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2221      	movs	r2, #33	; 0x21
 8009896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800989a:	f7fb fdbb 	bl	8005414 <HAL_GetTick>
 800989e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	88fa      	ldrh	r2, [r7, #6]
 80098a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	88fa      	ldrh	r2, [r7, #6]
 80098aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b4:	d108      	bne.n	80098c8 <HAL_UART_Transmit+0x82>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d104      	bne.n	80098c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	61bb      	str	r3, [r7, #24]
 80098c6:	e003      	b.n	80098d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098cc:	2300      	movs	r3, #0
 80098ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80098d8:	e02a      	b.n	8009930 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2200      	movs	r2, #0
 80098e2:	2180      	movs	r1, #128	; 0x80
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 f8e2 	bl	8009aae <UART_WaitOnFlagUntilTimeout>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e036      	b.n	8009962 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10b      	bne.n	8009912 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	881b      	ldrh	r3, [r3, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	3302      	adds	r3, #2
 800990e:	61bb      	str	r3, [r7, #24]
 8009910:	e007      	b.n	8009922 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	781a      	ldrb	r2, [r3, #0]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	3301      	adds	r3, #1
 8009920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009926:	b29b      	uxth	r3, r3
 8009928:	3b01      	subs	r3, #1
 800992a:	b29a      	uxth	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009934:	b29b      	uxth	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1cf      	bne.n	80098da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	2200      	movs	r2, #0
 8009942:	2140      	movs	r1, #64	; 0x40
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 f8b2 	bl	8009aae <UART_WaitOnFlagUntilTimeout>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009950:	2303      	movs	r3, #3
 8009952:	e006      	b.n	8009962 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2220      	movs	r2, #32
 8009958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	e000      	b.n	8009962 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009960:	2302      	movs	r3, #2
  }
}
 8009962:	4618      	mov	r0, r3
 8009964:	3720      	adds	r7, #32
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b08a      	sub	sp, #40	; 0x28
 800996e:	af02      	add	r7, sp, #8
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	60b9      	str	r1, [r7, #8]
 8009974:	603b      	str	r3, [r7, #0]
 8009976:	4613      	mov	r3, r2
 8009978:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b20      	cmp	r3, #32
 8009988:	f040 808c 	bne.w	8009aa4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d002      	beq.n	8009998 <HAL_UART_Receive+0x2e>
 8009992:	88fb      	ldrh	r3, [r7, #6]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e084      	b.n	8009aa6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d101      	bne.n	80099aa <HAL_UART_Receive+0x40>
 80099a6:	2302      	movs	r3, #2
 80099a8:	e07d      	b.n	8009aa6 <HAL_UART_Receive+0x13c>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2222      	movs	r2, #34	; 0x22
 80099bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099c6:	f7fb fd25 	bl	8005414 <HAL_GetTick>
 80099ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	88fa      	ldrh	r2, [r7, #6]
 80099d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	88fa      	ldrh	r2, [r7, #6]
 80099d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099e0:	d108      	bne.n	80099f4 <HAL_UART_Receive+0x8a>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d104      	bne.n	80099f4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	61bb      	str	r3, [r7, #24]
 80099f2:	e003      	b.n	80099fc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099f8:	2300      	movs	r3, #0
 80099fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009a04:	e043      	b.n	8009a8e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	2120      	movs	r1, #32
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f000 f84c 	bl	8009aae <UART_WaitOnFlagUntilTimeout>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e042      	b.n	8009aa6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10c      	bne.n	8009a40 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	3302      	adds	r3, #2
 8009a3c:	61bb      	str	r3, [r7, #24]
 8009a3e:	e01f      	b.n	8009a80 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a48:	d007      	beq.n	8009a5a <HAL_UART_Receive+0xf0>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <HAL_UART_Receive+0xfe>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d106      	bne.n	8009a68 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	701a      	strb	r2, [r3, #0]
 8009a66:	e008      	b.n	8009a7a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	3b01      	subs	r3, #1
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1b6      	bne.n	8009a06 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2220      	movs	r2, #32
 8009a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e000      	b.n	8009aa6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009aa4:	2302      	movs	r3, #2
  }
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3720      	adds	r7, #32
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b090      	sub	sp, #64	; 0x40
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	60f8      	str	r0, [r7, #12]
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	603b      	str	r3, [r7, #0]
 8009aba:	4613      	mov	r3, r2
 8009abc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009abe:	e050      	b.n	8009b62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ac6:	d04c      	beq.n	8009b62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d007      	beq.n	8009ade <UART_WaitOnFlagUntilTimeout+0x30>
 8009ace:	f7fb fca1 	bl	8005414 <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d241      	bcs.n	8009b62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	330c      	adds	r3, #12
 8009ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	e853 3f00 	ldrex	r3, [r3]
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	330c      	adds	r3, #12
 8009afc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009afe:	637a      	str	r2, [r7, #52]	; 0x34
 8009b00:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b06:	e841 2300 	strex	r3, r2, [r1]
 8009b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1e5      	bne.n	8009ade <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	3314      	adds	r3, #20
 8009b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	e853 3f00 	ldrex	r3, [r3]
 8009b20:	613b      	str	r3, [r7, #16]
   return(result);
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	f023 0301 	bic.w	r3, r3, #1
 8009b28:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3314      	adds	r3, #20
 8009b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b32:	623a      	str	r2, [r7, #32]
 8009b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b36:	69f9      	ldr	r1, [r7, #28]
 8009b38:	6a3a      	ldr	r2, [r7, #32]
 8009b3a:	e841 2300 	strex	r3, r2, [r1]
 8009b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1e5      	bne.n	8009b12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2220      	movs	r2, #32
 8009b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2220      	movs	r2, #32
 8009b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e00f      	b.n	8009b82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	bf0c      	ite	eq
 8009b72:	2301      	moveq	r3, #1
 8009b74:	2300      	movne	r3, #0
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	461a      	mov	r2, r3
 8009b7a:	79fb      	ldrb	r3, [r7, #7]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d09f      	beq.n	8009ac0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3740      	adds	r7, #64	; 0x40
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
	...

08009b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b90:	b0c0      	sub	sp, #256	; 0x100
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ba8:	68d9      	ldr	r1, [r3, #12]
 8009baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	ea40 0301 	orr.w	r3, r0, r1
 8009bb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bba:	689a      	ldr	r2, [r3, #8]
 8009bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009be4:	f021 010c 	bic.w	r1, r1, #12
 8009be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009bf2:	430b      	orrs	r3, r1
 8009bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c06:	6999      	ldr	r1, [r3, #24]
 8009c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	ea40 0301 	orr.w	r3, r0, r1
 8009c12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	4b8f      	ldr	r3, [pc, #572]	; (8009e58 <UART_SetConfig+0x2cc>)
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d005      	beq.n	8009c2c <UART_SetConfig+0xa0>
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	4b8d      	ldr	r3, [pc, #564]	; (8009e5c <UART_SetConfig+0x2d0>)
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d104      	bne.n	8009c36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c2c:	f7fe fa04 	bl	8008038 <HAL_RCC_GetPCLK2Freq>
 8009c30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009c34:	e003      	b.n	8009c3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c36:	f7fe f9eb 	bl	8008010 <HAL_RCC_GetPCLK1Freq>
 8009c3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c42:	69db      	ldr	r3, [r3, #28]
 8009c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c48:	f040 810c 	bne.w	8009e64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c50:	2200      	movs	r2, #0
 8009c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009c5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009c5e:	4622      	mov	r2, r4
 8009c60:	462b      	mov	r3, r5
 8009c62:	1891      	adds	r1, r2, r2
 8009c64:	65b9      	str	r1, [r7, #88]	; 0x58
 8009c66:	415b      	adcs	r3, r3
 8009c68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c6e:	4621      	mov	r1, r4
 8009c70:	eb12 0801 	adds.w	r8, r2, r1
 8009c74:	4629      	mov	r1, r5
 8009c76:	eb43 0901 	adc.w	r9, r3, r1
 8009c7a:	f04f 0200 	mov.w	r2, #0
 8009c7e:	f04f 0300 	mov.w	r3, #0
 8009c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c8e:	4690      	mov	r8, r2
 8009c90:	4699      	mov	r9, r3
 8009c92:	4623      	mov	r3, r4
 8009c94:	eb18 0303 	adds.w	r3, r8, r3
 8009c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c9c:	462b      	mov	r3, r5
 8009c9e:	eb49 0303 	adc.w	r3, r9, r3
 8009ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009cb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009cba:	460b      	mov	r3, r1
 8009cbc:	18db      	adds	r3, r3, r3
 8009cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	eb42 0303 	adc.w	r3, r2, r3
 8009cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8009cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009ccc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009cd0:	f7f6 ffe4 	bl	8000c9c <__aeabi_uldivmod>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	4b61      	ldr	r3, [pc, #388]	; (8009e60 <UART_SetConfig+0x2d4>)
 8009cda:	fba3 2302 	umull	r2, r3, r3, r2
 8009cde:	095b      	lsrs	r3, r3, #5
 8009ce0:	011c      	lsls	r4, r3, #4
 8009ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009cf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009cf4:	4642      	mov	r2, r8
 8009cf6:	464b      	mov	r3, r9
 8009cf8:	1891      	adds	r1, r2, r2
 8009cfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8009cfc:	415b      	adcs	r3, r3
 8009cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d04:	4641      	mov	r1, r8
 8009d06:	eb12 0a01 	adds.w	sl, r2, r1
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	eb43 0b01 	adc.w	fp, r3, r1
 8009d10:	f04f 0200 	mov.w	r2, #0
 8009d14:	f04f 0300 	mov.w	r3, #0
 8009d18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d24:	4692      	mov	sl, r2
 8009d26:	469b      	mov	fp, r3
 8009d28:	4643      	mov	r3, r8
 8009d2a:	eb1a 0303 	adds.w	r3, sl, r3
 8009d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d32:	464b      	mov	r3, r9
 8009d34:	eb4b 0303 	adc.w	r3, fp, r3
 8009d38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009d4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009d50:	460b      	mov	r3, r1
 8009d52:	18db      	adds	r3, r3, r3
 8009d54:	643b      	str	r3, [r7, #64]	; 0x40
 8009d56:	4613      	mov	r3, r2
 8009d58:	eb42 0303 	adc.w	r3, r2, r3
 8009d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8009d5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009d66:	f7f6 ff99 	bl	8000c9c <__aeabi_uldivmod>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4611      	mov	r1, r2
 8009d70:	4b3b      	ldr	r3, [pc, #236]	; (8009e60 <UART_SetConfig+0x2d4>)
 8009d72:	fba3 2301 	umull	r2, r3, r3, r1
 8009d76:	095b      	lsrs	r3, r3, #5
 8009d78:	2264      	movs	r2, #100	; 0x64
 8009d7a:	fb02 f303 	mul.w	r3, r2, r3
 8009d7e:	1acb      	subs	r3, r1, r3
 8009d80:	00db      	lsls	r3, r3, #3
 8009d82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009d86:	4b36      	ldr	r3, [pc, #216]	; (8009e60 <UART_SetConfig+0x2d4>)
 8009d88:	fba3 2302 	umull	r2, r3, r3, r2
 8009d8c:	095b      	lsrs	r3, r3, #5
 8009d8e:	005b      	lsls	r3, r3, #1
 8009d90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d94:	441c      	add	r4, r3
 8009d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009da0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009da4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009da8:	4642      	mov	r2, r8
 8009daa:	464b      	mov	r3, r9
 8009dac:	1891      	adds	r1, r2, r2
 8009dae:	63b9      	str	r1, [r7, #56]	; 0x38
 8009db0:	415b      	adcs	r3, r3
 8009db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009db8:	4641      	mov	r1, r8
 8009dba:	1851      	adds	r1, r2, r1
 8009dbc:	6339      	str	r1, [r7, #48]	; 0x30
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	414b      	adcs	r3, r1
 8009dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8009dc4:	f04f 0200 	mov.w	r2, #0
 8009dc8:	f04f 0300 	mov.w	r3, #0
 8009dcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009dd0:	4659      	mov	r1, fp
 8009dd2:	00cb      	lsls	r3, r1, #3
 8009dd4:	4651      	mov	r1, sl
 8009dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dda:	4651      	mov	r1, sl
 8009ddc:	00ca      	lsls	r2, r1, #3
 8009dde:	4610      	mov	r0, r2
 8009de0:	4619      	mov	r1, r3
 8009de2:	4603      	mov	r3, r0
 8009de4:	4642      	mov	r2, r8
 8009de6:	189b      	adds	r3, r3, r2
 8009de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009dec:	464b      	mov	r3, r9
 8009dee:	460a      	mov	r2, r1
 8009df0:	eb42 0303 	adc.w	r3, r2, r3
 8009df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	18db      	adds	r3, r3, r3
 8009e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e12:	4613      	mov	r3, r2
 8009e14:	eb42 0303 	adc.w	r3, r2, r3
 8009e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009e22:	f7f6 ff3b 	bl	8000c9c <__aeabi_uldivmod>
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4b0d      	ldr	r3, [pc, #52]	; (8009e60 <UART_SetConfig+0x2d4>)
 8009e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e30:	095b      	lsrs	r3, r3, #5
 8009e32:	2164      	movs	r1, #100	; 0x64
 8009e34:	fb01 f303 	mul.w	r3, r1, r3
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	3332      	adds	r3, #50	; 0x32
 8009e3e:	4a08      	ldr	r2, [pc, #32]	; (8009e60 <UART_SetConfig+0x2d4>)
 8009e40:	fba2 2303 	umull	r2, r3, r2, r3
 8009e44:	095b      	lsrs	r3, r3, #5
 8009e46:	f003 0207 	and.w	r2, r3, #7
 8009e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4422      	add	r2, r4
 8009e52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e54:	e106      	b.n	800a064 <UART_SetConfig+0x4d8>
 8009e56:	bf00      	nop
 8009e58:	40011000 	.word	0x40011000
 8009e5c:	40011400 	.word	0x40011400
 8009e60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009e6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009e72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009e76:	4642      	mov	r2, r8
 8009e78:	464b      	mov	r3, r9
 8009e7a:	1891      	adds	r1, r2, r2
 8009e7c:	6239      	str	r1, [r7, #32]
 8009e7e:	415b      	adcs	r3, r3
 8009e80:	627b      	str	r3, [r7, #36]	; 0x24
 8009e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e86:	4641      	mov	r1, r8
 8009e88:	1854      	adds	r4, r2, r1
 8009e8a:	4649      	mov	r1, r9
 8009e8c:	eb43 0501 	adc.w	r5, r3, r1
 8009e90:	f04f 0200 	mov.w	r2, #0
 8009e94:	f04f 0300 	mov.w	r3, #0
 8009e98:	00eb      	lsls	r3, r5, #3
 8009e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e9e:	00e2      	lsls	r2, r4, #3
 8009ea0:	4614      	mov	r4, r2
 8009ea2:	461d      	mov	r5, r3
 8009ea4:	4643      	mov	r3, r8
 8009ea6:	18e3      	adds	r3, r4, r3
 8009ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009eac:	464b      	mov	r3, r9
 8009eae:	eb45 0303 	adc.w	r3, r5, r3
 8009eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ec2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ec6:	f04f 0200 	mov.w	r2, #0
 8009eca:	f04f 0300 	mov.w	r3, #0
 8009ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	008b      	lsls	r3, r1, #2
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009edc:	4621      	mov	r1, r4
 8009ede:	008a      	lsls	r2, r1, #2
 8009ee0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ee4:	f7f6 feda 	bl	8000c9c <__aeabi_uldivmod>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	4b60      	ldr	r3, [pc, #384]	; (800a070 <UART_SetConfig+0x4e4>)
 8009eee:	fba3 2302 	umull	r2, r3, r3, r2
 8009ef2:	095b      	lsrs	r3, r3, #5
 8009ef4:	011c      	lsls	r4, r3, #4
 8009ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009efa:	2200      	movs	r2, #0
 8009efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009f08:	4642      	mov	r2, r8
 8009f0a:	464b      	mov	r3, r9
 8009f0c:	1891      	adds	r1, r2, r2
 8009f0e:	61b9      	str	r1, [r7, #24]
 8009f10:	415b      	adcs	r3, r3
 8009f12:	61fb      	str	r3, [r7, #28]
 8009f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f18:	4641      	mov	r1, r8
 8009f1a:	1851      	adds	r1, r2, r1
 8009f1c:	6139      	str	r1, [r7, #16]
 8009f1e:	4649      	mov	r1, r9
 8009f20:	414b      	adcs	r3, r1
 8009f22:	617b      	str	r3, [r7, #20]
 8009f24:	f04f 0200 	mov.w	r2, #0
 8009f28:	f04f 0300 	mov.w	r3, #0
 8009f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f30:	4659      	mov	r1, fp
 8009f32:	00cb      	lsls	r3, r1, #3
 8009f34:	4651      	mov	r1, sl
 8009f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f3a:	4651      	mov	r1, sl
 8009f3c:	00ca      	lsls	r2, r1, #3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	4619      	mov	r1, r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	4642      	mov	r2, r8
 8009f46:	189b      	adds	r3, r3, r2
 8009f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f4c:	464b      	mov	r3, r9
 8009f4e:	460a      	mov	r2, r1
 8009f50:	eb42 0303 	adc.w	r3, r2, r3
 8009f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009f64:	f04f 0200 	mov.w	r2, #0
 8009f68:	f04f 0300 	mov.w	r3, #0
 8009f6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009f70:	4649      	mov	r1, r9
 8009f72:	008b      	lsls	r3, r1, #2
 8009f74:	4641      	mov	r1, r8
 8009f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f7a:	4641      	mov	r1, r8
 8009f7c:	008a      	lsls	r2, r1, #2
 8009f7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009f82:	f7f6 fe8b 	bl	8000c9c <__aeabi_uldivmod>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4611      	mov	r1, r2
 8009f8c:	4b38      	ldr	r3, [pc, #224]	; (800a070 <UART_SetConfig+0x4e4>)
 8009f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8009f92:	095b      	lsrs	r3, r3, #5
 8009f94:	2264      	movs	r2, #100	; 0x64
 8009f96:	fb02 f303 	mul.w	r3, r2, r3
 8009f9a:	1acb      	subs	r3, r1, r3
 8009f9c:	011b      	lsls	r3, r3, #4
 8009f9e:	3332      	adds	r3, #50	; 0x32
 8009fa0:	4a33      	ldr	r2, [pc, #204]	; (800a070 <UART_SetConfig+0x4e4>)
 8009fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa6:	095b      	lsrs	r3, r3, #5
 8009fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fac:	441c      	add	r4, r3
 8009fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	673b      	str	r3, [r7, #112]	; 0x70
 8009fb6:	677a      	str	r2, [r7, #116]	; 0x74
 8009fb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009fbc:	4642      	mov	r2, r8
 8009fbe:	464b      	mov	r3, r9
 8009fc0:	1891      	adds	r1, r2, r2
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	415b      	adcs	r3, r3
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fcc:	4641      	mov	r1, r8
 8009fce:	1851      	adds	r1, r2, r1
 8009fd0:	6039      	str	r1, [r7, #0]
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	414b      	adcs	r3, r1
 8009fd6:	607b      	str	r3, [r7, #4]
 8009fd8:	f04f 0200 	mov.w	r2, #0
 8009fdc:	f04f 0300 	mov.w	r3, #0
 8009fe0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009fe4:	4659      	mov	r1, fp
 8009fe6:	00cb      	lsls	r3, r1, #3
 8009fe8:	4651      	mov	r1, sl
 8009fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fee:	4651      	mov	r1, sl
 8009ff0:	00ca      	lsls	r2, r1, #3
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	189b      	adds	r3, r3, r2
 8009ffc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ffe:	464b      	mov	r3, r9
 800a000:	460a      	mov	r2, r1
 800a002:	eb42 0303 	adc.w	r3, r2, r3
 800a006:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	663b      	str	r3, [r7, #96]	; 0x60
 800a012:	667a      	str	r2, [r7, #100]	; 0x64
 800a014:	f04f 0200 	mov.w	r2, #0
 800a018:	f04f 0300 	mov.w	r3, #0
 800a01c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a020:	4649      	mov	r1, r9
 800a022:	008b      	lsls	r3, r1, #2
 800a024:	4641      	mov	r1, r8
 800a026:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a02a:	4641      	mov	r1, r8
 800a02c:	008a      	lsls	r2, r1, #2
 800a02e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a032:	f7f6 fe33 	bl	8000c9c <__aeabi_uldivmod>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	4b0d      	ldr	r3, [pc, #52]	; (800a070 <UART_SetConfig+0x4e4>)
 800a03c:	fba3 1302 	umull	r1, r3, r3, r2
 800a040:	095b      	lsrs	r3, r3, #5
 800a042:	2164      	movs	r1, #100	; 0x64
 800a044:	fb01 f303 	mul.w	r3, r1, r3
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	011b      	lsls	r3, r3, #4
 800a04c:	3332      	adds	r3, #50	; 0x32
 800a04e:	4a08      	ldr	r2, [pc, #32]	; (800a070 <UART_SetConfig+0x4e4>)
 800a050:	fba2 2303 	umull	r2, r3, r2, r3
 800a054:	095b      	lsrs	r3, r3, #5
 800a056:	f003 020f 	and.w	r2, r3, #15
 800a05a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4422      	add	r2, r4
 800a062:	609a      	str	r2, [r3, #8]
}
 800a064:	bf00      	nop
 800a066:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a06a:	46bd      	mov	sp, r7
 800a06c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a070:	51eb851f 	.word	0x51eb851f

0800a074 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a078:	4904      	ldr	r1, [pc, #16]	; (800a08c <MX_FATFS_Init+0x18>)
 800a07a:	4805      	ldr	r0, [pc, #20]	; (800a090 <MX_FATFS_Init+0x1c>)
 800a07c:	f002 fd04 	bl	800ca88 <FATFS_LinkDriver>
 800a080:	4603      	mov	r3, r0
 800a082:	461a      	mov	r2, r3
 800a084:	4b03      	ldr	r3, [pc, #12]	; (800a094 <MX_FATFS_Init+0x20>)
 800a086:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a088:	bf00      	nop
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20003d10 	.word	0x20003d10
 800a090:	20000014 	.word	0x20000014
 800a094:	20003d0c 	.word	0x20003d0c

0800a098 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a098:	b480      	push	{r7}
 800a09a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a09c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a0b2:	79fb      	ldrb	r3, [r7, #7]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7f9 f975 	bl	80033a4 <SD_disk_initialize>
 800a0ba:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7f9 fa4d 	bl	8003570 <SD_disk_status>
 800a0d6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60b9      	str	r1, [r7, #8]
 800a0e8:	607a      	str	r2, [r7, #4]
 800a0ea:	603b      	str	r3, [r7, #0]
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800a0f0:	7bf8      	ldrb	r0, [r7, #15]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	68b9      	ldr	r1, [r7, #8]
 800a0f8:	f7f9 fa50 	bl	800359c <SD_disk_read>
 800a0fc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
 800a112:	4603      	mov	r3, r0
 800a114:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800a116:	7bf8      	ldrb	r0, [r7, #15]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	68b9      	ldr	r1, [r7, #8]
 800a11e:	f7f9 faa7 	bl	8003670 <SD_disk_write>
 800a122:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	4603      	mov	r3, r0
 800a134:	603a      	str	r2, [r7, #0]
 800a136:	71fb      	strb	r3, [r7, #7]
 800a138:	460b      	mov	r3, r1
 800a13a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a13c:	79b9      	ldrb	r1, [r7, #6]
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	683a      	ldr	r2, [r7, #0]
 800a142:	4618      	mov	r0, r3
 800a144:	f7f9 fb18 	bl	8003778 <SD_disk_ioctl>
 800a148:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
	...

0800a154 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	4603      	mov	r3, r0
 800a15c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a15e:	79fb      	ldrb	r3, [r7, #7]
 800a160:	4a08      	ldr	r2, [pc, #32]	; (800a184 <disk_status+0x30>)
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	4413      	add	r3, r2
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	79fa      	ldrb	r2, [r7, #7]
 800a16c:	4905      	ldr	r1, [pc, #20]	; (800a184 <disk_status+0x30>)
 800a16e:	440a      	add	r2, r1
 800a170:	7a12      	ldrb	r2, [r2, #8]
 800a172:	4610      	mov	r0, r2
 800a174:	4798      	blx	r3
 800a176:	4603      	mov	r3, r0
 800a178:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20003d3c 	.word	0x20003d3c

0800a188 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a196:	79fb      	ldrb	r3, [r7, #7]
 800a198:	4a0d      	ldr	r2, [pc, #52]	; (800a1d0 <disk_initialize+0x48>)
 800a19a:	5cd3      	ldrb	r3, [r2, r3]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d111      	bne.n	800a1c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a1a0:	79fb      	ldrb	r3, [r7, #7]
 800a1a2:	4a0b      	ldr	r2, [pc, #44]	; (800a1d0 <disk_initialize+0x48>)
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a1a8:	79fb      	ldrb	r3, [r7, #7]
 800a1aa:	4a09      	ldr	r2, [pc, #36]	; (800a1d0 <disk_initialize+0x48>)
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	79fa      	ldrb	r2, [r7, #7]
 800a1b6:	4906      	ldr	r1, [pc, #24]	; (800a1d0 <disk_initialize+0x48>)
 800a1b8:	440a      	add	r2, r1
 800a1ba:	7a12      	ldrb	r2, [r2, #8]
 800a1bc:	4610      	mov	r0, r2
 800a1be:	4798      	blx	r3
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20003d3c 	.word	0x20003d3c

0800a1d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a1d4:	b590      	push	{r4, r7, lr}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	607a      	str	r2, [r7, #4]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a1e4:	7bfb      	ldrb	r3, [r7, #15]
 800a1e6:	4a0a      	ldr	r2, [pc, #40]	; (800a210 <disk_read+0x3c>)
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4413      	add	r3, r2
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	689c      	ldr	r4, [r3, #8]
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
 800a1f2:	4a07      	ldr	r2, [pc, #28]	; (800a210 <disk_read+0x3c>)
 800a1f4:	4413      	add	r3, r2
 800a1f6:	7a18      	ldrb	r0, [r3, #8]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	68b9      	ldr	r1, [r7, #8]
 800a1fe:	47a0      	blx	r4
 800a200:	4603      	mov	r3, r0
 800a202:	75fb      	strb	r3, [r7, #23]
  return res;
 800a204:	7dfb      	ldrb	r3, [r7, #23]
}
 800a206:	4618      	mov	r0, r3
 800a208:	371c      	adds	r7, #28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd90      	pop	{r4, r7, pc}
 800a20e:	bf00      	nop
 800a210:	20003d3c 	.word	0x20003d3c

0800a214 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a214:	b590      	push	{r4, r7, lr}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60b9      	str	r1, [r7, #8]
 800a21c:	607a      	str	r2, [r7, #4]
 800a21e:	603b      	str	r3, [r7, #0]
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	4a0a      	ldr	r2, [pc, #40]	; (800a250 <disk_write+0x3c>)
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	68dc      	ldr	r4, [r3, #12]
 800a230:	7bfb      	ldrb	r3, [r7, #15]
 800a232:	4a07      	ldr	r2, [pc, #28]	; (800a250 <disk_write+0x3c>)
 800a234:	4413      	add	r3, r2
 800a236:	7a18      	ldrb	r0, [r3, #8]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	68b9      	ldr	r1, [r7, #8]
 800a23e:	47a0      	blx	r4
 800a240:	4603      	mov	r3, r0
 800a242:	75fb      	strb	r3, [r7, #23]
  return res;
 800a244:	7dfb      	ldrb	r3, [r7, #23]
}
 800a246:	4618      	mov	r0, r3
 800a248:	371c      	adds	r7, #28
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd90      	pop	{r4, r7, pc}
 800a24e:	bf00      	nop
 800a250:	20003d3c 	.word	0x20003d3c

0800a254 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	4603      	mov	r3, r0
 800a25c:	603a      	str	r2, [r7, #0]
 800a25e:	71fb      	strb	r3, [r7, #7]
 800a260:	460b      	mov	r3, r1
 800a262:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	4a09      	ldr	r2, [pc, #36]	; (800a28c <disk_ioctl+0x38>)
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	79fa      	ldrb	r2, [r7, #7]
 800a272:	4906      	ldr	r1, [pc, #24]	; (800a28c <disk_ioctl+0x38>)
 800a274:	440a      	add	r2, r1
 800a276:	7a10      	ldrb	r0, [r2, #8]
 800a278:	79b9      	ldrb	r1, [r7, #6]
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4798      	blx	r3
 800a27e:	4603      	mov	r3, r0
 800a280:	73fb      	strb	r3, [r7, #15]
  return res;
 800a282:	7bfb      	ldrb	r3, [r7, #15]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	20003d3c 	.word	0x20003d3c

0800a290 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3301      	adds	r3, #1
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a2a0:	89fb      	ldrh	r3, [r7, #14]
 800a2a2:	021b      	lsls	r3, r3, #8
 800a2a4:	b21a      	sxth	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	b21b      	sxth	r3, r3
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	b21b      	sxth	r3, r3
 800a2b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a2b2:	89fb      	ldrh	r3, [r7, #14]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3303      	adds	r3, #3
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	021b      	lsls	r3, r3, #8
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	3202      	adds	r2, #2
 800a2d8:	7812      	ldrb	r2, [r2, #0]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	021b      	lsls	r3, r3, #8
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	3201      	adds	r2, #1
 800a2e6:	7812      	ldrb	r2, [r2, #0]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	021b      	lsls	r3, r3, #8
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	7812      	ldrb	r2, [r2, #0]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60fb      	str	r3, [r7, #12]
	return rv;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a306:	b480      	push	{r7}
 800a308:	b083      	sub	sp, #12
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	460b      	mov	r3, r1
 800a310:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	887a      	ldrh	r2, [r7, #2]
 800a31a:	b2d2      	uxtb	r2, r2
 800a31c:	701a      	strb	r2, [r3, #0]
 800a31e:	887b      	ldrh	r3, [r7, #2]
 800a320:	0a1b      	lsrs	r3, r3, #8
 800a322:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	607a      	str	r2, [r7, #4]
 800a32a:	887a      	ldrh	r2, [r7, #2]
 800a32c:	b2d2      	uxtb	r2, r2
 800a32e:	701a      	strb	r2, [r3, #0]
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	b2d2      	uxtb	r2, r2
 800a350:	701a      	strb	r2, [r3, #0]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	0a1b      	lsrs	r3, r3, #8
 800a356:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	607a      	str	r2, [r7, #4]
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	b2d2      	uxtb	r2, r2
 800a362:	701a      	strb	r2, [r3, #0]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	0a1b      	lsrs	r3, r3, #8
 800a368:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	1c5a      	adds	r2, r3, #1
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	b2d2      	uxtb	r2, r2
 800a374:	701a      	strb	r2, [r3, #0]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	0a1b      	lsrs	r3, r3, #8
 800a37a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	607a      	str	r2, [r7, #4]
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	b2d2      	uxtb	r2, r2
 800a386:	701a      	strb	r2, [r3, #0]
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00d      	beq.n	800a3ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	1c53      	adds	r3, r2, #1
 800a3b2:	613b      	str	r3, [r7, #16]
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	1c59      	adds	r1, r3, #1
 800a3b8:	6179      	str	r1, [r7, #20]
 800a3ba:	7812      	ldrb	r2, [r2, #0]
 800a3bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	607b      	str	r3, [r7, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1f1      	bne.n	800a3ae <mem_cpy+0x1a>
	}
}
 800a3ca:	bf00      	nop
 800a3cc:	371c      	adds	r7, #28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a3d6:	b480      	push	{r7}
 800a3d8:	b087      	sub	sp, #28
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	60f8      	str	r0, [r7, #12]
 800a3de:	60b9      	str	r1, [r7, #8]
 800a3e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	617a      	str	r2, [r7, #20]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	b2d2      	uxtb	r2, r2
 800a3f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	607b      	str	r3, [r7, #4]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1f3      	bne.n	800a3e6 <mem_set+0x10>
}
 800a3fe:	bf00      	nop
 800a400:	bf00      	nop
 800a402:	371c      	adds	r7, #28
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a40c:	b480      	push	{r7}
 800a40e:	b089      	sub	sp, #36	; 0x24
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	61fb      	str	r3, [r7, #28]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a420:	2300      	movs	r3, #0
 800a422:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	1c5a      	adds	r2, r3, #1
 800a428:	61fa      	str	r2, [r7, #28]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	4619      	mov	r1, r3
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	61ba      	str	r2, [r7, #24]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	1acb      	subs	r3, r1, r3
 800a438:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	607b      	str	r3, [r7, #4]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d002      	beq.n	800a44c <mem_cmp+0x40>
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d0eb      	beq.n	800a424 <mem_cmp+0x18>

	return r;
 800a44c:	697b      	ldr	r3, [r7, #20]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3724      	adds	r7, #36	; 0x24
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a45a:	b480      	push	{r7}
 800a45c:	b083      	sub	sp, #12
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a464:	e002      	b.n	800a46c <chk_chr+0x12>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	3301      	adds	r3, #1
 800a46a:	607b      	str	r3, [r7, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d005      	beq.n	800a480 <chk_chr+0x26>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	461a      	mov	r2, r3
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d1f2      	bne.n	800a466 <chk_chr+0xc>
	return *str;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	781b      	ldrb	r3, [r3, #0]
}
 800a484:	4618      	mov	r0, r3
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d009      	beq.n	800a4b2 <lock_fs+0x22>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f002 fb26 	bl	800caf4 <ff_req_grant>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <lock_fs+0x22>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e000      	b.n	800a4b4 <lock_fs+0x24>
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00d      	beq.n	800a4ea <unlock_fs+0x2e>
 800a4ce:	78fb      	ldrb	r3, [r7, #3]
 800a4d0:	2b0c      	cmp	r3, #12
 800a4d2:	d00a      	beq.n	800a4ea <unlock_fs+0x2e>
 800a4d4:	78fb      	ldrb	r3, [r7, #3]
 800a4d6:	2b0b      	cmp	r3, #11
 800a4d8:	d007      	beq.n	800a4ea <unlock_fs+0x2e>
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	2b0f      	cmp	r3, #15
 800a4de:	d004      	beq.n	800a4ea <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f002 fb1a 	bl	800cb1e <ff_rel_grant>
	}
}
 800a4ea:	bf00      	nop
 800a4ec:	3708      	adds	r7, #8
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
	...

0800a4f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a4fe:	2300      	movs	r3, #0
 800a500:	60bb      	str	r3, [r7, #8]
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	60fb      	str	r3, [r7, #12]
 800a506:	e029      	b.n	800a55c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a508:	4a27      	ldr	r2, [pc, #156]	; (800a5a8 <chk_lock+0xb4>)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	011b      	lsls	r3, r3, #4
 800a50e:	4413      	add	r3, r2
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d01d      	beq.n	800a552 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a516:	4a24      	ldr	r2, [pc, #144]	; (800a5a8 <chk_lock+0xb4>)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	011b      	lsls	r3, r3, #4
 800a51c:	4413      	add	r3, r2
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	429a      	cmp	r2, r3
 800a526:	d116      	bne.n	800a556 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a528:	4a1f      	ldr	r2, [pc, #124]	; (800a5a8 <chk_lock+0xb4>)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	011b      	lsls	r3, r3, #4
 800a52e:	4413      	add	r3, r2
 800a530:	3304      	adds	r3, #4
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a538:	429a      	cmp	r2, r3
 800a53a:	d10c      	bne.n	800a556 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a53c:	4a1a      	ldr	r2, [pc, #104]	; (800a5a8 <chk_lock+0xb4>)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	011b      	lsls	r3, r3, #4
 800a542:	4413      	add	r3, r2
 800a544:	3308      	adds	r3, #8
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d102      	bne.n	800a556 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a550:	e007      	b.n	800a562 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a552:	2301      	movs	r3, #1
 800a554:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3301      	adds	r3, #1
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d9d2      	bls.n	800a508 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2b02      	cmp	r3, #2
 800a566:	d109      	bne.n	800a57c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d102      	bne.n	800a574 <chk_lock+0x80>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b02      	cmp	r3, #2
 800a572:	d101      	bne.n	800a578 <chk_lock+0x84>
 800a574:	2300      	movs	r3, #0
 800a576:	e010      	b.n	800a59a <chk_lock+0xa6>
 800a578:	2312      	movs	r3, #18
 800a57a:	e00e      	b.n	800a59a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d108      	bne.n	800a594 <chk_lock+0xa0>
 800a582:	4a09      	ldr	r2, [pc, #36]	; (800a5a8 <chk_lock+0xb4>)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	011b      	lsls	r3, r3, #4
 800a588:	4413      	add	r3, r2
 800a58a:	330c      	adds	r3, #12
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a592:	d101      	bne.n	800a598 <chk_lock+0xa4>
 800a594:	2310      	movs	r3, #16
 800a596:	e000      	b.n	800a59a <chk_lock+0xa6>
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	20003d1c 	.word	0x20003d1c

0800a5ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	607b      	str	r3, [r7, #4]
 800a5b6:	e002      	b.n	800a5be <enq_lock+0x12>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	607b      	str	r3, [r7, #4]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d806      	bhi.n	800a5d2 <enq_lock+0x26>
 800a5c4:	4a09      	ldr	r2, [pc, #36]	; (800a5ec <enq_lock+0x40>)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	011b      	lsls	r3, r3, #4
 800a5ca:	4413      	add	r3, r2
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1f2      	bne.n	800a5b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b02      	cmp	r3, #2
 800a5d6:	bf14      	ite	ne
 800a5d8:	2301      	movne	r3, #1
 800a5da:	2300      	moveq	r3, #0
 800a5dc:	b2db      	uxtb	r3, r3
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	20003d1c 	.word	0x20003d1c

0800a5f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
 800a5fe:	e01f      	b.n	800a640 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a600:	4a41      	ldr	r2, [pc, #260]	; (800a708 <inc_lock+0x118>)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	011b      	lsls	r3, r3, #4
 800a606:	4413      	add	r3, r2
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d113      	bne.n	800a63a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a612:	4a3d      	ldr	r2, [pc, #244]	; (800a708 <inc_lock+0x118>)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	011b      	lsls	r3, r3, #4
 800a618:	4413      	add	r3, r2
 800a61a:	3304      	adds	r3, #4
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a622:	429a      	cmp	r2, r3
 800a624:	d109      	bne.n	800a63a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a626:	4a38      	ldr	r2, [pc, #224]	; (800a708 <inc_lock+0x118>)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	011b      	lsls	r3, r3, #4
 800a62c:	4413      	add	r3, r2
 800a62e:	3308      	adds	r3, #8
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a636:	429a      	cmp	r2, r3
 800a638:	d006      	beq.n	800a648 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3301      	adds	r3, #1
 800a63e:	60fb      	str	r3, [r7, #12]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2b01      	cmp	r3, #1
 800a644:	d9dc      	bls.n	800a600 <inc_lock+0x10>
 800a646:	e000      	b.n	800a64a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a648:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d132      	bne.n	800a6b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a650:	2300      	movs	r3, #0
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	e002      	b.n	800a65c <inc_lock+0x6c>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3301      	adds	r3, #1
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d806      	bhi.n	800a670 <inc_lock+0x80>
 800a662:	4a29      	ldr	r2, [pc, #164]	; (800a708 <inc_lock+0x118>)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	011b      	lsls	r3, r3, #4
 800a668:	4413      	add	r3, r2
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1f2      	bne.n	800a656 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2b02      	cmp	r3, #2
 800a674:	d101      	bne.n	800a67a <inc_lock+0x8a>
 800a676:	2300      	movs	r3, #0
 800a678:	e040      	b.n	800a6fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	4922      	ldr	r1, [pc, #136]	; (800a708 <inc_lock+0x118>)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	011b      	lsls	r3, r3, #4
 800a684:	440b      	add	r3, r1
 800a686:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	689a      	ldr	r2, [r3, #8]
 800a68c:	491e      	ldr	r1, [pc, #120]	; (800a708 <inc_lock+0x118>)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	011b      	lsls	r3, r3, #4
 800a692:	440b      	add	r3, r1
 800a694:	3304      	adds	r3, #4
 800a696:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	695a      	ldr	r2, [r3, #20]
 800a69c:	491a      	ldr	r1, [pc, #104]	; (800a708 <inc_lock+0x118>)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	011b      	lsls	r3, r3, #4
 800a6a2:	440b      	add	r3, r1
 800a6a4:	3308      	adds	r3, #8
 800a6a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a6a8:	4a17      	ldr	r2, [pc, #92]	; (800a708 <inc_lock+0x118>)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	011b      	lsls	r3, r3, #4
 800a6ae:	4413      	add	r3, r2
 800a6b0:	330c      	adds	r3, #12
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d009      	beq.n	800a6d0 <inc_lock+0xe0>
 800a6bc:	4a12      	ldr	r2, [pc, #72]	; (800a708 <inc_lock+0x118>)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	011b      	lsls	r3, r3, #4
 800a6c2:	4413      	add	r3, r2
 800a6c4:	330c      	adds	r3, #12
 800a6c6:	881b      	ldrh	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <inc_lock+0xe0>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	e015      	b.n	800a6fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d108      	bne.n	800a6e8 <inc_lock+0xf8>
 800a6d6:	4a0c      	ldr	r2, [pc, #48]	; (800a708 <inc_lock+0x118>)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	011b      	lsls	r3, r3, #4
 800a6dc:	4413      	add	r3, r2
 800a6de:	330c      	adds	r3, #12
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	e001      	b.n	800a6ec <inc_lock+0xfc>
 800a6e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6ec:	4906      	ldr	r1, [pc, #24]	; (800a708 <inc_lock+0x118>)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	011b      	lsls	r3, r3, #4
 800a6f2:	440b      	add	r3, r1
 800a6f4:	330c      	adds	r3, #12
 800a6f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3301      	adds	r3, #1
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr
 800a708:	20003d1c 	.word	0x20003d1c

0800a70c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3b01      	subs	r3, #1
 800a718:	607b      	str	r3, [r7, #4]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d825      	bhi.n	800a76c <dec_lock+0x60>
		n = Files[i].ctr;
 800a720:	4a17      	ldr	r2, [pc, #92]	; (800a780 <dec_lock+0x74>)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	011b      	lsls	r3, r3, #4
 800a726:	4413      	add	r3, r2
 800a728:	330c      	adds	r3, #12
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a72e:	89fb      	ldrh	r3, [r7, #14]
 800a730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a734:	d101      	bne.n	800a73a <dec_lock+0x2e>
 800a736:	2300      	movs	r3, #0
 800a738:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a73a:	89fb      	ldrh	r3, [r7, #14]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d002      	beq.n	800a746 <dec_lock+0x3a>
 800a740:	89fb      	ldrh	r3, [r7, #14]
 800a742:	3b01      	subs	r3, #1
 800a744:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a746:	4a0e      	ldr	r2, [pc, #56]	; (800a780 <dec_lock+0x74>)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	4413      	add	r3, r2
 800a74e:	330c      	adds	r3, #12
 800a750:	89fa      	ldrh	r2, [r7, #14]
 800a752:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a754:	89fb      	ldrh	r3, [r7, #14]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d105      	bne.n	800a766 <dec_lock+0x5a>
 800a75a:	4a09      	ldr	r2, [pc, #36]	; (800a780 <dec_lock+0x74>)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	011b      	lsls	r3, r3, #4
 800a760:	4413      	add	r3, r2
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	737b      	strb	r3, [r7, #13]
 800a76a:	e001      	b.n	800a770 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a76c:	2302      	movs	r3, #2
 800a76e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a770:	7b7b      	ldrb	r3, [r7, #13]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	20003d1c 	.word	0x20003d1c

0800a784 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a78c:	2300      	movs	r3, #0
 800a78e:	60fb      	str	r3, [r7, #12]
 800a790:	e010      	b.n	800a7b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a792:	4a0d      	ldr	r2, [pc, #52]	; (800a7c8 <clear_lock+0x44>)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	011b      	lsls	r3, r3, #4
 800a798:	4413      	add	r3, r2
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d105      	bne.n	800a7ae <clear_lock+0x2a>
 800a7a2:	4a09      	ldr	r2, [pc, #36]	; (800a7c8 <clear_lock+0x44>)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	011b      	lsls	r3, r3, #4
 800a7a8:	4413      	add	r3, r2
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d9eb      	bls.n	800a792 <clear_lock+0xe>
	}
}
 800a7ba:	bf00      	nop
 800a7bc:	bf00      	nop
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	20003d1c 	.word	0x20003d1c

0800a7cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	78db      	ldrb	r3, [r3, #3]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d034      	beq.n	800a84a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	7858      	ldrb	r0, [r3, #1]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	f7ff fd0e 	bl	800a214 <disk_write>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	73fb      	strb	r3, [r7, #15]
 800a802:	e022      	b.n	800a84a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	1ad2      	subs	r2, r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	429a      	cmp	r2, r3
 800a818:	d217      	bcs.n	800a84a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	789b      	ldrb	r3, [r3, #2]
 800a81e:	613b      	str	r3, [r7, #16]
 800a820:	e010      	b.n	800a844 <sync_window+0x78>
					wsect += fs->fsize;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a1b      	ldr	r3, [r3, #32]
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	4413      	add	r3, r2
 800a82a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	7858      	ldrb	r0, [r3, #1]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a836:	2301      	movs	r3, #1
 800a838:	697a      	ldr	r2, [r7, #20]
 800a83a:	f7ff fceb 	bl	800a214 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	3b01      	subs	r3, #1
 800a842:	613b      	str	r3, [r7, #16]
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d8eb      	bhi.n	800a822 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3718      	adds	r7, #24
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d01b      	beq.n	800a8a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff ffad 	bl	800a7cc <sync_window>
 800a872:	4603      	mov	r3, r0
 800a874:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d113      	bne.n	800a8a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	7858      	ldrb	r0, [r3, #1]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a886:	2301      	movs	r3, #1
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	f7ff fca3 	bl	800a1d4 <disk_read>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d004      	beq.n	800a89e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a898:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
	...

0800a8b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f7ff ff87 	bl	800a7cc <sync_window>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d159      	bne.n	800a97c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d149      	bne.n	800a964 <sync_fs+0xb4>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	791b      	ldrb	r3, [r3, #4]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d145      	bne.n	800a964 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	899b      	ldrh	r3, [r3, #12]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	f7ff fd76 	bl	800a3d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	3338      	adds	r3, #56	; 0x38
 800a8ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a8f2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff fd05 	bl	800a306 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3338      	adds	r3, #56	; 0x38
 800a900:	4921      	ldr	r1, [pc, #132]	; (800a988 <sync_fs+0xd8>)
 800a902:	4618      	mov	r0, r3
 800a904:	f7ff fd1a 	bl	800a33c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3338      	adds	r3, #56	; 0x38
 800a90c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a910:	491e      	ldr	r1, [pc, #120]	; (800a98c <sync_fs+0xdc>)
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff fd12 	bl	800a33c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	3338      	adds	r3, #56	; 0x38
 800a91c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	699b      	ldr	r3, [r3, #24]
 800a924:	4619      	mov	r1, r3
 800a926:	4610      	mov	r0, r2
 800a928:	f7ff fd08 	bl	800a33c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3338      	adds	r3, #56	; 0x38
 800a930:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	695b      	ldr	r3, [r3, #20]
 800a938:	4619      	mov	r1, r3
 800a93a:	4610      	mov	r0, r2
 800a93c:	f7ff fcfe 	bl	800a33c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	7858      	ldrb	r0, [r3, #1]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a958:	2301      	movs	r3, #1
 800a95a:	f7ff fc5b 	bl	800a214 <disk_write>
			fs->fsi_flag = 0;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	785b      	ldrb	r3, [r3, #1]
 800a968:	2200      	movs	r2, #0
 800a96a:	2100      	movs	r1, #0
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7ff fc71 	bl	800a254 <disk_ioctl>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d001      	beq.n	800a97c <sync_fs+0xcc>
 800a978:	2301      	movs	r3, #1
 800a97a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	41615252 	.word	0x41615252
 800a98c:	61417272 	.word	0x61417272

0800a990 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	3b02      	subs	r3, #2
 800a99e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	3b02      	subs	r3, #2
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d301      	bcc.n	800a9b0 <clust2sect+0x20>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	e008      	b.n	800a9c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	895b      	ldrh	r3, [r3, #10]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	fb03 f202 	mul.w	r2, r3, r2
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c0:	4413      	add	r3, r2
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b086      	sub	sp, #24
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d904      	bls.n	800a9ee <get_fat+0x20>
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	69db      	ldr	r3, [r3, #28]
 800a9e8:	683a      	ldr	r2, [r7, #0]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d302      	bcc.n	800a9f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	617b      	str	r3, [r7, #20]
 800a9f2:	e0bb      	b.n	800ab6c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a9f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	f000 8083 	beq.w	800ab0a <get_fat+0x13c>
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	f300 80a7 	bgt.w	800ab58 <get_fat+0x18a>
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d002      	beq.n	800aa14 <get_fat+0x46>
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d056      	beq.n	800aac0 <get_fat+0xf2>
 800aa12:	e0a1      	b.n	800ab58 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	60fb      	str	r3, [r7, #12]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	085b      	lsrs	r3, r3, #1
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	4413      	add	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	899b      	ldrh	r3, [r3, #12]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa32:	4413      	add	r3, r2
 800aa34:	4619      	mov	r1, r3
 800aa36:	6938      	ldr	r0, [r7, #16]
 800aa38:	f7ff ff0c 	bl	800a854 <move_window>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f040 808d 	bne.w	800ab5e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	60fa      	str	r2, [r7, #12]
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	8992      	ldrh	r2, [r2, #12]
 800aa4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa52:	fb01 f202 	mul.w	r2, r1, r2
 800aa56:	1a9b      	subs	r3, r3, r2
 800aa58:	693a      	ldr	r2, [r7, #16]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aa60:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	899b      	ldrh	r3, [r3, #12]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa72:	4413      	add	r3, r2
 800aa74:	4619      	mov	r1, r3
 800aa76:	6938      	ldr	r0, [r7, #16]
 800aa78:	f7ff feec 	bl	800a854 <move_window>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d16f      	bne.n	800ab62 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	899b      	ldrh	r3, [r3, #12]
 800aa86:	461a      	mov	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa8e:	fb01 f202 	mul.w	r2, r1, r2
 800aa92:	1a9b      	subs	r3, r3, r2
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	4413      	add	r3, r2
 800aa98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <get_fat+0xe8>
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	091b      	lsrs	r3, r3, #4
 800aab4:	e002      	b.n	800aabc <get_fat+0xee>
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aabc:	617b      	str	r3, [r7, #20]
			break;
 800aabe:	e055      	b.n	800ab6c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	899b      	ldrh	r3, [r3, #12]
 800aac8:	085b      	lsrs	r3, r3, #1
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	4619      	mov	r1, r3
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	fbb3 f3f1 	udiv	r3, r3, r1
 800aad4:	4413      	add	r3, r2
 800aad6:	4619      	mov	r1, r3
 800aad8:	6938      	ldr	r0, [r7, #16]
 800aada:	f7ff febb 	bl	800a854 <move_window>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d140      	bne.n	800ab66 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	8992      	ldrh	r2, [r2, #12]
 800aaf2:	fbb3 f0f2 	udiv	r0, r3, r2
 800aaf6:	fb00 f202 	mul.w	r2, r0, r2
 800aafa:	1a9b      	subs	r3, r3, r2
 800aafc:	440b      	add	r3, r1
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff fbc6 	bl	800a290 <ld_word>
 800ab04:	4603      	mov	r3, r0
 800ab06:	617b      	str	r3, [r7, #20]
			break;
 800ab08:	e030      	b.n	800ab6c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	899b      	ldrh	r3, [r3, #12]
 800ab12:	089b      	lsrs	r3, r3, #2
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	4619      	mov	r1, r3
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab1e:	4413      	add	r3, r2
 800ab20:	4619      	mov	r1, r3
 800ab22:	6938      	ldr	r0, [r7, #16]
 800ab24:	f7ff fe96 	bl	800a854 <move_window>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d11d      	bne.n	800ab6a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	8992      	ldrh	r2, [r2, #12]
 800ab3c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab40:	fb00 f202 	mul.w	r2, r0, r2
 800ab44:	1a9b      	subs	r3, r3, r2
 800ab46:	440b      	add	r3, r1
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff fbb9 	bl	800a2c0 <ld_dword>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ab54:	617b      	str	r3, [r7, #20]
			break;
 800ab56:	e009      	b.n	800ab6c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ab58:	2301      	movs	r3, #1
 800ab5a:	617b      	str	r3, [r7, #20]
 800ab5c:	e006      	b.n	800ab6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab5e:	bf00      	nop
 800ab60:	e004      	b.n	800ab6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab62:	bf00      	nop
 800ab64:	e002      	b.n	800ab6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab66:	bf00      	nop
 800ab68:	e000      	b.n	800ab6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab6a:	bf00      	nop
		}
	}

	return val;
 800ab6c:	697b      	ldr	r3, [r7, #20]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ab76:	b590      	push	{r4, r7, lr}
 800ab78:	b089      	sub	sp, #36	; 0x24
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	60f8      	str	r0, [r7, #12]
 800ab7e:	60b9      	str	r1, [r7, #8]
 800ab80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ab82:	2302      	movs	r3, #2
 800ab84:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	f240 8109 	bls.w	800ada0 <put_fat+0x22a>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	69db      	ldr	r3, [r3, #28]
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	f080 8103 	bcs.w	800ada0 <put_fat+0x22a>
		switch (fs->fs_type) {
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	f000 80b6 	beq.w	800ad10 <put_fat+0x19a>
 800aba4:	2b03      	cmp	r3, #3
 800aba6:	f300 80fb 	bgt.w	800ada0 <put_fat+0x22a>
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d003      	beq.n	800abb6 <put_fat+0x40>
 800abae:	2b02      	cmp	r3, #2
 800abb0:	f000 8083 	beq.w	800acba <put_fat+0x144>
 800abb4:	e0f4      	b.n	800ada0 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	61bb      	str	r3, [r7, #24]
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	085b      	lsrs	r3, r3, #1
 800abbe:	69ba      	ldr	r2, [r7, #24]
 800abc0:	4413      	add	r3, r2
 800abc2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	899b      	ldrh	r3, [r3, #12]
 800abcc:	4619      	mov	r1, r3
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	fbb3 f3f1 	udiv	r3, r3, r1
 800abd4:	4413      	add	r3, r2
 800abd6:	4619      	mov	r1, r3
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f7ff fe3b 	bl	800a854 <move_window>
 800abde:	4603      	mov	r3, r0
 800abe0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800abe2:	7ffb      	ldrb	r3, [r7, #31]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f040 80d4 	bne.w	800ad92 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	1c5a      	adds	r2, r3, #1
 800abf4:	61ba      	str	r2, [r7, #24]
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	8992      	ldrh	r2, [r2, #12]
 800abfa:	fbb3 f0f2 	udiv	r0, r3, r2
 800abfe:	fb00 f202 	mul.w	r2, r0, r2
 800ac02:	1a9b      	subs	r3, r3, r2
 800ac04:	440b      	add	r3, r1
 800ac06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	f003 0301 	and.w	r3, r3, #1
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00d      	beq.n	800ac2e <put_fat+0xb8>
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	b25b      	sxtb	r3, r3
 800ac18:	f003 030f 	and.w	r3, r3, #15
 800ac1c:	b25a      	sxtb	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	011b      	lsls	r3, r3, #4
 800ac24:	b25b      	sxtb	r3, r3
 800ac26:	4313      	orrs	r3, r2
 800ac28:	b25b      	sxtb	r3, r3
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	e001      	b.n	800ac32 <put_fat+0xbc>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	899b      	ldrh	r3, [r3, #12]
 800ac44:	4619      	mov	r1, r3
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac4c:	4413      	add	r3, r2
 800ac4e:	4619      	mov	r1, r3
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f7ff fdff 	bl	800a854 <move_window>
 800ac56:	4603      	mov	r3, r0
 800ac58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac5a:	7ffb      	ldrb	r3, [r7, #31]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f040 809a 	bne.w	800ad96 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	899b      	ldrh	r3, [r3, #12]
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac74:	fb00 f202 	mul.w	r2, r0, r2
 800ac78:	1a9b      	subs	r3, r3, r2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f003 0301 	and.w	r3, r3, #1
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d003      	beq.n	800ac90 <put_fat+0x11a>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	091b      	lsrs	r3, r3, #4
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	e00e      	b.n	800acae <put_fat+0x138>
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	b25b      	sxtb	r3, r3
 800ac96:	f023 030f 	bic.w	r3, r3, #15
 800ac9a:	b25a      	sxtb	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	0a1b      	lsrs	r3, r3, #8
 800aca0:	b25b      	sxtb	r3, r3
 800aca2:	f003 030f 	and.w	r3, r3, #15
 800aca6:	b25b      	sxtb	r3, r3
 800aca8:	4313      	orrs	r3, r2
 800acaa:	b25b      	sxtb	r3, r3
 800acac:	b2db      	uxtb	r3, r3
 800acae:	697a      	ldr	r2, [r7, #20]
 800acb0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2201      	movs	r2, #1
 800acb6:	70da      	strb	r2, [r3, #3]
			break;
 800acb8:	e072      	b.n	800ada0 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	899b      	ldrh	r3, [r3, #12]
 800acc2:	085b      	lsrs	r3, r3, #1
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	4619      	mov	r1, r3
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	fbb3 f3f1 	udiv	r3, r3, r1
 800acce:	4413      	add	r3, r2
 800acd0:	4619      	mov	r1, r3
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f7ff fdbe 	bl	800a854 <move_window>
 800acd8:	4603      	mov	r3, r0
 800acda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800acdc:	7ffb      	ldrb	r3, [r7, #31]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d15b      	bne.n	800ad9a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	005b      	lsls	r3, r3, #1
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	8992      	ldrh	r2, [r2, #12]
 800acf0:	fbb3 f0f2 	udiv	r0, r3, r2
 800acf4:	fb00 f202 	mul.w	r2, r0, r2
 800acf8:	1a9b      	subs	r3, r3, r2
 800acfa:	440b      	add	r3, r1
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	b292      	uxth	r2, r2
 800ad00:	4611      	mov	r1, r2
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff faff 	bl	800a306 <st_word>
			fs->wflag = 1;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	70da      	strb	r2, [r3, #3]
			break;
 800ad0e:	e047      	b.n	800ada0 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	899b      	ldrh	r3, [r3, #12]
 800ad18:	089b      	lsrs	r3, r3, #2
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad24:	4413      	add	r3, r2
 800ad26:	4619      	mov	r1, r3
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f7ff fd93 	bl	800a854 <move_window>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad32:	7ffb      	ldrb	r3, [r7, #31]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d132      	bne.n	800ad9e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	8992      	ldrh	r2, [r2, #12]
 800ad4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad50:	fb00 f202 	mul.w	r2, r0, r2
 800ad54:	1a9b      	subs	r3, r3, r2
 800ad56:	440b      	add	r3, r1
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff fab1 	bl	800a2c0 <ld_dword>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ad64:	4323      	orrs	r3, r4
 800ad66:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	009b      	lsls	r3, r3, #2
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	8992      	ldrh	r2, [r2, #12]
 800ad76:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad7a:	fb00 f202 	mul.w	r2, r0, r2
 800ad7e:	1a9b      	subs	r3, r3, r2
 800ad80:	440b      	add	r3, r1
 800ad82:	6879      	ldr	r1, [r7, #4]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff fad9 	bl	800a33c <st_dword>
			fs->wflag = 1;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	70da      	strb	r2, [r3, #3]
			break;
 800ad90:	e006      	b.n	800ada0 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ad92:	bf00      	nop
 800ad94:	e004      	b.n	800ada0 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ad96:	bf00      	nop
 800ad98:	e002      	b.n	800ada0 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ad9a:	bf00      	nop
 800ad9c:	e000      	b.n	800ada0 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ad9e:	bf00      	nop
		}
	}
	return res;
 800ada0:	7ffb      	ldrb	r3, [r7, #31]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3724      	adds	r7, #36	; 0x24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd90      	pop	{r4, r7, pc}

0800adaa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800adaa:	b580      	push	{r7, lr}
 800adac:	b088      	sub	sp, #32
 800adae:	af00      	add	r7, sp, #0
 800adb0:	60f8      	str	r0, [r7, #12]
 800adb2:	60b9      	str	r1, [r7, #8]
 800adb4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d904      	bls.n	800add0 <remove_chain+0x26>
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d301      	bcc.n	800add4 <remove_chain+0x2a>
 800add0:	2302      	movs	r3, #2
 800add2:	e04b      	b.n	800ae6c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00c      	beq.n	800adf4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800adda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adde:	6879      	ldr	r1, [r7, #4]
 800ade0:	69b8      	ldr	r0, [r7, #24]
 800ade2:	f7ff fec8 	bl	800ab76 <put_fat>
 800ade6:	4603      	mov	r3, r0
 800ade8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800adea:	7ffb      	ldrb	r3, [r7, #31]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d001      	beq.n	800adf4 <remove_chain+0x4a>
 800adf0:	7ffb      	ldrb	r3, [r7, #31]
 800adf2:	e03b      	b.n	800ae6c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800adf4:	68b9      	ldr	r1, [r7, #8]
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f7ff fde9 	bl	800a9ce <get_fat>
 800adfc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d031      	beq.n	800ae68 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d101      	bne.n	800ae0e <remove_chain+0x64>
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	e02e      	b.n	800ae6c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae14:	d101      	bne.n	800ae1a <remove_chain+0x70>
 800ae16:	2301      	movs	r3, #1
 800ae18:	e028      	b.n	800ae6c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	68b9      	ldr	r1, [r7, #8]
 800ae1e:	69b8      	ldr	r0, [r7, #24]
 800ae20:	f7ff fea9 	bl	800ab76 <put_fat>
 800ae24:	4603      	mov	r3, r0
 800ae26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ae28:	7ffb      	ldrb	r3, [r7, #31]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <remove_chain+0x88>
 800ae2e:	7ffb      	ldrb	r3, [r7, #31]
 800ae30:	e01c      	b.n	800ae6c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	699a      	ldr	r2, [r3, #24]
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	69db      	ldr	r3, [r3, #28]
 800ae3a:	3b02      	subs	r3, #2
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d20b      	bcs.n	800ae58 <remove_chain+0xae>
			fs->free_clst++;
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	791b      	ldrb	r3, [r3, #4]
 800ae4e:	f043 0301 	orr.w	r3, r3, #1
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	69db      	ldr	r3, [r3, #28]
 800ae60:	68ba      	ldr	r2, [r7, #8]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d3c6      	bcc.n	800adf4 <remove_chain+0x4a>
 800ae66:	e000      	b.n	800ae6a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ae68:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3720      	adds	r7, #32
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b088      	sub	sp, #32
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d10d      	bne.n	800aea6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	695b      	ldr	r3, [r3, #20]
 800ae8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d004      	beq.n	800aea0 <create_chain+0x2c>
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	69db      	ldr	r3, [r3, #28]
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d31b      	bcc.n	800aed8 <create_chain+0x64>
 800aea0:	2301      	movs	r3, #1
 800aea2:	61bb      	str	r3, [r7, #24]
 800aea4:	e018      	b.n	800aed8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7ff fd90 	bl	800a9ce <get_fat>
 800aeae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d801      	bhi.n	800aeba <create_chain+0x46>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e070      	b.n	800af9c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aec0:	d101      	bne.n	800aec6 <create_chain+0x52>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	e06a      	b.n	800af9c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	69db      	ldr	r3, [r3, #28]
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d201      	bcs.n	800aed4 <create_chain+0x60>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	e063      	b.n	800af9c <create_chain+0x128>
		scl = clst;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	3301      	adds	r3, #1
 800aee0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	69fa      	ldr	r2, [r7, #28]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d307      	bcc.n	800aefc <create_chain+0x88>
				ncl = 2;
 800aeec:	2302      	movs	r3, #2
 800aeee:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aef0:	69fa      	ldr	r2, [r7, #28]
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d901      	bls.n	800aefc <create_chain+0x88>
 800aef8:	2300      	movs	r3, #0
 800aefa:	e04f      	b.n	800af9c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aefc:	69f9      	ldr	r1, [r7, #28]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7ff fd65 	bl	800a9ce <get_fat>
 800af04:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00e      	beq.n	800af2a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d003      	beq.n	800af1a <create_chain+0xa6>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af18:	d101      	bne.n	800af1e <create_chain+0xaa>
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	e03e      	b.n	800af9c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800af1e:	69fa      	ldr	r2, [r7, #28]
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	429a      	cmp	r2, r3
 800af24:	d1da      	bne.n	800aedc <create_chain+0x68>
 800af26:	2300      	movs	r3, #0
 800af28:	e038      	b.n	800af9c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800af2a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800af2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af30:	69f9      	ldr	r1, [r7, #28]
 800af32:	6938      	ldr	r0, [r7, #16]
 800af34:	f7ff fe1f 	bl	800ab76 <put_fat>
 800af38:	4603      	mov	r3, r0
 800af3a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800af3c:	7dfb      	ldrb	r3, [r7, #23]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d109      	bne.n	800af56 <create_chain+0xe2>
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d006      	beq.n	800af56 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800af48:	69fa      	ldr	r2, [r7, #28]
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	6938      	ldr	r0, [r7, #16]
 800af4e:	f7ff fe12 	bl	800ab76 <put_fat>
 800af52:	4603      	mov	r3, r0
 800af54:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800af56:	7dfb      	ldrb	r3, [r7, #23]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d116      	bne.n	800af8a <create_chain+0x116>
		fs->last_clst = ncl;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	69fa      	ldr	r2, [r7, #28]
 800af60:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	699a      	ldr	r2, [r3, #24]
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	3b02      	subs	r3, #2
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d804      	bhi.n	800af7a <create_chain+0x106>
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	1e5a      	subs	r2, r3, #1
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	791b      	ldrb	r3, [r3, #4]
 800af7e:	f043 0301 	orr.w	r3, r3, #1
 800af82:	b2da      	uxtb	r2, r3
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	711a      	strb	r2, [r3, #4]
 800af88:	e007      	b.n	800af9a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800af8a:	7dfb      	ldrb	r3, [r7, #23]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d102      	bne.n	800af96 <create_chain+0x122>
 800af90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af94:	e000      	b.n	800af98 <create_chain+0x124>
 800af96:	2301      	movs	r3, #1
 800af98:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800af9a:	69fb      	ldr	r3, [r7, #28]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3720      	adds	r7, #32
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b087      	sub	sp, #28
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb8:	3304      	adds	r3, #4
 800afba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	899b      	ldrh	r3, [r3, #12]
 800afc0:	461a      	mov	r2, r3
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	8952      	ldrh	r2, [r2, #10]
 800afcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800afd0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	1d1a      	adds	r2, r3, #4
 800afd6:	613a      	str	r2, [r7, #16]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <clmt_clust+0x42>
 800afe2:	2300      	movs	r3, #0
 800afe4:	e010      	b.n	800b008 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800afe6:	697a      	ldr	r2, [r7, #20]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	429a      	cmp	r2, r3
 800afec:	d307      	bcc.n	800affe <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	617b      	str	r3, [r7, #20]
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	3304      	adds	r3, #4
 800affa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800affc:	e7e9      	b.n	800afd2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800affe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	4413      	add	r3, r2
}
 800b008:	4618      	mov	r0, r3
 800b00a:	371c      	adds	r7, #28
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b02a:	d204      	bcs.n	800b036 <dir_sdi+0x22>
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	f003 031f 	and.w	r3, r3, #31
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <dir_sdi+0x26>
		return FR_INT_ERR;
 800b036:	2302      	movs	r3, #2
 800b038:	e071      	b.n	800b11e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d106      	bne.n	800b05a <dir_sdi+0x46>
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2b02      	cmp	r3, #2
 800b052:	d902      	bls.n	800b05a <dir_sdi+0x46>
		clst = fs->dirbase;
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b058:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10c      	bne.n	800b07a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	095b      	lsrs	r3, r3, #5
 800b064:	693a      	ldr	r2, [r7, #16]
 800b066:	8912      	ldrh	r2, [r2, #8]
 800b068:	4293      	cmp	r3, r2
 800b06a:	d301      	bcc.n	800b070 <dir_sdi+0x5c>
 800b06c:	2302      	movs	r3, #2
 800b06e:	e056      	b.n	800b11e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	61da      	str	r2, [r3, #28]
 800b078:	e02d      	b.n	800b0d6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	895b      	ldrh	r3, [r3, #10]
 800b07e:	461a      	mov	r2, r3
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	899b      	ldrh	r3, [r3, #12]
 800b084:	fb02 f303 	mul.w	r3, r2, r3
 800b088:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b08a:	e019      	b.n	800b0c0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6979      	ldr	r1, [r7, #20]
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff fc9c 	bl	800a9ce <get_fat>
 800b096:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b09e:	d101      	bne.n	800b0a4 <dir_sdi+0x90>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e03c      	b.n	800b11e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d904      	bls.n	800b0b4 <dir_sdi+0xa0>
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d301      	bcc.n	800b0b8 <dir_sdi+0xa4>
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	e032      	b.n	800b11e <dir_sdi+0x10a>
			ofs -= csz;
 800b0b8:	683a      	ldr	r2, [r7, #0]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d2e1      	bcs.n	800b08c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b0c8:	6979      	ldr	r1, [r7, #20]
 800b0ca:	6938      	ldr	r0, [r7, #16]
 800b0cc:	f7ff fc60 	bl	800a990 <clust2sect>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	69db      	ldr	r3, [r3, #28]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <dir_sdi+0xd4>
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	e01a      	b.n	800b11e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	69da      	ldr	r2, [r3, #28]
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	899b      	ldrh	r3, [r3, #12]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0f8:	441a      	add	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	899b      	ldrh	r3, [r3, #12]
 800b108:	461a      	mov	r2, r3
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	fbb3 f0f2 	udiv	r0, r3, r2
 800b110:	fb00 f202 	mul.w	r2, r0, r2
 800b114:	1a9b      	subs	r3, r3, r2
 800b116:	18ca      	adds	r2, r1, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3718      	adds	r7, #24
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b086      	sub	sp, #24
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	3320      	adds	r3, #32
 800b13c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <dir_next+0x28>
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b14c:	d301      	bcc.n	800b152 <dir_next+0x2c>
 800b14e:	2304      	movs	r3, #4
 800b150:	e0bb      	b.n	800b2ca <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	899b      	ldrh	r3, [r3, #12]
 800b156:	461a      	mov	r2, r3
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b15e:	fb01 f202 	mul.w	r2, r1, r2
 800b162:	1a9b      	subs	r3, r3, r2
 800b164:	2b00      	cmp	r3, #0
 800b166:	f040 809d 	bne.w	800b2a4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	1c5a      	adds	r2, r3, #1
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10b      	bne.n	800b194 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	095b      	lsrs	r3, r3, #5
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	8912      	ldrh	r2, [r2, #8]
 800b184:	4293      	cmp	r3, r2
 800b186:	f0c0 808d 	bcc.w	800b2a4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	61da      	str	r2, [r3, #28]
 800b190:	2304      	movs	r3, #4
 800b192:	e09a      	b.n	800b2ca <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	899b      	ldrh	r3, [r3, #12]
 800b198:	461a      	mov	r2, r3
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	8952      	ldrh	r2, [r2, #10]
 800b1a4:	3a01      	subs	r2, #1
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d17b      	bne.n	800b2a4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	699b      	ldr	r3, [r3, #24]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	f7ff fc0a 	bl	800a9ce <get_fat>
 800b1ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d801      	bhi.n	800b1c6 <dir_next+0xa0>
 800b1c2:	2302      	movs	r3, #2
 800b1c4:	e081      	b.n	800b2ca <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1cc:	d101      	bne.n	800b1d2 <dir_next+0xac>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e07b      	b.n	800b2ca <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	69db      	ldr	r3, [r3, #28]
 800b1d6:	697a      	ldr	r2, [r7, #20]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d359      	bcc.n	800b290 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d104      	bne.n	800b1ec <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	61da      	str	r2, [r3, #28]
 800b1e8:	2304      	movs	r3, #4
 800b1ea:	e06e      	b.n	800b2ca <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	f7ff fe3d 	bl	800ae74 <create_chain>
 800b1fa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d101      	bne.n	800b206 <dir_next+0xe0>
 800b202:	2307      	movs	r3, #7
 800b204:	e061      	b.n	800b2ca <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d101      	bne.n	800b210 <dir_next+0xea>
 800b20c:	2302      	movs	r3, #2
 800b20e:	e05c      	b.n	800b2ca <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b216:	d101      	bne.n	800b21c <dir_next+0xf6>
 800b218:	2301      	movs	r3, #1
 800b21a:	e056      	b.n	800b2ca <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f7ff fad5 	bl	800a7cc <sync_window>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d001      	beq.n	800b22c <dir_next+0x106>
 800b228:	2301      	movs	r3, #1
 800b22a:	e04e      	b.n	800b2ca <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	899b      	ldrh	r3, [r3, #12]
 800b236:	461a      	mov	r2, r3
 800b238:	2100      	movs	r1, #0
 800b23a:	f7ff f8cc 	bl	800a3d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b23e:	2300      	movs	r3, #0
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	6979      	ldr	r1, [r7, #20]
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7ff fba3 	bl	800a990 <clust2sect>
 800b24a:	4602      	mov	r2, r0
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	635a      	str	r2, [r3, #52]	; 0x34
 800b250:	e012      	b.n	800b278 <dir_next+0x152>
						fs->wflag = 1;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2201      	movs	r2, #1
 800b256:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f7ff fab7 	bl	800a7cc <sync_window>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <dir_next+0x142>
 800b264:	2301      	movs	r3, #1
 800b266:	e030      	b.n	800b2ca <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	3301      	adds	r3, #1
 800b26c:	613b      	str	r3, [r7, #16]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b272:	1c5a      	adds	r2, r3, #1
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	635a      	str	r2, [r3, #52]	; 0x34
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	895b      	ldrh	r3, [r3, #10]
 800b27c:	461a      	mov	r2, r3
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	4293      	cmp	r3, r2
 800b282:	d3e6      	bcc.n	800b252 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	1ad2      	subs	r2, r2, r3
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b296:	6979      	ldr	r1, [r7, #20]
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f7ff fb79 	bl	800a990 <clust2sect>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	899b      	ldrh	r3, [r3, #12]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2bc:	fb00 f202 	mul.w	r2, r0, r2
 800b2c0:	1a9b      	subs	r3, r3, r2
 800b2c2:	18ca      	adds	r2, r1, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3718      	adds	r7, #24
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b086      	sub	sp, #24
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff fe95 	bl	800b014 <dir_sdi>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d12b      	bne.n	800b34c <dir_alloc+0x7a>
		n = 0;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	69db      	ldr	r3, [r3, #28]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f7ff faa8 	bl	800a854 <move_window>
 800b304:	4603      	mov	r3, r0
 800b306:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b308:	7dfb      	ldrb	r3, [r7, #23]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d11d      	bne.n	800b34a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a1b      	ldr	r3, [r3, #32]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	2be5      	cmp	r3, #229	; 0xe5
 800b316:	d004      	beq.n	800b322 <dir_alloc+0x50>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d107      	bne.n	800b332 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	3301      	adds	r3, #1
 800b326:	613b      	str	r3, [r7, #16]
 800b328:	693a      	ldr	r2, [r7, #16]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d102      	bne.n	800b336 <dir_alloc+0x64>
 800b330:	e00c      	b.n	800b34c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b332:	2300      	movs	r3, #0
 800b334:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b336:	2101      	movs	r1, #1
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7ff fef4 	bl	800b126 <dir_next>
 800b33e:	4603      	mov	r3, r0
 800b340:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b342:	7dfb      	ldrb	r3, [r7, #23]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d0d7      	beq.n	800b2f8 <dir_alloc+0x26>
 800b348:	e000      	b.n	800b34c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b34a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	2b04      	cmp	r3, #4
 800b350:	d101      	bne.n	800b356 <dir_alloc+0x84>
 800b352:	2307      	movs	r3, #7
 800b354:	75fb      	strb	r3, [r7, #23]
	return res;
 800b356:	7dfb      	ldrb	r3, [r7, #23]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3718      	adds	r7, #24
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	331a      	adds	r3, #26
 800b36e:	4618      	mov	r0, r3
 800b370:	f7fe ff8e 	bl	800a290 <ld_word>
 800b374:	4603      	mov	r3, r0
 800b376:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	d109      	bne.n	800b394 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	3314      	adds	r3, #20
 800b384:	4618      	mov	r0, r3
 800b386:	f7fe ff83 	bl	800a290 <ld_word>
 800b38a:	4603      	mov	r3, r0
 800b38c:	041b      	lsls	r3, r3, #16
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	4313      	orrs	r3, r2
 800b392:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b394:	68fb      	ldr	r3, [r7, #12]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b084      	sub	sp, #16
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	60f8      	str	r0, [r7, #12]
 800b3a6:	60b9      	str	r1, [r7, #8]
 800b3a8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	331a      	adds	r3, #26
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	b292      	uxth	r2, r2
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7fe ffa6 	bl	800a306 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	d109      	bne.n	800b3d6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	f103 0214 	add.w	r2, r3, #20
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	0c1b      	lsrs	r3, r3, #16
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	f7fe ff98 	bl	800a306 <st_word>
	}
}
 800b3d6:	bf00      	nop
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b086      	sub	sp, #24
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7ff fe10 	bl	800b014 <dir_sdi>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <dir_find+0x24>
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	e03e      	b.n	800b480 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	4619      	mov	r1, r3
 800b408:	6938      	ldr	r0, [r7, #16]
 800b40a:	f7ff fa23 	bl	800a854 <move_window>
 800b40e:	4603      	mov	r3, r0
 800b410:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b412:	7dfb      	ldrb	r3, [r7, #23]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d12f      	bne.n	800b478 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a1b      	ldr	r3, [r3, #32]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b420:	7bfb      	ldrb	r3, [r7, #15]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d102      	bne.n	800b42c <dir_find+0x4e>
 800b426:	2304      	movs	r3, #4
 800b428:	75fb      	strb	r3, [r7, #23]
 800b42a:	e028      	b.n	800b47e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6a1b      	ldr	r3, [r3, #32]
 800b430:	330b      	adds	r3, #11
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	330b      	adds	r3, #11
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	f003 0308 	and.w	r3, r3, #8
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10a      	bne.n	800b464 <dir_find+0x86>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a18      	ldr	r0, [r3, #32]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	3324      	adds	r3, #36	; 0x24
 800b456:	220b      	movs	r2, #11
 800b458:	4619      	mov	r1, r3
 800b45a:	f7fe ffd7 	bl	800a40c <mem_cmp>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00b      	beq.n	800b47c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b464:	2100      	movs	r1, #0
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7ff fe5d 	bl	800b126 <dir_next>
 800b46c:	4603      	mov	r3, r0
 800b46e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b470:	7dfb      	ldrb	r3, [r7, #23]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0c5      	beq.n	800b402 <dir_find+0x24>
 800b476:	e002      	b.n	800b47e <dir_find+0xa0>
		if (res != FR_OK) break;
 800b478:	bf00      	nop
 800b47a:	e000      	b.n	800b47e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b47c:	bf00      	nop

	return res;
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3718      	adds	r7, #24
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b496:	2101      	movs	r1, #1
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f7ff ff1a 	bl	800b2d2 <dir_alloc>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d11c      	bne.n	800b4e2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	69db      	ldr	r3, [r3, #28]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	68b8      	ldr	r0, [r7, #8]
 800b4b0:	f7ff f9d0 	bl	800a854 <move_window>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d111      	bne.n	800b4e2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a1b      	ldr	r3, [r3, #32]
 800b4c2:	2220      	movs	r2, #32
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe ff85 	bl	800a3d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6a18      	ldr	r0, [r3, #32]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3324      	adds	r3, #36	; 0x24
 800b4d4:	220b      	movs	r2, #11
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	f7fe ff5c 	bl	800a394 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	69db      	ldr	r3, [r3, #28]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d04e      	beq.n	800b5a2 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	613b      	str	r3, [r7, #16]
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800b50c:	e021      	b.n	800b552 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a1a      	ldr	r2, [r3, #32]
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	1c59      	adds	r1, r3, #1
 800b516:	6179      	str	r1, [r7, #20]
 800b518:	4413      	add	r3, r2
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
 800b520:	2b20      	cmp	r3, #32
 800b522:	d100      	bne.n	800b526 <get_fileinfo+0x3a>
 800b524:	e015      	b.n	800b552 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b526:	7bfb      	ldrb	r3, [r7, #15]
 800b528:	2b05      	cmp	r3, #5
 800b52a:	d101      	bne.n	800b530 <get_fileinfo+0x44>
 800b52c:	23e5      	movs	r3, #229	; 0xe5
 800b52e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	2b09      	cmp	r3, #9
 800b534:	d106      	bne.n	800b544 <get_fileinfo+0x58>
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	1c5a      	adds	r2, r3, #1
 800b53a:	613a      	str	r2, [r7, #16]
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	4413      	add	r3, r2
 800b540:	222e      	movs	r2, #46	; 0x2e
 800b542:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	613a      	str	r2, [r7, #16]
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	4413      	add	r3, r2
 800b54e:	7bfa      	ldrb	r2, [r7, #15]
 800b550:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2b0a      	cmp	r3, #10
 800b556:	d9da      	bls.n	800b50e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	4413      	add	r3, r2
 800b55e:	3309      	adds	r3, #9
 800b560:	2200      	movs	r2, #0
 800b562:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	7ada      	ldrb	r2, [r3, #11]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a1b      	ldr	r3, [r3, #32]
 800b572:	331c      	adds	r3, #28
 800b574:	4618      	mov	r0, r3
 800b576:	f7fe fea3 	bl	800a2c0 <ld_dword>
 800b57a:	4602      	mov	r2, r0
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a1b      	ldr	r3, [r3, #32]
 800b584:	3316      	adds	r3, #22
 800b586:	4618      	mov	r0, r3
 800b588:	f7fe fe9a 	bl	800a2c0 <ld_dword>
 800b58c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	b29a      	uxth	r2, r3
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	80da      	strh	r2, [r3, #6]
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	0c1b      	lsrs	r3, r3, #16
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	809a      	strh	r2, [r3, #4]
 800b5a0:	e000      	b.n	800b5a4 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b5a2:	bf00      	nop
}
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
	...

0800b5ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b088      	sub	sp, #32
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	60fb      	str	r3, [r7, #12]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3324      	adds	r3, #36	; 0x24
 800b5c0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b5c2:	220b      	movs	r2, #11
 800b5c4:	2120      	movs	r1, #32
 800b5c6:	68b8      	ldr	r0, [r7, #8]
 800b5c8:	f7fe ff05 	bl	800a3d6 <mem_set>
	si = i = 0; ni = 8;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	613b      	str	r3, [r7, #16]
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	61fb      	str	r3, [r7, #28]
 800b5d4:	2308      	movs	r3, #8
 800b5d6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	61fa      	str	r2, [r7, #28]
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b5e6:	7efb      	ldrb	r3, [r7, #27]
 800b5e8:	2b20      	cmp	r3, #32
 800b5ea:	d94e      	bls.n	800b68a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b5ec:	7efb      	ldrb	r3, [r7, #27]
 800b5ee:	2b2f      	cmp	r3, #47	; 0x2f
 800b5f0:	d006      	beq.n	800b600 <create_name+0x54>
 800b5f2:	7efb      	ldrb	r3, [r7, #27]
 800b5f4:	2b5c      	cmp	r3, #92	; 0x5c
 800b5f6:	d110      	bne.n	800b61a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b5f8:	e002      	b.n	800b600 <create_name+0x54>
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	61fb      	str	r3, [r7, #28]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	4413      	add	r3, r2
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2b2f      	cmp	r3, #47	; 0x2f
 800b60a:	d0f6      	beq.n	800b5fa <create_name+0x4e>
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	69fb      	ldr	r3, [r7, #28]
 800b610:	4413      	add	r3, r2
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	2b5c      	cmp	r3, #92	; 0x5c
 800b616:	d0f0      	beq.n	800b5fa <create_name+0x4e>
			break;
 800b618:	e038      	b.n	800b68c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b61a:	7efb      	ldrb	r3, [r7, #27]
 800b61c:	2b2e      	cmp	r3, #46	; 0x2e
 800b61e:	d003      	beq.n	800b628 <create_name+0x7c>
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	429a      	cmp	r2, r3
 800b626:	d30c      	bcc.n	800b642 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	2b0b      	cmp	r3, #11
 800b62c:	d002      	beq.n	800b634 <create_name+0x88>
 800b62e:	7efb      	ldrb	r3, [r7, #27]
 800b630:	2b2e      	cmp	r3, #46	; 0x2e
 800b632:	d001      	beq.n	800b638 <create_name+0x8c>
 800b634:	2306      	movs	r3, #6
 800b636:	e044      	b.n	800b6c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b638:	2308      	movs	r3, #8
 800b63a:	613b      	str	r3, [r7, #16]
 800b63c:	230b      	movs	r3, #11
 800b63e:	617b      	str	r3, [r7, #20]
			continue;
 800b640:	e022      	b.n	800b688 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b642:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b646:	2b00      	cmp	r3, #0
 800b648:	da04      	bge.n	800b654 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b64a:	7efb      	ldrb	r3, [r7, #27]
 800b64c:	3b80      	subs	r3, #128	; 0x80
 800b64e:	4a1f      	ldr	r2, [pc, #124]	; (800b6cc <create_name+0x120>)
 800b650:	5cd3      	ldrb	r3, [r2, r3]
 800b652:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b654:	7efb      	ldrb	r3, [r7, #27]
 800b656:	4619      	mov	r1, r3
 800b658:	481d      	ldr	r0, [pc, #116]	; (800b6d0 <create_name+0x124>)
 800b65a:	f7fe fefe 	bl	800a45a <chk_chr>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <create_name+0xbc>
 800b664:	2306      	movs	r3, #6
 800b666:	e02c      	b.n	800b6c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b668:	7efb      	ldrb	r3, [r7, #27]
 800b66a:	2b60      	cmp	r3, #96	; 0x60
 800b66c:	d905      	bls.n	800b67a <create_name+0xce>
 800b66e:	7efb      	ldrb	r3, [r7, #27]
 800b670:	2b7a      	cmp	r3, #122	; 0x7a
 800b672:	d802      	bhi.n	800b67a <create_name+0xce>
 800b674:	7efb      	ldrb	r3, [r7, #27]
 800b676:	3b20      	subs	r3, #32
 800b678:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	613a      	str	r2, [r7, #16]
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	4413      	add	r3, r2
 800b684:	7efa      	ldrb	r2, [r7, #27]
 800b686:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b688:	e7a6      	b.n	800b5d8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b68a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	441a      	add	r2, r3
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d101      	bne.n	800b6a0 <create_name+0xf4>
 800b69c:	2306      	movs	r3, #6
 800b69e:	e010      	b.n	800b6c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	2be5      	cmp	r3, #229	; 0xe5
 800b6a6:	d102      	bne.n	800b6ae <create_name+0x102>
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	2205      	movs	r2, #5
 800b6ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b6ae:	7efb      	ldrb	r3, [r7, #27]
 800b6b0:	2b20      	cmp	r3, #32
 800b6b2:	d801      	bhi.n	800b6b8 <create_name+0x10c>
 800b6b4:	2204      	movs	r2, #4
 800b6b6:	e000      	b.n	800b6ba <create_name+0x10e>
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	330b      	adds	r3, #11
 800b6be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b6c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3720      	adds	r7, #32
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	0801ed94 	.word	0x0801ed94
 800b6d0:	0801ebec 	.word	0x0801ebec

0800b6d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b6e8:	e002      	b.n	800b6f0 <follow_path+0x1c>
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	603b      	str	r3, [r7, #0]
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	2b2f      	cmp	r3, #47	; 0x2f
 800b6f6:	d0f8      	beq.n	800b6ea <follow_path+0x16>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	2b5c      	cmp	r3, #92	; 0x5c
 800b6fe:	d0f4      	beq.n	800b6ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	2200      	movs	r2, #0
 800b704:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	2b1f      	cmp	r3, #31
 800b70c:	d80a      	bhi.n	800b724 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2280      	movs	r2, #128	; 0x80
 800b712:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b716:	2100      	movs	r1, #0
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7ff fc7b 	bl	800b014 <dir_sdi>
 800b71e:	4603      	mov	r3, r0
 800b720:	75fb      	strb	r3, [r7, #23]
 800b722:	e048      	b.n	800b7b6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b724:	463b      	mov	r3, r7
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7ff ff3f 	bl	800b5ac <create_name>
 800b72e:	4603      	mov	r3, r0
 800b730:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b732:	7dfb      	ldrb	r3, [r7, #23]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d139      	bne.n	800b7ac <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f7ff fe50 	bl	800b3de <dir_find>
 800b73e:	4603      	mov	r3, r0
 800b740:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b748:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b74a:	7dfb      	ldrb	r3, [r7, #23]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00a      	beq.n	800b766 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b750:	7dfb      	ldrb	r3, [r7, #23]
 800b752:	2b04      	cmp	r3, #4
 800b754:	d12c      	bne.n	800b7b0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b756:	7afb      	ldrb	r3, [r7, #11]
 800b758:	f003 0304 	and.w	r3, r3, #4
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d127      	bne.n	800b7b0 <follow_path+0xdc>
 800b760:	2305      	movs	r3, #5
 800b762:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b764:	e024      	b.n	800b7b0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b766:	7afb      	ldrb	r3, [r7, #11]
 800b768:	f003 0304 	and.w	r3, r3, #4
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d121      	bne.n	800b7b4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	799b      	ldrb	r3, [r3, #6]
 800b774:	f003 0310 	and.w	r3, r3, #16
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d102      	bne.n	800b782 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b77c:	2305      	movs	r3, #5
 800b77e:	75fb      	strb	r3, [r7, #23]
 800b780:	e019      	b.n	800b7b6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	695b      	ldr	r3, [r3, #20]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	8992      	ldrh	r2, [r2, #12]
 800b790:	fbb3 f0f2 	udiv	r0, r3, r2
 800b794:	fb00 f202 	mul.w	r2, r0, r2
 800b798:	1a9b      	subs	r3, r3, r2
 800b79a:	440b      	add	r3, r1
 800b79c:	4619      	mov	r1, r3
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f7ff fdde 	bl	800b360 <ld_clust>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b7aa:	e7bb      	b.n	800b724 <follow_path+0x50>
			if (res != FR_OK) break;
 800b7ac:	bf00      	nop
 800b7ae:	e002      	b.n	800b7b6 <follow_path+0xe2>
				break;
 800b7b0:	bf00      	nop
 800b7b2:	e000      	b.n	800b7b6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b7b4:	bf00      	nop
			}
		}
	}

	return res;
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b7c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7cc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d031      	beq.n	800b83a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	617b      	str	r3, [r7, #20]
 800b7dc:	e002      	b.n	800b7e4 <get_ldnumber+0x24>
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	617b      	str	r3, [r7, #20]
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	2b20      	cmp	r3, #32
 800b7ea:	d903      	bls.n	800b7f4 <get_ldnumber+0x34>
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	2b3a      	cmp	r3, #58	; 0x3a
 800b7f2:	d1f4      	bne.n	800b7de <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2b3a      	cmp	r3, #58	; 0x3a
 800b7fa:	d11c      	bne.n	800b836 <get_ldnumber+0x76>
			tp = *path;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	1c5a      	adds	r2, r3, #1
 800b806:	60fa      	str	r2, [r7, #12]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	3b30      	subs	r3, #48	; 0x30
 800b80c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2b09      	cmp	r3, #9
 800b812:	d80e      	bhi.n	800b832 <get_ldnumber+0x72>
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d10a      	bne.n	800b832 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d107      	bne.n	800b832 <get_ldnumber+0x72>
					vol = (int)i;
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	3301      	adds	r3, #1
 800b82a:	617b      	str	r3, [r7, #20]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	e002      	b.n	800b83c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b836:	2300      	movs	r3, #0
 800b838:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b83a:	693b      	ldr	r3, [r7, #16]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	371c      	adds	r7, #28
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	70da      	strb	r2, [r3, #3]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b85e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f7fe fff6 	bl	800a854 <move_window>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d001      	beq.n	800b872 <check_fs+0x2a>
 800b86e:	2304      	movs	r3, #4
 800b870:	e038      	b.n	800b8e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	3338      	adds	r3, #56	; 0x38
 800b876:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe fd08 	bl	800a290 <ld_word>
 800b880:	4603      	mov	r3, r0
 800b882:	461a      	mov	r2, r3
 800b884:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b888:	429a      	cmp	r2, r3
 800b88a:	d001      	beq.n	800b890 <check_fs+0x48>
 800b88c:	2303      	movs	r3, #3
 800b88e:	e029      	b.n	800b8e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b896:	2be9      	cmp	r3, #233	; 0xe9
 800b898:	d009      	beq.n	800b8ae <check_fs+0x66>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b8a0:	2beb      	cmp	r3, #235	; 0xeb
 800b8a2:	d11e      	bne.n	800b8e2 <check_fs+0x9a>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b8aa:	2b90      	cmp	r3, #144	; 0x90
 800b8ac:	d119      	bne.n	800b8e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	3338      	adds	r3, #56	; 0x38
 800b8b2:	3336      	adds	r3, #54	; 0x36
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fe fd03 	bl	800a2c0 <ld_dword>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b8c0:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <check_fs+0xa4>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d101      	bne.n	800b8ca <check_fs+0x82>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e00c      	b.n	800b8e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	3338      	adds	r3, #56	; 0x38
 800b8ce:	3352      	adds	r3, #82	; 0x52
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fe fcf5 	bl	800a2c0 <ld_dword>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	4a05      	ldr	r2, [pc, #20]	; (800b8f0 <check_fs+0xa8>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d101      	bne.n	800b8e2 <check_fs+0x9a>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	e000      	b.n	800b8e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b8e2:	2302      	movs	r3, #2
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	00544146 	.word	0x00544146
 800b8f0:	33544146 	.word	0x33544146

0800b8f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b096      	sub	sp, #88	; 0x58
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	4613      	mov	r3, r2
 800b900:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	2200      	movs	r2, #0
 800b906:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7ff ff59 	bl	800b7c0 <get_ldnumber>
 800b90e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b912:	2b00      	cmp	r3, #0
 800b914:	da01      	bge.n	800b91a <find_volume+0x26>
 800b916:	230b      	movs	r3, #11
 800b918:	e26a      	b.n	800bdf0 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b91a:	4aa3      	ldr	r2, [pc, #652]	; (800bba8 <find_volume+0x2b4>)
 800b91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b922:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <find_volume+0x3a>
 800b92a:	230c      	movs	r3, #12
 800b92c:	e260      	b.n	800bdf0 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800b92e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b930:	f7fe fdae 	bl	800a490 <lock_fs>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <find_volume+0x4a>
 800b93a:	230f      	movs	r3, #15
 800b93c:	e258      	b.n	800bdf0 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b942:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b944:	79fb      	ldrb	r3, [r7, #7]
 800b946:	f023 0301 	bic.w	r3, r3, #1
 800b94a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d01a      	beq.n	800b98a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b956:	785b      	ldrb	r3, [r3, #1]
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fe fbfb 	bl	800a154 <disk_status>
 800b95e:	4603      	mov	r3, r0
 800b960:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b964:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b968:	f003 0301 	and.w	r3, r3, #1
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10c      	bne.n	800b98a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b970:	79fb      	ldrb	r3, [r7, #7]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d007      	beq.n	800b986 <find_volume+0x92>
 800b976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b97a:	f003 0304 	and.w	r3, r3, #4
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b982:	230a      	movs	r3, #10
 800b984:	e234      	b.n	800bdf0 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800b986:	2300      	movs	r3, #0
 800b988:	e232      	b.n	800bdf0 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98c:	2200      	movs	r2, #0
 800b98e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b992:	b2da      	uxtb	r2, r3
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99a:	785b      	ldrb	r3, [r3, #1]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fe fbf3 	bl	800a188 <disk_initialize>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b9a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b9ac:	f003 0301 	and.w	r3, r3, #1
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e21b      	b.n	800bdf0 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d007      	beq.n	800b9ce <find_volume+0xda>
 800b9be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b9c2:	f003 0304 	and.w	r3, r3, #4
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d001      	beq.n	800b9ce <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b9ca:	230a      	movs	r3, #10
 800b9cc:	e210      	b.n	800bdf0 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d0:	7858      	ldrb	r0, [r3, #1]
 800b9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d4:	330c      	adds	r3, #12
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	2102      	movs	r1, #2
 800b9da:	f7fe fc3b 	bl	800a254 <disk_ioctl>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <find_volume+0xf4>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e203      	b.n	800bdf0 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ea:	899b      	ldrh	r3, [r3, #12]
 800b9ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9f0:	d80d      	bhi.n	800ba0e <find_volume+0x11a>
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f4:	899b      	ldrh	r3, [r3, #12]
 800b9f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9fa:	d308      	bcc.n	800ba0e <find_volume+0x11a>
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fe:	899b      	ldrh	r3, [r3, #12]
 800ba00:	461a      	mov	r2, r3
 800ba02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba04:	899b      	ldrh	r3, [r3, #12]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	4013      	ands	r3, r2
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <find_volume+0x11e>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e1ee      	b.n	800bdf0 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ba12:	2300      	movs	r3, #0
 800ba14:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ba16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba1a:	f7ff ff15 	bl	800b848 <check_fs>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ba24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d149      	bne.n	800bac0 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	643b      	str	r3, [r7, #64]	; 0x40
 800ba30:	e01e      	b.n	800ba70 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ba32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba34:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ba38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba3a:	011b      	lsls	r3, r3, #4
 800ba3c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ba40:	4413      	add	r3, r2
 800ba42:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ba44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba46:	3304      	adds	r3, #4
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d006      	beq.n	800ba5c <find_volume+0x168>
 800ba4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba50:	3308      	adds	r3, #8
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fc34 	bl	800a2c0 <ld_dword>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	e000      	b.n	800ba5e <find_volume+0x16a>
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	3358      	adds	r3, #88	; 0x58
 800ba64:	443b      	add	r3, r7
 800ba66:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	643b      	str	r3, [r7, #64]	; 0x40
 800ba70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba72:	2b03      	cmp	r3, #3
 800ba74:	d9dd      	bls.n	800ba32 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ba76:	2300      	movs	r3, #0
 800ba78:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ba7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <find_volume+0x192>
 800ba80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba82:	3b01      	subs	r3, #1
 800ba84:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ba86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	3358      	adds	r3, #88	; 0x58
 800ba8c:	443b      	add	r3, r7
 800ba8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ba92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ba94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d005      	beq.n	800baa6 <find_volume+0x1b2>
 800ba9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba9e:	f7ff fed3 	bl	800b848 <check_fs>
 800baa2:	4603      	mov	r3, r0
 800baa4:	e000      	b.n	800baa8 <find_volume+0x1b4>
 800baa6:	2303      	movs	r3, #3
 800baa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800baac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d905      	bls.n	800bac0 <find_volume+0x1cc>
 800bab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab6:	3301      	adds	r3, #1
 800bab8:	643b      	str	r3, [r7, #64]	; 0x40
 800baba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800babc:	2b03      	cmp	r3, #3
 800babe:	d9e2      	bls.n	800ba86 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bac0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bac4:	2b04      	cmp	r3, #4
 800bac6:	d101      	bne.n	800bacc <find_volume+0x1d8>
 800bac8:	2301      	movs	r3, #1
 800baca:	e191      	b.n	800bdf0 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bacc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d901      	bls.n	800bad8 <find_volume+0x1e4>
 800bad4:	230d      	movs	r3, #13
 800bad6:	e18b      	b.n	800bdf0 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bada:	3338      	adds	r3, #56	; 0x38
 800badc:	330b      	adds	r3, #11
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fe fbd6 	bl	800a290 <ld_word>
 800bae4:	4603      	mov	r3, r0
 800bae6:	461a      	mov	r2, r3
 800bae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baea:	899b      	ldrh	r3, [r3, #12]
 800baec:	429a      	cmp	r2, r3
 800baee:	d001      	beq.n	800baf4 <find_volume+0x200>
 800baf0:	230d      	movs	r3, #13
 800baf2:	e17d      	b.n	800bdf0 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800baf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf6:	3338      	adds	r3, #56	; 0x38
 800baf8:	3316      	adds	r3, #22
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fe fbc8 	bl	800a290 <ld_word>
 800bb00:	4603      	mov	r3, r0
 800bb02:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bb04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d106      	bne.n	800bb18 <find_volume+0x224>
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0c:	3338      	adds	r3, #56	; 0x38
 800bb0e:	3324      	adds	r3, #36	; 0x24
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fe fbd5 	bl	800a2c0 <ld_dword>
 800bb16:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb1c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800bb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2a:	789b      	ldrb	r3, [r3, #2]
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d005      	beq.n	800bb3c <find_volume+0x248>
 800bb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb32:	789b      	ldrb	r3, [r3, #2]
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d001      	beq.n	800bb3c <find_volume+0x248>
 800bb38:	230d      	movs	r3, #13
 800bb3a:	e159      	b.n	800bdf0 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3e:	789b      	ldrb	r3, [r3, #2]
 800bb40:	461a      	mov	r2, r3
 800bb42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb44:	fb02 f303 	mul.w	r3, r2, r3
 800bb48:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb58:	895b      	ldrh	r3, [r3, #10]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d008      	beq.n	800bb70 <find_volume+0x27c>
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb60:	895b      	ldrh	r3, [r3, #10]
 800bb62:	461a      	mov	r2, r3
 800bb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb66:	895b      	ldrh	r3, [r3, #10]
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d001      	beq.n	800bb74 <find_volume+0x280>
 800bb70:	230d      	movs	r3, #13
 800bb72:	e13d      	b.n	800bdf0 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb76:	3338      	adds	r3, #56	; 0x38
 800bb78:	3311      	adds	r3, #17
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fe fb88 	bl	800a290 <ld_word>
 800bb80:	4603      	mov	r3, r0
 800bb82:	461a      	mov	r2, r3
 800bb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8a:	891b      	ldrh	r3, [r3, #8]
 800bb8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb8e:	8992      	ldrh	r2, [r2, #12]
 800bb90:	0952      	lsrs	r2, r2, #5
 800bb92:	b292      	uxth	r2, r2
 800bb94:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb98:	fb01 f202 	mul.w	r2, r1, r2
 800bb9c:	1a9b      	subs	r3, r3, r2
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d003      	beq.n	800bbac <find_volume+0x2b8>
 800bba4:	230d      	movs	r3, #13
 800bba6:	e123      	b.n	800bdf0 <find_volume+0x4fc>
 800bba8:	20003d14 	.word	0x20003d14

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	3338      	adds	r3, #56	; 0x38
 800bbb0:	3313      	adds	r3, #19
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fe fb6c 	bl	800a290 <ld_word>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bbbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d106      	bne.n	800bbd0 <find_volume+0x2dc>
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc4:	3338      	adds	r3, #56	; 0x38
 800bbc6:	3320      	adds	r3, #32
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe fb79 	bl	800a2c0 <ld_dword>
 800bbce:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd2:	3338      	adds	r3, #56	; 0x38
 800bbd4:	330e      	adds	r3, #14
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe fb5a 	bl	800a290 <ld_word>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bbe0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <find_volume+0x2f6>
 800bbe6:	230d      	movs	r3, #13
 800bbe8:	e102      	b.n	800bdf0 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bbea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bbec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbee:	4413      	add	r3, r2
 800bbf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbf2:	8911      	ldrh	r1, [r2, #8]
 800bbf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbf6:	8992      	ldrh	r2, [r2, #12]
 800bbf8:	0952      	lsrs	r2, r2, #5
 800bbfa:	b292      	uxth	r2, r2
 800bbfc:	fbb1 f2f2 	udiv	r2, r1, r2
 800bc00:	b292      	uxth	r2, r2
 800bc02:	4413      	add	r3, r2
 800bc04:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bc06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d201      	bcs.n	800bc12 <find_volume+0x31e>
 800bc0e:	230d      	movs	r3, #13
 800bc10:	e0ee      	b.n	800bdf0 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bc12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc1a:	8952      	ldrh	r2, [r2, #10]
 800bc1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc20:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <find_volume+0x338>
 800bc28:	230d      	movs	r3, #13
 800bc2a:	e0e1      	b.n	800bdf0 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc34:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d802      	bhi.n	800bc42 <find_volume+0x34e>
 800bc3c:	2302      	movs	r3, #2
 800bc3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc44:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d802      	bhi.n	800bc52 <find_volume+0x35e>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc54:	1c9a      	adds	r2, r3, #2
 800bc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc58:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc5e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bc60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bc62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc64:	441a      	add	r2, r3
 800bc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc68:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800bc6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	441a      	add	r2, r3
 800bc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc72:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800bc74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc78:	2b03      	cmp	r3, #3
 800bc7a:	d11e      	bne.n	800bcba <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7e:	3338      	adds	r3, #56	; 0x38
 800bc80:	332a      	adds	r3, #42	; 0x2a
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fe fb04 	bl	800a290 <ld_word>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <find_volume+0x39e>
 800bc8e:	230d      	movs	r3, #13
 800bc90:	e0ae      	b.n	800bdf0 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc94:	891b      	ldrh	r3, [r3, #8]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <find_volume+0x3aa>
 800bc9a:	230d      	movs	r3, #13
 800bc9c:	e0a8      	b.n	800bdf0 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	3338      	adds	r3, #56	; 0x38
 800bca2:	332c      	adds	r3, #44	; 0x2c
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7fe fb0b 	bl	800a2c0 <ld_dword>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcae:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb2:	69db      	ldr	r3, [r3, #28]
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	647b      	str	r3, [r7, #68]	; 0x44
 800bcb8:	e01f      	b.n	800bcfa <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbc:	891b      	ldrh	r3, [r3, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <find_volume+0x3d2>
 800bcc2:	230d      	movs	r3, #13
 800bcc4:	e094      	b.n	800bdf0 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bccc:	441a      	add	r2, r3
 800bcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bcd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcd6:	2b02      	cmp	r3, #2
 800bcd8:	d103      	bne.n	800bce2 <find_volume+0x3ee>
 800bcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcdc:	69db      	ldr	r3, [r3, #28]
 800bcde:	005b      	lsls	r3, r3, #1
 800bce0:	e00a      	b.n	800bcf8 <find_volume+0x404>
 800bce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce4:	69da      	ldr	r2, [r3, #28]
 800bce6:	4613      	mov	r3, r2
 800bce8:	005b      	lsls	r3, r3, #1
 800bcea:	4413      	add	r3, r2
 800bcec:	085a      	lsrs	r2, r3, #1
 800bcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf0:	69db      	ldr	r3, [r3, #28]
 800bcf2:	f003 0301 	and.w	r3, r3, #1
 800bcf6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bcf8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfc:	6a1a      	ldr	r2, [r3, #32]
 800bcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd00:	899b      	ldrh	r3, [r3, #12]
 800bd02:	4619      	mov	r1, r3
 800bd04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd06:	440b      	add	r3, r1
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd0c:	8989      	ldrh	r1, [r1, #12]
 800bd0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d201      	bcs.n	800bd1a <find_volume+0x426>
 800bd16:	230d      	movs	r3, #13
 800bd18:	e06a      	b.n	800bdf0 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd20:	619a      	str	r2, [r3, #24]
 800bd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd24:	699a      	ldr	r2, [r3, #24]
 800bd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd28:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2c:	2280      	movs	r2, #128	; 0x80
 800bd2e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bd30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	d149      	bne.n	800bdcc <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3a:	3338      	adds	r3, #56	; 0x38
 800bd3c:	3330      	adds	r3, #48	; 0x30
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fe faa6 	bl	800a290 <ld_word>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d140      	bne.n	800bdcc <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bd4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	4619      	mov	r1, r3
 800bd50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd52:	f7fe fd7f 	bl	800a854 <move_window>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d137      	bne.n	800bdcc <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5e:	2200      	movs	r2, #0
 800bd60:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd64:	3338      	adds	r3, #56	; 0x38
 800bd66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fe fa90 	bl	800a290 <ld_word>
 800bd70:	4603      	mov	r3, r0
 800bd72:	461a      	mov	r2, r3
 800bd74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d127      	bne.n	800bdcc <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7e:	3338      	adds	r3, #56	; 0x38
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7fe fa9d 	bl	800a2c0 <ld_dword>
 800bd86:	4603      	mov	r3, r0
 800bd88:	4a1b      	ldr	r2, [pc, #108]	; (800bdf8 <find_volume+0x504>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d11e      	bne.n	800bdcc <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd90:	3338      	adds	r3, #56	; 0x38
 800bd92:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fe fa92 	bl	800a2c0 <ld_dword>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	4a17      	ldr	r2, [pc, #92]	; (800bdfc <find_volume+0x508>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d113      	bne.n	800bdcc <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda6:	3338      	adds	r3, #56	; 0x38
 800bda8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7fe fa87 	bl	800a2c0 <ld_dword>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdba:	3338      	adds	r3, #56	; 0x38
 800bdbc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe fa7d 	bl	800a2c0 <ld_dword>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdca:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bdd2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bdd4:	4b0a      	ldr	r3, [pc, #40]	; (800be00 <find_volume+0x50c>)
 800bdd6:	881b      	ldrh	r3, [r3, #0]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	4b08      	ldr	r3, [pc, #32]	; (800be00 <find_volume+0x50c>)
 800bdde:	801a      	strh	r2, [r3, #0]
 800bde0:	4b07      	ldr	r3, [pc, #28]	; (800be00 <find_volume+0x50c>)
 800bde2:	881a      	ldrh	r2, [r3, #0]
 800bde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bde8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bdea:	f7fe fccb 	bl	800a784 <clear_lock>
#endif
	return FR_OK;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3758      	adds	r7, #88	; 0x58
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	41615252 	.word	0x41615252
 800bdfc:	61417272 	.word	0x61417272
 800be00:	20003d18 	.word	0x20003d18

0800be04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800be0e:	2309      	movs	r3, #9
 800be10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d02e      	beq.n	800be76 <validate+0x72>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d02a      	beq.n	800be76 <validate+0x72>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d025      	beq.n	800be76 <validate+0x72>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	889a      	ldrh	r2, [r3, #4]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	88db      	ldrh	r3, [r3, #6]
 800be34:	429a      	cmp	r2, r3
 800be36:	d11e      	bne.n	800be76 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7fe fb27 	bl	800a490 <lock_fs>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d014      	beq.n	800be72 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	785b      	ldrb	r3, [r3, #1]
 800be4e:	4618      	mov	r0, r3
 800be50:	f7fe f980 	bl	800a154 <disk_status>
 800be54:	4603      	mov	r3, r0
 800be56:	f003 0301 	and.w	r3, r3, #1
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d102      	bne.n	800be64 <validate+0x60>
				res = FR_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	73fb      	strb	r3, [r7, #15]
 800be62:	e008      	b.n	800be76 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2100      	movs	r1, #0
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fe fb26 	bl	800a4bc <unlock_fs>
 800be70:	e001      	b.n	800be76 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800be72:	230f      	movs	r3, #15
 800be74:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800be76:	7bfb      	ldrb	r3, [r7, #15]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d102      	bne.n	800be82 <validate+0x7e>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	e000      	b.n	800be84 <validate+0x80>
 800be82:	2300      	movs	r3, #0
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	6013      	str	r3, [r2, #0]
	return res;
 800be88:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
	...

0800be94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	4613      	mov	r3, r2
 800bea0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bea6:	f107 0310 	add.w	r3, r7, #16
 800beaa:	4618      	mov	r0, r3
 800beac:	f7ff fc88 	bl	800b7c0 <get_ldnumber>
 800beb0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	da01      	bge.n	800bebc <f_mount+0x28>
 800beb8:	230b      	movs	r3, #11
 800beba:	e048      	b.n	800bf4e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bebc:	4a26      	ldr	r2, [pc, #152]	; (800bf58 <f_mount+0xc4>)
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bec4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00f      	beq.n	800beec <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800becc:	69b8      	ldr	r0, [r7, #24]
 800bece:	f7fe fc59 	bl	800a784 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f000 fe00 	bl	800cadc <ff_del_syncobj>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d101      	bne.n	800bee6 <f_mount+0x52>
 800bee2:	2302      	movs	r3, #2
 800bee4:	e033      	b.n	800bf4e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00f      	beq.n	800bf12 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2200      	movs	r2, #0
 800bef6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	b2da      	uxtb	r2, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	3310      	adds	r3, #16
 800bf00:	4619      	mov	r1, r3
 800bf02:	4610      	mov	r0, r2
 800bf04:	f000 fdcf 	bl	800caa6 <ff_cre_syncobj>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d101      	bne.n	800bf12 <f_mount+0x7e>
 800bf0e:	2302      	movs	r3, #2
 800bf10:	e01d      	b.n	800bf4e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bf12:	68fa      	ldr	r2, [r7, #12]
 800bf14:	4910      	ldr	r1, [pc, #64]	; (800bf58 <f_mount+0xc4>)
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d002      	beq.n	800bf28 <f_mount+0x94>
 800bf22:	79fb      	ldrb	r3, [r7, #7]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d001      	beq.n	800bf2c <f_mount+0x98>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	e010      	b.n	800bf4e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bf2c:	f107 010c 	add.w	r1, r7, #12
 800bf30:	f107 0308 	add.w	r3, r7, #8
 800bf34:	2200      	movs	r2, #0
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7ff fcdc 	bl	800b8f4 <find_volume>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	7dfa      	ldrb	r2, [r7, #23]
 800bf44:	4611      	mov	r1, r2
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fe fab8 	bl	800a4bc <unlock_fs>
 800bf4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3720      	adds	r7, #32
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	20003d14 	.word	0x20003d14

0800bf5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b098      	sub	sp, #96	; 0x60
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	4613      	mov	r3, r2
 800bf68:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d101      	bne.n	800bf74 <f_open+0x18>
 800bf70:	2309      	movs	r3, #9
 800bf72:	e1c2      	b.n	800c2fa <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bf74:	79fb      	ldrb	r3, [r7, #7]
 800bf76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf7a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bf7c:	79fa      	ldrb	r2, [r7, #7]
 800bf7e:	f107 0110 	add.w	r1, r7, #16
 800bf82:	f107 0308 	add.w	r3, r7, #8
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7ff fcb4 	bl	800b8f4 <find_volume>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bf92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	f040 819f 	bne.w	800c2da <f_open+0x37e>
		dj.obj.fs = fs;
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	f107 0314 	add.w	r3, r7, #20
 800bfa6:	4611      	mov	r1, r2
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7ff fb93 	bl	800b6d4 <follow_path>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bfb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d11a      	bne.n	800bff2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bfbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bfc0:	b25b      	sxtb	r3, r3
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	da03      	bge.n	800bfce <f_open+0x72>
				res = FR_INVALID_NAME;
 800bfc6:	2306      	movs	r3, #6
 800bfc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bfcc:	e011      	b.n	800bff2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bfce:	79fb      	ldrb	r3, [r7, #7]
 800bfd0:	f023 0301 	bic.w	r3, r3, #1
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	bf14      	ite	ne
 800bfd8:	2301      	movne	r3, #1
 800bfda:	2300      	moveq	r3, #0
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	461a      	mov	r2, r3
 800bfe0:	f107 0314 	add.w	r3, r7, #20
 800bfe4:	4611      	mov	r1, r2
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fe fa84 	bl	800a4f4 <chk_lock>
 800bfec:	4603      	mov	r3, r0
 800bfee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bff2:	79fb      	ldrb	r3, [r7, #7]
 800bff4:	f003 031c 	and.w	r3, r3, #28
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d07f      	beq.n	800c0fc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bffc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c000:	2b00      	cmp	r3, #0
 800c002:	d017      	beq.n	800c034 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c008:	2b04      	cmp	r3, #4
 800c00a:	d10e      	bne.n	800c02a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c00c:	f7fe face 	bl	800a5ac <enq_lock>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d006      	beq.n	800c024 <f_open+0xc8>
 800c016:	f107 0314 	add.w	r3, r7, #20
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7ff fa34 	bl	800b488 <dir_register>
 800c020:	4603      	mov	r3, r0
 800c022:	e000      	b.n	800c026 <f_open+0xca>
 800c024:	2312      	movs	r3, #18
 800c026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	f043 0308 	orr.w	r3, r3, #8
 800c030:	71fb      	strb	r3, [r7, #7]
 800c032:	e010      	b.n	800c056 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c034:	7ebb      	ldrb	r3, [r7, #26]
 800c036:	f003 0311 	and.w	r3, r3, #17
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d003      	beq.n	800c046 <f_open+0xea>
					res = FR_DENIED;
 800c03e:	2307      	movs	r3, #7
 800c040:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c044:	e007      	b.n	800c056 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c046:	79fb      	ldrb	r3, [r7, #7]
 800c048:	f003 0304 	and.w	r3, r3, #4
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <f_open+0xfa>
 800c050:	2308      	movs	r3, #8
 800c052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c056:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d168      	bne.n	800c130 <f_open+0x1d4>
 800c05e:	79fb      	ldrb	r3, [r7, #7]
 800c060:	f003 0308 	and.w	r3, r3, #8
 800c064:	2b00      	cmp	r3, #0
 800c066:	d063      	beq.n	800c130 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c068:	f7fe f816 	bl	800a098 <get_fattime>
 800c06c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c070:	330e      	adds	r3, #14
 800c072:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c074:	4618      	mov	r0, r3
 800c076:	f7fe f961 	bl	800a33c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07c:	3316      	adds	r3, #22
 800c07e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c080:	4618      	mov	r0, r3
 800c082:	f7fe f95b 	bl	800a33c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c088:	330b      	adds	r3, #11
 800c08a:	2220      	movs	r2, #32
 800c08c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c092:	4611      	mov	r1, r2
 800c094:	4618      	mov	r0, r3
 800c096:	f7ff f963 	bl	800b360 <ld_clust>
 800c09a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff f97b 	bl	800b39e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0aa:	331c      	adds	r3, #28
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe f944 	bl	800a33c <st_dword>
					fs->wflag = 1;
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d037      	beq.n	800c130 <f_open+0x1d4>
						dw = fs->winsect;
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0c4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c0c6:	f107 0314 	add.w	r3, r7, #20
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fe fe6b 	bl	800adaa <remove_chain>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c0da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d126      	bne.n	800c130 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fe fbb4 	bl	800a854 <move_window>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0f6:	3a01      	subs	r2, #1
 800c0f8:	615a      	str	r2, [r3, #20]
 800c0fa:	e019      	b.n	800c130 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c0fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c100:	2b00      	cmp	r3, #0
 800c102:	d115      	bne.n	800c130 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c104:	7ebb      	ldrb	r3, [r7, #26]
 800c106:	f003 0310 	and.w	r3, r3, #16
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d003      	beq.n	800c116 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c10e:	2304      	movs	r3, #4
 800c110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c114:	e00c      	b.n	800c130 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c116:	79fb      	ldrb	r3, [r7, #7]
 800c118:	f003 0302 	and.w	r3, r3, #2
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d007      	beq.n	800c130 <f_open+0x1d4>
 800c120:	7ebb      	ldrb	r3, [r7, #26]
 800c122:	f003 0301 	and.w	r3, r3, #1
 800c126:	2b00      	cmp	r3, #0
 800c128:	d002      	beq.n	800c130 <f_open+0x1d4>
						res = FR_DENIED;
 800c12a:	2307      	movs	r3, #7
 800c12c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c134:	2b00      	cmp	r3, #0
 800c136:	d128      	bne.n	800c18a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c138:	79fb      	ldrb	r3, [r7, #7]
 800c13a:	f003 0308 	and.w	r3, r3, #8
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d003      	beq.n	800c14a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c142:	79fb      	ldrb	r3, [r7, #7]
 800c144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c148:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c158:	79fb      	ldrb	r3, [r7, #7]
 800c15a:	f023 0301 	bic.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	bf14      	ite	ne
 800c162:	2301      	movne	r3, #1
 800c164:	2300      	moveq	r3, #0
 800c166:	b2db      	uxtb	r3, r3
 800c168:	461a      	mov	r2, r3
 800c16a:	f107 0314 	add.w	r3, r7, #20
 800c16e:	4611      	mov	r1, r2
 800c170:	4618      	mov	r0, r3
 800c172:	f7fe fa3d 	bl	800a5f0 <inc_lock>
 800c176:	4602      	mov	r2, r0
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d102      	bne.n	800c18a <f_open+0x22e>
 800c184:	2302      	movs	r3, #2
 800c186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c18a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f040 80a3 	bne.w	800c2da <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c198:	4611      	mov	r1, r2
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7ff f8e0 	bl	800b360 <ld_clust>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a8:	331c      	adds	r3, #28
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fe f888 	bl	800a2c0 <ld_dword>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c1bc:	693a      	ldr	r2, [r7, #16]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	88da      	ldrh	r2, [r3, #6]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	79fa      	ldrb	r2, [r7, #7]
 800c1ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	3330      	adds	r3, #48	; 0x30
 800c1e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fe f8f2 	bl	800a3d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c1f2:	79fb      	ldrb	r3, [r7, #7]
 800c1f4:	f003 0320 	and.w	r3, r3, #32
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d06e      	beq.n	800c2da <f_open+0x37e>
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d06a      	beq.n	800c2da <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	68da      	ldr	r2, [r3, #12]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	895b      	ldrh	r3, [r3, #10]
 800c210:	461a      	mov	r2, r3
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	899b      	ldrh	r3, [r3, #12]
 800c216:	fb02 f303 	mul.w	r3, r2, r3
 800c21a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	657b      	str	r3, [r7, #84]	; 0x54
 800c228:	e016      	b.n	800c258 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fe fbcd 	bl	800a9ce <get_fat>
 800c234:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d802      	bhi.n	800c242 <f_open+0x2e6>
 800c23c:	2302      	movs	r3, #2
 800c23e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c248:	d102      	bne.n	800c250 <f_open+0x2f4>
 800c24a:	2301      	movs	r3, #1
 800c24c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c250:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c254:	1ad3      	subs	r3, r2, r3
 800c256:	657b      	str	r3, [r7, #84]	; 0x54
 800c258:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d103      	bne.n	800c268 <f_open+0x30c>
 800c260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c264:	429a      	cmp	r2, r3
 800c266:	d8e0      	bhi.n	800c22a <f_open+0x2ce>
				}
				fp->clust = clst;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c26c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c26e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c272:	2b00      	cmp	r3, #0
 800c274:	d131      	bne.n	800c2da <f_open+0x37e>
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	899b      	ldrh	r3, [r3, #12]
 800c27a:	461a      	mov	r2, r3
 800c27c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c27e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c282:	fb01 f202 	mul.w	r2, r1, r2
 800c286:	1a9b      	subs	r3, r3, r2
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d026      	beq.n	800c2da <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c290:	4618      	mov	r0, r3
 800c292:	f7fe fb7d 	bl	800a990 <clust2sect>
 800c296:	6478      	str	r0, [r7, #68]	; 0x44
 800c298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d103      	bne.n	800c2a6 <f_open+0x34a>
						res = FR_INT_ERR;
 800c29e:	2302      	movs	r3, #2
 800c2a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c2a4:	e019      	b.n	800c2da <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	899b      	ldrh	r3, [r3, #12]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800c2b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2b4:	441a      	add	r2, r3
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	7858      	ldrb	r0, [r3, #1]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6a1a      	ldr	r2, [r3, #32]
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	f7fd ff83 	bl	800a1d4 <disk_read>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <f_open+0x37e>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c2da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d002      	beq.n	800c2e8 <f_open+0x38c>
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c2ee:	4611      	mov	r1, r2
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7fe f8e3 	bl	800a4bc <unlock_fs>
 800c2f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3760      	adds	r7, #96	; 0x60
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b08c      	sub	sp, #48	; 0x30
 800c306:	af00      	add	r7, sp, #0
 800c308:	60f8      	str	r0, [r7, #12]
 800c30a:	60b9      	str	r1, [r7, #8]
 800c30c:	607a      	str	r2, [r7, #4]
 800c30e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2200      	movs	r2, #0
 800c318:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f107 0210 	add.w	r2, r7, #16
 800c320:	4611      	mov	r1, r2
 800c322:	4618      	mov	r0, r3
 800c324:	f7ff fd6e 	bl	800be04 <validate>
 800c328:	4603      	mov	r3, r0
 800c32a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c32e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c332:	2b00      	cmp	r3, #0
 800c334:	d107      	bne.n	800c346 <f_write+0x44>
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	7d5b      	ldrb	r3, [r3, #21]
 800c33a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c33e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c342:	2b00      	cmp	r3, #0
 800c344:	d009      	beq.n	800c35a <f_write+0x58>
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c34c:	4611      	mov	r1, r2
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fe f8b4 	bl	800a4bc <unlock_fs>
 800c354:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c358:	e192      	b.n	800c680 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	7d1b      	ldrb	r3, [r3, #20]
 800c35e:	f003 0302 	and.w	r3, r3, #2
 800c362:	2b00      	cmp	r3, #0
 800c364:	d106      	bne.n	800c374 <f_write+0x72>
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	2107      	movs	r1, #7
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fe f8a6 	bl	800a4bc <unlock_fs>
 800c370:	2307      	movs	r3, #7
 800c372:	e185      	b.n	800c680 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	699a      	ldr	r2, [r3, #24]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	441a      	add	r2, r3
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	699b      	ldr	r3, [r3, #24]
 800c380:	429a      	cmp	r2, r3
 800c382:	f080 816a 	bcs.w	800c65a <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	699b      	ldr	r3, [r3, #24]
 800c38a:	43db      	mvns	r3, r3
 800c38c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c38e:	e164      	b.n	800c65a <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	693a      	ldr	r2, [r7, #16]
 800c396:	8992      	ldrh	r2, [r2, #12]
 800c398:	fbb3 f1f2 	udiv	r1, r3, r2
 800c39c:	fb01 f202 	mul.w	r2, r1, r2
 800c3a0:	1a9b      	subs	r3, r3, r2
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f040 810f 	bne.w	800c5c6 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	693a      	ldr	r2, [r7, #16]
 800c3ae:	8992      	ldrh	r2, [r2, #12]
 800c3b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3b4:	693a      	ldr	r2, [r7, #16]
 800c3b6:	8952      	ldrh	r2, [r2, #10]
 800c3b8:	3a01      	subs	r2, #1
 800c3ba:	4013      	ands	r3, r2
 800c3bc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d14d      	bne.n	800c460 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	699b      	ldr	r3, [r3, #24]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d10c      	bne.n	800c3e6 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d11a      	bne.n	800c40e <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2100      	movs	r1, #0
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fe fd49 	bl	800ae74 <create_chain>
 800c3e2:	62b8      	str	r0, [r7, #40]	; 0x28
 800c3e4:	e013      	b.n	800c40e <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d007      	beq.n	800c3fe <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	699b      	ldr	r3, [r3, #24]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f7fe fdd5 	bl	800afa4 <clmt_clust>
 800c3fa:	62b8      	str	r0, [r7, #40]	; 0x28
 800c3fc:	e007      	b.n	800c40e <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	69db      	ldr	r3, [r3, #28]
 800c404:	4619      	mov	r1, r3
 800c406:	4610      	mov	r0, r2
 800c408:	f7fe fd34 	bl	800ae74 <create_chain>
 800c40c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c410:	2b00      	cmp	r3, #0
 800c412:	f000 8127 	beq.w	800c664 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d109      	bne.n	800c430 <f_write+0x12e>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2202      	movs	r2, #2
 800c420:	755a      	strb	r2, [r3, #21]
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	2102      	movs	r1, #2
 800c426:	4618      	mov	r0, r3
 800c428:	f7fe f848 	bl	800a4bc <unlock_fs>
 800c42c:	2302      	movs	r3, #2
 800c42e:	e127      	b.n	800c680 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c436:	d109      	bne.n	800c44c <f_write+0x14a>
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2201      	movs	r2, #1
 800c43c:	755a      	strb	r2, [r3, #21]
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	2101      	movs	r1, #1
 800c442:	4618      	mov	r0, r3
 800c444:	f7fe f83a 	bl	800a4bc <unlock_fs>
 800c448:	2301      	movs	r3, #1
 800c44a:	e119      	b.n	800c680 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c450:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d102      	bne.n	800c460 <f_write+0x15e>
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c45e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	7d1b      	ldrb	r3, [r3, #20]
 800c464:	b25b      	sxtb	r3, r3
 800c466:	2b00      	cmp	r3, #0
 800c468:	da1d      	bge.n	800c4a6 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	7858      	ldrb	r0, [r3, #1]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6a1a      	ldr	r2, [r3, #32]
 800c478:	2301      	movs	r3, #1
 800c47a:	f7fd fecb 	bl	800a214 <disk_write>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d009      	beq.n	800c498 <f_write+0x196>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2201      	movs	r2, #1
 800c488:	755a      	strb	r2, [r3, #21]
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	2101      	movs	r1, #1
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe f814 	bl	800a4bc <unlock_fs>
 800c494:	2301      	movs	r3, #1
 800c496:	e0f3      	b.n	800c680 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	7d1b      	ldrb	r3, [r3, #20]
 800c49c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c4a6:	693a      	ldr	r2, [r7, #16]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	69db      	ldr	r3, [r3, #28]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	f7fe fa6e 	bl	800a990 <clust2sect>
 800c4b4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d109      	bne.n	800c4d0 <f_write+0x1ce>
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2202      	movs	r2, #2
 800c4c0:	755a      	strb	r2, [r3, #21]
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	2102      	movs	r1, #2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fd fff8 	bl	800a4bc <unlock_fs>
 800c4cc:	2302      	movs	r3, #2
 800c4ce:	e0d7      	b.n	800c680 <f_write+0x37e>
			sect += csect;
 800c4d0:	697a      	ldr	r2, [r7, #20]
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	899b      	ldrh	r3, [r3, #12]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4e4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d048      	beq.n	800c57e <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c4ec:	69ba      	ldr	r2, [r7, #24]
 800c4ee:	6a3b      	ldr	r3, [r7, #32]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	8952      	ldrh	r2, [r2, #10]
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d905      	bls.n	800c506 <f_write+0x204>
					cc = fs->csize - csect;
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	895b      	ldrh	r3, [r3, #10]
 800c4fe:	461a      	mov	r2, r3
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	7858      	ldrb	r0, [r3, #1]
 800c50a:	6a3b      	ldr	r3, [r7, #32]
 800c50c:	697a      	ldr	r2, [r7, #20]
 800c50e:	69f9      	ldr	r1, [r7, #28]
 800c510:	f7fd fe80 	bl	800a214 <disk_write>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d009      	beq.n	800c52e <f_write+0x22c>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2201      	movs	r2, #1
 800c51e:	755a      	strb	r2, [r3, #21]
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	2101      	movs	r1, #1
 800c524:	4618      	mov	r0, r3
 800c526:	f7fd ffc9 	bl	800a4bc <unlock_fs>
 800c52a:	2301      	movs	r3, #1
 800c52c:	e0a8      	b.n	800c680 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6a1a      	ldr	r2, [r3, #32]
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	6a3a      	ldr	r2, [r7, #32]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d918      	bls.n	800c56e <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6a1a      	ldr	r2, [r3, #32]
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	1ad3      	subs	r3, r2, r3
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	8992      	ldrh	r2, [r2, #12]
 800c54e:	fb02 f303 	mul.w	r3, r2, r3
 800c552:	69fa      	ldr	r2, [r7, #28]
 800c554:	18d1      	adds	r1, r2, r3
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	899b      	ldrh	r3, [r3, #12]
 800c55a:	461a      	mov	r2, r3
 800c55c:	f7fd ff1a 	bl	800a394 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	7d1b      	ldrb	r3, [r3, #20]
 800c564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	899b      	ldrh	r3, [r3, #12]
 800c572:	461a      	mov	r2, r3
 800c574:	6a3b      	ldr	r3, [r7, #32]
 800c576:	fb02 f303 	mul.w	r3, r2, r3
 800c57a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c57c:	e050      	b.n	800c620 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	6a1b      	ldr	r3, [r3, #32]
 800c582:	697a      	ldr	r2, [r7, #20]
 800c584:	429a      	cmp	r2, r3
 800c586:	d01b      	beq.n	800c5c0 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	699a      	ldr	r2, [r3, #24]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c590:	429a      	cmp	r2, r3
 800c592:	d215      	bcs.n	800c5c0 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	7858      	ldrb	r0, [r3, #1]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c59e:	2301      	movs	r3, #1
 800c5a0:	697a      	ldr	r2, [r7, #20]
 800c5a2:	f7fd fe17 	bl	800a1d4 <disk_read>
 800c5a6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d009      	beq.n	800c5c0 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	755a      	strb	r2, [r3, #21]
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fd ff80 	bl	800a4bc <unlock_fs>
 800c5bc:	2301      	movs	r3, #1
 800c5be:	e05f      	b.n	800c680 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	697a      	ldr	r2, [r7, #20]
 800c5c4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	899b      	ldrh	r3, [r3, #12]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	693a      	ldr	r2, [r7, #16]
 800c5d2:	8992      	ldrh	r2, [r2, #12]
 800c5d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5d8:	fb01 f202 	mul.w	r2, r1, r2
 800c5dc:	1a9b      	subs	r3, r3, r2
 800c5de:	1ac3      	subs	r3, r0, r3
 800c5e0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c5e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d901      	bls.n	800c5ee <f_write+0x2ec>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	699b      	ldr	r3, [r3, #24]
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	8992      	ldrh	r2, [r2, #12]
 800c5fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800c600:	fb00 f202 	mul.w	r2, r0, r2
 800c604:	1a9b      	subs	r3, r3, r2
 800c606:	440b      	add	r3, r1
 800c608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c60a:	69f9      	ldr	r1, [r7, #28]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fd fec1 	bl	800a394 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	7d1b      	ldrb	r3, [r3, #20]
 800c616:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c61a:	b2da      	uxtb	r2, r3
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c620:	69fa      	ldr	r2, [r7, #28]
 800c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c624:	4413      	add	r3, r2
 800c626:	61fb      	str	r3, [r7, #28]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	699a      	ldr	r2, [r3, #24]
 800c62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62e:	441a      	add	r2, r3
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	619a      	str	r2, [r3, #24]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	68da      	ldr	r2, [r3, #12]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	699b      	ldr	r3, [r3, #24]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	bf38      	it	cc
 800c640:	461a      	movcc	r2, r3
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	60da      	str	r2, [r3, #12]
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64c:	441a      	add	r2, r3
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	601a      	str	r2, [r3, #0]
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f47f ae97 	bne.w	800c390 <f_write+0x8e>
 800c662:	e000      	b.n	800c666 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c664:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	7d1b      	ldrb	r3, [r3, #20]
 800c66a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	2100      	movs	r1, #0
 800c678:	4618      	mov	r0, r3
 800c67a:	f7fd ff1f 	bl	800a4bc <unlock_fs>
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3730      	adds	r7, #48	; 0x30
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f107 0208 	add.w	r2, r7, #8
 800c696:	4611      	mov	r1, r2
 800c698:	4618      	mov	r0, r3
 800c69a:	f7ff fbb3 	bl	800be04 <validate>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d16d      	bne.n	800c784 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	7d1b      	ldrb	r3, [r3, #20]
 800c6ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d067      	beq.n	800c784 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	7d1b      	ldrb	r3, [r3, #20]
 800c6b8:	b25b      	sxtb	r3, r3
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	da1a      	bge.n	800c6f4 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	7858      	ldrb	r0, [r3, #1]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6a1a      	ldr	r2, [r3, #32]
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	f7fd fda1 	bl	800a214 <disk_write>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d006      	beq.n	800c6e6 <f_sync+0x5e>
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	2101      	movs	r1, #1
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7fd feed 	bl	800a4bc <unlock_fs>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e055      	b.n	800c792 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	7d1b      	ldrb	r3, [r3, #20]
 800c6ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c6f4:	f7fd fcd0 	bl	800a098 <get_fattime>
 800c6f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c6fa:	68ba      	ldr	r2, [r7, #8]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c700:	4619      	mov	r1, r3
 800c702:	4610      	mov	r0, r2
 800c704:	f7fe f8a6 	bl	800a854 <move_window>
 800c708:	4603      	mov	r3, r0
 800c70a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c70c:	7dfb      	ldrb	r3, [r7, #23]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d138      	bne.n	800c784 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c716:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	330b      	adds	r3, #11
 800c71c:	781a      	ldrb	r2, [r3, #0]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	330b      	adds	r3, #11
 800c722:	f042 0220 	orr.w	r2, r2, #32
 800c726:	b2d2      	uxtb	r2, r2
 800c728:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6818      	ldr	r0, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	461a      	mov	r2, r3
 800c734:	68f9      	ldr	r1, [r7, #12]
 800c736:	f7fe fe32 	bl	800b39e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f103 021c 	add.w	r2, r3, #28
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	4619      	mov	r1, r3
 800c746:	4610      	mov	r0, r2
 800c748:	f7fd fdf8 	bl	800a33c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	3316      	adds	r3, #22
 800c750:	6939      	ldr	r1, [r7, #16]
 800c752:	4618      	mov	r0, r3
 800c754:	f7fd fdf2 	bl	800a33c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	3312      	adds	r3, #18
 800c75c:	2100      	movs	r1, #0
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fd fdd1 	bl	800a306 <st_word>
					fs->wflag = 1;
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	2201      	movs	r2, #1
 800c768:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7fe f89f 	bl	800a8b0 <sync_fs>
 800c772:	4603      	mov	r3, r0
 800c774:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	7d1b      	ldrb	r3, [r3, #20]
 800c77a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c77e:	b2da      	uxtb	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	7dfa      	ldrb	r2, [r7, #23]
 800c788:	4611      	mov	r1, r2
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fd fe96 	bl	800a4bc <unlock_fs>
 800c790:	7dfb      	ldrb	r3, [r7, #23]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3718      	adds	r7, #24
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f7ff ff70 	bl	800c688 <f_sync>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c7ac:	7bfb      	ldrb	r3, [r7, #15]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d11d      	bne.n	800c7ee <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f107 0208 	add.w	r2, r7, #8
 800c7b8:	4611      	mov	r1, r2
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7ff fb22 	bl	800be04 <validate>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c7c4:	7bfb      	ldrb	r3, [r7, #15]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d111      	bne.n	800c7ee <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	691b      	ldr	r3, [r3, #16]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fd ff9c 	bl	800a70c <dec_lock>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c7d8:	7bfb      	ldrb	r3, [r7, #15]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d102      	bne.n	800c7e4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fd fe67 	bl	800a4bc <unlock_fs>
#endif
		}
	}
	return res;
 800c7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3710      	adds	r7, #16
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b090      	sub	sp, #64	; 0x40
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800c802:	f107 010c 	add.w	r1, r7, #12
 800c806:	1d3b      	adds	r3, r7, #4
 800c808:	2200      	movs	r2, #0
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7ff f872 	bl	800b8f4 <find_volume>
 800c810:	4603      	mov	r3, r0
 800c812:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800c816:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d11f      	bne.n	800c85e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	f107 030c 	add.w	r3, r7, #12
 800c824:	4611      	mov	r1, r2
 800c826:	4618      	mov	r0, r3
 800c828:	f7fe ff54 	bl	800b6d4 <follow_path>
 800c82c:	4603      	mov	r3, r0
 800c82e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800c832:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c836:	2b00      	cmp	r3, #0
 800c838:	d111      	bne.n	800c85e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800c83a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c83e:	b25b      	sxtb	r3, r3
 800c840:	2b00      	cmp	r3, #0
 800c842:	da03      	bge.n	800c84c <f_stat+0x54>
				res = FR_INVALID_NAME;
 800c844:	2306      	movs	r3, #6
 800c846:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c84a:	e008      	b.n	800c85e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d005      	beq.n	800c85e <f_stat+0x66>
 800c852:	f107 030c 	add.w	r3, r7, #12
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fe fe47 	bl	800b4ec <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c864:	4611      	mov	r1, r2
 800c866:	4618      	mov	r0, r3
 800c868:	f7fd fe28 	bl	800a4bc <unlock_fs>
 800c86c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c870:	4618      	mov	r0, r3
 800c872:	3740      	adds	r7, #64	; 0x40
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b092      	sub	sp, #72	; 0x48
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c884:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c888:	f107 030c 	add.w	r3, r7, #12
 800c88c:	2200      	movs	r2, #0
 800c88e:	4618      	mov	r0, r3
 800c890:	f7ff f830 	bl	800b8f4 <find_volume>
 800c894:	4603      	mov	r3, r0
 800c896:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800c89a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f040 8099 	bne.w	800c9d6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c8a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ac:	699a      	ldr	r2, [r3, #24]
 800c8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b0:	69db      	ldr	r3, [r3, #28]
 800c8b2:	3b02      	subs	r3, #2
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d804      	bhi.n	800c8c2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ba:	699a      	ldr	r2, [r3, #24]
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	601a      	str	r2, [r3, #0]
 800c8c0:	e089      	b.n	800c9d6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d128      	bne.n	800c920 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c8ce:	2302      	movs	r3, #2
 800c8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c8d6:	f107 0314 	add.w	r3, r7, #20
 800c8da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7fe f876 	bl	800a9ce <get_fat>
 800c8e2:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8ea:	d103      	bne.n	800c8f4 <f_getfree+0x7c>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c8f2:	e063      	b.n	800c9bc <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d103      	bne.n	800c902 <f_getfree+0x8a>
 800c8fa:	2302      	movs	r3, #2
 800c8fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c900:	e05c      	b.n	800c9bc <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c904:	2b00      	cmp	r3, #0
 800c906:	d102      	bne.n	800c90e <f_getfree+0x96>
 800c908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c90a:	3301      	adds	r3, #1
 800c90c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800c90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c910:	3301      	adds	r3, #1
 800c912:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c916:	69db      	ldr	r3, [r3, #28]
 800c918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d3db      	bcc.n	800c8d6 <f_getfree+0x5e>
 800c91e:	e04d      	b.n	800c9bc <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	69db      	ldr	r3, [r3, #28]
 800c924:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c92a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800c92c:	2300      	movs	r3, #0
 800c92e:	637b      	str	r3, [r7, #52]	; 0x34
 800c930:	2300      	movs	r3, #0
 800c932:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800c934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c936:	2b00      	cmp	r3, #0
 800c938:	d113      	bne.n	800c962 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c93a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93e:	1c5a      	adds	r2, r3, #1
 800c940:	63ba      	str	r2, [r7, #56]	; 0x38
 800c942:	4619      	mov	r1, r3
 800c944:	f7fd ff86 	bl	800a854 <move_window>
 800c948:	4603      	mov	r3, r0
 800c94a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800c94e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c952:	2b00      	cmp	r3, #0
 800c954:	d131      	bne.n	800c9ba <f_getfree+0x142>
							p = fs->win;
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	3338      	adds	r3, #56	; 0x38
 800c95a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800c95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95e:	899b      	ldrh	r3, [r3, #12]
 800c960:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	2b02      	cmp	r3, #2
 800c968:	d10f      	bne.n	800c98a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c96a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c96c:	f7fd fc90 	bl	800a290 <ld_word>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d102      	bne.n	800c97c <f_getfree+0x104>
 800c976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c978:	3301      	adds	r3, #1
 800c97a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800c97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97e:	3302      	adds	r3, #2
 800c980:	633b      	str	r3, [r7, #48]	; 0x30
 800c982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c984:	3b02      	subs	r3, #2
 800c986:	637b      	str	r3, [r7, #52]	; 0x34
 800c988:	e010      	b.n	800c9ac <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c98a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c98c:	f7fd fc98 	bl	800a2c0 <ld_dword>
 800c990:	4603      	mov	r3, r0
 800c992:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c996:	2b00      	cmp	r3, #0
 800c998:	d102      	bne.n	800c9a0 <f_getfree+0x128>
 800c99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c99c:	3301      	adds	r3, #1
 800c99e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a2:	3304      	adds	r3, #4
 800c9a4:	633b      	str	r3, [r7, #48]	; 0x30
 800c9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a8:	3b04      	subs	r3, #4
 800c9aa:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800c9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1bd      	bne.n	800c934 <f_getfree+0xbc>
 800c9b8:	e000      	b.n	800c9bc <f_getfree+0x144>
							if (res != FR_OK) break;
 800c9ba:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9c0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9c6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ca:	791a      	ldrb	r2, [r3, #4]
 800c9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ce:	f042 0201 	orr.w	r2, r2, #1
 800c9d2:	b2d2      	uxtb	r2, r2
 800c9d4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800c9dc:	4611      	mov	r1, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fd fd6c 	bl	800a4bc <unlock_fs>
 800c9e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3748      	adds	r7, #72	; 0x48
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b087      	sub	sp, #28
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ca02:	2300      	movs	r3, #0
 800ca04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ca06:	4b1f      	ldr	r3, [pc, #124]	; (800ca84 <FATFS_LinkDriverEx+0x94>)
 800ca08:	7a5b      	ldrb	r3, [r3, #9]
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d131      	bne.n	800ca74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ca10:	4b1c      	ldr	r3, [pc, #112]	; (800ca84 <FATFS_LinkDriverEx+0x94>)
 800ca12:	7a5b      	ldrb	r3, [r3, #9]
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	461a      	mov	r2, r3
 800ca18:	4b1a      	ldr	r3, [pc, #104]	; (800ca84 <FATFS_LinkDriverEx+0x94>)
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ca1e:	4b19      	ldr	r3, [pc, #100]	; (800ca84 <FATFS_LinkDriverEx+0x94>)
 800ca20:	7a5b      	ldrb	r3, [r3, #9]
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	4a17      	ldr	r2, [pc, #92]	; (800ca84 <FATFS_LinkDriverEx+0x94>)
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	68fa      	ldr	r2, [r7, #12]
 800ca2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ca2e:	4b15      	ldr	r3, [pc, #84]	; (800ca84 <FATFS_LinkDriverEx+0x94>)
 800ca30:	7a5b      	ldrb	r3, [r3, #9]
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	461a      	mov	r2, r3
 800ca36:	4b13      	ldr	r3, [pc, #76]	; (800ca84 <FATFS_LinkDriverEx+0x94>)
 800ca38:	4413      	add	r3, r2
 800ca3a:	79fa      	ldrb	r2, [r7, #7]
 800ca3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ca3e:	4b11      	ldr	r3, [pc, #68]	; (800ca84 <FATFS_LinkDriverEx+0x94>)
 800ca40:	7a5b      	ldrb	r3, [r3, #9]
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	1c5a      	adds	r2, r3, #1
 800ca46:	b2d1      	uxtb	r1, r2
 800ca48:	4a0e      	ldr	r2, [pc, #56]	; (800ca84 <FATFS_LinkDriverEx+0x94>)
 800ca4a:	7251      	strb	r1, [r2, #9]
 800ca4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ca4e:	7dbb      	ldrb	r3, [r7, #22]
 800ca50:	3330      	adds	r3, #48	; 0x30
 800ca52:	b2da      	uxtb	r2, r3
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	223a      	movs	r2, #58	; 0x3a
 800ca5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	3302      	adds	r3, #2
 800ca64:	222f      	movs	r2, #47	; 0x2f
 800ca66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	3303      	adds	r3, #3
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ca70:	2300      	movs	r3, #0
 800ca72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ca74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	371c      	adds	r7, #28
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	20003d3c 	.word	0x20003d3c

0800ca88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ca92:	2200      	movs	r2, #0
 800ca94:	6839      	ldr	r1, [r7, #0]
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7ff ffaa 	bl	800c9f0 <FATFS_LinkDriverEx>
 800ca9c:	4603      	mov	r3, r0
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b084      	sub	sp, #16
 800caaa:	af00      	add	r7, sp, #0
 800caac:	4603      	mov	r3, r0
 800caae:	6039      	str	r1, [r7, #0]
 800cab0:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800cab2:	2200      	movs	r2, #0
 800cab4:	2101      	movs	r1, #1
 800cab6:	2001      	movs	r0, #1
 800cab8:	f000 fa56 	bl	800cf68 <osSemaphoreNew>
 800cabc:	4602      	mov	r2, r0
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	bf14      	ite	ne
 800caca:	2301      	movne	r3, #1
 800cacc:	2300      	moveq	r3, #0
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	60fb      	str	r3, [r7, #12]

    return ret;
 800cad2:	68fb      	ldr	r3, [r7, #12]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fb5f 	bl	800d1a8 <osSemaphoreDelete>
#endif
    return 1;
 800caea:	2301      	movs	r3, #1
}
 800caec:	4618      	mov	r0, r3
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800cafc:	2300      	movs	r3, #0
 800cafe:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800cb00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 fab9 	bl	800d07c <osSemaphoreAcquire>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d101      	bne.n	800cb14 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800cb10:	2301      	movs	r3, #1
 800cb12:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800cb14:	68fb      	ldr	r3, [r7, #12]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b082      	sub	sp, #8
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 fafa 	bl	800d120 <osSemaphoreRelease>
#endif
}
 800cb2c:	bf00      	nop
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <__NVIC_SetPriority>:
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	6039      	str	r1, [r7, #0]
 800cb3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cb40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	db0a      	blt.n	800cb5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	b2da      	uxtb	r2, r3
 800cb4c:	490c      	ldr	r1, [pc, #48]	; (800cb80 <__NVIC_SetPriority+0x4c>)
 800cb4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb52:	0112      	lsls	r2, r2, #4
 800cb54:	b2d2      	uxtb	r2, r2
 800cb56:	440b      	add	r3, r1
 800cb58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cb5c:	e00a      	b.n	800cb74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	4908      	ldr	r1, [pc, #32]	; (800cb84 <__NVIC_SetPriority+0x50>)
 800cb64:	79fb      	ldrb	r3, [r7, #7]
 800cb66:	f003 030f 	and.w	r3, r3, #15
 800cb6a:	3b04      	subs	r3, #4
 800cb6c:	0112      	lsls	r2, r2, #4
 800cb6e:	b2d2      	uxtb	r2, r2
 800cb70:	440b      	add	r3, r1
 800cb72:	761a      	strb	r2, [r3, #24]
}
 800cb74:	bf00      	nop
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	e000e100 	.word	0xe000e100
 800cb84:	e000ed00 	.word	0xe000ed00

0800cb88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	f06f 0004 	mvn.w	r0, #4
 800cb92:	f7ff ffcf 	bl	800cb34 <__NVIC_SetPriority>
#endif
}
 800cb96:	bf00      	nop
 800cb98:	bd80      	pop	{r7, pc}
	...

0800cb9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cba2:	f3ef 8305 	mrs	r3, IPSR
 800cba6:	603b      	str	r3, [r7, #0]
  return(result);
 800cba8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d003      	beq.n	800cbb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cbae:	f06f 0305 	mvn.w	r3, #5
 800cbb2:	607b      	str	r3, [r7, #4]
 800cbb4:	e00c      	b.n	800cbd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cbb6:	4b0a      	ldr	r3, [pc, #40]	; (800cbe0 <osKernelInitialize+0x44>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d105      	bne.n	800cbca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cbbe:	4b08      	ldr	r3, [pc, #32]	; (800cbe0 <osKernelInitialize+0x44>)
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	607b      	str	r3, [r7, #4]
 800cbc8:	e002      	b.n	800cbd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cbca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cbd0:	687b      	ldr	r3, [r7, #4]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	370c      	adds	r7, #12
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop
 800cbe0:	20003d48 	.word	0x20003d48

0800cbe4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbea:	f3ef 8305 	mrs	r3, IPSR
 800cbee:	603b      	str	r3, [r7, #0]
  return(result);
 800cbf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d003      	beq.n	800cbfe <osKernelStart+0x1a>
    stat = osErrorISR;
 800cbf6:	f06f 0305 	mvn.w	r3, #5
 800cbfa:	607b      	str	r3, [r7, #4]
 800cbfc:	e010      	b.n	800cc20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cbfe:	4b0b      	ldr	r3, [pc, #44]	; (800cc2c <osKernelStart+0x48>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d109      	bne.n	800cc1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cc06:	f7ff ffbf 	bl	800cb88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cc0a:	4b08      	ldr	r3, [pc, #32]	; (800cc2c <osKernelStart+0x48>)
 800cc0c:	2202      	movs	r2, #2
 800cc0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cc10:	f002 f830 	bl	800ec74 <vTaskStartScheduler>
      stat = osOK;
 800cc14:	2300      	movs	r3, #0
 800cc16:	607b      	str	r3, [r7, #4]
 800cc18:	e002      	b.n	800cc20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cc1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cc20:	687b      	ldr	r3, [r7, #4]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	20003d48 	.word	0x20003d48

0800cc30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b08e      	sub	sp, #56	; 0x38
 800cc34:	af04      	add	r7, sp, #16
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc40:	f3ef 8305 	mrs	r3, IPSR
 800cc44:	617b      	str	r3, [r7, #20]
  return(result);
 800cc46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d17e      	bne.n	800cd4a <osThreadNew+0x11a>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d07b      	beq.n	800cd4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cc52:	2380      	movs	r3, #128	; 0x80
 800cc54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cc56:	2318      	movs	r3, #24
 800cc58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cc5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d045      	beq.n	800ccf6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d002      	beq.n	800cc78 <osThreadNew+0x48>
        name = attr->name;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	699b      	ldr	r3, [r3, #24]
 800cc84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d008      	beq.n	800cc9e <osThreadNew+0x6e>
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	2b38      	cmp	r3, #56	; 0x38
 800cc90:	d805      	bhi.n	800cc9e <osThreadNew+0x6e>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	f003 0301 	and.w	r3, r3, #1
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <osThreadNew+0x72>
        return (NULL);
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e054      	b.n	800cd4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	695b      	ldr	r3, [r3, #20]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d003      	beq.n	800ccb2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	695b      	ldr	r3, [r3, #20]
 800ccae:	089b      	lsrs	r3, r3, #2
 800ccb0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00e      	beq.n	800ccd8 <osThreadNew+0xa8>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	2ba7      	cmp	r3, #167	; 0xa7
 800ccc0:	d90a      	bls.n	800ccd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d006      	beq.n	800ccd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	695b      	ldr	r3, [r3, #20]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d002      	beq.n	800ccd8 <osThreadNew+0xa8>
        mem = 1;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	61bb      	str	r3, [r7, #24]
 800ccd6:	e010      	b.n	800ccfa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10c      	bne.n	800ccfa <osThreadNew+0xca>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d108      	bne.n	800ccfa <osThreadNew+0xca>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d104      	bne.n	800ccfa <osThreadNew+0xca>
          mem = 0;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	61bb      	str	r3, [r7, #24]
 800ccf4:	e001      	b.n	800ccfa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d110      	bne.n	800cd22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd08:	9202      	str	r2, [sp, #8]
 800cd0a:	9301      	str	r3, [sp, #4]
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	6a3a      	ldr	r2, [r7, #32]
 800cd14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f001 fd4e 	bl	800e7b8 <xTaskCreateStatic>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	613b      	str	r3, [r7, #16]
 800cd20:	e013      	b.n	800cd4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d110      	bne.n	800cd4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd28:	6a3b      	ldr	r3, [r7, #32]
 800cd2a:	b29a      	uxth	r2, r3
 800cd2c:	f107 0310 	add.w	r3, r7, #16
 800cd30:	9301      	str	r3, [sp, #4]
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f001 fd99 	bl	800e872 <xTaskCreate>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d001      	beq.n	800cd4a <osThreadNew+0x11a>
            hTask = NULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd4a:	693b      	ldr	r3, [r7, #16]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3728      	adds	r7, #40	; 0x28
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800cd54:	b580      	push	{r7, lr}
 800cd56:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800cd58:	2000      	movs	r0, #0
 800cd5a:	f001 fee5 	bl	800eb28 <vTaskDelete>
#endif
  for (;;);
 800cd5e:	e7fe      	b.n	800cd5e <osThreadExit+0xa>

0800cd60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd68:	f3ef 8305 	mrs	r3, IPSR
 800cd6c:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d003      	beq.n	800cd7c <osDelay+0x1c>
    stat = osErrorISR;
 800cd74:	f06f 0305 	mvn.w	r3, #5
 800cd78:	60fb      	str	r3, [r7, #12]
 800cd7a:	e007      	b.n	800cd8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d002      	beq.n	800cd8c <osDelay+0x2c>
      vTaskDelay(ticks);
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f001 ff40 	bl	800ec0c <vTaskDelay>
    }
  }

  return (stat);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b086      	sub	sp, #24
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cda2:	f3ef 8305 	mrs	r3, IPSR
 800cda6:	60fb      	str	r3, [r7, #12]
  return(result);
 800cda8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d12d      	bne.n	800ce0a <osEventFlagsNew+0x74>
    mem = -1;
 800cdae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdb2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d015      	beq.n	800cde6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d006      	beq.n	800cdd0 <osEventFlagsNew+0x3a>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	2b1f      	cmp	r3, #31
 800cdc8:	d902      	bls.n	800cdd0 <osEventFlagsNew+0x3a>
        mem = 1;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	613b      	str	r3, [r7, #16]
 800cdce:	e00c      	b.n	800cdea <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d108      	bne.n	800cdea <osEventFlagsNew+0x54>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d104      	bne.n	800cdea <osEventFlagsNew+0x54>
          mem = 0;
 800cde0:	2300      	movs	r3, #0
 800cde2:	613b      	str	r3, [r7, #16]
 800cde4:	e001      	b.n	800cdea <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800cde6:	2300      	movs	r3, #0
 800cde8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d106      	bne.n	800cdfe <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f000 fa2f 	bl	800d258 <xEventGroupCreateStatic>
 800cdfa:	6178      	str	r0, [r7, #20]
 800cdfc:	e005      	b.n	800ce0a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d102      	bne.n	800ce0a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800ce04:	f000 fa5f 	bl	800d2c6 <xEventGroupCreate>
 800ce08:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800ce0a:	697b      	ldr	r3, [r7, #20]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3718      	adds	r7, #24
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d004      	beq.n	800ce32 <osEventFlagsSet+0x1e>
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d003      	beq.n	800ce3a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800ce32:	f06f 0303 	mvn.w	r3, #3
 800ce36:	617b      	str	r3, [r7, #20]
 800ce38:	e028      	b.n	800ce8c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce3a:	f3ef 8305 	mrs	r3, IPSR
 800ce3e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce40:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d01d      	beq.n	800ce82 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800ce46:	2300      	movs	r3, #0
 800ce48:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800ce4a:	f107 0308 	add.w	r3, r7, #8
 800ce4e:	461a      	mov	r2, r3
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	6938      	ldr	r0, [r7, #16]
 800ce54:	f000 fbda 	bl	800d60c <xEventGroupSetBitsFromISR>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d103      	bne.n	800ce66 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800ce5e:	f06f 0302 	mvn.w	r3, #2
 800ce62:	617b      	str	r3, [r7, #20]
 800ce64:	e012      	b.n	800ce8c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00d      	beq.n	800ce8c <osEventFlagsSet+0x78>
 800ce70:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <osEventFlagsSet+0x84>)
 800ce72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce76:	601a      	str	r2, [r3, #0]
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	e004      	b.n	800ce8c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800ce82:	6839      	ldr	r1, [r7, #0]
 800ce84:	6938      	ldr	r0, [r7, #16]
 800ce86:	f000 fb07 	bl	800d498 <xEventGroupSetBits>
 800ce8a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800ce8c:	697b      	ldr	r3, [r7, #20]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3718      	adds	r7, #24
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	e000ed04 	.word	0xe000ed04

0800ce9c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08c      	sub	sp, #48	; 0x30
 800cea0:	af02      	add	r7, sp, #8
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
 800cea8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d004      	beq.n	800cebe <osEventFlagsWait+0x22>
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d003      	beq.n	800cec6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800cebe:	f06f 0303 	mvn.w	r3, #3
 800cec2:	61fb      	str	r3, [r7, #28]
 800cec4:	e04b      	b.n	800cf5e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cec6:	f3ef 8305 	mrs	r3, IPSR
 800ceca:	617b      	str	r3, [r7, #20]
  return(result);
 800cecc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d003      	beq.n	800ceda <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800ced2:	f06f 0305 	mvn.w	r3, #5
 800ced6:	61fb      	str	r3, [r7, #28]
 800ced8:	e041      	b.n	800cf5e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800cee4:	2301      	movs	r3, #1
 800cee6:	627b      	str	r3, [r7, #36]	; 0x24
 800cee8:	e001      	b.n	800ceee <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800ceea:	2300      	movs	r3, #0
 800ceec:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f003 0302 	and.w	r3, r3, #2
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800cef8:	2300      	movs	r3, #0
 800cefa:	623b      	str	r3, [r7, #32]
 800cefc:	e001      	b.n	800cf02 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800cefe:	2301      	movs	r3, #1
 800cf00:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	9300      	str	r3, [sp, #0]
 800cf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf08:	6a3a      	ldr	r2, [r7, #32]
 800cf0a:	68b9      	ldr	r1, [r7, #8]
 800cf0c:	69b8      	ldr	r0, [r7, #24]
 800cf0e:	f000 f9f5 	bl	800d2fc <xEventGroupWaitBits>
 800cf12:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f003 0301 	and.w	r3, r3, #1
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d010      	beq.n	800cf40 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	4013      	ands	r3, r2
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d019      	beq.n	800cf5e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d003      	beq.n	800cf38 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800cf30:	f06f 0301 	mvn.w	r3, #1
 800cf34:	61fb      	str	r3, [r7, #28]
 800cf36:	e012      	b.n	800cf5e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800cf38:	f06f 0302 	mvn.w	r3, #2
 800cf3c:	61fb      	str	r3, [r7, #28]
 800cf3e:	e00e      	b.n	800cf5e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	69fb      	ldr	r3, [r7, #28]
 800cf44:	4013      	ands	r3, r2
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d109      	bne.n	800cf5e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d003      	beq.n	800cf58 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800cf50:	f06f 0301 	mvn.w	r3, #1
 800cf54:	61fb      	str	r3, [r7, #28]
 800cf56:	e002      	b.n	800cf5e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800cf58:	f06f 0302 	mvn.w	r3, #2
 800cf5c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800cf5e:	69fb      	ldr	r3, [r7, #28]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3728      	adds	r7, #40	; 0x28
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b08a      	sub	sp, #40	; 0x28
 800cf6c:	af02      	add	r7, sp, #8
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cf74:	2300      	movs	r3, #0
 800cf76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf78:	f3ef 8305 	mrs	r3, IPSR
 800cf7c:	613b      	str	r3, [r7, #16]
  return(result);
 800cf7e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d175      	bne.n	800d070 <osSemaphoreNew+0x108>
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d072      	beq.n	800d070 <osSemaphoreNew+0x108>
 800cf8a:	68ba      	ldr	r2, [r7, #8]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d86e      	bhi.n	800d070 <osSemaphoreNew+0x108>
    mem = -1;
 800cf92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d015      	beq.n	800cfca <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d006      	beq.n	800cfb4 <osSemaphoreNew+0x4c>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	2b4f      	cmp	r3, #79	; 0x4f
 800cfac:	d902      	bls.n	800cfb4 <osSemaphoreNew+0x4c>
        mem = 1;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	61bb      	str	r3, [r7, #24]
 800cfb2:	e00c      	b.n	800cfce <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d108      	bne.n	800cfce <osSemaphoreNew+0x66>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d104      	bne.n	800cfce <osSemaphoreNew+0x66>
          mem = 0;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	61bb      	str	r3, [r7, #24]
 800cfc8:	e001      	b.n	800cfce <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfd4:	d04c      	beq.n	800d070 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d128      	bne.n	800d02e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d10a      	bne.n	800cff8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	2203      	movs	r2, #3
 800cfe8:	9200      	str	r2, [sp, #0]
 800cfea:	2200      	movs	r2, #0
 800cfec:	2100      	movs	r1, #0
 800cfee:	2001      	movs	r0, #1
 800cff0:	f000 fc3c 	bl	800d86c <xQueueGenericCreateStatic>
 800cff4:	61f8      	str	r0, [r7, #28]
 800cff6:	e005      	b.n	800d004 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800cff8:	2203      	movs	r2, #3
 800cffa:	2100      	movs	r1, #0
 800cffc:	2001      	movs	r0, #1
 800cffe:	f000 fcad 	bl	800d95c <xQueueGenericCreate>
 800d002:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d022      	beq.n	800d050 <osSemaphoreNew+0xe8>
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d01f      	beq.n	800d050 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d010:	2300      	movs	r3, #0
 800d012:	2200      	movs	r2, #0
 800d014:	2100      	movs	r1, #0
 800d016:	69f8      	ldr	r0, [r7, #28]
 800d018:	f000 fd68 	bl	800daec <xQueueGenericSend>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d016      	beq.n	800d050 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d022:	69f8      	ldr	r0, [r7, #28]
 800d024:	f001 f9f4 	bl	800e410 <vQueueDelete>
            hSemaphore = NULL;
 800d028:	2300      	movs	r3, #0
 800d02a:	61fb      	str	r3, [r7, #28]
 800d02c:	e010      	b.n	800d050 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	2b01      	cmp	r3, #1
 800d032:	d108      	bne.n	800d046 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	461a      	mov	r2, r3
 800d03a:	68b9      	ldr	r1, [r7, #8]
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	f000 fcea 	bl	800da16 <xQueueCreateCountingSemaphoreStatic>
 800d042:	61f8      	str	r0, [r7, #28]
 800d044:	e004      	b.n	800d050 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d046:	68b9      	ldr	r1, [r7, #8]
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f000 fd1b 	bl	800da84 <xQueueCreateCountingSemaphore>
 800d04e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00c      	beq.n	800d070 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d003      	beq.n	800d064 <osSemaphoreNew+0xfc>
          name = attr->name;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	617b      	str	r3, [r7, #20]
 800d062:	e001      	b.n	800d068 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d064:	2300      	movs	r3, #0
 800d066:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d068:	6979      	ldr	r1, [r7, #20]
 800d06a:	69f8      	ldr	r0, [r7, #28]
 800d06c:	f001 fb1c 	bl	800e6a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d070:	69fb      	ldr	r3, [r7, #28]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3720      	adds	r7, #32
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
	...

0800d07c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d103      	bne.n	800d09c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d094:	f06f 0303 	mvn.w	r3, #3
 800d098:	617b      	str	r3, [r7, #20]
 800d09a:	e039      	b.n	800d110 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d09c:	f3ef 8305 	mrs	r3, IPSR
 800d0a0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d022      	beq.n	800d0ee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d003      	beq.n	800d0b6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d0ae:	f06f 0303 	mvn.w	r3, #3
 800d0b2:	617b      	str	r3, [r7, #20]
 800d0b4:	e02c      	b.n	800d110 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d0ba:	f107 0308 	add.w	r3, r7, #8
 800d0be:	461a      	mov	r2, r3
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	6938      	ldr	r0, [r7, #16]
 800d0c4:	f001 f924 	bl	800e310 <xQueueReceiveFromISR>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d003      	beq.n	800d0d6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d0ce:	f06f 0302 	mvn.w	r3, #2
 800d0d2:	617b      	str	r3, [r7, #20]
 800d0d4:	e01c      	b.n	800d110 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d019      	beq.n	800d110 <osSemaphoreAcquire+0x94>
 800d0dc:	4b0f      	ldr	r3, [pc, #60]	; (800d11c <osSemaphoreAcquire+0xa0>)
 800d0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e2:	601a      	str	r2, [r3, #0]
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	e010      	b.n	800d110 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d0ee:	6839      	ldr	r1, [r7, #0]
 800d0f0:	6938      	ldr	r0, [r7, #16]
 800d0f2:	f001 f801 	bl	800e0f8 <xQueueSemaphoreTake>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d009      	beq.n	800d110 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d003      	beq.n	800d10a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d102:	f06f 0301 	mvn.w	r3, #1
 800d106:	617b      	str	r3, [r7, #20]
 800d108:	e002      	b.n	800d110 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d10a:	f06f 0302 	mvn.w	r3, #2
 800d10e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d110:	697b      	ldr	r3, [r7, #20]
}
 800d112:	4618      	mov	r0, r3
 800d114:	3718      	adds	r7, #24
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	e000ed04 	.word	0xe000ed04

0800d120 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d12c:	2300      	movs	r3, #0
 800d12e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d103      	bne.n	800d13e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d136:	f06f 0303 	mvn.w	r3, #3
 800d13a:	617b      	str	r3, [r7, #20]
 800d13c:	e02c      	b.n	800d198 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d13e:	f3ef 8305 	mrs	r3, IPSR
 800d142:	60fb      	str	r3, [r7, #12]
  return(result);
 800d144:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d146:	2b00      	cmp	r3, #0
 800d148:	d01a      	beq.n	800d180 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d14a:	2300      	movs	r3, #0
 800d14c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d14e:	f107 0308 	add.w	r3, r7, #8
 800d152:	4619      	mov	r1, r3
 800d154:	6938      	ldr	r0, [r7, #16]
 800d156:	f000 fe62 	bl	800de1e <xQueueGiveFromISR>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d003      	beq.n	800d168 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d160:	f06f 0302 	mvn.w	r3, #2
 800d164:	617b      	str	r3, [r7, #20]
 800d166:	e017      	b.n	800d198 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d014      	beq.n	800d198 <osSemaphoreRelease+0x78>
 800d16e:	4b0d      	ldr	r3, [pc, #52]	; (800d1a4 <osSemaphoreRelease+0x84>)
 800d170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	f3bf 8f4f 	dsb	sy
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	e00b      	b.n	800d198 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d180:	2300      	movs	r3, #0
 800d182:	2200      	movs	r2, #0
 800d184:	2100      	movs	r1, #0
 800d186:	6938      	ldr	r0, [r7, #16]
 800d188:	f000 fcb0 	bl	800daec <xQueueGenericSend>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b01      	cmp	r3, #1
 800d190:	d002      	beq.n	800d198 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d192:	f06f 0302 	mvn.w	r3, #2
 800d196:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d198:	697b      	ldr	r3, [r7, #20]
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3718      	adds	r7, #24
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	bf00      	nop
 800d1a4:	e000ed04 	.word	0xe000ed04

0800d1a8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b086      	sub	sp, #24
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1b4:	f3ef 8305 	mrs	r3, IPSR
 800d1b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d003      	beq.n	800d1c8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800d1c0:	f06f 0305 	mvn.w	r3, #5
 800d1c4:	617b      	str	r3, [r7, #20]
 800d1c6:	e00e      	b.n	800d1e6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d103      	bne.n	800d1d6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800d1ce:	f06f 0303 	mvn.w	r3, #3
 800d1d2:	617b      	str	r3, [r7, #20]
 800d1d4:	e007      	b.n	800d1e6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d1d6:	6938      	ldr	r0, [r7, #16]
 800d1d8:	f001 fa90 	bl	800e6fc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800d1e0:	6938      	ldr	r0, [r7, #16]
 800d1e2:	f001 f915 	bl	800e410 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d1e6:	697b      	ldr	r3, [r7, #20]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3718      	adds	r7, #24
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	4a07      	ldr	r2, [pc, #28]	; (800d21c <vApplicationGetIdleTaskMemory+0x2c>)
 800d200:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	4a06      	ldr	r2, [pc, #24]	; (800d220 <vApplicationGetIdleTaskMemory+0x30>)
 800d206:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2280      	movs	r2, #128	; 0x80
 800d20c:	601a      	str	r2, [r3, #0]
}
 800d20e:	bf00      	nop
 800d210:	3714      	adds	r7, #20
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	20003d4c 	.word	0x20003d4c
 800d220:	20003df4 	.word	0x20003df4

0800d224 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	4a07      	ldr	r2, [pc, #28]	; (800d250 <vApplicationGetTimerTaskMemory+0x2c>)
 800d234:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	4a06      	ldr	r2, [pc, #24]	; (800d254 <vApplicationGetTimerTaskMemory+0x30>)
 800d23a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d242:	601a      	str	r2, [r3, #0]
}
 800d244:	bf00      	nop
 800d246:	3714      	adds	r7, #20
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr
 800d250:	20003ff4 	.word	0x20003ff4
 800d254:	2000409c 	.word	0x2000409c

0800d258 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b086      	sub	sp, #24
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10a      	bne.n	800d27c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26a:	f383 8811 	msr	BASEPRI, r3
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d278:	bf00      	nop
 800d27a:	e7fe      	b.n	800d27a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800d27c:	2320      	movs	r3, #32
 800d27e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	2b20      	cmp	r3, #32
 800d284:	d00a      	beq.n	800d29c <xEventGroupCreateStatic+0x44>
	__asm volatile
 800d286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28a:	f383 8811 	msr	BASEPRI, r3
 800d28e:	f3bf 8f6f 	isb	sy
 800d292:	f3bf 8f4f 	dsb	sy
 800d296:	60fb      	str	r3, [r7, #12]
}
 800d298:	bf00      	nop
 800d29a:	e7fe      	b.n	800d29a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00a      	beq.n	800d2bc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	3304      	adds	r3, #4
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 f9bf 	bl	800d634 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800d2bc:	697b      	ldr	r3, [r7, #20]
	}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b082      	sub	sp, #8
 800d2ca:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800d2cc:	2020      	movs	r0, #32
 800d2ce:	f003 f97b 	bl	80105c8 <pvPortMalloc>
 800d2d2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00a      	beq.n	800d2f0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	3304      	adds	r3, #4
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f000 f9a5 	bl	800d634 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800d2f0:	687b      	ldr	r3, [r7, #4]
	}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
	...

0800d2fc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b090      	sub	sp, #64	; 0x40
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800d30e:	2300      	movs	r3, #0
 800d310:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800d312:	2300      	movs	r3, #0
 800d314:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10a      	bne.n	800d332 <xEventGroupWaitBits+0x36>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	623b      	str	r3, [r7, #32]
}
 800d32e:	bf00      	nop
 800d330:	e7fe      	b.n	800d330 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00a      	beq.n	800d352 <xEventGroupWaitBits+0x56>
	__asm volatile
 800d33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d340:	f383 8811 	msr	BASEPRI, r3
 800d344:	f3bf 8f6f 	isb	sy
 800d348:	f3bf 8f4f 	dsb	sy
 800d34c:	61fb      	str	r3, [r7, #28]
}
 800d34e:	bf00      	nop
 800d350:	e7fe      	b.n	800d350 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10a      	bne.n	800d36e <xEventGroupWaitBits+0x72>
	__asm volatile
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	61bb      	str	r3, [r7, #24]
}
 800d36a:	bf00      	nop
 800d36c:	e7fe      	b.n	800d36c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d36e:	f002 f97b 	bl	800f668 <xTaskGetSchedulerState>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d102      	bne.n	800d37e <xEventGroupWaitBits+0x82>
 800d378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d101      	bne.n	800d382 <xEventGroupWaitBits+0x86>
 800d37e:	2301      	movs	r3, #1
 800d380:	e000      	b.n	800d384 <xEventGroupWaitBits+0x88>
 800d382:	2300      	movs	r3, #0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10a      	bne.n	800d39e <xEventGroupWaitBits+0xa2>
	__asm volatile
 800d388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38c:	f383 8811 	msr	BASEPRI, r3
 800d390:	f3bf 8f6f 	isb	sy
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	617b      	str	r3, [r7, #20]
}
 800d39a:	bf00      	nop
 800d39c:	e7fe      	b.n	800d39c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800d39e:	f001 fcd9 	bl	800ed54 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800d3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800d3a8:	683a      	ldr	r2, [r7, #0]
 800d3aa:	68b9      	ldr	r1, [r7, #8]
 800d3ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ae:	f000 f90b 	bl	800d5c8 <prvTestWaitCondition>
 800d3b2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800d3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00e      	beq.n	800d3d8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800d3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d028      	beq.n	800d41a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	43db      	mvns	r3, r3
 800d3d0:	401a      	ands	r2, r3
 800d3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d4:	601a      	str	r2, [r3, #0]
 800d3d6:	e020      	b.n	800d41a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800d3d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d104      	bne.n	800d3e8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800d3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	633b      	str	r3, [r7, #48]	; 0x30
 800d3e6:	e018      	b.n	800d41a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d003      	beq.n	800d3f6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800d3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d3f4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d003      	beq.n	800d404 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800d3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d402:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800d404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d406:	1d18      	adds	r0, r3, #4
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40c:	4313      	orrs	r3, r2
 800d40e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d410:	4619      	mov	r1, r3
 800d412:	f001 fe9d 	bl	800f150 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800d41a:	f001 fca9 	bl	800ed70 <xTaskResumeAll>
 800d41e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800d420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d422:	2b00      	cmp	r3, #0
 800d424:	d031      	beq.n	800d48a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800d426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d107      	bne.n	800d43c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800d42c:	4b19      	ldr	r3, [pc, #100]	; (800d494 <xEventGroupWaitBits+0x198>)
 800d42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	f3bf 8f4f 	dsb	sy
 800d438:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800d43c:	f002 fa8a 	bl	800f954 <uxTaskResetEventItemValue>
 800d440:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800d442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d11a      	bne.n	800d482 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800d44c:	f002 ff9a 	bl	8010384 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800d450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800d456:	683a      	ldr	r2, [r7, #0]
 800d458:	68b9      	ldr	r1, [r7, #8]
 800d45a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d45c:	f000 f8b4 	bl	800d5c8 <prvTestWaitCondition>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d009      	beq.n	800d47a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d006      	beq.n	800d47a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	43db      	mvns	r3, r3
 800d474:	401a      	ands	r2, r3
 800d476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d478:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800d47a:	2301      	movs	r3, #1
 800d47c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800d47e:	f002 ffb1 	bl	80103e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d484:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d488:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800d48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3740      	adds	r7, #64	; 0x40
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	e000ed04 	.word	0xe000ed04

0800d498 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b08e      	sub	sp, #56	; 0x38
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10a      	bne.n	800d4ca <xEventGroupSetBits+0x32>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b8:	f383 8811 	msr	BASEPRI, r3
 800d4bc:	f3bf 8f6f 	isb	sy
 800d4c0:	f3bf 8f4f 	dsb	sy
 800d4c4:	613b      	str	r3, [r7, #16]
}
 800d4c6:	bf00      	nop
 800d4c8:	e7fe      	b.n	800d4c8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00a      	beq.n	800d4ea <xEventGroupSetBits+0x52>
	__asm volatile
 800d4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d8:	f383 8811 	msr	BASEPRI, r3
 800d4dc:	f3bf 8f6f 	isb	sy
 800d4e0:	f3bf 8f4f 	dsb	sy
 800d4e4:	60fb      	str	r3, [r7, #12]
}
 800d4e6:	bf00      	nop
 800d4e8:	e7fe      	b.n	800d4e8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800d4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f2:	3308      	adds	r3, #8
 800d4f4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800d4f6:	f001 fc2d 	bl	800ed54 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800d4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800d500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	431a      	orrs	r2, r3
 800d508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800d50c:	e03c      	b.n	800d588 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800d50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800d514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800d51a:	2300      	movs	r3, #0
 800d51c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800d51e:	69bb      	ldr	r3, [r7, #24]
 800d520:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d524:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d526:	69bb      	ldr	r3, [r7, #24]
 800d528:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d52c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d534:	2b00      	cmp	r3, #0
 800d536:	d108      	bne.n	800d54a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800d538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	4013      	ands	r3, r2
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00b      	beq.n	800d55c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800d544:	2301      	movs	r3, #1
 800d546:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d548:	e008      	b.n	800d55c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800d54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	4013      	ands	r3, r2
 800d552:	69ba      	ldr	r2, [r7, #24]
 800d554:	429a      	cmp	r2, r3
 800d556:	d101      	bne.n	800d55c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800d558:	2301      	movs	r3, #1
 800d55a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d010      	beq.n	800d584 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d003      	beq.n	800d574 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800d56c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	4313      	orrs	r3, r2
 800d572:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800d574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d57c:	4619      	mov	r1, r3
 800d57e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d580:	f001 feb2 	bl	800f2e8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800d584:	69fb      	ldr	r3, [r7, #28]
 800d586:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800d588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d58a:	6a3b      	ldr	r3, [r7, #32]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d1be      	bne.n	800d50e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800d590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d596:	43db      	mvns	r3, r3
 800d598:	401a      	ands	r2, r3
 800d59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800d59e:	f001 fbe7 	bl	800ed70 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800d5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a4:	681b      	ldr	r3, [r3, #0]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3738      	adds	r7, #56	; 0x38
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b082      	sub	sp, #8
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800d5b8:	6839      	ldr	r1, [r7, #0]
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7ff ff6c 	bl	800d498 <xEventGroupSetBits>
}
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b087      	sub	sp, #28
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d107      	bne.n	800d5ee <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00a      	beq.n	800d5fe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	617b      	str	r3, [r7, #20]
 800d5ec:	e007      	b.n	800d5fe <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800d5ee:	68fa      	ldr	r2, [r7, #12]
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	4013      	ands	r3, r2
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d101      	bne.n	800d5fe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800d5fe:	697b      	ldr	r3, [r7, #20]
}
 800d600:	4618      	mov	r0, r3
 800d602:	371c      	adds	r7, #28
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	68f9      	ldr	r1, [r7, #12]
 800d61e:	4804      	ldr	r0, [pc, #16]	; (800d630 <xEventGroupSetBitsFromISR+0x24>)
 800d620:	f002 fd66 	bl	80100f0 <xTimerPendFunctionCallFromISR>
 800d624:	6178      	str	r0, [r7, #20]

		return xReturn;
 800d626:	697b      	ldr	r3, [r7, #20]
	}
 800d628:	4618      	mov	r0, r3
 800d62a:	3718      	adds	r7, #24
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	0800d5af 	.word	0x0800d5af

0800d634 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f103 0208 	add.w	r2, r3, #8
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d64c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f103 0208 	add.w	r2, r3, #8
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f103 0208 	add.w	r2, r3, #8
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d668:	bf00      	nop
 800d66a:	370c      	adds	r7, #12
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d682:	bf00      	nop
 800d684:	370c      	adds	r7, #12
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr

0800d68e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d68e:	b480      	push	{r7}
 800d690:	b085      	sub	sp, #20
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
 800d696:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	68fa      	ldr	r2, [r7, #12]
 800d6a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	689a      	ldr	r2, [r3, #8]
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	683a      	ldr	r2, [r7, #0]
 800d6b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	1c5a      	adds	r2, r3, #1
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	601a      	str	r2, [r3, #0]
}
 800d6ca:	bf00      	nop
 800d6cc:	3714      	adds	r7, #20
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr

0800d6d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d6d6:	b480      	push	{r7}
 800d6d8:	b085      	sub	sp, #20
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
 800d6de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d6ec:	d103      	bne.n	800d6f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	691b      	ldr	r3, [r3, #16]
 800d6f2:	60fb      	str	r3, [r7, #12]
 800d6f4:	e00c      	b.n	800d710 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	3308      	adds	r3, #8
 800d6fa:	60fb      	str	r3, [r7, #12]
 800d6fc:	e002      	b.n	800d704 <vListInsert+0x2e>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	60fb      	str	r3, [r7, #12]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	68ba      	ldr	r2, [r7, #8]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d2f6      	bcs.n	800d6fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	685a      	ldr	r2, [r3, #4]
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	683a      	ldr	r2, [r7, #0]
 800d71e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	68fa      	ldr	r2, [r7, #12]
 800d724:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	683a      	ldr	r2, [r7, #0]
 800d72a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	1c5a      	adds	r2, r3, #1
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	601a      	str	r2, [r3, #0]
}
 800d73c:	bf00      	nop
 800d73e:	3714      	adds	r7, #20
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d748:	b480      	push	{r7}
 800d74a:	b085      	sub	sp, #20
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	691b      	ldr	r3, [r3, #16]
 800d754:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	6892      	ldr	r2, [r2, #8]
 800d75e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	6852      	ldr	r2, [r2, #4]
 800d768:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	429a      	cmp	r2, r3
 800d772:	d103      	bne.n	800d77c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	689a      	ldr	r2, [r3, #8]
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	1e5a      	subs	r2, r3, #1
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3714      	adds	r7, #20
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10a      	bne.n	800d7c6 <xQueueGenericReset+0x2a>
	__asm volatile
 800d7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b4:	f383 8811 	msr	BASEPRI, r3
 800d7b8:	f3bf 8f6f 	isb	sy
 800d7bc:	f3bf 8f4f 	dsb	sy
 800d7c0:	60bb      	str	r3, [r7, #8]
}
 800d7c2:	bf00      	nop
 800d7c4:	e7fe      	b.n	800d7c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d7c6:	f002 fddd 	bl	8010384 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7d2:	68f9      	ldr	r1, [r7, #12]
 800d7d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d7d6:	fb01 f303 	mul.w	r3, r1, r3
 800d7da:	441a      	add	r2, r3
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	68f9      	ldr	r1, [r7, #12]
 800d7fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d7fc:	fb01 f303 	mul.w	r3, r1, r3
 800d800:	441a      	add	r2, r3
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	22ff      	movs	r2, #255	; 0xff
 800d80a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	22ff      	movs	r2, #255	; 0xff
 800d812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d114      	bne.n	800d846 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	691b      	ldr	r3, [r3, #16]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d01a      	beq.n	800d85a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	3310      	adds	r3, #16
 800d828:	4618      	mov	r0, r3
 800d82a:	f001 fcf9 	bl	800f220 <xTaskRemoveFromEventList>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d012      	beq.n	800d85a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d834:	4b0c      	ldr	r3, [pc, #48]	; (800d868 <xQueueGenericReset+0xcc>)
 800d836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d83a:	601a      	str	r2, [r3, #0]
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	f3bf 8f6f 	isb	sy
 800d844:	e009      	b.n	800d85a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	3310      	adds	r3, #16
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7ff fef2 	bl	800d634 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	3324      	adds	r3, #36	; 0x24
 800d854:	4618      	mov	r0, r3
 800d856:	f7ff feed 	bl	800d634 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d85a:	f002 fdc3 	bl	80103e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d85e:	2301      	movs	r3, #1
}
 800d860:	4618      	mov	r0, r3
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	e000ed04 	.word	0xe000ed04

0800d86c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b08e      	sub	sp, #56	; 0x38
 800d870:	af02      	add	r7, sp, #8
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
 800d878:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10a      	bne.n	800d896 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d892:	bf00      	nop
 800d894:	e7fe      	b.n	800d894 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10a      	bne.n	800d8b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d8ae:	bf00      	nop
 800d8b0:	e7fe      	b.n	800d8b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <xQueueGenericCreateStatic+0x52>
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d001      	beq.n	800d8c2 <xQueueGenericCreateStatic+0x56>
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e000      	b.n	800d8c4 <xQueueGenericCreateStatic+0x58>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10a      	bne.n	800d8de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	623b      	str	r3, [r7, #32]
}
 800d8da:	bf00      	nop
 800d8dc:	e7fe      	b.n	800d8dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d102      	bne.n	800d8ea <xQueueGenericCreateStatic+0x7e>
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d101      	bne.n	800d8ee <xQueueGenericCreateStatic+0x82>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e000      	b.n	800d8f0 <xQueueGenericCreateStatic+0x84>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d10a      	bne.n	800d90a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f8:	f383 8811 	msr	BASEPRI, r3
 800d8fc:	f3bf 8f6f 	isb	sy
 800d900:	f3bf 8f4f 	dsb	sy
 800d904:	61fb      	str	r3, [r7, #28]
}
 800d906:	bf00      	nop
 800d908:	e7fe      	b.n	800d908 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d90a:	2350      	movs	r3, #80	; 0x50
 800d90c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	2b50      	cmp	r3, #80	; 0x50
 800d912:	d00a      	beq.n	800d92a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d918:	f383 8811 	msr	BASEPRI, r3
 800d91c:	f3bf 8f6f 	isb	sy
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	61bb      	str	r3, [r7, #24]
}
 800d926:	bf00      	nop
 800d928:	e7fe      	b.n	800d928 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d92a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00d      	beq.n	800d952 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d938:	2201      	movs	r2, #1
 800d93a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d93e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	4613      	mov	r3, r2
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	68b9      	ldr	r1, [r7, #8]
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	f000 f83f 	bl	800d9d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d954:	4618      	mov	r0, r3
 800d956:	3730      	adds	r7, #48	; 0x30
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b08a      	sub	sp, #40	; 0x28
 800d960:	af02      	add	r7, sp, #8
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	4613      	mov	r3, r2
 800d968:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10a      	bne.n	800d986 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d974:	f383 8811 	msr	BASEPRI, r3
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	613b      	str	r3, [r7, #16]
}
 800d982:	bf00      	nop
 800d984:	e7fe      	b.n	800d984 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	fb02 f303 	mul.w	r3, r2, r3
 800d98e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	3350      	adds	r3, #80	; 0x50
 800d994:	4618      	mov	r0, r3
 800d996:	f002 fe17 	bl	80105c8 <pvPortMalloc>
 800d99a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d011      	beq.n	800d9c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	3350      	adds	r3, #80	; 0x50
 800d9aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d9b4:	79fa      	ldrb	r2, [r7, #7]
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	9300      	str	r3, [sp, #0]
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	697a      	ldr	r2, [r7, #20]
 800d9be:	68b9      	ldr	r1, [r7, #8]
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f000 f805 	bl	800d9d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d9c6:	69bb      	ldr	r3, [r7, #24]
	}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3720      	adds	r7, #32
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	607a      	str	r2, [r7, #4]
 800d9dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d103      	bne.n	800d9ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	69ba      	ldr	r2, [r7, #24]
 800d9e8:	601a      	str	r2, [r3, #0]
 800d9ea:	e002      	b.n	800d9f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	68fa      	ldr	r2, [r7, #12]
 800d9f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	68ba      	ldr	r2, [r7, #8]
 800d9fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d9fe:	2101      	movs	r1, #1
 800da00:	69b8      	ldr	r0, [r7, #24]
 800da02:	f7ff fecb 	bl	800d79c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	78fa      	ldrb	r2, [r7, #3]
 800da0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800da0e:	bf00      	nop
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800da16:	b580      	push	{r7, lr}
 800da18:	b08a      	sub	sp, #40	; 0x28
 800da1a:	af02      	add	r7, sp, #8
 800da1c:	60f8      	str	r0, [r7, #12]
 800da1e:	60b9      	str	r1, [r7, #8]
 800da20:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d10a      	bne.n	800da3e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800da28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2c:	f383 8811 	msr	BASEPRI, r3
 800da30:	f3bf 8f6f 	isb	sy
 800da34:	f3bf 8f4f 	dsb	sy
 800da38:	61bb      	str	r3, [r7, #24]
}
 800da3a:	bf00      	nop
 800da3c:	e7fe      	b.n	800da3c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800da3e:	68ba      	ldr	r2, [r7, #8]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	429a      	cmp	r2, r3
 800da44:	d90a      	bls.n	800da5c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800da46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4a:	f383 8811 	msr	BASEPRI, r3
 800da4e:	f3bf 8f6f 	isb	sy
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	617b      	str	r3, [r7, #20]
}
 800da58:	bf00      	nop
 800da5a:	e7fe      	b.n	800da5a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800da5c:	2302      	movs	r3, #2
 800da5e:	9300      	str	r3, [sp, #0]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	2100      	movs	r1, #0
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7ff ff00 	bl	800d86c <xQueueGenericCreateStatic>
 800da6c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d002      	beq.n	800da7a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800da7a:	69fb      	ldr	r3, [r7, #28]
	}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3720      	adds	r7, #32
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d10a      	bne.n	800daaa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800da94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da98:	f383 8811 	msr	BASEPRI, r3
 800da9c:	f3bf 8f6f 	isb	sy
 800daa0:	f3bf 8f4f 	dsb	sy
 800daa4:	613b      	str	r3, [r7, #16]
}
 800daa6:	bf00      	nop
 800daa8:	e7fe      	b.n	800daa8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800daaa:	683a      	ldr	r2, [r7, #0]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d90a      	bls.n	800dac8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	60fb      	str	r3, [r7, #12]
}
 800dac4:	bf00      	nop
 800dac6:	e7fe      	b.n	800dac6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dac8:	2202      	movs	r2, #2
 800daca:	2100      	movs	r1, #0
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7ff ff45 	bl	800d95c <xQueueGenericCreate>
 800dad2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d002      	beq.n	800dae0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	683a      	ldr	r2, [r7, #0]
 800dade:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800dae0:	697b      	ldr	r3, [r7, #20]
	}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3718      	adds	r7, #24
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
	...

0800daec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b08e      	sub	sp, #56	; 0x38
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	60f8      	str	r0, [r7, #12]
 800daf4:	60b9      	str	r1, [r7, #8]
 800daf6:	607a      	str	r2, [r7, #4]
 800daf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dafa:	2300      	movs	r3, #0
 800dafc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db04:	2b00      	cmp	r3, #0
 800db06:	d10a      	bne.n	800db1e <xQueueGenericSend+0x32>
	__asm volatile
 800db08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0c:	f383 8811 	msr	BASEPRI, r3
 800db10:	f3bf 8f6f 	isb	sy
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db1a:	bf00      	nop
 800db1c:	e7fe      	b.n	800db1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d103      	bne.n	800db2c <xQueueGenericSend+0x40>
 800db24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <xQueueGenericSend+0x44>
 800db2c:	2301      	movs	r3, #1
 800db2e:	e000      	b.n	800db32 <xQueueGenericSend+0x46>
 800db30:	2300      	movs	r3, #0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d10a      	bne.n	800db4c <xQueueGenericSend+0x60>
	__asm volatile
 800db36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3a:	f383 8811 	msr	BASEPRI, r3
 800db3e:	f3bf 8f6f 	isb	sy
 800db42:	f3bf 8f4f 	dsb	sy
 800db46:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db48:	bf00      	nop
 800db4a:	e7fe      	b.n	800db4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	2b02      	cmp	r3, #2
 800db50:	d103      	bne.n	800db5a <xQueueGenericSend+0x6e>
 800db52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db56:	2b01      	cmp	r3, #1
 800db58:	d101      	bne.n	800db5e <xQueueGenericSend+0x72>
 800db5a:	2301      	movs	r3, #1
 800db5c:	e000      	b.n	800db60 <xQueueGenericSend+0x74>
 800db5e:	2300      	movs	r3, #0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d10a      	bne.n	800db7a <xQueueGenericSend+0x8e>
	__asm volatile
 800db64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	623b      	str	r3, [r7, #32]
}
 800db76:	bf00      	nop
 800db78:	e7fe      	b.n	800db78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db7a:	f001 fd75 	bl	800f668 <xTaskGetSchedulerState>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d102      	bne.n	800db8a <xQueueGenericSend+0x9e>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d101      	bne.n	800db8e <xQueueGenericSend+0xa2>
 800db8a:	2301      	movs	r3, #1
 800db8c:	e000      	b.n	800db90 <xQueueGenericSend+0xa4>
 800db8e:	2300      	movs	r3, #0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d10a      	bne.n	800dbaa <xQueueGenericSend+0xbe>
	__asm volatile
 800db94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db98:	f383 8811 	msr	BASEPRI, r3
 800db9c:	f3bf 8f6f 	isb	sy
 800dba0:	f3bf 8f4f 	dsb	sy
 800dba4:	61fb      	str	r3, [r7, #28]
}
 800dba6:	bf00      	nop
 800dba8:	e7fe      	b.n	800dba8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dbaa:	f002 fbeb 	bl	8010384 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d302      	bcc.n	800dbc0 <xQueueGenericSend+0xd4>
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	2b02      	cmp	r3, #2
 800dbbe:	d129      	bne.n	800dc14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbc0:	683a      	ldr	r2, [r7, #0]
 800dbc2:	68b9      	ldr	r1, [r7, #8]
 800dbc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbc6:	f000 fc5e 	bl	800e486 <prvCopyDataToQueue>
 800dbca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d010      	beq.n	800dbf6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd6:	3324      	adds	r3, #36	; 0x24
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f001 fb21 	bl	800f220 <xTaskRemoveFromEventList>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d013      	beq.n	800dc0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dbe4:	4b3f      	ldr	r3, [pc, #252]	; (800dce4 <xQueueGenericSend+0x1f8>)
 800dbe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbea:	601a      	str	r2, [r3, #0]
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	f3bf 8f6f 	isb	sy
 800dbf4:	e00a      	b.n	800dc0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d007      	beq.n	800dc0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dbfc:	4b39      	ldr	r3, [pc, #228]	; (800dce4 <xQueueGenericSend+0x1f8>)
 800dbfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc02:	601a      	str	r2, [r3, #0]
 800dc04:	f3bf 8f4f 	dsb	sy
 800dc08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dc0c:	f002 fbea 	bl	80103e4 <vPortExitCritical>
				return pdPASS;
 800dc10:	2301      	movs	r3, #1
 800dc12:	e063      	b.n	800dcdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d103      	bne.n	800dc22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc1a:	f002 fbe3 	bl	80103e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	e05c      	b.n	800dcdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d106      	bne.n	800dc36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc28:	f107 0314 	add.w	r3, r7, #20
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f001 fbbd 	bl	800f3ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc32:	2301      	movs	r3, #1
 800dc34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc36:	f002 fbd5 	bl	80103e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc3a:	f001 f88b 	bl	800ed54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc3e:	f002 fba1 	bl	8010384 <vPortEnterCritical>
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc48:	b25b      	sxtb	r3, r3
 800dc4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc4e:	d103      	bne.n	800dc58 <xQueueGenericSend+0x16c>
 800dc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc52:	2200      	movs	r2, #0
 800dc54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc5e:	b25b      	sxtb	r3, r3
 800dc60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc64:	d103      	bne.n	800dc6e <xQueueGenericSend+0x182>
 800dc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc6e:	f002 fbb9 	bl	80103e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc72:	1d3a      	adds	r2, r7, #4
 800dc74:	f107 0314 	add.w	r3, r7, #20
 800dc78:	4611      	mov	r1, r2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f001 fbac 	bl	800f3d8 <xTaskCheckForTimeOut>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d124      	bne.n	800dcd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dc86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc88:	f000 fcf5 	bl	800e676 <prvIsQueueFull>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d018      	beq.n	800dcc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc94:	3310      	adds	r3, #16
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	4611      	mov	r1, r2
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f001 fa34 	bl	800f108 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dca2:	f000 fc80 	bl	800e5a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dca6:	f001 f863 	bl	800ed70 <xTaskResumeAll>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f47f af7c 	bne.w	800dbaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dcb2:	4b0c      	ldr	r3, [pc, #48]	; (800dce4 <xQueueGenericSend+0x1f8>)
 800dcb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcb8:	601a      	str	r2, [r3, #0]
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	f3bf 8f6f 	isb	sy
 800dcc2:	e772      	b.n	800dbaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dcc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcc6:	f000 fc6e 	bl	800e5a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dcca:	f001 f851 	bl	800ed70 <xTaskResumeAll>
 800dcce:	e76c      	b.n	800dbaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dcd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcd2:	f000 fc68 	bl	800e5a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcd6:	f001 f84b 	bl	800ed70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dcda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3738      	adds	r7, #56	; 0x38
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	e000ed04 	.word	0xe000ed04

0800dce8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b090      	sub	sp, #64	; 0x40
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
 800dcf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800dcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10a      	bne.n	800dd16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dd12:	bf00      	nop
 800dd14:	e7fe      	b.n	800dd14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d103      	bne.n	800dd24 <xQueueGenericSendFromISR+0x3c>
 800dd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d101      	bne.n	800dd28 <xQueueGenericSendFromISR+0x40>
 800dd24:	2301      	movs	r3, #1
 800dd26:	e000      	b.n	800dd2a <xQueueGenericSendFromISR+0x42>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d10a      	bne.n	800dd44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd32:	f383 8811 	msr	BASEPRI, r3
 800dd36:	f3bf 8f6f 	isb	sy
 800dd3a:	f3bf 8f4f 	dsb	sy
 800dd3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dd40:	bf00      	nop
 800dd42:	e7fe      	b.n	800dd42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	d103      	bne.n	800dd52 <xQueueGenericSendFromISR+0x6a>
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d101      	bne.n	800dd56 <xQueueGenericSendFromISR+0x6e>
 800dd52:	2301      	movs	r3, #1
 800dd54:	e000      	b.n	800dd58 <xQueueGenericSendFromISR+0x70>
 800dd56:	2300      	movs	r3, #0
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d10a      	bne.n	800dd72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800dd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd60:	f383 8811 	msr	BASEPRI, r3
 800dd64:	f3bf 8f6f 	isb	sy
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	623b      	str	r3, [r7, #32]
}
 800dd6e:	bf00      	nop
 800dd70:	e7fe      	b.n	800dd70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dd72:	f002 fbe9 	bl	8010548 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dd76:	f3ef 8211 	mrs	r2, BASEPRI
 800dd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7e:	f383 8811 	msr	BASEPRI, r3
 800dd82:	f3bf 8f6f 	isb	sy
 800dd86:	f3bf 8f4f 	dsb	sy
 800dd8a:	61fa      	str	r2, [r7, #28]
 800dd8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dd8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d302      	bcc.n	800dda4 <xQueueGenericSendFromISR+0xbc>
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	d12f      	bne.n	800de04 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ddb4:	683a      	ldr	r2, [r7, #0]
 800ddb6:	68b9      	ldr	r1, [r7, #8]
 800ddb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ddba:	f000 fb64 	bl	800e486 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ddbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ddc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddc6:	d112      	bne.n	800ddee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d016      	beq.n	800ddfe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd2:	3324      	adds	r3, #36	; 0x24
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f001 fa23 	bl	800f220 <xTaskRemoveFromEventList>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00e      	beq.n	800ddfe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00b      	beq.n	800ddfe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2201      	movs	r2, #1
 800ddea:	601a      	str	r2, [r3, #0]
 800ddec:	e007      	b.n	800ddfe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ddee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	b2db      	uxtb	r3, r3
 800ddf6:	b25a      	sxtb	r2, r3
 800ddf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ddfe:	2301      	movs	r3, #1
 800de00:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800de02:	e001      	b.n	800de08 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800de04:	2300      	movs	r3, #0
 800de06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de0a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800de12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800de14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800de16:	4618      	mov	r0, r3
 800de18:	3740      	adds	r7, #64	; 0x40
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800de1e:	b580      	push	{r7, lr}
 800de20:	b08e      	sub	sp, #56	; 0x38
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800de2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d10a      	bne.n	800de48 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800de32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de36:	f383 8811 	msr	BASEPRI, r3
 800de3a:	f3bf 8f6f 	isb	sy
 800de3e:	f3bf 8f4f 	dsb	sy
 800de42:	623b      	str	r3, [r7, #32]
}
 800de44:	bf00      	nop
 800de46:	e7fe      	b.n	800de46 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800de48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00a      	beq.n	800de66 <xQueueGiveFromISR+0x48>
	__asm volatile
 800de50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de54:	f383 8811 	msr	BASEPRI, r3
 800de58:	f3bf 8f6f 	isb	sy
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	61fb      	str	r3, [r7, #28]
}
 800de62:	bf00      	nop
 800de64:	e7fe      	b.n	800de64 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800de66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d103      	bne.n	800de76 <xQueueGiveFromISR+0x58>
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	689b      	ldr	r3, [r3, #8]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d101      	bne.n	800de7a <xQueueGiveFromISR+0x5c>
 800de76:	2301      	movs	r3, #1
 800de78:	e000      	b.n	800de7c <xQueueGiveFromISR+0x5e>
 800de7a:	2300      	movs	r3, #0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10a      	bne.n	800de96 <xQueueGiveFromISR+0x78>
	__asm volatile
 800de80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de84:	f383 8811 	msr	BASEPRI, r3
 800de88:	f3bf 8f6f 	isb	sy
 800de8c:	f3bf 8f4f 	dsb	sy
 800de90:	61bb      	str	r3, [r7, #24]
}
 800de92:	bf00      	nop
 800de94:	e7fe      	b.n	800de94 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de96:	f002 fb57 	bl	8010548 <vPortValidateInterruptPriority>
	__asm volatile
 800de9a:	f3ef 8211 	mrs	r2, BASEPRI
 800de9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	617a      	str	r2, [r7, #20]
 800deb0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800deb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800deb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800deb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800debc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800debe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d22b      	bcs.n	800df1e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800decc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded2:	1c5a      	adds	r2, r3, #1
 800ded4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ded8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dedc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dee0:	d112      	bne.n	800df08 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d016      	beq.n	800df18 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800deea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deec:	3324      	adds	r3, #36	; 0x24
 800deee:	4618      	mov	r0, r3
 800def0:	f001 f996 	bl	800f220 <xTaskRemoveFromEventList>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00e      	beq.n	800df18 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d00b      	beq.n	800df18 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	2201      	movs	r2, #1
 800df04:	601a      	str	r2, [r3, #0]
 800df06:	e007      	b.n	800df18 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800df08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df0c:	3301      	adds	r3, #1
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	b25a      	sxtb	r2, r3
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800df18:	2301      	movs	r3, #1
 800df1a:	637b      	str	r3, [r7, #52]	; 0x34
 800df1c:	e001      	b.n	800df22 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800df1e:	2300      	movs	r3, #0
 800df20:	637b      	str	r3, [r7, #52]	; 0x34
 800df22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df24:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f383 8811 	msr	BASEPRI, r3
}
 800df2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800df2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800df30:	4618      	mov	r0, r3
 800df32:	3738      	adds	r7, #56	; 0x38
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b08c      	sub	sp, #48	; 0x30
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800df44:	2300      	movs	r3, #0
 800df46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800df4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d10a      	bne.n	800df68 <xQueueReceive+0x30>
	__asm volatile
 800df52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df56:	f383 8811 	msr	BASEPRI, r3
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	623b      	str	r3, [r7, #32]
}
 800df64:	bf00      	nop
 800df66:	e7fe      	b.n	800df66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d103      	bne.n	800df76 <xQueueReceive+0x3e>
 800df6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df72:	2b00      	cmp	r3, #0
 800df74:	d101      	bne.n	800df7a <xQueueReceive+0x42>
 800df76:	2301      	movs	r3, #1
 800df78:	e000      	b.n	800df7c <xQueueReceive+0x44>
 800df7a:	2300      	movs	r3, #0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d10a      	bne.n	800df96 <xQueueReceive+0x5e>
	__asm volatile
 800df80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df84:	f383 8811 	msr	BASEPRI, r3
 800df88:	f3bf 8f6f 	isb	sy
 800df8c:	f3bf 8f4f 	dsb	sy
 800df90:	61fb      	str	r3, [r7, #28]
}
 800df92:	bf00      	nop
 800df94:	e7fe      	b.n	800df94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df96:	f001 fb67 	bl	800f668 <xTaskGetSchedulerState>
 800df9a:	4603      	mov	r3, r0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d102      	bne.n	800dfa6 <xQueueReceive+0x6e>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <xQueueReceive+0x72>
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e000      	b.n	800dfac <xQueueReceive+0x74>
 800dfaa:	2300      	movs	r3, #0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d10a      	bne.n	800dfc6 <xQueueReceive+0x8e>
	__asm volatile
 800dfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb4:	f383 8811 	msr	BASEPRI, r3
 800dfb8:	f3bf 8f6f 	isb	sy
 800dfbc:	f3bf 8f4f 	dsb	sy
 800dfc0:	61bb      	str	r3, [r7, #24]
}
 800dfc2:	bf00      	nop
 800dfc4:	e7fe      	b.n	800dfc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dfc6:	f002 f9dd 	bl	8010384 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d01f      	beq.n	800e016 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dfd6:	68b9      	ldr	r1, [r7, #8]
 800dfd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfda:	f000 fabe 	bl	800e55a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe0:	1e5a      	subs	r2, r3, #1
 800dfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe8:	691b      	ldr	r3, [r3, #16]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00f      	beq.n	800e00e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff0:	3310      	adds	r3, #16
 800dff2:	4618      	mov	r0, r3
 800dff4:	f001 f914 	bl	800f220 <xTaskRemoveFromEventList>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d007      	beq.n	800e00e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dffe:	4b3d      	ldr	r3, [pc, #244]	; (800e0f4 <xQueueReceive+0x1bc>)
 800e000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e004:	601a      	str	r2, [r3, #0]
 800e006:	f3bf 8f4f 	dsb	sy
 800e00a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e00e:	f002 f9e9 	bl	80103e4 <vPortExitCritical>
				return pdPASS;
 800e012:	2301      	movs	r3, #1
 800e014:	e069      	b.n	800e0ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d103      	bne.n	800e024 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e01c:	f002 f9e2 	bl	80103e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e020:	2300      	movs	r3, #0
 800e022:	e062      	b.n	800e0ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e026:	2b00      	cmp	r3, #0
 800e028:	d106      	bne.n	800e038 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e02a:	f107 0310 	add.w	r3, r7, #16
 800e02e:	4618      	mov	r0, r3
 800e030:	f001 f9bc 	bl	800f3ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e034:	2301      	movs	r3, #1
 800e036:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e038:	f002 f9d4 	bl	80103e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e03c:	f000 fe8a 	bl	800ed54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e040:	f002 f9a0 	bl	8010384 <vPortEnterCritical>
 800e044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e04a:	b25b      	sxtb	r3, r3
 800e04c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e050:	d103      	bne.n	800e05a <xQueueReceive+0x122>
 800e052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e054:	2200      	movs	r2, #0
 800e056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e060:	b25b      	sxtb	r3, r3
 800e062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e066:	d103      	bne.n	800e070 <xQueueReceive+0x138>
 800e068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06a:	2200      	movs	r2, #0
 800e06c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e070:	f002 f9b8 	bl	80103e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e074:	1d3a      	adds	r2, r7, #4
 800e076:	f107 0310 	add.w	r3, r7, #16
 800e07a:	4611      	mov	r1, r2
 800e07c:	4618      	mov	r0, r3
 800e07e:	f001 f9ab 	bl	800f3d8 <xTaskCheckForTimeOut>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d123      	bne.n	800e0d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e08a:	f000 fade 	bl	800e64a <prvIsQueueEmpty>
 800e08e:	4603      	mov	r3, r0
 800e090:	2b00      	cmp	r3, #0
 800e092:	d017      	beq.n	800e0c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e096:	3324      	adds	r3, #36	; 0x24
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	4611      	mov	r1, r2
 800e09c:	4618      	mov	r0, r3
 800e09e:	f001 f833 	bl	800f108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0a4:	f000 fa7f 	bl	800e5a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0a8:	f000 fe62 	bl	800ed70 <xTaskResumeAll>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d189      	bne.n	800dfc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e0b2:	4b10      	ldr	r3, [pc, #64]	; (800e0f4 <xQueueReceive+0x1bc>)
 800e0b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0b8:	601a      	str	r2, [r3, #0]
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	f3bf 8f6f 	isb	sy
 800e0c2:	e780      	b.n	800dfc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e0c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0c6:	f000 fa6e 	bl	800e5a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0ca:	f000 fe51 	bl	800ed70 <xTaskResumeAll>
 800e0ce:	e77a      	b.n	800dfc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e0d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0d2:	f000 fa68 	bl	800e5a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0d6:	f000 fe4b 	bl	800ed70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0dc:	f000 fab5 	bl	800e64a <prvIsQueueEmpty>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	f43f af6f 	beq.w	800dfc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e0e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3730      	adds	r7, #48	; 0x30
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	e000ed04 	.word	0xe000ed04

0800e0f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b08e      	sub	sp, #56	; 0x38
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e102:	2300      	movs	r3, #0
 800e104:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e10a:	2300      	movs	r3, #0
 800e10c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10a      	bne.n	800e12a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e118:	f383 8811 	msr	BASEPRI, r3
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	623b      	str	r3, [r7, #32]
}
 800e126:	bf00      	nop
 800e128:	e7fe      	b.n	800e128 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00a      	beq.n	800e148 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e136:	f383 8811 	msr	BASEPRI, r3
 800e13a:	f3bf 8f6f 	isb	sy
 800e13e:	f3bf 8f4f 	dsb	sy
 800e142:	61fb      	str	r3, [r7, #28]
}
 800e144:	bf00      	nop
 800e146:	e7fe      	b.n	800e146 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e148:	f001 fa8e 	bl	800f668 <xTaskGetSchedulerState>
 800e14c:	4603      	mov	r3, r0
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d102      	bne.n	800e158 <xQueueSemaphoreTake+0x60>
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d101      	bne.n	800e15c <xQueueSemaphoreTake+0x64>
 800e158:	2301      	movs	r3, #1
 800e15a:	e000      	b.n	800e15e <xQueueSemaphoreTake+0x66>
 800e15c:	2300      	movs	r3, #0
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d10a      	bne.n	800e178 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	61bb      	str	r3, [r7, #24]
}
 800e174:	bf00      	nop
 800e176:	e7fe      	b.n	800e176 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e178:	f002 f904 	bl	8010384 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e180:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e184:	2b00      	cmp	r3, #0
 800e186:	d024      	beq.n	800e1d2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e18a:	1e5a      	subs	r2, r3, #1
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d104      	bne.n	800e1a2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e198:	f001 fbf4 	bl	800f984 <pvTaskIncrementMutexHeldCount>
 800e19c:	4602      	mov	r2, r0
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a4:	691b      	ldr	r3, [r3, #16]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00f      	beq.n	800e1ca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ac:	3310      	adds	r3, #16
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f001 f836 	bl	800f220 <xTaskRemoveFromEventList>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d007      	beq.n	800e1ca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e1ba:	4b54      	ldr	r3, [pc, #336]	; (800e30c <xQueueSemaphoreTake+0x214>)
 800e1bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1c0:	601a      	str	r2, [r3, #0]
 800e1c2:	f3bf 8f4f 	dsb	sy
 800e1c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e1ca:	f002 f90b 	bl	80103e4 <vPortExitCritical>
				return pdPASS;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e097      	b.n	800e302 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d111      	bne.n	800e1fc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00a      	beq.n	800e1f4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e2:	f383 8811 	msr	BASEPRI, r3
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	617b      	str	r3, [r7, #20]
}
 800e1f0:	bf00      	nop
 800e1f2:	e7fe      	b.n	800e1f2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e1f4:	f002 f8f6 	bl	80103e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	e082      	b.n	800e302 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d106      	bne.n	800e210 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e202:	f107 030c 	add.w	r3, r7, #12
 800e206:	4618      	mov	r0, r3
 800e208:	f001 f8d0 	bl	800f3ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e20c:	2301      	movs	r3, #1
 800e20e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e210:	f002 f8e8 	bl	80103e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e214:	f000 fd9e 	bl	800ed54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e218:	f002 f8b4 	bl	8010384 <vPortEnterCritical>
 800e21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e222:	b25b      	sxtb	r3, r3
 800e224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e228:	d103      	bne.n	800e232 <xQueueSemaphoreTake+0x13a>
 800e22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22c:	2200      	movs	r2, #0
 800e22e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e238:	b25b      	sxtb	r3, r3
 800e23a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e23e:	d103      	bne.n	800e248 <xQueueSemaphoreTake+0x150>
 800e240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e242:	2200      	movs	r2, #0
 800e244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e248:	f002 f8cc 	bl	80103e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e24c:	463a      	mov	r2, r7
 800e24e:	f107 030c 	add.w	r3, r7, #12
 800e252:	4611      	mov	r1, r2
 800e254:	4618      	mov	r0, r3
 800e256:	f001 f8bf 	bl	800f3d8 <xTaskCheckForTimeOut>
 800e25a:	4603      	mov	r3, r0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d132      	bne.n	800e2c6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e262:	f000 f9f2 	bl	800e64a <prvIsQueueEmpty>
 800e266:	4603      	mov	r3, r0
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d026      	beq.n	800e2ba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d109      	bne.n	800e288 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e274:	f002 f886 	bl	8010384 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	4618      	mov	r0, r3
 800e27e:	f001 fa11 	bl	800f6a4 <xTaskPriorityInherit>
 800e282:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e284:	f002 f8ae 	bl	80103e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28a:	3324      	adds	r3, #36	; 0x24
 800e28c:	683a      	ldr	r2, [r7, #0]
 800e28e:	4611      	mov	r1, r2
 800e290:	4618      	mov	r0, r3
 800e292:	f000 ff39 	bl	800f108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e298:	f000 f985 	bl	800e5a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e29c:	f000 fd68 	bl	800ed70 <xTaskResumeAll>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f47f af68 	bne.w	800e178 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e2a8:	4b18      	ldr	r3, [pc, #96]	; (800e30c <xQueueSemaphoreTake+0x214>)
 800e2aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2ae:	601a      	str	r2, [r3, #0]
 800e2b0:	f3bf 8f4f 	dsb	sy
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	e75e      	b.n	800e178 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e2ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2bc:	f000 f973 	bl	800e5a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e2c0:	f000 fd56 	bl	800ed70 <xTaskResumeAll>
 800e2c4:	e758      	b.n	800e178 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e2c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2c8:	f000 f96d 	bl	800e5a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e2cc:	f000 fd50 	bl	800ed70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e2d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2d2:	f000 f9ba 	bl	800e64a <prvIsQueueEmpty>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	f43f af4d 	beq.w	800e178 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00d      	beq.n	800e300 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e2e4:	f002 f84e 	bl	8010384 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e2e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2ea:	f000 f8b4 	bl	800e456 <prvGetDisinheritPriorityAfterTimeout>
 800e2ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f001 faaa 	bl	800f850 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e2fc:	f002 f872 	bl	80103e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e300:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e302:	4618      	mov	r0, r3
 800e304:	3738      	adds	r7, #56	; 0x38
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	e000ed04 	.word	0xe000ed04

0800e310 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b08e      	sub	sp, #56	; 0x38
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e322:	2b00      	cmp	r3, #0
 800e324:	d10a      	bne.n	800e33c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	623b      	str	r3, [r7, #32]
}
 800e338:	bf00      	nop
 800e33a:	e7fe      	b.n	800e33a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d103      	bne.n	800e34a <xQueueReceiveFromISR+0x3a>
 800e342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e346:	2b00      	cmp	r3, #0
 800e348:	d101      	bne.n	800e34e <xQueueReceiveFromISR+0x3e>
 800e34a:	2301      	movs	r3, #1
 800e34c:	e000      	b.n	800e350 <xQueueReceiveFromISR+0x40>
 800e34e:	2300      	movs	r3, #0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d10a      	bne.n	800e36a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e358:	f383 8811 	msr	BASEPRI, r3
 800e35c:	f3bf 8f6f 	isb	sy
 800e360:	f3bf 8f4f 	dsb	sy
 800e364:	61fb      	str	r3, [r7, #28]
}
 800e366:	bf00      	nop
 800e368:	e7fe      	b.n	800e368 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e36a:	f002 f8ed 	bl	8010548 <vPortValidateInterruptPriority>
	__asm volatile
 800e36e:	f3ef 8211 	mrs	r2, BASEPRI
 800e372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e376:	f383 8811 	msr	BASEPRI, r3
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	61ba      	str	r2, [r7, #24]
 800e384:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e386:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e388:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e38e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e392:	2b00      	cmp	r3, #0
 800e394:	d02f      	beq.n	800e3f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e3a0:	68b9      	ldr	r1, [r7, #8]
 800e3a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3a4:	f000 f8d9 	bl	800e55a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3aa:	1e5a      	subs	r2, r3, #1
 800e3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e3b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e3b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3b8:	d112      	bne.n	800e3e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3bc:	691b      	ldr	r3, [r3, #16]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d016      	beq.n	800e3f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c4:	3310      	adds	r3, #16
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f000 ff2a 	bl	800f220 <xTaskRemoveFromEventList>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00e      	beq.n	800e3f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d00b      	beq.n	800e3f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	601a      	str	r2, [r3, #0]
 800e3de:	e007      	b.n	800e3f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	b25a      	sxtb	r2, r3
 800e3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	637b      	str	r3, [r7, #52]	; 0x34
 800e3f4:	e001      	b.n	800e3fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	637b      	str	r3, [r7, #52]	; 0x34
 800e3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	f383 8811 	msr	BASEPRI, r3
}
 800e404:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3738      	adds	r7, #56	; 0x38
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d10a      	bne.n	800e438 <vQueueDelete+0x28>
	__asm volatile
 800e422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e426:	f383 8811 	msr	BASEPRI, r3
 800e42a:	f3bf 8f6f 	isb	sy
 800e42e:	f3bf 8f4f 	dsb	sy
 800e432:	60bb      	str	r3, [r7, #8]
}
 800e434:	bf00      	nop
 800e436:	e7fe      	b.n	800e436 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f000 f95f 	bl	800e6fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e444:	2b00      	cmp	r3, #0
 800e446:	d102      	bne.n	800e44e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	f002 f989 	bl	8010760 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e44e:	bf00      	nop
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e456:	b480      	push	{r7}
 800e458:	b085      	sub	sp, #20
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e462:	2b00      	cmp	r3, #0
 800e464:	d006      	beq.n	800e474 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e470:	60fb      	str	r3, [r7, #12]
 800e472:	e001      	b.n	800e478 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e474:	2300      	movs	r3, #0
 800e476:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e478:	68fb      	ldr	r3, [r7, #12]
	}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3714      	adds	r7, #20
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr

0800e486 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e486:	b580      	push	{r7, lr}
 800e488:	b086      	sub	sp, #24
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	60f8      	str	r0, [r7, #12]
 800e48e:	60b9      	str	r1, [r7, #8]
 800e490:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e492:	2300      	movs	r3, #0
 800e494:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10d      	bne.n	800e4c0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d14d      	bne.n	800e548 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f001 f95f 	bl	800f774 <xTaskPriorityDisinherit>
 800e4b6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	609a      	str	r2, [r3, #8]
 800e4be:	e043      	b.n	800e548 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d119      	bne.n	800e4fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6858      	ldr	r0, [r3, #4]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	68b9      	ldr	r1, [r7, #8]
 800e4d2:	f00a ff2b 	bl	801932c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	685a      	ldr	r2, [r3, #4]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4de:	441a      	add	r2, r3
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	685a      	ldr	r2, [r3, #4]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d32b      	bcc.n	800e548 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	605a      	str	r2, [r3, #4]
 800e4f8:	e026      	b.n	800e548 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	68d8      	ldr	r0, [r3, #12]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e502:	461a      	mov	r2, r3
 800e504:	68b9      	ldr	r1, [r7, #8]
 800e506:	f00a ff11 	bl	801932c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	68da      	ldr	r2, [r3, #12]
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e512:	425b      	negs	r3, r3
 800e514:	441a      	add	r2, r3
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	68da      	ldr	r2, [r3, #12]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	429a      	cmp	r2, r3
 800e524:	d207      	bcs.n	800e536 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	689a      	ldr	r2, [r3, #8]
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e52e:	425b      	negs	r3, r3
 800e530:	441a      	add	r2, r3
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2b02      	cmp	r3, #2
 800e53a:	d105      	bne.n	800e548 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d002      	beq.n	800e548 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	3b01      	subs	r3, #1
 800e546:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e550:	697b      	ldr	r3, [r7, #20]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3718      	adds	r7, #24
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}

0800e55a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b082      	sub	sp, #8
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
 800e562:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d018      	beq.n	800e59e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	68da      	ldr	r2, [r3, #12]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e574:	441a      	add	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	68da      	ldr	r2, [r3, #12]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	689b      	ldr	r3, [r3, #8]
 800e582:	429a      	cmp	r2, r3
 800e584:	d303      	bcc.n	800e58e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	68d9      	ldr	r1, [r3, #12]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e596:	461a      	mov	r2, r3
 800e598:	6838      	ldr	r0, [r7, #0]
 800e59a:	f00a fec7 	bl	801932c <memcpy>
	}
}
 800e59e:	bf00      	nop
 800e5a0:	3708      	adds	r7, #8
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}

0800e5a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b084      	sub	sp, #16
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e5ae:	f001 fee9 	bl	8010384 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e5ba:	e011      	b.n	800e5e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d012      	beq.n	800e5ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	3324      	adds	r3, #36	; 0x24
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f000 fe29 	bl	800f220 <xTaskRemoveFromEventList>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d001      	beq.n	800e5d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e5d4:	f000 ff62 	bl	800f49c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e5d8:	7bfb      	ldrb	r3, [r7, #15]
 800e5da:	3b01      	subs	r3, #1
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e5e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	dce9      	bgt.n	800e5bc <prvUnlockQueue+0x16>
 800e5e8:	e000      	b.n	800e5ec <prvUnlockQueue+0x46>
					break;
 800e5ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	22ff      	movs	r2, #255	; 0xff
 800e5f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e5f4:	f001 fef6 	bl	80103e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e5f8:	f001 fec4 	bl	8010384 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e602:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e604:	e011      	b.n	800e62a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	691b      	ldr	r3, [r3, #16]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d012      	beq.n	800e634 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	3310      	adds	r3, #16
 800e612:	4618      	mov	r0, r3
 800e614:	f000 fe04 	bl	800f220 <xTaskRemoveFromEventList>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e61e:	f000 ff3d 	bl	800f49c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e622:	7bbb      	ldrb	r3, [r7, #14]
 800e624:	3b01      	subs	r3, #1
 800e626:	b2db      	uxtb	r3, r3
 800e628:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e62a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	dce9      	bgt.n	800e606 <prvUnlockQueue+0x60>
 800e632:	e000      	b.n	800e636 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e634:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	22ff      	movs	r2, #255	; 0xff
 800e63a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e63e:	f001 fed1 	bl	80103e4 <vPortExitCritical>
}
 800e642:	bf00      	nop
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}

0800e64a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b084      	sub	sp, #16
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e652:	f001 fe97 	bl	8010384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d102      	bne.n	800e664 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e65e:	2301      	movs	r3, #1
 800e660:	60fb      	str	r3, [r7, #12]
 800e662:	e001      	b.n	800e668 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e664:	2300      	movs	r3, #0
 800e666:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e668:	f001 febc 	bl	80103e4 <vPortExitCritical>

	return xReturn;
 800e66c:	68fb      	ldr	r3, [r7, #12]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}

0800e676 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e676:	b580      	push	{r7, lr}
 800e678:	b084      	sub	sp, #16
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e67e:	f001 fe81 	bl	8010384 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d102      	bne.n	800e694 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e68e:	2301      	movs	r3, #1
 800e690:	60fb      	str	r3, [r7, #12]
 800e692:	e001      	b.n	800e698 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e694:	2300      	movs	r3, #0
 800e696:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e698:	f001 fea4 	bl	80103e4 <vPortExitCritical>

	return xReturn;
 800e69c:	68fb      	ldr	r3, [r7, #12]
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
	...

0800e6a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60fb      	str	r3, [r7, #12]
 800e6b6:	e014      	b.n	800e6e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e6b8:	4a0f      	ldr	r2, [pc, #60]	; (800e6f8 <vQueueAddToRegistry+0x50>)
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d10b      	bne.n	800e6dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e6c4:	490c      	ldr	r1, [pc, #48]	; (800e6f8 <vQueueAddToRegistry+0x50>)
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	683a      	ldr	r2, [r7, #0]
 800e6ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e6ce:	4a0a      	ldr	r2, [pc, #40]	; (800e6f8 <vQueueAddToRegistry+0x50>)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	00db      	lsls	r3, r3, #3
 800e6d4:	4413      	add	r3, r2
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e6da:	e006      	b.n	800e6ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	60fb      	str	r3, [r7, #12]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2b07      	cmp	r3, #7
 800e6e6:	d9e7      	bls.n	800e6b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e6e8:	bf00      	nop
 800e6ea:	bf00      	nop
 800e6ec:	3714      	adds	r7, #20
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr
 800e6f6:	bf00      	nop
 800e6f8:	2000449c 	.word	0x2000449c

0800e6fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e704:	2300      	movs	r3, #0
 800e706:	60fb      	str	r3, [r7, #12]
 800e708:	e016      	b.n	800e738 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e70a:	4a10      	ldr	r2, [pc, #64]	; (800e74c <vQueueUnregisterQueue+0x50>)
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	00db      	lsls	r3, r3, #3
 800e710:	4413      	add	r3, r2
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	429a      	cmp	r2, r3
 800e718:	d10b      	bne.n	800e732 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e71a:	4a0c      	ldr	r2, [pc, #48]	; (800e74c <vQueueUnregisterQueue+0x50>)
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2100      	movs	r1, #0
 800e720:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e724:	4a09      	ldr	r2, [pc, #36]	; (800e74c <vQueueUnregisterQueue+0x50>)
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	00db      	lsls	r3, r3, #3
 800e72a:	4413      	add	r3, r2
 800e72c:	2200      	movs	r2, #0
 800e72e:	605a      	str	r2, [r3, #4]
				break;
 800e730:	e006      	b.n	800e740 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	3301      	adds	r3, #1
 800e736:	60fb      	str	r3, [r7, #12]
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2b07      	cmp	r3, #7
 800e73c:	d9e5      	bls.n	800e70a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e73e:	bf00      	nop
 800e740:	bf00      	nop
 800e742:	3714      	adds	r7, #20
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr
 800e74c:	2000449c 	.word	0x2000449c

0800e750 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e750:	b580      	push	{r7, lr}
 800e752:	b086      	sub	sp, #24
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e760:	f001 fe10 	bl	8010384 <vPortEnterCritical>
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e76a:	b25b      	sxtb	r3, r3
 800e76c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e770:	d103      	bne.n	800e77a <vQueueWaitForMessageRestricted+0x2a>
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	2200      	movs	r2, #0
 800e776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e780:	b25b      	sxtb	r3, r3
 800e782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e786:	d103      	bne.n	800e790 <vQueueWaitForMessageRestricted+0x40>
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	2200      	movs	r2, #0
 800e78c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e790:	f001 fe28 	bl	80103e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d106      	bne.n	800e7aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	3324      	adds	r3, #36	; 0x24
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	68b9      	ldr	r1, [r7, #8]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f000 fd0f 	bl	800f1c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e7aa:	6978      	ldr	r0, [r7, #20]
 800e7ac:	f7ff fefb 	bl	800e5a6 <prvUnlockQueue>
	}
 800e7b0:	bf00      	nop
 800e7b2:	3718      	adds	r7, #24
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b08e      	sub	sp, #56	; 0x38
 800e7bc:	af04      	add	r7, sp, #16
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	607a      	str	r2, [r7, #4]
 800e7c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d10a      	bne.n	800e7e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d0:	f383 8811 	msr	BASEPRI, r3
 800e7d4:	f3bf 8f6f 	isb	sy
 800e7d8:	f3bf 8f4f 	dsb	sy
 800e7dc:	623b      	str	r3, [r7, #32]
}
 800e7de:	bf00      	nop
 800e7e0:	e7fe      	b.n	800e7e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10a      	bne.n	800e7fe <xTaskCreateStatic+0x46>
	__asm volatile
 800e7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ec:	f383 8811 	msr	BASEPRI, r3
 800e7f0:	f3bf 8f6f 	isb	sy
 800e7f4:	f3bf 8f4f 	dsb	sy
 800e7f8:	61fb      	str	r3, [r7, #28]
}
 800e7fa:	bf00      	nop
 800e7fc:	e7fe      	b.n	800e7fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e7fe:	23a8      	movs	r3, #168	; 0xa8
 800e800:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	2ba8      	cmp	r3, #168	; 0xa8
 800e806:	d00a      	beq.n	800e81e <xTaskCreateStatic+0x66>
	__asm volatile
 800e808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80c:	f383 8811 	msr	BASEPRI, r3
 800e810:	f3bf 8f6f 	isb	sy
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	61bb      	str	r3, [r7, #24]
}
 800e81a:	bf00      	nop
 800e81c:	e7fe      	b.n	800e81c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e81e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e822:	2b00      	cmp	r3, #0
 800e824:	d01e      	beq.n	800e864 <xTaskCreateStatic+0xac>
 800e826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d01b      	beq.n	800e864 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e834:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e838:	2202      	movs	r2, #2
 800e83a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e83e:	2300      	movs	r3, #0
 800e840:	9303      	str	r3, [sp, #12]
 800e842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e844:	9302      	str	r3, [sp, #8]
 800e846:	f107 0314 	add.w	r3, r7, #20
 800e84a:	9301      	str	r3, [sp, #4]
 800e84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84e:	9300      	str	r3, [sp, #0]
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	68b9      	ldr	r1, [r7, #8]
 800e856:	68f8      	ldr	r0, [r7, #12]
 800e858:	f000 f850 	bl	800e8fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e85c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e85e:	f000 f8f3 	bl	800ea48 <prvAddNewTaskToReadyList>
 800e862:	e001      	b.n	800e868 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e864:	2300      	movs	r3, #0
 800e866:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e868:	697b      	ldr	r3, [r7, #20]
	}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3728      	adds	r7, #40	; 0x28
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e872:	b580      	push	{r7, lr}
 800e874:	b08c      	sub	sp, #48	; 0x30
 800e876:	af04      	add	r7, sp, #16
 800e878:	60f8      	str	r0, [r7, #12]
 800e87a:	60b9      	str	r1, [r7, #8]
 800e87c:	603b      	str	r3, [r7, #0]
 800e87e:	4613      	mov	r3, r2
 800e880:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e882:	88fb      	ldrh	r3, [r7, #6]
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	4618      	mov	r0, r3
 800e888:	f001 fe9e 	bl	80105c8 <pvPortMalloc>
 800e88c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d00e      	beq.n	800e8b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e894:	20a8      	movs	r0, #168	; 0xa8
 800e896:	f001 fe97 	bl	80105c8 <pvPortMalloc>
 800e89a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d003      	beq.n	800e8aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	697a      	ldr	r2, [r7, #20]
 800e8a6:	631a      	str	r2, [r3, #48]	; 0x30
 800e8a8:	e005      	b.n	800e8b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e8aa:	6978      	ldr	r0, [r7, #20]
 800e8ac:	f001 ff58 	bl	8010760 <vPortFree>
 800e8b0:	e001      	b.n	800e8b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d017      	beq.n	800e8ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e8c4:	88fa      	ldrh	r2, [r7, #6]
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	9303      	str	r3, [sp, #12]
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	9302      	str	r3, [sp, #8]
 800e8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d0:	9301      	str	r3, [sp, #4]
 800e8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d4:	9300      	str	r3, [sp, #0]
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	68b9      	ldr	r1, [r7, #8]
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f000 f80e 	bl	800e8fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e8e0:	69f8      	ldr	r0, [r7, #28]
 800e8e2:	f000 f8b1 	bl	800ea48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	61bb      	str	r3, [r7, #24]
 800e8ea:	e002      	b.n	800e8f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e8ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e8f2:	69bb      	ldr	r3, [r7, #24]
	}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3720      	adds	r7, #32
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b088      	sub	sp, #32
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	607a      	str	r2, [r7, #4]
 800e908:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	461a      	mov	r2, r3
 800e914:	21a5      	movs	r1, #165	; 0xa5
 800e916:	f00a fc7b 	bl	8019210 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e924:	3b01      	subs	r3, #1
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	4413      	add	r3, r2
 800e92a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	f023 0307 	bic.w	r3, r3, #7
 800e932:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e934:	69bb      	ldr	r3, [r7, #24]
 800e936:	f003 0307 	and.w	r3, r3, #7
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00a      	beq.n	800e954 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e942:	f383 8811 	msr	BASEPRI, r3
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	617b      	str	r3, [r7, #20]
}
 800e950:	bf00      	nop
 800e952:	e7fe      	b.n	800e952 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d01f      	beq.n	800e99a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e95a:	2300      	movs	r3, #0
 800e95c:	61fb      	str	r3, [r7, #28]
 800e95e:	e012      	b.n	800e986 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e960:	68ba      	ldr	r2, [r7, #8]
 800e962:	69fb      	ldr	r3, [r7, #28]
 800e964:	4413      	add	r3, r2
 800e966:	7819      	ldrb	r1, [r3, #0]
 800e968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	4413      	add	r3, r2
 800e96e:	3334      	adds	r3, #52	; 0x34
 800e970:	460a      	mov	r2, r1
 800e972:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e974:	68ba      	ldr	r2, [r7, #8]
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	4413      	add	r3, r2
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d006      	beq.n	800e98e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	3301      	adds	r3, #1
 800e984:	61fb      	str	r3, [r7, #28]
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	2b0f      	cmp	r3, #15
 800e98a:	d9e9      	bls.n	800e960 <prvInitialiseNewTask+0x64>
 800e98c:	e000      	b.n	800e990 <prvInitialiseNewTask+0x94>
			{
				break;
 800e98e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e992:	2200      	movs	r2, #0
 800e994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e998:	e003      	b.n	800e9a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99c:	2200      	movs	r2, #0
 800e99e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	2b37      	cmp	r3, #55	; 0x37
 800e9a6:	d901      	bls.n	800e9ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e9a8:	2337      	movs	r3, #55	; 0x37
 800e9aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c0:	3304      	adds	r3, #4
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fe fe56 	bl	800d674 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ca:	3318      	adds	r3, #24
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7fe fe51 	bl	800d674 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fa:	3354      	adds	r3, #84	; 0x54
 800e9fc:	224c      	movs	r2, #76	; 0x4c
 800e9fe:	2100      	movs	r1, #0
 800ea00:	4618      	mov	r0, r3
 800ea02:	f00a fc05 	bl	8019210 <memset>
 800ea06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea08:	4a0c      	ldr	r2, [pc, #48]	; (800ea3c <prvInitialiseNewTask+0x140>)
 800ea0a:	659a      	str	r2, [r3, #88]	; 0x58
 800ea0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0e:	4a0c      	ldr	r2, [pc, #48]	; (800ea40 <prvInitialiseNewTask+0x144>)
 800ea10:	65da      	str	r2, [r3, #92]	; 0x5c
 800ea12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea14:	4a0b      	ldr	r2, [pc, #44]	; (800ea44 <prvInitialiseNewTask+0x148>)
 800ea16:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea18:	683a      	ldr	r2, [r7, #0]
 800ea1a:	68f9      	ldr	r1, [r7, #12]
 800ea1c:	69b8      	ldr	r0, [r7, #24]
 800ea1e:	f001 fb87 	bl	8010130 <pxPortInitialiseStack>
 800ea22:	4602      	mov	r2, r0
 800ea24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea26:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ea28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d002      	beq.n	800ea34 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea34:	bf00      	nop
 800ea36:	3720      	adds	r7, #32
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	20008730 	.word	0x20008730
 800ea40:	20008798 	.word	0x20008798
 800ea44:	20008800 	.word	0x20008800

0800ea48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ea50:	f001 fc98 	bl	8010384 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ea54:	4b2d      	ldr	r3, [pc, #180]	; (800eb0c <prvAddNewTaskToReadyList+0xc4>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	4a2c      	ldr	r2, [pc, #176]	; (800eb0c <prvAddNewTaskToReadyList+0xc4>)
 800ea5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea5e:	4b2c      	ldr	r3, [pc, #176]	; (800eb10 <prvAddNewTaskToReadyList+0xc8>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d109      	bne.n	800ea7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea66:	4a2a      	ldr	r2, [pc, #168]	; (800eb10 <prvAddNewTaskToReadyList+0xc8>)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea6c:	4b27      	ldr	r3, [pc, #156]	; (800eb0c <prvAddNewTaskToReadyList+0xc4>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d110      	bne.n	800ea96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ea74:	f000 fd36 	bl	800f4e4 <prvInitialiseTaskLists>
 800ea78:	e00d      	b.n	800ea96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ea7a:	4b26      	ldr	r3, [pc, #152]	; (800eb14 <prvAddNewTaskToReadyList+0xcc>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d109      	bne.n	800ea96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ea82:	4b23      	ldr	r3, [pc, #140]	; (800eb10 <prvAddNewTaskToReadyList+0xc8>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d802      	bhi.n	800ea96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ea90:	4a1f      	ldr	r2, [pc, #124]	; (800eb10 <prvAddNewTaskToReadyList+0xc8>)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ea96:	4b20      	ldr	r3, [pc, #128]	; (800eb18 <prvAddNewTaskToReadyList+0xd0>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	4a1e      	ldr	r2, [pc, #120]	; (800eb18 <prvAddNewTaskToReadyList+0xd0>)
 800ea9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eaa0:	4b1d      	ldr	r3, [pc, #116]	; (800eb18 <prvAddNewTaskToReadyList+0xd0>)
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaac:	4b1b      	ldr	r3, [pc, #108]	; (800eb1c <prvAddNewTaskToReadyList+0xd4>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d903      	bls.n	800eabc <prvAddNewTaskToReadyList+0x74>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eab8:	4a18      	ldr	r2, [pc, #96]	; (800eb1c <prvAddNewTaskToReadyList+0xd4>)
 800eaba:	6013      	str	r3, [r2, #0]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eac0:	4613      	mov	r3, r2
 800eac2:	009b      	lsls	r3, r3, #2
 800eac4:	4413      	add	r3, r2
 800eac6:	009b      	lsls	r3, r3, #2
 800eac8:	4a15      	ldr	r2, [pc, #84]	; (800eb20 <prvAddNewTaskToReadyList+0xd8>)
 800eaca:	441a      	add	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	3304      	adds	r3, #4
 800ead0:	4619      	mov	r1, r3
 800ead2:	4610      	mov	r0, r2
 800ead4:	f7fe fddb 	bl	800d68e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ead8:	f001 fc84 	bl	80103e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eadc:	4b0d      	ldr	r3, [pc, #52]	; (800eb14 <prvAddNewTaskToReadyList+0xcc>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d00e      	beq.n	800eb02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eae4:	4b0a      	ldr	r3, [pc, #40]	; (800eb10 <prvAddNewTaskToReadyList+0xc8>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d207      	bcs.n	800eb02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eaf2:	4b0c      	ldr	r3, [pc, #48]	; (800eb24 <prvAddNewTaskToReadyList+0xdc>)
 800eaf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaf8:	601a      	str	r2, [r3, #0]
 800eafa:	f3bf 8f4f 	dsb	sy
 800eafe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb02:	bf00      	nop
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	200049b0 	.word	0x200049b0
 800eb10:	200044dc 	.word	0x200044dc
 800eb14:	200049bc 	.word	0x200049bc
 800eb18:	200049cc 	.word	0x200049cc
 800eb1c:	200049b8 	.word	0x200049b8
 800eb20:	200044e0 	.word	0x200044e0
 800eb24:	e000ed04 	.word	0xe000ed04

0800eb28 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800eb30:	f001 fc28 	bl	8010384 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d102      	bne.n	800eb40 <vTaskDelete+0x18>
 800eb3a:	4b2c      	ldr	r3, [pc, #176]	; (800ebec <vTaskDelete+0xc4>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	e000      	b.n	800eb42 <vTaskDelete+0x1a>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	3304      	adds	r3, #4
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fe fdfd 	bl	800d748 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d004      	beq.n	800eb60 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	3318      	adds	r3, #24
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fe fdf4 	bl	800d748 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800eb60:	4b23      	ldr	r3, [pc, #140]	; (800ebf0 <vTaskDelete+0xc8>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	3301      	adds	r3, #1
 800eb66:	4a22      	ldr	r2, [pc, #136]	; (800ebf0 <vTaskDelete+0xc8>)
 800eb68:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800eb6a:	4b20      	ldr	r3, [pc, #128]	; (800ebec <vTaskDelete+0xc4>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	68fa      	ldr	r2, [r7, #12]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d10b      	bne.n	800eb8c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	3304      	adds	r3, #4
 800eb78:	4619      	mov	r1, r3
 800eb7a:	481e      	ldr	r0, [pc, #120]	; (800ebf4 <vTaskDelete+0xcc>)
 800eb7c:	f7fe fd87 	bl	800d68e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800eb80:	4b1d      	ldr	r3, [pc, #116]	; (800ebf8 <vTaskDelete+0xd0>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	3301      	adds	r3, #1
 800eb86:	4a1c      	ldr	r2, [pc, #112]	; (800ebf8 <vTaskDelete+0xd0>)
 800eb88:	6013      	str	r3, [r2, #0]
 800eb8a:	e009      	b.n	800eba0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800eb8c:	4b1b      	ldr	r3, [pc, #108]	; (800ebfc <vTaskDelete+0xd4>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	3b01      	subs	r3, #1
 800eb92:	4a1a      	ldr	r2, [pc, #104]	; (800ebfc <vTaskDelete+0xd4>)
 800eb94:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800eb96:	68f8      	ldr	r0, [r7, #12]
 800eb98:	f000 fd12 	bl	800f5c0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800eb9c:	f000 fd44 	bl	800f628 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800eba0:	f001 fc20 	bl	80103e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800eba4:	4b16      	ldr	r3, [pc, #88]	; (800ec00 <vTaskDelete+0xd8>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d01b      	beq.n	800ebe4 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800ebac:	4b0f      	ldr	r3, [pc, #60]	; (800ebec <vTaskDelete+0xc4>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d116      	bne.n	800ebe4 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ebb6:	4b13      	ldr	r3, [pc, #76]	; (800ec04 <vTaskDelete+0xdc>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00a      	beq.n	800ebd4 <vTaskDelete+0xac>
	__asm volatile
 800ebbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc2:	f383 8811 	msr	BASEPRI, r3
 800ebc6:	f3bf 8f6f 	isb	sy
 800ebca:	f3bf 8f4f 	dsb	sy
 800ebce:	60bb      	str	r3, [r7, #8]
}
 800ebd0:	bf00      	nop
 800ebd2:	e7fe      	b.n	800ebd2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800ebd4:	4b0c      	ldr	r3, [pc, #48]	; (800ec08 <vTaskDelete+0xe0>)
 800ebd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebda:	601a      	str	r2, [r3, #0]
 800ebdc:	f3bf 8f4f 	dsb	sy
 800ebe0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ebe4:	bf00      	nop
 800ebe6:	3710      	adds	r7, #16
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	200044dc 	.word	0x200044dc
 800ebf0:	200049cc 	.word	0x200049cc
 800ebf4:	20004984 	.word	0x20004984
 800ebf8:	20004998 	.word	0x20004998
 800ebfc:	200049b0 	.word	0x200049b0
 800ec00:	200049bc 	.word	0x200049bc
 800ec04:	200049d8 	.word	0x200049d8
 800ec08:	e000ed04 	.word	0xe000ed04

0800ec0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ec14:	2300      	movs	r3, #0
 800ec16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d017      	beq.n	800ec4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ec1e:	4b13      	ldr	r3, [pc, #76]	; (800ec6c <vTaskDelay+0x60>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d00a      	beq.n	800ec3c <vTaskDelay+0x30>
	__asm volatile
 800ec26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2a:	f383 8811 	msr	BASEPRI, r3
 800ec2e:	f3bf 8f6f 	isb	sy
 800ec32:	f3bf 8f4f 	dsb	sy
 800ec36:	60bb      	str	r3, [r7, #8]
}
 800ec38:	bf00      	nop
 800ec3a:	e7fe      	b.n	800ec3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ec3c:	f000 f88a 	bl	800ed54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ec40:	2100      	movs	r1, #0
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f000 feb2 	bl	800f9ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ec48:	f000 f892 	bl	800ed70 <xTaskResumeAll>
 800ec4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d107      	bne.n	800ec64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ec54:	4b06      	ldr	r3, [pc, #24]	; (800ec70 <vTaskDelay+0x64>)
 800ec56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec5a:	601a      	str	r2, [r3, #0]
 800ec5c:	f3bf 8f4f 	dsb	sy
 800ec60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ec64:	bf00      	nop
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	200049d8 	.word	0x200049d8
 800ec70:	e000ed04 	.word	0xe000ed04

0800ec74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b08a      	sub	sp, #40	; 0x28
 800ec78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ec82:	463a      	mov	r2, r7
 800ec84:	1d39      	adds	r1, r7, #4
 800ec86:	f107 0308 	add.w	r3, r7, #8
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fe fab0 	bl	800d1f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ec90:	6839      	ldr	r1, [r7, #0]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	68ba      	ldr	r2, [r7, #8]
 800ec96:	9202      	str	r2, [sp, #8]
 800ec98:	9301      	str	r3, [sp, #4]
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	9300      	str	r3, [sp, #0]
 800ec9e:	2300      	movs	r3, #0
 800eca0:	460a      	mov	r2, r1
 800eca2:	4924      	ldr	r1, [pc, #144]	; (800ed34 <vTaskStartScheduler+0xc0>)
 800eca4:	4824      	ldr	r0, [pc, #144]	; (800ed38 <vTaskStartScheduler+0xc4>)
 800eca6:	f7ff fd87 	bl	800e7b8 <xTaskCreateStatic>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	4a23      	ldr	r2, [pc, #140]	; (800ed3c <vTaskStartScheduler+0xc8>)
 800ecae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ecb0:	4b22      	ldr	r3, [pc, #136]	; (800ed3c <vTaskStartScheduler+0xc8>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d002      	beq.n	800ecbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ecb8:	2301      	movs	r3, #1
 800ecba:	617b      	str	r3, [r7, #20]
 800ecbc:	e001      	b.n	800ecc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d102      	bne.n	800ecce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ecc8:	f000 fec4 	bl	800fa54 <xTimerCreateTimerTask>
 800eccc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	d11b      	bne.n	800ed0c <vTaskStartScheduler+0x98>
	__asm volatile
 800ecd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd8:	f383 8811 	msr	BASEPRI, r3
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	613b      	str	r3, [r7, #16]
}
 800ece6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ece8:	4b15      	ldr	r3, [pc, #84]	; (800ed40 <vTaskStartScheduler+0xcc>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	3354      	adds	r3, #84	; 0x54
 800ecee:	4a15      	ldr	r2, [pc, #84]	; (800ed44 <vTaskStartScheduler+0xd0>)
 800ecf0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ecf2:	4b15      	ldr	r3, [pc, #84]	; (800ed48 <vTaskStartScheduler+0xd4>)
 800ecf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ecf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ecfa:	4b14      	ldr	r3, [pc, #80]	; (800ed4c <vTaskStartScheduler+0xd8>)
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed00:	4b13      	ldr	r3, [pc, #76]	; (800ed50 <vTaskStartScheduler+0xdc>)
 800ed02:	2200      	movs	r2, #0
 800ed04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ed06:	f001 fa9b 	bl	8010240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ed0a:	e00e      	b.n	800ed2a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed12:	d10a      	bne.n	800ed2a <vTaskStartScheduler+0xb6>
	__asm volatile
 800ed14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed18:	f383 8811 	msr	BASEPRI, r3
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	f3bf 8f4f 	dsb	sy
 800ed24:	60fb      	str	r3, [r7, #12]
}
 800ed26:	bf00      	nop
 800ed28:	e7fe      	b.n	800ed28 <vTaskStartScheduler+0xb4>
}
 800ed2a:	bf00      	nop
 800ed2c:	3718      	adds	r7, #24
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	0801ec30 	.word	0x0801ec30
 800ed38:	0800f4b5 	.word	0x0800f4b5
 800ed3c:	200049d4 	.word	0x200049d4
 800ed40:	200044dc 	.word	0x200044dc
 800ed44:	200001f0 	.word	0x200001f0
 800ed48:	200049d0 	.word	0x200049d0
 800ed4c:	200049bc 	.word	0x200049bc
 800ed50:	200049b4 	.word	0x200049b4

0800ed54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ed54:	b480      	push	{r7}
 800ed56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ed58:	4b04      	ldr	r3, [pc, #16]	; (800ed6c <vTaskSuspendAll+0x18>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	4a03      	ldr	r2, [pc, #12]	; (800ed6c <vTaskSuspendAll+0x18>)
 800ed60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ed62:	bf00      	nop
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr
 800ed6c:	200049d8 	.word	0x200049d8

0800ed70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ed76:	2300      	movs	r3, #0
 800ed78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ed7e:	4b42      	ldr	r3, [pc, #264]	; (800ee88 <xTaskResumeAll+0x118>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d10a      	bne.n	800ed9c <xTaskResumeAll+0x2c>
	__asm volatile
 800ed86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed8a:	f383 8811 	msr	BASEPRI, r3
 800ed8e:	f3bf 8f6f 	isb	sy
 800ed92:	f3bf 8f4f 	dsb	sy
 800ed96:	603b      	str	r3, [r7, #0]
}
 800ed98:	bf00      	nop
 800ed9a:	e7fe      	b.n	800ed9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ed9c:	f001 faf2 	bl	8010384 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eda0:	4b39      	ldr	r3, [pc, #228]	; (800ee88 <xTaskResumeAll+0x118>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	3b01      	subs	r3, #1
 800eda6:	4a38      	ldr	r2, [pc, #224]	; (800ee88 <xTaskResumeAll+0x118>)
 800eda8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edaa:	4b37      	ldr	r3, [pc, #220]	; (800ee88 <xTaskResumeAll+0x118>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d162      	bne.n	800ee78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800edb2:	4b36      	ldr	r3, [pc, #216]	; (800ee8c <xTaskResumeAll+0x11c>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d05e      	beq.n	800ee78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800edba:	e02f      	b.n	800ee1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edbc:	4b34      	ldr	r3, [pc, #208]	; (800ee90 <xTaskResumeAll+0x120>)
 800edbe:	68db      	ldr	r3, [r3, #12]
 800edc0:	68db      	ldr	r3, [r3, #12]
 800edc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	3318      	adds	r3, #24
 800edc8:	4618      	mov	r0, r3
 800edca:	f7fe fcbd 	bl	800d748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	3304      	adds	r3, #4
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fe fcb8 	bl	800d748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eddc:	4b2d      	ldr	r3, [pc, #180]	; (800ee94 <xTaskResumeAll+0x124>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d903      	bls.n	800edec <xTaskResumeAll+0x7c>
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede8:	4a2a      	ldr	r2, [pc, #168]	; (800ee94 <xTaskResumeAll+0x124>)
 800edea:	6013      	str	r3, [r2, #0]
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edf0:	4613      	mov	r3, r2
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	4413      	add	r3, r2
 800edf6:	009b      	lsls	r3, r3, #2
 800edf8:	4a27      	ldr	r2, [pc, #156]	; (800ee98 <xTaskResumeAll+0x128>)
 800edfa:	441a      	add	r2, r3
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	3304      	adds	r3, #4
 800ee00:	4619      	mov	r1, r3
 800ee02:	4610      	mov	r0, r2
 800ee04:	f7fe fc43 	bl	800d68e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee0c:	4b23      	ldr	r3, [pc, #140]	; (800ee9c <xTaskResumeAll+0x12c>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d302      	bcc.n	800ee1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ee16:	4b22      	ldr	r3, [pc, #136]	; (800eea0 <xTaskResumeAll+0x130>)
 800ee18:	2201      	movs	r2, #1
 800ee1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee1c:	4b1c      	ldr	r3, [pc, #112]	; (800ee90 <xTaskResumeAll+0x120>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1cb      	bne.n	800edbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ee2a:	f000 fbfd 	bl	800f628 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ee2e:	4b1d      	ldr	r3, [pc, #116]	; (800eea4 <xTaskResumeAll+0x134>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d010      	beq.n	800ee5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ee3a:	f000 f847 	bl	800eecc <xTaskIncrementTick>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d002      	beq.n	800ee4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ee44:	4b16      	ldr	r3, [pc, #88]	; (800eea0 <xTaskResumeAll+0x130>)
 800ee46:	2201      	movs	r2, #1
 800ee48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1f1      	bne.n	800ee3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ee56:	4b13      	ldr	r3, [pc, #76]	; (800eea4 <xTaskResumeAll+0x134>)
 800ee58:	2200      	movs	r2, #0
 800ee5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ee5c:	4b10      	ldr	r3, [pc, #64]	; (800eea0 <xTaskResumeAll+0x130>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d009      	beq.n	800ee78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ee64:	2301      	movs	r3, #1
 800ee66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ee68:	4b0f      	ldr	r3, [pc, #60]	; (800eea8 <xTaskResumeAll+0x138>)
 800ee6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee6e:	601a      	str	r2, [r3, #0]
 800ee70:	f3bf 8f4f 	dsb	sy
 800ee74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee78:	f001 fab4 	bl	80103e4 <vPortExitCritical>

	return xAlreadyYielded;
 800ee7c:	68bb      	ldr	r3, [r7, #8]
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3710      	adds	r7, #16
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	200049d8 	.word	0x200049d8
 800ee8c:	200049b0 	.word	0x200049b0
 800ee90:	20004970 	.word	0x20004970
 800ee94:	200049b8 	.word	0x200049b8
 800ee98:	200044e0 	.word	0x200044e0
 800ee9c:	200044dc 	.word	0x200044dc
 800eea0:	200049c4 	.word	0x200049c4
 800eea4:	200049c0 	.word	0x200049c0
 800eea8:	e000ed04 	.word	0xe000ed04

0800eeac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eeac:	b480      	push	{r7}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eeb2:	4b05      	ldr	r3, [pc, #20]	; (800eec8 <xTaskGetTickCount+0x1c>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eeb8:	687b      	ldr	r3, [r7, #4]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	370c      	adds	r7, #12
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	200049b4 	.word	0x200049b4

0800eecc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800eed2:	2300      	movs	r3, #0
 800eed4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eed6:	4b4f      	ldr	r3, [pc, #316]	; (800f014 <xTaskIncrementTick+0x148>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f040 808f 	bne.w	800effe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800eee0:	4b4d      	ldr	r3, [pc, #308]	; (800f018 <xTaskIncrementTick+0x14c>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	3301      	adds	r3, #1
 800eee6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800eee8:	4a4b      	ldr	r2, [pc, #300]	; (800f018 <xTaskIncrementTick+0x14c>)
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d120      	bne.n	800ef36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800eef4:	4b49      	ldr	r3, [pc, #292]	; (800f01c <xTaskIncrementTick+0x150>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d00a      	beq.n	800ef14 <xTaskIncrementTick+0x48>
	__asm volatile
 800eefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef02:	f383 8811 	msr	BASEPRI, r3
 800ef06:	f3bf 8f6f 	isb	sy
 800ef0a:	f3bf 8f4f 	dsb	sy
 800ef0e:	603b      	str	r3, [r7, #0]
}
 800ef10:	bf00      	nop
 800ef12:	e7fe      	b.n	800ef12 <xTaskIncrementTick+0x46>
 800ef14:	4b41      	ldr	r3, [pc, #260]	; (800f01c <xTaskIncrementTick+0x150>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	60fb      	str	r3, [r7, #12]
 800ef1a:	4b41      	ldr	r3, [pc, #260]	; (800f020 <xTaskIncrementTick+0x154>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4a3f      	ldr	r2, [pc, #252]	; (800f01c <xTaskIncrementTick+0x150>)
 800ef20:	6013      	str	r3, [r2, #0]
 800ef22:	4a3f      	ldr	r2, [pc, #252]	; (800f020 <xTaskIncrementTick+0x154>)
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	6013      	str	r3, [r2, #0]
 800ef28:	4b3e      	ldr	r3, [pc, #248]	; (800f024 <xTaskIncrementTick+0x158>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	4a3d      	ldr	r2, [pc, #244]	; (800f024 <xTaskIncrementTick+0x158>)
 800ef30:	6013      	str	r3, [r2, #0]
 800ef32:	f000 fb79 	bl	800f628 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ef36:	4b3c      	ldr	r3, [pc, #240]	; (800f028 <xTaskIncrementTick+0x15c>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	693a      	ldr	r2, [r7, #16]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d349      	bcc.n	800efd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef40:	4b36      	ldr	r3, [pc, #216]	; (800f01c <xTaskIncrementTick+0x150>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d104      	bne.n	800ef54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef4a:	4b37      	ldr	r3, [pc, #220]	; (800f028 <xTaskIncrementTick+0x15c>)
 800ef4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef50:	601a      	str	r2, [r3, #0]
					break;
 800ef52:	e03f      	b.n	800efd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef54:	4b31      	ldr	r3, [pc, #196]	; (800f01c <xTaskIncrementTick+0x150>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	68db      	ldr	r3, [r3, #12]
 800ef5a:	68db      	ldr	r3, [r3, #12]
 800ef5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ef64:	693a      	ldr	r2, [r7, #16]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d203      	bcs.n	800ef74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ef6c:	4a2e      	ldr	r2, [pc, #184]	; (800f028 <xTaskIncrementTick+0x15c>)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ef72:	e02f      	b.n	800efd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	3304      	adds	r3, #4
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7fe fbe5 	bl	800d748 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d004      	beq.n	800ef90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	3318      	adds	r3, #24
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fe fbdc 	bl	800d748 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef94:	4b25      	ldr	r3, [pc, #148]	; (800f02c <xTaskIncrementTick+0x160>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d903      	bls.n	800efa4 <xTaskIncrementTick+0xd8>
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa0:	4a22      	ldr	r2, [pc, #136]	; (800f02c <xTaskIncrementTick+0x160>)
 800efa2:	6013      	str	r3, [r2, #0]
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efa8:	4613      	mov	r3, r2
 800efaa:	009b      	lsls	r3, r3, #2
 800efac:	4413      	add	r3, r2
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	4a1f      	ldr	r2, [pc, #124]	; (800f030 <xTaskIncrementTick+0x164>)
 800efb2:	441a      	add	r2, r3
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	3304      	adds	r3, #4
 800efb8:	4619      	mov	r1, r3
 800efba:	4610      	mov	r0, r2
 800efbc:	f7fe fb67 	bl	800d68e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efc4:	4b1b      	ldr	r3, [pc, #108]	; (800f034 <xTaskIncrementTick+0x168>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efca:	429a      	cmp	r2, r3
 800efcc:	d3b8      	bcc.n	800ef40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800efce:	2301      	movs	r3, #1
 800efd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efd2:	e7b5      	b.n	800ef40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800efd4:	4b17      	ldr	r3, [pc, #92]	; (800f034 <xTaskIncrementTick+0x168>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efda:	4915      	ldr	r1, [pc, #84]	; (800f030 <xTaskIncrementTick+0x164>)
 800efdc:	4613      	mov	r3, r2
 800efde:	009b      	lsls	r3, r3, #2
 800efe0:	4413      	add	r3, r2
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	440b      	add	r3, r1
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d901      	bls.n	800eff0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800efec:	2301      	movs	r3, #1
 800efee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eff0:	4b11      	ldr	r3, [pc, #68]	; (800f038 <xTaskIncrementTick+0x16c>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d007      	beq.n	800f008 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800eff8:	2301      	movs	r3, #1
 800effa:	617b      	str	r3, [r7, #20]
 800effc:	e004      	b.n	800f008 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800effe:	4b0f      	ldr	r3, [pc, #60]	; (800f03c <xTaskIncrementTick+0x170>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	3301      	adds	r3, #1
 800f004:	4a0d      	ldr	r2, [pc, #52]	; (800f03c <xTaskIncrementTick+0x170>)
 800f006:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f008:	697b      	ldr	r3, [r7, #20]
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3718      	adds	r7, #24
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	200049d8 	.word	0x200049d8
 800f018:	200049b4 	.word	0x200049b4
 800f01c:	20004968 	.word	0x20004968
 800f020:	2000496c 	.word	0x2000496c
 800f024:	200049c8 	.word	0x200049c8
 800f028:	200049d0 	.word	0x200049d0
 800f02c:	200049b8 	.word	0x200049b8
 800f030:	200044e0 	.word	0x200044e0
 800f034:	200044dc 	.word	0x200044dc
 800f038:	200049c4 	.word	0x200049c4
 800f03c:	200049c0 	.word	0x200049c0

0800f040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f040:	b480      	push	{r7}
 800f042:	b085      	sub	sp, #20
 800f044:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f046:	4b2a      	ldr	r3, [pc, #168]	; (800f0f0 <vTaskSwitchContext+0xb0>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d003      	beq.n	800f056 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f04e:	4b29      	ldr	r3, [pc, #164]	; (800f0f4 <vTaskSwitchContext+0xb4>)
 800f050:	2201      	movs	r2, #1
 800f052:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f054:	e046      	b.n	800f0e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f056:	4b27      	ldr	r3, [pc, #156]	; (800f0f4 <vTaskSwitchContext+0xb4>)
 800f058:	2200      	movs	r2, #0
 800f05a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f05c:	4b26      	ldr	r3, [pc, #152]	; (800f0f8 <vTaskSwitchContext+0xb8>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	60fb      	str	r3, [r7, #12]
 800f062:	e010      	b.n	800f086 <vTaskSwitchContext+0x46>
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d10a      	bne.n	800f080 <vTaskSwitchContext+0x40>
	__asm volatile
 800f06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f06e:	f383 8811 	msr	BASEPRI, r3
 800f072:	f3bf 8f6f 	isb	sy
 800f076:	f3bf 8f4f 	dsb	sy
 800f07a:	607b      	str	r3, [r7, #4]
}
 800f07c:	bf00      	nop
 800f07e:	e7fe      	b.n	800f07e <vTaskSwitchContext+0x3e>
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	3b01      	subs	r3, #1
 800f084:	60fb      	str	r3, [r7, #12]
 800f086:	491d      	ldr	r1, [pc, #116]	; (800f0fc <vTaskSwitchContext+0xbc>)
 800f088:	68fa      	ldr	r2, [r7, #12]
 800f08a:	4613      	mov	r3, r2
 800f08c:	009b      	lsls	r3, r3, #2
 800f08e:	4413      	add	r3, r2
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	440b      	add	r3, r1
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d0e4      	beq.n	800f064 <vTaskSwitchContext+0x24>
 800f09a:	68fa      	ldr	r2, [r7, #12]
 800f09c:	4613      	mov	r3, r2
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	4413      	add	r3, r2
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	4a15      	ldr	r2, [pc, #84]	; (800f0fc <vTaskSwitchContext+0xbc>)
 800f0a6:	4413      	add	r3, r2
 800f0a8:	60bb      	str	r3, [r7, #8]
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	685a      	ldr	r2, [r3, #4]
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	605a      	str	r2, [r3, #4]
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	685a      	ldr	r2, [r3, #4]
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	3308      	adds	r3, #8
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d104      	bne.n	800f0ca <vTaskSwitchContext+0x8a>
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	685a      	ldr	r2, [r3, #4]
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	605a      	str	r2, [r3, #4]
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	4a0b      	ldr	r2, [pc, #44]	; (800f100 <vTaskSwitchContext+0xc0>)
 800f0d2:	6013      	str	r3, [r2, #0]
 800f0d4:	4a08      	ldr	r2, [pc, #32]	; (800f0f8 <vTaskSwitchContext+0xb8>)
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f0da:	4b09      	ldr	r3, [pc, #36]	; (800f100 <vTaskSwitchContext+0xc0>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	3354      	adds	r3, #84	; 0x54
 800f0e0:	4a08      	ldr	r2, [pc, #32]	; (800f104 <vTaskSwitchContext+0xc4>)
 800f0e2:	6013      	str	r3, [r2, #0]
}
 800f0e4:	bf00      	nop
 800f0e6:	3714      	adds	r7, #20
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr
 800f0f0:	200049d8 	.word	0x200049d8
 800f0f4:	200049c4 	.word	0x200049c4
 800f0f8:	200049b8 	.word	0x200049b8
 800f0fc:	200044e0 	.word	0x200044e0
 800f100:	200044dc 	.word	0x200044dc
 800f104:	200001f0 	.word	0x200001f0

0800f108 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d10a      	bne.n	800f12e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11c:	f383 8811 	msr	BASEPRI, r3
 800f120:	f3bf 8f6f 	isb	sy
 800f124:	f3bf 8f4f 	dsb	sy
 800f128:	60fb      	str	r3, [r7, #12]
}
 800f12a:	bf00      	nop
 800f12c:	e7fe      	b.n	800f12c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f12e:	4b07      	ldr	r3, [pc, #28]	; (800f14c <vTaskPlaceOnEventList+0x44>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	3318      	adds	r3, #24
 800f134:	4619      	mov	r1, r3
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f7fe facd 	bl	800d6d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f13c:	2101      	movs	r1, #1
 800f13e:	6838      	ldr	r0, [r7, #0]
 800f140:	f000 fc34 	bl	800f9ac <prvAddCurrentTaskToDelayedList>
}
 800f144:	bf00      	nop
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	200044dc 	.word	0x200044dc

0800f150 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b086      	sub	sp, #24
 800f154:	af00      	add	r7, sp, #0
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	60b9      	str	r1, [r7, #8]
 800f15a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d10a      	bne.n	800f178 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800f162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f166:	f383 8811 	msr	BASEPRI, r3
 800f16a:	f3bf 8f6f 	isb	sy
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	617b      	str	r3, [r7, #20]
}
 800f174:	bf00      	nop
 800f176:	e7fe      	b.n	800f176 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f178:	4b11      	ldr	r3, [pc, #68]	; (800f1c0 <vTaskPlaceOnUnorderedEventList+0x70>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d10a      	bne.n	800f196 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800f180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f184:	f383 8811 	msr	BASEPRI, r3
 800f188:	f3bf 8f6f 	isb	sy
 800f18c:	f3bf 8f4f 	dsb	sy
 800f190:	613b      	str	r3, [r7, #16]
}
 800f192:	bf00      	nop
 800f194:	e7fe      	b.n	800f194 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f196:	4b0b      	ldr	r3, [pc, #44]	; (800f1c4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800f1a0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1a2:	4b08      	ldr	r3, [pc, #32]	; (800f1c4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	3318      	adds	r3, #24
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	68f8      	ldr	r0, [r7, #12]
 800f1ac:	f7fe fa6f 	bl	800d68e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f1b0:	2101      	movs	r1, #1
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f000 fbfa 	bl	800f9ac <prvAddCurrentTaskToDelayedList>
}
 800f1b8:	bf00      	nop
 800f1ba:	3718      	adds	r7, #24
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	200049d8 	.word	0x200049d8
 800f1c4:	200044dc 	.word	0x200044dc

0800f1c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b086      	sub	sp, #24
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10a      	bne.n	800f1f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1de:	f383 8811 	msr	BASEPRI, r3
 800f1e2:	f3bf 8f6f 	isb	sy
 800f1e6:	f3bf 8f4f 	dsb	sy
 800f1ea:	617b      	str	r3, [r7, #20]
}
 800f1ec:	bf00      	nop
 800f1ee:	e7fe      	b.n	800f1ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1f0:	4b0a      	ldr	r3, [pc, #40]	; (800f21c <vTaskPlaceOnEventListRestricted+0x54>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	3318      	adds	r3, #24
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f7fe fa48 	bl	800d68e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d002      	beq.n	800f20a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f208:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f20a:	6879      	ldr	r1, [r7, #4]
 800f20c:	68b8      	ldr	r0, [r7, #8]
 800f20e:	f000 fbcd 	bl	800f9ac <prvAddCurrentTaskToDelayedList>
	}
 800f212:	bf00      	nop
 800f214:	3718      	adds	r7, #24
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
 800f21a:	bf00      	nop
 800f21c:	200044dc 	.word	0x200044dc

0800f220 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b086      	sub	sp, #24
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	68db      	ldr	r3, [r3, #12]
 800f22e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f230:	693b      	ldr	r3, [r7, #16]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d10a      	bne.n	800f24c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f23a:	f383 8811 	msr	BASEPRI, r3
 800f23e:	f3bf 8f6f 	isb	sy
 800f242:	f3bf 8f4f 	dsb	sy
 800f246:	60fb      	str	r3, [r7, #12]
}
 800f248:	bf00      	nop
 800f24a:	e7fe      	b.n	800f24a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	3318      	adds	r3, #24
 800f250:	4618      	mov	r0, r3
 800f252:	f7fe fa79 	bl	800d748 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f256:	4b1e      	ldr	r3, [pc, #120]	; (800f2d0 <xTaskRemoveFromEventList+0xb0>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d11d      	bne.n	800f29a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	3304      	adds	r3, #4
 800f262:	4618      	mov	r0, r3
 800f264:	f7fe fa70 	bl	800d748 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f26c:	4b19      	ldr	r3, [pc, #100]	; (800f2d4 <xTaskRemoveFromEventList+0xb4>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	429a      	cmp	r2, r3
 800f272:	d903      	bls.n	800f27c <xTaskRemoveFromEventList+0x5c>
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f278:	4a16      	ldr	r2, [pc, #88]	; (800f2d4 <xTaskRemoveFromEventList+0xb4>)
 800f27a:	6013      	str	r3, [r2, #0]
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f280:	4613      	mov	r3, r2
 800f282:	009b      	lsls	r3, r3, #2
 800f284:	4413      	add	r3, r2
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	4a13      	ldr	r2, [pc, #76]	; (800f2d8 <xTaskRemoveFromEventList+0xb8>)
 800f28a:	441a      	add	r2, r3
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	3304      	adds	r3, #4
 800f290:	4619      	mov	r1, r3
 800f292:	4610      	mov	r0, r2
 800f294:	f7fe f9fb 	bl	800d68e <vListInsertEnd>
 800f298:	e005      	b.n	800f2a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	3318      	adds	r3, #24
 800f29e:	4619      	mov	r1, r3
 800f2a0:	480e      	ldr	r0, [pc, #56]	; (800f2dc <xTaskRemoveFromEventList+0xbc>)
 800f2a2:	f7fe f9f4 	bl	800d68e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2aa:	4b0d      	ldr	r3, [pc, #52]	; (800f2e0 <xTaskRemoveFromEventList+0xc0>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d905      	bls.n	800f2c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f2b8:	4b0a      	ldr	r3, [pc, #40]	; (800f2e4 <xTaskRemoveFromEventList+0xc4>)
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	601a      	str	r2, [r3, #0]
 800f2be:	e001      	b.n	800f2c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f2c4:	697b      	ldr	r3, [r7, #20]
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3718      	adds	r7, #24
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	200049d8 	.word	0x200049d8
 800f2d4:	200049b8 	.word	0x200049b8
 800f2d8:	200044e0 	.word	0x200044e0
 800f2dc:	20004970 	.word	0x20004970
 800f2e0:	200044dc 	.word	0x200044dc
 800f2e4:	200049c4 	.word	0x200049c4

0800f2e8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b086      	sub	sp, #24
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f2f2:	4b29      	ldr	r3, [pc, #164]	; (800f398 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d10a      	bne.n	800f310 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800f2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fe:	f383 8811 	msr	BASEPRI, r3
 800f302:	f3bf 8f6f 	isb	sy
 800f306:	f3bf 8f4f 	dsb	sy
 800f30a:	613b      	str	r3, [r7, #16]
}
 800f30c:	bf00      	nop
 800f30e:	e7fe      	b.n	800f30e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d10a      	bne.n	800f33c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800f326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32a:	f383 8811 	msr	BASEPRI, r3
 800f32e:	f3bf 8f6f 	isb	sy
 800f332:	f3bf 8f4f 	dsb	sy
 800f336:	60fb      	str	r3, [r7, #12]
}
 800f338:	bf00      	nop
 800f33a:	e7fe      	b.n	800f33a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f7fe fa03 	bl	800d748 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	3304      	adds	r3, #4
 800f346:	4618      	mov	r0, r3
 800f348:	f7fe f9fe 	bl	800d748 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f350:	4b12      	ldr	r3, [pc, #72]	; (800f39c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	429a      	cmp	r2, r3
 800f356:	d903      	bls.n	800f360 <vTaskRemoveFromUnorderedEventList+0x78>
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f35c:	4a0f      	ldr	r2, [pc, #60]	; (800f39c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f35e:	6013      	str	r3, [r2, #0]
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f364:	4613      	mov	r3, r2
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	4413      	add	r3, r2
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	4a0c      	ldr	r2, [pc, #48]	; (800f3a0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f36e:	441a      	add	r2, r3
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	3304      	adds	r3, #4
 800f374:	4619      	mov	r1, r3
 800f376:	4610      	mov	r0, r2
 800f378:	f7fe f989 	bl	800d68e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f380:	4b08      	ldr	r3, [pc, #32]	; (800f3a4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f386:	429a      	cmp	r2, r3
 800f388:	d902      	bls.n	800f390 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f38a:	4b07      	ldr	r3, [pc, #28]	; (800f3a8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f38c:	2201      	movs	r2, #1
 800f38e:	601a      	str	r2, [r3, #0]
	}
}
 800f390:	bf00      	nop
 800f392:	3718      	adds	r7, #24
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}
 800f398:	200049d8 	.word	0x200049d8
 800f39c:	200049b8 	.word	0x200049b8
 800f3a0:	200044e0 	.word	0x200044e0
 800f3a4:	200044dc 	.word	0x200044dc
 800f3a8:	200049c4 	.word	0x200049c4

0800f3ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f3b4:	4b06      	ldr	r3, [pc, #24]	; (800f3d0 <vTaskInternalSetTimeOutState+0x24>)
 800f3b6:	681a      	ldr	r2, [r3, #0]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f3bc:	4b05      	ldr	r3, [pc, #20]	; (800f3d4 <vTaskInternalSetTimeOutState+0x28>)
 800f3be:	681a      	ldr	r2, [r3, #0]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	605a      	str	r2, [r3, #4]
}
 800f3c4:	bf00      	nop
 800f3c6:	370c      	adds	r7, #12
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr
 800f3d0:	200049c8 	.word	0x200049c8
 800f3d4:	200049b4 	.word	0x200049b4

0800f3d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b088      	sub	sp, #32
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d10a      	bne.n	800f3fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ec:	f383 8811 	msr	BASEPRI, r3
 800f3f0:	f3bf 8f6f 	isb	sy
 800f3f4:	f3bf 8f4f 	dsb	sy
 800f3f8:	613b      	str	r3, [r7, #16]
}
 800f3fa:	bf00      	nop
 800f3fc:	e7fe      	b.n	800f3fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10a      	bne.n	800f41a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	60fb      	str	r3, [r7, #12]
}
 800f416:	bf00      	nop
 800f418:	e7fe      	b.n	800f418 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f41a:	f000 ffb3 	bl	8010384 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f41e:	4b1d      	ldr	r3, [pc, #116]	; (800f494 <xTaskCheckForTimeOut+0xbc>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	69ba      	ldr	r2, [r7, #24]
 800f42a:	1ad3      	subs	r3, r2, r3
 800f42c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f436:	d102      	bne.n	800f43e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f438:	2300      	movs	r3, #0
 800f43a:	61fb      	str	r3, [r7, #28]
 800f43c:	e023      	b.n	800f486 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	4b15      	ldr	r3, [pc, #84]	; (800f498 <xTaskCheckForTimeOut+0xc0>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	429a      	cmp	r2, r3
 800f448:	d007      	beq.n	800f45a <xTaskCheckForTimeOut+0x82>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	69ba      	ldr	r2, [r7, #24]
 800f450:	429a      	cmp	r2, r3
 800f452:	d302      	bcc.n	800f45a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f454:	2301      	movs	r3, #1
 800f456:	61fb      	str	r3, [r7, #28]
 800f458:	e015      	b.n	800f486 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	697a      	ldr	r2, [r7, #20]
 800f460:	429a      	cmp	r2, r3
 800f462:	d20b      	bcs.n	800f47c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	1ad2      	subs	r2, r2, r3
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7ff ff9b 	bl	800f3ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f476:	2300      	movs	r3, #0
 800f478:	61fb      	str	r3, [r7, #28]
 800f47a:	e004      	b.n	800f486 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	2200      	movs	r2, #0
 800f480:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f482:	2301      	movs	r3, #1
 800f484:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f486:	f000 ffad 	bl	80103e4 <vPortExitCritical>

	return xReturn;
 800f48a:	69fb      	ldr	r3, [r7, #28]
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3720      	adds	r7, #32
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}
 800f494:	200049b4 	.word	0x200049b4
 800f498:	200049c8 	.word	0x200049c8

0800f49c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f49c:	b480      	push	{r7}
 800f49e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f4a0:	4b03      	ldr	r3, [pc, #12]	; (800f4b0 <vTaskMissedYield+0x14>)
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	601a      	str	r2, [r3, #0]
}
 800f4a6:	bf00      	nop
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr
 800f4b0:	200049c4 	.word	0x200049c4

0800f4b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f4bc:	f000 f852 	bl	800f564 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f4c0:	4b06      	ldr	r3, [pc, #24]	; (800f4dc <prvIdleTask+0x28>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d9f9      	bls.n	800f4bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800f4c8:	4b05      	ldr	r3, [pc, #20]	; (800f4e0 <prvIdleTask+0x2c>)
 800f4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4ce:	601a      	str	r2, [r3, #0]
 800f4d0:	f3bf 8f4f 	dsb	sy
 800f4d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f4d8:	e7f0      	b.n	800f4bc <prvIdleTask+0x8>
 800f4da:	bf00      	nop
 800f4dc:	200044e0 	.word	0x200044e0
 800f4e0:	e000ed04 	.word	0xe000ed04

0800f4e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	607b      	str	r3, [r7, #4]
 800f4ee:	e00c      	b.n	800f50a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	4613      	mov	r3, r2
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	4413      	add	r3, r2
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	4a12      	ldr	r2, [pc, #72]	; (800f544 <prvInitialiseTaskLists+0x60>)
 800f4fc:	4413      	add	r3, r2
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7fe f898 	bl	800d634 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	3301      	adds	r3, #1
 800f508:	607b      	str	r3, [r7, #4]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2b37      	cmp	r3, #55	; 0x37
 800f50e:	d9ef      	bls.n	800f4f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f510:	480d      	ldr	r0, [pc, #52]	; (800f548 <prvInitialiseTaskLists+0x64>)
 800f512:	f7fe f88f 	bl	800d634 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f516:	480d      	ldr	r0, [pc, #52]	; (800f54c <prvInitialiseTaskLists+0x68>)
 800f518:	f7fe f88c 	bl	800d634 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f51c:	480c      	ldr	r0, [pc, #48]	; (800f550 <prvInitialiseTaskLists+0x6c>)
 800f51e:	f7fe f889 	bl	800d634 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f522:	480c      	ldr	r0, [pc, #48]	; (800f554 <prvInitialiseTaskLists+0x70>)
 800f524:	f7fe f886 	bl	800d634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f528:	480b      	ldr	r0, [pc, #44]	; (800f558 <prvInitialiseTaskLists+0x74>)
 800f52a:	f7fe f883 	bl	800d634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f52e:	4b0b      	ldr	r3, [pc, #44]	; (800f55c <prvInitialiseTaskLists+0x78>)
 800f530:	4a05      	ldr	r2, [pc, #20]	; (800f548 <prvInitialiseTaskLists+0x64>)
 800f532:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f534:	4b0a      	ldr	r3, [pc, #40]	; (800f560 <prvInitialiseTaskLists+0x7c>)
 800f536:	4a05      	ldr	r2, [pc, #20]	; (800f54c <prvInitialiseTaskLists+0x68>)
 800f538:	601a      	str	r2, [r3, #0]
}
 800f53a:	bf00      	nop
 800f53c:	3708      	adds	r7, #8
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	200044e0 	.word	0x200044e0
 800f548:	20004940 	.word	0x20004940
 800f54c:	20004954 	.word	0x20004954
 800f550:	20004970 	.word	0x20004970
 800f554:	20004984 	.word	0x20004984
 800f558:	2000499c 	.word	0x2000499c
 800f55c:	20004968 	.word	0x20004968
 800f560:	2000496c 	.word	0x2000496c

0800f564 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f56a:	e019      	b.n	800f5a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f56c:	f000 ff0a 	bl	8010384 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f570:	4b10      	ldr	r3, [pc, #64]	; (800f5b4 <prvCheckTasksWaitingTermination+0x50>)
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	3304      	adds	r3, #4
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7fe f8e3 	bl	800d748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f582:	4b0d      	ldr	r3, [pc, #52]	; (800f5b8 <prvCheckTasksWaitingTermination+0x54>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	3b01      	subs	r3, #1
 800f588:	4a0b      	ldr	r2, [pc, #44]	; (800f5b8 <prvCheckTasksWaitingTermination+0x54>)
 800f58a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f58c:	4b0b      	ldr	r3, [pc, #44]	; (800f5bc <prvCheckTasksWaitingTermination+0x58>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	3b01      	subs	r3, #1
 800f592:	4a0a      	ldr	r2, [pc, #40]	; (800f5bc <prvCheckTasksWaitingTermination+0x58>)
 800f594:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f596:	f000 ff25 	bl	80103e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 f810 	bl	800f5c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5a0:	4b06      	ldr	r3, [pc, #24]	; (800f5bc <prvCheckTasksWaitingTermination+0x58>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d1e1      	bne.n	800f56c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f5a8:	bf00      	nop
 800f5aa:	bf00      	nop
 800f5ac:	3708      	adds	r7, #8
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
 800f5b2:	bf00      	nop
 800f5b4:	20004984 	.word	0x20004984
 800f5b8:	200049b0 	.word	0x200049b0
 800f5bc:	20004998 	.word	0x20004998

0800f5c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	3354      	adds	r3, #84	; 0x54
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f009 fe2b 	bl	8019228 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d108      	bne.n	800f5ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f001 f8bd 	bl	8010760 <vPortFree>
				vPortFree( pxTCB );
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f001 f8ba 	bl	8010760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f5ec:	e018      	b.n	800f620 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d103      	bne.n	800f600 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f001 f8b1 	bl	8010760 <vPortFree>
	}
 800f5fe:	e00f      	b.n	800f620 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800f606:	2b02      	cmp	r3, #2
 800f608:	d00a      	beq.n	800f620 <prvDeleteTCB+0x60>
	__asm volatile
 800f60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f60e:	f383 8811 	msr	BASEPRI, r3
 800f612:	f3bf 8f6f 	isb	sy
 800f616:	f3bf 8f4f 	dsb	sy
 800f61a:	60fb      	str	r3, [r7, #12]
}
 800f61c:	bf00      	nop
 800f61e:	e7fe      	b.n	800f61e <prvDeleteTCB+0x5e>
	}
 800f620:	bf00      	nop
 800f622:	3710      	adds	r7, #16
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f62e:	4b0c      	ldr	r3, [pc, #48]	; (800f660 <prvResetNextTaskUnblockTime+0x38>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d104      	bne.n	800f642 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f638:	4b0a      	ldr	r3, [pc, #40]	; (800f664 <prvResetNextTaskUnblockTime+0x3c>)
 800f63a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f63e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f640:	e008      	b.n	800f654 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f642:	4b07      	ldr	r3, [pc, #28]	; (800f660 <prvResetNextTaskUnblockTime+0x38>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	4a04      	ldr	r2, [pc, #16]	; (800f664 <prvResetNextTaskUnblockTime+0x3c>)
 800f652:	6013      	str	r3, [r2, #0]
}
 800f654:	bf00      	nop
 800f656:	370c      	adds	r7, #12
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr
 800f660:	20004968 	.word	0x20004968
 800f664:	200049d0 	.word	0x200049d0

0800f668 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f668:	b480      	push	{r7}
 800f66a:	b083      	sub	sp, #12
 800f66c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f66e:	4b0b      	ldr	r3, [pc, #44]	; (800f69c <xTaskGetSchedulerState+0x34>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d102      	bne.n	800f67c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f676:	2301      	movs	r3, #1
 800f678:	607b      	str	r3, [r7, #4]
 800f67a:	e008      	b.n	800f68e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f67c:	4b08      	ldr	r3, [pc, #32]	; (800f6a0 <xTaskGetSchedulerState+0x38>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d102      	bne.n	800f68a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f684:	2302      	movs	r3, #2
 800f686:	607b      	str	r3, [r7, #4]
 800f688:	e001      	b.n	800f68e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f68a:	2300      	movs	r3, #0
 800f68c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f68e:	687b      	ldr	r3, [r7, #4]
	}
 800f690:	4618      	mov	r0, r3
 800f692:	370c      	adds	r7, #12
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr
 800f69c:	200049bc 	.word	0x200049bc
 800f6a0:	200049d8 	.word	0x200049d8

0800f6a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d051      	beq.n	800f75e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6be:	4b2a      	ldr	r3, [pc, #168]	; (800f768 <xTaskPriorityInherit+0xc4>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d241      	bcs.n	800f74c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	699b      	ldr	r3, [r3, #24]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	db06      	blt.n	800f6de <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6d0:	4b25      	ldr	r3, [pc, #148]	; (800f768 <xTaskPriorityInherit+0xc4>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	6959      	ldr	r1, [r3, #20]
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	009b      	lsls	r3, r3, #2
 800f6ea:	4413      	add	r3, r2
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	4a1f      	ldr	r2, [pc, #124]	; (800f76c <xTaskPriorityInherit+0xc8>)
 800f6f0:	4413      	add	r3, r2
 800f6f2:	4299      	cmp	r1, r3
 800f6f4:	d122      	bne.n	800f73c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	3304      	adds	r3, #4
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7fe f824 	bl	800d748 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f700:	4b19      	ldr	r3, [pc, #100]	; (800f768 <xTaskPriorityInherit+0xc4>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f70e:	4b18      	ldr	r3, [pc, #96]	; (800f770 <xTaskPriorityInherit+0xcc>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	429a      	cmp	r2, r3
 800f714:	d903      	bls.n	800f71e <xTaskPriorityInherit+0x7a>
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f71a:	4a15      	ldr	r2, [pc, #84]	; (800f770 <xTaskPriorityInherit+0xcc>)
 800f71c:	6013      	str	r3, [r2, #0]
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f722:	4613      	mov	r3, r2
 800f724:	009b      	lsls	r3, r3, #2
 800f726:	4413      	add	r3, r2
 800f728:	009b      	lsls	r3, r3, #2
 800f72a:	4a10      	ldr	r2, [pc, #64]	; (800f76c <xTaskPriorityInherit+0xc8>)
 800f72c:	441a      	add	r2, r3
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	3304      	adds	r3, #4
 800f732:	4619      	mov	r1, r3
 800f734:	4610      	mov	r0, r2
 800f736:	f7fd ffaa 	bl	800d68e <vListInsertEnd>
 800f73a:	e004      	b.n	800f746 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f73c:	4b0a      	ldr	r3, [pc, #40]	; (800f768 <xTaskPriorityInherit+0xc4>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f746:	2301      	movs	r3, #1
 800f748:	60fb      	str	r3, [r7, #12]
 800f74a:	e008      	b.n	800f75e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f750:	4b05      	ldr	r3, [pc, #20]	; (800f768 <xTaskPriorityInherit+0xc4>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f756:	429a      	cmp	r2, r3
 800f758:	d201      	bcs.n	800f75e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f75a:	2301      	movs	r3, #1
 800f75c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f75e:	68fb      	ldr	r3, [r7, #12]
	}
 800f760:	4618      	mov	r0, r3
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	200044dc 	.word	0x200044dc
 800f76c:	200044e0 	.word	0x200044e0
 800f770:	200049b8 	.word	0x200049b8

0800f774 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f774:	b580      	push	{r7, lr}
 800f776:	b086      	sub	sp, #24
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f780:	2300      	movs	r3, #0
 800f782:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d056      	beq.n	800f838 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f78a:	4b2e      	ldr	r3, [pc, #184]	; (800f844 <xTaskPriorityDisinherit+0xd0>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	693a      	ldr	r2, [r7, #16]
 800f790:	429a      	cmp	r2, r3
 800f792:	d00a      	beq.n	800f7aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f798:	f383 8811 	msr	BASEPRI, r3
 800f79c:	f3bf 8f6f 	isb	sy
 800f7a0:	f3bf 8f4f 	dsb	sy
 800f7a4:	60fb      	str	r3, [r7, #12]
}
 800f7a6:	bf00      	nop
 800f7a8:	e7fe      	b.n	800f7a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d10a      	bne.n	800f7c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b6:	f383 8811 	msr	BASEPRI, r3
 800f7ba:	f3bf 8f6f 	isb	sy
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	60bb      	str	r3, [r7, #8]
}
 800f7c4:	bf00      	nop
 800f7c6:	e7fe      	b.n	800f7c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7cc:	1e5a      	subs	r2, r3, #1
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d02c      	beq.n	800f838 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d128      	bne.n	800f838 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	3304      	adds	r3, #4
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7fd ffac 	bl	800d748 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f808:	4b0f      	ldr	r3, [pc, #60]	; (800f848 <xTaskPriorityDisinherit+0xd4>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d903      	bls.n	800f818 <xTaskPriorityDisinherit+0xa4>
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f814:	4a0c      	ldr	r2, [pc, #48]	; (800f848 <xTaskPriorityDisinherit+0xd4>)
 800f816:	6013      	str	r3, [r2, #0]
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f81c:	4613      	mov	r3, r2
 800f81e:	009b      	lsls	r3, r3, #2
 800f820:	4413      	add	r3, r2
 800f822:	009b      	lsls	r3, r3, #2
 800f824:	4a09      	ldr	r2, [pc, #36]	; (800f84c <xTaskPriorityDisinherit+0xd8>)
 800f826:	441a      	add	r2, r3
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	3304      	adds	r3, #4
 800f82c:	4619      	mov	r1, r3
 800f82e:	4610      	mov	r0, r2
 800f830:	f7fd ff2d 	bl	800d68e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f834:	2301      	movs	r3, #1
 800f836:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f838:	697b      	ldr	r3, [r7, #20]
	}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3718      	adds	r7, #24
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	200044dc 	.word	0x200044dc
 800f848:	200049b8 	.word	0x200049b8
 800f84c:	200044e0 	.word	0x200044e0

0800f850 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f850:	b580      	push	{r7, lr}
 800f852:	b088      	sub	sp, #32
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f85e:	2301      	movs	r3, #1
 800f860:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d06a      	beq.n	800f93e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f868:	69bb      	ldr	r3, [r7, #24]
 800f86a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d10a      	bne.n	800f886 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f874:	f383 8811 	msr	BASEPRI, r3
 800f878:	f3bf 8f6f 	isb	sy
 800f87c:	f3bf 8f4f 	dsb	sy
 800f880:	60fb      	str	r3, [r7, #12]
}
 800f882:	bf00      	nop
 800f884:	e7fe      	b.n	800f884 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f88a:	683a      	ldr	r2, [r7, #0]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d902      	bls.n	800f896 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	61fb      	str	r3, [r7, #28]
 800f894:	e002      	b.n	800f89c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f89a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a0:	69fa      	ldr	r2, [r7, #28]
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d04b      	beq.n	800f93e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f8a6:	69bb      	ldr	r3, [r7, #24]
 800f8a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8aa:	697a      	ldr	r2, [r7, #20]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d146      	bne.n	800f93e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f8b0:	4b25      	ldr	r3, [pc, #148]	; (800f948 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	69ba      	ldr	r2, [r7, #24]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d10a      	bne.n	800f8d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8be:	f383 8811 	msr	BASEPRI, r3
 800f8c2:	f3bf 8f6f 	isb	sy
 800f8c6:	f3bf 8f4f 	dsb	sy
 800f8ca:	60bb      	str	r3, [r7, #8]
}
 800f8cc:	bf00      	nop
 800f8ce:	e7fe      	b.n	800f8ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f8d0:	69bb      	ldr	r3, [r7, #24]
 800f8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	69fa      	ldr	r2, [r7, #28]
 800f8da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f8dc:	69bb      	ldr	r3, [r7, #24]
 800f8de:	699b      	ldr	r3, [r3, #24]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	db04      	blt.n	800f8ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8ea:	69bb      	ldr	r3, [r7, #24]
 800f8ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f8ee:	69bb      	ldr	r3, [r7, #24]
 800f8f0:	6959      	ldr	r1, [r3, #20]
 800f8f2:	693a      	ldr	r2, [r7, #16]
 800f8f4:	4613      	mov	r3, r2
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	4413      	add	r3, r2
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	4a13      	ldr	r2, [pc, #76]	; (800f94c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f8fe:	4413      	add	r3, r2
 800f900:	4299      	cmp	r1, r3
 800f902:	d11c      	bne.n	800f93e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f904:	69bb      	ldr	r3, [r7, #24]
 800f906:	3304      	adds	r3, #4
 800f908:	4618      	mov	r0, r3
 800f90a:	f7fd ff1d 	bl	800d748 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f90e:	69bb      	ldr	r3, [r7, #24]
 800f910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f912:	4b0f      	ldr	r3, [pc, #60]	; (800f950 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	429a      	cmp	r2, r3
 800f918:	d903      	bls.n	800f922 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f91a:	69bb      	ldr	r3, [r7, #24]
 800f91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f91e:	4a0c      	ldr	r2, [pc, #48]	; (800f950 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f920:	6013      	str	r3, [r2, #0]
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f926:	4613      	mov	r3, r2
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	4413      	add	r3, r2
 800f92c:	009b      	lsls	r3, r3, #2
 800f92e:	4a07      	ldr	r2, [pc, #28]	; (800f94c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f930:	441a      	add	r2, r3
 800f932:	69bb      	ldr	r3, [r7, #24]
 800f934:	3304      	adds	r3, #4
 800f936:	4619      	mov	r1, r3
 800f938:	4610      	mov	r0, r2
 800f93a:	f7fd fea8 	bl	800d68e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f93e:	bf00      	nop
 800f940:	3720      	adds	r7, #32
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	200044dc 	.word	0x200044dc
 800f94c:	200044e0 	.word	0x200044e0
 800f950:	200049b8 	.word	0x200049b8

0800f954 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800f95a:	4b09      	ldr	r3, [pc, #36]	; (800f980 <uxTaskResetEventItemValue+0x2c>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	699b      	ldr	r3, [r3, #24]
 800f960:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f962:	4b07      	ldr	r3, [pc, #28]	; (800f980 <uxTaskResetEventItemValue+0x2c>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f968:	4b05      	ldr	r3, [pc, #20]	; (800f980 <uxTaskResetEventItemValue+0x2c>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800f970:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800f972:	687b      	ldr	r3, [r7, #4]
}
 800f974:	4618      	mov	r0, r3
 800f976:	370c      	adds	r7, #12
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr
 800f980:	200044dc 	.word	0x200044dc

0800f984 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f984:	b480      	push	{r7}
 800f986:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f988:	4b07      	ldr	r3, [pc, #28]	; (800f9a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d004      	beq.n	800f99a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f990:	4b05      	ldr	r3, [pc, #20]	; (800f9a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f996:	3201      	adds	r2, #1
 800f998:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f99a:	4b03      	ldr	r3, [pc, #12]	; (800f9a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f99c:	681b      	ldr	r3, [r3, #0]
	}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr
 800f9a8:	200044dc 	.word	0x200044dc

0800f9ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f9b6:	4b21      	ldr	r3, [pc, #132]	; (800fa3c <prvAddCurrentTaskToDelayedList+0x90>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f9bc:	4b20      	ldr	r3, [pc, #128]	; (800fa40 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	3304      	adds	r3, #4
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fd fec0 	bl	800d748 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9ce:	d10a      	bne.n	800f9e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d007      	beq.n	800f9e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9d6:	4b1a      	ldr	r3, [pc, #104]	; (800fa40 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	3304      	adds	r3, #4
 800f9dc:	4619      	mov	r1, r3
 800f9de:	4819      	ldr	r0, [pc, #100]	; (800fa44 <prvAddCurrentTaskToDelayedList+0x98>)
 800f9e0:	f7fd fe55 	bl	800d68e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f9e4:	e026      	b.n	800fa34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f9e6:	68fa      	ldr	r2, [r7, #12]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	4413      	add	r3, r2
 800f9ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f9ee:	4b14      	ldr	r3, [pc, #80]	; (800fa40 <prvAddCurrentTaskToDelayedList+0x94>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	68ba      	ldr	r2, [r7, #8]
 800f9f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f9f6:	68ba      	ldr	r2, [r7, #8]
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d209      	bcs.n	800fa12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f9fe:	4b12      	ldr	r3, [pc, #72]	; (800fa48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fa00:	681a      	ldr	r2, [r3, #0]
 800fa02:	4b0f      	ldr	r3, [pc, #60]	; (800fa40 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	3304      	adds	r3, #4
 800fa08:	4619      	mov	r1, r3
 800fa0a:	4610      	mov	r0, r2
 800fa0c:	f7fd fe63 	bl	800d6d6 <vListInsert>
}
 800fa10:	e010      	b.n	800fa34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fa12:	4b0e      	ldr	r3, [pc, #56]	; (800fa4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800fa14:	681a      	ldr	r2, [r3, #0]
 800fa16:	4b0a      	ldr	r3, [pc, #40]	; (800fa40 <prvAddCurrentTaskToDelayedList+0x94>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	3304      	adds	r3, #4
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	4610      	mov	r0, r2
 800fa20:	f7fd fe59 	bl	800d6d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fa24:	4b0a      	ldr	r3, [pc, #40]	; (800fa50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	68ba      	ldr	r2, [r7, #8]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d202      	bcs.n	800fa34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fa2e:	4a08      	ldr	r2, [pc, #32]	; (800fa50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	6013      	str	r3, [r2, #0]
}
 800fa34:	bf00      	nop
 800fa36:	3710      	adds	r7, #16
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	200049b4 	.word	0x200049b4
 800fa40:	200044dc 	.word	0x200044dc
 800fa44:	2000499c 	.word	0x2000499c
 800fa48:	2000496c 	.word	0x2000496c
 800fa4c:	20004968 	.word	0x20004968
 800fa50:	200049d0 	.word	0x200049d0

0800fa54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b08a      	sub	sp, #40	; 0x28
 800fa58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fa5e:	f000 fb07 	bl	8010070 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fa62:	4b1c      	ldr	r3, [pc, #112]	; (800fad4 <xTimerCreateTimerTask+0x80>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d021      	beq.n	800faae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fa72:	1d3a      	adds	r2, r7, #4
 800fa74:	f107 0108 	add.w	r1, r7, #8
 800fa78:	f107 030c 	add.w	r3, r7, #12
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7fd fbd1 	bl	800d224 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fa82:	6879      	ldr	r1, [r7, #4]
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	68fa      	ldr	r2, [r7, #12]
 800fa88:	9202      	str	r2, [sp, #8]
 800fa8a:	9301      	str	r3, [sp, #4]
 800fa8c:	2302      	movs	r3, #2
 800fa8e:	9300      	str	r3, [sp, #0]
 800fa90:	2300      	movs	r3, #0
 800fa92:	460a      	mov	r2, r1
 800fa94:	4910      	ldr	r1, [pc, #64]	; (800fad8 <xTimerCreateTimerTask+0x84>)
 800fa96:	4811      	ldr	r0, [pc, #68]	; (800fadc <xTimerCreateTimerTask+0x88>)
 800fa98:	f7fe fe8e 	bl	800e7b8 <xTaskCreateStatic>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	4a10      	ldr	r2, [pc, #64]	; (800fae0 <xTimerCreateTimerTask+0x8c>)
 800faa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800faa2:	4b0f      	ldr	r3, [pc, #60]	; (800fae0 <xTimerCreateTimerTask+0x8c>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d001      	beq.n	800faae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800faaa:	2301      	movs	r3, #1
 800faac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d10a      	bne.n	800faca <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab8:	f383 8811 	msr	BASEPRI, r3
 800fabc:	f3bf 8f6f 	isb	sy
 800fac0:	f3bf 8f4f 	dsb	sy
 800fac4:	613b      	str	r3, [r7, #16]
}
 800fac6:	bf00      	nop
 800fac8:	e7fe      	b.n	800fac8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800faca:	697b      	ldr	r3, [r7, #20]
}
 800facc:	4618      	mov	r0, r3
 800face:	3718      	adds	r7, #24
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	20004a0c 	.word	0x20004a0c
 800fad8:	0801ec38 	.word	0x0801ec38
 800fadc:	0800fc19 	.word	0x0800fc19
 800fae0:	20004a10 	.word	0x20004a10

0800fae4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b08a      	sub	sp, #40	; 0x28
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	607a      	str	r2, [r7, #4]
 800faf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800faf2:	2300      	movs	r3, #0
 800faf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d10a      	bne.n	800fb12 <xTimerGenericCommand+0x2e>
	__asm volatile
 800fafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb00:	f383 8811 	msr	BASEPRI, r3
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	f3bf 8f4f 	dsb	sy
 800fb0c:	623b      	str	r3, [r7, #32]
}
 800fb0e:	bf00      	nop
 800fb10:	e7fe      	b.n	800fb10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fb12:	4b1a      	ldr	r3, [pc, #104]	; (800fb7c <xTimerGenericCommand+0x98>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d02a      	beq.n	800fb70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	2b05      	cmp	r3, #5
 800fb2a:	dc18      	bgt.n	800fb5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fb2c:	f7ff fd9c 	bl	800f668 <xTaskGetSchedulerState>
 800fb30:	4603      	mov	r3, r0
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	d109      	bne.n	800fb4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fb36:	4b11      	ldr	r3, [pc, #68]	; (800fb7c <xTimerGenericCommand+0x98>)
 800fb38:	6818      	ldr	r0, [r3, #0]
 800fb3a:	f107 0110 	add.w	r1, r7, #16
 800fb3e:	2300      	movs	r3, #0
 800fb40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb42:	f7fd ffd3 	bl	800daec <xQueueGenericSend>
 800fb46:	6278      	str	r0, [r7, #36]	; 0x24
 800fb48:	e012      	b.n	800fb70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fb4a:	4b0c      	ldr	r3, [pc, #48]	; (800fb7c <xTimerGenericCommand+0x98>)
 800fb4c:	6818      	ldr	r0, [r3, #0]
 800fb4e:	f107 0110 	add.w	r1, r7, #16
 800fb52:	2300      	movs	r3, #0
 800fb54:	2200      	movs	r2, #0
 800fb56:	f7fd ffc9 	bl	800daec <xQueueGenericSend>
 800fb5a:	6278      	str	r0, [r7, #36]	; 0x24
 800fb5c:	e008      	b.n	800fb70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fb5e:	4b07      	ldr	r3, [pc, #28]	; (800fb7c <xTimerGenericCommand+0x98>)
 800fb60:	6818      	ldr	r0, [r3, #0]
 800fb62:	f107 0110 	add.w	r1, r7, #16
 800fb66:	2300      	movs	r3, #0
 800fb68:	683a      	ldr	r2, [r7, #0]
 800fb6a:	f7fe f8bd 	bl	800dce8 <xQueueGenericSendFromISR>
 800fb6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3728      	adds	r7, #40	; 0x28
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	20004a0c 	.word	0x20004a0c

0800fb80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b088      	sub	sp, #32
 800fb84:	af02      	add	r7, sp, #8
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb8a:	4b22      	ldr	r3, [pc, #136]	; (800fc14 <prvProcessExpiredTimer+0x94>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	68db      	ldr	r3, [r3, #12]
 800fb92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	3304      	adds	r3, #4
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7fd fdd5 	bl	800d748 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fba4:	f003 0304 	and.w	r3, r3, #4
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d022      	beq.n	800fbf2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	699a      	ldr	r2, [r3, #24]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	18d1      	adds	r1, r2, r3
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	683a      	ldr	r2, [r7, #0]
 800fbb8:	6978      	ldr	r0, [r7, #20]
 800fbba:	f000 f8d1 	bl	800fd60 <prvInsertTimerInActiveList>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d01f      	beq.n	800fc04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	9300      	str	r3, [sp, #0]
 800fbc8:	2300      	movs	r3, #0
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	2100      	movs	r1, #0
 800fbce:	6978      	ldr	r0, [r7, #20]
 800fbd0:	f7ff ff88 	bl	800fae4 <xTimerGenericCommand>
 800fbd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d113      	bne.n	800fc04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe0:	f383 8811 	msr	BASEPRI, r3
 800fbe4:	f3bf 8f6f 	isb	sy
 800fbe8:	f3bf 8f4f 	dsb	sy
 800fbec:	60fb      	str	r3, [r7, #12]
}
 800fbee:	bf00      	nop
 800fbf0:	e7fe      	b.n	800fbf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbf8:	f023 0301 	bic.w	r3, r3, #1
 800fbfc:	b2da      	uxtb	r2, r3
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	6a1b      	ldr	r3, [r3, #32]
 800fc08:	6978      	ldr	r0, [r7, #20]
 800fc0a:	4798      	blx	r3
}
 800fc0c:	bf00      	nop
 800fc0e:	3718      	adds	r7, #24
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	20004a04 	.word	0x20004a04

0800fc18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b084      	sub	sp, #16
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc20:	f107 0308 	add.w	r3, r7, #8
 800fc24:	4618      	mov	r0, r3
 800fc26:	f000 f857 	bl	800fcd8 <prvGetNextExpireTime>
 800fc2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	4619      	mov	r1, r3
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f000 f803 	bl	800fc3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fc36:	f000 f8d5 	bl	800fde4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc3a:	e7f1      	b.n	800fc20 <prvTimerTask+0x8>

0800fc3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fc46:	f7ff f885 	bl	800ed54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc4a:	f107 0308 	add.w	r3, r7, #8
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f000 f866 	bl	800fd20 <prvSampleTimeNow>
 800fc54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d130      	bne.n	800fcbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d10a      	bne.n	800fc78 <prvProcessTimerOrBlockTask+0x3c>
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d806      	bhi.n	800fc78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fc6a:	f7ff f881 	bl	800ed70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fc6e:	68f9      	ldr	r1, [r7, #12]
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7ff ff85 	bl	800fb80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fc76:	e024      	b.n	800fcc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d008      	beq.n	800fc90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fc7e:	4b13      	ldr	r3, [pc, #76]	; (800fccc <prvProcessTimerOrBlockTask+0x90>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d101      	bne.n	800fc8c <prvProcessTimerOrBlockTask+0x50>
 800fc88:	2301      	movs	r3, #1
 800fc8a:	e000      	b.n	800fc8e <prvProcessTimerOrBlockTask+0x52>
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fc90:	4b0f      	ldr	r3, [pc, #60]	; (800fcd0 <prvProcessTimerOrBlockTask+0x94>)
 800fc92:	6818      	ldr	r0, [r3, #0]
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	1ad3      	subs	r3, r2, r3
 800fc9a:	683a      	ldr	r2, [r7, #0]
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	f7fe fd57 	bl	800e750 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fca2:	f7ff f865 	bl	800ed70 <xTaskResumeAll>
 800fca6:	4603      	mov	r3, r0
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d10a      	bne.n	800fcc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fcac:	4b09      	ldr	r3, [pc, #36]	; (800fcd4 <prvProcessTimerOrBlockTask+0x98>)
 800fcae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcb2:	601a      	str	r2, [r3, #0]
 800fcb4:	f3bf 8f4f 	dsb	sy
 800fcb8:	f3bf 8f6f 	isb	sy
}
 800fcbc:	e001      	b.n	800fcc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fcbe:	f7ff f857 	bl	800ed70 <xTaskResumeAll>
}
 800fcc2:	bf00      	nop
 800fcc4:	3710      	adds	r7, #16
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	bd80      	pop	{r7, pc}
 800fcca:	bf00      	nop
 800fccc:	20004a08 	.word	0x20004a08
 800fcd0:	20004a0c 	.word	0x20004a0c
 800fcd4:	e000ed04 	.word	0xe000ed04

0800fcd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b085      	sub	sp, #20
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fce0:	4b0e      	ldr	r3, [pc, #56]	; (800fd1c <prvGetNextExpireTime+0x44>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d101      	bne.n	800fcee <prvGetNextExpireTime+0x16>
 800fcea:	2201      	movs	r2, #1
 800fcec:	e000      	b.n	800fcf0 <prvGetNextExpireTime+0x18>
 800fcee:	2200      	movs	r2, #0
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d105      	bne.n	800fd08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fcfc:	4b07      	ldr	r3, [pc, #28]	; (800fd1c <prvGetNextExpireTime+0x44>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	60fb      	str	r3, [r7, #12]
 800fd06:	e001      	b.n	800fd0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3714      	adds	r7, #20
 800fd12:	46bd      	mov	sp, r7
 800fd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd18:	4770      	bx	lr
 800fd1a:	bf00      	nop
 800fd1c:	20004a04 	.word	0x20004a04

0800fd20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fd28:	f7ff f8c0 	bl	800eeac <xTaskGetTickCount>
 800fd2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fd2e:	4b0b      	ldr	r3, [pc, #44]	; (800fd5c <prvSampleTimeNow+0x3c>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	68fa      	ldr	r2, [r7, #12]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d205      	bcs.n	800fd44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fd38:	f000 f936 	bl	800ffa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2201      	movs	r2, #1
 800fd40:	601a      	str	r2, [r3, #0]
 800fd42:	e002      	b.n	800fd4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2200      	movs	r2, #0
 800fd48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fd4a:	4a04      	ldr	r2, [pc, #16]	; (800fd5c <prvSampleTimeNow+0x3c>)
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fd50:	68fb      	ldr	r3, [r7, #12]
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	20004a14 	.word	0x20004a14

0800fd60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b086      	sub	sp, #24
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	60f8      	str	r0, [r7, #12]
 800fd68:	60b9      	str	r1, [r7, #8]
 800fd6a:	607a      	str	r2, [r7, #4]
 800fd6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	68ba      	ldr	r2, [r7, #8]
 800fd76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	68fa      	ldr	r2, [r7, #12]
 800fd7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fd7e:	68ba      	ldr	r2, [r7, #8]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d812      	bhi.n	800fdac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd86:	687a      	ldr	r2, [r7, #4]
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	1ad2      	subs	r2, r2, r3
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	699b      	ldr	r3, [r3, #24]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d302      	bcc.n	800fd9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fd94:	2301      	movs	r3, #1
 800fd96:	617b      	str	r3, [r7, #20]
 800fd98:	e01b      	b.n	800fdd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fd9a:	4b10      	ldr	r3, [pc, #64]	; (800fddc <prvInsertTimerInActiveList+0x7c>)
 800fd9c:	681a      	ldr	r2, [r3, #0]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	3304      	adds	r3, #4
 800fda2:	4619      	mov	r1, r3
 800fda4:	4610      	mov	r0, r2
 800fda6:	f7fd fc96 	bl	800d6d6 <vListInsert>
 800fdaa:	e012      	b.n	800fdd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fdac:	687a      	ldr	r2, [r7, #4]
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d206      	bcs.n	800fdc2 <prvInsertTimerInActiveList+0x62>
 800fdb4:	68ba      	ldr	r2, [r7, #8]
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d302      	bcc.n	800fdc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	617b      	str	r3, [r7, #20]
 800fdc0:	e007      	b.n	800fdd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fdc2:	4b07      	ldr	r3, [pc, #28]	; (800fde0 <prvInsertTimerInActiveList+0x80>)
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	3304      	adds	r3, #4
 800fdca:	4619      	mov	r1, r3
 800fdcc:	4610      	mov	r0, r2
 800fdce:	f7fd fc82 	bl	800d6d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fdd2:	697b      	ldr	r3, [r7, #20]
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3718      	adds	r7, #24
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	20004a08 	.word	0x20004a08
 800fde0:	20004a04 	.word	0x20004a04

0800fde4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08e      	sub	sp, #56	; 0x38
 800fde8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fdea:	e0ca      	b.n	800ff82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	da18      	bge.n	800fe24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fdf2:	1d3b      	adds	r3, r7, #4
 800fdf4:	3304      	adds	r3, #4
 800fdf6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d10a      	bne.n	800fe14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe02:	f383 8811 	msr	BASEPRI, r3
 800fe06:	f3bf 8f6f 	isb	sy
 800fe0a:	f3bf 8f4f 	dsb	sy
 800fe0e:	61fb      	str	r3, [r7, #28]
}
 800fe10:	bf00      	nop
 800fe12:	e7fe      	b.n	800fe12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fe14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe1a:	6850      	ldr	r0, [r2, #4]
 800fe1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe1e:	6892      	ldr	r2, [r2, #8]
 800fe20:	4611      	mov	r1, r2
 800fe22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f2c0 80ab 	blt.w	800ff82 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fe30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe32:	695b      	ldr	r3, [r3, #20]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d004      	beq.n	800fe42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3a:	3304      	adds	r3, #4
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7fd fc83 	bl	800d748 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe42:	463b      	mov	r3, r7
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7ff ff6b 	bl	800fd20 <prvSampleTimeNow>
 800fe4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2b09      	cmp	r3, #9
 800fe50:	f200 8096 	bhi.w	800ff80 <prvProcessReceivedCommands+0x19c>
 800fe54:	a201      	add	r2, pc, #4	; (adr r2, 800fe5c <prvProcessReceivedCommands+0x78>)
 800fe56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe5a:	bf00      	nop
 800fe5c:	0800fe85 	.word	0x0800fe85
 800fe60:	0800fe85 	.word	0x0800fe85
 800fe64:	0800fe85 	.word	0x0800fe85
 800fe68:	0800fef9 	.word	0x0800fef9
 800fe6c:	0800ff0d 	.word	0x0800ff0d
 800fe70:	0800ff57 	.word	0x0800ff57
 800fe74:	0800fe85 	.word	0x0800fe85
 800fe78:	0800fe85 	.word	0x0800fe85
 800fe7c:	0800fef9 	.word	0x0800fef9
 800fe80:	0800ff0d 	.word	0x0800ff0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe8a:	f043 0301 	orr.w	r3, r3, #1
 800fe8e:	b2da      	uxtb	r2, r3
 800fe90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fe96:	68ba      	ldr	r2, [r7, #8]
 800fe98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9a:	699b      	ldr	r3, [r3, #24]
 800fe9c:	18d1      	adds	r1, r2, r3
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fea4:	f7ff ff5c 	bl	800fd60 <prvInsertTimerInActiveList>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d069      	beq.n	800ff82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800feae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb0:	6a1b      	ldr	r3, [r3, #32]
 800feb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800feb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800feb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800febc:	f003 0304 	and.w	r3, r3, #4
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d05e      	beq.n	800ff82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fec4:	68ba      	ldr	r2, [r7, #8]
 800fec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec8:	699b      	ldr	r3, [r3, #24]
 800feca:	441a      	add	r2, r3
 800fecc:	2300      	movs	r3, #0
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	2300      	movs	r3, #0
 800fed2:	2100      	movs	r1, #0
 800fed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fed6:	f7ff fe05 	bl	800fae4 <xTimerGenericCommand>
 800feda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fedc:	6a3b      	ldr	r3, [r7, #32]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d14f      	bne.n	800ff82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee6:	f383 8811 	msr	BASEPRI, r3
 800feea:	f3bf 8f6f 	isb	sy
 800feee:	f3bf 8f4f 	dsb	sy
 800fef2:	61bb      	str	r3, [r7, #24]
}
 800fef4:	bf00      	nop
 800fef6:	e7fe      	b.n	800fef6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fefe:	f023 0301 	bic.w	r3, r3, #1
 800ff02:	b2da      	uxtb	r2, r3
 800ff04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ff0a:	e03a      	b.n	800ff82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ff0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff12:	f043 0301 	orr.w	r3, r3, #1
 800ff16:	b2da      	uxtb	r2, r3
 800ff18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ff1e:	68ba      	ldr	r2, [r7, #8]
 800ff20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ff24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff26:	699b      	ldr	r3, [r3, #24]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d10a      	bne.n	800ff42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ff2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff30:	f383 8811 	msr	BASEPRI, r3
 800ff34:	f3bf 8f6f 	isb	sy
 800ff38:	f3bf 8f4f 	dsb	sy
 800ff3c:	617b      	str	r3, [r7, #20]
}
 800ff3e:	bf00      	nop
 800ff40:	e7fe      	b.n	800ff40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ff42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff44:	699a      	ldr	r2, [r3, #24]
 800ff46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff48:	18d1      	adds	r1, r2, r3
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff50:	f7ff ff06 	bl	800fd60 <prvInsertTimerInActiveList>
					break;
 800ff54:	e015      	b.n	800ff82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ff56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff5c:	f003 0302 	and.w	r3, r3, #2
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d103      	bne.n	800ff6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ff64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff66:	f000 fbfb 	bl	8010760 <vPortFree>
 800ff6a:	e00a      	b.n	800ff82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff72:	f023 0301 	bic.w	r3, r3, #1
 800ff76:	b2da      	uxtb	r2, r3
 800ff78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ff7e:	e000      	b.n	800ff82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ff80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff82:	4b08      	ldr	r3, [pc, #32]	; (800ffa4 <prvProcessReceivedCommands+0x1c0>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	1d39      	adds	r1, r7, #4
 800ff88:	2200      	movs	r2, #0
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fd ffd4 	bl	800df38 <xQueueReceive>
 800ff90:	4603      	mov	r3, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	f47f af2a 	bne.w	800fdec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ff98:	bf00      	nop
 800ff9a:	bf00      	nop
 800ff9c:	3730      	adds	r7, #48	; 0x30
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20004a0c 	.word	0x20004a0c

0800ffa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b088      	sub	sp, #32
 800ffac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ffae:	e048      	b.n	8010042 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ffb0:	4b2d      	ldr	r3, [pc, #180]	; (8010068 <prvSwitchTimerLists+0xc0>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	68db      	ldr	r3, [r3, #12]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffba:	4b2b      	ldr	r3, [pc, #172]	; (8010068 <prvSwitchTimerLists+0xc0>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	68db      	ldr	r3, [r3, #12]
 800ffc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	3304      	adds	r3, #4
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fd fbbd 	bl	800d748 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	6a1b      	ldr	r3, [r3, #32]
 800ffd2:	68f8      	ldr	r0, [r7, #12]
 800ffd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffdc:	f003 0304 	and.w	r3, r3, #4
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d02e      	beq.n	8010042 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	699b      	ldr	r3, [r3, #24]
 800ffe8:	693a      	ldr	r2, [r7, #16]
 800ffea:	4413      	add	r3, r2
 800ffec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ffee:	68ba      	ldr	r2, [r7, #8]
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d90e      	bls.n	8010014 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	68ba      	ldr	r2, [r7, #8]
 800fffa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	68fa      	ldr	r2, [r7, #12]
 8010000:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010002:	4b19      	ldr	r3, [pc, #100]	; (8010068 <prvSwitchTimerLists+0xc0>)
 8010004:	681a      	ldr	r2, [r3, #0]
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	3304      	adds	r3, #4
 801000a:	4619      	mov	r1, r3
 801000c:	4610      	mov	r0, r2
 801000e:	f7fd fb62 	bl	800d6d6 <vListInsert>
 8010012:	e016      	b.n	8010042 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010014:	2300      	movs	r3, #0
 8010016:	9300      	str	r3, [sp, #0]
 8010018:	2300      	movs	r3, #0
 801001a:	693a      	ldr	r2, [r7, #16]
 801001c:	2100      	movs	r1, #0
 801001e:	68f8      	ldr	r0, [r7, #12]
 8010020:	f7ff fd60 	bl	800fae4 <xTimerGenericCommand>
 8010024:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d10a      	bne.n	8010042 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801002c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010030:	f383 8811 	msr	BASEPRI, r3
 8010034:	f3bf 8f6f 	isb	sy
 8010038:	f3bf 8f4f 	dsb	sy
 801003c:	603b      	str	r3, [r7, #0]
}
 801003e:	bf00      	nop
 8010040:	e7fe      	b.n	8010040 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010042:	4b09      	ldr	r3, [pc, #36]	; (8010068 <prvSwitchTimerLists+0xc0>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d1b1      	bne.n	800ffb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801004c:	4b06      	ldr	r3, [pc, #24]	; (8010068 <prvSwitchTimerLists+0xc0>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010052:	4b06      	ldr	r3, [pc, #24]	; (801006c <prvSwitchTimerLists+0xc4>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a04      	ldr	r2, [pc, #16]	; (8010068 <prvSwitchTimerLists+0xc0>)
 8010058:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801005a:	4a04      	ldr	r2, [pc, #16]	; (801006c <prvSwitchTimerLists+0xc4>)
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	6013      	str	r3, [r2, #0]
}
 8010060:	bf00      	nop
 8010062:	3718      	adds	r7, #24
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}
 8010068:	20004a04 	.word	0x20004a04
 801006c:	20004a08 	.word	0x20004a08

08010070 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010076:	f000 f985 	bl	8010384 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801007a:	4b15      	ldr	r3, [pc, #84]	; (80100d0 <prvCheckForValidListAndQueue+0x60>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d120      	bne.n	80100c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010082:	4814      	ldr	r0, [pc, #80]	; (80100d4 <prvCheckForValidListAndQueue+0x64>)
 8010084:	f7fd fad6 	bl	800d634 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010088:	4813      	ldr	r0, [pc, #76]	; (80100d8 <prvCheckForValidListAndQueue+0x68>)
 801008a:	f7fd fad3 	bl	800d634 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801008e:	4b13      	ldr	r3, [pc, #76]	; (80100dc <prvCheckForValidListAndQueue+0x6c>)
 8010090:	4a10      	ldr	r2, [pc, #64]	; (80100d4 <prvCheckForValidListAndQueue+0x64>)
 8010092:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010094:	4b12      	ldr	r3, [pc, #72]	; (80100e0 <prvCheckForValidListAndQueue+0x70>)
 8010096:	4a10      	ldr	r2, [pc, #64]	; (80100d8 <prvCheckForValidListAndQueue+0x68>)
 8010098:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801009a:	2300      	movs	r3, #0
 801009c:	9300      	str	r3, [sp, #0]
 801009e:	4b11      	ldr	r3, [pc, #68]	; (80100e4 <prvCheckForValidListAndQueue+0x74>)
 80100a0:	4a11      	ldr	r2, [pc, #68]	; (80100e8 <prvCheckForValidListAndQueue+0x78>)
 80100a2:	2110      	movs	r1, #16
 80100a4:	200a      	movs	r0, #10
 80100a6:	f7fd fbe1 	bl	800d86c <xQueueGenericCreateStatic>
 80100aa:	4603      	mov	r3, r0
 80100ac:	4a08      	ldr	r2, [pc, #32]	; (80100d0 <prvCheckForValidListAndQueue+0x60>)
 80100ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80100b0:	4b07      	ldr	r3, [pc, #28]	; (80100d0 <prvCheckForValidListAndQueue+0x60>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d005      	beq.n	80100c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80100b8:	4b05      	ldr	r3, [pc, #20]	; (80100d0 <prvCheckForValidListAndQueue+0x60>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	490b      	ldr	r1, [pc, #44]	; (80100ec <prvCheckForValidListAndQueue+0x7c>)
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fe faf2 	bl	800e6a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80100c4:	f000 f98e 	bl	80103e4 <vPortExitCritical>
}
 80100c8:	bf00      	nop
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	20004a0c 	.word	0x20004a0c
 80100d4:	200049dc 	.word	0x200049dc
 80100d8:	200049f0 	.word	0x200049f0
 80100dc:	20004a04 	.word	0x20004a04
 80100e0:	20004a08 	.word	0x20004a08
 80100e4:	20004ab8 	.word	0x20004ab8
 80100e8:	20004a18 	.word	0x20004a18
 80100ec:	0801ec40 	.word	0x0801ec40

080100f0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b08a      	sub	sp, #40	; 0x28
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]
 80100fc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80100fe:	f06f 0301 	mvn.w	r3, #1
 8010102:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010110:	4b06      	ldr	r3, [pc, #24]	; (801012c <xTimerPendFunctionCallFromISR+0x3c>)
 8010112:	6818      	ldr	r0, [r3, #0]
 8010114:	f107 0114 	add.w	r1, r7, #20
 8010118:	2300      	movs	r3, #0
 801011a:	683a      	ldr	r2, [r7, #0]
 801011c:	f7fd fde4 	bl	800dce8 <xQueueGenericSendFromISR>
 8010120:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010124:	4618      	mov	r0, r3
 8010126:	3728      	adds	r7, #40	; 0x28
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}
 801012c:	20004a0c 	.word	0x20004a0c

08010130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010130:	b480      	push	{r7}
 8010132:	b085      	sub	sp, #20
 8010134:	af00      	add	r7, sp, #0
 8010136:	60f8      	str	r0, [r7, #12]
 8010138:	60b9      	str	r1, [r7, #8]
 801013a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	3b04      	subs	r3, #4
 8010140:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	3b04      	subs	r3, #4
 801014e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	f023 0201 	bic.w	r2, r3, #1
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	3b04      	subs	r3, #4
 801015e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010160:	4a0c      	ldr	r2, [pc, #48]	; (8010194 <pxPortInitialiseStack+0x64>)
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	3b14      	subs	r3, #20
 801016a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	3b04      	subs	r3, #4
 8010176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f06f 0202 	mvn.w	r2, #2
 801017e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	3b20      	subs	r3, #32
 8010184:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010186:	68fb      	ldr	r3, [r7, #12]
}
 8010188:	4618      	mov	r0, r3
 801018a:	3714      	adds	r7, #20
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr
 8010194:	08010199 	.word	0x08010199

08010198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010198:	b480      	push	{r7}
 801019a:	b085      	sub	sp, #20
 801019c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801019e:	2300      	movs	r3, #0
 80101a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80101a2:	4b12      	ldr	r3, [pc, #72]	; (80101ec <prvTaskExitError+0x54>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101aa:	d00a      	beq.n	80101c2 <prvTaskExitError+0x2a>
	__asm volatile
 80101ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b0:	f383 8811 	msr	BASEPRI, r3
 80101b4:	f3bf 8f6f 	isb	sy
 80101b8:	f3bf 8f4f 	dsb	sy
 80101bc:	60fb      	str	r3, [r7, #12]
}
 80101be:	bf00      	nop
 80101c0:	e7fe      	b.n	80101c0 <prvTaskExitError+0x28>
	__asm volatile
 80101c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c6:	f383 8811 	msr	BASEPRI, r3
 80101ca:	f3bf 8f6f 	isb	sy
 80101ce:	f3bf 8f4f 	dsb	sy
 80101d2:	60bb      	str	r3, [r7, #8]
}
 80101d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80101d6:	bf00      	nop
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d0fc      	beq.n	80101d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80101de:	bf00      	nop
 80101e0:	bf00      	nop
 80101e2:	3714      	adds	r7, #20
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr
 80101ec:	20000028 	.word	0x20000028

080101f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80101f0:	4b07      	ldr	r3, [pc, #28]	; (8010210 <pxCurrentTCBConst2>)
 80101f2:	6819      	ldr	r1, [r3, #0]
 80101f4:	6808      	ldr	r0, [r1, #0]
 80101f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101fa:	f380 8809 	msr	PSP, r0
 80101fe:	f3bf 8f6f 	isb	sy
 8010202:	f04f 0000 	mov.w	r0, #0
 8010206:	f380 8811 	msr	BASEPRI, r0
 801020a:	4770      	bx	lr
 801020c:	f3af 8000 	nop.w

08010210 <pxCurrentTCBConst2>:
 8010210:	200044dc 	.word	0x200044dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010214:	bf00      	nop
 8010216:	bf00      	nop

08010218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010218:	4808      	ldr	r0, [pc, #32]	; (801023c <prvPortStartFirstTask+0x24>)
 801021a:	6800      	ldr	r0, [r0, #0]
 801021c:	6800      	ldr	r0, [r0, #0]
 801021e:	f380 8808 	msr	MSP, r0
 8010222:	f04f 0000 	mov.w	r0, #0
 8010226:	f380 8814 	msr	CONTROL, r0
 801022a:	b662      	cpsie	i
 801022c:	b661      	cpsie	f
 801022e:	f3bf 8f4f 	dsb	sy
 8010232:	f3bf 8f6f 	isb	sy
 8010236:	df00      	svc	0
 8010238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801023a:	bf00      	nop
 801023c:	e000ed08 	.word	0xe000ed08

08010240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b086      	sub	sp, #24
 8010244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010246:	4b46      	ldr	r3, [pc, #280]	; (8010360 <xPortStartScheduler+0x120>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	4a46      	ldr	r2, [pc, #280]	; (8010364 <xPortStartScheduler+0x124>)
 801024c:	4293      	cmp	r3, r2
 801024e:	d10a      	bne.n	8010266 <xPortStartScheduler+0x26>
	__asm volatile
 8010250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010254:	f383 8811 	msr	BASEPRI, r3
 8010258:	f3bf 8f6f 	isb	sy
 801025c:	f3bf 8f4f 	dsb	sy
 8010260:	613b      	str	r3, [r7, #16]
}
 8010262:	bf00      	nop
 8010264:	e7fe      	b.n	8010264 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010266:	4b3e      	ldr	r3, [pc, #248]	; (8010360 <xPortStartScheduler+0x120>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4a3f      	ldr	r2, [pc, #252]	; (8010368 <xPortStartScheduler+0x128>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d10a      	bne.n	8010286 <xPortStartScheduler+0x46>
	__asm volatile
 8010270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	60fb      	str	r3, [r7, #12]
}
 8010282:	bf00      	nop
 8010284:	e7fe      	b.n	8010284 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010286:	4b39      	ldr	r3, [pc, #228]	; (801036c <xPortStartScheduler+0x12c>)
 8010288:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	b2db      	uxtb	r3, r3
 8010290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	22ff      	movs	r2, #255	; 0xff
 8010296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	b2db      	uxtb	r3, r3
 801029e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80102a0:	78fb      	ldrb	r3, [r7, #3]
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80102a8:	b2da      	uxtb	r2, r3
 80102aa:	4b31      	ldr	r3, [pc, #196]	; (8010370 <xPortStartScheduler+0x130>)
 80102ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80102ae:	4b31      	ldr	r3, [pc, #196]	; (8010374 <xPortStartScheduler+0x134>)
 80102b0:	2207      	movs	r2, #7
 80102b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80102b4:	e009      	b.n	80102ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80102b6:	4b2f      	ldr	r3, [pc, #188]	; (8010374 <xPortStartScheduler+0x134>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	3b01      	subs	r3, #1
 80102bc:	4a2d      	ldr	r2, [pc, #180]	; (8010374 <xPortStartScheduler+0x134>)
 80102be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80102c0:	78fb      	ldrb	r3, [r7, #3]
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	005b      	lsls	r3, r3, #1
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80102ca:	78fb      	ldrb	r3, [r7, #3]
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102d2:	2b80      	cmp	r3, #128	; 0x80
 80102d4:	d0ef      	beq.n	80102b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80102d6:	4b27      	ldr	r3, [pc, #156]	; (8010374 <xPortStartScheduler+0x134>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f1c3 0307 	rsb	r3, r3, #7
 80102de:	2b04      	cmp	r3, #4
 80102e0:	d00a      	beq.n	80102f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80102e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e6:	f383 8811 	msr	BASEPRI, r3
 80102ea:	f3bf 8f6f 	isb	sy
 80102ee:	f3bf 8f4f 	dsb	sy
 80102f2:	60bb      	str	r3, [r7, #8]
}
 80102f4:	bf00      	nop
 80102f6:	e7fe      	b.n	80102f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80102f8:	4b1e      	ldr	r3, [pc, #120]	; (8010374 <xPortStartScheduler+0x134>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	021b      	lsls	r3, r3, #8
 80102fe:	4a1d      	ldr	r2, [pc, #116]	; (8010374 <xPortStartScheduler+0x134>)
 8010300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010302:	4b1c      	ldr	r3, [pc, #112]	; (8010374 <xPortStartScheduler+0x134>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801030a:	4a1a      	ldr	r2, [pc, #104]	; (8010374 <xPortStartScheduler+0x134>)
 801030c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	b2da      	uxtb	r2, r3
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010316:	4b18      	ldr	r3, [pc, #96]	; (8010378 <xPortStartScheduler+0x138>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4a17      	ldr	r2, [pc, #92]	; (8010378 <xPortStartScheduler+0x138>)
 801031c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010320:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010322:	4b15      	ldr	r3, [pc, #84]	; (8010378 <xPortStartScheduler+0x138>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4a14      	ldr	r2, [pc, #80]	; (8010378 <xPortStartScheduler+0x138>)
 8010328:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801032c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801032e:	f000 f8dd 	bl	80104ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010332:	4b12      	ldr	r3, [pc, #72]	; (801037c <xPortStartScheduler+0x13c>)
 8010334:	2200      	movs	r2, #0
 8010336:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010338:	f000 f8fc 	bl	8010534 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801033c:	4b10      	ldr	r3, [pc, #64]	; (8010380 <xPortStartScheduler+0x140>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	4a0f      	ldr	r2, [pc, #60]	; (8010380 <xPortStartScheduler+0x140>)
 8010342:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010346:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010348:	f7ff ff66 	bl	8010218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801034c:	f7fe fe78 	bl	800f040 <vTaskSwitchContext>
	prvTaskExitError();
 8010350:	f7ff ff22 	bl	8010198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010354:	2300      	movs	r3, #0
}
 8010356:	4618      	mov	r0, r3
 8010358:	3718      	adds	r7, #24
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	e000ed00 	.word	0xe000ed00
 8010364:	410fc271 	.word	0x410fc271
 8010368:	410fc270 	.word	0x410fc270
 801036c:	e000e400 	.word	0xe000e400
 8010370:	20004b08 	.word	0x20004b08
 8010374:	20004b0c 	.word	0x20004b0c
 8010378:	e000ed20 	.word	0xe000ed20
 801037c:	20000028 	.word	0x20000028
 8010380:	e000ef34 	.word	0xe000ef34

08010384 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
	__asm volatile
 801038a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801038e:	f383 8811 	msr	BASEPRI, r3
 8010392:	f3bf 8f6f 	isb	sy
 8010396:	f3bf 8f4f 	dsb	sy
 801039a:	607b      	str	r3, [r7, #4]
}
 801039c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801039e:	4b0f      	ldr	r3, [pc, #60]	; (80103dc <vPortEnterCritical+0x58>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	3301      	adds	r3, #1
 80103a4:	4a0d      	ldr	r2, [pc, #52]	; (80103dc <vPortEnterCritical+0x58>)
 80103a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80103a8:	4b0c      	ldr	r3, [pc, #48]	; (80103dc <vPortEnterCritical+0x58>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d10f      	bne.n	80103d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80103b0:	4b0b      	ldr	r3, [pc, #44]	; (80103e0 <vPortEnterCritical+0x5c>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d00a      	beq.n	80103d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80103ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103be:	f383 8811 	msr	BASEPRI, r3
 80103c2:	f3bf 8f6f 	isb	sy
 80103c6:	f3bf 8f4f 	dsb	sy
 80103ca:	603b      	str	r3, [r7, #0]
}
 80103cc:	bf00      	nop
 80103ce:	e7fe      	b.n	80103ce <vPortEnterCritical+0x4a>
	}
}
 80103d0:	bf00      	nop
 80103d2:	370c      	adds	r7, #12
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr
 80103dc:	20000028 	.word	0x20000028
 80103e0:	e000ed04 	.word	0xe000ed04

080103e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80103ea:	4b12      	ldr	r3, [pc, #72]	; (8010434 <vPortExitCritical+0x50>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d10a      	bne.n	8010408 <vPortExitCritical+0x24>
	__asm volatile
 80103f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f6:	f383 8811 	msr	BASEPRI, r3
 80103fa:	f3bf 8f6f 	isb	sy
 80103fe:	f3bf 8f4f 	dsb	sy
 8010402:	607b      	str	r3, [r7, #4]
}
 8010404:	bf00      	nop
 8010406:	e7fe      	b.n	8010406 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010408:	4b0a      	ldr	r3, [pc, #40]	; (8010434 <vPortExitCritical+0x50>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	3b01      	subs	r3, #1
 801040e:	4a09      	ldr	r2, [pc, #36]	; (8010434 <vPortExitCritical+0x50>)
 8010410:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010412:	4b08      	ldr	r3, [pc, #32]	; (8010434 <vPortExitCritical+0x50>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d105      	bne.n	8010426 <vPortExitCritical+0x42>
 801041a:	2300      	movs	r3, #0
 801041c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	f383 8811 	msr	BASEPRI, r3
}
 8010424:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010426:	bf00      	nop
 8010428:	370c      	adds	r7, #12
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr
 8010432:	bf00      	nop
 8010434:	20000028 	.word	0x20000028
	...

08010440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010440:	f3ef 8009 	mrs	r0, PSP
 8010444:	f3bf 8f6f 	isb	sy
 8010448:	4b15      	ldr	r3, [pc, #84]	; (80104a0 <pxCurrentTCBConst>)
 801044a:	681a      	ldr	r2, [r3, #0]
 801044c:	f01e 0f10 	tst.w	lr, #16
 8010450:	bf08      	it	eq
 8010452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801045a:	6010      	str	r0, [r2, #0]
 801045c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010464:	f380 8811 	msr	BASEPRI, r0
 8010468:	f3bf 8f4f 	dsb	sy
 801046c:	f3bf 8f6f 	isb	sy
 8010470:	f7fe fde6 	bl	800f040 <vTaskSwitchContext>
 8010474:	f04f 0000 	mov.w	r0, #0
 8010478:	f380 8811 	msr	BASEPRI, r0
 801047c:	bc09      	pop	{r0, r3}
 801047e:	6819      	ldr	r1, [r3, #0]
 8010480:	6808      	ldr	r0, [r1, #0]
 8010482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010486:	f01e 0f10 	tst.w	lr, #16
 801048a:	bf08      	it	eq
 801048c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010490:	f380 8809 	msr	PSP, r0
 8010494:	f3bf 8f6f 	isb	sy
 8010498:	4770      	bx	lr
 801049a:	bf00      	nop
 801049c:	f3af 8000 	nop.w

080104a0 <pxCurrentTCBConst>:
 80104a0:	200044dc 	.word	0x200044dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80104a4:	bf00      	nop
 80104a6:	bf00      	nop

080104a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b082      	sub	sp, #8
 80104ac:	af00      	add	r7, sp, #0
	__asm volatile
 80104ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b2:	f383 8811 	msr	BASEPRI, r3
 80104b6:	f3bf 8f6f 	isb	sy
 80104ba:	f3bf 8f4f 	dsb	sy
 80104be:	607b      	str	r3, [r7, #4]
}
 80104c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80104c2:	f7fe fd03 	bl	800eecc <xTaskIncrementTick>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d003      	beq.n	80104d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80104cc:	4b06      	ldr	r3, [pc, #24]	; (80104e8 <xPortSysTickHandler+0x40>)
 80104ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104d2:	601a      	str	r2, [r3, #0]
 80104d4:	2300      	movs	r3, #0
 80104d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	f383 8811 	msr	BASEPRI, r3
}
 80104de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80104e0:	bf00      	nop
 80104e2:	3708      	adds	r7, #8
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	e000ed04 	.word	0xe000ed04

080104ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80104ec:	b480      	push	{r7}
 80104ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80104f0:	4b0b      	ldr	r3, [pc, #44]	; (8010520 <vPortSetupTimerInterrupt+0x34>)
 80104f2:	2200      	movs	r2, #0
 80104f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80104f6:	4b0b      	ldr	r3, [pc, #44]	; (8010524 <vPortSetupTimerInterrupt+0x38>)
 80104f8:	2200      	movs	r2, #0
 80104fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80104fc:	4b0a      	ldr	r3, [pc, #40]	; (8010528 <vPortSetupTimerInterrupt+0x3c>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a0a      	ldr	r2, [pc, #40]	; (801052c <vPortSetupTimerInterrupt+0x40>)
 8010502:	fba2 2303 	umull	r2, r3, r2, r3
 8010506:	099b      	lsrs	r3, r3, #6
 8010508:	4a09      	ldr	r2, [pc, #36]	; (8010530 <vPortSetupTimerInterrupt+0x44>)
 801050a:	3b01      	subs	r3, #1
 801050c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801050e:	4b04      	ldr	r3, [pc, #16]	; (8010520 <vPortSetupTimerInterrupt+0x34>)
 8010510:	2207      	movs	r2, #7
 8010512:	601a      	str	r2, [r3, #0]
}
 8010514:	bf00      	nop
 8010516:	46bd      	mov	sp, r7
 8010518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051c:	4770      	bx	lr
 801051e:	bf00      	nop
 8010520:	e000e010 	.word	0xe000e010
 8010524:	e000e018 	.word	0xe000e018
 8010528:	20000008 	.word	0x20000008
 801052c:	10624dd3 	.word	0x10624dd3
 8010530:	e000e014 	.word	0xe000e014

08010534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010544 <vPortEnableVFP+0x10>
 8010538:	6801      	ldr	r1, [r0, #0]
 801053a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801053e:	6001      	str	r1, [r0, #0]
 8010540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010542:	bf00      	nop
 8010544:	e000ed88 	.word	0xe000ed88

08010548 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010548:	b480      	push	{r7}
 801054a:	b085      	sub	sp, #20
 801054c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801054e:	f3ef 8305 	mrs	r3, IPSR
 8010552:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2b0f      	cmp	r3, #15
 8010558:	d914      	bls.n	8010584 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801055a:	4a17      	ldr	r2, [pc, #92]	; (80105b8 <vPortValidateInterruptPriority+0x70>)
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	4413      	add	r3, r2
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010564:	4b15      	ldr	r3, [pc, #84]	; (80105bc <vPortValidateInterruptPriority+0x74>)
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	7afa      	ldrb	r2, [r7, #11]
 801056a:	429a      	cmp	r2, r3
 801056c:	d20a      	bcs.n	8010584 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801056e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010572:	f383 8811 	msr	BASEPRI, r3
 8010576:	f3bf 8f6f 	isb	sy
 801057a:	f3bf 8f4f 	dsb	sy
 801057e:	607b      	str	r3, [r7, #4]
}
 8010580:	bf00      	nop
 8010582:	e7fe      	b.n	8010582 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010584:	4b0e      	ldr	r3, [pc, #56]	; (80105c0 <vPortValidateInterruptPriority+0x78>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801058c:	4b0d      	ldr	r3, [pc, #52]	; (80105c4 <vPortValidateInterruptPriority+0x7c>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	429a      	cmp	r2, r3
 8010592:	d90a      	bls.n	80105aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010598:	f383 8811 	msr	BASEPRI, r3
 801059c:	f3bf 8f6f 	isb	sy
 80105a0:	f3bf 8f4f 	dsb	sy
 80105a4:	603b      	str	r3, [r7, #0]
}
 80105a6:	bf00      	nop
 80105a8:	e7fe      	b.n	80105a8 <vPortValidateInterruptPriority+0x60>
	}
 80105aa:	bf00      	nop
 80105ac:	3714      	adds	r7, #20
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop
 80105b8:	e000e3f0 	.word	0xe000e3f0
 80105bc:	20004b08 	.word	0x20004b08
 80105c0:	e000ed0c 	.word	0xe000ed0c
 80105c4:	20004b0c 	.word	0x20004b0c

080105c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b08a      	sub	sp, #40	; 0x28
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80105d0:	2300      	movs	r3, #0
 80105d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80105d4:	f7fe fbbe 	bl	800ed54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80105d8:	4b5b      	ldr	r3, [pc, #364]	; (8010748 <pvPortMalloc+0x180>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d101      	bne.n	80105e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80105e0:	f000 f920 	bl	8010824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80105e4:	4b59      	ldr	r3, [pc, #356]	; (801074c <pvPortMalloc+0x184>)
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	4013      	ands	r3, r2
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	f040 8093 	bne.w	8010718 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d01d      	beq.n	8010634 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80105f8:	2208      	movs	r2, #8
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4413      	add	r3, r2
 80105fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f003 0307 	and.w	r3, r3, #7
 8010606:	2b00      	cmp	r3, #0
 8010608:	d014      	beq.n	8010634 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f023 0307 	bic.w	r3, r3, #7
 8010610:	3308      	adds	r3, #8
 8010612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f003 0307 	and.w	r3, r3, #7
 801061a:	2b00      	cmp	r3, #0
 801061c:	d00a      	beq.n	8010634 <pvPortMalloc+0x6c>
	__asm volatile
 801061e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010622:	f383 8811 	msr	BASEPRI, r3
 8010626:	f3bf 8f6f 	isb	sy
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	617b      	str	r3, [r7, #20]
}
 8010630:	bf00      	nop
 8010632:	e7fe      	b.n	8010632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d06e      	beq.n	8010718 <pvPortMalloc+0x150>
 801063a:	4b45      	ldr	r3, [pc, #276]	; (8010750 <pvPortMalloc+0x188>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	687a      	ldr	r2, [r7, #4]
 8010640:	429a      	cmp	r2, r3
 8010642:	d869      	bhi.n	8010718 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010644:	4b43      	ldr	r3, [pc, #268]	; (8010754 <pvPortMalloc+0x18c>)
 8010646:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010648:	4b42      	ldr	r3, [pc, #264]	; (8010754 <pvPortMalloc+0x18c>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801064e:	e004      	b.n	801065a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010652:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065c:	685b      	ldr	r3, [r3, #4]
 801065e:	687a      	ldr	r2, [r7, #4]
 8010660:	429a      	cmp	r2, r3
 8010662:	d903      	bls.n	801066c <pvPortMalloc+0xa4>
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d1f1      	bne.n	8010650 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801066c:	4b36      	ldr	r3, [pc, #216]	; (8010748 <pvPortMalloc+0x180>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010672:	429a      	cmp	r2, r3
 8010674:	d050      	beq.n	8010718 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010676:	6a3b      	ldr	r3, [r7, #32]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2208      	movs	r2, #8
 801067c:	4413      	add	r3, r2
 801067e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	6a3b      	ldr	r3, [r7, #32]
 8010686:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068a:	685a      	ldr	r2, [r3, #4]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	1ad2      	subs	r2, r2, r3
 8010690:	2308      	movs	r3, #8
 8010692:	005b      	lsls	r3, r3, #1
 8010694:	429a      	cmp	r2, r3
 8010696:	d91f      	bls.n	80106d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	4413      	add	r3, r2
 801069e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80106a0:	69bb      	ldr	r3, [r7, #24]
 80106a2:	f003 0307 	and.w	r3, r3, #7
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d00a      	beq.n	80106c0 <pvPortMalloc+0xf8>
	__asm volatile
 80106aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ae:	f383 8811 	msr	BASEPRI, r3
 80106b2:	f3bf 8f6f 	isb	sy
 80106b6:	f3bf 8f4f 	dsb	sy
 80106ba:	613b      	str	r3, [r7, #16]
}
 80106bc:	bf00      	nop
 80106be:	e7fe      	b.n	80106be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80106c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c2:	685a      	ldr	r2, [r3, #4]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	1ad2      	subs	r2, r2, r3
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80106cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ce:	687a      	ldr	r2, [r7, #4]
 80106d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80106d2:	69b8      	ldr	r0, [r7, #24]
 80106d4:	f000 f908 	bl	80108e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80106d8:	4b1d      	ldr	r3, [pc, #116]	; (8010750 <pvPortMalloc+0x188>)
 80106da:	681a      	ldr	r2, [r3, #0]
 80106dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	4a1b      	ldr	r2, [pc, #108]	; (8010750 <pvPortMalloc+0x188>)
 80106e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80106e6:	4b1a      	ldr	r3, [pc, #104]	; (8010750 <pvPortMalloc+0x188>)
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	4b1b      	ldr	r3, [pc, #108]	; (8010758 <pvPortMalloc+0x190>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d203      	bcs.n	80106fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80106f2:	4b17      	ldr	r3, [pc, #92]	; (8010750 <pvPortMalloc+0x188>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	4a18      	ldr	r2, [pc, #96]	; (8010758 <pvPortMalloc+0x190>)
 80106f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80106fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fc:	685a      	ldr	r2, [r3, #4]
 80106fe:	4b13      	ldr	r3, [pc, #76]	; (801074c <pvPortMalloc+0x184>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	431a      	orrs	r2, r3
 8010704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010706:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070a:	2200      	movs	r2, #0
 801070c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801070e:	4b13      	ldr	r3, [pc, #76]	; (801075c <pvPortMalloc+0x194>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	3301      	adds	r3, #1
 8010714:	4a11      	ldr	r2, [pc, #68]	; (801075c <pvPortMalloc+0x194>)
 8010716:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010718:	f7fe fb2a 	bl	800ed70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	f003 0307 	and.w	r3, r3, #7
 8010722:	2b00      	cmp	r3, #0
 8010724:	d00a      	beq.n	801073c <pvPortMalloc+0x174>
	__asm volatile
 8010726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072a:	f383 8811 	msr	BASEPRI, r3
 801072e:	f3bf 8f6f 	isb	sy
 8010732:	f3bf 8f4f 	dsb	sy
 8010736:	60fb      	str	r3, [r7, #12]
}
 8010738:	bf00      	nop
 801073a:	e7fe      	b.n	801073a <pvPortMalloc+0x172>
	return pvReturn;
 801073c:	69fb      	ldr	r3, [r7, #28]
}
 801073e:	4618      	mov	r0, r3
 8010740:	3728      	adds	r7, #40	; 0x28
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	20008718 	.word	0x20008718
 801074c:	2000872c 	.word	0x2000872c
 8010750:	2000871c 	.word	0x2000871c
 8010754:	20008710 	.word	0x20008710
 8010758:	20008720 	.word	0x20008720
 801075c:	20008724 	.word	0x20008724

08010760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b086      	sub	sp, #24
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d04d      	beq.n	801080e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010772:	2308      	movs	r3, #8
 8010774:	425b      	negs	r3, r3
 8010776:	697a      	ldr	r2, [r7, #20]
 8010778:	4413      	add	r3, r2
 801077a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	685a      	ldr	r2, [r3, #4]
 8010784:	4b24      	ldr	r3, [pc, #144]	; (8010818 <vPortFree+0xb8>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	4013      	ands	r3, r2
 801078a:	2b00      	cmp	r3, #0
 801078c:	d10a      	bne.n	80107a4 <vPortFree+0x44>
	__asm volatile
 801078e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010792:	f383 8811 	msr	BASEPRI, r3
 8010796:	f3bf 8f6f 	isb	sy
 801079a:	f3bf 8f4f 	dsb	sy
 801079e:	60fb      	str	r3, [r7, #12]
}
 80107a0:	bf00      	nop
 80107a2:	e7fe      	b.n	80107a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d00a      	beq.n	80107c2 <vPortFree+0x62>
	__asm volatile
 80107ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b0:	f383 8811 	msr	BASEPRI, r3
 80107b4:	f3bf 8f6f 	isb	sy
 80107b8:	f3bf 8f4f 	dsb	sy
 80107bc:	60bb      	str	r3, [r7, #8]
}
 80107be:	bf00      	nop
 80107c0:	e7fe      	b.n	80107c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	685a      	ldr	r2, [r3, #4]
 80107c6:	4b14      	ldr	r3, [pc, #80]	; (8010818 <vPortFree+0xb8>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	4013      	ands	r3, r2
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d01e      	beq.n	801080e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d11a      	bne.n	801080e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	685a      	ldr	r2, [r3, #4]
 80107dc:	4b0e      	ldr	r3, [pc, #56]	; (8010818 <vPortFree+0xb8>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	43db      	mvns	r3, r3
 80107e2:	401a      	ands	r2, r3
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80107e8:	f7fe fab4 	bl	800ed54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	685a      	ldr	r2, [r3, #4]
 80107f0:	4b0a      	ldr	r3, [pc, #40]	; (801081c <vPortFree+0xbc>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	4413      	add	r3, r2
 80107f6:	4a09      	ldr	r2, [pc, #36]	; (801081c <vPortFree+0xbc>)
 80107f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80107fa:	6938      	ldr	r0, [r7, #16]
 80107fc:	f000 f874 	bl	80108e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010800:	4b07      	ldr	r3, [pc, #28]	; (8010820 <vPortFree+0xc0>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	3301      	adds	r3, #1
 8010806:	4a06      	ldr	r2, [pc, #24]	; (8010820 <vPortFree+0xc0>)
 8010808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801080a:	f7fe fab1 	bl	800ed70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801080e:	bf00      	nop
 8010810:	3718      	adds	r7, #24
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	2000872c 	.word	0x2000872c
 801081c:	2000871c 	.word	0x2000871c
 8010820:	20008728 	.word	0x20008728

08010824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010824:	b480      	push	{r7}
 8010826:	b085      	sub	sp, #20
 8010828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801082a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801082e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010830:	4b27      	ldr	r3, [pc, #156]	; (80108d0 <prvHeapInit+0xac>)
 8010832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	f003 0307 	and.w	r3, r3, #7
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00c      	beq.n	8010858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	3307      	adds	r3, #7
 8010842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	f023 0307 	bic.w	r3, r3, #7
 801084a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801084c:	68ba      	ldr	r2, [r7, #8]
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	1ad3      	subs	r3, r2, r3
 8010852:	4a1f      	ldr	r2, [pc, #124]	; (80108d0 <prvHeapInit+0xac>)
 8010854:	4413      	add	r3, r2
 8010856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801085c:	4a1d      	ldr	r2, [pc, #116]	; (80108d4 <prvHeapInit+0xb0>)
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010862:	4b1c      	ldr	r3, [pc, #112]	; (80108d4 <prvHeapInit+0xb0>)
 8010864:	2200      	movs	r2, #0
 8010866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	68ba      	ldr	r2, [r7, #8]
 801086c:	4413      	add	r3, r2
 801086e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010870:	2208      	movs	r2, #8
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	1a9b      	subs	r3, r3, r2
 8010876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f023 0307 	bic.w	r3, r3, #7
 801087e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	4a15      	ldr	r2, [pc, #84]	; (80108d8 <prvHeapInit+0xb4>)
 8010884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010886:	4b14      	ldr	r3, [pc, #80]	; (80108d8 <prvHeapInit+0xb4>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	2200      	movs	r2, #0
 801088c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801088e:	4b12      	ldr	r3, [pc, #72]	; (80108d8 <prvHeapInit+0xb4>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	2200      	movs	r2, #0
 8010894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	68fa      	ldr	r2, [r7, #12]
 801089e:	1ad2      	subs	r2, r2, r3
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80108a4:	4b0c      	ldr	r3, [pc, #48]	; (80108d8 <prvHeapInit+0xb4>)
 80108a6:	681a      	ldr	r2, [r3, #0]
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	4a0a      	ldr	r2, [pc, #40]	; (80108dc <prvHeapInit+0xb8>)
 80108b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	4a09      	ldr	r2, [pc, #36]	; (80108e0 <prvHeapInit+0xbc>)
 80108ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80108bc:	4b09      	ldr	r3, [pc, #36]	; (80108e4 <prvHeapInit+0xc0>)
 80108be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80108c2:	601a      	str	r2, [r3, #0]
}
 80108c4:	bf00      	nop
 80108c6:	3714      	adds	r7, #20
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr
 80108d0:	20004b10 	.word	0x20004b10
 80108d4:	20008710 	.word	0x20008710
 80108d8:	20008718 	.word	0x20008718
 80108dc:	20008720 	.word	0x20008720
 80108e0:	2000871c 	.word	0x2000871c
 80108e4:	2000872c 	.word	0x2000872c

080108e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80108e8:	b480      	push	{r7}
 80108ea:	b085      	sub	sp, #20
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80108f0:	4b28      	ldr	r3, [pc, #160]	; (8010994 <prvInsertBlockIntoFreeList+0xac>)
 80108f2:	60fb      	str	r3, [r7, #12]
 80108f4:	e002      	b.n	80108fc <prvInsertBlockIntoFreeList+0x14>
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	60fb      	str	r3, [r7, #12]
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	429a      	cmp	r2, r3
 8010904:	d8f7      	bhi.n	80108f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	68ba      	ldr	r2, [r7, #8]
 8010910:	4413      	add	r3, r2
 8010912:	687a      	ldr	r2, [r7, #4]
 8010914:	429a      	cmp	r2, r3
 8010916:	d108      	bne.n	801092a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	685a      	ldr	r2, [r3, #4]
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	441a      	add	r2, r3
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	68ba      	ldr	r2, [r7, #8]
 8010934:	441a      	add	r2, r3
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	429a      	cmp	r2, r3
 801093c:	d118      	bne.n	8010970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	4b15      	ldr	r3, [pc, #84]	; (8010998 <prvInsertBlockIntoFreeList+0xb0>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	429a      	cmp	r2, r3
 8010948:	d00d      	beq.n	8010966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	685a      	ldr	r2, [r3, #4]
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	441a      	add	r2, r3
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	681a      	ldr	r2, [r3, #0]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	601a      	str	r2, [r3, #0]
 8010964:	e008      	b.n	8010978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010966:	4b0c      	ldr	r3, [pc, #48]	; (8010998 <prvInsertBlockIntoFreeList+0xb0>)
 8010968:	681a      	ldr	r2, [r3, #0]
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	e003      	b.n	8010978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681a      	ldr	r2, [r3, #0]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010978:	68fa      	ldr	r2, [r7, #12]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	429a      	cmp	r2, r3
 801097e:	d002      	beq.n	8010986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	687a      	ldr	r2, [r7, #4]
 8010984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010986:	bf00      	nop
 8010988:	3714      	adds	r7, #20
 801098a:	46bd      	mov	sp, r7
 801098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010990:	4770      	bx	lr
 8010992:	bf00      	nop
 8010994:	20008710 	.word	0x20008710
 8010998:	20008718 	.word	0x20008718

0801099c <DataHist_parameters>:
 801099c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80109a2:	f8dd c018 	ldr.w	ip, [sp, #24]
 80109a6:	7020      	strb	r0, [r4, #0]
 80109a8:	6808      	ldr	r0, [r1, #0]
 80109aa:	6060      	str	r0, [r4, #4]
 80109ac:	6848      	ldr	r0, [r1, #4]
 80109ae:	60a0      	str	r0, [r4, #8]
 80109b0:	6888      	ldr	r0, [r1, #8]
 80109b2:	60e0      	str	r0, [r4, #12]
 80109b4:	68c8      	ldr	r0, [r1, #12]
 80109b6:	6120      	str	r0, [r4, #16]
 80109b8:	6908      	ldr	r0, [r1, #16]
 80109ba:	6160      	str	r0, [r4, #20]
 80109bc:	6948      	ldr	r0, [r1, #20]
 80109be:	61a0      	str	r0, [r4, #24]
 80109c0:	6988      	ldr	r0, [r1, #24]
 80109c2:	61e0      	str	r0, [r4, #28]
 80109c4:	69c8      	ldr	r0, [r1, #28]
 80109c6:	6220      	str	r0, [r4, #32]
 80109c8:	6a09      	ldr	r1, [r1, #32]
 80109ca:	6261      	str	r1, [r4, #36]	; 0x24
 80109cc:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 80109d0:	8811      	ldrh	r1, [r2, #0]
 80109d2:	edd2 7a01 	vldr	s15, [r2, #4]
 80109d6:	8521      	strh	r1, [r4, #40]	; 0x28
 80109d8:	f102 0e80 	add.w	lr, r2, #128	; 0x80
 80109dc:	f104 0830 	add.w	r8, r4, #48	; 0x30
 80109e0:	2700      	movs	r7, #0
 80109e2:	f1ae 0278 	sub.w	r2, lr, #120	; 0x78
 80109e6:	4641      	mov	r1, r8
 80109e8:	f852 0b04 	ldr.w	r0, [r2], #4
 80109ec:	f841 0b04 	str.w	r0, [r1], #4
 80109f0:	4572      	cmp	r2, lr
 80109f2:	d1f9      	bne.n	80109e8 <DataHist_parameters+0x4c>
 80109f4:	371e      	adds	r7, #30
 80109f6:	2f5a      	cmp	r7, #90	; 0x5a
 80109f8:	f108 0878 	add.w	r8, r8, #120	; 0x78
 80109fc:	f102 0e78 	add.w	lr, r2, #120	; 0x78
 8010a00:	d1ef      	bne.n	80109e2 <DataHist_parameters+0x46>
 8010a02:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
 8010a06:	881a      	ldrh	r2, [r3, #0]
 8010a08:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8010a0c:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 8010a10:	f103 0e80 	add.w	lr, r3, #128	; 0x80
 8010a14:	f504 77d0 	add.w	r7, r4, #416	; 0x1a0
 8010a18:	2000      	movs	r0, #0
 8010a1a:	f1ae 0378 	sub.w	r3, lr, #120	; 0x78
 8010a1e:	463a      	mov	r2, r7
 8010a20:	f853 1b04 	ldr.w	r1, [r3], #4
 8010a24:	f842 1b04 	str.w	r1, [r2], #4
 8010a28:	4573      	cmp	r3, lr
 8010a2a:	d1f9      	bne.n	8010a20 <DataHist_parameters+0x84>
 8010a2c:	301e      	adds	r0, #30
 8010a2e:	285a      	cmp	r0, #90	; 0x5a
 8010a30:	f107 0778 	add.w	r7, r7, #120	; 0x78
 8010a34:	f103 0e78 	add.w	lr, r3, #120	; 0x78
 8010a38:	d1ef      	bne.n	8010a1a <DataHist_parameters+0x7e>
 8010a3a:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 8010a3e:	f8bc 3000 	ldrh.w	r3, [ip]
 8010a42:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8010a46:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 8010a4a:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 8010a4e:	f504 7e44 	add.w	lr, r4, #784	; 0x310
 8010a52:	2000      	movs	r0, #0
 8010a54:	f1ac 0378 	sub.w	r3, ip, #120	; 0x78
 8010a58:	4672      	mov	r2, lr
 8010a5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8010a5e:	f842 1b04 	str.w	r1, [r2], #4
 8010a62:	4563      	cmp	r3, ip
 8010a64:	d1f9      	bne.n	8010a5a <DataHist_parameters+0xbe>
 8010a66:	301e      	adds	r0, #30
 8010a68:	285a      	cmp	r0, #90	; 0x5a
 8010a6a:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 8010a6e:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 8010a72:	d1ef      	bne.n	8010a54 <DataHist_parameters+0xb8>
 8010a74:	f8c4 730c 	str.w	r7, [r4, #780]	; 0x30c
 8010a78:	8833      	ldrh	r3, [r6, #0]
 8010a7a:	6877      	ldr	r7, [r6, #4]
 8010a7c:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 8010a80:	f106 0080 	add.w	r0, r6, #128	; 0x80
 8010a84:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 8010a88:	2600      	movs	r6, #0
 8010a8a:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 8010a8e:	4662      	mov	r2, ip
 8010a90:	f853 1b04 	ldr.w	r1, [r3], #4
 8010a94:	f842 1b04 	str.w	r1, [r2], #4
 8010a98:	4283      	cmp	r3, r0
 8010a9a:	d1f9      	bne.n	8010a90 <DataHist_parameters+0xf4>
 8010a9c:	361e      	adds	r6, #30
 8010a9e:	2e5a      	cmp	r6, #90	; 0x5a
 8010aa0:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 8010aa4:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8010aa8:	d1ef      	bne.n	8010a8a <DataHist_parameters+0xee>
 8010aaa:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 8010aae:	69aa      	ldr	r2, [r5, #24]
 8010ab0:	605f      	str	r7, [r3, #4]
 8010ab2:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 8010ab6:	7829      	ldrb	r1, [r5, #0]
 8010ab8:	f884 15e8 	strb.w	r1, [r4, #1512]	; 0x5e8
 8010abc:	619a      	str	r2, [r3, #24]
 8010abe:	6869      	ldr	r1, [r5, #4]
 8010ac0:	6059      	str	r1, [r3, #4]
 8010ac2:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 8010ac6:	68a9      	ldr	r1, [r5, #8]
 8010ac8:	6011      	str	r1, [r2, #0]
 8010aca:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 8010ace:	68e9      	ldr	r1, [r5, #12]
 8010ad0:	6011      	str	r1, [r2, #0]
 8010ad2:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 8010ad6:	6929      	ldr	r1, [r5, #16]
 8010ad8:	6011      	str	r1, [r2, #0]
 8010ada:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 8010ade:	6969      	ldr	r1, [r5, #20]
 8010ae0:	6011      	str	r1, [r2, #0]
 8010ae2:	69e9      	ldr	r1, [r5, #28]
 8010ae4:	61d9      	str	r1, [r3, #28]
 8010ae6:	f504 62c1 	add.w	r2, r4, #1544	; 0x608
 8010aea:	6a2b      	ldr	r3, [r5, #32]
 8010aec:	6013      	str	r3, [r2, #0]
 8010aee:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 8010af2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8010af4:	601a      	str	r2, [r3, #0]
 8010af6:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 8010afa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8010afc:	601a      	str	r2, [r3, #0]
 8010afe:	f204 6414 	addw	r4, r4, #1556	; 0x614
 8010b02:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010b04:	6023      	str	r3, [r4, #0]
 8010b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b0a:	bf00      	nop

08010b0c <rotVect>:
 8010b0c:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8010b10:	ed92 7a01 	vldr	s14, [r2, #4]
 8010b14:	ed92 6a00 	vldr	s12, [r2]
 8010b18:	ee07 3a90 	vmov	s15, r3
 8010b1c:	f991 3000 	ldrsb.w	r3, [r1]
 8010b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b24:	ee06 3a90 	vmov	s13, r3
 8010b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010b2c:	f991 3002 	ldrsb.w	r3, [r1, #2]
 8010b30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010b34:	ee07 3a10 	vmov	s14, r3
 8010b38:	eee6 7a86 	vfma.f32	s15, s13, s12
 8010b3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010b40:	edd2 6a02 	vldr	s13, [r2, #8]
 8010b44:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010b48:	edc0 7a00 	vstr	s15, [r0]
 8010b4c:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8010b50:	ed92 7a01 	vldr	s14, [r2, #4]
 8010b54:	ed92 6a00 	vldr	s12, [r2]
 8010b58:	ee07 3a90 	vmov	s15, r3
 8010b5c:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8010b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b64:	ee06 3a90 	vmov	s13, r3
 8010b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010b6c:	f991 3005 	ldrsb.w	r3, [r1, #5]
 8010b70:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010b74:	ee07 3a10 	vmov	s14, r3
 8010b78:	eee6 7a86 	vfma.f32	s15, s13, s12
 8010b7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010b80:	edd2 6a02 	vldr	s13, [r2, #8]
 8010b84:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010b88:	edc0 7a01 	vstr	s15, [r0, #4]
 8010b8c:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8010b90:	ed92 7a01 	vldr	s14, [r2, #4]
 8010b94:	ed92 6a00 	vldr	s12, [r2]
 8010b98:	ee07 3a90 	vmov	s15, r3
 8010b9c:	f991 3006 	ldrsb.w	r3, [r1, #6]
 8010ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ba4:	ee06 3a90 	vmov	s13, r3
 8010ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010bac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010bb0:	f991 3008 	ldrsb.w	r3, [r1, #8]
 8010bb4:	eee6 7a86 	vfma.f32	s15, s13, s12
 8010bb8:	ee07 3a10 	vmov	s14, r3
 8010bbc:	edd2 6a02 	vldr	s13, [r2, #8]
 8010bc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010bc4:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010bc8:	edc0 7a02 	vstr	s15, [r0, #8]
 8010bcc:	4770      	bx	lr
 8010bce:	bf00      	nop

08010bd0 <findAxis>:
 8010bd0:	f990 3000 	ldrsb.w	r3, [r0]
 8010bd4:	2b01      	cmp	r3, #1
 8010bd6:	d027      	beq.n	8010c28 <findAxis+0x58>
 8010bd8:	3301      	adds	r3, #1
 8010bda:	d00e      	beq.n	8010bfa <findAxis+0x2a>
 8010bdc:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d053      	beq.n	8010c8c <findAxis+0xbc>
 8010be4:	3301      	adds	r3, #1
 8010be6:	d048      	beq.n	8010c7a <findAxis+0xaa>
 8010be8:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d053      	beq.n	8010c98 <findAxis+0xc8>
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	d104      	bne.n	8010bfe <findAxis+0x2e>
 8010bf4:	2364      	movs	r3, #100	; 0x64
 8010bf6:	700b      	strb	r3, [r1, #0]
 8010bf8:	e001      	b.n	8010bfe <findAxis+0x2e>
 8010bfa:	2377      	movs	r3, #119	; 0x77
 8010bfc:	700b      	strb	r3, [r1, #0]
 8010bfe:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010c02:	2b01      	cmp	r3, #1
 8010c04:	d016      	beq.n	8010c34 <findAxis+0x64>
 8010c06:	3301      	adds	r3, #1
 8010c08:	d02e      	beq.n	8010c68 <findAxis+0x98>
 8010c0a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8010c0e:	2b01      	cmp	r3, #1
 8010c10:	d039      	beq.n	8010c86 <findAxis+0xb6>
 8010c12:	3301      	adds	r3, #1
 8010c14:	d034      	beq.n	8010c80 <findAxis+0xb0>
 8010c16:	f990 3007 	ldrsb.w	r3, [r0, #7]
 8010c1a:	2b01      	cmp	r3, #1
 8010c1c:	d03f      	beq.n	8010c9e <findAxis+0xce>
 8010c1e:	3301      	adds	r3, #1
 8010c20:	d10a      	bne.n	8010c38 <findAxis+0x68>
 8010c22:	2364      	movs	r3, #100	; 0x64
 8010c24:	704b      	strb	r3, [r1, #1]
 8010c26:	e007      	b.n	8010c38 <findAxis+0x68>
 8010c28:	2365      	movs	r3, #101	; 0x65
 8010c2a:	700b      	strb	r3, [r1, #0]
 8010c2c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d1e8      	bne.n	8010c06 <findAxis+0x36>
 8010c34:	2365      	movs	r3, #101	; 0x65
 8010c36:	704b      	strb	r3, [r1, #1]
 8010c38:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	d010      	beq.n	8010c62 <findAxis+0x92>
 8010c40:	3301      	adds	r3, #1
 8010c42:	d014      	beq.n	8010c6e <findAxis+0x9e>
 8010c44:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	d022      	beq.n	8010c92 <findAxis+0xc2>
 8010c4c:	3301      	adds	r3, #1
 8010c4e:	d011      	beq.n	8010c74 <findAxis+0xa4>
 8010c50:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d025      	beq.n	8010ca4 <findAxis+0xd4>
 8010c58:	3301      	adds	r3, #1
 8010c5a:	bf04      	itt	eq
 8010c5c:	2364      	moveq	r3, #100	; 0x64
 8010c5e:	708b      	strbeq	r3, [r1, #2]
 8010c60:	4770      	bx	lr
 8010c62:	2365      	movs	r3, #101	; 0x65
 8010c64:	708b      	strb	r3, [r1, #2]
 8010c66:	4770      	bx	lr
 8010c68:	2377      	movs	r3, #119	; 0x77
 8010c6a:	704b      	strb	r3, [r1, #1]
 8010c6c:	e7e4      	b.n	8010c38 <findAxis+0x68>
 8010c6e:	2377      	movs	r3, #119	; 0x77
 8010c70:	708b      	strb	r3, [r1, #2]
 8010c72:	4770      	bx	lr
 8010c74:	2373      	movs	r3, #115	; 0x73
 8010c76:	708b      	strb	r3, [r1, #2]
 8010c78:	4770      	bx	lr
 8010c7a:	2373      	movs	r3, #115	; 0x73
 8010c7c:	700b      	strb	r3, [r1, #0]
 8010c7e:	e7be      	b.n	8010bfe <findAxis+0x2e>
 8010c80:	2373      	movs	r3, #115	; 0x73
 8010c82:	704b      	strb	r3, [r1, #1]
 8010c84:	e7d8      	b.n	8010c38 <findAxis+0x68>
 8010c86:	236e      	movs	r3, #110	; 0x6e
 8010c88:	704b      	strb	r3, [r1, #1]
 8010c8a:	e7d5      	b.n	8010c38 <findAxis+0x68>
 8010c8c:	236e      	movs	r3, #110	; 0x6e
 8010c8e:	700b      	strb	r3, [r1, #0]
 8010c90:	e7b5      	b.n	8010bfe <findAxis+0x2e>
 8010c92:	236e      	movs	r3, #110	; 0x6e
 8010c94:	708b      	strb	r3, [r1, #2]
 8010c96:	4770      	bx	lr
 8010c98:	2375      	movs	r3, #117	; 0x75
 8010c9a:	700b      	strb	r3, [r1, #0]
 8010c9c:	e7af      	b.n	8010bfe <findAxis+0x2e>
 8010c9e:	2375      	movs	r3, #117	; 0x75
 8010ca0:	704b      	strb	r3, [r1, #1]
 8010ca2:	e7c9      	b.n	8010c38 <findAxis+0x68>
 8010ca4:	2375      	movs	r3, #117	; 0x75
 8010ca6:	708b      	strb	r3, [r1, #2]
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop
 8010cac:	0000      	movs	r0, r0
	...

08010cb0 <findDirection>:
 8010cb0:	b5d0      	push	{r4, r6, r7, lr}
 8010cb2:	ed2d 8b04 	vpush	{d8-d9}
 8010cb6:	eef0 8ac0 	vabs.f32	s17, s0
 8010cba:	eeb0 8ae0 	vabs.f32	s16, s1
 8010cbe:	eef4 8ac8 	vcmpe.f32	s17, s16
 8010cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	eeb0 9ac1 	vabs.f32	s18, s2
 8010ccc:	dd36      	ble.n	8010d3c <findDirection+0x8c>
 8010cce:	eef4 8ac9 	vcmpe.f32	s17, s18
 8010cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd6:	dd31      	ble.n	8010d3c <findDirection+0x8c>
 8010cd8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce0:	ee18 0a90 	vmov	r0, s17
 8010ce4:	f340 8094 	ble.w	8010e10 <findDirection+0x160>
 8010ce8:	f7ef fc38 	bl	800055c <__aeabi_f2d>
 8010cec:	4606      	mov	r6, r0
 8010cee:	ee18 0a10 	vmov	r0, s16
 8010cf2:	460f      	mov	r7, r1
 8010cf4:	f7ef fc32 	bl	800055c <__aeabi_f2d>
 8010cf8:	a387      	add	r3, pc, #540	; (adr r3, 8010f18 <findDirection+0x268>)
 8010cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfe:	f7ef fc85 	bl	800060c <__aeabi_dmul>
 8010d02:	4602      	mov	r2, r0
 8010d04:	460b      	mov	r3, r1
 8010d06:	4630      	mov	r0, r6
 8010d08:	4639      	mov	r1, r7
 8010d0a:	f7ef ff0f 	bl	8000b2c <__aeabi_dcmpgt>
 8010d0e:	b188      	cbz	r0, 8010d34 <findDirection+0x84>
 8010d10:	ee19 0a10 	vmov	r0, s18
 8010d14:	f7ef fc22 	bl	800055c <__aeabi_f2d>
 8010d18:	a37f      	add	r3, pc, #508	; (adr r3, 8010f18 <findDirection+0x268>)
 8010d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1e:	f7ef fc75 	bl	800060c <__aeabi_dmul>
 8010d22:	4602      	mov	r2, r0
 8010d24:	460b      	mov	r3, r1
 8010d26:	4630      	mov	r0, r6
 8010d28:	4639      	mov	r1, r7
 8010d2a:	f7ef feff 	bl	8000b2c <__aeabi_dcmpgt>
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	bf18      	it	ne
 8010d32:	2404      	movne	r4, #4
 8010d34:	ecbd 8b04 	vpop	{d8-d9}
 8010d38:	4620      	mov	r0, r4
 8010d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8010d3c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8010d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d44:	dd32      	ble.n	8010dac <findDirection+0xfc>
 8010d46:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8010d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4e:	ee18 0a10 	vmov	r0, s16
 8010d52:	f340 8086 	ble.w	8010e62 <findDirection+0x1b2>
 8010d56:	f7ef fc01 	bl	800055c <__aeabi_f2d>
 8010d5a:	4606      	mov	r6, r0
 8010d5c:	ee18 0a90 	vmov	r0, s17
 8010d60:	460f      	mov	r7, r1
 8010d62:	f7ef fbfb 	bl	800055c <__aeabi_f2d>
 8010d66:	a36c      	add	r3, pc, #432	; (adr r3, 8010f18 <findDirection+0x268>)
 8010d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6c:	f7ef fc4e 	bl	800060c <__aeabi_dmul>
 8010d70:	4602      	mov	r2, r0
 8010d72:	460b      	mov	r3, r1
 8010d74:	4630      	mov	r0, r6
 8010d76:	4639      	mov	r1, r7
 8010d78:	f7ef fed8 	bl	8000b2c <__aeabi_dcmpgt>
 8010d7c:	2800      	cmp	r0, #0
 8010d7e:	d0d9      	beq.n	8010d34 <findDirection+0x84>
 8010d80:	ee19 0a10 	vmov	r0, s18
 8010d84:	f7ef fbea 	bl	800055c <__aeabi_f2d>
 8010d88:	a363      	add	r3, pc, #396	; (adr r3, 8010f18 <findDirection+0x268>)
 8010d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8e:	f7ef fc3d 	bl	800060c <__aeabi_dmul>
 8010d92:	4602      	mov	r2, r0
 8010d94:	460b      	mov	r3, r1
 8010d96:	4630      	mov	r0, r6
 8010d98:	4639      	mov	r1, r7
 8010d9a:	f7ef fec7 	bl	8000b2c <__aeabi_dcmpgt>
 8010d9e:	ecbd 8b04 	vpop	{d8-d9}
 8010da2:	2800      	cmp	r0, #0
 8010da4:	bf18      	it	ne
 8010da6:	2401      	movne	r4, #1
 8010da8:	4620      	mov	r0, r4
 8010daa:	bdd0      	pop	{r4, r6, r7, pc}
 8010dac:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8010db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db4:	ee19 0a10 	vmov	r0, s18
 8010db8:	dd7f      	ble.n	8010eba <findDirection+0x20a>
 8010dba:	f7ef fbcf 	bl	800055c <__aeabi_f2d>
 8010dbe:	4606      	mov	r6, r0
 8010dc0:	ee18 0a10 	vmov	r0, s16
 8010dc4:	460f      	mov	r7, r1
 8010dc6:	f7ef fbc9 	bl	800055c <__aeabi_f2d>
 8010dca:	a353      	add	r3, pc, #332	; (adr r3, 8010f18 <findDirection+0x268>)
 8010dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd0:	f7ef fc1c 	bl	800060c <__aeabi_dmul>
 8010dd4:	4602      	mov	r2, r0
 8010dd6:	460b      	mov	r3, r1
 8010dd8:	4630      	mov	r0, r6
 8010dda:	4639      	mov	r1, r7
 8010ddc:	f7ef fea6 	bl	8000b2c <__aeabi_dcmpgt>
 8010de0:	2800      	cmp	r0, #0
 8010de2:	d0a7      	beq.n	8010d34 <findDirection+0x84>
 8010de4:	ee18 0a90 	vmov	r0, s17
 8010de8:	f7ef fbb8 	bl	800055c <__aeabi_f2d>
 8010dec:	a34a      	add	r3, pc, #296	; (adr r3, 8010f18 <findDirection+0x268>)
 8010dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010df2:	f7ef fc0b 	bl	800060c <__aeabi_dmul>
 8010df6:	4602      	mov	r2, r0
 8010df8:	460b      	mov	r3, r1
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	4639      	mov	r1, r7
 8010dfe:	f7ef fe95 	bl	8000b2c <__aeabi_dcmpgt>
 8010e02:	ecbd 8b04 	vpop	{d8-d9}
 8010e06:	2800      	cmp	r0, #0
 8010e08:	bf18      	it	ne
 8010e0a:	2400      	movne	r4, #0
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	bdd0      	pop	{r4, r6, r7, pc}
 8010e10:	f7ef fba4 	bl	800055c <__aeabi_f2d>
 8010e14:	4606      	mov	r6, r0
 8010e16:	ee18 0a10 	vmov	r0, s16
 8010e1a:	460f      	mov	r7, r1
 8010e1c:	f7ef fb9e 	bl	800055c <__aeabi_f2d>
 8010e20:	a33d      	add	r3, pc, #244	; (adr r3, 8010f18 <findDirection+0x268>)
 8010e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e26:	f7ef fbf1 	bl	800060c <__aeabi_dmul>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	460b      	mov	r3, r1
 8010e2e:	4630      	mov	r0, r6
 8010e30:	4639      	mov	r1, r7
 8010e32:	f7ef fe7b 	bl	8000b2c <__aeabi_dcmpgt>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	f43f af7c 	beq.w	8010d34 <findDirection+0x84>
 8010e3c:	ee19 0a10 	vmov	r0, s18
 8010e40:	f7ef fb8c 	bl	800055c <__aeabi_f2d>
 8010e44:	a334      	add	r3, pc, #208	; (adr r3, 8010f18 <findDirection+0x268>)
 8010e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e4a:	f7ef fbdf 	bl	800060c <__aeabi_dmul>
 8010e4e:	4602      	mov	r2, r0
 8010e50:	460b      	mov	r3, r1
 8010e52:	4630      	mov	r0, r6
 8010e54:	4639      	mov	r1, r7
 8010e56:	f7ef fe69 	bl	8000b2c <__aeabi_dcmpgt>
 8010e5a:	2800      	cmp	r0, #0
 8010e5c:	bf18      	it	ne
 8010e5e:	2405      	movne	r4, #5
 8010e60:	e768      	b.n	8010d34 <findDirection+0x84>
 8010e62:	f7ef fb7b 	bl	800055c <__aeabi_f2d>
 8010e66:	4606      	mov	r6, r0
 8010e68:	ee18 0a90 	vmov	r0, s17
 8010e6c:	460f      	mov	r7, r1
 8010e6e:	f7ef fb75 	bl	800055c <__aeabi_f2d>
 8010e72:	a329      	add	r3, pc, #164	; (adr r3, 8010f18 <findDirection+0x268>)
 8010e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e78:	f7ef fbc8 	bl	800060c <__aeabi_dmul>
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	460b      	mov	r3, r1
 8010e80:	4630      	mov	r0, r6
 8010e82:	4639      	mov	r1, r7
 8010e84:	f7ef fe52 	bl	8000b2c <__aeabi_dcmpgt>
 8010e88:	2800      	cmp	r0, #0
 8010e8a:	f43f af53 	beq.w	8010d34 <findDirection+0x84>
 8010e8e:	ee19 0a10 	vmov	r0, s18
 8010e92:	f7ef fb63 	bl	800055c <__aeabi_f2d>
 8010e96:	a320      	add	r3, pc, #128	; (adr r3, 8010f18 <findDirection+0x268>)
 8010e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e9c:	f7ef fbb6 	bl	800060c <__aeabi_dmul>
 8010ea0:	4602      	mov	r2, r0
 8010ea2:	460b      	mov	r3, r1
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	4639      	mov	r1, r7
 8010ea8:	f7ef fe40 	bl	8000b2c <__aeabi_dcmpgt>
 8010eac:	ecbd 8b04 	vpop	{d8-d9}
 8010eb0:	2800      	cmp	r0, #0
 8010eb2:	bf18      	it	ne
 8010eb4:	2403      	movne	r4, #3
 8010eb6:	4620      	mov	r0, r4
 8010eb8:	bdd0      	pop	{r4, r6, r7, pc}
 8010eba:	f7ef fb4f 	bl	800055c <__aeabi_f2d>
 8010ebe:	4606      	mov	r6, r0
 8010ec0:	ee18 0a10 	vmov	r0, s16
 8010ec4:	460f      	mov	r7, r1
 8010ec6:	f7ef fb49 	bl	800055c <__aeabi_f2d>
 8010eca:	a313      	add	r3, pc, #76	; (adr r3, 8010f18 <findDirection+0x268>)
 8010ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed0:	f7ef fb9c 	bl	800060c <__aeabi_dmul>
 8010ed4:	4602      	mov	r2, r0
 8010ed6:	460b      	mov	r3, r1
 8010ed8:	4630      	mov	r0, r6
 8010eda:	4639      	mov	r1, r7
 8010edc:	f7ef fe26 	bl	8000b2c <__aeabi_dcmpgt>
 8010ee0:	2800      	cmp	r0, #0
 8010ee2:	f43f af27 	beq.w	8010d34 <findDirection+0x84>
 8010ee6:	ee18 0a90 	vmov	r0, s17
 8010eea:	f7ef fb37 	bl	800055c <__aeabi_f2d>
 8010eee:	a30a      	add	r3, pc, #40	; (adr r3, 8010f18 <findDirection+0x268>)
 8010ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef4:	f7ef fb8a 	bl	800060c <__aeabi_dmul>
 8010ef8:	4602      	mov	r2, r0
 8010efa:	460b      	mov	r3, r1
 8010efc:	4630      	mov	r0, r6
 8010efe:	4639      	mov	r1, r7
 8010f00:	f7ef fe14 	bl	8000b2c <__aeabi_dcmpgt>
 8010f04:	ecbd 8b04 	vpop	{d8-d9}
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	bf18      	it	ne
 8010f0c:	2402      	movne	r4, #2
 8010f0e:	4620      	mov	r0, r4
 8010f10:	bdd0      	pop	{r4, r6, r7, pc}
 8010f12:	bf00      	nop
 8010f14:	f3af 8000 	nop.w
 8010f18:	e0000000 	.word	0xe0000000
 8010f1c:	3ff6b851 	.word	0x3ff6b851

08010f20 <updateOrientation>:
 8010f20:	2300      	movs	r3, #0
 8010f22:	6003      	str	r3, [r0, #0]
 8010f24:	6043      	str	r3, [r0, #4]
 8010f26:	7203      	strb	r3, [r0, #8]
 8010f28:	f891 c000 	ldrb.w	ip, [r1]
 8010f2c:	784a      	ldrb	r2, [r1, #1]
 8010f2e:	f1ac 0342 	sub.w	r3, ip, #66	; 0x42
 8010f32:	2b17      	cmp	r3, #23
 8010f34:	bf98      	it	ls
 8010f36:	f10c 0c20 	addls.w	ip, ip, #32
 8010f3a:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 8010f3e:	bf98      	it	ls
 8010f40:	fa5f fc8c 	uxtbls.w	ip, ip
 8010f44:	2b17      	cmp	r3, #23
 8010f46:	788b      	ldrb	r3, [r1, #2]
 8010f48:	bf98      	it	ls
 8010f4a:	3220      	addls	r2, #32
 8010f4c:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 8010f50:	bf98      	it	ls
 8010f52:	b2d2      	uxtbls	r2, r2
 8010f54:	2917      	cmp	r1, #23
 8010f56:	bf98      	it	ls
 8010f58:	3320      	addls	r3, #32
 8010f5a:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 8010f5e:	bf98      	it	ls
 8010f60:	b2db      	uxtbls	r3, r3
 8010f62:	f1bc 0f13 	cmp.w	ip, #19
 8010f66:	d80d      	bhi.n	8010f84 <updateOrientation+0x64>
 8010f68:	e8df f00c 	tbb	[pc, ip]
 8010f6c:	0c0c0a32 	.word	0x0c0c0a32
 8010f70:	0c0c0c0c 	.word	0x0c0c0c0c
 8010f74:	0c350c0c 	.word	0x0c350c0c
 8010f78:	380c0c0c 	.word	0x380c0c0c
 8010f7c:	3e0c3b0c 	.word	0x3e0c3b0c
 8010f80:	2101      	movs	r1, #1
 8010f82:	7001      	strb	r1, [r0, #0]
 8010f84:	3a64      	subs	r2, #100	; 0x64
 8010f86:	2a13      	cmp	r2, #19
 8010f88:	d80d      	bhi.n	8010fa6 <updateOrientation+0x86>
 8010f8a:	e8df f002 	tbb	[pc, r2]
 8010f8e:	0a30      	.short	0x0a30
 8010f90:	0c0c0c0c 	.word	0x0c0c0c0c
 8010f94:	0c0c0c0c 	.word	0x0c0c0c0c
 8010f98:	0c0c0c33 	.word	0x0c0c0c33
 8010f9c:	390c360c 	.word	0x390c360c
 8010fa0:	3c0c      	.short	0x3c0c
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	7042      	strb	r2, [r0, #1]
 8010fa6:	3b64      	subs	r3, #100	; 0x64
 8010fa8:	2b13      	cmp	r3, #19
 8010faa:	d80d      	bhi.n	8010fc8 <updateOrientation+0xa8>
 8010fac:	e8df f003 	tbb	[pc, r3]
 8010fb0:	0c0c2e0a 	.word	0x0c0c2e0a
 8010fb4:	0c0c0c0c 	.word	0x0c0c0c0c
 8010fb8:	0c310c0c 	.word	0x0c310c0c
 8010fbc:	340c0c0c 	.word	0x340c0c0c
 8010fc0:	0d0c370c 	.word	0x0d0c370c
 8010fc4:	23ff      	movs	r3, #255	; 0xff
 8010fc6:	7203      	strb	r3, [r0, #8]
 8010fc8:	4770      	bx	lr
 8010fca:	23ff      	movs	r3, #255	; 0xff
 8010fcc:	7083      	strb	r3, [r0, #2]
 8010fce:	4770      	bx	lr
 8010fd0:	21ff      	movs	r1, #255	; 0xff
 8010fd2:	7181      	strb	r1, [r0, #6]
 8010fd4:	e7d6      	b.n	8010f84 <updateOrientation+0x64>
 8010fd6:	2101      	movs	r1, #1
 8010fd8:	70c1      	strb	r1, [r0, #3]
 8010fda:	e7d3      	b.n	8010f84 <updateOrientation+0x64>
 8010fdc:	21ff      	movs	r1, #255	; 0xff
 8010fde:	70c1      	strb	r1, [r0, #3]
 8010fe0:	e7d0      	b.n	8010f84 <updateOrientation+0x64>
 8010fe2:	2101      	movs	r1, #1
 8010fe4:	7181      	strb	r1, [r0, #6]
 8010fe6:	e7cd      	b.n	8010f84 <updateOrientation+0x64>
 8010fe8:	21ff      	movs	r1, #255	; 0xff
 8010fea:	7001      	strb	r1, [r0, #0]
 8010fec:	e7ca      	b.n	8010f84 <updateOrientation+0x64>
 8010fee:	22ff      	movs	r2, #255	; 0xff
 8010ff0:	71c2      	strb	r2, [r0, #7]
 8010ff2:	e7d8      	b.n	8010fa6 <updateOrientation+0x86>
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	7102      	strb	r2, [r0, #4]
 8010ff8:	e7d5      	b.n	8010fa6 <updateOrientation+0x86>
 8010ffa:	22ff      	movs	r2, #255	; 0xff
 8010ffc:	7102      	strb	r2, [r0, #4]
 8010ffe:	e7d2      	b.n	8010fa6 <updateOrientation+0x86>
 8011000:	2201      	movs	r2, #1
 8011002:	71c2      	strb	r2, [r0, #7]
 8011004:	e7cf      	b.n	8010fa6 <updateOrientation+0x86>
 8011006:	22ff      	movs	r2, #255	; 0xff
 8011008:	7042      	strb	r2, [r0, #1]
 801100a:	e7cc      	b.n	8010fa6 <updateOrientation+0x86>
 801100c:	2301      	movs	r3, #1
 801100e:	7083      	strb	r3, [r0, #2]
 8011010:	4770      	bx	lr
 8011012:	2301      	movs	r3, #1
 8011014:	7143      	strb	r3, [r0, #5]
 8011016:	4770      	bx	lr
 8011018:	23ff      	movs	r3, #255	; 0xff
 801101a:	7143      	strb	r3, [r0, #5]
 801101c:	4770      	bx	lr
 801101e:	2301      	movs	r3, #1
 8011020:	7203      	strb	r3, [r0, #8]
 8011022:	4770      	bx	lr

08011024 <qmult>:
 8011024:	ed91 2a03 	vldr	s4, [r1, #12]
 8011028:	ed90 3a01 	vldr	s6, [r0, #4]
 801102c:	edd0 5a02 	vldr	s11, [r0, #8]
 8011030:	edd1 4a01 	vldr	s9, [r1, #4]
 8011034:	ed90 4a00 	vldr	s8, [r0]
 8011038:	ed91 5a02 	vldr	s10, [r1, #8]
 801103c:	edd1 3a00 	vldr	s7, [r1]
 8011040:	edd0 2a03 	vldr	s5, [r0, #12]
 8011044:	ee25 6aa4 	vmul.f32	s12, s11, s9
 8011048:	ee62 6a03 	vmul.f32	s13, s4, s6
 801104c:	ee22 7a25 	vmul.f32	s14, s4, s11
 8011050:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 8011054:	eea4 6a02 	vfma.f32	s12, s8, s4
 8011058:	eee4 6a05 	vfma.f32	s13, s8, s10
 801105c:	eea3 7a23 	vfma.f32	s14, s6, s7
 8011060:	eee4 7a63 	vfms.f32	s15, s8, s7
 8011064:	eea2 6aa3 	vfma.f32	s12, s5, s7
 8011068:	eee4 6aa2 	vfma.f32	s13, s9, s5
 801106c:	eea5 7a22 	vfma.f32	s14, s10, s5
 8011070:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011074:	eea3 6a45 	vfms.f32	s12, s6, s10
 8011078:	eee5 6ae3 	vfms.f32	s13, s11, s7
 801107c:	eea4 7a64 	vfms.f32	s14, s8, s9
 8011080:	eee5 7a65 	vfms.f32	s15, s10, s11
 8011084:	ed82 6a00 	vstr	s12, [r2]
 8011088:	edc2 6a01 	vstr	s13, [r2, #4]
 801108c:	ed82 7a02 	vstr	s14, [r2, #8]
 8011090:	edc2 7a03 	vstr	s15, [r2, #12]
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop

08011098 <dataDerivative5>:
 8011098:	ed90 7a01 	vldr	s14, [r0, #4]
 801109c:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 80110a0:	edd0 6a04 	vldr	s13, [r0, #16]
 80110a4:	ed90 6a00 	vldr	s12, [r0]
 80110a8:	ed90 4a02 	vldr	s8, [r0, #8]
 80110ac:	edd0 4a09 	vldr	s9, [r0, #36]	; 0x24
 80110b0:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
 80110b4:	eee7 7a05 	vfma.f32	s15, s14, s10
 80110b8:	ed90 7a03 	vldr	s14, [r0, #12]
 80110bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80110c0:	edd0 6a0b 	vldr	s13, [r0, #44]	; 0x2c
 80110c4:	ee96 7a05 	vfnms.f32	s14, s12, s10
 80110c8:	eee4 6a05 	vfma.f32	s13, s8, s10
 80110cc:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 80110d0:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
 80110d4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80110d8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80110dc:	ee37 7a24 	vadd.f32	s14, s14, s9
 80110e0:	eeb0 6a66 	vmov.f32	s12, s13
 80110e4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8011120 <dataDerivative5+0x88>
 80110e8:	eea5 7a25 	vfma.f32	s14, s10, s11
 80110ec:	ee60 6a26 	vmul.f32	s13, s0, s13
 80110f0:	ed90 5a05 	vldr	s10, [r0, #20]
 80110f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80110f8:	ee36 6a45 	vsub.f32	s12, s12, s10
 80110fc:	ed90 5a0e 	vldr	s10, [r0, #56]	; 0x38
 8011100:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011104:	eea5 6a25 	vfma.f32	s12, s10, s11
 8011108:	ee27 0aa7 	vmul.f32	s0, s15, s15
 801110c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011110:	eea7 0a07 	vfma.f32	s0, s14, s14
 8011114:	eea6 0aa6 	vfma.f32	s0, s13, s13
 8011118:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801111c:	4770      	bx	lr
 801111e:	bf00      	nop
 8011120:	3dcccccd 	.word	0x3dcccccd

08011124 <b_dcm2q>:
 8011124:	ed90 5a08 	vldr	s10, [r0, #32]
 8011128:	edd0 7a00 	vldr	s15, [r0]
 801112c:	edd0 6a04 	vldr	s13, [r0, #16]
 8011130:	ee37 7a85 	vadd.f32	s14, s15, s10
 8011134:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8011138:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801113c:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 8011140:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8011144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011148:	bfc5      	ittet	gt
 801114a:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 801114e:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 8011152:	eddf 5a43 	vldrle	s11, [pc, #268]	; 8011260 <b_dcm2q+0x13c>
 8011156:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 801115a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801115e:	ee35 6a47 	vsub.f32	s12, s10, s14
 8011162:	ee35 7a07 	vadd.f32	s14, s10, s14
 8011166:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116e:	bfc5      	ittet	gt
 8011170:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 8011174:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 8011178:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 8011260 <b_dcm2q+0x13c>
 801117c:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 8011180:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 8011184:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8011188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801118c:	dd5b      	ble.n	8011246 <b_dcm2q+0x122>
 801118e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8011192:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011196:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 801119a:	eef1 4ac7 	vsqrt.f32	s9, s14
 801119e:	ee64 4a84 	vmul.f32	s9, s9, s8
 80111a2:	ee76 6a85 	vadd.f32	s13, s13, s10
 80111a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80111aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80111ae:	edd0 6a07 	vldr	s13, [r0, #28]
 80111b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80111b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ba:	bf85      	ittet	hi
 80111bc:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 80111c0:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 80111c4:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 8011260 <b_dcm2q+0x13c>
 80111c8:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 80111cc:	edd0 7a05 	vldr	s15, [r0, #20]
 80111d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80111d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80111d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111dc:	d43c      	bmi.n	8011258 <b_dcm2q+0x134>
 80111de:	bfd8      	it	le
 80111e0:	ee27 7a27 	vmulle.f32	s14, s14, s15
 80111e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80111e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80111ec:	ed81 7a00 	vstr	s14, [r1]
 80111f0:	edd0 7a06 	vldr	s15, [r0, #24]
 80111f4:	ed90 7a02 	vldr	s14, [r0, #8]
 80111f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011204:	d425      	bmi.n	8011252 <b_dcm2q+0x12e>
 8011206:	bfd8      	it	le
 8011208:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 801120c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011210:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8011214:	edc1 5a01 	vstr	s11, [r1, #4]
 8011218:	edd0 7a01 	vldr	s15, [r0, #4]
 801121c:	ed90 7a03 	vldr	s14, [r0, #12]
 8011220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801122c:	d40e      	bmi.n	801124c <b_dcm2q+0x128>
 801122e:	bfd8      	it	le
 8011230:	ee26 6a27 	vmulle.f32	s12, s12, s15
 8011234:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011238:	ee26 6a27 	vmul.f32	s12, s12, s15
 801123c:	edc1 4a03 	vstr	s9, [r1, #12]
 8011240:	ed81 6a02 	vstr	s12, [r1, #8]
 8011244:	4770      	bx	lr
 8011246:	eddf 4a06 	vldr	s9, [pc, #24]	; 8011260 <b_dcm2q+0x13c>
 801124a:	e7aa      	b.n	80111a2 <b_dcm2q+0x7e>
 801124c:	eeb1 6a46 	vneg.f32	s12, s12
 8011250:	e7f0      	b.n	8011234 <b_dcm2q+0x110>
 8011252:	eef1 5a65 	vneg.f32	s11, s11
 8011256:	e7d9      	b.n	801120c <b_dcm2q+0xe8>
 8011258:	eeb1 7a47 	vneg.f32	s14, s14
 801125c:	e7c2      	b.n	80111e4 <b_dcm2q+0xc0>
 801125e:	bf00      	nop
 8011260:	00000000 	.word	0x00000000

08011264 <getRotationMatrix>:
 8011264:	b538      	push	{r3, r4, r5, lr}
 8011266:	4613      	mov	r3, r2
 8011268:	4605      	mov	r5, r0
 801126a:	460c      	mov	r4, r1
 801126c:	4618      	mov	r0, r3
 801126e:	2224      	movs	r2, #36	; 0x24
 8011270:	2100      	movs	r1, #0
 8011272:	f007 ffcd 	bl	8019210 <memset>
 8011276:	edd5 5a00 	vldr	s11, [r5]
 801127a:	ed9f 3a49 	vldr	s6, [pc, #292]	; 80113a0 <getRotationMatrix+0x13c>
 801127e:	edc0 5a02 	vstr	s11, [r0, #8]
 8011282:	edd5 4a01 	vldr	s9, [r5, #4]
 8011286:	edc0 4a05 	vstr	s9, [r0, #20]
 801128a:	ed95 5a02 	vldr	s10, [r5, #8]
 801128e:	ed80 5a08 	vstr	s10, [r0, #32]
 8011292:	ed94 4a02 	vldr	s8, [r4, #8]
 8011296:	edd4 3a01 	vldr	s7, [r4, #4]
 801129a:	ed94 6a00 	vldr	s12, [r4]
 801129e:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 80112a2:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 80112a6:	eee3 6a85 	vfma.f32	s13, s7, s10
 80112aa:	4603      	mov	r3, r0
 80112ac:	eee6 7a24 	vfma.f32	s15, s12, s9
 80112b0:	ee25 7a46 	vnmul.f32	s14, s10, s12
 80112b4:	eeb0 6ae6 	vabs.f32	s12, s13
 80112b8:	eeb4 6ac3 	vcmpe.f32	s12, s6
 80112bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c0:	eea4 7a25 	vfma.f32	s14, s8, s11
 80112c4:	bfdc      	itt	le
 80112c6:	ee86 4a83 	vdivle.f32	s8, s13, s6
 80112ca:	eeb0 6a43 	vmovle.f32	s12, s6
 80112ce:	eef0 3ac7 	vabs.f32	s7, s14
 80112d2:	eeb4 6ae3 	vcmpe.f32	s12, s7
 80112d6:	bfd4      	ite	le
 80112d8:	ee24 4a04 	vmulle.f32	s8, s8, s8
 80112dc:	eeb7 4a00 	vmovgt.f32	s8, #112	; 0x3f800000  1.0
 80112e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e4:	ed80 7a03 	vstr	s14, [r0, #12]
 80112e8:	edc0 7a06 	vstr	s15, [r0, #24]
 80112ec:	d43f      	bmi.n	801136e <getRotationMatrix+0x10a>
 80112ee:	eec7 3a06 	vdiv.f32	s7, s14, s12
 80112f2:	eea3 4aa3 	vfma.f32	s8, s7, s7
 80112f6:	eeb0 3a44 	vmov.f32	s6, s8
 80112fa:	eeb0 4ae7 	vabs.f32	s8, s15
 80112fe:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8011302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011306:	d543      	bpl.n	8011390 <getRotationMatrix+0x12c>
 8011308:	eec6 2a04 	vdiv.f32	s5, s12, s8
 801130c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8011310:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8011314:	eeb0 6a44 	vmov.f32	s12, s8
 8011318:	eee3 3a22 	vfma.f32	s7, s6, s5
 801131c:	eeb1 4ae3 	vsqrt.f32	s8, s7
 8011320:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8011324:	ee24 6a06 	vmul.f32	s12, s8, s12
 8011328:	ee83 4a86 	vdiv.f32	s8, s7, s12
 801132c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8011330:	ee67 7a84 	vmul.f32	s15, s15, s8
 8011334:	ee66 6a84 	vmul.f32	s13, s13, s8
 8011338:	ee65 3a47 	vnmul.f32	s7, s10, s14
 801133c:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 8011340:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 8011344:	eee7 3aa4 	vfma.f32	s7, s15, s9
 8011348:	eef0 4a44 	vmov.f32	s9, s8
 801134c:	eee6 4a85 	vfma.f32	s9, s13, s10
 8011350:	eea7 6a25 	vfma.f32	s12, s14, s11
 8011354:	edc3 6a00 	vstr	s13, [r3]
 8011358:	ed83 7a03 	vstr	s14, [r3, #12]
 801135c:	edc3 7a06 	vstr	s15, [r3, #24]
 8011360:	edc3 3a01 	vstr	s7, [r3, #4]
 8011364:	edc3 4a04 	vstr	s9, [r3, #16]
 8011368:	ed83 6a07 	vstr	s12, [r3, #28]
 801136c:	bd38      	pop	{r3, r4, r5, pc}
 801136e:	eec6 2a23 	vdiv.f32	s5, s12, s7
 8011372:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8011376:	ee62 2aa2 	vmul.f32	s5, s5, s5
 801137a:	eeb0 6a63 	vmov.f32	s12, s7
 801137e:	eea4 3a22 	vfma.f32	s6, s8, s5
 8011382:	eeb0 4ae7 	vabs.f32	s8, s15
 8011386:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801138e:	d4bb      	bmi.n	8011308 <getRotationMatrix+0xa4>
 8011390:	ee87 4a86 	vdiv.f32	s8, s15, s12
 8011394:	eef0 3a43 	vmov.f32	s7, s6
 8011398:	eee4 3a04 	vfma.f32	s7, s8, s8
 801139c:	e7be      	b.n	801131c <getRotationMatrix+0xb8>
 801139e:	bf00      	nop
 80113a0:	00000000 	.word	0x00000000

080113a4 <kf_update>:
 80113a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a8:	ed2d 8b10 	vpush	{d8-d15}
 80113ac:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 80113b0:	3901      	subs	r1, #1
 80113b2:	f8dd 4490 	ldr.w	r4, [sp, #1168]	; 0x490
 80113b6:	9303      	str	r3, [sp, #12]
 80113b8:	ed94 2a00 	vldr	s4, [r4]
 80113bc:	edd4 2a01 	vldr	s5, [r4, #4]
 80113c0:	ed94 3a02 	vldr	s6, [r4, #8]
 80113c4:	edd4 3a03 	vldr	s7, [r4, #12]
 80113c8:	ed94 4a04 	vldr	s8, [r4, #16]
 80113cc:	edd4 4a05 	vldr	s9, [r4, #20]
 80113d0:	ed94 5a06 	vldr	s10, [r4, #24]
 80113d4:	edd4 5a07 	vldr	s11, [r4, #28]
 80113d8:	ed94 6a08 	vldr	s12, [r4, #32]
 80113dc:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 80113e0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80113e4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80113e8:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 801145c <kf_update+0xb8>
 80113ec:	9104      	str	r1, [sp, #16]
 80113ee:	ab0b      	add	r3, sp, #44	; 0x2c
 80113f0:	ee22 2a02 	vmul.f32	s4, s4, s4
 80113f4:	ee62 2aa2 	vmul.f32	s5, s5, s5
 80113f8:	ee23 3a03 	vmul.f32	s6, s6, s6
 80113fc:	ee63 3aa3 	vmul.f32	s7, s7, s7
 8011400:	ee24 4a04 	vmul.f32	s8, s8, s8
 8011404:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8011408:	ee25 5a05 	vmul.f32	s10, s10, s10
 801140c:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8011410:	ee26 6a06 	vmul.f32	s12, s12, s12
 8011414:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011418:	ee27 7a07 	vmul.f32	s14, s14, s14
 801141c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011420:	9302      	str	r3, [sp, #8]
 8011422:	2300      	movs	r3, #0
 8011424:	4606      	mov	r6, r0
 8011426:	9200      	str	r2, [sp, #0]
 8011428:	ed8d 2a0b 	vstr	s4, [sp, #44]	; 0x2c
 801142c:	edcd 2a0c 	vstr	s5, [sp, #48]	; 0x30
 8011430:	ed8d 3a0d 	vstr	s6, [sp, #52]	; 0x34
 8011434:	edcd 3a0e 	vstr	s7, [sp, #56]	; 0x38
 8011438:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 801143c:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
 8011440:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
 8011444:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 8011448:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801144c:	edcd 6a14 	vstr	s13, [sp, #80]	; 0x50
 8011450:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 8011454:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 8011458:	9301      	str	r3, [sp, #4]
 801145a:	e010      	b.n	801147e <kf_update+0xda>
 801145c:	00000000 	.word	0x00000000
 8011460:	9a00      	ldr	r2, [sp, #0]
 8011462:	9b01      	ldr	r3, [sp, #4]
 8011464:	3204      	adds	r2, #4
 8011466:	9200      	str	r2, [sp, #0]
 8011468:	9a02      	ldr	r2, [sp, #8]
 801146a:	3204      	adds	r2, #4
 801146c:	9202      	str	r2, [sp, #8]
 801146e:	9a03      	ldr	r2, [sp, #12]
 8011470:	3301      	adds	r3, #1
 8011472:	3204      	adds	r2, #4
 8011474:	2b0c      	cmp	r3, #12
 8011476:	9301      	str	r3, [sp, #4]
 8011478:	9203      	str	r2, [sp, #12]
 801147a:	f000 857b 	beq.w	8011f74 <kf_update+0xbd0>
 801147e:	9a04      	ldr	r2, [sp, #16]
 8011480:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8011484:	9204      	str	r2, [sp, #16]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d0ea      	beq.n	8011460 <kf_update+0xbc>
 801148a:	9a03      	ldr	r2, [sp, #12]
 801148c:	ed8d 8a17 	vstr	s16, [sp, #92]	; 0x5c
 8011490:	f106 0328 	add.w	r3, r6, #40	; 0x28
 8011494:	ac17      	add	r4, sp, #92	; 0x5c
 8011496:	edd2 da00 	vldr	s27, [r2]
 801149a:	ed92 ea0c 	vldr	s28, [r2, #48]	; 0x30
 801149e:	edd2 ea18 	vldr	s29, [r2, #96]	; 0x60
 80114a2:	ed92 fa24 	vldr	s30, [r2, #144]	; 0x90
 80114a6:	edd2 fa30 	vldr	s31, [r2, #192]	; 0xc0
 80114aa:	edd2 6a3c 	vldr	s13, [r2, #240]	; 0xf0
 80114ae:	ed92 6a48 	vldr	s12, [r2, #288]	; 0x120
 80114b2:	edd2 5a54 	vldr	s11, [r2, #336]	; 0x150
 80114b6:	ed92 5a60 	vldr	s10, [r2, #384]	; 0x180
 80114ba:	9305      	str	r3, [sp, #20]
 80114bc:	ed8d 8a18 	vstr	s16, [sp, #96]	; 0x60
 80114c0:	ed8d 8a19 	vstr	s16, [sp, #100]	; 0x64
 80114c4:	ed8d 8a1a 	vstr	s16, [sp, #104]	; 0x68
 80114c8:	ed8d 8a1b 	vstr	s16, [sp, #108]	; 0x6c
 80114cc:	ed8d 8a1c 	vstr	s16, [sp, #112]	; 0x70
 80114d0:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
 80114d4:	ed8d 8a1e 	vstr	s16, [sp, #120]	; 0x78
 80114d8:	ed8d 8a1f 	vstr	s16, [sp, #124]	; 0x7c
 80114dc:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 80114e0:	4622      	mov	r2, r4
 80114e2:	ecb3 7a01 	vldmia	r3!, {s14}
 80114e6:	ecf2 7a01 	vldmia	r2!, {s15}
 80114ea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80114ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f2:	d006      	beq.n	8011502 <kf_update+0x15e>
 80114f4:	eef5 da40 	vcmp.f32	s27, #0.0
 80114f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114fc:	bf18      	it	ne
 80114fe:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 8011502:	ed93 7a08 	vldr	s14, [r3, #32]
 8011506:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801150e:	d006      	beq.n	801151e <kf_update+0x17a>
 8011510:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8011514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011518:	bf18      	it	ne
 801151a:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 801151e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8011522:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801152a:	d006      	beq.n	801153a <kf_update+0x196>
 801152c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8011530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011534:	bf18      	it	ne
 8011536:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 801153a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 801153e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011546:	d006      	beq.n	8011556 <kf_update+0x1b2>
 8011548:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011550:	bf18      	it	ne
 8011552:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8011556:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 801155a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011562:	d006      	beq.n	8011572 <kf_update+0x1ce>
 8011564:	eef5 fa40 	vcmp.f32	s31, #0.0
 8011568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801156c:	bf18      	it	ne
 801156e:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8011572:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8011576:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801157e:	d006      	beq.n	801158e <kf_update+0x1ea>
 8011580:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011588:	bf18      	it	ne
 801158a:	eee7 7a26 	vfmane.f32	s15, s14, s13
 801158e:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8011592:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801159a:	d006      	beq.n	80115aa <kf_update+0x206>
 801159c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80115a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115a4:	bf18      	it	ne
 80115a6:	eee7 7a06 	vfmane.f32	s15, s14, s12
 80115aa:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 80115ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80115b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b6:	d006      	beq.n	80115c6 <kf_update+0x222>
 80115b8:	eef5 5a40 	vcmp.f32	s11, #0.0
 80115bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c0:	bf18      	it	ne
 80115c2:	eee7 7a25 	vfmane.f32	s15, s14, s11
 80115c6:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 80115ca:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80115ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d2:	d006      	beq.n	80115e2 <kf_update+0x23e>
 80115d4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80115d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115dc:	bf18      	it	ne
 80115de:	eee7 7a05 	vfmane.f32	s15, s14, s10
 80115e2:	4299      	cmp	r1, r3
 80115e4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80115e8:	f47f af7b 	bne.w	80114e2 <kf_update+0x13e>
 80115ec:	eef5 da40 	vcmp.f32	s27, #0.0
 80115f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f4:	eddd ba17 	vldr	s23, [sp, #92]	; 0x5c
 80115f8:	f040 8492 	bne.w	8011f20 <kf_update+0xb7c>
 80115fc:	eef0 7a6d 	vmov.f32	s15, s27
 8011600:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8011604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011608:	ed9d ca18 	vldr	s24, [sp, #96]	; 0x60
 801160c:	d006      	beq.n	801161c <kf_update+0x278>
 801160e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8011612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011616:	bf18      	it	ne
 8011618:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 801161c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8011620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011624:	ed9d aa19 	vldr	s20, [sp, #100]	; 0x64
 8011628:	d006      	beq.n	8011638 <kf_update+0x294>
 801162a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011632:	bf18      	it	ne
 8011634:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 8011638:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011640:	ed9d da1a 	vldr	s26, [sp, #104]	; 0x68
 8011644:	d006      	beq.n	8011654 <kf_update+0x2b0>
 8011646:	eeb5 da40 	vcmp.f32	s26, #0.0
 801164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801164e:	bf18      	it	ne
 8011650:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 8011654:	eef5 fa40 	vcmp.f32	s31, #0.0
 8011658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801165c:	eddd ca1b 	vldr	s25, [sp, #108]	; 0x6c
 8011660:	d006      	beq.n	8011670 <kf_update+0x2cc>
 8011662:	eef5 ca40 	vcmp.f32	s25, #0.0
 8011666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801166a:	bf18      	it	ne
 801166c:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 8011670:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011678:	ed9d ba1c 	vldr	s22, [sp, #112]	; 0x70
 801167c:	d006      	beq.n	801168c <kf_update+0x2e8>
 801167e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8011682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011686:	bf18      	it	ne
 8011688:	eeeb 7a26 	vfmane.f32	s15, s22, s13
 801168c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011694:	eddd aa1d 	vldr	s21, [sp, #116]	; 0x74
 8011698:	d006      	beq.n	80116a8 <kf_update+0x304>
 801169a:	eef5 aa40 	vcmp.f32	s21, #0.0
 801169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a2:	bf18      	it	ne
 80116a4:	eeea 7a86 	vfmane.f32	s15, s21, s12
 80116a8:	eef5 5a40 	vcmp.f32	s11, #0.0
 80116ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b0:	eddd 9a1e 	vldr	s19, [sp, #120]	; 0x78
 80116b4:	d006      	beq.n	80116c4 <kf_update+0x320>
 80116b6:	eef5 9a40 	vcmp.f32	s19, #0.0
 80116ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116be:	bf18      	it	ne
 80116c0:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 80116c4:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80116c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116cc:	ed9d 9a1f 	vldr	s18, [sp, #124]	; 0x7c
 80116d0:	d006      	beq.n	80116e0 <kf_update+0x33c>
 80116d2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80116d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116da:	bf18      	it	ne
 80116dc:	eee9 7a05 	vfmane.f32	s15, s18, s10
 80116e0:	9b02      	ldr	r3, [sp, #8]
 80116e2:	ed93 7a00 	vldr	s14, [r3]
 80116e6:	9b01      	ldr	r3, [sp, #4]
 80116e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80116ec:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80116f0:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 80116f4:	2b05      	cmp	r3, #5
 80116f6:	ee6b ba87 	vmul.f32	s23, s23, s14
 80116fa:	ee2c ca07 	vmul.f32	s24, s24, s14
 80116fe:	ee2a aa07 	vmul.f32	s20, s20, s14
 8011702:	ee2d da07 	vmul.f32	s26, s26, s14
 8011706:	ee67 ca2c 	vmul.f32	s25, s14, s25
 801170a:	ee27 ba0b 	vmul.f32	s22, s14, s22
 801170e:	ee67 aa2a 	vmul.f32	s21, s14, s21
 8011712:	ee69 9a87 	vmul.f32	s19, s19, s14
 8011716:	ee29 9a07 	vmul.f32	s18, s18, s14
 801171a:	edcd ba17 	vstr	s23, [sp, #92]	; 0x5c
 801171e:	ed8d ca18 	vstr	s24, [sp, #96]	; 0x60
 8011722:	ed8d aa19 	vstr	s20, [sp, #100]	; 0x64
 8011726:	ed8d da1a 	vstr	s26, [sp, #104]	; 0x68
 801172a:	edcd ca1b 	vstr	s25, [sp, #108]	; 0x6c
 801172e:	ed8d ba1c 	vstr	s22, [sp, #112]	; 0x70
 8011732:	edcd aa1d 	vstr	s21, [sp, #116]	; 0x74
 8011736:	edcd 9a1e 	vstr	s19, [sp, #120]	; 0x78
 801173a:	ed8d 9a1f 	vstr	s18, [sp, #124]	; 0x7c
 801173e:	f340 83eb 	ble.w	8011f18 <kf_update+0xb74>
 8011742:	eef5 da40 	vcmp.f32	s27, #0.0
 8011746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801174a:	f000 8456 	beq.w	8011ffa <kf_update+0xc56>
 801174e:	edd6 7a01 	vldr	s15, [r6, #4]
 8011752:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801175a:	f040 8477 	bne.w	801204c <kf_update+0xca8>
 801175e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8011762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011766:	d008      	beq.n	801177a <kf_update+0x3d6>
 8011768:	ed96 7a02 	vldr	s14, [r6, #8]
 801176c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011774:	bf18      	it	ne
 8011776:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 801177a:	eef5 ea40 	vcmp.f32	s29, #0.0
 801177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011782:	d008      	beq.n	8011796 <kf_update+0x3f2>
 8011784:	ed96 7a03 	vldr	s14, [r6, #12]
 8011788:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011790:	bf18      	it	ne
 8011792:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8011796:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801179e:	d008      	beq.n	80117b2 <kf_update+0x40e>
 80117a0:	ed96 7a04 	vldr	s14, [r6, #16]
 80117a4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80117a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ac:	bf18      	it	ne
 80117ae:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 80117b2:	eef5 fa40 	vcmp.f32	s31, #0.0
 80117b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ba:	d008      	beq.n	80117ce <kf_update+0x42a>
 80117bc:	ed96 7a05 	vldr	s14, [r6, #20]
 80117c0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80117c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c8:	bf18      	it	ne
 80117ca:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 80117ce:	eef5 6a40 	vcmp.f32	s13, #0.0
 80117d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117d6:	d008      	beq.n	80117ea <kf_update+0x446>
 80117d8:	ed96 7a06 	vldr	s14, [r6, #24]
 80117dc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80117e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e4:	bf18      	it	ne
 80117e6:	eee7 7a26 	vfmane.f32	s15, s14, s13
 80117ea:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80117ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f2:	d008      	beq.n	8011806 <kf_update+0x462>
 80117f4:	ed96 7a07 	vldr	s14, [r6, #28]
 80117f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80117fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011800:	bf18      	it	ne
 8011802:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8011806:	eef5 5a40 	vcmp.f32	s11, #0.0
 801180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801180e:	d008      	beq.n	8011822 <kf_update+0x47e>
 8011810:	ed96 7a08 	vldr	s14, [r6, #32]
 8011814:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801181c:	bf18      	it	ne
 801181e:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8011822:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8011826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801182a:	d008      	beq.n	801183e <kf_update+0x49a>
 801182c:	ed96 7a09 	vldr	s14, [r6, #36]	; 0x24
 8011830:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011838:	bf18      	it	ne
 801183a:	eee7 7a05 	vfmane.f32	s15, s14, s10
 801183e:	9b00      	ldr	r3, [sp, #0]
 8011840:	edd3 8a00 	vldr	s17, [r3]
 8011844:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8011848:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801184c:	2100      	movs	r1, #0
 801184e:	a868      	add	r0, sp, #416	; 0x1a0
 8011850:	ed8d 5a09 	vstr	s10, [sp, #36]	; 0x24
 8011854:	edcd 5a08 	vstr	s11, [sp, #32]
 8011858:	ed8d 6a07 	vstr	s12, [sp, #28]
 801185c:	edcd 6a06 	vstr	s13, [sp, #24]
 8011860:	f007 fcd6 	bl	8019210 <memset>
 8011864:	ab68      	add	r3, sp, #416	; 0x1a0
 8011866:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
 801186a:	eddd 5a08 	vldr	s11, [sp, #32]
 801186e:	ed9d 6a07 	vldr	s12, [sp, #28]
 8011872:	eddd 6a06 	vldr	s13, [sp, #24]
 8011876:	a971      	add	r1, sp, #452	; 0x1c4
 8011878:	461a      	mov	r2, r3
 801187a:	ecf4 7a01 	vldmia	r4!, {s15}
 801187e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011886:	d062      	beq.n	801194e <kf_update+0x5aa>
 8011888:	eef5 da40 	vcmp.f32	s27, #0.0
 801188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011890:	d005      	beq.n	801189e <kf_update+0x4fa>
 8011892:	ed92 7a00 	vldr	s14, [r2]
 8011896:	eea7 7aad 	vfma.f32	s14, s15, s27
 801189a:	ed82 7a00 	vstr	s14, [r2]
 801189e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80118a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a6:	d005      	beq.n	80118b4 <kf_update+0x510>
 80118a8:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 80118ac:	eea7 7a8e 	vfma.f32	s14, s15, s28
 80118b0:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 80118b4:	eef5 ea40 	vcmp.f32	s29, #0.0
 80118b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118bc:	d005      	beq.n	80118ca <kf_update+0x526>
 80118be:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 80118c2:	eea7 7aae 	vfma.f32	s14, s15, s29
 80118c6:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 80118ca:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80118ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d2:	d005      	beq.n	80118e0 <kf_update+0x53c>
 80118d4:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 80118d8:	eea7 7a8f 	vfma.f32	s14, s15, s30
 80118dc:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 80118e0:	eef5 fa40 	vcmp.f32	s31, #0.0
 80118e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e8:	d005      	beq.n	80118f6 <kf_update+0x552>
 80118ea:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 80118ee:	eea7 7aaf 	vfma.f32	s14, s15, s31
 80118f2:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 80118f6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80118fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118fe:	d005      	beq.n	801190c <kf_update+0x568>
 8011900:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 8011904:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011908:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 801190c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011914:	d005      	beq.n	8011922 <kf_update+0x57e>
 8011916:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 801191a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801191e:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 8011922:	eef5 5a40 	vcmp.f32	s11, #0.0
 8011926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801192a:	d005      	beq.n	8011938 <kf_update+0x594>
 801192c:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 8011930:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8011934:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 8011938:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011940:	d005      	beq.n	801194e <kf_update+0x5aa>
 8011942:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 8011946:	eea7 7a85 	vfma.f32	s14, s15, s10
 801194a:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 801194e:	3204      	adds	r2, #4
 8011950:	4291      	cmp	r1, r2
 8011952:	d192      	bne.n	801187a <kf_update+0x4d6>
 8011954:	afb9      	add	r7, sp, #740	; 0x2e4
 8011956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801195a:	a868      	add	r0, sp, #416	; 0x1a0
 801195c:	463a      	mov	r2, r7
 801195e:	f04f 0b02 	mov.w	fp, #2
 8011962:	f04f 0e03 	mov.w	lr, #3
 8011966:	f04f 0c04 	mov.w	ip, #4
 801196a:	f04f 0a05 	mov.w	sl, #5
 801196e:	f04f 0906 	mov.w	r9, #6
 8011972:	f04f 0807 	mov.w	r8, #7
 8011976:	2408      	movs	r4, #8
 8011978:	2100      	movs	r1, #0
 801197a:	9306      	str	r3, [sp, #24]
 801197c:	e07b      	b.n	8011a76 <kf_update+0x6d2>
 801197e:	edd0 7a00 	vldr	s15, [r0]
 8011982:	ed82 8a01 	vstr	s16, [r2, #4]
 8011986:	eef1 7a67 	vneg.f32	s15, s15
 801198a:	2901      	cmp	r1, #1
 801198c:	edc0 7a00 	vstr	s15, [r0]
 8011990:	f1a4 0507 	sub.w	r5, r4, #7
 8011994:	f000 8110 	beq.w	8011bb8 <kf_update+0x814>
 8011998:	ab68      	add	r3, sp, #416	; 0x1a0
 801199a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801199e:	edd5 7a00 	vldr	s15, [r5]
 80119a2:	ed82 8a02 	vstr	s16, [r2, #8]
 80119a6:	eef1 7a67 	vneg.f32	s15, s15
 80119aa:	2902      	cmp	r1, #2
 80119ac:	edc5 7a00 	vstr	s15, [r5]
 80119b0:	f000 80ef 	beq.w	8011b92 <kf_update+0x7ee>
 80119b4:	ab68      	add	r3, sp, #416	; 0x1a0
 80119b6:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 80119ba:	edd5 7a00 	vldr	s15, [r5]
 80119be:	ed82 8a03 	vstr	s16, [r2, #12]
 80119c2:	eef1 7a67 	vneg.f32	s15, s15
 80119c6:	2903      	cmp	r1, #3
 80119c8:	edc5 7a00 	vstr	s15, [r5]
 80119cc:	d176      	bne.n	8011abc <kf_update+0x718>
 80119ce:	edd0 7a03 	vldr	s15, [r0, #12]
 80119d2:	ed82 8a04 	vstr	s16, [r2, #16]
 80119d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119da:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 80119de:	edc0 7a03 	vstr	s15, [r0, #12]
 80119e2:	edd5 7a00 	vldr	s15, [r5]
 80119e6:	ed82 8a05 	vstr	s16, [r2, #20]
 80119ea:	eef1 7a67 	vneg.f32	s15, s15
 80119ee:	edc5 7a00 	vstr	s15, [r5]
 80119f2:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 80119f6:	edd5 7a00 	vldr	s15, [r5]
 80119fa:	ed82 8a06 	vstr	s16, [r2, #24]
 80119fe:	eef1 7a67 	vneg.f32	s15, s15
 8011a02:	edc5 7a00 	vstr	s15, [r5]
 8011a06:	ab68      	add	r3, sp, #416	; 0x1a0
 8011a08:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8011a0c:	edd5 7a00 	vldr	s15, [r5]
 8011a10:	ed82 8a07 	vstr	s16, [r2, #28]
 8011a14:	eef1 7a67 	vneg.f32	s15, s15
 8011a18:	2907      	cmp	r1, #7
 8011a1a:	edc5 7a00 	vstr	s15, [r5]
 8011a1e:	f040 80a4 	bne.w	8011b6a <kf_update+0x7c6>
 8011a22:	edd0 7a07 	vldr	s15, [r0, #28]
 8011a26:	ed82 8a08 	vstr	s16, [r2, #32]
 8011a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a2e:	edc0 7a07 	vstr	s15, [r0, #28]
 8011a32:	ab68      	add	r3, sp, #416	; 0x1a0
 8011a34:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 8011a38:	edd5 7a00 	vldr	s15, [r5]
 8011a3c:	00a5      	lsls	r5, r4, #2
 8011a3e:	eef1 7a67 	vneg.f32	s15, s15
 8011a42:	ab68      	add	r3, sp, #416	; 0x1a0
 8011a44:	3101      	adds	r1, #1
 8011a46:	441d      	add	r5, r3
 8011a48:	2909      	cmp	r1, #9
 8011a4a:	edc5 7a00 	vstr	s15, [r5]
 8011a4e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8011a52:	f104 0409 	add.w	r4, r4, #9
 8011a56:	f100 0024 	add.w	r0, r0, #36	; 0x24
 8011a5a:	f108 0809 	add.w	r8, r8, #9
 8011a5e:	f109 0909 	add.w	r9, r9, #9
 8011a62:	f10a 0a09 	add.w	sl, sl, #9
 8011a66:	f10c 0c09 	add.w	ip, ip, #9
 8011a6a:	f10e 0e09 	add.w	lr, lr, #9
 8011a6e:	f10b 0b09 	add.w	fp, fp, #9
 8011a72:	f000 80d2 	beq.w	8011c1a <kf_update+0x876>
 8011a76:	ed82 8a00 	vstr	s16, [r2]
 8011a7a:	2900      	cmp	r1, #0
 8011a7c:	f47f af7f 	bne.w	801197e <kf_update+0x5da>
 8011a80:	eddd 7a68 	vldr	s15, [sp, #416]	; 0x1a0
 8011a84:	ed82 8a01 	vstr	s16, [r2, #4]
 8011a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a8c:	ab68      	add	r3, sp, #416	; 0x1a0
 8011a8e:	1fe5      	subs	r5, r4, #7
 8011a90:	edc0 7a00 	vstr	s15, [r0]
 8011a94:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8011a98:	edd5 7a00 	vldr	s15, [r5]
 8011a9c:	ed82 8a02 	vstr	s16, [r2, #8]
 8011aa0:	eef1 7a67 	vneg.f32	s15, s15
 8011aa4:	edc5 7a00 	vstr	s15, [r5]
 8011aa8:	ed82 8a03 	vstr	s16, [r2, #12]
 8011aac:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8011ab0:	edd5 7a00 	vldr	s15, [r5]
 8011ab4:	eef1 7a67 	vneg.f32	s15, s15
 8011ab8:	edc5 7a00 	vstr	s15, [r5]
 8011abc:	ab68      	add	r3, sp, #416	; 0x1a0
 8011abe:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8011ac2:	edd5 7a00 	vldr	s15, [r5]
 8011ac6:	ed82 8a04 	vstr	s16, [r2, #16]
 8011aca:	eef1 7a67 	vneg.f32	s15, s15
 8011ace:	2904      	cmp	r1, #4
 8011ad0:	edc5 7a00 	vstr	s15, [r5]
 8011ad4:	d02d      	beq.n	8011b32 <kf_update+0x78e>
 8011ad6:	ab68      	add	r3, sp, #416	; 0x1a0
 8011ad8:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 8011adc:	edd5 7a00 	vldr	s15, [r5]
 8011ae0:	ed82 8a05 	vstr	s16, [r2, #20]
 8011ae4:	eef1 7a67 	vneg.f32	s15, s15
 8011ae8:	2905      	cmp	r1, #5
 8011aea:	edc5 7a00 	vstr	s15, [r5]
 8011aee:	d077      	beq.n	8011be0 <kf_update+0x83c>
 8011af0:	ab68      	add	r3, sp, #416	; 0x1a0
 8011af2:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8011af6:	edd5 7a00 	vldr	s15, [r5]
 8011afa:	ed82 8a06 	vstr	s16, [r2, #24]
 8011afe:	eef1 7a67 	vneg.f32	s15, s15
 8011b02:	2906      	cmp	r1, #6
 8011b04:	edc5 7a00 	vstr	s15, [r5]
 8011b08:	f47f af7d 	bne.w	8011a06 <kf_update+0x662>
 8011b0c:	edd0 7a06 	vldr	s15, [r0, #24]
 8011b10:	ed82 8a07 	vstr	s16, [r2, #28]
 8011b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b18:	ed82 8a08 	vstr	s16, [r2, #32]
 8011b1c:	edc0 7a06 	vstr	s15, [r0, #24]
 8011b20:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8011b24:	edd5 7a00 	vldr	s15, [r5]
 8011b28:	eef1 7a67 	vneg.f32	s15, s15
 8011b2c:	edc5 7a00 	vstr	s15, [r5]
 8011b30:	e77f      	b.n	8011a32 <kf_update+0x68e>
 8011b32:	edd0 7a04 	vldr	s15, [r0, #16]
 8011b36:	ed82 8a05 	vstr	s16, [r2, #20]
 8011b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b3e:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8011b42:	edc0 7a04 	vstr	s15, [r0, #16]
 8011b46:	edd5 7a00 	vldr	s15, [r5]
 8011b4a:	ed82 8a06 	vstr	s16, [r2, #24]
 8011b4e:	eef1 7a67 	vneg.f32	s15, s15
 8011b52:	edc5 7a00 	vstr	s15, [r5]
 8011b56:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8011b5a:	edd5 7a00 	vldr	s15, [r5]
 8011b5e:	ed82 8a07 	vstr	s16, [r2, #28]
 8011b62:	eef1 7a67 	vneg.f32	s15, s15
 8011b66:	edc5 7a00 	vstr	s15, [r5]
 8011b6a:	ab68      	add	r3, sp, #416	; 0x1a0
 8011b6c:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8011b70:	edd5 7a00 	vldr	s15, [r5]
 8011b74:	ed82 8a08 	vstr	s16, [r2, #32]
 8011b78:	eef1 7a67 	vneg.f32	s15, s15
 8011b7c:	2908      	cmp	r1, #8
 8011b7e:	edc5 7a00 	vstr	s15, [r5]
 8011b82:	f47f af56 	bne.w	8011a32 <kf_update+0x68e>
 8011b86:	edd0 7a08 	vldr	s15, [r0, #32]
 8011b8a:	00a5      	lsls	r5, r4, #2
 8011b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b90:	e757      	b.n	8011a42 <kf_update+0x69e>
 8011b92:	edd0 7a02 	vldr	s15, [r0, #8]
 8011b96:	ed82 8a03 	vstr	s16, [r2, #12]
 8011b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b9e:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8011ba2:	edc0 7a02 	vstr	s15, [r0, #8]
 8011ba6:	edd5 7a00 	vldr	s15, [r5]
 8011baa:	ed82 8a04 	vstr	s16, [r2, #16]
 8011bae:	eef1 7a67 	vneg.f32	s15, s15
 8011bb2:	edc5 7a00 	vstr	s15, [r5]
 8011bb6:	e78e      	b.n	8011ad6 <kf_update+0x732>
 8011bb8:	edd0 7a01 	vldr	s15, [r0, #4]
 8011bbc:	ed82 8a02 	vstr	s16, [r2, #8]
 8011bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011bc4:	ab68      	add	r3, sp, #416	; 0x1a0
 8011bc6:	ed82 8a03 	vstr	s16, [r2, #12]
 8011bca:	edc0 7a01 	vstr	s15, [r0, #4]
 8011bce:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8011bd2:	edd5 7a00 	vldr	s15, [r5]
 8011bd6:	eef1 7a67 	vneg.f32	s15, s15
 8011bda:	edc5 7a00 	vstr	s15, [r5]
 8011bde:	e76d      	b.n	8011abc <kf_update+0x718>
 8011be0:	edd0 7a05 	vldr	s15, [r0, #20]
 8011be4:	ed82 8a06 	vstr	s16, [r2, #24]
 8011be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011bec:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8011bf0:	edc0 7a05 	vstr	s15, [r0, #20]
 8011bf4:	edd5 7a00 	vldr	s15, [r5]
 8011bf8:	ed82 8a07 	vstr	s16, [r2, #28]
 8011bfc:	eef1 7a67 	vneg.f32	s15, s15
 8011c00:	edc5 7a00 	vstr	s15, [r5]
 8011c04:	ed82 8a08 	vstr	s16, [r2, #32]
 8011c08:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8011c0c:	edd5 7a00 	vldr	s15, [r5]
 8011c10:	eef1 7a67 	vneg.f32	s15, s15
 8011c14:	edc5 7a00 	vstr	s15, [r5]
 8011c18:	e70b      	b.n	8011a32 <kf_update+0x68e>
 8011c1a:	9b06      	ldr	r3, [sp, #24]
 8011c1c:	2400      	movs	r4, #0
 8011c1e:	f506 70a2 	add.w	r0, r6, #324	; 0x144
 8011c22:	ecf3 3a01 	vldmia	r3!, {s7}
 8011c26:	ed93 4a08 	vldr	s8, [r3, #32]
 8011c2a:	edd3 4a11 	vldr	s9, [r3, #68]	; 0x44
 8011c2e:	ed93 5a1a 	vldr	s10, [r3, #104]	; 0x68
 8011c32:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8011c36:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 8011c3a:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8011c3e:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8011c42:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 8011c46:	4632      	mov	r2, r6
 8011c48:	4639      	mov	r1, r7
 8011c4a:	eef5 3a40 	vcmp.f32	s7, #0.0
 8011c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c52:	d00c      	beq.n	8011c6e <kf_update+0x8ca>
 8011c54:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
 8011c58:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c60:	d005      	beq.n	8011c6e <kf_update+0x8ca>
 8011c62:	edd1 2a00 	vldr	s5, [r1]
 8011c66:	eee3 2a83 	vfma.f32	s5, s7, s6
 8011c6a:	edc1 2a00 	vstr	s5, [r1]
 8011c6e:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8011c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c76:	d00c      	beq.n	8011c92 <kf_update+0x8ee>
 8011c78:	ed92 3a0b 	vldr	s6, [r2, #44]	; 0x2c
 8011c7c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c84:	d005      	beq.n	8011c92 <kf_update+0x8ee>
 8011c86:	edd1 2a00 	vldr	s5, [r1]
 8011c8a:	eee4 2a03 	vfma.f32	s5, s8, s6
 8011c8e:	edc1 2a00 	vstr	s5, [r1]
 8011c92:	eef5 4a40 	vcmp.f32	s9, #0.0
 8011c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c9a:	d00c      	beq.n	8011cb6 <kf_update+0x912>
 8011c9c:	ed92 3a0c 	vldr	s6, [r2, #48]	; 0x30
 8011ca0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca8:	d005      	beq.n	8011cb6 <kf_update+0x912>
 8011caa:	edd1 2a00 	vldr	s5, [r1]
 8011cae:	eee4 2a83 	vfma.f32	s5, s9, s6
 8011cb2:	edc1 2a00 	vstr	s5, [r1]
 8011cb6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8011cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cbe:	d00c      	beq.n	8011cda <kf_update+0x936>
 8011cc0:	ed92 3a0d 	vldr	s6, [r2, #52]	; 0x34
 8011cc4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ccc:	d005      	beq.n	8011cda <kf_update+0x936>
 8011cce:	edd1 2a00 	vldr	s5, [r1]
 8011cd2:	eee5 2a03 	vfma.f32	s5, s10, s6
 8011cd6:	edc1 2a00 	vstr	s5, [r1]
 8011cda:	eef5 5a40 	vcmp.f32	s11, #0.0
 8011cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce2:	d00c      	beq.n	8011cfe <kf_update+0x95a>
 8011ce4:	ed92 3a0e 	vldr	s6, [r2, #56]	; 0x38
 8011ce8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cf0:	d005      	beq.n	8011cfe <kf_update+0x95a>
 8011cf2:	edd1 2a00 	vldr	s5, [r1]
 8011cf6:	eee5 2a83 	vfma.f32	s5, s11, s6
 8011cfa:	edc1 2a00 	vstr	s5, [r1]
 8011cfe:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d06:	d00c      	beq.n	8011d22 <kf_update+0x97e>
 8011d08:	ed92 3a0f 	vldr	s6, [r2, #60]	; 0x3c
 8011d0c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d14:	d005      	beq.n	8011d22 <kf_update+0x97e>
 8011d16:	edd1 2a00 	vldr	s5, [r1]
 8011d1a:	eee6 2a03 	vfma.f32	s5, s12, s6
 8011d1e:	edc1 2a00 	vstr	s5, [r1]
 8011d22:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2a:	d00c      	beq.n	8011d46 <kf_update+0x9a2>
 8011d2c:	ed92 3a10 	vldr	s6, [r2, #64]	; 0x40
 8011d30:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d38:	d005      	beq.n	8011d46 <kf_update+0x9a2>
 8011d3a:	edd1 2a00 	vldr	s5, [r1]
 8011d3e:	eee6 2a83 	vfma.f32	s5, s13, s6
 8011d42:	edc1 2a00 	vstr	s5, [r1]
 8011d46:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4e:	d00c      	beq.n	8011d6a <kf_update+0x9c6>
 8011d50:	ed92 3a11 	vldr	s6, [r2, #68]	; 0x44
 8011d54:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d5c:	d005      	beq.n	8011d6a <kf_update+0x9c6>
 8011d5e:	edd1 2a00 	vldr	s5, [r1]
 8011d62:	eee7 2a03 	vfma.f32	s5, s14, s6
 8011d66:	edc1 2a00 	vstr	s5, [r1]
 8011d6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d72:	d00c      	beq.n	8011d8e <kf_update+0x9ea>
 8011d74:	ed92 3a12 	vldr	s6, [r2, #72]	; 0x48
 8011d78:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d80:	d005      	beq.n	8011d8e <kf_update+0x9ea>
 8011d82:	edd1 2a00 	vldr	s5, [r1]
 8011d86:	eee7 2a83 	vfma.f32	s5, s15, s6
 8011d8a:	edc1 2a00 	vstr	s5, [r1]
 8011d8e:	3224      	adds	r2, #36	; 0x24
 8011d90:	4282      	cmp	r2, r0
 8011d92:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8011d96:	f47f af58 	bne.w	8011c4a <kf_update+0x8a6>
 8011d9a:	3401      	adds	r4, #1
 8011d9c:	2c09      	cmp	r4, #9
 8011d9e:	f107 0704 	add.w	r7, r7, #4
 8011da2:	f47f af3e 	bne.w	8011c22 <kf_update+0x87e>
 8011da6:	9805      	ldr	r0, [sp, #20]
 8011da8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8011dac:	a9b9      	add	r1, sp, #740	; 0x2e4
 8011dae:	f007 fabd 	bl	801932c <memcpy>
 8011db2:	eef5 ba40 	vcmp.f32	s23, #0.0
 8011db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dba:	d05f      	beq.n	8011e7c <kf_update+0xad8>
 8011dbc:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dc4:	d05a      	beq.n	8011e7c <kf_update+0xad8>
 8011dc6:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8011dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dce:	ee68 baab 	vmul.f32	s23, s17, s23
 8011dd2:	f000 812c 	beq.w	801202e <kf_update+0xc8a>
 8011dd6:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8011dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dde:	ee2c ca28 	vmul.f32	s24, s24, s17
 8011de2:	f000 8121 	beq.w	8012028 <kf_update+0xc84>
 8011de6:	eeb5 da40 	vcmp.f32	s26, #0.0
 8011dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dee:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8011df2:	f000 8114 	beq.w	801201e <kf_update+0xc7a>
 8011df6:	eef5 ca40 	vcmp.f32	s25, #0.0
 8011dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dfe:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8011e02:	eeb0 aa4c 	vmov.f32	s20, s24
 8011e06:	f040 812f 	bne.w	8012068 <kf_update+0xcc4>
 8011e0a:	eef0 ca47 	vmov.f32	s25, s14
 8011e0e:	eeb0 da67 	vmov.f32	s26, s15
 8011e12:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8011e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e1a:	d065      	beq.n	8011ee8 <kf_update+0xb44>
 8011e1c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e24:	f000 80f0 	beq.w	8012008 <kf_update+0xc64>
 8011e28:	eef0 7a48 	vmov.f32	s15, s16
 8011e2c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8011e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e34:	ee28 7a8b 	vmul.f32	s14, s17, s22
 8011e38:	d17d      	bne.n	8011f36 <kf_update+0xb92>
 8011e3a:	eef0 aa47 	vmov.f32	s21, s14
 8011e3e:	eeb0 ba67 	vmov.f32	s22, s15
 8011e42:	eef5 9a40 	vcmp.f32	s19, #0.0
 8011e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e4a:	f000 8082 	beq.w	8011f52 <kf_update+0xbae>
 8011e4e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e56:	f000 80da 	beq.w	801200e <kf_update+0xc6a>
 8011e5a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e62:	ee28 7aa9 	vmul.f32	s14, s17, s19
 8011e66:	eef0 7a48 	vmov.f32	s15, s16
 8011e6a:	f040 812a 	bne.w	80120c2 <kf_update+0xd1e>
 8011e6e:	eef0 8a49 	vmov.f32	s17, s18
 8011e72:	eef0 9a67 	vmov.f32	s19, s15
 8011e76:	eeb0 9a47 	vmov.f32	s18, s14
 8011e7a:	e086      	b.n	8011f8a <kf_update+0xbe6>
 8011e7c:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8011e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e84:	d005      	beq.n	8011e92 <kf_update+0xaee>
 8011e86:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e8e:	f040 80f9 	bne.w	8012084 <kf_update+0xce0>
 8011e92:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8011e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9a:	d071      	beq.n	8011f80 <kf_update+0xbdc>
 8011e9c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea4:	f040 8116 	bne.w	80120d4 <kf_update+0xd30>
 8011ea8:	eeb0 aa68 	vmov.f32	s20, s17
 8011eac:	eef0 ba68 	vmov.f32	s23, s17
 8011eb0:	eeb5 da40 	vcmp.f32	s26, #0.0
 8011eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb8:	d007      	beq.n	8011eca <kf_update+0xb26>
 8011eba:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec2:	f040 80c7 	bne.w	8012054 <kf_update+0xcb0>
 8011ec6:	eeb0 da68 	vmov.f32	s26, s17
 8011eca:	eef5 ca40 	vcmp.f32	s25, #0.0
 8011ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed2:	d09e      	beq.n	8011e12 <kf_update+0xa6e>
 8011ed4:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011edc:	f040 80f7 	bne.w	80120ce <kf_update+0xd2a>
 8011ee0:	eeb0 ba68 	vmov.f32	s22, s17
 8011ee4:	eef0 ca68 	vmov.f32	s25, s17
 8011ee8:	eef5 aa40 	vcmp.f32	s21, #0.0
 8011eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef0:	d0a7      	beq.n	8011e42 <kf_update+0xa9e>
 8011ef2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011efa:	f040 80ce 	bne.w	801209a <kf_update+0xcf6>
 8011efe:	eef5 9a40 	vcmp.f32	s19, #0.0
 8011f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f06:	f000 8087 	beq.w	8012018 <kf_update+0xc74>
 8011f0a:	eeb0 9a68 	vmov.f32	s18, s17
 8011f0e:	eef0 9a68 	vmov.f32	s19, s17
 8011f12:	eef0 aa68 	vmov.f32	s21, s17
 8011f16:	e038      	b.n	8011f8a <kf_update+0xbe6>
 8011f18:	9b00      	ldr	r3, [sp, #0]
 8011f1a:	edd3 8a00 	vldr	s17, [r3]
 8011f1e:	e493      	b.n	8011848 <kf_update+0x4a4>
 8011f20:	eef5 ba40 	vcmp.f32	s23, #0.0
 8011f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f28:	bf14      	ite	ne
 8011f2a:	ee6b 7aad 	vmulne.f32	s15, s23, s27
 8011f2e:	eef0 7a6b 	vmoveq.f32	s15, s23
 8011f32:	f7ff bb65 	b.w	8011600 <kf_update+0x25c>
 8011f36:	eef5 9a40 	vcmp.f32	s19, #0.0
 8011f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f3e:	eeb0 ba67 	vmov.f32	s22, s15
 8011f42:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8011f46:	f040 80b2 	bne.w	80120ae <kf_update+0xd0a>
 8011f4a:	eef0 9a67 	vmov.f32	s19, s15
 8011f4e:	eef0 aa47 	vmov.f32	s21, s14
 8011f52:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f5a:	d014      	beq.n	8011f86 <kf_update+0xbe2>
 8011f5c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f64:	d04d      	beq.n	8012002 <kf_update+0xc5e>
 8011f66:	eeb0 7a48 	vmov.f32	s14, s16
 8011f6a:	ee68 8a89 	vmul.f32	s17, s17, s18
 8011f6e:	eeb0 9a47 	vmov.f32	s18, s14
 8011f72:	e00a      	b.n	8011f8a <kf_update+0xbe6>
 8011f74:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
 8011f78:	ecbd 8b10 	vpop	{d8-d15}
 8011f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f80:	eef0 ba4a 	vmov.f32	s23, s20
 8011f84:	e794      	b.n	8011eb0 <kf_update+0xb0c>
 8011f86:	eef0 8a49 	vmov.f32	s17, s18
 8011f8a:	edd6 3a01 	vldr	s7, [r6, #4]
 8011f8e:	ed96 4a02 	vldr	s8, [r6, #8]
 8011f92:	edd6 4a03 	vldr	s9, [r6, #12]
 8011f96:	ed96 5a04 	vldr	s10, [r6, #16]
 8011f9a:	edd6 5a05 	vldr	s11, [r6, #20]
 8011f9e:	ed96 6a06 	vldr	s12, [r6, #24]
 8011fa2:	edd6 6a07 	vldr	s13, [r6, #28]
 8011fa6:	ed96 7a08 	vldr	s14, [r6, #32]
 8011faa:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
 8011fae:	ee73 baab 	vadd.f32	s23, s7, s23
 8011fb2:	ee34 aa0a 	vadd.f32	s20, s8, s20
 8011fb6:	ee34 da8d 	vadd.f32	s26, s9, s26
 8011fba:	ee75 ca2c 	vadd.f32	s25, s10, s25
 8011fbe:	ee35 ba8b 	vadd.f32	s22, s11, s22
 8011fc2:	ee76 aa2a 	vadd.f32	s21, s12, s21
 8011fc6:	ee76 9aa9 	vadd.f32	s19, s13, s19
 8011fca:	ee37 9a09 	vadd.f32	s18, s14, s18
 8011fce:	ee77 8aa8 	vadd.f32	s17, s15, s17
 8011fd2:	edc6 ba01 	vstr	s23, [r6, #4]
 8011fd6:	ed86 aa02 	vstr	s20, [r6, #8]
 8011fda:	ed86 da03 	vstr	s26, [r6, #12]
 8011fde:	edc6 ca04 	vstr	s25, [r6, #16]
 8011fe2:	ed86 ba05 	vstr	s22, [r6, #20]
 8011fe6:	edc6 aa06 	vstr	s21, [r6, #24]
 8011fea:	edc6 9a07 	vstr	s19, [r6, #28]
 8011fee:	ed86 9a08 	vstr	s18, [r6, #32]
 8011ff2:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
 8011ff6:	f7ff ba33 	b.w	8011460 <kf_update+0xbc>
 8011ffa:	eef0 7a6d 	vmov.f32	s15, s27
 8011ffe:	f7ff bbae 	b.w	801175e <kf_update+0x3ba>
 8012002:	eeb0 9a68 	vmov.f32	s18, s17
 8012006:	e7c0      	b.n	8011f8a <kf_update+0xbe6>
 8012008:	eeb0 ba68 	vmov.f32	s22, s17
 801200c:	e76c      	b.n	8011ee8 <kf_update+0xb44>
 801200e:	eeb0 9a68 	vmov.f32	s18, s17
 8012012:	eef0 9a68 	vmov.f32	s19, s17
 8012016:	e7b8      	b.n	8011f8a <kf_update+0xbe6>
 8012018:	eef0 aa69 	vmov.f32	s21, s19
 801201c:	e799      	b.n	8011f52 <kf_update+0xbae>
 801201e:	eeb0 da67 	vmov.f32	s26, s15
 8012022:	eeb0 aa4c 	vmov.f32	s20, s24
 8012026:	e750      	b.n	8011eca <kf_update+0xb26>
 8012028:	eeb0 aa4c 	vmov.f32	s20, s24
 801202c:	e740      	b.n	8011eb0 <kf_update+0xb0c>
 801202e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012036:	f43f af3b 	beq.w	8011eb0 <kf_update+0xb0c>
 801203a:	eeb5 da40 	vcmp.f32	s26, #0.0
 801203e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012042:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8012046:	f47f aed6 	bne.w	8011df6 <kf_update+0xa52>
 801204a:	e7e8      	b.n	801201e <kf_update+0xc7a>
 801204c:	ee67 7aad 	vmul.f32	s15, s15, s27
 8012050:	f7ff bb85 	b.w	801175e <kf_update+0x3ba>
 8012054:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801205c:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8012060:	eef0 7a48 	vmov.f32	s15, s16
 8012064:	f43f aed1 	beq.w	8011e0a <kf_update+0xa66>
 8012068:	eeb0 da67 	vmov.f32	s26, s15
 801206c:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012074:	ee68 7aac 	vmul.f32	s15, s17, s25
 8012078:	d126      	bne.n	80120c8 <kf_update+0xd24>
 801207a:	eeb0 ba67 	vmov.f32	s22, s15
 801207e:	eef0 ca47 	vmov.f32	s25, s14
 8012082:	e731      	b.n	8011ee8 <kf_update+0xb44>
 8012084:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801208c:	ee2c ca28 	vmul.f32	s24, s24, s17
 8012090:	eef0 ba48 	vmov.f32	s23, s16
 8012094:	f47f aea7 	bne.w	8011de6 <kf_update+0xa42>
 8012098:	e7c6      	b.n	8012028 <kf_update+0xc84>
 801209a:	eef5 9a40 	vcmp.f32	s19, #0.0
 801209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a2:	ee68 7aaa 	vmul.f32	s15, s17, s21
 80120a6:	eeb0 7a48 	vmov.f32	s14, s16
 80120aa:	f43f af4e 	beq.w	8011f4a <kf_update+0xba6>
 80120ae:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80120b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b6:	eef0 aa47 	vmov.f32	s21, s14
 80120ba:	ee28 7aa9 	vmul.f32	s14, s17, s19
 80120be:	f43f aed6 	beq.w	8011e6e <kf_update+0xaca>
 80120c2:	eef0 9a67 	vmov.f32	s19, s15
 80120c6:	e750      	b.n	8011f6a <kf_update+0xbc6>
 80120c8:	eef0 ca47 	vmov.f32	s25, s14
 80120cc:	e6ae      	b.n	8011e2c <kf_update+0xa88>
 80120ce:	eeb0 7a48 	vmov.f32	s14, s16
 80120d2:	e7cb      	b.n	801206c <kf_update+0xcc8>
 80120d4:	ed9f ca06 	vldr	s24, [pc, #24]	; 80120f0 <kf_update+0xd4c>
 80120d8:	eeb5 da40 	vcmp.f32	s26, #0.0
 80120dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120e0:	ee68 7a8a 	vmul.f32	s15, s17, s20
 80120e4:	eef0 ba4c 	vmov.f32	s23, s24
 80120e8:	f47f ae85 	bne.w	8011df6 <kf_update+0xa52>
 80120ec:	e797      	b.n	801201e <kf_update+0xc7a>
 80120ee:	bf00      	nop
 80120f0:	00000000 	.word	0x00000000

080120f4 <q2hpr>:
 80120f4:	b510      	push	{r4, lr}
 80120f6:	ed90 7a00 	vldr	s14, [r0]
 80120fa:	edd0 6a01 	vldr	s13, [r0, #4]
 80120fe:	edd0 7a02 	vldr	s15, [r0, #8]
 8012102:	edd0 4a03 	vldr	s9, [r0, #12]
 8012106:	ed2d 8b0a 	vpush	{d8-d12}
 801210a:	ee27 0a26 	vmul.f32	s0, s14, s13
 801210e:	ee27 5a27 	vmul.f32	s10, s14, s15
 8012112:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8012116:	ee67 0a07 	vmul.f32	s1, s14, s14
 801211a:	ee26 aaa6 	vmul.f32	s20, s13, s13
 801211e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012122:	ee27 7a24 	vmul.f32	s14, s14, s9
 8012126:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801212a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801212e:	ee70 9aa0 	vadd.f32	s19, s1, s1
 8012132:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8012136:	ee36 ba06 	vadd.f32	s22, s12, s12
 801213a:	ee70 aa00 	vadd.f32	s21, s0, s0
 801213e:	ee35 ca05 	vadd.f32	s24, s10, s10
 8012142:	ee77 8a07 	vadd.f32	s17, s14, s14
 8012146:	ee75 baa5 	vadd.f32	s23, s11, s11
 801214a:	ee36 9aa6 	vadd.f32	s18, s13, s13
 801214e:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8012152:	460c      	mov	r4, r1
 8012154:	bb8a      	cbnz	r2, 80121ba <q2hpr+0xc6>
 8012156:	ee79 0a8b 	vadd.f32	s1, s19, s22
 801215a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 801215e:	ee7b 0a60 	vsub.f32	s1, s22, s1
 8012162:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 8012166:	f009 fea7 	bl	801beb8 <atan2f>
 801216a:	eeb0 8a40 	vmov.f32	s16, s0
 801216e:	ed84 8a00 	vstr	s16, [r4]
 8012172:	ee38 0aab 	vadd.f32	s0, s17, s23
 8012176:	f009 fe73 	bl	801be60 <asinf>
 801217a:	ee79 0a8a 	vadd.f32	s1, s19, s20
 801217e:	eef0 8a40 	vmov.f32	s17, s0
 8012182:	ee7b 0a60 	vsub.f32	s1, s22, s1
 8012186:	ee3c 0a49 	vsub.f32	s0, s24, s18
 801218a:	f009 fe95 	bl	801beb8 <atan2f>
 801218e:	eef1 8a68 	vneg.f32	s17, s17
 8012192:	eeb0 9a40 	vmov.f32	s18, s0
 8012196:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801219e:	ed84 9a02 	vstr	s18, [r4, #8]
 80121a2:	edc4 8a01 	vstr	s17, [r4, #4]
 80121a6:	d505      	bpl.n	80121b4 <q2hpr+0xc0>
 80121a8:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8012200 <q2hpr+0x10c>
 80121ac:	ee38 8a00 	vadd.f32	s16, s16, s0
 80121b0:	ed84 8a00 	vstr	s16, [r4]
 80121b4:	ecbd 8b0a 	vpop	{d8-d12}
 80121b8:	bd10      	pop	{r4, pc}
 80121ba:	ee3c 0a49 	vsub.f32	s0, s24, s18
 80121be:	f009 fe4f 	bl	801be60 <asinf>
 80121c2:	ee79 0a8a 	vadd.f32	s1, s19, s20
 80121c6:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 80121ca:	ee79 0ae0 	vsub.f32	s1, s19, s1
 80121ce:	eeb0 9a40 	vmov.f32	s18, s0
 80121d2:	ee38 0aab 	vadd.f32	s0, s17, s23
 80121d6:	f009 fe6f 	bl	801beb8 <atan2f>
 80121da:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 80121de:	eef0 8a40 	vmov.f32	s17, s0
 80121e2:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80121e6:	ee79 0ae0 	vsub.f32	s1, s19, s1
 80121ea:	eeb1 0a40 	vneg.f32	s0, s0
 80121ee:	f009 fe63 	bl	801beb8 <atan2f>
 80121f2:	eef1 8a68 	vneg.f32	s17, s17
 80121f6:	eeb0 8a40 	vmov.f32	s16, s0
 80121fa:	ed84 0a00 	vstr	s0, [r4]
 80121fe:	e7ca      	b.n	8012196 <q2hpr+0xa2>
 8012200:	40c90fdb 	.word	0x40c90fdb

08012204 <output_update>:
 8012204:	edd0 7a01 	vldr	s15, [r0, #4]
 8012208:	edd0 5a00 	vldr	s11, [r0]
 801220c:	edd0 6a02 	vldr	s13, [r0, #8]
 8012210:	ed90 5a03 	vldr	s10, [r0, #12]
 8012214:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801221c:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8012220:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8012224:	4615      	mov	r5, r2
 8012226:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801222a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801222e:	eea5 7a85 	vfma.f32	s14, s11, s10
 8012232:	460f      	mov	r7, r1
 8012234:	461e      	mov	r6, r3
 8012236:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801223a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801223e:	ee36 6a06 	vadd.f32	s12, s12, s12
 8012242:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012246:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801224a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801224e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8012252:	ee35 5ac6 	vsub.f32	s10, s11, s12
 8012256:	2a00      	cmp	r2, #0
 8012258:	d145      	bne.n	80122e6 <output_update+0xe2>
 801225a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801225e:	eeb1 7a47 	vneg.f32	s14, s14
 8012262:	ed83 7a00 	vstr	s14, [r3]
 8012266:	edc3 7a01 	vstr	s15, [r3, #4]
 801226a:	ed83 5a02 	vstr	s10, [r3, #8]
 801226e:	4629      	mov	r1, r5
 8012270:	4604      	mov	r4, r0
 8012272:	f7ff ff3f 	bl	80120f4 <q2hpr>
 8012276:	ed95 7a01 	vldr	s14, [r5, #4]
 801227a:	edd5 7a02 	vldr	s15, [r5, #8]
 801227e:	edd5 6a00 	vldr	s13, [r5]
 8012282:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8012390 <output_update+0x18c>
 8012286:	ee27 7a46 	vnmul.f32	s14, s14, s12
 801228a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 801228e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012292:	ed85 7a01 	vstr	s14, [r5, #4]
 8012296:	edc5 6a00 	vstr	s13, [r5]
 801229a:	edc5 7a02 	vstr	s15, [r5, #8]
 801229e:	ed97 7a01 	vldr	s14, [r7, #4]
 80122a2:	edd6 7a00 	vldr	s15, [r6]
 80122a6:	6823      	ldr	r3, [r4, #0]
 80122a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80122ac:	edc8 7a00 	vstr	s15, [r8]
 80122b0:	ed97 7a00 	vldr	s14, [r7]
 80122b4:	edd6 7a01 	vldr	s15, [r6, #4]
 80122b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80122bc:	edc8 7a01 	vstr	s15, [r8, #4]
 80122c0:	edd6 7a02 	vldr	s15, [r6, #8]
 80122c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80122c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80122cc:	edc8 7a02 	vstr	s15, [r8, #8]
 80122d0:	edd4 7a02 	vldr	s15, [r4, #8]
 80122d4:	6862      	ldr	r2, [r4, #4]
 80122d6:	6022      	str	r2, [r4, #0]
 80122d8:	eef1 7a67 	vneg.f32	s15, s15
 80122dc:	6063      	str	r3, [r4, #4]
 80122de:	edc4 7a02 	vstr	s15, [r4, #8]
 80122e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122e6:	2a01      	cmp	r2, #1
 80122e8:	d015      	beq.n	8012316 <output_update+0x112>
 80122ea:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8012390 <output_update+0x18c>
 80122ee:	edd5 6a00 	vldr	s13, [r5]
 80122f2:	ed95 7a01 	vldr	s14, [r5, #4]
 80122f6:	edd5 7a02 	vldr	s15, [r5, #8]
 80122fa:	ee66 6a86 	vmul.f32	s13, s13, s12
 80122fe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012302:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012306:	edc5 6a00 	vstr	s13, [r5]
 801230a:	ed85 7a01 	vstr	s14, [r5, #4]
 801230e:	edc5 7a02 	vstr	s15, [r5, #8]
 8012312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012316:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801231a:	ee36 6a65 	vsub.f32	s12, s12, s11
 801231e:	eeb1 7a47 	vneg.f32	s14, s14
 8012322:	edc3 7a00 	vstr	s15, [r3]
 8012326:	ed83 7a01 	vstr	s14, [r3, #4]
 801232a:	ed83 6a02 	vstr	s12, [r3, #8]
 801232e:	4629      	mov	r1, r5
 8012330:	f7ff fee0 	bl	80120f4 <q2hpr>
 8012334:	edd5 6a00 	vldr	s13, [r5]
 8012338:	ed95 7a01 	vldr	s14, [r5, #4]
 801233c:	edd5 7a02 	vldr	s15, [r5, #8]
 8012340:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8012390 <output_update+0x18c>
 8012344:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012348:	ee67 7a86 	vmul.f32	s15, s15, s12
 801234c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012350:	ed85 7a01 	vstr	s14, [r5, #4]
 8012354:	edc5 6a00 	vstr	s13, [r5]
 8012358:	edc5 7a02 	vstr	s15, [r5, #8]
 801235c:	ed97 7a00 	vldr	s14, [r7]
 8012360:	edd6 7a00 	vldr	s15, [r6]
 8012364:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012368:	edc8 7a00 	vstr	s15, [r8]
 801236c:	ed97 7a01 	vldr	s14, [r7, #4]
 8012370:	edd6 7a01 	vldr	s15, [r6, #4]
 8012374:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012378:	edc8 7a01 	vstr	s15, [r8, #4]
 801237c:	edd6 7a02 	vldr	s15, [r6, #8]
 8012380:	ed97 7a02 	vldr	s14, [r7, #8]
 8012384:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012388:	edc8 7a02 	vstr	s15, [r8, #8]
 801238c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012390:	42652ee1 	.word	0x42652ee1
 8012394:	00000000 	.word	0x00000000

08012398 <MFX_emptyAttitude>:
 8012398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801239c:	ed2d 8b02 	vpush	{d8}
 80123a0:	4fe9      	ldr	r7, [pc, #932]	; (8012748 <MFX_emptyAttitude+0x3b0>)
 80123a2:	eddf 8aea 	vldr	s17, [pc, #936]	; 801274c <MFX_emptyAttitude+0x3b4>
 80123a6:	f6ad 4dd4 	subw	sp, sp, #3284	; 0xcd4
 80123aa:	f50d 64d7 	add.w	r4, sp, #1720	; 0x6b8
 80123ae:	f04f 0800 	mov.w	r8, #0
 80123b2:	46bc      	mov	ip, r7
 80123b4:	e9c4 8800 	strd	r8, r8, [r4]
 80123b8:	f83c 3b04 	ldrh.w	r3, [ip], #4
 80123bc:	f8c4 8008 	str.w	r8, [r4, #8]
 80123c0:	f88d 854a 	strb.w	r8, [sp, #1354]	; 0x54a
 80123c4:	f8ad 3548 	strh.w	r3, [sp, #1352]	; 0x548
 80123c8:	4681      	mov	r9, r0
 80123ca:	f8dd 3548 	ldr.w	r3, [sp, #1352]	; 0x548
 80123ce:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 80123d2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80123d6:	0c1b      	lsrs	r3, r3, #16
 80123d8:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 80123dc:	ab2b      	add	r3, sp, #172	; 0xac
 80123de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80123e2:	ab2e      	add	r3, sp, #184	; 0xb8
 80123e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80123e8:	ab31      	add	r3, sp, #196	; 0xc4
 80123ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80123ee:	ab34      	add	r3, sp, #208	; 0xd0
 80123f0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80123f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80123f8:	ab37      	add	r3, sp, #220	; 0xdc
 80123fa:	edcd 8a08 	vstr	s17, [sp, #32]
 80123fe:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8012402:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8012406:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 801240a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801240e:	ab3a      	add	r3, sp, #232	; 0xe8
 8012410:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012414:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012418:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 801241c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012420:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012424:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012428:	f44f 75b4 	mov.w	r5, #360	; 0x168
 801242c:	f8dc 3000 	ldr.w	r3, [ip]
 8012430:	f8ce 3000 	str.w	r3, [lr]
 8012434:	462a      	mov	r2, r5
 8012436:	4641      	mov	r1, r8
 8012438:	4620      	mov	r0, r4
 801243a:	f006 fee9 	bl	8019210 <memset>
 801243e:	f44f 56f0 	mov.w	r6, #7680	; 0x1e00
 8012442:	462a      	mov	r2, r5
 8012444:	4621      	mov	r1, r4
 8012446:	a840      	add	r0, sp, #256	; 0x100
 8012448:	f8ad 60f8 	strh.w	r6, [sp, #248]	; 0xf8
 801244c:	f006 ff6e 	bl	801932c <memcpy>
 8012450:	462a      	mov	r2, r5
 8012452:	4641      	mov	r1, r8
 8012454:	4620      	mov	r0, r4
 8012456:	ed8d 8a3f 	vstr	s16, [sp, #252]	; 0xfc
 801245a:	f006 fed9 	bl	8019210 <memset>
 801245e:	462a      	mov	r2, r5
 8012460:	4621      	mov	r1, r4
 8012462:	a89c      	add	r0, sp, #624	; 0x270
 8012464:	f8ad 6268 	strh.w	r6, [sp, #616]	; 0x268
 8012468:	f006 ff60 	bl	801932c <memcpy>
 801246c:	462a      	mov	r2, r5
 801246e:	4641      	mov	r1, r8
 8012470:	4620      	mov	r0, r4
 8012472:	ed8d 8a9b 	vstr	s16, [sp, #620]	; 0x26c
 8012476:	f006 fecb 	bl	8019210 <memset>
 801247a:	462a      	mov	r2, r5
 801247c:	4621      	mov	r1, r4
 801247e:	a8f8      	add	r0, sp, #992	; 0x3e0
 8012480:	f8ad 63d8 	strh.w	r6, [sp, #984]	; 0x3d8
 8012484:	f006 ff52 	bl	801932c <memcpy>
 8012488:	462a      	mov	r2, r5
 801248a:	4641      	mov	r1, r8
 801248c:	4620      	mov	r0, r4
 801248e:	ed8d 8af7 	vstr	s16, [sp, #988]	; 0x3dc
 8012492:	f006 febd 	bl	8019210 <memset>
 8012496:	462a      	mov	r2, r5
 8012498:	4621      	mov	r1, r4
 801249a:	f50d 60aa 	add.w	r0, sp, #1360	; 0x550
 801249e:	f8ad 6548 	strh.w	r6, [sp, #1352]	; 0x548
 80124a2:	f006 ff43 	bl	801932c <memcpy>
 80124a6:	f04f 0301 	mov.w	r3, #1
 80124aa:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80124ae:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80124b2:	4ba7      	ldr	r3, [pc, #668]	; (8012750 <MFX_emptyAttitude+0x3b8>)
 80124b4:	9320      	str	r3, [sp, #128]	; 0x80
 80124b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80124b8:	ae0c      	add	r6, sp, #48	; 0x30
 80124ba:	46b3      	mov	fp, r6
 80124bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80124be:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80124c2:	e9c4 8800 	strd	r8, r8, [r4]
 80124c6:	e9c4 8802 	strd	r8, r8, [r4, #8]
 80124ca:	f8c4 8010 	str.w	r8, [r4, #16]
 80124ce:	f10d 0c6c 	add.w	ip, sp, #108	; 0x6c
 80124d2:	46a6      	mov	lr, r4
 80124d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124dc:	f50d 6aa9 	add.w	sl, sp, #1352	; 0x548
 80124e0:	682d      	ldr	r5, [r5, #0]
 80124e2:	f8cc 5000 	str.w	r5, [ip]
 80124e6:	af21      	add	r7, sp, #132	; 0x84
 80124e8:	ed8a 8a01 	vstr	s16, [sl, #4]
 80124ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80124ee:	ab1a      	add	r3, sp, #104	; 0x68
 80124f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80124f4:	abf6      	add	r3, sp, #984	; 0x3d8
 80124f6:	9300      	str	r3, [sp, #0]
 80124f8:	aa3e      	add	r2, sp, #248	; 0xf8
 80124fa:	f8c7 8000 	str.w	r8, [r7]
 80124fe:	ab9a      	add	r3, sp, #616	; 0x268
 8012500:	a911      	add	r1, sp, #68	; 0x44
 8012502:	9403      	str	r4, [sp, #12]
 8012504:	2001      	movs	r0, #1
 8012506:	f7fe fa49 	bl	801099c <DataHist_parameters>
 801250a:	4b92      	ldr	r3, [pc, #584]	; (8012754 <MFX_emptyAttitude+0x3bc>)
 801250c:	f8c9 3018 	str.w	r3, [r9, #24]
 8012510:	4b91      	ldr	r3, [pc, #580]	; (8012758 <MFX_emptyAttitude+0x3c0>)
 8012512:	f8c9 301c 	str.w	r3, [r9, #28]
 8012516:	4b91      	ldr	r3, [pc, #580]	; (801275c <MFX_emptyAttitude+0x3c4>)
 8012518:	f8c9 3020 	str.w	r3, [r9, #32]
 801251c:	4b90      	ldr	r3, [pc, #576]	; (8012760 <MFX_emptyAttitude+0x3c8>)
 801251e:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 8012522:	ae2b      	add	r6, sp, #172	; 0xac
 8012524:	4b8f      	ldr	r3, [pc, #572]	; (8012764 <MFX_emptyAttitude+0x3cc>)
 8012526:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 801252a:	ce07      	ldmia	r6!, {r0, r1, r2}
 801252c:	4b8e      	ldr	r3, [pc, #568]	; (8012768 <MFX_emptyAttitude+0x3d0>)
 801252e:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
 8012532:	4b8e      	ldr	r3, [pc, #568]	; (801276c <MFX_emptyAttitude+0x3d4>)
 8012534:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8012538:	4b8d      	ldr	r3, [pc, #564]	; (8012770 <MFX_emptyAttitude+0x3d8>)
 801253a:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 801253e:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 8012542:	f8a9 3070 	strh.w	r3, [r9, #112]	; 0x70
 8012546:	ad2e      	add	r5, sp, #184	; 0xb8
 8012548:	f89d 30aa 	ldrb.w	r3, [sp, #170]	; 0xaa
 801254c:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 8012550:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
 8012554:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
 8012558:	cd07      	ldmia	r5!, {r0, r1, r2}
 801255a:	f889 3072 	strb.w	r3, [r9, #114]	; 0x72
 801255e:	f240 1301 	movw	r3, #257	; 0x101
 8012562:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8012740 <MFX_emptyAttitude+0x3a8>
 8012566:	f8a9 3000 	strh.w	r3, [r9]
 801256a:	f8a9 3004 	strh.w	r3, [r9, #4]
 801256e:	4b81      	ldr	r3, [pc, #516]	; (8012774 <MFX_emptyAttitude+0x3dc>)
 8012570:	f8c9 300c 	str.w	r3, [r9, #12]
 8012574:	4b80      	ldr	r3, [pc, #512]	; (8012778 <MFX_emptyAttitude+0x3e0>)
 8012576:	f8c9 3014 	str.w	r3, [r9, #20]
 801257a:	f509 7346 	add.w	r3, r9, #792	; 0x318
 801257e:	9304      	str	r3, [sp, #16]
 8012580:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
 8012584:	ed89 6b16 	vstr	d6, [r9, #88]	; 0x58
 8012588:	ed89 6b18 	vstr	d6, [r9, #96]	; 0x60
 801258c:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8012590:	f8a9 8002 	strh.w	r8, [r9, #2]
 8012594:	ed89 8a02 	vstr	s16, [r9, #8]
 8012598:	ed89 8a04 	vstr	s16, [r9, #16]
 801259c:	ed89 6b1a 	vstr	d6, [r9, #104]	; 0x68
 80125a0:	f8c9 1084 	str.w	r1, [r9, #132]	; 0x84
 80125a4:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
 80125a8:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 80125ac:	f10d 0bd0 	add.w	fp, sp, #208	; 0xd0
 80125b0:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
 80125b4:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
 80125b8:	f8c9 2094 	str.w	r2, [r9, #148]	; 0x94
 80125bc:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 80125c0:	af37      	add	r7, sp, #220	; 0xdc
 80125c2:	f8c9 0098 	str.w	r0, [r9, #152]	; 0x98
 80125c6:	f8c9 109c 	str.w	r1, [r9, #156]	; 0x9c
 80125ca:	f8c9 20a0 	str.w	r2, [r9, #160]	; 0xa0
 80125ce:	cf07      	ldmia	r7!, {r0, r1, r2}
 80125d0:	f10d 0ee8 	add.w	lr, sp, #232	; 0xe8
 80125d4:	f8c9 00a4 	str.w	r0, [r9, #164]	; 0xa4
 80125d8:	f8c9 10a8 	str.w	r1, [r9, #168]	; 0xa8
 80125dc:	f8c9 20ac 	str.w	r2, [r9, #172]	; 0xac
 80125e0:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 80125e4:	eddf 7a65 	vldr	s15, [pc, #404]	; 801277c <MFX_emptyAttitude+0x3e4>
 80125e8:	ed9f 5a65 	vldr	s10, [pc, #404]	; 8012780 <MFX_emptyAttitude+0x3e8>
 80125ec:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8012784 <MFX_emptyAttitude+0x3ec>
 80125f0:	f8c9 00b0 	str.w	r0, [r9, #176]	; 0xb0
 80125f4:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 80125f8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80125fc:	f8c9 10b4 	str.w	r1, [r9, #180]	; 0xb4
 8012600:	ed89 5a65 	vstr	s10, [r9, #404]	; 0x194
 8012604:	edc9 5a66 	vstr	s11, [r9, #408]	; 0x198
 8012608:	ed89 7a67 	vstr	s14, [r9, #412]	; 0x19c
 801260c:	edc9 8a64 	vstr	s17, [r9, #400]	; 0x190
 8012610:	edc9 8a30 	vstr	s17, [r9, #192]	; 0xc0
 8012614:	edc9 8a4a 	vstr	s17, [r9, #296]	; 0x128
 8012618:	edc9 8a31 	vstr	s17, [r9, #196]	; 0xc4
 801261c:	f04f 0101 	mov.w	r1, #1
 8012620:	f8c9 20b8 	str.w	r2, [r9, #184]	; 0xb8
 8012624:	edc9 8a4b 	vstr	s17, [r9, #300]	; 0x12c
 8012628:	edc9 8a32 	vstr	s17, [r9, #200]	; 0xc8
 801262c:	edc9 8a4c 	vstr	s17, [r9, #304]	; 0x130
 8012630:	edc9 8a33 	vstr	s17, [r9, #204]	; 0xcc
 8012634:	edc9 8a4d 	vstr	s17, [r9, #308]	; 0x134
 8012638:	edc9 8a34 	vstr	s17, [r9, #208]	; 0xd0
 801263c:	edc9 8a4e 	vstr	s17, [r9, #312]	; 0x138
 8012640:	edc9 8a35 	vstr	s17, [r9, #212]	; 0xd4
 8012644:	edc9 8a4f 	vstr	s17, [r9, #316]	; 0x13c
 8012648:	edc9 8a36 	vstr	s17, [r9, #216]	; 0xd8
 801264c:	edc9 8a50 	vstr	s17, [r9, #320]	; 0x140
 8012650:	edc9 8a37 	vstr	s17, [r9, #220]	; 0xdc
 8012654:	edc9 8a51 	vstr	s17, [r9, #324]	; 0x144
 8012658:	edc9 8a38 	vstr	s17, [r9, #224]	; 0xe0
 801265c:	edc9 8a52 	vstr	s17, [r9, #328]	; 0x148
 8012660:	edc9 8a39 	vstr	s17, [r9, #228]	; 0xe4
 8012664:	edc9 8a53 	vstr	s17, [r9, #332]	; 0x14c
 8012668:	edc9 8a3a 	vstr	s17, [r9, #232]	; 0xe8
 801266c:	edc9 8a54 	vstr	s17, [r9, #336]	; 0x150
 8012670:	edc9 8a3b 	vstr	s17, [r9, #236]	; 0xec
 8012674:	edc9 8a55 	vstr	s17, [r9, #340]	; 0x154
 8012678:	edc9 8a3c 	vstr	s17, [r9, #240]	; 0xf0
 801267c:	edc9 8a56 	vstr	s17, [r9, #344]	; 0x158
 8012680:	edc9 8a3d 	vstr	s17, [r9, #244]	; 0xf4
 8012684:	edc9 8a57 	vstr	s17, [r9, #348]	; 0x15c
 8012688:	edc9 8a3e 	vstr	s17, [r9, #248]	; 0xf8
 801268c:	edc9 8a58 	vstr	s17, [r9, #352]	; 0x160
 8012690:	edc9 8a3f 	vstr	s17, [r9, #252]	; 0xfc
 8012694:	edc9 8a59 	vstr	s17, [r9, #356]	; 0x164
 8012698:	edc9 8a40 	vstr	s17, [r9, #256]	; 0x100
 801269c:	edc9 8a5a 	vstr	s17, [r9, #360]	; 0x168
 80126a0:	edc9 8a41 	vstr	s17, [r9, #260]	; 0x104
 80126a4:	edc9 8a5b 	vstr	s17, [r9, #364]	; 0x16c
 80126a8:	f8c9 c1a0 	str.w	ip, [r9, #416]	; 0x1a0
 80126ac:	edc9 7a75 	vstr	s15, [r9, #468]	; 0x1d4
 80126b0:	edc9 7a7f 	vstr	s15, [r9, #508]	; 0x1fc
 80126b4:	edc9 8a42 	vstr	s17, [r9, #264]	; 0x108
 80126b8:	edc9 8a5c 	vstr	s17, [r9, #368]	; 0x170
 80126bc:	edc9 8a43 	vstr	s17, [r9, #268]	; 0x10c
 80126c0:	edc9 8a5d 	vstr	s17, [r9, #372]	; 0x174
 80126c4:	edc9 8a44 	vstr	s17, [r9, #272]	; 0x110
 80126c8:	edc9 8a5e 	vstr	s17, [r9, #376]	; 0x178
 80126cc:	edc9 8a45 	vstr	s17, [r9, #276]	; 0x114
 80126d0:	edc9 8a5f 	vstr	s17, [r9, #380]	; 0x17c
 80126d4:	edc9 8a46 	vstr	s17, [r9, #280]	; 0x118
 80126d8:	edc9 8a60 	vstr	s17, [r9, #384]	; 0x180
 80126dc:	edc9 8a47 	vstr	s17, [r9, #284]	; 0x11c
 80126e0:	edc9 8a61 	vstr	s17, [r9, #388]	; 0x184
 80126e4:	edc9 8a48 	vstr	s17, [r9, #288]	; 0x120
 80126e8:	edc9 8a62 	vstr	s17, [r9, #392]	; 0x188
 80126ec:	edc9 8a49 	vstr	s17, [r9, #292]	; 0x124
 80126f0:	edc9 8a63 	vstr	s17, [r9, #396]	; 0x18c
 80126f4:	f889 81a4 	strb.w	r8, [r9, #420]	; 0x1a4
 80126f8:	f8c9 81a6 	str.w	r8, [r9, #422]	; 0x1a6
 80126fc:	edc9 8a6c 	vstr	s17, [r9, #432]	; 0x1b0
 8012700:	edc9 8a76 	vstr	s17, [r9, #472]	; 0x1d8
 8012704:	edc9 8a77 	vstr	s17, [r9, #476]	; 0x1dc
 8012708:	edc9 8a78 	vstr	s17, [r9, #480]	; 0x1e0
 801270c:	edc9 8a79 	vstr	s17, [r9, #484]	; 0x1e4
 8012710:	edc9 8a7a 	vstr	s17, [r9, #488]	; 0x1e8
 8012714:	edc9 8a7b 	vstr	s17, [r9, #492]	; 0x1ec
 8012718:	edc9 8a7c 	vstr	s17, [r9, #496]	; 0x1f0
 801271c:	edc9 8a7d 	vstr	s17, [r9, #500]	; 0x1f4
 8012720:	edc9 8a6d 	vstr	s17, [r9, #436]	; 0x1b4
 8012724:	edc9 8a7e 	vstr	s17, [r9, #504]	; 0x1f8
 8012728:	edc9 8a80 	vstr	s17, [r9, #512]	; 0x200
 801272c:	edc9 7a89 	vstr	s15, [r9, #548]	; 0x224
 8012730:	edc9 7a93 	vstr	s15, [r9, #588]	; 0x24c
 8012734:	edc9 7a9d 	vstr	s15, [r9, #628]	; 0x274
 8012738:	e026      	b.n	8012788 <MFX_emptyAttitude+0x3f0>
 801273a:	bf00      	nop
 801273c:	f3af 8000 	nop.w
	...
 8012748:	0801ec48 	.word	0x0801ec48
 801274c:	00000000 	.word	0x00000000
 8012750:	40a00000 	.word	0x40a00000
 8012754:	3a9d4952 	.word	0x3a9d4952
 8012758:	3ac49ba6 	.word	0x3ac49ba6
 801275c:	3b03126f 	.word	0x3b03126f
 8012760:	3a83126f 	.word	0x3a83126f
 8012764:	3f639581 	.word	0x3f639581
 8012768:	402ab021 	.word	0x402ab021
 801276c:	3f13f7cf 	.word	0x3f13f7cf
 8012770:	3f2ac083 	.word	0x3f2ac083
 8012774:	01010100 	.word	0x01010100
 8012778:	41200000 	.word	0x41200000
 801277c:	447a0000 	.word	0x447a0000
 8012780:	3f4ccccd 	.word	0x3f4ccccd
 8012784:	3f333333 	.word	0x3f333333
 8012788:	edc9 8a81 	vstr	s17, [r9, #516]	; 0x204
 801278c:	edc9 8a82 	vstr	s17, [r9, #520]	; 0x208
 8012790:	edc9 8a83 	vstr	s17, [r9, #524]	; 0x20c
 8012794:	edc9 8a84 	vstr	s17, [r9, #528]	; 0x210
 8012798:	edc9 8a85 	vstr	s17, [r9, #532]	; 0x214
 801279c:	edc9 8a86 	vstr	s17, [r9, #536]	; 0x218
 80127a0:	edc9 8a6e 	vstr	s17, [r9, #440]	; 0x1b8
 80127a4:	edc9 8a87 	vstr	s17, [r9, #540]	; 0x21c
 80127a8:	edc9 8a88 	vstr	s17, [r9, #544]	; 0x220
 80127ac:	edc9 8a8a 	vstr	s17, [r9, #552]	; 0x228
 80127b0:	edc9 8a8b 	vstr	s17, [r9, #556]	; 0x22c
 80127b4:	edc9 8a8c 	vstr	s17, [r9, #560]	; 0x230
 80127b8:	edc9 8a8d 	vstr	s17, [r9, #564]	; 0x234
 80127bc:	edc9 8a8e 	vstr	s17, [r9, #568]	; 0x238
 80127c0:	edc9 8a8f 	vstr	s17, [r9, #572]	; 0x23c
 80127c4:	edc9 8a6f 	vstr	s17, [r9, #444]	; 0x1bc
 80127c8:	edc9 8a90 	vstr	s17, [r9, #576]	; 0x240
 80127cc:	edc9 8a91 	vstr	s17, [r9, #580]	; 0x244
 80127d0:	edc9 8a92 	vstr	s17, [r9, #584]	; 0x248
 80127d4:	edc9 8a94 	vstr	s17, [r9, #592]	; 0x250
 80127d8:	edc9 8a95 	vstr	s17, [r9, #596]	; 0x254
 80127dc:	edc9 8a96 	vstr	s17, [r9, #600]	; 0x258
 80127e0:	edc9 8a97 	vstr	s17, [r9, #604]	; 0x25c
 80127e4:	edc9 8a98 	vstr	s17, [r9, #608]	; 0x260
 80127e8:	edc9 8a70 	vstr	s17, [r9, #448]	; 0x1c0
 80127ec:	edc9 8a99 	vstr	s17, [r9, #612]	; 0x264
 80127f0:	edc9 8a9a 	vstr	s17, [r9, #616]	; 0x268
 80127f4:	edc9 8a9b 	vstr	s17, [r9, #620]	; 0x26c
 80127f8:	edc9 8a9c 	vstr	s17, [r9, #624]	; 0x270
 80127fc:	edc9 8a9e 	vstr	s17, [r9, #632]	; 0x278
 8012800:	edc9 7aa7 	vstr	s15, [r9, #668]	; 0x29c
 8012804:	edc9 7ab1 	vstr	s15, [r9, #708]	; 0x2c4
 8012808:	edc9 7abb 	vstr	s15, [r9, #748]	; 0x2ec
 801280c:	edc9 8a9f 	vstr	s17, [r9, #636]	; 0x27c
 8012810:	edc9 8aa0 	vstr	s17, [r9, #640]	; 0x280
 8012814:	edc9 8aa1 	vstr	s17, [r9, #644]	; 0x284
 8012818:	edc9 8a71 	vstr	s17, [r9, #452]	; 0x1c4
 801281c:	edc9 8aa2 	vstr	s17, [r9, #648]	; 0x288
 8012820:	edc9 8aa3 	vstr	s17, [r9, #652]	; 0x28c
 8012824:	edc9 8aa4 	vstr	s17, [r9, #656]	; 0x290
 8012828:	edc9 8aa5 	vstr	s17, [r9, #660]	; 0x294
 801282c:	edc9 8aa6 	vstr	s17, [r9, #664]	; 0x298
 8012830:	edc9 8aa8 	vstr	s17, [r9, #672]	; 0x2a0
 8012834:	edc9 8aa9 	vstr	s17, [r9, #676]	; 0x2a4
 8012838:	edc9 8aaa 	vstr	s17, [r9, #680]	; 0x2a8
 801283c:	edc9 8a72 	vstr	s17, [r9, #456]	; 0x1c8
 8012840:	edc9 8aab 	vstr	s17, [r9, #684]	; 0x2ac
 8012844:	edc9 8aac 	vstr	s17, [r9, #688]	; 0x2b0
 8012848:	edc9 8aad 	vstr	s17, [r9, #692]	; 0x2b4
 801284c:	edc9 8aae 	vstr	s17, [r9, #696]	; 0x2b8
 8012850:	edc9 8aaf 	vstr	s17, [r9, #700]	; 0x2bc
 8012854:	edc9 8ab0 	vstr	s17, [r9, #704]	; 0x2c0
 8012858:	edc9 8ab2 	vstr	s17, [r9, #712]	; 0x2c8
 801285c:	edc9 8ab3 	vstr	s17, [r9, #716]	; 0x2cc
 8012860:	edc9 8a73 	vstr	s17, [r9, #460]	; 0x1cc
 8012864:	edc9 8ab4 	vstr	s17, [r9, #720]	; 0x2d0
 8012868:	edc9 8ab5 	vstr	s17, [r9, #724]	; 0x2d4
 801286c:	edc9 8ab6 	vstr	s17, [r9, #728]	; 0x2d8
 8012870:	edc9 8ab7 	vstr	s17, [r9, #732]	; 0x2dc
 8012874:	edc9 8ab8 	vstr	s17, [r9, #736]	; 0x2e0
 8012878:	edc9 8ab9 	vstr	s17, [r9, #740]	; 0x2e4
 801287c:	edc9 8aba 	vstr	s17, [r9, #744]	; 0x2e8
 8012880:	edc9 8abc 	vstr	s17, [r9, #752]	; 0x2f0
 8012884:	9a04      	ldr	r2, [sp, #16]
 8012886:	f889 11ac 	strb.w	r1, [r9, #428]	; 0x1ac
 801288a:	edc9 8a74 	vstr	s17, [r9, #464]	; 0x1d0
 801288e:	edc9 7ac5 	vstr	s15, [r9, #788]	; 0x314
 8012892:	9203      	str	r2, [sp, #12]
 8012894:	f50d 624a 	add.w	r2, sp, #3232	; 0xca0
 8012898:	9202      	str	r2, [sp, #8]
 801289a:	f50d 6233 	add.w	r2, sp, #2864	; 0xb30
 801289e:	9201      	str	r2, [sp, #4]
 80128a0:	f50d 621c 	add.w	r2, sp, #2496	; 0x9c0
 80128a4:	9200      	str	r2, [sp, #0]
 80128a6:	7820      	ldrb	r0, [r4, #0]
 80128a8:	edc9 8abd 	vstr	s17, [r9, #756]	; 0x2f4
 80128ac:	f50d 6305 	add.w	r3, sp, #2128	; 0x850
 80128b0:	f50d 62dc 	add.w	r2, sp, #1760	; 0x6e0
 80128b4:	f20d 61bc 	addw	r1, sp, #1724	; 0x6bc
 80128b8:	edc9 8abe 	vstr	s17, [r9, #760]	; 0x2f8
 80128bc:	edc9 8abf 	vstr	s17, [r9, #764]	; 0x2fc
 80128c0:	edc9 8ac0 	vstr	s17, [r9, #768]	; 0x300
 80128c4:	edc9 8ac1 	vstr	s17, [r9, #772]	; 0x304
 80128c8:	edc9 8ac2 	vstr	s17, [r9, #776]	; 0x308
 80128cc:	edc9 8ac3 	vstr	s17, [r9, #780]	; 0x30c
 80128d0:	edc9 8ac4 	vstr	s17, [r9, #784]	; 0x310
 80128d4:	f7fe f862 	bl	801099c <DataHist_parameters>
 80128d8:	f609 1344 	addw	r3, r9, #2372	; 0x944
 80128dc:	f509 6216 	add.w	r2, r9, #2400	; 0x960
 80128e0:	f609 1168 	addw	r1, r9, #2408	; 0x968
 80128e4:	f509 6017 	add.w	r0, r9, #2416	; 0x970
 80128e8:	f10d 0c20 	add.w	ip, sp, #32
 80128ec:	9304      	str	r3, [sp, #16]
 80128ee:	9205      	str	r2, [sp, #20]
 80128f0:	9106      	str	r1, [sp, #24]
 80128f2:	9007      	str	r0, [sp, #28]
 80128f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80128f8:	f8c9 393c 	str.w	r3, [r9, #2364]	; 0x93c
 80128fc:	9b04      	ldr	r3, [sp, #16]
 80128fe:	f8c9 0930 	str.w	r0, [r9, #2352]	; 0x930
 8012902:	f8c9 1934 	str.w	r1, [r9, #2356]	; 0x934
 8012906:	f8c9 2938 	str.w	r2, [r9, #2360]	; 0x938
 801290a:	9906      	ldr	r1, [sp, #24]
 801290c:	9a05      	ldr	r2, [sp, #20]
 801290e:	9807      	ldr	r0, [sp, #28]
 8012910:	f509 6b14 	add.w	fp, r9, #2368	; 0x940
 8012914:	f609 1a5c 	addw	sl, r9, #2396	; 0x95c
 8012918:	edcb 8a00 	vstr	s17, [fp]
 801291c:	f609 1748 	addw	r7, r9, #2376	; 0x948
 8012920:	edca 8a00 	vstr	s17, [sl]
 8012924:	f609 1664 	addw	r6, r9, #2404	; 0x964
 8012928:	edc3 8a00 	vstr	s17, [r3]
 801292c:	f609 1554 	addw	r5, r9, #2388	; 0x954
 8012930:	f609 1458 	addw	r4, r9, #2392	; 0x958
 8012934:	f609 1e6c 	addw	lr, r9, #2412	; 0x96c
 8012938:	230a      	movs	r3, #10
 801293a:	edc2 8a00 	vstr	s17, [r2]
 801293e:	edc7 8a00 	vstr	s17, [r7]
 8012942:	edc6 8a00 	vstr	s17, [r6]
 8012946:	f8c9 894c 	str.w	r8, [r9, #2380]	; 0x94c
 801294a:	f8a9 8950 	strh.w	r8, [r9, #2384]	; 0x950
 801294e:	edc5 8a00 	vstr	s17, [r5]
 8012952:	ed84 8a00 	vstr	s16, [r4]
 8012956:	edc1 8a00 	vstr	s17, [r1]
 801295a:	edc0 8a00 	vstr	s17, [r0]
 801295e:	edce 8a00 	vstr	s17, [lr]
 8012962:	f8c9 3974 	str.w	r3, [r9, #2420]	; 0x974
 8012966:	f889 8978 	strb.w	r8, [r9, #2424]	; 0x978
 801296a:	f60d 4dd4 	addw	sp, sp, #3284	; 0xcd4
 801296e:	ecbd 8b02 	vpop	{d8}
 8012972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012976:	bf00      	nop

08012978 <iNemoEngine_API_Update>:
 8012978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801297c:	ed2d 8b10 	vpush	{d8-d15}
 8012980:	f2ad 5d94 	subw	sp, sp, #1428	; 0x594
 8012984:	eeb0 8a40 	vmov.f32	s16, s0
 8012988:	9006      	str	r0, [sp, #24]
 801298a:	9114      	str	r1, [sp, #80]	; 0x50
 801298c:	4614      	mov	r4, r2
 801298e:	9324      	str	r3, [sp, #144]	; 0x90
 8012990:	2b00      	cmp	r3, #0
 8012992:	f000 8222 	beq.w	8012dda <iNemoEngine_API_Update+0x462>
 8012996:	68e0      	ldr	r0, [r4, #12]
 8012998:	6921      	ldr	r1, [r4, #16]
 801299a:	6962      	ldr	r2, [r4, #20]
 801299c:	9d06      	ldr	r5, [sp, #24]
 801299e:	aba1      	add	r3, sp, #644	; 0x284
 80129a0:	c307      	stmia	r3!, {r0, r1, r2}
 80129a2:	6820      	ldr	r0, [r4, #0]
 80129a4:	6861      	ldr	r1, [r4, #4]
 80129a6:	68a2      	ldr	r2, [r4, #8]
 80129a8:	ab9e      	add	r3, sp, #632	; 0x278
 80129aa:	c307      	stmia	r3!, {r0, r1, r2}
 80129ac:	69a0      	ldr	r0, [r4, #24]
 80129ae:	69e1      	ldr	r1, [r4, #28]
 80129b0:	6a22      	ldr	r2, [r4, #32]
 80129b2:	f895 4978 	ldrb.w	r4, [r5, #2424]	; 0x978
 80129b6:	aba4      	add	r3, sp, #656	; 0x290
 80129b8:	c307      	stmia	r3!, {r0, r1, r2}
 80129ba:	b12c      	cbz	r4, 80129c8 <iNemoEngine_API_Update+0x50>
 80129bc:	f8b5 2950 	ldrh.w	r2, [r5, #2384]	; 0x950
 80129c0:	792b      	ldrb	r3, [r5, #4]
 80129c2:	429a      	cmp	r2, r3
 80129c4:	f082 82a5 	bcs.w	8014f12 <iNemoEngine_API_Update+0x259a>
 80129c8:	9c06      	ldr	r4, [sp, #24]
 80129ca:	ae31      	add	r6, sp, #196	; 0xc4
 80129cc:	f104 033a 	add.w	r3, r4, #58	; 0x3a
 80129d0:	4619      	mov	r1, r3
 80129d2:	4630      	mov	r0, r6
 80129d4:	aaa1      	add	r2, sp, #644	; 0x284
 80129d6:	9320      	str	r3, [sp, #128]	; 0x80
 80129d8:	ad37      	add	r5, sp, #220	; 0xdc
 80129da:	f7fe f897 	bl	8010b0c <rotVect>
 80129de:	aaa4      	add	r2, sp, #656	; 0x290
 80129e0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 80129e4:	a834      	add	r0, sp, #208	; 0xd0
 80129e6:	f7fe f891 	bl	8010b0c <rotVect>
 80129ea:	aa9e      	add	r2, sp, #632	; 0x278
 80129ec:	f104 0143 	add.w	r1, r4, #67	; 0x43
 80129f0:	4628      	mov	r0, r5
 80129f2:	f7fe f88b 	bl	8010b0c <rotVect>
 80129f6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80129fa:	b923      	cbnz	r3, 8012a06 <iNemoEngine_API_Update+0x8e>
 80129fc:	4b9d      	ldr	r3, [pc, #628]	; (8012c74 <iNemoEngine_API_Update+0x2fc>)
 80129fe:	606b      	str	r3, [r5, #4]
 8012a00:	60ab      	str	r3, [r5, #8]
 8012a02:	2300      	movs	r3, #0
 8012a04:	602b      	str	r3, [r5, #0]
 8012a06:	9b06      	ldr	r3, [sp, #24]
 8012a08:	f8d3 794c 	ldr.w	r7, [r3, #2380]	; 0x94c
 8012a0c:	2f09      	cmp	r7, #9
 8012a0e:	d851      	bhi.n	8012ab4 <iNemoEngine_API_Update+0x13c>
 8012a10:	edd6 aa01 	vldr	s21, [r6, #4]
 8012a14:	ed96 ba00 	vldr	s22, [r6]
 8012a18:	ed96 aa02 	vldr	s20, [r6, #8]
 8012a1c:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 8012a20:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8012a24:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8012a28:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8012a2c:	ee17 0a90 	vmov	r0, s15
 8012a30:	f7ed fd94 	bl	800055c <__aeabi_f2d>
 8012a34:	ec41 0b10 	vmov	d0, r0, r1
 8012a38:	f009 fb4c 	bl	801c0d4 <sqrt>
 8012a3c:	ec51 0b10 	vmov	r0, r1, d0
 8012a40:	f7ee f8dc 	bl	8000bfc <__aeabi_d2f>
 8012a44:	ee07 0a90 	vmov	s15, r0
 8012a48:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 8012a4c:	ed95 9a01 	vldr	s18, [r5, #4]
 8012a50:	edd5 9a00 	vldr	s19, [r5]
 8012a54:	edd5 8a02 	vldr	s17, [r5, #8]
 8012a58:	ee69 7a09 	vmul.f32	s15, s18, s18
 8012a5c:	ee2b ba07 	vmul.f32	s22, s22, s14
 8012a60:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8012a64:	ee6a aa87 	vmul.f32	s21, s21, s14
 8012a68:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8012a6c:	ee2a aa07 	vmul.f32	s20, s20, s14
 8012a70:	ee17 0a90 	vmov	r0, s15
 8012a74:	ed86 ba00 	vstr	s22, [r6]
 8012a78:	edc6 aa01 	vstr	s21, [r6, #4]
 8012a7c:	ed86 aa02 	vstr	s20, [r6, #8]
 8012a80:	f7ed fd6c 	bl	800055c <__aeabi_f2d>
 8012a84:	ec41 0b10 	vmov	d0, r0, r1
 8012a88:	f009 fb24 	bl	801c0d4 <sqrt>
 8012a8c:	ec51 0b10 	vmov	r0, r1, d0
 8012a90:	f7ee f8b4 	bl	8000bfc <__aeabi_d2f>
 8012a94:	ee07 0a90 	vmov	s15, r0
 8012a98:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 8012a9c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8012aa0:	ee29 9a27 	vmul.f32	s18, s18, s15
 8012aa4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012aa8:	edc5 9a00 	vstr	s19, [r5]
 8012aac:	ed85 9a01 	vstr	s18, [r5, #4]
 8012ab0:	edc5 8a02 	vstr	s17, [r5, #8]
 8012ab4:	9906      	ldr	r1, [sp, #24]
 8012ab6:	790b      	ldrb	r3, [r1, #4]
 8012ab8:	f8b1 2950 	ldrh.w	r2, [r1, #2384]	; 0x950
 8012abc:	429a      	cmp	r2, r3
 8012abe:	f080 80f5 	bcs.w	8012cac <iNemoEngine_API_Update+0x334>
 8012ac2:	abf8      	add	r3, sp, #992	; 0x3e0
 8012ac4:	9319      	str	r3, [sp, #100]	; 0x64
 8012ac6:	f501 6313 	add.w	r3, r1, #2352	; 0x930
 8012aca:	931c      	str	r3, [sp, #112]	; 0x70
 8012acc:	f601 1334 	addw	r3, r1, #2356	; 0x934
 8012ad0:	931d      	str	r3, [sp, #116]	; 0x74
 8012ad2:	f601 1338 	addw	r3, r1, #2360	; 0x938
 8012ad6:	931e      	str	r3, [sp, #120]	; 0x78
 8012ad8:	eddd 9af5 	vldr	s19, [sp, #980]	; 0x3d4
 8012adc:	f601 133c 	addw	r3, r1, #2364	; 0x93c
 8012ae0:	accc      	add	r4, sp, #816	; 0x330
 8012ae2:	931f      	str	r3, [sp, #124]	; 0x7c
 8012ae4:	460d      	mov	r5, r1
 8012ae6:	3701      	adds	r7, #1
 8012ae8:	9819      	ldr	r0, [sp, #100]	; 0x64
 8012aea:	9920      	ldr	r1, [sp, #128]	; 0x80
 8012aec:	f8c5 794c 	str.w	r7, [r5, #2380]	; 0x94c
 8012af0:	aaa1      	add	r2, sp, #644	; 0x284
 8012af2:	f7fe f80b 	bl	8010b0c <rotVect>
 8012af6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012af8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	60d3      	str	r3, [r2, #12]
 8012afe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	6113      	str	r3, [r2, #16]
 8012b04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	6153      	str	r3, [r2, #20]
 8012b0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	6193      	str	r3, [r2, #24]
 8012b10:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8012b14:	9301      	str	r3, [sp, #4]
 8012b16:	4601      	mov	r1, r0
 8012b18:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8012b1c:	4610      	mov	r0, r2
 8012b1e:	4615      	mov	r5, r2
 8012b20:	300c      	adds	r0, #12
 8012b22:	9300      	str	r3, [sp, #0]
 8012b24:	f102 031c 	add.w	r3, r2, #28
 8012b28:	f7ff fb6c 	bl	8012204 <output_update>
 8012b2c:	ed95 8a00 	vldr	s16, [r5]
 8012b30:	ed95 aa01 	vldr	s20, [r5, #4]
 8012b34:	eeb0 0a48 	vmov.f32	s0, s16
 8012b38:	f009 fca2 	bl	801c480 <sinf>
 8012b3c:	eeb0 9a40 	vmov.f32	s18, s0
 8012b40:	eeb0 0a48 	vmov.f32	s0, s16
 8012b44:	f009 fa82 	bl	801c04c <cosf>
 8012b48:	edd4 7a33 	vldr	s15, [r4, #204]	; 0xcc
 8012b4c:	edd4 6a3d 	vldr	s13, [r4, #244]	; 0xf4
 8012b50:	ee60 8a00 	vmul.f32	s17, s0, s0
 8012b54:	eeb0 7aca 	vabs.f32	s14, s20
 8012b58:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012b5c:	eddf 7a46 	vldr	s15, [pc, #280]	; 8012c78 <iNemoEngine_API_Update+0x300>
 8012b60:	ee29 9a09 	vmul.f32	s18, s18, s18
 8012b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b6c:	eee9 8a26 	vfma.f32	s17, s18, s13
 8012b70:	d579      	bpl.n	8012c66 <iNemoEngine_API_Update+0x2ee>
 8012b72:	eeb0 0a4a 	vmov.f32	s0, s20
 8012b76:	f009 fcd3 	bl	801c520 <tanf>
 8012b7a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012b7e:	eeb0 7a69 	vmov.f32	s14, s19
 8012b82:	eea0 7a28 	vfma.f32	s14, s0, s17
 8012b86:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012b88:	9b06      	ldr	r3, [sp, #24]
 8012b8a:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8012c7c <iNemoEngine_API_Update+0x304>
 8012b8e:	4c3c      	ldr	r4, [pc, #240]	; (8012c80 <iNemoEngine_API_Update+0x308>)
 8012b90:	eef1 7ac7 	vsqrt.f32	s15, s14
 8012b94:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8012ca0 <iNemoEngine_API_Update+0x328>
 8012b98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012b9c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba4:	bf88      	it	hi
 8012ba6:	eef0 7a66 	vmovhi.f32	s15, s13
 8012baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb2:	bfb8      	it	lt
 8012bb4:	eef0 7a47 	vmovlt.f32	s15, s14
 8012bb8:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8012bbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012bc0:	bbd3      	cbnz	r3, 8012c38 <iNemoEngine_API_Update+0x2c0>
 8012bc2:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8012bc6:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 8012bca:	edd5 0a08 	vldr	s1, [r5, #32]
 8012bce:	ed95 0a07 	vldr	s0, [r5, #28]
 8012bd2:	f7fe f86d 	bl	8010cb0 <findDirection>
 8012bd6:	ed95 7a03 	vldr	s14, [r5, #12]
 8012bda:	edd5 6a04 	vldr	s13, [r5, #16]
 8012bde:	edd5 8a05 	vldr	s17, [r5, #20]
 8012be2:	edd5 7a06 	vldr	s15, [r5, #24]
 8012be6:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0
 8012bea:	2805      	cmp	r0, #5
 8012bec:	f204 822c 	bhi.w	8017048 <iNemoEngine_API_Update+0x46d0>
 8012bf0:	e8df f010 	tbh	[pc, r0, lsl #1]
 8012bf4:	11d0000a 	.word	0x11d0000a
 8012bf8:	11990006 	.word	0x11990006
 8012bfc:	000a0006 	.word	0x000a0006
 8012c00:	eddf 7a20 	vldr	s15, [pc, #128]	; 8012c84 <iNemoEngine_API_Update+0x30c>
 8012c04:	ee38 8a27 	vadd.f32	s16, s16, s15
 8012c08:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012c88 <iNemoEngine_API_Update+0x310>
 8012c0c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c14:	bfa8      	it	ge
 8012c16:	ee38 8a67 	vsubge.f32	s16, s16, s15
 8012c1a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c22:	f100 80d5 	bmi.w	8012dd0 <iNemoEngine_API_Update+0x458>
 8012c26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012c28:	ed83 8a0d 	vstr	s16, [r3, #52]	; 0x34
 8012c2c:	f20d 5d94 	addw	sp, sp, #1428	; 0x594
 8012c30:	ecbd 8b10 	vpop	{d8-d15}
 8012c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c38:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8012c3c:	edd5 8a05 	vldr	s17, [r5, #20]
 8012c40:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 8012c44:	edd5 0a07 	vldr	s1, [r5, #28]
 8012c48:	ed95 0a08 	vldr	s0, [r5, #32]
 8012c4c:	eeb1 1a41 	vneg.f32	s2, s2
 8012c50:	f7fe f82e 	bl	8010cb0 <findDirection>
 8012c54:	eef1 8a68 	vneg.f32	s17, s17
 8012c58:	ed95 7a04 	vldr	s14, [r5, #16]
 8012c5c:	edd5 6a03 	vldr	s13, [r5, #12]
 8012c60:	edd5 7a06 	vldr	s15, [r5, #24]
 8012c64:	e7bf      	b.n	8012be6 <iNemoEngine_API_Update+0x26e>
 8012c66:	eddf 7a09 	vldr	s15, [pc, #36]	; 8012c8c <iNemoEngine_API_Update+0x314>
 8012c6a:	eeb0 7a69 	vmov.f32	s14, s19
 8012c6e:	eea8 7aa7 	vfma.f32	s14, s17, s15
 8012c72:	e788      	b.n	8012b86 <iNemoEngine_API_Update+0x20e>
 8012c74:	3f333333 	.word	0x3f333333
 8012c78:	3fbc430e 	.word	0x3fbc430e
 8012c7c:	40490fdb 	.word	0x40490fdb
 8012c80:	20000224 	.word	0x20000224
 8012c84:	43340000 	.word	0x43340000
 8012c88:	43b40000 	.word	0x43b40000
 8012c8c:	42c6ab07 	.word	0x42c6ab07
 8012c90:	3c03126f 	.word	0x3c03126f
 8012c94:	3b656042 	.word	0x3b656042
 8012c98:	3e4ccccd 	.word	0x3e4ccccd
 8012c9c:	3fb50481 	.word	0x3fb50481
 8012ca0:	3c8efa35 	.word	0x3c8efa35
 8012ca4:	3ed93dd9 	.word	0x3ed93dd9
 8012ca8:	42c80000 	.word	0x42c80000
 8012cac:	ee07 3a90 	vmov	s15, r3
 8012cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cb4:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8012c90 <iNemoEngine_API_Update+0x318>
 8012cb8:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 8012c94 <iNemoEngine_API_Update+0x31c>
 8012cbc:	ed5f ba08 	vldr	s23, [pc, #-32]	; 8012ca0 <iNemoEngine_API_Update+0x328>
 8012cc0:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 8012c9c <iNemoEngine_API_Update+0x324>
 8012cc4:	ed5f 4a0c 	vldr	s9, [pc, #-48]	; 8012c98 <iNemoEngine_API_Update+0x320>
 8012cc8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012ccc:	4608      	mov	r0, r1
 8012cce:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8012cd2:	f601 125c 	addw	r2, r1, #2396	; 0x95c
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	2100      	movs	r1, #0
 8012cda:	f50d 7cb2 	add.w	ip, sp, #356	; 0x164
 8012cde:	ac56      	add	r4, sp, #344	; 0x158
 8012ce0:	edcd 7a07 	vstr	s15, [sp, #28]
 8012ce4:	eef1 7ae5 	vsqrt.f32	s15, s11
 8012ce8:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 8012ca4 <iNemoEngine_API_Update+0x32c>
 8012cec:	ee86 4aa7 	vdiv.f32	s8, s13, s15
 8012cf0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8012cf4:	ed92 7a00 	vldr	s14, [r2]
 8012cf8:	f8a0 1950 	strh.w	r1, [r0, #2384]	; 0x950
 8012cfc:	6013      	str	r3, [r2, #0]
 8012cfe:	f500 6216 	add.w	r2, r0, #2400	; 0x960
 8012d02:	ee27 ea2b 	vmul.f32	s28, s14, s23
 8012d06:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
 8012d0a:	ed92 7a00 	vldr	s14, [r2]
 8012d0e:	6013      	str	r3, [r2, #0]
 8012d10:	f600 1264 	addw	r2, r0, #2404	; 0x964
 8012d14:	ee67 ea2b 	vmul.f32	s29, s14, s23
 8012d18:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
 8012d1c:	ed92 7a00 	vldr	s14, [r2]
 8012d20:	6013      	str	r3, [r2, #0]
 8012d22:	7947      	ldrb	r7, [r0, #5]
 8012d24:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 8012d28:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012d2c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8012d30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012d34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012d38:	9a06      	ldr	r2, [sp, #24]
 8012d3a:	f8d2 01c8 	ldr.w	r0, [r2, #456]	; 0x1c8
 8012d3e:	f8d2 11cc 	ldr.w	r1, [r2, #460]	; 0x1cc
 8012d42:	f8d2 21d0 	ldr.w	r2, [r2, #464]	; 0x1d0
 8012d46:	abd9      	add	r3, sp, #868	; 0x364
 8012d48:	2f01      	cmp	r7, #1
 8012d4a:	c307      	stmia	r3!, {r0, r1, r2}
 8012d4c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8012d50:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8012d54:	ee67 ba2b 	vmul.f32	s23, s14, s23
 8012d58:	f002 844a 	beq.w	80155f0 <iNemoEngine_API_Update+0x2c78>
 8012d5c:	2f02      	cmp	r7, #2
 8012d5e:	f002 843c 	beq.w	80155da <iNemoEngine_API_Update+0x2c62>
 8012d62:	2f00      	cmp	r7, #0
 8012d64:	f002 814d 	beq.w	8015002 <iNemoEngine_API_Update+0x268a>
 8012d68:	9b06      	ldr	r3, [sp, #24]
 8012d6a:	ed5f 5a31 	vldr	s11, [pc, #-196]	; 8012ca8 <iNemoEngine_API_Update+0x330>
 8012d6e:	ed93 ba05 	vldr	s22, [r3, #20]
 8012d72:	491b      	ldr	r1, [pc, #108]	; (8012de0 <iNemoEngine_API_Update+0x468>)
 8012d74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012d78:	ee2b ba25 	vmul.f32	s22, s22, s11
 8012d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012d80:	4618      	mov	r0, r3
 8012d82:	8842      	ldrh	r2, [r0, #2]
 8012d84:	1e53      	subs	r3, r2, #1
 8012d86:	2b12      	cmp	r3, #18
 8012d88:	d834      	bhi.n	8012df4 <iNemoEngine_API_Update+0x47c>
 8012d8a:	3201      	adds	r2, #1
 8012d8c:	b213      	sxth	r3, r2
 8012d8e:	b292      	uxth	r2, r2
 8012d90:	2a03      	cmp	r2, #3
 8012d92:	8043      	strh	r3, [r0, #2]
 8012d94:	f242 8401 	bls.w	801559a <iNemoEngine_API_Update+0x2c22>
 8012d98:	ee07 3a10 	vmov	s14, r3
 8012d9c:	eddf 5a11 	vldr	s11, [pc, #68]	; 8012de4 <iNemoEngine_API_Update+0x46c>
 8012da0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012da4:	4603      	mov	r3, r0
 8012da6:	ee27 7a25 	vmul.f32	s14, s14, s11
 8012daa:	ee84 4a07 	vdiv.f32	s8, s8, s14
 8012dae:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
 8012db2:	ed8d 4a22 	vstr	s8, [sp, #136]	; 0x88
 8012db6:	ee66 5a87 	vmul.f32	s11, s13, s14
 8012dba:	ee66 6a05 	vmul.f32	s13, s12, s10
 8012dbe:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8012df0 <iNemoEngine_API_Update+0x478>
 8012dc2:	ee66 6a87 	vmul.f32	s13, s13, s14
 8012dc6:	ee24 6a86 	vmul.f32	s12, s9, s12
 8012dca:	eeb0 7a65 	vmov.f32	s14, s11
 8012dce:	e02d      	b.n	8012e2c <iNemoEngine_API_Update+0x4b4>
 8012dd0:	eddf 7a05 	vldr	s15, [pc, #20]	; 8012de8 <iNemoEngine_API_Update+0x470>
 8012dd4:	ee38 8a27 	vadd.f32	s16, s16, s15
 8012dd8:	e725      	b.n	8012c26 <iNemoEngine_API_Update+0x2ae>
 8012dda:	ab46      	add	r3, sp, #280	; 0x118
 8012ddc:	9324      	str	r3, [sp, #144]	; 0x90
 8012dde:	e5da      	b.n	8012996 <iNemoEngine_API_Update+0x1e>
 8012de0:	3a83126f 	.word	0x3a83126f
 8012de4:	3d4ccccd 	.word	0x3d4ccccd
 8012de8:	43b40000 	.word	0x43b40000
 8012dec:	358637bd 	.word	0x358637bd
 8012df0:	3f333333 	.word	0x3f333333
 8012df4:	ed1f 5a03 	vldr	s10, [pc, #-12]	; 8012dec <iNemoEngine_API_Update+0x474>
 8012df8:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8012dfc:	edd0 5a0b 	vldr	s11, [r0, #44]	; 0x2c
 8012e00:	ee37 7a05 	vadd.f32	s14, s14, s10
 8012e04:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
 8012e08:	ee84 7a07 	vdiv.f32	s14, s8, s14
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	8043      	strh	r3, [r0, #2]
 8012e10:	ee66 5aa5 	vmul.f32	s11, s13, s11
 8012e14:	ed8d 7a22 	vstr	s14, [sp, #136]	; 0x88
 8012e18:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8012e1c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8012e20:	ee66 6a05 	vmul.f32	s13, s12, s10
 8012e24:	ed1f 6a0e 	vldr	s12, [pc, #-56]	; 8012df0 <iNemoEngine_API_Update+0x478>
 8012e28:	ee24 6a86 	vmul.f32	s12, s9, s12
 8012e2c:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
 8012e30:	ee25 5a24 	vmul.f32	s10, s10, s9
 8012e34:	edcd 7a89 	vstr	s15, [sp, #548]	; 0x224
 8012e38:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 8012e3c:	edcd 7a8b 	vstr	s15, [sp, #556]	; 0x22c
 8012e40:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 8012e44:	4bdd      	ldr	r3, [pc, #884]	; (80131bc <iNemoEngine_API_Update+0x844>)
 8012e46:	9162      	str	r1, [sp, #392]	; 0x188
 8012e48:	a8f8      	add	r0, sp, #992	; 0x3e0
 8012e4a:	9163      	str	r1, [sp, #396]	; 0x18c
 8012e4c:	9164      	str	r1, [sp, #400]	; 0x190
 8012e4e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8012e52:	2100      	movs	r1, #0
 8012e54:	4605      	mov	r5, r0
 8012e56:	9367      	str	r3, [sp, #412]	; 0x19c
 8012e58:	9019      	str	r0, [sp, #100]	; 0x64
 8012e5a:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 8012e5e:	edcd 5a84 	vstr	s11, [sp, #528]	; 0x210
 8012e62:	edcd 5a85 	vstr	s11, [sp, #532]	; 0x214
 8012e66:	ed8d 7a86 	vstr	s14, [sp, #536]	; 0x218
 8012e6a:	ed8d 7a87 	vstr	s14, [sp, #540]	; 0x21c
 8012e6e:	ed8d 7a88 	vstr	s14, [sp, #544]	; 0x220
 8012e72:	edcd 6a8c 	vstr	s13, [sp, #560]	; 0x230
 8012e76:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 8012e7a:	ed8d 5a8e 	vstr	s10, [sp, #568]	; 0x238
 8012e7e:	edcd 7a5f 	vstr	s15, [sp, #380]	; 0x17c
 8012e82:	edcd 7a60 	vstr	s15, [sp, #384]	; 0x180
 8012e86:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 8012e8a:	f006 f9c1 	bl	8019210 <memset>
 8012e8e:	9b06      	ldr	r3, [sp, #24]
 8012e90:	7b5a      	ldrb	r2, [r3, #13]
 8012e92:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8012e96:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 8012e9a:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
 8012e9e:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 8012ea2:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
 8012ea6:	f8c5 3178 	str.w	r3, [r5, #376]	; 0x178
 8012eaa:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
 8012eae:	2a00      	cmp	r2, #0
 8012eb0:	f001 8124 	beq.w	80140fc <iNemoEngine_API_Update+0x1784>
 8012eb4:	ed94 8a01 	vldr	s16, [r4, #4]
 8012eb8:	edd4 8a00 	vldr	s17, [r4]
 8012ebc:	ed94 ca02 	vldr	s24, [r4, #8]
 8012ec0:	ee28 9a08 	vmul.f32	s18, s16, s16
 8012ec4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8012ec8:	eea8 9aa8 	vfma.f32	s18, s17, s17
 8012ecc:	ee68 5a27 	vmul.f32	s11, s16, s15
 8012ed0:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8012ed4:	ee6c 6a27 	vmul.f32	s13, s24, s15
 8012ed8:	eef1 cac9 	vsqrt.f32	s25, s18
 8012edc:	ee3c 5a0c 	vadd.f32	s10, s24, s24
 8012ee0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012ee4:	ee38 6aa8 	vadd.f32	s12, s17, s17
 8012ee8:	ee38 7a08 	vadd.f32	s14, s16, s16
 8012eec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012eee:	ed94 aa04 	vldr	s20, [r4, #16]
 8012ef2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8012ef6:	eef1 7a4a 	vneg.f32	s15, s20
 8012efa:	edd4 9a05 	vldr	s19, [r4, #20]
 8012efe:	edd4 aa03 	vldr	s21, [r4, #12]
 8012f02:	ed83 5a01 	vstr	s10, [r3, #4]
 8012f06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012f0a:	edc3 5a02 	vstr	s11, [r3, #8]
 8012f0e:	edc3 7a05 	vstr	s15, [r3, #20]
 8012f12:	eef1 7a69 	vneg.f32	s15, s19
 8012f16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012f1a:	edc3 6a0c 	vstr	s13, [r3, #48]	; 0x30
 8012f1e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8012f22:	eef1 7a6a 	vneg.f32	s15, s21
 8012f26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012f2a:	ed83 6a0e 	vstr	s12, [r3, #56]	; 0x38
 8012f2e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 8012f32:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8012f36:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60
 8012f3a:	edc3 7a04 	vstr	s15, [r3, #16]
 8012f3e:	ee7a 7aaa 	vadd.f32	s15, s21, s21
 8012f42:	2230      	movs	r2, #48	; 0x30
 8012f44:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8012f48:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 8012f4c:	2100      	movs	r1, #0
 8012f4e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 8012f52:	a88f      	add	r0, sp, #572	; 0x23c
 8012f54:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8012f58:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
 8012f5c:	933c      	str	r3, [sp, #240]	; 0xf0
 8012f5e:	f006 f957 	bl	8019210 <memset>
 8012f62:	9a06      	ldr	r2, [sp, #24]
 8012f64:	edd2 7a07 	vldr	s15, [r2, #28]
 8012f68:	ed92 da06 	vldr	s26, [r2, #24]
 8012f6c:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
 8012f70:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8012f74:	ee2b da0d 	vmul.f32	s26, s22, s26
 8012f78:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 8012f7c:	edd2 7a08 	vldr	s15, [r2, #32]
 8012f80:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8012f84:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	f043 8025 	bne.w	8015fd8 <iNemoEngine_API_Update+0x3660>
 8012f8e:	4613      	mov	r3, r2
 8012f90:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 8012f94:	9225      	str	r2, [sp, #148]	; 0x94
 8012f96:	f603 1244 	addw	r2, r3, #2372	; 0x944
 8012f9a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8012f9e:	9226      	str	r2, [sp, #152]	; 0x98
 8012fa0:	9327      	str	r3, [sp, #156]	; 0x9c
 8012fa2:	9a06      	ldr	r2, [sp, #24]
 8012fa4:	f892 3318 	ldrb.w	r3, [r2, #792]	; 0x318
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	f042 84db 	bne.w	8015964 <iNemoEngine_API_Update+0x2fec>
 8012fae:	4613      	mov	r3, r2
 8012fb0:	f502 6597 	add.w	r5, r2, #1208	; 0x4b8
 8012fb4:	f202 47b4 	addw	r7, r2, #1204	; 0x4b4
 8012fb8:	f502 66c5 	add.w	r6, r2, #1576	; 0x628
 8012fbc:	f202 6824 	addw	r8, r2, #1572	; 0x624
 8012fc0:	f203 7394 	addw	r3, r3, #1940	; 0x794
 8012fc4:	f502 62f3 	add.w	r2, r2, #1944	; 0x798
 8012fc8:	9215      	str	r2, [sp, #84]	; 0x54
 8012fca:	931b      	str	r3, [sp, #108]	; 0x6c
 8012fcc:	9b06      	ldr	r3, [sp, #24]
 8012fce:	f503 6213 	add.w	r2, r3, #2352	; 0x930
 8012fd2:	ed92 6a00 	vldr	s12, [r2]
 8012fd6:	921c      	str	r2, [sp, #112]	; 0x70
 8012fd8:	f603 1134 	addw	r1, r3, #2356	; 0x934
 8012fdc:	f603 1038 	addw	r0, r3, #2360	; 0x938
 8012fe0:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 8012fe4:	edd3 7a00 	vldr	s15, [r3]
 8012fe8:	edd1 6a00 	vldr	s13, [r1]
 8012fec:	ed90 7a00 	vldr	s14, [r0]
 8012ff0:	931f      	str	r3, [sp, #124]	; 0x7c
 8012ff2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ffa:	911d      	str	r1, [sp, #116]	; 0x74
 8012ffc:	901e      	str	r0, [sp, #120]	; 0x78
 8012ffe:	ed8d 6a4e 	vstr	s12, [sp, #312]	; 0x138
 8013002:	edcd 6a4f 	vstr	s13, [sp, #316]	; 0x13c
 8013006:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 801300a:	edcd 7a51 	vstr	s15, [sp, #324]	; 0x144
 801300e:	f04f 0300 	mov.w	r3, #0
 8013012:	d13a      	bne.n	801308a <iNemoEngine_API_Update+0x712>
 8013014:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801301c:	d135      	bne.n	801308a <iNemoEngine_API_Update+0x712>
 801301e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013026:	d130      	bne.n	801308a <iNemoEngine_API_Update+0x712>
 8013028:	eef5 7a40 	vcmp.f32	s15, #0.0
 801302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013030:	d12b      	bne.n	801308a <iNemoEngine_API_Update+0x712>
 8013032:	9a06      	ldr	r2, [sp, #24]
 8013034:	934e      	str	r3, [sp, #312]	; 0x138
 8013036:	934f      	str	r3, [sp, #316]	; 0x13c
 8013038:	9350      	str	r3, [sp, #320]	; 0x140
 801303a:	4b61      	ldr	r3, [pc, #388]	; (80131c0 <iNemoEngine_API_Update+0x848>)
 801303c:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 8013040:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013044:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 8013048:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 801304c:	9351      	str	r3, [sp, #324]	; 0x144
 801304e:	2100      	movs	r1, #0
 8013050:	4613      	mov	r3, r2
 8013052:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 8013056:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
 801305a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801305e:	f006 f8d7 	bl	8019210 <memset>
 8013062:	9a06      	ldr	r2, [sp, #24]
 8013064:	4b57      	ldr	r3, [pc, #348]	; (80131c4 <iNemoEngine_API_Update+0x84c>)
 8013066:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
 801306a:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 801306e:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
 8013072:	f8c2 324c 	str.w	r3, [r2, #588]	; 0x24c
 8013076:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
 801307a:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 801307e:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
 8013082:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
 8013086:	f8c2 3314 	str.w	r3, [r2, #788]	; 0x314
 801308a:	eddf 7a4f 	vldr	s15, [pc, #316]	; 80131c8 <iNemoEngine_API_Update+0x850>
 801308e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013096:	f100 87e0 	bmi.w	801405a <iNemoEngine_API_Update+0x16e2>
 801309a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801309e:	ee7c 6ac7 	vsub.f32	s13, s25, s14
 80130a2:	eec7 7a2c 	vdiv.f32	s15, s14, s25
 80130a6:	eeb0 7ae6 	vabs.f32	s14, s13
 80130aa:	eef0 6a47 	vmov.f32	s13, s14
 80130ae:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80130b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80130b6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80130ba:	ed8d 7a21 	vstr	s14, [sp, #132]	; 0x84
 80130be:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 80130c2:	edd4 6a00 	vldr	s13, [r4]
 80130c6:	ed94 6a01 	vldr	s12, [r4, #4]
 80130ca:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 80130ce:	eeaa 7aaa 	vfma.f32	s14, s21, s21
 80130d2:	4628      	mov	r0, r5
 80130d4:	ee67 5aa6 	vmul.f32	s11, s15, s13
 80130d8:	eea9 7aa9 	vfma.f32	s14, s19, s19
 80130dc:	ee67 6a86 	vmul.f32	s13, s15, s12
 80130e0:	ed8d 6a2d 	vstr	s12, [sp, #180]	; 0xb4
 80130e4:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80131c8 <iNemoEngine_API_Update+0x850>
 80130e8:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 80130ec:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80130f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f4:	bf54      	ite	pl
 80130f6:	eeb1 9ac7 	vsqrtpl.f32	s18, s14
 80130fa:	ed9f 9a34 	vldrmi	s18, [pc, #208]	; 80131cc <iNemoEngine_API_Update+0x854>
 80130fe:	ed94 5a02 	vldr	s10, [r4, #8]
 8013102:	edd7 3a00 	vldr	s7, [r7]
 8013106:	ed8d 5a2a 	vstr	s10, [sp, #168]	; 0xa8
 801310a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 801310e:	ee83 7a09 	vdiv.f32	s14, s6, s18
 8013112:	ee65 7a27 	vmul.f32	s15, s10, s15
 8013116:	ee2a 6a07 	vmul.f32	s12, s20, s14
 801311a:	eeb0 0a63 	vmov.f32	s0, s7
 801311e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8013122:	ed8d 6a41 	vstr	s12, [sp, #260]	; 0x104
 8013126:	ee2a 6a87 	vmul.f32	s12, s21, s14
 801312a:	ee29 7a87 	vmul.f32	s14, s19, s14
 801312e:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013132:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8013136:	eee7 6a87 	vfma.f32	s13, s15, s14
 801313a:	ed8d 7a42 	vstr	s14, [sp, #264]	; 0x108
 801313e:	edcd 5a3d 	vstr	s11, [sp, #244]	; 0xf4
 8013142:	ed8d 6a40 	vstr	s12, [sp, #256]	; 0x100
 8013146:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 801314a:	f7fd ffa5 	bl	8011098 <dataDerivative5>
 801314e:	edd8 fa00 	vldr	s31, [r8]
 8013152:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
 8013156:	4630      	mov	r0, r6
 8013158:	eeb0 0a6f 	vmov.f32	s0, s31
 801315c:	f7fd ff9c 	bl	8011098 <dataDerivative5>
 8013160:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013162:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013164:	ed93 fa00 	vldr	s30, [r3]
 8013168:	eeb0 ba40 	vmov.f32	s22, s0
 801316c:	eeb0 0a4f 	vmov.f32	s0, s30
 8013170:	f7fd ff92 	bl	8011098 <dataDerivative5>
 8013174:	eec3 7a23 	vdiv.f32	s15, s6, s7
 8013178:	eef0 da40 	vmov.f32	s27, s0
 801317c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013180:	ee27 8a88 	vmul.f32	s16, s15, s16
 8013184:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8013188:	eddf 7a11 	vldr	s15, [pc, #68]	; 80131d0 <iNemoEngine_API_Update+0x858>
 801318c:	eeb0 7ae8 	vabs.f32	s14, s17
 8013190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013198:	d52c      	bpl.n	80131f4 <iNemoEngine_API_Update+0x87c>
 801319a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801319e:	eef4 8ae7 	vcmpe.f32	s17, s15
 80131a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a6:	f281 8756 	bge.w	8015056 <iNemoEngine_API_Update+0x26de>
 80131aa:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80131ae:	eef4 8ac7 	vcmpe.f32	s17, s14
 80131b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b6:	f303 80bc 	bgt.w	8016332 <iNemoEngine_API_Update+0x39ba>
 80131ba:	e00b      	b.n	80131d4 <iNemoEngine_API_Update+0x85c>
 80131bc:	3a9d4952 	.word	0x3a9d4952
 80131c0:	bf666666 	.word	0xbf666666
 80131c4:	40a00000 	.word	0x40a00000
 80131c8:	3c23d70a 	.word	0x3c23d70a
 80131cc:	3dcccccd 	.word	0x3dcccccd
 80131d0:	4b000000 	.word	0x4b000000
 80131d4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80131d8:	ee17 0a90 	vmov	r0, s15
 80131dc:	f7ed f9be 	bl	800055c <__aeabi_f2d>
 80131e0:	ec41 0b10 	vmov	d0, r0, r1
 80131e4:	f009 fdb4 	bl	801cd50 <ceil>
 80131e8:	ec51 0b10 	vmov	r0, r1, d0
 80131ec:	f7ed fd06 	bl	8000bfc <__aeabi_d2f>
 80131f0:	ee08 0a90 	vmov	s17, r0
 80131f4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 80131d0 <iNemoEngine_API_Update+0x858>
 80131f8:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 80131fc:	eeb0 7ac8 	vabs.f32	s14, s16
 8013200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013208:	d51f      	bpl.n	801324a <iNemoEngine_API_Update+0x8d2>
 801320a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801320e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013216:	f281 870c 	bge.w	8015032 <iNemoEngine_API_Update+0x26ba>
 801321a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801321e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013226:	f303 8080 	bgt.w	801632a <iNemoEngine_API_Update+0x39b2>
 801322a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801322e:	ee17 0a90 	vmov	r0, s15
 8013232:	f7ed f993 	bl	800055c <__aeabi_f2d>
 8013236:	ec41 0b10 	vmov	d0, r0, r1
 801323a:	f009 fd89 	bl	801cd50 <ceil>
 801323e:	ec51 0b10 	vmov	r0, r1, d0
 8013242:	f7ed fcdb 	bl	8000bfc <__aeabi_d2f>
 8013246:	ee08 0a10 	vmov	s16, r0
 801324a:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 80131d0 <iNemoEngine_API_Update+0x858>
 801324e:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
 8013252:	eeb0 7acc 	vabs.f32	s14, s24
 8013256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801325e:	d51f      	bpl.n	80132a0 <iNemoEngine_API_Update+0x928>
 8013260:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013264:	eeb4 cae7 	vcmpe.f32	s24, s15
 8013268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801326c:	f281 86cf 	bge.w	801500e <iNemoEngine_API_Update+0x2696>
 8013270:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8013274:	eeb4 cac7 	vcmpe.f32	s24, s14
 8013278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801327c:	f303 8065 	bgt.w	801634a <iNemoEngine_API_Update+0x39d2>
 8013280:	ee7c 7a67 	vsub.f32	s15, s24, s15
 8013284:	ee17 0a90 	vmov	r0, s15
 8013288:	f7ed f968 	bl	800055c <__aeabi_f2d>
 801328c:	ec41 0b10 	vmov	d0, r0, r1
 8013290:	f009 fd5e 	bl	801cd50 <ceil>
 8013294:	ec51 0b10 	vmov	r0, r1, d0
 8013298:	f7ed fcb0 	bl	8000bfc <__aeabi_d2f>
 801329c:	ee0c 0a10 	vmov	s24, r0
 80132a0:	9b06      	ldr	r3, [sp, #24]
 80132a2:	ed8d ca45 	vstr	s24, [sp, #276]	; 0x114
 80132a6:	f893 04b1 	ldrb.w	r0, [r3, #1201]	; 0x4b1
 80132aa:	1e43      	subs	r3, r0, #1
 80132ac:	b25b      	sxtb	r3, r3
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	dd18      	ble.n	80132e4 <iNemoEngine_API_Update+0x96c>
 80132b2:	9c06      	ldr	r4, [sp, #24]
 80132b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80132b8:	1e81      	subs	r1, r0, #2
 80132ba:	009b      	lsls	r3, r3, #2
 80132bc:	b2c9      	uxtb	r1, r1
 80132be:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
 80132c2:	441a      	add	r2, r3
 80132c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80132c8:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 80132cc:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 80132d0:	4423      	add	r3, r4
 80132d2:	681a      	ldr	r2, [r3, #0]
 80132d4:	60da      	str	r2, [r3, #12]
 80132d6:	685a      	ldr	r2, [r3, #4]
 80132d8:	611a      	str	r2, [r3, #16]
 80132da:	689a      	ldr	r2, [r3, #8]
 80132dc:	615a      	str	r2, [r3, #20]
 80132de:	3b0c      	subs	r3, #12
 80132e0:	428b      	cmp	r3, r1
 80132e2:	d1f6      	bne.n	80132d2 <iNemoEngine_API_Update+0x95a>
 80132e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80132e8:	edc5 8a00 	vstr	s17, [r5]
 80132ec:	eec7 8aaf 	vdiv.f32	s17, s15, s31
 80132f0:	9a06      	ldr	r2, [sp, #24]
 80132f2:	f202 43bc 	addw	r3, r2, #1212	; 0x4bc
 80132f6:	ed83 8a00 	vstr	s16, [r3]
 80132fa:	f502 6398 	add.w	r3, r2, #1216	; 0x4c0
 80132fe:	ed83 ca00 	vstr	s24, [r3]
 8013302:	f892 34b0 	ldrb.w	r3, [r2, #1200]	; 0x4b0
 8013306:	ed5f 7a4e 	vldr	s15, [pc, #-312]	; 80131d0 <iNemoEngine_API_Update+0x858>
 801330a:	ee2a 8aa8 	vmul.f32	s16, s21, s17
 801330e:	3301      	adds	r3, #1
 8013310:	b2db      	uxtb	r3, r3
 8013312:	eeb0 7ac8 	vabs.f32	s14, s16
 8013316:	4298      	cmp	r0, r3
 8013318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801331c:	bf28      	it	cs
 801331e:	4618      	movcs	r0, r3
 8013320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013324:	ee2a ca28 	vmul.f32	s24, s20, s17
 8013328:	f882 04b0 	strb.w	r0, [r2, #1200]	; 0x4b0
 801332c:	ee69 8aa8 	vmul.f32	s17, s19, s17
 8013330:	d51f      	bpl.n	8013372 <iNemoEngine_API_Update+0x9fa>
 8013332:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013336:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801333e:	f281 87cb 	bge.w	80152d8 <iNemoEngine_API_Update+0x2960>
 8013342:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8013346:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334e:	f303 8000 	bgt.w	8016352 <iNemoEngine_API_Update+0x39da>
 8013352:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013356:	ee17 0a90 	vmov	r0, s15
 801335a:	f7ed f8ff 	bl	800055c <__aeabi_f2d>
 801335e:	ec41 0b10 	vmov	d0, r0, r1
 8013362:	f009 fcf5 	bl	801cd50 <ceil>
 8013366:	ec51 0b10 	vmov	r0, r1, d0
 801336a:	f7ed fc47 	bl	8000bfc <__aeabi_d2f>
 801336e:	ee08 0a10 	vmov	s16, r0
 8013372:	ed5f 7a69 	vldr	s15, [pc, #-420]	; 80131d0 <iNemoEngine_API_Update+0x858>
 8013376:	ed8d 8a43 	vstr	s16, [sp, #268]	; 0x10c
 801337a:	eeb0 7acc 	vabs.f32	s14, s24
 801337e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013386:	d51f      	bpl.n	80133c8 <iNemoEngine_API_Update+0xa50>
 8013388:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801338c:	eeb4 cae7 	vcmpe.f32	s24, s15
 8013390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013394:	f281 878e 	bge.w	80152b4 <iNemoEngine_API_Update+0x293c>
 8013398:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801339c:	eeb4 cac7 	vcmpe.f32	s24, s14
 80133a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a4:	f302 87cd 	bgt.w	8016342 <iNemoEngine_API_Update+0x39ca>
 80133a8:	ee7c 7a67 	vsub.f32	s15, s24, s15
 80133ac:	ee17 0a90 	vmov	r0, s15
 80133b0:	f7ed f8d4 	bl	800055c <__aeabi_f2d>
 80133b4:	ec41 0b10 	vmov	d0, r0, r1
 80133b8:	f009 fcca 	bl	801cd50 <ceil>
 80133bc:	ec51 0b10 	vmov	r0, r1, d0
 80133c0:	f7ed fc1c 	bl	8000bfc <__aeabi_d2f>
 80133c4:	ee0c 0a10 	vmov	s24, r0
 80133c8:	ed5f 7a7f 	vldr	s15, [pc, #-508]	; 80131d0 <iNemoEngine_API_Update+0x858>
 80133cc:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 80133d0:	eeb0 7ae8 	vabs.f32	s14, s17
 80133d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133dc:	d51f      	bpl.n	801341e <iNemoEngine_API_Update+0xaa6>
 80133de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80133e2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80133e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ea:	f281 8751 	bge.w	8015290 <iNemoEngine_API_Update+0x2918>
 80133ee:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80133f2:	eef4 8ac7 	vcmpe.f32	s17, s14
 80133f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133fa:	f302 878e 	bgt.w	801631a <iNemoEngine_API_Update+0x39a2>
 80133fe:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8013402:	ee17 0a90 	vmov	r0, s15
 8013406:	f7ed f8a9 	bl	800055c <__aeabi_f2d>
 801340a:	ec41 0b10 	vmov	d0, r0, r1
 801340e:	f009 fc9f 	bl	801cd50 <ceil>
 8013412:	ec51 0b10 	vmov	r0, r1, d0
 8013416:	f7ed fbf1 	bl	8000bfc <__aeabi_d2f>
 801341a:	ee08 0a90 	vmov	s17, r0
 801341e:	9b06      	ldr	r3, [sp, #24]
 8013420:	edcd 8a45 	vstr	s17, [sp, #276]	; 0x114
 8013424:	f893 0621 	ldrb.w	r0, [r3, #1569]	; 0x621
 8013428:	1e43      	subs	r3, r0, #1
 801342a:	b25b      	sxtb	r3, r3
 801342c:	2b00      	cmp	r3, #0
 801342e:	dd18      	ble.n	8013462 <iNemoEngine_API_Update+0xaea>
 8013430:	9c06      	ldr	r4, [sp, #24]
 8013432:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013436:	1e81      	subs	r1, r0, #2
 8013438:	009b      	lsls	r3, r3, #2
 801343a:	b2c9      	uxtb	r1, r1
 801343c:	f504 62c2 	add.w	r2, r4, #1552	; 0x610
 8013440:	441a      	add	r2, r3
 8013442:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013446:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 801344a:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 801344e:	4423      	add	r3, r4
 8013450:	681a      	ldr	r2, [r3, #0]
 8013452:	60da      	str	r2, [r3, #12]
 8013454:	685a      	ldr	r2, [r3, #4]
 8013456:	611a      	str	r2, [r3, #16]
 8013458:	689a      	ldr	r2, [r3, #8]
 801345a:	615a      	str	r2, [r3, #20]
 801345c:	3b0c      	subs	r3, #12
 801345e:	4299      	cmp	r1, r3
 8013460:	d1f6      	bne.n	8013450 <iNemoEngine_API_Update+0xad8>
 8013462:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013466:	ed86 8a00 	vstr	s16, [r6]
 801346a:	ee87 8a8f 	vdiv.f32	s16, s15, s30
 801346e:	9a06      	ldr	r2, [sp, #24]
 8013470:	f202 632c 	addw	r3, r2, #1580	; 0x62c
 8013474:	ed83 ca00 	vstr	s24, [r3]
 8013478:	f502 63c6 	add.w	r3, r2, #1584	; 0x630
 801347c:	edc3 8a00 	vstr	s17, [r3]
 8013480:	f892 3620 	ldrb.w	r3, [r2, #1568]	; 0x620
 8013484:	ed5f 7aae 	vldr	s15, [pc, #-696]	; 80131d0 <iNemoEngine_API_Update+0x858>
 8013488:	ee68 8a0e 	vmul.f32	s17, s16, s28
 801348c:	3301      	adds	r3, #1
 801348e:	b2db      	uxtb	r3, r3
 8013490:	eeb0 7ae8 	vabs.f32	s14, s17
 8013494:	4298      	cmp	r0, r3
 8013496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801349a:	bf28      	it	cs
 801349c:	4618      	movcs	r0, r3
 801349e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a2:	ee28 ca2e 	vmul.f32	s24, s16, s29
 80134a6:	f882 0620 	strb.w	r0, [r2, #1568]	; 0x620
 80134aa:	ee28 8a2b 	vmul.f32	s16, s16, s23
 80134ae:	d51f      	bpl.n	80134f0 <iNemoEngine_API_Update+0xb78>
 80134b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80134b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80134b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134bc:	f281 86d6 	bge.w	801526c <iNemoEngine_API_Update+0x28f4>
 80134c0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80134c4:	eef4 8ac7 	vcmpe.f32	s17, s14
 80134c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134cc:	f302 8745 	bgt.w	801635a <iNemoEngine_API_Update+0x39e2>
 80134d0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80134d4:	ee17 0a90 	vmov	r0, s15
 80134d8:	f7ed f840 	bl	800055c <__aeabi_f2d>
 80134dc:	ec41 0b10 	vmov	d0, r0, r1
 80134e0:	f009 fc36 	bl	801cd50 <ceil>
 80134e4:	ec51 0b10 	vmov	r0, r1, d0
 80134e8:	f7ed fb88 	bl	8000bfc <__aeabi_d2f>
 80134ec:	ee08 0a90 	vmov	s17, r0
 80134f0:	ed5f 7ac9 	vldr	s15, [pc, #-804]	; 80131d0 <iNemoEngine_API_Update+0x858>
 80134f4:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 80134f8:	eeb0 7acc 	vabs.f32	s14, s24
 80134fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013504:	d51f      	bpl.n	8013546 <iNemoEngine_API_Update+0xbce>
 8013506:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801350a:	eeb4 cae7 	vcmpe.f32	s24, s15
 801350e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013512:	f281 871d 	bge.w	8015350 <iNemoEngine_API_Update+0x29d8>
 8013516:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801351a:	eeb4 cac7 	vcmpe.f32	s24, s14
 801351e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013522:	f302 86fe 	bgt.w	8016322 <iNemoEngine_API_Update+0x39aa>
 8013526:	ee7c 7a67 	vsub.f32	s15, s24, s15
 801352a:	ee17 0a90 	vmov	r0, s15
 801352e:	f7ed f815 	bl	800055c <__aeabi_f2d>
 8013532:	ec41 0b10 	vmov	d0, r0, r1
 8013536:	f009 fc0b 	bl	801cd50 <ceil>
 801353a:	ec51 0b10 	vmov	r0, r1, d0
 801353e:	f7ed fb5d 	bl	8000bfc <__aeabi_d2f>
 8013542:	ee0c 0a10 	vmov	s24, r0
 8013546:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 80131d0 <iNemoEngine_API_Update+0x858>
 801354a:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 801354e:	eeb0 7ac8 	vabs.f32	s14, s16
 8013552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801355a:	d51f      	bpl.n	801359c <iNemoEngine_API_Update+0xc24>
 801355c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013560:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013568:	f281 86c8 	bge.w	80152fc <iNemoEngine_API_Update+0x2984>
 801356c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8013570:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8013574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013578:	f302 86df 	bgt.w	801633a <iNemoEngine_API_Update+0x39c2>
 801357c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8013580:	ee17 0a90 	vmov	r0, s15
 8013584:	f7ec ffea 	bl	800055c <__aeabi_f2d>
 8013588:	ec41 0b10 	vmov	d0, r0, r1
 801358c:	f009 fbe0 	bl	801cd50 <ceil>
 8013590:	ec51 0b10 	vmov	r0, r1, d0
 8013594:	f7ed fb32 	bl	8000bfc <__aeabi_d2f>
 8013598:	ee08 0a10 	vmov	s16, r0
 801359c:	9b06      	ldr	r3, [sp, #24]
 801359e:	ed8d 8a45 	vstr	s16, [sp, #276]	; 0x114
 80135a2:	f893 0791 	ldrb.w	r0, [r3, #1937]	; 0x791
 80135a6:	1e43      	subs	r3, r0, #1
 80135a8:	b25b      	sxtb	r3, r3
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	dd18      	ble.n	80135e0 <iNemoEngine_API_Update+0xc68>
 80135ae:	9c06      	ldr	r4, [sp, #24]
 80135b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80135b4:	1e81      	subs	r1, r0, #2
 80135b6:	009b      	lsls	r3, r3, #2
 80135b8:	b2c9      	uxtb	r1, r1
 80135ba:	f504 62f0 	add.w	r2, r4, #1920	; 0x780
 80135be:	441a      	add	r2, r3
 80135c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80135c4:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 80135c8:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 80135cc:	4423      	add	r3, r4
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	60da      	str	r2, [r3, #12]
 80135d2:	685a      	ldr	r2, [r3, #4]
 80135d4:	611a      	str	r2, [r3, #16]
 80135d6:	689a      	ldr	r2, [r3, #8]
 80135d8:	615a      	str	r2, [r3, #20]
 80135da:	3b0c      	subs	r3, #12
 80135dc:	428b      	cmp	r3, r1
 80135de:	d1f6      	bne.n	80135ce <iNemoEngine_API_Update+0xc56>
 80135e0:	9c06      	ldr	r4, [sp, #24]
 80135e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80135e4:	f204 729c 	addw	r2, r4, #1948	; 0x79c
 80135e8:	edc3 8a00 	vstr	s17, [r3]
 80135ec:	922e      	str	r2, [sp, #184]	; 0xb8
 80135ee:	ed82 ca00 	vstr	s24, [r2]
 80135f2:	f504 62f4 	add.w	r2, r4, #1952	; 0x7a0
 80135f6:	ed82 8a00 	vstr	s16, [r2]
 80135fa:	f894 3790 	ldrb.w	r3, [r4, #1936]	; 0x790
 80135fe:	922f      	str	r2, [sp, #188]	; 0xbc
 8013600:	3301      	adds	r3, #1
 8013602:	b2db      	uxtb	r3, r3
 8013604:	4298      	cmp	r0, r3
 8013606:	bf28      	it	cs
 8013608:	4618      	movcs	r0, r3
 801360a:	f884 0790 	strb.w	r0, [r4, #1936]	; 0x790
 801360e:	aa68      	add	r2, sp, #416	; 0x1a0
 8013610:	a93d      	add	r1, sp, #244	; 0xf4
 8013612:	a840      	add	r0, sp, #256	; 0x100
 8013614:	f7fd fe26 	bl	8011264 <getRotationMatrix>
 8013618:	4623      	mov	r3, r4
 801361a:	f504 7247 	add.w	r2, r4, #796	; 0x31c
 801361e:	9229      	str	r2, [sp, #164]	; 0xa4
 8013620:	4614      	mov	r4, r2
 8013622:	aeae      	add	r6, sp, #696	; 0x2b8
 8013624:	f503 774f 	add.w	r7, r3, #828	; 0x33c
 8013628:	6820      	ldr	r0, [r4, #0]
 801362a:	6861      	ldr	r1, [r4, #4]
 801362c:	68a2      	ldr	r2, [r4, #8]
 801362e:	68e3      	ldr	r3, [r4, #12]
 8013630:	4635      	mov	r5, r6
 8013632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013634:	3410      	adds	r4, #16
 8013636:	42bc      	cmp	r4, r7
 8013638:	462e      	mov	r6, r5
 801363a:	d1f5      	bne.n	8013628 <iNemoEngine_API_Update+0xcb0>
 801363c:	6820      	ldr	r0, [r4, #0]
 801363e:	6028      	str	r0, [r5, #0]
 8013640:	9b06      	ldr	r3, [sp, #24]
 8013642:	edd3 7ac7 	vldr	s15, [r3, #796]	; 0x31c
 8013646:	ed93 7ac8 	vldr	s14, [r3, #800]	; 0x320
 801364a:	eef0 7ae7 	vabs.f32	s15, s15
 801364e:	eeb0 7ac7 	vabs.f32	s14, s14
 8013652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801365a:	f140 8543 	bpl.w	80140e4 <iNemoEngine_API_Update+0x176c>
 801365e:	2604      	movs	r6, #4
 8013660:	2400      	movs	r4, #0
 8013662:	eef0 7a47 	vmov.f32	s15, s14
 8013666:	f04f 0c07 	mov.w	ip, #7
 801366a:	f04f 0e06 	mov.w	lr, #6
 801366e:	2103      	movs	r1, #3
 8013670:	4630      	mov	r0, r6
 8013672:	4623      	mov	r3, r4
 8013674:	2701      	movs	r7, #1
 8013676:	9a06      	ldr	r2, [sp, #24]
 8013678:	ed92 7ac9 	vldr	s14, [r2, #804]	; 0x324
 801367c:	eeb0 7ac7 	vabs.f32	s14, s14
 8013680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013688:	f340 8525 	ble.w	80140d6 <iNemoEngine_API_Update+0x175e>
 801368c:	f04f 0c08 	mov.w	ip, #8
 8013690:	2104      	movs	r1, #4
 8013692:	f04f 0906 	mov.w	r9, #6
 8013696:	f04f 0e07 	mov.w	lr, #7
 801369a:	f04f 0803 	mov.w	r8, #3
 801369e:	2605      	movs	r6, #5
 80136a0:	4660      	mov	r0, ip
 80136a2:	460c      	mov	r4, r1
 80136a4:	2200      	movs	r2, #0
 80136a6:	2301      	movs	r3, #1
 80136a8:	2702      	movs	r7, #2
 80136aa:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80136ac:	442c      	add	r4, r5
 80136ae:	4428      	add	r0, r5
 80136b0:	ed90 7a00 	vldr	s14, [r0]
 80136b4:	edd4 6a00 	vldr	s13, [r4]
 80136b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80136bc:	a8ae      	add	r0, sp, #696	; 0x2b8
 80136be:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80136c2:	acae      	add	r4, sp, #696	; 0x2b8
 80136c4:	adae      	add	r5, sp, #696	; 0x2b8
 80136c6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80136ca:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80136ce:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 80136d2:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80136d6:	edc0 7a00 	vstr	s15, [r0]
 80136da:	edd5 7a00 	vldr	s15, [r5]
 80136de:	ed94 7a00 	vldr	s14, [r4]
 80136e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80136e6:	edc4 6a00 	vstr	s13, [r4]
 80136ea:	ed90 6a00 	vldr	s12, [r0]
 80136ee:	a8ae      	add	r0, sp, #696	; 0x2b8
 80136f0:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80136f4:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 80136f8:	ed90 7a00 	vldr	s14, [r0]
 80136fc:	edd5 7a00 	vldr	s15, [r5]
 8013700:	eee6 7a47 	vfms.f32	s15, s12, s14
 8013704:	00b4      	lsls	r4, r6, #2
 8013706:	9403      	str	r4, [sp, #12]
 8013708:	ea4f 048c 	mov.w	r4, ip, lsl #2
 801370c:	edc5 7a00 	vstr	s15, [r5]
 8013710:	ed90 7a00 	vldr	s14, [r0]
 8013714:	a8ae      	add	r0, sp, #696	; 0x2b8
 8013716:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 801371a:	edd0 7a00 	vldr	s15, [r0]
 801371e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8013722:	4626      	mov	r6, r4
 8013724:	acae      	add	r4, sp, #696	; 0x2b8
 8013726:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 801372a:	edc0 7a00 	vstr	s15, [r0]
 801372e:	a8ae      	add	r0, sp, #696	; 0x2b8
 8013730:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8013734:	edd0 5a00 	vldr	s11, [r0]
 8013738:	ed94 7a00 	vldr	s14, [r4]
 801373c:	eea6 7a65 	vfms.f32	s14, s12, s11
 8013740:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8013744:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8013748:	eef0 7ae7 	vabs.f32	s15, s15
 801374c:	ed84 7a00 	vstr	s14, [r4]
 8013750:	ed90 6a00 	vldr	s12, [r0]
 8013754:	a8ae      	add	r0, sp, #696	; 0x2b8
 8013756:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 801375a:	ed90 7a00 	vldr	s14, [r0]
 801375e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8013762:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8013766:	ea4f 048e 	mov.w	r4, lr, lsl #2
 801376a:	ed80 7a00 	vstr	s14, [r0]
 801376e:	ed95 7a00 	vldr	s14, [r5]
 8013772:	eeb0 7ac7 	vabs.f32	s14, s14
 8013776:	eef4 7ac7 	vcmpe.f32	s15, s14
 801377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801377e:	ea4f 0581 	mov.w	r5, r1, lsl #2
 8013782:	dd0b      	ble.n	801379c <iNemoEngine_API_Update+0xe24>
 8013784:	4618      	mov	r0, r3
 8013786:	4645      	mov	r5, r8
 8013788:	4613      	mov	r3, r2
 801378a:	464c      	mov	r4, r9
 801378c:	46d4      	mov	ip, sl
 801378e:	4602      	mov	r2, r0
 8013790:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8013794:	ea4f 098e 	mov.w	r9, lr, lsl #2
 8013798:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 801379c:	a9ae      	add	r1, sp, #696	; 0x2b8
 801379e:	eb01 0008 	add.w	r0, r1, r8
 80137a2:	440d      	add	r5, r1
 80137a4:	ed90 7a00 	vldr	s14, [r0]
 80137a8:	edd5 7a00 	vldr	s15, [r5]
 80137ac:	ee87 4a27 	vdiv.f32	s8, s14, s15
 80137b0:	440c      	add	r4, r1
 80137b2:	eb01 0809 	add.w	r8, r1, r9
 80137b6:	440e      	add	r6, r1
 80137b8:	46b6      	mov	lr, r6
 80137ba:	460e      	mov	r6, r1
 80137bc:	9903      	ldr	r1, [sp, #12]
 80137be:	4431      	add	r1, r6
 80137c0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80137c4:	ed80 4a00 	vstr	s8, [r0]
 80137c8:	ed94 7a00 	vldr	s14, [r4]
 80137cc:	edd8 7a00 	vldr	s15, [r8]
 80137d0:	eee4 7a47 	vfms.f32	s15, s8, s14
 80137d4:	a8ae      	add	r0, sp, #696	; 0x2b8
 80137d6:	edc8 7a00 	vstr	s15, [r8]
 80137da:	edd1 2a00 	vldr	s5, [r1]
 80137de:	ed95 7a00 	vldr	s14, [r5]
 80137e2:	ed94 1a00 	vldr	s2, [r4]
 80137e6:	edde 1a00 	vldr	s3, [lr]
 80137ea:	f50b 61b2 	add.w	r1, fp, #1424	; 0x590
 80137ee:	4469      	add	r1, sp
 80137f0:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 80137f4:	ee83 2a87 	vdiv.f32	s4, s7, s14
 80137f8:	ed91 7a00 	vldr	s14, [r1]
 80137fc:	a9ae      	add	r1, sp, #696	; 0x2b8
 80137fe:	448b      	add	fp, r1
 8013800:	f50c 61b2 	add.w	r1, ip, #1424	; 0x590
 8013804:	eec3 0aa7 	vdiv.f32	s1, s7, s15
 8013808:	4469      	add	r1, sp
 801380a:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 801380e:	4484      	add	ip, r0
 8013810:	4450      	add	r0, sl
 8013812:	edd1 6a00 	vldr	s13, [r1]
 8013816:	eddb 7a00 	vldr	s15, [fp]
 801381a:	ed90 0a00 	vldr	s0, [r0]
 801381e:	f50a 61b2 	add.w	r1, sl, #1424	; 0x590
 8013822:	4469      	add	r1, sp
 8013824:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8013828:	ee83 3aa7 	vdiv.f32	s6, s7, s15
 801382c:	edd1 4a00 	vldr	s9, [r1]
 8013830:	eddc 7a00 	vldr	s15, [ip]
 8013834:	eee0 4a47 	vfms.f32	s9, s0, s14
 8013838:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 801383c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8013840:	eee7 6ac7 	vfms.f32	s13, s15, s14
 8013844:	4601      	mov	r1, r0
 8013846:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 801384a:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 801384e:	eee4 4a66 	vfms.f32	s9, s8, s13
 8013852:	ed90 5a00 	vldr	s10, [r0]
 8013856:	ee60 4aa4 	vmul.f32	s9, s1, s9
 801385a:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 801385e:	eee1 6a64 	vfms.f32	s13, s2, s9
 8013862:	eea1 7ae4 	vfms.f32	s14, s3, s9
 8013866:	ee62 8a26 	vmul.f32	s17, s4, s13
 801386a:	edd1 6a00 	vldr	s13, [r1]
 801386e:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8013872:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013876:	460b      	mov	r3, r1
 8013878:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801387c:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 8013880:	edd1 5a00 	vldr	s11, [r1]
 8013884:	ed93 8a00 	vldr	s16, [r3]
 8013888:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801388c:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 8013890:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 8013894:	eee7 5ac5 	vfms.f32	s11, s15, s10
 8013898:	eea6 8ae7 	vfms.f32	s16, s13, s15
 801389c:	ed92 6a00 	vldr	s12, [r2]
 80138a0:	edd3 7a00 	vldr	s15, [r3]
 80138a4:	eea0 6a45 	vfms.f32	s12, s0, s10
 80138a8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80138ac:	eea4 6a65 	vfms.f32	s12, s8, s11
 80138b0:	eee4 7a48 	vfms.f32	s15, s8, s16
 80138b4:	ee20 6a86 	vmul.f32	s12, s1, s12
 80138b8:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80138bc:	eee1 5a46 	vfms.f32	s11, s2, s12
 80138c0:	eea7 8ac1 	vfms.f32	s16, s15, s2
 80138c4:	eea1 5ac6 	vfms.f32	s10, s3, s12
 80138c8:	eee7 6ae1 	vfms.f32	s13, s15, s3
 80138cc:	ee62 5a25 	vmul.f32	s11, s4, s11
 80138d0:	ee28 2a02 	vmul.f32	s4, s16, s4
 80138d4:	eea2 7ae8 	vfms.f32	s14, s5, s17
 80138d8:	eee2 6a62 	vfms.f32	s13, s4, s5
 80138dc:	eea2 5ae5 	vfms.f32	s10, s5, s11
 80138e0:	ee23 7a07 	vmul.f32	s14, s6, s14
 80138e4:	ee23 5a05 	vmul.f32	s10, s6, s10
 80138e8:	ee26 3a83 	vmul.f32	s6, s13, s6
 80138ec:	ee77 6aa5 	vadd.f32	s13, s15, s11
 80138f0:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 80138f4:	ee77 6a66 	vsub.f32	s13, s14, s13
 80138f8:	ee36 6a42 	vsub.f32	s12, s12, s4
 80138fc:	eef4 6ac4 	vcmpe.f32	s13, s8
 8013900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013904:	bfc8      	it	gt
 8013906:	ee76 6aa3 	vaddgt.f32	s13, s13, s7
 801390a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801390e:	bfcc      	ite	gt
 8013910:	eeb1 4ae6 	vsqrtgt.f32	s8, s13
 8013914:	ed9f 4ad7 	vldrle	s8, [pc, #860]	; 8013c74 <iNemoEngine_API_Update+0x12fc>
 8013918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801391c:	f100 8411 	bmi.w	8014142 <iNemoEngine_API_Update+0x17ca>
 8013920:	bfd8      	it	le
 8013922:	ee24 4a06 	vmulle.f32	s8, s8, s12
 8013926:	ee77 6a87 	vadd.f32	s13, s15, s14
 801392a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801392e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8013932:	ee24 6a06 	vmul.f32	s12, s8, s12
 8013936:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 801393a:	eef4 6ac4 	vcmpe.f32	s13, s8
 801393e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013942:	bf88      	it	hi
 8013944:	eeb7 4a00 	vmovhi.f32	s8, #112	; 0x3f800000  1.0
 8013948:	ee33 3a64 	vsub.f32	s6, s6, s9
 801394c:	bf88      	it	hi
 801394e:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 8013952:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8013956:	bf8c      	ite	hi
 8013958:	eef1 6ac4 	vsqrthi.f32	s13, s8
 801395c:	eddf 6ac5 	vldrls	s13, [pc, #788]	; 8013c74 <iNemoEngine_API_Update+0x12fc>
 8013960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013964:	f100 83ea 	bmi.w	801413c <iNemoEngine_API_Update+0x17c4>
 8013968:	bfd8      	it	le
 801396a:	ee66 6a83 	vmulle.f32	s13, s13, s6
 801396e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013972:	ee38 5ac5 	vsub.f32	s10, s17, s10
 8013976:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801397a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801397e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013982:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013986:	eef4 7ac7 	vcmpe.f32	s15, s14
 801398a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801398e:	bf84      	itt	hi
 8013990:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 8013994:	ee37 7a87 	vaddhi.f32	s14, s15, s14
 8013998:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801399c:	bf8c      	ite	hi
 801399e:	eef1 7ac7 	vsqrthi.f32	s15, s14
 80139a2:	eddf 7ab4 	vldrls	s15, [pc, #720]	; 8013c74 <iNemoEngine_API_Update+0x12fc>
 80139a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139aa:	f100 83ce 	bmi.w	801414a <iNemoEngine_API_Update+0x17d2>
 80139ae:	bfd8      	it	le
 80139b0:	ee67 7a85 	vmulle.f32	s15, s15, s10
 80139b4:	9b06      	ldr	r3, [sp, #24]
 80139b6:	f893 2341 	ldrb.w	r2, [r3, #833]	; 0x341
 80139ba:	1e53      	subs	r3, r2, #1
 80139bc:	b25b      	sxtb	r3, r3
 80139be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80139c8:	dd1d      	ble.n	8013a06 <iNemoEngine_API_Update+0x108e>
 80139ca:	9806      	ldr	r0, [sp, #24]
 80139cc:	3a02      	subs	r2, #2
 80139ce:	b2d1      	uxtb	r1, r2
 80139d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80139d4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80139d8:	f1a0 010c 	sub.w	r1, r0, #12
 80139dc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80139e0:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 80139e4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80139e8:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80139ec:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 80139f0:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80139f4:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 80139f8:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 80139fc:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 8013a00:	3b0c      	subs	r3, #12
 8013a02:	428b      	cmp	r3, r1
 8013a04:	d1f0      	bne.n	80139e8 <iNemoEngine_API_Update+0x1070>
 8013a06:	ed9d 7a07 	vldr	s14, [sp, #28]
 8013a0a:	9b06      	ldr	r3, [sp, #24]
 8013a0c:	9310      	str	r3, [sp, #64]	; 0x40
 8013a0e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013a12:	ee85 7a87 	vdiv.f32	s14, s11, s14
 8013a16:	aa3d      	add	r2, sp, #244	; 0xf4
 8013a18:	922b      	str	r2, [sp, #172]	; 0xac
 8013a1a:	9212      	str	r2, [sp, #72]	; 0x48
 8013a1c:	f50d 7be2 	add.w	fp, sp, #452	; 0x1c4
 8013a20:	f50d 7af4 	add.w	sl, sp, #488	; 0x1e8
 8013a24:	ee36 6a06 	vadd.f32	s12, s12, s12
 8013a28:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8013a2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013a30:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013a34:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a3c:	ed83 6ad2 	vstr	s12, [r3, #840]	; 0x348
 8013a40:	edc3 6ad3 	vstr	s13, [r3, #844]	; 0x34c
 8013a44:	edc3 7ad4 	vstr	s15, [r3, #848]	; 0x350
 8013a48:	2300      	movs	r3, #0
 8013a4a:	930e      	str	r3, [sp, #56]	; 0x38
 8013a4c:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 8013a50:	f1c3 0301 	rsb	r3, r3, #1
 8013a54:	9328      	str	r3, [sp, #160]	; 0xa0
 8013a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013a5a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8013a5c:	3301      	adds	r3, #1
 8013a5e:	930e      	str	r3, [sp, #56]	; 0x38
 8013a60:	a9ae      	add	r1, sp, #696	; 0x2b8
 8013a62:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 8013a66:	18e0      	adds	r0, r4, r3
 8013a68:	f803 0f01 	strb.w	r0, [r3, #1]!
 8013a6c:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 8013a70:	f841 0b04 	str.w	r0, [r1], #4
 8013a74:	f20d 10e1 	addw	r0, sp, #481	; 0x1e1
 8013a78:	4283      	cmp	r3, r0
 8013a7a:	f102 020c 	add.w	r2, r2, #12
 8013a7e:	d1f2      	bne.n	8013a66 <iNemoEngine_API_Update+0x10ee>
 8013a80:	ed9d 7aae 	vldr	s14, [sp, #696]	; 0x2b8
 8013a84:	eddd 7aaf 	vldr	s15, [sp, #700]	; 0x2bc
 8013a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013a8c:	ed9d 7ab0 	vldr	s14, [sp, #704]	; 0x2c0
 8013a90:	eddd 7ab1 	vldr	s15, [sp, #708]	; 0x2c4
 8013a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a98:	bf88      	it	hi
 8013a9a:	f44f 7381 	movhi.w	r3, #258	; 0x102
 8013a9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013aa2:	ed9d 7ab2 	vldr	s14, [sp, #712]	; 0x2c8
 8013aa6:	eddd 7ab3 	vldr	s15, [sp, #716]	; 0x2cc
 8013aaa:	bf88      	it	hi
 8013aac:	f8ab 3000 	strhhi.w	r3, [fp]
 8013ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ab4:	bf88      	it	hi
 8013ab6:	f44f 7341 	movhi.w	r3, #772	; 0x304
 8013aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013abe:	ed9d 7ab4 	vldr	s14, [sp, #720]	; 0x2d0
 8013ac2:	eddd 7ab5 	vldr	s15, [sp, #724]	; 0x2d4
 8013ac6:	bf88      	it	hi
 8013ac8:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 8013acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ad0:	bf88      	it	hi
 8013ad2:	f240 5306 	movwhi	r3, #1286	; 0x506
 8013ad6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ada:	ed9d 7ab6 	vldr	s14, [sp, #728]	; 0x2d8
 8013ade:	eddd 7ab7 	vldr	s15, [sp, #732]	; 0x2dc
 8013ae2:	bf88      	it	hi
 8013ae4:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 8013ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aec:	bf88      	it	hi
 8013aee:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 8013af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013af6:	ed9d 7ab8 	vldr	s14, [sp, #736]	; 0x2e0
 8013afa:	eddd 7ab9 	vldr	s15, [sp, #740]	; 0x2e4
 8013afe:	bf88      	it	hi
 8013b00:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 8013b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b08:	bf88      	it	hi
 8013b0a:	f640 130a 	movwhi	r3, #2314	; 0x90a
 8013b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b12:	ed9d 7aba 	vldr	s14, [sp, #744]	; 0x2e8
 8013b16:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 8013b1a:	bf88      	it	hi
 8013b1c:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 8013b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b24:	bf88      	it	hi
 8013b26:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 8013b2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b2e:	ed9d 7abc 	vldr	s14, [sp, #752]	; 0x2f0
 8013b32:	eddd 7abd 	vldr	s15, [sp, #756]	; 0x2f4
 8013b36:	bf88      	it	hi
 8013b38:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 8013b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b40:	bf88      	it	hi
 8013b42:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 8013b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b4a:	ed9d 7abe 	vldr	s14, [sp, #760]	; 0x2f8
 8013b4e:	eddd 7abf 	vldr	s15, [sp, #764]	; 0x2fc
 8013b52:	bf88      	it	hi
 8013b54:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 8013b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b5c:	bf88      	it	hi
 8013b5e:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 8013b62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b66:	ed9d 7ac0 	vldr	s14, [sp, #768]	; 0x300
 8013b6a:	eddd 7ac1 	vldr	s15, [sp, #772]	; 0x304
 8013b6e:	bf88      	it	hi
 8013b70:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 8013b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b78:	bf88      	it	hi
 8013b7a:	f241 1312 	movwhi	r3, #4370	; 0x1112
 8013b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b82:	ed9d 7ac2 	vldr	s14, [sp, #776]	; 0x308
 8013b86:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 8013b8a:	bf88      	it	hi
 8013b8c:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8013b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b94:	bf88      	it	hi
 8013b96:	f241 3314 	movwhi	r3, #4884	; 0x1314
 8013b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b9e:	bf88      	it	hi
 8013ba0:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 8013ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba8:	bf84      	itt	hi
 8013baa:	f241 5316 	movwhi	r3, #5398	; 0x1516
 8013bae:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 8013bb2:	ed9d 7ac4 	vldr	s14, [sp, #784]	; 0x310
 8013bb6:	eddd 7ac5 	vldr	s15, [sp, #788]	; 0x314
 8013bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013bbe:	ed9d 7ac6 	vldr	s14, [sp, #792]	; 0x318
 8013bc2:	eddd 7ac7 	vldr	s15, [sp, #796]	; 0x31c
 8013bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bca:	bf88      	it	hi
 8013bcc:	f241 7318 	movwhi	r3, #5912	; 0x1718
 8013bd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013bd4:	ed9d 7ac8 	vldr	s14, [sp, #800]	; 0x320
 8013bd8:	eddd 7ac9 	vldr	s15, [sp, #804]	; 0x324
 8013bdc:	bf88      	it	hi
 8013bde:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 8013be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be6:	bf88      	it	hi
 8013be8:	f641 131a 	movwhi	r3, #6426	; 0x191a
 8013bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013bf0:	ed9d 7aca 	vldr	s14, [sp, #808]	; 0x328
 8013bf4:	eddd 7acb 	vldr	s15, [sp, #812]	; 0x32c
 8013bf8:	bf88      	it	hi
 8013bfa:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 8013bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c02:	bf88      	it	hi
 8013c04:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8013c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013c0c:	bf88      	it	hi
 8013c0e:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 8013c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c16:	bf84      	itt	hi
 8013c18:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 8013c1c:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 8013c20:	221e      	movs	r2, #30
 8013c22:	2101      	movs	r1, #1
 8013c24:	4650      	mov	r0, sl
 8013c26:	f005 faf3 	bl	8019210 <memset>
 8013c2a:	2304      	movs	r3, #4
 8013c2c:	930c      	str	r3, [sp, #48]	; 0x30
 8013c2e:	2302      	movs	r3, #2
 8013c30:	9307      	str	r3, [sp, #28]
 8013c32:	9a07      	ldr	r2, [sp, #28]
 8013c34:	920a      	str	r2, [sp, #40]	; 0x28
 8013c36:	4613      	mov	r3, r2
 8013c38:	0052      	lsls	r2, r2, #1
 8013c3a:	9207      	str	r2, [sp, #28]
 8013c3c:	f103 0901 	add.w	r9, r3, #1
 8013c40:	f04f 0801 	mov.w	r8, #1
 8013c44:	9b07      	ldr	r3, [sp, #28]
 8013c46:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c4a:	4443      	add	r3, r8
 8013c4c:	2b1f      	cmp	r3, #31
 8013c4e:	bfa8      	it	ge
 8013c50:	231f      	movge	r3, #31
 8013c52:	4642      	mov	r2, r8
 8013c54:	1a9f      	subs	r7, r3, r2
 8013c56:	2f00      	cmp	r7, #0
 8013c58:	4698      	mov	r8, r3
 8013c5a:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 8013c5e:	dd54      	ble.n	8013d0a <iNemoEngine_API_Update+0x1392>
 8013c60:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8013c64:	9304      	str	r3, [sp, #16]
 8013c66:	f1a8 0302 	sub.w	r3, r8, #2
 8013c6a:	4616      	mov	r6, r2
 8013c6c:	2400      	movs	r4, #0
 8013c6e:	9305      	str	r3, [sp, #20]
 8013c70:	e00f      	b.n	8013c92 <iNemoEngine_API_Update+0x131a>
 8013c72:	bf00      	nop
 8013c74:	00000000 	.word	0x00000000
 8013c78:	3f333333 	.word	0x3f333333
 8013c7c:	3f4ccccd 	.word	0x3f4ccccd
 8013c80:	45f0      	cmp	r8, lr
 8013c82:	f80a 2004 	strb.w	r2, [sl, r4]
 8013c86:	f000 81f6 	beq.w	8014076 <iNemoEngine_API_Update+0x16fe>
 8013c8a:	4665      	mov	r5, ip
 8013c8c:	3401      	adds	r4, #1
 8013c8e:	42a7      	cmp	r7, r4
 8013c90:	dd34      	ble.n	8013cfc <iNemoEngine_API_Update+0x1384>
 8013c92:	1e71      	subs	r1, r6, #1
 8013c94:	a8ae      	add	r0, sp, #696	; 0x2b8
 8013c96:	f91b 3001 	ldrsb.w	r3, [fp, r1]
 8013c9a:	f91b 2005 	ldrsb.w	r2, [fp, r5]
 8013c9e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8013ca2:	ed10 7a01 	vldr	s14, [r0, #-4]
 8013ca6:	a8ae      	add	r0, sp, #696	; 0x2b8
 8013ca8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8013cac:	ed50 7a01 	vldr	s15, [r0, #-4]
 8013cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cb8:	f105 0e02 	add.w	lr, r5, #2
 8013cbc:	f105 0c01 	add.w	ip, r5, #1
 8013cc0:	d8de      	bhi.n	8013c80 <iNemoEngine_API_Update+0x1308>
 8013cc2:	3601      	adds	r6, #1
 8013cc4:	454e      	cmp	r6, r9
 8013cc6:	f80a 3004 	strb.w	r3, [sl, r4]
 8013cca:	d1df      	bne.n	8013c8c <iNemoEngine_API_Update+0x1314>
 8013ccc:	1c6b      	adds	r3, r5, #1
 8013cce:	9a04      	ldr	r2, [sp, #16]
 8013cd0:	9308      	str	r3, [sp, #32]
 8013cd2:	1c60      	adds	r0, r4, #1
 8013cd4:	4598      	cmp	r8, r3
 8013cd6:	eba2 0205 	sub.w	r2, r2, r5
 8013cda:	4450      	add	r0, sl
 8013cdc:	ddd6      	ble.n	8013c8c <iNemoEngine_API_Update+0x1314>
 8013cde:	eb0b 0105 	add.w	r1, fp, r5
 8013ce2:	f005 fb23 	bl	801932c <memcpy>
 8013ce6:	9a04      	ldr	r2, [sp, #16]
 8013ce8:	9b05      	ldr	r3, [sp, #20]
 8013cea:	4414      	add	r4, r2
 8013cec:	1b64      	subs	r4, r4, r5
 8013cee:	1b5a      	subs	r2, r3, r5
 8013cf0:	3401      	adds	r4, #1
 8013cf2:	9b08      	ldr	r3, [sp, #32]
 8013cf4:	42a7      	cmp	r7, r4
 8013cf6:	eb02 0503 	add.w	r5, r2, r3
 8013cfa:	dcca      	bgt.n	8013c92 <iNemoEngine_API_Update+0x131a>
 8013cfc:	9b03      	ldr	r3, [sp, #12]
 8013cfe:	1e58      	subs	r0, r3, #1
 8013d00:	463a      	mov	r2, r7
 8013d02:	4458      	add	r0, fp
 8013d04:	4651      	mov	r1, sl
 8013d06:	f005 fb11 	bl	801932c <memcpy>
 8013d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d0c:	eb08 0903 	add.w	r9, r8, r3
 8013d10:	f1b9 0f1e 	cmp.w	r9, #30
 8013d14:	dd96      	ble.n	8013c44 <iNemoEngine_API_Update+0x12cc>
 8013d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d18:	3b01      	subs	r3, #1
 8013d1a:	930c      	str	r3, [sp, #48]	; 0x30
 8013d1c:	d189      	bne.n	8013c32 <iNemoEngine_API_Update+0x12ba>
 8013d1e:	f99b 300e 	ldrsb.w	r3, [fp, #14]
 8013d22:	aaae      	add	r2, sp, #696	; 0x2b8
 8013d24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013d28:	ed53 7a01 	vldr	s15, [r3, #-4]
 8013d2c:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 8013d30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013d34:	ed13 7a01 	vldr	s14, [r3, #-4]
 8013d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d40:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8013d44:	bf4c      	ite	mi
 8013d46:	2201      	movmi	r2, #1
 8013d48:	2200      	movpl	r2, #0
 8013d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d4e:	bf4c      	ite	mi
 8013d50:	2301      	movmi	r3, #1
 8013d52:	2300      	movpl	r3, #0
 8013d54:	429a      	cmp	r2, r3
 8013d56:	f000 819d 	beq.w	8014094 <iNemoEngine_API_Update+0x171c>
 8013d5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013d68:	ece3 7a01 	vstmia	r3!, {s15}
 8013d6c:	9312      	str	r3, [sp, #72]	; 0x48
 8013d6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013d70:	3304      	adds	r3, #4
 8013d72:	9310      	str	r3, [sp, #64]	; 0x40
 8013d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d76:	2b03      	cmp	r3, #3
 8013d78:	f47f ae6d 	bne.w	8013a56 <iNemoEngine_API_Update+0x10de>
 8013d7c:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8013d80:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 8013d84:	eddd 6a16 	vldr	s13, [sp, #88]	; 0x58
 8013d88:	ed1f 1a45 	vldr	s2, [pc, #-276]	; 8013c78 <iNemoEngine_API_Update+0x1300>
 8013d8c:	9a06      	ldr	r2, [sp, #24]
 8013d8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013d92:	ee2d 1a81 	vmul.f32	s2, s27, s2
 8013d96:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013d9a:	f892 3900 	ldrb.w	r3, [r2, #2304]	; 0x900
 8013d9e:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 8013da2:	eeb0 8a67 	vmov.f32	s16, s15
 8013da6:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 8013daa:	eea7 8aa7 	vfma.f32	s16, s15, s15
 8013dae:	f502 6810 	add.w	r8, r2, #2304	; 0x900
 8013db2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013db6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013dba:	eeb1 6ac8 	vsqrt.f32	s12, s16
 8013dbe:	eec7 5a0d 	vdiv.f32	s11, s14, s26
 8013dc2:	ee2b 7a27 	vmul.f32	s14, s22, s15
 8013dc6:	ee6d 7aa7 	vmul.f32	s15, s27, s15
 8013dca:	eec7 6a26 	vdiv.f32	s13, s14, s13
 8013dce:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 8013dd2:	edcd 5a52 	vstr	s11, [sp, #328]	; 0x148
 8013dd6:	ee87 5a87 	vdiv.f32	s10, s15, s14
 8013dda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013dde:	eeb0 7a41 	vmov.f32	s14, s2
 8013de2:	eeab 7a27 	vfma.f32	s14, s22, s15
 8013de6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013dea:	ed5f 7a5c 	vldr	s15, [pc, #-368]	; 8013c7c <iNemoEngine_API_Update+0x1304>
 8013dee:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013df6:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 8013dfa:	ed8d 5a54 	vstr	s10, [sp, #336]	; 0x150
 8013dfe:	ed8d 6a55 	vstr	s12, [sp, #340]	; 0x154
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	f040 8159 	bne.w	80140ba <iNemoEngine_API_Update+0x1742>
 8013e08:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8013e0c:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8013e10:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8013e14:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8013e18:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8013e1c:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 8013e20:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8013e24:	f8c8 3020 	str.w	r3, [r8, #32]
 8013e28:	edc8 7a07 	vstr	s15, [r8, #28]
 8013e2c:	f602 130c 	addw	r3, r2, #2316	; 0x90c
 8013e30:	edd3 8a00 	vldr	s17, [r3]
 8013e34:	edd2 2a02 	vldr	s5, [r2, #8]
 8013e38:	f602 1324 	addw	r3, r2, #2340	; 0x924
 8013e3c:	edd3 7a00 	vldr	s15, [r3]
 8013e40:	f602 1308 	addw	r3, r2, #2312	; 0x908
 8013e44:	ed93 7a00 	vldr	s14, [r3]
 8013e48:	f502 6312 	add.w	r3, r2, #2336	; 0x920
 8013e4c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013e50:	edd3 7a00 	vldr	s15, [r3]
 8013e54:	f502 6311 	add.w	r3, r2, #2320	; 0x910
 8013e58:	eee7 8a27 	vfma.f32	s17, s14, s15
 8013e5c:	ed93 7a00 	vldr	s14, [r3]
 8013e60:	f602 1328 	addw	r3, r2, #2344	; 0x928
 8013e64:	edd3 7a00 	vldr	s15, [r3]
 8013e68:	f602 1314 	addw	r3, r2, #2324	; 0x914
 8013e6c:	eee7 8a27 	vfma.f32	s17, s14, s15
 8013e70:	ed93 7a00 	vldr	s14, [r3]
 8013e74:	f602 132c 	addw	r3, r2, #2348	; 0x92c
 8013e78:	edd3 7a00 	vldr	s15, [r3]
 8013e7c:	f602 1304 	addw	r3, r2, #2308	; 0x904
 8013e80:	eee7 8a27 	vfma.f32	s17, s14, s15
 8013e84:	ed93 7a00 	vldr	s14, [r3]
 8013e88:	f602 131c 	addw	r3, r2, #2332	; 0x91c
 8013e8c:	edd3 7a00 	vldr	s15, [r3]
 8013e90:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8013e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e98:	eee7 8a27 	vfma.f32	s17, s14, s15
 8013e9c:	f340 8158 	ble.w	8014150 <iNemoEngine_API_Update+0x17d8>
 8013ea0:	edd2 7a30 	vldr	s15, [r2, #192]	; 0xc0
 8013ea4:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eac:	f101 8112 	bmi.w	80150d4 <iNemoEngine_API_Update+0x275c>
 8013eb0:	ed92 fa31 	vldr	s30, [r2, #196]	; 0xc4
 8013eb4:	4613      	mov	r3, r2
 8013eb6:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 8013eba:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ec2:	f142 8186 	bpl.w	80161d2 <iNemoEngine_API_Update+0x385a>
 8013ec6:	edd3 4a62 	vldr	s9, [r3, #392]	; 0x188
 8013eca:	eef4 4ae8 	vcmpe.f32	s9, s17
 8013ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed2:	f342 821e 	ble.w	8016312 <iNemoEngine_API_Update+0x399a>
 8013ed6:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 8013eda:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8013ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee2:	f302 8555 	bgt.w	8016990 <iNemoEngine_API_Update+0x4018>
 8013ee6:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8013eea:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef2:	f142 8565 	bpl.w	80169c0 <iNemoEngine_API_Update+0x4048>
 8013ef6:	edd3 3a4d 	vldr	s7, [r3, #308]	; 0x134
 8013efa:	ed93 4a4f 	vldr	s8, [r3, #316]	; 0x13c
 8013efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f02:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013f06:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013f0a:	ee24 7a07 	vmul.f32	s14, s8, s14
 8013f0e:	ee87 ca27 	vdiv.f32	s24, s14, s15
 8013f12:	ee3c ca23 	vadd.f32	s24, s24, s7
 8013f16:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8013f1a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f22:	f2c2 8566 	blt.w	80169f2 <iNemoEngine_API_Update+0x407a>
 8013f26:	9b06      	ldr	r3, [sp, #24]
 8013f28:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8013f2c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8013f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f34:	f142 87a3 	bpl.w	8016e7e <iNemoEngine_API_Update+0x4506>
 8013f38:	edd3 3a51 	vldr	s7, [r3, #324]	; 0x144
 8013f3c:	ed93 4a53 	vldr	s8, [r3, #332]	; 0x14c
 8013f40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013f44:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013f48:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8013f4c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8013f50:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8013f54:	ee3c ca23 	vadd.f32	s24, s24, s7
 8013f58:	9b06      	ldr	r3, [sp, #24]
 8013f5a:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8013f5e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f66:	f2c2 8566 	blt.w	8016a36 <iNemoEngine_API_Update+0x40be>
 8013f6a:	9b06      	ldr	r3, [sp, #24]
 8013f6c:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8013f70:	eef4 8ac7 	vcmpe.f32	s17, s14
 8013f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f78:	f142 87dc 	bpl.w	8016f34 <iNemoEngine_API_Update+0x45bc>
 8013f7c:	edd3 3a55 	vldr	s7, [r3, #340]	; 0x154
 8013f80:	ed93 4a57 	vldr	s8, [r3, #348]	; 0x15c
 8013f84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013f88:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013f8c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8013f90:	ee64 7a27 	vmul.f32	s15, s8, s15
 8013f94:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8013f98:	ee3c ca23 	vadd.f32	s24, s24, s7
 8013f9c:	9b06      	ldr	r3, [sp, #24]
 8013f9e:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 8013fa2:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013faa:	f2c2 8566 	blt.w	8016a7a <iNemoEngine_API_Update+0x4102>
 8013fae:	9b06      	ldr	r3, [sp, #24]
 8013fb0:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 8013fb4:	eef4 8ac7 	vcmpe.f32	s17, s14
 8013fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fbc:	f142 87c5 	bpl.w	8016f4a <iNemoEngine_API_Update+0x45d2>
 8013fc0:	edd3 3a59 	vldr	s7, [r3, #356]	; 0x164
 8013fc4:	ed93 4a5b 	vldr	s8, [r3, #364]	; 0x16c
 8013fc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013fcc:	ee34 4a63 	vsub.f32	s8, s8, s7
 8013fd0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8013fd4:	ee64 7a27 	vmul.f32	s15, s8, s15
 8013fd8:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8013fdc:	ee3c ca23 	vadd.f32	s24, s24, s7
 8013fe0:	9b06      	ldr	r3, [sp, #24]
 8013fe2:	edd3 7a5c 	vldr	s15, [r3, #368]	; 0x170
 8013fe6:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fee:	f2c2 8566 	blt.w	8016abe <iNemoEngine_API_Update+0x4146>
 8013ff2:	9b06      	ldr	r3, [sp, #24]
 8013ff4:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 8013ff8:	eef4 8ac7 	vcmpe.f32	s17, s14
 8013ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014000:	f142 8795 	bpl.w	8016f2e <iNemoEngine_API_Update+0x45b6>
 8014004:	edd3 3a5d 	vldr	s7, [r3, #372]	; 0x174
 8014008:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 801400c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014010:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014014:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8014018:	ee64 7a27 	vmul.f32	s15, s8, s15
 801401c:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8014020:	ee3c ca23 	vadd.f32	s24, s24, s7
 8014024:	9b06      	ldr	r3, [sp, #24]
 8014026:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 801402a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014032:	f2c0 8092 	blt.w	801415a <iNemoEngine_API_Update+0x17e2>
 8014036:	9b06      	ldr	r3, [sp, #24]
 8014038:	ed93 4a61 	vldr	s8, [r3, #388]	; 0x184
 801403c:	ed93 7a63 	vldr	s14, [r3, #396]	; 0x18c
 8014040:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8014044:	ee37 7a44 	vsub.f32	s14, s14, s8
 8014048:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801404c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014050:	ee87 caa4 	vdiv.f32	s24, s15, s9
 8014054:	ee3c ca04 	vadd.f32	s24, s24, s8
 8014058:	e07f      	b.n	801415a <iNemoEngine_API_Update+0x17e2>
 801405a:	eddf 7ad2 	vldr	s15, [pc, #840]	; 80143a4 <iNemoEngine_API_Update+0x1a2c>
 801405e:	eddf cad2 	vldr	s25, [pc, #840]	; 80143a8 <iNemoEngine_API_Update+0x1a30>
 8014062:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8014066:	eddf 7ad1 	vldr	s15, [pc, #836]	; 80143ac <iNemoEngine_API_Update+0x1a34>
 801406a:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 801406e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014072:	f7ff b824 	b.w	80130be <iNemoEngine_API_Update+0x746>
 8014076:	1c60      	adds	r0, r4, #1
 8014078:	454e      	cmp	r6, r9
 801407a:	4459      	add	r1, fp
 801407c:	4450      	add	r0, sl
 801407e:	4665      	mov	r5, ip
 8014080:	f6bf ae04 	bge.w	8013c8c <iNemoEngine_API_Update+0x1314>
 8014084:	eba9 0206 	sub.w	r2, r9, r6
 8014088:	444c      	add	r4, r9
 801408a:	1ba4      	subs	r4, r4, r6
 801408c:	f005 f94e 	bl	801932c <memcpy>
 8014090:	464e      	mov	r6, r9
 8014092:	e5fb      	b.n	8013c8c <iNemoEngine_API_Update+0x1314>
 8014094:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409c:	f43f ae5d 	beq.w	8013d5a <iNemoEngine_API_Update+0x13e2>
 80140a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80140a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140a8:	f43f ae57 	beq.w	8013d5a <iNemoEngine_API_Update+0x13e2>
 80140ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80140b0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80140b4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80140b8:	e655      	b.n	8013d66 <iNemoEngine_API_Update+0x13ee>
 80140ba:	2300      	movs	r3, #0
 80140bc:	f882 3900 	strb.w	r3, [r2, #2304]	; 0x900
 80140c0:	edc8 7a07 	vstr	s15, [r8, #28]
 80140c4:	edc8 7a08 	vstr	s15, [r8, #32]
 80140c8:	edc8 7a09 	vstr	s15, [r8, #36]	; 0x24
 80140cc:	edc8 7a0a 	vstr	s15, [r8, #40]	; 0x28
 80140d0:	edc8 7a0b 	vstr	s15, [r8, #44]	; 0x2c
 80140d4:	e6aa      	b.n	8013e2c <iNemoEngine_API_Update+0x14b4>
 80140d6:	f04f 0908 	mov.w	r9, #8
 80140da:	f04f 0805 	mov.w	r8, #5
 80140de:	2202      	movs	r2, #2
 80140e0:	f7ff bae3 	b.w	80136aa <iNemoEngine_API_Update+0xd32>
 80140e4:	2104      	movs	r1, #4
 80140e6:	2000      	movs	r0, #0
 80140e8:	f04f 0c06 	mov.w	ip, #6
 80140ec:	f04f 0e07 	mov.w	lr, #7
 80140f0:	2603      	movs	r6, #3
 80140f2:	460c      	mov	r4, r1
 80140f4:	2301      	movs	r3, #1
 80140f6:	4607      	mov	r7, r0
 80140f8:	f7ff babd 	b.w	8013676 <iNemoEngine_API_Update+0xcfe>
 80140fc:	ed9f 5aac 	vldr	s10, [pc, #688]	; 80143b0 <iNemoEngine_API_Update+0x1a38>
 8014100:	ed9f 8aac 	vldr	s16, [pc, #688]	; 80143b4 <iNemoEngine_API_Update+0x1a3c>
 8014104:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80143e4 <iNemoEngine_API_Update+0x1a6c>
 8014108:	eddf 6aab 	vldr	s13, [pc, #684]	; 80143b8 <iNemoEngine_API_Update+0x1a40>
 801410c:	ed84 5a00 	vstr	s10, [r4]
 8014110:	eef0 7a45 	vmov.f32	s15, s10
 8014114:	eeb0 6a45 	vmov.f32	s12, s10
 8014118:	eddf caa8 	vldr	s25, [pc, #672]	; 80143bc <iNemoEngine_API_Update+0x1a44>
 801411c:	ed9f 9aa8 	vldr	s18, [pc, #672]	; 80143c0 <iNemoEngine_API_Update+0x1a48>
 8014120:	ed84 8a01 	vstr	s16, [r4, #4]
 8014124:	eef0 5a66 	vmov.f32	s11, s13
 8014128:	ed84 8a02 	vstr	s16, [r4, #8]
 801412c:	eeb0 5a47 	vmov.f32	s10, s14
 8014130:	eef0 8a67 	vmov.f32	s17, s15
 8014134:	eeb0 ca48 	vmov.f32	s24, s16
 8014138:	f7fe bed8 	b.w	8012eec <iNemoEngine_API_Update+0x574>
 801413c:	eef1 6a66 	vneg.f32	s13, s13
 8014140:	e415      	b.n	801396e <iNemoEngine_API_Update+0xff6>
 8014142:	eeb1 4a44 	vneg.f32	s8, s8
 8014146:	f7ff bbee 	b.w	8013926 <iNemoEngine_API_Update+0xfae>
 801414a:	eef1 7a67 	vneg.f32	s15, s15
 801414e:	e431      	b.n	80139b4 <iNemoEngine_API_Update+0x103c>
 8014150:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8014154:	eeb0 fa4c 	vmov.f32	s30, s24
 8014158:	4613      	mov	r3, r2
 801415a:	edd3 fa74 	vldr	s31, [r3, #464]	; 0x1d0
 801415e:	ed93 7a72 	vldr	s14, [r3, #456]	; 0x1c8
 8014162:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8014166:	eddf 4a90 	vldr	s9, [pc, #576]	; 80143a8 <iNemoEngine_API_Update+0x1a30>
 801416a:	ee7c faef 	vsub.f32	s31, s25, s31
 801416e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014172:	eef0 faef 	vabs.f32	s31, s31
 8014176:	eef0 7ae7 	vabs.f32	s15, s15
 801417a:	ee77 7aaf 	vadd.f32	s15, s15, s31
 801417e:	eef4 7ae4 	vcmpe.f32	s15, s9
 8014182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014186:	dd0a      	ble.n	801419e <iNemoEngine_API_Update+0x1826>
 8014188:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 80143c4 <iNemoEngine_API_Update+0x1a4c>
 801418c:	eef4 7ac4 	vcmpe.f32	s15, s8
 8014190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014194:	f340 8790 	ble.w	80150b8 <iNemoEngine_API_Update+0x2740>
 8014198:	eef1 4a04 	vmov.f32	s9, #20	; 0x40a00000  5.0
 801419c:	e001      	b.n	80141a2 <iNemoEngine_API_Update+0x182a>
 801419e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80141a2:	eddd 7a21 	vldr	s15, [sp, #132]	; 0x84
 80141a6:	781c      	ldrb	r4, [r3, #0]
 80141a8:	eef4 4ae7 	vcmpe.f32	s9, s15
 80141ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141b0:	bfa8      	it	ge
 80141b2:	eef0 7a64 	vmovge.f32	s15, s9
 80141b6:	edcd 7a04 	vstr	s15, [sp, #16]
 80141ba:	b1cc      	cbz	r4, 80141f0 <iNemoEngine_API_Update+0x1878>
 80141bc:	785c      	ldrb	r4, [r3, #1]
 80141be:	2c00      	cmp	r4, #0
 80141c0:	f040 8774 	bne.w	80150ac <iNemoEngine_API_Update+0x2734>
 80141c4:	ee75 7aa6 	vadd.f32	s15, s11, s13
 80141c8:	edd3 6a05 	vldr	s13, [r3, #20]
 80141cc:	ee75 7a27 	vadd.f32	s15, s10, s15
 80141d0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80141d4:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 80141d8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80141dc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80141e0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80141e4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80141e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ec:	f102 848b 	bmi.w	8016b06 <iNemoEngine_API_Update+0x418e>
 80141f0:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 80141f4:	461a      	mov	r2, r3
 80141f6:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 80141fa:	ed9d 6a50 	vldr	s12, [sp, #320]	; 0x140
 80141fe:	edcd 6a98 	vstr	s13, [sp, #608]	; 0x260
 8014202:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014206:	eef0 6a65 	vmov.f32	s13, s11
 801420a:	eee7 6a47 	vfms.f32	s13, s14, s14
 801420e:	2300      	movs	r3, #0
 8014210:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
 8014214:	ed9d 5a4e 	vldr	s10, [sp, #312]	; 0x138
 8014218:	eddd 4a4f 	vldr	s9, [sp, #316]	; 0x13c
 801421c:	eddd 0a51 	vldr	s1, [sp, #324]	; 0x144
 8014220:	ed8d 7a45 	vstr	s14, [sp, #276]	; 0x114
 8014224:	ee26 4a06 	vmul.f32	s8, s12, s12
 8014228:	ee25 2a05 	vmul.f32	s4, s10, s10
 801422c:	ee34 4a04 	vadd.f32	s8, s8, s8
 8014230:	eeb1 3ae6 	vsqrt.f32	s6, s13
 8014234:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 8014238:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
 801423c:	9343      	str	r3, [sp, #268]	; 0x10c
 801423e:	ee64 3a86 	vmul.f32	s7, s9, s12
 8014242:	ee25 0a24 	vmul.f32	s0, s10, s9
 8014246:	ee64 1aa4 	vmul.f32	s3, s9, s9
 801424a:	ee64 6aa0 	vmul.f32	s13, s9, s1
 801424e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8014252:	eea2 4a24 	vfma.f32	s8, s4, s9
 8014256:	ee73 3aa3 	vadd.f32	s7, s7, s7
 801425a:	ee35 1ac4 	vsub.f32	s2, s11, s8
 801425e:	ee25 4a06 	vmul.f32	s8, s10, s12
 8014262:	ee26 6a20 	vmul.f32	s12, s12, s1
 8014266:	ee71 1aa1 	vadd.f32	s3, s3, s3
 801426a:	ee30 6a06 	vadd.f32	s12, s0, s12
 801426e:	ee25 5a20 	vmul.f32	s10, s10, s1
 8014272:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8014276:	eee2 1a24 	vfma.f32	s3, s4, s9
 801427a:	ee36 2a06 	vadd.f32	s4, s12, s12
 801427e:	eeb0 6a63 	vmov.f32	s12, s7
 8014282:	eea5 6a24 	vfma.f32	s12, s10, s9
 8014286:	eee5 3a64 	vfms.f32	s7, s10, s9
 801428a:	eeb0 5a66 	vmov.f32	s10, s13
 801428e:	ee7a 6aa6 	vadd.f32	s13, s21, s13
 8014292:	ee94 5a24 	vfnms.f32	s10, s8, s9
 8014296:	eee4 6a64 	vfms.f32	s13, s8, s9
 801429a:	ee25 5a07 	vmul.f32	s10, s10, s14
 801429e:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 80142a2:	edcd 6a92 	vstr	s13, [sp, #584]	; 0x248
 80142a6:	ee75 6ae1 	vsub.f32	s13, s11, s3
 80142aa:	ee79 5ae5 	vsub.f32	s11, s19, s11
 80142ae:	ee66 6a87 	vmul.f32	s13, s13, s14
 80142b2:	ee75 1aa1 	vadd.f32	s3, s11, s3
 80142b6:	eee3 6a23 	vfma.f32	s13, s6, s7
 80142ba:	ee26 7a07 	vmul.f32	s14, s12, s14
 80142be:	eddd 5a2a 	vldr	s11, [sp, #168]	; 0xa8
 80142c2:	eddd 4a2c 	vldr	s9, [sp, #176]	; 0xb0
 80142c6:	ed8d 9a99 	vstr	s18, [sp, #612]	; 0x264
 80142ca:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80142ce:	eea3 7a01 	vfma.f32	s14, s6, s2
 80142d2:	edcd 6a91 	vstr	s13, [sp, #580]	; 0x244
 80142d6:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 80142da:	edcd ca9a 	vstr	s25, [sp, #616]	; 0x268
 80142de:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80142e2:	eea3 5a02 	vfma.f32	s10, s6, s4
 80142e6:	ed8d 7a90 	vstr	s14, [sp, #576]	; 0x240
 80142ea:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80143f8 <iNemoEngine_API_Update+0x1a80>
 80142ee:	ed8d 3a44 	vstr	s6, [sp, #272]	; 0x110
 80142f2:	ee3a 6a46 	vsub.f32	s12, s20, s12
 80142f6:	ee34 5ac5 	vsub.f32	s10, s9, s10
 80142fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80142fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014302:	ed8d 5a8f 	vstr	s10, [sp, #572]	; 0x23c
 8014306:	edcd 1a3f 	vstr	s3, [sp, #252]	; 0xfc
 801430a:	edcd 1a94 	vstr	s3, [sp, #592]	; 0x250
 801430e:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 8014312:	ed8d 6a93 	vstr	s12, [sp, #588]	; 0x24c
 8014316:	d541      	bpl.n	801439c <iNemoEngine_API_Update+0x1a24>
 8014318:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80143c8 <iNemoEngine_API_Update+0x1a50>
 801431c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014324:	dd3a      	ble.n	801439c <iNemoEngine_API_Update+0x1a24>
 8014326:	ee79 7a67 	vsub.f32	s15, s18, s15
 801432a:	eef0 7ae7 	vabs.f32	s15, s15
 801432e:	ee77 7a8b 	vadd.f32	s15, s15, s22
 8014332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801433a:	dd5f      	ble.n	80143fc <iNemoEngine_API_Update+0x1a84>
 801433c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014348:	f140 86a4 	bpl.w	8015094 <iNemoEngine_API_Update+0x271c>
 801434c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80143cc <iNemoEngine_API_Update+0x1a54>
 8014350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014358:	f141 8185 	bpl.w	8015666 <iNemoEngine_API_Update+0x2cee>
 801435c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80143dc <iNemoEngine_API_Update+0x1a64>
 8014360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014368:	f2c1 8185 	blt.w	8015676 <iNemoEngine_API_Update+0x2cfe>
 801436c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80143d0 <iNemoEngine_API_Update+0x1a58>
 8014370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014378:	f141 824e 	bpl.w	8015818 <iNemoEngine_API_Update+0x2ea0>
 801437c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80143dc <iNemoEngine_API_Update+0x1a64>
 8014380:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80143d4 <iNemoEngine_API_Update+0x1a5c>
 8014384:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80143d8 <iNemoEngine_API_Update+0x1a60>
 8014388:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801438c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014394:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014398:	f001 b977 	b.w	801568a <iNemoEngine_API_Update+0x2d12>
 801439c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80143a0:	e7c1      	b.n	8014326 <iNemoEngine_API_Update+0x19ae>
 80143a2:	bf00      	nop
 80143a4:	3ecccccc 	.word	0x3ecccccc
 80143a8:	3dcccccd 	.word	0x3dcccccd
 80143ac:	3f666666 	.word	0x3f666666
 80143b0:	00000000 	.word	0x00000000
 80143b4:	3f333333 	.word	0x3f333333
 80143b8:	bfb33333 	.word	0xbfb33333
 80143bc:	3f7d6d54 	.word	0x3f7d6d54
 80143c0:	3f7ae147 	.word	0x3f7ae147
 80143c4:	3fb77778 	.word	0x3fb77778
 80143c8:	3f4ccccd 	.word	0x3f4ccccd
 80143cc:	3ba3d70a 	.word	0x3ba3d70a
 80143d0:	3c75c28f 	.word	0x3c75c28f
 80143d4:	3f19999a 	.word	0x3f19999a
 80143d8:	43480000 	.word	0x43480000
 80143dc:	3c23d70a 	.word	0x3c23d70a
 80143e0:	3b449ba6 	.word	0x3b449ba6
 80143e4:	3fb33333 	.word	0x3fb33333
 80143e8:	3ecccccd 	.word	0x3ecccccd
 80143ec:	3f8f5c29 	.word	0x3f8f5c29
 80143f0:	3f59999a 	.word	0x3f59999a
 80143f4:	3e4ccccd 	.word	0x3e4ccccd
 80143f8:	3f99999a 	.word	0x3f99999a
 80143fc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014400:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 80143dc <iNemoEngine_API_Update+0x1a64>
 8014404:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 80143e0 <iNemoEngine_API_Update+0x1a68>
 8014408:	eeb0 7a65 	vmov.f32	s14, s11
 801440c:	eef0 6a65 	vmov.f32	s13, s11
 8014410:	ed8d 6a65 	vstr	s12, [sp, #404]	; 0x194
 8014414:	ed9d 6a04 	vldr	s12, [sp, #16]
 8014418:	ed9d 3a84 	vldr	s6, [sp, #528]	; 0x210
 801441c:	ed9d 5a83 	vldr	s10, [sp, #524]	; 0x20c
 8014420:	ed9d 2a88 	vldr	s4, [sp, #544]	; 0x220
 8014424:	eddd 4a8c 	vldr	s9, [sp, #560]	; 0x230
 8014428:	9a06      	ldr	r2, [sp, #24]
 801442a:	ed8d 4a66 	vstr	s8, [sp, #408]	; 0x198
 801442e:	ee66 3a0f 	vmul.f32	s7, s12, s30
 8014432:	ed9d 6a8d 	vldr	s12, [sp, #564]	; 0x234
 8014436:	7b13      	ldrb	r3, [r2, #12]
 8014438:	ee23 3a23 	vmul.f32	s6, s6, s7
 801443c:	ee23 5a85 	vmul.f32	s10, s7, s10
 8014440:	ed8d 3a84 	vstr	s6, [sp, #528]	; 0x210
 8014444:	ed9d 3a85 	vldr	s6, [sp, #532]	; 0x214
 8014448:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 801444c:	ee63 3a23 	vmul.f32	s7, s6, s7
 8014450:	ed9d 3a86 	vldr	s6, [sp, #536]	; 0x218
 8014454:	edcd 3a85 	vstr	s7, [sp, #532]	; 0x214
 8014458:	eddd 3a87 	vldr	s7, [sp, #540]	; 0x21c
 801445c:	ee2c 3a03 	vmul.f32	s6, s24, s6
 8014460:	ee6c 3a23 	vmul.f32	s7, s24, s7
 8014464:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8014468:	ee2c ca02 	vmul.f32	s24, s24, s4
 801446c:	ee36 6a06 	vadd.f32	s12, s12, s12
 8014470:	ed9d 2a8e 	vldr	s4, [sp, #568]	; 0x238
 8014474:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 8014478:	ee64 4a87 	vmul.f32	s9, s9, s14
 801447c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8014480:	ee2f fa02 	vmul.f32	s30, s30, s4
 8014484:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 8014488:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 801448c:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 8014490:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 8014494:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 8014498:	2b00      	cmp	r3, #0
 801449a:	f000 8525 	beq.w	8014ee8 <iNemoEngine_API_Update+0x2570>
 801449e:	ee27 3a03 	vmul.f32	s6, s14, s6
 80144a2:	ee67 3a23 	vmul.f32	s7, s14, s7
 80144a6:	ee27 ca0c 	vmul.f32	s24, s14, s24
 80144aa:	ed9d 2a22 	vldr	s4, [sp, #136]	; 0x88
 80144ae:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 80144b2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80144b6:	4613      	mov	r3, r2
 80144b8:	ee25 2a82 	vmul.f32	s4, s11, s4
 80144bc:	7b92      	ldrb	r2, [r2, #14]
 80144be:	7b5b      	ldrb	r3, [r3, #13]
 80144c0:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 80144c4:	ee64 5a25 	vmul.f32	s11, s8, s11
 80144c8:	ee26 6a07 	vmul.f32	s12, s12, s14
 80144cc:	edcd 5a66 	vstr	s11, [sp, #408]	; 0x198
 80144d0:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 80144d4:	ed8d 2a5f 	vstr	s4, [sp, #380]	; 0x17c
 80144d8:	ed8d 2a60 	vstr	s4, [sp, #384]	; 0x180
 80144dc:	ed8d 2a61 	vstr	s4, [sp, #388]	; 0x184
 80144e0:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 80144e4:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 80144e8:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 80144ec:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 80144f0:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 80144f4:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 80144f8:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 80144fc:	b15a      	cbz	r2, 8014516 <iNemoEngine_API_Update+0x1b9e>
 80144fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801450a:	dd04      	ble.n	8014516 <iNemoEngine_API_Update+0x1b9e>
 801450c:	2100      	movs	r1, #0
 801450e:	f8ad 10eb 	strh.w	r1, [sp, #235]	; 0xeb
 8014512:	f88d 10ed 	strb.w	r1, [sp, #237]	; 0xed
 8014516:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 801451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801451e:	dd08      	ble.n	8014532 <iNemoEngine_API_Update+0x1bba>
 8014520:	9906      	ldr	r1, [sp, #24]
 8014522:	edd1 7a64 	vldr	s15, [r1, #400]	; 0x190
 8014526:	eef4 7ae8 	vcmpe.f32	s15, s17
 801452a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801452e:	f280 85a4 	bge.w	801507a <iNemoEngine_API_Update+0x2702>
 8014532:	b133      	cbz	r3, 8014542 <iNemoEngine_API_Update+0x1bca>
 8014534:	f240 1101 	movw	r1, #257	; 0x101
 8014538:	f8ad 10e8 	strh.w	r1, [sp, #232]	; 0xe8
 801453c:	2101      	movs	r1, #1
 801453e:	f88d 10ea 	strb.w	r1, [sp, #234]	; 0xea
 8014542:	2401      	movs	r4, #1
 8014544:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 8014548:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 801454c:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 80143e4 <iNemoEngine_API_Update+0x1a6c>
 8014550:	eef4 cae7 	vcmpe.f32	s25, s15
 8014554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014558:	dc07      	bgt.n	801456a <iNemoEngine_API_Update+0x1bf2>
 801455a:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 80143e8 <iNemoEngine_API_Update+0x1a70>
 801455e:	eef4 cae7 	vcmpe.f32	s25, s15
 8014562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014566:	f141 801d 	bpl.w	80155a4 <iNemoEngine_API_Update+0x2c2c>
 801456a:	2300      	movs	r3, #0
 801456c:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 8014570:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8014574:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8014578:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 801457c:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 80143ec <iNemoEngine_API_Update+0x1a74>
 8014580:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8014584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014588:	dc07      	bgt.n	801459a <iNemoEngine_API_Update+0x1c22>
 801458a:	ed5f 7a67 	vldr	s15, [pc, #-412]	; 80143f0 <iNemoEngine_API_Update+0x1a78>
 801458e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8014592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014596:	f140 86ed 	bpl.w	8015374 <iNemoEngine_API_Update+0x29fc>
 801459a:	2300      	movs	r3, #0
 801459c:	f8ad 30eb 	strh.w	r3, [sp, #235]	; 0xeb
 80145a0:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
 80145a4:	f8ad 30f1 	strh.w	r3, [sp, #241]	; 0xf1
 80145a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80145ac:	eef4 fae7 	vcmpe.f32	s31, s15
 80145b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145b4:	f340 8486 	ble.w	8014ec4 <iNemoEngine_API_Update+0x254c>
 80145b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80145bc:	ee7f 7aa7 	vadd.f32	s15, s31, s15
 80145c0:	9a06      	ldr	r2, [sp, #24]
 80145c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80145c6:	2300      	movs	r3, #0
 80145c8:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80145cc:	ee27 fa8f 	vmul.f32	s30, s15, s30
 80145d0:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80145d4:	eef4 fae7 	vcmpe.f32	s31, s15
 80145d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145dc:	bfc4      	itt	gt
 80145de:	f88d 30f1 	strbgt.w	r3, [sp, #241]	; 0xf1
 80145e2:	f88d 30f3 	strbgt.w	r3, [sp, #243]	; 0xf3
 80145e6:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 80145ea:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 80145ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80145f0:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 80145f4:	2b0e      	cmp	r3, #14
 80145f6:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 80145fa:	f340 8567 	ble.w	80150cc <iNemoEngine_API_Update+0x2754>
 80145fe:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8014602:	eeb4 dae7 	vcmpe.f32	s26, s15
 8014606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801460a:	f340 82ed 	ble.w	8014be8 <iNemoEngine_API_Update+0x2270>
 801460e:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8014612:	eef4 7acb 	vcmpe.f32	s15, s22
 8014616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801461a:	f340 82e5 	ble.w	8014be8 <iNemoEngine_API_Update+0x2270>
 801461e:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 8014622:	eef4 7aed 	vcmpe.f32	s15, s27
 8014626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801462a:	f340 82dd 	ble.w	8014be8 <iNemoEngine_API_Update+0x2270>
 801462e:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 80143f4 <iNemoEngine_API_Update+0x1a7c>
 8014632:	eeb0 7ace 	vabs.f32	s14, s28
 8014636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801463e:	f140 82d3 	bpl.w	8014be8 <iNemoEngine_API_Update+0x2270>
 8014642:	eeb0 7aee 	vabs.f32	s14, s29
 8014646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801464a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801464e:	f140 82cb 	bpl.w	8014be8 <iNemoEngine_API_Update+0x2270>
 8014652:	eeb0 7aeb 	vabs.f32	s14, s23
 8014656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801465a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801465e:	f140 82c3 	bpl.w	8014be8 <iNemoEngine_API_Update+0x2270>
 8014662:	ed5f 7a9b 	vldr	s15, [pc, #-620]	; 80143f8 <iNemoEngine_API_Update+0x1a80>
 8014666:	eef0 aaea 	vabs.f32	s21, s21
 801466a:	eef4 aae7 	vcmpe.f32	s21, s15
 801466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014672:	f140 82b9 	bpl.w	8014be8 <iNemoEngine_API_Update+0x2270>
 8014676:	eeb0 aaca 	vabs.f32	s20, s20
 801467a:	eeb4 aae7 	vcmpe.f32	s20, s15
 801467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014682:	f140 82b1 	bpl.w	8014be8 <iNemoEngine_API_Update+0x2270>
 8014686:	eef0 9ae9 	vabs.f32	s19, s19
 801468a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801468e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014692:	f140 82a9 	bpl.w	8014be8 <iNemoEngine_API_Update+0x2270>
 8014696:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014698:	9806      	ldr	r0, [sp, #24]
 801469a:	ed93 6a00 	vldr	s12, [r3]
 801469e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146a0:	f890 11a0 	ldrb.w	r1, [r0, #416]	; 0x1a0
 80146a4:	ed93 7a00 	vldr	s14, [r3]
 80146a8:	f200 73a4 	addw	r3, r0, #1956	; 0x7a4
 80146ac:	edd3 4a00 	vldr	s9, [r3]
 80146b0:	2909      	cmp	r1, #9
 80146b2:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80146b6:	f500 63f6 	add.w	r3, r0, #1968	; 0x7b0
 80146ba:	ed93 5a00 	vldr	s10, [r3]
 80146be:	bf8c      	ite	hi
 80146c0:	220a      	movhi	r2, #10
 80146c2:	2205      	movls	r2, #5
 80146c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146c8:	bfb4      	ite	lt
 80146ca:	eef0 7a64 	vmovlt.f32	s15, s9
 80146ce:	eef0 7a46 	vmovge.f32	s15, s12
 80146d2:	eef4 7ac5 	vcmpe.f32	s15, s10
 80146d6:	bf8c      	ite	hi
 80146d8:	eef0 5a64 	vmovhi.f32	s11, s9
 80146dc:	eef0 5a46 	vmovls.f32	s11, s12
 80146e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146e4:	ee36 6a24 	vadd.f32	s12, s12, s9
 80146e8:	eef4 5ac5 	vcmpe.f32	s11, s10
 80146ec:	bfb8      	it	lt
 80146ee:	eef0 7a45 	vmovlt.f32	s15, s10
 80146f2:	f200 73bc 	addw	r3, r0, #1980	; 0x7bc
 80146f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146fa:	bf88      	it	hi
 80146fc:	eef0 5a45 	vmovhi.f32	s11, s10
 8014700:	ee36 6a05 	vadd.f32	s12, s12, s10
 8014704:	ed93 5a00 	vldr	s10, [r3]
 8014708:	eef4 7ac5 	vcmpe.f32	s15, s10
 801470c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014710:	eef4 5ac5 	vcmpe.f32	s11, s10
 8014714:	bfb8      	it	lt
 8014716:	eef0 7a45 	vmovlt.f32	s15, s10
 801471a:	f500 63f9 	add.w	r3, r0, #1992	; 0x7c8
 801471e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014722:	bf88      	it	hi
 8014724:	eef0 5a45 	vmovhi.f32	s11, s10
 8014728:	ee36 6a05 	vadd.f32	s12, s12, s10
 801472c:	ed93 5a00 	vldr	s10, [r3]
 8014730:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014738:	eef4 5ac5 	vcmpe.f32	s11, s10
 801473c:	bfb8      	it	lt
 801473e:	eef0 7a45 	vmovlt.f32	s15, s10
 8014742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014746:	bf88      	it	hi
 8014748:	eef0 5a45 	vmovhi.f32	s11, s10
 801474c:	2a05      	cmp	r2, #5
 801474e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8014752:	d065      	beq.n	8014820 <iNemoEngine_API_Update+0x1ea8>
 8014754:	f200 73d4 	addw	r3, r0, #2004	; 0x7d4
 8014758:	ed93 5a00 	vldr	s10, [r3]
 801475c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014764:	eef4 5ac5 	vcmpe.f32	s11, s10
 8014768:	bfb8      	it	lt
 801476a:	eef0 7a45 	vmovlt.f32	s15, s10
 801476e:	f500 63fc 	add.w	r3, r0, #2016	; 0x7e0
 8014772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014776:	bf88      	it	hi
 8014778:	eef0 5a45 	vmovhi.f32	s11, s10
 801477c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8014780:	ed93 5a00 	vldr	s10, [r3]
 8014784:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801478c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8014790:	bfb8      	it	lt
 8014792:	eef0 7a45 	vmovlt.f32	s15, s10
 8014796:	f200 73ec 	addw	r3, r0, #2028	; 0x7ec
 801479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801479e:	bf88      	it	hi
 80147a0:	eef0 5a45 	vmovhi.f32	s11, s10
 80147a4:	ee36 6a05 	vadd.f32	s12, s12, s10
 80147a8:	ed93 5a00 	vldr	s10, [r3]
 80147ac:	eef4 7ac5 	vcmpe.f32	s15, s10
 80147b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147b4:	eef4 5ac5 	vcmpe.f32	s11, s10
 80147b8:	bfb8      	it	lt
 80147ba:	eef0 7a45 	vmovlt.f32	s15, s10
 80147be:	f500 63ff 	add.w	r3, r0, #2040	; 0x7f8
 80147c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147c6:	bf88      	it	hi
 80147c8:	eef0 5a45 	vmovhi.f32	s11, s10
 80147cc:	ee36 6a05 	vadd.f32	s12, s12, s10
 80147d0:	ed93 5a00 	vldr	s10, [r3]
 80147d4:	eef4 7ac5 	vcmpe.f32	s15, s10
 80147d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147dc:	eef4 5ac5 	vcmpe.f32	s11, s10
 80147e0:	bfb8      	it	lt
 80147e2:	eef0 7a45 	vmovlt.f32	s15, s10
 80147e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ea:	bf88      	it	hi
 80147ec:	eef0 5a45 	vmovhi.f32	s11, s10
 80147f0:	2a0a      	cmp	r2, #10
 80147f2:	ee36 6a05 	vadd.f32	s12, s12, s10
 80147f6:	d113      	bne.n	8014820 <iNemoEngine_API_Update+0x1ea8>
 80147f8:	f600 0304 	addw	r3, r0, #2052	; 0x804
 80147fc:	ed93 5a00 	vldr	s10, [r3]
 8014800:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014808:	eef4 5ac5 	vcmpe.f32	s11, s10
 801480c:	bfb8      	it	lt
 801480e:	eef0 7a45 	vmovlt.f32	s15, s10
 8014812:	ee36 6a05 	vadd.f32	s12, s12, s10
 8014816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801481a:	bf88      	it	hi
 801481c:	eef0 5a45 	vmovhi.f32	s11, s10
 8014820:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014824:	eddf 5aeb 	vldr	s11, [pc, #940]	; 8014bd4 <iNemoEngine_API_Update+0x225c>
 8014828:	ed9f 5aeb 	vldr	s10, [pc, #940]	; 8014bd8 <iNemoEngine_API_Update+0x2260>
 801482c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014830:	ee26 6a05 	vmul.f32	s12, s12, s10
 8014834:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801483c:	f300 81d4 	bgt.w	8014be8 <iNemoEngine_API_Update+0x2270>
 8014840:	eef0 7ac6 	vabs.f32	s15, s12
 8014844:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014848:	ed9f 6ae4 	vldr	s12, [pc, #912]	; 8014bdc <iNemoEngine_API_Update+0x2264>
 801484c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014854:	f300 81c8 	bgt.w	8014be8 <iNemoEngine_API_Update+0x2270>
 8014858:	9806      	ldr	r0, [sp, #24]
 801485a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801485c:	ed93 6a00 	vldr	s12, [r3]
 8014860:	f500 63f5 	add.w	r3, r0, #1960	; 0x7a8
 8014864:	edd3 4a00 	vldr	s9, [r3]
 8014868:	f200 73b4 	addw	r3, r0, #1972	; 0x7b4
 801486c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8014870:	ed93 5a00 	vldr	s10, [r3]
 8014874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014878:	bfb4      	ite	lt
 801487a:	eef0 7a64 	vmovlt.f32	s15, s9
 801487e:	eef0 7a46 	vmovge.f32	s15, s12
 8014882:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014886:	bf8c      	ite	hi
 8014888:	eef0 5a64 	vmovhi.f32	s11, s9
 801488c:	eef0 5a46 	vmovls.f32	s11, s12
 8014890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014894:	ee36 6a24 	vadd.f32	s12, s12, s9
 8014898:	eef4 5ac5 	vcmpe.f32	s11, s10
 801489c:	bfb8      	it	lt
 801489e:	eef0 7a45 	vmovlt.f32	s15, s10
 80148a2:	f500 63f8 	add.w	r3, r0, #1984	; 0x7c0
 80148a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148aa:	bf88      	it	hi
 80148ac:	eef0 5a45 	vmovhi.f32	s11, s10
 80148b0:	ee36 6a05 	vadd.f32	s12, s12, s10
 80148b4:	ed93 5a00 	vldr	s10, [r3]
 80148b8:	eef4 7ac5 	vcmpe.f32	s15, s10
 80148bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148c0:	eef4 5ac5 	vcmpe.f32	s11, s10
 80148c4:	bfb8      	it	lt
 80148c6:	eef0 7a45 	vmovlt.f32	s15, s10
 80148ca:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
 80148ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d2:	bf88      	it	hi
 80148d4:	eef0 5a45 	vmovhi.f32	s11, s10
 80148d8:	ee36 6a05 	vadd.f32	s12, s12, s10
 80148dc:	ed93 5a00 	vldr	s10, [r3]
 80148e0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80148e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148e8:	eef4 5ac5 	vcmpe.f32	s11, s10
 80148ec:	bfb8      	it	lt
 80148ee:	eef0 7a45 	vmovlt.f32	s15, s10
 80148f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148f6:	bf88      	it	hi
 80148f8:	eef0 5a45 	vmovhi.f32	s11, s10
 80148fc:	2a05      	cmp	r2, #5
 80148fe:	ee36 6a05 	vadd.f32	s12, s12, s10
 8014902:	d065      	beq.n	80149d0 <iNemoEngine_API_Update+0x2058>
 8014904:	f500 63fb 	add.w	r3, r0, #2008	; 0x7d8
 8014908:	ed93 5a00 	vldr	s10, [r3]
 801490c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014914:	eef4 5ac5 	vcmpe.f32	s11, s10
 8014918:	bfb8      	it	lt
 801491a:	eef0 7a45 	vmovlt.f32	s15, s10
 801491e:	f200 73e4 	addw	r3, r0, #2020	; 0x7e4
 8014922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014926:	bf88      	it	hi
 8014928:	eef0 5a45 	vmovhi.f32	s11, s10
 801492c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8014930:	ed93 5a00 	vldr	s10, [r3]
 8014934:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801493c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8014940:	bfb8      	it	lt
 8014942:	eef0 7a45 	vmovlt.f32	s15, s10
 8014946:	f500 63fe 	add.w	r3, r0, #2032	; 0x7f0
 801494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801494e:	bf88      	it	hi
 8014950:	eef0 5a45 	vmovhi.f32	s11, s10
 8014954:	ee36 6a05 	vadd.f32	s12, s12, s10
 8014958:	ed93 5a00 	vldr	s10, [r3]
 801495c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014964:	eef4 5ac5 	vcmpe.f32	s11, s10
 8014968:	bfb8      	it	lt
 801496a:	eef0 7a45 	vmovlt.f32	s15, s10
 801496e:	f200 73fc 	addw	r3, r0, #2044	; 0x7fc
 8014972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014976:	bf88      	it	hi
 8014978:	eef0 5a45 	vmovhi.f32	s11, s10
 801497c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8014980:	ed93 5a00 	vldr	s10, [r3]
 8014984:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801498c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8014990:	bfb8      	it	lt
 8014992:	eef0 7a45 	vmovlt.f32	s15, s10
 8014996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801499a:	bf88      	it	hi
 801499c:	eef0 5a45 	vmovhi.f32	s11, s10
 80149a0:	2a0a      	cmp	r2, #10
 80149a2:	ee36 6a05 	vadd.f32	s12, s12, s10
 80149a6:	d113      	bne.n	80149d0 <iNemoEngine_API_Update+0x2058>
 80149a8:	f600 0308 	addw	r3, r0, #2056	; 0x808
 80149ac:	ed93 5a00 	vldr	s10, [r3]
 80149b0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80149b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b8:	eef4 5ac5 	vcmpe.f32	s11, s10
 80149bc:	bfb8      	it	lt
 80149be:	eef0 7a45 	vmovlt.f32	s15, s10
 80149c2:	ee36 6a05 	vadd.f32	s12, s12, s10
 80149c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ca:	bf88      	it	hi
 80149cc:	eef0 5a45 	vmovhi.f32	s11, s10
 80149d0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80149d4:	eddf 5a7f 	vldr	s11, [pc, #508]	; 8014bd4 <iNemoEngine_API_Update+0x225c>
 80149d8:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 8014bd8 <iNemoEngine_API_Update+0x2260>
 80149dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149e0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80149e4:	eef4 7ae5 	vcmpe.f32	s15, s11
 80149e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ec:	f300 80fc 	bgt.w	8014be8 <iNemoEngine_API_Update+0x2270>
 80149f0:	eef0 7ac6 	vabs.f32	s15, s12
 80149f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149f8:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8014bdc <iNemoEngine_API_Update+0x2264>
 80149fc:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a04:	f300 80f0 	bgt.w	8014be8 <iNemoEngine_API_Update+0x2270>
 8014a08:	9806      	ldr	r0, [sp, #24]
 8014a0a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8014a0c:	ed93 5a00 	vldr	s10, [r3]
 8014a10:	f200 73ac 	addw	r3, r0, #1964	; 0x7ac
 8014a14:	edd3 4a00 	vldr	s9, [r3]
 8014a18:	f500 63f7 	add.w	r3, r0, #1976	; 0x7b8
 8014a1c:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8014a20:	ed93 6a00 	vldr	s12, [r3]
 8014a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a28:	bfb4      	ite	lt
 8014a2a:	eef0 7a64 	vmovlt.f32	s15, s9
 8014a2e:	eef0 7a45 	vmovge.f32	s15, s10
 8014a32:	bf8c      	ite	hi
 8014a34:	eef0 5a64 	vmovhi.f32	s11, s9
 8014a38:	eef0 5a45 	vmovls.f32	s11, s10
 8014a3c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8014a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a44:	ee35 5a24 	vadd.f32	s10, s10, s9
 8014a48:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8014a4c:	bfa8      	it	ge
 8014a4e:	eef0 7a46 	vmovge.f32	s15, s12
 8014a52:	f200 73c4 	addw	r3, r0, #1988	; 0x7c4
 8014a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a5a:	bf98      	it	ls
 8014a5c:	eef0 5a46 	vmovls.f32	s11, s12
 8014a60:	ee76 4a05 	vadd.f32	s9, s12, s10
 8014a64:	ed93 6a00 	vldr	s12, [r3]
 8014a68:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8014a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a70:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8014a74:	bfa8      	it	ge
 8014a76:	eef0 7a46 	vmovge.f32	s15, s12
 8014a7a:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
 8014a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a82:	bf8c      	ite	hi
 8014a84:	eeb0 5a65 	vmovhi.f32	s10, s11
 8014a88:	eeb0 5a46 	vmovls.f32	s10, s12
 8014a8c:	edd3 5a00 	vldr	s11, [r3]
 8014a90:	eef4 5ae7 	vcmpe.f32	s11, s15
 8014a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a98:	ee36 6a24 	vadd.f32	s12, s12, s9
 8014a9c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8014aa0:	bfa8      	it	ge
 8014aa2:	eef0 7a65 	vmovge.f32	s15, s11
 8014aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aaa:	ee35 6a86 	vadd.f32	s12, s11, s12
 8014aae:	bf88      	it	hi
 8014ab0:	eef0 5a45 	vmovhi.f32	s11, s10
 8014ab4:	2a05      	cmp	r2, #5
 8014ab6:	d065      	beq.n	8014b84 <iNemoEngine_API_Update+0x220c>
 8014ab8:	f200 73dc 	addw	r3, r0, #2012	; 0x7dc
 8014abc:	ed93 5a00 	vldr	s10, [r3]
 8014ac0:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8014ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ac8:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8014acc:	bfa8      	it	ge
 8014ace:	eef0 7a45 	vmovge.f32	s15, s10
 8014ad2:	f500 63fd 	add.w	r3, r0, #2024	; 0x7e8
 8014ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ada:	bf98      	it	ls
 8014adc:	eef0 5a45 	vmovls.f32	s11, s10
 8014ae0:	ee35 5a06 	vadd.f32	s10, s10, s12
 8014ae4:	ed93 6a00 	vldr	s12, [r3]
 8014ae8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8014aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014af0:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8014af4:	bfa8      	it	ge
 8014af6:	eef0 7a46 	vmovge.f32	s15, s12
 8014afa:	f200 73f4 	addw	r3, r0, #2036	; 0x7f4
 8014afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b02:	bf98      	it	ls
 8014b04:	eef0 5a46 	vmovls.f32	s11, s12
 8014b08:	ee36 5a05 	vadd.f32	s10, s12, s10
 8014b0c:	ed93 6a00 	vldr	s12, [r3]
 8014b10:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8014b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b18:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8014b1c:	bfa8      	it	ge
 8014b1e:	eef0 7a46 	vmovge.f32	s15, s12
 8014b22:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8014b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b2a:	bf98      	it	ls
 8014b2c:	eef0 5a46 	vmovls.f32	s11, s12
 8014b30:	ee36 6a05 	vadd.f32	s12, s12, s10
 8014b34:	ed93 5a00 	vldr	s10, [r3]
 8014b38:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8014b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b40:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8014b44:	bfa8      	it	ge
 8014b46:	eef0 7a45 	vmovge.f32	s15, s10
 8014b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b4e:	bf98      	it	ls
 8014b50:	eef0 5a45 	vmovls.f32	s11, s10
 8014b54:	2a0a      	cmp	r2, #10
 8014b56:	ee35 6a06 	vadd.f32	s12, s10, s12
 8014b5a:	d113      	bne.n	8014b84 <iNemoEngine_API_Update+0x220c>
 8014b5c:	f600 030c 	addw	r3, r0, #2060	; 0x80c
 8014b60:	ed93 5a00 	vldr	s10, [r3]
 8014b64:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b6c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8014b70:	bfb8      	it	lt
 8014b72:	eef0 7a45 	vmovlt.f32	s15, s10
 8014b76:	ee36 6a05 	vadd.f32	s12, s12, s10
 8014b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b7e:	bf88      	it	hi
 8014b80:	eef0 5a45 	vmovhi.f32	s11, s10
 8014b84:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014b88:	eddf 5a12 	vldr	s11, [pc, #72]	; 8014bd4 <iNemoEngine_API_Update+0x225c>
 8014b8c:	ed9f 5a12 	vldr	s10, [pc, #72]	; 8014bd8 <iNemoEngine_API_Update+0x2260>
 8014b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014b94:	ee26 6a05 	vmul.f32	s12, s12, s10
 8014b98:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba0:	dc22      	bgt.n	8014be8 <iNemoEngine_API_Update+0x2270>
 8014ba2:	eef0 7ac6 	vabs.f32	s15, s12
 8014ba6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014baa:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8014bdc <iNemoEngine_API_Update+0x2264>
 8014bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bb6:	dc17      	bgt.n	8014be8 <iNemoEngine_API_Update+0x2270>
 8014bb8:	9b06      	ldr	r3, [sp, #24]
 8014bba:	795b      	ldrb	r3, [r3, #5]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	f002 8117 	beq.w	8016df0 <iNemoEngine_API_Update+0x4478>
 8014bc2:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8014bc6:	2a01      	cmp	r2, #1
 8014bc8:	f001 87d1 	beq.w	8016b6e <iNemoEngine_API_Update+0x41f6>
 8014bcc:	f04f 0901 	mov.w	r9, #1
 8014bd0:	f000 bc0b 	b.w	80153ea <iNemoEngine_API_Update+0x2a72>
 8014bd4:	3be56041 	.word	0x3be56041
 8014bd8:	3dcccccd 	.word	0x3dcccccd
 8014bdc:	3e333333 	.word	0x3e333333
 8014be0:	42480000 	.word	0x42480000
 8014be4:	00000000 	.word	0x00000000
 8014be8:	9b06      	ldr	r3, [sp, #24]
 8014bea:	795b      	ldrb	r3, [r3, #5]
 8014bec:	f04f 0900 	mov.w	r9, #0
 8014bf0:	f8ad 90ee 	strh.w	r9, [sp, #238]	; 0xee
 8014bf4:	f88d 90f0 	strb.w	r9, [sp, #240]	; 0xf0
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	f040 83f1 	bne.w	80153e0 <iNemoEngine_API_Update+0x2a68>
 8014bfe:	9906      	ldr	r1, [sp, #24]
 8014c00:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 8014c04:	9295      	str	r2, [sp, #596]	; 0x254
 8014c06:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 8014c0a:	9296      	str	r2, [sp, #600]	; 0x258
 8014c0c:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 8014c10:	9297      	str	r2, [sp, #604]	; 0x25c
 8014c12:	2200      	movs	r2, #0
 8014c14:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014c18:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8014c1c:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8014c20:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8014c24:	704a      	strb	r2, [r1, #1]
 8014c26:	ed5f 7a12 	vldr	s15, [pc, #-72]	; 8014be0 <iNemoEngine_API_Update+0x2268>
 8014c2a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c32:	f2c0 8138 	blt.w	8014ea6 <iNemoEngine_API_Update+0x252e>
 8014c36:	9906      	ldr	r1, [sp, #24]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8014c3e:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8014c42:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 8014c46:	2b01      	cmp	r3, #1
 8014c48:	d125      	bne.n	8014c96 <iNemoEngine_API_Update+0x231e>
 8014c4a:	eddd 4a86 	vldr	s9, [sp, #536]	; 0x218
 8014c4e:	ed9d 6a5f 	vldr	s12, [sp, #380]	; 0x17c
 8014c52:	ed9d 5a87 	vldr	s10, [sp, #540]	; 0x21c
 8014c56:	ed9d 7a60 	vldr	s14, [sp, #384]	; 0x180
 8014c5a:	eddd 5a88 	vldr	s11, [sp, #544]	; 0x220
 8014c5e:	eddd 7a61 	vldr	s15, [sp, #388]	; 0x184
 8014c62:	eeb6 4a08 	vmov.f32	s8, #104	; 0x3f400000  0.750
 8014c66:	ee64 4a84 	vmul.f32	s9, s9, s8
 8014c6a:	ee36 6a06 	vadd.f32	s12, s12, s12
 8014c6e:	ee25 5a04 	vmul.f32	s10, s10, s8
 8014c72:	ee37 7a07 	vadd.f32	s14, s14, s14
 8014c76:	ee65 5a84 	vmul.f32	s11, s11, s8
 8014c7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014c7e:	edcd 4a86 	vstr	s9, [sp, #536]	; 0x218
 8014c82:	ed8d 6a5f 	vstr	s12, [sp, #380]	; 0x17c
 8014c86:	ed8d 5a87 	vstr	s10, [sp, #540]	; 0x21c
 8014c8a:	ed8d 7a60 	vstr	s14, [sp, #384]	; 0x180
 8014c8e:	edcd 5a88 	vstr	s11, [sp, #544]	; 0x220
 8014c92:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 8014c96:	9c06      	ldr	r4, [sp, #24]
 8014c98:	ed9d 6a60 	vldr	s12, [sp, #384]	; 0x180
 8014c9c:	ed94 2a7f 	vldr	s4, [r4, #508]	; 0x1fc
 8014ca0:	edd4 1a75 	vldr	s3, [r4, #468]	; 0x1d4
 8014ca4:	edd4 2a89 	vldr	s5, [r4, #548]	; 0x224
 8014ca8:	edd4 3a93 	vldr	s7, [r4, #588]	; 0x24c
 8014cac:	eddd 0a5f 	vldr	s1, [sp, #380]	; 0x17c
 8014cb0:	ed9d 1a61 	vldr	s2, [sp, #388]	; 0x184
 8014cb4:	ed94 4a9d 	vldr	s8, [r4, #628]	; 0x274
 8014cb8:	edd4 4aa7 	vldr	s9, [r4, #668]	; 0x29c
 8014cbc:	ed94 5ab1 	vldr	s10, [r4, #708]	; 0x2c4
 8014cc0:	ed9d 3a8b 	vldr	s6, [sp, #556]	; 0x22c
 8014cc4:	ed9d 7a89 	vldr	s14, [sp, #548]	; 0x224
 8014cc8:	eddd 7a8a 	vldr	s15, [sp, #552]	; 0x228
 8014ccc:	edd4 5abb 	vldr	s11, [r4, #748]	; 0x2ec
 8014cd0:	eea6 2a06 	vfma.f32	s4, s12, s12
 8014cd4:	ab83      	add	r3, sp, #524	; 0x20c
 8014cd6:	aa8f      	add	r2, sp, #572	; 0x23c
 8014cd8:	ed9d 6a62 	vldr	s12, [sp, #392]	; 0x188
 8014cdc:	ed84 2a7f 	vstr	s4, [r4, #508]	; 0x1fc
 8014ce0:	eee0 1aa0 	vfma.f32	s3, s1, s1
 8014ce4:	a93a      	add	r1, sp, #232	; 0xe8
 8014ce6:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
 8014cea:	eee1 2a01 	vfma.f32	s5, s2, s2
 8014cee:	eee6 3a06 	vfma.f32	s7, s12, s12
 8014cf2:	eddd 0a63 	vldr	s1, [sp, #396]	; 0x18c
 8014cf6:	ed9d 1a64 	vldr	s2, [sp, #400]	; 0x190
 8014cfa:	ed9d 6a65 	vldr	s12, [sp, #404]	; 0x194
 8014cfe:	edc4 1a75 	vstr	s3, [r4, #468]	; 0x1d4
 8014d02:	eea0 4aa0 	vfma.f32	s8, s1, s1
 8014d06:	eee1 4a01 	vfma.f32	s9, s2, s2
 8014d0a:	eea6 5a06 	vfma.f32	s10, s12, s12
 8014d0e:	eddd 0a66 	vldr	s1, [sp, #408]	; 0x198
 8014d12:	ed9d 1a67 	vldr	s2, [sp, #412]	; 0x19c
 8014d16:	ed94 6ac5 	vldr	s12, [r4, #788]	; 0x314
 8014d1a:	edc4 2a89 	vstr	s5, [r4, #548]	; 0x224
 8014d1e:	eee0 5aa0 	vfma.f32	s11, s1, s1
 8014d22:	eea1 6a01 	vfma.f32	s12, s2, s2
 8014d26:	ee26 7a87 	vmul.f32	s14, s13, s14
 8014d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014d2e:	ee66 6a83 	vmul.f32	s13, s13, s6
 8014d32:	ee27 7a28 	vmul.f32	s14, s14, s17
 8014d36:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014d3a:	ee66 8aa8 	vmul.f32	s17, s13, s17
 8014d3e:	ed8d 7a89 	vstr	s14, [sp, #548]	; 0x224
 8014d42:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 8014d46:	edc4 3a93 	vstr	s7, [r4, #588]	; 0x24c
 8014d4a:	ed84 4a9d 	vstr	s8, [r4, #628]	; 0x274
 8014d4e:	edc4 4aa7 	vstr	s9, [r4, #668]	; 0x29c
 8014d52:	ed84 5ab1 	vstr	s10, [r4, #708]	; 0x2c4
 8014d56:	edcd 8a8b 	vstr	s17, [sp, #556]	; 0x22c
 8014d5a:	edc4 5abb 	vstr	s11, [r4, #748]	; 0x2ec
 8014d5e:	ed84 6ac5 	vstr	s12, [r4, #788]	; 0x314
 8014d62:	9300      	str	r3, [sp, #0]
 8014d64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d66:	f7fc fb1d 	bl	80113a4 <kf_update>
 8014d6a:	edd4 6a6d 	vldr	s13, [r4, #436]	; 0x1b4
 8014d6e:	ed94 6a6c 	vldr	s12, [r4, #432]	; 0x1b0
 8014d72:	ed94 7a6e 	vldr	s14, [r4, #440]	; 0x1b8
 8014d76:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8014d7a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014d7e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8014d82:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014d86:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d8e:	f100 80bb 	bmi.w	8014f08 <iNemoEngine_API_Update+0x2590>
 8014d92:	ed5f 5a6c 	vldr	s11, [pc, #-432]	; 8014be4 <iNemoEngine_API_Update+0x226c>
 8014d96:	ed8d 6a52 	vstr	s12, [sp, #328]	; 0x148
 8014d9a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8014d9e:	aa4e      	add	r2, sp, #312	; 0x138
 8014da0:	a8ae      	add	r0, sp, #696	; 0x2b8
 8014da2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8014da6:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8014daa:	4611      	mov	r1, r2
 8014dac:	ae68      	add	r6, sp, #416	; 0x1a0
 8014dae:	af70      	add	r7, sp, #448	; 0x1c0
 8014db0:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 8014db4:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8014db8:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 8014dbc:	ee27 6a86 	vmul.f32	s12, s15, s12
 8014dc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014dc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014dc8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014dcc:	edcd 5a55 	vstr	s11, [sp, #340]	; 0x154
 8014dd0:	ed8d 6aae 	vstr	s12, [sp, #696]	; 0x2b8
 8014dd4:	edcd 6aaf 	vstr	s13, [sp, #700]	; 0x2bc
 8014dd8:	ed8d 7ab0 	vstr	s14, [sp, #704]	; 0x2c0
 8014ddc:	edcd 7ab1 	vstr	s15, [sp, #708]	; 0x2c4
 8014de0:	f7fc f920 	bl	8011024 <qmult>
 8014de4:	ed92 6a01 	vldr	s12, [r2, #4]
 8014de8:	edd2 5a00 	vldr	s11, [r2]
 8014dec:	edd2 6a02 	vldr	s13, [r2, #8]
 8014df0:	ed92 7a03 	vldr	s14, [r2, #12]
 8014df4:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8014df6:	ee66 7a06 	vmul.f32	s15, s12, s12
 8014dfa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8014dfe:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8014e02:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014e06:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014e0a:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8014e0e:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8014e12:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014e16:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014e1a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014e22:	edcd 5a4a 	vstr	s11, [sp, #296]	; 0x128
 8014e26:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 8014e2a:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 8014e2e:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
 8014e32:	4634      	mov	r4, r6
 8014e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e36:	42bc      	cmp	r4, r7
 8014e38:	f105 0510 	add.w	r5, r5, #16
 8014e3c:	f106 0610 	add.w	r6, r6, #16
 8014e40:	f845 0c10 	str.w	r0, [r5, #-16]
 8014e44:	f845 1c0c 	str.w	r1, [r5, #-12]
 8014e48:	f845 2c08 	str.w	r2, [r5, #-8]
 8014e4c:	f845 3c04 	str.w	r3, [r5, #-4]
 8014e50:	d1ef      	bne.n	8014e32 <iNemoEngine_API_Update+0x24ba>
 8014e52:	6830      	ldr	r0, [r6, #0]
 8014e54:	6028      	str	r0, [r5, #0]
 8014e56:	9e06      	ldr	r6, [sp, #24]
 8014e58:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8014e5a:	f8d6 31bc 	ldr.w	r3, [r6, #444]	; 0x1bc
 8014e5e:	6013      	str	r3, [r2, #0]
 8014e60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014e62:	f8d6 31c0 	ldr.w	r3, [r6, #448]	; 0x1c0
 8014e66:	6013      	str	r3, [r2, #0]
 8014e68:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8014e6a:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8014e6e:	6013      	str	r3, [r2, #0]
 8014e70:	ad4a      	add	r5, sp, #296	; 0x128
 8014e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e74:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8014e76:	60eb      	str	r3, [r5, #12]
 8014e78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014e7a:	6028      	str	r0, [r5, #0]
 8014e7c:	6069      	str	r1, [r5, #4]
 8014e7e:	60aa      	str	r2, [r5, #8]
 8014e80:	edd6 9a75 	vldr	s19, [r6, #468]	; 0x1d4
 8014e84:	edc3 5a00 	vstr	s11, [r3]
 8014e88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014e8a:	f8d6 794c 	ldr.w	r7, [r6, #2380]	; 0x94c
 8014e8e:	ed83 6a00 	vstr	s12, [r3]
 8014e92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014e94:	edc3 6a00 	vstr	s13, [r3]
 8014e98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014e9a:	accc      	add	r4, sp, #816	; 0x330
 8014e9c:	ed83 7a00 	vstr	s14, [r3]
 8014ea0:	4635      	mov	r5, r6
 8014ea2:	f7fd be20 	b.w	8012ae6 <iNemoEngine_API_Update+0x16e>
 8014ea6:	9906      	ldr	r1, [sp, #24]
 8014ea8:	f891 21a2 	ldrb.w	r2, [r1, #418]	; 0x1a2
 8014eac:	2a31      	cmp	r2, #49	; 0x31
 8014eae:	f63f aeca 	bhi.w	8014c46 <iNemoEngine_API_Update+0x22ce>
 8014eb2:	3201      	adds	r2, #1
 8014eb4:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 8014eb8:	2200      	movs	r2, #0
 8014eba:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8014ebe:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8014ec2:	e6c0      	b.n	8014c46 <iNemoEngine_API_Update+0x22ce>
 8014ec4:	9a06      	ldr	r2, [sp, #24]
 8014ec6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	f340 8398 	ble.w	80155fe <iNemoEngine_API_Update+0x2c86>
 8014ece:	3b01      	subs	r3, #1
 8014ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 8014ed8:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8014edc:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8014ee0:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8014ee4:	f7ff bb8b 	b.w	80145fe <iNemoEngine_API_Update+0x1c86>
 8014ee8:	7b53      	ldrb	r3, [r2, #13]
 8014eea:	7b92      	ldrb	r2, [r2, #14]
 8014eec:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 8014ef0:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 8014ef4:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8014ef8:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 8014efc:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 8014f00:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 8014f04:	f7ff bb07 	b.w	8014516 <iNemoEngine_API_Update+0x1b9e>
 8014f08:	ee35 5ae7 	vsub.f32	s10, s11, s15
 8014f0c:	eef1 5ac5 	vsqrt.f32	s11, s10
 8014f10:	e741      	b.n	8014d96 <iNemoEngine_API_Update+0x241e>
 8014f12:	f9b5 3974 	ldrsh.w	r3, [r5, #2420]	; 0x974
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	f341 8173 	ble.w	8016202 <iNemoEngine_API_Update+0x388a>
 8014f1c:	3b01      	subs	r3, #1
 8014f1e:	f8a5 3974 	strh.w	r3, [r5, #2420]	; 0x974
 8014f22:	f7fd bd51 	b.w	80129c8 <iNemoEngine_API_Update+0x50>
 8014f26:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014f2a:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014f2e:	eea7 6a07 	vfma.f32	s12, s14, s14
 8014f32:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014f36:	eeb0 8a67 	vmov.f32	s16, s15
 8014f3a:	eef0 7a46 	vmov.f32	s15, s12
 8014f3e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8014f42:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8014f46:	ee17 0a90 	vmov	r0, s15
 8014f4a:	f7eb fb07 	bl	800055c <__aeabi_f2d>
 8014f4e:	ee78 7a08 	vadd.f32	s15, s16, s16
 8014f52:	4602      	mov	r2, r0
 8014f54:	460b      	mov	r3, r1
 8014f56:	ee17 0a90 	vmov	r0, s15
 8014f5a:	ec43 2b18 	vmov	d8, r2, r3
 8014f5e:	f7eb fafd 	bl	800055c <__aeabi_f2d>
 8014f62:	eeb0 1a48 	vmov.f32	s2, s16
 8014f66:	eef0 1a68 	vmov.f32	s3, s17
 8014f6a:	ec41 0b10 	vmov	d0, r0, r1
 8014f6e:	f006 ffa5 	bl	801bebc <atan2>
 8014f72:	a3eb      	add	r3, pc, #940	; (adr r3, 8015320 <iNemoEngine_API_Update+0x29a8>)
 8014f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f78:	ec51 0b10 	vmov	r0, r1, d0
 8014f7c:	f7eb fb46 	bl	800060c <__aeabi_dmul>
 8014f80:	4be9      	ldr	r3, [pc, #932]	; (8015328 <iNemoEngine_API_Update+0x29b0>)
 8014f82:	2200      	movs	r2, #0
 8014f84:	f7eb f98c 	bl	80002a0 <__adddf3>
 8014f88:	f7eb fe38 	bl	8000bfc <__aeabi_d2f>
 8014f8c:	ee08 0a10 	vmov	s16, r0
 8014f90:	f7fd be3a 	b.w	8012c08 <iNemoEngine_API_Update+0x290>
 8014f94:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014f98:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014f9c:	eea7 6a07 	vfma.f32	s12, s14, s14
 8014fa0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014fa4:	eeb0 8a67 	vmov.f32	s16, s15
 8014fa8:	eef0 7a46 	vmov.f32	s15, s12
 8014fac:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8014fb0:	eee8 7ae8 	vfms.f32	s15, s17, s17
 8014fb4:	ee17 0a90 	vmov	r0, s15
 8014fb8:	f7eb fad0 	bl	800055c <__aeabi_f2d>
 8014fbc:	ee78 7a08 	vadd.f32	s15, s16, s16
 8014fc0:	4602      	mov	r2, r0
 8014fc2:	460b      	mov	r3, r1
 8014fc4:	ee17 0a90 	vmov	r0, s15
 8014fc8:	ec43 2b18 	vmov	d8, r2, r3
 8014fcc:	f7eb fac6 	bl	800055c <__aeabi_f2d>
 8014fd0:	eeb0 1a48 	vmov.f32	s2, s16
 8014fd4:	eef0 1a68 	vmov.f32	s3, s17
 8014fd8:	ec41 0b10 	vmov	d0, r0, r1
 8014fdc:	f006 ff6e 	bl	801bebc <atan2>
 8014fe0:	a3cf      	add	r3, pc, #828	; (adr r3, 8015320 <iNemoEngine_API_Update+0x29a8>)
 8014fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe6:	ec51 0b10 	vmov	r0, r1, d0
 8014fea:	f7eb fb0f 	bl	800060c <__aeabi_dmul>
 8014fee:	4bce      	ldr	r3, [pc, #824]	; (8015328 <iNemoEngine_API_Update+0x29b0>)
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	f7eb f953 	bl	800029c <__aeabi_dsub>
 8014ff6:	f7eb fe01 	bl	8000bfc <__aeabi_d2f>
 8014ffa:	ee08 0a10 	vmov	s16, r0
 8014ffe:	f7fd be03 	b.w	8012c08 <iNemoEngine_API_Update+0x290>
 8015002:	ed9f baca 	vldr	s22, [pc, #808]	; 801532c <iNemoEngine_API_Update+0x29b4>
 8015006:	49ca      	ldr	r1, [pc, #808]	; (8015330 <iNemoEngine_API_Update+0x29b8>)
 8015008:	9806      	ldr	r0, [sp, #24]
 801500a:	f7fd beba 	b.w	8012d82 <iNemoEngine_API_Update+0x40a>
 801500e:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8015012:	ee17 0a90 	vmov	r0, s15
 8015016:	f7eb faa1 	bl	800055c <__aeabi_f2d>
 801501a:	ec41 0b10 	vmov	d0, r0, r1
 801501e:	f007 ff17 	bl	801ce50 <floor>
 8015022:	ec51 0b10 	vmov	r0, r1, d0
 8015026:	f7eb fde9 	bl	8000bfc <__aeabi_d2f>
 801502a:	ee0c 0a10 	vmov	s24, r0
 801502e:	f7fe b937 	b.w	80132a0 <iNemoEngine_API_Update+0x928>
 8015032:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015036:	ee17 0a90 	vmov	r0, s15
 801503a:	f7eb fa8f 	bl	800055c <__aeabi_f2d>
 801503e:	ec41 0b10 	vmov	d0, r0, r1
 8015042:	f007 ff05 	bl	801ce50 <floor>
 8015046:	ec51 0b10 	vmov	r0, r1, d0
 801504a:	f7eb fdd7 	bl	8000bfc <__aeabi_d2f>
 801504e:	ee08 0a10 	vmov	s16, r0
 8015052:	f7fe b8fa 	b.w	801324a <iNemoEngine_API_Update+0x8d2>
 8015056:	ee78 7aa7 	vadd.f32	s15, s17, s15
 801505a:	ee17 0a90 	vmov	r0, s15
 801505e:	f7eb fa7d 	bl	800055c <__aeabi_f2d>
 8015062:	ec41 0b10 	vmov	d0, r0, r1
 8015066:	f007 fef3 	bl	801ce50 <floor>
 801506a:	ec51 0b10 	vmov	r0, r1, d0
 801506e:	f7eb fdc5 	bl	8000bfc <__aeabi_d2f>
 8015072:	ee08 0a90 	vmov	s17, r0
 8015076:	f7fe b8bd 	b.w	80131f4 <iNemoEngine_API_Update+0x87c>
 801507a:	2c00      	cmp	r4, #0
 801507c:	f47f aa59 	bne.w	8014532 <iNemoEngine_API_Update+0x1bba>
 8015080:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
 8015084:	f88d 40ea 	strb.w	r4, [sp, #234]	; 0xea
 8015088:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 801508c:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 8015090:	f7ff ba5c 	b.w	801454c <iNemoEngine_API_Update+0x1bd4>
 8015094:	eddf 5aa7 	vldr	s11, [pc, #668]	; 8015334 <iNemoEngine_API_Update+0x29bc>
 8015098:	ed9f 4aa7 	vldr	s8, [pc, #668]	; 8015338 <iNemoEngine_API_Update+0x29c0>
 801509c:	ed9f 6aa7 	vldr	s12, [pc, #668]	; 801533c <iNemoEngine_API_Update+0x29c4>
 80150a0:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8015340 <iNemoEngine_API_Update+0x29c8>
 80150a4:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8015344 <iNemoEngine_API_Update+0x29cc>
 80150a8:	f7ff b9b2 	b.w	8014410 <iNemoEngine_API_Update+0x1a98>
 80150ac:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 80150b0:	2400      	movs	r4, #0
 80150b2:	461a      	mov	r2, r3
 80150b4:	f7ff b89f 	b.w	80141f6 <iNemoEngine_API_Update+0x187e>
 80150b8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80150bc:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 80150c0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80150c4:	eee7 4a84 	vfma.f32	s9, s15, s8
 80150c8:	f7ff b86b 	b.w	80141a2 <iNemoEngine_API_Update+0x182a>
 80150cc:	3305      	adds	r3, #5
 80150ce:	6593      	str	r3, [r2, #88]	; 0x58
 80150d0:	f7ff ba95 	b.w	80145fe <iNemoEngine_API_Update+0x1c86>
 80150d4:	edd2 4a48 	vldr	s9, [r2, #288]	; 0x120
 80150d8:	eef4 4ae8 	vcmpe.f32	s9, s17
 80150dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150e0:	f341 8112 	ble.w	8016308 <iNemoEngine_API_Update+0x3990>
 80150e4:	ed92 7a32 	vldr	s14, [r2, #200]	; 0xc8
 80150e8:	eef4 8ac7 	vcmpe.f32	s17, s14
 80150ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150f0:	4613      	mov	r3, r2
 80150f2:	f101 8392 	bmi.w	801681a <iNemoEngine_API_Update+0x3ea2>
 80150f6:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 80150fa:	eef4 8ae7 	vcmpe.f32	s17, s15
 80150fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015102:	f141 83a2 	bpl.w	801684a <iNemoEngine_API_Update+0x3ed2>
 8015106:	edd3 3a33 	vldr	s7, [r3, #204]	; 0xcc
 801510a:	ed93 4a35 	vldr	s8, [r3, #212]	; 0xd4
 801510e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015112:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015116:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801511a:	ee24 7a07 	vmul.f32	s14, s8, s14
 801511e:	ee87 fa27 	vdiv.f32	s30, s14, s15
 8015122:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015126:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 801512a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801512e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015132:	f2c1 83a3 	blt.w	801687c <iNemoEngine_API_Update+0x3f04>
 8015136:	9b06      	ldr	r3, [sp, #24]
 8015138:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 801513c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8015140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015144:	f141 86ad 	bpl.w	8016ea2 <iNemoEngine_API_Update+0x452a>
 8015148:	edd3 3a37 	vldr	s7, [r3, #220]	; 0xdc
 801514c:	ed93 4a39 	vldr	s8, [r3, #228]	; 0xe4
 8015150:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015154:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015158:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801515c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8015160:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8015164:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015168:	9b06      	ldr	r3, [sp, #24]
 801516a:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 801516e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015176:	f2c1 83a3 	blt.w	80168c0 <iNemoEngine_API_Update+0x3f48>
 801517a:	9b06      	ldr	r3, [sp, #24]
 801517c:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8015180:	eef4 8ac7 	vcmpe.f32	s17, s14
 8015184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015188:	f141 86ca 	bpl.w	8016f20 <iNemoEngine_API_Update+0x45a8>
 801518c:	edd3 3a3b 	vldr	s7, [r3, #236]	; 0xec
 8015190:	ed93 4a3d 	vldr	s8, [r3, #244]	; 0xf4
 8015194:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015198:	ee34 4a63 	vsub.f32	s8, s8, s7
 801519c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80151a0:	ee64 7a27 	vmul.f32	s15, s8, s15
 80151a4:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80151a8:	ee3f fa23 	vadd.f32	s30, s30, s7
 80151ac:	9b06      	ldr	r3, [sp, #24]
 80151ae:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 80151b2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80151b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ba:	f2c1 83a3 	blt.w	8016904 <iNemoEngine_API_Update+0x3f8c>
 80151be:	9b06      	ldr	r3, [sp, #24]
 80151c0:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 80151c4:	eef4 8ac7 	vcmpe.f32	s17, s14
 80151c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151cc:	f141 866c 	bpl.w	8016ea8 <iNemoEngine_API_Update+0x4530>
 80151d0:	edd3 3a3f 	vldr	s7, [r3, #252]	; 0xfc
 80151d4:	ed93 4a41 	vldr	s8, [r3, #260]	; 0x104
 80151d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80151dc:	ee34 4a63 	vsub.f32	s8, s8, s7
 80151e0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80151e4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80151e8:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80151ec:	ee3f fa23 	vadd.f32	s30, s30, s7
 80151f0:	9b06      	ldr	r3, [sp, #24]
 80151f2:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80151f6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80151fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151fe:	f2c1 83a3 	blt.w	8016948 <iNemoEngine_API_Update+0x3fd0>
 8015202:	9b06      	ldr	r3, [sp, #24]
 8015204:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 8015208:	eef4 8ac7 	vcmpe.f32	s17, s14
 801520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015210:	f141 863c 	bpl.w	8016e8c <iNemoEngine_API_Update+0x4514>
 8015214:	edd3 3a43 	vldr	s7, [r3, #268]	; 0x10c
 8015218:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 801521c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015220:	ee34 4a63 	vsub.f32	s8, s8, s7
 8015224:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015228:	ee64 7a27 	vmul.f32	s15, s8, s15
 801522c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8015230:	ee3f fa23 	vadd.f32	s30, s30, s7
 8015234:	9b06      	ldr	r3, [sp, #24]
 8015236:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 801523a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015242:	f6fe ae38 	blt.w	8013eb6 <iNemoEngine_API_Update+0x153e>
 8015246:	9b06      	ldr	r3, [sp, #24]
 8015248:	ed93 4a47 	vldr	s8, [r3, #284]	; 0x11c
 801524c:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8015250:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8015254:	ee37 7a44 	vsub.f32	s14, s14, s8
 8015258:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801525c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015260:	ee87 faa4 	vdiv.f32	s30, s15, s9
 8015264:	ee3f fa04 	vadd.f32	s30, s30, s8
 8015268:	f7fe be25 	b.w	8013eb6 <iNemoEngine_API_Update+0x153e>
 801526c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8015270:	ee17 0a90 	vmov	r0, s15
 8015274:	f7eb f972 	bl	800055c <__aeabi_f2d>
 8015278:	ec41 0b10 	vmov	d0, r0, r1
 801527c:	f007 fde8 	bl	801ce50 <floor>
 8015280:	ec51 0b10 	vmov	r0, r1, d0
 8015284:	f7eb fcba 	bl	8000bfc <__aeabi_d2f>
 8015288:	ee08 0a90 	vmov	s17, r0
 801528c:	f7fe b930 	b.w	80134f0 <iNemoEngine_API_Update+0xb78>
 8015290:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8015294:	ee17 0a90 	vmov	r0, s15
 8015298:	f7eb f960 	bl	800055c <__aeabi_f2d>
 801529c:	ec41 0b10 	vmov	d0, r0, r1
 80152a0:	f007 fdd6 	bl	801ce50 <floor>
 80152a4:	ec51 0b10 	vmov	r0, r1, d0
 80152a8:	f7eb fca8 	bl	8000bfc <__aeabi_d2f>
 80152ac:	ee08 0a90 	vmov	s17, r0
 80152b0:	f7fe b8b5 	b.w	801341e <iNemoEngine_API_Update+0xaa6>
 80152b4:	ee7c 7a27 	vadd.f32	s15, s24, s15
 80152b8:	ee17 0a90 	vmov	r0, s15
 80152bc:	f7eb f94e 	bl	800055c <__aeabi_f2d>
 80152c0:	ec41 0b10 	vmov	d0, r0, r1
 80152c4:	f007 fdc4 	bl	801ce50 <floor>
 80152c8:	ec51 0b10 	vmov	r0, r1, d0
 80152cc:	f7eb fc96 	bl	8000bfc <__aeabi_d2f>
 80152d0:	ee0c 0a10 	vmov	s24, r0
 80152d4:	f7fe b878 	b.w	80133c8 <iNemoEngine_API_Update+0xa50>
 80152d8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80152dc:	ee17 0a90 	vmov	r0, s15
 80152e0:	f7eb f93c 	bl	800055c <__aeabi_f2d>
 80152e4:	ec41 0b10 	vmov	d0, r0, r1
 80152e8:	f007 fdb2 	bl	801ce50 <floor>
 80152ec:	ec51 0b10 	vmov	r0, r1, d0
 80152f0:	f7eb fc84 	bl	8000bfc <__aeabi_d2f>
 80152f4:	ee08 0a10 	vmov	s16, r0
 80152f8:	f7fe b83b 	b.w	8013372 <iNemoEngine_API_Update+0x9fa>
 80152fc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8015300:	ee17 0a90 	vmov	r0, s15
 8015304:	f7eb f92a 	bl	800055c <__aeabi_f2d>
 8015308:	ec41 0b10 	vmov	d0, r0, r1
 801530c:	f007 fda0 	bl	801ce50 <floor>
 8015310:	ec51 0b10 	vmov	r0, r1, d0
 8015314:	f7eb fc72 	bl	8000bfc <__aeabi_d2f>
 8015318:	ee08 0a10 	vmov	s16, r0
 801531c:	f7fe b93e 	b.w	801359c <iNemoEngine_API_Update+0xc24>
 8015320:	20000000 	.word	0x20000000
 8015324:	404ca5dc 	.word	0x404ca5dc
 8015328:	40568000 	.word	0x40568000
 801532c:	3dcccccd 	.word	0x3dcccccd
 8015330:	3a83126f 	.word	0x3a83126f
 8015334:	3c75c28f 	.word	0x3c75c28f
 8015338:	391d4951 	.word	0x391d4951
 801533c:	383cbe62 	.word	0x383cbe62
 8015340:	469c3e00 	.word	0x469c3e00
 8015344:	43168000 	.word	0x43168000
 8015348:	3d088889 	.word	0x3d088889
 801534c:	3e4ccccd 	.word	0x3e4ccccd
 8015350:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8015354:	ee17 0a90 	vmov	r0, s15
 8015358:	f7eb f900 	bl	800055c <__aeabi_f2d>
 801535c:	ec41 0b10 	vmov	d0, r0, r1
 8015360:	f007 fd76 	bl	801ce50 <floor>
 8015364:	ec51 0b10 	vmov	r0, r1, d0
 8015368:	f7eb fc48 	bl	8000bfc <__aeabi_d2f>
 801536c:	ee0c 0a10 	vmov	s24, r0
 8015370:	f7fe b8e9 	b.w	8013546 <iNemoEngine_API_Update+0xbce>
 8015374:	2a00      	cmp	r2, #0
 8015376:	f43f a910 	beq.w	801459a <iNemoEngine_API_Update+0x1c22>
 801537a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801537e:	ee39 9a47 	vsub.f32	s18, s18, s14
 8015382:	eef0 7ac9 	vabs.f32	s15, s18
 8015386:	ee29 9a09 	vmul.f32	s18, s18, s18
 801538a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801538e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015392:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8015396:	bfb8      	it	lt
 8015398:	eef0 7a46 	vmovlt.f32	s15, s12
 801539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a0:	edcd 7a8d 	vstr	s15, [sp, #564]	; 0x234
 80153a4:	f77f a900 	ble.w	80145a8 <iNemoEngine_API_Update+0x1c30>
 80153a8:	eddd 7a86 	vldr	s15, [sp, #536]	; 0x218
 80153ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80153b0:	eeb4 9ac7 	vcmpe.f32	s18, s14
 80153b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153b8:	f77f a8f6 	ble.w	80145a8 <iNemoEngine_API_Update+0x1c30>
 80153bc:	ee67 7a89 	vmul.f32	s15, s15, s18
 80153c0:	edcd 7a86 	vstr	s15, [sp, #536]	; 0x218
 80153c4:	eddd 7a87 	vldr	s15, [sp, #540]	; 0x21c
 80153c8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80153cc:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 80153d0:	eddd 7a88 	vldr	s15, [sp, #544]	; 0x220
 80153d4:	ee27 9a89 	vmul.f32	s18, s15, s18
 80153d8:	ed8d 9a88 	vstr	s18, [sp, #544]	; 0x220
 80153dc:	f7ff b8e4 	b.w	80145a8 <iNemoEngine_API_Update+0x1c30>
 80153e0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80153e4:	2a01      	cmp	r2, #1
 80153e6:	f000 877b 	beq.w	80162e0 <iNemoEngine_API_Update+0x3968>
 80153ea:	2b02      	cmp	r3, #2
 80153ec:	f040 8778 	bne.w	80162e0 <iNemoEngine_API_Update+0x3968>
 80153f0:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80153f4:	9a06      	ldr	r2, [sp, #24]
 80153f6:	ee87 7a8d 	vdiv.f32	s14, s15, s26
 80153fa:	f240 1301 	movw	r3, #257	; 0x101
 80153fe:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
 8015402:	2301      	movs	r3, #1
 8015404:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 8015408:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 801540c:	ed92 6a64 	vldr	s12, [r2, #400]	; 0x190
 8015410:	ed8d 7a3d 	vstr	s14, [sp, #244]	; 0xf4
 8015414:	eecb 5a27 	vdiv.f32	s11, s22, s15
 8015418:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 801541c:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 8015420:	eecd 7aa7 	vdiv.f32	s15, s27, s15
 8015424:	eeb4 5a00 	vmov.f32	s10, #64	; 0x3e000000  0.125
 8015428:	ee26 6a05 	vmul.f32	s12, s12, s10
 801542c:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8015430:	eeb4 6ae8 	vcmpe.f32	s12, s17
 8015434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015438:	f280 87d8 	bge.w	80163ec <iNemoEngine_API_Update+0x3a74>
 801543c:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
 8015440:	eeb4 dac6 	vcmpe.f32	s26, s12
 8015444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015448:	f341 83a4 	ble.w	8016b94 <iNemoEngine_API_Update+0x421c>
 801544c:	ed9d 6a16 	vldr	s12, [sp, #88]	; 0x58
 8015450:	eeb4 6acb 	vcmpe.f32	s12, s22
 8015454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015458:	f341 839c 	ble.w	8016b94 <iNemoEngine_API_Update+0x421c>
 801545c:	ed9d 6a17 	vldr	s12, [sp, #92]	; 0x5c
 8015460:	eeb4 6aed 	vcmpe.f32	s12, s27
 8015464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015468:	f341 8394 	ble.w	8016b94 <iNemoEngine_API_Update+0x421c>
 801546c:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 8015470:	eeb4 8ac6 	vcmpe.f32	s16, s12
 8015474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015478:	f141 838c 	bpl.w	8016b94 <iNemoEngine_API_Update+0x421c>
 801547c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015480:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8015484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015488:	eef4 7ac6 	vcmpe.f32	s15, s12
 801548c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015490:	f141 8380 	bpl.w	8016b94 <iNemoEngine_API_Update+0x421c>
 8015494:	2300      	movs	r3, #0
 8015496:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 801549a:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 801549e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80154a2:	2a00      	cmp	r2, #0
 80154a4:	f040 87c7 	bne.w	8016436 <iNemoEngine_API_Update+0x3abe>
 80154a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80154aa:	a840      	add	r0, sp, #256	; 0x100
 80154ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80154b0:	4613      	mov	r3, r2
 80154b2:	edd2 7a00 	vldr	s15, [r2]
 80154b6:	3101      	adds	r1, #1
 80154b8:	330c      	adds	r3, #12
 80154ba:	3204      	adds	r2, #4
 80154bc:	461c      	mov	r4, r3
 80154be:	ed94 7a00 	vldr	s14, [r4]
 80154c2:	330c      	adds	r3, #12
 80154c4:	4598      	cmp	r8, r3
 80154c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80154ca:	d1f7      	bne.n	80154bc <iNemoEngine_API_Update+0x2b44>
 80154cc:	2902      	cmp	r1, #2
 80154ce:	ece0 7a01 	vstmia	r0!, {s15}
 80154d2:	f108 0804 	add.w	r8, r8, #4
 80154d6:	d1eb      	bne.n	80154b0 <iNemoEngine_API_Update+0x2b38>
 80154d8:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 8015348 <iNemoEngine_API_Update+0x29d0>
 80154dc:	9b06      	ldr	r3, [sp, #24]
 80154de:	eddd 4a40 	vldr	s9, [sp, #256]	; 0x100
 80154e2:	ed9d 5a41 	vldr	s10, [sp, #260]	; 0x104
 80154e6:	eddd 5a42 	vldr	s11, [sp, #264]	; 0x108
 80154ea:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80154ec:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 80154f0:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80154f4:	ee25 5a27 	vmul.f32	s10, s10, s15
 80154f8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80154fc:	f503 71b2 	add.w	r1, r3, #356	; 0x164
 8015500:	4602      	mov	r2, r0
 8015502:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 8015506:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 801550a:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 801550e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015516:	f103 030c 	add.w	r3, r3, #12
 801551a:	bf88      	it	hi
 801551c:	eef0 7a47 	vmovhi.f32	s15, s14
 8015520:	4293      	cmp	r3, r2
 8015522:	d1f2      	bne.n	801550a <iNemoEngine_API_Update+0x2b92>
 8015524:	1d1a      	adds	r2, r3, #4
 8015526:	4291      	cmp	r1, r2
 8015528:	ece4 7a01 	vstmia	r4!, {s15}
 801552c:	d1e9      	bne.n	8015502 <iNemoEngine_API_Update+0x2b8a>
 801552e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015530:	ed9d 4a3d 	vldr	s8, [sp, #244]	; 0xf4
 8015534:	edd3 7a00 	vldr	s15, [r3]
 8015538:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 801553c:	ed9d 6a3f 	vldr	s12, [sp, #252]	; 0xfc
 8015540:	9b06      	ldr	r3, [sp, #24]
 8015542:	ee97 4aa4 	vfnms.f32	s8, s15, s9
 8015546:	785b      	ldrb	r3, [r3, #1]
 8015548:	ee97 7a85 	vfnms.f32	s14, s15, s10
 801554c:	ee97 6aa5 	vfnms.f32	s12, s15, s11
 8015550:	eef0 4a47 	vmov.f32	s9, s14
 8015554:	ed8d 4a40 	vstr	s8, [sp, #256]	; 0x100
 8015558:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 801555c:	ed8d 6a42 	vstr	s12, [sp, #264]	; 0x108
 8015560:	b13b      	cbz	r3, 8015572 <iNemoEngine_API_Update+0x2bfa>
 8015562:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8015566:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801556a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801556e:	f101 83e1 	bmi.w	8016d34 <iNemoEngine_API_Update+0x43bc>
 8015572:	9b06      	ldr	r3, [sp, #24]
 8015574:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
 8015578:	2a1e      	cmp	r2, #30
 801557a:	f001 843c 	beq.w	8016df6 <iNemoEngine_API_Update+0x447e>
 801557e:	1c53      	adds	r3, r2, #1
 8015580:	2aff      	cmp	r2, #255	; 0xff
 8015582:	9906      	ldr	r1, [sp, #24]
 8015584:	bf14      	ite	ne
 8015586:	b2db      	uxtbne	r3, r3
 8015588:	23ff      	moveq	r3, #255	; 0xff
 801558a:	2200      	movs	r2, #0
 801558c:	f881 31a1 	strb.w	r3, [r1, #417]	; 0x1a1
 8015590:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8015594:	464b      	mov	r3, r9
 8015596:	f7ff bb46 	b.w	8014c26 <iNemoEngine_API_Update+0x22ae>
 801559a:	ed1f 7a94 	vldr	s14, [pc, #-592]	; 801534c <iNemoEngine_API_Update+0x29d4>
 801559e:	4603      	mov	r3, r0
 80155a0:	f7fd bc03 	b.w	8012daa <iNemoEngine_API_Update+0x432>
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	f43e afe0 	beq.w	801456a <iNemoEngine_API_Update+0x1bf2>
 80155aa:	f89d 30e8 	ldrb.w	r3, [sp, #232]	; 0xe8
 80155ae:	2b01      	cmp	r3, #1
 80155b0:	d002      	beq.n	80155b8 <iNemoEngine_API_Update+0x2c40>
 80155b2:	2c01      	cmp	r4, #1
 80155b4:	f47e afe2 	bne.w	801457c <iNemoEngine_API_Update+0x1c04>
 80155b8:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 80155bc:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80155c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155c4:	bfb8      	it	lt
 80155c6:	eeb0 5a67 	vmovlt.f32	s10, s15
 80155ca:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 80155ce:	ed8d 5a84 	vstr	s10, [sp, #528]	; 0x210
 80155d2:	ed8d 5a85 	vstr	s10, [sp, #532]	; 0x214
 80155d6:	f7fe bfd1 	b.w	801457c <iNemoEngine_API_Update+0x1c04>
 80155da:	9b06      	ldr	r3, [sp, #24]
 80155dc:	49c6      	ldr	r1, [pc, #792]	; (80158f8 <iNemoEngine_API_Update+0x2f80>)
 80155de:	ed93 ba05 	vldr	s22, [r3, #20]
 80155e2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80155e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7fd bbc9 	b.w	8012d82 <iNemoEngine_API_Update+0x40a>
 80155f0:	9b06      	ldr	r3, [sp, #24]
 80155f2:	49c2      	ldr	r1, [pc, #776]	; (80158fc <iNemoEngine_API_Update+0x2f84>)
 80155f4:	ed93 ba05 	vldr	s22, [r3, #20]
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7fd bbc2 	b.w	8012d82 <iNemoEngine_API_Update+0x40a>
 80155fe:	4611      	mov	r1, r2
 8015600:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8015602:	2a00      	cmp	r2, #0
 8015604:	dd0c      	ble.n	8015620 <iNemoEngine_API_Update+0x2ca8>
 8015606:	ed9d 7a03 	vldr	s14, [sp, #12]
 801560a:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 801560e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015616:	dd03      	ble.n	8015620 <iNemoEngine_API_Update+0x2ca8>
 8015618:	3a01      	subs	r2, #1
 801561a:	65ca      	str	r2, [r1, #92]	; 0x5c
 801561c:	f7fe bfef 	b.w	80145fe <iNemoEngine_API_Update+0x1c86>
 8015620:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8015624:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8015628:	ee27 7a27 	vmul.f32	s14, s14, s15
 801562c:	eeb4 bac7 	vcmpe.f32	s22, s14
 8015630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015634:	f57e afe3 	bpl.w	80145fe <iNemoEngine_API_Update+0x1c86>
 8015638:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 801563c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015640:	eef4 dae7 	vcmpe.f32	s27, s15
 8015644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015648:	f57e afd9 	bpl.w	80145fe <iNemoEngine_API_Update+0x1c86>
 801564c:	ee7d 7a0d 	vadd.f32	s15, s26, s26
 8015650:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 8015654:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801565c:	f341 8492 	ble.w	8016f84 <iNemoEngine_API_Update+0x460c>
 8015660:	9a06      	ldr	r2, [sp, #24]
 8015662:	3303      	adds	r3, #3
 8015664:	e434      	b.n	8014ed0 <iNemoEngine_API_Update+0x2558>
 8015666:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8015900 <iNemoEngine_API_Update+0x2f88>
 801566a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801566e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015672:	f57e ae7b 	bpl.w	801436c <iNemoEngine_API_Update+0x19f4>
 8015676:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8015904 <iNemoEngine_API_Update+0x2f8c>
 801567a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801567e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015682:	f280 80c9 	bge.w	8015818 <iNemoEngine_API_Update+0x2ea0>
 8015686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801568a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8015908 <iNemoEngine_API_Update+0x2f90>
 801568e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015696:	f280 80d5 	bge.w	8015844 <iNemoEngine_API_Update+0x2ecc>
 801569a:	eddf 6a9c 	vldr	s13, [pc, #624]	; 801590c <iNemoEngine_API_Update+0x2f94>
 801569e:	eef4 7ae6 	vcmpe.f32	s15, s13
 80156a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156a6:	f280 80e3 	bge.w	8015870 <iNemoEngine_API_Update+0x2ef8>
 80156aa:	eddf 6a99 	vldr	s13, [pc, #612]	; 8015910 <iNemoEngine_API_Update+0x2f98>
 80156ae:	eef4 7ae6 	vcmpe.f32	s15, s13
 80156b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156b6:	f280 80f1 	bge.w	801589c <iNemoEngine_API_Update+0x2f24>
 80156ba:	eddf 6a96 	vldr	s13, [pc, #600]	; 8015914 <iNemoEngine_API_Update+0x2f9c>
 80156be:	eef4 7ae6 	vcmpe.f32	s15, s13
 80156c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c6:	f280 80ff 	bge.w	80158c8 <iNemoEngine_API_Update+0x2f50>
 80156ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80156ce:	eef4 7ae6 	vcmpe.f32	s15, s13
 80156d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156d6:	db0d      	blt.n	80156f4 <iNemoEngine_API_Update+0x2d7c>
 80156d8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80156dc:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8015918 <iNemoEngine_API_Update+0x2fa0>
 80156e0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80156e4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80156e8:	ee66 6a87 	vmul.f32	s13, s13, s14
 80156ec:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801591c <iNemoEngine_API_Update+0x2fa4>
 80156f0:	eea6 7a86 	vfma.f32	s14, s13, s12
 80156f4:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8015920 <iNemoEngine_API_Update+0x2fa8>
 80156f8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80156fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015700:	f141 82fa 	bpl.w	8016cf8 <iNemoEngine_API_Update+0x4380>
 8015704:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8015900 <iNemoEngine_API_Update+0x2f88>
 8015708:	eef4 7ae6 	vcmpe.f32	s15, s13
 801570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015710:	f2c1 82fa 	blt.w	8016d08 <iNemoEngine_API_Update+0x4390>
 8015714:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8015904 <iNemoEngine_API_Update+0x2f8c>
 8015718:	eef4 7ae6 	vcmpe.f32	s15, s13
 801571c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015720:	f141 8296 	bpl.w	8016c50 <iNemoEngine_API_Update+0x42d8>
 8015724:	ed9f 6a76 	vldr	s12, [pc, #472]	; 8015900 <iNemoEngine_API_Update+0x2f88>
 8015728:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8015924 <iNemoEngine_API_Update+0x2fac>
 801572c:	eddf 5a7e 	vldr	s11, [pc, #504]	; 8015928 <iNemoEngine_API_Update+0x2fb0>
 8015730:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8015734:	ee26 6a26 	vmul.f32	s12, s12, s13
 8015738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801573c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8015740:	ed9f 6a71 	vldr	s12, [pc, #452]	; 8015908 <iNemoEngine_API_Update+0x2f90>
 8015744:	eef4 7ac6 	vcmpe.f32	s15, s12
 8015748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801574c:	f2c1 8296 	blt.w	8016c7c <iNemoEngine_API_Update+0x4304>
 8015750:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801590c <iNemoEngine_API_Update+0x2f94>
 8015754:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801575c:	f141 8296 	bpl.w	8016c8c <iNemoEngine_API_Update+0x4314>
 8015760:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8015908 <iNemoEngine_API_Update+0x2f90>
 8015764:	eddf 6a71 	vldr	s13, [pc, #452]	; 801592c <iNemoEngine_API_Update+0x2fb4>
 8015768:	eddf 5a71 	vldr	s11, [pc, #452]	; 8015930 <iNemoEngine_API_Update+0x2fb8>
 801576c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8015770:	ee26 6a26 	vmul.f32	s12, s12, s13
 8015774:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8015934 <iNemoEngine_API_Update+0x2fbc>
 8015778:	eee6 6a25 	vfma.f32	s13, s12, s11
 801577c:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8015910 <iNemoEngine_API_Update+0x2f98>
 8015780:	eef4 7ac6 	vcmpe.f32	s15, s12
 8015784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015788:	f2c1 8296 	blt.w	8016cb8 <iNemoEngine_API_Update+0x4340>
 801578c:	eddf 6a61 	vldr	s13, [pc, #388]	; 8015914 <iNemoEngine_API_Update+0x2f9c>
 8015790:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015798:	f141 8296 	bpl.w	8016cc8 <iNemoEngine_API_Update+0x4350>
 801579c:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8015910 <iNemoEngine_API_Update+0x2f98>
 80157a0:	eddf 6a65 	vldr	s13, [pc, #404]	; 8015938 <iNemoEngine_API_Update+0x2fc0>
 80157a4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80157a8:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 80157ac:	ee26 6a26 	vmul.f32	s12, s12, s13
 80157b0:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 80157b4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80157b8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80157bc:	eef4 7ac6 	vcmpe.f32	s15, s12
 80157c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157c4:	db0d      	blt.n	80157e2 <iNemoEngine_API_Update+0x2e6a>
 80157c6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80157ca:	eddf 6a5c 	vldr	s13, [pc, #368]	; 801593c <iNemoEngine_API_Update+0x2fc4>
 80157ce:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80157d2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80157d6:	ee26 6a26 	vmul.f32	s12, s12, s13
 80157da:	eddf 6a59 	vldr	s13, [pc, #356]	; 8015940 <iNemoEngine_API_Update+0x2fc8>
 80157de:	eee6 6a25 	vfma.f32	s13, s12, s11
 80157e2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80157e6:	ee37 6a06 	vadd.f32	s12, s14, s12
 80157ea:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80157ee:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80157f2:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8015904 <iNemoEngine_API_Update+0x2f8c>
 80157f6:	ed9f 4a42 	vldr	s8, [pc, #264]	; 8015900 <iNemoEngine_API_Update+0x2f88>
 80157fa:	eef4 5ac6 	vcmpe.f32	s11, s12
 80157fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015802:	bfb8      	it	lt
 8015804:	eef0 5a46 	vmovlt.f32	s11, s12
 8015808:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8015944 <iNemoEngine_API_Update+0x2fcc>
 801580c:	ee25 4a84 	vmul.f32	s8, s11, s8
 8015810:	ee25 6a86 	vmul.f32	s12, s11, s12
 8015814:	f7fe bdfc 	b.w	8014410 <iNemoEngine_API_Update+0x1a98>
 8015818:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8015908 <iNemoEngine_API_Update+0x2f90>
 801581c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015824:	d50e      	bpl.n	8015844 <iNemoEngine_API_Update+0x2ecc>
 8015826:	eddf 6a37 	vldr	s13, [pc, #220]	; 8015904 <iNemoEngine_API_Update+0x2f8c>
 801582a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8015948 <iNemoEngine_API_Update+0x2fd0>
 801582e:	ed9f 6a47 	vldr	s12, [pc, #284]	; 801594c <iNemoEngine_API_Update+0x2fd4>
 8015832:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8015836:	ee66 6a87 	vmul.f32	s13, s13, s14
 801583a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8015950 <iNemoEngine_API_Update+0x2fd8>
 801583e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8015842:	e72a      	b.n	801569a <iNemoEngine_API_Update+0x2d22>
 8015844:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801590c <iNemoEngine_API_Update+0x2f94>
 8015848:	eef4 7ac7 	vcmpe.f32	s15, s14
 801584c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015850:	d50e      	bpl.n	8015870 <iNemoEngine_API_Update+0x2ef8>
 8015852:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8015908 <iNemoEngine_API_Update+0x2f90>
 8015856:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8015930 <iNemoEngine_API_Update+0x2fb8>
 801585a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801585e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8015862:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015866:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801586a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801586e:	e71c      	b.n	80156aa <iNemoEngine_API_Update+0x2d32>
 8015870:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8015910 <iNemoEngine_API_Update+0x2f98>
 8015874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801587c:	d50e      	bpl.n	801589c <iNemoEngine_API_Update+0x2f24>
 801587e:	eddf 6a23 	vldr	s13, [pc, #140]	; 801590c <iNemoEngine_API_Update+0x2f94>
 8015882:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8015886:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801588a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801588e:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8015892:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8015896:	eea6 7a86 	vfma.f32	s14, s13, s12
 801589a:	e70e      	b.n	80156ba <iNemoEngine_API_Update+0x2d42>
 801589c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8015914 <iNemoEngine_API_Update+0x2f9c>
 80158a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80158a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158a8:	d50e      	bpl.n	80158c8 <iNemoEngine_API_Update+0x2f50>
 80158aa:	eddf 6a19 	vldr	s13, [pc, #100]	; 8015910 <iNemoEngine_API_Update+0x2f98>
 80158ae:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8015954 <iNemoEngine_API_Update+0x2fdc>
 80158b2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80158b6:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80158ba:	ee66 6a87 	vmul.f32	s13, s13, s14
 80158be:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80158c2:	eea6 7a86 	vfma.f32	s14, s13, s12
 80158c6:	e700      	b.n	80156ca <iNemoEngine_API_Update+0x2d52>
 80158c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80158cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80158d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158d4:	f57f af00 	bpl.w	80156d8 <iNemoEngine_API_Update+0x2d60>
 80158d8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8015914 <iNemoEngine_API_Update+0x2f9c>
 80158dc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8015958 <iNemoEngine_API_Update+0x2fe0>
 80158e0:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801595c <iNemoEngine_API_Update+0x2fe4>
 80158e4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80158e8:	ee66 6a87 	vmul.f32	s13, s13, s14
 80158ec:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8015960 <iNemoEngine_API_Update+0x2fe8>
 80158f0:	eea6 7a86 	vfma.f32	s14, s13, s12
 80158f4:	e6fe      	b.n	80156f4 <iNemoEngine_API_Update+0x2d7c>
 80158f6:	bf00      	nop
 80158f8:	3727c5ac 	.word	0x3727c5ac
 80158fc:	3ac49ba6 	.word	0x3ac49ba6
 8015900:	3c23d70a 	.word	0x3c23d70a
 8015904:	3c75c28f 	.word	0x3c75c28f
 8015908:	3cf5c28f 	.word	0x3cf5c28f
 801590c:	3d4ccccd 	.word	0x3d4ccccd
 8015910:	3dcccccd 	.word	0x3dcccccd
 8015914:	3e4ccccd 	.word	0x3e4ccccd
 8015918:	46979000 	.word	0x46979000
 801591c:	4415c000 	.word	0x4415c000
 8015920:	3ba3d70a 	.word	0x3ba3d70a
 8015924:	3d4cccc0 	.word	0x3d4cccc0
 8015928:	43480000 	.word	0x43480000
 801592c:	3eb33334 	.word	0x3eb33334
 8015930:	4247ffff 	.word	0x4247ffff
 8015934:	3f933333 	.word	0x3f933333
 8015938:	410c0000 	.word	0x410c0000
 801593c:	42c80000 	.word	0x42c80000
 8015940:	424a0000 	.word	0x424a0000
 8015944:	3b449ba6 	.word	0x3b449ba6
 8015948:	3ecccccc 	.word	0x3ecccccc
 801594c:	42855556 	.word	0x42855556
 8015950:	3fcccccd 	.word	0x3fcccccd
 8015954:	42d40000 	.word	0x42d40000
 8015958:	43f00000 	.word	0x43f00000
 801595c:	40555555 	.word	0x40555555
 8015960:	42ee0000 	.word	0x42ee0000
 8015964:	4615      	mov	r5, r2
 8015966:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 801596a:	49d7      	ldr	r1, [pc, #860]	; (8015cc8 <iNemoEngine_API_Update+0x3350>)
 801596c:	4ad7      	ldr	r2, [pc, #860]	; (8015ccc <iNemoEngine_API_Update+0x3354>)
 801596e:	4bd8      	ldr	r3, [pc, #864]	; (8015cd0 <iNemoEngine_API_Update+0x3358>)
 8015970:	2000      	movs	r0, #0
 8015972:	f885 0318 	strb.w	r0, [r5, #792]	; 0x318
 8015976:	f205 6824 	addw	r8, r5, #1572	; 0x624
 801597a:	6039      	str	r1, [r7, #0]
 801597c:	f205 7194 	addw	r1, r5, #1940	; 0x794
 8015980:	f8c8 2000 	str.w	r2, [r8]
 8015984:	600b      	str	r3, [r1, #0]
 8015986:	f895 64b1 	ldrb.w	r6, [r5, #1201]	; 0x4b1
 801598a:	911b      	str	r1, [sp, #108]	; 0x6c
 801598c:	2e00      	cmp	r6, #0
 801598e:	f001 8297 	beq.w	8016ec0 <iNemoEngine_API_Update+0x4548>
 8015992:	eddf 7ad0 	vldr	s15, [pc, #832]	; 8015cd4 <iNemoEngine_API_Update+0x335c>
 8015996:	ee68 faa7 	vmul.f32	s31, s17, s15
 801599a:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 801599e:	ee28 fa27 	vmul.f32	s30, s16, s15
 80159a2:	ee6c da27 	vmul.f32	s27, s24, s15
 80159a6:	ee7f 7acb 	vsub.f32	s15, s31, s22
 80159aa:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80159ae:	ee17 0a90 	vmov	r0, s15
 80159b2:	f7ea fdd3 	bl	800055c <__aeabi_f2d>
 80159b6:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 80159ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80159be:	ee17 0a90 	vmov	r0, s15
 80159c2:	f7ea fdcb 	bl	800055c <__aeabi_f2d>
 80159c6:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 80159ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80159ce:	ee17 0a90 	vmov	r0, s15
 80159d2:	f7ea fdc3 	bl	800055c <__aeabi_f2d>
 80159d6:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 80159da:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80159de:	ee17 0a90 	vmov	r0, s15
 80159e2:	f7ea fdbb 	bl	800055c <__aeabi_f2d>
 80159e6:	ee7d 7acb 	vsub.f32	s15, s27, s22
 80159ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80159ee:	ee17 0a90 	vmov	r0, s15
 80159f2:	f7ea fdb3 	bl	800055c <__aeabi_f2d>
 80159f6:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 80159fa:	4602      	mov	r2, r0
 80159fc:	460b      	mov	r3, r1
 80159fe:	ee17 0a90 	vmov	r0, s15
 8015a02:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8015a06:	f7ea fda9 	bl	800055c <__aeabi_f2d>
 8015a0a:	9b06      	ldr	r3, [sp, #24]
 8015a0c:	ed9f bab8 	vldr	s22, [pc, #736]	; 8015cf0 <iNemoEngine_API_Update+0x3378>
 8015a10:	eef0 7aef 	vabs.f32	s15, s31
 8015a14:	edcd 7a03 	vstr	s15, [sp, #12]
 8015a18:	eef0 7acf 	vabs.f32	s15, s30
 8015a1c:	f503 6597 	add.w	r5, r3, #1208	; 0x4b8
 8015a20:	edcd 7a04 	vstr	s15, [sp, #16]
 8015a24:	230c      	movs	r3, #12
 8015a26:	eef0 7aed 	vabs.f32	s15, s27
 8015a2a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8015a2e:	fb13 5606 	smlabb	r6, r3, r6, r5
 8015a32:	edcd 7a05 	vstr	s15, [sp, #20]
 8015a36:	46aa      	mov	sl, r5
 8015a38:	e060      	b.n	8015afc <iNemoEngine_API_Update+0x3184>
 8015a3a:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8015cd8 <iNemoEngine_API_Update+0x3360>
 8015a3e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a46:	f280 8162 	bge.w	8015d0e <iNemoEngine_API_Update+0x3396>
 8015a4a:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8015cdc <iNemoEngine_API_Update+0x3364>
 8015a4e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a56:	f300 816c 	bgt.w	8015d32 <iNemoEngine_API_Update+0x33ba>
 8015a5a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8015a5e:	f007 f977 	bl	801cd50 <ceil>
 8015a62:	ec51 0b10 	vmov	r0, r1, d0
 8015a66:	f7eb f8c9 	bl	8000bfc <__aeabi_d2f>
 8015a6a:	eddd 7a04 	vldr	s15, [sp, #16]
 8015a6e:	f8ca 0000 	str.w	r0, [sl]
 8015a72:	eef4 7acb 	vcmpe.f32	s15, s22
 8015a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a7a:	f140 8121 	bpl.w	8015cc0 <iNemoEngine_API_Update+0x3348>
 8015a7e:	eddf 7a96 	vldr	s15, [pc, #600]	; 8015cd8 <iNemoEngine_API_Update+0x3360>
 8015a82:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a8a:	f280 8137 	bge.w	8015cfc <iNemoEngine_API_Update+0x3384>
 8015a8e:	eddf 7a93 	vldr	s15, [pc, #588]	; 8015cdc <iNemoEngine_API_Update+0x3364>
 8015a92:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a9a:	f300 8257 	bgt.w	8015f4c <iNemoEngine_API_Update+0x35d4>
 8015a9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 8015aa2:	f007 f955 	bl	801cd50 <ceil>
 8015aa6:	ec51 0b10 	vmov	r0, r1, d0
 8015aaa:	f7eb f8a7 	bl	8000bfc <__aeabi_d2f>
 8015aae:	eddd 7a05 	vldr	s15, [sp, #20]
 8015ab2:	f8ca 0004 	str.w	r0, [sl, #4]
 8015ab6:	eef4 7acb 	vcmpe.f32	s15, s22
 8015aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015abe:	d527      	bpl.n	8015b10 <iNemoEngine_API_Update+0x3198>
 8015ac0:	eddf 7a85 	vldr	s15, [pc, #532]	; 8015cd8 <iNemoEngine_API_Update+0x3360>
 8015ac4:	eeb4 cae7 	vcmpe.f32	s24, s15
 8015ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015acc:	f280 8128 	bge.w	8015d20 <iNemoEngine_API_Update+0x33a8>
 8015ad0:	eddf 7a82 	vldr	s15, [pc, #520]	; 8015cdc <iNemoEngine_API_Update+0x3364>
 8015ad4:	eeb4 cae7 	vcmpe.f32	s24, s15
 8015ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015adc:	f300 812b 	bgt.w	8015d36 <iNemoEngine_API_Update+0x33be>
 8015ae0:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8015ae4:	f007 f934 	bl	801cd50 <ceil>
 8015ae8:	ec51 0b10 	vmov	r0, r1, d0
 8015aec:	f7eb f886 	bl	8000bfc <__aeabi_d2f>
 8015af0:	f8ca 0008 	str.w	r0, [sl, #8]
 8015af4:	f10a 0a0c 	add.w	sl, sl, #12
 8015af8:	45b2      	cmp	sl, r6
 8015afa:	d011      	beq.n	8015b20 <iNemoEngine_API_Update+0x31a8>
 8015afc:	eddd 7a03 	vldr	s15, [sp, #12]
 8015b00:	eef4 7acb 	vcmpe.f32	s15, s22
 8015b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b08:	d497      	bmi.n	8015a3a <iNemoEngine_API_Update+0x30c2>
 8015b0a:	ee1f 0a90 	vmov	r0, s31
 8015b0e:	e7ac      	b.n	8015a6a <iNemoEngine_API_Update+0x30f2>
 8015b10:	ee1d 0a90 	vmov	r0, s27
 8015b14:	f10a 0a0c 	add.w	sl, sl, #12
 8015b18:	f84a 0c04 	str.w	r0, [sl, #-4]
 8015b1c:	45b2      	cmp	sl, r6
 8015b1e:	d1ed      	bne.n	8015afc <iNemoEngine_API_Update+0x3184>
 8015b20:	9b06      	ldr	r3, [sp, #24]
 8015b22:	f893 9621 	ldrb.w	r9, [r3, #1569]	; 0x621
 8015b26:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 8015b2a:	f1b9 0f00 	cmp.w	r9, #0
 8015b2e:	f000 8114 	beq.w	8015d5a <iNemoEngine_API_Update+0x33e2>
 8015b32:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8015ce0 <iNemoEngine_API_Update+0x3368>
 8015b36:	ee6a faa7 	vmul.f32	s31, s21, s15
 8015b3a:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 8015b3e:	ee2a fa27 	vmul.f32	s30, s20, s15
 8015b42:	ee69 daa7 	vmul.f32	s27, s19, s15
 8015b46:	ee7f 7acb 	vsub.f32	s15, s31, s22
 8015b4a:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8015b4e:	ee17 0a90 	vmov	r0, s15
 8015b52:	f7ea fd03 	bl	800055c <__aeabi_f2d>
 8015b56:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 8015b5a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015b5e:	ee17 0a90 	vmov	r0, s15
 8015b62:	f7ea fcfb 	bl	800055c <__aeabi_f2d>
 8015b66:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 8015b6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015b6e:	ee17 0a90 	vmov	r0, s15
 8015b72:	f7ea fcf3 	bl	800055c <__aeabi_f2d>
 8015b76:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 8015b7a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015b7e:	ee17 0a90 	vmov	r0, s15
 8015b82:	f7ea fceb 	bl	800055c <__aeabi_f2d>
 8015b86:	ee7d 7acb 	vsub.f32	s15, s27, s22
 8015b8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015b8e:	ee17 0a90 	vmov	r0, s15
 8015b92:	f7ea fce3 	bl	800055c <__aeabi_f2d>
 8015b96:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 8015b9a:	4602      	mov	r2, r0
 8015b9c:	460b      	mov	r3, r1
 8015b9e:	ee17 0a90 	vmov	r0, s15
 8015ba2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8015ba6:	f7ea fcd9 	bl	800055c <__aeabi_f2d>
 8015baa:	eef0 7aef 	vabs.f32	s15, s31
 8015bae:	9b06      	ldr	r3, [sp, #24]
 8015bb0:	edcd 7a03 	vstr	s15, [sp, #12]
 8015bb4:	eef0 7acf 	vabs.f32	s15, s30
 8015bb8:	edcd 7a04 	vstr	s15, [sp, #16]
 8015bbc:	eef0 7aed 	vabs.f32	s15, s27
 8015bc0:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 8015bc4:	edcd 7a05 	vstr	s15, [sp, #20]
 8015bc8:	230c      	movs	r3, #12
 8015bca:	eef0 7a6c 	vmov.f32	s15, s25
 8015bce:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8015bd2:	eef0 ca48 	vmov.f32	s25, s16
 8015bd6:	ed9f ba46 	vldr	s22, [pc, #280]	; 8015cf0 <iNemoEngine_API_Update+0x3378>
 8015bda:	eeb0 8a4d 	vmov.f32	s16, s26
 8015bde:	fb13 6909 	smlabb	r9, r3, r9, r6
 8015be2:	46b3      	mov	fp, r6
 8015be4:	eeb0 da67 	vmov.f32	s26, s15
 8015be8:	e060      	b.n	8015cac <iNemoEngine_API_Update+0x3334>
 8015bea:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8015ce4 <iNemoEngine_API_Update+0x336c>
 8015bee:	eef4 aae7 	vcmpe.f32	s21, s15
 8015bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bf6:	f280 8197 	bge.w	8015f28 <iNemoEngine_API_Update+0x35b0>
 8015bfa:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8015ce8 <iNemoEngine_API_Update+0x3370>
 8015bfe:	eef4 aae7 	vcmpe.f32	s21, s15
 8015c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c06:	f300 81a3 	bgt.w	8015f50 <iNemoEngine_API_Update+0x35d8>
 8015c0a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8015c0e:	f007 f89f 	bl	801cd50 <ceil>
 8015c12:	ec51 0b10 	vmov	r0, r1, d0
 8015c16:	f7ea fff1 	bl	8000bfc <__aeabi_d2f>
 8015c1a:	eddd 7a04 	vldr	s15, [sp, #16]
 8015c1e:	f8cb 0000 	str.w	r0, [fp]
 8015c22:	eef4 7acb 	vcmpe.f32	s15, s22
 8015c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c2a:	f140 8171 	bpl.w	8015f10 <iNemoEngine_API_Update+0x3598>
 8015c2e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8015ce4 <iNemoEngine_API_Update+0x336c>
 8015c32:	eeb4 aae7 	vcmpe.f32	s20, s15
 8015c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c3a:	f280 816c 	bge.w	8015f16 <iNemoEngine_API_Update+0x359e>
 8015c3e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8015ce8 <iNemoEngine_API_Update+0x3370>
 8015c42:	eeb4 aae7 	vcmpe.f32	s20, s15
 8015c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c4a:	f300 81bd 	bgt.w	8015fc8 <iNemoEngine_API_Update+0x3650>
 8015c4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 8015c52:	f007 f87d 	bl	801cd50 <ceil>
 8015c56:	ec51 0b10 	vmov	r0, r1, d0
 8015c5a:	f7ea ffcf 	bl	8000bfc <__aeabi_d2f>
 8015c5e:	eddd 7a05 	vldr	s15, [sp, #20]
 8015c62:	f8cb 0004 	str.w	r0, [fp, #4]
 8015c66:	eef4 7acb 	vcmpe.f32	s15, s22
 8015c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c6e:	d564      	bpl.n	8015d3a <iNemoEngine_API_Update+0x33c2>
 8015c70:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8015ce4 <iNemoEngine_API_Update+0x336c>
 8015c74:	eef4 9ae7 	vcmpe.f32	s19, s15
 8015c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c7c:	f280 815d 	bge.w	8015f3a <iNemoEngine_API_Update+0x35c2>
 8015c80:	eddf 7a19 	vldr	s15, [pc, #100]	; 8015ce8 <iNemoEngine_API_Update+0x3370>
 8015c84:	eef4 9ae7 	vcmpe.f32	s19, s15
 8015c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c8c:	f300 8162 	bgt.w	8015f54 <iNemoEngine_API_Update+0x35dc>
 8015c90:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8015c94:	f007 f85c 	bl	801cd50 <ceil>
 8015c98:	ec51 0b10 	vmov	r0, r1, d0
 8015c9c:	f7ea ffae 	bl	8000bfc <__aeabi_d2f>
 8015ca0:	f8cb 0008 	str.w	r0, [fp, #8]
 8015ca4:	f10b 0b0c 	add.w	fp, fp, #12
 8015ca8:	45cb      	cmp	fp, r9
 8015caa:	d04e      	beq.n	8015d4a <iNemoEngine_API_Update+0x33d2>
 8015cac:	eddd 7a03 	vldr	s15, [sp, #12]
 8015cb0:	eef4 7acb 	vcmpe.f32	s15, s22
 8015cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cb8:	d497      	bmi.n	8015bea <iNemoEngine_API_Update+0x3272>
 8015cba:	ee1f 0a90 	vmov	r0, s31
 8015cbe:	e7ac      	b.n	8015c1a <iNemoEngine_API_Update+0x32a2>
 8015cc0:	ee1f 0a10 	vmov	r0, s30
 8015cc4:	e6f3      	b.n	8015aae <iNemoEngine_API_Update+0x3136>
 8015cc6:	bf00      	nop
 8015cc8:	3a7001e0 	.word	0x3a7001e0
 8015ccc:	3a000100 	.word	0x3a000100
 8015cd0:	3a8c0118 	.word	0x3a8c0118
 8015cd4:	44888777 	.word	0x44888777
 8015cd8:	39f001e1 	.word	0x39f001e1
 8015cdc:	b9f001e1 	.word	0xb9f001e1
 8015ce0:	44fffe00 	.word	0x44fffe00
 8015ce4:	39800100 	.word	0x39800100
 8015ce8:	b9800100 	.word	0xb9800100
 8015cec:	446a0ccd 	.word	0x446a0ccd
 8015cf0:	4b000000 	.word	0x4b000000
 8015cf4:	3cfaad3b 	.word	0x3cfaad3b
 8015cf8:	bcfaad3b 	.word	0xbcfaad3b
 8015cfc:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8015d00:	f007 f8a6 	bl	801ce50 <floor>
 8015d04:	ec51 0b10 	vmov	r0, r1, d0
 8015d08:	f7ea ff78 	bl	8000bfc <__aeabi_d2f>
 8015d0c:	e6cf      	b.n	8015aae <iNemoEngine_API_Update+0x3136>
 8015d0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015d12:	f007 f89d 	bl	801ce50 <floor>
 8015d16:	ec51 0b10 	vmov	r0, r1, d0
 8015d1a:	f7ea ff6f 	bl	8000bfc <__aeabi_d2f>
 8015d1e:	e6a4      	b.n	8015a6a <iNemoEngine_API_Update+0x30f2>
 8015d20:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8015d24:	f007 f894 	bl	801ce50 <floor>
 8015d28:	ec51 0b10 	vmov	r0, r1, d0
 8015d2c:	f7ea ff66 	bl	8000bfc <__aeabi_d2f>
 8015d30:	e6de      	b.n	8015af0 <iNemoEngine_API_Update+0x3178>
 8015d32:	4648      	mov	r0, r9
 8015d34:	e699      	b.n	8015a6a <iNemoEngine_API_Update+0x30f2>
 8015d36:	4648      	mov	r0, r9
 8015d38:	e6da      	b.n	8015af0 <iNemoEngine_API_Update+0x3178>
 8015d3a:	ee1d 0a90 	vmov	r0, s27
 8015d3e:	f10b 0b0c 	add.w	fp, fp, #12
 8015d42:	f84b 0c04 	str.w	r0, [fp, #-4]
 8015d46:	45cb      	cmp	fp, r9
 8015d48:	d1b0      	bne.n	8015cac <iNemoEngine_API_Update+0x3334>
 8015d4a:	eef0 7a4d 	vmov.f32	s15, s26
 8015d4e:	eeb0 da48 	vmov.f32	s26, s16
 8015d52:	eeb0 8a6c 	vmov.f32	s16, s25
 8015d56:	eef0 ca67 	vmov.f32	s25, s15
 8015d5a:	9b06      	ldr	r3, [sp, #24]
 8015d5c:	f893 9791 	ldrb.w	r9, [r3, #1937]	; 0x791
 8015d60:	f1b9 0f00 	cmp.w	r9, #0
 8015d64:	f001 80a7 	beq.w	8016eb6 <iNemoEngine_API_Update+0x453e>
 8015d68:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 8015cec <iNemoEngine_API_Update+0x3374>
 8015d6c:	ee6e fa27 	vmul.f32	s31, s28, s15
 8015d70:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 8015d74:	ee2e faa7 	vmul.f32	s30, s29, s15
 8015d78:	ee6b daa7 	vmul.f32	s27, s23, s15
 8015d7c:	ee7f 7acb 	vsub.f32	s15, s31, s22
 8015d80:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8015d84:	ee17 0a90 	vmov	r0, s15
 8015d88:	f7ea fbe8 	bl	800055c <__aeabi_f2d>
 8015d8c:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 8015d90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015d94:	ee17 0a90 	vmov	r0, s15
 8015d98:	f7ea fbe0 	bl	800055c <__aeabi_f2d>
 8015d9c:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 8015da0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015da4:	ee17 0a90 	vmov	r0, s15
 8015da8:	f7ea fbd8 	bl	800055c <__aeabi_f2d>
 8015dac:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 8015db0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015db4:	ee17 0a90 	vmov	r0, s15
 8015db8:	f7ea fbd0 	bl	800055c <__aeabi_f2d>
 8015dbc:	ee7d 7acb 	vsub.f32	s15, s27, s22
 8015dc0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015dc4:	ee17 0a90 	vmov	r0, s15
 8015dc8:	f7ea fbc8 	bl	800055c <__aeabi_f2d>
 8015dcc:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 8015dd0:	4602      	mov	r2, r0
 8015dd2:	460b      	mov	r3, r1
 8015dd4:	ee17 0a90 	vmov	r0, s15
 8015dd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8015ddc:	f7ea fbbe 	bl	800055c <__aeabi_f2d>
 8015de0:	eef0 7aef 	vabs.f32	s15, s31
 8015de4:	9b06      	ldr	r3, [sp, #24]
 8015de6:	edcd 7a03 	vstr	s15, [sp, #12]
 8015dea:	eef0 7acf 	vabs.f32	s15, s30
 8015dee:	edcd 7a04 	vstr	s15, [sp, #16]
 8015df2:	eef0 7aed 	vabs.f32	s15, s27
 8015df6:	f503 62f3 	add.w	r2, r3, #1944	; 0x798
 8015dfa:	eeb0 7a48 	vmov.f32	s14, s16
 8015dfe:	230c      	movs	r3, #12
 8015e00:	edcd 7a05 	vstr	s15, [sp, #20]
 8015e04:	eef0 7a6c 	vmov.f32	s15, s25
 8015e08:	eeb0 8a4d 	vmov.f32	s16, s26
 8015e0c:	eef0 ca4a 	vmov.f32	s25, s20
 8015e10:	eeb0 da6a 	vmov.f32	s26, s21
 8015e14:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8015e18:	eef0 aa69 	vmov.f32	s21, s19
 8015e1c:	ed1f ba4c 	vldr	s22, [pc, #-304]	; 8015cf0 <iNemoEngine_API_Update+0x3378>
 8015e20:	9215      	str	r2, [sp, #84]	; 0x54
 8015e22:	fb13 2909 	smlabb	r9, r3, r9, r2
 8015e26:	4693      	mov	fp, r2
 8015e28:	eeb0 aa67 	vmov.f32	s20, s15
 8015e2c:	eef0 9a47 	vmov.f32	s19, s14
 8015e30:	e064      	b.n	8015efc <iNemoEngine_API_Update+0x3584>
 8015e32:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8015e36:	ed1f 7a51 	vldr	s14, [pc, #-324]	; 8015cf4 <iNemoEngine_API_Update+0x337c>
 8015e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e42:	f280 80af 	bge.w	8015fa4 <iNemoEngine_API_Update+0x362c>
 8015e46:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8015cf8 <iNemoEngine_API_Update+0x3380>
 8015e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e52:	f300 80bb 	bgt.w	8015fcc <iNemoEngine_API_Update+0x3654>
 8015e56:	ed9d 0b08 	vldr	d0, [sp, #32]
 8015e5a:	f006 ff79 	bl	801cd50 <ceil>
 8015e5e:	ec51 0b10 	vmov	r0, r1, d0
 8015e62:	f7ea fecb 	bl	8000bfc <__aeabi_d2f>
 8015e66:	eddd 7a04 	vldr	s15, [sp, #16]
 8015e6a:	f8cb 0000 	str.w	r0, [fp]
 8015e6e:	eef4 7acb 	vcmpe.f32	s15, s22
 8015e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e76:	f140 8089 	bpl.w	8015f8c <iNemoEngine_API_Update+0x3614>
 8015e7a:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8015e7e:	ed1f 7a63 	vldr	s14, [pc, #-396]	; 8015cf4 <iNemoEngine_API_Update+0x337c>
 8015e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e8a:	f280 8082 	bge.w	8015f92 <iNemoEngine_API_Update+0x361a>
 8015e8e:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 8015cf8 <iNemoEngine_API_Update+0x3380>
 8015e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9a:	f300 809b 	bgt.w	8015fd4 <iNemoEngine_API_Update+0x365c>
 8015e9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 8015ea2:	f006 ff55 	bl	801cd50 <ceil>
 8015ea6:	ec51 0b10 	vmov	r0, r1, d0
 8015eaa:	f7ea fea7 	bl	8000bfc <__aeabi_d2f>
 8015eae:	eddd 7a05 	vldr	s15, [sp, #20]
 8015eb2:	f8cb 0004 	str.w	r0, [fp, #4]
 8015eb6:	eef4 7acb 	vcmpe.f32	s15, s22
 8015eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ebe:	d54b      	bpl.n	8015f58 <iNemoEngine_API_Update+0x35e0>
 8015ec0:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8015ec4:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 8015cf4 <iNemoEngine_API_Update+0x337c>
 8015ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed0:	da71      	bge.n	8015fb6 <iNemoEngine_API_Update+0x363e>
 8015ed2:	ed1f 7a77 	vldr	s14, [pc, #-476]	; 8015cf8 <iNemoEngine_API_Update+0x3380>
 8015ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ede:	dc77      	bgt.n	8015fd0 <iNemoEngine_API_Update+0x3658>
 8015ee0:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8015ee4:	f006 ff34 	bl	801cd50 <ceil>
 8015ee8:	ec51 0b10 	vmov	r0, r1, d0
 8015eec:	f7ea fe86 	bl	8000bfc <__aeabi_d2f>
 8015ef0:	f8cb 0008 	str.w	r0, [fp, #8]
 8015ef4:	f10b 0b0c 	add.w	fp, fp, #12
 8015ef8:	45cb      	cmp	fp, r9
 8015efa:	d035      	beq.n	8015f68 <iNemoEngine_API_Update+0x35f0>
 8015efc:	eddd 7a03 	vldr	s15, [sp, #12]
 8015f00:	eef4 7acb 	vcmpe.f32	s15, s22
 8015f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f08:	d493      	bmi.n	8015e32 <iNemoEngine_API_Update+0x34ba>
 8015f0a:	ee1f 0a90 	vmov	r0, s31
 8015f0e:	e7aa      	b.n	8015e66 <iNemoEngine_API_Update+0x34ee>
 8015f10:	ee1f 0a10 	vmov	r0, s30
 8015f14:	e6a3      	b.n	8015c5e <iNemoEngine_API_Update+0x32e6>
 8015f16:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8015f1a:	f006 ff99 	bl	801ce50 <floor>
 8015f1e:	ec51 0b10 	vmov	r0, r1, d0
 8015f22:	f7ea fe6b 	bl	8000bfc <__aeabi_d2f>
 8015f26:	e69a      	b.n	8015c5e <iNemoEngine_API_Update+0x32e6>
 8015f28:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015f2c:	f006 ff90 	bl	801ce50 <floor>
 8015f30:	ec51 0b10 	vmov	r0, r1, d0
 8015f34:	f7ea fe62 	bl	8000bfc <__aeabi_d2f>
 8015f38:	e66f      	b.n	8015c1a <iNemoEngine_API_Update+0x32a2>
 8015f3a:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8015f3e:	f006 ff87 	bl	801ce50 <floor>
 8015f42:	ec51 0b10 	vmov	r0, r1, d0
 8015f46:	f7ea fe59 	bl	8000bfc <__aeabi_d2f>
 8015f4a:	e6a9      	b.n	8015ca0 <iNemoEngine_API_Update+0x3328>
 8015f4c:	4648      	mov	r0, r9
 8015f4e:	e5ae      	b.n	8015aae <iNemoEngine_API_Update+0x3136>
 8015f50:	4650      	mov	r0, sl
 8015f52:	e662      	b.n	8015c1a <iNemoEngine_API_Update+0x32a2>
 8015f54:	4650      	mov	r0, sl
 8015f56:	e6a3      	b.n	8015ca0 <iNemoEngine_API_Update+0x3328>
 8015f58:	ee1d 0a90 	vmov	r0, s27
 8015f5c:	f10b 0b0c 	add.w	fp, fp, #12
 8015f60:	f84b 0c04 	str.w	r0, [fp, #-4]
 8015f64:	45cb      	cmp	fp, r9
 8015f66:	d1c9      	bne.n	8015efc <iNemoEngine_API_Update+0x3584>
 8015f68:	eeb0 7a69 	vmov.f32	s14, s19
 8015f6c:	eef0 7a4a 	vmov.f32	s15, s20
 8015f70:	eef0 9a6a 	vmov.f32	s19, s21
 8015f74:	eeb0 aa6c 	vmov.f32	s20, s25
 8015f78:	eef0 aa4d 	vmov.f32	s21, s26
 8015f7c:	eef0 ca67 	vmov.f32	s25, s15
 8015f80:	eeb0 da48 	vmov.f32	s26, s16
 8015f84:	eeb0 8a47 	vmov.f32	s16, s14
 8015f88:	f7fd b820 	b.w	8012fcc <iNemoEngine_API_Update+0x654>
 8015f8c:	ee1f 0a10 	vmov	r0, s30
 8015f90:	e78d      	b.n	8015eae <iNemoEngine_API_Update+0x3536>
 8015f92:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8015f96:	f006 ff5b 	bl	801ce50 <floor>
 8015f9a:	ec51 0b10 	vmov	r0, r1, d0
 8015f9e:	f7ea fe2d 	bl	8000bfc <__aeabi_d2f>
 8015fa2:	e784      	b.n	8015eae <iNemoEngine_API_Update+0x3536>
 8015fa4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015fa8:	f006 ff52 	bl	801ce50 <floor>
 8015fac:	ec51 0b10 	vmov	r0, r1, d0
 8015fb0:	f7ea fe24 	bl	8000bfc <__aeabi_d2f>
 8015fb4:	e757      	b.n	8015e66 <iNemoEngine_API_Update+0x34ee>
 8015fb6:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8015fba:	f006 ff49 	bl	801ce50 <floor>
 8015fbe:	ec51 0b10 	vmov	r0, r1, d0
 8015fc2:	f7ea fe1b 	bl	8000bfc <__aeabi_d2f>
 8015fc6:	e793      	b.n	8015ef0 <iNemoEngine_API_Update+0x3578>
 8015fc8:	4650      	mov	r0, sl
 8015fca:	e648      	b.n	8015c5e <iNemoEngine_API_Update+0x32e6>
 8015fcc:	4650      	mov	r0, sl
 8015fce:	e74a      	b.n	8015e66 <iNemoEngine_API_Update+0x34ee>
 8015fd0:	4650      	mov	r0, sl
 8015fd2:	e78d      	b.n	8015ef0 <iNemoEngine_API_Update+0x3578>
 8015fd4:	4650      	mov	r0, sl
 8015fd6:	e76a      	b.n	8015eae <iNemoEngine_API_Update+0x3536>
 8015fd8:	4616      	mov	r6, r2
 8015fda:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8015fde:	4be1      	ldr	r3, [pc, #900]	; (8016364 <iNemoEngine_API_Update+0x39ec>)
 8015fe0:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 8015fe4:	2100      	movs	r1, #0
 8015fe6:	f8c2 51cc 	str.w	r5, [r2, #460]	; 0x1cc
 8015fea:	f8c2 51d0 	str.w	r5, [r2, #464]	; 0x1d0
 8015fee:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 8015ff2:	f506 70ea 	add.w	r0, r6, #468	; 0x1d4
 8015ff6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8015ffa:	f003 f909 	bl	8019210 <memset>
 8015ffe:	ed96 6a02 	vldr	s12, [r6, #8]
 8016002:	eddf 7ad9 	vldr	s15, [pc, #868]	; 8016368 <iNemoEngine_API_Update+0x39f0>
 8016006:	eddf 5ad9 	vldr	s11, [pc, #868]	; 801636c <iNemoEngine_API_Update+0x39f4>
 801600a:	ed9f 5ad9 	vldr	s10, [pc, #868]	; 8016370 <iNemoEngine_API_Update+0x39f8>
 801600e:	f8c6 50c4 	str.w	r5, [r6, #196]	; 0xc4
 8016012:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016016:	2300      	movs	r3, #0
 8016018:	edc6 7a34 	vstr	s15, [r6, #208]	; 0xd0
 801601c:	eddf 7ad5 	vldr	s15, [pc, #852]	; 8016374 <iNemoEngine_API_Update+0x39fc>
 8016020:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 8016024:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016028:	f8c6 3128 	str.w	r3, [r6, #296]	; 0x128
 801602c:	edc6 7a4e 	vstr	s15, [r6, #312]	; 0x138
 8016030:	eddf 7ad1 	vldr	s15, [pc, #836]	; 8016378 <iNemoEngine_API_Update+0x3a00>
 8016034:	4bd1      	ldr	r3, [pc, #836]	; (801637c <iNemoEngine_API_Update+0x3a04>)
 8016036:	f8c6 30dc 	str.w	r3, [r6, #220]	; 0xdc
 801603a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801603e:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
 8016042:	edc6 7a50 	vstr	s15, [r6, #320]	; 0x140
 8016046:	eddf 7ace 	vldr	s15, [pc, #824]	; 8016380 <iNemoEngine_API_Update+0x3a08>
 801604a:	4bce      	ldr	r3, [pc, #824]	; (8016384 <iNemoEngine_API_Update+0x3a0c>)
 801604c:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8016050:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016054:	4bcc      	ldr	r3, [pc, #816]	; (8016388 <iNemoEngine_API_Update+0x3a10>)
 8016056:	edc6 7a38 	vstr	s15, [r6, #224]	; 0xe0
 801605a:	eddf 7acc 	vldr	s15, [pc, #816]	; 801638c <iNemoEngine_API_Update+0x3a14>
 801605e:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
 8016062:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016066:	4bca      	ldr	r3, [pc, #808]	; (8016390 <iNemoEngine_API_Update+0x3a18>)
 8016068:	edc6 7a52 	vstr	s15, [r6, #328]	; 0x148
 801606c:	eddf 7ac9 	vldr	s15, [pc, #804]	; 8016394 <iNemoEngine_API_Update+0x3a1c>
 8016070:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
 8016074:	4bc8      	ldr	r3, [pc, #800]	; (8016398 <iNemoEngine_API_Update+0x3a20>)
 8016076:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
 801607a:	4631      	mov	r1, r6
 801607c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8016080:	ee26 5a05 	vmul.f32	s10, s12, s10
 8016084:	ee66 7a27 	vmul.f32	s15, s12, s15
 8016088:	4bc4      	ldr	r3, [pc, #784]	; (801639c <iNemoEngine_API_Update+0x3a24>)
 801608a:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 801608e:	4bc4      	ldr	r3, [pc, #784]	; (80163a0 <iNemoEngine_API_Update+0x3a28>)
 8016090:	f8c6 512c 	str.w	r5, [r6, #300]	; 0x12c
 8016094:	f8c6 50cc 	str.w	r5, [r6, #204]	; 0xcc
 8016098:	f8c6 5134 	str.w	r5, [r6, #308]	; 0x134
 801609c:	edc6 7a3a 	vstr	s15, [r6, #232]	; 0xe8
 80160a0:	edc6 5a32 	vstr	s11, [r6, #200]	; 0xc8
 80160a4:	edc6 5a4c 	vstr	s11, [r6, #304]	; 0x130
 80160a8:	ed86 5a36 	vstr	s10, [r6, #216]	; 0xd8
 80160ac:	f8c1 31d4 	str.w	r3, [r1, #468]	; 0x1d4
 80160b0:	f8c1 31fc 	str.w	r3, [r1, #508]	; 0x1fc
 80160b4:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
 80160b8:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 80160bc:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 80160c0:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 80160c4:	f8c1 32c4 	str.w	r3, [r1, #708]	; 0x2c4
 80160c8:	f8c1 32ec 	str.w	r3, [r1, #748]	; 0x2ec
 80160cc:	f8c1 3314 	str.w	r3, [r1, #788]	; 0x314
 80160d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80160d4:	ed81 5a54 	vstr	s10, [r1, #336]	; 0x150
 80160d8:	eddf 3ab2 	vldr	s7, [pc, #712]	; 80163a4 <iNemoEngine_API_Update+0x3a2c>
 80160dc:	ed9f 4ab2 	vldr	s8, [pc, #712]	; 80163a8 <iNemoEngine_API_Update+0x3a30>
 80160e0:	f8c1 317c 	str.w	r3, [r1, #380]	; 0x17c
 80160e4:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
 80160e8:	f8c1 3124 	str.w	r3, [r1, #292]	; 0x124
 80160ec:	eddf 6aaf 	vldr	s13, [pc, #700]	; 80163ac <iNemoEngine_API_Update+0x3a34>
 80160f0:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 80163b0 <iNemoEngine_API_Update+0x3a38>
 80160f4:	eddf 7aaf 	vldr	s15, [pc, #700]	; 80163b4 <iNemoEngine_API_Update+0x3a3c>
 80160f8:	eddf 4aaf 	vldr	s9, [pc, #700]	; 80163b8 <iNemoEngine_API_Update+0x3a40>
 80160fc:	4aaf      	ldr	r2, [pc, #700]	; (80163bc <iNemoEngine_API_Update+0x3a44>)
 80160fe:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 80163dc <iNemoEngine_API_Update+0x3a64>
 8016102:	4faf      	ldr	r7, [pc, #700]	; (80163c0 <iNemoEngine_API_Update+0x3a48>)
 8016104:	4eaf      	ldr	r6, [pc, #700]	; (80163c4 <iNemoEngine_API_Update+0x3a4c>)
 8016106:	4db0      	ldr	r5, [pc, #704]	; (80163c8 <iNemoEngine_API_Update+0x3a50>)
 8016108:	48b0      	ldr	r0, [pc, #704]	; (80163cc <iNemoEngine_API_Update+0x3a54>)
 801610a:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 80163e0 <iNemoEngine_API_Update+0x3a68>
 801610e:	edc1 3a3d 	vstr	s7, [r1, #244]	; 0xf4
 8016112:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8016116:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 801611a:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
 801611e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016122:	ee66 6a26 	vmul.f32	s13, s12, s13
 8016126:	ee26 7a07 	vmul.f32	s14, s12, s14
 801612a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801612e:	ee66 2a23 	vmul.f32	s5, s12, s7
 8016132:	ee26 3a02 	vmul.f32	s6, s12, s4
 8016136:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
 801613a:	ee66 4a24 	vmul.f32	s9, s12, s9
 801613e:	4ba4      	ldr	r3, [pc, #656]	; (80163d0 <iNemoEngine_API_Update+0x3a58>)
 8016140:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184
 8016144:	ee66 1a04 	vmul.f32	s3, s12, s8
 8016148:	4ba2      	ldr	r3, [pc, #648]	; (80163d4 <iNemoEngine_API_Update+0x3a5c>)
 801614a:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
 801614e:	f8c1 c15c 	str.w	ip, [r1, #348]	; 0x15c
 8016152:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
 8016156:	f8c1 6164 	str.w	r6, [r1, #356]	; 0x164
 801615a:	f8c1 516c 	str.w	r5, [r1, #364]	; 0x16c
 801615e:	f8c1 0174 	str.w	r0, [r1, #372]	; 0x174
 8016162:	edc1 1a46 	vstr	s3, [r1, #280]	; 0x118
 8016166:	edc1 4a60 	vstr	s9, [r1, #384]	; 0x180
 801616a:	f8c1 e19c 	str.w	lr, [r1, #412]	; 0x19c
 801616e:	ed81 2a66 	vstr	s4, [r1, #408]	; 0x198
 8016172:	ed81 4a65 	vstr	s8, [r1, #404]	; 0x194
 8016176:	f8c1 2154 	str.w	r2, [r1, #340]	; 0x154
 801617a:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
 801617e:	edc1 6a3c 	vstr	s13, [r1, #240]	; 0xf0
 8016182:	edc1 6a56 	vstr	s13, [r1, #344]	; 0x158
 8016186:	ed81 7a3e 	vstr	s14, [r1, #248]	; 0xf8
 801618a:	ed81 7a58 	vstr	s14, [r1, #352]	; 0x160
 801618e:	edc1 7a40 	vstr	s15, [r1, #256]	; 0x100
 8016192:	edc1 7a5a 	vstr	s15, [r1, #360]	; 0x168
 8016196:	edc1 2a42 	vstr	s5, [r1, #264]	; 0x108
 801619a:	edc1 2a5c 	vstr	s5, [r1, #368]	; 0x170
 801619e:	ed81 3a44 	vstr	s6, [r1, #272]	; 0x110
 80161a2:	ed81 3a5e 	vstr	s6, [r1, #376]	; 0x178
 80161a6:	ed81 6a48 	vstr	s12, [r1, #288]	; 0x120
 80161aa:	ed81 6a62 	vstr	s12, [r1, #392]	; 0x188
 80161ae:	edc1 5a64 	vstr	s11, [r1, #400]	; 0x190
 80161b2:	784b      	ldrb	r3, [r1, #1]
 80161b4:	b18b      	cbz	r3, 80161da <iNemoEngine_API_Update+0x3862>
 80161b6:	f501 6214 	add.w	r2, r1, #2368	; 0x940
 80161ba:	9225      	str	r2, [sp, #148]	; 0x94
 80161bc:	f601 1348 	addw	r3, r1, #2376	; 0x948
 80161c0:	f601 1244 	addw	r2, r1, #2372	; 0x944
 80161c4:	9226      	str	r2, [sp, #152]	; 0x98
 80161c6:	9327      	str	r3, [sp, #156]	; 0x9c
 80161c8:	9a06      	ldr	r2, [sp, #24]
 80161ca:	2300      	movs	r3, #0
 80161cc:	7053      	strb	r3, [r2, #1]
 80161ce:	f7fc bee8 	b.w	8012fa2 <iNemoEngine_API_Update+0x62a>
 80161d2:	ed93 ca4b 	vldr	s24, [r3, #300]	; 0x12c
 80161d6:	f7fd bfc0 	b.w	801415a <iNemoEngine_API_Update+0x17e2>
 80161da:	9a06      	ldr	r2, [sp, #24]
 80161dc:	f502 6314 	add.w	r3, r2, #2368	; 0x940
 80161e0:	f602 1144 	addw	r1, r2, #2372	; 0x944
 80161e4:	f602 1048 	addw	r0, r2, #2376	; 0x948
 80161e8:	9325      	str	r3, [sp, #148]	; 0x94
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
 80161f0:	680b      	ldr	r3, [r1, #0]
 80161f2:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
 80161f6:	6803      	ldr	r3, [r0, #0]
 80161f8:	9126      	str	r1, [sp, #152]	; 0x98
 80161fa:	9027      	str	r0, [sp, #156]	; 0x9c
 80161fc:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
 8016200:	e7e2      	b.n	80161c8 <iNemoEngine_API_Update+0x3850>
 8016202:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 8016206:	ed97 0a00 	vldr	s0, [r7]
 801620a:	f505 6097 	add.w	r0, r5, #1208	; 0x4b8
 801620e:	f7fa ff43 	bl	8011098 <dataDerivative5>
 8016212:	f205 6824 	addw	r8, r5, #1572	; 0x624
 8016216:	eef0 3a40 	vmov.f32	s7, s0
 801621a:	f505 60c5 	add.w	r0, r5, #1576	; 0x628
 801621e:	ed98 0a00 	vldr	s0, [r8]
 8016222:	f7fa ff39 	bl	8011098 <dataDerivative5>
 8016226:	f205 7394 	addw	r3, r5, #1940	; 0x794
 801622a:	eeb0 3a40 	vmov.f32	s6, s0
 801622e:	f505 60f3 	add.w	r0, r5, #1944	; 0x798
 8016232:	ed93 0a00 	vldr	s0, [r3]
 8016236:	f7fa ff2f 	bl	8011098 <dataDerivative5>
 801623a:	f9b5 3976 	ldrsh.w	r3, [r5, #2422]	; 0x976
 801623e:	ee07 3a90 	vmov	s15, r3
 8016242:	3301      	adds	r3, #1
 8016244:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8016248:	ee07 3a90 	vmov	s15, r3
 801624c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016254:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8016258:	f605 106c 	addw	r0, r5, #2412	; 0x96c
 801625c:	f605 1168 	addw	r1, r5, #2408	; 0x968
 8016260:	f505 6217 	add.w	r2, r5, #2416	; 0x970
 8016264:	b21b      	sxth	r3, r3
 8016266:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801626a:	ed90 7a00 	vldr	s14, [r0]
 801626e:	ed91 5a00 	vldr	s10, [r1]
 8016272:	eef0 7a63 	vmov.f32	s15, s7
 8016276:	eee7 7a25 	vfma.f32	s15, s14, s11
 801627a:	eeb0 7a43 	vmov.f32	s14, s6
 801627e:	eea5 7a85 	vfma.f32	s14, s11, s10
 8016282:	ed92 5a00 	vldr	s10, [r2]
 8016286:	eef0 6a40 	vmov.f32	s13, s0
 801628a:	eee5 6a85 	vfma.f32	s13, s11, s10
 801628e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016292:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016296:	ee66 6a86 	vmul.f32	s13, s13, s12
 801629a:	edc0 7a00 	vstr	s15, [r0]
 801629e:	ed81 7a00 	vstr	s14, [r1]
 80162a2:	edc2 6a00 	vstr	s13, [r2]
 80162a6:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 80162aa:	f47c ab8d 	bne.w	80129c8 <iNemoEngine_API_Update+0x50>
 80162ae:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80162b2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80162b6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80162ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80162be:	2300      	movs	r3, #0
 80162c0:	ed85 7a07 	vstr	s14, [r5, #28]
 80162c4:	edc5 6a08 	vstr	s13, [r5, #32]
 80162c8:	edc5 7a06 	vstr	s15, [r5, #24]
 80162cc:	6003      	str	r3, [r0, #0]
 80162ce:	600b      	str	r3, [r1, #0]
 80162d0:	6013      	str	r3, [r2, #0]
 80162d2:	2300      	movs	r3, #0
 80162d4:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 80162d8:	f885 3978 	strb.w	r3, [r5, #2424]	; 0x978
 80162dc:	f7fc bb74 	b.w	80129c8 <iNemoEngine_API_Update+0x50>
 80162e0:	9906      	ldr	r1, [sp, #24]
 80162e2:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 80162e6:	9295      	str	r2, [sp, #596]	; 0x254
 80162e8:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 80162ec:	9296      	str	r2, [sp, #600]	; 0x258
 80162ee:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 80162f2:	9297      	str	r2, [sp, #604]	; 0x25c
 80162f4:	2200      	movs	r2, #0
 80162f6:	464b      	mov	r3, r9
 80162f8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80162fc:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 8016300:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8016304:	f7fe bc8f 	b.w	8014c26 <iNemoEngine_API_Update+0x22ae>
 8016308:	ed92 fa49 	vldr	s30, [r2, #292]	; 0x124
 801630c:	4613      	mov	r3, r2
 801630e:	f7fd bdd2 	b.w	8013eb6 <iNemoEngine_API_Update+0x153e>
 8016312:	ed93 ca63 	vldr	s24, [r3, #396]	; 0x18c
 8016316:	f7fd bf20 	b.w	801415a <iNemoEngine_API_Update+0x17e2>
 801631a:	eddf 8a2f 	vldr	s17, [pc, #188]	; 80163d8 <iNemoEngine_API_Update+0x3a60>
 801631e:	f7fd b87e 	b.w	801341e <iNemoEngine_API_Update+0xaa6>
 8016322:	ed9f ca2d 	vldr	s24, [pc, #180]	; 80163d8 <iNemoEngine_API_Update+0x3a60>
 8016326:	f7fd b90e 	b.w	8013546 <iNemoEngine_API_Update+0xbce>
 801632a:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 80163d8 <iNemoEngine_API_Update+0x3a60>
 801632e:	f7fc bf8c 	b.w	801324a <iNemoEngine_API_Update+0x8d2>
 8016332:	eddf 8a29 	vldr	s17, [pc, #164]	; 80163d8 <iNemoEngine_API_Update+0x3a60>
 8016336:	f7fc bf5d 	b.w	80131f4 <iNemoEngine_API_Update+0x87c>
 801633a:	ed9f 8a27 	vldr	s16, [pc, #156]	; 80163d8 <iNemoEngine_API_Update+0x3a60>
 801633e:	f7fd b92d 	b.w	801359c <iNemoEngine_API_Update+0xc24>
 8016342:	ed9f ca25 	vldr	s24, [pc, #148]	; 80163d8 <iNemoEngine_API_Update+0x3a60>
 8016346:	f7fd b83f 	b.w	80133c8 <iNemoEngine_API_Update+0xa50>
 801634a:	ed9f ca23 	vldr	s24, [pc, #140]	; 80163d8 <iNemoEngine_API_Update+0x3a60>
 801634e:	f7fc bfa7 	b.w	80132a0 <iNemoEngine_API_Update+0x928>
 8016352:	ed9f 8a21 	vldr	s16, [pc, #132]	; 80163d8 <iNemoEngine_API_Update+0x3a60>
 8016356:	f7fd b80c 	b.w	8013372 <iNemoEngine_API_Update+0x9fa>
 801635a:	eddf 8a1f 	vldr	s17, [pc, #124]	; 80163d8 <iNemoEngine_API_Update+0x3a60>
 801635e:	f7fd b8c7 	b.w	80134f0 <iNemoEngine_API_Update+0xb78>
 8016362:	bf00      	nop
 8016364:	bf666666 	.word	0xbf666666
 8016368:	3d072b02 	.word	0x3d072b02
 801636c:	3ca3d70a 	.word	0x3ca3d70a
 8016370:	3d4ccccd 	.word	0x3d4ccccd
 8016374:	3cb43958 	.word	0x3cb43958
 8016378:	3cf5c28f 	.word	0x3cf5c28f
 801637c:	3eb33333 	.word	0x3eb33333
 8016380:	3d75c28f 	.word	0x3d75c28f
 8016384:	3ee66666 	.word	0x3ee66666
 8016388:	3f866666 	.word	0x3f866666
 801638c:	3d23d70a 	.word	0x3d23d70a
 8016390:	3f8ccccd 	.word	0x3f8ccccd
 8016394:	3d8f5c29 	.word	0x3d8f5c29
 8016398:	3f933333 	.word	0x3f933333
 801639c:	3ebd70a4 	.word	0x3ebd70a4
 80163a0:	40a00000 	.word	0x40a00000
 80163a4:	3ecccccd 	.word	0x3ecccccd
 80163a8:	3f4ccccd 	.word	0x3f4ccccd
 80163ac:	3dcccccd 	.word	0x3dcccccd
 80163b0:	3e4ccccd 	.word	0x3e4ccccd
 80163b4:	3e99999a 	.word	0x3e99999a
 80163b8:	3f666666 	.word	0x3f666666
 80163bc:	3f99999a 	.word	0x3f99999a
 80163c0:	3f19999a 	.word	0x3f19999a
 80163c4:	3fb9999a 	.word	0x3fb9999a
 80163c8:	3fcccccd 	.word	0x3fcccccd
 80163cc:	3fe66666 	.word	0x3fe66666
 80163d0:	40200000 	.word	0x40200000
 80163d4:	40400000 	.word	0x40400000
 80163d8:	80000000 	.word	0x80000000
 80163dc:	3fa66666 	.word	0x3fa66666
 80163e0:	3f333333 	.word	0x3f333333
 80163e4:	3e4cccce 	.word	0x3e4cccce
 80163e8:	3eaaaaab 	.word	0x3eaaaaab
 80163ec:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 80163f0:	2a00      	cmp	r2, #0
 80163f2:	f040 85bc 	bne.w	8016f6e <iNemoEngine_API_Update+0x45f6>
 80163f6:	9906      	ldr	r1, [sp, #24]
 80163f8:	ed5f 8a06 	vldr	s17, [pc, #-24]	; 80163e4 <iNemoEngine_API_Update+0x3a6c>
 80163fc:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 8016400:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 80163e8 <iNemoEngine_API_Update+0x3a70>
 8016404:	3301      	adds	r3, #1
 8016406:	b29b      	uxth	r3, r3
 8016408:	2b31      	cmp	r3, #49	; 0x31
 801640a:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 801640e:	bf98      	it	ls
 8016410:	eef0 8a67 	vmovls.f32	s17, s15
 8016414:	460b      	mov	r3, r1
 8016416:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801641a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801641e:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8016422:	f000 8599 	beq.w	8016f58 <iNemoEngine_API_Update+0x45e0>
 8016426:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 801642a:	f47f a83a 	bne.w	80154a2 <iNemoEngine_API_Update+0x2b2a>
 801642e:	9a06      	ldr	r2, [sp, #24]
 8016430:	2301      	movs	r3, #1
 8016432:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
 8016436:	9a06      	ldr	r2, [sp, #24]
 8016438:	edcd 6a03 	vstr	s13, [sp, #12]
 801643c:	f502 63c3 	add.w	r3, r2, #1560	; 0x618
 8016440:	ed93 5a00 	vldr	s10, [r3]
 8016444:	f502 63f1 	add.w	r3, r2, #1928	; 0x788
 8016448:	ed93 7a00 	vldr	s14, [r3]
 801644c:	f202 6314 	addw	r3, r2, #1556	; 0x614
 8016450:	edd3 4a00 	vldr	s9, [r3]
 8016454:	ee25 4a05 	vmul.f32	s8, s10, s10
 8016458:	f202 7384 	addw	r3, r2, #1924	; 0x784
 801645c:	eea4 4aa4 	vfma.f32	s8, s9, s9
 8016460:	a93d      	add	r1, sp, #244	; 0xf4
 8016462:	a843      	add	r0, sp, #268	; 0x10c
 8016464:	ed93 6a00 	vldr	s12, [r3]
 8016468:	f202 631c 	addw	r3, r2, #1564	; 0x61c
 801646c:	edd3 7a00 	vldr	s15, [r3]
 8016470:	eea7 4aa7 	vfma.f32	s8, s15, s15
 8016474:	f202 738c 	addw	r3, r2, #1932	; 0x78c
 8016478:	465e      	mov	r6, fp
 801647a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801647e:	eeb1 3ac4 	vsqrt.f32	s6, s8
 8016482:	465a      	mov	r2, fp
 8016484:	4655      	mov	r5, sl
 8016486:	4657      	mov	r7, sl
 8016488:	acae      	add	r4, sp, #696	; 0x2b8
 801648a:	ee67 5a07 	vmul.f32	s11, s14, s14
 801648e:	ee83 4a83 	vdiv.f32	s8, s7, s6
 8016492:	eee6 5a06 	vfma.f32	s11, s12, s12
 8016496:	ee67 7a84 	vmul.f32	s15, s15, s8
 801649a:	ee25 5a04 	vmul.f32	s10, s10, s8
 801649e:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 80164a2:	edd3 7a00 	vldr	s15, [r3]
 80164a6:	ed8d 5a3e 	vstr	s10, [sp, #248]	; 0xf8
 80164aa:	eee7 5aa7 	vfma.f32	s11, s15, s15
 80164ae:	ee64 4a84 	vmul.f32	s9, s9, s8
 80164b2:	eeb1 5ae5 	vsqrt.f32	s10, s11
 80164b6:	edcd 4a3d 	vstr	s9, [sp, #244]	; 0xf4
 80164ba:	eec3 5a85 	vdiv.f32	s11, s7, s10
 80164be:	ee27 7a25 	vmul.f32	s14, s14, s11
 80164c2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80164c6:	ee26 6a25 	vmul.f32	s12, s12, s11
 80164ca:	ed8d 7a44 	vstr	s14, [sp, #272]	; 0x110
 80164ce:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
 80164d2:	ed8d 6a43 	vstr	s12, [sp, #268]	; 0x10c
 80164d6:	f7fa fec5 	bl	8011264 <getRotationMatrix>
 80164da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80164dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80164de:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80164e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80164e2:	6836      	ldr	r6, [r6, #0]
 80164e4:	602e      	str	r6, [r5, #0]
 80164e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80164e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80164ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164ee:	edda 7a00 	vldr	s15, [sl]
 80164f2:	ed9a 7a01 	vldr	s14, [sl, #4]
 80164f6:	eddd 6a03 	vldr	s13, [sp, #12]
 80164fa:	6026      	str	r6, [r4, #0]
 80164fc:	eef0 7ae7 	vabs.f32	s15, s15
 8016500:	eeb0 7ac7 	vabs.f32	s14, s14
 8016504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801650c:	f140 8407 	bpl.w	8016d1e <iNemoEngine_API_Update+0x43a6>
 8016510:	2304      	movs	r3, #4
 8016512:	2000      	movs	r0, #0
 8016514:	930c      	str	r3, [sp, #48]	; 0x30
 8016516:	469e      	mov	lr, r3
 8016518:	eef0 7a47 	vmov.f32	s15, s14
 801651c:	2103      	movs	r1, #3
 801651e:	2707      	movs	r7, #7
 8016520:	f04f 0c06 	mov.w	ip, #6
 8016524:	4603      	mov	r3, r0
 8016526:	2601      	movs	r6, #1
 8016528:	ed9a 7a02 	vldr	s14, [sl, #8]
 801652c:	eeb0 7ac7 	vabs.f32	s14, s14
 8016530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016538:	f340 8453 	ble.w	8016de2 <iNemoEngine_API_Update+0x446a>
 801653c:	2306      	movs	r3, #6
 801653e:	2708      	movs	r7, #8
 8016540:	2104      	movs	r1, #4
 8016542:	9303      	str	r3, [sp, #12]
 8016544:	f04f 0c07 	mov.w	ip, #7
 8016548:	f04f 0e05 	mov.w	lr, #5
 801654c:	970c      	str	r7, [sp, #48]	; 0x30
 801654e:	4608      	mov	r0, r1
 8016550:	2200      	movs	r2, #0
 8016552:	2301      	movs	r3, #1
 8016554:	2602      	movs	r6, #2
 8016556:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016558:	4450      	add	r0, sl
 801655a:	4454      	add	r4, sl
 801655c:	ed90 6a00 	vldr	s12, [r0]
 8016560:	ed94 7a00 	vldr	s14, [r4]
 8016564:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8016568:	a8ae      	add	r0, sp, #696	; 0x2b8
 801656a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801656e:	acae      	add	r4, sp, #696	; 0x2b8
 8016570:	adae      	add	r5, sp, #696	; 0x2b8
 8016572:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8016576:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801657a:	edc0 7a00 	vstr	s15, [r0]
 801657e:	ed94 7a00 	vldr	s14, [r4]
 8016582:	edd5 7a00 	vldr	s15, [r5]
 8016586:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801658a:	ed84 6a00 	vstr	s12, [r4]
 801658e:	edd0 5a00 	vldr	s11, [r0]
 8016592:	a8ae      	add	r0, sp, #696	; 0x2b8
 8016594:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8016598:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 801659c:	ed90 7a00 	vldr	s14, [r0]
 80165a0:	edd5 7a00 	vldr	s15, [r5]
 80165a4:	eee5 7ac7 	vfms.f32	s15, s11, s14
 80165a8:	ea4f 048e 	mov.w	r4, lr, lsl #2
 80165ac:	9404      	str	r4, [sp, #16]
 80165ae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80165b0:	edc5 7a00 	vstr	s15, [r5]
 80165b4:	ed90 7a00 	vldr	s14, [r0]
 80165b8:	a8ae      	add	r0, sp, #696	; 0x2b8
 80165ba:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80165be:	edd0 7a00 	vldr	s15, [r0]
 80165c2:	eee6 7a47 	vfms.f32	s15, s12, s14
 80165c6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80165ca:	00bc      	lsls	r4, r7, #2
 80165cc:	9405      	str	r4, [sp, #20]
 80165ce:	edc0 7a00 	vstr	s15, [r0]
 80165d2:	acae      	add	r4, sp, #696	; 0x2b8
 80165d4:	a8ae      	add	r0, sp, #696	; 0x2b8
 80165d6:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 80165da:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80165de:	ed90 5a00 	vldr	s10, [r0]
 80165e2:	ed94 7a00 	vldr	s14, [r4]
 80165e6:	eea5 7ac5 	vfms.f32	s14, s11, s10
 80165ea:	0097      	lsls	r7, r2, #2
 80165ec:	eef0 7ae7 	vabs.f32	s15, s15
 80165f0:	ed84 7a00 	vstr	s14, [r4]
 80165f4:	9c03      	ldr	r4, [sp, #12]
 80165f6:	edd0 5a00 	vldr	s11, [r0]
 80165fa:	a8ae      	add	r0, sp, #696	; 0x2b8
 80165fc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8016600:	ed90 7a00 	vldr	s14, [r0]
 8016604:	eea6 7a65 	vfms.f32	s14, s12, s11
 8016608:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801660c:	008c      	lsls	r4, r1, #2
 801660e:	ed80 7a00 	vstr	s14, [r0]
 8016612:	ed95 7a00 	vldr	s14, [r5]
 8016616:	eeb0 7ac7 	vabs.f32	s14, s14
 801661a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801661e:	00b0      	lsls	r0, r6, #2
 8016620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016624:	9003      	str	r0, [sp, #12]
 8016626:	ea4f 0583 	mov.w	r5, r3, lsl #2
 801662a:	ea4f 008c 	mov.w	r0, ip, lsl #2
 801662e:	dd0a      	ble.n	8016646 <iNemoEngine_API_Update+0x3cce>
 8016630:	4618      	mov	r0, r3
 8016632:	4613      	mov	r3, r2
 8016634:	4602      	mov	r2, r0
 8016636:	4674      	mov	r4, lr
 8016638:	4650      	mov	r0, sl
 801663a:	463d      	mov	r5, r7
 801663c:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8016640:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8016644:	0097      	lsls	r7, r2, #2
 8016646:	a9ae      	add	r1, sp, #696	; 0x2b8
 8016648:	448e      	add	lr, r1
 801664a:	440c      	add	r4, r1
 801664c:	ed9e 7a00 	vldr	s14, [lr]
 8016650:	edd4 7a00 	vldr	s15, [r4]
 8016654:	edcd 6a03 	vstr	s13, [sp, #12]
 8016658:	ee87 2a27 	vdiv.f32	s4, s14, s15
 801665c:	4408      	add	r0, r1
 801665e:	4451      	add	r1, sl
 8016660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016664:	ed8e 2a00 	vstr	s4, [lr]
 8016668:	ed90 6a00 	vldr	s12, [r0]
 801666c:	edd1 7a00 	vldr	s15, [r1]
 8016670:	eee2 7a46 	vfms.f32	s15, s4, s12
 8016674:	edc1 7a00 	vstr	s15, [r1]
 8016678:	9905      	ldr	r1, [sp, #20]
 801667a:	ed90 3a00 	vldr	s6, [r0]
 801667e:	ed94 6a00 	vldr	s12, [r4]
 8016682:	a8ae      	add	r0, sp, #696	; 0x2b8
 8016684:	4401      	add	r1, r0
 8016686:	edd1 3a00 	vldr	s7, [r1]
 801668a:	9904      	ldr	r1, [sp, #16]
 801668c:	4401      	add	r1, r0
 801668e:	00b0      	lsls	r0, r6, #2
 8016690:	edd1 4a00 	vldr	s9, [r1]
 8016694:	f500 61b2 	add.w	r1, r0, #1424	; 0x590
 8016698:	4469      	add	r1, sp
 801669a:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 801669e:	eec7 2a27 	vdiv.f32	s5, s14, s15
 80166a2:	edd1 7a00 	vldr	s15, [r1]
 80166a6:	a9ae      	add	r1, sp, #696	; 0x2b8
 80166a8:	4401      	add	r1, r0
 80166aa:	ee87 4a06 	vdiv.f32	s8, s14, s12
 80166ae:	a8ae      	add	r0, sp, #696	; 0x2b8
 80166b0:	ed91 6a00 	vldr	s12, [r1]
 80166b4:	f505 61b2 	add.w	r1, r5, #1424	; 0x590
 80166b8:	4469      	add	r1, sp
 80166ba:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 80166be:	ee87 5a06 	vdiv.f32	s10, s14, s12
 80166c2:	4405      	add	r5, r0
 80166c4:	ed91 7a00 	vldr	s14, [r1]
 80166c8:	edd5 5a00 	vldr	s11, [r5]
 80166cc:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80166d0:	4469      	add	r1, sp
 80166d2:	4407      	add	r7, r0
 80166d4:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 80166d8:	edd7 1a00 	vldr	s3, [r7]
 80166dc:	ed91 6a00 	vldr	s12, [r1]
 80166e0:	eea5 7ae7 	vfms.f32	s14, s11, s15
 80166e4:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 80166e8:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 80166ec:	eea1 6ae7 	vfms.f32	s12, s3, s15
 80166f0:	4601      	mov	r1, r0
 80166f2:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 80166f6:	ed91 1a00 	vldr	s2, [r1]
 80166fa:	eea2 6a47 	vfms.f32	s12, s4, s14
 80166fe:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8016702:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 8016706:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801670a:	ee22 6a86 	vmul.f32	s12, s5, s12
 801670e:	460b      	mov	r3, r1
 8016710:	eea3 7a46 	vfms.f32	s14, s6, s12
 8016714:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 8016718:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 801671c:	eee3 7ac6 	vfms.f32	s15, s7, s12
 8016720:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016724:	ed8b 6a02 	vstr	s12, [fp, #8]
 8016728:	eee4 7ac7 	vfms.f32	s15, s9, s14
 801672c:	ed8b 7a01 	vstr	s14, [fp, #4]
 8016730:	ee65 7a27 	vmul.f32	s15, s10, s15
 8016734:	ed90 7a00 	vldr	s14, [r0]
 8016738:	ed91 6a00 	vldr	s12, [r1]
 801673c:	edcb 7a00 	vstr	s15, [fp]
 8016740:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 8016744:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8016748:	edd3 7a00 	vldr	s15, [r3]
 801674c:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 8016750:	edd3 0a00 	vldr	s1, [r3]
 8016754:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 8016758:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801675c:	4658      	mov	r0, fp
 801675e:	a952      	add	r1, sp, #328	; 0x148
 8016760:	eee1 7a65 	vfms.f32	s15, s2, s11
 8016764:	edd2 5a00 	vldr	s11, [r2]
 8016768:	eee1 0a61 	vfms.f32	s1, s2, s3
 801676c:	eee1 5ac7 	vfms.f32	s11, s3, s14
 8016770:	eef0 1a60 	vmov.f32	s3, s1
 8016774:	eee2 5a46 	vfms.f32	s11, s4, s12
 8016778:	eee2 1a67 	vfms.f32	s3, s4, s15
 801677c:	ee62 5aa5 	vmul.f32	s11, s5, s11
 8016780:	ee62 2aa1 	vmul.f32	s5, s5, s3
 8016784:	eea3 6a65 	vfms.f32	s12, s6, s11
 8016788:	eee2 7ac3 	vfms.f32	s15, s5, s6
 801678c:	eea2 1ae3 	vfms.f32	s2, s5, s7
 8016790:	eea3 7ae5 	vfms.f32	s14, s7, s11
 8016794:	ee26 6a04 	vmul.f32	s12, s12, s8
 8016798:	ee67 7a84 	vmul.f32	s15, s15, s8
 801679c:	edcb 5a05 	vstr	s11, [fp, #20]
 80167a0:	eef0 5a41 	vmov.f32	s11, s2
 80167a4:	eea4 7ac6 	vfms.f32	s14, s9, s12
 80167a8:	eee7 5ae4 	vfms.f32	s11, s15, s9
 80167ac:	ee25 7a07 	vmul.f32	s14, s10, s14
 80167b0:	ee65 5a25 	vmul.f32	s11, s10, s11
 80167b4:	ed8b 6a04 	vstr	s12, [fp, #16]
 80167b8:	ed8b 7a03 	vstr	s14, [fp, #12]
 80167bc:	edcb 2a08 	vstr	s5, [fp, #32]
 80167c0:	edcb 7a07 	vstr	s15, [fp, #28]
 80167c4:	edcb 5a06 	vstr	s11, [fp, #24]
 80167c8:	f7fa fcac 	bl	8011124 <b_dcm2q>
 80167cc:	ed9d 7a53 	vldr	s14, [sp, #332]	; 0x14c
 80167d0:	eddd 7a54 	vldr	s15, [sp, #336]	; 0x150
 80167d4:	ed9d 6a52 	vldr	s12, [sp, #328]	; 0x148
 80167d8:	9b06      	ldr	r3, [sp, #24]
 80167da:	eddd 6a03 	vldr	s13, [sp, #12]
 80167de:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 80167e2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80167e6:	ee36 6a06 	vadd.f32	s12, s12, s12
 80167ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80167ee:	ed8d 6a3d 	vstr	s12, [sp, #244]	; 0xf4
 80167f2:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 80167f6:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	f43e ae54 	beq.w	80154a8 <iNemoEngine_API_Update+0x2b30>
 8016800:	9906      	ldr	r1, [sp, #24]
 8016802:	2200      	movs	r2, #0
 8016804:	464b      	mov	r3, r9
 8016806:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 801680a:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 801680e:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8016812:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8016816:	f7fe ba06 	b.w	8014c26 <iNemoEngine_API_Update+0x22ae>
 801681a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801681e:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8016822:	edd2 3a31 	vldr	s7, [r2, #196]	; 0xc4
 8016826:	edd2 7a33 	vldr	s15, [r2, #204]	; 0xcc
 801682a:	ee77 7ae3 	vsub.f32	s15, s15, s7
 801682e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016832:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8016836:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 801683a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801683e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016842:	ee3f fa23 	vadd.f32	s30, s30, s7
 8016846:	f6fe ac6e 	blt.w	8015126 <iNemoEngine_API_Update+0x27ae>
 801684a:	9b06      	ldr	r3, [sp, #24]
 801684c:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8016850:	eef4 8ac7 	vcmpe.f32	s17, s14
 8016854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016858:	f140 837a 	bpl.w	8016f50 <iNemoEngine_API_Update+0x45d8>
 801685c:	edd3 3a35 	vldr	s7, [r3, #212]	; 0xd4
 8016860:	ed93 4a37 	vldr	s8, [r3, #220]	; 0xdc
 8016864:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016868:	ee34 4a63 	vsub.f32	s8, s8, s7
 801686c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8016870:	ee64 7a27 	vmul.f32	s15, s8, s15
 8016874:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8016878:	ee3f fa23 	vadd.f32	s30, s30, s7
 801687c:	9b06      	ldr	r3, [sp, #24]
 801687e:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8016882:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801688a:	f6fe ac6d 	blt.w	8015168 <iNemoEngine_API_Update+0x27f0>
 801688e:	9b06      	ldr	r3, [sp, #24]
 8016890:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 8016894:	eef4 8ac7 	vcmpe.f32	s17, s14
 8016898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801689c:	f140 82fd 	bpl.w	8016e9a <iNemoEngine_API_Update+0x4522>
 80168a0:	edd3 3a39 	vldr	s7, [r3, #228]	; 0xe4
 80168a4:	ed93 4a3b 	vldr	s8, [r3, #236]	; 0xec
 80168a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80168ac:	ee34 4a63 	vsub.f32	s8, s8, s7
 80168b0:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80168b4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80168b8:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80168bc:	ee3f fa23 	vadd.f32	s30, s30, s7
 80168c0:	9b06      	ldr	r3, [sp, #24]
 80168c2:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80168c6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80168ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168ce:	f6fe ac6d 	blt.w	80151ac <iNemoEngine_API_Update+0x2834>
 80168d2:	9b06      	ldr	r3, [sp, #24]
 80168d4:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 80168d8:	eef4 8ac7 	vcmpe.f32	s17, s14
 80168dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168e0:	f140 831a 	bpl.w	8016f18 <iNemoEngine_API_Update+0x45a0>
 80168e4:	edd3 3a3d 	vldr	s7, [r3, #244]	; 0xf4
 80168e8:	ed93 4a3f 	vldr	s8, [r3, #252]	; 0xfc
 80168ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80168f0:	ee34 4a63 	vsub.f32	s8, s8, s7
 80168f4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80168f8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80168fc:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8016900:	ee3f fa23 	vadd.f32	s30, s30, s7
 8016904:	9b06      	ldr	r3, [sp, #24]
 8016906:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 801690a:	eef4 8ae7 	vcmpe.f32	s17, s15
 801690e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016912:	f6fe ac6d 	blt.w	80151f0 <iNemoEngine_API_Update+0x2878>
 8016916:	9b06      	ldr	r3, [sp, #24]
 8016918:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 801691c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8016920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016924:	f140 82c3 	bpl.w	8016eae <iNemoEngine_API_Update+0x4536>
 8016928:	edd3 3a41 	vldr	s7, [r3, #260]	; 0x104
 801692c:	ed93 4a43 	vldr	s8, [r3, #268]	; 0x10c
 8016930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016934:	ee34 4a63 	vsub.f32	s8, s8, s7
 8016938:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801693c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8016940:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8016944:	ee3f fa23 	vadd.f32	s30, s30, s7
 8016948:	9b06      	ldr	r3, [sp, #24]
 801694a:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 801694e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016956:	f6fe ac6d 	blt.w	8015234 <iNemoEngine_API_Update+0x28bc>
 801695a:	9b06      	ldr	r3, [sp, #24]
 801695c:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
 8016960:	eef4 8ac7 	vcmpe.f32	s17, s14
 8016964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016968:	f140 82d2 	bpl.w	8016f10 <iNemoEngine_API_Update+0x4598>
 801696c:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 8016970:	edd3 4a47 	vldr	s9, [r3, #284]	; 0x11c
 8016974:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016978:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801697c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8016980:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8016984:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8016988:	ee3f fa04 	vadd.f32	s30, s30, s8
 801698c:	f7fd ba93 	b.w	8013eb6 <iNemoEngine_API_Update+0x153e>
 8016990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016994:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8016998:	edd3 3a4b 	vldr	s7, [r3, #300]	; 0x12c
 801699c:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 80169a0:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80169a4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80169a8:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80169ac:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 80169b0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80169b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169b8:	ee3c ca23 	vadd.f32	s24, s24, s7
 80169bc:	f6fd aaab 	blt.w	8013f16 <iNemoEngine_API_Update+0x159e>
 80169c0:	9b06      	ldr	r3, [sp, #24]
 80169c2:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 80169c6:	eef4 8ac7 	vcmpe.f32	s17, s14
 80169ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169ce:	f140 8260 	bpl.w	8016e92 <iNemoEngine_API_Update+0x451a>
 80169d2:	edd3 3a4f 	vldr	s7, [r3, #316]	; 0x13c
 80169d6:	ed93 4a51 	vldr	s8, [r3, #324]	; 0x144
 80169da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80169de:	ee34 4a63 	vsub.f32	s8, s8, s7
 80169e2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80169e6:	ee64 7a27 	vmul.f32	s15, s8, s15
 80169ea:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80169ee:	ee3c ca23 	vadd.f32	s24, s24, s7
 80169f2:	9b06      	ldr	r3, [sp, #24]
 80169f4:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 80169f8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80169fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a00:	f6fd aaaa 	blt.w	8013f58 <iNemoEngine_API_Update+0x15e0>
 8016a04:	9b06      	ldr	r3, [sp, #24]
 8016a06:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8016a0a:	eef4 8ac7 	vcmpe.f32	s17, s14
 8016a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a12:	f140 8237 	bpl.w	8016e84 <iNemoEngine_API_Update+0x450c>
 8016a16:	edd3 3a53 	vldr	s7, [r3, #332]	; 0x14c
 8016a1a:	ed93 4a55 	vldr	s8, [r3, #340]	; 0x154
 8016a1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016a22:	ee34 4a63 	vsub.f32	s8, s8, s7
 8016a26:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8016a2a:	ee64 7a27 	vmul.f32	s15, s8, s15
 8016a2e:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8016a32:	ee3c ca23 	vadd.f32	s24, s24, s7
 8016a36:	9b06      	ldr	r3, [sp, #24]
 8016a38:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8016a3c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a44:	f6fd aaaa 	blt.w	8013f9c <iNemoEngine_API_Update+0x1624>
 8016a48:	9b06      	ldr	r3, [sp, #24]
 8016a4a:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8016a4e:	eef4 8ac7 	vcmpe.f32	s17, s14
 8016a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a56:	f140 8270 	bpl.w	8016f3a <iNemoEngine_API_Update+0x45c2>
 8016a5a:	edd3 3a57 	vldr	s7, [r3, #348]	; 0x15c
 8016a5e:	ed93 4a59 	vldr	s8, [r3, #356]	; 0x164
 8016a62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016a66:	ee34 4a63 	vsub.f32	s8, s8, s7
 8016a6a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8016a6e:	ee64 7a27 	vmul.f32	s15, s8, s15
 8016a72:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8016a76:	ee3c ca23 	vadd.f32	s24, s24, s7
 8016a7a:	9b06      	ldr	r3, [sp, #24]
 8016a7c:	edd3 7a5a 	vldr	s15, [r3, #360]	; 0x168
 8016a80:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a88:	f6fd aaaa 	blt.w	8013fe0 <iNemoEngine_API_Update+0x1668>
 8016a8c:	9b06      	ldr	r3, [sp, #24]
 8016a8e:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 8016a92:	eef4 8ac7 	vcmpe.f32	s17, s14
 8016a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a9a:	f140 8252 	bpl.w	8016f42 <iNemoEngine_API_Update+0x45ca>
 8016a9e:	edd3 3a5b 	vldr	s7, [r3, #364]	; 0x16c
 8016aa2:	ed93 4a5d 	vldr	s8, [r3, #372]	; 0x174
 8016aa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016aaa:	ee34 4a63 	vsub.f32	s8, s8, s7
 8016aae:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8016ab2:	ee64 7a27 	vmul.f32	s15, s8, s15
 8016ab6:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8016aba:	ee3c ca23 	vadd.f32	s24, s24, s7
 8016abe:	9b06      	ldr	r3, [sp, #24]
 8016ac0:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8016ac4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016acc:	f6fd aaaa 	blt.w	8014024 <iNemoEngine_API_Update+0x16ac>
 8016ad0:	9b06      	ldr	r3, [sp, #24]
 8016ad2:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 8016ad6:	eef4 8ac7 	vcmpe.f32	s17, s14
 8016ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ade:	f140 8222 	bpl.w	8016f26 <iNemoEngine_API_Update+0x45ae>
 8016ae2:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 8016ae6:	edd3 4a61 	vldr	s9, [r3, #388]	; 0x184
 8016aea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016aee:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8016af2:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8016af6:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8016afa:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8016afe:	ee3c ca04 	vadd.f32	s24, s24, s8
 8016b02:	f7fd bb2a 	b.w	801415a <iNemoEngine_API_Update+0x17e2>
 8016b06:	a94e      	add	r1, sp, #312	; 0x138
 8016b08:	a868      	add	r0, sp, #416	; 0x1a0
 8016b0a:	f7fa fb0b 	bl	8011124 <b_dcm2q>
 8016b0e:	9d06      	ldr	r5, [sp, #24]
 8016b10:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8016b14:	edc5 7a72 	vstr	s15, [r5, #456]	; 0x1c8
 8016b18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016b1c:	edc5 7a73 	vstr	s15, [r5, #460]	; 0x1cc
 8016b20:	4621      	mov	r1, r4
 8016b22:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8016b26:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
 8016b2a:	edcd 7a05 	vstr	s15, [sp, #20]
 8016b2e:	f002 fb6f 	bl	8019210 <memset>
 8016b32:	4be5      	ldr	r3, [pc, #916]	; (8016ec8 <iNemoEngine_API_Update+0x4550>)
 8016b34:	702c      	strb	r4, [r5, #0]
 8016b36:	eddd 7a05 	vldr	s15, [sp, #20]
 8016b3a:	edd5 2a02 	vldr	s5, [r5, #8]
 8016b3e:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 8016b42:	9a06      	ldr	r2, [sp, #24]
 8016b44:	f8c5 31d4 	str.w	r3, [r5, #468]	; 0x1d4
 8016b48:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
 8016b4c:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
 8016b50:	f8c5 324c 	str.w	r3, [r5, #588]	; 0x24c
 8016b54:	f8c5 3274 	str.w	r3, [r5, #628]	; 0x274
 8016b58:	f8c5 329c 	str.w	r3, [r5, #668]	; 0x29c
 8016b5c:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
 8016b60:	f8c5 32ec 	str.w	r3, [r5, #748]	; 0x2ec
 8016b64:	f8c5 3314 	str.w	r3, [r5, #788]	; 0x314
 8016b68:	2401      	movs	r4, #1
 8016b6a:	f7fd bb44 	b.w	80141f6 <iNemoEngine_API_Update+0x187e>
 8016b6e:	290a      	cmp	r1, #10
 8016b70:	f000 815d 	beq.w	8016e2e <iNemoEngine_API_Update+0x44b6>
 8016b74:	1c4b      	adds	r3, r1, #1
 8016b76:	9906      	ldr	r1, [sp, #24]
 8016b78:	f881 31a0 	strb.w	r3, [r1, #416]	; 0x1a0
 8016b7c:	4613      	mov	r3, r2
 8016b7e:	2200      	movs	r2, #0
 8016b80:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8016b84:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8016b88:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8016b8c:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8016b90:	f7fe b849 	b.w	8014c26 <iNemoEngine_API_Update+0x22ae>
 8016b94:	ed9d 7a55 	vldr	s14, [sp, #340]	; 0x154
 8016b98:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ba0:	f340 824f 	ble.w	8017042 <iNemoEngine_API_Update+0x46ca>
 8016ba4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bb0:	f140 8244 	bpl.w	801703c <iNemoEngine_API_Update+0x46c4>
 8016bb4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016bb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bc0:	f140 81f9 	bpl.w	8016fb6 <iNemoEngine_API_Update+0x463e>
 8016bc4:	eddf 7ace 	vldr	s15, [pc, #824]	; 8016f00 <iNemoEngine_API_Update+0x4588>
 8016bc8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016bd0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016bd4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016bd8:	eef0 8a46 	vmov.f32	s17, s12
 8016bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016be0:	eee7 8aa5 	vfma.f32	s17, s15, s11
 8016be4:	f2c0 81fb 	blt.w	8016fde <iNemoEngine_API_Update+0x4666>
 8016be8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf4:	f140 81fb 	bpl.w	8016fee <iNemoEngine_API_Update+0x4676>
 8016bf8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016c00:	ed9f 6ab2 	vldr	s12, [pc, #712]	; 8016ecc <iNemoEngine_API_Update+0x4554>
 8016c04:	eddf 8ab2 	vldr	s17, [pc, #712]	; 8016ed0 <iNemoEngine_API_Update+0x4558>
 8016c08:	eee7 8a86 	vfma.f32	s17, s15, s12
 8016c0c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8016c10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c18:	f2c0 81fb 	blt.w	8017012 <iNemoEngine_API_Update+0x469a>
 8016c1c:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8016c20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c28:	f140 81fb 	bpl.w	8017022 <iNemoEngine_API_Update+0x46aa>
 8016c2c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8016c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016c34:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8016c38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016c3c:	eee7 8a87 	vfma.f32	s17, s15, s14
 8016c40:	9a06      	ldr	r2, [sp, #24]
 8016c42:	2300      	movs	r3, #0
 8016c44:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 8016c48:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 8016c4c:	f7fe bc29 	b.w	80154a2 <iNemoEngine_API_Update+0x2b2a>
 8016c50:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8016ed4 <iNemoEngine_API_Update+0x455c>
 8016c54:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c5c:	f57e ad78 	bpl.w	8015750 <iNemoEngine_API_Update+0x2dd8>
 8016c60:	ed9f 6a9d 	vldr	s12, [pc, #628]	; 8016ed8 <iNemoEngine_API_Update+0x4560>
 8016c64:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8016f00 <iNemoEngine_API_Update+0x4588>
 8016c68:	eddf 5a9c 	vldr	s11, [pc, #624]	; 8016edc <iNemoEngine_API_Update+0x4564>
 8016c6c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8016c70:	ee26 6a26 	vmul.f32	s12, s12, s13
 8016c74:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8016ee0 <iNemoEngine_API_Update+0x4568>
 8016c78:	eee6 6a25 	vfma.f32	s13, s12, s11
 8016c7c:	ed9f 6a99 	vldr	s12, [pc, #612]	; 8016ee4 <iNemoEngine_API_Update+0x456c>
 8016c80:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c88:	f6fe ad78 	blt.w	801577c <iNemoEngine_API_Update+0x2e04>
 8016c8c:	eddf 6a96 	vldr	s13, [pc, #600]	; 8016ee8 <iNemoEngine_API_Update+0x4570>
 8016c90:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c98:	f57e ad78 	bpl.w	801578c <iNemoEngine_API_Update+0x2e14>
 8016c9c:	ed9f 6a91 	vldr	s12, [pc, #580]	; 8016ee4 <iNemoEngine_API_Update+0x456c>
 8016ca0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8016ca4:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8016ca8:	ee26 6a26 	vmul.f32	s12, s12, s13
 8016cac:	eef3 5a04 	vmov.f32	s11, #52	; 0x41a00000  20.0
 8016cb0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8016cb4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8016cb8:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8016f08 <iNemoEngine_API_Update+0x4590>
 8016cbc:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cc4:	f6fe ad78 	blt.w	80157b8 <iNemoEngine_API_Update+0x2e40>
 8016cc8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016ccc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cd4:	f57e ad77 	bpl.w	80157c6 <iNemoEngine_API_Update+0x2e4e>
 8016cd8:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8016f08 <iNemoEngine_API_Update+0x4590>
 8016cdc:	eddf 6a83 	vldr	s13, [pc, #524]	; 8016eec <iNemoEngine_API_Update+0x4574>
 8016ce0:	eddf 5a83 	vldr	s11, [pc, #524]	; 8016ef0 <iNemoEngine_API_Update+0x4578>
 8016ce4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8016ce8:	ee26 6a26 	vmul.f32	s12, s12, s13
 8016cec:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8016cf0:	eee6 6a25 	vfma.f32	s13, s12, s11
 8016cf4:	f7fe bd75 	b.w	80157e2 <iNemoEngine_API_Update+0x2e6a>
 8016cf8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8016ef4 <iNemoEngine_API_Update+0x457c>
 8016cfc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d04:	f57e ad06 	bpl.w	8015714 <iNemoEngine_API_Update+0x2d9c>
 8016d08:	eddf 6a73 	vldr	s13, [pc, #460]	; 8016ed8 <iNemoEngine_API_Update+0x4560>
 8016d0c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d14:	da9c      	bge.n	8016c50 <iNemoEngine_API_Update+0x42d8>
 8016d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016d1a:	f7fe bd11 	b.w	8015740 <iNemoEngine_API_Update+0x2dc8>
 8016d1e:	2104      	movs	r1, #4
 8016d20:	f04f 0e03 	mov.w	lr, #3
 8016d24:	2706      	movs	r7, #6
 8016d26:	f04f 0c07 	mov.w	ip, #7
 8016d2a:	4608      	mov	r0, r1
 8016d2c:	2301      	movs	r3, #1
 8016d2e:	2600      	movs	r6, #0
 8016d30:	f7ff bbfa 	b.w	8016528 <iNemoEngine_API_Update+0x3bb0>
 8016d34:	eddf 3a70 	vldr	s7, [pc, #448]	; 8016ef8 <iNemoEngine_API_Update+0x4580>
 8016d38:	ed9f 5a70 	vldr	s10, [pc, #448]	; 8016efc <iNemoEngine_API_Update+0x4584>
 8016d3c:	ac43      	add	r4, sp, #268	; 0x10c
 8016d3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016d42:	edd0 7a7c 	vldr	s15, [r0, #496]	; 0x1f0
 8016d46:	f5a0 73ae 	sub.w	r3, r0, #348	; 0x15c
 8016d4a:	3101      	adds	r1, #1
 8016d4c:	eeb0 7a67 	vmov.f32	s14, s15
 8016d50:	461a      	mov	r2, r3
 8016d52:	edd2 5ad6 	vldr	s11, [r2, #856]	; 0x358
 8016d56:	320c      	adds	r2, #12
 8016d58:	4290      	cmp	r0, r2
 8016d5a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8016d5e:	d1f8      	bne.n	8016d52 <iNemoEngine_API_Update+0x43da>
 8016d60:	ee27 7a23 	vmul.f32	s14, s14, s7
 8016d64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016d6c:	edd3 5ad6 	vldr	s11, [r3, #856]	; 0x358
 8016d70:	330c      	adds	r3, #12
 8016d72:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8016d76:	4298      	cmp	r0, r3
 8016d78:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8016d7c:	d1f6      	bne.n	8016d6c <iNemoEngine_API_Update+0x43f4>
 8016d7e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016d82:	2902      	cmp	r1, #2
 8016d84:	f100 0004 	add.w	r0, r0, #4
 8016d88:	ece4 7a01 	vstmia	r4!, {s15}
 8016d8c:	d1d9      	bne.n	8016d42 <iNemoEngine_API_Update+0x43ca>
 8016d8e:	eddd 5a43 	vldr	s11, [sp, #268]	; 0x10c
 8016d92:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 8016d96:	ed9d 7a45 	vldr	s14, [sp, #276]	; 0x114
 8016d9a:	eeb1 3ae5 	vsqrt.f32	s6, s11
 8016d9e:	eef1 3ae7 	vsqrt.f32	s7, s15
 8016da2:	eeb1 5ac7 	vsqrt.f32	s10, s14
 8016da6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8016daa:	eef3 5a00 	vmov.f32	s11, #48	; 0x41800000  16.0
 8016dae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016db2:	ed8d 3a43 	vstr	s6, [sp, #268]	; 0x10c
 8016db6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dbe:	edcd 3a44 	vstr	s7, [sp, #272]	; 0x110
 8016dc2:	ed8d 5a45 	vstr	s10, [sp, #276]	; 0x114
 8016dc6:	f57e abd4 	bpl.w	8015572 <iNemoEngine_API_Update+0x2bfa>
 8016dca:	9906      	ldr	r1, [sp, #24]
 8016dcc:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 8016dd0:	2200      	movs	r2, #0
 8016dd2:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 8016dd6:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8016dda:	464b      	mov	r3, r9
 8016ddc:	704a      	strb	r2, [r1, #1]
 8016dde:	f7fd bf22 	b.w	8014c26 <iNemoEngine_API_Update+0x22ae>
 8016de2:	2208      	movs	r2, #8
 8016de4:	9203      	str	r2, [sp, #12]
 8016de6:	2205      	movs	r2, #5
 8016de8:	920e      	str	r2, [sp, #56]	; 0x38
 8016dea:	2202      	movs	r2, #2
 8016dec:	f7ff bbb3 	b.w	8016556 <iNemoEngine_API_Update+0x3bde>
 8016df0:	2301      	movs	r3, #1
 8016df2:	f7fd bf04 	b.w	8014bfe <iNemoEngine_API_Update+0x2286>
 8016df6:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8016dfa:	2b27      	cmp	r3, #39	; 0x27
 8016dfc:	d838      	bhi.n	8016e70 <iNemoEngine_API_Update+0x44f8>
 8016dfe:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 8016e02:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 8016e06:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8016e0a:	9906      	ldr	r1, [sp, #24]
 8016e0c:	f8b1 31a8 	ldrh.w	r3, [r1, #424]	; 0x1a8
 8016e10:	3301      	adds	r3, #1
 8016e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016e16:	bf14      	ite	ne
 8016e18:	b29b      	uxthne	r3, r3
 8016e1a:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8016e1e:	2201      	movs	r2, #1
 8016e20:	f8a1 31a8 	strh.w	r3, [r1, #424]	; 0x1a8
 8016e24:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8016e28:	464b      	mov	r3, r9
 8016e2a:	f7fd befc 	b.w	8014c26 <iNemoEngine_API_Update+0x22ae>
 8016e2e:	9906      	ldr	r1, [sp, #24]
 8016e30:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8016e34:	f891 31a3 	ldrb.w	r3, [r1, #419]	; 0x1a3
 8016e38:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 8016e3c:	3301      	adds	r3, #1
 8016e3e:	f881 31a3 	strb.w	r3, [r1, #419]	; 0x1a3
 8016e42:	784b      	ldrb	r3, [r1, #1]
 8016e44:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8016e48:	f240 1201 	movw	r2, #257	; 0x101
 8016e4c:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8016e50:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8016e54:	b13b      	cbz	r3, 8016e66 <iNemoEngine_API_Update+0x44ee>
 8016e56:	2300      	movs	r3, #0
 8016e58:	ed81 ea6f 	vstr	s28, [r1, #444]	; 0x1bc
 8016e5c:	edc1 ea70 	vstr	s29, [r1, #448]	; 0x1c0
 8016e60:	edc1 ba71 	vstr	s23, [r1, #452]	; 0x1c4
 8016e64:	704b      	strb	r3, [r1, #1]
 8016e66:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8016e6a:	2301      	movs	r3, #1
 8016e6c:	f7fd bedb 	b.w	8014c26 <iNemoEngine_API_Update+0x22ae>
 8016e70:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 8016e74:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8016e78:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8016e7c:	e7c5      	b.n	8016e0a <iNemoEngine_API_Update+0x4492>
 8016e7e:	eef0 7a47 	vmov.f32	s15, s14
 8016e82:	e5bf      	b.n	8016a04 <iNemoEngine_API_Update+0x408c>
 8016e84:	eef0 7a47 	vmov.f32	s15, s14
 8016e88:	f7fd b86f 	b.w	8013f6a <iNemoEngine_API_Update+0x15f2>
 8016e8c:	eef0 7a47 	vmov.f32	s15, s14
 8016e90:	e563      	b.n	801695a <iNemoEngine_API_Update+0x3fe2>
 8016e92:	eef0 7a47 	vmov.f32	s15, s14
 8016e96:	f7fd b846 	b.w	8013f26 <iNemoEngine_API_Update+0x15ae>
 8016e9a:	eef0 7a47 	vmov.f32	s15, s14
 8016e9e:	f7fe b96c 	b.w	801517a <iNemoEngine_API_Update+0x2802>
 8016ea2:	eef0 7a47 	vmov.f32	s15, s14
 8016ea6:	e4f2      	b.n	801688e <iNemoEngine_API_Update+0x3f16>
 8016ea8:	eef0 7a47 	vmov.f32	s15, s14
 8016eac:	e533      	b.n	8016916 <iNemoEngine_API_Update+0x3f9e>
 8016eae:	eef0 7a47 	vmov.f32	s15, s14
 8016eb2:	f7fe b9a6 	b.w	8015202 <iNemoEngine_API_Update+0x288a>
 8016eb6:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8016eba:	9315      	str	r3, [sp, #84]	; 0x54
 8016ebc:	f7fc b886 	b.w	8012fcc <iNemoEngine_API_Update+0x654>
 8016ec0:	f505 6597 	add.w	r5, r5, #1208	; 0x4b8
 8016ec4:	f7fe be2c 	b.w	8015b20 <iNemoEngine_API_Update+0x31a8>
 8016ec8:	40a00000 	.word	0x40a00000
 8016ecc:	3e999998 	.word	0x3e999998
 8016ed0:	3f99999a 	.word	0x3f99999a
 8016ed4:	3cf5c28f 	.word	0x3cf5c28f
 8016ed8:	3c75c28f 	.word	0x3c75c28f
 8016edc:	42855556 	.word	0x42855556
 8016ee0:	3f866666 	.word	0x3f866666
 8016ee4:	3d4ccccd 	.word	0x3d4ccccd
 8016ee8:	3dcccccd 	.word	0x3dcccccd
 8016eec:	42200000 	.word	0x42200000
 8016ef0:	40555555 	.word	0x40555555
 8016ef4:	3c23d70a 	.word	0x3c23d70a
 8016ef8:	3d088889 	.word	0x3d088889
 8016efc:	3d0d3dcb 	.word	0x3d0d3dcb
 8016f00:	3dccccd0 	.word	0x3dccccd0
 8016f04:	3f8ccccd 	.word	0x3f8ccccd
 8016f08:	3e4ccccd 	.word	0x3e4ccccd
 8016f0c:	00000000 	.word	0x00000000
 8016f10:	eef0 7a47 	vmov.f32	s15, s14
 8016f14:	f7fe b997 	b.w	8015246 <iNemoEngine_API_Update+0x28ce>
 8016f18:	eef0 7a47 	vmov.f32	s15, s14
 8016f1c:	f7fe b94f 	b.w	80151be <iNemoEngine_API_Update+0x2846>
 8016f20:	eef0 7a47 	vmov.f32	s15, s14
 8016f24:	e4d5      	b.n	80168d2 <iNemoEngine_API_Update+0x3f5a>
 8016f26:	eef0 7a47 	vmov.f32	s15, s14
 8016f2a:	f7fd b884 	b.w	8014036 <iNemoEngine_API_Update+0x16be>
 8016f2e:	eef0 7a47 	vmov.f32	s15, s14
 8016f32:	e5cd      	b.n	8016ad0 <iNemoEngine_API_Update+0x4158>
 8016f34:	eef0 7a47 	vmov.f32	s15, s14
 8016f38:	e586      	b.n	8016a48 <iNemoEngine_API_Update+0x40d0>
 8016f3a:	eef0 7a47 	vmov.f32	s15, s14
 8016f3e:	f7fd b836 	b.w	8013fae <iNemoEngine_API_Update+0x1636>
 8016f42:	eef0 7a47 	vmov.f32	s15, s14
 8016f46:	f7fd b854 	b.w	8013ff2 <iNemoEngine_API_Update+0x167a>
 8016f4a:	eef0 7a47 	vmov.f32	s15, s14
 8016f4e:	e59d      	b.n	8016a8c <iNemoEngine_API_Update+0x4114>
 8016f50:	eef0 7a47 	vmov.f32	s15, s14
 8016f54:	f7fe b8ef 	b.w	8015136 <iNemoEngine_API_Update+0x27be>
 8016f58:	9906      	ldr	r1, [sp, #24]
 8016f5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016f5e:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 8016f62:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 8016f66:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 8016f6a:	f7fe ba9a 	b.w	80154a2 <iNemoEngine_API_Update+0x2b2a>
 8016f6e:	9906      	ldr	r1, [sp, #24]
 8016f70:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 8016f74:	3301      	adds	r3, #1
 8016f76:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 8016f7a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8016f7e:	460b      	mov	r3, r1
 8016f80:	f7ff ba49 	b.w	8016416 <iNemoEngine_API_Update+0x3a9e>
 8016f84:	2a00      	cmp	r2, #0
 8016f86:	f73d afa4 	bgt.w	8014ed2 <iNemoEngine_API_Update+0x255a>
 8016f8a:	eddd 5a83 	vldr	s11, [sp, #524]	; 0x20c
 8016f8e:	ed9d 7a84 	vldr	s14, [sp, #528]	; 0x210
 8016f92:	eddd 7a85 	vldr	s15, [sp, #532]	; 0x214
 8016f96:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8016f9a:	ee65 5a86 	vmul.f32	s11, s11, s12
 8016f9e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016fa2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016fa6:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 8016faa:	ed8d 7a84 	vstr	s14, [sp, #528]	; 0x210
 8016fae:	edcd 7a85 	vstr	s15, [sp, #532]	; 0x214
 8016fb2:	f7fd bb24 	b.w	80145fe <iNemoEngine_API_Update+0x1c86>
 8016fb6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016fba:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fc2:	f57f ae11 	bpl.w	8016be8 <iNemoEngine_API_Update+0x4270>
 8016fc6:	ed1f 6a32 	vldr	s12, [pc, #-200]	; 8016f00 <iNemoEngine_API_Update+0x4588>
 8016fca:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 8016f04 <iNemoEngine_API_Update+0x458c>
 8016fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016fd2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016fd6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8016fda:	eee7 8a86 	vfma.f32	s17, s15, s12
 8016fde:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fea:	f6ff ae0f 	blt.w	8016c0c <iNemoEngine_API_Update+0x4294>
 8016fee:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8016ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ffa:	f57f ae0f 	bpl.w	8016c1c <iNemoEngine_API_Update+0x42a4>
 8016ffe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017006:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801700a:	eef7 8a08 	vmov.f32	s17, #120	; 0x3fc00000  1.5
 801700e:	eee7 8a86 	vfma.f32	s17, s15, s12
 8017012:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8017016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801701a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801701e:	f6ff ae0f 	blt.w	8016c40 <iNemoEngine_API_Update+0x42c8>
 8017022:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8017026:	ee77 7a67 	vsub.f32	s15, s14, s15
 801702a:	ed1f 7a49 	vldr	s14, [pc, #-292]	; 8016f08 <iNemoEngine_API_Update+0x4590>
 801702e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017032:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
 8017036:	eee7 8a87 	vfma.f32	s17, s15, s14
 801703a:	e601      	b.n	8016c40 <iNemoEngine_API_Update+0x42c8>
 801703c:	eef1 8a04 	vmov.f32	s17, #20	; 0x40a00000  5.0
 8017040:	e5fe      	b.n	8016c40 <iNemoEngine_API_Update+0x42c8>
 8017042:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017046:	e5fb      	b.n	8016c40 <iNemoEngine_API_Update+0x42c8>
 8017048:	ed1f 8a50 	vldr	s16, [pc, #-320]	; 8016f0c <iNemoEngine_API_Update+0x4594>
 801704c:	f7fb bdeb 	b.w	8012c26 <iNemoEngine_API_Update+0x2ae>

08017050 <MotionFX_initialize>:
 8017050:	4a4c      	ldr	r2, [pc, #304]	; (8017184 <MotionFX_initialize+0x134>)
 8017052:	6813      	ldr	r3, [r2, #0]
 8017054:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
 8017058:	f023 0301 	bic.w	r3, r3, #1
 801705c:	b530      	push	{r4, r5, lr}
 801705e:	6013      	str	r3, [r2, #0]
 8017060:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 8017064:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8017068:	400b      	ands	r3, r1
 801706a:	f24c 2240 	movw	r2, #49728	; 0xc240
 801706e:	4293      	cmp	r3, r2
 8017070:	b085      	sub	sp, #20
 8017072:	4604      	mov	r4, r0
 8017074:	d013      	beq.n	801709e <MotionFX_initialize+0x4e>
 8017076:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 801707a:	f24c 2270 	movw	r2, #49776	; 0xc270
 801707e:	4019      	ands	r1, r3
 8017080:	4291      	cmp	r1, r2
 8017082:	d00c      	beq.n	801709e <MotionFX_initialize+0x4e>
 8017084:	4a40      	ldr	r2, [pc, #256]	; (8017188 <MotionFX_initialize+0x138>)
 8017086:	2301      	movs	r3, #1
 8017088:	6093      	str	r3, [r2, #8]
 801708a:	6893      	ldr	r3, [r2, #8]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d1fc      	bne.n	801708a <MotionFX_initialize+0x3a>
 8017090:	4b3e      	ldr	r3, [pc, #248]	; (801718c <MotionFX_initialize+0x13c>)
 8017092:	6013      	str	r3, [r2, #0]
 8017094:	6812      	ldr	r2, [r2, #0]
 8017096:	4b3e      	ldr	r3, [pc, #248]	; (8017190 <MotionFX_initialize+0x140>)
 8017098:	429a      	cmp	r2, r3
 801709a:	d02c      	beq.n	80170f6 <MotionFX_initialize+0xa6>
 801709c:	e7fe      	b.n	801709c <MotionFX_initialize+0x4c>
 801709e:	4b3d      	ldr	r3, [pc, #244]	; (8017194 <MotionFX_initialize+0x144>)
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d1ee      	bne.n	8017084 <MotionFX_initialize+0x34>
 80170a6:	4a3c      	ldr	r2, [pc, #240]	; (8017198 <MotionFX_initialize+0x148>)
 80170a8:	6813      	ldr	r3, [r2, #0]
 80170aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80170ae:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80170b2:	d056      	beq.n	8017162 <MotionFX_initialize+0x112>
 80170b4:	6813      	ldr	r3, [r2, #0]
 80170b6:	f240 4183 	movw	r1, #1155	; 0x483
 80170ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80170be:	428b      	cmp	r3, r1
 80170c0:	d04f      	beq.n	8017162 <MotionFX_initialize+0x112>
 80170c2:	6813      	ldr	r3, [r2, #0]
 80170c4:	f240 4285 	movw	r2, #1157	; 0x485
 80170c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80170cc:	4293      	cmp	r3, r2
 80170ce:	d048      	beq.n	8017162 <MotionFX_initialize+0x112>
 80170d0:	4b32      	ldr	r3, [pc, #200]	; (801719c <MotionFX_initialize+0x14c>)
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80170d8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80170dc:	d1d2      	bne.n	8017084 <MotionFX_initialize+0x34>
 80170de:	4a30      	ldr	r2, [pc, #192]	; (80171a0 <MotionFX_initialize+0x150>)
 80170e0:	2301      	movs	r3, #1
 80170e2:	6093      	str	r3, [r2, #8]
 80170e4:	6893      	ldr	r3, [r2, #8]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d1fc      	bne.n	80170e4 <MotionFX_initialize+0x94>
 80170ea:	4b28      	ldr	r3, [pc, #160]	; (801718c <MotionFX_initialize+0x13c>)
 80170ec:	6013      	str	r3, [r2, #0]
 80170ee:	6812      	ldr	r2, [r2, #0]
 80170f0:	4b27      	ldr	r3, [pc, #156]	; (8017190 <MotionFX_initialize+0x140>)
 80170f2:	429a      	cmp	r2, r3
 80170f4:	d1d2      	bne.n	801709c <MotionFX_initialize+0x4c>
 80170f6:	4b2b      	ldr	r3, [pc, #172]	; (80171a4 <MotionFX_initialize+0x154>)
 80170f8:	4a2b      	ldr	r2, [pc, #172]	; (80171a8 <MotionFX_initialize+0x158>)
 80170fa:	9303      	str	r3, [sp, #12]
 80170fc:	2501      	movs	r5, #1
 80170fe:	4620      	mov	r0, r4
 8017100:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8017104:	f882 53c4 	strb.w	r5, [r2, #964]	; 0x3c4
 8017108:	f7fb f946 	bl	8012398 <MFX_emptyAttitude>
 801710c:	a901      	add	r1, sp, #4
 801710e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8017112:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8017116:	f7f9 ff03 	bl	8010f20 <updateOrientation>
 801711a:	a903      	add	r1, sp, #12
 801711c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017120:	f7f9 fefe 	bl	8010f20 <updateOrientation>
 8017124:	a902      	add	r1, sp, #8
 8017126:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801712a:	f7f9 fef9 	bl	8010f20 <updateOrientation>
 801712e:	4b1f      	ldr	r3, [pc, #124]	; (80171ac <MotionFX_initialize+0x15c>)
 8017130:	491f      	ldr	r1, [pc, #124]	; (80171b0 <MotionFX_initialize+0x160>)
 8017132:	6363      	str	r3, [r4, #52]	; 0x34
 8017134:	4b1f      	ldr	r3, [pc, #124]	; (80171b4 <MotionFX_initialize+0x164>)
 8017136:	4a20      	ldr	r2, [pc, #128]	; (80171b8 <MotionFX_initialize+0x168>)
 8017138:	62a1      	str	r1, [r4, #40]	; 0x28
 801713a:	61e3      	str	r3, [r4, #28]
 801713c:	491f      	ldr	r1, [pc, #124]	; (80171bc <MotionFX_initialize+0x16c>)
 801713e:	61a2      	str	r2, [r4, #24]
 8017140:	2300      	movs	r3, #0
 8017142:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8017146:	f44f 7281 	mov.w	r2, #258	; 0x102
 801714a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801714e:	f240 1301 	movw	r3, #257	; 0x101
 8017152:	62e0      	str	r0, [r4, #44]	; 0x2c
 8017154:	6221      	str	r1, [r4, #32]
 8017156:	80a2      	strh	r2, [r4, #4]
 8017158:	f8a4 300d 	strh.w	r3, [r4, #13]
 801715c:	73e5      	strb	r5, [r4, #15]
 801715e:	b005      	add	sp, #20
 8017160:	bd30      	pop	{r4, r5, pc}
 8017162:	4a17      	ldr	r2, [pc, #92]	; (80171c0 <MotionFX_initialize+0x170>)
 8017164:	2301      	movs	r3, #1
 8017166:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801716a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801716e:	2b00      	cmp	r3, #0
 8017170:	d1fb      	bne.n	801716a <MotionFX_initialize+0x11a>
 8017172:	4b06      	ldr	r3, [pc, #24]	; (801718c <MotionFX_initialize+0x13c>)
 8017174:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8017178:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801717c:	4b04      	ldr	r3, [pc, #16]	; (8017190 <MotionFX_initialize+0x140>)
 801717e:	429a      	cmp	r2, r3
 8017180:	d0b9      	beq.n	80170f6 <MotionFX_initialize+0xa6>
 8017182:	e78b      	b.n	801709c <MotionFX_initialize+0x4c>
 8017184:	e0002000 	.word	0xe0002000
 8017188:	40023000 	.word	0x40023000
 801718c:	f407a5c2 	.word	0xf407a5c2
 8017190:	b5e8b5cd 	.word	0xb5e8b5cd
 8017194:	e0042000 	.word	0xe0042000
 8017198:	5c001000 	.word	0x5c001000
 801719c:	50081000 	.word	0x50081000
 80171a0:	4c004000 	.word	0x4c004000
 80171a4:	00756e65 	.word	0x00756e65
 80171a8:	20000224 	.word	0x20000224
 80171ac:	3f2ac083 	.word	0x3f2ac083
 80171b0:	3f666666 	.word	0x3f666666
 80171b4:	3a378034 	.word	0x3a378034
 80171b8:	3a51b717 	.word	0x3a51b717
 80171bc:	3b378034 	.word	0x3b378034
 80171c0:	58024000 	.word	0x58024000

080171c4 <MotionFX_setKnobs>:
 80171c4:	4b24      	ldr	r3, [pc, #144]	; (8017258 <MotionFX_setKnobs+0x94>)
 80171c6:	f893 23c4 	ldrb.w	r2, [r3, #964]	; 0x3c4
 80171ca:	b902      	cbnz	r2, 80171ce <MotionFX_setKnobs+0xa>
 80171cc:	4770      	bx	lr
 80171ce:	460b      	mov	r3, r1
 80171d0:	2900      	cmp	r1, #0
 80171d2:	d0fb      	beq.n	80171cc <MotionFX_setKnobs+0x8>
 80171d4:	b510      	push	{r4, lr}
 80171d6:	4604      	mov	r4, r0
 80171d8:	689a      	ldr	r2, [r3, #8]
 80171da:	6808      	ldr	r0, [r1, #0]
 80171dc:	6849      	ldr	r1, [r1, #4]
 80171de:	62e1      	str	r1, [r4, #44]	; 0x2c
 80171e0:	62a0      	str	r0, [r4, #40]	; 0x28
 80171e2:	6362      	str	r2, [r4, #52]	; 0x34
 80171e4:	7b1a      	ldrb	r2, [r3, #12]
 80171e6:	7162      	strb	r2, [r4, #5]
 80171e8:	6918      	ldr	r0, [r3, #16]
 80171ea:	6959      	ldr	r1, [r3, #20]
 80171ec:	699a      	ldr	r2, [r3, #24]
 80171ee:	6222      	str	r2, [r4, #32]
 80171f0:	61a0      	str	r0, [r4, #24]
 80171f2:	61e1      	str	r1, [r4, #28]
 80171f4:	7f1a      	ldrb	r2, [r3, #28]
 80171f6:	7122      	strb	r2, [r4, #4]
 80171f8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80171fc:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 8017200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017202:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8017206:	b084      	sub	sp, #16
 8017208:	f8b3 101d 	ldrh.w	r1, [r3, #29]
 801720c:	7fda      	ldrb	r2, [r3, #31]
 801720e:	f88d 2006 	strb.w	r2, [sp, #6]
 8017212:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017216:	f8b3 2021 	ldrh.w	r2, [r3, #33]	; 0x21
 801721a:	f8ad 2008 	strh.w	r2, [sp, #8]
 801721e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8017222:	f88d 200a 	strb.w	r2, [sp, #10]
 8017226:	f8b3 2025 	ldrh.w	r2, [r3, #37]	; 0x25
 801722a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801722e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8017232:	f88d 300e 	strb.w	r3, [sp, #14]
 8017236:	a901      	add	r1, sp, #4
 8017238:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801723c:	f7f9 fe70 	bl	8010f20 <updateOrientation>
 8017240:	a903      	add	r1, sp, #12
 8017242:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8017246:	f7f9 fe6b 	bl	8010f20 <updateOrientation>
 801724a:	a902      	add	r1, sp, #8
 801724c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017250:	f7f9 fe66 	bl	8010f20 <updateOrientation>
 8017254:	b004      	add	sp, #16
 8017256:	bd10      	pop	{r4, pc}
 8017258:	20000224 	.word	0x20000224

0801725c <MotionFX_getKnobs>:
 801725c:	4b1d      	ldr	r3, [pc, #116]	; (80172d4 <MotionFX_getKnobs+0x78>)
 801725e:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8017262:	b903      	cbnz	r3, 8017266 <MotionFX_getKnobs+0xa>
 8017264:	4770      	bx	lr
 8017266:	460a      	mov	r2, r1
 8017268:	2900      	cmp	r1, #0
 801726a:	d0fb      	beq.n	8017264 <MotionFX_getKnobs+0x8>
 801726c:	b510      	push	{r4, lr}
 801726e:	4604      	mov	r4, r0
 8017270:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017272:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017274:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017276:	6093      	str	r3, [r2, #8]
 8017278:	6010      	str	r0, [r2, #0]
 801727a:	6051      	str	r1, [r2, #4]
 801727c:	7963      	ldrb	r3, [r4, #5]
 801727e:	7313      	strb	r3, [r2, #12]
 8017280:	69a0      	ldr	r0, [r4, #24]
 8017282:	69e1      	ldr	r1, [r4, #28]
 8017284:	6a23      	ldr	r3, [r4, #32]
 8017286:	6193      	str	r3, [r2, #24]
 8017288:	6110      	str	r0, [r2, #16]
 801728a:	6151      	str	r1, [r2, #20]
 801728c:	7923      	ldrb	r3, [r4, #4]
 801728e:	7713      	strb	r3, [r2, #28]
 8017290:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017294:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8017298:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 801729c:	62d3      	str	r3, [r2, #44]	; 0x2c
 801729e:	f102 011d 	add.w	r1, r2, #29
 80172a2:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80172a6:	f7f9 fc93 	bl	8010bd0 <findAxis>
 80172aa:	f102 0121 	add.w	r1, r2, #33	; 0x21
 80172ae:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80172b2:	f7f9 fc8d 	bl	8010bd0 <findAxis>
 80172b6:	f102 0125 	add.w	r1, r2, #37	; 0x25
 80172ba:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80172be:	f7f9 fc87 	bl	8010bd0 <findAxis>
 80172c2:	2300      	movs	r3, #0
 80172c4:	f882 3020 	strb.w	r3, [r2, #32]
 80172c8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80172cc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80172d0:	bd10      	pop	{r4, pc}
 80172d2:	bf00      	nop
 80172d4:	20000224 	.word	0x20000224

080172d8 <MotionFX_enable_6X>:
 80172d8:	4b0e      	ldr	r3, [pc, #56]	; (8017314 <MotionFX_enable_6X+0x3c>)
 80172da:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80172de:	b903      	cbnz	r3, 80172e2 <MotionFX_enable_6X+0xa>
 80172e0:	4770      	bx	lr
 80172e2:	2900      	cmp	r1, #0
 80172e4:	d0fc      	beq.n	80172e0 <MotionFX_enable_6X+0x8>
 80172e6:	b530      	push	{r4, r5, lr}
 80172e8:	1d05      	adds	r5, r0, #4
 80172ea:	b099      	sub	sp, #100	; 0x64
 80172ec:	4604      	mov	r4, r0
 80172ee:	4629      	mov	r1, r5
 80172f0:	225c      	movs	r2, #92	; 0x5c
 80172f2:	a801      	add	r0, sp, #4
 80172f4:	f002 f81a 	bl	801932c <memcpy>
 80172f8:	4620      	mov	r0, r4
 80172fa:	f7fb f84d 	bl	8012398 <MFX_emptyAttitude>
 80172fe:	225c      	movs	r2, #92	; 0x5c
 8017300:	a901      	add	r1, sp, #4
 8017302:	4628      	mov	r0, r5
 8017304:	f002 f812 	bl	801932c <memcpy>
 8017308:	2300      	movs	r3, #0
 801730a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801730e:	7363      	strb	r3, [r4, #13]
 8017310:	b019      	add	sp, #100	; 0x64
 8017312:	bd30      	pop	{r4, r5, pc}
 8017314:	20000224 	.word	0x20000224

08017318 <MotionFX_enable_9X>:
 8017318:	4b0e      	ldr	r3, [pc, #56]	; (8017354 <MotionFX_enable_9X+0x3c>)
 801731a:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 801731e:	b903      	cbnz	r3, 8017322 <MotionFX_enable_9X+0xa>
 8017320:	4770      	bx	lr
 8017322:	2900      	cmp	r1, #0
 8017324:	d0fc      	beq.n	8017320 <MotionFX_enable_9X+0x8>
 8017326:	b530      	push	{r4, r5, lr}
 8017328:	1d05      	adds	r5, r0, #4
 801732a:	b099      	sub	sp, #100	; 0x64
 801732c:	4604      	mov	r4, r0
 801732e:	4629      	mov	r1, r5
 8017330:	225c      	movs	r2, #92	; 0x5c
 8017332:	a801      	add	r0, sp, #4
 8017334:	f001 fffa 	bl	801932c <memcpy>
 8017338:	4620      	mov	r0, r4
 801733a:	f7fb f82d 	bl	8012398 <MFX_emptyAttitude>
 801733e:	225c      	movs	r2, #92	; 0x5c
 8017340:	a901      	add	r1, sp, #4
 8017342:	4628      	mov	r0, r5
 8017344:	f001 fff2 	bl	801932c <memcpy>
 8017348:	2301      	movs	r3, #1
 801734a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801734e:	7363      	strb	r3, [r4, #13]
 8017350:	b019      	add	sp, #100	; 0x64
 8017352:	bd30      	pop	{r4, r5, pc}
 8017354:	20000224 	.word	0x20000224

08017358 <MotionFX_update>:
 8017358:	b430      	push	{r4, r5}
 801735a:	4c06      	ldr	r4, [pc, #24]	; (8017374 <MotionFX_update+0x1c>)
 801735c:	9d02      	ldr	r5, [sp, #8]
 801735e:	f894 43c4 	ldrb.w	r4, [r4, #964]	; 0x3c4
 8017362:	b90c      	cbnz	r4, 8017368 <MotionFX_update+0x10>
 8017364:	bc30      	pop	{r4, r5}
 8017366:	4770      	bx	lr
 8017368:	ed93 0a00 	vldr	s0, [r3]
 801736c:	462b      	mov	r3, r5
 801736e:	bc30      	pop	{r4, r5}
 8017370:	f7fb bb02 	b.w	8012978 <iNemoEngine_API_Update>
 8017374:	20000224 	.word	0x20000224

08017378 <MotionFX_propagate>:
 8017378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801737c:	ed2d 8b06 	vpush	{d8-d10}
 8017380:	4ca2      	ldr	r4, [pc, #648]	; (801760c <MotionFX_propagate+0x294>)
 8017382:	f894 63c4 	ldrb.w	r6, [r4, #964]	; 0x3c4
 8017386:	b0a1      	sub	sp, #132	; 0x84
 8017388:	b926      	cbnz	r6, 8017394 <MotionFX_propagate+0x1c>
 801738a:	b021      	add	sp, #132	; 0x84
 801738c:	ecbd 8b06 	vpop	{d8-d10}
 8017390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017394:	4694      	mov	ip, r2
 8017396:	4604      	mov	r4, r0
 8017398:	460d      	mov	r5, r1
 801739a:	68d0      	ldr	r0, [r2, #12]
 801739c:	6911      	ldr	r1, [r2, #16]
 801739e:	6952      	ldr	r2, [r2, #20]
 80173a0:	edd3 9a00 	vldr	s19, [r3]
 80173a4:	ab13      	add	r3, sp, #76	; 0x4c
 80173a6:	c307      	stmia	r3!, {r0, r1, r2}
 80173a8:	f8dc 0000 	ldr.w	r0, [ip]
 80173ac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80173b0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80173b4:	ab10      	add	r3, sp, #64	; 0x40
 80173b6:	c307      	stmia	r3!, {r0, r1, r2}
 80173b8:	f8dc 0018 	ldr.w	r0, [ip, #24]
 80173bc:	f8dc 101c 	ldr.w	r1, [ip, #28]
 80173c0:	f8dc 2020 	ldr.w	r2, [ip, #32]
 80173c4:	ab16      	add	r3, sp, #88	; 0x58
 80173c6:	f104 073a 	add.w	r7, r4, #58	; 0x3a
 80173ca:	c307      	stmia	r3!, {r0, r1, r2}
 80173cc:	4639      	mov	r1, r7
 80173ce:	a803      	add	r0, sp, #12
 80173d0:	aa13      	add	r2, sp, #76	; 0x4c
 80173d2:	f7f9 fb9b 	bl	8010b0c <rotVect>
 80173d6:	aa16      	add	r2, sp, #88	; 0x58
 80173d8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 80173dc:	a806      	add	r0, sp, #24
 80173de:	f7f9 fb95 	bl	8010b0c <rotVect>
 80173e2:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 80173e6:	2b09      	cmp	r3, #9
 80173e8:	d829      	bhi.n	801743e <MotionFX_propagate+0xc6>
 80173ea:	eddd 8a04 	vldr	s17, [sp, #16]
 80173ee:	ed9d 9a03 	vldr	s18, [sp, #12]
 80173f2:	ed9d 8a05 	vldr	s16, [sp, #20]
 80173f6:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80173fa:	eee9 7a09 	vfma.f32	s15, s18, s18
 80173fe:	eee8 7a08 	vfma.f32	s15, s16, s16
 8017402:	ee17 0a90 	vmov	r0, s15
 8017406:	f7e9 f8a9 	bl	800055c <__aeabi_f2d>
 801740a:	ec41 0b10 	vmov	d0, r0, r1
 801740e:	f004 fe61 	bl	801c0d4 <sqrt>
 8017412:	ec51 0b10 	vmov	r0, r1, d0
 8017416:	f7e9 fbf1 	bl	8000bfc <__aeabi_d2f>
 801741a:	ee07 0a90 	vmov	s15, r0
 801741e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017422:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8017426:	ee29 9a27 	vmul.f32	s18, s18, s15
 801742a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801742e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017432:	ed8d 9a03 	vstr	s18, [sp, #12]
 8017436:	edcd 8a04 	vstr	s17, [sp, #16]
 801743a:	ed8d 8a05 	vstr	s16, [sp, #20]
 801743e:	7923      	ldrb	r3, [r4, #4]
 8017440:	2b00      	cmp	r3, #0
 8017442:	f000 80ce 	beq.w	80175e2 <MotionFX_propagate+0x26a>
 8017446:	ee07 3a90 	vmov	s15, r3
 801744a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801744e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017456:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 801745a:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 801745e:	edd3 7a00 	vldr	s15, [r3]
 8017462:	eddd 8a06 	vldr	s17, [sp, #24]
 8017466:	ed9d 6a07 	vldr	s12, [sp, #28]
 801746a:	eddd 6a08 	vldr	s13, [sp, #32]
 801746e:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8017610 <MotionFX_propagate+0x298>
 8017472:	eddf 5a68 	vldr	s11, [pc, #416]	; 8017614 <MotionFX_propagate+0x29c>
 8017476:	eee7 7a28 	vfma.f32	s15, s14, s17
 801747a:	ee26 9a08 	vmul.f32	s18, s12, s16
 801747e:	edc3 7a00 	vstr	s15, [r3]
 8017482:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8017486:	edd3 7a00 	vldr	s15, [r3]
 801748a:	ed8d 9a07 	vstr	s18, [sp, #28]
 801748e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8017492:	ee68 8a88 	vmul.f32	s17, s17, s16
 8017496:	edc3 7a00 	vstr	s15, [r3]
 801749a:	f604 1364 	addw	r3, r4, #2404	; 0x964
 801749e:	edd3 7a00 	vldr	s15, [r3]
 80174a2:	edcd 8a06 	vstr	s17, [sp, #24]
 80174a6:	eee7 7a26 	vfma.f32	s15, s14, s13
 80174aa:	ee26 8a88 	vmul.f32	s16, s13, s16
 80174ae:	edc3 7a00 	vstr	s15, [r3]
 80174b2:	f604 1344 	addw	r3, r4, #2372	; 0x944
 80174b6:	edd3 7a00 	vldr	s15, [r3]
 80174ba:	ed8d 8a08 	vstr	s16, [sp, #32]
 80174be:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 80174c2:	ed93 7a00 	vldr	s14, [r3]
 80174c6:	ee39 9a67 	vsub.f32	s18, s18, s15
 80174ca:	ee78 8ac7 	vsub.f32	s17, s17, s14
 80174ce:	ee69 7a09 	vmul.f32	s15, s18, s18
 80174d2:	f604 1348 	addw	r3, r4, #2376	; 0x948
 80174d6:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80174da:	ed93 7a00 	vldr	s14, [r3]
 80174de:	ee38 8a47 	vsub.f32	s16, s16, s14
 80174e2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80174e6:	eee8 7a08 	vfma.f32	s15, s16, s16
 80174ea:	ee29 0a80 	vmul.f32	s0, s19, s0
 80174ee:	eef4 7ae5 	vcmpe.f32	s15, s11
 80174f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174f6:	dd79      	ble.n	80175ec <MotionFX_propagate+0x274>
 80174f8:	eeb1 aae7 	vsqrt.f32	s20, s15
 80174fc:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8017500:	eeb0 0a69 	vmov.f32	s0, s19
 8017504:	f004 ffbc 	bl	801c480 <sinf>
 8017508:	eeb0 7a40 	vmov.f32	s14, s0
 801750c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017510:	eeb0 0a69 	vmov.f32	s0, s19
 8017514:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8017518:	ee29 9a27 	vmul.f32	s18, s18, s15
 801751c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017520:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8017524:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8017528:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 801752c:	f004 fd8e 	bl	801c04c <cosf>
 8017530:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8017534:	a809      	add	r0, sp, #36	; 0x24
 8017536:	f604 1838 	addw	r8, r4, #2360	; 0x938
 801753a:	4632      	mov	r2, r6
 801753c:	4631      	mov	r1, r6
 801753e:	f7f9 fd71 	bl	8011024 <qmult>
 8017542:	edd8 6a00 	vldr	s13, [r8]
 8017546:	edd6 5a00 	vldr	s11, [r6]
 801754a:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 801754e:	f604 1934 	addw	r9, r4, #2356	; 0x934
 8017552:	ed99 6a00 	vldr	s12, [r9]
 8017556:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801755a:	4639      	mov	r1, r7
 801755c:	eee6 7a06 	vfma.f32	s15, s12, s12
 8017560:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 8017564:	3301      	adds	r3, #1
 8017566:	ed97 7a00 	vldr	s14, [r7]
 801756a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801756e:	aa13      	add	r2, sp, #76	; 0x4c
 8017570:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8017574:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8017578:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801757c:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8017580:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8017584:	ee27 6a86 	vmul.f32	s12, s15, s12
 8017588:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801758c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017590:	edc6 5a00 	vstr	s11, [r6]
 8017594:	ed89 6a00 	vstr	s12, [r9]
 8017598:	edc8 6a00 	vstr	s13, [r8]
 801759c:	ed87 7a00 	vstr	s14, [r7]
 80175a0:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 80175a4:	f7f9 fab2 	bl	8010b0c <rotVect>
 80175a8:	6833      	ldr	r3, [r6, #0]
 80175aa:	60eb      	str	r3, [r5, #12]
 80175ac:	f8d9 3000 	ldr.w	r3, [r9]
 80175b0:	f8d8 2000 	ldr.w	r2, [r8]
 80175b4:	612b      	str	r3, [r5, #16]
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	61ab      	str	r3, [r5, #24]
 80175ba:	616a      	str	r2, [r5, #20]
 80175bc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80175c0:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80175c4:	e9cd 3200 	strd	r3, r2, [sp]
 80175c8:	4601      	mov	r1, r0
 80175ca:	f105 031c 	add.w	r3, r5, #28
 80175ce:	462a      	mov	r2, r5
 80175d0:	f105 000c 	add.w	r0, r5, #12
 80175d4:	f7fa fe16 	bl	8012204 <output_update>
 80175d8:	b021      	add	sp, #132	; 0x84
 80175da:	ecbd 8b06 	vpop	{d8-d10}
 80175de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175e2:	2301      	movs	r3, #1
 80175e4:	7123      	strb	r3, [r4, #4]
 80175e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80175ea:	e734      	b.n	8017456 <MotionFX_propagate+0xde>
 80175ec:	ee68 8a80 	vmul.f32	s17, s17, s0
 80175f0:	ee29 9a00 	vmul.f32	s18, s18, s0
 80175f4:	ee28 8a00 	vmul.f32	s16, s16, s0
 80175f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80175fc:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8017600:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8017604:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8017608:	930c      	str	r3, [sp, #48]	; 0x30
 801760a:	e793      	b.n	8017534 <MotionFX_propagate+0x1bc>
 801760c:	20000224 	.word	0x20000224
 8017610:	3c8efa35 	.word	0x3c8efa35
 8017614:	38d1b718 	.word	0x38d1b718

08017618 <atoi>:
 8017618:	220a      	movs	r2, #10
 801761a:	2100      	movs	r1, #0
 801761c:	f001 bdbe 	b.w	801919c <strtol>

08017620 <__cvt>:
 8017620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017624:	ec55 4b10 	vmov	r4, r5, d0
 8017628:	2d00      	cmp	r5, #0
 801762a:	460e      	mov	r6, r1
 801762c:	4619      	mov	r1, r3
 801762e:	462b      	mov	r3, r5
 8017630:	bfbb      	ittet	lt
 8017632:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017636:	461d      	movlt	r5, r3
 8017638:	2300      	movge	r3, #0
 801763a:	232d      	movlt	r3, #45	; 0x2d
 801763c:	700b      	strb	r3, [r1, #0]
 801763e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017640:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017644:	4691      	mov	r9, r2
 8017646:	f023 0820 	bic.w	r8, r3, #32
 801764a:	bfbc      	itt	lt
 801764c:	4622      	movlt	r2, r4
 801764e:	4614      	movlt	r4, r2
 8017650:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017654:	d005      	beq.n	8017662 <__cvt+0x42>
 8017656:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801765a:	d100      	bne.n	801765e <__cvt+0x3e>
 801765c:	3601      	adds	r6, #1
 801765e:	2102      	movs	r1, #2
 8017660:	e000      	b.n	8017664 <__cvt+0x44>
 8017662:	2103      	movs	r1, #3
 8017664:	ab03      	add	r3, sp, #12
 8017666:	9301      	str	r3, [sp, #4]
 8017668:	ab02      	add	r3, sp, #8
 801766a:	9300      	str	r3, [sp, #0]
 801766c:	ec45 4b10 	vmov	d0, r4, r5
 8017670:	4653      	mov	r3, sl
 8017672:	4632      	mov	r2, r6
 8017674:	f001 ff00 	bl	8019478 <_dtoa_r>
 8017678:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801767c:	4607      	mov	r7, r0
 801767e:	d102      	bne.n	8017686 <__cvt+0x66>
 8017680:	f019 0f01 	tst.w	r9, #1
 8017684:	d022      	beq.n	80176cc <__cvt+0xac>
 8017686:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801768a:	eb07 0906 	add.w	r9, r7, r6
 801768e:	d110      	bne.n	80176b2 <__cvt+0x92>
 8017690:	783b      	ldrb	r3, [r7, #0]
 8017692:	2b30      	cmp	r3, #48	; 0x30
 8017694:	d10a      	bne.n	80176ac <__cvt+0x8c>
 8017696:	2200      	movs	r2, #0
 8017698:	2300      	movs	r3, #0
 801769a:	4620      	mov	r0, r4
 801769c:	4629      	mov	r1, r5
 801769e:	f7e9 fa1d 	bl	8000adc <__aeabi_dcmpeq>
 80176a2:	b918      	cbnz	r0, 80176ac <__cvt+0x8c>
 80176a4:	f1c6 0601 	rsb	r6, r6, #1
 80176a8:	f8ca 6000 	str.w	r6, [sl]
 80176ac:	f8da 3000 	ldr.w	r3, [sl]
 80176b0:	4499      	add	r9, r3
 80176b2:	2200      	movs	r2, #0
 80176b4:	2300      	movs	r3, #0
 80176b6:	4620      	mov	r0, r4
 80176b8:	4629      	mov	r1, r5
 80176ba:	f7e9 fa0f 	bl	8000adc <__aeabi_dcmpeq>
 80176be:	b108      	cbz	r0, 80176c4 <__cvt+0xa4>
 80176c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80176c4:	2230      	movs	r2, #48	; 0x30
 80176c6:	9b03      	ldr	r3, [sp, #12]
 80176c8:	454b      	cmp	r3, r9
 80176ca:	d307      	bcc.n	80176dc <__cvt+0xbc>
 80176cc:	9b03      	ldr	r3, [sp, #12]
 80176ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80176d0:	1bdb      	subs	r3, r3, r7
 80176d2:	4638      	mov	r0, r7
 80176d4:	6013      	str	r3, [r2, #0]
 80176d6:	b004      	add	sp, #16
 80176d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176dc:	1c59      	adds	r1, r3, #1
 80176de:	9103      	str	r1, [sp, #12]
 80176e0:	701a      	strb	r2, [r3, #0]
 80176e2:	e7f0      	b.n	80176c6 <__cvt+0xa6>

080176e4 <__exponent>:
 80176e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176e6:	4603      	mov	r3, r0
 80176e8:	2900      	cmp	r1, #0
 80176ea:	bfb8      	it	lt
 80176ec:	4249      	neglt	r1, r1
 80176ee:	f803 2b02 	strb.w	r2, [r3], #2
 80176f2:	bfb4      	ite	lt
 80176f4:	222d      	movlt	r2, #45	; 0x2d
 80176f6:	222b      	movge	r2, #43	; 0x2b
 80176f8:	2909      	cmp	r1, #9
 80176fa:	7042      	strb	r2, [r0, #1]
 80176fc:	dd2a      	ble.n	8017754 <__exponent+0x70>
 80176fe:	f10d 0207 	add.w	r2, sp, #7
 8017702:	4617      	mov	r7, r2
 8017704:	260a      	movs	r6, #10
 8017706:	4694      	mov	ip, r2
 8017708:	fb91 f5f6 	sdiv	r5, r1, r6
 801770c:	fb06 1415 	mls	r4, r6, r5, r1
 8017710:	3430      	adds	r4, #48	; 0x30
 8017712:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8017716:	460c      	mov	r4, r1
 8017718:	2c63      	cmp	r4, #99	; 0x63
 801771a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801771e:	4629      	mov	r1, r5
 8017720:	dcf1      	bgt.n	8017706 <__exponent+0x22>
 8017722:	3130      	adds	r1, #48	; 0x30
 8017724:	f1ac 0402 	sub.w	r4, ip, #2
 8017728:	f802 1c01 	strb.w	r1, [r2, #-1]
 801772c:	1c41      	adds	r1, r0, #1
 801772e:	4622      	mov	r2, r4
 8017730:	42ba      	cmp	r2, r7
 8017732:	d30a      	bcc.n	801774a <__exponent+0x66>
 8017734:	f10d 0209 	add.w	r2, sp, #9
 8017738:	eba2 020c 	sub.w	r2, r2, ip
 801773c:	42bc      	cmp	r4, r7
 801773e:	bf88      	it	hi
 8017740:	2200      	movhi	r2, #0
 8017742:	4413      	add	r3, r2
 8017744:	1a18      	subs	r0, r3, r0
 8017746:	b003      	add	sp, #12
 8017748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801774a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801774e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8017752:	e7ed      	b.n	8017730 <__exponent+0x4c>
 8017754:	2330      	movs	r3, #48	; 0x30
 8017756:	3130      	adds	r1, #48	; 0x30
 8017758:	7083      	strb	r3, [r0, #2]
 801775a:	70c1      	strb	r1, [r0, #3]
 801775c:	1d03      	adds	r3, r0, #4
 801775e:	e7f1      	b.n	8017744 <__exponent+0x60>

08017760 <_printf_float>:
 8017760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017764:	ed2d 8b02 	vpush	{d8}
 8017768:	b08d      	sub	sp, #52	; 0x34
 801776a:	460c      	mov	r4, r1
 801776c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017770:	4616      	mov	r6, r2
 8017772:	461f      	mov	r7, r3
 8017774:	4605      	mov	r5, r0
 8017776:	f001 fd53 	bl	8019220 <_localeconv_r>
 801777a:	f8d0 a000 	ldr.w	sl, [r0]
 801777e:	4650      	mov	r0, sl
 8017780:	f7e8 fd76 	bl	8000270 <strlen>
 8017784:	2300      	movs	r3, #0
 8017786:	930a      	str	r3, [sp, #40]	; 0x28
 8017788:	6823      	ldr	r3, [r4, #0]
 801778a:	9305      	str	r3, [sp, #20]
 801778c:	f8d8 3000 	ldr.w	r3, [r8]
 8017790:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017794:	3307      	adds	r3, #7
 8017796:	f023 0307 	bic.w	r3, r3, #7
 801779a:	f103 0208 	add.w	r2, r3, #8
 801779e:	f8c8 2000 	str.w	r2, [r8]
 80177a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80177a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80177aa:	9307      	str	r3, [sp, #28]
 80177ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80177b0:	ee08 0a10 	vmov	s16, r0
 80177b4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80177b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80177bc:	4b9e      	ldr	r3, [pc, #632]	; (8017a38 <_printf_float+0x2d8>)
 80177be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80177c2:	f7e9 f9bd 	bl	8000b40 <__aeabi_dcmpun>
 80177c6:	bb88      	cbnz	r0, 801782c <_printf_float+0xcc>
 80177c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80177cc:	4b9a      	ldr	r3, [pc, #616]	; (8017a38 <_printf_float+0x2d8>)
 80177ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80177d2:	f7e9 f997 	bl	8000b04 <__aeabi_dcmple>
 80177d6:	bb48      	cbnz	r0, 801782c <_printf_float+0xcc>
 80177d8:	2200      	movs	r2, #0
 80177da:	2300      	movs	r3, #0
 80177dc:	4640      	mov	r0, r8
 80177de:	4649      	mov	r1, r9
 80177e0:	f7e9 f986 	bl	8000af0 <__aeabi_dcmplt>
 80177e4:	b110      	cbz	r0, 80177ec <_printf_float+0x8c>
 80177e6:	232d      	movs	r3, #45	; 0x2d
 80177e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80177ec:	4a93      	ldr	r2, [pc, #588]	; (8017a3c <_printf_float+0x2dc>)
 80177ee:	4b94      	ldr	r3, [pc, #592]	; (8017a40 <_printf_float+0x2e0>)
 80177f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80177f4:	bf94      	ite	ls
 80177f6:	4690      	movls	r8, r2
 80177f8:	4698      	movhi	r8, r3
 80177fa:	2303      	movs	r3, #3
 80177fc:	6123      	str	r3, [r4, #16]
 80177fe:	9b05      	ldr	r3, [sp, #20]
 8017800:	f023 0304 	bic.w	r3, r3, #4
 8017804:	6023      	str	r3, [r4, #0]
 8017806:	f04f 0900 	mov.w	r9, #0
 801780a:	9700      	str	r7, [sp, #0]
 801780c:	4633      	mov	r3, r6
 801780e:	aa0b      	add	r2, sp, #44	; 0x2c
 8017810:	4621      	mov	r1, r4
 8017812:	4628      	mov	r0, r5
 8017814:	f000 f9da 	bl	8017bcc <_printf_common>
 8017818:	3001      	adds	r0, #1
 801781a:	f040 8090 	bne.w	801793e <_printf_float+0x1de>
 801781e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017822:	b00d      	add	sp, #52	; 0x34
 8017824:	ecbd 8b02 	vpop	{d8}
 8017828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801782c:	4642      	mov	r2, r8
 801782e:	464b      	mov	r3, r9
 8017830:	4640      	mov	r0, r8
 8017832:	4649      	mov	r1, r9
 8017834:	f7e9 f984 	bl	8000b40 <__aeabi_dcmpun>
 8017838:	b140      	cbz	r0, 801784c <_printf_float+0xec>
 801783a:	464b      	mov	r3, r9
 801783c:	2b00      	cmp	r3, #0
 801783e:	bfbc      	itt	lt
 8017840:	232d      	movlt	r3, #45	; 0x2d
 8017842:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017846:	4a7f      	ldr	r2, [pc, #508]	; (8017a44 <_printf_float+0x2e4>)
 8017848:	4b7f      	ldr	r3, [pc, #508]	; (8017a48 <_printf_float+0x2e8>)
 801784a:	e7d1      	b.n	80177f0 <_printf_float+0x90>
 801784c:	6863      	ldr	r3, [r4, #4]
 801784e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017852:	9206      	str	r2, [sp, #24]
 8017854:	1c5a      	adds	r2, r3, #1
 8017856:	d13f      	bne.n	80178d8 <_printf_float+0x178>
 8017858:	2306      	movs	r3, #6
 801785a:	6063      	str	r3, [r4, #4]
 801785c:	9b05      	ldr	r3, [sp, #20]
 801785e:	6861      	ldr	r1, [r4, #4]
 8017860:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017864:	2300      	movs	r3, #0
 8017866:	9303      	str	r3, [sp, #12]
 8017868:	ab0a      	add	r3, sp, #40	; 0x28
 801786a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801786e:	ab09      	add	r3, sp, #36	; 0x24
 8017870:	ec49 8b10 	vmov	d0, r8, r9
 8017874:	9300      	str	r3, [sp, #0]
 8017876:	6022      	str	r2, [r4, #0]
 8017878:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801787c:	4628      	mov	r0, r5
 801787e:	f7ff fecf 	bl	8017620 <__cvt>
 8017882:	9b06      	ldr	r3, [sp, #24]
 8017884:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017886:	2b47      	cmp	r3, #71	; 0x47
 8017888:	4680      	mov	r8, r0
 801788a:	d108      	bne.n	801789e <_printf_float+0x13e>
 801788c:	1cc8      	adds	r0, r1, #3
 801788e:	db02      	blt.n	8017896 <_printf_float+0x136>
 8017890:	6863      	ldr	r3, [r4, #4]
 8017892:	4299      	cmp	r1, r3
 8017894:	dd41      	ble.n	801791a <_printf_float+0x1ba>
 8017896:	f1ab 0302 	sub.w	r3, fp, #2
 801789a:	fa5f fb83 	uxtb.w	fp, r3
 801789e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80178a2:	d820      	bhi.n	80178e6 <_printf_float+0x186>
 80178a4:	3901      	subs	r1, #1
 80178a6:	465a      	mov	r2, fp
 80178a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80178ac:	9109      	str	r1, [sp, #36]	; 0x24
 80178ae:	f7ff ff19 	bl	80176e4 <__exponent>
 80178b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80178b4:	1813      	adds	r3, r2, r0
 80178b6:	2a01      	cmp	r2, #1
 80178b8:	4681      	mov	r9, r0
 80178ba:	6123      	str	r3, [r4, #16]
 80178bc:	dc02      	bgt.n	80178c4 <_printf_float+0x164>
 80178be:	6822      	ldr	r2, [r4, #0]
 80178c0:	07d2      	lsls	r2, r2, #31
 80178c2:	d501      	bpl.n	80178c8 <_printf_float+0x168>
 80178c4:	3301      	adds	r3, #1
 80178c6:	6123      	str	r3, [r4, #16]
 80178c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d09c      	beq.n	801780a <_printf_float+0xaa>
 80178d0:	232d      	movs	r3, #45	; 0x2d
 80178d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80178d6:	e798      	b.n	801780a <_printf_float+0xaa>
 80178d8:	9a06      	ldr	r2, [sp, #24]
 80178da:	2a47      	cmp	r2, #71	; 0x47
 80178dc:	d1be      	bne.n	801785c <_printf_float+0xfc>
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d1bc      	bne.n	801785c <_printf_float+0xfc>
 80178e2:	2301      	movs	r3, #1
 80178e4:	e7b9      	b.n	801785a <_printf_float+0xfa>
 80178e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80178ea:	d118      	bne.n	801791e <_printf_float+0x1be>
 80178ec:	2900      	cmp	r1, #0
 80178ee:	6863      	ldr	r3, [r4, #4]
 80178f0:	dd0b      	ble.n	801790a <_printf_float+0x1aa>
 80178f2:	6121      	str	r1, [r4, #16]
 80178f4:	b913      	cbnz	r3, 80178fc <_printf_float+0x19c>
 80178f6:	6822      	ldr	r2, [r4, #0]
 80178f8:	07d0      	lsls	r0, r2, #31
 80178fa:	d502      	bpl.n	8017902 <_printf_float+0x1a2>
 80178fc:	3301      	adds	r3, #1
 80178fe:	440b      	add	r3, r1
 8017900:	6123      	str	r3, [r4, #16]
 8017902:	65a1      	str	r1, [r4, #88]	; 0x58
 8017904:	f04f 0900 	mov.w	r9, #0
 8017908:	e7de      	b.n	80178c8 <_printf_float+0x168>
 801790a:	b913      	cbnz	r3, 8017912 <_printf_float+0x1b2>
 801790c:	6822      	ldr	r2, [r4, #0]
 801790e:	07d2      	lsls	r2, r2, #31
 8017910:	d501      	bpl.n	8017916 <_printf_float+0x1b6>
 8017912:	3302      	adds	r3, #2
 8017914:	e7f4      	b.n	8017900 <_printf_float+0x1a0>
 8017916:	2301      	movs	r3, #1
 8017918:	e7f2      	b.n	8017900 <_printf_float+0x1a0>
 801791a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801791e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017920:	4299      	cmp	r1, r3
 8017922:	db05      	blt.n	8017930 <_printf_float+0x1d0>
 8017924:	6823      	ldr	r3, [r4, #0]
 8017926:	6121      	str	r1, [r4, #16]
 8017928:	07d8      	lsls	r0, r3, #31
 801792a:	d5ea      	bpl.n	8017902 <_printf_float+0x1a2>
 801792c:	1c4b      	adds	r3, r1, #1
 801792e:	e7e7      	b.n	8017900 <_printf_float+0x1a0>
 8017930:	2900      	cmp	r1, #0
 8017932:	bfd4      	ite	le
 8017934:	f1c1 0202 	rsble	r2, r1, #2
 8017938:	2201      	movgt	r2, #1
 801793a:	4413      	add	r3, r2
 801793c:	e7e0      	b.n	8017900 <_printf_float+0x1a0>
 801793e:	6823      	ldr	r3, [r4, #0]
 8017940:	055a      	lsls	r2, r3, #21
 8017942:	d407      	bmi.n	8017954 <_printf_float+0x1f4>
 8017944:	6923      	ldr	r3, [r4, #16]
 8017946:	4642      	mov	r2, r8
 8017948:	4631      	mov	r1, r6
 801794a:	4628      	mov	r0, r5
 801794c:	47b8      	blx	r7
 801794e:	3001      	adds	r0, #1
 8017950:	d12c      	bne.n	80179ac <_printf_float+0x24c>
 8017952:	e764      	b.n	801781e <_printf_float+0xbe>
 8017954:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017958:	f240 80e0 	bls.w	8017b1c <_printf_float+0x3bc>
 801795c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017960:	2200      	movs	r2, #0
 8017962:	2300      	movs	r3, #0
 8017964:	f7e9 f8ba 	bl	8000adc <__aeabi_dcmpeq>
 8017968:	2800      	cmp	r0, #0
 801796a:	d034      	beq.n	80179d6 <_printf_float+0x276>
 801796c:	4a37      	ldr	r2, [pc, #220]	; (8017a4c <_printf_float+0x2ec>)
 801796e:	2301      	movs	r3, #1
 8017970:	4631      	mov	r1, r6
 8017972:	4628      	mov	r0, r5
 8017974:	47b8      	blx	r7
 8017976:	3001      	adds	r0, #1
 8017978:	f43f af51 	beq.w	801781e <_printf_float+0xbe>
 801797c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017980:	429a      	cmp	r2, r3
 8017982:	db02      	blt.n	801798a <_printf_float+0x22a>
 8017984:	6823      	ldr	r3, [r4, #0]
 8017986:	07d8      	lsls	r0, r3, #31
 8017988:	d510      	bpl.n	80179ac <_printf_float+0x24c>
 801798a:	ee18 3a10 	vmov	r3, s16
 801798e:	4652      	mov	r2, sl
 8017990:	4631      	mov	r1, r6
 8017992:	4628      	mov	r0, r5
 8017994:	47b8      	blx	r7
 8017996:	3001      	adds	r0, #1
 8017998:	f43f af41 	beq.w	801781e <_printf_float+0xbe>
 801799c:	f04f 0800 	mov.w	r8, #0
 80179a0:	f104 091a 	add.w	r9, r4, #26
 80179a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179a6:	3b01      	subs	r3, #1
 80179a8:	4543      	cmp	r3, r8
 80179aa:	dc09      	bgt.n	80179c0 <_printf_float+0x260>
 80179ac:	6823      	ldr	r3, [r4, #0]
 80179ae:	079b      	lsls	r3, r3, #30
 80179b0:	f100 8107 	bmi.w	8017bc2 <_printf_float+0x462>
 80179b4:	68e0      	ldr	r0, [r4, #12]
 80179b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80179b8:	4298      	cmp	r0, r3
 80179ba:	bfb8      	it	lt
 80179bc:	4618      	movlt	r0, r3
 80179be:	e730      	b.n	8017822 <_printf_float+0xc2>
 80179c0:	2301      	movs	r3, #1
 80179c2:	464a      	mov	r2, r9
 80179c4:	4631      	mov	r1, r6
 80179c6:	4628      	mov	r0, r5
 80179c8:	47b8      	blx	r7
 80179ca:	3001      	adds	r0, #1
 80179cc:	f43f af27 	beq.w	801781e <_printf_float+0xbe>
 80179d0:	f108 0801 	add.w	r8, r8, #1
 80179d4:	e7e6      	b.n	80179a4 <_printf_float+0x244>
 80179d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179d8:	2b00      	cmp	r3, #0
 80179da:	dc39      	bgt.n	8017a50 <_printf_float+0x2f0>
 80179dc:	4a1b      	ldr	r2, [pc, #108]	; (8017a4c <_printf_float+0x2ec>)
 80179de:	2301      	movs	r3, #1
 80179e0:	4631      	mov	r1, r6
 80179e2:	4628      	mov	r0, r5
 80179e4:	47b8      	blx	r7
 80179e6:	3001      	adds	r0, #1
 80179e8:	f43f af19 	beq.w	801781e <_printf_float+0xbe>
 80179ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80179f0:	4313      	orrs	r3, r2
 80179f2:	d102      	bne.n	80179fa <_printf_float+0x29a>
 80179f4:	6823      	ldr	r3, [r4, #0]
 80179f6:	07d9      	lsls	r1, r3, #31
 80179f8:	d5d8      	bpl.n	80179ac <_printf_float+0x24c>
 80179fa:	ee18 3a10 	vmov	r3, s16
 80179fe:	4652      	mov	r2, sl
 8017a00:	4631      	mov	r1, r6
 8017a02:	4628      	mov	r0, r5
 8017a04:	47b8      	blx	r7
 8017a06:	3001      	adds	r0, #1
 8017a08:	f43f af09 	beq.w	801781e <_printf_float+0xbe>
 8017a0c:	f04f 0900 	mov.w	r9, #0
 8017a10:	f104 0a1a 	add.w	sl, r4, #26
 8017a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a16:	425b      	negs	r3, r3
 8017a18:	454b      	cmp	r3, r9
 8017a1a:	dc01      	bgt.n	8017a20 <_printf_float+0x2c0>
 8017a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a1e:	e792      	b.n	8017946 <_printf_float+0x1e6>
 8017a20:	2301      	movs	r3, #1
 8017a22:	4652      	mov	r2, sl
 8017a24:	4631      	mov	r1, r6
 8017a26:	4628      	mov	r0, r5
 8017a28:	47b8      	blx	r7
 8017a2a:	3001      	adds	r0, #1
 8017a2c:	f43f aef7 	beq.w	801781e <_printf_float+0xbe>
 8017a30:	f109 0901 	add.w	r9, r9, #1
 8017a34:	e7ee      	b.n	8017a14 <_printf_float+0x2b4>
 8017a36:	bf00      	nop
 8017a38:	7fefffff 	.word	0x7fefffff
 8017a3c:	0801ee14 	.word	0x0801ee14
 8017a40:	0801ee18 	.word	0x0801ee18
 8017a44:	0801ee1c 	.word	0x0801ee1c
 8017a48:	0801ee20 	.word	0x0801ee20
 8017a4c:	0801ee24 	.word	0x0801ee24
 8017a50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017a54:	429a      	cmp	r2, r3
 8017a56:	bfa8      	it	ge
 8017a58:	461a      	movge	r2, r3
 8017a5a:	2a00      	cmp	r2, #0
 8017a5c:	4691      	mov	r9, r2
 8017a5e:	dc37      	bgt.n	8017ad0 <_printf_float+0x370>
 8017a60:	f04f 0b00 	mov.w	fp, #0
 8017a64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017a68:	f104 021a 	add.w	r2, r4, #26
 8017a6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017a6e:	9305      	str	r3, [sp, #20]
 8017a70:	eba3 0309 	sub.w	r3, r3, r9
 8017a74:	455b      	cmp	r3, fp
 8017a76:	dc33      	bgt.n	8017ae0 <_printf_float+0x380>
 8017a78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017a7c:	429a      	cmp	r2, r3
 8017a7e:	db3b      	blt.n	8017af8 <_printf_float+0x398>
 8017a80:	6823      	ldr	r3, [r4, #0]
 8017a82:	07da      	lsls	r2, r3, #31
 8017a84:	d438      	bmi.n	8017af8 <_printf_float+0x398>
 8017a86:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017a8a:	eba2 0903 	sub.w	r9, r2, r3
 8017a8e:	9b05      	ldr	r3, [sp, #20]
 8017a90:	1ad2      	subs	r2, r2, r3
 8017a92:	4591      	cmp	r9, r2
 8017a94:	bfa8      	it	ge
 8017a96:	4691      	movge	r9, r2
 8017a98:	f1b9 0f00 	cmp.w	r9, #0
 8017a9c:	dc35      	bgt.n	8017b0a <_printf_float+0x3aa>
 8017a9e:	f04f 0800 	mov.w	r8, #0
 8017aa2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017aa6:	f104 0a1a 	add.w	sl, r4, #26
 8017aaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017aae:	1a9b      	subs	r3, r3, r2
 8017ab0:	eba3 0309 	sub.w	r3, r3, r9
 8017ab4:	4543      	cmp	r3, r8
 8017ab6:	f77f af79 	ble.w	80179ac <_printf_float+0x24c>
 8017aba:	2301      	movs	r3, #1
 8017abc:	4652      	mov	r2, sl
 8017abe:	4631      	mov	r1, r6
 8017ac0:	4628      	mov	r0, r5
 8017ac2:	47b8      	blx	r7
 8017ac4:	3001      	adds	r0, #1
 8017ac6:	f43f aeaa 	beq.w	801781e <_printf_float+0xbe>
 8017aca:	f108 0801 	add.w	r8, r8, #1
 8017ace:	e7ec      	b.n	8017aaa <_printf_float+0x34a>
 8017ad0:	4613      	mov	r3, r2
 8017ad2:	4631      	mov	r1, r6
 8017ad4:	4642      	mov	r2, r8
 8017ad6:	4628      	mov	r0, r5
 8017ad8:	47b8      	blx	r7
 8017ada:	3001      	adds	r0, #1
 8017adc:	d1c0      	bne.n	8017a60 <_printf_float+0x300>
 8017ade:	e69e      	b.n	801781e <_printf_float+0xbe>
 8017ae0:	2301      	movs	r3, #1
 8017ae2:	4631      	mov	r1, r6
 8017ae4:	4628      	mov	r0, r5
 8017ae6:	9205      	str	r2, [sp, #20]
 8017ae8:	47b8      	blx	r7
 8017aea:	3001      	adds	r0, #1
 8017aec:	f43f ae97 	beq.w	801781e <_printf_float+0xbe>
 8017af0:	9a05      	ldr	r2, [sp, #20]
 8017af2:	f10b 0b01 	add.w	fp, fp, #1
 8017af6:	e7b9      	b.n	8017a6c <_printf_float+0x30c>
 8017af8:	ee18 3a10 	vmov	r3, s16
 8017afc:	4652      	mov	r2, sl
 8017afe:	4631      	mov	r1, r6
 8017b00:	4628      	mov	r0, r5
 8017b02:	47b8      	blx	r7
 8017b04:	3001      	adds	r0, #1
 8017b06:	d1be      	bne.n	8017a86 <_printf_float+0x326>
 8017b08:	e689      	b.n	801781e <_printf_float+0xbe>
 8017b0a:	9a05      	ldr	r2, [sp, #20]
 8017b0c:	464b      	mov	r3, r9
 8017b0e:	4442      	add	r2, r8
 8017b10:	4631      	mov	r1, r6
 8017b12:	4628      	mov	r0, r5
 8017b14:	47b8      	blx	r7
 8017b16:	3001      	adds	r0, #1
 8017b18:	d1c1      	bne.n	8017a9e <_printf_float+0x33e>
 8017b1a:	e680      	b.n	801781e <_printf_float+0xbe>
 8017b1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b1e:	2a01      	cmp	r2, #1
 8017b20:	dc01      	bgt.n	8017b26 <_printf_float+0x3c6>
 8017b22:	07db      	lsls	r3, r3, #31
 8017b24:	d53a      	bpl.n	8017b9c <_printf_float+0x43c>
 8017b26:	2301      	movs	r3, #1
 8017b28:	4642      	mov	r2, r8
 8017b2a:	4631      	mov	r1, r6
 8017b2c:	4628      	mov	r0, r5
 8017b2e:	47b8      	blx	r7
 8017b30:	3001      	adds	r0, #1
 8017b32:	f43f ae74 	beq.w	801781e <_printf_float+0xbe>
 8017b36:	ee18 3a10 	vmov	r3, s16
 8017b3a:	4652      	mov	r2, sl
 8017b3c:	4631      	mov	r1, r6
 8017b3e:	4628      	mov	r0, r5
 8017b40:	47b8      	blx	r7
 8017b42:	3001      	adds	r0, #1
 8017b44:	f43f ae6b 	beq.w	801781e <_printf_float+0xbe>
 8017b48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017b4c:	2200      	movs	r2, #0
 8017b4e:	2300      	movs	r3, #0
 8017b50:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8017b54:	f7e8 ffc2 	bl	8000adc <__aeabi_dcmpeq>
 8017b58:	b9d8      	cbnz	r0, 8017b92 <_printf_float+0x432>
 8017b5a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8017b5e:	f108 0201 	add.w	r2, r8, #1
 8017b62:	4631      	mov	r1, r6
 8017b64:	4628      	mov	r0, r5
 8017b66:	47b8      	blx	r7
 8017b68:	3001      	adds	r0, #1
 8017b6a:	d10e      	bne.n	8017b8a <_printf_float+0x42a>
 8017b6c:	e657      	b.n	801781e <_printf_float+0xbe>
 8017b6e:	2301      	movs	r3, #1
 8017b70:	4652      	mov	r2, sl
 8017b72:	4631      	mov	r1, r6
 8017b74:	4628      	mov	r0, r5
 8017b76:	47b8      	blx	r7
 8017b78:	3001      	adds	r0, #1
 8017b7a:	f43f ae50 	beq.w	801781e <_printf_float+0xbe>
 8017b7e:	f108 0801 	add.w	r8, r8, #1
 8017b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b84:	3b01      	subs	r3, #1
 8017b86:	4543      	cmp	r3, r8
 8017b88:	dcf1      	bgt.n	8017b6e <_printf_float+0x40e>
 8017b8a:	464b      	mov	r3, r9
 8017b8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017b90:	e6da      	b.n	8017948 <_printf_float+0x1e8>
 8017b92:	f04f 0800 	mov.w	r8, #0
 8017b96:	f104 0a1a 	add.w	sl, r4, #26
 8017b9a:	e7f2      	b.n	8017b82 <_printf_float+0x422>
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	4642      	mov	r2, r8
 8017ba0:	e7df      	b.n	8017b62 <_printf_float+0x402>
 8017ba2:	2301      	movs	r3, #1
 8017ba4:	464a      	mov	r2, r9
 8017ba6:	4631      	mov	r1, r6
 8017ba8:	4628      	mov	r0, r5
 8017baa:	47b8      	blx	r7
 8017bac:	3001      	adds	r0, #1
 8017bae:	f43f ae36 	beq.w	801781e <_printf_float+0xbe>
 8017bb2:	f108 0801 	add.w	r8, r8, #1
 8017bb6:	68e3      	ldr	r3, [r4, #12]
 8017bb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017bba:	1a5b      	subs	r3, r3, r1
 8017bbc:	4543      	cmp	r3, r8
 8017bbe:	dcf0      	bgt.n	8017ba2 <_printf_float+0x442>
 8017bc0:	e6f8      	b.n	80179b4 <_printf_float+0x254>
 8017bc2:	f04f 0800 	mov.w	r8, #0
 8017bc6:	f104 0919 	add.w	r9, r4, #25
 8017bca:	e7f4      	b.n	8017bb6 <_printf_float+0x456>

08017bcc <_printf_common>:
 8017bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bd0:	4616      	mov	r6, r2
 8017bd2:	4699      	mov	r9, r3
 8017bd4:	688a      	ldr	r2, [r1, #8]
 8017bd6:	690b      	ldr	r3, [r1, #16]
 8017bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017bdc:	4293      	cmp	r3, r2
 8017bde:	bfb8      	it	lt
 8017be0:	4613      	movlt	r3, r2
 8017be2:	6033      	str	r3, [r6, #0]
 8017be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017be8:	4607      	mov	r7, r0
 8017bea:	460c      	mov	r4, r1
 8017bec:	b10a      	cbz	r2, 8017bf2 <_printf_common+0x26>
 8017bee:	3301      	adds	r3, #1
 8017bf0:	6033      	str	r3, [r6, #0]
 8017bf2:	6823      	ldr	r3, [r4, #0]
 8017bf4:	0699      	lsls	r1, r3, #26
 8017bf6:	bf42      	ittt	mi
 8017bf8:	6833      	ldrmi	r3, [r6, #0]
 8017bfa:	3302      	addmi	r3, #2
 8017bfc:	6033      	strmi	r3, [r6, #0]
 8017bfe:	6825      	ldr	r5, [r4, #0]
 8017c00:	f015 0506 	ands.w	r5, r5, #6
 8017c04:	d106      	bne.n	8017c14 <_printf_common+0x48>
 8017c06:	f104 0a19 	add.w	sl, r4, #25
 8017c0a:	68e3      	ldr	r3, [r4, #12]
 8017c0c:	6832      	ldr	r2, [r6, #0]
 8017c0e:	1a9b      	subs	r3, r3, r2
 8017c10:	42ab      	cmp	r3, r5
 8017c12:	dc26      	bgt.n	8017c62 <_printf_common+0x96>
 8017c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017c18:	1e13      	subs	r3, r2, #0
 8017c1a:	6822      	ldr	r2, [r4, #0]
 8017c1c:	bf18      	it	ne
 8017c1e:	2301      	movne	r3, #1
 8017c20:	0692      	lsls	r2, r2, #26
 8017c22:	d42b      	bmi.n	8017c7c <_printf_common+0xb0>
 8017c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017c28:	4649      	mov	r1, r9
 8017c2a:	4638      	mov	r0, r7
 8017c2c:	47c0      	blx	r8
 8017c2e:	3001      	adds	r0, #1
 8017c30:	d01e      	beq.n	8017c70 <_printf_common+0xa4>
 8017c32:	6823      	ldr	r3, [r4, #0]
 8017c34:	6922      	ldr	r2, [r4, #16]
 8017c36:	f003 0306 	and.w	r3, r3, #6
 8017c3a:	2b04      	cmp	r3, #4
 8017c3c:	bf02      	ittt	eq
 8017c3e:	68e5      	ldreq	r5, [r4, #12]
 8017c40:	6833      	ldreq	r3, [r6, #0]
 8017c42:	1aed      	subeq	r5, r5, r3
 8017c44:	68a3      	ldr	r3, [r4, #8]
 8017c46:	bf0c      	ite	eq
 8017c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017c4c:	2500      	movne	r5, #0
 8017c4e:	4293      	cmp	r3, r2
 8017c50:	bfc4      	itt	gt
 8017c52:	1a9b      	subgt	r3, r3, r2
 8017c54:	18ed      	addgt	r5, r5, r3
 8017c56:	2600      	movs	r6, #0
 8017c58:	341a      	adds	r4, #26
 8017c5a:	42b5      	cmp	r5, r6
 8017c5c:	d11a      	bne.n	8017c94 <_printf_common+0xc8>
 8017c5e:	2000      	movs	r0, #0
 8017c60:	e008      	b.n	8017c74 <_printf_common+0xa8>
 8017c62:	2301      	movs	r3, #1
 8017c64:	4652      	mov	r2, sl
 8017c66:	4649      	mov	r1, r9
 8017c68:	4638      	mov	r0, r7
 8017c6a:	47c0      	blx	r8
 8017c6c:	3001      	adds	r0, #1
 8017c6e:	d103      	bne.n	8017c78 <_printf_common+0xac>
 8017c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c78:	3501      	adds	r5, #1
 8017c7a:	e7c6      	b.n	8017c0a <_printf_common+0x3e>
 8017c7c:	18e1      	adds	r1, r4, r3
 8017c7e:	1c5a      	adds	r2, r3, #1
 8017c80:	2030      	movs	r0, #48	; 0x30
 8017c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017c86:	4422      	add	r2, r4
 8017c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017c90:	3302      	adds	r3, #2
 8017c92:	e7c7      	b.n	8017c24 <_printf_common+0x58>
 8017c94:	2301      	movs	r3, #1
 8017c96:	4622      	mov	r2, r4
 8017c98:	4649      	mov	r1, r9
 8017c9a:	4638      	mov	r0, r7
 8017c9c:	47c0      	blx	r8
 8017c9e:	3001      	adds	r0, #1
 8017ca0:	d0e6      	beq.n	8017c70 <_printf_common+0xa4>
 8017ca2:	3601      	adds	r6, #1
 8017ca4:	e7d9      	b.n	8017c5a <_printf_common+0x8e>
	...

08017ca8 <_printf_i>:
 8017ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017cac:	7e0f      	ldrb	r7, [r1, #24]
 8017cae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017cb0:	2f78      	cmp	r7, #120	; 0x78
 8017cb2:	4691      	mov	r9, r2
 8017cb4:	4680      	mov	r8, r0
 8017cb6:	460c      	mov	r4, r1
 8017cb8:	469a      	mov	sl, r3
 8017cba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017cbe:	d807      	bhi.n	8017cd0 <_printf_i+0x28>
 8017cc0:	2f62      	cmp	r7, #98	; 0x62
 8017cc2:	d80a      	bhi.n	8017cda <_printf_i+0x32>
 8017cc4:	2f00      	cmp	r7, #0
 8017cc6:	f000 80d4 	beq.w	8017e72 <_printf_i+0x1ca>
 8017cca:	2f58      	cmp	r7, #88	; 0x58
 8017ccc:	f000 80c0 	beq.w	8017e50 <_printf_i+0x1a8>
 8017cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017cd8:	e03a      	b.n	8017d50 <_printf_i+0xa8>
 8017cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017cde:	2b15      	cmp	r3, #21
 8017ce0:	d8f6      	bhi.n	8017cd0 <_printf_i+0x28>
 8017ce2:	a101      	add	r1, pc, #4	; (adr r1, 8017ce8 <_printf_i+0x40>)
 8017ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017ce8:	08017d41 	.word	0x08017d41
 8017cec:	08017d55 	.word	0x08017d55
 8017cf0:	08017cd1 	.word	0x08017cd1
 8017cf4:	08017cd1 	.word	0x08017cd1
 8017cf8:	08017cd1 	.word	0x08017cd1
 8017cfc:	08017cd1 	.word	0x08017cd1
 8017d00:	08017d55 	.word	0x08017d55
 8017d04:	08017cd1 	.word	0x08017cd1
 8017d08:	08017cd1 	.word	0x08017cd1
 8017d0c:	08017cd1 	.word	0x08017cd1
 8017d10:	08017cd1 	.word	0x08017cd1
 8017d14:	08017e59 	.word	0x08017e59
 8017d18:	08017d81 	.word	0x08017d81
 8017d1c:	08017e13 	.word	0x08017e13
 8017d20:	08017cd1 	.word	0x08017cd1
 8017d24:	08017cd1 	.word	0x08017cd1
 8017d28:	08017e7b 	.word	0x08017e7b
 8017d2c:	08017cd1 	.word	0x08017cd1
 8017d30:	08017d81 	.word	0x08017d81
 8017d34:	08017cd1 	.word	0x08017cd1
 8017d38:	08017cd1 	.word	0x08017cd1
 8017d3c:	08017e1b 	.word	0x08017e1b
 8017d40:	682b      	ldr	r3, [r5, #0]
 8017d42:	1d1a      	adds	r2, r3, #4
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	602a      	str	r2, [r5, #0]
 8017d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017d50:	2301      	movs	r3, #1
 8017d52:	e09f      	b.n	8017e94 <_printf_i+0x1ec>
 8017d54:	6820      	ldr	r0, [r4, #0]
 8017d56:	682b      	ldr	r3, [r5, #0]
 8017d58:	0607      	lsls	r7, r0, #24
 8017d5a:	f103 0104 	add.w	r1, r3, #4
 8017d5e:	6029      	str	r1, [r5, #0]
 8017d60:	d501      	bpl.n	8017d66 <_printf_i+0xbe>
 8017d62:	681e      	ldr	r6, [r3, #0]
 8017d64:	e003      	b.n	8017d6e <_printf_i+0xc6>
 8017d66:	0646      	lsls	r6, r0, #25
 8017d68:	d5fb      	bpl.n	8017d62 <_printf_i+0xba>
 8017d6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017d6e:	2e00      	cmp	r6, #0
 8017d70:	da03      	bge.n	8017d7a <_printf_i+0xd2>
 8017d72:	232d      	movs	r3, #45	; 0x2d
 8017d74:	4276      	negs	r6, r6
 8017d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d7a:	485a      	ldr	r0, [pc, #360]	; (8017ee4 <_printf_i+0x23c>)
 8017d7c:	230a      	movs	r3, #10
 8017d7e:	e012      	b.n	8017da6 <_printf_i+0xfe>
 8017d80:	682b      	ldr	r3, [r5, #0]
 8017d82:	6820      	ldr	r0, [r4, #0]
 8017d84:	1d19      	adds	r1, r3, #4
 8017d86:	6029      	str	r1, [r5, #0]
 8017d88:	0605      	lsls	r5, r0, #24
 8017d8a:	d501      	bpl.n	8017d90 <_printf_i+0xe8>
 8017d8c:	681e      	ldr	r6, [r3, #0]
 8017d8e:	e002      	b.n	8017d96 <_printf_i+0xee>
 8017d90:	0641      	lsls	r1, r0, #25
 8017d92:	d5fb      	bpl.n	8017d8c <_printf_i+0xe4>
 8017d94:	881e      	ldrh	r6, [r3, #0]
 8017d96:	4853      	ldr	r0, [pc, #332]	; (8017ee4 <_printf_i+0x23c>)
 8017d98:	2f6f      	cmp	r7, #111	; 0x6f
 8017d9a:	bf0c      	ite	eq
 8017d9c:	2308      	moveq	r3, #8
 8017d9e:	230a      	movne	r3, #10
 8017da0:	2100      	movs	r1, #0
 8017da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017da6:	6865      	ldr	r5, [r4, #4]
 8017da8:	60a5      	str	r5, [r4, #8]
 8017daa:	2d00      	cmp	r5, #0
 8017dac:	bfa2      	ittt	ge
 8017dae:	6821      	ldrge	r1, [r4, #0]
 8017db0:	f021 0104 	bicge.w	r1, r1, #4
 8017db4:	6021      	strge	r1, [r4, #0]
 8017db6:	b90e      	cbnz	r6, 8017dbc <_printf_i+0x114>
 8017db8:	2d00      	cmp	r5, #0
 8017dba:	d04b      	beq.n	8017e54 <_printf_i+0x1ac>
 8017dbc:	4615      	mov	r5, r2
 8017dbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8017dc2:	fb03 6711 	mls	r7, r3, r1, r6
 8017dc6:	5dc7      	ldrb	r7, [r0, r7]
 8017dc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017dcc:	4637      	mov	r7, r6
 8017dce:	42bb      	cmp	r3, r7
 8017dd0:	460e      	mov	r6, r1
 8017dd2:	d9f4      	bls.n	8017dbe <_printf_i+0x116>
 8017dd4:	2b08      	cmp	r3, #8
 8017dd6:	d10b      	bne.n	8017df0 <_printf_i+0x148>
 8017dd8:	6823      	ldr	r3, [r4, #0]
 8017dda:	07de      	lsls	r6, r3, #31
 8017ddc:	d508      	bpl.n	8017df0 <_printf_i+0x148>
 8017dde:	6923      	ldr	r3, [r4, #16]
 8017de0:	6861      	ldr	r1, [r4, #4]
 8017de2:	4299      	cmp	r1, r3
 8017de4:	bfde      	ittt	le
 8017de6:	2330      	movle	r3, #48	; 0x30
 8017de8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017dec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017df0:	1b52      	subs	r2, r2, r5
 8017df2:	6122      	str	r2, [r4, #16]
 8017df4:	f8cd a000 	str.w	sl, [sp]
 8017df8:	464b      	mov	r3, r9
 8017dfa:	aa03      	add	r2, sp, #12
 8017dfc:	4621      	mov	r1, r4
 8017dfe:	4640      	mov	r0, r8
 8017e00:	f7ff fee4 	bl	8017bcc <_printf_common>
 8017e04:	3001      	adds	r0, #1
 8017e06:	d14a      	bne.n	8017e9e <_printf_i+0x1f6>
 8017e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017e0c:	b004      	add	sp, #16
 8017e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e12:	6823      	ldr	r3, [r4, #0]
 8017e14:	f043 0320 	orr.w	r3, r3, #32
 8017e18:	6023      	str	r3, [r4, #0]
 8017e1a:	4833      	ldr	r0, [pc, #204]	; (8017ee8 <_printf_i+0x240>)
 8017e1c:	2778      	movs	r7, #120	; 0x78
 8017e1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017e22:	6823      	ldr	r3, [r4, #0]
 8017e24:	6829      	ldr	r1, [r5, #0]
 8017e26:	061f      	lsls	r7, r3, #24
 8017e28:	f851 6b04 	ldr.w	r6, [r1], #4
 8017e2c:	d402      	bmi.n	8017e34 <_printf_i+0x18c>
 8017e2e:	065f      	lsls	r7, r3, #25
 8017e30:	bf48      	it	mi
 8017e32:	b2b6      	uxthmi	r6, r6
 8017e34:	07df      	lsls	r7, r3, #31
 8017e36:	bf48      	it	mi
 8017e38:	f043 0320 	orrmi.w	r3, r3, #32
 8017e3c:	6029      	str	r1, [r5, #0]
 8017e3e:	bf48      	it	mi
 8017e40:	6023      	strmi	r3, [r4, #0]
 8017e42:	b91e      	cbnz	r6, 8017e4c <_printf_i+0x1a4>
 8017e44:	6823      	ldr	r3, [r4, #0]
 8017e46:	f023 0320 	bic.w	r3, r3, #32
 8017e4a:	6023      	str	r3, [r4, #0]
 8017e4c:	2310      	movs	r3, #16
 8017e4e:	e7a7      	b.n	8017da0 <_printf_i+0xf8>
 8017e50:	4824      	ldr	r0, [pc, #144]	; (8017ee4 <_printf_i+0x23c>)
 8017e52:	e7e4      	b.n	8017e1e <_printf_i+0x176>
 8017e54:	4615      	mov	r5, r2
 8017e56:	e7bd      	b.n	8017dd4 <_printf_i+0x12c>
 8017e58:	682b      	ldr	r3, [r5, #0]
 8017e5a:	6826      	ldr	r6, [r4, #0]
 8017e5c:	6961      	ldr	r1, [r4, #20]
 8017e5e:	1d18      	adds	r0, r3, #4
 8017e60:	6028      	str	r0, [r5, #0]
 8017e62:	0635      	lsls	r5, r6, #24
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	d501      	bpl.n	8017e6c <_printf_i+0x1c4>
 8017e68:	6019      	str	r1, [r3, #0]
 8017e6a:	e002      	b.n	8017e72 <_printf_i+0x1ca>
 8017e6c:	0670      	lsls	r0, r6, #25
 8017e6e:	d5fb      	bpl.n	8017e68 <_printf_i+0x1c0>
 8017e70:	8019      	strh	r1, [r3, #0]
 8017e72:	2300      	movs	r3, #0
 8017e74:	6123      	str	r3, [r4, #16]
 8017e76:	4615      	mov	r5, r2
 8017e78:	e7bc      	b.n	8017df4 <_printf_i+0x14c>
 8017e7a:	682b      	ldr	r3, [r5, #0]
 8017e7c:	1d1a      	adds	r2, r3, #4
 8017e7e:	602a      	str	r2, [r5, #0]
 8017e80:	681d      	ldr	r5, [r3, #0]
 8017e82:	6862      	ldr	r2, [r4, #4]
 8017e84:	2100      	movs	r1, #0
 8017e86:	4628      	mov	r0, r5
 8017e88:	f7e8 f9a2 	bl	80001d0 <memchr>
 8017e8c:	b108      	cbz	r0, 8017e92 <_printf_i+0x1ea>
 8017e8e:	1b40      	subs	r0, r0, r5
 8017e90:	6060      	str	r0, [r4, #4]
 8017e92:	6863      	ldr	r3, [r4, #4]
 8017e94:	6123      	str	r3, [r4, #16]
 8017e96:	2300      	movs	r3, #0
 8017e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017e9c:	e7aa      	b.n	8017df4 <_printf_i+0x14c>
 8017e9e:	6923      	ldr	r3, [r4, #16]
 8017ea0:	462a      	mov	r2, r5
 8017ea2:	4649      	mov	r1, r9
 8017ea4:	4640      	mov	r0, r8
 8017ea6:	47d0      	blx	sl
 8017ea8:	3001      	adds	r0, #1
 8017eaa:	d0ad      	beq.n	8017e08 <_printf_i+0x160>
 8017eac:	6823      	ldr	r3, [r4, #0]
 8017eae:	079b      	lsls	r3, r3, #30
 8017eb0:	d413      	bmi.n	8017eda <_printf_i+0x232>
 8017eb2:	68e0      	ldr	r0, [r4, #12]
 8017eb4:	9b03      	ldr	r3, [sp, #12]
 8017eb6:	4298      	cmp	r0, r3
 8017eb8:	bfb8      	it	lt
 8017eba:	4618      	movlt	r0, r3
 8017ebc:	e7a6      	b.n	8017e0c <_printf_i+0x164>
 8017ebe:	2301      	movs	r3, #1
 8017ec0:	4632      	mov	r2, r6
 8017ec2:	4649      	mov	r1, r9
 8017ec4:	4640      	mov	r0, r8
 8017ec6:	47d0      	blx	sl
 8017ec8:	3001      	adds	r0, #1
 8017eca:	d09d      	beq.n	8017e08 <_printf_i+0x160>
 8017ecc:	3501      	adds	r5, #1
 8017ece:	68e3      	ldr	r3, [r4, #12]
 8017ed0:	9903      	ldr	r1, [sp, #12]
 8017ed2:	1a5b      	subs	r3, r3, r1
 8017ed4:	42ab      	cmp	r3, r5
 8017ed6:	dcf2      	bgt.n	8017ebe <_printf_i+0x216>
 8017ed8:	e7eb      	b.n	8017eb2 <_printf_i+0x20a>
 8017eda:	2500      	movs	r5, #0
 8017edc:	f104 0619 	add.w	r6, r4, #25
 8017ee0:	e7f5      	b.n	8017ece <_printf_i+0x226>
 8017ee2:	bf00      	nop
 8017ee4:	0801ee26 	.word	0x0801ee26
 8017ee8:	0801ee37 	.word	0x0801ee37

08017eec <_scanf_float>:
 8017eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ef0:	b087      	sub	sp, #28
 8017ef2:	4617      	mov	r7, r2
 8017ef4:	9303      	str	r3, [sp, #12]
 8017ef6:	688b      	ldr	r3, [r1, #8]
 8017ef8:	1e5a      	subs	r2, r3, #1
 8017efa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017efe:	bf83      	ittte	hi
 8017f00:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017f04:	195b      	addhi	r3, r3, r5
 8017f06:	9302      	strhi	r3, [sp, #8]
 8017f08:	2300      	movls	r3, #0
 8017f0a:	bf86      	itte	hi
 8017f0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017f10:	608b      	strhi	r3, [r1, #8]
 8017f12:	9302      	strls	r3, [sp, #8]
 8017f14:	680b      	ldr	r3, [r1, #0]
 8017f16:	468b      	mov	fp, r1
 8017f18:	2500      	movs	r5, #0
 8017f1a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017f1e:	f84b 3b1c 	str.w	r3, [fp], #28
 8017f22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017f26:	4680      	mov	r8, r0
 8017f28:	460c      	mov	r4, r1
 8017f2a:	465e      	mov	r6, fp
 8017f2c:	46aa      	mov	sl, r5
 8017f2e:	46a9      	mov	r9, r5
 8017f30:	9501      	str	r5, [sp, #4]
 8017f32:	68a2      	ldr	r2, [r4, #8]
 8017f34:	b152      	cbz	r2, 8017f4c <_scanf_float+0x60>
 8017f36:	683b      	ldr	r3, [r7, #0]
 8017f38:	781b      	ldrb	r3, [r3, #0]
 8017f3a:	2b4e      	cmp	r3, #78	; 0x4e
 8017f3c:	d864      	bhi.n	8018008 <_scanf_float+0x11c>
 8017f3e:	2b40      	cmp	r3, #64	; 0x40
 8017f40:	d83c      	bhi.n	8017fbc <_scanf_float+0xd0>
 8017f42:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017f46:	b2c8      	uxtb	r0, r1
 8017f48:	280e      	cmp	r0, #14
 8017f4a:	d93a      	bls.n	8017fc2 <_scanf_float+0xd6>
 8017f4c:	f1b9 0f00 	cmp.w	r9, #0
 8017f50:	d003      	beq.n	8017f5a <_scanf_float+0x6e>
 8017f52:	6823      	ldr	r3, [r4, #0]
 8017f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017f58:	6023      	str	r3, [r4, #0]
 8017f5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8017f5e:	f1ba 0f01 	cmp.w	sl, #1
 8017f62:	f200 8113 	bhi.w	801818c <_scanf_float+0x2a0>
 8017f66:	455e      	cmp	r6, fp
 8017f68:	f200 8105 	bhi.w	8018176 <_scanf_float+0x28a>
 8017f6c:	2501      	movs	r5, #1
 8017f6e:	4628      	mov	r0, r5
 8017f70:	b007      	add	sp, #28
 8017f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f76:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017f7a:	2a0d      	cmp	r2, #13
 8017f7c:	d8e6      	bhi.n	8017f4c <_scanf_float+0x60>
 8017f7e:	a101      	add	r1, pc, #4	; (adr r1, 8017f84 <_scanf_float+0x98>)
 8017f80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017f84:	080180c3 	.word	0x080180c3
 8017f88:	08017f4d 	.word	0x08017f4d
 8017f8c:	08017f4d 	.word	0x08017f4d
 8017f90:	08017f4d 	.word	0x08017f4d
 8017f94:	08018123 	.word	0x08018123
 8017f98:	080180fb 	.word	0x080180fb
 8017f9c:	08017f4d 	.word	0x08017f4d
 8017fa0:	08017f4d 	.word	0x08017f4d
 8017fa4:	080180d1 	.word	0x080180d1
 8017fa8:	08017f4d 	.word	0x08017f4d
 8017fac:	08017f4d 	.word	0x08017f4d
 8017fb0:	08017f4d 	.word	0x08017f4d
 8017fb4:	08017f4d 	.word	0x08017f4d
 8017fb8:	08018089 	.word	0x08018089
 8017fbc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017fc0:	e7db      	b.n	8017f7a <_scanf_float+0x8e>
 8017fc2:	290e      	cmp	r1, #14
 8017fc4:	d8c2      	bhi.n	8017f4c <_scanf_float+0x60>
 8017fc6:	a001      	add	r0, pc, #4	; (adr r0, 8017fcc <_scanf_float+0xe0>)
 8017fc8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017fcc:	0801807b 	.word	0x0801807b
 8017fd0:	08017f4d 	.word	0x08017f4d
 8017fd4:	0801807b 	.word	0x0801807b
 8017fd8:	0801810f 	.word	0x0801810f
 8017fdc:	08017f4d 	.word	0x08017f4d
 8017fe0:	08018029 	.word	0x08018029
 8017fe4:	08018065 	.word	0x08018065
 8017fe8:	08018065 	.word	0x08018065
 8017fec:	08018065 	.word	0x08018065
 8017ff0:	08018065 	.word	0x08018065
 8017ff4:	08018065 	.word	0x08018065
 8017ff8:	08018065 	.word	0x08018065
 8017ffc:	08018065 	.word	0x08018065
 8018000:	08018065 	.word	0x08018065
 8018004:	08018065 	.word	0x08018065
 8018008:	2b6e      	cmp	r3, #110	; 0x6e
 801800a:	d809      	bhi.n	8018020 <_scanf_float+0x134>
 801800c:	2b60      	cmp	r3, #96	; 0x60
 801800e:	d8b2      	bhi.n	8017f76 <_scanf_float+0x8a>
 8018010:	2b54      	cmp	r3, #84	; 0x54
 8018012:	d077      	beq.n	8018104 <_scanf_float+0x218>
 8018014:	2b59      	cmp	r3, #89	; 0x59
 8018016:	d199      	bne.n	8017f4c <_scanf_float+0x60>
 8018018:	2d07      	cmp	r5, #7
 801801a:	d197      	bne.n	8017f4c <_scanf_float+0x60>
 801801c:	2508      	movs	r5, #8
 801801e:	e029      	b.n	8018074 <_scanf_float+0x188>
 8018020:	2b74      	cmp	r3, #116	; 0x74
 8018022:	d06f      	beq.n	8018104 <_scanf_float+0x218>
 8018024:	2b79      	cmp	r3, #121	; 0x79
 8018026:	e7f6      	b.n	8018016 <_scanf_float+0x12a>
 8018028:	6821      	ldr	r1, [r4, #0]
 801802a:	05c8      	lsls	r0, r1, #23
 801802c:	d51a      	bpl.n	8018064 <_scanf_float+0x178>
 801802e:	9b02      	ldr	r3, [sp, #8]
 8018030:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8018034:	6021      	str	r1, [r4, #0]
 8018036:	f109 0901 	add.w	r9, r9, #1
 801803a:	b11b      	cbz	r3, 8018044 <_scanf_float+0x158>
 801803c:	3b01      	subs	r3, #1
 801803e:	3201      	adds	r2, #1
 8018040:	9302      	str	r3, [sp, #8]
 8018042:	60a2      	str	r2, [r4, #8]
 8018044:	68a3      	ldr	r3, [r4, #8]
 8018046:	3b01      	subs	r3, #1
 8018048:	60a3      	str	r3, [r4, #8]
 801804a:	6923      	ldr	r3, [r4, #16]
 801804c:	3301      	adds	r3, #1
 801804e:	6123      	str	r3, [r4, #16]
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	3b01      	subs	r3, #1
 8018054:	2b00      	cmp	r3, #0
 8018056:	607b      	str	r3, [r7, #4]
 8018058:	f340 8084 	ble.w	8018164 <_scanf_float+0x278>
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	3301      	adds	r3, #1
 8018060:	603b      	str	r3, [r7, #0]
 8018062:	e766      	b.n	8017f32 <_scanf_float+0x46>
 8018064:	eb1a 0f05 	cmn.w	sl, r5
 8018068:	f47f af70 	bne.w	8017f4c <_scanf_float+0x60>
 801806c:	6822      	ldr	r2, [r4, #0]
 801806e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8018072:	6022      	str	r2, [r4, #0]
 8018074:	f806 3b01 	strb.w	r3, [r6], #1
 8018078:	e7e4      	b.n	8018044 <_scanf_float+0x158>
 801807a:	6822      	ldr	r2, [r4, #0]
 801807c:	0610      	lsls	r0, r2, #24
 801807e:	f57f af65 	bpl.w	8017f4c <_scanf_float+0x60>
 8018082:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018086:	e7f4      	b.n	8018072 <_scanf_float+0x186>
 8018088:	f1ba 0f00 	cmp.w	sl, #0
 801808c:	d10e      	bne.n	80180ac <_scanf_float+0x1c0>
 801808e:	f1b9 0f00 	cmp.w	r9, #0
 8018092:	d10e      	bne.n	80180b2 <_scanf_float+0x1c6>
 8018094:	6822      	ldr	r2, [r4, #0]
 8018096:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801809a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801809e:	d108      	bne.n	80180b2 <_scanf_float+0x1c6>
 80180a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80180a4:	6022      	str	r2, [r4, #0]
 80180a6:	f04f 0a01 	mov.w	sl, #1
 80180aa:	e7e3      	b.n	8018074 <_scanf_float+0x188>
 80180ac:	f1ba 0f02 	cmp.w	sl, #2
 80180b0:	d055      	beq.n	801815e <_scanf_float+0x272>
 80180b2:	2d01      	cmp	r5, #1
 80180b4:	d002      	beq.n	80180bc <_scanf_float+0x1d0>
 80180b6:	2d04      	cmp	r5, #4
 80180b8:	f47f af48 	bne.w	8017f4c <_scanf_float+0x60>
 80180bc:	3501      	adds	r5, #1
 80180be:	b2ed      	uxtb	r5, r5
 80180c0:	e7d8      	b.n	8018074 <_scanf_float+0x188>
 80180c2:	f1ba 0f01 	cmp.w	sl, #1
 80180c6:	f47f af41 	bne.w	8017f4c <_scanf_float+0x60>
 80180ca:	f04f 0a02 	mov.w	sl, #2
 80180ce:	e7d1      	b.n	8018074 <_scanf_float+0x188>
 80180d0:	b97d      	cbnz	r5, 80180f2 <_scanf_float+0x206>
 80180d2:	f1b9 0f00 	cmp.w	r9, #0
 80180d6:	f47f af3c 	bne.w	8017f52 <_scanf_float+0x66>
 80180da:	6822      	ldr	r2, [r4, #0]
 80180dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80180e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80180e4:	f47f af39 	bne.w	8017f5a <_scanf_float+0x6e>
 80180e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80180ec:	6022      	str	r2, [r4, #0]
 80180ee:	2501      	movs	r5, #1
 80180f0:	e7c0      	b.n	8018074 <_scanf_float+0x188>
 80180f2:	2d03      	cmp	r5, #3
 80180f4:	d0e2      	beq.n	80180bc <_scanf_float+0x1d0>
 80180f6:	2d05      	cmp	r5, #5
 80180f8:	e7de      	b.n	80180b8 <_scanf_float+0x1cc>
 80180fa:	2d02      	cmp	r5, #2
 80180fc:	f47f af26 	bne.w	8017f4c <_scanf_float+0x60>
 8018100:	2503      	movs	r5, #3
 8018102:	e7b7      	b.n	8018074 <_scanf_float+0x188>
 8018104:	2d06      	cmp	r5, #6
 8018106:	f47f af21 	bne.w	8017f4c <_scanf_float+0x60>
 801810a:	2507      	movs	r5, #7
 801810c:	e7b2      	b.n	8018074 <_scanf_float+0x188>
 801810e:	6822      	ldr	r2, [r4, #0]
 8018110:	0591      	lsls	r1, r2, #22
 8018112:	f57f af1b 	bpl.w	8017f4c <_scanf_float+0x60>
 8018116:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801811a:	6022      	str	r2, [r4, #0]
 801811c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018120:	e7a8      	b.n	8018074 <_scanf_float+0x188>
 8018122:	6822      	ldr	r2, [r4, #0]
 8018124:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8018128:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801812c:	d006      	beq.n	801813c <_scanf_float+0x250>
 801812e:	0550      	lsls	r0, r2, #21
 8018130:	f57f af0c 	bpl.w	8017f4c <_scanf_float+0x60>
 8018134:	f1b9 0f00 	cmp.w	r9, #0
 8018138:	f43f af0f 	beq.w	8017f5a <_scanf_float+0x6e>
 801813c:	0591      	lsls	r1, r2, #22
 801813e:	bf58      	it	pl
 8018140:	9901      	ldrpl	r1, [sp, #4]
 8018142:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8018146:	bf58      	it	pl
 8018148:	eba9 0101 	subpl.w	r1, r9, r1
 801814c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8018150:	bf58      	it	pl
 8018152:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8018156:	6022      	str	r2, [r4, #0]
 8018158:	f04f 0900 	mov.w	r9, #0
 801815c:	e78a      	b.n	8018074 <_scanf_float+0x188>
 801815e:	f04f 0a03 	mov.w	sl, #3
 8018162:	e787      	b.n	8018074 <_scanf_float+0x188>
 8018164:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018168:	4639      	mov	r1, r7
 801816a:	4640      	mov	r0, r8
 801816c:	4798      	blx	r3
 801816e:	2800      	cmp	r0, #0
 8018170:	f43f aedf 	beq.w	8017f32 <_scanf_float+0x46>
 8018174:	e6ea      	b.n	8017f4c <_scanf_float+0x60>
 8018176:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801817a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801817e:	463a      	mov	r2, r7
 8018180:	4640      	mov	r0, r8
 8018182:	4798      	blx	r3
 8018184:	6923      	ldr	r3, [r4, #16]
 8018186:	3b01      	subs	r3, #1
 8018188:	6123      	str	r3, [r4, #16]
 801818a:	e6ec      	b.n	8017f66 <_scanf_float+0x7a>
 801818c:	1e6b      	subs	r3, r5, #1
 801818e:	2b06      	cmp	r3, #6
 8018190:	d825      	bhi.n	80181de <_scanf_float+0x2f2>
 8018192:	2d02      	cmp	r5, #2
 8018194:	d836      	bhi.n	8018204 <_scanf_float+0x318>
 8018196:	455e      	cmp	r6, fp
 8018198:	f67f aee8 	bls.w	8017f6c <_scanf_float+0x80>
 801819c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80181a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80181a4:	463a      	mov	r2, r7
 80181a6:	4640      	mov	r0, r8
 80181a8:	4798      	blx	r3
 80181aa:	6923      	ldr	r3, [r4, #16]
 80181ac:	3b01      	subs	r3, #1
 80181ae:	6123      	str	r3, [r4, #16]
 80181b0:	e7f1      	b.n	8018196 <_scanf_float+0x2aa>
 80181b2:	9802      	ldr	r0, [sp, #8]
 80181b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80181b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80181bc:	9002      	str	r0, [sp, #8]
 80181be:	463a      	mov	r2, r7
 80181c0:	4640      	mov	r0, r8
 80181c2:	4798      	blx	r3
 80181c4:	6923      	ldr	r3, [r4, #16]
 80181c6:	3b01      	subs	r3, #1
 80181c8:	6123      	str	r3, [r4, #16]
 80181ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80181ce:	fa5f fa8a 	uxtb.w	sl, sl
 80181d2:	f1ba 0f02 	cmp.w	sl, #2
 80181d6:	d1ec      	bne.n	80181b2 <_scanf_float+0x2c6>
 80181d8:	3d03      	subs	r5, #3
 80181da:	b2ed      	uxtb	r5, r5
 80181dc:	1b76      	subs	r6, r6, r5
 80181de:	6823      	ldr	r3, [r4, #0]
 80181e0:	05da      	lsls	r2, r3, #23
 80181e2:	d52f      	bpl.n	8018244 <_scanf_float+0x358>
 80181e4:	055b      	lsls	r3, r3, #21
 80181e6:	d510      	bpl.n	801820a <_scanf_float+0x31e>
 80181e8:	455e      	cmp	r6, fp
 80181ea:	f67f aebf 	bls.w	8017f6c <_scanf_float+0x80>
 80181ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80181f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80181f6:	463a      	mov	r2, r7
 80181f8:	4640      	mov	r0, r8
 80181fa:	4798      	blx	r3
 80181fc:	6923      	ldr	r3, [r4, #16]
 80181fe:	3b01      	subs	r3, #1
 8018200:	6123      	str	r3, [r4, #16]
 8018202:	e7f1      	b.n	80181e8 <_scanf_float+0x2fc>
 8018204:	46aa      	mov	sl, r5
 8018206:	9602      	str	r6, [sp, #8]
 8018208:	e7df      	b.n	80181ca <_scanf_float+0x2de>
 801820a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801820e:	6923      	ldr	r3, [r4, #16]
 8018210:	2965      	cmp	r1, #101	; 0x65
 8018212:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8018216:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801821a:	6123      	str	r3, [r4, #16]
 801821c:	d00c      	beq.n	8018238 <_scanf_float+0x34c>
 801821e:	2945      	cmp	r1, #69	; 0x45
 8018220:	d00a      	beq.n	8018238 <_scanf_float+0x34c>
 8018222:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018226:	463a      	mov	r2, r7
 8018228:	4640      	mov	r0, r8
 801822a:	4798      	blx	r3
 801822c:	6923      	ldr	r3, [r4, #16]
 801822e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8018232:	3b01      	subs	r3, #1
 8018234:	1eb5      	subs	r5, r6, #2
 8018236:	6123      	str	r3, [r4, #16]
 8018238:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801823c:	463a      	mov	r2, r7
 801823e:	4640      	mov	r0, r8
 8018240:	4798      	blx	r3
 8018242:	462e      	mov	r6, r5
 8018244:	6825      	ldr	r5, [r4, #0]
 8018246:	f015 0510 	ands.w	r5, r5, #16
 801824a:	d158      	bne.n	80182fe <_scanf_float+0x412>
 801824c:	7035      	strb	r5, [r6, #0]
 801824e:	6823      	ldr	r3, [r4, #0]
 8018250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8018254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018258:	d11c      	bne.n	8018294 <_scanf_float+0x3a8>
 801825a:	9b01      	ldr	r3, [sp, #4]
 801825c:	454b      	cmp	r3, r9
 801825e:	eba3 0209 	sub.w	r2, r3, r9
 8018262:	d124      	bne.n	80182ae <_scanf_float+0x3c2>
 8018264:	2200      	movs	r2, #0
 8018266:	4659      	mov	r1, fp
 8018268:	4640      	mov	r0, r8
 801826a:	f000 ff0d 	bl	8019088 <_strtod_r>
 801826e:	9b03      	ldr	r3, [sp, #12]
 8018270:	6821      	ldr	r1, [r4, #0]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	f011 0f02 	tst.w	r1, #2
 8018278:	ec57 6b10 	vmov	r6, r7, d0
 801827c:	f103 0204 	add.w	r2, r3, #4
 8018280:	d020      	beq.n	80182c4 <_scanf_float+0x3d8>
 8018282:	9903      	ldr	r1, [sp, #12]
 8018284:	600a      	str	r2, [r1, #0]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	e9c3 6700 	strd	r6, r7, [r3]
 801828c:	68e3      	ldr	r3, [r4, #12]
 801828e:	3301      	adds	r3, #1
 8018290:	60e3      	str	r3, [r4, #12]
 8018292:	e66c      	b.n	8017f6e <_scanf_float+0x82>
 8018294:	9b04      	ldr	r3, [sp, #16]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d0e4      	beq.n	8018264 <_scanf_float+0x378>
 801829a:	9905      	ldr	r1, [sp, #20]
 801829c:	230a      	movs	r3, #10
 801829e:	462a      	mov	r2, r5
 80182a0:	3101      	adds	r1, #1
 80182a2:	4640      	mov	r0, r8
 80182a4:	f000 ff78 	bl	8019198 <_strtol_r>
 80182a8:	9b04      	ldr	r3, [sp, #16]
 80182aa:	9e05      	ldr	r6, [sp, #20]
 80182ac:	1ac2      	subs	r2, r0, r3
 80182ae:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80182b2:	429e      	cmp	r6, r3
 80182b4:	bf28      	it	cs
 80182b6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80182ba:	4912      	ldr	r1, [pc, #72]	; (8018304 <_scanf_float+0x418>)
 80182bc:	4630      	mov	r0, r6
 80182be:	f000 f825 	bl	801830c <siprintf>
 80182c2:	e7cf      	b.n	8018264 <_scanf_float+0x378>
 80182c4:	f011 0f04 	tst.w	r1, #4
 80182c8:	9903      	ldr	r1, [sp, #12]
 80182ca:	600a      	str	r2, [r1, #0]
 80182cc:	d1db      	bne.n	8018286 <_scanf_float+0x39a>
 80182ce:	f8d3 8000 	ldr.w	r8, [r3]
 80182d2:	ee10 2a10 	vmov	r2, s0
 80182d6:	ee10 0a10 	vmov	r0, s0
 80182da:	463b      	mov	r3, r7
 80182dc:	4639      	mov	r1, r7
 80182de:	f7e8 fc2f 	bl	8000b40 <__aeabi_dcmpun>
 80182e2:	b128      	cbz	r0, 80182f0 <_scanf_float+0x404>
 80182e4:	4808      	ldr	r0, [pc, #32]	; (8018308 <_scanf_float+0x41c>)
 80182e6:	f001 f837 	bl	8019358 <nanf>
 80182ea:	ed88 0a00 	vstr	s0, [r8]
 80182ee:	e7cd      	b.n	801828c <_scanf_float+0x3a0>
 80182f0:	4630      	mov	r0, r6
 80182f2:	4639      	mov	r1, r7
 80182f4:	f7e8 fc82 	bl	8000bfc <__aeabi_d2f>
 80182f8:	f8c8 0000 	str.w	r0, [r8]
 80182fc:	e7c6      	b.n	801828c <_scanf_float+0x3a0>
 80182fe:	2500      	movs	r5, #0
 8018300:	e635      	b.n	8017f6e <_scanf_float+0x82>
 8018302:	bf00      	nop
 8018304:	0801ee48 	.word	0x0801ee48
 8018308:	0801f237 	.word	0x0801f237

0801830c <siprintf>:
 801830c:	b40e      	push	{r1, r2, r3}
 801830e:	b500      	push	{lr}
 8018310:	b09c      	sub	sp, #112	; 0x70
 8018312:	ab1d      	add	r3, sp, #116	; 0x74
 8018314:	9002      	str	r0, [sp, #8]
 8018316:	9006      	str	r0, [sp, #24]
 8018318:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801831c:	4809      	ldr	r0, [pc, #36]	; (8018344 <siprintf+0x38>)
 801831e:	9107      	str	r1, [sp, #28]
 8018320:	9104      	str	r1, [sp, #16]
 8018322:	4909      	ldr	r1, [pc, #36]	; (8018348 <siprintf+0x3c>)
 8018324:	f853 2b04 	ldr.w	r2, [r3], #4
 8018328:	9105      	str	r1, [sp, #20]
 801832a:	6800      	ldr	r0, [r0, #0]
 801832c:	9301      	str	r3, [sp, #4]
 801832e:	a902      	add	r1, sp, #8
 8018330:	f002 fa92 	bl	801a858 <_svfiprintf_r>
 8018334:	9b02      	ldr	r3, [sp, #8]
 8018336:	2200      	movs	r2, #0
 8018338:	701a      	strb	r2, [r3, #0]
 801833a:	b01c      	add	sp, #112	; 0x70
 801833c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018340:	b003      	add	sp, #12
 8018342:	4770      	bx	lr
 8018344:	200001f0 	.word	0x200001f0
 8018348:	ffff0208 	.word	0xffff0208

0801834c <std>:
 801834c:	2300      	movs	r3, #0
 801834e:	b510      	push	{r4, lr}
 8018350:	4604      	mov	r4, r0
 8018352:	e9c0 3300 	strd	r3, r3, [r0]
 8018356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801835a:	6083      	str	r3, [r0, #8]
 801835c:	8181      	strh	r1, [r0, #12]
 801835e:	6643      	str	r3, [r0, #100]	; 0x64
 8018360:	81c2      	strh	r2, [r0, #14]
 8018362:	6183      	str	r3, [r0, #24]
 8018364:	4619      	mov	r1, r3
 8018366:	2208      	movs	r2, #8
 8018368:	305c      	adds	r0, #92	; 0x5c
 801836a:	f000 ff51 	bl	8019210 <memset>
 801836e:	4b05      	ldr	r3, [pc, #20]	; (8018384 <std+0x38>)
 8018370:	6263      	str	r3, [r4, #36]	; 0x24
 8018372:	4b05      	ldr	r3, [pc, #20]	; (8018388 <std+0x3c>)
 8018374:	62a3      	str	r3, [r4, #40]	; 0x28
 8018376:	4b05      	ldr	r3, [pc, #20]	; (801838c <std+0x40>)
 8018378:	62e3      	str	r3, [r4, #44]	; 0x2c
 801837a:	4b05      	ldr	r3, [pc, #20]	; (8018390 <std+0x44>)
 801837c:	6224      	str	r4, [r4, #32]
 801837e:	6323      	str	r3, [r4, #48]	; 0x30
 8018380:	bd10      	pop	{r4, pc}
 8018382:	bf00      	nop
 8018384:	0801b697 	.word	0x0801b697
 8018388:	0801b6b9 	.word	0x0801b6b9
 801838c:	0801b6f1 	.word	0x0801b6f1
 8018390:	0801b715 	.word	0x0801b715

08018394 <stdio_exit_handler>:
 8018394:	4a02      	ldr	r2, [pc, #8]	; (80183a0 <stdio_exit_handler+0xc>)
 8018396:	4903      	ldr	r1, [pc, #12]	; (80183a4 <stdio_exit_handler+0x10>)
 8018398:	4803      	ldr	r0, [pc, #12]	; (80183a8 <stdio_exit_handler+0x14>)
 801839a:	f000 bf09 	b.w	80191b0 <_fwalk_sglue>
 801839e:	bf00      	nop
 80183a0:	2000002c 	.word	0x2000002c
 80183a4:	0801acd5 	.word	0x0801acd5
 80183a8:	200001a4 	.word	0x200001a4

080183ac <cleanup_stdio>:
 80183ac:	6841      	ldr	r1, [r0, #4]
 80183ae:	4b0c      	ldr	r3, [pc, #48]	; (80183e0 <cleanup_stdio+0x34>)
 80183b0:	4299      	cmp	r1, r3
 80183b2:	b510      	push	{r4, lr}
 80183b4:	4604      	mov	r4, r0
 80183b6:	d001      	beq.n	80183bc <cleanup_stdio+0x10>
 80183b8:	f002 fc8c 	bl	801acd4 <_fflush_r>
 80183bc:	68a1      	ldr	r1, [r4, #8]
 80183be:	4b09      	ldr	r3, [pc, #36]	; (80183e4 <cleanup_stdio+0x38>)
 80183c0:	4299      	cmp	r1, r3
 80183c2:	d002      	beq.n	80183ca <cleanup_stdio+0x1e>
 80183c4:	4620      	mov	r0, r4
 80183c6:	f002 fc85 	bl	801acd4 <_fflush_r>
 80183ca:	68e1      	ldr	r1, [r4, #12]
 80183cc:	4b06      	ldr	r3, [pc, #24]	; (80183e8 <cleanup_stdio+0x3c>)
 80183ce:	4299      	cmp	r1, r3
 80183d0:	d004      	beq.n	80183dc <cleanup_stdio+0x30>
 80183d2:	4620      	mov	r0, r4
 80183d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183d8:	f002 bc7c 	b.w	801acd4 <_fflush_r>
 80183dc:	bd10      	pop	{r4, pc}
 80183de:	bf00      	nop
 80183e0:	20008730 	.word	0x20008730
 80183e4:	20008798 	.word	0x20008798
 80183e8:	20008800 	.word	0x20008800

080183ec <global_stdio_init.part.0>:
 80183ec:	b510      	push	{r4, lr}
 80183ee:	4b0b      	ldr	r3, [pc, #44]	; (801841c <global_stdio_init.part.0+0x30>)
 80183f0:	4c0b      	ldr	r4, [pc, #44]	; (8018420 <global_stdio_init.part.0+0x34>)
 80183f2:	4a0c      	ldr	r2, [pc, #48]	; (8018424 <global_stdio_init.part.0+0x38>)
 80183f4:	601a      	str	r2, [r3, #0]
 80183f6:	4620      	mov	r0, r4
 80183f8:	2200      	movs	r2, #0
 80183fa:	2104      	movs	r1, #4
 80183fc:	f7ff ffa6 	bl	801834c <std>
 8018400:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018404:	2201      	movs	r2, #1
 8018406:	2109      	movs	r1, #9
 8018408:	f7ff ffa0 	bl	801834c <std>
 801840c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018410:	2202      	movs	r2, #2
 8018412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018416:	2112      	movs	r1, #18
 8018418:	f7ff bf98 	b.w	801834c <std>
 801841c:	20008868 	.word	0x20008868
 8018420:	20008730 	.word	0x20008730
 8018424:	08018395 	.word	0x08018395

08018428 <__sfp_lock_acquire>:
 8018428:	4801      	ldr	r0, [pc, #4]	; (8018430 <__sfp_lock_acquire+0x8>)
 801842a:	f000 bf7d 	b.w	8019328 <__retarget_lock_acquire_recursive>
 801842e:	bf00      	nop
 8018430:	20008871 	.word	0x20008871

08018434 <__sfp_lock_release>:
 8018434:	4801      	ldr	r0, [pc, #4]	; (801843c <__sfp_lock_release+0x8>)
 8018436:	f000 bf78 	b.w	801932a <__retarget_lock_release_recursive>
 801843a:	bf00      	nop
 801843c:	20008871 	.word	0x20008871

08018440 <__sinit>:
 8018440:	b510      	push	{r4, lr}
 8018442:	4604      	mov	r4, r0
 8018444:	f7ff fff0 	bl	8018428 <__sfp_lock_acquire>
 8018448:	6a23      	ldr	r3, [r4, #32]
 801844a:	b11b      	cbz	r3, 8018454 <__sinit+0x14>
 801844c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018450:	f7ff bff0 	b.w	8018434 <__sfp_lock_release>
 8018454:	4b04      	ldr	r3, [pc, #16]	; (8018468 <__sinit+0x28>)
 8018456:	6223      	str	r3, [r4, #32]
 8018458:	4b04      	ldr	r3, [pc, #16]	; (801846c <__sinit+0x2c>)
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d1f5      	bne.n	801844c <__sinit+0xc>
 8018460:	f7ff ffc4 	bl	80183ec <global_stdio_init.part.0>
 8018464:	e7f2      	b.n	801844c <__sinit+0xc>
 8018466:	bf00      	nop
 8018468:	080183ad 	.word	0x080183ad
 801846c:	20008868 	.word	0x20008868

08018470 <sulp>:
 8018470:	b570      	push	{r4, r5, r6, lr}
 8018472:	4604      	mov	r4, r0
 8018474:	460d      	mov	r5, r1
 8018476:	ec45 4b10 	vmov	d0, r4, r5
 801847a:	4616      	mov	r6, r2
 801847c:	f002 ffca 	bl	801b414 <__ulp>
 8018480:	ec51 0b10 	vmov	r0, r1, d0
 8018484:	b17e      	cbz	r6, 80184a6 <sulp+0x36>
 8018486:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801848a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801848e:	2b00      	cmp	r3, #0
 8018490:	dd09      	ble.n	80184a6 <sulp+0x36>
 8018492:	051b      	lsls	r3, r3, #20
 8018494:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8018498:	2400      	movs	r4, #0
 801849a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801849e:	4622      	mov	r2, r4
 80184a0:	462b      	mov	r3, r5
 80184a2:	f7e8 f8b3 	bl	800060c <__aeabi_dmul>
 80184a6:	bd70      	pop	{r4, r5, r6, pc}

080184a8 <_strtod_l>:
 80184a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184ac:	ed2d 8b02 	vpush	{d8}
 80184b0:	b09b      	sub	sp, #108	; 0x6c
 80184b2:	4604      	mov	r4, r0
 80184b4:	9213      	str	r2, [sp, #76]	; 0x4c
 80184b6:	2200      	movs	r2, #0
 80184b8:	9216      	str	r2, [sp, #88]	; 0x58
 80184ba:	460d      	mov	r5, r1
 80184bc:	f04f 0800 	mov.w	r8, #0
 80184c0:	f04f 0900 	mov.w	r9, #0
 80184c4:	460a      	mov	r2, r1
 80184c6:	9215      	str	r2, [sp, #84]	; 0x54
 80184c8:	7811      	ldrb	r1, [r2, #0]
 80184ca:	292b      	cmp	r1, #43	; 0x2b
 80184cc:	d04c      	beq.n	8018568 <_strtod_l+0xc0>
 80184ce:	d83a      	bhi.n	8018546 <_strtod_l+0x9e>
 80184d0:	290d      	cmp	r1, #13
 80184d2:	d834      	bhi.n	801853e <_strtod_l+0x96>
 80184d4:	2908      	cmp	r1, #8
 80184d6:	d834      	bhi.n	8018542 <_strtod_l+0x9a>
 80184d8:	2900      	cmp	r1, #0
 80184da:	d03d      	beq.n	8018558 <_strtod_l+0xb0>
 80184dc:	2200      	movs	r2, #0
 80184de:	920a      	str	r2, [sp, #40]	; 0x28
 80184e0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80184e2:	7832      	ldrb	r2, [r6, #0]
 80184e4:	2a30      	cmp	r2, #48	; 0x30
 80184e6:	f040 80b4 	bne.w	8018652 <_strtod_l+0x1aa>
 80184ea:	7872      	ldrb	r2, [r6, #1]
 80184ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80184f0:	2a58      	cmp	r2, #88	; 0x58
 80184f2:	d170      	bne.n	80185d6 <_strtod_l+0x12e>
 80184f4:	9302      	str	r3, [sp, #8]
 80184f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184f8:	9301      	str	r3, [sp, #4]
 80184fa:	ab16      	add	r3, sp, #88	; 0x58
 80184fc:	9300      	str	r3, [sp, #0]
 80184fe:	4a8e      	ldr	r2, [pc, #568]	; (8018738 <_strtod_l+0x290>)
 8018500:	ab17      	add	r3, sp, #92	; 0x5c
 8018502:	a915      	add	r1, sp, #84	; 0x54
 8018504:	4620      	mov	r0, r4
 8018506:	f001 fe5d 	bl	801a1c4 <__gethex>
 801850a:	f010 070f 	ands.w	r7, r0, #15
 801850e:	4605      	mov	r5, r0
 8018510:	d005      	beq.n	801851e <_strtod_l+0x76>
 8018512:	2f06      	cmp	r7, #6
 8018514:	d12a      	bne.n	801856c <_strtod_l+0xc4>
 8018516:	3601      	adds	r6, #1
 8018518:	2300      	movs	r3, #0
 801851a:	9615      	str	r6, [sp, #84]	; 0x54
 801851c:	930a      	str	r3, [sp, #40]	; 0x28
 801851e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018520:	2b00      	cmp	r3, #0
 8018522:	f040 857f 	bne.w	8019024 <_strtod_l+0xb7c>
 8018526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018528:	b1db      	cbz	r3, 8018562 <_strtod_l+0xba>
 801852a:	4642      	mov	r2, r8
 801852c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018530:	ec43 2b10 	vmov	d0, r2, r3
 8018534:	b01b      	add	sp, #108	; 0x6c
 8018536:	ecbd 8b02 	vpop	{d8}
 801853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801853e:	2920      	cmp	r1, #32
 8018540:	d1cc      	bne.n	80184dc <_strtod_l+0x34>
 8018542:	3201      	adds	r2, #1
 8018544:	e7bf      	b.n	80184c6 <_strtod_l+0x1e>
 8018546:	292d      	cmp	r1, #45	; 0x2d
 8018548:	d1c8      	bne.n	80184dc <_strtod_l+0x34>
 801854a:	2101      	movs	r1, #1
 801854c:	910a      	str	r1, [sp, #40]	; 0x28
 801854e:	1c51      	adds	r1, r2, #1
 8018550:	9115      	str	r1, [sp, #84]	; 0x54
 8018552:	7852      	ldrb	r2, [r2, #1]
 8018554:	2a00      	cmp	r2, #0
 8018556:	d1c3      	bne.n	80184e0 <_strtod_l+0x38>
 8018558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801855a:	9515      	str	r5, [sp, #84]	; 0x54
 801855c:	2b00      	cmp	r3, #0
 801855e:	f040 855f 	bne.w	8019020 <_strtod_l+0xb78>
 8018562:	4642      	mov	r2, r8
 8018564:	464b      	mov	r3, r9
 8018566:	e7e3      	b.n	8018530 <_strtod_l+0x88>
 8018568:	2100      	movs	r1, #0
 801856a:	e7ef      	b.n	801854c <_strtod_l+0xa4>
 801856c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801856e:	b13a      	cbz	r2, 8018580 <_strtod_l+0xd8>
 8018570:	2135      	movs	r1, #53	; 0x35
 8018572:	a818      	add	r0, sp, #96	; 0x60
 8018574:	f003 f84b 	bl	801b60e <__copybits>
 8018578:	9916      	ldr	r1, [sp, #88]	; 0x58
 801857a:	4620      	mov	r0, r4
 801857c:	f002 fc1e 	bl	801adbc <_Bfree>
 8018580:	3f01      	subs	r7, #1
 8018582:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8018584:	2f04      	cmp	r7, #4
 8018586:	d806      	bhi.n	8018596 <_strtod_l+0xee>
 8018588:	e8df f007 	tbb	[pc, r7]
 801858c:	201d0314 	.word	0x201d0314
 8018590:	14          	.byte	0x14
 8018591:	00          	.byte	0x00
 8018592:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8018596:	05e9      	lsls	r1, r5, #23
 8018598:	bf48      	it	mi
 801859a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801859e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80185a2:	0d1b      	lsrs	r3, r3, #20
 80185a4:	051b      	lsls	r3, r3, #20
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d1b9      	bne.n	801851e <_strtod_l+0x76>
 80185aa:	f000 fe93 	bl	80192d4 <__errno>
 80185ae:	2322      	movs	r3, #34	; 0x22
 80185b0:	6003      	str	r3, [r0, #0]
 80185b2:	e7b4      	b.n	801851e <_strtod_l+0x76>
 80185b4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80185b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80185bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80185c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80185c4:	e7e7      	b.n	8018596 <_strtod_l+0xee>
 80185c6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018740 <_strtod_l+0x298>
 80185ca:	e7e4      	b.n	8018596 <_strtod_l+0xee>
 80185cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80185d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80185d4:	e7df      	b.n	8018596 <_strtod_l+0xee>
 80185d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185d8:	1c5a      	adds	r2, r3, #1
 80185da:	9215      	str	r2, [sp, #84]	; 0x54
 80185dc:	785b      	ldrb	r3, [r3, #1]
 80185de:	2b30      	cmp	r3, #48	; 0x30
 80185e0:	d0f9      	beq.n	80185d6 <_strtod_l+0x12e>
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d09b      	beq.n	801851e <_strtod_l+0x76>
 80185e6:	2301      	movs	r3, #1
 80185e8:	f04f 0a00 	mov.w	sl, #0
 80185ec:	9304      	str	r3, [sp, #16]
 80185ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80185f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80185f6:	46d3      	mov	fp, sl
 80185f8:	220a      	movs	r2, #10
 80185fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80185fc:	7806      	ldrb	r6, [r0, #0]
 80185fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8018602:	b2d9      	uxtb	r1, r3
 8018604:	2909      	cmp	r1, #9
 8018606:	d926      	bls.n	8018656 <_strtod_l+0x1ae>
 8018608:	494c      	ldr	r1, [pc, #304]	; (801873c <_strtod_l+0x294>)
 801860a:	2201      	movs	r2, #1
 801860c:	f000 fdee 	bl	80191ec <strncmp>
 8018610:	2800      	cmp	r0, #0
 8018612:	d030      	beq.n	8018676 <_strtod_l+0x1ce>
 8018614:	2000      	movs	r0, #0
 8018616:	4632      	mov	r2, r6
 8018618:	9005      	str	r0, [sp, #20]
 801861a:	465e      	mov	r6, fp
 801861c:	4603      	mov	r3, r0
 801861e:	2a65      	cmp	r2, #101	; 0x65
 8018620:	d001      	beq.n	8018626 <_strtod_l+0x17e>
 8018622:	2a45      	cmp	r2, #69	; 0x45
 8018624:	d113      	bne.n	801864e <_strtod_l+0x1a6>
 8018626:	b91e      	cbnz	r6, 8018630 <_strtod_l+0x188>
 8018628:	9a04      	ldr	r2, [sp, #16]
 801862a:	4302      	orrs	r2, r0
 801862c:	d094      	beq.n	8018558 <_strtod_l+0xb0>
 801862e:	2600      	movs	r6, #0
 8018630:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8018632:	1c6a      	adds	r2, r5, #1
 8018634:	9215      	str	r2, [sp, #84]	; 0x54
 8018636:	786a      	ldrb	r2, [r5, #1]
 8018638:	2a2b      	cmp	r2, #43	; 0x2b
 801863a:	d074      	beq.n	8018726 <_strtod_l+0x27e>
 801863c:	2a2d      	cmp	r2, #45	; 0x2d
 801863e:	d078      	beq.n	8018732 <_strtod_l+0x28a>
 8018640:	f04f 0c00 	mov.w	ip, #0
 8018644:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8018648:	2909      	cmp	r1, #9
 801864a:	d97f      	bls.n	801874c <_strtod_l+0x2a4>
 801864c:	9515      	str	r5, [sp, #84]	; 0x54
 801864e:	2700      	movs	r7, #0
 8018650:	e09e      	b.n	8018790 <_strtod_l+0x2e8>
 8018652:	2300      	movs	r3, #0
 8018654:	e7c8      	b.n	80185e8 <_strtod_l+0x140>
 8018656:	f1bb 0f08 	cmp.w	fp, #8
 801865a:	bfd8      	it	le
 801865c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801865e:	f100 0001 	add.w	r0, r0, #1
 8018662:	bfda      	itte	le
 8018664:	fb02 3301 	mlale	r3, r2, r1, r3
 8018668:	9309      	strle	r3, [sp, #36]	; 0x24
 801866a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801866e:	f10b 0b01 	add.w	fp, fp, #1
 8018672:	9015      	str	r0, [sp, #84]	; 0x54
 8018674:	e7c1      	b.n	80185fa <_strtod_l+0x152>
 8018676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018678:	1c5a      	adds	r2, r3, #1
 801867a:	9215      	str	r2, [sp, #84]	; 0x54
 801867c:	785a      	ldrb	r2, [r3, #1]
 801867e:	f1bb 0f00 	cmp.w	fp, #0
 8018682:	d037      	beq.n	80186f4 <_strtod_l+0x24c>
 8018684:	9005      	str	r0, [sp, #20]
 8018686:	465e      	mov	r6, fp
 8018688:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801868c:	2b09      	cmp	r3, #9
 801868e:	d912      	bls.n	80186b6 <_strtod_l+0x20e>
 8018690:	2301      	movs	r3, #1
 8018692:	e7c4      	b.n	801861e <_strtod_l+0x176>
 8018694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018696:	1c5a      	adds	r2, r3, #1
 8018698:	9215      	str	r2, [sp, #84]	; 0x54
 801869a:	785a      	ldrb	r2, [r3, #1]
 801869c:	3001      	adds	r0, #1
 801869e:	2a30      	cmp	r2, #48	; 0x30
 80186a0:	d0f8      	beq.n	8018694 <_strtod_l+0x1ec>
 80186a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80186a6:	2b08      	cmp	r3, #8
 80186a8:	f200 84c1 	bhi.w	801902e <_strtod_l+0xb86>
 80186ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80186ae:	9005      	str	r0, [sp, #20]
 80186b0:	2000      	movs	r0, #0
 80186b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80186b4:	4606      	mov	r6, r0
 80186b6:	3a30      	subs	r2, #48	; 0x30
 80186b8:	f100 0301 	add.w	r3, r0, #1
 80186bc:	d014      	beq.n	80186e8 <_strtod_l+0x240>
 80186be:	9905      	ldr	r1, [sp, #20]
 80186c0:	4419      	add	r1, r3
 80186c2:	9105      	str	r1, [sp, #20]
 80186c4:	4633      	mov	r3, r6
 80186c6:	eb00 0c06 	add.w	ip, r0, r6
 80186ca:	210a      	movs	r1, #10
 80186cc:	4563      	cmp	r3, ip
 80186ce:	d113      	bne.n	80186f8 <_strtod_l+0x250>
 80186d0:	1833      	adds	r3, r6, r0
 80186d2:	2b08      	cmp	r3, #8
 80186d4:	f106 0601 	add.w	r6, r6, #1
 80186d8:	4406      	add	r6, r0
 80186da:	dc1a      	bgt.n	8018712 <_strtod_l+0x26a>
 80186dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80186de:	230a      	movs	r3, #10
 80186e0:	fb03 2301 	mla	r3, r3, r1, r2
 80186e4:	9309      	str	r3, [sp, #36]	; 0x24
 80186e6:	2300      	movs	r3, #0
 80186e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80186ea:	1c51      	adds	r1, r2, #1
 80186ec:	9115      	str	r1, [sp, #84]	; 0x54
 80186ee:	7852      	ldrb	r2, [r2, #1]
 80186f0:	4618      	mov	r0, r3
 80186f2:	e7c9      	b.n	8018688 <_strtod_l+0x1e0>
 80186f4:	4658      	mov	r0, fp
 80186f6:	e7d2      	b.n	801869e <_strtod_l+0x1f6>
 80186f8:	2b08      	cmp	r3, #8
 80186fa:	f103 0301 	add.w	r3, r3, #1
 80186fe:	dc03      	bgt.n	8018708 <_strtod_l+0x260>
 8018700:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018702:	434f      	muls	r7, r1
 8018704:	9709      	str	r7, [sp, #36]	; 0x24
 8018706:	e7e1      	b.n	80186cc <_strtod_l+0x224>
 8018708:	2b10      	cmp	r3, #16
 801870a:	bfd8      	it	le
 801870c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8018710:	e7dc      	b.n	80186cc <_strtod_l+0x224>
 8018712:	2e10      	cmp	r6, #16
 8018714:	bfdc      	itt	le
 8018716:	230a      	movle	r3, #10
 8018718:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801871c:	e7e3      	b.n	80186e6 <_strtod_l+0x23e>
 801871e:	2300      	movs	r3, #0
 8018720:	9305      	str	r3, [sp, #20]
 8018722:	2301      	movs	r3, #1
 8018724:	e780      	b.n	8018628 <_strtod_l+0x180>
 8018726:	f04f 0c00 	mov.w	ip, #0
 801872a:	1caa      	adds	r2, r5, #2
 801872c:	9215      	str	r2, [sp, #84]	; 0x54
 801872e:	78aa      	ldrb	r2, [r5, #2]
 8018730:	e788      	b.n	8018644 <_strtod_l+0x19c>
 8018732:	f04f 0c01 	mov.w	ip, #1
 8018736:	e7f8      	b.n	801872a <_strtod_l+0x282>
 8018738:	0801ee50 	.word	0x0801ee50
 801873c:	0801ee4d 	.word	0x0801ee4d
 8018740:	7ff00000 	.word	0x7ff00000
 8018744:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018746:	1c51      	adds	r1, r2, #1
 8018748:	9115      	str	r1, [sp, #84]	; 0x54
 801874a:	7852      	ldrb	r2, [r2, #1]
 801874c:	2a30      	cmp	r2, #48	; 0x30
 801874e:	d0f9      	beq.n	8018744 <_strtod_l+0x29c>
 8018750:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8018754:	2908      	cmp	r1, #8
 8018756:	f63f af7a 	bhi.w	801864e <_strtod_l+0x1a6>
 801875a:	3a30      	subs	r2, #48	; 0x30
 801875c:	9208      	str	r2, [sp, #32]
 801875e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018760:	920c      	str	r2, [sp, #48]	; 0x30
 8018762:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018764:	1c57      	adds	r7, r2, #1
 8018766:	9715      	str	r7, [sp, #84]	; 0x54
 8018768:	7852      	ldrb	r2, [r2, #1]
 801876a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801876e:	f1be 0f09 	cmp.w	lr, #9
 8018772:	d938      	bls.n	80187e6 <_strtod_l+0x33e>
 8018774:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018776:	1a7f      	subs	r7, r7, r1
 8018778:	2f08      	cmp	r7, #8
 801877a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801877e:	dc03      	bgt.n	8018788 <_strtod_l+0x2e0>
 8018780:	9908      	ldr	r1, [sp, #32]
 8018782:	428f      	cmp	r7, r1
 8018784:	bfa8      	it	ge
 8018786:	460f      	movge	r7, r1
 8018788:	f1bc 0f00 	cmp.w	ip, #0
 801878c:	d000      	beq.n	8018790 <_strtod_l+0x2e8>
 801878e:	427f      	negs	r7, r7
 8018790:	2e00      	cmp	r6, #0
 8018792:	d14f      	bne.n	8018834 <_strtod_l+0x38c>
 8018794:	9904      	ldr	r1, [sp, #16]
 8018796:	4301      	orrs	r1, r0
 8018798:	f47f aec1 	bne.w	801851e <_strtod_l+0x76>
 801879c:	2b00      	cmp	r3, #0
 801879e:	f47f aedb 	bne.w	8018558 <_strtod_l+0xb0>
 80187a2:	2a69      	cmp	r2, #105	; 0x69
 80187a4:	d029      	beq.n	80187fa <_strtod_l+0x352>
 80187a6:	dc26      	bgt.n	80187f6 <_strtod_l+0x34e>
 80187a8:	2a49      	cmp	r2, #73	; 0x49
 80187aa:	d026      	beq.n	80187fa <_strtod_l+0x352>
 80187ac:	2a4e      	cmp	r2, #78	; 0x4e
 80187ae:	f47f aed3 	bne.w	8018558 <_strtod_l+0xb0>
 80187b2:	499b      	ldr	r1, [pc, #620]	; (8018a20 <_strtod_l+0x578>)
 80187b4:	a815      	add	r0, sp, #84	; 0x54
 80187b6:	f001 ff45 	bl	801a644 <__match>
 80187ba:	2800      	cmp	r0, #0
 80187bc:	f43f aecc 	beq.w	8018558 <_strtod_l+0xb0>
 80187c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80187c2:	781b      	ldrb	r3, [r3, #0]
 80187c4:	2b28      	cmp	r3, #40	; 0x28
 80187c6:	d12f      	bne.n	8018828 <_strtod_l+0x380>
 80187c8:	4996      	ldr	r1, [pc, #600]	; (8018a24 <_strtod_l+0x57c>)
 80187ca:	aa18      	add	r2, sp, #96	; 0x60
 80187cc:	a815      	add	r0, sp, #84	; 0x54
 80187ce:	f001 ff4d 	bl	801a66c <__hexnan>
 80187d2:	2805      	cmp	r0, #5
 80187d4:	d128      	bne.n	8018828 <_strtod_l+0x380>
 80187d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80187d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80187dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80187e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80187e4:	e69b      	b.n	801851e <_strtod_l+0x76>
 80187e6:	9f08      	ldr	r7, [sp, #32]
 80187e8:	210a      	movs	r1, #10
 80187ea:	fb01 2107 	mla	r1, r1, r7, r2
 80187ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80187f2:	9208      	str	r2, [sp, #32]
 80187f4:	e7b5      	b.n	8018762 <_strtod_l+0x2ba>
 80187f6:	2a6e      	cmp	r2, #110	; 0x6e
 80187f8:	e7d9      	b.n	80187ae <_strtod_l+0x306>
 80187fa:	498b      	ldr	r1, [pc, #556]	; (8018a28 <_strtod_l+0x580>)
 80187fc:	a815      	add	r0, sp, #84	; 0x54
 80187fe:	f001 ff21 	bl	801a644 <__match>
 8018802:	2800      	cmp	r0, #0
 8018804:	f43f aea8 	beq.w	8018558 <_strtod_l+0xb0>
 8018808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801880a:	4988      	ldr	r1, [pc, #544]	; (8018a2c <_strtod_l+0x584>)
 801880c:	3b01      	subs	r3, #1
 801880e:	a815      	add	r0, sp, #84	; 0x54
 8018810:	9315      	str	r3, [sp, #84]	; 0x54
 8018812:	f001 ff17 	bl	801a644 <__match>
 8018816:	b910      	cbnz	r0, 801881e <_strtod_l+0x376>
 8018818:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801881a:	3301      	adds	r3, #1
 801881c:	9315      	str	r3, [sp, #84]	; 0x54
 801881e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8018a3c <_strtod_l+0x594>
 8018822:	f04f 0800 	mov.w	r8, #0
 8018826:	e67a      	b.n	801851e <_strtod_l+0x76>
 8018828:	4881      	ldr	r0, [pc, #516]	; (8018a30 <_strtod_l+0x588>)
 801882a:	f000 fd8d 	bl	8019348 <nan>
 801882e:	ec59 8b10 	vmov	r8, r9, d0
 8018832:	e674      	b.n	801851e <_strtod_l+0x76>
 8018834:	9b05      	ldr	r3, [sp, #20]
 8018836:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018838:	1afb      	subs	r3, r7, r3
 801883a:	f1bb 0f00 	cmp.w	fp, #0
 801883e:	bf08      	it	eq
 8018840:	46b3      	moveq	fp, r6
 8018842:	2e10      	cmp	r6, #16
 8018844:	9308      	str	r3, [sp, #32]
 8018846:	4635      	mov	r5, r6
 8018848:	bfa8      	it	ge
 801884a:	2510      	movge	r5, #16
 801884c:	f7e7 fe64 	bl	8000518 <__aeabi_ui2d>
 8018850:	2e09      	cmp	r6, #9
 8018852:	4680      	mov	r8, r0
 8018854:	4689      	mov	r9, r1
 8018856:	dd13      	ble.n	8018880 <_strtod_l+0x3d8>
 8018858:	4b76      	ldr	r3, [pc, #472]	; (8018a34 <_strtod_l+0x58c>)
 801885a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801885e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8018862:	f7e7 fed3 	bl	800060c <__aeabi_dmul>
 8018866:	4680      	mov	r8, r0
 8018868:	4650      	mov	r0, sl
 801886a:	4689      	mov	r9, r1
 801886c:	f7e7 fe54 	bl	8000518 <__aeabi_ui2d>
 8018870:	4602      	mov	r2, r0
 8018872:	460b      	mov	r3, r1
 8018874:	4640      	mov	r0, r8
 8018876:	4649      	mov	r1, r9
 8018878:	f7e7 fd12 	bl	80002a0 <__adddf3>
 801887c:	4680      	mov	r8, r0
 801887e:	4689      	mov	r9, r1
 8018880:	2e0f      	cmp	r6, #15
 8018882:	dc38      	bgt.n	80188f6 <_strtod_l+0x44e>
 8018884:	9b08      	ldr	r3, [sp, #32]
 8018886:	2b00      	cmp	r3, #0
 8018888:	f43f ae49 	beq.w	801851e <_strtod_l+0x76>
 801888c:	dd24      	ble.n	80188d8 <_strtod_l+0x430>
 801888e:	2b16      	cmp	r3, #22
 8018890:	dc0b      	bgt.n	80188aa <_strtod_l+0x402>
 8018892:	4968      	ldr	r1, [pc, #416]	; (8018a34 <_strtod_l+0x58c>)
 8018894:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018898:	e9d1 0100 	ldrd	r0, r1, [r1]
 801889c:	4642      	mov	r2, r8
 801889e:	464b      	mov	r3, r9
 80188a0:	f7e7 feb4 	bl	800060c <__aeabi_dmul>
 80188a4:	4680      	mov	r8, r0
 80188a6:	4689      	mov	r9, r1
 80188a8:	e639      	b.n	801851e <_strtod_l+0x76>
 80188aa:	9a08      	ldr	r2, [sp, #32]
 80188ac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80188b0:	4293      	cmp	r3, r2
 80188b2:	db20      	blt.n	80188f6 <_strtod_l+0x44e>
 80188b4:	4c5f      	ldr	r4, [pc, #380]	; (8018a34 <_strtod_l+0x58c>)
 80188b6:	f1c6 060f 	rsb	r6, r6, #15
 80188ba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80188be:	4642      	mov	r2, r8
 80188c0:	464b      	mov	r3, r9
 80188c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80188c6:	f7e7 fea1 	bl	800060c <__aeabi_dmul>
 80188ca:	9b08      	ldr	r3, [sp, #32]
 80188cc:	1b9e      	subs	r6, r3, r6
 80188ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80188d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80188d6:	e7e3      	b.n	80188a0 <_strtod_l+0x3f8>
 80188d8:	9b08      	ldr	r3, [sp, #32]
 80188da:	3316      	adds	r3, #22
 80188dc:	db0b      	blt.n	80188f6 <_strtod_l+0x44e>
 80188de:	9b05      	ldr	r3, [sp, #20]
 80188e0:	1bdf      	subs	r7, r3, r7
 80188e2:	4b54      	ldr	r3, [pc, #336]	; (8018a34 <_strtod_l+0x58c>)
 80188e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80188e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80188ec:	4640      	mov	r0, r8
 80188ee:	4649      	mov	r1, r9
 80188f0:	f7e7 ffb6 	bl	8000860 <__aeabi_ddiv>
 80188f4:	e7d6      	b.n	80188a4 <_strtod_l+0x3fc>
 80188f6:	9b08      	ldr	r3, [sp, #32]
 80188f8:	1b75      	subs	r5, r6, r5
 80188fa:	441d      	add	r5, r3
 80188fc:	2d00      	cmp	r5, #0
 80188fe:	dd70      	ble.n	80189e2 <_strtod_l+0x53a>
 8018900:	f015 030f 	ands.w	r3, r5, #15
 8018904:	d00a      	beq.n	801891c <_strtod_l+0x474>
 8018906:	494b      	ldr	r1, [pc, #300]	; (8018a34 <_strtod_l+0x58c>)
 8018908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801890c:	4642      	mov	r2, r8
 801890e:	464b      	mov	r3, r9
 8018910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018914:	f7e7 fe7a 	bl	800060c <__aeabi_dmul>
 8018918:	4680      	mov	r8, r0
 801891a:	4689      	mov	r9, r1
 801891c:	f035 050f 	bics.w	r5, r5, #15
 8018920:	d04d      	beq.n	80189be <_strtod_l+0x516>
 8018922:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8018926:	dd22      	ble.n	801896e <_strtod_l+0x4c6>
 8018928:	2500      	movs	r5, #0
 801892a:	46ab      	mov	fp, r5
 801892c:	9509      	str	r5, [sp, #36]	; 0x24
 801892e:	9505      	str	r5, [sp, #20]
 8018930:	2322      	movs	r3, #34	; 0x22
 8018932:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8018a3c <_strtod_l+0x594>
 8018936:	6023      	str	r3, [r4, #0]
 8018938:	f04f 0800 	mov.w	r8, #0
 801893c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801893e:	2b00      	cmp	r3, #0
 8018940:	f43f aded 	beq.w	801851e <_strtod_l+0x76>
 8018944:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018946:	4620      	mov	r0, r4
 8018948:	f002 fa38 	bl	801adbc <_Bfree>
 801894c:	9905      	ldr	r1, [sp, #20]
 801894e:	4620      	mov	r0, r4
 8018950:	f002 fa34 	bl	801adbc <_Bfree>
 8018954:	4659      	mov	r1, fp
 8018956:	4620      	mov	r0, r4
 8018958:	f002 fa30 	bl	801adbc <_Bfree>
 801895c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801895e:	4620      	mov	r0, r4
 8018960:	f002 fa2c 	bl	801adbc <_Bfree>
 8018964:	4629      	mov	r1, r5
 8018966:	4620      	mov	r0, r4
 8018968:	f002 fa28 	bl	801adbc <_Bfree>
 801896c:	e5d7      	b.n	801851e <_strtod_l+0x76>
 801896e:	4b32      	ldr	r3, [pc, #200]	; (8018a38 <_strtod_l+0x590>)
 8018970:	9304      	str	r3, [sp, #16]
 8018972:	2300      	movs	r3, #0
 8018974:	112d      	asrs	r5, r5, #4
 8018976:	4640      	mov	r0, r8
 8018978:	4649      	mov	r1, r9
 801897a:	469a      	mov	sl, r3
 801897c:	2d01      	cmp	r5, #1
 801897e:	dc21      	bgt.n	80189c4 <_strtod_l+0x51c>
 8018980:	b10b      	cbz	r3, 8018986 <_strtod_l+0x4de>
 8018982:	4680      	mov	r8, r0
 8018984:	4689      	mov	r9, r1
 8018986:	492c      	ldr	r1, [pc, #176]	; (8018a38 <_strtod_l+0x590>)
 8018988:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801898c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8018990:	4642      	mov	r2, r8
 8018992:	464b      	mov	r3, r9
 8018994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018998:	f7e7 fe38 	bl	800060c <__aeabi_dmul>
 801899c:	4b27      	ldr	r3, [pc, #156]	; (8018a3c <_strtod_l+0x594>)
 801899e:	460a      	mov	r2, r1
 80189a0:	400b      	ands	r3, r1
 80189a2:	4927      	ldr	r1, [pc, #156]	; (8018a40 <_strtod_l+0x598>)
 80189a4:	428b      	cmp	r3, r1
 80189a6:	4680      	mov	r8, r0
 80189a8:	d8be      	bhi.n	8018928 <_strtod_l+0x480>
 80189aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80189ae:	428b      	cmp	r3, r1
 80189b0:	bf86      	itte	hi
 80189b2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8018a44 <_strtod_l+0x59c>
 80189b6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80189ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80189be:	2300      	movs	r3, #0
 80189c0:	9304      	str	r3, [sp, #16]
 80189c2:	e07b      	b.n	8018abc <_strtod_l+0x614>
 80189c4:	07ea      	lsls	r2, r5, #31
 80189c6:	d505      	bpl.n	80189d4 <_strtod_l+0x52c>
 80189c8:	9b04      	ldr	r3, [sp, #16]
 80189ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ce:	f7e7 fe1d 	bl	800060c <__aeabi_dmul>
 80189d2:	2301      	movs	r3, #1
 80189d4:	9a04      	ldr	r2, [sp, #16]
 80189d6:	3208      	adds	r2, #8
 80189d8:	f10a 0a01 	add.w	sl, sl, #1
 80189dc:	106d      	asrs	r5, r5, #1
 80189de:	9204      	str	r2, [sp, #16]
 80189e0:	e7cc      	b.n	801897c <_strtod_l+0x4d4>
 80189e2:	d0ec      	beq.n	80189be <_strtod_l+0x516>
 80189e4:	426d      	negs	r5, r5
 80189e6:	f015 020f 	ands.w	r2, r5, #15
 80189ea:	d00a      	beq.n	8018a02 <_strtod_l+0x55a>
 80189ec:	4b11      	ldr	r3, [pc, #68]	; (8018a34 <_strtod_l+0x58c>)
 80189ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80189f2:	4640      	mov	r0, r8
 80189f4:	4649      	mov	r1, r9
 80189f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189fa:	f7e7 ff31 	bl	8000860 <__aeabi_ddiv>
 80189fe:	4680      	mov	r8, r0
 8018a00:	4689      	mov	r9, r1
 8018a02:	112d      	asrs	r5, r5, #4
 8018a04:	d0db      	beq.n	80189be <_strtod_l+0x516>
 8018a06:	2d1f      	cmp	r5, #31
 8018a08:	dd1e      	ble.n	8018a48 <_strtod_l+0x5a0>
 8018a0a:	2500      	movs	r5, #0
 8018a0c:	46ab      	mov	fp, r5
 8018a0e:	9509      	str	r5, [sp, #36]	; 0x24
 8018a10:	9505      	str	r5, [sp, #20]
 8018a12:	2322      	movs	r3, #34	; 0x22
 8018a14:	f04f 0800 	mov.w	r8, #0
 8018a18:	f04f 0900 	mov.w	r9, #0
 8018a1c:	6023      	str	r3, [r4, #0]
 8018a1e:	e78d      	b.n	801893c <_strtod_l+0x494>
 8018a20:	0801ee21 	.word	0x0801ee21
 8018a24:	0801ee64 	.word	0x0801ee64
 8018a28:	0801ee19 	.word	0x0801ee19
 8018a2c:	0801efac 	.word	0x0801efac
 8018a30:	0801f237 	.word	0x0801f237
 8018a34:	0801f128 	.word	0x0801f128
 8018a38:	0801f100 	.word	0x0801f100
 8018a3c:	7ff00000 	.word	0x7ff00000
 8018a40:	7ca00000 	.word	0x7ca00000
 8018a44:	7fefffff 	.word	0x7fefffff
 8018a48:	f015 0310 	ands.w	r3, r5, #16
 8018a4c:	bf18      	it	ne
 8018a4e:	236a      	movne	r3, #106	; 0x6a
 8018a50:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8018df4 <_strtod_l+0x94c>
 8018a54:	9304      	str	r3, [sp, #16]
 8018a56:	4640      	mov	r0, r8
 8018a58:	4649      	mov	r1, r9
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	07ea      	lsls	r2, r5, #31
 8018a5e:	d504      	bpl.n	8018a6a <_strtod_l+0x5c2>
 8018a60:	e9da 2300 	ldrd	r2, r3, [sl]
 8018a64:	f7e7 fdd2 	bl	800060c <__aeabi_dmul>
 8018a68:	2301      	movs	r3, #1
 8018a6a:	106d      	asrs	r5, r5, #1
 8018a6c:	f10a 0a08 	add.w	sl, sl, #8
 8018a70:	d1f4      	bne.n	8018a5c <_strtod_l+0x5b4>
 8018a72:	b10b      	cbz	r3, 8018a78 <_strtod_l+0x5d0>
 8018a74:	4680      	mov	r8, r0
 8018a76:	4689      	mov	r9, r1
 8018a78:	9b04      	ldr	r3, [sp, #16]
 8018a7a:	b1bb      	cbz	r3, 8018aac <_strtod_l+0x604>
 8018a7c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8018a80:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	4649      	mov	r1, r9
 8018a88:	dd10      	ble.n	8018aac <_strtod_l+0x604>
 8018a8a:	2b1f      	cmp	r3, #31
 8018a8c:	f340 811e 	ble.w	8018ccc <_strtod_l+0x824>
 8018a90:	2b34      	cmp	r3, #52	; 0x34
 8018a92:	bfde      	ittt	le
 8018a94:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8018a98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8018a9c:	4093      	lslle	r3, r2
 8018a9e:	f04f 0800 	mov.w	r8, #0
 8018aa2:	bfcc      	ite	gt
 8018aa4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8018aa8:	ea03 0901 	andle.w	r9, r3, r1
 8018aac:	2200      	movs	r2, #0
 8018aae:	2300      	movs	r3, #0
 8018ab0:	4640      	mov	r0, r8
 8018ab2:	4649      	mov	r1, r9
 8018ab4:	f7e8 f812 	bl	8000adc <__aeabi_dcmpeq>
 8018ab8:	2800      	cmp	r0, #0
 8018aba:	d1a6      	bne.n	8018a0a <_strtod_l+0x562>
 8018abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018abe:	9300      	str	r3, [sp, #0]
 8018ac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018ac2:	4633      	mov	r3, r6
 8018ac4:	465a      	mov	r2, fp
 8018ac6:	4620      	mov	r0, r4
 8018ac8:	f002 f9e0 	bl	801ae8c <__s2b>
 8018acc:	9009      	str	r0, [sp, #36]	; 0x24
 8018ace:	2800      	cmp	r0, #0
 8018ad0:	f43f af2a 	beq.w	8018928 <_strtod_l+0x480>
 8018ad4:	9a08      	ldr	r2, [sp, #32]
 8018ad6:	9b05      	ldr	r3, [sp, #20]
 8018ad8:	2a00      	cmp	r2, #0
 8018ada:	eba3 0307 	sub.w	r3, r3, r7
 8018ade:	bfa8      	it	ge
 8018ae0:	2300      	movge	r3, #0
 8018ae2:	930c      	str	r3, [sp, #48]	; 0x30
 8018ae4:	2500      	movs	r5, #0
 8018ae6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8018aea:	9312      	str	r3, [sp, #72]	; 0x48
 8018aec:	46ab      	mov	fp, r5
 8018aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018af0:	4620      	mov	r0, r4
 8018af2:	6859      	ldr	r1, [r3, #4]
 8018af4:	f002 f922 	bl	801ad3c <_Balloc>
 8018af8:	9005      	str	r0, [sp, #20]
 8018afa:	2800      	cmp	r0, #0
 8018afc:	f43f af18 	beq.w	8018930 <_strtod_l+0x488>
 8018b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b02:	691a      	ldr	r2, [r3, #16]
 8018b04:	3202      	adds	r2, #2
 8018b06:	f103 010c 	add.w	r1, r3, #12
 8018b0a:	0092      	lsls	r2, r2, #2
 8018b0c:	300c      	adds	r0, #12
 8018b0e:	f000 fc0d 	bl	801932c <memcpy>
 8018b12:	ec49 8b10 	vmov	d0, r8, r9
 8018b16:	aa18      	add	r2, sp, #96	; 0x60
 8018b18:	a917      	add	r1, sp, #92	; 0x5c
 8018b1a:	4620      	mov	r0, r4
 8018b1c:	f002 fcea 	bl	801b4f4 <__d2b>
 8018b20:	ec49 8b18 	vmov	d8, r8, r9
 8018b24:	9016      	str	r0, [sp, #88]	; 0x58
 8018b26:	2800      	cmp	r0, #0
 8018b28:	f43f af02 	beq.w	8018930 <_strtod_l+0x488>
 8018b2c:	2101      	movs	r1, #1
 8018b2e:	4620      	mov	r0, r4
 8018b30:	f002 fa44 	bl	801afbc <__i2b>
 8018b34:	4683      	mov	fp, r0
 8018b36:	2800      	cmp	r0, #0
 8018b38:	f43f aefa 	beq.w	8018930 <_strtod_l+0x488>
 8018b3c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8018b3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018b40:	2e00      	cmp	r6, #0
 8018b42:	bfab      	itete	ge
 8018b44:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8018b46:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8018b48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8018b4a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8018b4e:	bfac      	ite	ge
 8018b50:	eb06 0a03 	addge.w	sl, r6, r3
 8018b54:	1b9f      	sublt	r7, r3, r6
 8018b56:	9b04      	ldr	r3, [sp, #16]
 8018b58:	1af6      	subs	r6, r6, r3
 8018b5a:	4416      	add	r6, r2
 8018b5c:	4ba0      	ldr	r3, [pc, #640]	; (8018de0 <_strtod_l+0x938>)
 8018b5e:	3e01      	subs	r6, #1
 8018b60:	429e      	cmp	r6, r3
 8018b62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018b66:	f280 80c4 	bge.w	8018cf2 <_strtod_l+0x84a>
 8018b6a:	1b9b      	subs	r3, r3, r6
 8018b6c:	2b1f      	cmp	r3, #31
 8018b6e:	eba2 0203 	sub.w	r2, r2, r3
 8018b72:	f04f 0101 	mov.w	r1, #1
 8018b76:	f300 80b0 	bgt.w	8018cda <_strtod_l+0x832>
 8018b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8018b7e:	930e      	str	r3, [sp, #56]	; 0x38
 8018b80:	2300      	movs	r3, #0
 8018b82:	930d      	str	r3, [sp, #52]	; 0x34
 8018b84:	eb0a 0602 	add.w	r6, sl, r2
 8018b88:	9b04      	ldr	r3, [sp, #16]
 8018b8a:	45b2      	cmp	sl, r6
 8018b8c:	4417      	add	r7, r2
 8018b8e:	441f      	add	r7, r3
 8018b90:	4653      	mov	r3, sl
 8018b92:	bfa8      	it	ge
 8018b94:	4633      	movge	r3, r6
 8018b96:	42bb      	cmp	r3, r7
 8018b98:	bfa8      	it	ge
 8018b9a:	463b      	movge	r3, r7
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	bfc2      	ittt	gt
 8018ba0:	1af6      	subgt	r6, r6, r3
 8018ba2:	1aff      	subgt	r7, r7, r3
 8018ba4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8018ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	dd17      	ble.n	8018bde <_strtod_l+0x736>
 8018bae:	4659      	mov	r1, fp
 8018bb0:	461a      	mov	r2, r3
 8018bb2:	4620      	mov	r0, r4
 8018bb4:	f002 fac2 	bl	801b13c <__pow5mult>
 8018bb8:	4683      	mov	fp, r0
 8018bba:	2800      	cmp	r0, #0
 8018bbc:	f43f aeb8 	beq.w	8018930 <_strtod_l+0x488>
 8018bc0:	4601      	mov	r1, r0
 8018bc2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018bc4:	4620      	mov	r0, r4
 8018bc6:	f002 fa0f 	bl	801afe8 <__multiply>
 8018bca:	900b      	str	r0, [sp, #44]	; 0x2c
 8018bcc:	2800      	cmp	r0, #0
 8018bce:	f43f aeaf 	beq.w	8018930 <_strtod_l+0x488>
 8018bd2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018bd4:	4620      	mov	r0, r4
 8018bd6:	f002 f8f1 	bl	801adbc <_Bfree>
 8018bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018bdc:	9316      	str	r3, [sp, #88]	; 0x58
 8018bde:	2e00      	cmp	r6, #0
 8018be0:	f300 808c 	bgt.w	8018cfc <_strtod_l+0x854>
 8018be4:	9b08      	ldr	r3, [sp, #32]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	dd08      	ble.n	8018bfc <_strtod_l+0x754>
 8018bea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018bec:	9905      	ldr	r1, [sp, #20]
 8018bee:	4620      	mov	r0, r4
 8018bf0:	f002 faa4 	bl	801b13c <__pow5mult>
 8018bf4:	9005      	str	r0, [sp, #20]
 8018bf6:	2800      	cmp	r0, #0
 8018bf8:	f43f ae9a 	beq.w	8018930 <_strtod_l+0x488>
 8018bfc:	2f00      	cmp	r7, #0
 8018bfe:	dd08      	ble.n	8018c12 <_strtod_l+0x76a>
 8018c00:	9905      	ldr	r1, [sp, #20]
 8018c02:	463a      	mov	r2, r7
 8018c04:	4620      	mov	r0, r4
 8018c06:	f002 faf3 	bl	801b1f0 <__lshift>
 8018c0a:	9005      	str	r0, [sp, #20]
 8018c0c:	2800      	cmp	r0, #0
 8018c0e:	f43f ae8f 	beq.w	8018930 <_strtod_l+0x488>
 8018c12:	f1ba 0f00 	cmp.w	sl, #0
 8018c16:	dd08      	ble.n	8018c2a <_strtod_l+0x782>
 8018c18:	4659      	mov	r1, fp
 8018c1a:	4652      	mov	r2, sl
 8018c1c:	4620      	mov	r0, r4
 8018c1e:	f002 fae7 	bl	801b1f0 <__lshift>
 8018c22:	4683      	mov	fp, r0
 8018c24:	2800      	cmp	r0, #0
 8018c26:	f43f ae83 	beq.w	8018930 <_strtod_l+0x488>
 8018c2a:	9a05      	ldr	r2, [sp, #20]
 8018c2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018c2e:	4620      	mov	r0, r4
 8018c30:	f002 fb66 	bl	801b300 <__mdiff>
 8018c34:	4605      	mov	r5, r0
 8018c36:	2800      	cmp	r0, #0
 8018c38:	f43f ae7a 	beq.w	8018930 <_strtod_l+0x488>
 8018c3c:	68c3      	ldr	r3, [r0, #12]
 8018c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c40:	2300      	movs	r3, #0
 8018c42:	60c3      	str	r3, [r0, #12]
 8018c44:	4659      	mov	r1, fp
 8018c46:	f002 fb3f 	bl	801b2c8 <__mcmp>
 8018c4a:	2800      	cmp	r0, #0
 8018c4c:	da60      	bge.n	8018d10 <_strtod_l+0x868>
 8018c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c50:	ea53 0308 	orrs.w	r3, r3, r8
 8018c54:	f040 8084 	bne.w	8018d60 <_strtod_l+0x8b8>
 8018c58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d17f      	bne.n	8018d60 <_strtod_l+0x8b8>
 8018c60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018c64:	0d1b      	lsrs	r3, r3, #20
 8018c66:	051b      	lsls	r3, r3, #20
 8018c68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8018c6c:	d978      	bls.n	8018d60 <_strtod_l+0x8b8>
 8018c6e:	696b      	ldr	r3, [r5, #20]
 8018c70:	b913      	cbnz	r3, 8018c78 <_strtod_l+0x7d0>
 8018c72:	692b      	ldr	r3, [r5, #16]
 8018c74:	2b01      	cmp	r3, #1
 8018c76:	dd73      	ble.n	8018d60 <_strtod_l+0x8b8>
 8018c78:	4629      	mov	r1, r5
 8018c7a:	2201      	movs	r2, #1
 8018c7c:	4620      	mov	r0, r4
 8018c7e:	f002 fab7 	bl	801b1f0 <__lshift>
 8018c82:	4659      	mov	r1, fp
 8018c84:	4605      	mov	r5, r0
 8018c86:	f002 fb1f 	bl	801b2c8 <__mcmp>
 8018c8a:	2800      	cmp	r0, #0
 8018c8c:	dd68      	ble.n	8018d60 <_strtod_l+0x8b8>
 8018c8e:	9904      	ldr	r1, [sp, #16]
 8018c90:	4a54      	ldr	r2, [pc, #336]	; (8018de4 <_strtod_l+0x93c>)
 8018c92:	464b      	mov	r3, r9
 8018c94:	2900      	cmp	r1, #0
 8018c96:	f000 8084 	beq.w	8018da2 <_strtod_l+0x8fa>
 8018c9a:	ea02 0109 	and.w	r1, r2, r9
 8018c9e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018ca2:	dc7e      	bgt.n	8018da2 <_strtod_l+0x8fa>
 8018ca4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8018ca8:	f77f aeb3 	ble.w	8018a12 <_strtod_l+0x56a>
 8018cac:	4b4e      	ldr	r3, [pc, #312]	; (8018de8 <_strtod_l+0x940>)
 8018cae:	4640      	mov	r0, r8
 8018cb0:	4649      	mov	r1, r9
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	f7e7 fcaa 	bl	800060c <__aeabi_dmul>
 8018cb8:	4b4a      	ldr	r3, [pc, #296]	; (8018de4 <_strtod_l+0x93c>)
 8018cba:	400b      	ands	r3, r1
 8018cbc:	4680      	mov	r8, r0
 8018cbe:	4689      	mov	r9, r1
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	f47f ae3f 	bne.w	8018944 <_strtod_l+0x49c>
 8018cc6:	2322      	movs	r3, #34	; 0x22
 8018cc8:	6023      	str	r3, [r4, #0]
 8018cca:	e63b      	b.n	8018944 <_strtod_l+0x49c>
 8018ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8018cd4:	ea03 0808 	and.w	r8, r3, r8
 8018cd8:	e6e8      	b.n	8018aac <_strtod_l+0x604>
 8018cda:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8018cde:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8018ce2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8018ce6:	36e2      	adds	r6, #226	; 0xe2
 8018ce8:	fa01 f306 	lsl.w	r3, r1, r6
 8018cec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8018cf0:	e748      	b.n	8018b84 <_strtod_l+0x6dc>
 8018cf2:	2100      	movs	r1, #0
 8018cf4:	2301      	movs	r3, #1
 8018cf6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8018cfa:	e743      	b.n	8018b84 <_strtod_l+0x6dc>
 8018cfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018cfe:	4632      	mov	r2, r6
 8018d00:	4620      	mov	r0, r4
 8018d02:	f002 fa75 	bl	801b1f0 <__lshift>
 8018d06:	9016      	str	r0, [sp, #88]	; 0x58
 8018d08:	2800      	cmp	r0, #0
 8018d0a:	f47f af6b 	bne.w	8018be4 <_strtod_l+0x73c>
 8018d0e:	e60f      	b.n	8018930 <_strtod_l+0x488>
 8018d10:	46ca      	mov	sl, r9
 8018d12:	d171      	bne.n	8018df8 <_strtod_l+0x950>
 8018d14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018d16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018d1a:	b352      	cbz	r2, 8018d72 <_strtod_l+0x8ca>
 8018d1c:	4a33      	ldr	r2, [pc, #204]	; (8018dec <_strtod_l+0x944>)
 8018d1e:	4293      	cmp	r3, r2
 8018d20:	d12a      	bne.n	8018d78 <_strtod_l+0x8d0>
 8018d22:	9b04      	ldr	r3, [sp, #16]
 8018d24:	4641      	mov	r1, r8
 8018d26:	b1fb      	cbz	r3, 8018d68 <_strtod_l+0x8c0>
 8018d28:	4b2e      	ldr	r3, [pc, #184]	; (8018de4 <_strtod_l+0x93c>)
 8018d2a:	ea09 0303 	and.w	r3, r9, r3
 8018d2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018d32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d36:	d81a      	bhi.n	8018d6e <_strtod_l+0x8c6>
 8018d38:	0d1b      	lsrs	r3, r3, #20
 8018d3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8018d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8018d42:	4299      	cmp	r1, r3
 8018d44:	d118      	bne.n	8018d78 <_strtod_l+0x8d0>
 8018d46:	4b2a      	ldr	r3, [pc, #168]	; (8018df0 <_strtod_l+0x948>)
 8018d48:	459a      	cmp	sl, r3
 8018d4a:	d102      	bne.n	8018d52 <_strtod_l+0x8aa>
 8018d4c:	3101      	adds	r1, #1
 8018d4e:	f43f adef 	beq.w	8018930 <_strtod_l+0x488>
 8018d52:	4b24      	ldr	r3, [pc, #144]	; (8018de4 <_strtod_l+0x93c>)
 8018d54:	ea0a 0303 	and.w	r3, sl, r3
 8018d58:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8018d5c:	f04f 0800 	mov.w	r8, #0
 8018d60:	9b04      	ldr	r3, [sp, #16]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d1a2      	bne.n	8018cac <_strtod_l+0x804>
 8018d66:	e5ed      	b.n	8018944 <_strtod_l+0x49c>
 8018d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d6c:	e7e9      	b.n	8018d42 <_strtod_l+0x89a>
 8018d6e:	4613      	mov	r3, r2
 8018d70:	e7e7      	b.n	8018d42 <_strtod_l+0x89a>
 8018d72:	ea53 0308 	orrs.w	r3, r3, r8
 8018d76:	d08a      	beq.n	8018c8e <_strtod_l+0x7e6>
 8018d78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d7a:	b1e3      	cbz	r3, 8018db6 <_strtod_l+0x90e>
 8018d7c:	ea13 0f0a 	tst.w	r3, sl
 8018d80:	d0ee      	beq.n	8018d60 <_strtod_l+0x8b8>
 8018d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d84:	9a04      	ldr	r2, [sp, #16]
 8018d86:	4640      	mov	r0, r8
 8018d88:	4649      	mov	r1, r9
 8018d8a:	b1c3      	cbz	r3, 8018dbe <_strtod_l+0x916>
 8018d8c:	f7ff fb70 	bl	8018470 <sulp>
 8018d90:	4602      	mov	r2, r0
 8018d92:	460b      	mov	r3, r1
 8018d94:	ec51 0b18 	vmov	r0, r1, d8
 8018d98:	f7e7 fa82 	bl	80002a0 <__adddf3>
 8018d9c:	4680      	mov	r8, r0
 8018d9e:	4689      	mov	r9, r1
 8018da0:	e7de      	b.n	8018d60 <_strtod_l+0x8b8>
 8018da2:	4013      	ands	r3, r2
 8018da4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018da8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8018dac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8018db0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8018db4:	e7d4      	b.n	8018d60 <_strtod_l+0x8b8>
 8018db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018db8:	ea13 0f08 	tst.w	r3, r8
 8018dbc:	e7e0      	b.n	8018d80 <_strtod_l+0x8d8>
 8018dbe:	f7ff fb57 	bl	8018470 <sulp>
 8018dc2:	4602      	mov	r2, r0
 8018dc4:	460b      	mov	r3, r1
 8018dc6:	ec51 0b18 	vmov	r0, r1, d8
 8018dca:	f7e7 fa67 	bl	800029c <__aeabi_dsub>
 8018dce:	2200      	movs	r2, #0
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	4680      	mov	r8, r0
 8018dd4:	4689      	mov	r9, r1
 8018dd6:	f7e7 fe81 	bl	8000adc <__aeabi_dcmpeq>
 8018dda:	2800      	cmp	r0, #0
 8018ddc:	d0c0      	beq.n	8018d60 <_strtod_l+0x8b8>
 8018dde:	e618      	b.n	8018a12 <_strtod_l+0x56a>
 8018de0:	fffffc02 	.word	0xfffffc02
 8018de4:	7ff00000 	.word	0x7ff00000
 8018de8:	39500000 	.word	0x39500000
 8018dec:	000fffff 	.word	0x000fffff
 8018df0:	7fefffff 	.word	0x7fefffff
 8018df4:	0801ee78 	.word	0x0801ee78
 8018df8:	4659      	mov	r1, fp
 8018dfa:	4628      	mov	r0, r5
 8018dfc:	f002 fbd4 	bl	801b5a8 <__ratio>
 8018e00:	ec57 6b10 	vmov	r6, r7, d0
 8018e04:	ee10 0a10 	vmov	r0, s0
 8018e08:	2200      	movs	r2, #0
 8018e0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018e0e:	4639      	mov	r1, r7
 8018e10:	f7e7 fe78 	bl	8000b04 <__aeabi_dcmple>
 8018e14:	2800      	cmp	r0, #0
 8018e16:	d071      	beq.n	8018efc <_strtod_l+0xa54>
 8018e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d17c      	bne.n	8018f18 <_strtod_l+0xa70>
 8018e1e:	f1b8 0f00 	cmp.w	r8, #0
 8018e22:	d15a      	bne.n	8018eda <_strtod_l+0xa32>
 8018e24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d15d      	bne.n	8018ee8 <_strtod_l+0xa40>
 8018e2c:	4b90      	ldr	r3, [pc, #576]	; (8019070 <_strtod_l+0xbc8>)
 8018e2e:	2200      	movs	r2, #0
 8018e30:	4630      	mov	r0, r6
 8018e32:	4639      	mov	r1, r7
 8018e34:	f7e7 fe5c 	bl	8000af0 <__aeabi_dcmplt>
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	d15c      	bne.n	8018ef6 <_strtod_l+0xa4e>
 8018e3c:	4630      	mov	r0, r6
 8018e3e:	4639      	mov	r1, r7
 8018e40:	4b8c      	ldr	r3, [pc, #560]	; (8019074 <_strtod_l+0xbcc>)
 8018e42:	2200      	movs	r2, #0
 8018e44:	f7e7 fbe2 	bl	800060c <__aeabi_dmul>
 8018e48:	4606      	mov	r6, r0
 8018e4a:	460f      	mov	r7, r1
 8018e4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8018e50:	9606      	str	r6, [sp, #24]
 8018e52:	9307      	str	r3, [sp, #28]
 8018e54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018e58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8018e5c:	4b86      	ldr	r3, [pc, #536]	; (8019078 <_strtod_l+0xbd0>)
 8018e5e:	ea0a 0303 	and.w	r3, sl, r3
 8018e62:	930d      	str	r3, [sp, #52]	; 0x34
 8018e64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018e66:	4b85      	ldr	r3, [pc, #532]	; (801907c <_strtod_l+0xbd4>)
 8018e68:	429a      	cmp	r2, r3
 8018e6a:	f040 8090 	bne.w	8018f8e <_strtod_l+0xae6>
 8018e6e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8018e72:	ec49 8b10 	vmov	d0, r8, r9
 8018e76:	f002 facd 	bl	801b414 <__ulp>
 8018e7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018e7e:	ec51 0b10 	vmov	r0, r1, d0
 8018e82:	f7e7 fbc3 	bl	800060c <__aeabi_dmul>
 8018e86:	4642      	mov	r2, r8
 8018e88:	464b      	mov	r3, r9
 8018e8a:	f7e7 fa09 	bl	80002a0 <__adddf3>
 8018e8e:	460b      	mov	r3, r1
 8018e90:	4979      	ldr	r1, [pc, #484]	; (8019078 <_strtod_l+0xbd0>)
 8018e92:	4a7b      	ldr	r2, [pc, #492]	; (8019080 <_strtod_l+0xbd8>)
 8018e94:	4019      	ands	r1, r3
 8018e96:	4291      	cmp	r1, r2
 8018e98:	4680      	mov	r8, r0
 8018e9a:	d944      	bls.n	8018f26 <_strtod_l+0xa7e>
 8018e9c:	ee18 2a90 	vmov	r2, s17
 8018ea0:	4b78      	ldr	r3, [pc, #480]	; (8019084 <_strtod_l+0xbdc>)
 8018ea2:	429a      	cmp	r2, r3
 8018ea4:	d104      	bne.n	8018eb0 <_strtod_l+0xa08>
 8018ea6:	ee18 3a10 	vmov	r3, s16
 8018eaa:	3301      	adds	r3, #1
 8018eac:	f43f ad40 	beq.w	8018930 <_strtod_l+0x488>
 8018eb0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8019084 <_strtod_l+0xbdc>
 8018eb4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8018eb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018eba:	4620      	mov	r0, r4
 8018ebc:	f001 ff7e 	bl	801adbc <_Bfree>
 8018ec0:	9905      	ldr	r1, [sp, #20]
 8018ec2:	4620      	mov	r0, r4
 8018ec4:	f001 ff7a 	bl	801adbc <_Bfree>
 8018ec8:	4659      	mov	r1, fp
 8018eca:	4620      	mov	r0, r4
 8018ecc:	f001 ff76 	bl	801adbc <_Bfree>
 8018ed0:	4629      	mov	r1, r5
 8018ed2:	4620      	mov	r0, r4
 8018ed4:	f001 ff72 	bl	801adbc <_Bfree>
 8018ed8:	e609      	b.n	8018aee <_strtod_l+0x646>
 8018eda:	f1b8 0f01 	cmp.w	r8, #1
 8018ede:	d103      	bne.n	8018ee8 <_strtod_l+0xa40>
 8018ee0:	f1b9 0f00 	cmp.w	r9, #0
 8018ee4:	f43f ad95 	beq.w	8018a12 <_strtod_l+0x56a>
 8018ee8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8019040 <_strtod_l+0xb98>
 8018eec:	4f60      	ldr	r7, [pc, #384]	; (8019070 <_strtod_l+0xbc8>)
 8018eee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018ef2:	2600      	movs	r6, #0
 8018ef4:	e7ae      	b.n	8018e54 <_strtod_l+0x9ac>
 8018ef6:	4f5f      	ldr	r7, [pc, #380]	; (8019074 <_strtod_l+0xbcc>)
 8018ef8:	2600      	movs	r6, #0
 8018efa:	e7a7      	b.n	8018e4c <_strtod_l+0x9a4>
 8018efc:	4b5d      	ldr	r3, [pc, #372]	; (8019074 <_strtod_l+0xbcc>)
 8018efe:	4630      	mov	r0, r6
 8018f00:	4639      	mov	r1, r7
 8018f02:	2200      	movs	r2, #0
 8018f04:	f7e7 fb82 	bl	800060c <__aeabi_dmul>
 8018f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f0a:	4606      	mov	r6, r0
 8018f0c:	460f      	mov	r7, r1
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d09c      	beq.n	8018e4c <_strtod_l+0x9a4>
 8018f12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8018f16:	e79d      	b.n	8018e54 <_strtod_l+0x9ac>
 8018f18:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8019048 <_strtod_l+0xba0>
 8018f1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018f20:	ec57 6b17 	vmov	r6, r7, d7
 8018f24:	e796      	b.n	8018e54 <_strtod_l+0x9ac>
 8018f26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8018f2a:	9b04      	ldr	r3, [sp, #16]
 8018f2c:	46ca      	mov	sl, r9
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d1c2      	bne.n	8018eb8 <_strtod_l+0xa10>
 8018f32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018f36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018f38:	0d1b      	lsrs	r3, r3, #20
 8018f3a:	051b      	lsls	r3, r3, #20
 8018f3c:	429a      	cmp	r2, r3
 8018f3e:	d1bb      	bne.n	8018eb8 <_strtod_l+0xa10>
 8018f40:	4630      	mov	r0, r6
 8018f42:	4639      	mov	r1, r7
 8018f44:	f7e7 fec2 	bl	8000ccc <__aeabi_d2lz>
 8018f48:	f7e7 fb32 	bl	80005b0 <__aeabi_l2d>
 8018f4c:	4602      	mov	r2, r0
 8018f4e:	460b      	mov	r3, r1
 8018f50:	4630      	mov	r0, r6
 8018f52:	4639      	mov	r1, r7
 8018f54:	f7e7 f9a2 	bl	800029c <__aeabi_dsub>
 8018f58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018f5e:	ea43 0308 	orr.w	r3, r3, r8
 8018f62:	4313      	orrs	r3, r2
 8018f64:	4606      	mov	r6, r0
 8018f66:	460f      	mov	r7, r1
 8018f68:	d054      	beq.n	8019014 <_strtod_l+0xb6c>
 8018f6a:	a339      	add	r3, pc, #228	; (adr r3, 8019050 <_strtod_l+0xba8>)
 8018f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f70:	f7e7 fdbe 	bl	8000af0 <__aeabi_dcmplt>
 8018f74:	2800      	cmp	r0, #0
 8018f76:	f47f ace5 	bne.w	8018944 <_strtod_l+0x49c>
 8018f7a:	a337      	add	r3, pc, #220	; (adr r3, 8019058 <_strtod_l+0xbb0>)
 8018f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f80:	4630      	mov	r0, r6
 8018f82:	4639      	mov	r1, r7
 8018f84:	f7e7 fdd2 	bl	8000b2c <__aeabi_dcmpgt>
 8018f88:	2800      	cmp	r0, #0
 8018f8a:	d095      	beq.n	8018eb8 <_strtod_l+0xa10>
 8018f8c:	e4da      	b.n	8018944 <_strtod_l+0x49c>
 8018f8e:	9b04      	ldr	r3, [sp, #16]
 8018f90:	b333      	cbz	r3, 8018fe0 <_strtod_l+0xb38>
 8018f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018f98:	d822      	bhi.n	8018fe0 <_strtod_l+0xb38>
 8018f9a:	a331      	add	r3, pc, #196	; (adr r3, 8019060 <_strtod_l+0xbb8>)
 8018f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fa0:	4630      	mov	r0, r6
 8018fa2:	4639      	mov	r1, r7
 8018fa4:	f7e7 fdae 	bl	8000b04 <__aeabi_dcmple>
 8018fa8:	b1a0      	cbz	r0, 8018fd4 <_strtod_l+0xb2c>
 8018faa:	4639      	mov	r1, r7
 8018fac:	4630      	mov	r0, r6
 8018fae:	f7e7 fe05 	bl	8000bbc <__aeabi_d2uiz>
 8018fb2:	2801      	cmp	r0, #1
 8018fb4:	bf38      	it	cc
 8018fb6:	2001      	movcc	r0, #1
 8018fb8:	f7e7 faae 	bl	8000518 <__aeabi_ui2d>
 8018fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018fbe:	4606      	mov	r6, r0
 8018fc0:	460f      	mov	r7, r1
 8018fc2:	bb23      	cbnz	r3, 801900e <_strtod_l+0xb66>
 8018fc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018fc8:	9010      	str	r0, [sp, #64]	; 0x40
 8018fca:	9311      	str	r3, [sp, #68]	; 0x44
 8018fcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018fd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8018fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018fd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018fd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018fdc:	1a9b      	subs	r3, r3, r2
 8018fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8018fe0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8018fe4:	eeb0 0a48 	vmov.f32	s0, s16
 8018fe8:	eef0 0a68 	vmov.f32	s1, s17
 8018fec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8018ff0:	f002 fa10 	bl	801b414 <__ulp>
 8018ff4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8018ff8:	ec53 2b10 	vmov	r2, r3, d0
 8018ffc:	f7e7 fb06 	bl	800060c <__aeabi_dmul>
 8019000:	ec53 2b18 	vmov	r2, r3, d8
 8019004:	f7e7 f94c 	bl	80002a0 <__adddf3>
 8019008:	4680      	mov	r8, r0
 801900a:	4689      	mov	r9, r1
 801900c:	e78d      	b.n	8018f2a <_strtod_l+0xa82>
 801900e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8019012:	e7db      	b.n	8018fcc <_strtod_l+0xb24>
 8019014:	a314      	add	r3, pc, #80	; (adr r3, 8019068 <_strtod_l+0xbc0>)
 8019016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801901a:	f7e7 fd69 	bl	8000af0 <__aeabi_dcmplt>
 801901e:	e7b3      	b.n	8018f88 <_strtod_l+0xae0>
 8019020:	2300      	movs	r3, #0
 8019022:	930a      	str	r3, [sp, #40]	; 0x28
 8019024:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019026:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019028:	6013      	str	r3, [r2, #0]
 801902a:	f7ff ba7c 	b.w	8018526 <_strtod_l+0x7e>
 801902e:	2a65      	cmp	r2, #101	; 0x65
 8019030:	f43f ab75 	beq.w	801871e <_strtod_l+0x276>
 8019034:	2a45      	cmp	r2, #69	; 0x45
 8019036:	f43f ab72 	beq.w	801871e <_strtod_l+0x276>
 801903a:	2301      	movs	r3, #1
 801903c:	f7ff bbaa 	b.w	8018794 <_strtod_l+0x2ec>
 8019040:	00000000 	.word	0x00000000
 8019044:	bff00000 	.word	0xbff00000
 8019048:	00000000 	.word	0x00000000
 801904c:	3ff00000 	.word	0x3ff00000
 8019050:	94a03595 	.word	0x94a03595
 8019054:	3fdfffff 	.word	0x3fdfffff
 8019058:	35afe535 	.word	0x35afe535
 801905c:	3fe00000 	.word	0x3fe00000
 8019060:	ffc00000 	.word	0xffc00000
 8019064:	41dfffff 	.word	0x41dfffff
 8019068:	94a03595 	.word	0x94a03595
 801906c:	3fcfffff 	.word	0x3fcfffff
 8019070:	3ff00000 	.word	0x3ff00000
 8019074:	3fe00000 	.word	0x3fe00000
 8019078:	7ff00000 	.word	0x7ff00000
 801907c:	7fe00000 	.word	0x7fe00000
 8019080:	7c9fffff 	.word	0x7c9fffff
 8019084:	7fefffff 	.word	0x7fefffff

08019088 <_strtod_r>:
 8019088:	4b01      	ldr	r3, [pc, #4]	; (8019090 <_strtod_r+0x8>)
 801908a:	f7ff ba0d 	b.w	80184a8 <_strtod_l>
 801908e:	bf00      	nop
 8019090:	20000038 	.word	0x20000038

08019094 <_strtol_l.constprop.0>:
 8019094:	2b01      	cmp	r3, #1
 8019096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801909a:	d001      	beq.n	80190a0 <_strtol_l.constprop.0+0xc>
 801909c:	2b24      	cmp	r3, #36	; 0x24
 801909e:	d906      	bls.n	80190ae <_strtol_l.constprop.0+0x1a>
 80190a0:	f000 f918 	bl	80192d4 <__errno>
 80190a4:	2316      	movs	r3, #22
 80190a6:	6003      	str	r3, [r0, #0]
 80190a8:	2000      	movs	r0, #0
 80190aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8019194 <_strtol_l.constprop.0+0x100>
 80190b2:	460d      	mov	r5, r1
 80190b4:	462e      	mov	r6, r5
 80190b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80190ba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80190be:	f017 0708 	ands.w	r7, r7, #8
 80190c2:	d1f7      	bne.n	80190b4 <_strtol_l.constprop.0+0x20>
 80190c4:	2c2d      	cmp	r4, #45	; 0x2d
 80190c6:	d132      	bne.n	801912e <_strtol_l.constprop.0+0x9a>
 80190c8:	782c      	ldrb	r4, [r5, #0]
 80190ca:	2701      	movs	r7, #1
 80190cc:	1cb5      	adds	r5, r6, #2
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d05b      	beq.n	801918a <_strtol_l.constprop.0+0xf6>
 80190d2:	2b10      	cmp	r3, #16
 80190d4:	d109      	bne.n	80190ea <_strtol_l.constprop.0+0x56>
 80190d6:	2c30      	cmp	r4, #48	; 0x30
 80190d8:	d107      	bne.n	80190ea <_strtol_l.constprop.0+0x56>
 80190da:	782c      	ldrb	r4, [r5, #0]
 80190dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80190e0:	2c58      	cmp	r4, #88	; 0x58
 80190e2:	d14d      	bne.n	8019180 <_strtol_l.constprop.0+0xec>
 80190e4:	786c      	ldrb	r4, [r5, #1]
 80190e6:	2310      	movs	r3, #16
 80190e8:	3502      	adds	r5, #2
 80190ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80190ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80190f2:	f04f 0e00 	mov.w	lr, #0
 80190f6:	fbb8 f9f3 	udiv	r9, r8, r3
 80190fa:	4676      	mov	r6, lr
 80190fc:	fb03 8a19 	mls	sl, r3, r9, r8
 8019100:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019104:	f1bc 0f09 	cmp.w	ip, #9
 8019108:	d816      	bhi.n	8019138 <_strtol_l.constprop.0+0xa4>
 801910a:	4664      	mov	r4, ip
 801910c:	42a3      	cmp	r3, r4
 801910e:	dd24      	ble.n	801915a <_strtol_l.constprop.0+0xc6>
 8019110:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8019114:	d008      	beq.n	8019128 <_strtol_l.constprop.0+0x94>
 8019116:	45b1      	cmp	r9, r6
 8019118:	d31c      	bcc.n	8019154 <_strtol_l.constprop.0+0xc0>
 801911a:	d101      	bne.n	8019120 <_strtol_l.constprop.0+0x8c>
 801911c:	45a2      	cmp	sl, r4
 801911e:	db19      	blt.n	8019154 <_strtol_l.constprop.0+0xc0>
 8019120:	fb06 4603 	mla	r6, r6, r3, r4
 8019124:	f04f 0e01 	mov.w	lr, #1
 8019128:	f815 4b01 	ldrb.w	r4, [r5], #1
 801912c:	e7e8      	b.n	8019100 <_strtol_l.constprop.0+0x6c>
 801912e:	2c2b      	cmp	r4, #43	; 0x2b
 8019130:	bf04      	itt	eq
 8019132:	782c      	ldrbeq	r4, [r5, #0]
 8019134:	1cb5      	addeq	r5, r6, #2
 8019136:	e7ca      	b.n	80190ce <_strtol_l.constprop.0+0x3a>
 8019138:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801913c:	f1bc 0f19 	cmp.w	ip, #25
 8019140:	d801      	bhi.n	8019146 <_strtol_l.constprop.0+0xb2>
 8019142:	3c37      	subs	r4, #55	; 0x37
 8019144:	e7e2      	b.n	801910c <_strtol_l.constprop.0+0x78>
 8019146:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801914a:	f1bc 0f19 	cmp.w	ip, #25
 801914e:	d804      	bhi.n	801915a <_strtol_l.constprop.0+0xc6>
 8019150:	3c57      	subs	r4, #87	; 0x57
 8019152:	e7db      	b.n	801910c <_strtol_l.constprop.0+0x78>
 8019154:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8019158:	e7e6      	b.n	8019128 <_strtol_l.constprop.0+0x94>
 801915a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801915e:	d105      	bne.n	801916c <_strtol_l.constprop.0+0xd8>
 8019160:	2322      	movs	r3, #34	; 0x22
 8019162:	6003      	str	r3, [r0, #0]
 8019164:	4646      	mov	r6, r8
 8019166:	b942      	cbnz	r2, 801917a <_strtol_l.constprop.0+0xe6>
 8019168:	4630      	mov	r0, r6
 801916a:	e79e      	b.n	80190aa <_strtol_l.constprop.0+0x16>
 801916c:	b107      	cbz	r7, 8019170 <_strtol_l.constprop.0+0xdc>
 801916e:	4276      	negs	r6, r6
 8019170:	2a00      	cmp	r2, #0
 8019172:	d0f9      	beq.n	8019168 <_strtol_l.constprop.0+0xd4>
 8019174:	f1be 0f00 	cmp.w	lr, #0
 8019178:	d000      	beq.n	801917c <_strtol_l.constprop.0+0xe8>
 801917a:	1e69      	subs	r1, r5, #1
 801917c:	6011      	str	r1, [r2, #0]
 801917e:	e7f3      	b.n	8019168 <_strtol_l.constprop.0+0xd4>
 8019180:	2430      	movs	r4, #48	; 0x30
 8019182:	2b00      	cmp	r3, #0
 8019184:	d1b1      	bne.n	80190ea <_strtol_l.constprop.0+0x56>
 8019186:	2308      	movs	r3, #8
 8019188:	e7af      	b.n	80190ea <_strtol_l.constprop.0+0x56>
 801918a:	2c30      	cmp	r4, #48	; 0x30
 801918c:	d0a5      	beq.n	80190da <_strtol_l.constprop.0+0x46>
 801918e:	230a      	movs	r3, #10
 8019190:	e7ab      	b.n	80190ea <_strtol_l.constprop.0+0x56>
 8019192:	bf00      	nop
 8019194:	0801eea9 	.word	0x0801eea9

08019198 <_strtol_r>:
 8019198:	f7ff bf7c 	b.w	8019094 <_strtol_l.constprop.0>

0801919c <strtol>:
 801919c:	4613      	mov	r3, r2
 801919e:	460a      	mov	r2, r1
 80191a0:	4601      	mov	r1, r0
 80191a2:	4802      	ldr	r0, [pc, #8]	; (80191ac <strtol+0x10>)
 80191a4:	6800      	ldr	r0, [r0, #0]
 80191a6:	f7ff bf75 	b.w	8019094 <_strtol_l.constprop.0>
 80191aa:	bf00      	nop
 80191ac:	200001f0 	.word	0x200001f0

080191b0 <_fwalk_sglue>:
 80191b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191b4:	4607      	mov	r7, r0
 80191b6:	4688      	mov	r8, r1
 80191b8:	4614      	mov	r4, r2
 80191ba:	2600      	movs	r6, #0
 80191bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80191c0:	f1b9 0901 	subs.w	r9, r9, #1
 80191c4:	d505      	bpl.n	80191d2 <_fwalk_sglue+0x22>
 80191c6:	6824      	ldr	r4, [r4, #0]
 80191c8:	2c00      	cmp	r4, #0
 80191ca:	d1f7      	bne.n	80191bc <_fwalk_sglue+0xc>
 80191cc:	4630      	mov	r0, r6
 80191ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80191d2:	89ab      	ldrh	r3, [r5, #12]
 80191d4:	2b01      	cmp	r3, #1
 80191d6:	d907      	bls.n	80191e8 <_fwalk_sglue+0x38>
 80191d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80191dc:	3301      	adds	r3, #1
 80191de:	d003      	beq.n	80191e8 <_fwalk_sglue+0x38>
 80191e0:	4629      	mov	r1, r5
 80191e2:	4638      	mov	r0, r7
 80191e4:	47c0      	blx	r8
 80191e6:	4306      	orrs	r6, r0
 80191e8:	3568      	adds	r5, #104	; 0x68
 80191ea:	e7e9      	b.n	80191c0 <_fwalk_sglue+0x10>

080191ec <strncmp>:
 80191ec:	b510      	push	{r4, lr}
 80191ee:	b16a      	cbz	r2, 801920c <strncmp+0x20>
 80191f0:	3901      	subs	r1, #1
 80191f2:	1884      	adds	r4, r0, r2
 80191f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80191f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80191fc:	429a      	cmp	r2, r3
 80191fe:	d103      	bne.n	8019208 <strncmp+0x1c>
 8019200:	42a0      	cmp	r0, r4
 8019202:	d001      	beq.n	8019208 <strncmp+0x1c>
 8019204:	2a00      	cmp	r2, #0
 8019206:	d1f5      	bne.n	80191f4 <strncmp+0x8>
 8019208:	1ad0      	subs	r0, r2, r3
 801920a:	bd10      	pop	{r4, pc}
 801920c:	4610      	mov	r0, r2
 801920e:	e7fc      	b.n	801920a <strncmp+0x1e>

08019210 <memset>:
 8019210:	4402      	add	r2, r0
 8019212:	4603      	mov	r3, r0
 8019214:	4293      	cmp	r3, r2
 8019216:	d100      	bne.n	801921a <memset+0xa>
 8019218:	4770      	bx	lr
 801921a:	f803 1b01 	strb.w	r1, [r3], #1
 801921e:	e7f9      	b.n	8019214 <memset+0x4>

08019220 <_localeconv_r>:
 8019220:	4800      	ldr	r0, [pc, #0]	; (8019224 <_localeconv_r+0x4>)
 8019222:	4770      	bx	lr
 8019224:	20000128 	.word	0x20000128

08019228 <_reclaim_reent>:
 8019228:	4b29      	ldr	r3, [pc, #164]	; (80192d0 <_reclaim_reent+0xa8>)
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	4283      	cmp	r3, r0
 801922e:	b570      	push	{r4, r5, r6, lr}
 8019230:	4604      	mov	r4, r0
 8019232:	d04b      	beq.n	80192cc <_reclaim_reent+0xa4>
 8019234:	69c3      	ldr	r3, [r0, #28]
 8019236:	b143      	cbz	r3, 801924a <_reclaim_reent+0x22>
 8019238:	68db      	ldr	r3, [r3, #12]
 801923a:	2b00      	cmp	r3, #0
 801923c:	d144      	bne.n	80192c8 <_reclaim_reent+0xa0>
 801923e:	69e3      	ldr	r3, [r4, #28]
 8019240:	6819      	ldr	r1, [r3, #0]
 8019242:	b111      	cbz	r1, 801924a <_reclaim_reent+0x22>
 8019244:	4620      	mov	r0, r4
 8019246:	f000 ff09 	bl	801a05c <_free_r>
 801924a:	6961      	ldr	r1, [r4, #20]
 801924c:	b111      	cbz	r1, 8019254 <_reclaim_reent+0x2c>
 801924e:	4620      	mov	r0, r4
 8019250:	f000 ff04 	bl	801a05c <_free_r>
 8019254:	69e1      	ldr	r1, [r4, #28]
 8019256:	b111      	cbz	r1, 801925e <_reclaim_reent+0x36>
 8019258:	4620      	mov	r0, r4
 801925a:	f000 feff 	bl	801a05c <_free_r>
 801925e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019260:	b111      	cbz	r1, 8019268 <_reclaim_reent+0x40>
 8019262:	4620      	mov	r0, r4
 8019264:	f000 fefa 	bl	801a05c <_free_r>
 8019268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801926a:	b111      	cbz	r1, 8019272 <_reclaim_reent+0x4a>
 801926c:	4620      	mov	r0, r4
 801926e:	f000 fef5 	bl	801a05c <_free_r>
 8019272:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019274:	b111      	cbz	r1, 801927c <_reclaim_reent+0x54>
 8019276:	4620      	mov	r0, r4
 8019278:	f000 fef0 	bl	801a05c <_free_r>
 801927c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801927e:	b111      	cbz	r1, 8019286 <_reclaim_reent+0x5e>
 8019280:	4620      	mov	r0, r4
 8019282:	f000 feeb 	bl	801a05c <_free_r>
 8019286:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019288:	b111      	cbz	r1, 8019290 <_reclaim_reent+0x68>
 801928a:	4620      	mov	r0, r4
 801928c:	f000 fee6 	bl	801a05c <_free_r>
 8019290:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8019292:	b111      	cbz	r1, 801929a <_reclaim_reent+0x72>
 8019294:	4620      	mov	r0, r4
 8019296:	f000 fee1 	bl	801a05c <_free_r>
 801929a:	6a23      	ldr	r3, [r4, #32]
 801929c:	b1b3      	cbz	r3, 80192cc <_reclaim_reent+0xa4>
 801929e:	4620      	mov	r0, r4
 80192a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80192a4:	4718      	bx	r3
 80192a6:	5949      	ldr	r1, [r1, r5]
 80192a8:	b941      	cbnz	r1, 80192bc <_reclaim_reent+0x94>
 80192aa:	3504      	adds	r5, #4
 80192ac:	69e3      	ldr	r3, [r4, #28]
 80192ae:	2d80      	cmp	r5, #128	; 0x80
 80192b0:	68d9      	ldr	r1, [r3, #12]
 80192b2:	d1f8      	bne.n	80192a6 <_reclaim_reent+0x7e>
 80192b4:	4620      	mov	r0, r4
 80192b6:	f000 fed1 	bl	801a05c <_free_r>
 80192ba:	e7c0      	b.n	801923e <_reclaim_reent+0x16>
 80192bc:	680e      	ldr	r6, [r1, #0]
 80192be:	4620      	mov	r0, r4
 80192c0:	f000 fecc 	bl	801a05c <_free_r>
 80192c4:	4631      	mov	r1, r6
 80192c6:	e7ef      	b.n	80192a8 <_reclaim_reent+0x80>
 80192c8:	2500      	movs	r5, #0
 80192ca:	e7ef      	b.n	80192ac <_reclaim_reent+0x84>
 80192cc:	bd70      	pop	{r4, r5, r6, pc}
 80192ce:	bf00      	nop
 80192d0:	200001f0 	.word	0x200001f0

080192d4 <__errno>:
 80192d4:	4b01      	ldr	r3, [pc, #4]	; (80192dc <__errno+0x8>)
 80192d6:	6818      	ldr	r0, [r3, #0]
 80192d8:	4770      	bx	lr
 80192da:	bf00      	nop
 80192dc:	200001f0 	.word	0x200001f0

080192e0 <__libc_init_array>:
 80192e0:	b570      	push	{r4, r5, r6, lr}
 80192e2:	4d0d      	ldr	r5, [pc, #52]	; (8019318 <__libc_init_array+0x38>)
 80192e4:	4c0d      	ldr	r4, [pc, #52]	; (801931c <__libc_init_array+0x3c>)
 80192e6:	1b64      	subs	r4, r4, r5
 80192e8:	10a4      	asrs	r4, r4, #2
 80192ea:	2600      	movs	r6, #0
 80192ec:	42a6      	cmp	r6, r4
 80192ee:	d109      	bne.n	8019304 <__libc_init_array+0x24>
 80192f0:	4d0b      	ldr	r5, [pc, #44]	; (8019320 <__libc_init_array+0x40>)
 80192f2:	4c0c      	ldr	r4, [pc, #48]	; (8019324 <__libc_init_array+0x44>)
 80192f4:	f004 fb46 	bl	801d984 <_init>
 80192f8:	1b64      	subs	r4, r4, r5
 80192fa:	10a4      	asrs	r4, r4, #2
 80192fc:	2600      	movs	r6, #0
 80192fe:	42a6      	cmp	r6, r4
 8019300:	d105      	bne.n	801930e <__libc_init_array+0x2e>
 8019302:	bd70      	pop	{r4, r5, r6, pc}
 8019304:	f855 3b04 	ldr.w	r3, [r5], #4
 8019308:	4798      	blx	r3
 801930a:	3601      	adds	r6, #1
 801930c:	e7ee      	b.n	80192ec <__libc_init_array+0xc>
 801930e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019312:	4798      	blx	r3
 8019314:	3601      	adds	r6, #1
 8019316:	e7f2      	b.n	80192fe <__libc_init_array+0x1e>
 8019318:	0801f6b8 	.word	0x0801f6b8
 801931c:	0801f6b8 	.word	0x0801f6b8
 8019320:	0801f6b8 	.word	0x0801f6b8
 8019324:	0801f6bc 	.word	0x0801f6bc

08019328 <__retarget_lock_acquire_recursive>:
 8019328:	4770      	bx	lr

0801932a <__retarget_lock_release_recursive>:
 801932a:	4770      	bx	lr

0801932c <memcpy>:
 801932c:	440a      	add	r2, r1
 801932e:	4291      	cmp	r1, r2
 8019330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019334:	d100      	bne.n	8019338 <memcpy+0xc>
 8019336:	4770      	bx	lr
 8019338:	b510      	push	{r4, lr}
 801933a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801933e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019342:	4291      	cmp	r1, r2
 8019344:	d1f9      	bne.n	801933a <memcpy+0xe>
 8019346:	bd10      	pop	{r4, pc}

08019348 <nan>:
 8019348:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019350 <nan+0x8>
 801934c:	4770      	bx	lr
 801934e:	bf00      	nop
 8019350:	00000000 	.word	0x00000000
 8019354:	7ff80000 	.word	0x7ff80000

08019358 <nanf>:
 8019358:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019360 <nanf+0x8>
 801935c:	4770      	bx	lr
 801935e:	bf00      	nop
 8019360:	7fc00000 	.word	0x7fc00000

08019364 <quorem>:
 8019364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019368:	6903      	ldr	r3, [r0, #16]
 801936a:	690c      	ldr	r4, [r1, #16]
 801936c:	42a3      	cmp	r3, r4
 801936e:	4607      	mov	r7, r0
 8019370:	db7e      	blt.n	8019470 <quorem+0x10c>
 8019372:	3c01      	subs	r4, #1
 8019374:	f101 0814 	add.w	r8, r1, #20
 8019378:	f100 0514 	add.w	r5, r0, #20
 801937c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019380:	9301      	str	r3, [sp, #4]
 8019382:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019386:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801938a:	3301      	adds	r3, #1
 801938c:	429a      	cmp	r2, r3
 801938e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019392:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019396:	fbb2 f6f3 	udiv	r6, r2, r3
 801939a:	d331      	bcc.n	8019400 <quorem+0x9c>
 801939c:	f04f 0e00 	mov.w	lr, #0
 80193a0:	4640      	mov	r0, r8
 80193a2:	46ac      	mov	ip, r5
 80193a4:	46f2      	mov	sl, lr
 80193a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80193aa:	b293      	uxth	r3, r2
 80193ac:	fb06 e303 	mla	r3, r6, r3, lr
 80193b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80193b4:	0c1a      	lsrs	r2, r3, #16
 80193b6:	b29b      	uxth	r3, r3
 80193b8:	ebaa 0303 	sub.w	r3, sl, r3
 80193bc:	f8dc a000 	ldr.w	sl, [ip]
 80193c0:	fa13 f38a 	uxtah	r3, r3, sl
 80193c4:	fb06 220e 	mla	r2, r6, lr, r2
 80193c8:	9300      	str	r3, [sp, #0]
 80193ca:	9b00      	ldr	r3, [sp, #0]
 80193cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80193d0:	b292      	uxth	r2, r2
 80193d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80193d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80193da:	f8bd 3000 	ldrh.w	r3, [sp]
 80193de:	4581      	cmp	r9, r0
 80193e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80193e4:	f84c 3b04 	str.w	r3, [ip], #4
 80193e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80193ec:	d2db      	bcs.n	80193a6 <quorem+0x42>
 80193ee:	f855 300b 	ldr.w	r3, [r5, fp]
 80193f2:	b92b      	cbnz	r3, 8019400 <quorem+0x9c>
 80193f4:	9b01      	ldr	r3, [sp, #4]
 80193f6:	3b04      	subs	r3, #4
 80193f8:	429d      	cmp	r5, r3
 80193fa:	461a      	mov	r2, r3
 80193fc:	d32c      	bcc.n	8019458 <quorem+0xf4>
 80193fe:	613c      	str	r4, [r7, #16]
 8019400:	4638      	mov	r0, r7
 8019402:	f001 ff61 	bl	801b2c8 <__mcmp>
 8019406:	2800      	cmp	r0, #0
 8019408:	db22      	blt.n	8019450 <quorem+0xec>
 801940a:	3601      	adds	r6, #1
 801940c:	4629      	mov	r1, r5
 801940e:	2000      	movs	r0, #0
 8019410:	f858 2b04 	ldr.w	r2, [r8], #4
 8019414:	f8d1 c000 	ldr.w	ip, [r1]
 8019418:	b293      	uxth	r3, r2
 801941a:	1ac3      	subs	r3, r0, r3
 801941c:	0c12      	lsrs	r2, r2, #16
 801941e:	fa13 f38c 	uxtah	r3, r3, ip
 8019422:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8019426:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801942a:	b29b      	uxth	r3, r3
 801942c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019430:	45c1      	cmp	r9, r8
 8019432:	f841 3b04 	str.w	r3, [r1], #4
 8019436:	ea4f 4022 	mov.w	r0, r2, asr #16
 801943a:	d2e9      	bcs.n	8019410 <quorem+0xac>
 801943c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019440:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019444:	b922      	cbnz	r2, 8019450 <quorem+0xec>
 8019446:	3b04      	subs	r3, #4
 8019448:	429d      	cmp	r5, r3
 801944a:	461a      	mov	r2, r3
 801944c:	d30a      	bcc.n	8019464 <quorem+0x100>
 801944e:	613c      	str	r4, [r7, #16]
 8019450:	4630      	mov	r0, r6
 8019452:	b003      	add	sp, #12
 8019454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019458:	6812      	ldr	r2, [r2, #0]
 801945a:	3b04      	subs	r3, #4
 801945c:	2a00      	cmp	r2, #0
 801945e:	d1ce      	bne.n	80193fe <quorem+0x9a>
 8019460:	3c01      	subs	r4, #1
 8019462:	e7c9      	b.n	80193f8 <quorem+0x94>
 8019464:	6812      	ldr	r2, [r2, #0]
 8019466:	3b04      	subs	r3, #4
 8019468:	2a00      	cmp	r2, #0
 801946a:	d1f0      	bne.n	801944e <quorem+0xea>
 801946c:	3c01      	subs	r4, #1
 801946e:	e7eb      	b.n	8019448 <quorem+0xe4>
 8019470:	2000      	movs	r0, #0
 8019472:	e7ee      	b.n	8019452 <quorem+0xee>
 8019474:	0000      	movs	r0, r0
	...

08019478 <_dtoa_r>:
 8019478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801947c:	ed2d 8b04 	vpush	{d8-d9}
 8019480:	69c5      	ldr	r5, [r0, #28]
 8019482:	b093      	sub	sp, #76	; 0x4c
 8019484:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019488:	ec57 6b10 	vmov	r6, r7, d0
 801948c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8019490:	9107      	str	r1, [sp, #28]
 8019492:	4604      	mov	r4, r0
 8019494:	920a      	str	r2, [sp, #40]	; 0x28
 8019496:	930d      	str	r3, [sp, #52]	; 0x34
 8019498:	b975      	cbnz	r5, 80194b8 <_dtoa_r+0x40>
 801949a:	2010      	movs	r0, #16
 801949c:	f001 fada 	bl	801aa54 <malloc>
 80194a0:	4602      	mov	r2, r0
 80194a2:	61e0      	str	r0, [r4, #28]
 80194a4:	b920      	cbnz	r0, 80194b0 <_dtoa_r+0x38>
 80194a6:	4bae      	ldr	r3, [pc, #696]	; (8019760 <_dtoa_r+0x2e8>)
 80194a8:	21ef      	movs	r1, #239	; 0xef
 80194aa:	48ae      	ldr	r0, [pc, #696]	; (8019764 <_dtoa_r+0x2ec>)
 80194ac:	f002 f9e2 	bl	801b874 <__assert_func>
 80194b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80194b4:	6005      	str	r5, [r0, #0]
 80194b6:	60c5      	str	r5, [r0, #12]
 80194b8:	69e3      	ldr	r3, [r4, #28]
 80194ba:	6819      	ldr	r1, [r3, #0]
 80194bc:	b151      	cbz	r1, 80194d4 <_dtoa_r+0x5c>
 80194be:	685a      	ldr	r2, [r3, #4]
 80194c0:	604a      	str	r2, [r1, #4]
 80194c2:	2301      	movs	r3, #1
 80194c4:	4093      	lsls	r3, r2
 80194c6:	608b      	str	r3, [r1, #8]
 80194c8:	4620      	mov	r0, r4
 80194ca:	f001 fc77 	bl	801adbc <_Bfree>
 80194ce:	69e3      	ldr	r3, [r4, #28]
 80194d0:	2200      	movs	r2, #0
 80194d2:	601a      	str	r2, [r3, #0]
 80194d4:	1e3b      	subs	r3, r7, #0
 80194d6:	bfbb      	ittet	lt
 80194d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80194dc:	9303      	strlt	r3, [sp, #12]
 80194de:	2300      	movge	r3, #0
 80194e0:	2201      	movlt	r2, #1
 80194e2:	bfac      	ite	ge
 80194e4:	f8c8 3000 	strge.w	r3, [r8]
 80194e8:	f8c8 2000 	strlt.w	r2, [r8]
 80194ec:	4b9e      	ldr	r3, [pc, #632]	; (8019768 <_dtoa_r+0x2f0>)
 80194ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80194f2:	ea33 0308 	bics.w	r3, r3, r8
 80194f6:	d11b      	bne.n	8019530 <_dtoa_r+0xb8>
 80194f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80194fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80194fe:	6013      	str	r3, [r2, #0]
 8019500:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8019504:	4333      	orrs	r3, r6
 8019506:	f000 8593 	beq.w	801a030 <_dtoa_r+0xbb8>
 801950a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801950c:	b963      	cbnz	r3, 8019528 <_dtoa_r+0xb0>
 801950e:	4b97      	ldr	r3, [pc, #604]	; (801976c <_dtoa_r+0x2f4>)
 8019510:	e027      	b.n	8019562 <_dtoa_r+0xea>
 8019512:	4b97      	ldr	r3, [pc, #604]	; (8019770 <_dtoa_r+0x2f8>)
 8019514:	9300      	str	r3, [sp, #0]
 8019516:	3308      	adds	r3, #8
 8019518:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801951a:	6013      	str	r3, [r2, #0]
 801951c:	9800      	ldr	r0, [sp, #0]
 801951e:	b013      	add	sp, #76	; 0x4c
 8019520:	ecbd 8b04 	vpop	{d8-d9}
 8019524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019528:	4b90      	ldr	r3, [pc, #576]	; (801976c <_dtoa_r+0x2f4>)
 801952a:	9300      	str	r3, [sp, #0]
 801952c:	3303      	adds	r3, #3
 801952e:	e7f3      	b.n	8019518 <_dtoa_r+0xa0>
 8019530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019534:	2200      	movs	r2, #0
 8019536:	ec51 0b17 	vmov	r0, r1, d7
 801953a:	eeb0 8a47 	vmov.f32	s16, s14
 801953e:	eef0 8a67 	vmov.f32	s17, s15
 8019542:	2300      	movs	r3, #0
 8019544:	f7e7 faca 	bl	8000adc <__aeabi_dcmpeq>
 8019548:	4681      	mov	r9, r0
 801954a:	b160      	cbz	r0, 8019566 <_dtoa_r+0xee>
 801954c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801954e:	2301      	movs	r3, #1
 8019550:	6013      	str	r3, [r2, #0]
 8019552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019554:	2b00      	cmp	r3, #0
 8019556:	f000 8568 	beq.w	801a02a <_dtoa_r+0xbb2>
 801955a:	4b86      	ldr	r3, [pc, #536]	; (8019774 <_dtoa_r+0x2fc>)
 801955c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801955e:	6013      	str	r3, [r2, #0]
 8019560:	3b01      	subs	r3, #1
 8019562:	9300      	str	r3, [sp, #0]
 8019564:	e7da      	b.n	801951c <_dtoa_r+0xa4>
 8019566:	aa10      	add	r2, sp, #64	; 0x40
 8019568:	a911      	add	r1, sp, #68	; 0x44
 801956a:	4620      	mov	r0, r4
 801956c:	eeb0 0a48 	vmov.f32	s0, s16
 8019570:	eef0 0a68 	vmov.f32	s1, s17
 8019574:	f001 ffbe 	bl	801b4f4 <__d2b>
 8019578:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801957c:	4682      	mov	sl, r0
 801957e:	2d00      	cmp	r5, #0
 8019580:	d07f      	beq.n	8019682 <_dtoa_r+0x20a>
 8019582:	ee18 3a90 	vmov	r3, s17
 8019586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801958a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801958e:	ec51 0b18 	vmov	r0, r1, d8
 8019592:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019596:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801959a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801959e:	4619      	mov	r1, r3
 80195a0:	2200      	movs	r2, #0
 80195a2:	4b75      	ldr	r3, [pc, #468]	; (8019778 <_dtoa_r+0x300>)
 80195a4:	f7e6 fe7a 	bl	800029c <__aeabi_dsub>
 80195a8:	a367      	add	r3, pc, #412	; (adr r3, 8019748 <_dtoa_r+0x2d0>)
 80195aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ae:	f7e7 f82d 	bl	800060c <__aeabi_dmul>
 80195b2:	a367      	add	r3, pc, #412	; (adr r3, 8019750 <_dtoa_r+0x2d8>)
 80195b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195b8:	f7e6 fe72 	bl	80002a0 <__adddf3>
 80195bc:	4606      	mov	r6, r0
 80195be:	4628      	mov	r0, r5
 80195c0:	460f      	mov	r7, r1
 80195c2:	f7e6 ffb9 	bl	8000538 <__aeabi_i2d>
 80195c6:	a364      	add	r3, pc, #400	; (adr r3, 8019758 <_dtoa_r+0x2e0>)
 80195c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195cc:	f7e7 f81e 	bl	800060c <__aeabi_dmul>
 80195d0:	4602      	mov	r2, r0
 80195d2:	460b      	mov	r3, r1
 80195d4:	4630      	mov	r0, r6
 80195d6:	4639      	mov	r1, r7
 80195d8:	f7e6 fe62 	bl	80002a0 <__adddf3>
 80195dc:	4606      	mov	r6, r0
 80195de:	460f      	mov	r7, r1
 80195e0:	f7e7 fac4 	bl	8000b6c <__aeabi_d2iz>
 80195e4:	2200      	movs	r2, #0
 80195e6:	4683      	mov	fp, r0
 80195e8:	2300      	movs	r3, #0
 80195ea:	4630      	mov	r0, r6
 80195ec:	4639      	mov	r1, r7
 80195ee:	f7e7 fa7f 	bl	8000af0 <__aeabi_dcmplt>
 80195f2:	b148      	cbz	r0, 8019608 <_dtoa_r+0x190>
 80195f4:	4658      	mov	r0, fp
 80195f6:	f7e6 ff9f 	bl	8000538 <__aeabi_i2d>
 80195fa:	4632      	mov	r2, r6
 80195fc:	463b      	mov	r3, r7
 80195fe:	f7e7 fa6d 	bl	8000adc <__aeabi_dcmpeq>
 8019602:	b908      	cbnz	r0, 8019608 <_dtoa_r+0x190>
 8019604:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8019608:	f1bb 0f16 	cmp.w	fp, #22
 801960c:	d857      	bhi.n	80196be <_dtoa_r+0x246>
 801960e:	4b5b      	ldr	r3, [pc, #364]	; (801977c <_dtoa_r+0x304>)
 8019610:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8019614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019618:	ec51 0b18 	vmov	r0, r1, d8
 801961c:	f7e7 fa68 	bl	8000af0 <__aeabi_dcmplt>
 8019620:	2800      	cmp	r0, #0
 8019622:	d04e      	beq.n	80196c2 <_dtoa_r+0x24a>
 8019624:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8019628:	2300      	movs	r3, #0
 801962a:	930c      	str	r3, [sp, #48]	; 0x30
 801962c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801962e:	1b5b      	subs	r3, r3, r5
 8019630:	1e5a      	subs	r2, r3, #1
 8019632:	bf45      	ittet	mi
 8019634:	f1c3 0301 	rsbmi	r3, r3, #1
 8019638:	9305      	strmi	r3, [sp, #20]
 801963a:	2300      	movpl	r3, #0
 801963c:	2300      	movmi	r3, #0
 801963e:	9206      	str	r2, [sp, #24]
 8019640:	bf54      	ite	pl
 8019642:	9305      	strpl	r3, [sp, #20]
 8019644:	9306      	strmi	r3, [sp, #24]
 8019646:	f1bb 0f00 	cmp.w	fp, #0
 801964a:	db3c      	blt.n	80196c6 <_dtoa_r+0x24e>
 801964c:	9b06      	ldr	r3, [sp, #24]
 801964e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8019652:	445b      	add	r3, fp
 8019654:	9306      	str	r3, [sp, #24]
 8019656:	2300      	movs	r3, #0
 8019658:	9308      	str	r3, [sp, #32]
 801965a:	9b07      	ldr	r3, [sp, #28]
 801965c:	2b09      	cmp	r3, #9
 801965e:	d868      	bhi.n	8019732 <_dtoa_r+0x2ba>
 8019660:	2b05      	cmp	r3, #5
 8019662:	bfc4      	itt	gt
 8019664:	3b04      	subgt	r3, #4
 8019666:	9307      	strgt	r3, [sp, #28]
 8019668:	9b07      	ldr	r3, [sp, #28]
 801966a:	f1a3 0302 	sub.w	r3, r3, #2
 801966e:	bfcc      	ite	gt
 8019670:	2500      	movgt	r5, #0
 8019672:	2501      	movle	r5, #1
 8019674:	2b03      	cmp	r3, #3
 8019676:	f200 8085 	bhi.w	8019784 <_dtoa_r+0x30c>
 801967a:	e8df f003 	tbb	[pc, r3]
 801967e:	3b2e      	.short	0x3b2e
 8019680:	5839      	.short	0x5839
 8019682:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8019686:	441d      	add	r5, r3
 8019688:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801968c:	2b20      	cmp	r3, #32
 801968e:	bfc1      	itttt	gt
 8019690:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8019694:	fa08 f803 	lslgt.w	r8, r8, r3
 8019698:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801969c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80196a0:	bfd6      	itet	le
 80196a2:	f1c3 0320 	rsble	r3, r3, #32
 80196a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80196aa:	fa06 f003 	lslle.w	r0, r6, r3
 80196ae:	f7e6 ff33 	bl	8000518 <__aeabi_ui2d>
 80196b2:	2201      	movs	r2, #1
 80196b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80196b8:	3d01      	subs	r5, #1
 80196ba:	920e      	str	r2, [sp, #56]	; 0x38
 80196bc:	e76f      	b.n	801959e <_dtoa_r+0x126>
 80196be:	2301      	movs	r3, #1
 80196c0:	e7b3      	b.n	801962a <_dtoa_r+0x1b2>
 80196c2:	900c      	str	r0, [sp, #48]	; 0x30
 80196c4:	e7b2      	b.n	801962c <_dtoa_r+0x1b4>
 80196c6:	9b05      	ldr	r3, [sp, #20]
 80196c8:	eba3 030b 	sub.w	r3, r3, fp
 80196cc:	9305      	str	r3, [sp, #20]
 80196ce:	f1cb 0300 	rsb	r3, fp, #0
 80196d2:	9308      	str	r3, [sp, #32]
 80196d4:	2300      	movs	r3, #0
 80196d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80196d8:	e7bf      	b.n	801965a <_dtoa_r+0x1e2>
 80196da:	2300      	movs	r3, #0
 80196dc:	9309      	str	r3, [sp, #36]	; 0x24
 80196de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	dc52      	bgt.n	801978a <_dtoa_r+0x312>
 80196e4:	2301      	movs	r3, #1
 80196e6:	9301      	str	r3, [sp, #4]
 80196e8:	9304      	str	r3, [sp, #16]
 80196ea:	461a      	mov	r2, r3
 80196ec:	920a      	str	r2, [sp, #40]	; 0x28
 80196ee:	e00b      	b.n	8019708 <_dtoa_r+0x290>
 80196f0:	2301      	movs	r3, #1
 80196f2:	e7f3      	b.n	80196dc <_dtoa_r+0x264>
 80196f4:	2300      	movs	r3, #0
 80196f6:	9309      	str	r3, [sp, #36]	; 0x24
 80196f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196fa:	445b      	add	r3, fp
 80196fc:	9301      	str	r3, [sp, #4]
 80196fe:	3301      	adds	r3, #1
 8019700:	2b01      	cmp	r3, #1
 8019702:	9304      	str	r3, [sp, #16]
 8019704:	bfb8      	it	lt
 8019706:	2301      	movlt	r3, #1
 8019708:	69e0      	ldr	r0, [r4, #28]
 801970a:	2100      	movs	r1, #0
 801970c:	2204      	movs	r2, #4
 801970e:	f102 0614 	add.w	r6, r2, #20
 8019712:	429e      	cmp	r6, r3
 8019714:	d93d      	bls.n	8019792 <_dtoa_r+0x31a>
 8019716:	6041      	str	r1, [r0, #4]
 8019718:	4620      	mov	r0, r4
 801971a:	f001 fb0f 	bl	801ad3c <_Balloc>
 801971e:	9000      	str	r0, [sp, #0]
 8019720:	2800      	cmp	r0, #0
 8019722:	d139      	bne.n	8019798 <_dtoa_r+0x320>
 8019724:	4b16      	ldr	r3, [pc, #88]	; (8019780 <_dtoa_r+0x308>)
 8019726:	4602      	mov	r2, r0
 8019728:	f240 11af 	movw	r1, #431	; 0x1af
 801972c:	e6bd      	b.n	80194aa <_dtoa_r+0x32>
 801972e:	2301      	movs	r3, #1
 8019730:	e7e1      	b.n	80196f6 <_dtoa_r+0x27e>
 8019732:	2501      	movs	r5, #1
 8019734:	2300      	movs	r3, #0
 8019736:	9307      	str	r3, [sp, #28]
 8019738:	9509      	str	r5, [sp, #36]	; 0x24
 801973a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801973e:	9301      	str	r3, [sp, #4]
 8019740:	9304      	str	r3, [sp, #16]
 8019742:	2200      	movs	r2, #0
 8019744:	2312      	movs	r3, #18
 8019746:	e7d1      	b.n	80196ec <_dtoa_r+0x274>
 8019748:	636f4361 	.word	0x636f4361
 801974c:	3fd287a7 	.word	0x3fd287a7
 8019750:	8b60c8b3 	.word	0x8b60c8b3
 8019754:	3fc68a28 	.word	0x3fc68a28
 8019758:	509f79fb 	.word	0x509f79fb
 801975c:	3fd34413 	.word	0x3fd34413
 8019760:	0801efb6 	.word	0x0801efb6
 8019764:	0801efcd 	.word	0x0801efcd
 8019768:	7ff00000 	.word	0x7ff00000
 801976c:	0801efb2 	.word	0x0801efb2
 8019770:	0801efa9 	.word	0x0801efa9
 8019774:	0801ee25 	.word	0x0801ee25
 8019778:	3ff80000 	.word	0x3ff80000
 801977c:	0801f128 	.word	0x0801f128
 8019780:	0801f025 	.word	0x0801f025
 8019784:	2301      	movs	r3, #1
 8019786:	9309      	str	r3, [sp, #36]	; 0x24
 8019788:	e7d7      	b.n	801973a <_dtoa_r+0x2c2>
 801978a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801978c:	9301      	str	r3, [sp, #4]
 801978e:	9304      	str	r3, [sp, #16]
 8019790:	e7ba      	b.n	8019708 <_dtoa_r+0x290>
 8019792:	3101      	adds	r1, #1
 8019794:	0052      	lsls	r2, r2, #1
 8019796:	e7ba      	b.n	801970e <_dtoa_r+0x296>
 8019798:	69e3      	ldr	r3, [r4, #28]
 801979a:	9a00      	ldr	r2, [sp, #0]
 801979c:	601a      	str	r2, [r3, #0]
 801979e:	9b04      	ldr	r3, [sp, #16]
 80197a0:	2b0e      	cmp	r3, #14
 80197a2:	f200 80a8 	bhi.w	80198f6 <_dtoa_r+0x47e>
 80197a6:	2d00      	cmp	r5, #0
 80197a8:	f000 80a5 	beq.w	80198f6 <_dtoa_r+0x47e>
 80197ac:	f1bb 0f00 	cmp.w	fp, #0
 80197b0:	dd38      	ble.n	8019824 <_dtoa_r+0x3ac>
 80197b2:	4bc0      	ldr	r3, [pc, #768]	; (8019ab4 <_dtoa_r+0x63c>)
 80197b4:	f00b 020f 	and.w	r2, fp, #15
 80197b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80197bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80197c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80197c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80197c8:	d019      	beq.n	80197fe <_dtoa_r+0x386>
 80197ca:	4bbb      	ldr	r3, [pc, #748]	; (8019ab8 <_dtoa_r+0x640>)
 80197cc:	ec51 0b18 	vmov	r0, r1, d8
 80197d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80197d4:	f7e7 f844 	bl	8000860 <__aeabi_ddiv>
 80197d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80197dc:	f008 080f 	and.w	r8, r8, #15
 80197e0:	2503      	movs	r5, #3
 80197e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8019ab8 <_dtoa_r+0x640>
 80197e6:	f1b8 0f00 	cmp.w	r8, #0
 80197ea:	d10a      	bne.n	8019802 <_dtoa_r+0x38a>
 80197ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80197f0:	4632      	mov	r2, r6
 80197f2:	463b      	mov	r3, r7
 80197f4:	f7e7 f834 	bl	8000860 <__aeabi_ddiv>
 80197f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80197fc:	e02b      	b.n	8019856 <_dtoa_r+0x3de>
 80197fe:	2502      	movs	r5, #2
 8019800:	e7ef      	b.n	80197e2 <_dtoa_r+0x36a>
 8019802:	f018 0f01 	tst.w	r8, #1
 8019806:	d008      	beq.n	801981a <_dtoa_r+0x3a2>
 8019808:	4630      	mov	r0, r6
 801980a:	4639      	mov	r1, r7
 801980c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8019810:	f7e6 fefc 	bl	800060c <__aeabi_dmul>
 8019814:	3501      	adds	r5, #1
 8019816:	4606      	mov	r6, r0
 8019818:	460f      	mov	r7, r1
 801981a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801981e:	f109 0908 	add.w	r9, r9, #8
 8019822:	e7e0      	b.n	80197e6 <_dtoa_r+0x36e>
 8019824:	f000 809f 	beq.w	8019966 <_dtoa_r+0x4ee>
 8019828:	f1cb 0600 	rsb	r6, fp, #0
 801982c:	4ba1      	ldr	r3, [pc, #644]	; (8019ab4 <_dtoa_r+0x63c>)
 801982e:	4fa2      	ldr	r7, [pc, #648]	; (8019ab8 <_dtoa_r+0x640>)
 8019830:	f006 020f 	and.w	r2, r6, #15
 8019834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019838:	e9d3 2300 	ldrd	r2, r3, [r3]
 801983c:	ec51 0b18 	vmov	r0, r1, d8
 8019840:	f7e6 fee4 	bl	800060c <__aeabi_dmul>
 8019844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019848:	1136      	asrs	r6, r6, #4
 801984a:	2300      	movs	r3, #0
 801984c:	2502      	movs	r5, #2
 801984e:	2e00      	cmp	r6, #0
 8019850:	d17e      	bne.n	8019950 <_dtoa_r+0x4d8>
 8019852:	2b00      	cmp	r3, #0
 8019854:	d1d0      	bne.n	80197f8 <_dtoa_r+0x380>
 8019856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019858:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801985c:	2b00      	cmp	r3, #0
 801985e:	f000 8084 	beq.w	801996a <_dtoa_r+0x4f2>
 8019862:	4b96      	ldr	r3, [pc, #600]	; (8019abc <_dtoa_r+0x644>)
 8019864:	2200      	movs	r2, #0
 8019866:	4640      	mov	r0, r8
 8019868:	4649      	mov	r1, r9
 801986a:	f7e7 f941 	bl	8000af0 <__aeabi_dcmplt>
 801986e:	2800      	cmp	r0, #0
 8019870:	d07b      	beq.n	801996a <_dtoa_r+0x4f2>
 8019872:	9b04      	ldr	r3, [sp, #16]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d078      	beq.n	801996a <_dtoa_r+0x4f2>
 8019878:	9b01      	ldr	r3, [sp, #4]
 801987a:	2b00      	cmp	r3, #0
 801987c:	dd39      	ble.n	80198f2 <_dtoa_r+0x47a>
 801987e:	4b90      	ldr	r3, [pc, #576]	; (8019ac0 <_dtoa_r+0x648>)
 8019880:	2200      	movs	r2, #0
 8019882:	4640      	mov	r0, r8
 8019884:	4649      	mov	r1, r9
 8019886:	f7e6 fec1 	bl	800060c <__aeabi_dmul>
 801988a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801988e:	9e01      	ldr	r6, [sp, #4]
 8019890:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8019894:	3501      	adds	r5, #1
 8019896:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801989a:	4628      	mov	r0, r5
 801989c:	f7e6 fe4c 	bl	8000538 <__aeabi_i2d>
 80198a0:	4642      	mov	r2, r8
 80198a2:	464b      	mov	r3, r9
 80198a4:	f7e6 feb2 	bl	800060c <__aeabi_dmul>
 80198a8:	4b86      	ldr	r3, [pc, #536]	; (8019ac4 <_dtoa_r+0x64c>)
 80198aa:	2200      	movs	r2, #0
 80198ac:	f7e6 fcf8 	bl	80002a0 <__adddf3>
 80198b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80198b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80198b8:	9303      	str	r3, [sp, #12]
 80198ba:	2e00      	cmp	r6, #0
 80198bc:	d158      	bne.n	8019970 <_dtoa_r+0x4f8>
 80198be:	4b82      	ldr	r3, [pc, #520]	; (8019ac8 <_dtoa_r+0x650>)
 80198c0:	2200      	movs	r2, #0
 80198c2:	4640      	mov	r0, r8
 80198c4:	4649      	mov	r1, r9
 80198c6:	f7e6 fce9 	bl	800029c <__aeabi_dsub>
 80198ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80198ce:	4680      	mov	r8, r0
 80198d0:	4689      	mov	r9, r1
 80198d2:	f7e7 f92b 	bl	8000b2c <__aeabi_dcmpgt>
 80198d6:	2800      	cmp	r0, #0
 80198d8:	f040 8296 	bne.w	8019e08 <_dtoa_r+0x990>
 80198dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80198e0:	4640      	mov	r0, r8
 80198e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80198e6:	4649      	mov	r1, r9
 80198e8:	f7e7 f902 	bl	8000af0 <__aeabi_dcmplt>
 80198ec:	2800      	cmp	r0, #0
 80198ee:	f040 8289 	bne.w	8019e04 <_dtoa_r+0x98c>
 80198f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80198f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	f2c0 814e 	blt.w	8019b9a <_dtoa_r+0x722>
 80198fe:	f1bb 0f0e 	cmp.w	fp, #14
 8019902:	f300 814a 	bgt.w	8019b9a <_dtoa_r+0x722>
 8019906:	4b6b      	ldr	r3, [pc, #428]	; (8019ab4 <_dtoa_r+0x63c>)
 8019908:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801990c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019912:	2b00      	cmp	r3, #0
 8019914:	f280 80dc 	bge.w	8019ad0 <_dtoa_r+0x658>
 8019918:	9b04      	ldr	r3, [sp, #16]
 801991a:	2b00      	cmp	r3, #0
 801991c:	f300 80d8 	bgt.w	8019ad0 <_dtoa_r+0x658>
 8019920:	f040 826f 	bne.w	8019e02 <_dtoa_r+0x98a>
 8019924:	4b68      	ldr	r3, [pc, #416]	; (8019ac8 <_dtoa_r+0x650>)
 8019926:	2200      	movs	r2, #0
 8019928:	4640      	mov	r0, r8
 801992a:	4649      	mov	r1, r9
 801992c:	f7e6 fe6e 	bl	800060c <__aeabi_dmul>
 8019930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019934:	f7e7 f8f0 	bl	8000b18 <__aeabi_dcmpge>
 8019938:	9e04      	ldr	r6, [sp, #16]
 801993a:	4637      	mov	r7, r6
 801993c:	2800      	cmp	r0, #0
 801993e:	f040 8245 	bne.w	8019dcc <_dtoa_r+0x954>
 8019942:	9d00      	ldr	r5, [sp, #0]
 8019944:	2331      	movs	r3, #49	; 0x31
 8019946:	f805 3b01 	strb.w	r3, [r5], #1
 801994a:	f10b 0b01 	add.w	fp, fp, #1
 801994e:	e241      	b.n	8019dd4 <_dtoa_r+0x95c>
 8019950:	07f2      	lsls	r2, r6, #31
 8019952:	d505      	bpl.n	8019960 <_dtoa_r+0x4e8>
 8019954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019958:	f7e6 fe58 	bl	800060c <__aeabi_dmul>
 801995c:	3501      	adds	r5, #1
 801995e:	2301      	movs	r3, #1
 8019960:	1076      	asrs	r6, r6, #1
 8019962:	3708      	adds	r7, #8
 8019964:	e773      	b.n	801984e <_dtoa_r+0x3d6>
 8019966:	2502      	movs	r5, #2
 8019968:	e775      	b.n	8019856 <_dtoa_r+0x3de>
 801996a:	9e04      	ldr	r6, [sp, #16]
 801996c:	465f      	mov	r7, fp
 801996e:	e792      	b.n	8019896 <_dtoa_r+0x41e>
 8019970:	9900      	ldr	r1, [sp, #0]
 8019972:	4b50      	ldr	r3, [pc, #320]	; (8019ab4 <_dtoa_r+0x63c>)
 8019974:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019978:	4431      	add	r1, r6
 801997a:	9102      	str	r1, [sp, #8]
 801997c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801997e:	eeb0 9a47 	vmov.f32	s18, s14
 8019982:	eef0 9a67 	vmov.f32	s19, s15
 8019986:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801998a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801998e:	2900      	cmp	r1, #0
 8019990:	d044      	beq.n	8019a1c <_dtoa_r+0x5a4>
 8019992:	494e      	ldr	r1, [pc, #312]	; (8019acc <_dtoa_r+0x654>)
 8019994:	2000      	movs	r0, #0
 8019996:	f7e6 ff63 	bl	8000860 <__aeabi_ddiv>
 801999a:	ec53 2b19 	vmov	r2, r3, d9
 801999e:	f7e6 fc7d 	bl	800029c <__aeabi_dsub>
 80199a2:	9d00      	ldr	r5, [sp, #0]
 80199a4:	ec41 0b19 	vmov	d9, r0, r1
 80199a8:	4649      	mov	r1, r9
 80199aa:	4640      	mov	r0, r8
 80199ac:	f7e7 f8de 	bl	8000b6c <__aeabi_d2iz>
 80199b0:	4606      	mov	r6, r0
 80199b2:	f7e6 fdc1 	bl	8000538 <__aeabi_i2d>
 80199b6:	4602      	mov	r2, r0
 80199b8:	460b      	mov	r3, r1
 80199ba:	4640      	mov	r0, r8
 80199bc:	4649      	mov	r1, r9
 80199be:	f7e6 fc6d 	bl	800029c <__aeabi_dsub>
 80199c2:	3630      	adds	r6, #48	; 0x30
 80199c4:	f805 6b01 	strb.w	r6, [r5], #1
 80199c8:	ec53 2b19 	vmov	r2, r3, d9
 80199cc:	4680      	mov	r8, r0
 80199ce:	4689      	mov	r9, r1
 80199d0:	f7e7 f88e 	bl	8000af0 <__aeabi_dcmplt>
 80199d4:	2800      	cmp	r0, #0
 80199d6:	d164      	bne.n	8019aa2 <_dtoa_r+0x62a>
 80199d8:	4642      	mov	r2, r8
 80199da:	464b      	mov	r3, r9
 80199dc:	4937      	ldr	r1, [pc, #220]	; (8019abc <_dtoa_r+0x644>)
 80199de:	2000      	movs	r0, #0
 80199e0:	f7e6 fc5c 	bl	800029c <__aeabi_dsub>
 80199e4:	ec53 2b19 	vmov	r2, r3, d9
 80199e8:	f7e7 f882 	bl	8000af0 <__aeabi_dcmplt>
 80199ec:	2800      	cmp	r0, #0
 80199ee:	f040 80b6 	bne.w	8019b5e <_dtoa_r+0x6e6>
 80199f2:	9b02      	ldr	r3, [sp, #8]
 80199f4:	429d      	cmp	r5, r3
 80199f6:	f43f af7c 	beq.w	80198f2 <_dtoa_r+0x47a>
 80199fa:	4b31      	ldr	r3, [pc, #196]	; (8019ac0 <_dtoa_r+0x648>)
 80199fc:	ec51 0b19 	vmov	r0, r1, d9
 8019a00:	2200      	movs	r2, #0
 8019a02:	f7e6 fe03 	bl	800060c <__aeabi_dmul>
 8019a06:	4b2e      	ldr	r3, [pc, #184]	; (8019ac0 <_dtoa_r+0x648>)
 8019a08:	ec41 0b19 	vmov	d9, r0, r1
 8019a0c:	2200      	movs	r2, #0
 8019a0e:	4640      	mov	r0, r8
 8019a10:	4649      	mov	r1, r9
 8019a12:	f7e6 fdfb 	bl	800060c <__aeabi_dmul>
 8019a16:	4680      	mov	r8, r0
 8019a18:	4689      	mov	r9, r1
 8019a1a:	e7c5      	b.n	80199a8 <_dtoa_r+0x530>
 8019a1c:	ec51 0b17 	vmov	r0, r1, d7
 8019a20:	f7e6 fdf4 	bl	800060c <__aeabi_dmul>
 8019a24:	9b02      	ldr	r3, [sp, #8]
 8019a26:	9d00      	ldr	r5, [sp, #0]
 8019a28:	930f      	str	r3, [sp, #60]	; 0x3c
 8019a2a:	ec41 0b19 	vmov	d9, r0, r1
 8019a2e:	4649      	mov	r1, r9
 8019a30:	4640      	mov	r0, r8
 8019a32:	f7e7 f89b 	bl	8000b6c <__aeabi_d2iz>
 8019a36:	4606      	mov	r6, r0
 8019a38:	f7e6 fd7e 	bl	8000538 <__aeabi_i2d>
 8019a3c:	3630      	adds	r6, #48	; 0x30
 8019a3e:	4602      	mov	r2, r0
 8019a40:	460b      	mov	r3, r1
 8019a42:	4640      	mov	r0, r8
 8019a44:	4649      	mov	r1, r9
 8019a46:	f7e6 fc29 	bl	800029c <__aeabi_dsub>
 8019a4a:	f805 6b01 	strb.w	r6, [r5], #1
 8019a4e:	9b02      	ldr	r3, [sp, #8]
 8019a50:	429d      	cmp	r5, r3
 8019a52:	4680      	mov	r8, r0
 8019a54:	4689      	mov	r9, r1
 8019a56:	f04f 0200 	mov.w	r2, #0
 8019a5a:	d124      	bne.n	8019aa6 <_dtoa_r+0x62e>
 8019a5c:	4b1b      	ldr	r3, [pc, #108]	; (8019acc <_dtoa_r+0x654>)
 8019a5e:	ec51 0b19 	vmov	r0, r1, d9
 8019a62:	f7e6 fc1d 	bl	80002a0 <__adddf3>
 8019a66:	4602      	mov	r2, r0
 8019a68:	460b      	mov	r3, r1
 8019a6a:	4640      	mov	r0, r8
 8019a6c:	4649      	mov	r1, r9
 8019a6e:	f7e7 f85d 	bl	8000b2c <__aeabi_dcmpgt>
 8019a72:	2800      	cmp	r0, #0
 8019a74:	d173      	bne.n	8019b5e <_dtoa_r+0x6e6>
 8019a76:	ec53 2b19 	vmov	r2, r3, d9
 8019a7a:	4914      	ldr	r1, [pc, #80]	; (8019acc <_dtoa_r+0x654>)
 8019a7c:	2000      	movs	r0, #0
 8019a7e:	f7e6 fc0d 	bl	800029c <__aeabi_dsub>
 8019a82:	4602      	mov	r2, r0
 8019a84:	460b      	mov	r3, r1
 8019a86:	4640      	mov	r0, r8
 8019a88:	4649      	mov	r1, r9
 8019a8a:	f7e7 f831 	bl	8000af0 <__aeabi_dcmplt>
 8019a8e:	2800      	cmp	r0, #0
 8019a90:	f43f af2f 	beq.w	80198f2 <_dtoa_r+0x47a>
 8019a94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019a96:	1e6b      	subs	r3, r5, #1
 8019a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8019a9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019a9e:	2b30      	cmp	r3, #48	; 0x30
 8019aa0:	d0f8      	beq.n	8019a94 <_dtoa_r+0x61c>
 8019aa2:	46bb      	mov	fp, r7
 8019aa4:	e04a      	b.n	8019b3c <_dtoa_r+0x6c4>
 8019aa6:	4b06      	ldr	r3, [pc, #24]	; (8019ac0 <_dtoa_r+0x648>)
 8019aa8:	f7e6 fdb0 	bl	800060c <__aeabi_dmul>
 8019aac:	4680      	mov	r8, r0
 8019aae:	4689      	mov	r9, r1
 8019ab0:	e7bd      	b.n	8019a2e <_dtoa_r+0x5b6>
 8019ab2:	bf00      	nop
 8019ab4:	0801f128 	.word	0x0801f128
 8019ab8:	0801f100 	.word	0x0801f100
 8019abc:	3ff00000 	.word	0x3ff00000
 8019ac0:	40240000 	.word	0x40240000
 8019ac4:	401c0000 	.word	0x401c0000
 8019ac8:	40140000 	.word	0x40140000
 8019acc:	3fe00000 	.word	0x3fe00000
 8019ad0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019ad4:	9d00      	ldr	r5, [sp, #0]
 8019ad6:	4642      	mov	r2, r8
 8019ad8:	464b      	mov	r3, r9
 8019ada:	4630      	mov	r0, r6
 8019adc:	4639      	mov	r1, r7
 8019ade:	f7e6 febf 	bl	8000860 <__aeabi_ddiv>
 8019ae2:	f7e7 f843 	bl	8000b6c <__aeabi_d2iz>
 8019ae6:	9001      	str	r0, [sp, #4]
 8019ae8:	f7e6 fd26 	bl	8000538 <__aeabi_i2d>
 8019aec:	4642      	mov	r2, r8
 8019aee:	464b      	mov	r3, r9
 8019af0:	f7e6 fd8c 	bl	800060c <__aeabi_dmul>
 8019af4:	4602      	mov	r2, r0
 8019af6:	460b      	mov	r3, r1
 8019af8:	4630      	mov	r0, r6
 8019afa:	4639      	mov	r1, r7
 8019afc:	f7e6 fbce 	bl	800029c <__aeabi_dsub>
 8019b00:	9e01      	ldr	r6, [sp, #4]
 8019b02:	9f04      	ldr	r7, [sp, #16]
 8019b04:	3630      	adds	r6, #48	; 0x30
 8019b06:	f805 6b01 	strb.w	r6, [r5], #1
 8019b0a:	9e00      	ldr	r6, [sp, #0]
 8019b0c:	1bae      	subs	r6, r5, r6
 8019b0e:	42b7      	cmp	r7, r6
 8019b10:	4602      	mov	r2, r0
 8019b12:	460b      	mov	r3, r1
 8019b14:	d134      	bne.n	8019b80 <_dtoa_r+0x708>
 8019b16:	f7e6 fbc3 	bl	80002a0 <__adddf3>
 8019b1a:	4642      	mov	r2, r8
 8019b1c:	464b      	mov	r3, r9
 8019b1e:	4606      	mov	r6, r0
 8019b20:	460f      	mov	r7, r1
 8019b22:	f7e7 f803 	bl	8000b2c <__aeabi_dcmpgt>
 8019b26:	b9c8      	cbnz	r0, 8019b5c <_dtoa_r+0x6e4>
 8019b28:	4642      	mov	r2, r8
 8019b2a:	464b      	mov	r3, r9
 8019b2c:	4630      	mov	r0, r6
 8019b2e:	4639      	mov	r1, r7
 8019b30:	f7e6 ffd4 	bl	8000adc <__aeabi_dcmpeq>
 8019b34:	b110      	cbz	r0, 8019b3c <_dtoa_r+0x6c4>
 8019b36:	9b01      	ldr	r3, [sp, #4]
 8019b38:	07db      	lsls	r3, r3, #31
 8019b3a:	d40f      	bmi.n	8019b5c <_dtoa_r+0x6e4>
 8019b3c:	4651      	mov	r1, sl
 8019b3e:	4620      	mov	r0, r4
 8019b40:	f001 f93c 	bl	801adbc <_Bfree>
 8019b44:	2300      	movs	r3, #0
 8019b46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019b48:	702b      	strb	r3, [r5, #0]
 8019b4a:	f10b 0301 	add.w	r3, fp, #1
 8019b4e:	6013      	str	r3, [r2, #0]
 8019b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	f43f ace2 	beq.w	801951c <_dtoa_r+0xa4>
 8019b58:	601d      	str	r5, [r3, #0]
 8019b5a:	e4df      	b.n	801951c <_dtoa_r+0xa4>
 8019b5c:	465f      	mov	r7, fp
 8019b5e:	462b      	mov	r3, r5
 8019b60:	461d      	mov	r5, r3
 8019b62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019b66:	2a39      	cmp	r2, #57	; 0x39
 8019b68:	d106      	bne.n	8019b78 <_dtoa_r+0x700>
 8019b6a:	9a00      	ldr	r2, [sp, #0]
 8019b6c:	429a      	cmp	r2, r3
 8019b6e:	d1f7      	bne.n	8019b60 <_dtoa_r+0x6e8>
 8019b70:	9900      	ldr	r1, [sp, #0]
 8019b72:	2230      	movs	r2, #48	; 0x30
 8019b74:	3701      	adds	r7, #1
 8019b76:	700a      	strb	r2, [r1, #0]
 8019b78:	781a      	ldrb	r2, [r3, #0]
 8019b7a:	3201      	adds	r2, #1
 8019b7c:	701a      	strb	r2, [r3, #0]
 8019b7e:	e790      	b.n	8019aa2 <_dtoa_r+0x62a>
 8019b80:	4ba3      	ldr	r3, [pc, #652]	; (8019e10 <_dtoa_r+0x998>)
 8019b82:	2200      	movs	r2, #0
 8019b84:	f7e6 fd42 	bl	800060c <__aeabi_dmul>
 8019b88:	2200      	movs	r2, #0
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	4606      	mov	r6, r0
 8019b8e:	460f      	mov	r7, r1
 8019b90:	f7e6 ffa4 	bl	8000adc <__aeabi_dcmpeq>
 8019b94:	2800      	cmp	r0, #0
 8019b96:	d09e      	beq.n	8019ad6 <_dtoa_r+0x65e>
 8019b98:	e7d0      	b.n	8019b3c <_dtoa_r+0x6c4>
 8019b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b9c:	2a00      	cmp	r2, #0
 8019b9e:	f000 80ca 	beq.w	8019d36 <_dtoa_r+0x8be>
 8019ba2:	9a07      	ldr	r2, [sp, #28]
 8019ba4:	2a01      	cmp	r2, #1
 8019ba6:	f300 80ad 	bgt.w	8019d04 <_dtoa_r+0x88c>
 8019baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019bac:	2a00      	cmp	r2, #0
 8019bae:	f000 80a5 	beq.w	8019cfc <_dtoa_r+0x884>
 8019bb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019bb6:	9e08      	ldr	r6, [sp, #32]
 8019bb8:	9d05      	ldr	r5, [sp, #20]
 8019bba:	9a05      	ldr	r2, [sp, #20]
 8019bbc:	441a      	add	r2, r3
 8019bbe:	9205      	str	r2, [sp, #20]
 8019bc0:	9a06      	ldr	r2, [sp, #24]
 8019bc2:	2101      	movs	r1, #1
 8019bc4:	441a      	add	r2, r3
 8019bc6:	4620      	mov	r0, r4
 8019bc8:	9206      	str	r2, [sp, #24]
 8019bca:	f001 f9f7 	bl	801afbc <__i2b>
 8019bce:	4607      	mov	r7, r0
 8019bd0:	b165      	cbz	r5, 8019bec <_dtoa_r+0x774>
 8019bd2:	9b06      	ldr	r3, [sp, #24]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	dd09      	ble.n	8019bec <_dtoa_r+0x774>
 8019bd8:	42ab      	cmp	r3, r5
 8019bda:	9a05      	ldr	r2, [sp, #20]
 8019bdc:	bfa8      	it	ge
 8019bde:	462b      	movge	r3, r5
 8019be0:	1ad2      	subs	r2, r2, r3
 8019be2:	9205      	str	r2, [sp, #20]
 8019be4:	9a06      	ldr	r2, [sp, #24]
 8019be6:	1aed      	subs	r5, r5, r3
 8019be8:	1ad3      	subs	r3, r2, r3
 8019bea:	9306      	str	r3, [sp, #24]
 8019bec:	9b08      	ldr	r3, [sp, #32]
 8019bee:	b1f3      	cbz	r3, 8019c2e <_dtoa_r+0x7b6>
 8019bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	f000 80a3 	beq.w	8019d3e <_dtoa_r+0x8c6>
 8019bf8:	2e00      	cmp	r6, #0
 8019bfa:	dd10      	ble.n	8019c1e <_dtoa_r+0x7a6>
 8019bfc:	4639      	mov	r1, r7
 8019bfe:	4632      	mov	r2, r6
 8019c00:	4620      	mov	r0, r4
 8019c02:	f001 fa9b 	bl	801b13c <__pow5mult>
 8019c06:	4652      	mov	r2, sl
 8019c08:	4601      	mov	r1, r0
 8019c0a:	4607      	mov	r7, r0
 8019c0c:	4620      	mov	r0, r4
 8019c0e:	f001 f9eb 	bl	801afe8 <__multiply>
 8019c12:	4651      	mov	r1, sl
 8019c14:	4680      	mov	r8, r0
 8019c16:	4620      	mov	r0, r4
 8019c18:	f001 f8d0 	bl	801adbc <_Bfree>
 8019c1c:	46c2      	mov	sl, r8
 8019c1e:	9b08      	ldr	r3, [sp, #32]
 8019c20:	1b9a      	subs	r2, r3, r6
 8019c22:	d004      	beq.n	8019c2e <_dtoa_r+0x7b6>
 8019c24:	4651      	mov	r1, sl
 8019c26:	4620      	mov	r0, r4
 8019c28:	f001 fa88 	bl	801b13c <__pow5mult>
 8019c2c:	4682      	mov	sl, r0
 8019c2e:	2101      	movs	r1, #1
 8019c30:	4620      	mov	r0, r4
 8019c32:	f001 f9c3 	bl	801afbc <__i2b>
 8019c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	4606      	mov	r6, r0
 8019c3c:	f340 8081 	ble.w	8019d42 <_dtoa_r+0x8ca>
 8019c40:	461a      	mov	r2, r3
 8019c42:	4601      	mov	r1, r0
 8019c44:	4620      	mov	r0, r4
 8019c46:	f001 fa79 	bl	801b13c <__pow5mult>
 8019c4a:	9b07      	ldr	r3, [sp, #28]
 8019c4c:	2b01      	cmp	r3, #1
 8019c4e:	4606      	mov	r6, r0
 8019c50:	dd7a      	ble.n	8019d48 <_dtoa_r+0x8d0>
 8019c52:	f04f 0800 	mov.w	r8, #0
 8019c56:	6933      	ldr	r3, [r6, #16]
 8019c58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8019c5c:	6918      	ldr	r0, [r3, #16]
 8019c5e:	f001 f95f 	bl	801af20 <__hi0bits>
 8019c62:	f1c0 0020 	rsb	r0, r0, #32
 8019c66:	9b06      	ldr	r3, [sp, #24]
 8019c68:	4418      	add	r0, r3
 8019c6a:	f010 001f 	ands.w	r0, r0, #31
 8019c6e:	f000 8094 	beq.w	8019d9a <_dtoa_r+0x922>
 8019c72:	f1c0 0320 	rsb	r3, r0, #32
 8019c76:	2b04      	cmp	r3, #4
 8019c78:	f340 8085 	ble.w	8019d86 <_dtoa_r+0x90e>
 8019c7c:	9b05      	ldr	r3, [sp, #20]
 8019c7e:	f1c0 001c 	rsb	r0, r0, #28
 8019c82:	4403      	add	r3, r0
 8019c84:	9305      	str	r3, [sp, #20]
 8019c86:	9b06      	ldr	r3, [sp, #24]
 8019c88:	4403      	add	r3, r0
 8019c8a:	4405      	add	r5, r0
 8019c8c:	9306      	str	r3, [sp, #24]
 8019c8e:	9b05      	ldr	r3, [sp, #20]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	dd05      	ble.n	8019ca0 <_dtoa_r+0x828>
 8019c94:	4651      	mov	r1, sl
 8019c96:	461a      	mov	r2, r3
 8019c98:	4620      	mov	r0, r4
 8019c9a:	f001 faa9 	bl	801b1f0 <__lshift>
 8019c9e:	4682      	mov	sl, r0
 8019ca0:	9b06      	ldr	r3, [sp, #24]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	dd05      	ble.n	8019cb2 <_dtoa_r+0x83a>
 8019ca6:	4631      	mov	r1, r6
 8019ca8:	461a      	mov	r2, r3
 8019caa:	4620      	mov	r0, r4
 8019cac:	f001 faa0 	bl	801b1f0 <__lshift>
 8019cb0:	4606      	mov	r6, r0
 8019cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d072      	beq.n	8019d9e <_dtoa_r+0x926>
 8019cb8:	4631      	mov	r1, r6
 8019cba:	4650      	mov	r0, sl
 8019cbc:	f001 fb04 	bl	801b2c8 <__mcmp>
 8019cc0:	2800      	cmp	r0, #0
 8019cc2:	da6c      	bge.n	8019d9e <_dtoa_r+0x926>
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	4651      	mov	r1, sl
 8019cc8:	220a      	movs	r2, #10
 8019cca:	4620      	mov	r0, r4
 8019ccc:	f001 f898 	bl	801ae00 <__multadd>
 8019cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cd2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8019cd6:	4682      	mov	sl, r0
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	f000 81b0 	beq.w	801a03e <_dtoa_r+0xbc6>
 8019cde:	2300      	movs	r3, #0
 8019ce0:	4639      	mov	r1, r7
 8019ce2:	220a      	movs	r2, #10
 8019ce4:	4620      	mov	r0, r4
 8019ce6:	f001 f88b 	bl	801ae00 <__multadd>
 8019cea:	9b01      	ldr	r3, [sp, #4]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	4607      	mov	r7, r0
 8019cf0:	f300 8096 	bgt.w	8019e20 <_dtoa_r+0x9a8>
 8019cf4:	9b07      	ldr	r3, [sp, #28]
 8019cf6:	2b02      	cmp	r3, #2
 8019cf8:	dc59      	bgt.n	8019dae <_dtoa_r+0x936>
 8019cfa:	e091      	b.n	8019e20 <_dtoa_r+0x9a8>
 8019cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019cfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8019d02:	e758      	b.n	8019bb6 <_dtoa_r+0x73e>
 8019d04:	9b04      	ldr	r3, [sp, #16]
 8019d06:	1e5e      	subs	r6, r3, #1
 8019d08:	9b08      	ldr	r3, [sp, #32]
 8019d0a:	42b3      	cmp	r3, r6
 8019d0c:	bfbf      	itttt	lt
 8019d0e:	9b08      	ldrlt	r3, [sp, #32]
 8019d10:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8019d12:	9608      	strlt	r6, [sp, #32]
 8019d14:	1af3      	sublt	r3, r6, r3
 8019d16:	bfb4      	ite	lt
 8019d18:	18d2      	addlt	r2, r2, r3
 8019d1a:	1b9e      	subge	r6, r3, r6
 8019d1c:	9b04      	ldr	r3, [sp, #16]
 8019d1e:	bfbc      	itt	lt
 8019d20:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8019d22:	2600      	movlt	r6, #0
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	bfb7      	itett	lt
 8019d28:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8019d2c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8019d30:	1a9d      	sublt	r5, r3, r2
 8019d32:	2300      	movlt	r3, #0
 8019d34:	e741      	b.n	8019bba <_dtoa_r+0x742>
 8019d36:	9e08      	ldr	r6, [sp, #32]
 8019d38:	9d05      	ldr	r5, [sp, #20]
 8019d3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019d3c:	e748      	b.n	8019bd0 <_dtoa_r+0x758>
 8019d3e:	9a08      	ldr	r2, [sp, #32]
 8019d40:	e770      	b.n	8019c24 <_dtoa_r+0x7ac>
 8019d42:	9b07      	ldr	r3, [sp, #28]
 8019d44:	2b01      	cmp	r3, #1
 8019d46:	dc19      	bgt.n	8019d7c <_dtoa_r+0x904>
 8019d48:	9b02      	ldr	r3, [sp, #8]
 8019d4a:	b9bb      	cbnz	r3, 8019d7c <_dtoa_r+0x904>
 8019d4c:	9b03      	ldr	r3, [sp, #12]
 8019d4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019d52:	b99b      	cbnz	r3, 8019d7c <_dtoa_r+0x904>
 8019d54:	9b03      	ldr	r3, [sp, #12]
 8019d56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019d5a:	0d1b      	lsrs	r3, r3, #20
 8019d5c:	051b      	lsls	r3, r3, #20
 8019d5e:	b183      	cbz	r3, 8019d82 <_dtoa_r+0x90a>
 8019d60:	9b05      	ldr	r3, [sp, #20]
 8019d62:	3301      	adds	r3, #1
 8019d64:	9305      	str	r3, [sp, #20]
 8019d66:	9b06      	ldr	r3, [sp, #24]
 8019d68:	3301      	adds	r3, #1
 8019d6a:	9306      	str	r3, [sp, #24]
 8019d6c:	f04f 0801 	mov.w	r8, #1
 8019d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	f47f af6f 	bne.w	8019c56 <_dtoa_r+0x7de>
 8019d78:	2001      	movs	r0, #1
 8019d7a:	e774      	b.n	8019c66 <_dtoa_r+0x7ee>
 8019d7c:	f04f 0800 	mov.w	r8, #0
 8019d80:	e7f6      	b.n	8019d70 <_dtoa_r+0x8f8>
 8019d82:	4698      	mov	r8, r3
 8019d84:	e7f4      	b.n	8019d70 <_dtoa_r+0x8f8>
 8019d86:	d082      	beq.n	8019c8e <_dtoa_r+0x816>
 8019d88:	9a05      	ldr	r2, [sp, #20]
 8019d8a:	331c      	adds	r3, #28
 8019d8c:	441a      	add	r2, r3
 8019d8e:	9205      	str	r2, [sp, #20]
 8019d90:	9a06      	ldr	r2, [sp, #24]
 8019d92:	441a      	add	r2, r3
 8019d94:	441d      	add	r5, r3
 8019d96:	9206      	str	r2, [sp, #24]
 8019d98:	e779      	b.n	8019c8e <_dtoa_r+0x816>
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	e7f4      	b.n	8019d88 <_dtoa_r+0x910>
 8019d9e:	9b04      	ldr	r3, [sp, #16]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	dc37      	bgt.n	8019e14 <_dtoa_r+0x99c>
 8019da4:	9b07      	ldr	r3, [sp, #28]
 8019da6:	2b02      	cmp	r3, #2
 8019da8:	dd34      	ble.n	8019e14 <_dtoa_r+0x99c>
 8019daa:	9b04      	ldr	r3, [sp, #16]
 8019dac:	9301      	str	r3, [sp, #4]
 8019dae:	9b01      	ldr	r3, [sp, #4]
 8019db0:	b963      	cbnz	r3, 8019dcc <_dtoa_r+0x954>
 8019db2:	4631      	mov	r1, r6
 8019db4:	2205      	movs	r2, #5
 8019db6:	4620      	mov	r0, r4
 8019db8:	f001 f822 	bl	801ae00 <__multadd>
 8019dbc:	4601      	mov	r1, r0
 8019dbe:	4606      	mov	r6, r0
 8019dc0:	4650      	mov	r0, sl
 8019dc2:	f001 fa81 	bl	801b2c8 <__mcmp>
 8019dc6:	2800      	cmp	r0, #0
 8019dc8:	f73f adbb 	bgt.w	8019942 <_dtoa_r+0x4ca>
 8019dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019dce:	9d00      	ldr	r5, [sp, #0]
 8019dd0:	ea6f 0b03 	mvn.w	fp, r3
 8019dd4:	f04f 0800 	mov.w	r8, #0
 8019dd8:	4631      	mov	r1, r6
 8019dda:	4620      	mov	r0, r4
 8019ddc:	f000 ffee 	bl	801adbc <_Bfree>
 8019de0:	2f00      	cmp	r7, #0
 8019de2:	f43f aeab 	beq.w	8019b3c <_dtoa_r+0x6c4>
 8019de6:	f1b8 0f00 	cmp.w	r8, #0
 8019dea:	d005      	beq.n	8019df8 <_dtoa_r+0x980>
 8019dec:	45b8      	cmp	r8, r7
 8019dee:	d003      	beq.n	8019df8 <_dtoa_r+0x980>
 8019df0:	4641      	mov	r1, r8
 8019df2:	4620      	mov	r0, r4
 8019df4:	f000 ffe2 	bl	801adbc <_Bfree>
 8019df8:	4639      	mov	r1, r7
 8019dfa:	4620      	mov	r0, r4
 8019dfc:	f000 ffde 	bl	801adbc <_Bfree>
 8019e00:	e69c      	b.n	8019b3c <_dtoa_r+0x6c4>
 8019e02:	2600      	movs	r6, #0
 8019e04:	4637      	mov	r7, r6
 8019e06:	e7e1      	b.n	8019dcc <_dtoa_r+0x954>
 8019e08:	46bb      	mov	fp, r7
 8019e0a:	4637      	mov	r7, r6
 8019e0c:	e599      	b.n	8019942 <_dtoa_r+0x4ca>
 8019e0e:	bf00      	nop
 8019e10:	40240000 	.word	0x40240000
 8019e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	f000 80c8 	beq.w	8019fac <_dtoa_r+0xb34>
 8019e1c:	9b04      	ldr	r3, [sp, #16]
 8019e1e:	9301      	str	r3, [sp, #4]
 8019e20:	2d00      	cmp	r5, #0
 8019e22:	dd05      	ble.n	8019e30 <_dtoa_r+0x9b8>
 8019e24:	4639      	mov	r1, r7
 8019e26:	462a      	mov	r2, r5
 8019e28:	4620      	mov	r0, r4
 8019e2a:	f001 f9e1 	bl	801b1f0 <__lshift>
 8019e2e:	4607      	mov	r7, r0
 8019e30:	f1b8 0f00 	cmp.w	r8, #0
 8019e34:	d05b      	beq.n	8019eee <_dtoa_r+0xa76>
 8019e36:	6879      	ldr	r1, [r7, #4]
 8019e38:	4620      	mov	r0, r4
 8019e3a:	f000 ff7f 	bl	801ad3c <_Balloc>
 8019e3e:	4605      	mov	r5, r0
 8019e40:	b928      	cbnz	r0, 8019e4e <_dtoa_r+0x9d6>
 8019e42:	4b83      	ldr	r3, [pc, #524]	; (801a050 <_dtoa_r+0xbd8>)
 8019e44:	4602      	mov	r2, r0
 8019e46:	f240 21ef 	movw	r1, #751	; 0x2ef
 8019e4a:	f7ff bb2e 	b.w	80194aa <_dtoa_r+0x32>
 8019e4e:	693a      	ldr	r2, [r7, #16]
 8019e50:	3202      	adds	r2, #2
 8019e52:	0092      	lsls	r2, r2, #2
 8019e54:	f107 010c 	add.w	r1, r7, #12
 8019e58:	300c      	adds	r0, #12
 8019e5a:	f7ff fa67 	bl	801932c <memcpy>
 8019e5e:	2201      	movs	r2, #1
 8019e60:	4629      	mov	r1, r5
 8019e62:	4620      	mov	r0, r4
 8019e64:	f001 f9c4 	bl	801b1f0 <__lshift>
 8019e68:	9b00      	ldr	r3, [sp, #0]
 8019e6a:	3301      	adds	r3, #1
 8019e6c:	9304      	str	r3, [sp, #16]
 8019e6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019e72:	4413      	add	r3, r2
 8019e74:	9308      	str	r3, [sp, #32]
 8019e76:	9b02      	ldr	r3, [sp, #8]
 8019e78:	f003 0301 	and.w	r3, r3, #1
 8019e7c:	46b8      	mov	r8, r7
 8019e7e:	9306      	str	r3, [sp, #24]
 8019e80:	4607      	mov	r7, r0
 8019e82:	9b04      	ldr	r3, [sp, #16]
 8019e84:	4631      	mov	r1, r6
 8019e86:	3b01      	subs	r3, #1
 8019e88:	4650      	mov	r0, sl
 8019e8a:	9301      	str	r3, [sp, #4]
 8019e8c:	f7ff fa6a 	bl	8019364 <quorem>
 8019e90:	4641      	mov	r1, r8
 8019e92:	9002      	str	r0, [sp, #8]
 8019e94:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8019e98:	4650      	mov	r0, sl
 8019e9a:	f001 fa15 	bl	801b2c8 <__mcmp>
 8019e9e:	463a      	mov	r2, r7
 8019ea0:	9005      	str	r0, [sp, #20]
 8019ea2:	4631      	mov	r1, r6
 8019ea4:	4620      	mov	r0, r4
 8019ea6:	f001 fa2b 	bl	801b300 <__mdiff>
 8019eaa:	68c2      	ldr	r2, [r0, #12]
 8019eac:	4605      	mov	r5, r0
 8019eae:	bb02      	cbnz	r2, 8019ef2 <_dtoa_r+0xa7a>
 8019eb0:	4601      	mov	r1, r0
 8019eb2:	4650      	mov	r0, sl
 8019eb4:	f001 fa08 	bl	801b2c8 <__mcmp>
 8019eb8:	4602      	mov	r2, r0
 8019eba:	4629      	mov	r1, r5
 8019ebc:	4620      	mov	r0, r4
 8019ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8019ec0:	f000 ff7c 	bl	801adbc <_Bfree>
 8019ec4:	9b07      	ldr	r3, [sp, #28]
 8019ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ec8:	9d04      	ldr	r5, [sp, #16]
 8019eca:	ea43 0102 	orr.w	r1, r3, r2
 8019ece:	9b06      	ldr	r3, [sp, #24]
 8019ed0:	4319      	orrs	r1, r3
 8019ed2:	d110      	bne.n	8019ef6 <_dtoa_r+0xa7e>
 8019ed4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019ed8:	d029      	beq.n	8019f2e <_dtoa_r+0xab6>
 8019eda:	9b05      	ldr	r3, [sp, #20]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	dd02      	ble.n	8019ee6 <_dtoa_r+0xa6e>
 8019ee0:	9b02      	ldr	r3, [sp, #8]
 8019ee2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8019ee6:	9b01      	ldr	r3, [sp, #4]
 8019ee8:	f883 9000 	strb.w	r9, [r3]
 8019eec:	e774      	b.n	8019dd8 <_dtoa_r+0x960>
 8019eee:	4638      	mov	r0, r7
 8019ef0:	e7ba      	b.n	8019e68 <_dtoa_r+0x9f0>
 8019ef2:	2201      	movs	r2, #1
 8019ef4:	e7e1      	b.n	8019eba <_dtoa_r+0xa42>
 8019ef6:	9b05      	ldr	r3, [sp, #20]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	db04      	blt.n	8019f06 <_dtoa_r+0xa8e>
 8019efc:	9907      	ldr	r1, [sp, #28]
 8019efe:	430b      	orrs	r3, r1
 8019f00:	9906      	ldr	r1, [sp, #24]
 8019f02:	430b      	orrs	r3, r1
 8019f04:	d120      	bne.n	8019f48 <_dtoa_r+0xad0>
 8019f06:	2a00      	cmp	r2, #0
 8019f08:	dded      	ble.n	8019ee6 <_dtoa_r+0xa6e>
 8019f0a:	4651      	mov	r1, sl
 8019f0c:	2201      	movs	r2, #1
 8019f0e:	4620      	mov	r0, r4
 8019f10:	f001 f96e 	bl	801b1f0 <__lshift>
 8019f14:	4631      	mov	r1, r6
 8019f16:	4682      	mov	sl, r0
 8019f18:	f001 f9d6 	bl	801b2c8 <__mcmp>
 8019f1c:	2800      	cmp	r0, #0
 8019f1e:	dc03      	bgt.n	8019f28 <_dtoa_r+0xab0>
 8019f20:	d1e1      	bne.n	8019ee6 <_dtoa_r+0xa6e>
 8019f22:	f019 0f01 	tst.w	r9, #1
 8019f26:	d0de      	beq.n	8019ee6 <_dtoa_r+0xa6e>
 8019f28:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019f2c:	d1d8      	bne.n	8019ee0 <_dtoa_r+0xa68>
 8019f2e:	9a01      	ldr	r2, [sp, #4]
 8019f30:	2339      	movs	r3, #57	; 0x39
 8019f32:	7013      	strb	r3, [r2, #0]
 8019f34:	462b      	mov	r3, r5
 8019f36:	461d      	mov	r5, r3
 8019f38:	3b01      	subs	r3, #1
 8019f3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019f3e:	2a39      	cmp	r2, #57	; 0x39
 8019f40:	d06c      	beq.n	801a01c <_dtoa_r+0xba4>
 8019f42:	3201      	adds	r2, #1
 8019f44:	701a      	strb	r2, [r3, #0]
 8019f46:	e747      	b.n	8019dd8 <_dtoa_r+0x960>
 8019f48:	2a00      	cmp	r2, #0
 8019f4a:	dd07      	ble.n	8019f5c <_dtoa_r+0xae4>
 8019f4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019f50:	d0ed      	beq.n	8019f2e <_dtoa_r+0xab6>
 8019f52:	9a01      	ldr	r2, [sp, #4]
 8019f54:	f109 0301 	add.w	r3, r9, #1
 8019f58:	7013      	strb	r3, [r2, #0]
 8019f5a:	e73d      	b.n	8019dd8 <_dtoa_r+0x960>
 8019f5c:	9b04      	ldr	r3, [sp, #16]
 8019f5e:	9a08      	ldr	r2, [sp, #32]
 8019f60:	f803 9c01 	strb.w	r9, [r3, #-1]
 8019f64:	4293      	cmp	r3, r2
 8019f66:	d043      	beq.n	8019ff0 <_dtoa_r+0xb78>
 8019f68:	4651      	mov	r1, sl
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	220a      	movs	r2, #10
 8019f6e:	4620      	mov	r0, r4
 8019f70:	f000 ff46 	bl	801ae00 <__multadd>
 8019f74:	45b8      	cmp	r8, r7
 8019f76:	4682      	mov	sl, r0
 8019f78:	f04f 0300 	mov.w	r3, #0
 8019f7c:	f04f 020a 	mov.w	r2, #10
 8019f80:	4641      	mov	r1, r8
 8019f82:	4620      	mov	r0, r4
 8019f84:	d107      	bne.n	8019f96 <_dtoa_r+0xb1e>
 8019f86:	f000 ff3b 	bl	801ae00 <__multadd>
 8019f8a:	4680      	mov	r8, r0
 8019f8c:	4607      	mov	r7, r0
 8019f8e:	9b04      	ldr	r3, [sp, #16]
 8019f90:	3301      	adds	r3, #1
 8019f92:	9304      	str	r3, [sp, #16]
 8019f94:	e775      	b.n	8019e82 <_dtoa_r+0xa0a>
 8019f96:	f000 ff33 	bl	801ae00 <__multadd>
 8019f9a:	4639      	mov	r1, r7
 8019f9c:	4680      	mov	r8, r0
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	220a      	movs	r2, #10
 8019fa2:	4620      	mov	r0, r4
 8019fa4:	f000 ff2c 	bl	801ae00 <__multadd>
 8019fa8:	4607      	mov	r7, r0
 8019faa:	e7f0      	b.n	8019f8e <_dtoa_r+0xb16>
 8019fac:	9b04      	ldr	r3, [sp, #16]
 8019fae:	9301      	str	r3, [sp, #4]
 8019fb0:	9d00      	ldr	r5, [sp, #0]
 8019fb2:	4631      	mov	r1, r6
 8019fb4:	4650      	mov	r0, sl
 8019fb6:	f7ff f9d5 	bl	8019364 <quorem>
 8019fba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8019fbe:	9b00      	ldr	r3, [sp, #0]
 8019fc0:	f805 9b01 	strb.w	r9, [r5], #1
 8019fc4:	1aea      	subs	r2, r5, r3
 8019fc6:	9b01      	ldr	r3, [sp, #4]
 8019fc8:	4293      	cmp	r3, r2
 8019fca:	dd07      	ble.n	8019fdc <_dtoa_r+0xb64>
 8019fcc:	4651      	mov	r1, sl
 8019fce:	2300      	movs	r3, #0
 8019fd0:	220a      	movs	r2, #10
 8019fd2:	4620      	mov	r0, r4
 8019fd4:	f000 ff14 	bl	801ae00 <__multadd>
 8019fd8:	4682      	mov	sl, r0
 8019fda:	e7ea      	b.n	8019fb2 <_dtoa_r+0xb3a>
 8019fdc:	9b01      	ldr	r3, [sp, #4]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	bfc8      	it	gt
 8019fe2:	461d      	movgt	r5, r3
 8019fe4:	9b00      	ldr	r3, [sp, #0]
 8019fe6:	bfd8      	it	le
 8019fe8:	2501      	movle	r5, #1
 8019fea:	441d      	add	r5, r3
 8019fec:	f04f 0800 	mov.w	r8, #0
 8019ff0:	4651      	mov	r1, sl
 8019ff2:	2201      	movs	r2, #1
 8019ff4:	4620      	mov	r0, r4
 8019ff6:	f001 f8fb 	bl	801b1f0 <__lshift>
 8019ffa:	4631      	mov	r1, r6
 8019ffc:	4682      	mov	sl, r0
 8019ffe:	f001 f963 	bl	801b2c8 <__mcmp>
 801a002:	2800      	cmp	r0, #0
 801a004:	dc96      	bgt.n	8019f34 <_dtoa_r+0xabc>
 801a006:	d102      	bne.n	801a00e <_dtoa_r+0xb96>
 801a008:	f019 0f01 	tst.w	r9, #1
 801a00c:	d192      	bne.n	8019f34 <_dtoa_r+0xabc>
 801a00e:	462b      	mov	r3, r5
 801a010:	461d      	mov	r5, r3
 801a012:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a016:	2a30      	cmp	r2, #48	; 0x30
 801a018:	d0fa      	beq.n	801a010 <_dtoa_r+0xb98>
 801a01a:	e6dd      	b.n	8019dd8 <_dtoa_r+0x960>
 801a01c:	9a00      	ldr	r2, [sp, #0]
 801a01e:	429a      	cmp	r2, r3
 801a020:	d189      	bne.n	8019f36 <_dtoa_r+0xabe>
 801a022:	f10b 0b01 	add.w	fp, fp, #1
 801a026:	2331      	movs	r3, #49	; 0x31
 801a028:	e796      	b.n	8019f58 <_dtoa_r+0xae0>
 801a02a:	4b0a      	ldr	r3, [pc, #40]	; (801a054 <_dtoa_r+0xbdc>)
 801a02c:	f7ff ba99 	b.w	8019562 <_dtoa_r+0xea>
 801a030:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a032:	2b00      	cmp	r3, #0
 801a034:	f47f aa6d 	bne.w	8019512 <_dtoa_r+0x9a>
 801a038:	4b07      	ldr	r3, [pc, #28]	; (801a058 <_dtoa_r+0xbe0>)
 801a03a:	f7ff ba92 	b.w	8019562 <_dtoa_r+0xea>
 801a03e:	9b01      	ldr	r3, [sp, #4]
 801a040:	2b00      	cmp	r3, #0
 801a042:	dcb5      	bgt.n	8019fb0 <_dtoa_r+0xb38>
 801a044:	9b07      	ldr	r3, [sp, #28]
 801a046:	2b02      	cmp	r3, #2
 801a048:	f73f aeb1 	bgt.w	8019dae <_dtoa_r+0x936>
 801a04c:	e7b0      	b.n	8019fb0 <_dtoa_r+0xb38>
 801a04e:	bf00      	nop
 801a050:	0801f025 	.word	0x0801f025
 801a054:	0801ee24 	.word	0x0801ee24
 801a058:	0801efa9 	.word	0x0801efa9

0801a05c <_free_r>:
 801a05c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a05e:	2900      	cmp	r1, #0
 801a060:	d044      	beq.n	801a0ec <_free_r+0x90>
 801a062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a066:	9001      	str	r0, [sp, #4]
 801a068:	2b00      	cmp	r3, #0
 801a06a:	f1a1 0404 	sub.w	r4, r1, #4
 801a06e:	bfb8      	it	lt
 801a070:	18e4      	addlt	r4, r4, r3
 801a072:	f000 fe57 	bl	801ad24 <__malloc_lock>
 801a076:	4a1e      	ldr	r2, [pc, #120]	; (801a0f0 <_free_r+0x94>)
 801a078:	9801      	ldr	r0, [sp, #4]
 801a07a:	6813      	ldr	r3, [r2, #0]
 801a07c:	b933      	cbnz	r3, 801a08c <_free_r+0x30>
 801a07e:	6063      	str	r3, [r4, #4]
 801a080:	6014      	str	r4, [r2, #0]
 801a082:	b003      	add	sp, #12
 801a084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a088:	f000 be52 	b.w	801ad30 <__malloc_unlock>
 801a08c:	42a3      	cmp	r3, r4
 801a08e:	d908      	bls.n	801a0a2 <_free_r+0x46>
 801a090:	6825      	ldr	r5, [r4, #0]
 801a092:	1961      	adds	r1, r4, r5
 801a094:	428b      	cmp	r3, r1
 801a096:	bf01      	itttt	eq
 801a098:	6819      	ldreq	r1, [r3, #0]
 801a09a:	685b      	ldreq	r3, [r3, #4]
 801a09c:	1949      	addeq	r1, r1, r5
 801a09e:	6021      	streq	r1, [r4, #0]
 801a0a0:	e7ed      	b.n	801a07e <_free_r+0x22>
 801a0a2:	461a      	mov	r2, r3
 801a0a4:	685b      	ldr	r3, [r3, #4]
 801a0a6:	b10b      	cbz	r3, 801a0ac <_free_r+0x50>
 801a0a8:	42a3      	cmp	r3, r4
 801a0aa:	d9fa      	bls.n	801a0a2 <_free_r+0x46>
 801a0ac:	6811      	ldr	r1, [r2, #0]
 801a0ae:	1855      	adds	r5, r2, r1
 801a0b0:	42a5      	cmp	r5, r4
 801a0b2:	d10b      	bne.n	801a0cc <_free_r+0x70>
 801a0b4:	6824      	ldr	r4, [r4, #0]
 801a0b6:	4421      	add	r1, r4
 801a0b8:	1854      	adds	r4, r2, r1
 801a0ba:	42a3      	cmp	r3, r4
 801a0bc:	6011      	str	r1, [r2, #0]
 801a0be:	d1e0      	bne.n	801a082 <_free_r+0x26>
 801a0c0:	681c      	ldr	r4, [r3, #0]
 801a0c2:	685b      	ldr	r3, [r3, #4]
 801a0c4:	6053      	str	r3, [r2, #4]
 801a0c6:	440c      	add	r4, r1
 801a0c8:	6014      	str	r4, [r2, #0]
 801a0ca:	e7da      	b.n	801a082 <_free_r+0x26>
 801a0cc:	d902      	bls.n	801a0d4 <_free_r+0x78>
 801a0ce:	230c      	movs	r3, #12
 801a0d0:	6003      	str	r3, [r0, #0]
 801a0d2:	e7d6      	b.n	801a082 <_free_r+0x26>
 801a0d4:	6825      	ldr	r5, [r4, #0]
 801a0d6:	1961      	adds	r1, r4, r5
 801a0d8:	428b      	cmp	r3, r1
 801a0da:	bf04      	itt	eq
 801a0dc:	6819      	ldreq	r1, [r3, #0]
 801a0de:	685b      	ldreq	r3, [r3, #4]
 801a0e0:	6063      	str	r3, [r4, #4]
 801a0e2:	bf04      	itt	eq
 801a0e4:	1949      	addeq	r1, r1, r5
 801a0e6:	6021      	streq	r1, [r4, #0]
 801a0e8:	6054      	str	r4, [r2, #4]
 801a0ea:	e7ca      	b.n	801a082 <_free_r+0x26>
 801a0ec:	b003      	add	sp, #12
 801a0ee:	bd30      	pop	{r4, r5, pc}
 801a0f0:	20008874 	.word	0x20008874

0801a0f4 <rshift>:
 801a0f4:	6903      	ldr	r3, [r0, #16]
 801a0f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801a0fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a0fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 801a102:	f100 0414 	add.w	r4, r0, #20
 801a106:	dd45      	ble.n	801a194 <rshift+0xa0>
 801a108:	f011 011f 	ands.w	r1, r1, #31
 801a10c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801a110:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801a114:	d10c      	bne.n	801a130 <rshift+0x3c>
 801a116:	f100 0710 	add.w	r7, r0, #16
 801a11a:	4629      	mov	r1, r5
 801a11c:	42b1      	cmp	r1, r6
 801a11e:	d334      	bcc.n	801a18a <rshift+0x96>
 801a120:	1a9b      	subs	r3, r3, r2
 801a122:	009b      	lsls	r3, r3, #2
 801a124:	1eea      	subs	r2, r5, #3
 801a126:	4296      	cmp	r6, r2
 801a128:	bf38      	it	cc
 801a12a:	2300      	movcc	r3, #0
 801a12c:	4423      	add	r3, r4
 801a12e:	e015      	b.n	801a15c <rshift+0x68>
 801a130:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801a134:	f1c1 0820 	rsb	r8, r1, #32
 801a138:	40cf      	lsrs	r7, r1
 801a13a:	f105 0e04 	add.w	lr, r5, #4
 801a13e:	46a1      	mov	r9, r4
 801a140:	4576      	cmp	r6, lr
 801a142:	46f4      	mov	ip, lr
 801a144:	d815      	bhi.n	801a172 <rshift+0x7e>
 801a146:	1a9a      	subs	r2, r3, r2
 801a148:	0092      	lsls	r2, r2, #2
 801a14a:	3a04      	subs	r2, #4
 801a14c:	3501      	adds	r5, #1
 801a14e:	42ae      	cmp	r6, r5
 801a150:	bf38      	it	cc
 801a152:	2200      	movcc	r2, #0
 801a154:	18a3      	adds	r3, r4, r2
 801a156:	50a7      	str	r7, [r4, r2]
 801a158:	b107      	cbz	r7, 801a15c <rshift+0x68>
 801a15a:	3304      	adds	r3, #4
 801a15c:	1b1a      	subs	r2, r3, r4
 801a15e:	42a3      	cmp	r3, r4
 801a160:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801a164:	bf08      	it	eq
 801a166:	2300      	moveq	r3, #0
 801a168:	6102      	str	r2, [r0, #16]
 801a16a:	bf08      	it	eq
 801a16c:	6143      	streq	r3, [r0, #20]
 801a16e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a172:	f8dc c000 	ldr.w	ip, [ip]
 801a176:	fa0c fc08 	lsl.w	ip, ip, r8
 801a17a:	ea4c 0707 	orr.w	r7, ip, r7
 801a17e:	f849 7b04 	str.w	r7, [r9], #4
 801a182:	f85e 7b04 	ldr.w	r7, [lr], #4
 801a186:	40cf      	lsrs	r7, r1
 801a188:	e7da      	b.n	801a140 <rshift+0x4c>
 801a18a:	f851 cb04 	ldr.w	ip, [r1], #4
 801a18e:	f847 cf04 	str.w	ip, [r7, #4]!
 801a192:	e7c3      	b.n	801a11c <rshift+0x28>
 801a194:	4623      	mov	r3, r4
 801a196:	e7e1      	b.n	801a15c <rshift+0x68>

0801a198 <__hexdig_fun>:
 801a198:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801a19c:	2b09      	cmp	r3, #9
 801a19e:	d802      	bhi.n	801a1a6 <__hexdig_fun+0xe>
 801a1a0:	3820      	subs	r0, #32
 801a1a2:	b2c0      	uxtb	r0, r0
 801a1a4:	4770      	bx	lr
 801a1a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801a1aa:	2b05      	cmp	r3, #5
 801a1ac:	d801      	bhi.n	801a1b2 <__hexdig_fun+0x1a>
 801a1ae:	3847      	subs	r0, #71	; 0x47
 801a1b0:	e7f7      	b.n	801a1a2 <__hexdig_fun+0xa>
 801a1b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801a1b6:	2b05      	cmp	r3, #5
 801a1b8:	d801      	bhi.n	801a1be <__hexdig_fun+0x26>
 801a1ba:	3827      	subs	r0, #39	; 0x27
 801a1bc:	e7f1      	b.n	801a1a2 <__hexdig_fun+0xa>
 801a1be:	2000      	movs	r0, #0
 801a1c0:	4770      	bx	lr
	...

0801a1c4 <__gethex>:
 801a1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1c8:	4617      	mov	r7, r2
 801a1ca:	680a      	ldr	r2, [r1, #0]
 801a1cc:	b085      	sub	sp, #20
 801a1ce:	f102 0b02 	add.w	fp, r2, #2
 801a1d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801a1d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801a1da:	4681      	mov	r9, r0
 801a1dc:	468a      	mov	sl, r1
 801a1de:	9302      	str	r3, [sp, #8]
 801a1e0:	32fe      	adds	r2, #254	; 0xfe
 801a1e2:	eb02 030b 	add.w	r3, r2, fp
 801a1e6:	46d8      	mov	r8, fp
 801a1e8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801a1ec:	9301      	str	r3, [sp, #4]
 801a1ee:	2830      	cmp	r0, #48	; 0x30
 801a1f0:	d0f7      	beq.n	801a1e2 <__gethex+0x1e>
 801a1f2:	f7ff ffd1 	bl	801a198 <__hexdig_fun>
 801a1f6:	4604      	mov	r4, r0
 801a1f8:	2800      	cmp	r0, #0
 801a1fa:	d138      	bne.n	801a26e <__gethex+0xaa>
 801a1fc:	49a7      	ldr	r1, [pc, #668]	; (801a49c <__gethex+0x2d8>)
 801a1fe:	2201      	movs	r2, #1
 801a200:	4640      	mov	r0, r8
 801a202:	f7fe fff3 	bl	80191ec <strncmp>
 801a206:	4606      	mov	r6, r0
 801a208:	2800      	cmp	r0, #0
 801a20a:	d169      	bne.n	801a2e0 <__gethex+0x11c>
 801a20c:	f898 0001 	ldrb.w	r0, [r8, #1]
 801a210:	465d      	mov	r5, fp
 801a212:	f7ff ffc1 	bl	801a198 <__hexdig_fun>
 801a216:	2800      	cmp	r0, #0
 801a218:	d064      	beq.n	801a2e4 <__gethex+0x120>
 801a21a:	465a      	mov	r2, fp
 801a21c:	7810      	ldrb	r0, [r2, #0]
 801a21e:	2830      	cmp	r0, #48	; 0x30
 801a220:	4690      	mov	r8, r2
 801a222:	f102 0201 	add.w	r2, r2, #1
 801a226:	d0f9      	beq.n	801a21c <__gethex+0x58>
 801a228:	f7ff ffb6 	bl	801a198 <__hexdig_fun>
 801a22c:	2301      	movs	r3, #1
 801a22e:	fab0 f480 	clz	r4, r0
 801a232:	0964      	lsrs	r4, r4, #5
 801a234:	465e      	mov	r6, fp
 801a236:	9301      	str	r3, [sp, #4]
 801a238:	4642      	mov	r2, r8
 801a23a:	4615      	mov	r5, r2
 801a23c:	3201      	adds	r2, #1
 801a23e:	7828      	ldrb	r0, [r5, #0]
 801a240:	f7ff ffaa 	bl	801a198 <__hexdig_fun>
 801a244:	2800      	cmp	r0, #0
 801a246:	d1f8      	bne.n	801a23a <__gethex+0x76>
 801a248:	4994      	ldr	r1, [pc, #592]	; (801a49c <__gethex+0x2d8>)
 801a24a:	2201      	movs	r2, #1
 801a24c:	4628      	mov	r0, r5
 801a24e:	f7fe ffcd 	bl	80191ec <strncmp>
 801a252:	b978      	cbnz	r0, 801a274 <__gethex+0xb0>
 801a254:	b946      	cbnz	r6, 801a268 <__gethex+0xa4>
 801a256:	1c6e      	adds	r6, r5, #1
 801a258:	4632      	mov	r2, r6
 801a25a:	4615      	mov	r5, r2
 801a25c:	3201      	adds	r2, #1
 801a25e:	7828      	ldrb	r0, [r5, #0]
 801a260:	f7ff ff9a 	bl	801a198 <__hexdig_fun>
 801a264:	2800      	cmp	r0, #0
 801a266:	d1f8      	bne.n	801a25a <__gethex+0x96>
 801a268:	1b73      	subs	r3, r6, r5
 801a26a:	009e      	lsls	r6, r3, #2
 801a26c:	e004      	b.n	801a278 <__gethex+0xb4>
 801a26e:	2400      	movs	r4, #0
 801a270:	4626      	mov	r6, r4
 801a272:	e7e1      	b.n	801a238 <__gethex+0x74>
 801a274:	2e00      	cmp	r6, #0
 801a276:	d1f7      	bne.n	801a268 <__gethex+0xa4>
 801a278:	782b      	ldrb	r3, [r5, #0]
 801a27a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a27e:	2b50      	cmp	r3, #80	; 0x50
 801a280:	d13d      	bne.n	801a2fe <__gethex+0x13a>
 801a282:	786b      	ldrb	r3, [r5, #1]
 801a284:	2b2b      	cmp	r3, #43	; 0x2b
 801a286:	d02f      	beq.n	801a2e8 <__gethex+0x124>
 801a288:	2b2d      	cmp	r3, #45	; 0x2d
 801a28a:	d031      	beq.n	801a2f0 <__gethex+0x12c>
 801a28c:	1c69      	adds	r1, r5, #1
 801a28e:	f04f 0b00 	mov.w	fp, #0
 801a292:	7808      	ldrb	r0, [r1, #0]
 801a294:	f7ff ff80 	bl	801a198 <__hexdig_fun>
 801a298:	1e42      	subs	r2, r0, #1
 801a29a:	b2d2      	uxtb	r2, r2
 801a29c:	2a18      	cmp	r2, #24
 801a29e:	d82e      	bhi.n	801a2fe <__gethex+0x13a>
 801a2a0:	f1a0 0210 	sub.w	r2, r0, #16
 801a2a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801a2a8:	f7ff ff76 	bl	801a198 <__hexdig_fun>
 801a2ac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801a2b0:	fa5f fc8c 	uxtb.w	ip, ip
 801a2b4:	f1bc 0f18 	cmp.w	ip, #24
 801a2b8:	d91d      	bls.n	801a2f6 <__gethex+0x132>
 801a2ba:	f1bb 0f00 	cmp.w	fp, #0
 801a2be:	d000      	beq.n	801a2c2 <__gethex+0xfe>
 801a2c0:	4252      	negs	r2, r2
 801a2c2:	4416      	add	r6, r2
 801a2c4:	f8ca 1000 	str.w	r1, [sl]
 801a2c8:	b1dc      	cbz	r4, 801a302 <__gethex+0x13e>
 801a2ca:	9b01      	ldr	r3, [sp, #4]
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	bf14      	ite	ne
 801a2d0:	f04f 0800 	movne.w	r8, #0
 801a2d4:	f04f 0806 	moveq.w	r8, #6
 801a2d8:	4640      	mov	r0, r8
 801a2da:	b005      	add	sp, #20
 801a2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2e0:	4645      	mov	r5, r8
 801a2e2:	4626      	mov	r6, r4
 801a2e4:	2401      	movs	r4, #1
 801a2e6:	e7c7      	b.n	801a278 <__gethex+0xb4>
 801a2e8:	f04f 0b00 	mov.w	fp, #0
 801a2ec:	1ca9      	adds	r1, r5, #2
 801a2ee:	e7d0      	b.n	801a292 <__gethex+0xce>
 801a2f0:	f04f 0b01 	mov.w	fp, #1
 801a2f4:	e7fa      	b.n	801a2ec <__gethex+0x128>
 801a2f6:	230a      	movs	r3, #10
 801a2f8:	fb03 0002 	mla	r0, r3, r2, r0
 801a2fc:	e7d0      	b.n	801a2a0 <__gethex+0xdc>
 801a2fe:	4629      	mov	r1, r5
 801a300:	e7e0      	b.n	801a2c4 <__gethex+0x100>
 801a302:	eba5 0308 	sub.w	r3, r5, r8
 801a306:	3b01      	subs	r3, #1
 801a308:	4621      	mov	r1, r4
 801a30a:	2b07      	cmp	r3, #7
 801a30c:	dc0a      	bgt.n	801a324 <__gethex+0x160>
 801a30e:	4648      	mov	r0, r9
 801a310:	f000 fd14 	bl	801ad3c <_Balloc>
 801a314:	4604      	mov	r4, r0
 801a316:	b940      	cbnz	r0, 801a32a <__gethex+0x166>
 801a318:	4b61      	ldr	r3, [pc, #388]	; (801a4a0 <__gethex+0x2dc>)
 801a31a:	4602      	mov	r2, r0
 801a31c:	21e4      	movs	r1, #228	; 0xe4
 801a31e:	4861      	ldr	r0, [pc, #388]	; (801a4a4 <__gethex+0x2e0>)
 801a320:	f001 faa8 	bl	801b874 <__assert_func>
 801a324:	3101      	adds	r1, #1
 801a326:	105b      	asrs	r3, r3, #1
 801a328:	e7ef      	b.n	801a30a <__gethex+0x146>
 801a32a:	f100 0a14 	add.w	sl, r0, #20
 801a32e:	2300      	movs	r3, #0
 801a330:	495a      	ldr	r1, [pc, #360]	; (801a49c <__gethex+0x2d8>)
 801a332:	f8cd a004 	str.w	sl, [sp, #4]
 801a336:	469b      	mov	fp, r3
 801a338:	45a8      	cmp	r8, r5
 801a33a:	d342      	bcc.n	801a3c2 <__gethex+0x1fe>
 801a33c:	9801      	ldr	r0, [sp, #4]
 801a33e:	f840 bb04 	str.w	fp, [r0], #4
 801a342:	eba0 000a 	sub.w	r0, r0, sl
 801a346:	1080      	asrs	r0, r0, #2
 801a348:	6120      	str	r0, [r4, #16]
 801a34a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801a34e:	4658      	mov	r0, fp
 801a350:	f000 fde6 	bl	801af20 <__hi0bits>
 801a354:	683d      	ldr	r5, [r7, #0]
 801a356:	eba8 0000 	sub.w	r0, r8, r0
 801a35a:	42a8      	cmp	r0, r5
 801a35c:	dd59      	ble.n	801a412 <__gethex+0x24e>
 801a35e:	eba0 0805 	sub.w	r8, r0, r5
 801a362:	4641      	mov	r1, r8
 801a364:	4620      	mov	r0, r4
 801a366:	f001 f975 	bl	801b654 <__any_on>
 801a36a:	4683      	mov	fp, r0
 801a36c:	b1b8      	cbz	r0, 801a39e <__gethex+0x1da>
 801a36e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801a372:	1159      	asrs	r1, r3, #5
 801a374:	f003 021f 	and.w	r2, r3, #31
 801a378:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801a37c:	f04f 0b01 	mov.w	fp, #1
 801a380:	fa0b f202 	lsl.w	r2, fp, r2
 801a384:	420a      	tst	r2, r1
 801a386:	d00a      	beq.n	801a39e <__gethex+0x1da>
 801a388:	455b      	cmp	r3, fp
 801a38a:	dd06      	ble.n	801a39a <__gethex+0x1d6>
 801a38c:	f1a8 0102 	sub.w	r1, r8, #2
 801a390:	4620      	mov	r0, r4
 801a392:	f001 f95f 	bl	801b654 <__any_on>
 801a396:	2800      	cmp	r0, #0
 801a398:	d138      	bne.n	801a40c <__gethex+0x248>
 801a39a:	f04f 0b02 	mov.w	fp, #2
 801a39e:	4641      	mov	r1, r8
 801a3a0:	4620      	mov	r0, r4
 801a3a2:	f7ff fea7 	bl	801a0f4 <rshift>
 801a3a6:	4446      	add	r6, r8
 801a3a8:	68bb      	ldr	r3, [r7, #8]
 801a3aa:	42b3      	cmp	r3, r6
 801a3ac:	da41      	bge.n	801a432 <__gethex+0x26e>
 801a3ae:	4621      	mov	r1, r4
 801a3b0:	4648      	mov	r0, r9
 801a3b2:	f000 fd03 	bl	801adbc <_Bfree>
 801a3b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a3b8:	2300      	movs	r3, #0
 801a3ba:	6013      	str	r3, [r2, #0]
 801a3bc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801a3c0:	e78a      	b.n	801a2d8 <__gethex+0x114>
 801a3c2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801a3c6:	2a2e      	cmp	r2, #46	; 0x2e
 801a3c8:	d014      	beq.n	801a3f4 <__gethex+0x230>
 801a3ca:	2b20      	cmp	r3, #32
 801a3cc:	d106      	bne.n	801a3dc <__gethex+0x218>
 801a3ce:	9b01      	ldr	r3, [sp, #4]
 801a3d0:	f843 bb04 	str.w	fp, [r3], #4
 801a3d4:	f04f 0b00 	mov.w	fp, #0
 801a3d8:	9301      	str	r3, [sp, #4]
 801a3da:	465b      	mov	r3, fp
 801a3dc:	7828      	ldrb	r0, [r5, #0]
 801a3de:	9303      	str	r3, [sp, #12]
 801a3e0:	f7ff feda 	bl	801a198 <__hexdig_fun>
 801a3e4:	9b03      	ldr	r3, [sp, #12]
 801a3e6:	f000 000f 	and.w	r0, r0, #15
 801a3ea:	4098      	lsls	r0, r3
 801a3ec:	ea4b 0b00 	orr.w	fp, fp, r0
 801a3f0:	3304      	adds	r3, #4
 801a3f2:	e7a1      	b.n	801a338 <__gethex+0x174>
 801a3f4:	45a8      	cmp	r8, r5
 801a3f6:	d8e8      	bhi.n	801a3ca <__gethex+0x206>
 801a3f8:	2201      	movs	r2, #1
 801a3fa:	4628      	mov	r0, r5
 801a3fc:	9303      	str	r3, [sp, #12]
 801a3fe:	f7fe fef5 	bl	80191ec <strncmp>
 801a402:	4926      	ldr	r1, [pc, #152]	; (801a49c <__gethex+0x2d8>)
 801a404:	9b03      	ldr	r3, [sp, #12]
 801a406:	2800      	cmp	r0, #0
 801a408:	d1df      	bne.n	801a3ca <__gethex+0x206>
 801a40a:	e795      	b.n	801a338 <__gethex+0x174>
 801a40c:	f04f 0b03 	mov.w	fp, #3
 801a410:	e7c5      	b.n	801a39e <__gethex+0x1da>
 801a412:	da0b      	bge.n	801a42c <__gethex+0x268>
 801a414:	eba5 0800 	sub.w	r8, r5, r0
 801a418:	4621      	mov	r1, r4
 801a41a:	4642      	mov	r2, r8
 801a41c:	4648      	mov	r0, r9
 801a41e:	f000 fee7 	bl	801b1f0 <__lshift>
 801a422:	eba6 0608 	sub.w	r6, r6, r8
 801a426:	4604      	mov	r4, r0
 801a428:	f100 0a14 	add.w	sl, r0, #20
 801a42c:	f04f 0b00 	mov.w	fp, #0
 801a430:	e7ba      	b.n	801a3a8 <__gethex+0x1e4>
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	42b3      	cmp	r3, r6
 801a436:	dd73      	ble.n	801a520 <__gethex+0x35c>
 801a438:	1b9e      	subs	r6, r3, r6
 801a43a:	42b5      	cmp	r5, r6
 801a43c:	dc34      	bgt.n	801a4a8 <__gethex+0x2e4>
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	2b02      	cmp	r3, #2
 801a442:	d023      	beq.n	801a48c <__gethex+0x2c8>
 801a444:	2b03      	cmp	r3, #3
 801a446:	d025      	beq.n	801a494 <__gethex+0x2d0>
 801a448:	2b01      	cmp	r3, #1
 801a44a:	d115      	bne.n	801a478 <__gethex+0x2b4>
 801a44c:	42b5      	cmp	r5, r6
 801a44e:	d113      	bne.n	801a478 <__gethex+0x2b4>
 801a450:	2d01      	cmp	r5, #1
 801a452:	d10b      	bne.n	801a46c <__gethex+0x2a8>
 801a454:	9a02      	ldr	r2, [sp, #8]
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	6013      	str	r3, [r2, #0]
 801a45a:	2301      	movs	r3, #1
 801a45c:	6123      	str	r3, [r4, #16]
 801a45e:	f8ca 3000 	str.w	r3, [sl]
 801a462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a464:	f04f 0862 	mov.w	r8, #98	; 0x62
 801a468:	601c      	str	r4, [r3, #0]
 801a46a:	e735      	b.n	801a2d8 <__gethex+0x114>
 801a46c:	1e69      	subs	r1, r5, #1
 801a46e:	4620      	mov	r0, r4
 801a470:	f001 f8f0 	bl	801b654 <__any_on>
 801a474:	2800      	cmp	r0, #0
 801a476:	d1ed      	bne.n	801a454 <__gethex+0x290>
 801a478:	4621      	mov	r1, r4
 801a47a:	4648      	mov	r0, r9
 801a47c:	f000 fc9e 	bl	801adbc <_Bfree>
 801a480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a482:	2300      	movs	r3, #0
 801a484:	6013      	str	r3, [r2, #0]
 801a486:	f04f 0850 	mov.w	r8, #80	; 0x50
 801a48a:	e725      	b.n	801a2d8 <__gethex+0x114>
 801a48c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a48e:	2b00      	cmp	r3, #0
 801a490:	d1f2      	bne.n	801a478 <__gethex+0x2b4>
 801a492:	e7df      	b.n	801a454 <__gethex+0x290>
 801a494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a496:	2b00      	cmp	r3, #0
 801a498:	d1dc      	bne.n	801a454 <__gethex+0x290>
 801a49a:	e7ed      	b.n	801a478 <__gethex+0x2b4>
 801a49c:	0801ee4d 	.word	0x0801ee4d
 801a4a0:	0801f025 	.word	0x0801f025
 801a4a4:	0801f036 	.word	0x0801f036
 801a4a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 801a4ac:	f1bb 0f00 	cmp.w	fp, #0
 801a4b0:	d133      	bne.n	801a51a <__gethex+0x356>
 801a4b2:	f1b8 0f00 	cmp.w	r8, #0
 801a4b6:	d004      	beq.n	801a4c2 <__gethex+0x2fe>
 801a4b8:	4641      	mov	r1, r8
 801a4ba:	4620      	mov	r0, r4
 801a4bc:	f001 f8ca 	bl	801b654 <__any_on>
 801a4c0:	4683      	mov	fp, r0
 801a4c2:	ea4f 1268 	mov.w	r2, r8, asr #5
 801a4c6:	2301      	movs	r3, #1
 801a4c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801a4cc:	f008 081f 	and.w	r8, r8, #31
 801a4d0:	fa03 f308 	lsl.w	r3, r3, r8
 801a4d4:	4213      	tst	r3, r2
 801a4d6:	4631      	mov	r1, r6
 801a4d8:	4620      	mov	r0, r4
 801a4da:	bf18      	it	ne
 801a4dc:	f04b 0b02 	orrne.w	fp, fp, #2
 801a4e0:	1bad      	subs	r5, r5, r6
 801a4e2:	f7ff fe07 	bl	801a0f4 <rshift>
 801a4e6:	687e      	ldr	r6, [r7, #4]
 801a4e8:	f04f 0802 	mov.w	r8, #2
 801a4ec:	f1bb 0f00 	cmp.w	fp, #0
 801a4f0:	d04a      	beq.n	801a588 <__gethex+0x3c4>
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	2b02      	cmp	r3, #2
 801a4f6:	d016      	beq.n	801a526 <__gethex+0x362>
 801a4f8:	2b03      	cmp	r3, #3
 801a4fa:	d018      	beq.n	801a52e <__gethex+0x36a>
 801a4fc:	2b01      	cmp	r3, #1
 801a4fe:	d109      	bne.n	801a514 <__gethex+0x350>
 801a500:	f01b 0f02 	tst.w	fp, #2
 801a504:	d006      	beq.n	801a514 <__gethex+0x350>
 801a506:	f8da 3000 	ldr.w	r3, [sl]
 801a50a:	ea4b 0b03 	orr.w	fp, fp, r3
 801a50e:	f01b 0f01 	tst.w	fp, #1
 801a512:	d10f      	bne.n	801a534 <__gethex+0x370>
 801a514:	f048 0810 	orr.w	r8, r8, #16
 801a518:	e036      	b.n	801a588 <__gethex+0x3c4>
 801a51a:	f04f 0b01 	mov.w	fp, #1
 801a51e:	e7d0      	b.n	801a4c2 <__gethex+0x2fe>
 801a520:	f04f 0801 	mov.w	r8, #1
 801a524:	e7e2      	b.n	801a4ec <__gethex+0x328>
 801a526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a528:	f1c3 0301 	rsb	r3, r3, #1
 801a52c:	930f      	str	r3, [sp, #60]	; 0x3c
 801a52e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a530:	2b00      	cmp	r3, #0
 801a532:	d0ef      	beq.n	801a514 <__gethex+0x350>
 801a534:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801a538:	f104 0214 	add.w	r2, r4, #20
 801a53c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801a540:	9301      	str	r3, [sp, #4]
 801a542:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801a546:	2300      	movs	r3, #0
 801a548:	4694      	mov	ip, r2
 801a54a:	f852 1b04 	ldr.w	r1, [r2], #4
 801a54e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801a552:	d01e      	beq.n	801a592 <__gethex+0x3ce>
 801a554:	3101      	adds	r1, #1
 801a556:	f8cc 1000 	str.w	r1, [ip]
 801a55a:	f1b8 0f02 	cmp.w	r8, #2
 801a55e:	f104 0214 	add.w	r2, r4, #20
 801a562:	d13d      	bne.n	801a5e0 <__gethex+0x41c>
 801a564:	683b      	ldr	r3, [r7, #0]
 801a566:	3b01      	subs	r3, #1
 801a568:	42ab      	cmp	r3, r5
 801a56a:	d10b      	bne.n	801a584 <__gethex+0x3c0>
 801a56c:	1169      	asrs	r1, r5, #5
 801a56e:	2301      	movs	r3, #1
 801a570:	f005 051f 	and.w	r5, r5, #31
 801a574:	fa03 f505 	lsl.w	r5, r3, r5
 801a578:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a57c:	421d      	tst	r5, r3
 801a57e:	bf18      	it	ne
 801a580:	f04f 0801 	movne.w	r8, #1
 801a584:	f048 0820 	orr.w	r8, r8, #32
 801a588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a58a:	601c      	str	r4, [r3, #0]
 801a58c:	9b02      	ldr	r3, [sp, #8]
 801a58e:	601e      	str	r6, [r3, #0]
 801a590:	e6a2      	b.n	801a2d8 <__gethex+0x114>
 801a592:	4290      	cmp	r0, r2
 801a594:	f842 3c04 	str.w	r3, [r2, #-4]
 801a598:	d8d6      	bhi.n	801a548 <__gethex+0x384>
 801a59a:	68a2      	ldr	r2, [r4, #8]
 801a59c:	4593      	cmp	fp, r2
 801a59e:	db17      	blt.n	801a5d0 <__gethex+0x40c>
 801a5a0:	6861      	ldr	r1, [r4, #4]
 801a5a2:	4648      	mov	r0, r9
 801a5a4:	3101      	adds	r1, #1
 801a5a6:	f000 fbc9 	bl	801ad3c <_Balloc>
 801a5aa:	4682      	mov	sl, r0
 801a5ac:	b918      	cbnz	r0, 801a5b6 <__gethex+0x3f2>
 801a5ae:	4b1b      	ldr	r3, [pc, #108]	; (801a61c <__gethex+0x458>)
 801a5b0:	4602      	mov	r2, r0
 801a5b2:	2184      	movs	r1, #132	; 0x84
 801a5b4:	e6b3      	b.n	801a31e <__gethex+0x15a>
 801a5b6:	6922      	ldr	r2, [r4, #16]
 801a5b8:	3202      	adds	r2, #2
 801a5ba:	f104 010c 	add.w	r1, r4, #12
 801a5be:	0092      	lsls	r2, r2, #2
 801a5c0:	300c      	adds	r0, #12
 801a5c2:	f7fe feb3 	bl	801932c <memcpy>
 801a5c6:	4621      	mov	r1, r4
 801a5c8:	4648      	mov	r0, r9
 801a5ca:	f000 fbf7 	bl	801adbc <_Bfree>
 801a5ce:	4654      	mov	r4, sl
 801a5d0:	6922      	ldr	r2, [r4, #16]
 801a5d2:	1c51      	adds	r1, r2, #1
 801a5d4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a5d8:	6121      	str	r1, [r4, #16]
 801a5da:	2101      	movs	r1, #1
 801a5dc:	6151      	str	r1, [r2, #20]
 801a5de:	e7bc      	b.n	801a55a <__gethex+0x396>
 801a5e0:	6921      	ldr	r1, [r4, #16]
 801a5e2:	4559      	cmp	r1, fp
 801a5e4:	dd0b      	ble.n	801a5fe <__gethex+0x43a>
 801a5e6:	2101      	movs	r1, #1
 801a5e8:	4620      	mov	r0, r4
 801a5ea:	f7ff fd83 	bl	801a0f4 <rshift>
 801a5ee:	68bb      	ldr	r3, [r7, #8]
 801a5f0:	3601      	adds	r6, #1
 801a5f2:	42b3      	cmp	r3, r6
 801a5f4:	f6ff aedb 	blt.w	801a3ae <__gethex+0x1ea>
 801a5f8:	f04f 0801 	mov.w	r8, #1
 801a5fc:	e7c2      	b.n	801a584 <__gethex+0x3c0>
 801a5fe:	f015 051f 	ands.w	r5, r5, #31
 801a602:	d0f9      	beq.n	801a5f8 <__gethex+0x434>
 801a604:	9b01      	ldr	r3, [sp, #4]
 801a606:	441a      	add	r2, r3
 801a608:	f1c5 0520 	rsb	r5, r5, #32
 801a60c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801a610:	f000 fc86 	bl	801af20 <__hi0bits>
 801a614:	42a8      	cmp	r0, r5
 801a616:	dbe6      	blt.n	801a5e6 <__gethex+0x422>
 801a618:	e7ee      	b.n	801a5f8 <__gethex+0x434>
 801a61a:	bf00      	nop
 801a61c:	0801f025 	.word	0x0801f025

0801a620 <L_shift>:
 801a620:	f1c2 0208 	rsb	r2, r2, #8
 801a624:	0092      	lsls	r2, r2, #2
 801a626:	b570      	push	{r4, r5, r6, lr}
 801a628:	f1c2 0620 	rsb	r6, r2, #32
 801a62c:	6843      	ldr	r3, [r0, #4]
 801a62e:	6804      	ldr	r4, [r0, #0]
 801a630:	fa03 f506 	lsl.w	r5, r3, r6
 801a634:	432c      	orrs	r4, r5
 801a636:	40d3      	lsrs	r3, r2
 801a638:	6004      	str	r4, [r0, #0]
 801a63a:	f840 3f04 	str.w	r3, [r0, #4]!
 801a63e:	4288      	cmp	r0, r1
 801a640:	d3f4      	bcc.n	801a62c <L_shift+0xc>
 801a642:	bd70      	pop	{r4, r5, r6, pc}

0801a644 <__match>:
 801a644:	b530      	push	{r4, r5, lr}
 801a646:	6803      	ldr	r3, [r0, #0]
 801a648:	3301      	adds	r3, #1
 801a64a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a64e:	b914      	cbnz	r4, 801a656 <__match+0x12>
 801a650:	6003      	str	r3, [r0, #0]
 801a652:	2001      	movs	r0, #1
 801a654:	bd30      	pop	{r4, r5, pc}
 801a656:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a65a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801a65e:	2d19      	cmp	r5, #25
 801a660:	bf98      	it	ls
 801a662:	3220      	addls	r2, #32
 801a664:	42a2      	cmp	r2, r4
 801a666:	d0f0      	beq.n	801a64a <__match+0x6>
 801a668:	2000      	movs	r0, #0
 801a66a:	e7f3      	b.n	801a654 <__match+0x10>

0801a66c <__hexnan>:
 801a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a670:	680b      	ldr	r3, [r1, #0]
 801a672:	6801      	ldr	r1, [r0, #0]
 801a674:	115e      	asrs	r6, r3, #5
 801a676:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a67a:	f013 031f 	ands.w	r3, r3, #31
 801a67e:	b087      	sub	sp, #28
 801a680:	bf18      	it	ne
 801a682:	3604      	addne	r6, #4
 801a684:	2500      	movs	r5, #0
 801a686:	1f37      	subs	r7, r6, #4
 801a688:	4682      	mov	sl, r0
 801a68a:	4690      	mov	r8, r2
 801a68c:	9301      	str	r3, [sp, #4]
 801a68e:	f846 5c04 	str.w	r5, [r6, #-4]
 801a692:	46b9      	mov	r9, r7
 801a694:	463c      	mov	r4, r7
 801a696:	9502      	str	r5, [sp, #8]
 801a698:	46ab      	mov	fp, r5
 801a69a:	784a      	ldrb	r2, [r1, #1]
 801a69c:	1c4b      	adds	r3, r1, #1
 801a69e:	9303      	str	r3, [sp, #12]
 801a6a0:	b342      	cbz	r2, 801a6f4 <__hexnan+0x88>
 801a6a2:	4610      	mov	r0, r2
 801a6a4:	9105      	str	r1, [sp, #20]
 801a6a6:	9204      	str	r2, [sp, #16]
 801a6a8:	f7ff fd76 	bl	801a198 <__hexdig_fun>
 801a6ac:	2800      	cmp	r0, #0
 801a6ae:	d14f      	bne.n	801a750 <__hexnan+0xe4>
 801a6b0:	9a04      	ldr	r2, [sp, #16]
 801a6b2:	9905      	ldr	r1, [sp, #20]
 801a6b4:	2a20      	cmp	r2, #32
 801a6b6:	d818      	bhi.n	801a6ea <__hexnan+0x7e>
 801a6b8:	9b02      	ldr	r3, [sp, #8]
 801a6ba:	459b      	cmp	fp, r3
 801a6bc:	dd13      	ble.n	801a6e6 <__hexnan+0x7a>
 801a6be:	454c      	cmp	r4, r9
 801a6c0:	d206      	bcs.n	801a6d0 <__hexnan+0x64>
 801a6c2:	2d07      	cmp	r5, #7
 801a6c4:	dc04      	bgt.n	801a6d0 <__hexnan+0x64>
 801a6c6:	462a      	mov	r2, r5
 801a6c8:	4649      	mov	r1, r9
 801a6ca:	4620      	mov	r0, r4
 801a6cc:	f7ff ffa8 	bl	801a620 <L_shift>
 801a6d0:	4544      	cmp	r4, r8
 801a6d2:	d950      	bls.n	801a776 <__hexnan+0x10a>
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	f1a4 0904 	sub.w	r9, r4, #4
 801a6da:	f844 3c04 	str.w	r3, [r4, #-4]
 801a6de:	f8cd b008 	str.w	fp, [sp, #8]
 801a6e2:	464c      	mov	r4, r9
 801a6e4:	461d      	mov	r5, r3
 801a6e6:	9903      	ldr	r1, [sp, #12]
 801a6e8:	e7d7      	b.n	801a69a <__hexnan+0x2e>
 801a6ea:	2a29      	cmp	r2, #41	; 0x29
 801a6ec:	d155      	bne.n	801a79a <__hexnan+0x12e>
 801a6ee:	3102      	adds	r1, #2
 801a6f0:	f8ca 1000 	str.w	r1, [sl]
 801a6f4:	f1bb 0f00 	cmp.w	fp, #0
 801a6f8:	d04f      	beq.n	801a79a <__hexnan+0x12e>
 801a6fa:	454c      	cmp	r4, r9
 801a6fc:	d206      	bcs.n	801a70c <__hexnan+0xa0>
 801a6fe:	2d07      	cmp	r5, #7
 801a700:	dc04      	bgt.n	801a70c <__hexnan+0xa0>
 801a702:	462a      	mov	r2, r5
 801a704:	4649      	mov	r1, r9
 801a706:	4620      	mov	r0, r4
 801a708:	f7ff ff8a 	bl	801a620 <L_shift>
 801a70c:	4544      	cmp	r4, r8
 801a70e:	d934      	bls.n	801a77a <__hexnan+0x10e>
 801a710:	f1a8 0204 	sub.w	r2, r8, #4
 801a714:	4623      	mov	r3, r4
 801a716:	f853 1b04 	ldr.w	r1, [r3], #4
 801a71a:	f842 1f04 	str.w	r1, [r2, #4]!
 801a71e:	429f      	cmp	r7, r3
 801a720:	d2f9      	bcs.n	801a716 <__hexnan+0xaa>
 801a722:	1b3b      	subs	r3, r7, r4
 801a724:	f023 0303 	bic.w	r3, r3, #3
 801a728:	3304      	adds	r3, #4
 801a72a:	3e03      	subs	r6, #3
 801a72c:	3401      	adds	r4, #1
 801a72e:	42a6      	cmp	r6, r4
 801a730:	bf38      	it	cc
 801a732:	2304      	movcc	r3, #4
 801a734:	4443      	add	r3, r8
 801a736:	2200      	movs	r2, #0
 801a738:	f843 2b04 	str.w	r2, [r3], #4
 801a73c:	429f      	cmp	r7, r3
 801a73e:	d2fb      	bcs.n	801a738 <__hexnan+0xcc>
 801a740:	683b      	ldr	r3, [r7, #0]
 801a742:	b91b      	cbnz	r3, 801a74c <__hexnan+0xe0>
 801a744:	4547      	cmp	r7, r8
 801a746:	d126      	bne.n	801a796 <__hexnan+0x12a>
 801a748:	2301      	movs	r3, #1
 801a74a:	603b      	str	r3, [r7, #0]
 801a74c:	2005      	movs	r0, #5
 801a74e:	e025      	b.n	801a79c <__hexnan+0x130>
 801a750:	3501      	adds	r5, #1
 801a752:	2d08      	cmp	r5, #8
 801a754:	f10b 0b01 	add.w	fp, fp, #1
 801a758:	dd06      	ble.n	801a768 <__hexnan+0xfc>
 801a75a:	4544      	cmp	r4, r8
 801a75c:	d9c3      	bls.n	801a6e6 <__hexnan+0x7a>
 801a75e:	2300      	movs	r3, #0
 801a760:	f844 3c04 	str.w	r3, [r4, #-4]
 801a764:	2501      	movs	r5, #1
 801a766:	3c04      	subs	r4, #4
 801a768:	6822      	ldr	r2, [r4, #0]
 801a76a:	f000 000f 	and.w	r0, r0, #15
 801a76e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801a772:	6020      	str	r0, [r4, #0]
 801a774:	e7b7      	b.n	801a6e6 <__hexnan+0x7a>
 801a776:	2508      	movs	r5, #8
 801a778:	e7b5      	b.n	801a6e6 <__hexnan+0x7a>
 801a77a:	9b01      	ldr	r3, [sp, #4]
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d0df      	beq.n	801a740 <__hexnan+0xd4>
 801a780:	f1c3 0320 	rsb	r3, r3, #32
 801a784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a788:	40da      	lsrs	r2, r3
 801a78a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801a78e:	4013      	ands	r3, r2
 801a790:	f846 3c04 	str.w	r3, [r6, #-4]
 801a794:	e7d4      	b.n	801a740 <__hexnan+0xd4>
 801a796:	3f04      	subs	r7, #4
 801a798:	e7d2      	b.n	801a740 <__hexnan+0xd4>
 801a79a:	2004      	movs	r0, #4
 801a79c:	b007      	add	sp, #28
 801a79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a7a2 <__ssputs_r>:
 801a7a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7a6:	688e      	ldr	r6, [r1, #8]
 801a7a8:	461f      	mov	r7, r3
 801a7aa:	42be      	cmp	r6, r7
 801a7ac:	680b      	ldr	r3, [r1, #0]
 801a7ae:	4682      	mov	sl, r0
 801a7b0:	460c      	mov	r4, r1
 801a7b2:	4690      	mov	r8, r2
 801a7b4:	d82c      	bhi.n	801a810 <__ssputs_r+0x6e>
 801a7b6:	898a      	ldrh	r2, [r1, #12]
 801a7b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a7bc:	d026      	beq.n	801a80c <__ssputs_r+0x6a>
 801a7be:	6965      	ldr	r5, [r4, #20]
 801a7c0:	6909      	ldr	r1, [r1, #16]
 801a7c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a7c6:	eba3 0901 	sub.w	r9, r3, r1
 801a7ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a7ce:	1c7b      	adds	r3, r7, #1
 801a7d0:	444b      	add	r3, r9
 801a7d2:	106d      	asrs	r5, r5, #1
 801a7d4:	429d      	cmp	r5, r3
 801a7d6:	bf38      	it	cc
 801a7d8:	461d      	movcc	r5, r3
 801a7da:	0553      	lsls	r3, r2, #21
 801a7dc:	d527      	bpl.n	801a82e <__ssputs_r+0x8c>
 801a7de:	4629      	mov	r1, r5
 801a7e0:	f000 f960 	bl	801aaa4 <_malloc_r>
 801a7e4:	4606      	mov	r6, r0
 801a7e6:	b360      	cbz	r0, 801a842 <__ssputs_r+0xa0>
 801a7e8:	6921      	ldr	r1, [r4, #16]
 801a7ea:	464a      	mov	r2, r9
 801a7ec:	f7fe fd9e 	bl	801932c <memcpy>
 801a7f0:	89a3      	ldrh	r3, [r4, #12]
 801a7f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a7f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a7fa:	81a3      	strh	r3, [r4, #12]
 801a7fc:	6126      	str	r6, [r4, #16]
 801a7fe:	6165      	str	r5, [r4, #20]
 801a800:	444e      	add	r6, r9
 801a802:	eba5 0509 	sub.w	r5, r5, r9
 801a806:	6026      	str	r6, [r4, #0]
 801a808:	60a5      	str	r5, [r4, #8]
 801a80a:	463e      	mov	r6, r7
 801a80c:	42be      	cmp	r6, r7
 801a80e:	d900      	bls.n	801a812 <__ssputs_r+0x70>
 801a810:	463e      	mov	r6, r7
 801a812:	6820      	ldr	r0, [r4, #0]
 801a814:	4632      	mov	r2, r6
 801a816:	4641      	mov	r1, r8
 801a818:	f000 ffbc 	bl	801b794 <memmove>
 801a81c:	68a3      	ldr	r3, [r4, #8]
 801a81e:	1b9b      	subs	r3, r3, r6
 801a820:	60a3      	str	r3, [r4, #8]
 801a822:	6823      	ldr	r3, [r4, #0]
 801a824:	4433      	add	r3, r6
 801a826:	6023      	str	r3, [r4, #0]
 801a828:	2000      	movs	r0, #0
 801a82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a82e:	462a      	mov	r2, r5
 801a830:	f000 ff74 	bl	801b71c <_realloc_r>
 801a834:	4606      	mov	r6, r0
 801a836:	2800      	cmp	r0, #0
 801a838:	d1e0      	bne.n	801a7fc <__ssputs_r+0x5a>
 801a83a:	6921      	ldr	r1, [r4, #16]
 801a83c:	4650      	mov	r0, sl
 801a83e:	f7ff fc0d 	bl	801a05c <_free_r>
 801a842:	230c      	movs	r3, #12
 801a844:	f8ca 3000 	str.w	r3, [sl]
 801a848:	89a3      	ldrh	r3, [r4, #12]
 801a84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a84e:	81a3      	strh	r3, [r4, #12]
 801a850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a854:	e7e9      	b.n	801a82a <__ssputs_r+0x88>
	...

0801a858 <_svfiprintf_r>:
 801a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a85c:	4698      	mov	r8, r3
 801a85e:	898b      	ldrh	r3, [r1, #12]
 801a860:	061b      	lsls	r3, r3, #24
 801a862:	b09d      	sub	sp, #116	; 0x74
 801a864:	4607      	mov	r7, r0
 801a866:	460d      	mov	r5, r1
 801a868:	4614      	mov	r4, r2
 801a86a:	d50e      	bpl.n	801a88a <_svfiprintf_r+0x32>
 801a86c:	690b      	ldr	r3, [r1, #16]
 801a86e:	b963      	cbnz	r3, 801a88a <_svfiprintf_r+0x32>
 801a870:	2140      	movs	r1, #64	; 0x40
 801a872:	f000 f917 	bl	801aaa4 <_malloc_r>
 801a876:	6028      	str	r0, [r5, #0]
 801a878:	6128      	str	r0, [r5, #16]
 801a87a:	b920      	cbnz	r0, 801a886 <_svfiprintf_r+0x2e>
 801a87c:	230c      	movs	r3, #12
 801a87e:	603b      	str	r3, [r7, #0]
 801a880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a884:	e0d0      	b.n	801aa28 <_svfiprintf_r+0x1d0>
 801a886:	2340      	movs	r3, #64	; 0x40
 801a888:	616b      	str	r3, [r5, #20]
 801a88a:	2300      	movs	r3, #0
 801a88c:	9309      	str	r3, [sp, #36]	; 0x24
 801a88e:	2320      	movs	r3, #32
 801a890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a894:	f8cd 800c 	str.w	r8, [sp, #12]
 801a898:	2330      	movs	r3, #48	; 0x30
 801a89a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801aa40 <_svfiprintf_r+0x1e8>
 801a89e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a8a2:	f04f 0901 	mov.w	r9, #1
 801a8a6:	4623      	mov	r3, r4
 801a8a8:	469a      	mov	sl, r3
 801a8aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a8ae:	b10a      	cbz	r2, 801a8b4 <_svfiprintf_r+0x5c>
 801a8b0:	2a25      	cmp	r2, #37	; 0x25
 801a8b2:	d1f9      	bne.n	801a8a8 <_svfiprintf_r+0x50>
 801a8b4:	ebba 0b04 	subs.w	fp, sl, r4
 801a8b8:	d00b      	beq.n	801a8d2 <_svfiprintf_r+0x7a>
 801a8ba:	465b      	mov	r3, fp
 801a8bc:	4622      	mov	r2, r4
 801a8be:	4629      	mov	r1, r5
 801a8c0:	4638      	mov	r0, r7
 801a8c2:	f7ff ff6e 	bl	801a7a2 <__ssputs_r>
 801a8c6:	3001      	adds	r0, #1
 801a8c8:	f000 80a9 	beq.w	801aa1e <_svfiprintf_r+0x1c6>
 801a8cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a8ce:	445a      	add	r2, fp
 801a8d0:	9209      	str	r2, [sp, #36]	; 0x24
 801a8d2:	f89a 3000 	ldrb.w	r3, [sl]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	f000 80a1 	beq.w	801aa1e <_svfiprintf_r+0x1c6>
 801a8dc:	2300      	movs	r3, #0
 801a8de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a8e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a8e6:	f10a 0a01 	add.w	sl, sl, #1
 801a8ea:	9304      	str	r3, [sp, #16]
 801a8ec:	9307      	str	r3, [sp, #28]
 801a8ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a8f2:	931a      	str	r3, [sp, #104]	; 0x68
 801a8f4:	4654      	mov	r4, sl
 801a8f6:	2205      	movs	r2, #5
 801a8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8fc:	4850      	ldr	r0, [pc, #320]	; (801aa40 <_svfiprintf_r+0x1e8>)
 801a8fe:	f7e5 fc67 	bl	80001d0 <memchr>
 801a902:	9a04      	ldr	r2, [sp, #16]
 801a904:	b9d8      	cbnz	r0, 801a93e <_svfiprintf_r+0xe6>
 801a906:	06d0      	lsls	r0, r2, #27
 801a908:	bf44      	itt	mi
 801a90a:	2320      	movmi	r3, #32
 801a90c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a910:	0711      	lsls	r1, r2, #28
 801a912:	bf44      	itt	mi
 801a914:	232b      	movmi	r3, #43	; 0x2b
 801a916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a91a:	f89a 3000 	ldrb.w	r3, [sl]
 801a91e:	2b2a      	cmp	r3, #42	; 0x2a
 801a920:	d015      	beq.n	801a94e <_svfiprintf_r+0xf6>
 801a922:	9a07      	ldr	r2, [sp, #28]
 801a924:	4654      	mov	r4, sl
 801a926:	2000      	movs	r0, #0
 801a928:	f04f 0c0a 	mov.w	ip, #10
 801a92c:	4621      	mov	r1, r4
 801a92e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a932:	3b30      	subs	r3, #48	; 0x30
 801a934:	2b09      	cmp	r3, #9
 801a936:	d94d      	bls.n	801a9d4 <_svfiprintf_r+0x17c>
 801a938:	b1b0      	cbz	r0, 801a968 <_svfiprintf_r+0x110>
 801a93a:	9207      	str	r2, [sp, #28]
 801a93c:	e014      	b.n	801a968 <_svfiprintf_r+0x110>
 801a93e:	eba0 0308 	sub.w	r3, r0, r8
 801a942:	fa09 f303 	lsl.w	r3, r9, r3
 801a946:	4313      	orrs	r3, r2
 801a948:	9304      	str	r3, [sp, #16]
 801a94a:	46a2      	mov	sl, r4
 801a94c:	e7d2      	b.n	801a8f4 <_svfiprintf_r+0x9c>
 801a94e:	9b03      	ldr	r3, [sp, #12]
 801a950:	1d19      	adds	r1, r3, #4
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	9103      	str	r1, [sp, #12]
 801a956:	2b00      	cmp	r3, #0
 801a958:	bfbb      	ittet	lt
 801a95a:	425b      	neglt	r3, r3
 801a95c:	f042 0202 	orrlt.w	r2, r2, #2
 801a960:	9307      	strge	r3, [sp, #28]
 801a962:	9307      	strlt	r3, [sp, #28]
 801a964:	bfb8      	it	lt
 801a966:	9204      	strlt	r2, [sp, #16]
 801a968:	7823      	ldrb	r3, [r4, #0]
 801a96a:	2b2e      	cmp	r3, #46	; 0x2e
 801a96c:	d10c      	bne.n	801a988 <_svfiprintf_r+0x130>
 801a96e:	7863      	ldrb	r3, [r4, #1]
 801a970:	2b2a      	cmp	r3, #42	; 0x2a
 801a972:	d134      	bne.n	801a9de <_svfiprintf_r+0x186>
 801a974:	9b03      	ldr	r3, [sp, #12]
 801a976:	1d1a      	adds	r2, r3, #4
 801a978:	681b      	ldr	r3, [r3, #0]
 801a97a:	9203      	str	r2, [sp, #12]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	bfb8      	it	lt
 801a980:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a984:	3402      	adds	r4, #2
 801a986:	9305      	str	r3, [sp, #20]
 801a988:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801aa50 <_svfiprintf_r+0x1f8>
 801a98c:	7821      	ldrb	r1, [r4, #0]
 801a98e:	2203      	movs	r2, #3
 801a990:	4650      	mov	r0, sl
 801a992:	f7e5 fc1d 	bl	80001d0 <memchr>
 801a996:	b138      	cbz	r0, 801a9a8 <_svfiprintf_r+0x150>
 801a998:	9b04      	ldr	r3, [sp, #16]
 801a99a:	eba0 000a 	sub.w	r0, r0, sl
 801a99e:	2240      	movs	r2, #64	; 0x40
 801a9a0:	4082      	lsls	r2, r0
 801a9a2:	4313      	orrs	r3, r2
 801a9a4:	3401      	adds	r4, #1
 801a9a6:	9304      	str	r3, [sp, #16]
 801a9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9ac:	4825      	ldr	r0, [pc, #148]	; (801aa44 <_svfiprintf_r+0x1ec>)
 801a9ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a9b2:	2206      	movs	r2, #6
 801a9b4:	f7e5 fc0c 	bl	80001d0 <memchr>
 801a9b8:	2800      	cmp	r0, #0
 801a9ba:	d038      	beq.n	801aa2e <_svfiprintf_r+0x1d6>
 801a9bc:	4b22      	ldr	r3, [pc, #136]	; (801aa48 <_svfiprintf_r+0x1f0>)
 801a9be:	bb1b      	cbnz	r3, 801aa08 <_svfiprintf_r+0x1b0>
 801a9c0:	9b03      	ldr	r3, [sp, #12]
 801a9c2:	3307      	adds	r3, #7
 801a9c4:	f023 0307 	bic.w	r3, r3, #7
 801a9c8:	3308      	adds	r3, #8
 801a9ca:	9303      	str	r3, [sp, #12]
 801a9cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9ce:	4433      	add	r3, r6
 801a9d0:	9309      	str	r3, [sp, #36]	; 0x24
 801a9d2:	e768      	b.n	801a8a6 <_svfiprintf_r+0x4e>
 801a9d4:	fb0c 3202 	mla	r2, ip, r2, r3
 801a9d8:	460c      	mov	r4, r1
 801a9da:	2001      	movs	r0, #1
 801a9dc:	e7a6      	b.n	801a92c <_svfiprintf_r+0xd4>
 801a9de:	2300      	movs	r3, #0
 801a9e0:	3401      	adds	r4, #1
 801a9e2:	9305      	str	r3, [sp, #20]
 801a9e4:	4619      	mov	r1, r3
 801a9e6:	f04f 0c0a 	mov.w	ip, #10
 801a9ea:	4620      	mov	r0, r4
 801a9ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a9f0:	3a30      	subs	r2, #48	; 0x30
 801a9f2:	2a09      	cmp	r2, #9
 801a9f4:	d903      	bls.n	801a9fe <_svfiprintf_r+0x1a6>
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d0c6      	beq.n	801a988 <_svfiprintf_r+0x130>
 801a9fa:	9105      	str	r1, [sp, #20]
 801a9fc:	e7c4      	b.n	801a988 <_svfiprintf_r+0x130>
 801a9fe:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa02:	4604      	mov	r4, r0
 801aa04:	2301      	movs	r3, #1
 801aa06:	e7f0      	b.n	801a9ea <_svfiprintf_r+0x192>
 801aa08:	ab03      	add	r3, sp, #12
 801aa0a:	9300      	str	r3, [sp, #0]
 801aa0c:	462a      	mov	r2, r5
 801aa0e:	4b0f      	ldr	r3, [pc, #60]	; (801aa4c <_svfiprintf_r+0x1f4>)
 801aa10:	a904      	add	r1, sp, #16
 801aa12:	4638      	mov	r0, r7
 801aa14:	f7fc fea4 	bl	8017760 <_printf_float>
 801aa18:	1c42      	adds	r2, r0, #1
 801aa1a:	4606      	mov	r6, r0
 801aa1c:	d1d6      	bne.n	801a9cc <_svfiprintf_r+0x174>
 801aa1e:	89ab      	ldrh	r3, [r5, #12]
 801aa20:	065b      	lsls	r3, r3, #25
 801aa22:	f53f af2d 	bmi.w	801a880 <_svfiprintf_r+0x28>
 801aa26:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa28:	b01d      	add	sp, #116	; 0x74
 801aa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa2e:	ab03      	add	r3, sp, #12
 801aa30:	9300      	str	r3, [sp, #0]
 801aa32:	462a      	mov	r2, r5
 801aa34:	4b05      	ldr	r3, [pc, #20]	; (801aa4c <_svfiprintf_r+0x1f4>)
 801aa36:	a904      	add	r1, sp, #16
 801aa38:	4638      	mov	r0, r7
 801aa3a:	f7fd f935 	bl	8017ca8 <_printf_i>
 801aa3e:	e7eb      	b.n	801aa18 <_svfiprintf_r+0x1c0>
 801aa40:	0801f096 	.word	0x0801f096
 801aa44:	0801f0a0 	.word	0x0801f0a0
 801aa48:	08017761 	.word	0x08017761
 801aa4c:	0801a7a3 	.word	0x0801a7a3
 801aa50:	0801f09c 	.word	0x0801f09c

0801aa54 <malloc>:
 801aa54:	4b02      	ldr	r3, [pc, #8]	; (801aa60 <malloc+0xc>)
 801aa56:	4601      	mov	r1, r0
 801aa58:	6818      	ldr	r0, [r3, #0]
 801aa5a:	f000 b823 	b.w	801aaa4 <_malloc_r>
 801aa5e:	bf00      	nop
 801aa60:	200001f0 	.word	0x200001f0

0801aa64 <sbrk_aligned>:
 801aa64:	b570      	push	{r4, r5, r6, lr}
 801aa66:	4e0e      	ldr	r6, [pc, #56]	; (801aaa0 <sbrk_aligned+0x3c>)
 801aa68:	460c      	mov	r4, r1
 801aa6a:	6831      	ldr	r1, [r6, #0]
 801aa6c:	4605      	mov	r5, r0
 801aa6e:	b911      	cbnz	r1, 801aa76 <sbrk_aligned+0x12>
 801aa70:	f000 fede 	bl	801b830 <_sbrk_r>
 801aa74:	6030      	str	r0, [r6, #0]
 801aa76:	4621      	mov	r1, r4
 801aa78:	4628      	mov	r0, r5
 801aa7a:	f000 fed9 	bl	801b830 <_sbrk_r>
 801aa7e:	1c43      	adds	r3, r0, #1
 801aa80:	d00a      	beq.n	801aa98 <sbrk_aligned+0x34>
 801aa82:	1cc4      	adds	r4, r0, #3
 801aa84:	f024 0403 	bic.w	r4, r4, #3
 801aa88:	42a0      	cmp	r0, r4
 801aa8a:	d007      	beq.n	801aa9c <sbrk_aligned+0x38>
 801aa8c:	1a21      	subs	r1, r4, r0
 801aa8e:	4628      	mov	r0, r5
 801aa90:	f000 fece 	bl	801b830 <_sbrk_r>
 801aa94:	3001      	adds	r0, #1
 801aa96:	d101      	bne.n	801aa9c <sbrk_aligned+0x38>
 801aa98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801aa9c:	4620      	mov	r0, r4
 801aa9e:	bd70      	pop	{r4, r5, r6, pc}
 801aaa0:	20008878 	.word	0x20008878

0801aaa4 <_malloc_r>:
 801aaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aaa8:	1ccd      	adds	r5, r1, #3
 801aaaa:	f025 0503 	bic.w	r5, r5, #3
 801aaae:	3508      	adds	r5, #8
 801aab0:	2d0c      	cmp	r5, #12
 801aab2:	bf38      	it	cc
 801aab4:	250c      	movcc	r5, #12
 801aab6:	2d00      	cmp	r5, #0
 801aab8:	4607      	mov	r7, r0
 801aaba:	db01      	blt.n	801aac0 <_malloc_r+0x1c>
 801aabc:	42a9      	cmp	r1, r5
 801aabe:	d905      	bls.n	801aacc <_malloc_r+0x28>
 801aac0:	230c      	movs	r3, #12
 801aac2:	603b      	str	r3, [r7, #0]
 801aac4:	2600      	movs	r6, #0
 801aac6:	4630      	mov	r0, r6
 801aac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aacc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801aba0 <_malloc_r+0xfc>
 801aad0:	f000 f928 	bl	801ad24 <__malloc_lock>
 801aad4:	f8d8 3000 	ldr.w	r3, [r8]
 801aad8:	461c      	mov	r4, r3
 801aada:	bb5c      	cbnz	r4, 801ab34 <_malloc_r+0x90>
 801aadc:	4629      	mov	r1, r5
 801aade:	4638      	mov	r0, r7
 801aae0:	f7ff ffc0 	bl	801aa64 <sbrk_aligned>
 801aae4:	1c43      	adds	r3, r0, #1
 801aae6:	4604      	mov	r4, r0
 801aae8:	d155      	bne.n	801ab96 <_malloc_r+0xf2>
 801aaea:	f8d8 4000 	ldr.w	r4, [r8]
 801aaee:	4626      	mov	r6, r4
 801aaf0:	2e00      	cmp	r6, #0
 801aaf2:	d145      	bne.n	801ab80 <_malloc_r+0xdc>
 801aaf4:	2c00      	cmp	r4, #0
 801aaf6:	d048      	beq.n	801ab8a <_malloc_r+0xe6>
 801aaf8:	6823      	ldr	r3, [r4, #0]
 801aafa:	4631      	mov	r1, r6
 801aafc:	4638      	mov	r0, r7
 801aafe:	eb04 0903 	add.w	r9, r4, r3
 801ab02:	f000 fe95 	bl	801b830 <_sbrk_r>
 801ab06:	4581      	cmp	r9, r0
 801ab08:	d13f      	bne.n	801ab8a <_malloc_r+0xe6>
 801ab0a:	6821      	ldr	r1, [r4, #0]
 801ab0c:	1a6d      	subs	r5, r5, r1
 801ab0e:	4629      	mov	r1, r5
 801ab10:	4638      	mov	r0, r7
 801ab12:	f7ff ffa7 	bl	801aa64 <sbrk_aligned>
 801ab16:	3001      	adds	r0, #1
 801ab18:	d037      	beq.n	801ab8a <_malloc_r+0xe6>
 801ab1a:	6823      	ldr	r3, [r4, #0]
 801ab1c:	442b      	add	r3, r5
 801ab1e:	6023      	str	r3, [r4, #0]
 801ab20:	f8d8 3000 	ldr.w	r3, [r8]
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d038      	beq.n	801ab9a <_malloc_r+0xf6>
 801ab28:	685a      	ldr	r2, [r3, #4]
 801ab2a:	42a2      	cmp	r2, r4
 801ab2c:	d12b      	bne.n	801ab86 <_malloc_r+0xe2>
 801ab2e:	2200      	movs	r2, #0
 801ab30:	605a      	str	r2, [r3, #4]
 801ab32:	e00f      	b.n	801ab54 <_malloc_r+0xb0>
 801ab34:	6822      	ldr	r2, [r4, #0]
 801ab36:	1b52      	subs	r2, r2, r5
 801ab38:	d41f      	bmi.n	801ab7a <_malloc_r+0xd6>
 801ab3a:	2a0b      	cmp	r2, #11
 801ab3c:	d917      	bls.n	801ab6e <_malloc_r+0xca>
 801ab3e:	1961      	adds	r1, r4, r5
 801ab40:	42a3      	cmp	r3, r4
 801ab42:	6025      	str	r5, [r4, #0]
 801ab44:	bf18      	it	ne
 801ab46:	6059      	strne	r1, [r3, #4]
 801ab48:	6863      	ldr	r3, [r4, #4]
 801ab4a:	bf08      	it	eq
 801ab4c:	f8c8 1000 	streq.w	r1, [r8]
 801ab50:	5162      	str	r2, [r4, r5]
 801ab52:	604b      	str	r3, [r1, #4]
 801ab54:	4638      	mov	r0, r7
 801ab56:	f104 060b 	add.w	r6, r4, #11
 801ab5a:	f000 f8e9 	bl	801ad30 <__malloc_unlock>
 801ab5e:	f026 0607 	bic.w	r6, r6, #7
 801ab62:	1d23      	adds	r3, r4, #4
 801ab64:	1af2      	subs	r2, r6, r3
 801ab66:	d0ae      	beq.n	801aac6 <_malloc_r+0x22>
 801ab68:	1b9b      	subs	r3, r3, r6
 801ab6a:	50a3      	str	r3, [r4, r2]
 801ab6c:	e7ab      	b.n	801aac6 <_malloc_r+0x22>
 801ab6e:	42a3      	cmp	r3, r4
 801ab70:	6862      	ldr	r2, [r4, #4]
 801ab72:	d1dd      	bne.n	801ab30 <_malloc_r+0x8c>
 801ab74:	f8c8 2000 	str.w	r2, [r8]
 801ab78:	e7ec      	b.n	801ab54 <_malloc_r+0xb0>
 801ab7a:	4623      	mov	r3, r4
 801ab7c:	6864      	ldr	r4, [r4, #4]
 801ab7e:	e7ac      	b.n	801aada <_malloc_r+0x36>
 801ab80:	4634      	mov	r4, r6
 801ab82:	6876      	ldr	r6, [r6, #4]
 801ab84:	e7b4      	b.n	801aaf0 <_malloc_r+0x4c>
 801ab86:	4613      	mov	r3, r2
 801ab88:	e7cc      	b.n	801ab24 <_malloc_r+0x80>
 801ab8a:	230c      	movs	r3, #12
 801ab8c:	603b      	str	r3, [r7, #0]
 801ab8e:	4638      	mov	r0, r7
 801ab90:	f000 f8ce 	bl	801ad30 <__malloc_unlock>
 801ab94:	e797      	b.n	801aac6 <_malloc_r+0x22>
 801ab96:	6025      	str	r5, [r4, #0]
 801ab98:	e7dc      	b.n	801ab54 <_malloc_r+0xb0>
 801ab9a:	605b      	str	r3, [r3, #4]
 801ab9c:	deff      	udf	#255	; 0xff
 801ab9e:	bf00      	nop
 801aba0:	20008874 	.word	0x20008874

0801aba4 <__ascii_mbtowc>:
 801aba4:	b082      	sub	sp, #8
 801aba6:	b901      	cbnz	r1, 801abaa <__ascii_mbtowc+0x6>
 801aba8:	a901      	add	r1, sp, #4
 801abaa:	b142      	cbz	r2, 801abbe <__ascii_mbtowc+0x1a>
 801abac:	b14b      	cbz	r3, 801abc2 <__ascii_mbtowc+0x1e>
 801abae:	7813      	ldrb	r3, [r2, #0]
 801abb0:	600b      	str	r3, [r1, #0]
 801abb2:	7812      	ldrb	r2, [r2, #0]
 801abb4:	1e10      	subs	r0, r2, #0
 801abb6:	bf18      	it	ne
 801abb8:	2001      	movne	r0, #1
 801abba:	b002      	add	sp, #8
 801abbc:	4770      	bx	lr
 801abbe:	4610      	mov	r0, r2
 801abc0:	e7fb      	b.n	801abba <__ascii_mbtowc+0x16>
 801abc2:	f06f 0001 	mvn.w	r0, #1
 801abc6:	e7f8      	b.n	801abba <__ascii_mbtowc+0x16>

0801abc8 <__sflush_r>:
 801abc8:	898a      	ldrh	r2, [r1, #12]
 801abca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abce:	4605      	mov	r5, r0
 801abd0:	0710      	lsls	r0, r2, #28
 801abd2:	460c      	mov	r4, r1
 801abd4:	d458      	bmi.n	801ac88 <__sflush_r+0xc0>
 801abd6:	684b      	ldr	r3, [r1, #4]
 801abd8:	2b00      	cmp	r3, #0
 801abda:	dc05      	bgt.n	801abe8 <__sflush_r+0x20>
 801abdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801abde:	2b00      	cmp	r3, #0
 801abe0:	dc02      	bgt.n	801abe8 <__sflush_r+0x20>
 801abe2:	2000      	movs	r0, #0
 801abe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801abea:	2e00      	cmp	r6, #0
 801abec:	d0f9      	beq.n	801abe2 <__sflush_r+0x1a>
 801abee:	2300      	movs	r3, #0
 801abf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801abf4:	682f      	ldr	r7, [r5, #0]
 801abf6:	6a21      	ldr	r1, [r4, #32]
 801abf8:	602b      	str	r3, [r5, #0]
 801abfa:	d032      	beq.n	801ac62 <__sflush_r+0x9a>
 801abfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801abfe:	89a3      	ldrh	r3, [r4, #12]
 801ac00:	075a      	lsls	r2, r3, #29
 801ac02:	d505      	bpl.n	801ac10 <__sflush_r+0x48>
 801ac04:	6863      	ldr	r3, [r4, #4]
 801ac06:	1ac0      	subs	r0, r0, r3
 801ac08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ac0a:	b10b      	cbz	r3, 801ac10 <__sflush_r+0x48>
 801ac0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ac0e:	1ac0      	subs	r0, r0, r3
 801ac10:	2300      	movs	r3, #0
 801ac12:	4602      	mov	r2, r0
 801ac14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ac16:	6a21      	ldr	r1, [r4, #32]
 801ac18:	4628      	mov	r0, r5
 801ac1a:	47b0      	blx	r6
 801ac1c:	1c43      	adds	r3, r0, #1
 801ac1e:	89a3      	ldrh	r3, [r4, #12]
 801ac20:	d106      	bne.n	801ac30 <__sflush_r+0x68>
 801ac22:	6829      	ldr	r1, [r5, #0]
 801ac24:	291d      	cmp	r1, #29
 801ac26:	d82b      	bhi.n	801ac80 <__sflush_r+0xb8>
 801ac28:	4a29      	ldr	r2, [pc, #164]	; (801acd0 <__sflush_r+0x108>)
 801ac2a:	410a      	asrs	r2, r1
 801ac2c:	07d6      	lsls	r6, r2, #31
 801ac2e:	d427      	bmi.n	801ac80 <__sflush_r+0xb8>
 801ac30:	2200      	movs	r2, #0
 801ac32:	6062      	str	r2, [r4, #4]
 801ac34:	04d9      	lsls	r1, r3, #19
 801ac36:	6922      	ldr	r2, [r4, #16]
 801ac38:	6022      	str	r2, [r4, #0]
 801ac3a:	d504      	bpl.n	801ac46 <__sflush_r+0x7e>
 801ac3c:	1c42      	adds	r2, r0, #1
 801ac3e:	d101      	bne.n	801ac44 <__sflush_r+0x7c>
 801ac40:	682b      	ldr	r3, [r5, #0]
 801ac42:	b903      	cbnz	r3, 801ac46 <__sflush_r+0x7e>
 801ac44:	6560      	str	r0, [r4, #84]	; 0x54
 801ac46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ac48:	602f      	str	r7, [r5, #0]
 801ac4a:	2900      	cmp	r1, #0
 801ac4c:	d0c9      	beq.n	801abe2 <__sflush_r+0x1a>
 801ac4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ac52:	4299      	cmp	r1, r3
 801ac54:	d002      	beq.n	801ac5c <__sflush_r+0x94>
 801ac56:	4628      	mov	r0, r5
 801ac58:	f7ff fa00 	bl	801a05c <_free_r>
 801ac5c:	2000      	movs	r0, #0
 801ac5e:	6360      	str	r0, [r4, #52]	; 0x34
 801ac60:	e7c0      	b.n	801abe4 <__sflush_r+0x1c>
 801ac62:	2301      	movs	r3, #1
 801ac64:	4628      	mov	r0, r5
 801ac66:	47b0      	blx	r6
 801ac68:	1c41      	adds	r1, r0, #1
 801ac6a:	d1c8      	bne.n	801abfe <__sflush_r+0x36>
 801ac6c:	682b      	ldr	r3, [r5, #0]
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d0c5      	beq.n	801abfe <__sflush_r+0x36>
 801ac72:	2b1d      	cmp	r3, #29
 801ac74:	d001      	beq.n	801ac7a <__sflush_r+0xb2>
 801ac76:	2b16      	cmp	r3, #22
 801ac78:	d101      	bne.n	801ac7e <__sflush_r+0xb6>
 801ac7a:	602f      	str	r7, [r5, #0]
 801ac7c:	e7b1      	b.n	801abe2 <__sflush_r+0x1a>
 801ac7e:	89a3      	ldrh	r3, [r4, #12]
 801ac80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ac84:	81a3      	strh	r3, [r4, #12]
 801ac86:	e7ad      	b.n	801abe4 <__sflush_r+0x1c>
 801ac88:	690f      	ldr	r7, [r1, #16]
 801ac8a:	2f00      	cmp	r7, #0
 801ac8c:	d0a9      	beq.n	801abe2 <__sflush_r+0x1a>
 801ac8e:	0793      	lsls	r3, r2, #30
 801ac90:	680e      	ldr	r6, [r1, #0]
 801ac92:	bf08      	it	eq
 801ac94:	694b      	ldreq	r3, [r1, #20]
 801ac96:	600f      	str	r7, [r1, #0]
 801ac98:	bf18      	it	ne
 801ac9a:	2300      	movne	r3, #0
 801ac9c:	eba6 0807 	sub.w	r8, r6, r7
 801aca0:	608b      	str	r3, [r1, #8]
 801aca2:	f1b8 0f00 	cmp.w	r8, #0
 801aca6:	dd9c      	ble.n	801abe2 <__sflush_r+0x1a>
 801aca8:	6a21      	ldr	r1, [r4, #32]
 801acaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801acac:	4643      	mov	r3, r8
 801acae:	463a      	mov	r2, r7
 801acb0:	4628      	mov	r0, r5
 801acb2:	47b0      	blx	r6
 801acb4:	2800      	cmp	r0, #0
 801acb6:	dc06      	bgt.n	801acc6 <__sflush_r+0xfe>
 801acb8:	89a3      	ldrh	r3, [r4, #12]
 801acba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801acbe:	81a3      	strh	r3, [r4, #12]
 801acc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801acc4:	e78e      	b.n	801abe4 <__sflush_r+0x1c>
 801acc6:	4407      	add	r7, r0
 801acc8:	eba8 0800 	sub.w	r8, r8, r0
 801accc:	e7e9      	b.n	801aca2 <__sflush_r+0xda>
 801acce:	bf00      	nop
 801acd0:	dfbffffe 	.word	0xdfbffffe

0801acd4 <_fflush_r>:
 801acd4:	b538      	push	{r3, r4, r5, lr}
 801acd6:	690b      	ldr	r3, [r1, #16]
 801acd8:	4605      	mov	r5, r0
 801acda:	460c      	mov	r4, r1
 801acdc:	b913      	cbnz	r3, 801ace4 <_fflush_r+0x10>
 801acde:	2500      	movs	r5, #0
 801ace0:	4628      	mov	r0, r5
 801ace2:	bd38      	pop	{r3, r4, r5, pc}
 801ace4:	b118      	cbz	r0, 801acee <_fflush_r+0x1a>
 801ace6:	6a03      	ldr	r3, [r0, #32]
 801ace8:	b90b      	cbnz	r3, 801acee <_fflush_r+0x1a>
 801acea:	f7fd fba9 	bl	8018440 <__sinit>
 801acee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d0f3      	beq.n	801acde <_fflush_r+0xa>
 801acf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801acf8:	07d0      	lsls	r0, r2, #31
 801acfa:	d404      	bmi.n	801ad06 <_fflush_r+0x32>
 801acfc:	0599      	lsls	r1, r3, #22
 801acfe:	d402      	bmi.n	801ad06 <_fflush_r+0x32>
 801ad00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad02:	f7fe fb11 	bl	8019328 <__retarget_lock_acquire_recursive>
 801ad06:	4628      	mov	r0, r5
 801ad08:	4621      	mov	r1, r4
 801ad0a:	f7ff ff5d 	bl	801abc8 <__sflush_r>
 801ad0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad10:	07da      	lsls	r2, r3, #31
 801ad12:	4605      	mov	r5, r0
 801ad14:	d4e4      	bmi.n	801ace0 <_fflush_r+0xc>
 801ad16:	89a3      	ldrh	r3, [r4, #12]
 801ad18:	059b      	lsls	r3, r3, #22
 801ad1a:	d4e1      	bmi.n	801ace0 <_fflush_r+0xc>
 801ad1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad1e:	f7fe fb04 	bl	801932a <__retarget_lock_release_recursive>
 801ad22:	e7dd      	b.n	801ace0 <_fflush_r+0xc>

0801ad24 <__malloc_lock>:
 801ad24:	4801      	ldr	r0, [pc, #4]	; (801ad2c <__malloc_lock+0x8>)
 801ad26:	f7fe baff 	b.w	8019328 <__retarget_lock_acquire_recursive>
 801ad2a:	bf00      	nop
 801ad2c:	20008870 	.word	0x20008870

0801ad30 <__malloc_unlock>:
 801ad30:	4801      	ldr	r0, [pc, #4]	; (801ad38 <__malloc_unlock+0x8>)
 801ad32:	f7fe bafa 	b.w	801932a <__retarget_lock_release_recursive>
 801ad36:	bf00      	nop
 801ad38:	20008870 	.word	0x20008870

0801ad3c <_Balloc>:
 801ad3c:	b570      	push	{r4, r5, r6, lr}
 801ad3e:	69c6      	ldr	r6, [r0, #28]
 801ad40:	4604      	mov	r4, r0
 801ad42:	460d      	mov	r5, r1
 801ad44:	b976      	cbnz	r6, 801ad64 <_Balloc+0x28>
 801ad46:	2010      	movs	r0, #16
 801ad48:	f7ff fe84 	bl	801aa54 <malloc>
 801ad4c:	4602      	mov	r2, r0
 801ad4e:	61e0      	str	r0, [r4, #28]
 801ad50:	b920      	cbnz	r0, 801ad5c <_Balloc+0x20>
 801ad52:	4b18      	ldr	r3, [pc, #96]	; (801adb4 <_Balloc+0x78>)
 801ad54:	4818      	ldr	r0, [pc, #96]	; (801adb8 <_Balloc+0x7c>)
 801ad56:	216b      	movs	r1, #107	; 0x6b
 801ad58:	f000 fd8c 	bl	801b874 <__assert_func>
 801ad5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ad60:	6006      	str	r6, [r0, #0]
 801ad62:	60c6      	str	r6, [r0, #12]
 801ad64:	69e6      	ldr	r6, [r4, #28]
 801ad66:	68f3      	ldr	r3, [r6, #12]
 801ad68:	b183      	cbz	r3, 801ad8c <_Balloc+0x50>
 801ad6a:	69e3      	ldr	r3, [r4, #28]
 801ad6c:	68db      	ldr	r3, [r3, #12]
 801ad6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ad72:	b9b8      	cbnz	r0, 801ada4 <_Balloc+0x68>
 801ad74:	2101      	movs	r1, #1
 801ad76:	fa01 f605 	lsl.w	r6, r1, r5
 801ad7a:	1d72      	adds	r2, r6, #5
 801ad7c:	0092      	lsls	r2, r2, #2
 801ad7e:	4620      	mov	r0, r4
 801ad80:	f000 fd96 	bl	801b8b0 <_calloc_r>
 801ad84:	b160      	cbz	r0, 801ada0 <_Balloc+0x64>
 801ad86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ad8a:	e00e      	b.n	801adaa <_Balloc+0x6e>
 801ad8c:	2221      	movs	r2, #33	; 0x21
 801ad8e:	2104      	movs	r1, #4
 801ad90:	4620      	mov	r0, r4
 801ad92:	f000 fd8d 	bl	801b8b0 <_calloc_r>
 801ad96:	69e3      	ldr	r3, [r4, #28]
 801ad98:	60f0      	str	r0, [r6, #12]
 801ad9a:	68db      	ldr	r3, [r3, #12]
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d1e4      	bne.n	801ad6a <_Balloc+0x2e>
 801ada0:	2000      	movs	r0, #0
 801ada2:	bd70      	pop	{r4, r5, r6, pc}
 801ada4:	6802      	ldr	r2, [r0, #0]
 801ada6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801adaa:	2300      	movs	r3, #0
 801adac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801adb0:	e7f7      	b.n	801ada2 <_Balloc+0x66>
 801adb2:	bf00      	nop
 801adb4:	0801efb6 	.word	0x0801efb6
 801adb8:	0801f0a7 	.word	0x0801f0a7

0801adbc <_Bfree>:
 801adbc:	b570      	push	{r4, r5, r6, lr}
 801adbe:	69c6      	ldr	r6, [r0, #28]
 801adc0:	4605      	mov	r5, r0
 801adc2:	460c      	mov	r4, r1
 801adc4:	b976      	cbnz	r6, 801ade4 <_Bfree+0x28>
 801adc6:	2010      	movs	r0, #16
 801adc8:	f7ff fe44 	bl	801aa54 <malloc>
 801adcc:	4602      	mov	r2, r0
 801adce:	61e8      	str	r0, [r5, #28]
 801add0:	b920      	cbnz	r0, 801addc <_Bfree+0x20>
 801add2:	4b09      	ldr	r3, [pc, #36]	; (801adf8 <_Bfree+0x3c>)
 801add4:	4809      	ldr	r0, [pc, #36]	; (801adfc <_Bfree+0x40>)
 801add6:	218f      	movs	r1, #143	; 0x8f
 801add8:	f000 fd4c 	bl	801b874 <__assert_func>
 801addc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ade0:	6006      	str	r6, [r0, #0]
 801ade2:	60c6      	str	r6, [r0, #12]
 801ade4:	b13c      	cbz	r4, 801adf6 <_Bfree+0x3a>
 801ade6:	69eb      	ldr	r3, [r5, #28]
 801ade8:	6862      	ldr	r2, [r4, #4]
 801adea:	68db      	ldr	r3, [r3, #12]
 801adec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801adf0:	6021      	str	r1, [r4, #0]
 801adf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801adf6:	bd70      	pop	{r4, r5, r6, pc}
 801adf8:	0801efb6 	.word	0x0801efb6
 801adfc:	0801f0a7 	.word	0x0801f0a7

0801ae00 <__multadd>:
 801ae00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae04:	690d      	ldr	r5, [r1, #16]
 801ae06:	4607      	mov	r7, r0
 801ae08:	460c      	mov	r4, r1
 801ae0a:	461e      	mov	r6, r3
 801ae0c:	f101 0c14 	add.w	ip, r1, #20
 801ae10:	2000      	movs	r0, #0
 801ae12:	f8dc 3000 	ldr.w	r3, [ip]
 801ae16:	b299      	uxth	r1, r3
 801ae18:	fb02 6101 	mla	r1, r2, r1, r6
 801ae1c:	0c1e      	lsrs	r6, r3, #16
 801ae1e:	0c0b      	lsrs	r3, r1, #16
 801ae20:	fb02 3306 	mla	r3, r2, r6, r3
 801ae24:	b289      	uxth	r1, r1
 801ae26:	3001      	adds	r0, #1
 801ae28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ae2c:	4285      	cmp	r5, r0
 801ae2e:	f84c 1b04 	str.w	r1, [ip], #4
 801ae32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ae36:	dcec      	bgt.n	801ae12 <__multadd+0x12>
 801ae38:	b30e      	cbz	r6, 801ae7e <__multadd+0x7e>
 801ae3a:	68a3      	ldr	r3, [r4, #8]
 801ae3c:	42ab      	cmp	r3, r5
 801ae3e:	dc19      	bgt.n	801ae74 <__multadd+0x74>
 801ae40:	6861      	ldr	r1, [r4, #4]
 801ae42:	4638      	mov	r0, r7
 801ae44:	3101      	adds	r1, #1
 801ae46:	f7ff ff79 	bl	801ad3c <_Balloc>
 801ae4a:	4680      	mov	r8, r0
 801ae4c:	b928      	cbnz	r0, 801ae5a <__multadd+0x5a>
 801ae4e:	4602      	mov	r2, r0
 801ae50:	4b0c      	ldr	r3, [pc, #48]	; (801ae84 <__multadd+0x84>)
 801ae52:	480d      	ldr	r0, [pc, #52]	; (801ae88 <__multadd+0x88>)
 801ae54:	21ba      	movs	r1, #186	; 0xba
 801ae56:	f000 fd0d 	bl	801b874 <__assert_func>
 801ae5a:	6922      	ldr	r2, [r4, #16]
 801ae5c:	3202      	adds	r2, #2
 801ae5e:	f104 010c 	add.w	r1, r4, #12
 801ae62:	0092      	lsls	r2, r2, #2
 801ae64:	300c      	adds	r0, #12
 801ae66:	f7fe fa61 	bl	801932c <memcpy>
 801ae6a:	4621      	mov	r1, r4
 801ae6c:	4638      	mov	r0, r7
 801ae6e:	f7ff ffa5 	bl	801adbc <_Bfree>
 801ae72:	4644      	mov	r4, r8
 801ae74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ae78:	3501      	adds	r5, #1
 801ae7a:	615e      	str	r6, [r3, #20]
 801ae7c:	6125      	str	r5, [r4, #16]
 801ae7e:	4620      	mov	r0, r4
 801ae80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae84:	0801f025 	.word	0x0801f025
 801ae88:	0801f0a7 	.word	0x0801f0a7

0801ae8c <__s2b>:
 801ae8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae90:	460c      	mov	r4, r1
 801ae92:	4615      	mov	r5, r2
 801ae94:	461f      	mov	r7, r3
 801ae96:	2209      	movs	r2, #9
 801ae98:	3308      	adds	r3, #8
 801ae9a:	4606      	mov	r6, r0
 801ae9c:	fb93 f3f2 	sdiv	r3, r3, r2
 801aea0:	2100      	movs	r1, #0
 801aea2:	2201      	movs	r2, #1
 801aea4:	429a      	cmp	r2, r3
 801aea6:	db09      	blt.n	801aebc <__s2b+0x30>
 801aea8:	4630      	mov	r0, r6
 801aeaa:	f7ff ff47 	bl	801ad3c <_Balloc>
 801aeae:	b940      	cbnz	r0, 801aec2 <__s2b+0x36>
 801aeb0:	4602      	mov	r2, r0
 801aeb2:	4b19      	ldr	r3, [pc, #100]	; (801af18 <__s2b+0x8c>)
 801aeb4:	4819      	ldr	r0, [pc, #100]	; (801af1c <__s2b+0x90>)
 801aeb6:	21d3      	movs	r1, #211	; 0xd3
 801aeb8:	f000 fcdc 	bl	801b874 <__assert_func>
 801aebc:	0052      	lsls	r2, r2, #1
 801aebe:	3101      	adds	r1, #1
 801aec0:	e7f0      	b.n	801aea4 <__s2b+0x18>
 801aec2:	9b08      	ldr	r3, [sp, #32]
 801aec4:	6143      	str	r3, [r0, #20]
 801aec6:	2d09      	cmp	r5, #9
 801aec8:	f04f 0301 	mov.w	r3, #1
 801aecc:	6103      	str	r3, [r0, #16]
 801aece:	dd16      	ble.n	801aefe <__s2b+0x72>
 801aed0:	f104 0909 	add.w	r9, r4, #9
 801aed4:	46c8      	mov	r8, r9
 801aed6:	442c      	add	r4, r5
 801aed8:	f818 3b01 	ldrb.w	r3, [r8], #1
 801aedc:	4601      	mov	r1, r0
 801aede:	3b30      	subs	r3, #48	; 0x30
 801aee0:	220a      	movs	r2, #10
 801aee2:	4630      	mov	r0, r6
 801aee4:	f7ff ff8c 	bl	801ae00 <__multadd>
 801aee8:	45a0      	cmp	r8, r4
 801aeea:	d1f5      	bne.n	801aed8 <__s2b+0x4c>
 801aeec:	f1a5 0408 	sub.w	r4, r5, #8
 801aef0:	444c      	add	r4, r9
 801aef2:	1b2d      	subs	r5, r5, r4
 801aef4:	1963      	adds	r3, r4, r5
 801aef6:	42bb      	cmp	r3, r7
 801aef8:	db04      	blt.n	801af04 <__s2b+0x78>
 801aefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aefe:	340a      	adds	r4, #10
 801af00:	2509      	movs	r5, #9
 801af02:	e7f6      	b.n	801aef2 <__s2b+0x66>
 801af04:	f814 3b01 	ldrb.w	r3, [r4], #1
 801af08:	4601      	mov	r1, r0
 801af0a:	3b30      	subs	r3, #48	; 0x30
 801af0c:	220a      	movs	r2, #10
 801af0e:	4630      	mov	r0, r6
 801af10:	f7ff ff76 	bl	801ae00 <__multadd>
 801af14:	e7ee      	b.n	801aef4 <__s2b+0x68>
 801af16:	bf00      	nop
 801af18:	0801f025 	.word	0x0801f025
 801af1c:	0801f0a7 	.word	0x0801f0a7

0801af20 <__hi0bits>:
 801af20:	0c03      	lsrs	r3, r0, #16
 801af22:	041b      	lsls	r3, r3, #16
 801af24:	b9d3      	cbnz	r3, 801af5c <__hi0bits+0x3c>
 801af26:	0400      	lsls	r0, r0, #16
 801af28:	2310      	movs	r3, #16
 801af2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801af2e:	bf04      	itt	eq
 801af30:	0200      	lsleq	r0, r0, #8
 801af32:	3308      	addeq	r3, #8
 801af34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801af38:	bf04      	itt	eq
 801af3a:	0100      	lsleq	r0, r0, #4
 801af3c:	3304      	addeq	r3, #4
 801af3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801af42:	bf04      	itt	eq
 801af44:	0080      	lsleq	r0, r0, #2
 801af46:	3302      	addeq	r3, #2
 801af48:	2800      	cmp	r0, #0
 801af4a:	db05      	blt.n	801af58 <__hi0bits+0x38>
 801af4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801af50:	f103 0301 	add.w	r3, r3, #1
 801af54:	bf08      	it	eq
 801af56:	2320      	moveq	r3, #32
 801af58:	4618      	mov	r0, r3
 801af5a:	4770      	bx	lr
 801af5c:	2300      	movs	r3, #0
 801af5e:	e7e4      	b.n	801af2a <__hi0bits+0xa>

0801af60 <__lo0bits>:
 801af60:	6803      	ldr	r3, [r0, #0]
 801af62:	f013 0207 	ands.w	r2, r3, #7
 801af66:	d00c      	beq.n	801af82 <__lo0bits+0x22>
 801af68:	07d9      	lsls	r1, r3, #31
 801af6a:	d422      	bmi.n	801afb2 <__lo0bits+0x52>
 801af6c:	079a      	lsls	r2, r3, #30
 801af6e:	bf49      	itett	mi
 801af70:	085b      	lsrmi	r3, r3, #1
 801af72:	089b      	lsrpl	r3, r3, #2
 801af74:	6003      	strmi	r3, [r0, #0]
 801af76:	2201      	movmi	r2, #1
 801af78:	bf5c      	itt	pl
 801af7a:	6003      	strpl	r3, [r0, #0]
 801af7c:	2202      	movpl	r2, #2
 801af7e:	4610      	mov	r0, r2
 801af80:	4770      	bx	lr
 801af82:	b299      	uxth	r1, r3
 801af84:	b909      	cbnz	r1, 801af8a <__lo0bits+0x2a>
 801af86:	0c1b      	lsrs	r3, r3, #16
 801af88:	2210      	movs	r2, #16
 801af8a:	b2d9      	uxtb	r1, r3
 801af8c:	b909      	cbnz	r1, 801af92 <__lo0bits+0x32>
 801af8e:	3208      	adds	r2, #8
 801af90:	0a1b      	lsrs	r3, r3, #8
 801af92:	0719      	lsls	r1, r3, #28
 801af94:	bf04      	itt	eq
 801af96:	091b      	lsreq	r3, r3, #4
 801af98:	3204      	addeq	r2, #4
 801af9a:	0799      	lsls	r1, r3, #30
 801af9c:	bf04      	itt	eq
 801af9e:	089b      	lsreq	r3, r3, #2
 801afa0:	3202      	addeq	r2, #2
 801afa2:	07d9      	lsls	r1, r3, #31
 801afa4:	d403      	bmi.n	801afae <__lo0bits+0x4e>
 801afa6:	085b      	lsrs	r3, r3, #1
 801afa8:	f102 0201 	add.w	r2, r2, #1
 801afac:	d003      	beq.n	801afb6 <__lo0bits+0x56>
 801afae:	6003      	str	r3, [r0, #0]
 801afb0:	e7e5      	b.n	801af7e <__lo0bits+0x1e>
 801afb2:	2200      	movs	r2, #0
 801afb4:	e7e3      	b.n	801af7e <__lo0bits+0x1e>
 801afb6:	2220      	movs	r2, #32
 801afb8:	e7e1      	b.n	801af7e <__lo0bits+0x1e>
	...

0801afbc <__i2b>:
 801afbc:	b510      	push	{r4, lr}
 801afbe:	460c      	mov	r4, r1
 801afc0:	2101      	movs	r1, #1
 801afc2:	f7ff febb 	bl	801ad3c <_Balloc>
 801afc6:	4602      	mov	r2, r0
 801afc8:	b928      	cbnz	r0, 801afd6 <__i2b+0x1a>
 801afca:	4b05      	ldr	r3, [pc, #20]	; (801afe0 <__i2b+0x24>)
 801afcc:	4805      	ldr	r0, [pc, #20]	; (801afe4 <__i2b+0x28>)
 801afce:	f240 1145 	movw	r1, #325	; 0x145
 801afd2:	f000 fc4f 	bl	801b874 <__assert_func>
 801afd6:	2301      	movs	r3, #1
 801afd8:	6144      	str	r4, [r0, #20]
 801afda:	6103      	str	r3, [r0, #16]
 801afdc:	bd10      	pop	{r4, pc}
 801afde:	bf00      	nop
 801afe0:	0801f025 	.word	0x0801f025
 801afe4:	0801f0a7 	.word	0x0801f0a7

0801afe8 <__multiply>:
 801afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afec:	4691      	mov	r9, r2
 801afee:	690a      	ldr	r2, [r1, #16]
 801aff0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801aff4:	429a      	cmp	r2, r3
 801aff6:	bfb8      	it	lt
 801aff8:	460b      	movlt	r3, r1
 801affa:	460c      	mov	r4, r1
 801affc:	bfbc      	itt	lt
 801affe:	464c      	movlt	r4, r9
 801b000:	4699      	movlt	r9, r3
 801b002:	6927      	ldr	r7, [r4, #16]
 801b004:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b008:	68a3      	ldr	r3, [r4, #8]
 801b00a:	6861      	ldr	r1, [r4, #4]
 801b00c:	eb07 060a 	add.w	r6, r7, sl
 801b010:	42b3      	cmp	r3, r6
 801b012:	b085      	sub	sp, #20
 801b014:	bfb8      	it	lt
 801b016:	3101      	addlt	r1, #1
 801b018:	f7ff fe90 	bl	801ad3c <_Balloc>
 801b01c:	b930      	cbnz	r0, 801b02c <__multiply+0x44>
 801b01e:	4602      	mov	r2, r0
 801b020:	4b44      	ldr	r3, [pc, #272]	; (801b134 <__multiply+0x14c>)
 801b022:	4845      	ldr	r0, [pc, #276]	; (801b138 <__multiply+0x150>)
 801b024:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801b028:	f000 fc24 	bl	801b874 <__assert_func>
 801b02c:	f100 0514 	add.w	r5, r0, #20
 801b030:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b034:	462b      	mov	r3, r5
 801b036:	2200      	movs	r2, #0
 801b038:	4543      	cmp	r3, r8
 801b03a:	d321      	bcc.n	801b080 <__multiply+0x98>
 801b03c:	f104 0314 	add.w	r3, r4, #20
 801b040:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b044:	f109 0314 	add.w	r3, r9, #20
 801b048:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b04c:	9202      	str	r2, [sp, #8]
 801b04e:	1b3a      	subs	r2, r7, r4
 801b050:	3a15      	subs	r2, #21
 801b052:	f022 0203 	bic.w	r2, r2, #3
 801b056:	3204      	adds	r2, #4
 801b058:	f104 0115 	add.w	r1, r4, #21
 801b05c:	428f      	cmp	r7, r1
 801b05e:	bf38      	it	cc
 801b060:	2204      	movcc	r2, #4
 801b062:	9201      	str	r2, [sp, #4]
 801b064:	9a02      	ldr	r2, [sp, #8]
 801b066:	9303      	str	r3, [sp, #12]
 801b068:	429a      	cmp	r2, r3
 801b06a:	d80c      	bhi.n	801b086 <__multiply+0x9e>
 801b06c:	2e00      	cmp	r6, #0
 801b06e:	dd03      	ble.n	801b078 <__multiply+0x90>
 801b070:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b074:	2b00      	cmp	r3, #0
 801b076:	d05b      	beq.n	801b130 <__multiply+0x148>
 801b078:	6106      	str	r6, [r0, #16]
 801b07a:	b005      	add	sp, #20
 801b07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b080:	f843 2b04 	str.w	r2, [r3], #4
 801b084:	e7d8      	b.n	801b038 <__multiply+0x50>
 801b086:	f8b3 a000 	ldrh.w	sl, [r3]
 801b08a:	f1ba 0f00 	cmp.w	sl, #0
 801b08e:	d024      	beq.n	801b0da <__multiply+0xf2>
 801b090:	f104 0e14 	add.w	lr, r4, #20
 801b094:	46a9      	mov	r9, r5
 801b096:	f04f 0c00 	mov.w	ip, #0
 801b09a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b09e:	f8d9 1000 	ldr.w	r1, [r9]
 801b0a2:	fa1f fb82 	uxth.w	fp, r2
 801b0a6:	b289      	uxth	r1, r1
 801b0a8:	fb0a 110b 	mla	r1, sl, fp, r1
 801b0ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b0b0:	f8d9 2000 	ldr.w	r2, [r9]
 801b0b4:	4461      	add	r1, ip
 801b0b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b0ba:	fb0a c20b 	mla	r2, sl, fp, ip
 801b0be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b0c2:	b289      	uxth	r1, r1
 801b0c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b0c8:	4577      	cmp	r7, lr
 801b0ca:	f849 1b04 	str.w	r1, [r9], #4
 801b0ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b0d2:	d8e2      	bhi.n	801b09a <__multiply+0xb2>
 801b0d4:	9a01      	ldr	r2, [sp, #4]
 801b0d6:	f845 c002 	str.w	ip, [r5, r2]
 801b0da:	9a03      	ldr	r2, [sp, #12]
 801b0dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b0e0:	3304      	adds	r3, #4
 801b0e2:	f1b9 0f00 	cmp.w	r9, #0
 801b0e6:	d021      	beq.n	801b12c <__multiply+0x144>
 801b0e8:	6829      	ldr	r1, [r5, #0]
 801b0ea:	f104 0c14 	add.w	ip, r4, #20
 801b0ee:	46ae      	mov	lr, r5
 801b0f0:	f04f 0a00 	mov.w	sl, #0
 801b0f4:	f8bc b000 	ldrh.w	fp, [ip]
 801b0f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b0fc:	fb09 220b 	mla	r2, r9, fp, r2
 801b100:	4452      	add	r2, sl
 801b102:	b289      	uxth	r1, r1
 801b104:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b108:	f84e 1b04 	str.w	r1, [lr], #4
 801b10c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b110:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b114:	f8be 1000 	ldrh.w	r1, [lr]
 801b118:	fb09 110a 	mla	r1, r9, sl, r1
 801b11c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801b120:	4567      	cmp	r7, ip
 801b122:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b126:	d8e5      	bhi.n	801b0f4 <__multiply+0x10c>
 801b128:	9a01      	ldr	r2, [sp, #4]
 801b12a:	50a9      	str	r1, [r5, r2]
 801b12c:	3504      	adds	r5, #4
 801b12e:	e799      	b.n	801b064 <__multiply+0x7c>
 801b130:	3e01      	subs	r6, #1
 801b132:	e79b      	b.n	801b06c <__multiply+0x84>
 801b134:	0801f025 	.word	0x0801f025
 801b138:	0801f0a7 	.word	0x0801f0a7

0801b13c <__pow5mult>:
 801b13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b140:	4615      	mov	r5, r2
 801b142:	f012 0203 	ands.w	r2, r2, #3
 801b146:	4606      	mov	r6, r0
 801b148:	460f      	mov	r7, r1
 801b14a:	d007      	beq.n	801b15c <__pow5mult+0x20>
 801b14c:	4c25      	ldr	r4, [pc, #148]	; (801b1e4 <__pow5mult+0xa8>)
 801b14e:	3a01      	subs	r2, #1
 801b150:	2300      	movs	r3, #0
 801b152:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b156:	f7ff fe53 	bl	801ae00 <__multadd>
 801b15a:	4607      	mov	r7, r0
 801b15c:	10ad      	asrs	r5, r5, #2
 801b15e:	d03d      	beq.n	801b1dc <__pow5mult+0xa0>
 801b160:	69f4      	ldr	r4, [r6, #28]
 801b162:	b97c      	cbnz	r4, 801b184 <__pow5mult+0x48>
 801b164:	2010      	movs	r0, #16
 801b166:	f7ff fc75 	bl	801aa54 <malloc>
 801b16a:	4602      	mov	r2, r0
 801b16c:	61f0      	str	r0, [r6, #28]
 801b16e:	b928      	cbnz	r0, 801b17c <__pow5mult+0x40>
 801b170:	4b1d      	ldr	r3, [pc, #116]	; (801b1e8 <__pow5mult+0xac>)
 801b172:	481e      	ldr	r0, [pc, #120]	; (801b1ec <__pow5mult+0xb0>)
 801b174:	f240 11b3 	movw	r1, #435	; 0x1b3
 801b178:	f000 fb7c 	bl	801b874 <__assert_func>
 801b17c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b180:	6004      	str	r4, [r0, #0]
 801b182:	60c4      	str	r4, [r0, #12]
 801b184:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801b188:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b18c:	b94c      	cbnz	r4, 801b1a2 <__pow5mult+0x66>
 801b18e:	f240 2171 	movw	r1, #625	; 0x271
 801b192:	4630      	mov	r0, r6
 801b194:	f7ff ff12 	bl	801afbc <__i2b>
 801b198:	2300      	movs	r3, #0
 801b19a:	f8c8 0008 	str.w	r0, [r8, #8]
 801b19e:	4604      	mov	r4, r0
 801b1a0:	6003      	str	r3, [r0, #0]
 801b1a2:	f04f 0900 	mov.w	r9, #0
 801b1a6:	07eb      	lsls	r3, r5, #31
 801b1a8:	d50a      	bpl.n	801b1c0 <__pow5mult+0x84>
 801b1aa:	4639      	mov	r1, r7
 801b1ac:	4622      	mov	r2, r4
 801b1ae:	4630      	mov	r0, r6
 801b1b0:	f7ff ff1a 	bl	801afe8 <__multiply>
 801b1b4:	4639      	mov	r1, r7
 801b1b6:	4680      	mov	r8, r0
 801b1b8:	4630      	mov	r0, r6
 801b1ba:	f7ff fdff 	bl	801adbc <_Bfree>
 801b1be:	4647      	mov	r7, r8
 801b1c0:	106d      	asrs	r5, r5, #1
 801b1c2:	d00b      	beq.n	801b1dc <__pow5mult+0xa0>
 801b1c4:	6820      	ldr	r0, [r4, #0]
 801b1c6:	b938      	cbnz	r0, 801b1d8 <__pow5mult+0x9c>
 801b1c8:	4622      	mov	r2, r4
 801b1ca:	4621      	mov	r1, r4
 801b1cc:	4630      	mov	r0, r6
 801b1ce:	f7ff ff0b 	bl	801afe8 <__multiply>
 801b1d2:	6020      	str	r0, [r4, #0]
 801b1d4:	f8c0 9000 	str.w	r9, [r0]
 801b1d8:	4604      	mov	r4, r0
 801b1da:	e7e4      	b.n	801b1a6 <__pow5mult+0x6a>
 801b1dc:	4638      	mov	r0, r7
 801b1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1e2:	bf00      	nop
 801b1e4:	0801f1f0 	.word	0x0801f1f0
 801b1e8:	0801efb6 	.word	0x0801efb6
 801b1ec:	0801f0a7 	.word	0x0801f0a7

0801b1f0 <__lshift>:
 801b1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1f4:	460c      	mov	r4, r1
 801b1f6:	6849      	ldr	r1, [r1, #4]
 801b1f8:	6923      	ldr	r3, [r4, #16]
 801b1fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b1fe:	68a3      	ldr	r3, [r4, #8]
 801b200:	4607      	mov	r7, r0
 801b202:	4691      	mov	r9, r2
 801b204:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b208:	f108 0601 	add.w	r6, r8, #1
 801b20c:	42b3      	cmp	r3, r6
 801b20e:	db0b      	blt.n	801b228 <__lshift+0x38>
 801b210:	4638      	mov	r0, r7
 801b212:	f7ff fd93 	bl	801ad3c <_Balloc>
 801b216:	4605      	mov	r5, r0
 801b218:	b948      	cbnz	r0, 801b22e <__lshift+0x3e>
 801b21a:	4602      	mov	r2, r0
 801b21c:	4b28      	ldr	r3, [pc, #160]	; (801b2c0 <__lshift+0xd0>)
 801b21e:	4829      	ldr	r0, [pc, #164]	; (801b2c4 <__lshift+0xd4>)
 801b220:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801b224:	f000 fb26 	bl	801b874 <__assert_func>
 801b228:	3101      	adds	r1, #1
 801b22a:	005b      	lsls	r3, r3, #1
 801b22c:	e7ee      	b.n	801b20c <__lshift+0x1c>
 801b22e:	2300      	movs	r3, #0
 801b230:	f100 0114 	add.w	r1, r0, #20
 801b234:	f100 0210 	add.w	r2, r0, #16
 801b238:	4618      	mov	r0, r3
 801b23a:	4553      	cmp	r3, sl
 801b23c:	db33      	blt.n	801b2a6 <__lshift+0xb6>
 801b23e:	6920      	ldr	r0, [r4, #16]
 801b240:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b244:	f104 0314 	add.w	r3, r4, #20
 801b248:	f019 091f 	ands.w	r9, r9, #31
 801b24c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b250:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b254:	d02b      	beq.n	801b2ae <__lshift+0xbe>
 801b256:	f1c9 0e20 	rsb	lr, r9, #32
 801b25a:	468a      	mov	sl, r1
 801b25c:	2200      	movs	r2, #0
 801b25e:	6818      	ldr	r0, [r3, #0]
 801b260:	fa00 f009 	lsl.w	r0, r0, r9
 801b264:	4310      	orrs	r0, r2
 801b266:	f84a 0b04 	str.w	r0, [sl], #4
 801b26a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b26e:	459c      	cmp	ip, r3
 801b270:	fa22 f20e 	lsr.w	r2, r2, lr
 801b274:	d8f3      	bhi.n	801b25e <__lshift+0x6e>
 801b276:	ebac 0304 	sub.w	r3, ip, r4
 801b27a:	3b15      	subs	r3, #21
 801b27c:	f023 0303 	bic.w	r3, r3, #3
 801b280:	3304      	adds	r3, #4
 801b282:	f104 0015 	add.w	r0, r4, #21
 801b286:	4584      	cmp	ip, r0
 801b288:	bf38      	it	cc
 801b28a:	2304      	movcc	r3, #4
 801b28c:	50ca      	str	r2, [r1, r3]
 801b28e:	b10a      	cbz	r2, 801b294 <__lshift+0xa4>
 801b290:	f108 0602 	add.w	r6, r8, #2
 801b294:	3e01      	subs	r6, #1
 801b296:	4638      	mov	r0, r7
 801b298:	612e      	str	r6, [r5, #16]
 801b29a:	4621      	mov	r1, r4
 801b29c:	f7ff fd8e 	bl	801adbc <_Bfree>
 801b2a0:	4628      	mov	r0, r5
 801b2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2a6:	f842 0f04 	str.w	r0, [r2, #4]!
 801b2aa:	3301      	adds	r3, #1
 801b2ac:	e7c5      	b.n	801b23a <__lshift+0x4a>
 801b2ae:	3904      	subs	r1, #4
 801b2b0:	f853 2b04 	ldr.w	r2, [r3], #4
 801b2b4:	f841 2f04 	str.w	r2, [r1, #4]!
 801b2b8:	459c      	cmp	ip, r3
 801b2ba:	d8f9      	bhi.n	801b2b0 <__lshift+0xc0>
 801b2bc:	e7ea      	b.n	801b294 <__lshift+0xa4>
 801b2be:	bf00      	nop
 801b2c0:	0801f025 	.word	0x0801f025
 801b2c4:	0801f0a7 	.word	0x0801f0a7

0801b2c8 <__mcmp>:
 801b2c8:	b530      	push	{r4, r5, lr}
 801b2ca:	6902      	ldr	r2, [r0, #16]
 801b2cc:	690c      	ldr	r4, [r1, #16]
 801b2ce:	1b12      	subs	r2, r2, r4
 801b2d0:	d10e      	bne.n	801b2f0 <__mcmp+0x28>
 801b2d2:	f100 0314 	add.w	r3, r0, #20
 801b2d6:	3114      	adds	r1, #20
 801b2d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b2dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b2e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b2e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b2e8:	42a5      	cmp	r5, r4
 801b2ea:	d003      	beq.n	801b2f4 <__mcmp+0x2c>
 801b2ec:	d305      	bcc.n	801b2fa <__mcmp+0x32>
 801b2ee:	2201      	movs	r2, #1
 801b2f0:	4610      	mov	r0, r2
 801b2f2:	bd30      	pop	{r4, r5, pc}
 801b2f4:	4283      	cmp	r3, r0
 801b2f6:	d3f3      	bcc.n	801b2e0 <__mcmp+0x18>
 801b2f8:	e7fa      	b.n	801b2f0 <__mcmp+0x28>
 801b2fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b2fe:	e7f7      	b.n	801b2f0 <__mcmp+0x28>

0801b300 <__mdiff>:
 801b300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b304:	460c      	mov	r4, r1
 801b306:	4606      	mov	r6, r0
 801b308:	4611      	mov	r1, r2
 801b30a:	4620      	mov	r0, r4
 801b30c:	4690      	mov	r8, r2
 801b30e:	f7ff ffdb 	bl	801b2c8 <__mcmp>
 801b312:	1e05      	subs	r5, r0, #0
 801b314:	d110      	bne.n	801b338 <__mdiff+0x38>
 801b316:	4629      	mov	r1, r5
 801b318:	4630      	mov	r0, r6
 801b31a:	f7ff fd0f 	bl	801ad3c <_Balloc>
 801b31e:	b930      	cbnz	r0, 801b32e <__mdiff+0x2e>
 801b320:	4b3a      	ldr	r3, [pc, #232]	; (801b40c <__mdiff+0x10c>)
 801b322:	4602      	mov	r2, r0
 801b324:	f240 2137 	movw	r1, #567	; 0x237
 801b328:	4839      	ldr	r0, [pc, #228]	; (801b410 <__mdiff+0x110>)
 801b32a:	f000 faa3 	bl	801b874 <__assert_func>
 801b32e:	2301      	movs	r3, #1
 801b330:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b338:	bfa4      	itt	ge
 801b33a:	4643      	movge	r3, r8
 801b33c:	46a0      	movge	r8, r4
 801b33e:	4630      	mov	r0, r6
 801b340:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b344:	bfa6      	itte	ge
 801b346:	461c      	movge	r4, r3
 801b348:	2500      	movge	r5, #0
 801b34a:	2501      	movlt	r5, #1
 801b34c:	f7ff fcf6 	bl	801ad3c <_Balloc>
 801b350:	b920      	cbnz	r0, 801b35c <__mdiff+0x5c>
 801b352:	4b2e      	ldr	r3, [pc, #184]	; (801b40c <__mdiff+0x10c>)
 801b354:	4602      	mov	r2, r0
 801b356:	f240 2145 	movw	r1, #581	; 0x245
 801b35a:	e7e5      	b.n	801b328 <__mdiff+0x28>
 801b35c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b360:	6926      	ldr	r6, [r4, #16]
 801b362:	60c5      	str	r5, [r0, #12]
 801b364:	f104 0914 	add.w	r9, r4, #20
 801b368:	f108 0514 	add.w	r5, r8, #20
 801b36c:	f100 0e14 	add.w	lr, r0, #20
 801b370:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b374:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b378:	f108 0210 	add.w	r2, r8, #16
 801b37c:	46f2      	mov	sl, lr
 801b37e:	2100      	movs	r1, #0
 801b380:	f859 3b04 	ldr.w	r3, [r9], #4
 801b384:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b388:	fa11 f88b 	uxtah	r8, r1, fp
 801b38c:	b299      	uxth	r1, r3
 801b38e:	0c1b      	lsrs	r3, r3, #16
 801b390:	eba8 0801 	sub.w	r8, r8, r1
 801b394:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b398:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b39c:	fa1f f888 	uxth.w	r8, r8
 801b3a0:	1419      	asrs	r1, r3, #16
 801b3a2:	454e      	cmp	r6, r9
 801b3a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b3a8:	f84a 3b04 	str.w	r3, [sl], #4
 801b3ac:	d8e8      	bhi.n	801b380 <__mdiff+0x80>
 801b3ae:	1b33      	subs	r3, r6, r4
 801b3b0:	3b15      	subs	r3, #21
 801b3b2:	f023 0303 	bic.w	r3, r3, #3
 801b3b6:	3304      	adds	r3, #4
 801b3b8:	3415      	adds	r4, #21
 801b3ba:	42a6      	cmp	r6, r4
 801b3bc:	bf38      	it	cc
 801b3be:	2304      	movcc	r3, #4
 801b3c0:	441d      	add	r5, r3
 801b3c2:	4473      	add	r3, lr
 801b3c4:	469e      	mov	lr, r3
 801b3c6:	462e      	mov	r6, r5
 801b3c8:	4566      	cmp	r6, ip
 801b3ca:	d30e      	bcc.n	801b3ea <__mdiff+0xea>
 801b3cc:	f10c 0203 	add.w	r2, ip, #3
 801b3d0:	1b52      	subs	r2, r2, r5
 801b3d2:	f022 0203 	bic.w	r2, r2, #3
 801b3d6:	3d03      	subs	r5, #3
 801b3d8:	45ac      	cmp	ip, r5
 801b3da:	bf38      	it	cc
 801b3dc:	2200      	movcc	r2, #0
 801b3de:	4413      	add	r3, r2
 801b3e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b3e4:	b17a      	cbz	r2, 801b406 <__mdiff+0x106>
 801b3e6:	6107      	str	r7, [r0, #16]
 801b3e8:	e7a4      	b.n	801b334 <__mdiff+0x34>
 801b3ea:	f856 8b04 	ldr.w	r8, [r6], #4
 801b3ee:	fa11 f288 	uxtah	r2, r1, r8
 801b3f2:	1414      	asrs	r4, r2, #16
 801b3f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b3f8:	b292      	uxth	r2, r2
 801b3fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b3fe:	f84e 2b04 	str.w	r2, [lr], #4
 801b402:	1421      	asrs	r1, r4, #16
 801b404:	e7e0      	b.n	801b3c8 <__mdiff+0xc8>
 801b406:	3f01      	subs	r7, #1
 801b408:	e7ea      	b.n	801b3e0 <__mdiff+0xe0>
 801b40a:	bf00      	nop
 801b40c:	0801f025 	.word	0x0801f025
 801b410:	0801f0a7 	.word	0x0801f0a7

0801b414 <__ulp>:
 801b414:	b082      	sub	sp, #8
 801b416:	ed8d 0b00 	vstr	d0, [sp]
 801b41a:	9a01      	ldr	r2, [sp, #4]
 801b41c:	4b0f      	ldr	r3, [pc, #60]	; (801b45c <__ulp+0x48>)
 801b41e:	4013      	ands	r3, r2
 801b420:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801b424:	2b00      	cmp	r3, #0
 801b426:	dc08      	bgt.n	801b43a <__ulp+0x26>
 801b428:	425b      	negs	r3, r3
 801b42a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801b42e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b432:	da04      	bge.n	801b43e <__ulp+0x2a>
 801b434:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801b438:	4113      	asrs	r3, r2
 801b43a:	2200      	movs	r2, #0
 801b43c:	e008      	b.n	801b450 <__ulp+0x3c>
 801b43e:	f1a2 0314 	sub.w	r3, r2, #20
 801b442:	2b1e      	cmp	r3, #30
 801b444:	bfda      	itte	le
 801b446:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801b44a:	40da      	lsrle	r2, r3
 801b44c:	2201      	movgt	r2, #1
 801b44e:	2300      	movs	r3, #0
 801b450:	4619      	mov	r1, r3
 801b452:	4610      	mov	r0, r2
 801b454:	ec41 0b10 	vmov	d0, r0, r1
 801b458:	b002      	add	sp, #8
 801b45a:	4770      	bx	lr
 801b45c:	7ff00000 	.word	0x7ff00000

0801b460 <__b2d>:
 801b460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b464:	6906      	ldr	r6, [r0, #16]
 801b466:	f100 0814 	add.w	r8, r0, #20
 801b46a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801b46e:	1f37      	subs	r7, r6, #4
 801b470:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801b474:	4610      	mov	r0, r2
 801b476:	f7ff fd53 	bl	801af20 <__hi0bits>
 801b47a:	f1c0 0320 	rsb	r3, r0, #32
 801b47e:	280a      	cmp	r0, #10
 801b480:	600b      	str	r3, [r1, #0]
 801b482:	491b      	ldr	r1, [pc, #108]	; (801b4f0 <__b2d+0x90>)
 801b484:	dc15      	bgt.n	801b4b2 <__b2d+0x52>
 801b486:	f1c0 0c0b 	rsb	ip, r0, #11
 801b48a:	fa22 f30c 	lsr.w	r3, r2, ip
 801b48e:	45b8      	cmp	r8, r7
 801b490:	ea43 0501 	orr.w	r5, r3, r1
 801b494:	bf34      	ite	cc
 801b496:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b49a:	2300      	movcs	r3, #0
 801b49c:	3015      	adds	r0, #21
 801b49e:	fa02 f000 	lsl.w	r0, r2, r0
 801b4a2:	fa23 f30c 	lsr.w	r3, r3, ip
 801b4a6:	4303      	orrs	r3, r0
 801b4a8:	461c      	mov	r4, r3
 801b4aa:	ec45 4b10 	vmov	d0, r4, r5
 801b4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4b2:	45b8      	cmp	r8, r7
 801b4b4:	bf3a      	itte	cc
 801b4b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801b4ba:	f1a6 0708 	subcc.w	r7, r6, #8
 801b4be:	2300      	movcs	r3, #0
 801b4c0:	380b      	subs	r0, #11
 801b4c2:	d012      	beq.n	801b4ea <__b2d+0x8a>
 801b4c4:	f1c0 0120 	rsb	r1, r0, #32
 801b4c8:	fa23 f401 	lsr.w	r4, r3, r1
 801b4cc:	4082      	lsls	r2, r0
 801b4ce:	4322      	orrs	r2, r4
 801b4d0:	4547      	cmp	r7, r8
 801b4d2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801b4d6:	bf8c      	ite	hi
 801b4d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801b4dc:	2200      	movls	r2, #0
 801b4de:	4083      	lsls	r3, r0
 801b4e0:	40ca      	lsrs	r2, r1
 801b4e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801b4e6:	4313      	orrs	r3, r2
 801b4e8:	e7de      	b.n	801b4a8 <__b2d+0x48>
 801b4ea:	ea42 0501 	orr.w	r5, r2, r1
 801b4ee:	e7db      	b.n	801b4a8 <__b2d+0x48>
 801b4f0:	3ff00000 	.word	0x3ff00000

0801b4f4 <__d2b>:
 801b4f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b4f8:	460f      	mov	r7, r1
 801b4fa:	2101      	movs	r1, #1
 801b4fc:	ec59 8b10 	vmov	r8, r9, d0
 801b500:	4616      	mov	r6, r2
 801b502:	f7ff fc1b 	bl	801ad3c <_Balloc>
 801b506:	4604      	mov	r4, r0
 801b508:	b930      	cbnz	r0, 801b518 <__d2b+0x24>
 801b50a:	4602      	mov	r2, r0
 801b50c:	4b24      	ldr	r3, [pc, #144]	; (801b5a0 <__d2b+0xac>)
 801b50e:	4825      	ldr	r0, [pc, #148]	; (801b5a4 <__d2b+0xb0>)
 801b510:	f240 310f 	movw	r1, #783	; 0x30f
 801b514:	f000 f9ae 	bl	801b874 <__assert_func>
 801b518:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b51c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b520:	bb2d      	cbnz	r5, 801b56e <__d2b+0x7a>
 801b522:	9301      	str	r3, [sp, #4]
 801b524:	f1b8 0300 	subs.w	r3, r8, #0
 801b528:	d026      	beq.n	801b578 <__d2b+0x84>
 801b52a:	4668      	mov	r0, sp
 801b52c:	9300      	str	r3, [sp, #0]
 801b52e:	f7ff fd17 	bl	801af60 <__lo0bits>
 801b532:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b536:	b1e8      	cbz	r0, 801b574 <__d2b+0x80>
 801b538:	f1c0 0320 	rsb	r3, r0, #32
 801b53c:	fa02 f303 	lsl.w	r3, r2, r3
 801b540:	430b      	orrs	r3, r1
 801b542:	40c2      	lsrs	r2, r0
 801b544:	6163      	str	r3, [r4, #20]
 801b546:	9201      	str	r2, [sp, #4]
 801b548:	9b01      	ldr	r3, [sp, #4]
 801b54a:	61a3      	str	r3, [r4, #24]
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	bf14      	ite	ne
 801b550:	2202      	movne	r2, #2
 801b552:	2201      	moveq	r2, #1
 801b554:	6122      	str	r2, [r4, #16]
 801b556:	b1bd      	cbz	r5, 801b588 <__d2b+0x94>
 801b558:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b55c:	4405      	add	r5, r0
 801b55e:	603d      	str	r5, [r7, #0]
 801b560:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b564:	6030      	str	r0, [r6, #0]
 801b566:	4620      	mov	r0, r4
 801b568:	b003      	add	sp, #12
 801b56a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b56e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b572:	e7d6      	b.n	801b522 <__d2b+0x2e>
 801b574:	6161      	str	r1, [r4, #20]
 801b576:	e7e7      	b.n	801b548 <__d2b+0x54>
 801b578:	a801      	add	r0, sp, #4
 801b57a:	f7ff fcf1 	bl	801af60 <__lo0bits>
 801b57e:	9b01      	ldr	r3, [sp, #4]
 801b580:	6163      	str	r3, [r4, #20]
 801b582:	3020      	adds	r0, #32
 801b584:	2201      	movs	r2, #1
 801b586:	e7e5      	b.n	801b554 <__d2b+0x60>
 801b588:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b58c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b590:	6038      	str	r0, [r7, #0]
 801b592:	6918      	ldr	r0, [r3, #16]
 801b594:	f7ff fcc4 	bl	801af20 <__hi0bits>
 801b598:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b59c:	e7e2      	b.n	801b564 <__d2b+0x70>
 801b59e:	bf00      	nop
 801b5a0:	0801f025 	.word	0x0801f025
 801b5a4:	0801f0a7 	.word	0x0801f0a7

0801b5a8 <__ratio>:
 801b5a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5ac:	4688      	mov	r8, r1
 801b5ae:	4669      	mov	r1, sp
 801b5b0:	4681      	mov	r9, r0
 801b5b2:	f7ff ff55 	bl	801b460 <__b2d>
 801b5b6:	a901      	add	r1, sp, #4
 801b5b8:	4640      	mov	r0, r8
 801b5ba:	ec55 4b10 	vmov	r4, r5, d0
 801b5be:	f7ff ff4f 	bl	801b460 <__b2d>
 801b5c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b5c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801b5ca:	eba3 0c02 	sub.w	ip, r3, r2
 801b5ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 801b5d2:	1a9b      	subs	r3, r3, r2
 801b5d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801b5d8:	ec51 0b10 	vmov	r0, r1, d0
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	bfd6      	itet	le
 801b5e0:	460a      	movle	r2, r1
 801b5e2:	462a      	movgt	r2, r5
 801b5e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801b5e8:	468b      	mov	fp, r1
 801b5ea:	462f      	mov	r7, r5
 801b5ec:	bfd4      	ite	le
 801b5ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801b5f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801b5f6:	4620      	mov	r0, r4
 801b5f8:	ee10 2a10 	vmov	r2, s0
 801b5fc:	465b      	mov	r3, fp
 801b5fe:	4639      	mov	r1, r7
 801b600:	f7e5 f92e 	bl	8000860 <__aeabi_ddiv>
 801b604:	ec41 0b10 	vmov	d0, r0, r1
 801b608:	b003      	add	sp, #12
 801b60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b60e <__copybits>:
 801b60e:	3901      	subs	r1, #1
 801b610:	b570      	push	{r4, r5, r6, lr}
 801b612:	1149      	asrs	r1, r1, #5
 801b614:	6914      	ldr	r4, [r2, #16]
 801b616:	3101      	adds	r1, #1
 801b618:	f102 0314 	add.w	r3, r2, #20
 801b61c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801b620:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b624:	1f05      	subs	r5, r0, #4
 801b626:	42a3      	cmp	r3, r4
 801b628:	d30c      	bcc.n	801b644 <__copybits+0x36>
 801b62a:	1aa3      	subs	r3, r4, r2
 801b62c:	3b11      	subs	r3, #17
 801b62e:	f023 0303 	bic.w	r3, r3, #3
 801b632:	3211      	adds	r2, #17
 801b634:	42a2      	cmp	r2, r4
 801b636:	bf88      	it	hi
 801b638:	2300      	movhi	r3, #0
 801b63a:	4418      	add	r0, r3
 801b63c:	2300      	movs	r3, #0
 801b63e:	4288      	cmp	r0, r1
 801b640:	d305      	bcc.n	801b64e <__copybits+0x40>
 801b642:	bd70      	pop	{r4, r5, r6, pc}
 801b644:	f853 6b04 	ldr.w	r6, [r3], #4
 801b648:	f845 6f04 	str.w	r6, [r5, #4]!
 801b64c:	e7eb      	b.n	801b626 <__copybits+0x18>
 801b64e:	f840 3b04 	str.w	r3, [r0], #4
 801b652:	e7f4      	b.n	801b63e <__copybits+0x30>

0801b654 <__any_on>:
 801b654:	f100 0214 	add.w	r2, r0, #20
 801b658:	6900      	ldr	r0, [r0, #16]
 801b65a:	114b      	asrs	r3, r1, #5
 801b65c:	4298      	cmp	r0, r3
 801b65e:	b510      	push	{r4, lr}
 801b660:	db11      	blt.n	801b686 <__any_on+0x32>
 801b662:	dd0a      	ble.n	801b67a <__any_on+0x26>
 801b664:	f011 011f 	ands.w	r1, r1, #31
 801b668:	d007      	beq.n	801b67a <__any_on+0x26>
 801b66a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801b66e:	fa24 f001 	lsr.w	r0, r4, r1
 801b672:	fa00 f101 	lsl.w	r1, r0, r1
 801b676:	428c      	cmp	r4, r1
 801b678:	d10b      	bne.n	801b692 <__any_on+0x3e>
 801b67a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b67e:	4293      	cmp	r3, r2
 801b680:	d803      	bhi.n	801b68a <__any_on+0x36>
 801b682:	2000      	movs	r0, #0
 801b684:	bd10      	pop	{r4, pc}
 801b686:	4603      	mov	r3, r0
 801b688:	e7f7      	b.n	801b67a <__any_on+0x26>
 801b68a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b68e:	2900      	cmp	r1, #0
 801b690:	d0f5      	beq.n	801b67e <__any_on+0x2a>
 801b692:	2001      	movs	r0, #1
 801b694:	e7f6      	b.n	801b684 <__any_on+0x30>

0801b696 <__sread>:
 801b696:	b510      	push	{r4, lr}
 801b698:	460c      	mov	r4, r1
 801b69a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b69e:	f000 f8b5 	bl	801b80c <_read_r>
 801b6a2:	2800      	cmp	r0, #0
 801b6a4:	bfab      	itete	ge
 801b6a6:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b6a8:	89a3      	ldrhlt	r3, [r4, #12]
 801b6aa:	181b      	addge	r3, r3, r0
 801b6ac:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b6b0:	bfac      	ite	ge
 801b6b2:	6563      	strge	r3, [r4, #84]	; 0x54
 801b6b4:	81a3      	strhlt	r3, [r4, #12]
 801b6b6:	bd10      	pop	{r4, pc}

0801b6b8 <__swrite>:
 801b6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6bc:	461f      	mov	r7, r3
 801b6be:	898b      	ldrh	r3, [r1, #12]
 801b6c0:	05db      	lsls	r3, r3, #23
 801b6c2:	4605      	mov	r5, r0
 801b6c4:	460c      	mov	r4, r1
 801b6c6:	4616      	mov	r6, r2
 801b6c8:	d505      	bpl.n	801b6d6 <__swrite+0x1e>
 801b6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6ce:	2302      	movs	r3, #2
 801b6d0:	2200      	movs	r2, #0
 801b6d2:	f000 f889 	bl	801b7e8 <_lseek_r>
 801b6d6:	89a3      	ldrh	r3, [r4, #12]
 801b6d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b6dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b6e0:	81a3      	strh	r3, [r4, #12]
 801b6e2:	4632      	mov	r2, r6
 801b6e4:	463b      	mov	r3, r7
 801b6e6:	4628      	mov	r0, r5
 801b6e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b6ec:	f000 b8b0 	b.w	801b850 <_write_r>

0801b6f0 <__sseek>:
 801b6f0:	b510      	push	{r4, lr}
 801b6f2:	460c      	mov	r4, r1
 801b6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6f8:	f000 f876 	bl	801b7e8 <_lseek_r>
 801b6fc:	1c43      	adds	r3, r0, #1
 801b6fe:	89a3      	ldrh	r3, [r4, #12]
 801b700:	bf15      	itete	ne
 801b702:	6560      	strne	r0, [r4, #84]	; 0x54
 801b704:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b708:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b70c:	81a3      	strheq	r3, [r4, #12]
 801b70e:	bf18      	it	ne
 801b710:	81a3      	strhne	r3, [r4, #12]
 801b712:	bd10      	pop	{r4, pc}

0801b714 <__sclose>:
 801b714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b718:	f000 b856 	b.w	801b7c8 <_close_r>

0801b71c <_realloc_r>:
 801b71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b720:	4680      	mov	r8, r0
 801b722:	4614      	mov	r4, r2
 801b724:	460e      	mov	r6, r1
 801b726:	b921      	cbnz	r1, 801b732 <_realloc_r+0x16>
 801b728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b72c:	4611      	mov	r1, r2
 801b72e:	f7ff b9b9 	b.w	801aaa4 <_malloc_r>
 801b732:	b92a      	cbnz	r2, 801b740 <_realloc_r+0x24>
 801b734:	f7fe fc92 	bl	801a05c <_free_r>
 801b738:	4625      	mov	r5, r4
 801b73a:	4628      	mov	r0, r5
 801b73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b740:	f000 f8cc 	bl	801b8dc <_malloc_usable_size_r>
 801b744:	4284      	cmp	r4, r0
 801b746:	4607      	mov	r7, r0
 801b748:	d802      	bhi.n	801b750 <_realloc_r+0x34>
 801b74a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b74e:	d812      	bhi.n	801b776 <_realloc_r+0x5a>
 801b750:	4621      	mov	r1, r4
 801b752:	4640      	mov	r0, r8
 801b754:	f7ff f9a6 	bl	801aaa4 <_malloc_r>
 801b758:	4605      	mov	r5, r0
 801b75a:	2800      	cmp	r0, #0
 801b75c:	d0ed      	beq.n	801b73a <_realloc_r+0x1e>
 801b75e:	42bc      	cmp	r4, r7
 801b760:	4622      	mov	r2, r4
 801b762:	4631      	mov	r1, r6
 801b764:	bf28      	it	cs
 801b766:	463a      	movcs	r2, r7
 801b768:	f7fd fde0 	bl	801932c <memcpy>
 801b76c:	4631      	mov	r1, r6
 801b76e:	4640      	mov	r0, r8
 801b770:	f7fe fc74 	bl	801a05c <_free_r>
 801b774:	e7e1      	b.n	801b73a <_realloc_r+0x1e>
 801b776:	4635      	mov	r5, r6
 801b778:	e7df      	b.n	801b73a <_realloc_r+0x1e>

0801b77a <__ascii_wctomb>:
 801b77a:	b149      	cbz	r1, 801b790 <__ascii_wctomb+0x16>
 801b77c:	2aff      	cmp	r2, #255	; 0xff
 801b77e:	bf85      	ittet	hi
 801b780:	238a      	movhi	r3, #138	; 0x8a
 801b782:	6003      	strhi	r3, [r0, #0]
 801b784:	700a      	strbls	r2, [r1, #0]
 801b786:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801b78a:	bf98      	it	ls
 801b78c:	2001      	movls	r0, #1
 801b78e:	4770      	bx	lr
 801b790:	4608      	mov	r0, r1
 801b792:	4770      	bx	lr

0801b794 <memmove>:
 801b794:	4288      	cmp	r0, r1
 801b796:	b510      	push	{r4, lr}
 801b798:	eb01 0402 	add.w	r4, r1, r2
 801b79c:	d902      	bls.n	801b7a4 <memmove+0x10>
 801b79e:	4284      	cmp	r4, r0
 801b7a0:	4623      	mov	r3, r4
 801b7a2:	d807      	bhi.n	801b7b4 <memmove+0x20>
 801b7a4:	1e43      	subs	r3, r0, #1
 801b7a6:	42a1      	cmp	r1, r4
 801b7a8:	d008      	beq.n	801b7bc <memmove+0x28>
 801b7aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b7ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b7b2:	e7f8      	b.n	801b7a6 <memmove+0x12>
 801b7b4:	4402      	add	r2, r0
 801b7b6:	4601      	mov	r1, r0
 801b7b8:	428a      	cmp	r2, r1
 801b7ba:	d100      	bne.n	801b7be <memmove+0x2a>
 801b7bc:	bd10      	pop	{r4, pc}
 801b7be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b7c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b7c6:	e7f7      	b.n	801b7b8 <memmove+0x24>

0801b7c8 <_close_r>:
 801b7c8:	b538      	push	{r3, r4, r5, lr}
 801b7ca:	4d06      	ldr	r5, [pc, #24]	; (801b7e4 <_close_r+0x1c>)
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	4604      	mov	r4, r0
 801b7d0:	4608      	mov	r0, r1
 801b7d2:	602b      	str	r3, [r5, #0]
 801b7d4:	f7e9 fd11 	bl	80051fa <_close>
 801b7d8:	1c43      	adds	r3, r0, #1
 801b7da:	d102      	bne.n	801b7e2 <_close_r+0x1a>
 801b7dc:	682b      	ldr	r3, [r5, #0]
 801b7de:	b103      	cbz	r3, 801b7e2 <_close_r+0x1a>
 801b7e0:	6023      	str	r3, [r4, #0]
 801b7e2:	bd38      	pop	{r3, r4, r5, pc}
 801b7e4:	2000886c 	.word	0x2000886c

0801b7e8 <_lseek_r>:
 801b7e8:	b538      	push	{r3, r4, r5, lr}
 801b7ea:	4d07      	ldr	r5, [pc, #28]	; (801b808 <_lseek_r+0x20>)
 801b7ec:	4604      	mov	r4, r0
 801b7ee:	4608      	mov	r0, r1
 801b7f0:	4611      	mov	r1, r2
 801b7f2:	2200      	movs	r2, #0
 801b7f4:	602a      	str	r2, [r5, #0]
 801b7f6:	461a      	mov	r2, r3
 801b7f8:	f7e9 fd26 	bl	8005248 <_lseek>
 801b7fc:	1c43      	adds	r3, r0, #1
 801b7fe:	d102      	bne.n	801b806 <_lseek_r+0x1e>
 801b800:	682b      	ldr	r3, [r5, #0]
 801b802:	b103      	cbz	r3, 801b806 <_lseek_r+0x1e>
 801b804:	6023      	str	r3, [r4, #0]
 801b806:	bd38      	pop	{r3, r4, r5, pc}
 801b808:	2000886c 	.word	0x2000886c

0801b80c <_read_r>:
 801b80c:	b538      	push	{r3, r4, r5, lr}
 801b80e:	4d07      	ldr	r5, [pc, #28]	; (801b82c <_read_r+0x20>)
 801b810:	4604      	mov	r4, r0
 801b812:	4608      	mov	r0, r1
 801b814:	4611      	mov	r1, r2
 801b816:	2200      	movs	r2, #0
 801b818:	602a      	str	r2, [r5, #0]
 801b81a:	461a      	mov	r2, r3
 801b81c:	f7e9 fcb4 	bl	8005188 <_read>
 801b820:	1c43      	adds	r3, r0, #1
 801b822:	d102      	bne.n	801b82a <_read_r+0x1e>
 801b824:	682b      	ldr	r3, [r5, #0]
 801b826:	b103      	cbz	r3, 801b82a <_read_r+0x1e>
 801b828:	6023      	str	r3, [r4, #0]
 801b82a:	bd38      	pop	{r3, r4, r5, pc}
 801b82c:	2000886c 	.word	0x2000886c

0801b830 <_sbrk_r>:
 801b830:	b538      	push	{r3, r4, r5, lr}
 801b832:	4d06      	ldr	r5, [pc, #24]	; (801b84c <_sbrk_r+0x1c>)
 801b834:	2300      	movs	r3, #0
 801b836:	4604      	mov	r4, r0
 801b838:	4608      	mov	r0, r1
 801b83a:	602b      	str	r3, [r5, #0]
 801b83c:	f7e9 fd12 	bl	8005264 <_sbrk>
 801b840:	1c43      	adds	r3, r0, #1
 801b842:	d102      	bne.n	801b84a <_sbrk_r+0x1a>
 801b844:	682b      	ldr	r3, [r5, #0]
 801b846:	b103      	cbz	r3, 801b84a <_sbrk_r+0x1a>
 801b848:	6023      	str	r3, [r4, #0]
 801b84a:	bd38      	pop	{r3, r4, r5, pc}
 801b84c:	2000886c 	.word	0x2000886c

0801b850 <_write_r>:
 801b850:	b538      	push	{r3, r4, r5, lr}
 801b852:	4d07      	ldr	r5, [pc, #28]	; (801b870 <_write_r+0x20>)
 801b854:	4604      	mov	r4, r0
 801b856:	4608      	mov	r0, r1
 801b858:	4611      	mov	r1, r2
 801b85a:	2200      	movs	r2, #0
 801b85c:	602a      	str	r2, [r5, #0]
 801b85e:	461a      	mov	r2, r3
 801b860:	f7e9 fcaf 	bl	80051c2 <_write>
 801b864:	1c43      	adds	r3, r0, #1
 801b866:	d102      	bne.n	801b86e <_write_r+0x1e>
 801b868:	682b      	ldr	r3, [r5, #0]
 801b86a:	b103      	cbz	r3, 801b86e <_write_r+0x1e>
 801b86c:	6023      	str	r3, [r4, #0]
 801b86e:	bd38      	pop	{r3, r4, r5, pc}
 801b870:	2000886c 	.word	0x2000886c

0801b874 <__assert_func>:
 801b874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b876:	4614      	mov	r4, r2
 801b878:	461a      	mov	r2, r3
 801b87a:	4b09      	ldr	r3, [pc, #36]	; (801b8a0 <__assert_func+0x2c>)
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	4605      	mov	r5, r0
 801b880:	68d8      	ldr	r0, [r3, #12]
 801b882:	b14c      	cbz	r4, 801b898 <__assert_func+0x24>
 801b884:	4b07      	ldr	r3, [pc, #28]	; (801b8a4 <__assert_func+0x30>)
 801b886:	9100      	str	r1, [sp, #0]
 801b888:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b88c:	4906      	ldr	r1, [pc, #24]	; (801b8a8 <__assert_func+0x34>)
 801b88e:	462b      	mov	r3, r5
 801b890:	f000 f82c 	bl	801b8ec <fiprintf>
 801b894:	f000 f83c 	bl	801b910 <abort>
 801b898:	4b04      	ldr	r3, [pc, #16]	; (801b8ac <__assert_func+0x38>)
 801b89a:	461c      	mov	r4, r3
 801b89c:	e7f3      	b.n	801b886 <__assert_func+0x12>
 801b89e:	bf00      	nop
 801b8a0:	200001f0 	.word	0x200001f0
 801b8a4:	0801f1fc 	.word	0x0801f1fc
 801b8a8:	0801f209 	.word	0x0801f209
 801b8ac:	0801f237 	.word	0x0801f237

0801b8b0 <_calloc_r>:
 801b8b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b8b2:	fba1 2402 	umull	r2, r4, r1, r2
 801b8b6:	b94c      	cbnz	r4, 801b8cc <_calloc_r+0x1c>
 801b8b8:	4611      	mov	r1, r2
 801b8ba:	9201      	str	r2, [sp, #4]
 801b8bc:	f7ff f8f2 	bl	801aaa4 <_malloc_r>
 801b8c0:	9a01      	ldr	r2, [sp, #4]
 801b8c2:	4605      	mov	r5, r0
 801b8c4:	b930      	cbnz	r0, 801b8d4 <_calloc_r+0x24>
 801b8c6:	4628      	mov	r0, r5
 801b8c8:	b003      	add	sp, #12
 801b8ca:	bd30      	pop	{r4, r5, pc}
 801b8cc:	220c      	movs	r2, #12
 801b8ce:	6002      	str	r2, [r0, #0]
 801b8d0:	2500      	movs	r5, #0
 801b8d2:	e7f8      	b.n	801b8c6 <_calloc_r+0x16>
 801b8d4:	4621      	mov	r1, r4
 801b8d6:	f7fd fc9b 	bl	8019210 <memset>
 801b8da:	e7f4      	b.n	801b8c6 <_calloc_r+0x16>

0801b8dc <_malloc_usable_size_r>:
 801b8dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b8e0:	1f18      	subs	r0, r3, #4
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	bfbc      	itt	lt
 801b8e6:	580b      	ldrlt	r3, [r1, r0]
 801b8e8:	18c0      	addlt	r0, r0, r3
 801b8ea:	4770      	bx	lr

0801b8ec <fiprintf>:
 801b8ec:	b40e      	push	{r1, r2, r3}
 801b8ee:	b503      	push	{r0, r1, lr}
 801b8f0:	4601      	mov	r1, r0
 801b8f2:	ab03      	add	r3, sp, #12
 801b8f4:	4805      	ldr	r0, [pc, #20]	; (801b90c <fiprintf+0x20>)
 801b8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b8fa:	6800      	ldr	r0, [r0, #0]
 801b8fc:	9301      	str	r3, [sp, #4]
 801b8fe:	f000 f837 	bl	801b970 <_vfiprintf_r>
 801b902:	b002      	add	sp, #8
 801b904:	f85d eb04 	ldr.w	lr, [sp], #4
 801b908:	b003      	add	sp, #12
 801b90a:	4770      	bx	lr
 801b90c:	200001f0 	.word	0x200001f0

0801b910 <abort>:
 801b910:	b508      	push	{r3, lr}
 801b912:	2006      	movs	r0, #6
 801b914:	f000 fa88 	bl	801be28 <raise>
 801b918:	2001      	movs	r0, #1
 801b91a:	f7e9 fc2b 	bl	8005174 <_exit>

0801b91e <__sfputc_r>:
 801b91e:	6893      	ldr	r3, [r2, #8]
 801b920:	3b01      	subs	r3, #1
 801b922:	2b00      	cmp	r3, #0
 801b924:	b410      	push	{r4}
 801b926:	6093      	str	r3, [r2, #8]
 801b928:	da08      	bge.n	801b93c <__sfputc_r+0x1e>
 801b92a:	6994      	ldr	r4, [r2, #24]
 801b92c:	42a3      	cmp	r3, r4
 801b92e:	db01      	blt.n	801b934 <__sfputc_r+0x16>
 801b930:	290a      	cmp	r1, #10
 801b932:	d103      	bne.n	801b93c <__sfputc_r+0x1e>
 801b934:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b938:	f000 b934 	b.w	801bba4 <__swbuf_r>
 801b93c:	6813      	ldr	r3, [r2, #0]
 801b93e:	1c58      	adds	r0, r3, #1
 801b940:	6010      	str	r0, [r2, #0]
 801b942:	7019      	strb	r1, [r3, #0]
 801b944:	4608      	mov	r0, r1
 801b946:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b94a:	4770      	bx	lr

0801b94c <__sfputs_r>:
 801b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b94e:	4606      	mov	r6, r0
 801b950:	460f      	mov	r7, r1
 801b952:	4614      	mov	r4, r2
 801b954:	18d5      	adds	r5, r2, r3
 801b956:	42ac      	cmp	r4, r5
 801b958:	d101      	bne.n	801b95e <__sfputs_r+0x12>
 801b95a:	2000      	movs	r0, #0
 801b95c:	e007      	b.n	801b96e <__sfputs_r+0x22>
 801b95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b962:	463a      	mov	r2, r7
 801b964:	4630      	mov	r0, r6
 801b966:	f7ff ffda 	bl	801b91e <__sfputc_r>
 801b96a:	1c43      	adds	r3, r0, #1
 801b96c:	d1f3      	bne.n	801b956 <__sfputs_r+0xa>
 801b96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b970 <_vfiprintf_r>:
 801b970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b974:	460d      	mov	r5, r1
 801b976:	b09d      	sub	sp, #116	; 0x74
 801b978:	4614      	mov	r4, r2
 801b97a:	4698      	mov	r8, r3
 801b97c:	4606      	mov	r6, r0
 801b97e:	b118      	cbz	r0, 801b988 <_vfiprintf_r+0x18>
 801b980:	6a03      	ldr	r3, [r0, #32]
 801b982:	b90b      	cbnz	r3, 801b988 <_vfiprintf_r+0x18>
 801b984:	f7fc fd5c 	bl	8018440 <__sinit>
 801b988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b98a:	07d9      	lsls	r1, r3, #31
 801b98c:	d405      	bmi.n	801b99a <_vfiprintf_r+0x2a>
 801b98e:	89ab      	ldrh	r3, [r5, #12]
 801b990:	059a      	lsls	r2, r3, #22
 801b992:	d402      	bmi.n	801b99a <_vfiprintf_r+0x2a>
 801b994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b996:	f7fd fcc7 	bl	8019328 <__retarget_lock_acquire_recursive>
 801b99a:	89ab      	ldrh	r3, [r5, #12]
 801b99c:	071b      	lsls	r3, r3, #28
 801b99e:	d501      	bpl.n	801b9a4 <_vfiprintf_r+0x34>
 801b9a0:	692b      	ldr	r3, [r5, #16]
 801b9a2:	b99b      	cbnz	r3, 801b9cc <_vfiprintf_r+0x5c>
 801b9a4:	4629      	mov	r1, r5
 801b9a6:	4630      	mov	r0, r6
 801b9a8:	f000 f93a 	bl	801bc20 <__swsetup_r>
 801b9ac:	b170      	cbz	r0, 801b9cc <_vfiprintf_r+0x5c>
 801b9ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b9b0:	07dc      	lsls	r4, r3, #31
 801b9b2:	d504      	bpl.n	801b9be <_vfiprintf_r+0x4e>
 801b9b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b9b8:	b01d      	add	sp, #116	; 0x74
 801b9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9be:	89ab      	ldrh	r3, [r5, #12]
 801b9c0:	0598      	lsls	r0, r3, #22
 801b9c2:	d4f7      	bmi.n	801b9b4 <_vfiprintf_r+0x44>
 801b9c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b9c6:	f7fd fcb0 	bl	801932a <__retarget_lock_release_recursive>
 801b9ca:	e7f3      	b.n	801b9b4 <_vfiprintf_r+0x44>
 801b9cc:	2300      	movs	r3, #0
 801b9ce:	9309      	str	r3, [sp, #36]	; 0x24
 801b9d0:	2320      	movs	r3, #32
 801b9d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b9d6:	f8cd 800c 	str.w	r8, [sp, #12]
 801b9da:	2330      	movs	r3, #48	; 0x30
 801b9dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801bb90 <_vfiprintf_r+0x220>
 801b9e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b9e4:	f04f 0901 	mov.w	r9, #1
 801b9e8:	4623      	mov	r3, r4
 801b9ea:	469a      	mov	sl, r3
 801b9ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b9f0:	b10a      	cbz	r2, 801b9f6 <_vfiprintf_r+0x86>
 801b9f2:	2a25      	cmp	r2, #37	; 0x25
 801b9f4:	d1f9      	bne.n	801b9ea <_vfiprintf_r+0x7a>
 801b9f6:	ebba 0b04 	subs.w	fp, sl, r4
 801b9fa:	d00b      	beq.n	801ba14 <_vfiprintf_r+0xa4>
 801b9fc:	465b      	mov	r3, fp
 801b9fe:	4622      	mov	r2, r4
 801ba00:	4629      	mov	r1, r5
 801ba02:	4630      	mov	r0, r6
 801ba04:	f7ff ffa2 	bl	801b94c <__sfputs_r>
 801ba08:	3001      	adds	r0, #1
 801ba0a:	f000 80a9 	beq.w	801bb60 <_vfiprintf_r+0x1f0>
 801ba0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba10:	445a      	add	r2, fp
 801ba12:	9209      	str	r2, [sp, #36]	; 0x24
 801ba14:	f89a 3000 	ldrb.w	r3, [sl]
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	f000 80a1 	beq.w	801bb60 <_vfiprintf_r+0x1f0>
 801ba1e:	2300      	movs	r3, #0
 801ba20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ba24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ba28:	f10a 0a01 	add.w	sl, sl, #1
 801ba2c:	9304      	str	r3, [sp, #16]
 801ba2e:	9307      	str	r3, [sp, #28]
 801ba30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ba34:	931a      	str	r3, [sp, #104]	; 0x68
 801ba36:	4654      	mov	r4, sl
 801ba38:	2205      	movs	r2, #5
 801ba3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba3e:	4854      	ldr	r0, [pc, #336]	; (801bb90 <_vfiprintf_r+0x220>)
 801ba40:	f7e4 fbc6 	bl	80001d0 <memchr>
 801ba44:	9a04      	ldr	r2, [sp, #16]
 801ba46:	b9d8      	cbnz	r0, 801ba80 <_vfiprintf_r+0x110>
 801ba48:	06d1      	lsls	r1, r2, #27
 801ba4a:	bf44      	itt	mi
 801ba4c:	2320      	movmi	r3, #32
 801ba4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ba52:	0713      	lsls	r3, r2, #28
 801ba54:	bf44      	itt	mi
 801ba56:	232b      	movmi	r3, #43	; 0x2b
 801ba58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ba5c:	f89a 3000 	ldrb.w	r3, [sl]
 801ba60:	2b2a      	cmp	r3, #42	; 0x2a
 801ba62:	d015      	beq.n	801ba90 <_vfiprintf_r+0x120>
 801ba64:	9a07      	ldr	r2, [sp, #28]
 801ba66:	4654      	mov	r4, sl
 801ba68:	2000      	movs	r0, #0
 801ba6a:	f04f 0c0a 	mov.w	ip, #10
 801ba6e:	4621      	mov	r1, r4
 801ba70:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ba74:	3b30      	subs	r3, #48	; 0x30
 801ba76:	2b09      	cmp	r3, #9
 801ba78:	d94d      	bls.n	801bb16 <_vfiprintf_r+0x1a6>
 801ba7a:	b1b0      	cbz	r0, 801baaa <_vfiprintf_r+0x13a>
 801ba7c:	9207      	str	r2, [sp, #28]
 801ba7e:	e014      	b.n	801baaa <_vfiprintf_r+0x13a>
 801ba80:	eba0 0308 	sub.w	r3, r0, r8
 801ba84:	fa09 f303 	lsl.w	r3, r9, r3
 801ba88:	4313      	orrs	r3, r2
 801ba8a:	9304      	str	r3, [sp, #16]
 801ba8c:	46a2      	mov	sl, r4
 801ba8e:	e7d2      	b.n	801ba36 <_vfiprintf_r+0xc6>
 801ba90:	9b03      	ldr	r3, [sp, #12]
 801ba92:	1d19      	adds	r1, r3, #4
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	9103      	str	r1, [sp, #12]
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	bfbb      	ittet	lt
 801ba9c:	425b      	neglt	r3, r3
 801ba9e:	f042 0202 	orrlt.w	r2, r2, #2
 801baa2:	9307      	strge	r3, [sp, #28]
 801baa4:	9307      	strlt	r3, [sp, #28]
 801baa6:	bfb8      	it	lt
 801baa8:	9204      	strlt	r2, [sp, #16]
 801baaa:	7823      	ldrb	r3, [r4, #0]
 801baac:	2b2e      	cmp	r3, #46	; 0x2e
 801baae:	d10c      	bne.n	801baca <_vfiprintf_r+0x15a>
 801bab0:	7863      	ldrb	r3, [r4, #1]
 801bab2:	2b2a      	cmp	r3, #42	; 0x2a
 801bab4:	d134      	bne.n	801bb20 <_vfiprintf_r+0x1b0>
 801bab6:	9b03      	ldr	r3, [sp, #12]
 801bab8:	1d1a      	adds	r2, r3, #4
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	9203      	str	r2, [sp, #12]
 801babe:	2b00      	cmp	r3, #0
 801bac0:	bfb8      	it	lt
 801bac2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801bac6:	3402      	adds	r4, #2
 801bac8:	9305      	str	r3, [sp, #20]
 801baca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801bba0 <_vfiprintf_r+0x230>
 801bace:	7821      	ldrb	r1, [r4, #0]
 801bad0:	2203      	movs	r2, #3
 801bad2:	4650      	mov	r0, sl
 801bad4:	f7e4 fb7c 	bl	80001d0 <memchr>
 801bad8:	b138      	cbz	r0, 801baea <_vfiprintf_r+0x17a>
 801bada:	9b04      	ldr	r3, [sp, #16]
 801badc:	eba0 000a 	sub.w	r0, r0, sl
 801bae0:	2240      	movs	r2, #64	; 0x40
 801bae2:	4082      	lsls	r2, r0
 801bae4:	4313      	orrs	r3, r2
 801bae6:	3401      	adds	r4, #1
 801bae8:	9304      	str	r3, [sp, #16]
 801baea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801baee:	4829      	ldr	r0, [pc, #164]	; (801bb94 <_vfiprintf_r+0x224>)
 801baf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801baf4:	2206      	movs	r2, #6
 801baf6:	f7e4 fb6b 	bl	80001d0 <memchr>
 801bafa:	2800      	cmp	r0, #0
 801bafc:	d03f      	beq.n	801bb7e <_vfiprintf_r+0x20e>
 801bafe:	4b26      	ldr	r3, [pc, #152]	; (801bb98 <_vfiprintf_r+0x228>)
 801bb00:	bb1b      	cbnz	r3, 801bb4a <_vfiprintf_r+0x1da>
 801bb02:	9b03      	ldr	r3, [sp, #12]
 801bb04:	3307      	adds	r3, #7
 801bb06:	f023 0307 	bic.w	r3, r3, #7
 801bb0a:	3308      	adds	r3, #8
 801bb0c:	9303      	str	r3, [sp, #12]
 801bb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb10:	443b      	add	r3, r7
 801bb12:	9309      	str	r3, [sp, #36]	; 0x24
 801bb14:	e768      	b.n	801b9e8 <_vfiprintf_r+0x78>
 801bb16:	fb0c 3202 	mla	r2, ip, r2, r3
 801bb1a:	460c      	mov	r4, r1
 801bb1c:	2001      	movs	r0, #1
 801bb1e:	e7a6      	b.n	801ba6e <_vfiprintf_r+0xfe>
 801bb20:	2300      	movs	r3, #0
 801bb22:	3401      	adds	r4, #1
 801bb24:	9305      	str	r3, [sp, #20]
 801bb26:	4619      	mov	r1, r3
 801bb28:	f04f 0c0a 	mov.w	ip, #10
 801bb2c:	4620      	mov	r0, r4
 801bb2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bb32:	3a30      	subs	r2, #48	; 0x30
 801bb34:	2a09      	cmp	r2, #9
 801bb36:	d903      	bls.n	801bb40 <_vfiprintf_r+0x1d0>
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d0c6      	beq.n	801baca <_vfiprintf_r+0x15a>
 801bb3c:	9105      	str	r1, [sp, #20]
 801bb3e:	e7c4      	b.n	801baca <_vfiprintf_r+0x15a>
 801bb40:	fb0c 2101 	mla	r1, ip, r1, r2
 801bb44:	4604      	mov	r4, r0
 801bb46:	2301      	movs	r3, #1
 801bb48:	e7f0      	b.n	801bb2c <_vfiprintf_r+0x1bc>
 801bb4a:	ab03      	add	r3, sp, #12
 801bb4c:	9300      	str	r3, [sp, #0]
 801bb4e:	462a      	mov	r2, r5
 801bb50:	4b12      	ldr	r3, [pc, #72]	; (801bb9c <_vfiprintf_r+0x22c>)
 801bb52:	a904      	add	r1, sp, #16
 801bb54:	4630      	mov	r0, r6
 801bb56:	f7fb fe03 	bl	8017760 <_printf_float>
 801bb5a:	4607      	mov	r7, r0
 801bb5c:	1c78      	adds	r0, r7, #1
 801bb5e:	d1d6      	bne.n	801bb0e <_vfiprintf_r+0x19e>
 801bb60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bb62:	07d9      	lsls	r1, r3, #31
 801bb64:	d405      	bmi.n	801bb72 <_vfiprintf_r+0x202>
 801bb66:	89ab      	ldrh	r3, [r5, #12]
 801bb68:	059a      	lsls	r2, r3, #22
 801bb6a:	d402      	bmi.n	801bb72 <_vfiprintf_r+0x202>
 801bb6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bb6e:	f7fd fbdc 	bl	801932a <__retarget_lock_release_recursive>
 801bb72:	89ab      	ldrh	r3, [r5, #12]
 801bb74:	065b      	lsls	r3, r3, #25
 801bb76:	f53f af1d 	bmi.w	801b9b4 <_vfiprintf_r+0x44>
 801bb7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bb7c:	e71c      	b.n	801b9b8 <_vfiprintf_r+0x48>
 801bb7e:	ab03      	add	r3, sp, #12
 801bb80:	9300      	str	r3, [sp, #0]
 801bb82:	462a      	mov	r2, r5
 801bb84:	4b05      	ldr	r3, [pc, #20]	; (801bb9c <_vfiprintf_r+0x22c>)
 801bb86:	a904      	add	r1, sp, #16
 801bb88:	4630      	mov	r0, r6
 801bb8a:	f7fc f88d 	bl	8017ca8 <_printf_i>
 801bb8e:	e7e4      	b.n	801bb5a <_vfiprintf_r+0x1ea>
 801bb90:	0801f096 	.word	0x0801f096
 801bb94:	0801f0a0 	.word	0x0801f0a0
 801bb98:	08017761 	.word	0x08017761
 801bb9c:	0801b94d 	.word	0x0801b94d
 801bba0:	0801f09c 	.word	0x0801f09c

0801bba4 <__swbuf_r>:
 801bba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bba6:	460e      	mov	r6, r1
 801bba8:	4614      	mov	r4, r2
 801bbaa:	4605      	mov	r5, r0
 801bbac:	b118      	cbz	r0, 801bbb6 <__swbuf_r+0x12>
 801bbae:	6a03      	ldr	r3, [r0, #32]
 801bbb0:	b90b      	cbnz	r3, 801bbb6 <__swbuf_r+0x12>
 801bbb2:	f7fc fc45 	bl	8018440 <__sinit>
 801bbb6:	69a3      	ldr	r3, [r4, #24]
 801bbb8:	60a3      	str	r3, [r4, #8]
 801bbba:	89a3      	ldrh	r3, [r4, #12]
 801bbbc:	071a      	lsls	r2, r3, #28
 801bbbe:	d525      	bpl.n	801bc0c <__swbuf_r+0x68>
 801bbc0:	6923      	ldr	r3, [r4, #16]
 801bbc2:	b31b      	cbz	r3, 801bc0c <__swbuf_r+0x68>
 801bbc4:	6823      	ldr	r3, [r4, #0]
 801bbc6:	6922      	ldr	r2, [r4, #16]
 801bbc8:	1a98      	subs	r0, r3, r2
 801bbca:	6963      	ldr	r3, [r4, #20]
 801bbcc:	b2f6      	uxtb	r6, r6
 801bbce:	4283      	cmp	r3, r0
 801bbd0:	4637      	mov	r7, r6
 801bbd2:	dc04      	bgt.n	801bbde <__swbuf_r+0x3a>
 801bbd4:	4621      	mov	r1, r4
 801bbd6:	4628      	mov	r0, r5
 801bbd8:	f7ff f87c 	bl	801acd4 <_fflush_r>
 801bbdc:	b9e0      	cbnz	r0, 801bc18 <__swbuf_r+0x74>
 801bbde:	68a3      	ldr	r3, [r4, #8]
 801bbe0:	3b01      	subs	r3, #1
 801bbe2:	60a3      	str	r3, [r4, #8]
 801bbe4:	6823      	ldr	r3, [r4, #0]
 801bbe6:	1c5a      	adds	r2, r3, #1
 801bbe8:	6022      	str	r2, [r4, #0]
 801bbea:	701e      	strb	r6, [r3, #0]
 801bbec:	6962      	ldr	r2, [r4, #20]
 801bbee:	1c43      	adds	r3, r0, #1
 801bbf0:	429a      	cmp	r2, r3
 801bbf2:	d004      	beq.n	801bbfe <__swbuf_r+0x5a>
 801bbf4:	89a3      	ldrh	r3, [r4, #12]
 801bbf6:	07db      	lsls	r3, r3, #31
 801bbf8:	d506      	bpl.n	801bc08 <__swbuf_r+0x64>
 801bbfa:	2e0a      	cmp	r6, #10
 801bbfc:	d104      	bne.n	801bc08 <__swbuf_r+0x64>
 801bbfe:	4621      	mov	r1, r4
 801bc00:	4628      	mov	r0, r5
 801bc02:	f7ff f867 	bl	801acd4 <_fflush_r>
 801bc06:	b938      	cbnz	r0, 801bc18 <__swbuf_r+0x74>
 801bc08:	4638      	mov	r0, r7
 801bc0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc0c:	4621      	mov	r1, r4
 801bc0e:	4628      	mov	r0, r5
 801bc10:	f000 f806 	bl	801bc20 <__swsetup_r>
 801bc14:	2800      	cmp	r0, #0
 801bc16:	d0d5      	beq.n	801bbc4 <__swbuf_r+0x20>
 801bc18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bc1c:	e7f4      	b.n	801bc08 <__swbuf_r+0x64>
	...

0801bc20 <__swsetup_r>:
 801bc20:	b538      	push	{r3, r4, r5, lr}
 801bc22:	4b2a      	ldr	r3, [pc, #168]	; (801bccc <__swsetup_r+0xac>)
 801bc24:	4605      	mov	r5, r0
 801bc26:	6818      	ldr	r0, [r3, #0]
 801bc28:	460c      	mov	r4, r1
 801bc2a:	b118      	cbz	r0, 801bc34 <__swsetup_r+0x14>
 801bc2c:	6a03      	ldr	r3, [r0, #32]
 801bc2e:	b90b      	cbnz	r3, 801bc34 <__swsetup_r+0x14>
 801bc30:	f7fc fc06 	bl	8018440 <__sinit>
 801bc34:	89a3      	ldrh	r3, [r4, #12]
 801bc36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bc3a:	0718      	lsls	r0, r3, #28
 801bc3c:	d422      	bmi.n	801bc84 <__swsetup_r+0x64>
 801bc3e:	06d9      	lsls	r1, r3, #27
 801bc40:	d407      	bmi.n	801bc52 <__swsetup_r+0x32>
 801bc42:	2309      	movs	r3, #9
 801bc44:	602b      	str	r3, [r5, #0]
 801bc46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bc4a:	81a3      	strh	r3, [r4, #12]
 801bc4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bc50:	e034      	b.n	801bcbc <__swsetup_r+0x9c>
 801bc52:	0758      	lsls	r0, r3, #29
 801bc54:	d512      	bpl.n	801bc7c <__swsetup_r+0x5c>
 801bc56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc58:	b141      	cbz	r1, 801bc6c <__swsetup_r+0x4c>
 801bc5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc5e:	4299      	cmp	r1, r3
 801bc60:	d002      	beq.n	801bc68 <__swsetup_r+0x48>
 801bc62:	4628      	mov	r0, r5
 801bc64:	f7fe f9fa 	bl	801a05c <_free_r>
 801bc68:	2300      	movs	r3, #0
 801bc6a:	6363      	str	r3, [r4, #52]	; 0x34
 801bc6c:	89a3      	ldrh	r3, [r4, #12]
 801bc6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bc72:	81a3      	strh	r3, [r4, #12]
 801bc74:	2300      	movs	r3, #0
 801bc76:	6063      	str	r3, [r4, #4]
 801bc78:	6923      	ldr	r3, [r4, #16]
 801bc7a:	6023      	str	r3, [r4, #0]
 801bc7c:	89a3      	ldrh	r3, [r4, #12]
 801bc7e:	f043 0308 	orr.w	r3, r3, #8
 801bc82:	81a3      	strh	r3, [r4, #12]
 801bc84:	6923      	ldr	r3, [r4, #16]
 801bc86:	b94b      	cbnz	r3, 801bc9c <__swsetup_r+0x7c>
 801bc88:	89a3      	ldrh	r3, [r4, #12]
 801bc8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bc8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bc92:	d003      	beq.n	801bc9c <__swsetup_r+0x7c>
 801bc94:	4621      	mov	r1, r4
 801bc96:	4628      	mov	r0, r5
 801bc98:	f000 f840 	bl	801bd1c <__smakebuf_r>
 801bc9c:	89a0      	ldrh	r0, [r4, #12]
 801bc9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bca2:	f010 0301 	ands.w	r3, r0, #1
 801bca6:	d00a      	beq.n	801bcbe <__swsetup_r+0x9e>
 801bca8:	2300      	movs	r3, #0
 801bcaa:	60a3      	str	r3, [r4, #8]
 801bcac:	6963      	ldr	r3, [r4, #20]
 801bcae:	425b      	negs	r3, r3
 801bcb0:	61a3      	str	r3, [r4, #24]
 801bcb2:	6923      	ldr	r3, [r4, #16]
 801bcb4:	b943      	cbnz	r3, 801bcc8 <__swsetup_r+0xa8>
 801bcb6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bcba:	d1c4      	bne.n	801bc46 <__swsetup_r+0x26>
 801bcbc:	bd38      	pop	{r3, r4, r5, pc}
 801bcbe:	0781      	lsls	r1, r0, #30
 801bcc0:	bf58      	it	pl
 801bcc2:	6963      	ldrpl	r3, [r4, #20]
 801bcc4:	60a3      	str	r3, [r4, #8]
 801bcc6:	e7f4      	b.n	801bcb2 <__swsetup_r+0x92>
 801bcc8:	2000      	movs	r0, #0
 801bcca:	e7f7      	b.n	801bcbc <__swsetup_r+0x9c>
 801bccc:	200001f0 	.word	0x200001f0

0801bcd0 <__swhatbuf_r>:
 801bcd0:	b570      	push	{r4, r5, r6, lr}
 801bcd2:	460c      	mov	r4, r1
 801bcd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bcd8:	2900      	cmp	r1, #0
 801bcda:	b096      	sub	sp, #88	; 0x58
 801bcdc:	4615      	mov	r5, r2
 801bcde:	461e      	mov	r6, r3
 801bce0:	da0d      	bge.n	801bcfe <__swhatbuf_r+0x2e>
 801bce2:	89a3      	ldrh	r3, [r4, #12]
 801bce4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801bce8:	f04f 0100 	mov.w	r1, #0
 801bcec:	bf0c      	ite	eq
 801bcee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801bcf2:	2340      	movne	r3, #64	; 0x40
 801bcf4:	2000      	movs	r0, #0
 801bcf6:	6031      	str	r1, [r6, #0]
 801bcf8:	602b      	str	r3, [r5, #0]
 801bcfa:	b016      	add	sp, #88	; 0x58
 801bcfc:	bd70      	pop	{r4, r5, r6, pc}
 801bcfe:	466a      	mov	r2, sp
 801bd00:	f000 f848 	bl	801bd94 <_fstat_r>
 801bd04:	2800      	cmp	r0, #0
 801bd06:	dbec      	blt.n	801bce2 <__swhatbuf_r+0x12>
 801bd08:	9901      	ldr	r1, [sp, #4]
 801bd0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801bd0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801bd12:	4259      	negs	r1, r3
 801bd14:	4159      	adcs	r1, r3
 801bd16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bd1a:	e7eb      	b.n	801bcf4 <__swhatbuf_r+0x24>

0801bd1c <__smakebuf_r>:
 801bd1c:	898b      	ldrh	r3, [r1, #12]
 801bd1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bd20:	079d      	lsls	r5, r3, #30
 801bd22:	4606      	mov	r6, r0
 801bd24:	460c      	mov	r4, r1
 801bd26:	d507      	bpl.n	801bd38 <__smakebuf_r+0x1c>
 801bd28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bd2c:	6023      	str	r3, [r4, #0]
 801bd2e:	6123      	str	r3, [r4, #16]
 801bd30:	2301      	movs	r3, #1
 801bd32:	6163      	str	r3, [r4, #20]
 801bd34:	b002      	add	sp, #8
 801bd36:	bd70      	pop	{r4, r5, r6, pc}
 801bd38:	ab01      	add	r3, sp, #4
 801bd3a:	466a      	mov	r2, sp
 801bd3c:	f7ff ffc8 	bl	801bcd0 <__swhatbuf_r>
 801bd40:	9900      	ldr	r1, [sp, #0]
 801bd42:	4605      	mov	r5, r0
 801bd44:	4630      	mov	r0, r6
 801bd46:	f7fe fead 	bl	801aaa4 <_malloc_r>
 801bd4a:	b948      	cbnz	r0, 801bd60 <__smakebuf_r+0x44>
 801bd4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bd50:	059a      	lsls	r2, r3, #22
 801bd52:	d4ef      	bmi.n	801bd34 <__smakebuf_r+0x18>
 801bd54:	f023 0303 	bic.w	r3, r3, #3
 801bd58:	f043 0302 	orr.w	r3, r3, #2
 801bd5c:	81a3      	strh	r3, [r4, #12]
 801bd5e:	e7e3      	b.n	801bd28 <__smakebuf_r+0xc>
 801bd60:	89a3      	ldrh	r3, [r4, #12]
 801bd62:	6020      	str	r0, [r4, #0]
 801bd64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bd68:	81a3      	strh	r3, [r4, #12]
 801bd6a:	9b00      	ldr	r3, [sp, #0]
 801bd6c:	6163      	str	r3, [r4, #20]
 801bd6e:	9b01      	ldr	r3, [sp, #4]
 801bd70:	6120      	str	r0, [r4, #16]
 801bd72:	b15b      	cbz	r3, 801bd8c <__smakebuf_r+0x70>
 801bd74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bd78:	4630      	mov	r0, r6
 801bd7a:	f000 f81d 	bl	801bdb8 <_isatty_r>
 801bd7e:	b128      	cbz	r0, 801bd8c <__smakebuf_r+0x70>
 801bd80:	89a3      	ldrh	r3, [r4, #12]
 801bd82:	f023 0303 	bic.w	r3, r3, #3
 801bd86:	f043 0301 	orr.w	r3, r3, #1
 801bd8a:	81a3      	strh	r3, [r4, #12]
 801bd8c:	89a3      	ldrh	r3, [r4, #12]
 801bd8e:	431d      	orrs	r5, r3
 801bd90:	81a5      	strh	r5, [r4, #12]
 801bd92:	e7cf      	b.n	801bd34 <__smakebuf_r+0x18>

0801bd94 <_fstat_r>:
 801bd94:	b538      	push	{r3, r4, r5, lr}
 801bd96:	4d07      	ldr	r5, [pc, #28]	; (801bdb4 <_fstat_r+0x20>)
 801bd98:	2300      	movs	r3, #0
 801bd9a:	4604      	mov	r4, r0
 801bd9c:	4608      	mov	r0, r1
 801bd9e:	4611      	mov	r1, r2
 801bda0:	602b      	str	r3, [r5, #0]
 801bda2:	f7e9 fa36 	bl	8005212 <_fstat>
 801bda6:	1c43      	adds	r3, r0, #1
 801bda8:	d102      	bne.n	801bdb0 <_fstat_r+0x1c>
 801bdaa:	682b      	ldr	r3, [r5, #0]
 801bdac:	b103      	cbz	r3, 801bdb0 <_fstat_r+0x1c>
 801bdae:	6023      	str	r3, [r4, #0]
 801bdb0:	bd38      	pop	{r3, r4, r5, pc}
 801bdb2:	bf00      	nop
 801bdb4:	2000886c 	.word	0x2000886c

0801bdb8 <_isatty_r>:
 801bdb8:	b538      	push	{r3, r4, r5, lr}
 801bdba:	4d06      	ldr	r5, [pc, #24]	; (801bdd4 <_isatty_r+0x1c>)
 801bdbc:	2300      	movs	r3, #0
 801bdbe:	4604      	mov	r4, r0
 801bdc0:	4608      	mov	r0, r1
 801bdc2:	602b      	str	r3, [r5, #0]
 801bdc4:	f7e9 fa35 	bl	8005232 <_isatty>
 801bdc8:	1c43      	adds	r3, r0, #1
 801bdca:	d102      	bne.n	801bdd2 <_isatty_r+0x1a>
 801bdcc:	682b      	ldr	r3, [r5, #0]
 801bdce:	b103      	cbz	r3, 801bdd2 <_isatty_r+0x1a>
 801bdd0:	6023      	str	r3, [r4, #0]
 801bdd2:	bd38      	pop	{r3, r4, r5, pc}
 801bdd4:	2000886c 	.word	0x2000886c

0801bdd8 <_raise_r>:
 801bdd8:	291f      	cmp	r1, #31
 801bdda:	b538      	push	{r3, r4, r5, lr}
 801bddc:	4604      	mov	r4, r0
 801bdde:	460d      	mov	r5, r1
 801bde0:	d904      	bls.n	801bdec <_raise_r+0x14>
 801bde2:	2316      	movs	r3, #22
 801bde4:	6003      	str	r3, [r0, #0]
 801bde6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bdea:	bd38      	pop	{r3, r4, r5, pc}
 801bdec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801bdee:	b112      	cbz	r2, 801bdf6 <_raise_r+0x1e>
 801bdf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bdf4:	b94b      	cbnz	r3, 801be0a <_raise_r+0x32>
 801bdf6:	4620      	mov	r0, r4
 801bdf8:	f000 f830 	bl	801be5c <_getpid_r>
 801bdfc:	462a      	mov	r2, r5
 801bdfe:	4601      	mov	r1, r0
 801be00:	4620      	mov	r0, r4
 801be02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801be06:	f000 b817 	b.w	801be38 <_kill_r>
 801be0a:	2b01      	cmp	r3, #1
 801be0c:	d00a      	beq.n	801be24 <_raise_r+0x4c>
 801be0e:	1c59      	adds	r1, r3, #1
 801be10:	d103      	bne.n	801be1a <_raise_r+0x42>
 801be12:	2316      	movs	r3, #22
 801be14:	6003      	str	r3, [r0, #0]
 801be16:	2001      	movs	r0, #1
 801be18:	e7e7      	b.n	801bdea <_raise_r+0x12>
 801be1a:	2400      	movs	r4, #0
 801be1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801be20:	4628      	mov	r0, r5
 801be22:	4798      	blx	r3
 801be24:	2000      	movs	r0, #0
 801be26:	e7e0      	b.n	801bdea <_raise_r+0x12>

0801be28 <raise>:
 801be28:	4b02      	ldr	r3, [pc, #8]	; (801be34 <raise+0xc>)
 801be2a:	4601      	mov	r1, r0
 801be2c:	6818      	ldr	r0, [r3, #0]
 801be2e:	f7ff bfd3 	b.w	801bdd8 <_raise_r>
 801be32:	bf00      	nop
 801be34:	200001f0 	.word	0x200001f0

0801be38 <_kill_r>:
 801be38:	b538      	push	{r3, r4, r5, lr}
 801be3a:	4d07      	ldr	r5, [pc, #28]	; (801be58 <_kill_r+0x20>)
 801be3c:	2300      	movs	r3, #0
 801be3e:	4604      	mov	r4, r0
 801be40:	4608      	mov	r0, r1
 801be42:	4611      	mov	r1, r2
 801be44:	602b      	str	r3, [r5, #0]
 801be46:	f7e9 f985 	bl	8005154 <_kill>
 801be4a:	1c43      	adds	r3, r0, #1
 801be4c:	d102      	bne.n	801be54 <_kill_r+0x1c>
 801be4e:	682b      	ldr	r3, [r5, #0]
 801be50:	b103      	cbz	r3, 801be54 <_kill_r+0x1c>
 801be52:	6023      	str	r3, [r4, #0]
 801be54:	bd38      	pop	{r3, r4, r5, pc}
 801be56:	bf00      	nop
 801be58:	2000886c 	.word	0x2000886c

0801be5c <_getpid_r>:
 801be5c:	f7e9 b972 	b.w	8005144 <_getpid>

0801be60 <asinf>:
 801be60:	b508      	push	{r3, lr}
 801be62:	ed2d 8b02 	vpush	{d8}
 801be66:	eeb0 8a40 	vmov.f32	s16, s0
 801be6a:	f000 fd0b 	bl	801c884 <__ieee754_asinf>
 801be6e:	eeb4 8a48 	vcmp.f32	s16, s16
 801be72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be76:	eef0 8a40 	vmov.f32	s17, s0
 801be7a:	d615      	bvs.n	801bea8 <asinf+0x48>
 801be7c:	eeb0 0a48 	vmov.f32	s0, s16
 801be80:	f000 f954 	bl	801c12c <fabsf>
 801be84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801be88:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801be8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be90:	dd0a      	ble.n	801bea8 <asinf+0x48>
 801be92:	f7fd fa1f 	bl	80192d4 <__errno>
 801be96:	ecbd 8b02 	vpop	{d8}
 801be9a:	2321      	movs	r3, #33	; 0x21
 801be9c:	6003      	str	r3, [r0, #0]
 801be9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801bea2:	4804      	ldr	r0, [pc, #16]	; (801beb4 <asinf+0x54>)
 801bea4:	f7fd ba58 	b.w	8019358 <nanf>
 801bea8:	eeb0 0a68 	vmov.f32	s0, s17
 801beac:	ecbd 8b02 	vpop	{d8}
 801beb0:	bd08      	pop	{r3, pc}
 801beb2:	bf00      	nop
 801beb4:	0801f237 	.word	0x0801f237

0801beb8 <atan2f>:
 801beb8:	f000 bdca 	b.w	801ca50 <__ieee754_atan2f>

0801bebc <atan2>:
 801bebc:	f000 b800 	b.w	801bec0 <__ieee754_atan2>

0801bec0 <__ieee754_atan2>:
 801bec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bec4:	ec57 6b11 	vmov	r6, r7, d1
 801bec8:	4273      	negs	r3, r6
 801beca:	f8df 817c 	ldr.w	r8, [pc, #380]	; 801c048 <__ieee754_atan2+0x188>
 801bece:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801bed2:	4333      	orrs	r3, r6
 801bed4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801bed8:	4543      	cmp	r3, r8
 801beda:	ec51 0b10 	vmov	r0, r1, d0
 801bede:	ee11 5a10 	vmov	r5, s2
 801bee2:	d80a      	bhi.n	801befa <__ieee754_atan2+0x3a>
 801bee4:	4244      	negs	r4, r0
 801bee6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801beea:	4304      	orrs	r4, r0
 801beec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801bef0:	4544      	cmp	r4, r8
 801bef2:	ee10 9a10 	vmov	r9, s0
 801bef6:	468e      	mov	lr, r1
 801bef8:	d907      	bls.n	801bf0a <__ieee754_atan2+0x4a>
 801befa:	4632      	mov	r2, r6
 801befc:	463b      	mov	r3, r7
 801befe:	f7e4 f9cf 	bl	80002a0 <__adddf3>
 801bf02:	ec41 0b10 	vmov	d0, r0, r1
 801bf06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bf0a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801bf0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801bf12:	4334      	orrs	r4, r6
 801bf14:	d103      	bne.n	801bf1e <__ieee754_atan2+0x5e>
 801bf16:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf1a:	f000 b911 	b.w	801c140 <atan>
 801bf1e:	17bc      	asrs	r4, r7, #30
 801bf20:	f004 0402 	and.w	r4, r4, #2
 801bf24:	ea53 0909 	orrs.w	r9, r3, r9
 801bf28:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801bf2c:	d107      	bne.n	801bf3e <__ieee754_atan2+0x7e>
 801bf2e:	2c02      	cmp	r4, #2
 801bf30:	d05f      	beq.n	801bff2 <__ieee754_atan2+0x132>
 801bf32:	2c03      	cmp	r4, #3
 801bf34:	d1e5      	bne.n	801bf02 <__ieee754_atan2+0x42>
 801bf36:	a140      	add	r1, pc, #256	; (adr r1, 801c038 <__ieee754_atan2+0x178>)
 801bf38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf3c:	e7e1      	b.n	801bf02 <__ieee754_atan2+0x42>
 801bf3e:	4315      	orrs	r5, r2
 801bf40:	d106      	bne.n	801bf50 <__ieee754_atan2+0x90>
 801bf42:	f1be 0f00 	cmp.w	lr, #0
 801bf46:	da5f      	bge.n	801c008 <__ieee754_atan2+0x148>
 801bf48:	a13d      	add	r1, pc, #244	; (adr r1, 801c040 <__ieee754_atan2+0x180>)
 801bf4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bf4e:	e7d8      	b.n	801bf02 <__ieee754_atan2+0x42>
 801bf50:	4542      	cmp	r2, r8
 801bf52:	d10f      	bne.n	801bf74 <__ieee754_atan2+0xb4>
 801bf54:	4293      	cmp	r3, r2
 801bf56:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801bf5a:	d107      	bne.n	801bf6c <__ieee754_atan2+0xac>
 801bf5c:	2c02      	cmp	r4, #2
 801bf5e:	d84c      	bhi.n	801bffa <__ieee754_atan2+0x13a>
 801bf60:	4b33      	ldr	r3, [pc, #204]	; (801c030 <__ieee754_atan2+0x170>)
 801bf62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bf66:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bf6a:	e7ca      	b.n	801bf02 <__ieee754_atan2+0x42>
 801bf6c:	2c02      	cmp	r4, #2
 801bf6e:	d848      	bhi.n	801c002 <__ieee754_atan2+0x142>
 801bf70:	4b30      	ldr	r3, [pc, #192]	; (801c034 <__ieee754_atan2+0x174>)
 801bf72:	e7f6      	b.n	801bf62 <__ieee754_atan2+0xa2>
 801bf74:	4543      	cmp	r3, r8
 801bf76:	d0e4      	beq.n	801bf42 <__ieee754_atan2+0x82>
 801bf78:	1a9b      	subs	r3, r3, r2
 801bf7a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801bf7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bf82:	da1e      	bge.n	801bfc2 <__ieee754_atan2+0x102>
 801bf84:	2f00      	cmp	r7, #0
 801bf86:	da01      	bge.n	801bf8c <__ieee754_atan2+0xcc>
 801bf88:	323c      	adds	r2, #60	; 0x3c
 801bf8a:	db1e      	blt.n	801bfca <__ieee754_atan2+0x10a>
 801bf8c:	4632      	mov	r2, r6
 801bf8e:	463b      	mov	r3, r7
 801bf90:	f7e4 fc66 	bl	8000860 <__aeabi_ddiv>
 801bf94:	ec41 0b10 	vmov	d0, r0, r1
 801bf98:	f000 fab8 	bl	801c50c <fabs>
 801bf9c:	f000 f8d0 	bl	801c140 <atan>
 801bfa0:	ec51 0b10 	vmov	r0, r1, d0
 801bfa4:	2c01      	cmp	r4, #1
 801bfa6:	d013      	beq.n	801bfd0 <__ieee754_atan2+0x110>
 801bfa8:	2c02      	cmp	r4, #2
 801bfaa:	d015      	beq.n	801bfd8 <__ieee754_atan2+0x118>
 801bfac:	2c00      	cmp	r4, #0
 801bfae:	d0a8      	beq.n	801bf02 <__ieee754_atan2+0x42>
 801bfb0:	a317      	add	r3, pc, #92	; (adr r3, 801c010 <__ieee754_atan2+0x150>)
 801bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfb6:	f7e4 f971 	bl	800029c <__aeabi_dsub>
 801bfba:	a317      	add	r3, pc, #92	; (adr r3, 801c018 <__ieee754_atan2+0x158>)
 801bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfc0:	e014      	b.n	801bfec <__ieee754_atan2+0x12c>
 801bfc2:	a117      	add	r1, pc, #92	; (adr r1, 801c020 <__ieee754_atan2+0x160>)
 801bfc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bfc8:	e7ec      	b.n	801bfa4 <__ieee754_atan2+0xe4>
 801bfca:	2000      	movs	r0, #0
 801bfcc:	2100      	movs	r1, #0
 801bfce:	e7e9      	b.n	801bfa4 <__ieee754_atan2+0xe4>
 801bfd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bfd4:	4619      	mov	r1, r3
 801bfd6:	e794      	b.n	801bf02 <__ieee754_atan2+0x42>
 801bfd8:	a30d      	add	r3, pc, #52	; (adr r3, 801c010 <__ieee754_atan2+0x150>)
 801bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfde:	f7e4 f95d 	bl	800029c <__aeabi_dsub>
 801bfe2:	4602      	mov	r2, r0
 801bfe4:	460b      	mov	r3, r1
 801bfe6:	a10c      	add	r1, pc, #48	; (adr r1, 801c018 <__ieee754_atan2+0x158>)
 801bfe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bfec:	f7e4 f956 	bl	800029c <__aeabi_dsub>
 801bff0:	e787      	b.n	801bf02 <__ieee754_atan2+0x42>
 801bff2:	a109      	add	r1, pc, #36	; (adr r1, 801c018 <__ieee754_atan2+0x158>)
 801bff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bff8:	e783      	b.n	801bf02 <__ieee754_atan2+0x42>
 801bffa:	a10b      	add	r1, pc, #44	; (adr r1, 801c028 <__ieee754_atan2+0x168>)
 801bffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c000:	e77f      	b.n	801bf02 <__ieee754_atan2+0x42>
 801c002:	2000      	movs	r0, #0
 801c004:	2100      	movs	r1, #0
 801c006:	e77c      	b.n	801bf02 <__ieee754_atan2+0x42>
 801c008:	a105      	add	r1, pc, #20	; (adr r1, 801c020 <__ieee754_atan2+0x160>)
 801c00a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c00e:	e778      	b.n	801bf02 <__ieee754_atan2+0x42>
 801c010:	33145c07 	.word	0x33145c07
 801c014:	3ca1a626 	.word	0x3ca1a626
 801c018:	54442d18 	.word	0x54442d18
 801c01c:	400921fb 	.word	0x400921fb
 801c020:	54442d18 	.word	0x54442d18
 801c024:	3ff921fb 	.word	0x3ff921fb
 801c028:	54442d18 	.word	0x54442d18
 801c02c:	3fe921fb 	.word	0x3fe921fb
 801c030:	0801f238 	.word	0x0801f238
 801c034:	0801f250 	.word	0x0801f250
 801c038:	54442d18 	.word	0x54442d18
 801c03c:	c00921fb 	.word	0xc00921fb
 801c040:	54442d18 	.word	0x54442d18
 801c044:	bff921fb 	.word	0xbff921fb
 801c048:	7ff00000 	.word	0x7ff00000

0801c04c <cosf>:
 801c04c:	ee10 3a10 	vmov	r3, s0
 801c050:	b507      	push	{r0, r1, r2, lr}
 801c052:	4a1e      	ldr	r2, [pc, #120]	; (801c0cc <cosf+0x80>)
 801c054:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c058:	4293      	cmp	r3, r2
 801c05a:	dc06      	bgt.n	801c06a <cosf+0x1e>
 801c05c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801c0d0 <cosf+0x84>
 801c060:	b003      	add	sp, #12
 801c062:	f85d eb04 	ldr.w	lr, [sp], #4
 801c066:	f000 ba87 	b.w	801c578 <__kernel_cosf>
 801c06a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c06e:	db04      	blt.n	801c07a <cosf+0x2e>
 801c070:	ee30 0a40 	vsub.f32	s0, s0, s0
 801c074:	b003      	add	sp, #12
 801c076:	f85d fb04 	ldr.w	pc, [sp], #4
 801c07a:	4668      	mov	r0, sp
 801c07c:	f000 ff68 	bl	801cf50 <__ieee754_rem_pio2f>
 801c080:	f000 0003 	and.w	r0, r0, #3
 801c084:	2801      	cmp	r0, #1
 801c086:	d009      	beq.n	801c09c <cosf+0x50>
 801c088:	2802      	cmp	r0, #2
 801c08a:	d010      	beq.n	801c0ae <cosf+0x62>
 801c08c:	b9b0      	cbnz	r0, 801c0bc <cosf+0x70>
 801c08e:	eddd 0a01 	vldr	s1, [sp, #4]
 801c092:	ed9d 0a00 	vldr	s0, [sp]
 801c096:	f000 fa6f 	bl	801c578 <__kernel_cosf>
 801c09a:	e7eb      	b.n	801c074 <cosf+0x28>
 801c09c:	eddd 0a01 	vldr	s1, [sp, #4]
 801c0a0:	ed9d 0a00 	vldr	s0, [sp]
 801c0a4:	f000 fac6 	bl	801c634 <__kernel_sinf>
 801c0a8:	eeb1 0a40 	vneg.f32	s0, s0
 801c0ac:	e7e2      	b.n	801c074 <cosf+0x28>
 801c0ae:	eddd 0a01 	vldr	s1, [sp, #4]
 801c0b2:	ed9d 0a00 	vldr	s0, [sp]
 801c0b6:	f000 fa5f 	bl	801c578 <__kernel_cosf>
 801c0ba:	e7f5      	b.n	801c0a8 <cosf+0x5c>
 801c0bc:	eddd 0a01 	vldr	s1, [sp, #4]
 801c0c0:	ed9d 0a00 	vldr	s0, [sp]
 801c0c4:	2001      	movs	r0, #1
 801c0c6:	f000 fab5 	bl	801c634 <__kernel_sinf>
 801c0ca:	e7d3      	b.n	801c074 <cosf+0x28>
 801c0cc:	3f490fd8 	.word	0x3f490fd8
 801c0d0:	00000000 	.word	0x00000000

0801c0d4 <sqrt>:
 801c0d4:	b538      	push	{r3, r4, r5, lr}
 801c0d6:	ed2d 8b02 	vpush	{d8}
 801c0da:	ec55 4b10 	vmov	r4, r5, d0
 801c0de:	f000 fd57 	bl	801cb90 <__ieee754_sqrt>
 801c0e2:	4622      	mov	r2, r4
 801c0e4:	462b      	mov	r3, r5
 801c0e6:	4620      	mov	r0, r4
 801c0e8:	4629      	mov	r1, r5
 801c0ea:	eeb0 8a40 	vmov.f32	s16, s0
 801c0ee:	eef0 8a60 	vmov.f32	s17, s1
 801c0f2:	f7e4 fd25 	bl	8000b40 <__aeabi_dcmpun>
 801c0f6:	b990      	cbnz	r0, 801c11e <sqrt+0x4a>
 801c0f8:	2200      	movs	r2, #0
 801c0fa:	2300      	movs	r3, #0
 801c0fc:	4620      	mov	r0, r4
 801c0fe:	4629      	mov	r1, r5
 801c100:	f7e4 fcf6 	bl	8000af0 <__aeabi_dcmplt>
 801c104:	b158      	cbz	r0, 801c11e <sqrt+0x4a>
 801c106:	f7fd f8e5 	bl	80192d4 <__errno>
 801c10a:	2321      	movs	r3, #33	; 0x21
 801c10c:	6003      	str	r3, [r0, #0]
 801c10e:	2200      	movs	r2, #0
 801c110:	2300      	movs	r3, #0
 801c112:	4610      	mov	r0, r2
 801c114:	4619      	mov	r1, r3
 801c116:	f7e4 fba3 	bl	8000860 <__aeabi_ddiv>
 801c11a:	ec41 0b18 	vmov	d8, r0, r1
 801c11e:	eeb0 0a48 	vmov.f32	s0, s16
 801c122:	eef0 0a68 	vmov.f32	s1, s17
 801c126:	ecbd 8b02 	vpop	{d8}
 801c12a:	bd38      	pop	{r3, r4, r5, pc}

0801c12c <fabsf>:
 801c12c:	ee10 3a10 	vmov	r3, s0
 801c130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c134:	ee00 3a10 	vmov	s0, r3
 801c138:	4770      	bx	lr
 801c13a:	0000      	movs	r0, r0
 801c13c:	0000      	movs	r0, r0
	...

0801c140 <atan>:
 801c140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c144:	ec55 4b10 	vmov	r4, r5, d0
 801c148:	4bc3      	ldr	r3, [pc, #780]	; (801c458 <atan+0x318>)
 801c14a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c14e:	429e      	cmp	r6, r3
 801c150:	46ab      	mov	fp, r5
 801c152:	dd18      	ble.n	801c186 <atan+0x46>
 801c154:	4bc1      	ldr	r3, [pc, #772]	; (801c45c <atan+0x31c>)
 801c156:	429e      	cmp	r6, r3
 801c158:	dc01      	bgt.n	801c15e <atan+0x1e>
 801c15a:	d109      	bne.n	801c170 <atan+0x30>
 801c15c:	b144      	cbz	r4, 801c170 <atan+0x30>
 801c15e:	4622      	mov	r2, r4
 801c160:	462b      	mov	r3, r5
 801c162:	4620      	mov	r0, r4
 801c164:	4629      	mov	r1, r5
 801c166:	f7e4 f89b 	bl	80002a0 <__adddf3>
 801c16a:	4604      	mov	r4, r0
 801c16c:	460d      	mov	r5, r1
 801c16e:	e006      	b.n	801c17e <atan+0x3e>
 801c170:	f1bb 0f00 	cmp.w	fp, #0
 801c174:	f300 8131 	bgt.w	801c3da <atan+0x29a>
 801c178:	a59b      	add	r5, pc, #620	; (adr r5, 801c3e8 <atan+0x2a8>)
 801c17a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c17e:	ec45 4b10 	vmov	d0, r4, r5
 801c182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c186:	4bb6      	ldr	r3, [pc, #728]	; (801c460 <atan+0x320>)
 801c188:	429e      	cmp	r6, r3
 801c18a:	dc14      	bgt.n	801c1b6 <atan+0x76>
 801c18c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801c190:	429e      	cmp	r6, r3
 801c192:	dc0d      	bgt.n	801c1b0 <atan+0x70>
 801c194:	a396      	add	r3, pc, #600	; (adr r3, 801c3f0 <atan+0x2b0>)
 801c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c19a:	ee10 0a10 	vmov	r0, s0
 801c19e:	4629      	mov	r1, r5
 801c1a0:	f7e4 f87e 	bl	80002a0 <__adddf3>
 801c1a4:	4baf      	ldr	r3, [pc, #700]	; (801c464 <atan+0x324>)
 801c1a6:	2200      	movs	r2, #0
 801c1a8:	f7e4 fcc0 	bl	8000b2c <__aeabi_dcmpgt>
 801c1ac:	2800      	cmp	r0, #0
 801c1ae:	d1e6      	bne.n	801c17e <atan+0x3e>
 801c1b0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801c1b4:	e02b      	b.n	801c20e <atan+0xce>
 801c1b6:	f000 f9a9 	bl	801c50c <fabs>
 801c1ba:	4bab      	ldr	r3, [pc, #684]	; (801c468 <atan+0x328>)
 801c1bc:	429e      	cmp	r6, r3
 801c1be:	ec55 4b10 	vmov	r4, r5, d0
 801c1c2:	f300 80bf 	bgt.w	801c344 <atan+0x204>
 801c1c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801c1ca:	429e      	cmp	r6, r3
 801c1cc:	f300 80a0 	bgt.w	801c310 <atan+0x1d0>
 801c1d0:	ee10 2a10 	vmov	r2, s0
 801c1d4:	ee10 0a10 	vmov	r0, s0
 801c1d8:	462b      	mov	r3, r5
 801c1da:	4629      	mov	r1, r5
 801c1dc:	f7e4 f860 	bl	80002a0 <__adddf3>
 801c1e0:	4ba0      	ldr	r3, [pc, #640]	; (801c464 <atan+0x324>)
 801c1e2:	2200      	movs	r2, #0
 801c1e4:	f7e4 f85a 	bl	800029c <__aeabi_dsub>
 801c1e8:	2200      	movs	r2, #0
 801c1ea:	4606      	mov	r6, r0
 801c1ec:	460f      	mov	r7, r1
 801c1ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c1f2:	4620      	mov	r0, r4
 801c1f4:	4629      	mov	r1, r5
 801c1f6:	f7e4 f853 	bl	80002a0 <__adddf3>
 801c1fa:	4602      	mov	r2, r0
 801c1fc:	460b      	mov	r3, r1
 801c1fe:	4630      	mov	r0, r6
 801c200:	4639      	mov	r1, r7
 801c202:	f7e4 fb2d 	bl	8000860 <__aeabi_ddiv>
 801c206:	f04f 0a00 	mov.w	sl, #0
 801c20a:	4604      	mov	r4, r0
 801c20c:	460d      	mov	r5, r1
 801c20e:	4622      	mov	r2, r4
 801c210:	462b      	mov	r3, r5
 801c212:	4620      	mov	r0, r4
 801c214:	4629      	mov	r1, r5
 801c216:	f7e4 f9f9 	bl	800060c <__aeabi_dmul>
 801c21a:	4602      	mov	r2, r0
 801c21c:	460b      	mov	r3, r1
 801c21e:	4680      	mov	r8, r0
 801c220:	4689      	mov	r9, r1
 801c222:	f7e4 f9f3 	bl	800060c <__aeabi_dmul>
 801c226:	a374      	add	r3, pc, #464	; (adr r3, 801c3f8 <atan+0x2b8>)
 801c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c22c:	4606      	mov	r6, r0
 801c22e:	460f      	mov	r7, r1
 801c230:	f7e4 f9ec 	bl	800060c <__aeabi_dmul>
 801c234:	a372      	add	r3, pc, #456	; (adr r3, 801c400 <atan+0x2c0>)
 801c236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c23a:	f7e4 f831 	bl	80002a0 <__adddf3>
 801c23e:	4632      	mov	r2, r6
 801c240:	463b      	mov	r3, r7
 801c242:	f7e4 f9e3 	bl	800060c <__aeabi_dmul>
 801c246:	a370      	add	r3, pc, #448	; (adr r3, 801c408 <atan+0x2c8>)
 801c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c24c:	f7e4 f828 	bl	80002a0 <__adddf3>
 801c250:	4632      	mov	r2, r6
 801c252:	463b      	mov	r3, r7
 801c254:	f7e4 f9da 	bl	800060c <__aeabi_dmul>
 801c258:	a36d      	add	r3, pc, #436	; (adr r3, 801c410 <atan+0x2d0>)
 801c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c25e:	f7e4 f81f 	bl	80002a0 <__adddf3>
 801c262:	4632      	mov	r2, r6
 801c264:	463b      	mov	r3, r7
 801c266:	f7e4 f9d1 	bl	800060c <__aeabi_dmul>
 801c26a:	a36b      	add	r3, pc, #428	; (adr r3, 801c418 <atan+0x2d8>)
 801c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c270:	f7e4 f816 	bl	80002a0 <__adddf3>
 801c274:	4632      	mov	r2, r6
 801c276:	463b      	mov	r3, r7
 801c278:	f7e4 f9c8 	bl	800060c <__aeabi_dmul>
 801c27c:	a368      	add	r3, pc, #416	; (adr r3, 801c420 <atan+0x2e0>)
 801c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c282:	f7e4 f80d 	bl	80002a0 <__adddf3>
 801c286:	4642      	mov	r2, r8
 801c288:	464b      	mov	r3, r9
 801c28a:	f7e4 f9bf 	bl	800060c <__aeabi_dmul>
 801c28e:	a366      	add	r3, pc, #408	; (adr r3, 801c428 <atan+0x2e8>)
 801c290:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c294:	4680      	mov	r8, r0
 801c296:	4689      	mov	r9, r1
 801c298:	4630      	mov	r0, r6
 801c29a:	4639      	mov	r1, r7
 801c29c:	f7e4 f9b6 	bl	800060c <__aeabi_dmul>
 801c2a0:	a363      	add	r3, pc, #396	; (adr r3, 801c430 <atan+0x2f0>)
 801c2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2a6:	f7e3 fff9 	bl	800029c <__aeabi_dsub>
 801c2aa:	4632      	mov	r2, r6
 801c2ac:	463b      	mov	r3, r7
 801c2ae:	f7e4 f9ad 	bl	800060c <__aeabi_dmul>
 801c2b2:	a361      	add	r3, pc, #388	; (adr r3, 801c438 <atan+0x2f8>)
 801c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2b8:	f7e3 fff0 	bl	800029c <__aeabi_dsub>
 801c2bc:	4632      	mov	r2, r6
 801c2be:	463b      	mov	r3, r7
 801c2c0:	f7e4 f9a4 	bl	800060c <__aeabi_dmul>
 801c2c4:	a35e      	add	r3, pc, #376	; (adr r3, 801c440 <atan+0x300>)
 801c2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2ca:	f7e3 ffe7 	bl	800029c <__aeabi_dsub>
 801c2ce:	4632      	mov	r2, r6
 801c2d0:	463b      	mov	r3, r7
 801c2d2:	f7e4 f99b 	bl	800060c <__aeabi_dmul>
 801c2d6:	a35c      	add	r3, pc, #368	; (adr r3, 801c448 <atan+0x308>)
 801c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2dc:	f7e3 ffde 	bl	800029c <__aeabi_dsub>
 801c2e0:	4632      	mov	r2, r6
 801c2e2:	463b      	mov	r3, r7
 801c2e4:	f7e4 f992 	bl	800060c <__aeabi_dmul>
 801c2e8:	4602      	mov	r2, r0
 801c2ea:	460b      	mov	r3, r1
 801c2ec:	4640      	mov	r0, r8
 801c2ee:	4649      	mov	r1, r9
 801c2f0:	f7e3 ffd6 	bl	80002a0 <__adddf3>
 801c2f4:	4622      	mov	r2, r4
 801c2f6:	462b      	mov	r3, r5
 801c2f8:	f7e4 f988 	bl	800060c <__aeabi_dmul>
 801c2fc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 801c300:	4602      	mov	r2, r0
 801c302:	460b      	mov	r3, r1
 801c304:	d14b      	bne.n	801c39e <atan+0x25e>
 801c306:	4620      	mov	r0, r4
 801c308:	4629      	mov	r1, r5
 801c30a:	f7e3 ffc7 	bl	800029c <__aeabi_dsub>
 801c30e:	e72c      	b.n	801c16a <atan+0x2a>
 801c310:	ee10 0a10 	vmov	r0, s0
 801c314:	4b53      	ldr	r3, [pc, #332]	; (801c464 <atan+0x324>)
 801c316:	2200      	movs	r2, #0
 801c318:	4629      	mov	r1, r5
 801c31a:	f7e3 ffbf 	bl	800029c <__aeabi_dsub>
 801c31e:	4b51      	ldr	r3, [pc, #324]	; (801c464 <atan+0x324>)
 801c320:	4606      	mov	r6, r0
 801c322:	460f      	mov	r7, r1
 801c324:	2200      	movs	r2, #0
 801c326:	4620      	mov	r0, r4
 801c328:	4629      	mov	r1, r5
 801c32a:	f7e3 ffb9 	bl	80002a0 <__adddf3>
 801c32e:	4602      	mov	r2, r0
 801c330:	460b      	mov	r3, r1
 801c332:	4630      	mov	r0, r6
 801c334:	4639      	mov	r1, r7
 801c336:	f7e4 fa93 	bl	8000860 <__aeabi_ddiv>
 801c33a:	f04f 0a01 	mov.w	sl, #1
 801c33e:	4604      	mov	r4, r0
 801c340:	460d      	mov	r5, r1
 801c342:	e764      	b.n	801c20e <atan+0xce>
 801c344:	4b49      	ldr	r3, [pc, #292]	; (801c46c <atan+0x32c>)
 801c346:	429e      	cmp	r6, r3
 801c348:	da1d      	bge.n	801c386 <atan+0x246>
 801c34a:	ee10 0a10 	vmov	r0, s0
 801c34e:	4b48      	ldr	r3, [pc, #288]	; (801c470 <atan+0x330>)
 801c350:	2200      	movs	r2, #0
 801c352:	4629      	mov	r1, r5
 801c354:	f7e3 ffa2 	bl	800029c <__aeabi_dsub>
 801c358:	4b45      	ldr	r3, [pc, #276]	; (801c470 <atan+0x330>)
 801c35a:	4606      	mov	r6, r0
 801c35c:	460f      	mov	r7, r1
 801c35e:	2200      	movs	r2, #0
 801c360:	4620      	mov	r0, r4
 801c362:	4629      	mov	r1, r5
 801c364:	f7e4 f952 	bl	800060c <__aeabi_dmul>
 801c368:	4b3e      	ldr	r3, [pc, #248]	; (801c464 <atan+0x324>)
 801c36a:	2200      	movs	r2, #0
 801c36c:	f7e3 ff98 	bl	80002a0 <__adddf3>
 801c370:	4602      	mov	r2, r0
 801c372:	460b      	mov	r3, r1
 801c374:	4630      	mov	r0, r6
 801c376:	4639      	mov	r1, r7
 801c378:	f7e4 fa72 	bl	8000860 <__aeabi_ddiv>
 801c37c:	f04f 0a02 	mov.w	sl, #2
 801c380:	4604      	mov	r4, r0
 801c382:	460d      	mov	r5, r1
 801c384:	e743      	b.n	801c20e <atan+0xce>
 801c386:	462b      	mov	r3, r5
 801c388:	ee10 2a10 	vmov	r2, s0
 801c38c:	4939      	ldr	r1, [pc, #228]	; (801c474 <atan+0x334>)
 801c38e:	2000      	movs	r0, #0
 801c390:	f7e4 fa66 	bl	8000860 <__aeabi_ddiv>
 801c394:	f04f 0a03 	mov.w	sl, #3
 801c398:	4604      	mov	r4, r0
 801c39a:	460d      	mov	r5, r1
 801c39c:	e737      	b.n	801c20e <atan+0xce>
 801c39e:	4b36      	ldr	r3, [pc, #216]	; (801c478 <atan+0x338>)
 801c3a0:	4e36      	ldr	r6, [pc, #216]	; (801c47c <atan+0x33c>)
 801c3a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3aa:	f7e3 ff77 	bl	800029c <__aeabi_dsub>
 801c3ae:	4622      	mov	r2, r4
 801c3b0:	462b      	mov	r3, r5
 801c3b2:	f7e3 ff73 	bl	800029c <__aeabi_dsub>
 801c3b6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c3ba:	4602      	mov	r2, r0
 801c3bc:	460b      	mov	r3, r1
 801c3be:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c3c2:	f7e3 ff6b 	bl	800029c <__aeabi_dsub>
 801c3c6:	f1bb 0f00 	cmp.w	fp, #0
 801c3ca:	4604      	mov	r4, r0
 801c3cc:	460d      	mov	r5, r1
 801c3ce:	f6bf aed6 	bge.w	801c17e <atan+0x3e>
 801c3d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c3d6:	461d      	mov	r5, r3
 801c3d8:	e6d1      	b.n	801c17e <atan+0x3e>
 801c3da:	a51d      	add	r5, pc, #116	; (adr r5, 801c450 <atan+0x310>)
 801c3dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c3e0:	e6cd      	b.n	801c17e <atan+0x3e>
 801c3e2:	bf00      	nop
 801c3e4:	f3af 8000 	nop.w
 801c3e8:	54442d18 	.word	0x54442d18
 801c3ec:	bff921fb 	.word	0xbff921fb
 801c3f0:	8800759c 	.word	0x8800759c
 801c3f4:	7e37e43c 	.word	0x7e37e43c
 801c3f8:	e322da11 	.word	0xe322da11
 801c3fc:	3f90ad3a 	.word	0x3f90ad3a
 801c400:	24760deb 	.word	0x24760deb
 801c404:	3fa97b4b 	.word	0x3fa97b4b
 801c408:	a0d03d51 	.word	0xa0d03d51
 801c40c:	3fb10d66 	.word	0x3fb10d66
 801c410:	c54c206e 	.word	0xc54c206e
 801c414:	3fb745cd 	.word	0x3fb745cd
 801c418:	920083ff 	.word	0x920083ff
 801c41c:	3fc24924 	.word	0x3fc24924
 801c420:	5555550d 	.word	0x5555550d
 801c424:	3fd55555 	.word	0x3fd55555
 801c428:	2c6a6c2f 	.word	0x2c6a6c2f
 801c42c:	bfa2b444 	.word	0xbfa2b444
 801c430:	52defd9a 	.word	0x52defd9a
 801c434:	3fadde2d 	.word	0x3fadde2d
 801c438:	af749a6d 	.word	0xaf749a6d
 801c43c:	3fb3b0f2 	.word	0x3fb3b0f2
 801c440:	fe231671 	.word	0xfe231671
 801c444:	3fbc71c6 	.word	0x3fbc71c6
 801c448:	9998ebc4 	.word	0x9998ebc4
 801c44c:	3fc99999 	.word	0x3fc99999
 801c450:	54442d18 	.word	0x54442d18
 801c454:	3ff921fb 	.word	0x3ff921fb
 801c458:	440fffff 	.word	0x440fffff
 801c45c:	7ff00000 	.word	0x7ff00000
 801c460:	3fdbffff 	.word	0x3fdbffff
 801c464:	3ff00000 	.word	0x3ff00000
 801c468:	3ff2ffff 	.word	0x3ff2ffff
 801c46c:	40038000 	.word	0x40038000
 801c470:	3ff80000 	.word	0x3ff80000
 801c474:	bff00000 	.word	0xbff00000
 801c478:	0801f288 	.word	0x0801f288
 801c47c:	0801f268 	.word	0x0801f268

0801c480 <sinf>:
 801c480:	ee10 3a10 	vmov	r3, s0
 801c484:	b507      	push	{r0, r1, r2, lr}
 801c486:	4a1f      	ldr	r2, [pc, #124]	; (801c504 <sinf+0x84>)
 801c488:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c48c:	4293      	cmp	r3, r2
 801c48e:	dc07      	bgt.n	801c4a0 <sinf+0x20>
 801c490:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801c508 <sinf+0x88>
 801c494:	2000      	movs	r0, #0
 801c496:	b003      	add	sp, #12
 801c498:	f85d eb04 	ldr.w	lr, [sp], #4
 801c49c:	f000 b8ca 	b.w	801c634 <__kernel_sinf>
 801c4a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c4a4:	db04      	blt.n	801c4b0 <sinf+0x30>
 801c4a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 801c4aa:	b003      	add	sp, #12
 801c4ac:	f85d fb04 	ldr.w	pc, [sp], #4
 801c4b0:	4668      	mov	r0, sp
 801c4b2:	f000 fd4d 	bl	801cf50 <__ieee754_rem_pio2f>
 801c4b6:	f000 0003 	and.w	r0, r0, #3
 801c4ba:	2801      	cmp	r0, #1
 801c4bc:	d00a      	beq.n	801c4d4 <sinf+0x54>
 801c4be:	2802      	cmp	r0, #2
 801c4c0:	d00f      	beq.n	801c4e2 <sinf+0x62>
 801c4c2:	b9c0      	cbnz	r0, 801c4f6 <sinf+0x76>
 801c4c4:	eddd 0a01 	vldr	s1, [sp, #4]
 801c4c8:	ed9d 0a00 	vldr	s0, [sp]
 801c4cc:	2001      	movs	r0, #1
 801c4ce:	f000 f8b1 	bl	801c634 <__kernel_sinf>
 801c4d2:	e7ea      	b.n	801c4aa <sinf+0x2a>
 801c4d4:	eddd 0a01 	vldr	s1, [sp, #4]
 801c4d8:	ed9d 0a00 	vldr	s0, [sp]
 801c4dc:	f000 f84c 	bl	801c578 <__kernel_cosf>
 801c4e0:	e7e3      	b.n	801c4aa <sinf+0x2a>
 801c4e2:	eddd 0a01 	vldr	s1, [sp, #4]
 801c4e6:	ed9d 0a00 	vldr	s0, [sp]
 801c4ea:	2001      	movs	r0, #1
 801c4ec:	f000 f8a2 	bl	801c634 <__kernel_sinf>
 801c4f0:	eeb1 0a40 	vneg.f32	s0, s0
 801c4f4:	e7d9      	b.n	801c4aa <sinf+0x2a>
 801c4f6:	eddd 0a01 	vldr	s1, [sp, #4]
 801c4fa:	ed9d 0a00 	vldr	s0, [sp]
 801c4fe:	f000 f83b 	bl	801c578 <__kernel_cosf>
 801c502:	e7f5      	b.n	801c4f0 <sinf+0x70>
 801c504:	3f490fd8 	.word	0x3f490fd8
 801c508:	00000000 	.word	0x00000000

0801c50c <fabs>:
 801c50c:	ec51 0b10 	vmov	r0, r1, d0
 801c510:	ee10 2a10 	vmov	r2, s0
 801c514:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c518:	ec43 2b10 	vmov	d0, r2, r3
 801c51c:	4770      	bx	lr
	...

0801c520 <tanf>:
 801c520:	ee10 3a10 	vmov	r3, s0
 801c524:	b507      	push	{r0, r1, r2, lr}
 801c526:	4a12      	ldr	r2, [pc, #72]	; (801c570 <tanf+0x50>)
 801c528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c52c:	4293      	cmp	r3, r2
 801c52e:	dc07      	bgt.n	801c540 <tanf+0x20>
 801c530:	eddf 0a10 	vldr	s1, [pc, #64]	; 801c574 <tanf+0x54>
 801c534:	2001      	movs	r0, #1
 801c536:	b003      	add	sp, #12
 801c538:	f85d eb04 	ldr.w	lr, [sp], #4
 801c53c:	f000 b8c2 	b.w	801c6c4 <__kernel_tanf>
 801c540:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c544:	db04      	blt.n	801c550 <tanf+0x30>
 801c546:	ee30 0a40 	vsub.f32	s0, s0, s0
 801c54a:	b003      	add	sp, #12
 801c54c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c550:	4668      	mov	r0, sp
 801c552:	f000 fcfd 	bl	801cf50 <__ieee754_rem_pio2f>
 801c556:	0040      	lsls	r0, r0, #1
 801c558:	f000 0002 	and.w	r0, r0, #2
 801c55c:	eddd 0a01 	vldr	s1, [sp, #4]
 801c560:	ed9d 0a00 	vldr	s0, [sp]
 801c564:	f1c0 0001 	rsb	r0, r0, #1
 801c568:	f000 f8ac 	bl	801c6c4 <__kernel_tanf>
 801c56c:	e7ed      	b.n	801c54a <tanf+0x2a>
 801c56e:	bf00      	nop
 801c570:	3f490fda 	.word	0x3f490fda
 801c574:	00000000 	.word	0x00000000

0801c578 <__kernel_cosf>:
 801c578:	ee10 3a10 	vmov	r3, s0
 801c57c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c580:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801c584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c588:	da05      	bge.n	801c596 <__kernel_cosf+0x1e>
 801c58a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c58e:	ee17 2a90 	vmov	r2, s15
 801c592:	2a00      	cmp	r2, #0
 801c594:	d03b      	beq.n	801c60e <__kernel_cosf+0x96>
 801c596:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c59a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801c614 <__kernel_cosf+0x9c>
 801c59e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801c618 <__kernel_cosf+0xa0>
 801c5a2:	4a1e      	ldr	r2, [pc, #120]	; (801c61c <__kernel_cosf+0xa4>)
 801c5a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c5a8:	4293      	cmp	r3, r2
 801c5aa:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801c620 <__kernel_cosf+0xa8>
 801c5ae:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c5b2:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801c624 <__kernel_cosf+0xac>
 801c5b6:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c5ba:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801c628 <__kernel_cosf+0xb0>
 801c5be:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c5c2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801c62c <__kernel_cosf+0xb4>
 801c5c6:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c5ca:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801c5ce:	ee26 6a07 	vmul.f32	s12, s12, s14
 801c5d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c5d6:	eee7 0a06 	vfma.f32	s1, s14, s12
 801c5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c5de:	dc04      	bgt.n	801c5ea <__kernel_cosf+0x72>
 801c5e0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c5e4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801c5e8:	4770      	bx	lr
 801c5ea:	4a11      	ldr	r2, [pc, #68]	; (801c630 <__kernel_cosf+0xb8>)
 801c5ec:	4293      	cmp	r3, r2
 801c5ee:	bfda      	itte	le
 801c5f0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801c5f4:	ee07 3a10 	vmovle	s14, r3
 801c5f8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801c5fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c600:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801c604:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c608:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c60c:	4770      	bx	lr
 801c60e:	eeb0 0a66 	vmov.f32	s0, s13
 801c612:	4770      	bx	lr
 801c614:	ad47d74e 	.word	0xad47d74e
 801c618:	310f74f6 	.word	0x310f74f6
 801c61c:	3e999999 	.word	0x3e999999
 801c620:	b493f27c 	.word	0xb493f27c
 801c624:	37d00d01 	.word	0x37d00d01
 801c628:	bab60b61 	.word	0xbab60b61
 801c62c:	3d2aaaab 	.word	0x3d2aaaab
 801c630:	3f480000 	.word	0x3f480000

0801c634 <__kernel_sinf>:
 801c634:	ee10 3a10 	vmov	r3, s0
 801c638:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c63c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801c640:	da04      	bge.n	801c64c <__kernel_sinf+0x18>
 801c642:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c646:	ee17 3a90 	vmov	r3, s15
 801c64a:	b35b      	cbz	r3, 801c6a4 <__kernel_sinf+0x70>
 801c64c:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c650:	eddf 7a15 	vldr	s15, [pc, #84]	; 801c6a8 <__kernel_sinf+0x74>
 801c654:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801c6ac <__kernel_sinf+0x78>
 801c658:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c65c:	eddf 7a14 	vldr	s15, [pc, #80]	; 801c6b0 <__kernel_sinf+0x7c>
 801c660:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c664:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801c6b4 <__kernel_sinf+0x80>
 801c668:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c66c:	eddf 7a12 	vldr	s15, [pc, #72]	; 801c6b8 <__kernel_sinf+0x84>
 801c670:	ee60 6a07 	vmul.f32	s13, s0, s14
 801c674:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c678:	b930      	cbnz	r0, 801c688 <__kernel_sinf+0x54>
 801c67a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801c6bc <__kernel_sinf+0x88>
 801c67e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c682:	eea6 0a26 	vfma.f32	s0, s12, s13
 801c686:	4770      	bx	lr
 801c688:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801c68c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801c690:	eee0 7a86 	vfma.f32	s15, s1, s12
 801c694:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801c698:	eddf 7a09 	vldr	s15, [pc, #36]	; 801c6c0 <__kernel_sinf+0x8c>
 801c69c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801c6a0:	ee30 0a60 	vsub.f32	s0, s0, s1
 801c6a4:	4770      	bx	lr
 801c6a6:	bf00      	nop
 801c6a8:	2f2ec9d3 	.word	0x2f2ec9d3
 801c6ac:	b2d72f34 	.word	0xb2d72f34
 801c6b0:	3638ef1b 	.word	0x3638ef1b
 801c6b4:	b9500d01 	.word	0xb9500d01
 801c6b8:	3c088889 	.word	0x3c088889
 801c6bc:	be2aaaab 	.word	0xbe2aaaab
 801c6c0:	3e2aaaab 	.word	0x3e2aaaab

0801c6c4 <__kernel_tanf>:
 801c6c4:	b508      	push	{r3, lr}
 801c6c6:	ee10 3a10 	vmov	r3, s0
 801c6ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c6ce:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801c6d2:	eef0 7a40 	vmov.f32	s15, s0
 801c6d6:	da17      	bge.n	801c708 <__kernel_tanf+0x44>
 801c6d8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801c6dc:	ee17 1a10 	vmov	r1, s14
 801c6e0:	bb41      	cbnz	r1, 801c734 <__kernel_tanf+0x70>
 801c6e2:	1c43      	adds	r3, r0, #1
 801c6e4:	4313      	orrs	r3, r2
 801c6e6:	d108      	bne.n	801c6fa <__kernel_tanf+0x36>
 801c6e8:	f7ff fd20 	bl	801c12c <fabsf>
 801c6ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c6f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c6f4:	eeb0 0a67 	vmov.f32	s0, s15
 801c6f8:	bd08      	pop	{r3, pc}
 801c6fa:	2801      	cmp	r0, #1
 801c6fc:	d0fa      	beq.n	801c6f4 <__kernel_tanf+0x30>
 801c6fe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801c702:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c706:	e7f5      	b.n	801c6f4 <__kernel_tanf+0x30>
 801c708:	494c      	ldr	r1, [pc, #304]	; (801c83c <__kernel_tanf+0x178>)
 801c70a:	428a      	cmp	r2, r1
 801c70c:	db12      	blt.n	801c734 <__kernel_tanf+0x70>
 801c70e:	2b00      	cmp	r3, #0
 801c710:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801c840 <__kernel_tanf+0x17c>
 801c714:	bfb8      	it	lt
 801c716:	eef1 7a40 	vneglt.f32	s15, s0
 801c71a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c71e:	eddf 7a49 	vldr	s15, [pc, #292]	; 801c844 <__kernel_tanf+0x180>
 801c722:	bfb8      	it	lt
 801c724:	eef1 0a60 	vneglt.f32	s1, s1
 801c728:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c72c:	eddf 0a46 	vldr	s1, [pc, #280]	; 801c848 <__kernel_tanf+0x184>
 801c730:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c734:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801c738:	eddf 5a44 	vldr	s11, [pc, #272]	; 801c84c <__kernel_tanf+0x188>
 801c73c:	ed9f 6a44 	vldr	s12, [pc, #272]	; 801c850 <__kernel_tanf+0x18c>
 801c740:	ed9f 5a44 	vldr	s10, [pc, #272]	; 801c854 <__kernel_tanf+0x190>
 801c744:	493d      	ldr	r1, [pc, #244]	; (801c83c <__kernel_tanf+0x178>)
 801c746:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801c74a:	428a      	cmp	r2, r1
 801c74c:	eea7 6a25 	vfma.f32	s12, s14, s11
 801c750:	eddf 5a41 	vldr	s11, [pc, #260]	; 801c858 <__kernel_tanf+0x194>
 801c754:	eee6 5a07 	vfma.f32	s11, s12, s14
 801c758:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801c85c <__kernel_tanf+0x198>
 801c75c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c760:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801c860 <__kernel_tanf+0x19c>
 801c764:	eee6 5a07 	vfma.f32	s11, s12, s14
 801c768:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801c864 <__kernel_tanf+0x1a0>
 801c76c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c770:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801c868 <__kernel_tanf+0x1a4>
 801c774:	eee7 5a05 	vfma.f32	s11, s14, s10
 801c778:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801c86c <__kernel_tanf+0x1a8>
 801c77c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c780:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801c870 <__kernel_tanf+0x1ac>
 801c784:	eee5 5a07 	vfma.f32	s11, s10, s14
 801c788:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801c874 <__kernel_tanf+0x1b0>
 801c78c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c790:	eddf 5a39 	vldr	s11, [pc, #228]	; 801c878 <__kernel_tanf+0x1b4>
 801c794:	eee5 5a07 	vfma.f32	s11, s10, s14
 801c798:	eeb0 7a46 	vmov.f32	s14, s12
 801c79c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801c7a0:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801c7a4:	eeb0 6a60 	vmov.f32	s12, s1
 801c7a8:	eea7 6a05 	vfma.f32	s12, s14, s10
 801c7ac:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801c87c <__kernel_tanf+0x1b8>
 801c7b0:	eee6 0a26 	vfma.f32	s1, s12, s13
 801c7b4:	eee5 0a07 	vfma.f32	s1, s10, s14
 801c7b8:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801c7bc:	db1d      	blt.n	801c7fa <__kernel_tanf+0x136>
 801c7be:	ee07 0a10 	vmov	s14, r0
 801c7c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7c6:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801c7ca:	ee76 6a87 	vadd.f32	s13, s13, s14
 801c7ce:	179b      	asrs	r3, r3, #30
 801c7d0:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801c7d4:	f003 0302 	and.w	r3, r3, #2
 801c7d8:	f1c3 0301 	rsb	r3, r3, #1
 801c7dc:	ee76 6a60 	vsub.f32	s13, s12, s1
 801c7e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c7e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801c7e8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801c7ec:	ee07 3a90 	vmov	s15, r3
 801c7f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c7f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c7f8:	e77c      	b.n	801c6f4 <__kernel_tanf+0x30>
 801c7fa:	2801      	cmp	r0, #1
 801c7fc:	d01b      	beq.n	801c836 <__kernel_tanf+0x172>
 801c7fe:	4b20      	ldr	r3, [pc, #128]	; (801c880 <__kernel_tanf+0x1bc>)
 801c800:	ee16 2a90 	vmov	r2, s13
 801c804:	401a      	ands	r2, r3
 801c806:	ee05 2a90 	vmov	s11, r2
 801c80a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801c80e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c812:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801c816:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801c81a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801c81e:	ee16 2a10 	vmov	r2, s12
 801c822:	4013      	ands	r3, r2
 801c824:	ee07 3a90 	vmov	s15, r3
 801c828:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c82c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801c830:	eee7 7a06 	vfma.f32	s15, s14, s12
 801c834:	e75e      	b.n	801c6f4 <__kernel_tanf+0x30>
 801c836:	eef0 7a66 	vmov.f32	s15, s13
 801c83a:	e75b      	b.n	801c6f4 <__kernel_tanf+0x30>
 801c83c:	3f2ca140 	.word	0x3f2ca140
 801c840:	3f490fda 	.word	0x3f490fda
 801c844:	33222168 	.word	0x33222168
 801c848:	00000000 	.word	0x00000000
 801c84c:	b79bae5f 	.word	0xb79bae5f
 801c850:	38a3f445 	.word	0x38a3f445
 801c854:	37d95384 	.word	0x37d95384
 801c858:	3a1a26c8 	.word	0x3a1a26c8
 801c85c:	3b6b6916 	.word	0x3b6b6916
 801c860:	3cb327a4 	.word	0x3cb327a4
 801c864:	3e088889 	.word	0x3e088889
 801c868:	3895c07a 	.word	0x3895c07a
 801c86c:	398137b9 	.word	0x398137b9
 801c870:	3abede48 	.word	0x3abede48
 801c874:	3c11371f 	.word	0x3c11371f
 801c878:	3d5d0dd1 	.word	0x3d5d0dd1
 801c87c:	3eaaaaab 	.word	0x3eaaaaab
 801c880:	fffff000 	.word	0xfffff000

0801c884 <__ieee754_asinf>:
 801c884:	b538      	push	{r3, r4, r5, lr}
 801c886:	ee10 5a10 	vmov	r5, s0
 801c88a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801c88e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801c892:	ed2d 8b04 	vpush	{d8-d9}
 801c896:	d10c      	bne.n	801c8b2 <__ieee754_asinf+0x2e>
 801c898:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801ca10 <__ieee754_asinf+0x18c>
 801c89c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801ca14 <__ieee754_asinf+0x190>
 801c8a0:	ee60 7a27 	vmul.f32	s15, s0, s15
 801c8a4:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c8a8:	eeb0 0a67 	vmov.f32	s0, s15
 801c8ac:	ecbd 8b04 	vpop	{d8-d9}
 801c8b0:	bd38      	pop	{r3, r4, r5, pc}
 801c8b2:	dd04      	ble.n	801c8be <__ieee754_asinf+0x3a>
 801c8b4:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c8b8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801c8bc:	e7f6      	b.n	801c8ac <__ieee754_asinf+0x28>
 801c8be:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801c8c2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801c8c6:	da0b      	bge.n	801c8e0 <__ieee754_asinf+0x5c>
 801c8c8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801c8cc:	da52      	bge.n	801c974 <__ieee754_asinf+0xf0>
 801c8ce:	eddf 7a52 	vldr	s15, [pc, #328]	; 801ca18 <__ieee754_asinf+0x194>
 801c8d2:	ee70 7a27 	vadd.f32	s15, s0, s15
 801c8d6:	eef4 7ae8 	vcmpe.f32	s15, s17
 801c8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8de:	dce5      	bgt.n	801c8ac <__ieee754_asinf+0x28>
 801c8e0:	f7ff fc24 	bl	801c12c <fabsf>
 801c8e4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801c8e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c8ec:	ee20 8a27 	vmul.f32	s16, s0, s15
 801c8f0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801ca1c <__ieee754_asinf+0x198>
 801c8f4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801ca20 <__ieee754_asinf+0x19c>
 801c8f8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801ca24 <__ieee754_asinf+0x1a0>
 801c8fc:	eea8 7a27 	vfma.f32	s14, s16, s15
 801c900:	eddf 7a49 	vldr	s15, [pc, #292]	; 801ca28 <__ieee754_asinf+0x1a4>
 801c904:	eee7 7a08 	vfma.f32	s15, s14, s16
 801c908:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801ca2c <__ieee754_asinf+0x1a8>
 801c90c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801c910:	eddf 7a47 	vldr	s15, [pc, #284]	; 801ca30 <__ieee754_asinf+0x1ac>
 801c914:	eee7 7a08 	vfma.f32	s15, s14, s16
 801c918:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801ca34 <__ieee754_asinf+0x1b0>
 801c91c:	eea7 9a88 	vfma.f32	s18, s15, s16
 801c920:	eddf 7a45 	vldr	s15, [pc, #276]	; 801ca38 <__ieee754_asinf+0x1b4>
 801c924:	eee8 7a07 	vfma.f32	s15, s16, s14
 801c928:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801ca3c <__ieee754_asinf+0x1b8>
 801c92c:	eea7 7a88 	vfma.f32	s14, s15, s16
 801c930:	eddf 7a43 	vldr	s15, [pc, #268]	; 801ca40 <__ieee754_asinf+0x1bc>
 801c934:	eee7 7a08 	vfma.f32	s15, s14, s16
 801c938:	eeb0 0a48 	vmov.f32	s0, s16
 801c93c:	eee7 8a88 	vfma.f32	s17, s15, s16
 801c940:	f000 fa00 	bl	801cd44 <__ieee754_sqrtf>
 801c944:	4b3f      	ldr	r3, [pc, #252]	; (801ca44 <__ieee754_asinf+0x1c0>)
 801c946:	ee29 9a08 	vmul.f32	s18, s18, s16
 801c94a:	429c      	cmp	r4, r3
 801c94c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801c950:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801c954:	dd3d      	ble.n	801c9d2 <__ieee754_asinf+0x14e>
 801c956:	eea0 0a06 	vfma.f32	s0, s0, s12
 801c95a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801ca48 <__ieee754_asinf+0x1c4>
 801c95e:	eee0 7a26 	vfma.f32	s15, s0, s13
 801c962:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801ca14 <__ieee754_asinf+0x190>
 801c966:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c96a:	2d00      	cmp	r5, #0
 801c96c:	bfd8      	it	le
 801c96e:	eeb1 0a40 	vnegle.f32	s0, s0
 801c972:	e79b      	b.n	801c8ac <__ieee754_asinf+0x28>
 801c974:	ee60 7a00 	vmul.f32	s15, s0, s0
 801c978:	eddf 6a29 	vldr	s13, [pc, #164]	; 801ca20 <__ieee754_asinf+0x19c>
 801c97c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 801ca1c <__ieee754_asinf+0x198>
 801c980:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801ca34 <__ieee754_asinf+0x1b0>
 801c984:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801c988:	eddf 6a27 	vldr	s13, [pc, #156]	; 801ca28 <__ieee754_asinf+0x1a4>
 801c98c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801c990:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801ca2c <__ieee754_asinf+0x1a8>
 801c994:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c998:	eddf 6a25 	vldr	s13, [pc, #148]	; 801ca30 <__ieee754_asinf+0x1ac>
 801c99c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801c9a0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801ca24 <__ieee754_asinf+0x1a0>
 801c9a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c9a8:	eddf 6a23 	vldr	s13, [pc, #140]	; 801ca38 <__ieee754_asinf+0x1b4>
 801c9ac:	eee7 6a86 	vfma.f32	s13, s15, s12
 801c9b0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801ca3c <__ieee754_asinf+0x1b8>
 801c9b4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801c9b8:	eddf 6a21 	vldr	s13, [pc, #132]	; 801ca40 <__ieee754_asinf+0x1bc>
 801c9bc:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c9c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c9c4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801c9c8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801c9cc:	eea0 0a27 	vfma.f32	s0, s0, s15
 801c9d0:	e76c      	b.n	801c8ac <__ieee754_asinf+0x28>
 801c9d2:	ee10 3a10 	vmov	r3, s0
 801c9d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801c9da:	f023 030f 	bic.w	r3, r3, #15
 801c9de:	ee07 3a10 	vmov	s14, r3
 801c9e2:	eea7 8a47 	vfms.f32	s16, s14, s14
 801c9e6:	ee70 7a07 	vadd.f32	s15, s0, s14
 801c9ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c9ee:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801c9f2:	eddf 7a07 	vldr	s15, [pc, #28]	; 801ca10 <__ieee754_asinf+0x18c>
 801c9f6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801c9fa:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801c9fe:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801ca4c <__ieee754_asinf+0x1c8>
 801ca02:	eeb0 6a40 	vmov.f32	s12, s0
 801ca06:	eea7 6a66 	vfms.f32	s12, s14, s13
 801ca0a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801ca0e:	e7aa      	b.n	801c966 <__ieee754_asinf+0xe2>
 801ca10:	b33bbd2e 	.word	0xb33bbd2e
 801ca14:	3fc90fdb 	.word	0x3fc90fdb
 801ca18:	7149f2ca 	.word	0x7149f2ca
 801ca1c:	3a4f7f04 	.word	0x3a4f7f04
 801ca20:	3811ef08 	.word	0x3811ef08
 801ca24:	3e2aaaab 	.word	0x3e2aaaab
 801ca28:	bd241146 	.word	0xbd241146
 801ca2c:	3e4e0aa8 	.word	0x3e4e0aa8
 801ca30:	bea6b090 	.word	0xbea6b090
 801ca34:	3d9dc62e 	.word	0x3d9dc62e
 801ca38:	bf303361 	.word	0xbf303361
 801ca3c:	4001572d 	.word	0x4001572d
 801ca40:	c019d139 	.word	0xc019d139
 801ca44:	3f799999 	.word	0x3f799999
 801ca48:	333bbd2e 	.word	0x333bbd2e
 801ca4c:	3f490fdb 	.word	0x3f490fdb

0801ca50 <__ieee754_atan2f>:
 801ca50:	ee10 2a90 	vmov	r2, s1
 801ca54:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801ca58:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801ca5c:	b510      	push	{r4, lr}
 801ca5e:	eef0 7a40 	vmov.f32	s15, s0
 801ca62:	dc06      	bgt.n	801ca72 <__ieee754_atan2f+0x22>
 801ca64:	ee10 0a10 	vmov	r0, s0
 801ca68:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801ca6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ca70:	dd04      	ble.n	801ca7c <__ieee754_atan2f+0x2c>
 801ca72:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801ca76:	eeb0 0a67 	vmov.f32	s0, s15
 801ca7a:	bd10      	pop	{r4, pc}
 801ca7c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801ca80:	d103      	bne.n	801ca8a <__ieee754_atan2f+0x3a>
 801ca82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca86:	f000 bb8f 	b.w	801d1a8 <atanf>
 801ca8a:	1794      	asrs	r4, r2, #30
 801ca8c:	f004 0402 	and.w	r4, r4, #2
 801ca90:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801ca94:	b943      	cbnz	r3, 801caa8 <__ieee754_atan2f+0x58>
 801ca96:	2c02      	cmp	r4, #2
 801ca98:	d05e      	beq.n	801cb58 <__ieee754_atan2f+0x108>
 801ca9a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801cb6c <__ieee754_atan2f+0x11c>
 801ca9e:	2c03      	cmp	r4, #3
 801caa0:	bf08      	it	eq
 801caa2:	eef0 7a47 	vmoveq.f32	s15, s14
 801caa6:	e7e6      	b.n	801ca76 <__ieee754_atan2f+0x26>
 801caa8:	b941      	cbnz	r1, 801cabc <__ieee754_atan2f+0x6c>
 801caaa:	eddf 7a31 	vldr	s15, [pc, #196]	; 801cb70 <__ieee754_atan2f+0x120>
 801caae:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801cb74 <__ieee754_atan2f+0x124>
 801cab2:	2800      	cmp	r0, #0
 801cab4:	bfb8      	it	lt
 801cab6:	eef0 7a47 	vmovlt.f32	s15, s14
 801caba:	e7dc      	b.n	801ca76 <__ieee754_atan2f+0x26>
 801cabc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801cac0:	d110      	bne.n	801cae4 <__ieee754_atan2f+0x94>
 801cac2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801cac6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801caca:	d107      	bne.n	801cadc <__ieee754_atan2f+0x8c>
 801cacc:	2c02      	cmp	r4, #2
 801cace:	d846      	bhi.n	801cb5e <__ieee754_atan2f+0x10e>
 801cad0:	4b29      	ldr	r3, [pc, #164]	; (801cb78 <__ieee754_atan2f+0x128>)
 801cad2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801cad6:	edd3 7a00 	vldr	s15, [r3]
 801cada:	e7cc      	b.n	801ca76 <__ieee754_atan2f+0x26>
 801cadc:	2c02      	cmp	r4, #2
 801cade:	d841      	bhi.n	801cb64 <__ieee754_atan2f+0x114>
 801cae0:	4b26      	ldr	r3, [pc, #152]	; (801cb7c <__ieee754_atan2f+0x12c>)
 801cae2:	e7f6      	b.n	801cad2 <__ieee754_atan2f+0x82>
 801cae4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801cae8:	d0df      	beq.n	801caaa <__ieee754_atan2f+0x5a>
 801caea:	1a5b      	subs	r3, r3, r1
 801caec:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801caf0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801caf4:	da1a      	bge.n	801cb2c <__ieee754_atan2f+0xdc>
 801caf6:	2a00      	cmp	r2, #0
 801caf8:	da01      	bge.n	801cafe <__ieee754_atan2f+0xae>
 801cafa:	313c      	adds	r1, #60	; 0x3c
 801cafc:	db19      	blt.n	801cb32 <__ieee754_atan2f+0xe2>
 801cafe:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801cb02:	f7ff fb13 	bl	801c12c <fabsf>
 801cb06:	f000 fb4f 	bl	801d1a8 <atanf>
 801cb0a:	eef0 7a40 	vmov.f32	s15, s0
 801cb0e:	2c01      	cmp	r4, #1
 801cb10:	d012      	beq.n	801cb38 <__ieee754_atan2f+0xe8>
 801cb12:	2c02      	cmp	r4, #2
 801cb14:	d017      	beq.n	801cb46 <__ieee754_atan2f+0xf6>
 801cb16:	2c00      	cmp	r4, #0
 801cb18:	d0ad      	beq.n	801ca76 <__ieee754_atan2f+0x26>
 801cb1a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801cb80 <__ieee754_atan2f+0x130>
 801cb1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cb22:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801cb84 <__ieee754_atan2f+0x134>
 801cb26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cb2a:	e7a4      	b.n	801ca76 <__ieee754_atan2f+0x26>
 801cb2c:	eddf 7a10 	vldr	s15, [pc, #64]	; 801cb70 <__ieee754_atan2f+0x120>
 801cb30:	e7ed      	b.n	801cb0e <__ieee754_atan2f+0xbe>
 801cb32:	eddf 7a15 	vldr	s15, [pc, #84]	; 801cb88 <__ieee754_atan2f+0x138>
 801cb36:	e7ea      	b.n	801cb0e <__ieee754_atan2f+0xbe>
 801cb38:	ee17 3a90 	vmov	r3, s15
 801cb3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801cb40:	ee07 3a90 	vmov	s15, r3
 801cb44:	e797      	b.n	801ca76 <__ieee754_atan2f+0x26>
 801cb46:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801cb80 <__ieee754_atan2f+0x130>
 801cb4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cb4e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801cb84 <__ieee754_atan2f+0x134>
 801cb52:	ee77 7a67 	vsub.f32	s15, s14, s15
 801cb56:	e78e      	b.n	801ca76 <__ieee754_atan2f+0x26>
 801cb58:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801cb84 <__ieee754_atan2f+0x134>
 801cb5c:	e78b      	b.n	801ca76 <__ieee754_atan2f+0x26>
 801cb5e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801cb8c <__ieee754_atan2f+0x13c>
 801cb62:	e788      	b.n	801ca76 <__ieee754_atan2f+0x26>
 801cb64:	eddf 7a08 	vldr	s15, [pc, #32]	; 801cb88 <__ieee754_atan2f+0x138>
 801cb68:	e785      	b.n	801ca76 <__ieee754_atan2f+0x26>
 801cb6a:	bf00      	nop
 801cb6c:	c0490fdb 	.word	0xc0490fdb
 801cb70:	3fc90fdb 	.word	0x3fc90fdb
 801cb74:	bfc90fdb 	.word	0xbfc90fdb
 801cb78:	0801f2a8 	.word	0x0801f2a8
 801cb7c:	0801f2b4 	.word	0x0801f2b4
 801cb80:	33bbbd2e 	.word	0x33bbbd2e
 801cb84:	40490fdb 	.word	0x40490fdb
 801cb88:	00000000 	.word	0x00000000
 801cb8c:	3f490fdb 	.word	0x3f490fdb

0801cb90 <__ieee754_sqrt>:
 801cb90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb94:	ec55 4b10 	vmov	r4, r5, d0
 801cb98:	4e67      	ldr	r6, [pc, #412]	; (801cd38 <__ieee754_sqrt+0x1a8>)
 801cb9a:	43ae      	bics	r6, r5
 801cb9c:	ee10 0a10 	vmov	r0, s0
 801cba0:	ee10 2a10 	vmov	r2, s0
 801cba4:	4629      	mov	r1, r5
 801cba6:	462b      	mov	r3, r5
 801cba8:	d10d      	bne.n	801cbc6 <__ieee754_sqrt+0x36>
 801cbaa:	f7e3 fd2f 	bl	800060c <__aeabi_dmul>
 801cbae:	4602      	mov	r2, r0
 801cbb0:	460b      	mov	r3, r1
 801cbb2:	4620      	mov	r0, r4
 801cbb4:	4629      	mov	r1, r5
 801cbb6:	f7e3 fb73 	bl	80002a0 <__adddf3>
 801cbba:	4604      	mov	r4, r0
 801cbbc:	460d      	mov	r5, r1
 801cbbe:	ec45 4b10 	vmov	d0, r4, r5
 801cbc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbc6:	2d00      	cmp	r5, #0
 801cbc8:	dc0b      	bgt.n	801cbe2 <__ieee754_sqrt+0x52>
 801cbca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801cbce:	4326      	orrs	r6, r4
 801cbd0:	d0f5      	beq.n	801cbbe <__ieee754_sqrt+0x2e>
 801cbd2:	b135      	cbz	r5, 801cbe2 <__ieee754_sqrt+0x52>
 801cbd4:	f7e3 fb62 	bl	800029c <__aeabi_dsub>
 801cbd8:	4602      	mov	r2, r0
 801cbda:	460b      	mov	r3, r1
 801cbdc:	f7e3 fe40 	bl	8000860 <__aeabi_ddiv>
 801cbe0:	e7eb      	b.n	801cbba <__ieee754_sqrt+0x2a>
 801cbe2:	1509      	asrs	r1, r1, #20
 801cbe4:	f000 808d 	beq.w	801cd02 <__ieee754_sqrt+0x172>
 801cbe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cbec:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801cbf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cbf4:	07c9      	lsls	r1, r1, #31
 801cbf6:	bf5c      	itt	pl
 801cbf8:	005b      	lslpl	r3, r3, #1
 801cbfa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801cbfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801cc02:	bf58      	it	pl
 801cc04:	0052      	lslpl	r2, r2, #1
 801cc06:	2500      	movs	r5, #0
 801cc08:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801cc0c:	1076      	asrs	r6, r6, #1
 801cc0e:	0052      	lsls	r2, r2, #1
 801cc10:	f04f 0e16 	mov.w	lr, #22
 801cc14:	46ac      	mov	ip, r5
 801cc16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801cc1a:	eb0c 0001 	add.w	r0, ip, r1
 801cc1e:	4298      	cmp	r0, r3
 801cc20:	bfde      	ittt	le
 801cc22:	1a1b      	suble	r3, r3, r0
 801cc24:	eb00 0c01 	addle.w	ip, r0, r1
 801cc28:	186d      	addle	r5, r5, r1
 801cc2a:	005b      	lsls	r3, r3, #1
 801cc2c:	f1be 0e01 	subs.w	lr, lr, #1
 801cc30:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801cc34:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801cc38:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801cc3c:	d1ed      	bne.n	801cc1a <__ieee754_sqrt+0x8a>
 801cc3e:	4674      	mov	r4, lr
 801cc40:	2720      	movs	r7, #32
 801cc42:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801cc46:	4563      	cmp	r3, ip
 801cc48:	eb01 000e 	add.w	r0, r1, lr
 801cc4c:	dc02      	bgt.n	801cc54 <__ieee754_sqrt+0xc4>
 801cc4e:	d113      	bne.n	801cc78 <__ieee754_sqrt+0xe8>
 801cc50:	4290      	cmp	r0, r2
 801cc52:	d811      	bhi.n	801cc78 <__ieee754_sqrt+0xe8>
 801cc54:	2800      	cmp	r0, #0
 801cc56:	eb00 0e01 	add.w	lr, r0, r1
 801cc5a:	da57      	bge.n	801cd0c <__ieee754_sqrt+0x17c>
 801cc5c:	f1be 0f00 	cmp.w	lr, #0
 801cc60:	db54      	blt.n	801cd0c <__ieee754_sqrt+0x17c>
 801cc62:	f10c 0801 	add.w	r8, ip, #1
 801cc66:	eba3 030c 	sub.w	r3, r3, ip
 801cc6a:	4290      	cmp	r0, r2
 801cc6c:	bf88      	it	hi
 801cc6e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 801cc72:	1a12      	subs	r2, r2, r0
 801cc74:	440c      	add	r4, r1
 801cc76:	46c4      	mov	ip, r8
 801cc78:	005b      	lsls	r3, r3, #1
 801cc7a:	3f01      	subs	r7, #1
 801cc7c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801cc80:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801cc84:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801cc88:	d1dd      	bne.n	801cc46 <__ieee754_sqrt+0xb6>
 801cc8a:	4313      	orrs	r3, r2
 801cc8c:	d01b      	beq.n	801ccc6 <__ieee754_sqrt+0x136>
 801cc8e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801cd3c <__ieee754_sqrt+0x1ac>
 801cc92:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801cd40 <__ieee754_sqrt+0x1b0>
 801cc96:	e9da 0100 	ldrd	r0, r1, [sl]
 801cc9a:	e9db 2300 	ldrd	r2, r3, [fp]
 801cc9e:	f7e3 fafd 	bl	800029c <__aeabi_dsub>
 801cca2:	e9da 8900 	ldrd	r8, r9, [sl]
 801cca6:	4602      	mov	r2, r0
 801cca8:	460b      	mov	r3, r1
 801ccaa:	4640      	mov	r0, r8
 801ccac:	4649      	mov	r1, r9
 801ccae:	f7e3 ff29 	bl	8000b04 <__aeabi_dcmple>
 801ccb2:	b140      	cbz	r0, 801ccc6 <__ieee754_sqrt+0x136>
 801ccb4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 801ccb8:	e9da 0100 	ldrd	r0, r1, [sl]
 801ccbc:	e9db 2300 	ldrd	r2, r3, [fp]
 801ccc0:	d126      	bne.n	801cd10 <__ieee754_sqrt+0x180>
 801ccc2:	3501      	adds	r5, #1
 801ccc4:	463c      	mov	r4, r7
 801ccc6:	106a      	asrs	r2, r5, #1
 801ccc8:	0863      	lsrs	r3, r4, #1
 801ccca:	07e9      	lsls	r1, r5, #31
 801cccc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801ccd0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801ccd4:	bf48      	it	mi
 801ccd6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801ccda:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801ccde:	461c      	mov	r4, r3
 801cce0:	e76d      	b.n	801cbbe <__ieee754_sqrt+0x2e>
 801cce2:	0ad3      	lsrs	r3, r2, #11
 801cce4:	3815      	subs	r0, #21
 801cce6:	0552      	lsls	r2, r2, #21
 801cce8:	2b00      	cmp	r3, #0
 801ccea:	d0fa      	beq.n	801cce2 <__ieee754_sqrt+0x152>
 801ccec:	02dc      	lsls	r4, r3, #11
 801ccee:	d50a      	bpl.n	801cd06 <__ieee754_sqrt+0x176>
 801ccf0:	f1c1 0420 	rsb	r4, r1, #32
 801ccf4:	fa22 f404 	lsr.w	r4, r2, r4
 801ccf8:	1e4d      	subs	r5, r1, #1
 801ccfa:	408a      	lsls	r2, r1
 801ccfc:	4323      	orrs	r3, r4
 801ccfe:	1b41      	subs	r1, r0, r5
 801cd00:	e772      	b.n	801cbe8 <__ieee754_sqrt+0x58>
 801cd02:	4608      	mov	r0, r1
 801cd04:	e7f0      	b.n	801cce8 <__ieee754_sqrt+0x158>
 801cd06:	005b      	lsls	r3, r3, #1
 801cd08:	3101      	adds	r1, #1
 801cd0a:	e7ef      	b.n	801ccec <__ieee754_sqrt+0x15c>
 801cd0c:	46e0      	mov	r8, ip
 801cd0e:	e7aa      	b.n	801cc66 <__ieee754_sqrt+0xd6>
 801cd10:	f7e3 fac6 	bl	80002a0 <__adddf3>
 801cd14:	e9da 8900 	ldrd	r8, r9, [sl]
 801cd18:	4602      	mov	r2, r0
 801cd1a:	460b      	mov	r3, r1
 801cd1c:	4640      	mov	r0, r8
 801cd1e:	4649      	mov	r1, r9
 801cd20:	f7e3 fee6 	bl	8000af0 <__aeabi_dcmplt>
 801cd24:	b120      	cbz	r0, 801cd30 <__ieee754_sqrt+0x1a0>
 801cd26:	1ca0      	adds	r0, r4, #2
 801cd28:	bf08      	it	eq
 801cd2a:	3501      	addeq	r5, #1
 801cd2c:	3402      	adds	r4, #2
 801cd2e:	e7ca      	b.n	801ccc6 <__ieee754_sqrt+0x136>
 801cd30:	3401      	adds	r4, #1
 801cd32:	f024 0401 	bic.w	r4, r4, #1
 801cd36:	e7c6      	b.n	801ccc6 <__ieee754_sqrt+0x136>
 801cd38:	7ff00000 	.word	0x7ff00000
 801cd3c:	200001f8 	.word	0x200001f8
 801cd40:	20000200 	.word	0x20000200

0801cd44 <__ieee754_sqrtf>:
 801cd44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801cd48:	4770      	bx	lr
 801cd4a:	0000      	movs	r0, r0
 801cd4c:	0000      	movs	r0, r0
	...

0801cd50 <ceil>:
 801cd50:	ec51 0b10 	vmov	r0, r1, d0
 801cd54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801cd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd5c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801cd60:	2e13      	cmp	r6, #19
 801cd62:	ee10 5a10 	vmov	r5, s0
 801cd66:	ee10 8a10 	vmov	r8, s0
 801cd6a:	460c      	mov	r4, r1
 801cd6c:	dc2f      	bgt.n	801cdce <ceil+0x7e>
 801cd6e:	2e00      	cmp	r6, #0
 801cd70:	da12      	bge.n	801cd98 <ceil+0x48>
 801cd72:	a333      	add	r3, pc, #204	; (adr r3, 801ce40 <ceil+0xf0>)
 801cd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd78:	f7e3 fa92 	bl	80002a0 <__adddf3>
 801cd7c:	2200      	movs	r2, #0
 801cd7e:	2300      	movs	r3, #0
 801cd80:	f7e3 fed4 	bl	8000b2c <__aeabi_dcmpgt>
 801cd84:	b128      	cbz	r0, 801cd92 <ceil+0x42>
 801cd86:	2c00      	cmp	r4, #0
 801cd88:	db51      	blt.n	801ce2e <ceil+0xde>
 801cd8a:	432c      	orrs	r4, r5
 801cd8c:	d053      	beq.n	801ce36 <ceil+0xe6>
 801cd8e:	4c2e      	ldr	r4, [pc, #184]	; (801ce48 <ceil+0xf8>)
 801cd90:	2500      	movs	r5, #0
 801cd92:	4621      	mov	r1, r4
 801cd94:	4628      	mov	r0, r5
 801cd96:	e024      	b.n	801cde2 <ceil+0x92>
 801cd98:	4f2c      	ldr	r7, [pc, #176]	; (801ce4c <ceil+0xfc>)
 801cd9a:	4137      	asrs	r7, r6
 801cd9c:	ea01 0307 	and.w	r3, r1, r7
 801cda0:	4303      	orrs	r3, r0
 801cda2:	d01e      	beq.n	801cde2 <ceil+0x92>
 801cda4:	a326      	add	r3, pc, #152	; (adr r3, 801ce40 <ceil+0xf0>)
 801cda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdaa:	f7e3 fa79 	bl	80002a0 <__adddf3>
 801cdae:	2200      	movs	r2, #0
 801cdb0:	2300      	movs	r3, #0
 801cdb2:	f7e3 febb 	bl	8000b2c <__aeabi_dcmpgt>
 801cdb6:	2800      	cmp	r0, #0
 801cdb8:	d0eb      	beq.n	801cd92 <ceil+0x42>
 801cdba:	2c00      	cmp	r4, #0
 801cdbc:	bfc2      	ittt	gt
 801cdbe:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801cdc2:	4133      	asrgt	r3, r6
 801cdc4:	18e4      	addgt	r4, r4, r3
 801cdc6:	ea24 0407 	bic.w	r4, r4, r7
 801cdca:	2500      	movs	r5, #0
 801cdcc:	e7e1      	b.n	801cd92 <ceil+0x42>
 801cdce:	2e33      	cmp	r6, #51	; 0x33
 801cdd0:	dd0b      	ble.n	801cdea <ceil+0x9a>
 801cdd2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801cdd6:	d104      	bne.n	801cde2 <ceil+0x92>
 801cdd8:	ee10 2a10 	vmov	r2, s0
 801cddc:	460b      	mov	r3, r1
 801cdde:	f7e3 fa5f 	bl	80002a0 <__adddf3>
 801cde2:	ec41 0b10 	vmov	d0, r0, r1
 801cde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdea:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801cdee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801cdf2:	40df      	lsrs	r7, r3
 801cdf4:	4238      	tst	r0, r7
 801cdf6:	d0f4      	beq.n	801cde2 <ceil+0x92>
 801cdf8:	a311      	add	r3, pc, #68	; (adr r3, 801ce40 <ceil+0xf0>)
 801cdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdfe:	f7e3 fa4f 	bl	80002a0 <__adddf3>
 801ce02:	2200      	movs	r2, #0
 801ce04:	2300      	movs	r3, #0
 801ce06:	f7e3 fe91 	bl	8000b2c <__aeabi_dcmpgt>
 801ce0a:	2800      	cmp	r0, #0
 801ce0c:	d0c1      	beq.n	801cd92 <ceil+0x42>
 801ce0e:	2c00      	cmp	r4, #0
 801ce10:	dd0a      	ble.n	801ce28 <ceil+0xd8>
 801ce12:	2e14      	cmp	r6, #20
 801ce14:	d101      	bne.n	801ce1a <ceil+0xca>
 801ce16:	3401      	adds	r4, #1
 801ce18:	e006      	b.n	801ce28 <ceil+0xd8>
 801ce1a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ce1e:	2301      	movs	r3, #1
 801ce20:	40b3      	lsls	r3, r6
 801ce22:	441d      	add	r5, r3
 801ce24:	45a8      	cmp	r8, r5
 801ce26:	d8f6      	bhi.n	801ce16 <ceil+0xc6>
 801ce28:	ea25 0507 	bic.w	r5, r5, r7
 801ce2c:	e7b1      	b.n	801cd92 <ceil+0x42>
 801ce2e:	2500      	movs	r5, #0
 801ce30:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ce34:	e7ad      	b.n	801cd92 <ceil+0x42>
 801ce36:	4625      	mov	r5, r4
 801ce38:	e7ab      	b.n	801cd92 <ceil+0x42>
 801ce3a:	bf00      	nop
 801ce3c:	f3af 8000 	nop.w
 801ce40:	8800759c 	.word	0x8800759c
 801ce44:	7e37e43c 	.word	0x7e37e43c
 801ce48:	3ff00000 	.word	0x3ff00000
 801ce4c:	000fffff 	.word	0x000fffff

0801ce50 <floor>:
 801ce50:	ec51 0b10 	vmov	r0, r1, d0
 801ce54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ce58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce5c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801ce60:	2e13      	cmp	r6, #19
 801ce62:	ee10 5a10 	vmov	r5, s0
 801ce66:	ee10 8a10 	vmov	r8, s0
 801ce6a:	460c      	mov	r4, r1
 801ce6c:	dc31      	bgt.n	801ced2 <floor+0x82>
 801ce6e:	2e00      	cmp	r6, #0
 801ce70:	da14      	bge.n	801ce9c <floor+0x4c>
 801ce72:	a333      	add	r3, pc, #204	; (adr r3, 801cf40 <floor+0xf0>)
 801ce74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce78:	f7e3 fa12 	bl	80002a0 <__adddf3>
 801ce7c:	2200      	movs	r2, #0
 801ce7e:	2300      	movs	r3, #0
 801ce80:	f7e3 fe54 	bl	8000b2c <__aeabi_dcmpgt>
 801ce84:	b138      	cbz	r0, 801ce96 <floor+0x46>
 801ce86:	2c00      	cmp	r4, #0
 801ce88:	da53      	bge.n	801cf32 <floor+0xe2>
 801ce8a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801ce8e:	4325      	orrs	r5, r4
 801ce90:	d052      	beq.n	801cf38 <floor+0xe8>
 801ce92:	4c2d      	ldr	r4, [pc, #180]	; (801cf48 <floor+0xf8>)
 801ce94:	2500      	movs	r5, #0
 801ce96:	4621      	mov	r1, r4
 801ce98:	4628      	mov	r0, r5
 801ce9a:	e024      	b.n	801cee6 <floor+0x96>
 801ce9c:	4f2b      	ldr	r7, [pc, #172]	; (801cf4c <floor+0xfc>)
 801ce9e:	4137      	asrs	r7, r6
 801cea0:	ea01 0307 	and.w	r3, r1, r7
 801cea4:	4303      	orrs	r3, r0
 801cea6:	d01e      	beq.n	801cee6 <floor+0x96>
 801cea8:	a325      	add	r3, pc, #148	; (adr r3, 801cf40 <floor+0xf0>)
 801ceaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceae:	f7e3 f9f7 	bl	80002a0 <__adddf3>
 801ceb2:	2200      	movs	r2, #0
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	f7e3 fe39 	bl	8000b2c <__aeabi_dcmpgt>
 801ceba:	2800      	cmp	r0, #0
 801cebc:	d0eb      	beq.n	801ce96 <floor+0x46>
 801cebe:	2c00      	cmp	r4, #0
 801cec0:	bfbe      	ittt	lt
 801cec2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801cec6:	4133      	asrlt	r3, r6
 801cec8:	18e4      	addlt	r4, r4, r3
 801ceca:	ea24 0407 	bic.w	r4, r4, r7
 801cece:	2500      	movs	r5, #0
 801ced0:	e7e1      	b.n	801ce96 <floor+0x46>
 801ced2:	2e33      	cmp	r6, #51	; 0x33
 801ced4:	dd0b      	ble.n	801ceee <floor+0x9e>
 801ced6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ceda:	d104      	bne.n	801cee6 <floor+0x96>
 801cedc:	ee10 2a10 	vmov	r2, s0
 801cee0:	460b      	mov	r3, r1
 801cee2:	f7e3 f9dd 	bl	80002a0 <__adddf3>
 801cee6:	ec41 0b10 	vmov	d0, r0, r1
 801ceea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ceee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801cef2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801cef6:	40df      	lsrs	r7, r3
 801cef8:	4238      	tst	r0, r7
 801cefa:	d0f4      	beq.n	801cee6 <floor+0x96>
 801cefc:	a310      	add	r3, pc, #64	; (adr r3, 801cf40 <floor+0xf0>)
 801cefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf02:	f7e3 f9cd 	bl	80002a0 <__adddf3>
 801cf06:	2200      	movs	r2, #0
 801cf08:	2300      	movs	r3, #0
 801cf0a:	f7e3 fe0f 	bl	8000b2c <__aeabi_dcmpgt>
 801cf0e:	2800      	cmp	r0, #0
 801cf10:	d0c1      	beq.n	801ce96 <floor+0x46>
 801cf12:	2c00      	cmp	r4, #0
 801cf14:	da0a      	bge.n	801cf2c <floor+0xdc>
 801cf16:	2e14      	cmp	r6, #20
 801cf18:	d101      	bne.n	801cf1e <floor+0xce>
 801cf1a:	3401      	adds	r4, #1
 801cf1c:	e006      	b.n	801cf2c <floor+0xdc>
 801cf1e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801cf22:	2301      	movs	r3, #1
 801cf24:	40b3      	lsls	r3, r6
 801cf26:	441d      	add	r5, r3
 801cf28:	45a8      	cmp	r8, r5
 801cf2a:	d8f6      	bhi.n	801cf1a <floor+0xca>
 801cf2c:	ea25 0507 	bic.w	r5, r5, r7
 801cf30:	e7b1      	b.n	801ce96 <floor+0x46>
 801cf32:	2500      	movs	r5, #0
 801cf34:	462c      	mov	r4, r5
 801cf36:	e7ae      	b.n	801ce96 <floor+0x46>
 801cf38:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801cf3c:	e7ab      	b.n	801ce96 <floor+0x46>
 801cf3e:	bf00      	nop
 801cf40:	8800759c 	.word	0x8800759c
 801cf44:	7e37e43c 	.word	0x7e37e43c
 801cf48:	bff00000 	.word	0xbff00000
 801cf4c:	000fffff 	.word	0x000fffff

0801cf50 <__ieee754_rem_pio2f>:
 801cf50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf52:	ee10 6a10 	vmov	r6, s0
 801cf56:	4b86      	ldr	r3, [pc, #536]	; (801d170 <__ieee754_rem_pio2f+0x220>)
 801cf58:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801cf5c:	429d      	cmp	r5, r3
 801cf5e:	b087      	sub	sp, #28
 801cf60:	4604      	mov	r4, r0
 801cf62:	dc05      	bgt.n	801cf70 <__ieee754_rem_pio2f+0x20>
 801cf64:	2300      	movs	r3, #0
 801cf66:	ed80 0a00 	vstr	s0, [r0]
 801cf6a:	6043      	str	r3, [r0, #4]
 801cf6c:	2000      	movs	r0, #0
 801cf6e:	e020      	b.n	801cfb2 <__ieee754_rem_pio2f+0x62>
 801cf70:	4b80      	ldr	r3, [pc, #512]	; (801d174 <__ieee754_rem_pio2f+0x224>)
 801cf72:	429d      	cmp	r5, r3
 801cf74:	dc38      	bgt.n	801cfe8 <__ieee754_rem_pio2f+0x98>
 801cf76:	2e00      	cmp	r6, #0
 801cf78:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801d178 <__ieee754_rem_pio2f+0x228>
 801cf7c:	4b7f      	ldr	r3, [pc, #508]	; (801d17c <__ieee754_rem_pio2f+0x22c>)
 801cf7e:	f025 050f 	bic.w	r5, r5, #15
 801cf82:	dd18      	ble.n	801cfb6 <__ieee754_rem_pio2f+0x66>
 801cf84:	429d      	cmp	r5, r3
 801cf86:	ee70 7a47 	vsub.f32	s15, s0, s14
 801cf8a:	bf09      	itett	eq
 801cf8c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801d180 <__ieee754_rem_pio2f+0x230>
 801cf90:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801d184 <__ieee754_rem_pio2f+0x234>
 801cf94:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801cf98:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801d188 <__ieee754_rem_pio2f+0x238>
 801cf9c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801cfa0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801cfa4:	edc0 6a00 	vstr	s13, [r0]
 801cfa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cfac:	edc0 7a01 	vstr	s15, [r0, #4]
 801cfb0:	2001      	movs	r0, #1
 801cfb2:	b007      	add	sp, #28
 801cfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cfb6:	429d      	cmp	r5, r3
 801cfb8:	ee70 7a07 	vadd.f32	s15, s0, s14
 801cfbc:	bf09      	itett	eq
 801cfbe:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801d180 <__ieee754_rem_pio2f+0x230>
 801cfc2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801d184 <__ieee754_rem_pio2f+0x234>
 801cfc6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801cfca:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801d188 <__ieee754_rem_pio2f+0x238>
 801cfce:	ee77 6a87 	vadd.f32	s13, s15, s14
 801cfd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801cfd6:	edc0 6a00 	vstr	s13, [r0]
 801cfda:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cfde:	edc0 7a01 	vstr	s15, [r0, #4]
 801cfe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cfe6:	e7e4      	b.n	801cfb2 <__ieee754_rem_pio2f+0x62>
 801cfe8:	4b68      	ldr	r3, [pc, #416]	; (801d18c <__ieee754_rem_pio2f+0x23c>)
 801cfea:	429d      	cmp	r5, r3
 801cfec:	dc71      	bgt.n	801d0d2 <__ieee754_rem_pio2f+0x182>
 801cfee:	f7ff f89d 	bl	801c12c <fabsf>
 801cff2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801d190 <__ieee754_rem_pio2f+0x240>
 801cff6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801cffa:	eee0 7a07 	vfma.f32	s15, s0, s14
 801cffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d006:	ee17 0a90 	vmov	r0, s15
 801d00a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801d178 <__ieee754_rem_pio2f+0x228>
 801d00e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801d012:	281f      	cmp	r0, #31
 801d014:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801d184 <__ieee754_rem_pio2f+0x234>
 801d018:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d01c:	eeb1 6a47 	vneg.f32	s12, s14
 801d020:	ee70 6a67 	vsub.f32	s13, s0, s15
 801d024:	ee16 2a90 	vmov	r2, s13
 801d028:	dc1c      	bgt.n	801d064 <__ieee754_rem_pio2f+0x114>
 801d02a:	495a      	ldr	r1, [pc, #360]	; (801d194 <__ieee754_rem_pio2f+0x244>)
 801d02c:	1e47      	subs	r7, r0, #1
 801d02e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801d032:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801d036:	428b      	cmp	r3, r1
 801d038:	d014      	beq.n	801d064 <__ieee754_rem_pio2f+0x114>
 801d03a:	6022      	str	r2, [r4, #0]
 801d03c:	ed94 7a00 	vldr	s14, [r4]
 801d040:	ee30 0a47 	vsub.f32	s0, s0, s14
 801d044:	2e00      	cmp	r6, #0
 801d046:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d04a:	ed84 0a01 	vstr	s0, [r4, #4]
 801d04e:	dab0      	bge.n	801cfb2 <__ieee754_rem_pio2f+0x62>
 801d050:	eeb1 7a47 	vneg.f32	s14, s14
 801d054:	eeb1 0a40 	vneg.f32	s0, s0
 801d058:	ed84 7a00 	vstr	s14, [r4]
 801d05c:	ed84 0a01 	vstr	s0, [r4, #4]
 801d060:	4240      	negs	r0, r0
 801d062:	e7a6      	b.n	801cfb2 <__ieee754_rem_pio2f+0x62>
 801d064:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801d068:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801d06c:	2908      	cmp	r1, #8
 801d06e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801d072:	dde2      	ble.n	801d03a <__ieee754_rem_pio2f+0xea>
 801d074:	eddf 5a42 	vldr	s11, [pc, #264]	; 801d180 <__ieee754_rem_pio2f+0x230>
 801d078:	eef0 6a40 	vmov.f32	s13, s0
 801d07c:	eee6 6a25 	vfma.f32	s13, s12, s11
 801d080:	ee70 7a66 	vsub.f32	s15, s0, s13
 801d084:	eee6 7a25 	vfma.f32	s15, s12, s11
 801d088:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801d188 <__ieee754_rem_pio2f+0x238>
 801d08c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801d090:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801d094:	ee15 2a90 	vmov	r2, s11
 801d098:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801d09c:	1a5b      	subs	r3, r3, r1
 801d09e:	2b19      	cmp	r3, #25
 801d0a0:	dc04      	bgt.n	801d0ac <__ieee754_rem_pio2f+0x15c>
 801d0a2:	edc4 5a00 	vstr	s11, [r4]
 801d0a6:	eeb0 0a66 	vmov.f32	s0, s13
 801d0aa:	e7c7      	b.n	801d03c <__ieee754_rem_pio2f+0xec>
 801d0ac:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801d198 <__ieee754_rem_pio2f+0x248>
 801d0b0:	eeb0 0a66 	vmov.f32	s0, s13
 801d0b4:	eea6 0a25 	vfma.f32	s0, s12, s11
 801d0b8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801d0bc:	eddf 6a37 	vldr	s13, [pc, #220]	; 801d19c <__ieee754_rem_pio2f+0x24c>
 801d0c0:	eee6 7a25 	vfma.f32	s15, s12, s11
 801d0c4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801d0c8:	ee30 7a67 	vsub.f32	s14, s0, s15
 801d0cc:	ed84 7a00 	vstr	s14, [r4]
 801d0d0:	e7b4      	b.n	801d03c <__ieee754_rem_pio2f+0xec>
 801d0d2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801d0d6:	db06      	blt.n	801d0e6 <__ieee754_rem_pio2f+0x196>
 801d0d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 801d0dc:	edc0 7a01 	vstr	s15, [r0, #4]
 801d0e0:	edc0 7a00 	vstr	s15, [r0]
 801d0e4:	e742      	b.n	801cf6c <__ieee754_rem_pio2f+0x1c>
 801d0e6:	15ea      	asrs	r2, r5, #23
 801d0e8:	3a86      	subs	r2, #134	; 0x86
 801d0ea:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801d0ee:	ee07 3a90 	vmov	s15, r3
 801d0f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801d0f6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801d1a0 <__ieee754_rem_pio2f+0x250>
 801d0fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d0fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d102:	ed8d 7a03 	vstr	s14, [sp, #12]
 801d106:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d10a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801d10e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d116:	ed8d 7a04 	vstr	s14, [sp, #16]
 801d11a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d11e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801d122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d126:	edcd 7a05 	vstr	s15, [sp, #20]
 801d12a:	d11e      	bne.n	801d16a <__ieee754_rem_pio2f+0x21a>
 801d12c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801d130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d134:	bf14      	ite	ne
 801d136:	2302      	movne	r3, #2
 801d138:	2301      	moveq	r3, #1
 801d13a:	491a      	ldr	r1, [pc, #104]	; (801d1a4 <__ieee754_rem_pio2f+0x254>)
 801d13c:	9101      	str	r1, [sp, #4]
 801d13e:	2102      	movs	r1, #2
 801d140:	9100      	str	r1, [sp, #0]
 801d142:	a803      	add	r0, sp, #12
 801d144:	4621      	mov	r1, r4
 801d146:	f000 f903 	bl	801d350 <__kernel_rem_pio2f>
 801d14a:	2e00      	cmp	r6, #0
 801d14c:	f6bf af31 	bge.w	801cfb2 <__ieee754_rem_pio2f+0x62>
 801d150:	edd4 7a00 	vldr	s15, [r4]
 801d154:	eef1 7a67 	vneg.f32	s15, s15
 801d158:	edc4 7a00 	vstr	s15, [r4]
 801d15c:	edd4 7a01 	vldr	s15, [r4, #4]
 801d160:	eef1 7a67 	vneg.f32	s15, s15
 801d164:	edc4 7a01 	vstr	s15, [r4, #4]
 801d168:	e77a      	b.n	801d060 <__ieee754_rem_pio2f+0x110>
 801d16a:	2303      	movs	r3, #3
 801d16c:	e7e5      	b.n	801d13a <__ieee754_rem_pio2f+0x1ea>
 801d16e:	bf00      	nop
 801d170:	3f490fd8 	.word	0x3f490fd8
 801d174:	4016cbe3 	.word	0x4016cbe3
 801d178:	3fc90f80 	.word	0x3fc90f80
 801d17c:	3fc90fd0 	.word	0x3fc90fd0
 801d180:	37354400 	.word	0x37354400
 801d184:	37354443 	.word	0x37354443
 801d188:	2e85a308 	.word	0x2e85a308
 801d18c:	43490f80 	.word	0x43490f80
 801d190:	3f22f984 	.word	0x3f22f984
 801d194:	0801f2c0 	.word	0x0801f2c0
 801d198:	2e85a300 	.word	0x2e85a300
 801d19c:	248d3132 	.word	0x248d3132
 801d1a0:	43800000 	.word	0x43800000
 801d1a4:	0801f340 	.word	0x0801f340

0801d1a8 <atanf>:
 801d1a8:	b538      	push	{r3, r4, r5, lr}
 801d1aa:	ee10 5a10 	vmov	r5, s0
 801d1ae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801d1b2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801d1b6:	eef0 7a40 	vmov.f32	s15, s0
 801d1ba:	db10      	blt.n	801d1de <atanf+0x36>
 801d1bc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801d1c0:	dd04      	ble.n	801d1cc <atanf+0x24>
 801d1c2:	ee70 7a00 	vadd.f32	s15, s0, s0
 801d1c6:	eeb0 0a67 	vmov.f32	s0, s15
 801d1ca:	bd38      	pop	{r3, r4, r5, pc}
 801d1cc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801d304 <atanf+0x15c>
 801d1d0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801d308 <atanf+0x160>
 801d1d4:	2d00      	cmp	r5, #0
 801d1d6:	bfd8      	it	le
 801d1d8:	eef0 7a47 	vmovle.f32	s15, s14
 801d1dc:	e7f3      	b.n	801d1c6 <atanf+0x1e>
 801d1de:	4b4b      	ldr	r3, [pc, #300]	; (801d30c <atanf+0x164>)
 801d1e0:	429c      	cmp	r4, r3
 801d1e2:	dc10      	bgt.n	801d206 <atanf+0x5e>
 801d1e4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801d1e8:	da0a      	bge.n	801d200 <atanf+0x58>
 801d1ea:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801d310 <atanf+0x168>
 801d1ee:	ee30 7a07 	vadd.f32	s14, s0, s14
 801d1f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d1f6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801d1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1fe:	dce2      	bgt.n	801d1c6 <atanf+0x1e>
 801d200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d204:	e013      	b.n	801d22e <atanf+0x86>
 801d206:	f7fe ff91 	bl	801c12c <fabsf>
 801d20a:	4b42      	ldr	r3, [pc, #264]	; (801d314 <atanf+0x16c>)
 801d20c:	429c      	cmp	r4, r3
 801d20e:	dc4f      	bgt.n	801d2b0 <atanf+0x108>
 801d210:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801d214:	429c      	cmp	r4, r3
 801d216:	dc41      	bgt.n	801d29c <atanf+0xf4>
 801d218:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801d21c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801d220:	eea0 7a27 	vfma.f32	s14, s0, s15
 801d224:	2300      	movs	r3, #0
 801d226:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d22a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d22e:	1c5a      	adds	r2, r3, #1
 801d230:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801d234:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801d318 <atanf+0x170>
 801d238:	eddf 5a38 	vldr	s11, [pc, #224]	; 801d31c <atanf+0x174>
 801d23c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801d320 <atanf+0x178>
 801d240:	ee66 6a06 	vmul.f32	s13, s12, s12
 801d244:	eee6 5a87 	vfma.f32	s11, s13, s14
 801d248:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801d324 <atanf+0x17c>
 801d24c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801d250:	eddf 5a35 	vldr	s11, [pc, #212]	; 801d328 <atanf+0x180>
 801d254:	eee7 5a26 	vfma.f32	s11, s14, s13
 801d258:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801d32c <atanf+0x184>
 801d25c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801d260:	eddf 5a33 	vldr	s11, [pc, #204]	; 801d330 <atanf+0x188>
 801d264:	eee7 5a26 	vfma.f32	s11, s14, s13
 801d268:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801d334 <atanf+0x18c>
 801d26c:	eea6 5a87 	vfma.f32	s10, s13, s14
 801d270:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801d338 <atanf+0x190>
 801d274:	eea5 7a26 	vfma.f32	s14, s10, s13
 801d278:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801d33c <atanf+0x194>
 801d27c:	eea7 5a26 	vfma.f32	s10, s14, s13
 801d280:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801d340 <atanf+0x198>
 801d284:	eea5 7a26 	vfma.f32	s14, s10, s13
 801d288:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d28c:	eea5 7a86 	vfma.f32	s14, s11, s12
 801d290:	ee27 7a87 	vmul.f32	s14, s15, s14
 801d294:	d121      	bne.n	801d2da <atanf+0x132>
 801d296:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d29a:	e794      	b.n	801d1c6 <atanf+0x1e>
 801d29c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d2a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 801d2a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d2a8:	2301      	movs	r3, #1
 801d2aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d2ae:	e7be      	b.n	801d22e <atanf+0x86>
 801d2b0:	4b24      	ldr	r3, [pc, #144]	; (801d344 <atanf+0x19c>)
 801d2b2:	429c      	cmp	r4, r3
 801d2b4:	dc0b      	bgt.n	801d2ce <atanf+0x126>
 801d2b6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801d2ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d2be:	eea0 7a27 	vfma.f32	s14, s0, s15
 801d2c2:	2302      	movs	r3, #2
 801d2c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 801d2c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d2cc:	e7af      	b.n	801d22e <atanf+0x86>
 801d2ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801d2d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d2d6:	2303      	movs	r3, #3
 801d2d8:	e7a9      	b.n	801d22e <atanf+0x86>
 801d2da:	4a1b      	ldr	r2, [pc, #108]	; (801d348 <atanf+0x1a0>)
 801d2dc:	491b      	ldr	r1, [pc, #108]	; (801d34c <atanf+0x1a4>)
 801d2de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d2e2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d2e6:	edd3 6a00 	vldr	s13, [r3]
 801d2ea:	ee37 7a66 	vsub.f32	s14, s14, s13
 801d2ee:	2d00      	cmp	r5, #0
 801d2f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d2f4:	edd2 7a00 	vldr	s15, [r2]
 801d2f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d2fc:	bfb8      	it	lt
 801d2fe:	eef1 7a67 	vneglt.f32	s15, s15
 801d302:	e760      	b.n	801d1c6 <atanf+0x1e>
 801d304:	3fc90fdb 	.word	0x3fc90fdb
 801d308:	bfc90fdb 	.word	0xbfc90fdb
 801d30c:	3edfffff 	.word	0x3edfffff
 801d310:	7149f2ca 	.word	0x7149f2ca
 801d314:	3f97ffff 	.word	0x3f97ffff
 801d318:	3c8569d7 	.word	0x3c8569d7
 801d31c:	3d4bda59 	.word	0x3d4bda59
 801d320:	bd6ef16b 	.word	0xbd6ef16b
 801d324:	3d886b35 	.word	0x3d886b35
 801d328:	3dba2e6e 	.word	0x3dba2e6e
 801d32c:	3e124925 	.word	0x3e124925
 801d330:	3eaaaaab 	.word	0x3eaaaaab
 801d334:	bd15a221 	.word	0xbd15a221
 801d338:	bd9d8795 	.word	0xbd9d8795
 801d33c:	bde38e38 	.word	0xbde38e38
 801d340:	be4ccccd 	.word	0xbe4ccccd
 801d344:	401bffff 	.word	0x401bffff
 801d348:	0801f658 	.word	0x0801f658
 801d34c:	0801f668 	.word	0x0801f668

0801d350 <__kernel_rem_pio2f>:
 801d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d354:	ed2d 8b04 	vpush	{d8-d9}
 801d358:	b0d9      	sub	sp, #356	; 0x164
 801d35a:	4688      	mov	r8, r1
 801d35c:	9002      	str	r0, [sp, #8]
 801d35e:	49b8      	ldr	r1, [pc, #736]	; (801d640 <__kernel_rem_pio2f+0x2f0>)
 801d360:	9866      	ldr	r0, [sp, #408]	; 0x198
 801d362:	9301      	str	r3, [sp, #4]
 801d364:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801d368:	9901      	ldr	r1, [sp, #4]
 801d36a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801d36c:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 801d370:	1d11      	adds	r1, r2, #4
 801d372:	db25      	blt.n	801d3c0 <__kernel_rem_pio2f+0x70>
 801d374:	1ed0      	subs	r0, r2, #3
 801d376:	bf48      	it	mi
 801d378:	1d10      	addmi	r0, r2, #4
 801d37a:	10c0      	asrs	r0, r0, #3
 801d37c:	1c45      	adds	r5, r0, #1
 801d37e:	00e9      	lsls	r1, r5, #3
 801d380:	eba0 070b 	sub.w	r7, r0, fp
 801d384:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801d650 <__kernel_rem_pio2f+0x300>
 801d388:	9103      	str	r1, [sp, #12]
 801d38a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801d38e:	eb0a 0c0b 	add.w	ip, sl, fp
 801d392:	ae1c      	add	r6, sp, #112	; 0x70
 801d394:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801d398:	2400      	movs	r4, #0
 801d39a:	4564      	cmp	r4, ip
 801d39c:	dd12      	ble.n	801d3c4 <__kernel_rem_pio2f+0x74>
 801d39e:	9901      	ldr	r1, [sp, #4]
 801d3a0:	ac1c      	add	r4, sp, #112	; 0x70
 801d3a2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d3a6:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801d3aa:	f04f 0c00 	mov.w	ip, #0
 801d3ae:	45d4      	cmp	ip, sl
 801d3b0:	dc27      	bgt.n	801d402 <__kernel_rem_pio2f+0xb2>
 801d3b2:	f8dd e008 	ldr.w	lr, [sp, #8]
 801d3b6:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801d650 <__kernel_rem_pio2f+0x300>
 801d3ba:	4627      	mov	r7, r4
 801d3bc:	2600      	movs	r6, #0
 801d3be:	e016      	b.n	801d3ee <__kernel_rem_pio2f+0x9e>
 801d3c0:	2000      	movs	r0, #0
 801d3c2:	e7db      	b.n	801d37c <__kernel_rem_pio2f+0x2c>
 801d3c4:	42e7      	cmn	r7, r4
 801d3c6:	bf5d      	ittte	pl
 801d3c8:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801d3cc:	ee07 1a90 	vmovpl	s15, r1
 801d3d0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801d3d4:	eef0 7a47 	vmovmi.f32	s15, s14
 801d3d8:	ece6 7a01 	vstmia	r6!, {s15}
 801d3dc:	3401      	adds	r4, #1
 801d3de:	e7dc      	b.n	801d39a <__kernel_rem_pio2f+0x4a>
 801d3e0:	ecfe 6a01 	vldmia	lr!, {s13}
 801d3e4:	ed97 7a00 	vldr	s14, [r7]
 801d3e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d3ec:	3601      	adds	r6, #1
 801d3ee:	455e      	cmp	r6, fp
 801d3f0:	f1a7 0704 	sub.w	r7, r7, #4
 801d3f4:	ddf4      	ble.n	801d3e0 <__kernel_rem_pio2f+0x90>
 801d3f6:	ece9 7a01 	vstmia	r9!, {s15}
 801d3fa:	f10c 0c01 	add.w	ip, ip, #1
 801d3fe:	3404      	adds	r4, #4
 801d400:	e7d5      	b.n	801d3ae <__kernel_rem_pio2f+0x5e>
 801d402:	a908      	add	r1, sp, #32
 801d404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d408:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801d40c:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801d64c <__kernel_rem_pio2f+0x2fc>
 801d410:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801d648 <__kernel_rem_pio2f+0x2f8>
 801d414:	9105      	str	r1, [sp, #20]
 801d416:	9304      	str	r3, [sp, #16]
 801d418:	4656      	mov	r6, sl
 801d41a:	00b3      	lsls	r3, r6, #2
 801d41c:	9306      	str	r3, [sp, #24]
 801d41e:	ab58      	add	r3, sp, #352	; 0x160
 801d420:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801d424:	ac08      	add	r4, sp, #32
 801d426:	ab44      	add	r3, sp, #272	; 0x110
 801d428:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801d42c:	46a4      	mov	ip, r4
 801d42e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801d432:	4637      	mov	r7, r6
 801d434:	2f00      	cmp	r7, #0
 801d436:	f1a0 0004 	sub.w	r0, r0, #4
 801d43a:	dc4a      	bgt.n	801d4d2 <__kernel_rem_pio2f+0x182>
 801d43c:	4628      	mov	r0, r5
 801d43e:	9207      	str	r2, [sp, #28]
 801d440:	f000 fa3a 	bl	801d8b8 <scalbnf>
 801d444:	eeb0 8a40 	vmov.f32	s16, s0
 801d448:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801d44c:	ee28 0a00 	vmul.f32	s0, s16, s0
 801d450:	f000 f9f0 	bl	801d834 <floorf>
 801d454:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801d458:	eea0 8a67 	vfms.f32	s16, s0, s15
 801d45c:	2d00      	cmp	r5, #0
 801d45e:	9a07      	ldr	r2, [sp, #28]
 801d460:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801d464:	ee17 9a90 	vmov	r9, s15
 801d468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d46c:	ee38 8a67 	vsub.f32	s16, s16, s15
 801d470:	dd41      	ble.n	801d4f6 <__kernel_rem_pio2f+0x1a6>
 801d472:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801d476:	ab08      	add	r3, sp, #32
 801d478:	f1c5 0e08 	rsb	lr, r5, #8
 801d47c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801d480:	fa47 f00e 	asr.w	r0, r7, lr
 801d484:	4481      	add	r9, r0
 801d486:	fa00 f00e 	lsl.w	r0, r0, lr
 801d48a:	1a3f      	subs	r7, r7, r0
 801d48c:	f1c5 0007 	rsb	r0, r5, #7
 801d490:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801d494:	4107      	asrs	r7, r0
 801d496:	2f00      	cmp	r7, #0
 801d498:	dd3c      	ble.n	801d514 <__kernel_rem_pio2f+0x1c4>
 801d49a:	f04f 0e00 	mov.w	lr, #0
 801d49e:	f109 0901 	add.w	r9, r9, #1
 801d4a2:	4671      	mov	r1, lr
 801d4a4:	4576      	cmp	r6, lr
 801d4a6:	dc67      	bgt.n	801d578 <__kernel_rem_pio2f+0x228>
 801d4a8:	2d00      	cmp	r5, #0
 801d4aa:	dd03      	ble.n	801d4b4 <__kernel_rem_pio2f+0x164>
 801d4ac:	2d01      	cmp	r5, #1
 801d4ae:	d074      	beq.n	801d59a <__kernel_rem_pio2f+0x24a>
 801d4b0:	2d02      	cmp	r5, #2
 801d4b2:	d07b      	beq.n	801d5ac <__kernel_rem_pio2f+0x25c>
 801d4b4:	2f02      	cmp	r7, #2
 801d4b6:	d12d      	bne.n	801d514 <__kernel_rem_pio2f+0x1c4>
 801d4b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d4bc:	ee30 8a48 	vsub.f32	s16, s0, s16
 801d4c0:	b341      	cbz	r1, 801d514 <__kernel_rem_pio2f+0x1c4>
 801d4c2:	4628      	mov	r0, r5
 801d4c4:	9207      	str	r2, [sp, #28]
 801d4c6:	f000 f9f7 	bl	801d8b8 <scalbnf>
 801d4ca:	9a07      	ldr	r2, [sp, #28]
 801d4cc:	ee38 8a40 	vsub.f32	s16, s16, s0
 801d4d0:	e020      	b.n	801d514 <__kernel_rem_pio2f+0x1c4>
 801d4d2:	ee60 7a28 	vmul.f32	s15, s0, s17
 801d4d6:	3f01      	subs	r7, #1
 801d4d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d4dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d4e0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801d4e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d4e8:	ecac 0a01 	vstmia	ip!, {s0}
 801d4ec:	ed90 0a00 	vldr	s0, [r0]
 801d4f0:	ee37 0a80 	vadd.f32	s0, s15, s0
 801d4f4:	e79e      	b.n	801d434 <__kernel_rem_pio2f+0xe4>
 801d4f6:	d105      	bne.n	801d504 <__kernel_rem_pio2f+0x1b4>
 801d4f8:	1e70      	subs	r0, r6, #1
 801d4fa:	ab08      	add	r3, sp, #32
 801d4fc:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801d500:	11ff      	asrs	r7, r7, #7
 801d502:	e7c8      	b.n	801d496 <__kernel_rem_pio2f+0x146>
 801d504:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d508:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d510:	da30      	bge.n	801d574 <__kernel_rem_pio2f+0x224>
 801d512:	2700      	movs	r7, #0
 801d514:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801d518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d51c:	f040 809a 	bne.w	801d654 <__kernel_rem_pio2f+0x304>
 801d520:	1e74      	subs	r4, r6, #1
 801d522:	46a4      	mov	ip, r4
 801d524:	2100      	movs	r1, #0
 801d526:	45d4      	cmp	ip, sl
 801d528:	da47      	bge.n	801d5ba <__kernel_rem_pio2f+0x26a>
 801d52a:	2900      	cmp	r1, #0
 801d52c:	d063      	beq.n	801d5f6 <__kernel_rem_pio2f+0x2a6>
 801d52e:	ab08      	add	r3, sp, #32
 801d530:	3d08      	subs	r5, #8
 801d532:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d536:	2b00      	cmp	r3, #0
 801d538:	d07f      	beq.n	801d63a <__kernel_rem_pio2f+0x2ea>
 801d53a:	4628      	mov	r0, r5
 801d53c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d540:	f000 f9ba 	bl	801d8b8 <scalbnf>
 801d544:	1c63      	adds	r3, r4, #1
 801d546:	aa44      	add	r2, sp, #272	; 0x110
 801d548:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801d64c <__kernel_rem_pio2f+0x2fc>
 801d54c:	0099      	lsls	r1, r3, #2
 801d54e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d552:	4623      	mov	r3, r4
 801d554:	2b00      	cmp	r3, #0
 801d556:	f280 80ad 	bge.w	801d6b4 <__kernel_rem_pio2f+0x364>
 801d55a:	4623      	mov	r3, r4
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	f2c0 80cb 	blt.w	801d6f8 <__kernel_rem_pio2f+0x3a8>
 801d562:	aa44      	add	r2, sp, #272	; 0x110
 801d564:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801d568:	4e36      	ldr	r6, [pc, #216]	; (801d644 <__kernel_rem_pio2f+0x2f4>)
 801d56a:	eddf 7a39 	vldr	s15, [pc, #228]	; 801d650 <__kernel_rem_pio2f+0x300>
 801d56e:	2000      	movs	r0, #0
 801d570:	1ae2      	subs	r2, r4, r3
 801d572:	e0b6      	b.n	801d6e2 <__kernel_rem_pio2f+0x392>
 801d574:	2702      	movs	r7, #2
 801d576:	e790      	b.n	801d49a <__kernel_rem_pio2f+0x14a>
 801d578:	6820      	ldr	r0, [r4, #0]
 801d57a:	b949      	cbnz	r1, 801d590 <__kernel_rem_pio2f+0x240>
 801d57c:	b118      	cbz	r0, 801d586 <__kernel_rem_pio2f+0x236>
 801d57e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801d582:	6020      	str	r0, [r4, #0]
 801d584:	2001      	movs	r0, #1
 801d586:	f10e 0e01 	add.w	lr, lr, #1
 801d58a:	3404      	adds	r4, #4
 801d58c:	4601      	mov	r1, r0
 801d58e:	e789      	b.n	801d4a4 <__kernel_rem_pio2f+0x154>
 801d590:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801d594:	6020      	str	r0, [r4, #0]
 801d596:	4608      	mov	r0, r1
 801d598:	e7f5      	b.n	801d586 <__kernel_rem_pio2f+0x236>
 801d59a:	1e74      	subs	r4, r6, #1
 801d59c:	ab08      	add	r3, sp, #32
 801d59e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d5a2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801d5a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801d5aa:	e783      	b.n	801d4b4 <__kernel_rem_pio2f+0x164>
 801d5ac:	1e74      	subs	r4, r6, #1
 801d5ae:	ab08      	add	r3, sp, #32
 801d5b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d5b4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801d5b8:	e7f5      	b.n	801d5a6 <__kernel_rem_pio2f+0x256>
 801d5ba:	ab08      	add	r3, sp, #32
 801d5bc:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801d5c0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801d5c4:	4301      	orrs	r1, r0
 801d5c6:	e7ae      	b.n	801d526 <__kernel_rem_pio2f+0x1d6>
 801d5c8:	3001      	adds	r0, #1
 801d5ca:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801d5ce:	2f00      	cmp	r7, #0
 801d5d0:	d0fa      	beq.n	801d5c8 <__kernel_rem_pio2f+0x278>
 801d5d2:	9b06      	ldr	r3, [sp, #24]
 801d5d4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801d5d8:	eb0d 0403 	add.w	r4, sp, r3
 801d5dc:	9b01      	ldr	r3, [sp, #4]
 801d5de:	18f7      	adds	r7, r6, r3
 801d5e0:	ab1c      	add	r3, sp, #112	; 0x70
 801d5e2:	f106 0c01 	add.w	ip, r6, #1
 801d5e6:	3c4c      	subs	r4, #76	; 0x4c
 801d5e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d5ec:	4430      	add	r0, r6
 801d5ee:	4560      	cmp	r0, ip
 801d5f0:	da04      	bge.n	801d5fc <__kernel_rem_pio2f+0x2ac>
 801d5f2:	4606      	mov	r6, r0
 801d5f4:	e711      	b.n	801d41a <__kernel_rem_pio2f+0xca>
 801d5f6:	9c05      	ldr	r4, [sp, #20]
 801d5f8:	2001      	movs	r0, #1
 801d5fa:	e7e6      	b.n	801d5ca <__kernel_rem_pio2f+0x27a>
 801d5fc:	9b04      	ldr	r3, [sp, #16]
 801d5fe:	f8dd e008 	ldr.w	lr, [sp, #8]
 801d602:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801d606:	9306      	str	r3, [sp, #24]
 801d608:	ee07 3a90 	vmov	s15, r3
 801d60c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d610:	2600      	movs	r6, #0
 801d612:	ece7 7a01 	vstmia	r7!, {s15}
 801d616:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801d650 <__kernel_rem_pio2f+0x300>
 801d61a:	46b9      	mov	r9, r7
 801d61c:	455e      	cmp	r6, fp
 801d61e:	dd04      	ble.n	801d62a <__kernel_rem_pio2f+0x2da>
 801d620:	ece4 7a01 	vstmia	r4!, {s15}
 801d624:	f10c 0c01 	add.w	ip, ip, #1
 801d628:	e7e1      	b.n	801d5ee <__kernel_rem_pio2f+0x29e>
 801d62a:	ecfe 6a01 	vldmia	lr!, {s13}
 801d62e:	ed39 7a01 	vldmdb	r9!, {s14}
 801d632:	3601      	adds	r6, #1
 801d634:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d638:	e7f0      	b.n	801d61c <__kernel_rem_pio2f+0x2cc>
 801d63a:	3c01      	subs	r4, #1
 801d63c:	e777      	b.n	801d52e <__kernel_rem_pio2f+0x1de>
 801d63e:	bf00      	nop
 801d640:	0801f6a4 	.word	0x0801f6a4
 801d644:	0801f678 	.word	0x0801f678
 801d648:	43800000 	.word	0x43800000
 801d64c:	3b800000 	.word	0x3b800000
 801d650:	00000000 	.word	0x00000000
 801d654:	9b03      	ldr	r3, [sp, #12]
 801d656:	eeb0 0a48 	vmov.f32	s0, s16
 801d65a:	1a98      	subs	r0, r3, r2
 801d65c:	f000 f92c 	bl	801d8b8 <scalbnf>
 801d660:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801d648 <__kernel_rem_pio2f+0x2f8>
 801d664:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801d668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d66c:	db19      	blt.n	801d6a2 <__kernel_rem_pio2f+0x352>
 801d66e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801d64c <__kernel_rem_pio2f+0x2fc>
 801d672:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d676:	aa08      	add	r2, sp, #32
 801d678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d67c:	1c74      	adds	r4, r6, #1
 801d67e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d682:	3508      	adds	r5, #8
 801d684:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801d688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d68c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d690:	ee10 3a10 	vmov	r3, s0
 801d694:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801d698:	ee17 3a90 	vmov	r3, s15
 801d69c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801d6a0:	e74b      	b.n	801d53a <__kernel_rem_pio2f+0x1ea>
 801d6a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d6a6:	aa08      	add	r2, sp, #32
 801d6a8:	ee10 3a10 	vmov	r3, s0
 801d6ac:	4634      	mov	r4, r6
 801d6ae:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801d6b2:	e742      	b.n	801d53a <__kernel_rem_pio2f+0x1ea>
 801d6b4:	a808      	add	r0, sp, #32
 801d6b6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801d6ba:	9001      	str	r0, [sp, #4]
 801d6bc:	ee07 0a90 	vmov	s15, r0
 801d6c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d6c4:	3b01      	subs	r3, #1
 801d6c6:	ee67 7a80 	vmul.f32	s15, s15, s0
 801d6ca:	ee20 0a07 	vmul.f32	s0, s0, s14
 801d6ce:	ed62 7a01 	vstmdb	r2!, {s15}
 801d6d2:	e73f      	b.n	801d554 <__kernel_rem_pio2f+0x204>
 801d6d4:	ecf6 6a01 	vldmia	r6!, {s13}
 801d6d8:	ecb5 7a01 	vldmia	r5!, {s14}
 801d6dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d6e0:	3001      	adds	r0, #1
 801d6e2:	4550      	cmp	r0, sl
 801d6e4:	dc01      	bgt.n	801d6ea <__kernel_rem_pio2f+0x39a>
 801d6e6:	4290      	cmp	r0, r2
 801d6e8:	ddf4      	ble.n	801d6d4 <__kernel_rem_pio2f+0x384>
 801d6ea:	a858      	add	r0, sp, #352	; 0x160
 801d6ec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801d6f0:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801d6f4:	3b01      	subs	r3, #1
 801d6f6:	e731      	b.n	801d55c <__kernel_rem_pio2f+0x20c>
 801d6f8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801d6fa:	2b02      	cmp	r3, #2
 801d6fc:	dc09      	bgt.n	801d712 <__kernel_rem_pio2f+0x3c2>
 801d6fe:	2b00      	cmp	r3, #0
 801d700:	dc2b      	bgt.n	801d75a <__kernel_rem_pio2f+0x40a>
 801d702:	d044      	beq.n	801d78e <__kernel_rem_pio2f+0x43e>
 801d704:	f009 0007 	and.w	r0, r9, #7
 801d708:	b059      	add	sp, #356	; 0x164
 801d70a:	ecbd 8b04 	vpop	{d8-d9}
 801d70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d712:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801d714:	2b03      	cmp	r3, #3
 801d716:	d1f5      	bne.n	801d704 <__kernel_rem_pio2f+0x3b4>
 801d718:	aa30      	add	r2, sp, #192	; 0xc0
 801d71a:	1f0b      	subs	r3, r1, #4
 801d71c:	4413      	add	r3, r2
 801d71e:	461a      	mov	r2, r3
 801d720:	4620      	mov	r0, r4
 801d722:	2800      	cmp	r0, #0
 801d724:	f1a2 0204 	sub.w	r2, r2, #4
 801d728:	dc52      	bgt.n	801d7d0 <__kernel_rem_pio2f+0x480>
 801d72a:	4622      	mov	r2, r4
 801d72c:	2a01      	cmp	r2, #1
 801d72e:	f1a3 0304 	sub.w	r3, r3, #4
 801d732:	dc5d      	bgt.n	801d7f0 <__kernel_rem_pio2f+0x4a0>
 801d734:	ab30      	add	r3, sp, #192	; 0xc0
 801d736:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801d650 <__kernel_rem_pio2f+0x300>
 801d73a:	440b      	add	r3, r1
 801d73c:	2c01      	cmp	r4, #1
 801d73e:	dc67      	bgt.n	801d810 <__kernel_rem_pio2f+0x4c0>
 801d740:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801d744:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801d748:	2f00      	cmp	r7, #0
 801d74a:	d167      	bne.n	801d81c <__kernel_rem_pio2f+0x4cc>
 801d74c:	edc8 6a00 	vstr	s13, [r8]
 801d750:	ed88 7a01 	vstr	s14, [r8, #4]
 801d754:	edc8 7a02 	vstr	s15, [r8, #8]
 801d758:	e7d4      	b.n	801d704 <__kernel_rem_pio2f+0x3b4>
 801d75a:	ab30      	add	r3, sp, #192	; 0xc0
 801d75c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801d650 <__kernel_rem_pio2f+0x300>
 801d760:	440b      	add	r3, r1
 801d762:	4622      	mov	r2, r4
 801d764:	2a00      	cmp	r2, #0
 801d766:	da24      	bge.n	801d7b2 <__kernel_rem_pio2f+0x462>
 801d768:	b34f      	cbz	r7, 801d7be <__kernel_rem_pio2f+0x46e>
 801d76a:	eef1 7a47 	vneg.f32	s15, s14
 801d76e:	edc8 7a00 	vstr	s15, [r8]
 801d772:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801d776:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d77a:	aa31      	add	r2, sp, #196	; 0xc4
 801d77c:	2301      	movs	r3, #1
 801d77e:	429c      	cmp	r4, r3
 801d780:	da20      	bge.n	801d7c4 <__kernel_rem_pio2f+0x474>
 801d782:	b10f      	cbz	r7, 801d788 <__kernel_rem_pio2f+0x438>
 801d784:	eef1 7a67 	vneg.f32	s15, s15
 801d788:	edc8 7a01 	vstr	s15, [r8, #4]
 801d78c:	e7ba      	b.n	801d704 <__kernel_rem_pio2f+0x3b4>
 801d78e:	ab30      	add	r3, sp, #192	; 0xc0
 801d790:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801d650 <__kernel_rem_pio2f+0x300>
 801d794:	440b      	add	r3, r1
 801d796:	2c00      	cmp	r4, #0
 801d798:	da05      	bge.n	801d7a6 <__kernel_rem_pio2f+0x456>
 801d79a:	b10f      	cbz	r7, 801d7a0 <__kernel_rem_pio2f+0x450>
 801d79c:	eef1 7a67 	vneg.f32	s15, s15
 801d7a0:	edc8 7a00 	vstr	s15, [r8]
 801d7a4:	e7ae      	b.n	801d704 <__kernel_rem_pio2f+0x3b4>
 801d7a6:	ed33 7a01 	vldmdb	r3!, {s14}
 801d7aa:	3c01      	subs	r4, #1
 801d7ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d7b0:	e7f1      	b.n	801d796 <__kernel_rem_pio2f+0x446>
 801d7b2:	ed73 7a01 	vldmdb	r3!, {s15}
 801d7b6:	3a01      	subs	r2, #1
 801d7b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d7bc:	e7d2      	b.n	801d764 <__kernel_rem_pio2f+0x414>
 801d7be:	eef0 7a47 	vmov.f32	s15, s14
 801d7c2:	e7d4      	b.n	801d76e <__kernel_rem_pio2f+0x41e>
 801d7c4:	ecb2 7a01 	vldmia	r2!, {s14}
 801d7c8:	3301      	adds	r3, #1
 801d7ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d7ce:	e7d6      	b.n	801d77e <__kernel_rem_pio2f+0x42e>
 801d7d0:	edd2 7a00 	vldr	s15, [r2]
 801d7d4:	edd2 6a01 	vldr	s13, [r2, #4]
 801d7d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d7dc:	3801      	subs	r0, #1
 801d7de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d7e2:	ed82 7a00 	vstr	s14, [r2]
 801d7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d7ea:	edc2 7a01 	vstr	s15, [r2, #4]
 801d7ee:	e798      	b.n	801d722 <__kernel_rem_pio2f+0x3d2>
 801d7f0:	edd3 7a00 	vldr	s15, [r3]
 801d7f4:	edd3 6a01 	vldr	s13, [r3, #4]
 801d7f8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d7fc:	3a01      	subs	r2, #1
 801d7fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d802:	ed83 7a00 	vstr	s14, [r3]
 801d806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d80a:	edc3 7a01 	vstr	s15, [r3, #4]
 801d80e:	e78d      	b.n	801d72c <__kernel_rem_pio2f+0x3dc>
 801d810:	ed33 7a01 	vldmdb	r3!, {s14}
 801d814:	3c01      	subs	r4, #1
 801d816:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d81a:	e78f      	b.n	801d73c <__kernel_rem_pio2f+0x3ec>
 801d81c:	eef1 6a66 	vneg.f32	s13, s13
 801d820:	eeb1 7a47 	vneg.f32	s14, s14
 801d824:	edc8 6a00 	vstr	s13, [r8]
 801d828:	ed88 7a01 	vstr	s14, [r8, #4]
 801d82c:	eef1 7a67 	vneg.f32	s15, s15
 801d830:	e790      	b.n	801d754 <__kernel_rem_pio2f+0x404>
 801d832:	bf00      	nop

0801d834 <floorf>:
 801d834:	ee10 3a10 	vmov	r3, s0
 801d838:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801d83c:	3a7f      	subs	r2, #127	; 0x7f
 801d83e:	2a16      	cmp	r2, #22
 801d840:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801d844:	dc2a      	bgt.n	801d89c <floorf+0x68>
 801d846:	2a00      	cmp	r2, #0
 801d848:	da11      	bge.n	801d86e <floorf+0x3a>
 801d84a:	eddf 7a18 	vldr	s15, [pc, #96]	; 801d8ac <floorf+0x78>
 801d84e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d852:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d85a:	dd05      	ble.n	801d868 <floorf+0x34>
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	da23      	bge.n	801d8a8 <floorf+0x74>
 801d860:	4a13      	ldr	r2, [pc, #76]	; (801d8b0 <floorf+0x7c>)
 801d862:	2900      	cmp	r1, #0
 801d864:	bf18      	it	ne
 801d866:	4613      	movne	r3, r2
 801d868:	ee00 3a10 	vmov	s0, r3
 801d86c:	4770      	bx	lr
 801d86e:	4911      	ldr	r1, [pc, #68]	; (801d8b4 <floorf+0x80>)
 801d870:	4111      	asrs	r1, r2
 801d872:	420b      	tst	r3, r1
 801d874:	d0fa      	beq.n	801d86c <floorf+0x38>
 801d876:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801d8ac <floorf+0x78>
 801d87a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d87e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d886:	ddef      	ble.n	801d868 <floorf+0x34>
 801d888:	2b00      	cmp	r3, #0
 801d88a:	bfbe      	ittt	lt
 801d88c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801d890:	fa40 f202 	asrlt.w	r2, r0, r2
 801d894:	189b      	addlt	r3, r3, r2
 801d896:	ea23 0301 	bic.w	r3, r3, r1
 801d89a:	e7e5      	b.n	801d868 <floorf+0x34>
 801d89c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801d8a0:	d3e4      	bcc.n	801d86c <floorf+0x38>
 801d8a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d8a6:	4770      	bx	lr
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	e7dd      	b.n	801d868 <floorf+0x34>
 801d8ac:	7149f2ca 	.word	0x7149f2ca
 801d8b0:	bf800000 	.word	0xbf800000
 801d8b4:	007fffff 	.word	0x007fffff

0801d8b8 <scalbnf>:
 801d8b8:	ee10 3a10 	vmov	r3, s0
 801d8bc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801d8c0:	d02b      	beq.n	801d91a <scalbnf+0x62>
 801d8c2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801d8c6:	d302      	bcc.n	801d8ce <scalbnf+0x16>
 801d8c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d8cc:	4770      	bx	lr
 801d8ce:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801d8d2:	d123      	bne.n	801d91c <scalbnf+0x64>
 801d8d4:	4b24      	ldr	r3, [pc, #144]	; (801d968 <scalbnf+0xb0>)
 801d8d6:	eddf 7a25 	vldr	s15, [pc, #148]	; 801d96c <scalbnf+0xb4>
 801d8da:	4298      	cmp	r0, r3
 801d8dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d8e0:	db17      	blt.n	801d912 <scalbnf+0x5a>
 801d8e2:	ee10 3a10 	vmov	r3, s0
 801d8e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801d8ea:	3a19      	subs	r2, #25
 801d8ec:	f24c 3150 	movw	r1, #50000	; 0xc350
 801d8f0:	4288      	cmp	r0, r1
 801d8f2:	dd15      	ble.n	801d920 <scalbnf+0x68>
 801d8f4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801d970 <scalbnf+0xb8>
 801d8f8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801d974 <scalbnf+0xbc>
 801d8fc:	ee10 3a10 	vmov	r3, s0
 801d900:	eeb0 7a67 	vmov.f32	s14, s15
 801d904:	2b00      	cmp	r3, #0
 801d906:	bfb8      	it	lt
 801d908:	eef0 7a66 	vmovlt.f32	s15, s13
 801d90c:	ee27 0a87 	vmul.f32	s0, s15, s14
 801d910:	4770      	bx	lr
 801d912:	eddf 7a19 	vldr	s15, [pc, #100]	; 801d978 <scalbnf+0xc0>
 801d916:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d91a:	4770      	bx	lr
 801d91c:	0dd2      	lsrs	r2, r2, #23
 801d91e:	e7e5      	b.n	801d8ec <scalbnf+0x34>
 801d920:	4410      	add	r0, r2
 801d922:	28fe      	cmp	r0, #254	; 0xfe
 801d924:	dce6      	bgt.n	801d8f4 <scalbnf+0x3c>
 801d926:	2800      	cmp	r0, #0
 801d928:	dd06      	ble.n	801d938 <scalbnf+0x80>
 801d92a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d92e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801d932:	ee00 3a10 	vmov	s0, r3
 801d936:	4770      	bx	lr
 801d938:	f110 0f16 	cmn.w	r0, #22
 801d93c:	da09      	bge.n	801d952 <scalbnf+0x9a>
 801d93e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801d978 <scalbnf+0xc0>
 801d942:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801d97c <scalbnf+0xc4>
 801d946:	ee10 3a10 	vmov	r3, s0
 801d94a:	eeb0 7a67 	vmov.f32	s14, s15
 801d94e:	2b00      	cmp	r3, #0
 801d950:	e7d9      	b.n	801d906 <scalbnf+0x4e>
 801d952:	3019      	adds	r0, #25
 801d954:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d958:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801d95c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801d980 <scalbnf+0xc8>
 801d960:	ee07 3a90 	vmov	s15, r3
 801d964:	e7d7      	b.n	801d916 <scalbnf+0x5e>
 801d966:	bf00      	nop
 801d968:	ffff3cb0 	.word	0xffff3cb0
 801d96c:	4c000000 	.word	0x4c000000
 801d970:	7149f2ca 	.word	0x7149f2ca
 801d974:	f149f2ca 	.word	0xf149f2ca
 801d978:	0da24260 	.word	0x0da24260
 801d97c:	8da24260 	.word	0x8da24260
 801d980:	33000000 	.word	0x33000000

0801d984 <_init>:
 801d984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d986:	bf00      	nop
 801d988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d98a:	bc08      	pop	{r3}
 801d98c:	469e      	mov	lr, r3
 801d98e:	4770      	bx	lr

0801d990 <_fini>:
 801d990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d992:	bf00      	nop
 801d994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d996:	bc08      	pop	{r3}
 801d998:	469e      	mov	lr, r3
 801d99a:	4770      	bx	lr
